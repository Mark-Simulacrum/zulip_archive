[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> the PR <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/220\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/220\">ucg#220</a> only provides the guarantee for tuples, tuple structs and arrays</p>",
        "id": 182696925,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575627
    },
    {
        "content": "<p>resolving <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/36\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/36\">ucg#36</a> as this guarantee not being provided for structs</p>",
        "id": 182696984,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575644
    },
    {
        "content": "<p>I personally would prefer to just say something like:</p>\n<blockquote>\n<p>All homogeneous aggregates of the same <code>repr</code> and length share the same layout.</p>\n</blockquote>",
        "id": 182697016,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575666
    },
    {
        "content": "<p>I see nothing about tuple structs in that diff</p>",
        "id": 182697087,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575575708
    },
    {
        "content": "<p>Tuples are defined as tuple structs in libcore IIRC</p>",
        "id": 182697113,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575724
    },
    {
        "content": "<p>They are not, but that doesn't relate to what I said anyway</p>",
        "id": 182697162,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575575750
    },
    {
        "content": "<p>The diff only provides a guarantee for tuples, not for tuple structs</p>",
        "id": 182697259,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575575779
    },
    {
        "content": "<blockquote>\n<p>an anonymous tuple type <code>(T1..Tn)</code> of arity N is laid out \"as if\" there were a corresponding tuple struct declared in libcore</p>\n</blockquote>",
        "id": 182697281,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575789
    },
    {
        "content": "<p>Oh that's what you mean</p>",
        "id": 182697291,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575575799
    },
    {
        "content": "<p>But still, the diff only provides a guarantee for tuples, not tuple structs in general</p>",
        "id": 182697336,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575575823
    },
    {
        "content": "<p>So if the layout of arrays and anonymous tuples match, so does the layout of arrays and tuple structs</p>",
        "id": 182697353,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575831
    },
    {
        "content": "<p>otherwise, anonymous tuples cannot be laid out as tuple structs anymore</p>",
        "id": 182697371,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575844
    },
    {
        "content": "<p>That might mean your diff is contradictory as is but it still doesn't say anything about tuple structs</p>",
        "id": 182697400,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575575882
    },
    {
        "content": "<p>I could add \"homogeneous tuples and homogeneous tuple structs\" to make that clearer</p>",
        "id": 182697441,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575884
    },
    {
        "content": "<p>My diff doesn't say anything about tuple structs because it doesn't have to</p>",
        "id": 182697459,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575899
    },
    {
        "content": "<p>We have already specified that the layout of anonymous tuples and tuple structs is exactly the same</p>",
        "id": 182697486,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575918
    },
    {
        "content": "<p>Or at least, that's how I understood that sentence.</p>",
        "id": 182697511,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575932
    },
    {
        "content": "<p>Maybe that wasn't the intent, and two identically defined tuple structs are allowed to have different layouts? No idea.</p>",
        "id": 182697546,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575575949
    },
    {
        "content": "<p>It says tuples are like particular tuple structs, but tuple struct layout is still generally not defined, so structurally identical tuple structs can have different layout</p>",
        "id": 182697684,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575576006
    },
    {
        "content": "<p>Ah, ok.</p>",
        "id": 182697764,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575576066
    },
    {
        "content": "<p>But none of what you propose has any consensus anyway</p>",
        "id": 182697798,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575576087
    },
    {
        "content": "<p>Then I think we should just say something about homogeneous aggregates in general, because if I say something about tuple structs, then I'm also saying something about structs.</p>",
        "id": 182697811,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575576101
    },
    {
        "content": "<p>(tuple structs are just structs with fields named after the integers)</p>",
        "id": 182697842,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575576116
    },
    {
        "content": "<p>I really don't want to open that controversial discussion again. It's not even the current active topic and I don't expect we'd get consensus this time around</p>",
        "id": 182698052,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575576237
    },
    {
        "content": "<p>What is the controversy in <a href=\"https://github.com/rust-lang/rust/issues/36\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/36\">#36</a> ?</p>",
        "id": 182698590,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575576598
    },
    {
        "content": "<p>The main arguments against guaranteeing the layout of homogeneous aggregates was PGO or raising the alignment, but it was proposed that doing that could be done using specific repr attributes (e.g. <code>repr(opt)</code>) or similar, which IMO makes sense.</p>",
        "id": 182698712,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575576654
    },
    {
        "content": "<p>With all due respect for your personal preferences, we've had plenty of comments explicitly not being convinced by that proposal since it was made</p>",
        "id": 182698837,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575576726
    },
    {
        "content": "<p>And fwiw we also haven't made layout of other structs \"deterministic w.r.t. field types\"/structural because of the exact same concerns.</p>",
        "id": 182699095,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575576931
    },
    {
        "content": "<p>The only concerns I see broken by the definition are:</p>\n<ul>\n<li>being able to re-order fields of homogeneous structs (e.g. using PGO to avoid false-sharing, or put hot fields together)</li>\n<li>having to define what homogeneous mean</li>\n<li>possible performance gap between homogeneous and heterogeneous aggregates</li>\n</ul>",
        "id": 182699796,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575577373
    },
    {
        "content": "<p>Are there any others ?</p>",
        "id": 182699811,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575577384
    },
    {
        "content": "<p>There are others but what you've listed is already <em>plenty</em></p>",
        "id": 182700126,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575577603
    },
    {
        "content": "<p>By that I mean there is absolutely no basis for nailing down their layout atm, it will require more consensus building, and IMO this is absolutely not a good use of anyone's time at the moment</p>",
        "id": 182700170,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575577637
    },
    {
        "content": "<p>Using PGO to avoid false-sharing is horrible, defining what homogeneous means is trivial, and for there to be a possible performance gap between homogeneous and heterogeneous aggregates somebody would need to mention an optimization that would be possible for heterogeneous aggregates that wouldn't be possible for homogeneous ones.</p>",
        "id": 182700312,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575577735
    },
    {
        "content": "<p>The only one that has been mentioned is field-reordering via PGO.</p>",
        "id": 182700344,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575577773
    },
    {
        "content": "<p>That's not true (just off the top of my head there's field randomization and raising alignment) but more importantly, as I said before, if we let things like hypothetical possibility of PGO stop us from nailing down layout of general structs further (and that's the status quo, like it or not!) then it should also stop us from nailing down layout of homogeneous structs specifically, because there's no reason PGO would apply any less to those structs.</p>",
        "id": 182701948,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575578961
    },
    {
        "content": "<p>I've replied to the issue with a summary</p>",
        "id": 182706709,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575581509
    },
    {
        "content": "<p>If we guarantee the field order for these types, then code that relies on that is correct, so I wasn't sure what the point of field randomization would be (it would break correct code).</p>",
        "id": 182706824,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575581554
    },
    {
        "content": "<p>Raising the alignment up to the size is allowed. Raising the alignment beyond the size has the consequence of increasing the size of the aggregate.</p>",
        "id": 182706949,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575581629
    },
    {
        "content": "<p>That might be worth it in some cases, but can be done with <code>#[repr(align())]</code>, and instead of doing this silently, e.g., with PGO, we could just tell the user \"If you want faster code add <code>repr(align(N))</code> here.</p>",
        "id": 182707024,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575581653
    },
    {
        "content": "<p>Field re-ordering due to PGO still sounds to me like the best reason for not doing this, and I get the point that if it is not worth it for homogeneous struct, why would it be worth it for heterogeneous ones?</p>",
        "id": 182707223,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575581780
    },
    {
        "content": "<p>Jesus, are you still at it? I would like more layout guarantees too but why the hell dig this specific thing up now? Either nobody bites and we don't get discussion and consensus, in which case all of this is a waste of time, or there's a huge discussion again and that is really not what UCG time should be spent on when even the current <em>active</em> topic (validity) is in limbo. Even assuming we end up with consensus.</p>",
        "id": 182707332,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575581856
    },
    {
        "content": "<blockquote>\n<p>I would like more layout guarantees too but why the hell dig this specific thing up now?</p>\n</blockquote>\n<p>I was looking into safe transmutes, and ran into transmuting anonymous tuples into anything is unsound.</p>",
        "id": 182707547,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575581960
    },
    {
        "content": "<p>I think it's sufficient for tuples to be unspecified because anyone who cares can make a struct with repr(C) on it</p>",
        "id": 182707769,
        "sender_full_name": "Lokathor",
        "timestamp": 1575582089
    },
    {
        "content": "<p>That explains how the topic got your attention again, but not why it should be pursued so aggressively now. Nothing about any safe transmute design hinges on tuples specifically, some trait impls get added if/when tuple layout is defined and not having those impls affects nothing except the ability to transmute tuples (which is also impossible to do unsafely for lack of layout guarantees, so it's not a safe-transmute-specific problem)</p>",
        "id": 182707949,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575582172
    },
    {
        "content": "<blockquote>\n<p>hypothetical possibility of PGO stop us from nailing down layout of general structs further (and that's the status quo, like it or not!) then it should also stop us from nailing down layout of homogeneous structs specifically, because there's no reason PGO would apply any less to those structs.</p>\n</blockquote>\n<p>Beyond PGO, the layout of heterogeneous aggregates is also blocked on things like variadics, e.g., do we want to support slicing &amp;(A, B, C) into &amp;(A, b) and &amp;(B, C) )? Since that limits whether we can re-order the fields to reduce padding or not.</p>",
        "id": 182708019,
        "sender_full_name": "gnzlbg",
        "timestamp": 1575582221
    },
    {
        "content": "<p>I'm opting out now (and muting this thread so I stick to it), I think I've made clear that I consider spending any time on this topic at this time is ill-advised and I've spent entirely too much time on it already</p>",
        "id": 182708305,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1575582375
    }
]