[
    {
        "content": "<p>I have some questions about when raw pointers are invalidated, based on comments by <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> in <a href=\"https://github.com/servo/rust-smallvec/pull/213\" title=\"https://github.com/servo/rust-smallvec/pull/213\">https://github.com/servo/rust-smallvec/pull/213</a></p>\n<p>This extremely minimal case does not cause a MIRI error. Should it? <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f3b2679b6c99a4ce21fc45079b6d2a05\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f3b2679b6c99a4ce21fc45079b6d2a05\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f3b2679b6c99a4ce21fc45079b6d2a05</a></p>",
        "id": 195093081,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1587662452
    },
    {
        "content": "<p>Even this version passes MIRI, so it's not just that the previous version somehow avoids \"actually\" creating an <code>&amp;mut</code>:<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e25d3f2a318af941fbdd332d57f9346a\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e25d3f2a318af941fbdd332d57f9346a\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e25d3f2a318af941fbdd332d57f9346a</a></p>",
        "id": 195094313,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1587663003
    },
    {
        "content": "<p>If I'm understanding this behavior right, creating a new Unique borrow  invalidates the previous raw pointer (clearing the borrow stack), but then the cast from <code>&amp;mut</code> to <code>*mut</code> retags this borrow, so the stack is now <code>[(Untagged: SharedReadWrite)]</code> again, and this makes the previously-invalidated raw pointer valid again:</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bae8fa79cc8c5d1023e8cbd11a050ca6\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bae8fa79cc8c5d1023e8cbd11a050ca6\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bae8fa79cc8c5d1023e8cbd11a050ca6</a></p>",
        "id": 195096935,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1587664407
    },
    {
        "content": "<p>Yes, that first write to <code>p0</code> should invalidate <code>p1</code>. MIRI doesn't track raw pointers as well as it should, so MIRI doesn't detect these sorts of aliasing bugs yet.</p>",
        "id": 195111394,
        "sender_full_name": "Yato",
        "timestamp": 1587671642
    },
    {
        "content": "<blockquote>\n<p>If I'm understanding this behavior right, creating a new Unique borrow invalidates the previous raw pointer (clearing the borrow stack), but then the cast from &amp;mut to *mut retags this borrow, so the stack is now [(Untagged: SharedReadWrite)] again, and this makes the previously-invalidated raw pointer valid again:</p>\n</blockquote>\n<p>Yes, all raw pointers have the same tag (which is untagged) right now, so making a new raw pointer to the same location revives old raw pointers incorrectly.</p>",
        "id": 195111476,
        "sender_full_name": "Yato",
        "timestamp": 1587671679
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 195112011,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1587671982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270999\">@Matt Brubeck</span> note however that to match what LLVM does with <code>noalias</code>, we need to eventually also track raw pointers better</p>",
        "id": 195191556,
        "sender_full_name": "RalfJ",
        "timestamp": 1587736839
    },
    {
        "content": "<p>and then that kind of code would stop working</p>",
        "id": 195191565,
        "sender_full_name": "RalfJ",
        "timestamp": 1587736844
    },
    {
        "content": "<p>the trouble is that we have to somehow stop tracking around ptr-to-int-casts, otherwise we break code that is definitely correct. <a href=\"https://bugs.llvm.org/show_bug.cgi?id=35229\" title=\"https://bugs.llvm.org/show_bug.cgi?id=35229\">LLVM gets this wrong</a>, though, and it is unclear what the best approach is here (\"unclear\" as in \"this is an area of PL research\").</p>",
        "id": 195191761,
        "sender_full_name": "RalfJ",
        "timestamp": 1587736925
    },
    {
        "content": "<p>Got it, thanks.</p>",
        "id": 195194236,
        "sender_full_name": "Matt Brubeck",
        "timestamp": 1587737995
    }
]