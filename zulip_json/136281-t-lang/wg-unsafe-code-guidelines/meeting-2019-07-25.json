[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"810\">@WG-unsafe-code-guidelines</span> !</p>",
        "id": 171700386,
        "sender_full_name": "RalfJ",
        "timestamp": 1564067849
    },
    {
        "content": "<p>let's see who shows up this time... ;)</p>",
        "id": 171700401,
        "sender_full_name": "RalfJ",
        "timestamp": 1564067859
    },
    {
        "content": "<p>i'm here !</p>",
        "id": 171700407,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564067864
    },
    {
        "content": "<p>you didnt melt yet?</p>",
        "id": 171700427,
        "sender_full_name": "RalfJ",
        "timestamp": 1564067881
    },
    {
        "content": "<p>more like testing how far i can melt</p>",
        "id": 171700494,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564067913
    },
    {
        "content": "<p>munich is only 34C, <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> should have like almost 40C at KIT if they are there</p>",
        "id": 171700547,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564067973
    },
    {
        "content": "<p>pretty sure they are winning the melting competition</p>",
        "id": 171700571,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564067990
    },
    {
        "content": "<p>yeah 40C is also announced for Saarbrücken</p>",
        "id": 171700578,
        "sender_full_name": "RalfJ",
        "timestamp": 1564067998
    },
    {
        "content": "<p>right now its around 39</p>",
        "id": 171700651,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068025
    },
    {
        "content": "<p>lucky thing is I was at a music festival last weekend, at it was like 26 or so</p>",
        "id": 171700669,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068038
    },
    {
        "content": "<p>one weekend later and it would have been just pure death</p>",
        "id": 171700686,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068061
    },
    {
        "content": "<p>I'm not at KIT, but it's also 39° in Darmstadt where I am :)</p>",
        "id": 171700697,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564068073
    },
    {
        "content": "<p>yeah there's a \"stadtviertelfest\" this weekend here, let's see how that goes</p>",
        "id": 171700709,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068082
    },
    {
        "content": "<p>ah i thought you were at karlsruhe</p>",
        "id": 171700714,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068086
    },
    {
        "content": "<p>looks like we got a German UCG mtg today? :D</p>",
        "id": 171700724,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> Darmstadt? I grew up near Wiesbaden. ;)</p>",
        "id": 171700734,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068107
    },
    {
        "content": "<p>wiesbaden is really nice for some reason</p>",
        "id": 171700805,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068151
    },
    {
        "content": "<p>\"for some reason\"?^^</p>",
        "id": 171700819,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068169
    },
    {
        "content": "<p>i was there last year, and I did not expected it to be as nice</p>",
        "id": 171700838,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068181
    },
    {
        "content": "<p>hehe ;)</p>",
        "id": 171700852,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068187
    },
    {
        "content": "<p>super wide streets and nice buildings, i don't know :D</p>",
        "id": 171700863,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068199
    },
    {
        "content": "<p>well I wasnt actually in the city that often. but yeah the center is pretty.</p>",
        "id": 171700871,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> now that we got your attention, what are your thoughts on <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/153\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/153\">https://github.com/rust-lang/unsafe-code-guidelines/pull/153</a> ?</p>",
        "id": 171700886,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068225
    },
    {
        "content": "<p>I haven't been able to properly form an opinion (in particular I should read what the existing chapters look like now after <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> updated them) but my pre-existing opinion is that call ABI probably shouldn't be included in \"layout\" because of the existing \"memory layout\" connotations (and existing community practice of omitting the \"memory\" part) and the fact that the cases where the call ABI matters seem rather niche (sorry not sorry) compared to all the cases where it doesn't matter.</p>",
        "id": 171701168,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564068451
    },
    {
        "content": "<p>OTOH (a) it is included in the current def.n in master, and (b) it is included in <code>TyLayout</code> in the compiler</p>",
        "id": 171701260,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068524
    },
    {
        "content": "<p>I think we discussed somewhere that we often need to distinguish size+align (e.g. for allocating memory for a <code>T</code>), size+align+niche (for allocating memory for an <code>Option&lt;T&gt;</code>), and size+layout+niche+callABI (for FFI)</p>",
        "id": 171701302,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068569
    },
    {
        "content": "<p>\"for FFI\" - only for <em>by-value</em> FFI, not behind pointers, which is another good example of call ABI rarely mattering</p>",
        "id": 171701375,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564068606
    },
    {
        "content": "<p>yes, by value FFI</p>",
        "id": 171701387,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068616
    },
    {
        "content": "<p>for memory FFI, we usually only care about size+align, not even niches, since C doesn't have those</p>",
        "id": 171701402,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068634
    },
    {
        "content": "<p>We definitely need terms for all three but if we have \"layout\" without qualifications, it should roughly match e.g. how everyone talks about <code>transmute</code> being OK or not</p>",
        "id": 171701410,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564068641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> and fields</p>",
        "id": 171701416,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068646
    },
    {
        "content": "<p>its hard for me to articulate when do we care about fields</p>",
        "id": 171701453,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> Niches don't matter directly/at the top level but the niche of <code>T</code> matters e.g. for whether <code>Option&lt;T&gt;</code> is sensible to pass by value in FFI</p>",
        "id": 171701454,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564068688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> well we care that they are at the same offset in Rust and C</p>",
        "id": 171701463,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068704
    },
    {
        "content": "<p>i mean, the C code will need to respect whatever niches are in the Rust memory, if the Rust memory uses those</p>",
        "id": 171701472,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068713
    },
    {
        "content": "<p>(or the other way around, Rust cannot use type with niches)</p>",
        "id": 171701541,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068755
    },
    {
        "content": "<p>so for FFI and transmutes in Rust we care about fields and niches</p>",
        "id": 171701562,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068780
    },
    {
        "content": "<p>size+align, size+align+fields+niches, and ...+callABI for by value FFI</p>",
        "id": 171701586,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068815
    },
    {
        "content": "<p>size+align+niche is what matters for inner types when computing the layout of the outer type</p>",
        "id": 171701652,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068858
    },
    {
        "content": "<p>and size+align+niche+fields is required to transmute between two types</p>",
        "id": 171701672,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068881
    },
    {
        "content": "<p>niche actually isnt</p>",
        "id": 171701701,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068908
    },
    {
        "content": "<p>like you can transmute an <code>&amp;T</code> to a <code>*const T</code> just fine</p>",
        "id": 171701716,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068927
    },
    {
        "content": "<p>you can't transmute an Option&lt;&amp;T&gt; into a &amp;T if the value of the option is None</p>",
        "id": 171701728,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068940
    },
    {
        "content": "<p>If you start distingushing the directions, alignment also matters partially</p>",
        "id": 171701743,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564068954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> why that? its by-value</p>",
        "id": 171701789,
        "sender_full_name": "RalfJ",
        "timestamp": 1564068967
    },
    {
        "content": "<p>alignment doesn't matter for transmute right?</p>",
        "id": 171701792,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564068970
    },
    {
        "content": "<p>Oh right, not for transmute, I was thinking of type punning memory in-place</p>",
        "id": 171701805,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564068984
    },
    {
        "content": "<p>like going from a <code>*const T</code> to a <code>*const U</code> where the alignment doesn't match exactly ?</p>",
        "id": 171701851,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069037
    },
    {
        "content": "<p>(e.g. if the alignment of T is 4 but the alignment of U is 2)</p>",
        "id": 171701868,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069070
    },
    {
        "content": "<p>Yes, stuff like that</p>",
        "id": 171701916,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564069082
    },
    {
        "content": "<p>So what if we just mention in the glossary all layout components and explain them, but in the guarantees we stop using the term layout, and mention exactly what's guaranteed ?</p>",
        "id": 171701934,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069117
    },
    {
        "content": "<p>you can still <code>read_unaligned</code>, but yes</p>",
        "id": 171701941,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069123
    },
    {
        "content": "<p>e.g. instead of saying the layout of T is the same as that of U, we'll say the size+align+fields+niche+callABI of T is the same as that of U</p>",
        "id": 171701988,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069175
    },
    {
        "content": "<p>I tend to agree, \"same layout\" is just way too ambiguous as a term</p>",
        "id": 171701991,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069180
    },
    {
        "content": "<p>Agreed.</p>",
        "id": 171702001,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564069186
    },
    {
        "content": "<p>I would be open though to having explicitly qualified shortcuts for common combinations</p>",
        "id": 171702004,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069190
    },
    {
        "content": "<p>\"full layout\" = all of it, \"memory layout\" = this+that, ...<br>\nwe shouldn't have too many, but say the two most common or so might make sense</p>",
        "id": 171702081,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069226
    },
    {
        "content": "<p>Seems fine, but this is editorial polish IMO, nothing to prioritize now.</p>",
        "id": 171702106,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564069257
    },
    {
        "content": "<p>agreed</p>",
        "id": 171702119,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069267
    },
    {
        "content": "<p>maybe we can just say layout (SA), or layout (SAFNC) or similar, we can do that later when the correct things are written down</p>",
        "id": 171702129,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069281
    },
    {
        "content": "<p>do we have unique first letters?</p>",
        "id": 171702138,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069295
    },
    {
        "content": "<p>size, align, field, niche, callabi... seems like it. even if we add \"(un)inhabitedness\" one day.</p>",
        "id": 171702149,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069310
    },
    {
        "content": "<p>if we wanted to include padding we would use P</p>",
        "id": 171702208,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069331
    },
    {
        "content": "<p>though if we do that we should agree on a consistent ordering</p>",
        "id": 171702222,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069341
    },
    {
        "content": "<p>I dont want to have to scan if CNSAF and SAFNC are the same^^</p>",
        "id": 171702238,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069352
    },
    {
        "content": "<p>I'll open an issue to track this, documenting what we have discussed here</p>",
        "id": 171702254,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069365
    },
    {
        "content": "<p>or just update the PR? :D</p>",
        "id": 171702266,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069372
    },
    {
        "content": "<p>i'll update the PR to expand things, but i mean, for the abbreviations, or adding new terms for the common uses</p>",
        "id": 171702300,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069396
    },
    {
        "content": "<p>you already opened an issue to track \"pushing through a changed def.n of layout\"</p>",
        "id": 171702309,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069403
    },
    {
        "content": "<p>seems like the same issue?</p>",
        "id": 171702314,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069404
    },
    {
        "content": "<p>but either way, seems fine to me</p>",
        "id": 171702415,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069456
    },
    {
        "content": "<p>next oldest PR: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/154\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/154\">https://github.com/rust-lang/unsafe-code-guidelines/pull/154</a></p>",
        "id": 171702425,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069465
    },
    {
        "content": "<p>that was more about making niche and call ABI a part of layout, but we are punting the work of coming up with some abbreviations to avoid repeating stuff, I can reuse that issue for that</p>",
        "id": 171702443,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069479
    },
    {
        "content": "<p>I think I'll just merge that one? <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> ?</p>",
        "id": 171702452,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069485
    },
    {
        "content": "<p>while we could merge this <span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> raises a good point</p>",
        "id": 171702494,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069513
    },
    {
        "content": "<p>why is this called \"unsafe code guidelines\" ?</p>",
        "id": 171702515,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069528
    },
    {
        "content": "<p>because <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> called it that way^^</p>",
        "id": 171702530,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069545
    },
    {
        "content": "<p>eventually the hope is we can produce guidelines for unsafe code authors to follow</p>",
        "id": 171702538,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069556
    },
    {
        "content": "<p>sounds like we wanted to provide some general guidelines for unsafe code to rely on, but this is turned into groundwork for a full blown language spec</p>",
        "id": 171702539,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069556
    },
    {
        "content": "<p>because its hard to give guidelines that we can commit to without any kind of spec...</p>",
        "id": 171702602,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069578
    },
    {
        "content": "<p>with all the drafts about an aliasing model, memory model, mir model maybe in the future</p>",
        "id": 171702608,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069582
    },
    {
        "content": "<p>so this is more like a \"reference-evolution\" working group</p>",
        "id": 171702642,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069619
    },
    {
        "content": "<p>where we prepare things that we want to specify in the reference, that aren't necessarily new language features per se</p>",
        "id": 171702672,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069647
    },
    {
        "content": "<p>and prepare RFCs for those, push them through the process, and then update the reference proper</p>",
        "id": 171702685,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069663
    },
    {
        "content": "<p>well maybe at some point someone will join us who enjoys writing documents explaining \"do this, dont do that\". but other people outside the WG are already doing that (e.g. with MaybeUninit, or RustSec).</p>",
        "id": 171702686,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069665
    },
    {
        "content": "<p>and we are also the go-to place when people ask \"can unsafe code do this or rely on that\"</p>",
        "id": 171702787,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069724
    },
    {
        "content": "<p>so there's some amount of unsafe code guidance in what we do</p>",
        "id": 171702793,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069733
    },
    {
        "content": "<p>usually you would ask the spec for that</p>",
        "id": 171702799,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069739
    },
    {
        "content": "<p>sure</p>",
        "id": 171702810,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069744
    },
    {
        "content": "<p>or the rust reference in this case</p>",
        "id": 171702814,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069750
    },
    {
        "content": "<p>well you'd ask someone who read and understood the spec ;)</p>",
        "id": 171702823,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069760
    },
    {
        "content": "<p>i don't know, I felt like <span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> concern that that particular PR has not much to do with unsafe code is correct</p>",
        "id": 171702838,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069774
    },
    {
        "content": "<p>I don't have a strong opinion on <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/154\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/154\">https://github.com/rust-lang/unsafe-code-guidelines/pull/154</a> but let's say I would not have suggested writing this up in UCG if someone has asked me beforehand.</p>",
        "id": 171702859,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564069800
    },
    {
        "content": "<p>it is completely in line with the other things in that file though</p>",
        "id": 171702860,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069800
    },
    {
        "content": "<p>But yes it's in line with the other C standard interactions and sizes of types and so on we discuss</p>",
        "id": 171702912,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564069816
    },
    {
        "content": "<p>Mostly I think the point is this could be more useful elsewhere. Which doesn't make it useless here, but still a good point</p>",
        "id": 171702932,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564069842
    },
    {
        "content": "<p>okay I am going to merge then</p>",
        "id": 171702936,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> any idea what \"elsewhere\" might be?</p>",
        "id": 171702954,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069870
    },
    {
        "content": "<p>ok, so I will open an issue in the reference to track down writing this somewhere else</p>",
        "id": 171702960,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564069878
    },
    {
        "content": "<p>Either reference or stdlib docs seems good</p>",
        "id": 171702972,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564069890
    },
    {
        "content": "<p>like the docs of the <code>isize</code>/<code>usize</code> type?</p>",
        "id": 171703037,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069933
    },
    {
        "content": "<p>eventually the plan is for the WG to move towards \"upstreaming things we agree on into RFCs/docs\", I guess that would be part of this</p>",
        "id": 171703048,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069961
    },
    {
        "content": "<p>Yes, on the types. Or perhaps on the trait impls that are justified by this observation.</p>",
        "id": 171703071,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564069990
    },
    {
        "content": "<p>seems reasonable</p>",
        "id": 171703076,
        "sender_full_name": "RalfJ",
        "timestamp": 1564069999
    },
    {
        "content": "<p>I personally just dont care enough about those things to push for it ;)</p>",
        "id": 171703082,
        "sender_full_name": "RalfJ",
        "timestamp": 1564070013
    },
    {
        "content": "<p>next PR, and last for today because the mtg is already ~10min over: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/162\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/162\">https://github.com/rust-lang/unsafe-code-guidelines/pull/162</a></p>",
        "id": 171703157,
        "sender_full_name": "RalfJ",
        "timestamp": 1564070069
    },
    {
        "content": "<p>seems like an obvious statement, I guess my only question is \"is this worth stating\"^^</p>",
        "id": 171703166,
        "sender_full_name": "RalfJ",
        "timestamp": 1564070082
    },
    {
        "content": "<p>Doesn't hurt, merge it</p>",
        "id": 171703332,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564070230
    },
    {
        "content": "<p>At some point we'll have to follow up to the stride!=size matter that broke out in that thread but let's not punish the nice note for that</p>",
        "id": 171703381,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564070281
    },
    {
        "content": "<p>yay, we're like.. 25% through <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>'s attempt at DoSing us with a dozen PRs ;)</p>",
        "id": 171703384,
        "sender_full_name": "RalfJ",
        "timestamp": 1564070282
    },
    {
        "content": "<blockquote>\n<p>At some point we'll have to follow up to the stride!=size matter that broke out in that thread but let's not punish the nice note for that</p>\n</blockquote>\n<p>yeah</p>",
        "id": 171703437,
        "sender_full_name": "RalfJ",
        "timestamp": 1564070292
    },
    {
        "content": "<p>I think the general feeling is that it will be good to have a chapter somewhere in the layout section summarizing zero-sized types</p>",
        "id": 171703442,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564070301
    },
    {
        "content": "<p>I am actually not sure about that any more</p>",
        "id": 171703452,
        "sender_full_name": "RalfJ",
        "timestamp": 1564070315
    },
    {
        "content": "<p>i think the nomicon has a chapter on exotically sized types, including zero-sized, unsized, etc.</p>",
        "id": 171703458,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564070324
    },
    {
        "content": "<p>I'll open an issue to track removing the stride != size stuff</p>",
        "id": 171703500,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564070359
    },
    {
        "content": "<p>so we are done for today</p>",
        "id": 171703786,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564070554
    },
    {
        "content": "<p>we are. this was productive. thanks all!</p>",
        "id": 171703846,
        "sender_full_name": "RalfJ",
        "timestamp": 1564070603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> your last PR adds definitions for value / place +- expression . I think it would be nice if more people could review that, e.g., <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> and <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> for example.</p>",
        "id": 171703937,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564070656
    },
    {
        "content": "<p>wait why does that PR have 64 comments already?</p>",
        "id": 171703957,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564070684
    },
    {
        "content": "<p>because <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  found it^^</p>",
        "id": 171704131,
        "sender_full_name": "RalfJ",
        "timestamp": 1564070849
    },
    {
        "content": "<p>I'll gladly review/approve (took a quick look already and seems good) the glossary changes but it's impossible for me to keep up with the discussion of the other stuff. So if you split out the glossary change, it can be merged much sooner :)</p>",
        "id": 171704223,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564070936
    },
    {
        "content": "<p>yeah I was wondering about that</p>",
        "id": 171704353,
        "sender_full_name": "RalfJ",
        "timestamp": 1564071017
    },
    {
        "content": "<p>I should probably do that, though it will lose the comments for that part</p>",
        "id": 171704359,
        "sender_full_name": "RalfJ",
        "timestamp": 1564071026
    },
    {
        "content": "<p>the split sounds good to me</p>",
        "id": 171704364,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564071031
    },
    {
        "content": "<p>you can keep them in the WIP PR until those changes are merged</p>",
        "id": 171704368,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564071045
    },
    {
        "content": "<p>argh is it just me or does GH often time out recently when you click through its UI, and you have to re-load the entire page to get it working again?</p>",
        "id": 171704408,
        "sender_full_name": "RalfJ",
        "timestamp": 1564071080
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/160\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/160\">https://github.com/rust-lang/unsafe-code-guidelines/pull/160</a> has some outstanding comments</p>",
        "id": 171705611,
        "sender_full_name": "RalfJ",
        "timestamp": 1564072116
    },
    {
        "content": "<p>yep, I don't know what to do about the padding one yet</p>",
        "id": 171705653,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564072156
    },
    {
        "content": "<p>padding is not part of layout</p>",
        "id": 171705657,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564072165
    },
    {
        "content": "<p>right now we informally call  the unused space between fields \"padding\"</p>",
        "id": 171705680,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564072200
    },
    {
        "content": "<p>unions do not have unused space between fields</p>",
        "id": 171705756,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564072224
    },
    {
        "content": "<p>or at least <code>repr(C)</code> unions do not, because all fields start at offset 0</p>",
        "id": 171705772,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564072246
    },
    {
        "content": "<p>I'd just drop the new paragraph on padding</p>",
        "id": 171705817,
        "sender_full_name": "RalfJ",
        "timestamp": 1564072281
    },
    {
        "content": "<p>trailing padding is clear, in that there is unused space after the last field</p>",
        "id": 171705818,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564072281
    },
    {
        "content": "<p>and the ZST statement again is of the kind \"is that worth stating\"? I mean why would they <em>not</em> participate with their alginment, and why would anyone assume that? doesn't warrant 15-20 lines of text IMO.</p>",
        "id": 171705919,
        "sender_full_name": "RalfJ",
        "timestamp": 1564072364
    },
    {
        "content": "<p>I'd assume that, unless otherwise guaranteed, the behavior of using a ZST field in a <code>repr(C)</code> struct or union is undefined on FFI (and unspecified otherwise)</p>",
        "id": 171706172,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564072603
    },
    {
        "content": "<p>Because the general definition of <code>repr(C)</code> is \"do what C does\" and in C this cannot happen</p>",
        "id": 171706191,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564072623
    },
    {
        "content": "<p>the text is written as if the default assumption was \"the compiler just ignores them\"</p>",
        "id": 171706413,
        "sender_full_name": "RalfJ",
        "timestamp": 1564072807
    },
    {
        "content": "<p>that is the only way I can interpret \"(ZST) fields participate in layout computation\". I mean, <em>of course</em> they do.</p>",
        "id": 171706438,
        "sender_full_name": "RalfJ",
        "timestamp": 1564072837
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/161\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/161\">https://github.com/rust-lang/unsafe-code-guidelines/pull/161</a> is also blocked on talking about padding; these PRs are too early IMO, we don't have enough data/information/definitions to form an informed consensus there</p>",
        "id": 171706460,
        "sender_full_name": "RalfJ",
        "timestamp": 1564072858
    },
    {
        "content": "<blockquote>\n<p>because @centril found it^^</p>\n</blockquote>\n<p>fwiw, I was pointed to it ;)</p>",
        "id": 171713457,
        "sender_full_name": "centril",
        "timestamp": 1564078402
    },
    {
        "content": "<p>ah, who's the traitor? :P</p>",
        "id": 171715947,
        "sender_full_name": "RalfJ",
        "timestamp": 1564080072
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I think <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/163/files\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/163/files\">https://github.com/rust-lang/unsafe-code-guidelines/pull/163/files</a> is basically read to be merged except for that one wording change</p>",
        "id": 171718207,
        "sender_full_name": "RalfJ",
        "timestamp": 1564081755
    },
    {
        "content": "<blockquote>\n<p>ah, who's the traitor? :P</p>\n</blockquote>\n<p>I was forced to point it to them because you wrote \"operational semantics\" in it in a heading and I thought \"Centril is into that\"</p>",
        "id": 171727523,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564088492
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 171732924,
        "sender_full_name": "RalfJ",
        "timestamp": 1564093598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> meeting is over, but I am a person who loves to write the \"do this don't do that\" documents</p>",
        "id": 171738018,
        "sender_full_name": "Lokathor",
        "timestamp": 1564099726
    },
    {
        "content": "<p>one new unsafe group recently is the Safety Dance <a href=\"https://github.com/rust-secure-code/safety-dance\" target=\"_blank\" title=\"https://github.com/rust-secure-code/safety-dance\">https://github.com/rust-secure-code/safety-dance</a></p>",
        "id": 171738058,
        "sender_full_name": "Lokathor",
        "timestamp": 1564099790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> great!<br>\nI guess the question is which kinds of \"do this dont do that\" documents are the most useful? The first coming to my mind is basic stuff around unsafe and UB, around obligations and who is trusting whom to get what right -- to avoid <a href=\"https://users.rust-lang.org/t/how-to-create-a-long-array-with-non-copyable-element/30280\" target=\"_blank\" title=\"https://users.rust-lang.org/t/how-to-create-a-long-array-with-non-copyable-element/30280\">discussions like this</a>, and to promote a style where every unsafe block is accompanied by a comment explaining why this is not UB (neither now nor later -- see <code>Vec::set_len</code>, sometimes unsafe operations are bad even if they do not cause immediate UB).<br>\nbut the nomicon already covers some of this.</p>",
        "id": 171752175,
        "sender_full_name": "RalfJ",
        "timestamp": 1564124351
    },
    {
        "content": "<p>The whole discussion in that thread is in a sense funny because <em>clearly</em> the best way to make 26 blank vecs in an array is to use</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v_bytes</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">array_of_vecs</span>: <span class=\"p\">[[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">];</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">v_bytes</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">final_vecs</span>: <span class=\"p\">[</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">array_of_vecs</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">final_vecs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>And then you don't need uninitialized or MaybeUninit at all.</p>",
        "id": 171752834,
        "sender_full_name": "Lokathor",
        "timestamp": 1564125279
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> our regular meeting time is Thursdays 15:15 UTC (anchored to New York time, so we shift by 1h as DST starts/ends there), the intended length is 30min, and the usual idea is to not discuss content but process -- in particular, which PRs to merge, which PRs/issues to close/open.</p>",
        "id": 171753339,
        "sender_full_name": "RalfJ",
        "timestamp": 1564126003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I would not call that the best way... also I am not even sure if you are entirely serious^^ but in case you are, (a) this only works on 64bit, (b) this breaks even there when <code>Vec</code> changes size; (c) this is UB if <code>Vec</code> ever has padding.</p>",
        "id": 171753440,
        "sender_full_name": "RalfJ",
        "timestamp": 1564126136
    },
    {
        "content": "<p>(d) this relies on <code>Vec::new</code> implementation details</p>",
        "id": 171753457,
        "sender_full_name": "RalfJ",
        "timestamp": 1564126166
    },
    {
        "content": "<p>It's possible I could be present for the next one if you like. That's around 9am for me, which isn't unreasonable given the rest of my schedule lately. However, I'm not sure I'd be much help at PR/issue triage for UCG.</p>",
        "id": 171753555,
        "sender_full_name": "Lokathor",
        "timestamp": 1564126277
    },
    {
        "content": "<p>As to the vec thing, (a) you could use size_of or you could call it a feature that the code stops compiling when the unexpected happens. (b) the standard library says \"Due to its incredibly fundamental nature, Vec makes a lot of guarantees about its design.  ... Most fundamentally, Vec is and always will be a (pointer, capacity, length) triplet. No more, no less.\" (c) I don't understand your meaning. (d) I can live with that, and since Vec::new is on track to even become <code>const</code> I can extra live with that. I wouldn't tell people to do it for every possible type, just for Vecs and other <em>very well understood and specified</em> types.</p>",
        "id": 171753734,
        "sender_full_name": "Lokathor",
        "timestamp": 1564126494
    },
    {
        "content": "<p>I was mildly serious: I would always rather do a transmute dance or a plain and simple zeroed than deal with a single bit of uninit in any form. Perhaps that's just my personal style</p>",
        "id": 171753819,
        "sender_full_name": "Lokathor",
        "timestamp": 1564126615
    },
    {
        "content": "<blockquote>\n<p>It's possible I could be present for the next one if you like. That's around 9am for me, which isn't unreasonable given the rest of my schedule lately. However, I'm not sure I'd be much help at PR/issue triage for UCG.</p>\n</blockquote>\n<p>up to you, I just mentioned that in case you'd be interested. :)</p>",
        "id": 171755599,
        "sender_full_name": "RalfJ",
        "timestamp": 1564128719
    },
    {
        "content": "<p>(c) is basically also resolved by your answer to (b), but what I mean is that given <code>(u8, u16)</code>, a transmute to <code>[u8; 4]</code> is UB because there is an uninitialized byte here: the padding byte.</p>",
        "id": 171755681,
        "sender_full_name": "RalfJ",
        "timestamp": 1564128794
    }
]