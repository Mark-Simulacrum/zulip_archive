[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> trying not to litter <a href=\"https://github.com/rust-lang/rust/pull/87032\">https://github.com/rust-lang/rust/pull/87032</a> with my questions, I don't understand your statement \"There is no problem that mem::uninitialized has that mem::zeroed does not also have.\" I'd like to figure out where my mental model differs. Is <code>zeroed::&lt;i32&gt;()</code> UB?</p>",
        "id": 245749394,
        "sender_full_name": "bstrie",
        "timestamp": 1626123949
    },
    {
        "content": "<p>The validity invariant of <code>&amp;T</code> bans 0 making zeroed() UB. The validity invariant of <code>u8</code> bans <code>&lt;undef&gt;</code> making uninitialized() UB. I believe the point is basically that in both cases the validity variant of the specific type is the reason the call is UB.</p>",
        "id": 245750231,
        "sender_full_name": "bjorn3",
        "timestamp": 1626124194
    },
    {
        "content": "<p>yes, and the value returned by zeroed is not undef, correct?</p>",
        "id": 245750786,
        "sender_full_name": "bstrie",
        "timestamp": 1626124422
    },
    {
        "content": "<p>Correct</p>",
        "id": 245750949,
        "sender_full_name": "bjorn3",
        "timestamp": 1626124509
    },
    {
        "content": "<p>But is is 0, is is not valid for certain types.</p>",
        "id": 245750986,
        "sender_full_name": "bjorn3",
        "timestamp": 1626124532
    },
    {
        "content": "<p>You have types that allow undef, 0 and all other values (<code>MaybeUninit</code>). You have types that allow all values except undef (<code>u8</code>) and you have types that accept neither 0 nor undef (<code>&amp;T</code>).</p>",
        "id": 245751157,
        "sender_full_name": "bjorn3",
        "timestamp": 1626124620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> you need to quote the entire paragraph, not just one sentence. :)</p>",
        "id": 245751688,
        "sender_full_name": "RalfJ",
        "timestamp": 1626124829
    },
    {
        "content": "<p>The next sentence is</p>\n<blockquote>\n<p>\"mem::uninitialized just has it for more types, since more types consider uninit memory invalid than consider zeroed memory invalid.\"</p>\n</blockquote>",
        "id": 245751702,
        "sender_full_name": "RalfJ",
        "timestamp": 1626124839
    },
    {
        "content": "<p>so, the difference is in degree, but not quality</p>",
        "id": 245751722,
        "sender_full_name": "RalfJ",
        "timestamp": 1626124847
    },
    {
        "content": "<p>whereas you seem to say there is a difference in degree here, that <code>uninit</code> has \"two problems\" where <code>zeroed</code> only has one. that is not the case.</p>",
        "id": 245751764,
        "sender_full_name": "RalfJ",
        "timestamp": 1626124871
    },
    {
        "content": "<p>some byte in memory being undef is not in any fundamental way different from a byte in memory being 0. those are just 2 of the many different states a byte in memory can be in.<br>\nthere are types for which zero violates the validity invariant (<code>&amp;i32</code>), and there are types for which undef violates the validity invariant (<code>i32</code>).</p>",
        "id": 245752112,
        "sender_full_name": "RalfJ",
        "timestamp": 1626125060
    },
    {
        "content": "<p>I dont think it is useful to think of uninit memory as having special rules such as \"it is UB to read uninit memory\". If you start like that you then need even more special rules to explain why loading padding bytes does not yield UB all the time, and so on. if you make your list of special rules long enough, eventually they will be equivalent to the \"official\" rules -- but they will be a lot more complicated and non-uniform. (there are many different ways to state the same thing, but some ways are more compact/consistent than others.)</p>",
        "id": 245752525,
        "sender_full_name": "RalfJ",
        "timestamp": 1626125273
    },
    {
        "content": "<p>Ok, I can start to see why it makes sense for a spec author to formulate things this way. At the same time, from the perspective of a user, I think that saying \"some byte in memory being undef is not in any fundamental way different from a byte in memory being 0\" is liable to violate their intuitive understanding. I'm not saying that your formulation is wrong or that it needs to be changed, only that if a user requests e.g. an uninitialized <code>u8</code>, I think it is reasonable for them to intuit that they will be given a single byte that is one of 256 possible values, from <code>0b0000_0000</code> to <code>0b1111_1111</code>, and that this byte won't have the surprising ability to change when nobody is looking. They'd be wrong, sure, but in communicating to them why they're wrong I think it would be useful to start by expressing the difference between \"types that may be undef\" and \"types that may not be undef\", and then to separate the latter into \"types that have invalid values\" and \"types that don't have invalid values\". This can be simplified from two steps into one by considering undef to be a value, though I don't think undef matches what most users would think of as a \"value\". From this perspective I think it's useful to be able to talk about \"the set of values that may be invalid, excluding undef\", especially since nearly all types cannot be undef.</p>",
        "id": 245764410,
        "sender_full_name": "bstrie",
        "timestamp": 1626133932
    },
    {
        "content": "<blockquote>\n<p>only that if a user requests e.g. an uninitialized u8, I think it is reasonable for them to intuit that they will be given a single byte that is one of 256 possible values, from 0b0000_0000 to 0b1111_1111</p>\n</blockquote>\n<p>well what I'm basically saying is</p>\n<ul>\n<li>when talking about bytes in memory, this intuition is wrong and you're better off updating your intuition</li>\n<li>when you are actually talking about a <code>u8</code>, the validity invariant excludes uninit bytes, so every <code>u8</code> you ever encounter in Rust will actually have one of 256 values. (though this is not finally settled yet, some people want to allow uninit or ptr provenance in <code>u8</code> and then there'd be more than 256 possible <code>u8</code> values.)</li>\n</ul>\n<p>however, \"uninitialized <code>u8</code>\" is at best an extremely misleading statement here, since the uninit byte <code>0xUU</code> is invalid for <code>u8</code>... so while I agree that there's probably many people that would interpret \"uninitialized <code>u8</code>\" like you say, what I am saying is that that is a problem and we need to be teaching Rust programmers that this way of thinking just leads to confusion and bugs. This way of thinking stems from thinking of C, and by extension Rust, as a very thin layer on top of the hardware. It is thus unable to properly explain the various ways in which the Rust Abstract Machine differs from actual hardware. Uninit is the \"easy\" case here, pointer provenance is much worse -- and the longer people insist on thinking of Rust's memory model as as being close to that of x86, the longer they will write buggy code.</p>",
        "id": 245788445,
        "sender_full_name": "RalfJ",
        "timestamp": 1626162122
    },
    {
        "content": "<p>uninit bytes dont \"have the surprising ability to change when nobody is looking\". this is one of those crutches you simply dont need in \"my way\" of thinking about these things.</p>",
        "id": 245788491,
        "sender_full_name": "RalfJ",
        "timestamp": 1626162137
    },
    {
        "content": "<p>they are uninit each time you look at them</p>",
        "id": 245788497,
        "sender_full_name": "RalfJ",
        "timestamp": 1626162143
    },
    {
        "content": "<p>there is literally zero non-determinism here</p>",
        "id": 245788512,
        "sender_full_name": "RalfJ",
        "timestamp": 1626162151
    },
    {
        "content": "<p>so I think this mental model you are proposing perpetuates some misconceptions and just further muddies the water of what is already a pit of misunderstandings (since C completely screwed up even specifying this part). but of course your intuition is your own, I can only tell you what I think is the best and simplest way to think about these things -- and I will push for Rust to use this way of thinking in all its docs and teaching material.</p>",
        "id": 245788606,
        "sender_full_name": "RalfJ",
        "timestamp": 1626162219
    },
    {
        "content": "<p>since you are bringing up the concept of a \"value\" -- I think the best way to define this concept is <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md\">along the lines of what I wrote here</a>: values are \"high-level\" representations of data, sequences of bytes are \"low-level\" representations of data, and there is a representation relation that says how the two are connected. the validity invariant is just a consequence of this.</p>",
        "id": 245789267,
        "sender_full_name": "RalfJ",
        "timestamp": 1626162676
    },
    {
        "content": "<p>(Incidentally, this is inspired by what ubsan taught me about C. I think the C standard, when carefully read, also reveals a structure like this. But as usual the C standard leaves all the interesting parts implicit and up to the reader, and very few C programmers probably think this way about \"values\" in C.)</p>",
        "id": 245789381,
        "sender_full_name": "RalfJ",
        "timestamp": 1626162738
    },
    {
        "content": "<p>after a full day of reading scattered documentation and ralf's blog posts, maybe I'm wondering if optimizing compilers were simply a mistake :P</p>",
        "id": 246004217,
        "sender_full_name": "bstrie",
        "timestamp": 1626289300
    },
    {
        "content": "<p>I'm wondering if there's a formal term for the sort of weaker \"validity invariant\" described by this bit in the MaybeUninit docs:</p>\n<blockquote>\n<p>On top of that, remember that most types have additional invariants beyond merely being considered initialized at the type level. For example, a 1-initialized Vec&lt;T&gt; is considered initialized (under the current implementation; this does not constitute a stable guarantee) because the only requirement the compiler knows about it is that the data pointer must be non-null. Creating such a Vec&lt;T&gt; does not cause immediate undefined behavior, but will cause undefined behavior with most safe operations (including dropping it).</p>\n</blockquote>",
        "id": 246004441,
        "sender_full_name": "bstrie",
        "timestamp": 1626289389
    },
    {
        "content": "<p>I'm pretty sure that's describing the \"Safety Invariant\"</p>",
        "id": 246005106,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626289676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/zeroed.20vs.20uninitialized/near/246004217\">said</a>:</p>\n<blockquote>\n<p>after a full day of reading scattered documentation and ralf's blog posts, maybe I'm wondering if optimizing compilers were simply a mistake :P</p>\n</blockquote>\n<blockquote>\n<p>It's difficult to make transistors any smaller because nature hates us and quantum mechanics are stealing our voltage. Perhaps we should return to the abacus; sometimes, the old ways are the best ways.</p>\n</blockquote>",
        "id": 246037925,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1626307962
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/zeroed.20vs.20uninitialized/near/246037925\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/zeroed.20vs.20uninitialized/near/246004217\">said</a>:</p>\n<blockquote>\n<p>after a full day of reading scattered documentation and ralf's blog posts, maybe I'm wondering if optimizing compilers were simply a mistake :P</p>\n</blockquote>\n<blockquote>\n<p>It's difficult to make transistors any smaller because nature hates us and quantum mechanics are stealing our voltage. Perhaps we should return to the abacus; sometimes, the old ways are the best ways.</p>\n</blockquote>\n</blockquote>\n<p>Well, I definitely like my compiler optimizations...we just have to pick a consistent model of what compiler optimizations should expect -- that's the hard part because compiler writers have been kinda been wandering in the dark since no one thought to bring a powerful enough flashlight (memory model). Each sees their own light off in the distance, and they end up at different conflicting spots as a result. I'm <a href=\"https://libre-soc.org/\">currently working</a> on building better and hopefully faster CPUs to run all our algorithms on. To me, the future looks bright, partially because there's neat things like <a href=\"https://en.wikipedia.org/wiki/Superconducting_computing\">superconducting digital logic</a> that can use 1/1000 the power and go faster.</p>",
        "id": 246047011,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626318172
    },
    {
        "content": "<blockquote>\n<p>I'm wondering if there's a formal term for the sort of weaker \"validity invariant\" described by this bit in the MaybeUninit docs:</p>\n</blockquote>\n<p>that invariant is <em>stronger</em> -- it requires (in general) strictily more than what the validity invariant requires</p>",
        "id": 246325373,
        "sender_full_name": "RalfJ",
        "timestamp": 1626529084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/zeroed.20vs.20uninitialized/near/246004217\">said</a>:</p>\n<blockquote>\n<p>after a full day of reading scattered documentation and ralf's blog posts, maybe I'm wondering if optimizing compilers were simply a mistake :P</p>\n</blockquote>\n<p>yeah the thought occurred to me as well.^^ but the problem is more the way they have been built, I'd say. a lot of amazing engineering for the compiler data structures and analyses, but not a lot of engineering of the IR as a programming language with a precise spec in its own right.</p>",
        "id": 246325448,
        "sender_full_name": "RalfJ",
        "timestamp": 1626529260
    }
]