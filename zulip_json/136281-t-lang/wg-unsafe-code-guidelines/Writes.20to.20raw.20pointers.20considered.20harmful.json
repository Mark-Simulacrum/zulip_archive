[
    {
        "content": "<p>Who else has written things like <code>*raw_ptr = &lt;...&gt;</code> and forgot that this will drop the old content in there and you should really use <code>ptr.write</code>? I certainly have, and this is also very easy to miss in a review.<br>\nSo, would it be a good idea to lint against such raw pointer writes unless the type does not need dropping, and suggest using a yet-to-be-introduced <code>ptr.write_and_drop</code> method instead?</p>",
        "id": 169415900,
        "sender_full_name": "RalfJ",
        "timestamp": 1562003514
    },
    {
        "content": "<p>At some point, I stopped dereferencing raw pointers completely, and only use <code>read</code>/<code>write</code> methods, manually dropping when needed. The only time I dereference raw pointers is when I need a reference to the object in the memory location (<code>&amp;*ptr</code>).  So yeah, a <code>ptr.write_and_drop</code> method would make some code clearer. It is also kind of easy to forget that <code>write</code> doesn't drop.</p>",
        "id": 169416111,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562003667
    },
    {
        "content": "<blockquote>\n<p>It is also kind of easy to forget that write doesn't drop.</p>\n</blockquote>\n<p>true</p>",
        "id": 169416224,
        "sender_full_name": "RalfJ",
        "timestamp": 1562003753
    },
    {
        "content": "<p>Having a raw pointer to a type that isn't Copy is already a special kind of crazy.</p>",
        "id": 169447397,
        "sender_full_name": "Lokathor",
        "timestamp": 1562033248
    },
    {
        "content": "<p>I agree that <code>*</code> on raw pointers is nearly always a bad idea, and I've had so many bugs that could be fixed by not allowing it (while I've never actually needed <code>*</code>, except for turning a raw pointer into a reference)</p>",
        "id": 169457774,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1562050574
    },
    {
        "content": "<p>no reason to disallow it with <code>Copy</code> types though?</p>",
        "id": 169459073,
        "sender_full_name": "RalfJ",
        "timestamp": 1562052403
    },
    {
        "content": "<p>what's the advantage of allowing it ? <code>ptr.read()</code> works for <code>Copy</code> too - but now its 2 things you need to learn<br>\nand <code>&amp;*ptr</code> and <code>&amp;ptr.read()</code> do 2 subtly different things</p>",
        "id": 169459250,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562052610
    },
    {
        "content": "<p>when working with pointers i wish we had named methods for the basics:</p>\n<ul>\n<li><code>ptr.copy()</code>: copies the memory at pointer - doesn't drop</li>\n<li><code>ptr.write(val)</code>: writes val to the memory at pointer - doesn't drop</li>\n<li><code>ptr.write_drop(val)</code>: writes val to the memory at pointer, dropping the old value there</li>\n<li><code>ptr.drop()</code>: drops the memory at pointer</li>\n<li><code>ptr.borrow()</code>: borrows the memory at pointer: &amp;T from *const T and &amp;mut T from *mut T</li>\n</ul>",
        "id": 169459356,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562052753
    },
    {
        "content": "<p>The defaults should be unaligned memory operations, so you need then variants for <code>_aligned</code> operations.<br>\nYou also need variants for <code>_volatile</code>, <code>_atomic</code>, and <code>_volatile_atomic</code>.</p>",
        "id": 169459460,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562052911
    },
    {
        "content": "<p>But while verbose, at least the API would be IMO boring and unsurprising.</p>",
        "id": 169459466,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562052925
    },
    {
        "content": "<p>Why not create the full set of such variants, omitting those combinations (if any) that are intrinsically incompatible? The full set would be 5 * 2^3 = 40 primitives. </p>\n<p>It may be infeasible to suggest deprecating the older non-self-documenting forms, but even so the full list would help make Rustaceans aware of the alternative choices they should consider when using raw pointers. In terms of syntax, I suggest appending the suffixes in the order <code>_volatile</code>, <code>_atomic</code>, <code>_aligned</code>.</p>",
        "id": 169482057,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1562075503
    },
    {
        "content": "<p>the advantage of allowing it is that pointers work ergonomically :P</p>",
        "id": 169501522,
        "sender_full_name": "Lokathor",
        "timestamp": 1562088987
    },
    {
        "content": "<p>well I think making unaligned the default, that ship has sailed</p>",
        "id": 169504355,
        "sender_full_name": "RalfJ",
        "timestamp": 1562090690
    },
    {
        "content": "<p>and in terms of compatibility, there is no reason to cause all the churn involves in people using raw pointers with <code>Copy</code> types</p>",
        "id": 169504381,
        "sender_full_name": "RalfJ",
        "timestamp": 1562090710
    },
    {
        "content": "<p>I am not talking about \"what would we do if this was pre-1.0\", that ship has sailed^^</p>",
        "id": 169504390,
        "sender_full_name": "RalfJ",
        "timestamp": 1562090720
    },
    {
        "content": "<p>I am trying to see if we can come up with a proposal that has a remote chance of being accepted <em>today</em></p>",
        "id": 169504405,
        "sender_full_name": "RalfJ",
        "timestamp": 1562090734
    },
    {
        "content": "<p>So, I think we should more clearly enumerate the main use cases here, then we'll know more of what the problem might look like.</p>\n<p>raw pointers that I use are usually for:<br>\n, Copy types, so whatever<br>\n, FFI opaque data which must be cleaned up with a foreign call (usually during Drop)</p>\n<p>Are there other common use cases for pointers that I'm missing where you'd accidentally forget to Drop a value.</p>",
        "id": 169537528,
        "sender_full_name": "Lokathor",
        "timestamp": 1562126220
    },
    {
        "content": "<p>Any type, when you need aliasing</p>",
        "id": 169590067,
        "sender_full_name": "RalfJ",
        "timestamp": 1562177919
    },
    {
        "content": "<p>pointers to uninitialized data</p>",
        "id": 169590074,
        "sender_full_name": "RalfJ",
        "timestamp": 1562177924
    },
    {
        "content": "<p>I suggested a clippy lint: <a href=\"https://github.com/rust-lang/rust-clippy/issues/4294\" target=\"_blank\" title=\"https://github.com/rust-lang/rust-clippy/issues/4294\">https://github.com/rust-lang/rust-clippy/issues/4294</a></p>",
        "id": 171430897,
        "sender_full_name": "RalfJ",
        "timestamp": 1563802733
    }
]