[
    {
        "content": "<p>Hi unsafe-code-guidelines. I raised <a href=\"https://github.com/rust-lang/rust/issues/65006\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65006\">#65006</a>, which details a way that a dataflow analysis I wrote for const qualification could be unsound in the presence of unsafe code. The soundness hole hinges upon taking a reference to one field of a struct on the stack, casting it to a raw pointer, and offsetting it to point at another, disjoint field of the same struct. You can see an <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/mir-dataflow/indirect-mutation-offset.rs\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/mir-dataflow/indirect-mutation-offset.rs\">example here</a></p>\n<p>Is this example UB? According to the (non-normative) <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/primitive.pointer.html\"><code>pointer::offset</code> docs</a>:</p>\n<blockquote>\n<p>Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object. Note that in Rust, every (stack-allocated) variable is considered a separate allocated object.</p>\n</blockquote>\n<p>This suggests to me that this is not UB. However, it seems like this should in fact be UB, and users must take the address of the entire struct if they wish to do these kinds of shenanigans with <code>pointer::offset</code>.</p>",
        "id": 177387615,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570231779
    },
    {
        "content": "<p>I believe that it is UB</p>",
        "id": 177424853,
        "sender_full_name": "Lokathor",
        "timestamp": 1570298822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> could you point me towards a reference? Nomicon, LLVM docs or a previous zulip conversation?</p>",
        "id": 177424986,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570299034
    },
    {
        "content": "<p>If you have one at hand that is</p>",
        "id": 177425003,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570299072
    },
    {
        "content": "<p>I believe I've seen the validity of <code>&amp;arr[0] as *const u8</code> vs <code>&amp;arr as *const u8</code> discussed here before, which is basically the same issue, but I can't seem to find it searching for \"pointer offset\"</p>",
        "id": 177425489,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570299909
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\">rust-lang/unsafe-code-guidelines#134</a></p>",
        "id": 177425906,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570300538
    },
    {
        "content": "<p>well I'm going by that discussion you just mentioned</p>",
        "id": 177426778,
        "sender_full_name": "Lokathor",
        "timestamp": 1570301863
    },
    {
        "content": "<p>it's my understanding that the pointer to just that one field had its validity narrowed to just that field, it is no longer legal for the whole struct</p>",
        "id": 177426832,
        "sender_full_name": "Lokathor",
        "timestamp": 1570301904
    },
    {
        "content": "<p>this is how \"split borrows\" work</p>",
        "id": 177426834,
        "sender_full_name": "Lokathor",
        "timestamp": 1570301915
    },
    {
        "content": "<p>Yes, I was asking for a link to that discussion (I hadn't seen it before now)</p>",
        "id": 177426836,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570301921
    },
    {
        "content": "<p>I closed the outstanding issue</p>",
        "id": 177426841,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570301936
    },
    {
        "content": "<p>What's \"split borrows\"?</p>",
        "id": 177426853,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570301957
    },
    {
        "content": "<p>when you borrow two fields of the same struct separately</p>",
        "id": 177427351,
        "sender_full_name": "Lokathor",
        "timestamp": 1570302748
    },
    {
        "content": "<p>like how slice::split(...) works</p>",
        "id": 177427357,
        "sender_full_name": "Lokathor",
        "timestamp": 1570302768
    },
    {
        "content": "<p>unfortunately i also cannot easily locate the pointer validity span discussion (on my phone right now)</p>",
        "id": 177427374,
        "sender_full_name": "Lokathor",
        "timestamp": 1570302829
    },
    {
        "content": "<p>Ah okay, I understand</p>",
        "id": 177427716,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570303405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> a counter example could be arrays and borrowing of its first element, no?</p>",
        "id": 177429577,
        "sender_full_name": "nagisa",
        "timestamp": 1570306733
    },
    {
        "content": "<p>you still want to be able to iterate through the array by doing pointer arithmetic on the pointer.</p>",
        "id": 177429585,
        "sender_full_name": "nagisa",
        "timestamp": 1570306748
    },
    {
        "content": "<p>although at this point we hit <code>raw pointer</code> vs <code>reference</code>.</p>",
        "id": 177429586,
        "sender_full_name": "nagisa",
        "timestamp": 1570306760
    },
    {
        "content": "<p>I'm not sure that's a counter-example</p>",
        "id": 177429675,
        "sender_full_name": "Lokathor",
        "timestamp": 1570306867
    },
    {
        "content": "<p>you need a reference to the whole array to make a legal reference to an element of the array</p>",
        "id": 177429689,
        "sender_full_name": "Lokathor",
        "timestamp": 1570306900
    },
    {
        "content": "<p>once you have converted &amp;[T] into a particular &amp;T, you can't just jump that to another element, you have to go back to the full slice reference</p>",
        "id": 177429748,
        "sender_full_name": "Lokathor",
        "timestamp": 1570306953
    },
    {
        "content": "<p>That’s definitely not something anybody does, though again, they usually use pointers, not references. Even the slice iterator is 2 <em>element</em> pointers and <code>fn next() { ...; start = ptr::offset(start, 1); ... }</code>.</p>",
        "id": 177429835,
        "sender_full_name": "nagisa",
        "timestamp": 1570307087
    },
    {
        "content": "<p>However for the particular optimisation <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> cares about, they need to handle both pointers and references equally… well.</p>",
        "id": 177429860,
        "sender_full_name": "nagisa",
        "timestamp": 1570307149
    },
    {
        "content": "<p>(esp. since MIR does not yet have <code>raw &amp;</code> operation AFAIK)</p>",
        "id": 177429907,
        "sender_full_name": "nagisa",
        "timestamp": 1570307173
    },
    {
        "content": "<p>Nothing that was said conflicts with any of that, you just gotta use <code>slice.as_ptr()</code> (or copy its body) instead of <code>&amp;slice[0]</code> for creating the raw pointer.</p>",
        "id": 177429926,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1570307260
    },
    {
        "content": "<p>Fair.</p>",
        "id": 177429980,
        "sender_full_name": "nagisa",
        "timestamp": 1570307333
    },
    {
        "content": "<blockquote>\n<p>Is this example UB? According to the (non-normative) pointer::offset docs:</p>\n</blockquote>\n<p>note that those docs just say when <code>pointer::offset</code> is UB; they do not specify when it is (not) UB to actually use the resulting ptr</p>",
        "id": 177713108,
        "sender_full_name": "RalfJ",
        "timestamp": 1570627639
    },
    {
        "content": "<p>this is aliasing model territory which is very unspecified (Nomicon and Reference both explicitly keep that open)</p>",
        "id": 177713131,
        "sender_full_name": "RalfJ",
        "timestamp": 1570627655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> ^</p>",
        "id": 177713213,
        "sender_full_name": "RalfJ",
        "timestamp": 1570627699
    }
]