[
    {
        "content": "<p>According to docs</p>\n<blockquote>\n<p>\"For instance, Vec and Box ensure they never allocate more than isize::MAX\"</p>\n</blockquote>\n<p>Should the comparison at <a href=\"https://github.com/rust-lang/rust/blob/5bd1ec3283874b97b27da4539b2950fbd01c4b0e/library/alloc/src/raw_vec.rs#L390\">https://github.com/rust-lang/rust/blob/5bd1ec3283874b97b27da4539b2950fbd01c4b0e/library/alloc/src/raw_vec.rs#L390</a> be against len as isize?</p>\n<p>Or maybe <code>(additional as isize) &lt; 0 || (len as isize).checked_add(additional as isize).is_none()</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">try_reserve</span><span class=\"p\">(</span><span class=\"kt\">isize</span>::<span class=\"n\">MAX</span><span class=\"p\">.</span><span class=\"n\">unsigned_abs</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{r:?}\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Err(TryReserveError { kind: AllocError { layout: Layout { size_: 9223372036854775808, align_: 1 }, non_exhaustive: () } })</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">try_reserve</span><span class=\"p\">(</span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{r:?}\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Err(TryReserveError { kind: AllocError { layout: Layout { size_: 18446744073709551615, align_: 1 }, non_exhaustive: () } })</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">try_reserve</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{r:?}\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Ok(())</span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">try_reserve</span><span class=\"p\">(</span><span class=\"kt\">usize</span>::<span class=\"n\">MAX</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Err(TryReserveError { kind: CapacityOverflow })</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{r:?}\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276392353,
        "sender_full_name": "Bot+",
        "timestamp": 1648066036
    },
    {
        "content": "<p>That doesn't help for elements that aren't exactly 1 byte.</p>",
        "id": 276392541,
        "sender_full_name": "bjorn3",
        "timestamp": 1648066122
    },
    {
        "content": "<p>it's been a <em>very</em> long time but on paper  grow_amortized gets to be less strict because of its ~doubling behaviour</p>",
        "id": 276392639,
        "sender_full_name": "Gankra",
        "timestamp": 1648066159
    },
    {
        "content": "<p>oh this isn't a soundness question, but a consistency-in-error-question?</p>",
        "id": 276392967,
        "sender_full_name": "Gankra",
        "timestamp": 1648066304
    },
    {
        "content": "<p>Right, <code>let array_size = mem::size_of::&lt;T&gt;().checked_mul(n).ok_or(LayoutError)?;</code> comes after that.</p>\n<p>It's definitely inconsistent about returning  Err(CapacityOverflow).</p>",
        "id": 276393347,
        "sender_full_name": "Bot+",
        "timestamp": 1648066472
    },
    {
        "content": "<p>That checkes if it overflows <code>usize</code> though. The actual check for <code>isize::MAX</code> is:</p>\n<ul>\n<li>for 32 bit architectures there's a <code>if usize::BITS &lt; 64 &amp;&amp; alloc_size &gt; isize::MAX as usize {</code>in <code>alloc_guard</code></li>\n<li>for 64 bit architectures the actual address space is less than 63 bits so an allocation of <code>isize::MAX</code> will always fail</li>\n</ul>",
        "id": 276395141,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1648067187
    }
]