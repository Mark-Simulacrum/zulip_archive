[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I was trying to answer to <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/218\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/218\">ucg#218</a> and came up with this code which fails under miri (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=b69833b35c30301975231b942b605be3\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=b69833b35c30301975231b942b605be3\">playground</a>): </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">meaning_of_life</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"k\">union</span> <span class=\"nc\">U</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">F</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">a</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">t</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">y</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">meaning_of_life</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179693357,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572684313
    },
    {
        "content": "<p>While I see why it might fail, I'm not sure I agree that this should fail</p>",
        "id": 179693364,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572684350
    },
    {
        "content": "<p>The actual type of <code>F</code> in <code>a(meaning_of_life)</code> is <code>F: fn() -&gt; i32 {meaning_of_life}</code></p>",
        "id": 179693417,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572684427
    },
    {
        "content": "<p>and transmuting that to a <code>fn() -&gt; i32</code> is ok</p>",
        "id": 179693418,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572684440
    },
    {
        "content": "<p>The error I get is:</p>\n<div class=\"codehilite\"><pre><span></span>U { x: t }.y\n^^^^^^^^^^^^ Miri evaluation error: type validation failed: encountered uninitialized bytes, but expected something greater or equal to 1\nnote: inside call to `a::&lt;fn() -&gt; i32 {meaning_of_life}&gt;`\n</pre></div>",
        "id": 179693472,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572684531
    },
    {
        "content": "<p>And I'm not sure how that is happening, since the type of <code>F</code> is correct, and therefore the transmute to <code>fn()-&gt;i32</code> looks correct to me as well</p>",
        "id": 179693483,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572684586
    },
    {
        "content": "<p>(and well notice that Rust segfaults, so, something weird is going on)</p>",
        "id": 179693735,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572685014
    },
    {
        "content": "<p><code>F</code> is a ZST, you can't <em>transmute</em> that to a fn pointer, you can only <em>cast</em> (or coerce) it which boils down to taking the address of the function rather than mere type punning</p>",
        "id": 179693743,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1572685024
    },
    {
        "content": "<p>so that explains the uninitialized bytes</p>",
        "id": 179693757,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572685065
    },
    {
        "content": "<p>I still find it weird that <code>U { x: fn() -&gt; i32 {foo}, y: fn() -&gt; i32 }</code> is a \"useless\" union</p>",
        "id": 179693807,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572685124
    },
    {
        "content": "<p>but yeah, that can't work</p>",
        "id": 179693825,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572685195
    },
    {
        "content": "<p>We could maybe add a <code>Fn::as_fn(self) -&gt; Option&lt;fn(Args) -&gt; Ret&gt;</code> method to the function traits</p>",
        "id": 179693878,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572685240
    },
    {
        "content": "<p>that returns <code>Some</code> if the type can be coerced into a function pointer of the appropriate type or similar</p>",
        "id": 179693892,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572685263
    },
    {
        "content": "<p>or somehow support <code>as</code> expressions for the function traits</p>",
        "id": 179693977,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572685408
    },
    {
        "content": "<p>Is there a scenario where you need to do that conversion <em>after</em> abstracting the concrete type to a <code>F. Fn</code>? <em>And</em> can deal with it possibly failing? In most circumstances, I imagine you could just as well do the <code>as</code> cast before forgetting the concrete type that can be cast to a fn pointer type.</p>",
        "id": 179694041,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1572685548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> I don't know, but if you want to cast a <code>Fn</code> to a <code>fn</code> in a generic context, that cast can fail.</p>",
        "id": 179694177,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572685759
    },
    {
        "content": "<p>Obviously. So why try to do that, unless something else forces your hand?</p>",
        "id": 179694183,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1572685789
    },
    {
        "content": "<p>No idea, I've never needed this, but I'll ask the user.</p>",
        "id": 179694225,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572685812
    },
    {
        "content": "<blockquote>\n<p>And can deal with it possibly failing?</p>\n</blockquote>\n<p>You can actually deal with this, by creating a function that uses the <code>Fn</code> via some external context</p>",
        "id": 179694296,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572685969
    },
    {
        "content": "<p>(e.g. a static, thread local, etc. but........... sounds like a bad idea anyways)</p>",
        "id": 179694304,
        "sender_full_name": "gnzlbg",
        "timestamp": 1572685990
    },
    {
        "content": "<p>Maybe related, I think it would be useful to have a trait shared by function \"items\" and function items only:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[waving_hands]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FnItem</span><span class=\"o\">&lt;</span><span class=\"n\">Args</span><span class=\"o\">&gt;</span><span class=\"w\"> </span>: <span class=\"nb\">Copy</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Frozen</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"n\">Args</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">call_item</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">args</span>: <span class=\"nc\">Args</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"n\">Args</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CALL_POINTER</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">Args</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"n\">Args</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">Output</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>And then with <code>F : FnItem(...) -&gt; _</code> one could get a guaranteed function \"item\" with <code>F::call_item</code>, and lifetime-monomorphized <code>fn</code> pointer with the constant.</p>",
        "id": 180366991,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1573398381
    }
]