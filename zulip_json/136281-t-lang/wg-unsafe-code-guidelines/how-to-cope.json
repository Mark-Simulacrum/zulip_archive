[
    {
        "content": "<p>So I was thinking about how to structure conversations and so forth. I wrote down some thoughts in this gist:</p>\n<p><a href=\"https://gist.github.com/nikomatsakis/13d7232609e6f6f86e0e1d4cc0afec99\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/13d7232609e6f6f86e0e1d4cc0afec99\">https://gist.github.com/nikomatsakis/13d7232609e6f6f86e0e1d4cc0afec99</a></p>\n<p>I'm curious for feedback!</p>",
        "id": 132692621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535112209
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"126854\">@avadacatavra</span></p>",
        "id": 132692624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535112214
    },
    {
        "content": "<p>my goal was \"lightweight process to allow us to actually make some progress\" but my main concern is \"overkill?\"</p>",
        "id": 132692692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535112290
    },
    {
        "content": "<p>updated gist with an actual example a discussion proposal</p>",
        "id": 132693073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535112926
    },
    {
        "content": "<p>updated again</p>",
        "id": 132693892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114155
    },
    {
        "content": "<p>ah, process...^^</p>",
        "id": 132693911,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114163
    },
    {
        "content": "<p>so would \"validity of <code>&amp;mut T</code>\" be a separate discussion from \"validity of <code>i32</code>\"?</p>",
        "id": 132693947,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114183
    },
    {
        "content": "<p>I envisioned that as a separate thread, but I'm open to suggestion</p>",
        "id": 132693966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114231
    },
    {
        "content": "<p>it might be that we want fewer, coarser threads</p>",
        "id": 132693969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114245
    },
    {
        "content": "<p>since a lot of times there is \"cross-talk\"</p>",
        "id": 132693975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114252
    },
    {
        "content": "<p>thread = discussion?</p>",
        "id": 132693978,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114262
    },
    {
        "content": "<p>but one of the things I hoped with that process document was to allow us to customize this \"per conversation\", too</p>",
        "id": 132693979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114264
    },
    {
        "content": "<p>hmm no I imagined \"discussion\" as a bundle of related threads :)</p>",
        "id": 132693981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114273
    },
    {
        "content": "<p>I should probably make that clearer</p>",
        "id": 132694021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> do you have a repo for the valgrind stuff? i think we should also have pointers to related projects</p>",
        "id": 132694022,
        "sender_full_name": "avadacatavra",
        "timestamp": 1535114285
    },
    {
        "content": "<p>\"discussion area\", perhaps</p>",
        "id": 132694027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> did you look at <a href=\"https://github.com/nikomatsakis/unsafe-code-guidelines/blob/data-repr/reference/src/active_discussion/representation.md\" target=\"_blank\" title=\"https://github.com/nikomatsakis/unsafe-code-guidelines/blob/data-repr/reference/src/active_discussion/representation.md\">my example proposal</a>?</p>",
        "id": 132694041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> re \"Relationship to Rust reference\" it's not clear to me that the unsafe code guidelines document is the mdbook in the repo (which i'm assuming it is?)</p>",
        "id": 132694135,
        "sender_full_name": "avadacatavra",
        "timestamp": 1535114424
    },
    {
        "content": "<p>also--are we thinking next week for the official reboot launch discussion?</p>",
        "id": 132694239,
        "sender_full_name": "avadacatavra",
        "timestamp": 1535114558
    },
    {
        "content": "<p>yeah I should probably change the rpeo a bit to match</p>",
        "id": 132694355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114745
    },
    {
        "content": "<p>but I meant the mdbook in the repo</p>",
        "id": 132694359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114749
    },
    {
        "content": "<p>and probably the \"active discussions\" should <em>not</em> be part of the mdbook</p>",
        "id": 132694365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oO that's a HUGE amount of things discussed together</p>",
        "id": 132694419,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114792
    },
    {
        "content": "<p>TBH I would separate out safety invariants entierly</p>",
        "id": 132694424,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114801
    },
    {
        "content": "<p>I was wondering about that</p>",
        "id": 132694427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114810
    },
    {
        "content": "<p>they need so much machinery to talk about precisely</p>",
        "id": 132694430,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114816
    },
    {
        "content": "<p>yeah</p>",
        "id": 132694433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114823
    },
    {
        "content": "<p>seems good to me</p>",
        "id": 132694439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114829
    },
    {
        "content": "<p>one thing I was thinking as I biked home is</p>",
        "id": 132694440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114833
    },
    {
        "content": "<p>and we have a lock-in problem, where we cannot ever strneghten or weaken then -- and I still wonder if there is a mechanism to achiebve that</p>",
        "id": 132694442,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114836
    },
    {
        "content": "<p>it's also fine for there to be open issues accumulating thoughts (or threads, etc)</p>",
        "id": 132694443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114841
    },
    {
        "content": "<p>but I'd prefer that I at least don't have to pay as much attention to those</p>",
        "id": 132694449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114855
    },
    {
        "content": "<p>that is, the \"this is the active area of discussion\" idea is meant to help both steer but also ensure we make progress on <em>something</em> at any moment</p>",
        "id": 132694452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114872
    },
    {
        "content": "<p>hehe</p>",
        "id": 132694456,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114881
    },
    {
        "content": "<p>(point being: if we accumualte thoughts about safety invariants as we go, we can note those down elsewhere)</p>",
        "id": 132694498,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114888
    },
    {
        "content": "<blockquote>\n<p>and we have a lock-in problem, where we cannot ever strneghten or weaken then -- and I still wonder if there is a mechanism to achiebve that</p>\n</blockquote>\n<p>it seems to me that all invariants have some measure of this problem</p>",
        "id": 132694504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114903
    },
    {
        "content": "<p>yeah seems okay to have a place</p>",
        "id": 132694521,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114936
    },
    {
        "content": "<p>that is, if we say that the validity invariant is X, then there will be safe code that maintains X; we can weaken X (which I guess is your point?)</p>",
        "id": 132694523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114938
    },
    {
        "content": "<p>but we certainly can't <em>strengthen</em> X?</p>",
        "id": 132694531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114947
    },
    {
        "content": "<p>but given how often people confuse these invariants, it should be somewhat separate</p>",
        "id": 132694532,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114950
    },
    {
        "content": "<p>I'm not convinced we can even weaken X really</p>",
        "id": 132694533,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114953
    },
    {
        "content": "<p>i.e., unsafe code might be doing things that are only correct if X is true</p>",
        "id": 132694534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114961
    },
    {
        "content": "<p>yeah we can make more stuff valid is what I mean</p>",
        "id": 132694535,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114966
    },
    {
        "content": "<p>not the other way around of course</p>",
        "id": 132694537,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114970
    },
    {
        "content": "<p>but for safety we do not even have that</p>",
        "id": 132694541,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114978
    },
    {
        "content": "<p>I see, the reason being:</p>",
        "id": 132694544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114991
    },
    {
        "content": "<p>unsafe code assumes (at boundaries) the the full safety invariant holds</p>",
        "id": 132694545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535114998
    },
    {
        "content": "<p>unsafe code has a manually written precondition</p>",
        "id": 132694546,
        "sender_full_name": "RalfJ",
        "timestamp": 1535114999
    },
    {
        "content": "<p>and else that</p>",
        "id": 132694591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115006
    },
    {
        "content": "<p>and if we make more things valid, previously calling that unsafe code with invalid things was UB</p>",
        "id": 132694597,
        "sender_full_name": "RalfJ",
        "timestamp": 1535115009
    },
    {
        "content": "<p>right, ok I see</p>",
        "id": 132694598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115010
    },
    {
        "content": "<p>and so we can do whatever</p>",
        "id": 132694599,
        "sender_full_name": "RalfJ",
        "timestamp": 1535115012
    },
    {
        "content": "<p>in other words:</p>",
        "id": 132694606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115030
    },
    {
        "content": "<p>basically wekaning validity only can affect programs that previously violated validity</p>",
        "id": 132694607,
        "sender_full_name": "RalfJ",
        "timestamp": 1535115031
    },
    {
        "content": "<p>and those were UB</p>",
        "id": 132694608,
        "sender_full_name": "RalfJ",
        "timestamp": 1535115033
    },
    {
        "content": "<p>if unsafe code is relying on the validity invariant holding</p>",
        "id": 132694610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115036
    },
    {
        "content": "<p>that is (in principle, at least) something that would be stated by \"copying\" the current validity invariant as a precondition</p>",
        "id": 132694617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115048
    },
    {
        "content": "<p><em>all</em> code is relying on the validity invariant holding. this is not even a question</p>",
        "id": 132694620,
        "sender_full_name": "RalfJ",
        "timestamp": 1535115053
    },
    {
        "content": "<p>well, if we weakened it...</p>",
        "id": 132694637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115078
    },
    {
        "content": "<p>that is, if we made more things valid</p>",
        "id": 132694639,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115091
    },
    {
        "content": "<p>ah I think I see what you mean</p>",
        "id": 132694640,
        "sender_full_name": "RalfJ",
        "timestamp": 1535115091
    },
    {
        "content": "<p>yes. if unsafe code says \"call me on any valid data\", <em>that</em> cannot be weakened together with the actual validity the compiler relies on</p>",
        "id": 132694647,
        "sender_full_name": "RalfJ",
        "timestamp": 1535115117
    },
    {
        "content": "<p>regarding the confusion of the two invariants, I am amazed people seemed to have picked up my terminology so I hope that helps a bit^^</p>",
        "id": 132694699,
        "sender_full_name": "RalfJ",
        "timestamp": 1535115158
    },
    {
        "content": "<p>concrete example:</p>",
        "id": 132694712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115206
    },
    {
        "content": "<p>if we said \"from now on, <code>&amp;T</code> may be unaligned\"</p>",
        "id": 132694715,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115215
    },
    {
        "content": "<p>we could adjust our codegen</p>",
        "id": 132694717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115227
    },
    {
        "content": "<p>but others might still be using the old one</p>",
        "id": 132694721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115231
    },
    {
        "content": "<p>(or packing things in the low bits)</p>",
        "id": 132694769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115264
    },
    {
        "content": "<p>PS I think what we ought to do is to define not just one validity invariant</p>",
        "id": 132694811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115353
    },
    {
        "content": "<p>well, it depends of course</p>",
        "id": 132694829,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115362
    },
    {
        "content": "<p>but we may find places where we say \"you must guarantee this is true, but you can't rely on it being true\"</p>",
        "id": 132694860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115373
    },
    {
        "content": "<p>I think i'll bring this up on internals, a bit off topic  here :)</p>",
        "id": 132694867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115383
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/two-kinds-of-invariants-safety-and-validity/8264/24?u=nikomatsakis\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/two-kinds-of-invariants-safety-and-validity/8264/24?u=nikomatsakis\">posted</a></p>",
        "id": 132695009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535115585
    },
    {
        "content": "<p>I have a hard time with those \"must guarantee but cannot rely\"</p>",
        "id": 132695587,
        "sender_full_name": "RalfJ",
        "timestamp": 1535116258
    },
    {
        "content": "<p>how would a def.n of UB for that look like?</p>",
        "id": 132695594,
        "sender_full_name": "RalfJ",
        "timestamp": 1535116265
    },
    {
        "content": "<p>^^</p>",
        "id": 132696023,
        "sender_full_name": "RalfJ",
        "timestamp": 1535116781
    },
    {
        "content": "<p>FYI: we can stick this poll into the announcement: <a href=\"https://doodle.com/poll/ruur88tf99stspzu#calendar\" target=\"_blank\" title=\"https://doodle.com/poll/ruur88tf99stspzu#calendar\">https://doodle.com/poll/ruur88tf99stspzu#calendar</a></p>",
        "id": 132696108,
        "sender_full_name": "avadacatavra",
        "timestamp": 1535116844
    },
    {
        "content": "<p>posted: <a href=\"https://internals.rust-lang.org/t/proposal-for-unsafe-code-guidelines-process/8294/2\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/proposal-for-unsafe-code-guidelines-process/8294/2\">https://internals.rust-lang.org/t/proposal-for-unsafe-code-guidelines-process/8294/2</a></p>",
        "id": 132703115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535125650
    }
]