[
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/52548161/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/52548161/155423\">Why does modifying a mutable reference's value through a raw pointer not violate Rust's aliasing rules?</a></p>\n<p>/cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 134822833,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538140364
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Seems like someone answered :)</p>",
        "id": 134923173,
        "sender_full_name": "RalfJ",
        "timestamp": 1538314314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> an important thing about any source is to evaluate it yourself. Voting to affect the score would be useful, but you are knowledgable and recognized (and even mentioned in the answer), so adding a comment that says you agree/disagree or an alternate answer would of course be welcomed</p>",
        "id": 134923218,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538314425
    },
    {
        "content": "<p>aside: it always amazes me how many people get to a SO question and read the <em>top</em> answer, immediately stopping. They never read the subsequent (often better) answers.</p>",
        "id": 134923263,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538314466
    },
    {
        "content": "<p>ideally the top answer would be the best one...</p>",
        "id": 134923277,
        "sender_full_name": "RalfJ",
        "timestamp": 1538314554
    },
    {
        "content": "<p>I added a comment. If it was my answer I'd also add another example of a piece of code that is NOT okay... what would be the best way to do that?</p>",
        "id": 134923325,
        "sender_full_name": "RalfJ",
        "timestamp": 1538314621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> e.g. this code is not okay:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">x_ptr</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x_ptr</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// BÃ„M! Used no-longer-valid raw ptr</span>\n</pre></div>",
        "id": 134923432,
        "sender_full_name": "RalfJ",
        "timestamp": 1538314826
    },
    {
        "content": "<p>It's a narrow world view to assume that there can even <em>be</em> a \"best\".</p>",
        "id": 134923806,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538315562
    },
    {
        "content": "<p>And there are plenty of arguments around what should even be at the top of the answers (accepted by OP, most votes, most recently created, etc.)</p>",
        "id": 134923818,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538315597
    },
    {
        "content": "<p>There's a small amount of sorting you can do on the answers, if so inclined</p>",
        "id": 134923859,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538315643
    },
    {
        "content": "<blockquote>\n<p>I'd also add another example of a piece of code that is NOT okay... what would be the best way to do that?</p>\n</blockquote>\n<p>Again, assuming there's a <em>best</em> <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span> </p>\n<p>I see a few options. You could provide that code in a playground link and add it and text in a comment (optionally encouraging OP to include it in the answer), you could edit it into the answer, or you could provide an answer yourself</p>",
        "id": 134923873,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538315741
    },
    {
        "content": "<p>Matthieu M. is a pretty frequent contributor, so I'd expect any communication in comments would be responded to in a short amount of time</p>",
        "id": 134923922,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538315819
    },
    {
        "content": "<p>Thank you for commenting, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> !</p>",
        "id": 134924037,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538316008
    },
    {
        "content": "<p>I dont think I can edit other people's stuff, so I'll try the playground link</p>",
        "id": 134924114,
        "sender_full_name": "RalfJ",
        "timestamp": 1538316224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Uh, I am thoroughly confused by <a href=\"https://stackoverflow.com/questions/52601731/how-to-create-unsafecellc-void-safely\" target=\"_blank\" title=\"https://stackoverflow.com/questions/52601731/how-to-create-unsafecellc-void-safely\">https://stackoverflow.com/questions/52601731/how-to-create-unsafecellc-void-safely</a>. But all the other participants seem to be as well.</p>",
        "id": 135265082,
        "sender_full_name": "RalfJ",
        "timestamp": 1538756918
    },
    {
        "content": "<p>I feel like at least 2, probably more, issues are conflated there -- so I am not even sure where to begin answering and/or correcting things^^</p>",
        "id": 135265092,
        "sender_full_name": "RalfJ",
        "timestamp": 1538756936
    },
    {
        "content": "<p>But to begin, when you have an opaque FFI <em>pointer</em>, you don't have to worry about <code>UnsafeCell</code> or interior mutability or anything like that. Rust doesnt care about stuff behind a raw pointer.</p>",
        "id": 135265176,
        "sender_full_name": "RalfJ",
        "timestamp": 1538757005
    },
    {
        "content": "<p>Ugh. That question is a mess</p>",
        "id": 135286395,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538779197
    },
    {
        "content": "<p>I think \" Rust doesnt care about stuff behind a raw pointer.\" is the most important aspect; is that already codified in whatever unsafe things exist?</p>",
        "id": 135287077,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538780143
    },
    {
        "content": "<blockquote>\n<p>I think \" Rust doesnt care about stuff behind a raw pointer.\" is the most important aspect; is that already codified in whatever unsafe things exist?</p>\n</blockquote>\n<p>I am not sure how explicitly it is said -- it is the entire reason raw ptrs even exist, so it may be one of those things that didnt even seem worth saying.^^ but I'd guess it is <em>somewhere</em></p>",
        "id": 135303864,
        "sender_full_name": "RalfJ",
        "timestamp": 1538813432
    },
    {
        "content": "<p>e.g. <a href=\"https://doc.rust-lang.org/nightly/nomicon/ffi.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nomicon/ffi.html\">https://doc.rust-lang.org/nightly/nomicon/ffi.html</a></p>\n<blockquote>\n<p>raw pointers fall outside of Rust's safe memory model.</p>\n</blockquote>",
        "id": 135303875,
        "sender_full_name": "RalfJ",
        "timestamp": 1538813472
    },
    {
        "content": "<p>and there is <a href=\"https://doc.rust-lang.org/book/2018-edition/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer\" target=\"_blank\" title=\"https://doc.rust-lang.org/book/2018-edition/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer\">https://doc.rust-lang.org/book/2018-edition/ch19-01-unsafe-rust.html#dereferencing-a-raw-pointer</a></p>",
        "id": 135303877,
        "sender_full_name": "RalfJ",
        "timestamp": 1538813516
    },
    {
        "content": "<p>Nice, things I can link to always make an answer better</p>",
        "id": 135312880,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538833380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> do you think that defining \"interior mutability\" is something that this WG should be concerned with?</p>",
        "id": 135312885,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538833410
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> do you think that defining \"interior mutability\" is something that this WG should be concerned with?</p>\n</blockquote>\n<p>In principle yes, however -- is there an open question there? Interior mutabilitiy is about mutating memory where there also exists a live shared reference non-transitively pointing to the same memory</p>",
        "id": 135344085,
        "sender_full_name": "RalfJ",
        "timestamp": 1538900933
    },
    {
        "content": "<p>at least in my mind interior mutability is pretty much settleed</p>",
        "id": 135344091,
        "sender_full_name": "RalfJ",
        "timestamp": 1538900950
    },
    {
        "content": "<p>That's fine then. I'll submit a PR to the glossary with that and you can approve it ;-)</p>",
        "id": 135357036,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538928000
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/52911942/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/52911942/155423\">Is transmuting PhantomData markers safe?</a></p>",
        "id": 136287232,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540234899
    },
    {
        "content": "<p>we do not currently guarantee any such thing for repr(Rust) structs. in the UCG repo discussion seems to be favorable towards guaranteeing it at least for newtypes (exact definition TBD but might include that type). guaranteeing it for something like { Vec&lt;T&gt;, i32, PhantomData&lt;_&gt; }  seems controversial though personally I think we really should</p>",
        "id": 136287689,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540235385
    },
    {
        "content": "<p>Doing my due diligence â€” should I stick this core question somewhere to ultimately be a part of the Grand Unified Unsafe Theory?</p>",
        "id": 136287798,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540235496
    },
    {
        "content": "<p>i don't think there's an actively developed and consulted collection of \"stuff we need to settle\" any more (there used to be), but with a little massaging this could be an example in an issue comment arguing for ignoring align=1,size=0 fields for repr(Rust) type layout (e.g. here: <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/35\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/35\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues/35</a>). i don't think the \"PhantomData for phantom types that should be possible to change without copying\" use case was explicitly spelled out yet</p>",
        "id": 136288087,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540235765
    },
    {
        "content": "<p>it'd be good <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> to have links to questions that arise in the wild, imo</p>",
        "id": 136288281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540236004
    },
    {
        "content": "<p>I also agree with <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> that I think we should make said guarantee</p>",
        "id": 136288335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540236019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you agree with adding a comment to the issue that <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> linked me then?</p>",
        "id": 136288451,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540236141
    },
    {
        "content": "<p>I do</p>",
        "id": 136288618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540236280
    },
    {
        "content": "<p>I now responded saying they should use <code>repr(C)</code>. seems like the safest choice IMO, and what people should do when playing tricks with transmute and struct layout. you should have good reasons to do what with <code>repr(Rust)</code>.</p>",
        "id": 136320153,
        "sender_full_name": "RalfJ",
        "timestamp": 1540278770
    },
    {
        "content": "<p>The downside of repr(C), particularly for non-newtypes, is that you lose all the nice repr(Rust) optimizations that <em>do</em> make sense for your type. While we could introduce a complex hierarchy of attributes to gradually lower the undefinedness of repr(Rust) layout, I think for very niche or speculative optimizations it's more economical to give nice guarantees about repr(Rust) and instead introduce new reprs for optimizations that go beyond that <em>if and when they are implemented</em></p>",
        "id": 136321899,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540281199
    },
    {
        "content": "<p><code>repr(C)</code> kills niches?</p>",
        "id": 136322815,
        "sender_full_name": "RalfJ",
        "timestamp": 1540282416
    },
    {
        "content": "<p>it doesn't kill niches, but it kills reordering the non-align1 fields to minimize padding</p>",
        "id": 136322869,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540282453
    },
    {
        "content": "<p>Yeah it doesnt: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=6264c79e56afe2b77c6f51d04c0b6059\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=6264c79e56afe2b77c6f51d04c0b6059\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2015&amp;gist=6264c79e56afe2b77c6f51d04c0b6059</a></p>",
        "id": 136322964,
        "sender_full_name": "RalfJ",
        "timestamp": 1540282579
    },
    {
        "content": "<p>for newtypes the reordering doesnt do anything... and I'd rather be cautious and not reorder fields automatically when doing such tricks</p>",
        "id": 136323384,
        "sender_full_name": "RalfJ",
        "timestamp": 1540283153
    },
    {
        "content": "<p>\"I cannot always obtain the ideal field order with <code>repr(C)</code>\" might be an argument to use <code>repr(Rust)</code>, but IMO one should first see whether <code>repr(C)</code> isn't enough</p>",
        "id": 136323435,
        "sender_full_name": "RalfJ",
        "timestamp": 1540283206
    },
    {
        "content": "<p>if you use PhantomData for actual phantom types and so the type in the phantom data is the only thing you change when transmuting, everything's fine</p>",
        "id": 136323444,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540283223
    },
    {
        "content": "<p>maybe it is. so far I dont even see this suggested in the UCG discussion, aside from Gankro asking for something stronger that would imply what you said</p>",
        "id": 136323465,
        "sender_full_name": "RalfJ",
        "timestamp": 1540283271
    },
    {
        "content": "<p>I agree it is reasonable though</p>",
        "id": 136323472,
        "sender_full_name": "RalfJ",
        "timestamp": 1540283276
    },
    {
        "content": "<p>I am kicking myself for not bringing it up before because, duh, obviously</p>",
        "id": 136323527,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540283311
    },
    {
        "content": "<p>;)</p>",
        "id": 136323540,
        "sender_full_name": "RalfJ",
        "timestamp": 1540283342
    },
    {
        "content": "<p><a href=\"https://queue.acm.org/detail.cfm?id=3212479\" target=\"_blank\" title=\"https://queue.acm.org/detail.cfm?id=3212479\">https://queue.acm.org/detail.cfm?id=3212479</a> suggests that C's struct guarantees do actually kill performance (preventing reordering, requiring preservation of padding)</p>",
        "id": 136344080,
        "sender_full_name": "Andrew Poelstra",
        "timestamp": 1540308450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132769\">@Andrew Poelstra</span> that's a very interesting article, thanks for sharing!</p>",
        "id": 136344515,
        "sender_full_name": "RalfJ",
        "timestamp": 1540308746
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132769\">@Andrew Poelstra</span> I'm not sure what exactly you're responding to but two things to keep in mind in this discussion: 1. nobody except joshtriplett wants repr(Rust) struct layout to be as locked down as repr(C) layout, it's just a question of defaults for certain specialized optimizations, and 2. where hard data exists on the effectiveness of certain layout optimizations, it's usually either limited to minimizing padding (which we already do and want to keep doing) or not distinguishing between speedups caused by optimizations that we already have one hand and more advanced and tricky optimizations on the other hand (because they apply them all in one go to C code) which makes it hard to infer how useful the second kind of optimization would be to add to Rust</p>",
        "id": 136344820,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540308972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> Ok, cool. I was posted the article mostly because it surprised me with the extent of the optimizations that exist and talk of locking down repr(Rust) makes me nervous that people are trying to make programmers' lives easier for certain niche struct-hacking use cases without considering the extent of the performance loss. But I think I misread the room.</p>",
        "id": 136345047,
        "sender_full_name": "Andrew Poelstra",
        "timestamp": 1540309169
    },
    {
        "content": "<p>btw, some of the transformations described/wishlisted in that article specifically, such as AoS&lt;-&gt;SoA, aren't even possible in safe Rust</p>",
        "id": 136345067,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540309189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> thanks for editing :)</p>",
        "id": 136407468,
        "sender_full_name": "RalfJ",
        "timestamp": 1540386576
    },
    {
        "content": "<p>no problem; you know how I enjoy it</p>",
        "id": 136426520,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540404661
    },
    {
        "content": "<p><a href=\"https://stackoverflow.com/q/53018458/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/53018458/155423\">Is it UB to cast *mut T to *mut ManuallyDrop&lt;T&gt;?</a></p>",
        "id": 136611468,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540654523
    },
    {
        "content": "<p>Isn't pointer-casting always \"safe\" since only the dereference is potentially unsafe?</p>",
        "id": 136611633,
        "sender_full_name": "simulacrum",
        "timestamp": 1540654846
    },
    {
        "content": "<p>(it can be done in safe code...)</p>",
        "id": 136611642,
        "sender_full_name": "simulacrum",
        "timestamp": 1540654865
    },
    {
        "content": "<p>heh, that's my kind of pedantry <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 136612094,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540655719
    },
    {
        "content": "<p>I <em>assume</em> they mean to then use the dereferenced value.</p>",
        "id": 136612103,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540655737
    },
    {
        "content": "<p>But more specifically, I think this is perfectly valid -- because <code>ManuallyDrop</code> is <code>#[repr(transparent)]</code></p>",
        "id": 136612108,
        "sender_full_name": "simulacrum",
        "timestamp": 1540655757
    },
    {
        "content": "<p>Though I might say that <code>let foo: ManuallyDrop&lt;T&gt; = ptr::read(v: *mut T);</code> is how I'd do it</p>",
        "id": 136612166,
        "sender_full_name": "simulacrum",
        "timestamp": 1540655821
    },
    {
        "content": "<p>Though I guess you can't do that directly because read requires *const T -&gt; T</p>",
        "id": 136612174,
        "sender_full_name": "simulacrum",
        "timestamp": 1540655865
    },
    {
        "content": "<p>but yeah this seems fine to me</p>",
        "id": 136612175,
        "sender_full_name": "simulacrum",
        "timestamp": 1540655874
    },
    {
        "content": "<p><code>repr(transparent)</code> was my rationale as well.</p>",
        "id": 136612234,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540655974
    },
    {
        "content": "<p>but then there's the question of the <em>value</em> of a pointer to a <code>ManuallyDrop</code> in the first place</p>",
        "id": 136612299,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540656008
    },
    {
        "content": "<p>If you don't want to drop it, don't read it â€” convert to a reference instead.</p>",
        "id": 136612334,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540656053
    },
    {
        "content": "<p>That's true -- or <code>ptr::write</code> to the value</p>",
        "id": 136612462,
        "sender_full_name": "simulacrum",
        "timestamp": 1540656244
    },
    {
        "content": "<p>I guess if you want to write to it \"normally\" though <code>ManuallyDrop</code> makes <code>&amp;mut ManuallyDrop&lt;T&gt;</code> a \"safe\" conversion</p>",
        "id": 136612470,
        "sender_full_name": "simulacrum",
        "timestamp": 1540656267
    },
    {
        "content": "<p>(given that it's dereferenceable)</p>",
        "id": 136612476,
        "sender_full_name": "simulacrum",
        "timestamp": 1540656285
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> your name was mentioned in the comments, so on the off-chance you might be interested...</p>\n<p><a href=\"https://stackoverflow.com/q/53990135/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/53990135/155423\">Is using an immutable borrow after an aliasing mutable borrow is created but before it is used actually dangerous?</a></p>",
        "id": 154142092,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546374826
    },
    {
        "content": "<p>thanks! Note that in your example, <code>f</code> should also get <code>restrict</code>. it applies to all mutable references as well as shared refs without immediate (non-transitive) interior mutability.</p>",
        "id": 154179462,
        "sender_full_name": "RalfJ",
        "timestamp": 1546441405
    }
]