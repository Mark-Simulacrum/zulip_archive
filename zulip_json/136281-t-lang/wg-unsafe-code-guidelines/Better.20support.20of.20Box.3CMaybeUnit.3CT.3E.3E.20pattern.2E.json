[
    {
        "content": "<p>I think actually we're very close to providing a useful \"placement new\" mechanism, with Box&lt;MaybeUnit&lt;T&gt;&gt; pattern... Most of the things can be implemented at the library level, only with a few \"primitives\" needed.</p>",
        "id": 172777615,
        "sender_full_name": "Charles Lew",
        "timestamp": 1565279880
    },
    {
        "content": "<p>It's especially useful when T is a very big type. Instead of moving from stack to heap when constructing Box&lt;T&gt;, people can just build a Box&lt;MaybeUnit&lt;T&gt;&gt; somehow, initialize it somehow, and assume_init and call it done~</p>",
        "id": 172777792,
        "sender_full_name": "Charles Lew",
        "timestamp": 1565279996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> <a href=\"https://github.com/rust-lang/rust/pull/62451\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62451\">https://github.com/rust-lang/rust/pull/62451</a></p>",
        "id": 172778325,
        "sender_full_name": "centril",
        "timestamp": 1565280300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  Yay~~</p>",
        "id": 172778393,
        "sender_full_name": "Charles Lew",
        "timestamp": 1565280359
    },
    {
        "content": "<p>good to know, thx~</p>",
        "id": 172778455,
        "sender_full_name": "Charles Lew",
        "timestamp": 1565280378
    },
    {
        "content": "<p>np</p>",
        "id": 172778490,
        "sender_full_name": "centril",
        "timestamp": 1565280406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> do you have a library implementation ?</p>",
        "id": 172784397,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565284986
    },
    {
        "content": "<p>I can imagine particular implementations for different use cases, but I wouldn't know how to write one that works even for the simple case of constructing a single value</p>",
        "id": 172784450,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565285036
    },
    {
        "content": "<p>E.g. if I wanted to initialize a <code>Box&lt;[u32; N]&gt;</code> where <code>N</code> is big,  I'd probably have some API like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">array_box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">MaybeUninit</span>::<span class=\"n\">uninit</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">).</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">));</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">assume_init</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172784705,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565285180
    },
    {
        "content": "<p>But that breaks if <code>T</code> is too big, like, another big array , so that you end up with <code>Box&lt;[[T; M]; N&gt;</code> where both M and N are big</p>",
        "id": 172784800,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565285263
    },
    {
        "content": "<p>And if instead of a <code>Box</code> I want a <code>Vec&lt;[T; N]&gt;</code> I probably need something completely different</p>",
        "id": 172784877,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565285292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>  i dont have a library implementation. But i guess at least the non-generics cases are satisfied.</p>",
        "id": 172793356,
        "sender_full_name": "Charles Lew",
        "timestamp": 1565290542
    },
    {
        "content": "<p>i guess being generic over the \"shape\" of data is tricky.</p>",
        "id": 172793462,
        "sender_full_name": "Charles Lew",
        "timestamp": 1565290621
    }
]