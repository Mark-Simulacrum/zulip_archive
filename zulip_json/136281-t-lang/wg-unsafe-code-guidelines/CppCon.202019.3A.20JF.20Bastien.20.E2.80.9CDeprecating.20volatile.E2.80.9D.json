[
    {
        "content": "<p>To all the folks in UCG who have been working with where Volatile should go in Rust, here's a talk released yesterday about where Volatile has been and (for C++) where it might be going. Could be helpful for tackling volatile in Rust as well.<br>\n<a href=\"https://www.youtube.com/watch?v=KJW_DLaVXIY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=KJW_DLaVXIY\">https://www.youtube.com/watch?v=KJW_DLaVXIY</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"KJW_DLaVXIY\" href=\"https://www.youtube.com/watch?v=KJW_DLaVXIY\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=KJW_DLaVXIY\"><img src=\"https://i.ytimg.com/vi/KJW_DLaVXIY/default.jpg\"></a></div>",
        "id": 178616428,
        "sender_full_name": "Lokathor",
        "timestamp": 1571616579
    },
    {
        "content": "<p>thanks; I know they have some ongoing work there but it's good to get an update</p>",
        "id": 178674349,
        "sender_full_name": "RalfJ",
        "timestamp": 1571676712
    },
    {
        "content": "<p>last time I checked it wasnt very Rust-relevant; IIRC they were moving more towards volatile <em>accesses</em> as opposed to volatile <em>objects</em> which is what we already do anyway... or am I entirely misremembering?</p>",
        "id": 178674424,
        "sender_full_name": "RalfJ",
        "timestamp": 1571676755
    },
    {
        "content": "<p>Yeah we already do what they're trying to move towards in the next few years.</p>\n<p>I'd say the biggest deal there is that volatile access can tear, and they <em>don't</em> plan to fix that for normal volatile, because the hardware itself doesn't even always give you that assurance.</p>",
        "id": 178684896,
        "sender_full_name": "Lokathor",
        "timestamp": 1571683245
    },
    {
        "content": "<p>yeah... though it still seems useful to guarantee that we dont tear the instruction. that lets the user reason on the hardware level.</p>",
        "id": 178691375,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687595
    },
    {
        "content": "<p>it is somewhat disappointing that with their volatile load/store methods they are copying Rust's design but not citing it as prior work :/</p>",
        "id": 178691422,
        "sender_full_name": "RalfJ",
        "timestamp": 1571687628
    },
    {
        "content": "<p>Isn't Rust itself copying what LLVM does here ?</p>",
        "id": 178693748,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571688882
    },
    {
        "content": "<p>possible? not sure what the API was inspired from</p>",
        "id": 178694313,
        "sender_full_name": "RalfJ",
        "timestamp": 1571689232
    },
    {
        "content": "<p>however it does make a difference whether one designs an IR or a surface language</p>",
        "id": 178694326,
        "sender_full_name": "RalfJ",
        "timestamp": 1571689247
    },
    {
        "content": "<p>and Rust as a surface language has some experience now with volatile-access-methods, which is not something where having it in LLVM helps</p>",
        "id": 178694360,
        "sender_full_name": "RalfJ",
        "timestamp": 1571689266
    },
    {
        "content": "<p>yeah Rust and the C++ plan are both copying LLVM's notion of how things work.</p>",
        "id": 178711823,
        "sender_full_name": "Lokathor",
        "timestamp": 1571703398
    },
    {
        "content": "<p>That talk is mostly C++ fixing C++-specific weirdness</p>",
        "id": 178748219,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571745754
    },
    {
        "content": "<p>Once they do that, they might get to the point were the only weirdness remaining is the same one Rust needs to deal with</p>",
        "id": 178748246,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571745781
    },
    {
        "content": "<p>but until then, they just have lower hanging fruit to fix</p>",
        "id": 178748266,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571745800
    },
    {
        "content": "<p>they might be proposing moving to a model were volatile and atomics aren't types, but types of memory accesses instead</p>",
        "id": 178748289,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571745829
    },
    {
        "content": "<p>apparently that's what the Linux kernel does</p>",
        "id": 178748295,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571745838
    },
    {
        "content": "<p>also, they use the term atomic to mean, among other things \"not tearing\"</p>",
        "id": 178748350,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571745859
    },
    {
        "content": "<p>(or maybe even \"at least not tearing\", whether all atomics will synchronize appears to be disputed but the talk does not go into it)</p>",
        "id": 178748402,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571745916
    },
    {
        "content": "<p>An interesting example they show is the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">FOO</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">).</span><span class=\"n\">read_volatile</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>they don't propose being able to optimize <code>foo</code> into <code>fn foo() {}</code> but they ask the question: \"what does that do?\"</p>",
        "id": 178748552,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571746056
    },
    {
        "content": "<p>e.g. even if that does MMIO, is there a target where reading the memory has some interesting side-effects or can the read be elided ?</p>",
        "id": 178748623,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571746099
    },
    {
        "content": "<p>there's definitely targets where a read has a side effect of its own</p>",
        "id": 178772200,
        "sender_full_name": "Lokathor",
        "timestamp": 1571761813
    },
    {
        "content": "<p>the only one that comes to mind offhand is the NES, but i bet we could find others</p>",
        "id": 178772237,
        "sender_full_name": "Lokathor",
        "timestamp": 1571761854
    },
    {
        "content": "<p>On every platform that has an MMU, a read can cause a page fault, which in turn can have arbitrary software-defined side-effects.</p>",
        "id": 178773899,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571763180
    }
]