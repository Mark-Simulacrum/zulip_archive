[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> miri says that the following is ok: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e68a01cfb3d769ae90690c60e6511eec\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e68a01cfb3d769ae90690c60e6511eec\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e68a01cfb3d769ae90690c60e6511eec</a></p>\n<p>Does that mean that references to uninitialized memory can be ok ?</p>",
        "id": 151292235,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544465486
    },
    {
        "content": "<p>I'm pretty sure you have to allow that because lots of code already uses it.</p>",
        "id": 151292692,
        "sender_full_name": "briansmith",
        "timestamp": 1544465833
    },
    {
        "content": "<p>Has anybody tried to extend the borrow checker to allow \"write-only\" borrows?</p>",
        "id": 151292699,
        "sender_full_name": "briansmith",
        "timestamp": 1544465839
    },
    {
        "content": "<p>In fact, there's a lot of existing code that does the same thing, except <code>foo()</code> itself takes a reference and initializes the memory using the reference.</p>",
        "id": 151292820,
        "sender_full_name": "briansmith",
        "timestamp": 1544465908
    },
    {
        "content": "<p>miri doesn't reject all the things I would like it to reject ;) mostly because we haven't decided about the invariants yet</p>",
        "id": 151404284,
        "sender_full_name": "RalfJ",
        "timestamp": 1544478829
    },
    {
        "content": "<p>there are two things that code does which are worth discussing: it has an uninitialized integer (I think that should be UB), and it has a reference to an uninitialized integer (I think that should be fine)</p>",
        "id": 151404338,
        "sender_full_name": "RalfJ",
        "timestamp": 1544478868
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> in general, you shouldnt take \"miri accepts it\" has \"UB-free\". there are things that are not implemented, and there are things where the checks are not as aggressive as I could make them because I want to see how the UCG discussions go first.</p>",
        "id": 151404386,
        "sender_full_name": "RalfJ",
        "timestamp": 1544478932
    },
    {
        "content": "<p>makes sense</p>",
        "id": 151404444,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544478966
    },
    {
        "content": "<p>that example is pretty much an idiom that the rsmpi crate uses ~a million times.</p>",
        "id": 151404458,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544478988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> well <code>mem::uninitialized</code> is going to get deprecated. how would you have written that with <code>MaybeUninit</code>?</p>",
        "id": 151404610,
        "sender_full_name": "RalfJ",
        "timestamp": 1544479164
    },
    {
        "content": "<p>the proper way</p>",
        "id": 151404633,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544479189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> could you write some code? \"proper\" isn't very explicit ;)</p>",
        "id": 151404711,
        "sender_full_name": "RalfJ",
        "timestamp": 1544479219
    },
    {
        "content": "<p><code>MaybeUninit</code> has an <code>as_mut_ptr</code> method that makes it trivial to pass \"out\" parameters to C</p>",
        "id": 151404717,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544479225
    },
    {
        "content": "<p>oh you just need raw ptrs anyway</p>",
        "id": 151404726,
        "sender_full_name": "RalfJ",
        "timestamp": 1544479238
    },
    {
        "content": "<p>yeah then it's probably easy</p>",
        "id": 151404732,
        "sender_full_name": "RalfJ",
        "timestamp": 1544479242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d6962e8e6098a191ef97bcd653630232\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d6962e8e6098a191ef97bcd653630232\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d6962e8e6098a191ef97bcd653630232</a></p>",
        "id": 151404831,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544479329
    },
    {
        "content": "<p>yeah that looks perfect :)</p>",
        "id": 151404840,
        "sender_full_name": "RalfJ",
        "timestamp": 1544479350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> so how is my initial example using <code>uninitialized</code> UB in a world with your RFC about <code>&amp;mut T as *mut T</code> ?</p>",
        "id": 151429778,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544516004
    },
    {
        "content": "<p>the user writes <code>&amp;mut T</code>, but that reference is never put into a place, it is never dereferenced, and it is coerced / casted into a raw pointer before the result of the expression it is in is put into a place</p>",
        "id": 151429835,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544516053
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> so how is my initial example using <code>uninitialized</code> UB in a world with your RFC about <code>&amp;mut T as *mut T</code> ?</p>\n</blockquote>\n<p>see the int/float point in <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/54\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/54\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/54</a> ;)</p>",
        "id": 151429848,
        "sender_full_name": "RalfJ",
        "timestamp": 1544516113
    },
    {
        "content": "<p>if I have my way, <code>let x: i32 = mem::uninitialized();</code> is UB</p>",
        "id": 151429850,
        "sender_full_name": "RalfJ",
        "timestamp": 1544516124
    },
    {
        "content": "<p>because you can only have uninitailized data inside a union</p>",
        "id": 151429899,
        "sender_full_name": "RalfJ",
        "timestamp": 1544516165
    },
    {
        "content": "<p>if, OTOH, uninitialized integers are valid, then of course <code>&amp;i32</code> is also valid when it points to something uninitialized, even with the strongest possible rules for integers</p>",
        "id": 151429905,
        "sender_full_name": "RalfJ",
        "timestamp": 1544516200
    },
    {
        "content": "<p>ah ok, because it violates the validity of <code>i32</code>, that makes sense</p>",
        "id": 151430152,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544516632
    },
    {
        "content": "<p>time to have some coffee, i just had a deja-vu</p>",
        "id": 151430234,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544516734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is a bit of topic here, but I saw your reply in the RFC for the new mir operator, does that mean that if <code>&amp;t as &amp;T as *const T as &amp;T as *const T</code> creates a raw pointer directly ?</p>",
        "id": 151431511,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544518585
    },
    {
        "content": "<p>I wonder if the UCG would need to mention that in the validity of references somehow</p>",
        "id": 151431692,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544518883
    },
    {
        "content": "<p>or whether that's up to the language to specify that coercion chains that create raw pointers are \"atomic\"</p>",
        "id": 151431730,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544518923
    },
    {
        "content": "<blockquote>\n<p>does that mean that if &amp;t as &amp;T as *const T as &amp;T as *const T creates a raw pointer directly ?</p>\n</blockquote>\n<p>no</p>",
        "id": 151432071,
        "sender_full_name": "RalfJ",
        "timestamp": 1544519470
    },
    {
        "content": "<p>by saying <code>as &amp;T</code>, you are explicitly requesting a reference, not a raw ptr</p>",
        "id": 151432119,
        "sender_full_name": "RalfJ",
        "timestamp": 1544519523
    },
    {
        "content": "<p>but that expression would trigger the lint</p>",
        "id": 151432131,
        "sender_full_name": "RalfJ",
        "timestamp": 1544519542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> so I think it might be worth to consider such an extension</p>",
        "id": 151434661,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544522842
    },
    {
        "content": "<p>there was also the issue of <code>x as _</code> where <code>_: &amp;T</code> creates a reborrow, even though at the end everything is coerced to a raw pointer</p>",
        "id": 151434677,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544522877
    },
    {
        "content": "<p>While those are all different issues, I'm starting to think that it's problematic for <code>as</code> and coercion chains to actually borrow / create references if they end up in a raw pointer</p>",
        "id": 151434831,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544523016
    },
    {
        "content": "<p>I think if you write <code>as &amp;T</code> you asked for a reference pretty clearly, it would be strange not to do that</p>",
        "id": 151434929,
        "sender_full_name": "RalfJ",
        "timestamp": 1544523142
    },
    {
        "content": "<p>but <code>as _</code> shouldn't infer a reference type unless necessary (that's <a href=\"https://github.com/rust-lang/rust/issues/56604\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56604\">#56604</a>)</p>",
        "id": 151434936,
        "sender_full_name": "RalfJ",
        "timestamp": 1544523172
    }
]