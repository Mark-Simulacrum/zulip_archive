[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> i think we agree</p>",
        "id": 155025594,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547375897
    },
    {
        "content": "<p>when calling C functions rust functions would just need to adjust bools</p>",
        "id": 155025600,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547375941
    },
    {
        "content": "<p>my point is that because calling convention compatibility is intended, we have to provide that as well, and that prevent us from saying anything about the values of true or false</p>",
        "id": 155025657,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376098
    },
    {
        "content": "<p>How booleans are encoded when passed in the calling convention is not observable for programs</p>",
        "id": 155025702,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376138
    },
    {
        "content": "<p>we can't use that information to say anything about the values of true and false, since C code can write <code>_Bool</code>s via a pointer into Rust memory expecting <code>bool</code>s</p>",
        "id": 155025756,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376263
    },
    {
        "content": "<p>When Rust and C (or C and C, or Rust and Rust) communicate through <em>memory</em>, then the memory representation is relevant and calling convention isn't</p>",
        "id": 155025768,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376317
    },
    {
        "content": "<p>and the memory representation of _Bool is unspecified</p>",
        "id": 155025769,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376336
    },
    {
        "content": "<p>while the calling convention is (I was hoping that we could use the calling convention to make the values of true and false implementation defined)</p>",
        "id": 155025770,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376361
    },
    {
        "content": "<p>Ok I see why you brought up calling conventions</p>",
        "id": 155025813,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376385
    },
    {
        "content": "<p>clang and gcc are slightly against specifying anything about the memory representation of _Bool</p>",
        "id": 155025818,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376402
    },
    {
        "content": "<p>while independently of whether that changes, they have to adhere to the calling convention</p>",
        "id": 155025821,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376420
    },
    {
        "content": "<p>But for the same reason you can have memory layout compatibility without calling convention capability, knowing how bools are passed around wouldn't give you memory layout compatibility</p>",
        "id": 155025828,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376432
    },
    {
        "content": "<p>And also, while the C standard is vague on matters of memory layout, it says even less (nothing at all, I believe) about calling conventions</p>",
        "id": 155025829,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376461
    },
    {
        "content": "<p>the C standard says nothing at all about calling conventions (the platform ABIs do say a lot though)</p>",
        "id": 155025871,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376487
    },
    {
        "content": "<p>And the platform ABIs also have to describe memory layout as well, don't they?</p>",
        "id": 155025876,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376513
    },
    {
        "content": "<p>the problem is that we'd like to have <code>bool</code>'s with two valid values, <code>true</code> and <code>false</code> - i don't see how that can work given the definition that <code>bool == _Bool</code></p>",
        "id": 155025877,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> i haven't checked, would make sense for IPC</p>",
        "id": 155025886,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376548
    },
    {
        "content": "<p>Forget IPC, you need to be to share data structures in the same process as well</p>",
        "id": 155025892,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376574
    },
    {
        "content": "<p>Certainly struct layout computation is part of the ABIs, so I don't see why primitive layout wouldn't be either</p>",
        "id": 155025893,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376596
    },
    {
        "content": "<blockquote>\n<p>the problem is that we'd like to have <code>bool</code>'s with two valid values, <code>true</code> and <code>false</code> - i don't see how that can work given the definition that <code>bool == _Bool</code></p>\n</blockquote>\n<p>yeah this is a problem but one unrelated to calling conventions, do you agree?</p>",
        "id": 155025940,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376619
    },
    {
        "content": "<p>I can't find that for _Bool in the SysV AMD64 ABI spec</p>",
        "id": 155025941,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376620
    },
    {
        "content": "<p>i only find there the specification of bool for function arguments and return values</p>",
        "id": 155025944,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> C-the-standard has fairly strict definition for <code>_Bool</code> only allowing it to contain two distinct values.</p>",
        "id": 155025957,
        "sender_full_name": "nagisa",
        "timestamp": 1547376706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> page 14 of <a href=\"https://software.intel.com/sites/default/files/article/402129/mpx-linux64-abi.pdf\" target=\"_blank\" title=\"https://software.intel.com/sites/default/files/article/402129/mpx-linux64-abi.pdf\">https://software.intel.com/sites/default/files/article/402129/mpx-linux64-abi.pdf</a></p>\n<blockquote>\n<p>Booleans, when stored in a memory object, are stored as single byte objects the value of which is always 0 (false) or 1 (true).</p>\n</blockquote>",
        "id": 155026001,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376727
    },
    {
        "content": "<p>I remember looking into making C compiler store something non-1 or non-0 into a <code>_Bool</code>. It was extremely difficult</p>",
        "id": 155026008,
        "sender_full_name": "nagisa",
        "timestamp": 1547376788
    },
    {
        "content": "<p>and ended up being UB in C as well.</p>",
        "id": 155026009,
        "sender_full_name": "nagisa",
        "timestamp": 1547376801
    },
    {
        "content": "<p>The C standard definition of _Bool is pretty loose, a lot of it is unspecified.</p>",
        "id": 155026012,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376825
    },
    {
        "content": "<p>a lot is, but what is specificed is fairly compatible with our own <code>bool</code>. Adding specifications from the ABI documents you get the complete picture.</p>",
        "id": 155026057,
        "sender_full_name": "nagisa",
        "timestamp": 1547376860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> with the ABI documents you get the complete picture, which is that <code>bool</code> is pretty much implementation-defined</p>",
        "id": 155026060,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376899
    },
    {
        "content": "<p>Knowledge of specific C implementations is all good and well and I think it's quite likely that all the ones we care about in practice are compatible with what rustc does today; the real problem is hypothetical standard-conforming implementations that aren't</p>",
        "id": 155026068,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376921
    },
    {
        "content": "<p>But since these are very hypothetical I care very little so I'm going to peace out if/when this discussion turns to language lawyering again</p>",
        "id": 155026071,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376954
    },
    {
        "content": "<p>I disagree. <code>_Bool</code> is ABI-specific, but not implementation specific. Multiple implementors of the same ABI will implement <code>_Bool</code> the same way.</p>",
        "id": 155026112,
        "sender_full_name": "nagisa",
        "timestamp": 1547376965
    },
    {
        "content": "<p>I don't really see that as a meaningful distinction</p>",
        "id": 155026114,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547376981
    },
    {
        "content": "<p>The issue is that saying that <code>bool</code> has two valid values, <code>true</code> and <code>false</code>, is incompatible with saying that <code>bool == _Bool</code>.</p>",
        "id": 155026115,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547376984
    },
    {
        "content": "<p>Multiple implementations can and do agree with each other to get interoperability</p>",
        "id": 155026117,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1547377002
    },
    {
        "content": "<p>I'd be fine with saying that Rust does not support platforms in which <code>_Bool</code> has more than two valid values</p>",
        "id": 155026127,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547377061
    },
    {
        "content": "<p>The C <em>standard</em> specifies that <code>_Bool</code> may contain two bit patterns, one for true and another for false. It is hidden in a fairly obscure manner, but it is there. (Oh and the patterns are not exactly specified IIRC, but that’s not too much of an issue)</p>",
        "id": 155026128,
        "sender_full_name": "nagisa",
        "timestamp": 1547377075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> because of padding bits that's not true</p>",
        "id": 155026170,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547377091
    },
    {
        "content": "<p><a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/63#issue-241483785\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/63#issue-241483785\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/63#issue-241483785</a></p>",
        "id": 155026171,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547377113
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> because of padding bits that's not true</p>\n</blockquote>\n<p>are you saying an equivalent of <code>uint16_t</code> has more than 2¹⁶-1 bit patterns because of padding bits it may have coming after it?</p>",
        "id": 155026228,
        "sender_full_name": "nagisa",
        "timestamp": 1547377222
    },
    {
        "content": "<p>/me drops the topic.</p>",
        "id": 155026241,
        "sender_full_name": "nagisa",
        "timestamp": 1547377300
    },
    {
        "content": "<p>Are the fixed-width integer types allowed to have padding bits ?</p>",
        "id": 155026285,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547377366
    },
    {
        "content": "<p>Sure, you can have data layout to specify alignment for integer larger than its native size.</p>",
        "id": 155026343,
        "sender_full_name": "nagisa",
        "timestamp": 1547377451
    },
    {
        "content": "<p>I believe there is at least one architecture where 8-bit integer is actually a 16-bit one, with 8 padding bits.</p>",
        "id": 155026348,
        "sender_full_name": "nagisa",
        "timestamp": 1547377483
    },
    {
        "content": "<p>The whole point of padding bits is that they are ignored, so an <code>uint16_t</code> with ignored padding bits would have more than 2¹⁶-1 bit patterns because it would need to be larger than 16 bit</p>",
        "id": 155026393,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547377563
    },
    {
        "content": "<p>the question is whether it has more than 2¹⁶-1 values, which it does not AFAICT - since the padding bits are ignored, different bit-patterns represent the same value</p>",
        "id": 155026408,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547377617
    },
    {
        "content": "<p>that's the problem with a bool where the bit 0 encodes true and false, and e.g., bits 1-7 are ignored. It has 256 bit-patterns, but only two valid values, the problem is that multiple bit-patterns represent the same value</p>",
        "id": 155026417,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547377656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> why do we keep bringing this up</p>",
        "id": 155042775,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1547407091
    },
    {
        "content": "<p>zero platforms do anything but the sane thing</p>",
        "id": 155042776,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1547407098
    },
    {
        "content": "<p>until someone comes up with a platform, let's not care about it</p>",
        "id": 155042780,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1547407115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> because <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> would like to guarantee that <code>bool</code> has two valid values: <code>true</code> and <code>false</code>, but AFAICT that's incompatible with our definition that <code>bool == _Bool</code>, so we can't write the spec to be as simple as that</p>",
        "id": 155067560,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547451694
    },
    {
        "content": "<p>We have to write that <code>bool</code> has as many valid values as <code>_Bool</code>, and add a \"note: on all platforms that Rust currently support, <code>bool</code> only has two valid values, <code>true</code> (<code>0x1</code>) and <code>false</code> (<code>0x0</code>)\", or similar</p>",
        "id": 155067621,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547451811
    },
    {
        "content": "<p><code>_Bool</code> has only two valid values</p>",
        "id": 155067743,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1547452048
    },
    {
        "content": "<p>that is guaranteed by the C standard</p>",
        "id": 155067745,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1547452056
    },
    {
        "content": "<p>the representation is not guaranteed</p>",
        "id": 155067753,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1547452081
    },
    {
        "content": "<p>all zeroes is guaranteed to be <code>0</code> (aka <code>false</code>)</p>",
        "id": 155067793,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1547452127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> AFAICT <code>_Bool</code> has only one bit of valid values, and whether all other bits are trap representations or padding bits is unspecified. That is, a <code>_Bool</code> where one bit denotes <code>true</code> or <code>false</code>, and all other bits are ignored, is standard compliant AFAICT. That results in &gt; 2 bit-patterns that denote either <code>true</code> or <code>false</code>.</p>",
        "id": 155069315,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547454397
    },
    {
        "content": "<p>that is not my understanding - however, I also think it's unreasonable to attempt to be compatible with anything that breaks this very basic assumption, since no system that Rust will work on does</p>",
        "id": 155069405,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1547454502
    },
    {
        "content": "<p>and no system which will be created in the future will either</p>",
        "id": 155069411,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1547454523
    },
    {
        "content": "<p>FWIW I filled a bug in both gcc and clang, and one possible solution for GCC is to offer an intrinsic that lets you query whether <code>_Bool</code> has padding bits</p>",
        "id": 155069418,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547454541
    },
    {
        "content": "<p><a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88662\" target=\"_blank\" title=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88662\">https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88662</a></p>",
        "id": 155069427,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547454554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> C does have a notion of a validity invariant, it is just not the same one as Rust</p>",
        "id": 155087492,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547476128
    },
    {
        "content": "<p>In C, an lvalue expression involving a value that is not \"valid\" is UB</p>",
        "id": 155087524,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547476156
    },
    {
        "content": "<p>So while one can materialize a <code>_Bool</code> with an invalid bit-pattern, that <code>_Bool</code> cannot participate in an lvalue expression (e.g. an assignment)</p>",
        "id": 155087548,
        "sender_full_name": "gnzlbg",
        "timestamp": 1547476198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> </p>\n<blockquote>\n<p>In C, an lvalue expression involving a value that is not \"valid\" is UB</p>\n</blockquote>\n<p>can you point me at the part of the standard specifying this?</p>",
        "id": 156599431,
        "sender_full_name": "RalfJ",
        "timestamp": 1548159347
    },
    {
        "content": "<p>I guess aside from <code>bool</code> there's little C would consider \"invalid\" so the question doesn't come up very often</p>",
        "id": 156599483,
        "sender_full_name": "RalfJ",
        "timestamp": 1548159369
    },
    {
        "content": "<p>It comes from the definition of trap representation - <a href=\"http://port70.net/~nsz/c/c11/n1570.html#6.2.6.1p5\" target=\"_blank\" title=\"http://port70.net/~nsz/c/c11/n1570.html#6.2.6.1p5\">http://port70.net/~nsz/c/c11/n1570.html#6.2.6.1p5</a> (emphasis mine)</p>\n<blockquote>\n<p>Certain object representations need not represent a value of the object type. <strong>If the stored value of an object has such a representation and is read by an lvalue expression that does not have character type, the behavior is undefined.</strong> If such a representation is produced by a side effect that modifies all or any part of the object by an lvalue expression that does not have character type, the behavior is undefined. 50) Such a representation is called a trap representation.</p>\n</blockquote>\n<p>And the footnote: <a href=\"http://port70.net/~nsz/c/c11/n1570.html#note50\" target=\"_blank\" title=\"http://port70.net/~nsz/c/c11/n1570.html#note50\">http://port70.net/~nsz/c/c11/n1570.html#note50</a></p>\n<blockquote>\n<p>Thus, an automatic variable can be initialized to a trap representation without causing undefined behavior, but the value of the variable cannot be used until a proper value is stored in it.</p>\n</blockquote>\n<p>That is, one can construct an invalid value, but there is very little that one can do with that value without invoking undefined behavior (e.g. an assignment from an invalid value <code>bool a = invalid_bool</code> is UB - but reading and writing bytes to it via a <code>char*</code> is ok).</p>\n<p>Note that trap representations are different from _indeterminate_ representations (which might represent a value of the object type - it is just unknown which).</p>",
        "id": 156604028,
        "sender_full_name": "gnzlbg",
        "timestamp": 1548164346
    }
]