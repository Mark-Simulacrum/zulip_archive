[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Does this Miri error mean I'm doing the bad things?</p>\n<div class=\"codehilite\"><pre><span></span>error[E0080]: constant evaluation error: Stopping looking for borrow being accessed (Shr(None)) because of barrier (2013)\n</pre></div>",
        "id": 154151503,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546394108
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=42581a2568aee144aa129ec2b02ca0ee\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=42581a2568aee144aa129ec2b02ca0ee\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=42581a2568aee144aa129ec2b02ca0ee</a></p>",
        "id": 154151570,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546394267
    },
    {
        "content": "<p>This doesn't have the issue: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=de8998f70e7e8392adead15af45a12b6\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=de8998f70e7e8392adead15af45a12b6\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=de8998f70e7e8392adead15af45a12b6</a></p>",
        "id": 154167392,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546423926
    },
    {
        "content": "<p>Basically in <code>fake_foo_value</code> you are creating a <code>*mut</code> from a <code>*const</code> and reading through it.</p>",
        "id": 154167396,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546423979
    },
    {
        "content": "<p>And that <code>*const</code> is created from a <code>&amp;</code> in <code>FooBorrowed::value</code>.</p>",
        "id": 154167460,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546424081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> </p>\n<blockquote>\n<p>Does this Miri error mean I'm doing the bad things?</p>\n</blockquote>\n<p>yes</p>",
        "id": 154179305,
        "sender_full_name": "RalfJ",
        "timestamp": 1546441208
    },
    {
        "content": "<blockquote>\n<p>Basically in <code>fake_foo_value</code> you are creating a <code>*mut</code> from a <code>*const</code> and reading through it.</p>\n</blockquote>\n<p>reading through it should be fine though, only writing should be a problem</p>",
        "id": 154180024,
        "sender_full_name": "RalfJ",
        "timestamp": 1546441999
    },
    {
        "content": "<p>or rather, should be a problem if shared references were involved</p>",
        "id": 154180158,
        "sender_full_name": "RalfJ",
        "timestamp": 1546442150
    },
    {
        "content": "<p><code>*const</code> and <code>*mut</code> dont make any difference</p>",
        "id": 154180167,
        "sender_full_name": "RalfJ",
        "timestamp": 1546442158
    },
    {
        "content": "<p>note that <code>c_void</code> has size 1, so in general this is a somewhat dangerous pattern. <code>&amp;FooBorrowed</code> actually asserts that there is some dereferencable memory there and gives rustc license to insert spurious reads.</p>",
        "id": 154180424,
        "sender_full_name": "RalfJ",
        "timestamp": 1546442443
    },
    {
        "content": "<p>oh but you are creating a mutable reference here!</p>",
        "id": 154180605,
        "sender_full_name": "RalfJ",
        "timestamp": 1546442643
    },
    {
        "content": "<p>that's like writing</p>",
        "id": 154180618,
        "sender_full_name": "RalfJ",
        "timestamp": 1546442647
    },
    {
        "content": "<p>and you cant write to this pointer because it was obtained from a shared reference (the <code>&amp;self</code> in <code>FooBorrowed::value</code>)</p>",
        "id": 154180634,
        "sender_full_name": "RalfJ",
        "timestamp": 1546442677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I'd love an improved error message, but I have no concrete suggestion.</p>",
        "id": 154191959,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546454096
    },
    {
        "content": "<blockquote>\n<p>creating a *mut from a *const and reading through it.</p>\n</blockquote>\n<p>â€Œ</p>\n<blockquote>\n<p>oh but you are creating a mutable reference here!<br>\nthat's like writing</p>\n</blockquote>\n<p>Hmm. I didn't actually <em>want</em> a mutable reference there; I just blindly applied the same changes from <code>_new</code> and <code>_free</code>. It's a bit unfortunate that there's no lint for that case, but I can see why it'd be hard to have one.</p>",
        "id": 154192191,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546454393
    },
    {
        "content": "<p>Thank you, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> and <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> !</p>",
        "id": 154192305,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546454512
    },
    {
        "content": "<blockquote>\n<p>note that <code>c_void</code> has size 1, so in general this is a somewhat dangerous pattern. <code>&amp;FooBorrowed</code> actually asserts that there is some dereferencable memory there and gives rustc license to insert spurious reads.</p>\n</blockquote>\n<p>In the <a href=\"https://stackoverflow.com/q/42613798/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/42613798/155423\">broader answer</a>,  I suggest that the better pattern is to use an <code>extern type</code> (once available); would that solve the problem here?</p>",
        "id": 154192405,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546454625
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I'd love an improved error message, but I have no concrete suggestion.</p>\n</blockquote>\n<p>diagnosis could generally need tons of improvements</p>",
        "id": 154194401,
        "sender_full_name": "RalfJ",
        "timestamp": 1546456520
    },
    {
        "content": "<p>I also have a few ideas</p>",
        "id": 154194406,
        "sender_full_name": "RalfJ",
        "timestamp": 1546456523
    },
    {
        "content": "<p>but no time to implement them</p>",
        "id": 154194411,
        "sender_full_name": "RalfJ",
        "timestamp": 1546456530
    },
    {
        "content": "<blockquote>\n<p>In the <a href=\"https://stackoverflow.com/q/42613798/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/42613798/155423\">broader answer</a>,  I suggest that the better pattern is to use an <code>extern type</code> (once available); would that solve the problem here?</p>\n</blockquote>\n<p>yes</p>",
        "id": 154194433,
        "sender_full_name": "RalfJ",
        "timestamp": 1546456561
    },
    {
        "content": "<p>Too bad we can't actually change c_void to be an extern type when available</p>",
        "id": 154196406,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546458410
    },
    {
        "content": "<p>yeah</p>",
        "id": 154197502,
        "sender_full_name": "RalfJ",
        "timestamp": 1546459513
    },
    {
        "content": "<p>Since <code>c_void</code> is 1 byte for LLVM reasons, will the same thing need to happen for extern types...</p>",
        "id": 154201121,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546463049
    },
    {
        "content": "<p>extern types model <code>struct Foo;</code>, while <code>c_void</code> models <code>void</code> in ptr types. so I don't think the problem applies to extern types as well.</p>",
        "id": 154232159,
        "sender_full_name": "RalfJ",
        "timestamp": 1546512211
    },
    {
        "content": "<blockquote>\n<p><code>*const</code> and <code>*mut</code> dont make any difference</p>\n</blockquote>\n<p>ah yes, the problem is only that the code is calling <code>as_mut</code> instead of <code>as_ref</code>, and that creates a <code>&amp;mut T</code> from a pointer derived from a <code>&amp;</code></p>",
        "id": 154241888,
        "sender_full_name": "gnzlbg",
        "timestamp": 1546525203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I think I'm misunderstanding or missing your point. IIRC, <code>c_void</code> is a one-byte type to enable optimizations in LLVM. Presumably, the same thing will need to be done for extern types. However, I could see if that transformation happens at a lower level (codegen?) and user-written code could not take advantage of it.</p>",
        "id": 154380500,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546563308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  AFAIK <code>c_void</code> is 1-byte for the sole reason that <code>*mut c_void</code> should be the same as <code>void*</code></p>",
        "id": 154401675,
        "sender_full_name": "RalfJ",
        "timestamp": 1546598789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  I'm not sure if we are agreeing or disagreeing or other. For context, I'm referring to <a href=\"https://github.com/rust-lang/libc/blob/22b08f8eedd1ce3eb79e8878613e98dd811907f8/src/unix/mod.rs#L1155-L1165\" target=\"_blank\" title=\"https://github.com/rust-lang/libc/blob/22b08f8eedd1ce3eb79e8878613e98dd811907f8/src/unix/mod.rs#L1155-L1165\">this comment</a></p>",
        "id": 154454859,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546657590
    },
    {
        "content": "<p>I disagree with <code>extern type</code> having any of the same issues as <code>c_void</code></p>",
        "id": 154468684,
        "sender_full_name": "RalfJ",
        "timestamp": 1546684924
    },
    {
        "content": "<p><code>c_void</code> is defined such that <code>*mut c_void</code> can be used in Rust where <code>void*</code> is used in C</p>",
        "id": 154468688,
        "sender_full_name": "RalfJ",
        "timestamp": 1546684944
    },
    {
        "content": "<p>that's not at all what <code>extern type</code> is for -- so why would any part of that comment be relevant? I am confused.^^ in particular, <code>extern type</code> is going to be unsized in Rust, not have size 1.</p>",
        "id": 154468702,
        "sender_full_name": "RalfJ",
        "timestamp": 1546684988
    },
    {
        "content": "<blockquote>\n<p>that's not at all what <code>extern type</code> is for</p>\n</blockquote>\n<p>Perhaps this is where my knowledge gap is. I expect to use <code>void *</code> when I want to have an opaque type that I don't know the exact type of. I expect to use an <code>extern type</code> when I have an opaque type with a more concrete/specific type.</p>\n<p>I expect to use a pointer to an extern type in <strong>many</strong> of the cases where I currently would use <code>*mut c_void</code>.</p>",
        "id": 154475865,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546699889
    },
    {
        "content": "<p>the usual way (AFAIK) to handle opaque types in C is to use <code>struct Foo;</code> (note the missing field list), and then <code>Foo*</code></p>",
        "id": 154475910,
        "sender_full_name": "RalfJ",
        "timestamp": 1546699971
    },
    {
        "content": "<p><code>void*</code> isn't for <em>opaque</em> types, it's for <em>unkown</em> types -- basically, for generic code</p>",
        "id": 154475918,
        "sender_full_name": "RalfJ",
        "timestamp": 1546699988
    },
    {
        "content": "<p>both of these concepts (will) have their counterpart in Rust for FFI, these counterparts being <code>extern { type Foo; }</code> for <code>struct Foo;</code> with <code>*mut Foo</code> for <code>Foo*</code>; and <code>*mut c_void</code> for <code>void*</code>. The Rust side of FFI should then match what the C side of it does (in terms of picking opaque vs unknown types). But my FFI knowledge is very limited so maybe there are reasons to divert here?</p>",
        "id": 154475961,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700068
    },
    {
        "content": "<p>neither of these (<code>c_void</code> and <code>extern type</code>) have any use outside FFI, AFAIK</p>",
        "id": 154475963,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700087
    },
    {
        "content": "<p>The usual way (yeah, to model opaque types) <em>now</em> is an empty struct, but that's still a constructable type. An extern type is not. An empty struct is AFAIK not part of the C standard (but it is allowed by both gcc and clang)</p>",
        "id": 154475986,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546700138
    },
    {
        "content": "<p>the usual way to model <em>opaque</em> types, right? not to model <code>void*</code>?</p>",
        "id": 154476029,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700172
    },
    {
        "content": "<p><code>struct Foo;</code> is not an empty struct</p>",
        "id": 154476030,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700185
    },
    {
        "content": "<p>its a forward declaration</p>",
        "id": 154476031,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700190
    },
    {
        "content": "<p>and AFAIK that's completely standards compliant</p>",
        "id": 154476032,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700202
    },
    {
        "content": "<p>so none of what I said above has anything to do with empty structs</p>",
        "id": 154476033,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700217
    },
    {
        "content": "<blockquote>\n<p><code>struct Foo;</code> is not an empty struct</p>\n</blockquote>\n<p>Point.</p>",
        "id": 154476034,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546700218
    },
    {
        "content": "<p>it is in Rust, so I wasn't sure which you meant</p>",
        "id": 154476042,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546700233
    },
    {
        "content": "<p>fair. I was talking about the C side.</p>",
        "id": 154476043,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700248
    },
    {
        "content": "<p>so the current situation is</p>\n<p>C: <code>void*</code> &lt;-&gt; Rust: <code>*mut c_void</code><br>\nC: <code>sruct Foo;</code> &lt;-&gt; Rust: <a href=\"https://doc.rust-lang.org/nightly/nomicon/ffi.html#representing-opaque-structs\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nomicon/ffi.html#representing-opaque-structs\">https://doc.rust-lang.org/nightly/nomicon/ffi.html#representing-opaque-structs</a></p>",
        "id": 154476087,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700320
    },
    {
        "content": "<p>and the intent is, on the Rust side, for <code>extern type</code> to replace <a href=\"https://doc.rust-lang.org/nightly/nomicon/ffi.html#representing-opaque-structs\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nomicon/ffi.html#representing-opaque-structs\">https://doc.rust-lang.org/nightly/nomicon/ffi.html#representing-opaque-structs</a></p>",
        "id": 154476088,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700329
    },
    {
        "content": "<p>I still think that people will use an extern type as a reification of a <code>void *</code> when they are \"instantiating a generic C function\"</p>",
        "id": 154476091,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546700342
    },
    {
        "content": "<p>although I guess in that case they would want to be able to poke into the struct, so opaque is useless to them</p>",
        "id": 154476100,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546700391
    },
    {
        "content": "<p>that's a mismatch between the C and Rust side of FFI. it might be valid in some cases (talk to an FFI expert, I am not one^^), and there might be reasons to do that (dito), but the direct translation of the C interface is as I described above</p>",
        "id": 154476145,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700436
    },
    {
        "content": "<p>However, my original point was about lower down details, but I still haven't quite picked up what you mean on that.</p>",
        "id": 154476155,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546700474
    },
    {
        "content": "<p>what's the question that is still open?</p>",
        "id": 154476158,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700497
    },
    {
        "content": "<p>Based on the comment I linked, <code>c_void</code> needs to have a size in order to enable optimizations inside of LLVM, but you've said that an extern type is unsized. Does that mean that such optimizations will be precluded from extern types?</p>",
        "id": 154476201,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546700550
    },
    {
        "content": "<p>Or, will an extern type just be \"effectively unsized\" in the Rust frontend, but always have a \"size\" of 1 when generating code so that LLVM can optimize</p>",
        "id": 154476211,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546700610
    },
    {
        "content": "<p>my reading of that comment (mentioning <code>malloc</code>/<code>free</code>) is that we need this to give our malloc/free the right types on the LLVM side</p>",
        "id": 154476268,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700722
    },
    {
        "content": "<p>this is C FFI with functions that have <code>void*</code> in their type, so we must use the proper thing on the Rust side</p>",
        "id": 154476272,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700755
    },
    {
        "content": "<p>so I dont think this is a concern for<code>extern type</code>. But I am guessing here, maybe bring this up in the tracking issue?</p>",
        "id": 154476315,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700798
    },
    {
        "content": "<p>So you think the optimization is limited to those specific functions? That would be believable. That is, LLVM looks for <code>*i8 malloc(void)</code> and treats it specially, and at one point we did <code>*ZeroSizedType malloc(void)</code> and blew away the optimization</p>",
        "id": 154476329,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546700839
    },
    {
        "content": "<p>AFAIK our <code>extern type</code> will generate the exact same LLVM types as C's forward declarations, and hence should be optimized the same way</p>",
        "id": 154476331,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700840
    },
    {
        "content": "<p>however I have no idea what these types are^^</p>",
        "id": 154476336,
        "sender_full_name": "RalfJ",
        "timestamp": 1546700875
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">nuffin_t</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">myalloc</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">nuffin_t</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">myfree</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">nuffin_t</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"nv\">%&quot;::nuffin_t&quot;</span> <span class=\"p\">=</span> <span class=\"k\">type</span> <span class=\"p\">{}</span>\n\n<span class=\"k\">declare</span> <span class=\"nv\">%&quot;::nuffin_t&quot;</span><span class=\"p\">*</span> <span class=\"vg\">@myalloc</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span>\n<span class=\"k\">declare</span> <span class=\"kt\">void</span> <span class=\"vg\">@myfree</span><span class=\"p\">(</span><span class=\"nv\">%&quot;::nuffin_t&quot;</span><span class=\"p\">*)</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span>\n</pre></div>",
        "id": 154476503,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546701191
    },
    {
        "content": "<p>Now to figure out the C equivalent</p>",
        "id": 154476504,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546701228
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">nuffin_t</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">nuffin_t</span> <span class=\"o\">*</span><span class=\"nf\">myalloc</span><span class=\"p\">();</span>\n<span class=\"kt\">void</span> <span class=\"nf\">myfree</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">nuffin_t</span><span class=\"o\">*</span><span class=\"p\">);</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"nv\">%struct.nuffin_t</span> <span class=\"p\">=</span> <span class=\"k\">type</span> <span class=\"k\">opaque</span>\n\n<span class=\"k\">declare</span> <span class=\"err\">dso_local</span> <span class=\"kt\">void</span> <span class=\"vg\">@myfree</span><span class=\"p\">(</span><span class=\"nv\">%struct.nuffin_t</span><span class=\"p\">*)</span> <span class=\"vg\">#1</span>\n<span class=\"k\">declare</span> <span class=\"err\">dso_local</span> <span class=\"nv\">%struct.nuffin_t</span><span class=\"p\">*</span> <span class=\"vg\">@myalloc</span><span class=\"p\">(...)</span> <span class=\"vg\">#1</span>\n</pre></div>",
        "id": 154476673,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546701496
    },
    {
        "content": "<p>so that seems like a bug to me.</p>",
        "id": 154476679,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546701515
    },
    {
        "content": "<p>yeah seems like we are using an empty struct instead of an opaque one, or so?</p>",
        "id": 154476681,
        "sender_full_name": "RalfJ",
        "timestamp": 1546701529
    },
    {
        "content": "<p>no idea^^</p>",
        "id": 154476682,
        "sender_full_name": "RalfJ",
        "timestamp": 1546701532
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 154476693,
        "sender_full_name": "RalfJ",
        "timestamp": 1546701558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> haha, check it; right at the top in the tracking issue:</p>\n<blockquote>\n<p>In std's source, it is mentioned that LLVM expects i8* for C's void*.<br>\nWe'd need to continue to hack this for the two c_voids in std and libc.<br>\nBut perhaps this should be done across-the-board for all extern types?<br>\nSomebody should check what Clang does.</p>\n</blockquote>",
        "id": 154476695,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546701563
    },
    {
        "content": "<p>;)</p>",
        "id": 154476698,
        "sender_full_name": "RalfJ",
        "timestamp": 1546701579
    },
    {
        "content": "<p>well you just checked what clang does</p>",
        "id": 154476701,
        "sender_full_name": "RalfJ",
        "timestamp": 1546701600
    }
]