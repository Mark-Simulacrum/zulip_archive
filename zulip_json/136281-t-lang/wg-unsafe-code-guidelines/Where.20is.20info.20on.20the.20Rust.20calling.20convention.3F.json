[
    {
        "content": "<p>I know that the Rust ABI isn't stable, but where can I find out what it's actually doing in a particular version? Like 1.40 or whatever specific version. Obviously it must do something.</p>\n<p>How much does it adapt to the local target definition? In LLVM, if you define a custom target there's a default data layout that LLVM has that you can override. If you give a custom data layout will Rust play along?</p>",
        "id": 184137641,
        "sender_full_name": "Lokathor",
        "timestamp": 1577141327
    },
    {
        "content": "<p>I don't think we document this at all, but generally speaking, src/librustc_codegen_{ssa,llvm} and librustc_mir is probably where to look.</p>",
        "id": 184141068,
        "sender_full_name": "simulacrum",
        "timestamp": 1577146043
    },
    {
        "content": "<p>You also want to look at librustc/.../layout.ty</p>",
        "id": 184375192,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577539651
    },
    {
        "content": "<p>Since that's where the <code>Layout</code> and <code>Abi</code>'s are tied together</p>",
        "id": 184375195,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577539671
    },
    {
        "content": "<p>e.g. <code>Abi::ScalarPair</code> means that the Rust calling convention for scalar pairs is different than for other <code>repr(rust)</code> aggregates</p>",
        "id": 184375236,
        "sender_full_name": "gnzlbg",
        "timestamp": 1577539701
    },
    {
        "content": "<p>Particularly I want to know how the stack works.</p>\n<p>ARM eabi has an 8byte aligned stack, and the default LLVM data layout also has an 8 aligned stack, but I would like a 4 aligned stack on a particular embedded program where I know that I've compiled 100% of the code. And I want to know if I can just change the setting in LLVM and have Rust go with it.</p>",
        "id": 184381199,
        "sender_full_name": "Lokathor",
        "timestamp": 1577550235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> If LLVM keeps values 8 aligned when they are need it, then telling LLVM to align stacks to 4 should be fine. Rust doesn't manipulate the stack itself. Instead it uses <code>alloca</code>.</p>",
        "id": 184381319,
        "sender_full_name": "bjorn3",
        "timestamp": 1577550389
    },
    {
        "content": "<p>excellent!</p>",
        "id": 184381327,
        "sender_full_name": "Lokathor",
        "timestamp": 1577550419
    }
]