[
    {
        "content": "<p>Hi. When running <code>cargo miri test</code> on my library I get <code>error: Miri evaluation error: trying to reborrow for Unique, but parent tag &lt;160163&gt; does not have an appropriate item in the borrow stack</code> but I don’t see how to find the root cause. The full output is at <a href=\"https://paste.mozilla.org/iVboPkXU\" target=\"_blank\" title=\"https://paste.mozilla.org/iVboPkXU\">https://paste.mozilla.org/iVboPkXU</a>, the code at <a href=\"https://github.com/servo/html5ever/tree/304c155bce19f956f0641cce3a1e19bc3b7bdaa1/zbuf\" target=\"_blank\" title=\"https://github.com/servo/html5ever/tree/304c155bce19f956f0641cce3a1e19bc3b7bdaa1/zbuf\">https://github.com/servo/html5ever/tree/304c155bce19f956f0641cce3a1e19bc3b7bdaa1/zbuf</a>.</p>",
        "id": 188614302,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582181595
    },
    {
        "content": "<p>The error happens when trying to take <code>&amp;mut</code> reference to something inside of a heap allocation made through <code>std::alloc::alloc</code>. The struct that contains the <code>ptr::NonNull</code> is created on the stack with <code>let mut</code> and then used with methods that take <code>&amp;mut self</code></p>",
        "id": 188614450,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582181850
    },
    {
        "content": "<p>(Also, “reborrow for Unique” means <code>&amp;mut</code> not <code>std::ptr::Unique</code>, right?)</p>",
        "id": 188614510,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582181942
    },
    {
        "content": "<p>Try passing <code>-Zmiri-track-pointer-tag=160163</code> to track where it is invalidated.</p>",
        "id": 188620128,
        "sender_full_name": "bjorn3",
        "timestamp": 1582189371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219747\">Simon Sapin</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/miri.20.22trying.20to.20reborrow.20for.20Unique.22/near/188614510\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/miri.20.22trying.20to.20reborrow.20for.20Unique.22/near/188614510\">said</a>:</p>\n<blockquote>\n<p>(Also, “reborrow for Unique” means <code>&amp;mut</code> not <code>std::ptr::Unique</code>, right?)</p>\n</blockquote>\n<p>Yes</p>",
        "id": 188620142,
        "sender_full_name": "bjorn3",
        "timestamp": 1582189389
    },
    {
        "content": "<p>The output looks the same with <code>cargo +nightly miri test -- -Zmiri-track-pointer-tag=160163</code>. Or is it a <code>RUSTFLAGS</code>?</p>",
        "id": 188625027,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582193573
    },
    {
        "content": "<p>I don't know. You can try using a RUSTFLAG.</p>",
        "id": 188633537,
        "sender_full_name": "bjorn3",
        "timestamp": 1582202688
    },
    {
        "content": "<p><code>error: unknown debugging option: `miri-track-pointer-tag` </code> with <code>RUSTFLAGS</code></p>",
        "id": 188634638,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582203596
    },
    {
        "content": "<p>“<code>-Zmiri-track-pointer-tag=&lt;tag&gt;</code> aborts interpretation with a backtrace when the given pointer tag is popped from a borrow stack (which is where the tag becomes invalid and any future use of it will error anyway).”</p>",
        "id": 188635940,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582204792
    },
    {
        "content": "<p>I’m not sure what that means, but is it possible to get the error above if that tag never was on the borrow stack?</p>",
        "id": 188636033,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582204849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> what is the borrow stack stack? How can I build a mental model of how to write code that manually allocates and deals with raw pointers while making miri happy?</p>",
        "id": 188644161,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582210345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> a bunch of material about Stacked Borrows is collected at <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md</a></p>",
        "id": 188681341,
        "sender_full_name": "RalfJ",
        "timestamp": 1582234976
    },
    {
        "content": "<p>that <code>track-pointer-tag</code> didnt do anything is odd... it should show a \"warning\" when the ptr tag gets removed (the \"abort\" part is not true any more)</p>",
        "id": 188681416,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235041
    },
    {
        "content": "<p>but indeed it could be that the tag never was on the respective borrow stack</p>",
        "id": 188681508,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235082
    },
    {
        "content": "<p>since this is around slices, my first guess would be: did you do <code>&amp;slice[0] as *mut _</code> instead of <code>slice.as_mut_ptr()</code>? the former doesnt work</p>",
        "id": 188681556,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235105
    },
    {
        "content": "<p>IOW, it sounds like you are taking a pointer that is okay for some part of the relevant memory, and trying to use it for a larger part of memory. That's why the tag is missing.</p>",
        "id": 188681595,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235129
    },
    {
        "content": "<p>Yes I’m using <code>as_mut_ptr</code> but on <code>[MaybeUninit&lt;u8&gt;; 0]</code> which is the last field of a <code>#[repr(C)]</code> struct, in a heap allocation larger than the struct</p>",
        "id": 188681737,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582235223
    },
    {
        "content": "<p><a href=\"https://github.com/servo/html5ever/blob/304c155bce19f956f0641cce3a1e19bc3b7bdaa1/zbuf/heap_data.rs#L99-L113\" target=\"_blank\" title=\"https://github.com/servo/html5ever/blob/304c155bce19f956f0641cce3a1e19bc3b7bdaa1/zbuf/heap_data.rs#L99-L113\">https://github.com/servo/html5ever/blob/304c155bce19f956f0641cce3a1e19bc3b7bdaa1/zbuf/heap_data.rs#L99-L113</a></p>",
        "id": 188681779,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582235255
    },
    {
        "content": "<p>ah... yeah Stacked Borrows wouldnt be happy about that</p>",
        "id": 188681873,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235279
    },
    {
        "content": "<p>as long as its all raw ptrs, it doesnt care</p>",
        "id": 188682002,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235339
    },
    {
        "content": "<p>Doesn’t care about what?</p>",
        "id": 188682033,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582235361
    },
    {
        "content": "<p>anything, really... if you get a raw ptr from the allocator and only ever use raw ptr ops, I dont think it is even possible to get a Stacked Borrows error</p>",
        "id": 188682091,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235401
    },
    {
        "content": "<p>but the moment you create a reference, it and every ptr derived from it (including raw ptrs derived from it) is confined to the bounds given by the type of the reference</p>",
        "id": 188682097,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235402
    },
    {
        "content": "<p>Hmm I see. I guess what I’d need is field projection for raw pointers</p>",
        "id": 188682173,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582235444
    },
    {
        "content": "<p>we have that, but only on nightly</p>",
        "id": 188682201,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235463
    },
    {
        "content": "<p>Right</p>",
        "id": 188682207,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582235470
    },
    {
        "content": "<p>on stable, working with only raw ptrs is not possible :/</p>",
        "id": 188682211,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235475
    },
    {
        "content": "<p>Well I’d have to manually compute byte offsets, which doesn’t feel great</p>",
        "id": 188682238,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582235500
    },
    {
        "content": "<p>well or you wait until raw ptrs becomes better</p>",
        "id": 188682272,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235519
    },
    {
        "content": "<p>you can still use Miri with <code>-Zmiri-disable-validation</code> (though that disables more than just stacked borrows... we should have a flag just for that)</p>",
        "id": 188682334,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235541
    },
    {
        "content": "<p>And <code>size_of::&lt;Header&gt;()</code> is more conservative than needed since it rounds up to a multiple of alignment</p>",
        "id": 188682338,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582235545
    },
    {
        "content": "<p>not sure what you mean?</p>",
        "id": 188682388,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235579
    },
    {
        "content": "<p>the issue tracking this problem is <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\">https://github.com/rust-lang/unsafe-code-guidelines/issues/134</a>. if you want to add some information there or briefly describe your usecase, that would be great.</p>",
        "id": 188682414,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235596
    },
    {
        "content": "<p>My header is <code>{ Cell&lt;usize&gt;, u32 }</code>, which on 64-bit has size_of == 16 but only 12 useful bytes, so the data could start at the 13th byte</p>",
        "id": 188682609,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582235748
    },
    {
        "content": "<p>ah</p>",
        "id": 188682667,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235770
    },
    {
        "content": "<p>but that would make header references overlap with the data...</p>",
        "id": 188682687,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235790
    },
    {
        "content": "<p>Hence ideally having having a DST <code>{ Cell&lt;usize&gt;, u32, [u8] }</code>, but with a thin pointer</p>",
        "id": 188682768,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582235858
    },
    {
        "content": "<p>is one of the other fields the length of the slice part?</p>",
        "id": 188682832,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235884
    },
    {
        "content": "<p><code>{ Cell&lt;usize&gt;, u32, [u8; 0] }</code> was an attempt to approximate that</p>",
        "id": 188682835,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582235891
    },
    {
        "content": "<p>The <code>u32</code> is the allocated capacity</p>",
        "id": 188682851,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582235905
    },
    {
        "content": "<p>hm. the interaction of custom DST and Stacked Borrows is... interesting at least ;)</p>",
        "id": 188682881,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235928
    },
    {
        "content": "<p>TBH probably the best bet is to just ignore everything except for the fixed-size prefix</p>",
        "id": 188682903,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235948
    },
    {
        "content": "<p>but that would likely lead to problems similar as yours</p>",
        "id": 188682936,
        "sender_full_name": "RalfJ",
        "timestamp": 1582235978
    },
    {
        "content": "<p>anyway it's getting late, feel free to add some more questions here but I am going to go to sleep for now :D</p>",
        "id": 188683034,
        "sender_full_name": "RalfJ",
        "timestamp": 1582236026
    },
    {
        "content": "<p>TBH I’m not counting on custom DSTs in the language having even a serious design proposal in the next few years, if ever</p>",
        "id": 188683040,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1582236029
    },
    {
        "content": "<p>Yeah, I had issues trying to use a <code>[u8; 0]</code> as the start of an allocation offset for a custom-dst-like thing <a href=\"https://github.com/thomcc/thin_str/blob/master/src/lib.rs#L49\" target=\"_blank\" title=\"https://github.com/thomcc/thin_str/blob/master/src/lib.rs#L49\">https://github.com/thomcc/thin_str/blob/master/src/lib.rs#L49</a>. Miri got mat about using the [u8; 0] so now I just use it for some offset sanity checks. Kinda annoying but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 189190831,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1582785837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> could you write a summary somewhere about this? Ideally, a self-contained snippet demonstrating the pattern that you think should work, but which Miri complains about. Once we got a nice demo, it would be good to add that to <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\">https://github.com/rust-lang/unsafe-code-guidelines/issues/134</a>.</p>",
        "id": 189197272,
        "sender_full_name": "RalfJ",
        "timestamp": 1582794892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> <code>-Zmiri-disable-stacked-borrows</code> just landed in Miri; with the next submodule update then one (unsatisfying) option is to at least use Miri to test all the other things besides the aliasing rules.</p>",
        "id": 189197306,
        "sender_full_name": "RalfJ",
        "timestamp": 1582794929
    }
]