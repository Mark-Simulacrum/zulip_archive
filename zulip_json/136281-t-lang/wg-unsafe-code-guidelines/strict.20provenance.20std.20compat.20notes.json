[
    {
        "content": "<p>I'm going through std and fixing all the lint warnings for \"no ptr&lt;-&gt;int casts\", leaving my notes about this conversion here for future reference</p>",
        "id": 276132993,
        "sender_full_name": "Gankra",
        "timestamp": 1647911238
    },
    {
        "content": "<p>core::hash -- writes the address of DST pointers by casting it to a usize -- trivial .addr() fix</p>",
        "id": 276133079,
        "sender_full_name": "Gankra",
        "timestamp": 1647911339
    },
    {
        "content": "<p>slice::ascii -- converts to usize for some debug_assert \"paranoia checks\" (pointer is aligned, etc) -- trivial .addr() fix</p>",
        "id": 276133143,
        "sender_full_name": "Gankra",
        "timestamp": 1647911422
    },
    {
        "content": "<p>slice/iter/macros.rs -- uses difference of addresses to do size_hint stuff -- trivial .addr() fix</p>",
        "id": 276133254,
        "sender_full_name": "Gankra",
        "timestamp": 1647911592
    },
    {
        "content": "<p>core::fmt -- ?!? converting to usize to check if a callback is a specific function ?!?</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/library/core/src/fmt/mod.rs#L355\">https://github.com/rust-lang/rust/blob/master/library/core/src/fmt/mod.rs#L355</a></p>\n<p>Does rust not let you directly compare function pointers??? I guess still trivial .addr() but wtf...</p>",
        "id": 276133358,
        "sender_full_name": "Gankra",
        "timestamp": 1647911761
    },
    {
        "content": "<p>hmmm should it use <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.guaranteed_eq\">https://doc.rust-lang.org/std/primitive.pointer.html#method.guaranteed_eq</a></p>",
        "id": 276133888,
        "sender_full_name": "Jubilee",
        "timestamp": 1647912473
    },
    {
        "content": "<p>no it's comparing two actual-for-real runtime function pointers</p>",
        "id": 276133947,
        "sender_full_name": "Gankra",
        "timestamp": 1647912536
    },
    {
        "content": "<p>although if i'm being entirely honest you linked the most wild API i've ever seen so I have no idea why anyone would ever use it</p>",
        "id": 276134003,
        "sender_full_name": "Gankra",
        "timestamp": 1647912606
    },
    {
        "content": "<p>lmao</p>",
        "id": 276134011,
        "sender_full_name": "Jubilee",
        "timestamp": 1647912613
    },
    {
        "content": "<p>I mean if it's all at runtime it would be exactly the same no?</p>",
        "id": 276134018,
        "sender_full_name": "Jubilee",
        "timestamp": 1647912626
    },
    {
        "content": "<p>the answer to that IIRC is \"const weirdness\".</p>",
        "id": 276134034,
        "sender_full_name": "Jubilee",
        "timestamp": 1647912670
    },
    {
        "content": "<p>i am saying i literally don't know wtf the function you linked for is or does</p>",
        "id": 276134037,
        "sender_full_name": "Gankra",
        "timestamp": 1647912671
    },
    {
        "content": "<p>Oh.</p>",
        "id": 276134045,
        "sender_full_name": "Jubilee",
        "timestamp": 1647912685
    },
    {
        "content": "<p>\" this function may spuriously return false for pointers that later actually turn out to be equal\" ??????</p>",
        "id": 276134047,
        "sender_full_name": "Gankra",
        "timestamp": 1647912690
    },
    {
        "content": "<p>It's \"check if CTFE pointers are definitely equal\".</p>",
        "id": 276134095,
        "sender_full_name": "Jubilee",
        "timestamp": 1647912724
    },
    {
        "content": "<p>is... fmt... const...?</p>",
        "id": 276134111,
        "sender_full_name": "Gankra",
        "timestamp": 1647912754
    },
    {
        "content": "<p>Hmmm.</p>",
        "id": 276134130,
        "sender_full_name": "Jubilee",
        "timestamp": 1647912767
    },
    {
        "content": "<p>...probably will be soon, tbh.</p>",
        "id": 276134134,
        "sender_full_name": "Jubilee",
        "timestamp": 1647912773
    },
    {
        "content": "<p>I'm going to leave that to whoever does that</p>",
        "id": 276134151,
        "sender_full_name": "Gankra",
        "timestamp": 1647912782
    },
    {
        "content": "<p>fair.</p>",
        "id": 276134158,
        "sender_full_name": "Jubilee",
        "timestamp": 1647912788
    },
    {
        "content": "<p>(updated the fmt saga again)</p>",
        "id": 276134618,
        "sender_full_name": "Gankra",
        "timestamp": 1647913435
    },
    {
        "content": "<p>oh also I change ptr::to_bits to return <code>-&gt; [u8; core::mem::size_of::&lt;*mut ()&gt;]</code> and it is extremely funny and cool that this is legal rust syntax and works now</p>",
        "id": 276135069,
        "sender_full_name": "Gankra",
        "timestamp": 1647913972
    },
    {
        "content": "<p>:D</p>",
        "id": 276135076,
        "sender_full_name": "Jubilee",
        "timestamp": 1647913985
    },
    {
        "content": "<p>\"haha i will make you say what size a pointer is\"<br>\n...<br>\n\"it is the size of pointer\"</p>",
        "id": 276135179,
        "sender_full_name": "Gankra",
        "timestamp": 1647914121
    },
    {
        "content": "<p><a href=\"http://intrinsics.rs\">intrinsics.rs</a> -- documents <code>ptr as usize</code> as an alternative to transmute, checks alignment, compares address -- all .addr()'d</p>",
        "id": 276135266,
        "sender_full_name": "Gankra",
        "timestamp": 1647914213
    },
    {
        "content": "<p>non_null/unique -- ptr::dangling... this arguably needs special support</p>",
        "id": 276135367,
        "sender_full_name": "Gankra",
        "timestamp": 1647914369
    },
    {
        "content": "<p>thankfully we've pushed dangling for so long that there hopefully shouldn't be many people who do it manually</p>",
        "id": 276135497,
        "sender_full_name": "Gankra",
        "timestamp": 1647914429
    },
    {
        "content": "<p>More ptr APIs I'm adding:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// Creates an invalid pointer with the given address.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// This pointer will have no provenance associated with it and is therefore</span>\n<span class=\"sd\">/// UB to read/write/offset it. This mostly exists to facilitate things</span>\n<span class=\"sd\">/// like ptr::null and NonNull::dangling which make invalid pointers.</span>\n<span class=\"cp\">#[unstable(feature = </span><span class=\"s\">\"strict_provenance\"</span><span class=\"cp\">, issue = </span><span class=\"s\">\"99999999\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">invalid</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">addr</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.</span>\n<span class=\"w\">    </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Creates a mutable invalid pointer with the given address.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// This pointer will have no provenance associated with it and is therefore</span>\n<span class=\"sd\">/// UB to read/write/offset it. This mostly exists to facilitate things</span>\n<span class=\"sd\">/// like ptr::null and NonNull::dangling which make invalid pointers.</span>\n<span class=\"cp\">#[unstable(feature = </span><span class=\"s\">\"strict_provenance\"</span><span class=\"cp\">, issue = </span><span class=\"s\">\"99999999\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">invalid_mut</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">addr</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.</span>\n<span class=\"w\">    </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"sd\">/// Forge a pointer to a Zero-Sized Type (ZST) from nothing.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// Zero-sized types do not actually exist in memory, and therefore you cannot actually</span>\n<span class=\"sd\">/// \"read\" or \"write\" a ZST (any method that claims to do so is just playing pretend,</span>\n<span class=\"sd\">/// although you do still need to respect alignment for something like `&amp;[u32; 0]`).</span>\n<span class=\"sd\">/// As a result, you are free to claim a ZSTs exists anywhere you want (except null).</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// This API exists to make the soundness of this pattern explicit, even under</span>\n<span class=\"sd\">/// \"strict provenance\". It is equivalent to the deprecated `addr as *mut T` cast.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// **BUT YOU AREN'T ACTUALLY ALLOWED TO BLINDLY FORGE ZST _INSTANCES_.**</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// It's sound for an API to use an instance of a ZST to enforce some important</span>\n<span class=\"sd\">/// safety property. So for instance, you can make an API like this:</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// ```ignore</span>\n<span class=\"sd\">/// pub struct Step1Token(_private_to_construct: ());</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// pub fn step1() -&gt; Step1Token { ... }</span>\n<span class=\"sd\">/// pub fn step2(proof: Step1Token) { ... }</span>\n<span class=\"sd\">/// ```</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// And it's sound in the body of `step2` to assume that `step1` has been run</span>\n<span class=\"sd\">/// beforehand, because the only way to get an instance of Step1Token is to call</span>\n<span class=\"sd\">/// `step1` (assuming `step1` is indeed the only API that creates one).</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// A well-behaved abstraction should conceptually only be \"reading\" ZSTs that it</span>\n<span class=\"sd\">/// has previously \"written\". You don't *actually* need to do the write, and could</span>\n<span class=\"sd\">/// feed it into [`mem::forget`][] instead, but for ZSTs `write` is a perfectly</span>\n<span class=\"sd\">/// good way to say `forget` and better expresses the semantics of your code.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// Anything that stores *many* ZSTs should at the minimum maintain a counter of how</span>\n<span class=\"sd\">/// many it has written so that it can know how many it can/must read later.</span>\n<span class=\"sd\">/// `Vec&lt;()&gt;` is basically just a counter that goes up on `push` and down on `pop`.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// Note: if you need to \"allocate\" memory for a buffer of ZSTs,</span>\n<span class=\"sd\">/// [`core::ptr::NonNull::dangling`][] is more useful, because it</span>\n<span class=\"sd\">/// handles alignment for you.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// # Example</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// ```</span>\n<span class=\"sd\">/// use core::{ptr, mem};</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// // I store my ZSTs at the *coolest* address</span>\n<span class=\"sd\">/// let my_good_ptr = ptr::zst_exists::&lt;()&gt;(0xc001_add7);</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// // \"store\" and then \"load\" a ZST at this cool address.</span>\n<span class=\"sd\">/// my_good_ptr.write(());</span>\n<span class=\"sd\">/// let output = my_good_ptr.read();</span>\n<span class=\"sd\">/// ```</span>\n<span class=\"cp\">#[unstable(feature = </span><span class=\"s\">\"strict_provenance\"</span><span class=\"cp\">, issue = </span><span class=\"s\">\"99999999\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">zst_exists</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">addr</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Only ZSTs can be pulled from the aether!\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// We are the language so we get to know that `invalid` is fine here.</span>\n<span class=\"w\">    </span><span class=\"n\">invalid_mut</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276137417,
        "sender_full_name": "Gankra",
        "timestamp": 1647916672
    },
    {
        "content": "<p>(I'm not sure zst_exists needs to exist but I feel like it's worth just making it explicit that this is a thing)</p>",
        "id": 276137472,
        "sender_full_name": "Gankra",
        "timestamp": 1647916722
    },
    {
        "content": "<p>properly auditing the rest of <code>ptr</code> and...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"cp\">#[stable(feature = </span><span class=\"s\">\"fnptr_impls\"</span><span class=\"cp\">, since = </span><span class=\"s\">\"1.4.0\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">Ret</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$($Arg</span><span class=\"p\">),</span><span class=\"o\">*&gt;</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Pointer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"cp\">$FnTy</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// HACK: The intermediate cast as usize is required for AVR</span>\n<span class=\"w\">                </span><span class=\"c1\">// so that the address space of the source function pointer</span>\n<span class=\"w\">                </span><span class=\"c1\">// is preserved in the final function pointer.</span>\n<span class=\"w\">                </span><span class=\"c1\">//</span>\n<span class=\"w\">                </span><span class=\"c1\">// https://github.com/avr-rust/rust/issues/143</span>\n<span class=\"w\">                </span><span class=\"n\">fmt</span>::<span class=\"n\">Pointer</span>::<span class=\"n\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276137740,
        "sender_full_name": "Gankra",
        "timestamp": 1647917076
    },
    {
        "content": "<p>I'd note that the pointer returned from <code>NonNull::dangling</code> and a dangling/invalid pointer are not the same thing.</p>",
        "id": 276137743,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917079
    },
    {
        "content": "<p>They are in fact the same thing though</p>",
        "id": 276137758,
        "sender_full_name": "Gankra",
        "timestamp": 1647917108
    },
    {
        "content": "<p><code>NonNull::dangling</code> can be used for accesses of <code>0</code> size, whereas a dangling pointer, which points into a freed allocation, cannot.</p>",
        "id": 276137759,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917108
    },
    {
        "content": "<p>incorrect</p>",
        "id": 276137767,
        "sender_full_name": "Gankra",
        "timestamp": 1647917125
    },
    {
        "content": "<p>or rather, freed memory is irrelevant for ZSTs, they are always allocated everywhere</p>",
        "id": 276137825,
        "sender_full_name": "Gankra",
        "timestamp": 1647917169
    },
    {
        "content": "<p>The name of <code>NonNull::dangling</code> is a misnomer, because it doesn't actually return a dangling pointer.<br>\nSee: <a href=\"https://doc.rust-lang.org/nightly/core/ptr/index.html#safety\">https://doc.rust-lang.org/nightly/core/ptr/index.html#safety</a></p>\n<blockquote>\n<ul>\n<li>Even for operations of size zero, the pointer must not be pointing to deallocated memory ...</li>\n</ul>\n</blockquote>",
        "id": 276137832,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917186
    },
    {
        "content": "<p>WTF?</p>",
        "id": 276137940,
        "sender_full_name": "Gankra",
        "timestamp": 1647917348
    },
    {
        "content": "<p>that doesn't make any sense</p>",
        "id": 276137941,
        "sender_full_name": "Gankra",
        "timestamp": 1647917354
    },
    {
        "content": "<p>I mean, it makes my job of writing consistent pointer semantics for xir easier.</p>",
        "id": 276137949,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917371
    },
    {
        "content": "<p>And I think llvm also likes it somewhat as well.</p>",
        "id": 276137962,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917394
    },
    {
        "content": "<p>operations of size 0 should never reach llvm</p>",
        "id": 276138062,
        "sender_full_name": "Gankra",
        "timestamp": 1647917496
    },
    {
        "content": "<p>I think <code>offset</code> for a raw pointer slice.</p>",
        "id": 276138126,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917553
    },
    {
        "content": "<p>I spent a very long time several years ago getting together everyone important and getting them to agree that even shit like dangling.offset(n) was valid too</p>",
        "id": 276138136,
        "sender_full_name": "Gankra",
        "timestamp": 1647917562
    },
    {
        "content": "<p>I'm pretty sure llvm says, uh... no.</p>",
        "id": 276138145,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917581
    },
    {
        "content": "<p>Since GEPi requires both the input and result pointer to be inbounds of each other.</p>",
        "id": 276138157,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917599
    },
    {
        "content": "<p>llvm underspecifies it, i got the llvm maintainers to agree it's a reasonable interpretation that there are allocations of size 0 everywhere</p>",
        "id": 276138165,
        "sender_full_name": "Gankra",
        "timestamp": 1647917609
    },
    {
        "content": "<p>In any case, that makes my job (and my semantics) so much more complicated, having to special case ZSTs everywhere down to the backend.</p>",
        "id": 276138226,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917649
    },
    {
        "content": "<p>(And it's either that, or I just can't emit reads for types with dependant sizes)</p>",
        "id": 276138248,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917690
    },
    {
        "content": "<p>I think that level of implementation complexity is fair for not having to deal with ZST UB and aliasing and provenance.</p>",
        "id": 276138279,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647917753
    },
    {
        "content": "<p>Right, but I have to specify those interactions as well.</p>",
        "id": 276138342,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917808
    },
    {
        "content": "<p>you have to special case ZSTs anyway, they don't exist</p>",
        "id": 276138355,
        "sender_full_name": "Gankra",
        "timestamp": 1647917825
    },
    {
        "content": "<p>And two thirds of my memory model suddenly has to care about whether a type has a zero size.</p>",
        "id": 276138358,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917829
    },
    {
        "content": "<p>like you can't ask a cpu to load 0 bytes</p>",
        "id": 276138361,
        "sender_full_name": "Gankra",
        "timestamp": 1647917835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276138355\">said</a>:</p>\n<blockquote>\n<p>you have to special case ZSTs anyway, they don't exist</p>\n</blockquote>\n<p>They go right to the codegen as-is, and the codegen throws them away there.</p>",
        "id": 276138373,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917856
    },
    {
        "content": "<p>that should be fine?</p>",
        "id": 276138398,
        "sender_full_name": "Jubilee",
        "timestamp": 1647917879
    },
    {
        "content": "<p>I mean let's be honest here.</p>",
        "id": 276138437,
        "sender_full_name": "Jubilee",
        "timestamp": 1647917888
    },
    {
        "content": "<p>your project includes x86-64 codegen.</p>",
        "id": 276138439,
        "sender_full_name": "Jubilee",
        "timestamp": 1647917897
    },
    {
        "content": "<p>relatively speaking, the complexity of ZSTs is... <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 276138464,
        "sender_full_name": "Jubilee",
        "timestamp": 1647917934
    },
    {
        "content": "<p>I made sure \"ZSTs are always allocated everywhere\" was the agreed-upon memory model for rust, you don't get to say \"I will make an optimization that miscompiles that\" because it's inconvenient</p>",
        "id": 276138480,
        "sender_full_name": "Gankra",
        "timestamp": 1647917971
    },
    {
        "content": "<p>The xir indirect instruction has</p>\n<blockquote>\n<p>Preconditions:</p>\n<ul>\n<li><code>p</code> shall be a non-null valid pointer that points to an object, or to a well-aligned offset within an object, at least <code>size_of T</code> bytes shall be reachable from <code>p</code></li>\n</ul>\n</blockquote>",
        "id": 276138492,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647917987
    },
    {
        "content": "<p>There's something with ZST pointers and deallocated memory though, which was (is?) a problem? But alas I cannot seem to find it right now.</p>",
        "id": 276138556,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647918016
    },
    {
        "content": "<p>I linked it above<br>\ndeallocated pointers are <em>not</em> valid for ZST accesses.</p>",
        "id": 276138607,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647918045
    },
    {
        "content": "<p>Right, but rather the actual reason why we have that rule.</p>",
        "id": 276138617,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647918062
    },
    {
        "content": "<p>Ralf conflated offsets of size 0 with ZSTs, those are different</p>",
        "id": 276138629,
        "sender_full_name": "Gankra",
        "timestamp": 1647918068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276138492\">said</a>:</p>\n<blockquote>\n<p>The xir indirect instruction has</p>\n<blockquote>\n<p>Preconditions:</p>\n<ul>\n<li><code>p</code> shall be a non-null valid pointer that points to an object, or to a well-aligned offset within an object, at least <code>size_of T</code> bytes shall be reachable from <code>p</code><br>\n</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>And if I can't generate an <code>indirect</code> for ZSTs, then suddenly I can't dereference pointers in generic code.</p>",
        "id": 276138646,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647918093
    },
    {
        "content": "<p>zst_ptr.offset(x) is fine. nonzst_ptr.offset(0) is an assertion</p>",
        "id": 276138648,
        "sender_full_name": "Gankra",
        "timestamp": 1647918095
    },
    {
        "content": "<p>Whatever codegen backend can already erase dereferences of size 0s anyways (it has to), so I really don't think this is such a problem.</p>",
        "id": 276138723,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647918186
    },
    {
        "content": "<p>xlang relies heavily on being able to reason about operations on pointers reguardless of what the pointee is, because xlang has to deal with pre-monomorphic generic parameters.</p>",
        "id": 276138726,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647918195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303115\">Quy Nguyen</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276138723\">said</a>:</p>\n<blockquote>\n<p>Whatever codegen backend can already erase dereferences of size 0s anyways (it has to), so I really don't think this is such a problem.</p>\n</blockquote>\n<p>the problem is that llvm is a pissant about gep(0)</p>",
        "id": 276138807,
        "sender_full_name": "Gankra",
        "timestamp": 1647918290
    },
    {
        "content": "<p>Oh?</p>",
        "id": 276138825,
        "sender_full_name": "Jubilee",
        "timestamp": 1647918318
    },
    {
        "content": "<p>As it is, there is exactly one ZST special case</p>\n<blockquote>\n<p>When casting an integer to a pointer, the resulting pointer may manifest a zero-sized object at it's address. Such a pointer is considered valid and at least <code>0</code> bytes are reachable from that pointer.</p>\n</blockquote>",
        "id": 276138890,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647918396
    },
    {
        "content": "<p>Ah, here it is. <a href=\"https://github.com/rust-lang/rust/pull/77844\">https://github.com/rust-lang/rust/pull/77844</a></p>",
        "id": 276138907,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647918433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276138825\">said</a>:</p>\n<blockquote>\n<p>Oh?</p>\n</blockquote>\n<p>the operation doesn't make any sense and should reasonably regarded as a noop but they're like \"naahhh, but what if it wasn't though\"</p>",
        "id": 276138912,
        "sender_full_name": "Gankra",
        "timestamp": 1647918446
    },
    {
        "content": "<p>I think the issue was if gep(0) was fine then gep(n) couldn't be optimized because n could be 0.</p>",
        "id": 276138968,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647918491
    },
    {
        "content": "<p>To fix this, I basically would have to special case half of the xir instruction set, and oh, can't run any optimizations pre-monomorph time (also IIRC there are some people that want to do some pre-monomorph mir optimizations along the same lines)</p>",
        "id": 276138977,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647918519
    },
    {
        "content": "<p>Meanwhile, I'd rather be able to write a compiler, then have to spend the next several months writing the IR spec instead.</p>",
        "id": 276139006,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647918585
    },
    {
        "content": "<p>hmm ok so I can make this coherent with the knowledge that we are making provenance make sense</p>",
        "id": 276139056,
        "sender_full_name": "Gankra",
        "timestamp": 1647918633
    },
    {
        "content": "<p>and defining gep(0) where 0 is some sort of constexpr thing gets complicated with constant-folding and all that jazz... Also (not to get too sidetracked) in XIR is there not an object of size 0 at every address?</p>",
        "id": 276139062,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647918640
    },
    {
        "content": "<p>when you free memory, pointers with that memory's provenance are invalid and even ZSTs are bad</p>",
        "id": 276139072,
        "sender_full_name": "Gankra",
        "timestamp": 1647918663
    },
    {
        "content": "<p>There isn't implicitly, but you can manifest one. But not out of an invalid pointer.</p>",
        "id": 276139075,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647918666
    },
    {
        "content": "<p>Yeah I was imagining you were going to say something like that.</p>",
        "id": 276139089,
        "sender_full_name": "Jubilee",
        "timestamp": 1647918692
    },
    {
        "content": "<p>basically it needs to be ok to make a ZST from the aether that happens to be inside an allocation that gets freed and for that to not fuck with it</p>",
        "id": 276139093,
        "sender_full_name": "Gankra",
        "timestamp": 1647918698
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 276139095,
        "sender_full_name": "Jubilee",
        "timestamp": 1647918716
    },
    {
        "content": "<p>(Specifically, zero-sized objects can be manifested whenever you use <code>convert reinterpret</code> to perform an integer to pointer conversion)</p>",
        "id": 276139138,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647918740
    },
    {
        "content": "<p>ok this is a tolerable model, i will accept it</p>",
        "id": 276139149,
        "sender_full_name": "Gankra",
        "timestamp": 1647918763
    },
    {
        "content": "<p>but I'm going to rewrite these docs to talk about provenance</p>",
        "id": 276139161,
        "sender_full_name": "Gankra",
        "timestamp": 1647918789
    },
    {
        "content": "<p>Basically, I want to be able to say what happens when you <code>free</code> a pointer in less than an entire thesis.</p>",
        "id": 276139168,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647918797
    },
    {
        "content": "<p>With strict provenance we can appeal to provenance in a not-handwavey way so it's fine to have this kind of thing</p>",
        "id": 276139307,
        "sender_full_name": "Gankra",
        "timestamp": 1647918955
    },
    {
        "content": "<p>the proposed C provenance rules where you \"look at all the allocations in the world\" make this nuts</p>",
        "id": 276139358,
        "sender_full_name": "Gankra",
        "timestamp": 1647918992
    },
    {
        "content": "<p>Conceptually, it would be <code>claim_alloc(int, size) -&gt; ptr</code>, <code>create_provenance(ptr) -&gt; ptr</code>, <code>destroy_provenance(ptr)</code>, and <code>invalid_provenance(int) -&gt; ptr</code> and that seems like it could take care of everything. Userspace allocators are a lot easier in this model hmm. Except the container_ofs are still a pain.</p>",
        "id": 276139607,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647919349
    },
    {
        "content": "<p>Yeah, this is why I am so against PNVI-ae.</p>",
        "id": 276139757,
        "sender_full_name": "Jubilee",
        "timestamp": 1647919579
    },
    {
        "content": "<p>We don't have like <strong>50 years</strong> of legacy code to worry about we have like 5~10.</p>",
        "id": 276139840,
        "sender_full_name": "Jubilee",
        "timestamp": 1647919711
    },
    {
        "content": "<p>And we have interfaces that allow us to sidestep most of the atrocities that justify PNVI-ae*</p>",
        "id": 276139951,
        "sender_full_name": "Jubilee",
        "timestamp": 1647919810
    },
    {
        "content": "<p>Indeed (though I ran into a situation that leaves using interfaces kinda sketchy - I'm inside of a dynamic loader's plt resolver function and I didn't want to use pure assembly because that would just be painful - <code>0 as *mut Elf64Sym</code> is fine, <code>core::ptr::null::&lt;Elf64Sym&gt;()</code> might make my resolver recursive if the compiler in use at the time hates me)</p>",
        "id": 276141280,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647921391
    },
    {
        "content": "<p>My proposed rewrite of these docs:</p>",
        "id": 276141405,
        "sender_full_name": "Gankra",
        "timestamp": 1647921594
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! # Safety</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! Many functions in this module take raw pointers as arguments and read from</span>\n<span class=\"sd\">//! or write to them. For this to be safe, these pointers must be *valid*.</span>\n<span class=\"sd\">//! Whether a pointer is valid depends on the operation it is used for</span>\n<span class=\"sd\">//! (read or write), and the extent of the memory that is accessed (i.e.,</span>\n<span class=\"sd\">//! how many bytes are read/written). Most functions use `*mut T` and `*const T`</span>\n<span class=\"sd\">//! to access only a single value, in which case the documentation omits the size</span>\n<span class=\"sd\">//! and implicitly assumes it to be `size_of::&lt;T&gt;()` bytes.</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! The precise rules for validity are not determined yet. The guarantees that are</span>\n<span class=\"sd\">//! provided at this point are very minimal:</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! * A [null] pointer is *never* valid, not even for accesses of [size zero][zst].</span>\n<span class=\"sd\">//! * For a pointer to be valid, it is necessary, but not always sufficient, that the pointer</span>\n<span class=\"sd\">//!   be *dereferenceable*: the memory range of the given size starting at the pointer must all be</span>\n<span class=\"sd\">//!   within the bounds of a single allocated object. Note that in Rust,</span>\n<span class=\"sd\">//!   every (stack-allocated) variable is considered a separate allocated object.</span>\n<span class=\"sd\">//! * Deallocating memory invalidates all pointers with provenance to that allocation, *even*</span>\n<span class=\"sd\">//!   for accesses of [size zero][zst].</span>\n<span class=\"sd\">//! * All accesses performed by functions in this module are *non-atomic* in the sense</span>\n<span class=\"sd\">//!   of [atomic operations] used to synchronize between threads. This means it is</span>\n<span class=\"sd\">//!   undefined behavior to perform two concurrent accesses to the same location from different</span>\n<span class=\"sd\">//!   threads unless both accesses only read from memory. Notice that this explicitly</span>\n<span class=\"sd\">//!   includes [`read_volatile`] and [`write_volatile`]: Volatile accesses cannot</span>\n<span class=\"sd\">//!   be used for inter-thread synchronization.</span>\n<span class=\"sd\">//! * The result of casting a reference to a pointer is valid for as long as the</span>\n<span class=\"sd\">//!   underlying object is live and no reference (just raw pointers) is used to</span>\n<span class=\"sd\">//!   access the same memory.</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! These axioms, along with careful use of [`offset`] for pointer arithmetic,</span>\n<span class=\"sd\">//! are enough to correctly implement many useful things in unsafe code. Stronger guarantees</span>\n<span class=\"sd\">//! will be provided eventually, as the [aliasing] rules are being determined. For more</span>\n<span class=\"sd\">//! information, see the [book] as well as the section in the reference devoted</span>\n<span class=\"sd\">//! to [undefined behavior][ub].</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! ## Alignment</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! Valid raw pointers as defined above are not necessarily properly aligned (where</span>\n<span class=\"sd\">//! \"proper\" alignment is defined by the pointee type, i.e., `*const T` must be</span>\n<span class=\"sd\">//! aligned to `mem::align_of::&lt;T&gt;()`). However, most functions require their</span>\n<span class=\"sd\">//! arguments to be properly aligned, and will explicitly state</span>\n<span class=\"sd\">//! this requirement in their documentation. Notable exceptions to this are</span>\n<span class=\"sd\">//! [`read_unaligned`] and [`write_unaligned`].</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! When a function requires proper alignment, it does so even if the access</span>\n<span class=\"sd\">//! has size 0, i.e., even if memory is not actually touched. Consider using</span>\n<span class=\"sd\">//! [`NonNull::dangling`] in such cases.</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! ## Allocated Object and Provenance</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! For several operations, such as [`offset`] or field projections (`expr.field`), the notion of an</span>\n<span class=\"sd\">//! \"allocated object\" becomes relevant. An allocated object is a contiguous region of memory.</span>\n<span class=\"sd\">//! Common examples of allocated objects include stack-allocated variables (each variable is a</span>\n<span class=\"sd\">//! separate allocated object), heap allocations (each allocation created by the global allocator is</span>\n<span class=\"sd\">//! a separate allocated object), and `static` variables.</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! When an object is allocated there should be only one way to access to it (the variable's name,</span>\n<span class=\"sd\">//! the pointer returned by malloc). This One True Handle is given a unique *provenance* which</span>\n<span class=\"sd\">//! gives it permission to access that object. This provenance, and therefore permission to access</span>\n<span class=\"sd\">//! the allocation, is implicitly shared with all pointers that are either directly or transitively</span>\n<span class=\"sd\">//! *derived* from the One True Handle through operations like `offset` or borrowing.</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! (Unclear detail: taking a subslice is proposed to create a slice that is no longer allowed</span>\n<span class=\"sd\">//! to access the full range of memory -- is this part of provenance or another system?)</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! You may always \"forge\" an allocated object of size 0 at any properly aligned non-[null]</span>\n<span class=\"sd\">//! address with [`zst_exists`] or [`NonNull::dangling`], even at addresses which \"accidentally\"</span>\n<span class=\"sd\">//! overlap other allocations. This is allowed because the forged pointer has its own</span>\n<span class=\"sd\">//! provenance, which means the compiler can distinguish between the forged pointer</span>\n<span class=\"sd\">//! and those that *genuinely* point into the allocation (and the forged pointer can't</span>\n<span class=\"sd\">//! be used to load or store any memory, so it really can't do anything observable</span>\n<span class=\"sd\">//! that alias analysis might be concerned with).</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! Critically, this means that freeing the *actually* allocated object does not</span>\n<span class=\"sd\">//! invalidate the \"accidentally\" overlapping forged allocation. This is in some sense</span>\n<span class=\"sd\">//! equivalent to the fact you don't get to be \"lucky\" and use a freed pointer whenever</span>\n<span class=\"sd\">//! the memory it points at happens to get reallocated -- the new allocation has a fresh</span>\n<span class=\"sd\">//! provenance, and so has no relationship to the freed pointer, even if the addresses</span>\n<span class=\"sd\">//! may be the same.</span>\n</code></pre></div>",
        "id": 276141409,
        "sender_full_name": "Gankra",
        "timestamp": 1647921597
    },
    {
        "content": "<p>Notable changes:</p>",
        "id": 276141462,
        "sender_full_name": "Gankra",
        "timestamp": 1647921609
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! * Deallocating memory invalidates all pointers with provenance to that allocation, *even*</span>\n<span class=\"sd\">//!   for accesses of [size zero][zst].</span>\n</code></pre></div>",
        "id": 276141514,
        "sender_full_name": "Gankra",
        "timestamp": 1647921637
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! When an object is allocated there should be only one way to access to it (the variable's name,</span>\n<span class=\"sd\">//! the pointer returned by malloc). This One True Handle is given a unique *provenance* which</span>\n<span class=\"sd\">//! gives it permission to access that object. This provenance, and therefore permission to access</span>\n<span class=\"sd\">//! the allocation, is implicitly shared with all pointers that are either directly or transitively</span>\n<span class=\"sd\">//! *derived* from the One True Handle through operations like `offset` or borrowing.</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! (Unclear detail: taking a subslice is proposed to create a slice that is no longer allowed</span>\n<span class=\"sd\">//! to access the full range of memory -- is this part of provenance or another system?)</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! You may always \"forge\" an allocated object of size 0 at any properly aligned non-[null]</span>\n<span class=\"sd\">//! address with [`zst_exists`] or [`NonNull::dangling`], even at addresses which \"accidentally\"</span>\n<span class=\"sd\">//! overlap other allocations. This is allowed because the forged pointer has its own</span>\n<span class=\"sd\">//! provenance, which means the compiler can distinguish between the forged pointer</span>\n<span class=\"sd\">//! and those that *genuinely* point into the allocation (and the forged pointer can't</span>\n<span class=\"sd\">//! be used to load or store any memory, so it really can't do anything observable</span>\n<span class=\"sd\">//! that alias analysis might be concerned with).</span>\n<span class=\"sd\">//!</span>\n<span class=\"sd\">//! Critically, this means that freeing the *actually* allocated object does not</span>\n<span class=\"sd\">//! invalidate the \"accidentally\" overlapping forged allocation. This is in some sense</span>\n<span class=\"sd\">//! equivalent to the fact you don't get to be \"lucky\" and use a freed pointer whenever</span>\n<span class=\"sd\">//! the memory it points at happens to get reallocated -- the new allocation has a fresh</span>\n<span class=\"sd\">//! provenance, and so has no relationship to the freed pointer, even if the addresses</span>\n<span class=\"sd\">//! may be the same.</span>\n</code></pre></div>",
        "id": 276141516,
        "sender_full_name": "Gankra",
        "timestamp": 1647921652
    },
    {
        "content": "<p>Again this is almost certainly insufficiently formal but it reflects the mental model of the APIs I am sketching out here</p>",
        "id": 276141533,
        "sender_full_name": "Gankra",
        "timestamp": 1647921685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276133143\">said</a>:</p>\n<blockquote>\n<p>slice::ascii -- converts to usize for some debug_assert \"paranoia checks\" (pointer is aligned, etc) -- trivial .addr() fix</p>\n</blockquote>\n<p>There are some pretty widespread debug assertions about alignment elsewhere in <code>core</code>. Authors of unsafe code have an unfortunate habit of doing misaligned pointer operations, and these debug assertions are great at catching those (with the asterisk that you currently need to use <code>-Zbuild-std</code>). With all this pointer reworking, I wouldn't mind having a built-in way to check if a pointer is aligned, or to get the alignment bits.</p>\n<p>BTW I've seen code like this done in other places, might be interesting to you <a href=\"https://github.com/rayon-rs/rayon/blob/f57bfa5126bc07ab752e9cbda0194f3b35876ce9/src/slice/mergesort.rs#L220-L223\">https://github.com/rayon-rs/rayon/blob/f57bfa5126bc07ab752e9cbda0194f3b35876ce9/src/slice/mergesort.rs#L220-L223</a></p>",
        "id": 276142195,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1647922610
    },
    {
        "content": "<p>That might be reasonable but is a bit out of scope</p>",
        "id": 276142214,
        "sender_full_name": "Gankra",
        "timestamp": 1647922664
    },
    {
        "content": "<p>This example is completely nuts:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Returns a raw pointer to the slice's buffer.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// This is equivalent to casting `self` to `*const T`, but more type-safe.</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// # Examples</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// ```rust</span>\n<span class=\"w\">    </span><span class=\"sd\">/// #![feature(slice_ptr_get)]</span>\n<span class=\"w\">    </span><span class=\"sd\">/// use std::ptr;</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// let slice: *const [i8] = ptr::slice_from_raw_parts(ptr::null(), 3);</span>\n<span class=\"w\">    </span><span class=\"sd\">/// assert_eq!(slice.as_ptr(), 0 as *const i8);</span>\n<span class=\"w\">    </span><span class=\"sd\">/// ```</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[unstable(feature = </span><span class=\"s\">\"slice_ptr_get\"</span><span class=\"cp\">, issue = </span><span class=\"s\">\"74265\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[rustc_const_unstable(feature = </span><span class=\"s\">\"slice_ptr_get\"</span><span class=\"cp\">, issue = </span><span class=\"s\">\"74265\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">as_ptr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276142261,
        "sender_full_name": "Gankra",
        "timestamp": 1647922693
    },
    {
        "content": "<p>This feels like.... almost certainly UB??</p>",
        "id": 276142266,
        "sender_full_name": "Gankra",
        "timestamp": 1647922719
    },
    {
        "content": "<p>oh it's <code>*const [T]</code> the poor unloved raw pointer type</p>",
        "id": 276142273,
        "sender_full_name": "Gankra",
        "timestamp": 1647922743
    },
    {
        "content": "<p>*fondly remembers the time she spent trying to convince people <code>*mut [T]</code> could be useful for some things</p>",
        "id": 276142353,
        "sender_full_name": "Gankra",
        "timestamp": 1647922849
    },
    {
        "content": "<p>yeah what the hell</p>",
        "id": 276142632,
        "sender_full_name": "Jubilee",
        "timestamp": 1647923282
    },
    {
        "content": "<p>that involves creating a slice with a nonzero len of real data pointing at null</p>",
        "id": 276142656,
        "sender_full_name": "Jubilee",
        "timestamp": 1647923299
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120827\">Ben Kimock (Saethlin)</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276142195\">said</a>:</p>\n<blockquote>\n<p>There are some pretty widespread debug assertions about alignment elsewhere in <code>core</code>. Authors of unsafe code have an unfortunate habit of doing misaligned pointer operations, and these debug assertions are great at catching those (with the asterisk that you currently need to use <code>-Zbuild-std</code>). With all this pointer reworking, I wouldn't mind having a built-in way to check if a pointer is aligned, or to get the alignment bits.</p>\n<p>BTW I've seen code like this done in other places, might be interesting to you <a href=\"https://github.com/rayon-rs/rayon/blob/f57bfa5126bc07ab752e9cbda0194f3b35876ce9/src/slice/mergesort.rs#L220-L223\">https://github.com/rayon-rs/rayon/blob/f57bfa5126bc07ab752e9cbda0194f3b35876ce9/src/slice/mergesort.rs#L220-L223</a></p>\n</blockquote>\n<p><code>is_aligned</code> seems like a pretty simple function to PR.</p>",
        "id": 276142675,
        "sender_full_name": "Jubilee",
        "timestamp": 1647923357
    },
    {
        "content": "<p>Wait but *mut [T] is so useful</p>",
        "id": 276142772,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1647923486
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/94231#issuecomment-1047248968\">https://github.com/rust-lang/rust/issues/94231#issuecomment-1047248968</a> is the kind of thing that happens because it isn't used</p>",
        "id": 276142837,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1647923588
    },
    {
        "content": "<p>i agree it's conceptually useful but the API/syntax support isn't there, iirc</p>",
        "id": 276142910,
        "sender_full_name": "Gankra",
        "timestamp": 1647923726
    },
    {
        "content": "<p>well heck it's been like 5 years maybe it is now but it wasn't</p>",
        "id": 276142917,
        "sender_full_name": "Gankra",
        "timestamp": 1647923750
    },
    {
        "content": "<p>and i still see many of my horrible pet projects in here like Unique so just kinda assuming the core design is the same lol</p>",
        "id": 276142966,
        "sender_full_name": "Gankra",
        "timestamp": 1647923779
    },
    {
        "content": "<p>NonNull/Unique -- just needed to use ptr::invalid(mem::align_of::&lt;T&gt;()) for their core functionality, also a lot of doc examples blindly asserting against <code>1 as *mut u8</code> which is awful and I have replace with tautological comparisons against dangling</p>",
        "id": 276143004,
        "sender_full_name": "Gankra",
        "timestamp": 1647923881
    },
    {
        "content": "<p>holy shit, shoutouts to core::mem for never doing an int-ptr conversion or even discussing it in the docs</p>",
        "id": 276143227,
        "sender_full_name": "Gankra",
        "timestamp": 1647924213
    },
    {
        "content": "<p>you did it core::mem, you're the best module with all the Good Evil</p>",
        "id": 276143230,
        "sender_full_name": "Gankra",
        "timestamp": 1647924226
    },
    {
        "content": "<blockquote>\n<p>slice::ascii -- converts to usize for some debug_assert \"paranoia checks\" (pointer is aligned, etc) -- trivial .addr() fix</p>\n</blockquote>\n<p>lol i wrote that, i do a lot of those style of paranoia checks in my code... i've certainly added other ptr-&gt;int to the stdlib also (for example, just off the top of my head i know that io/error/repr_bitpacked.rs also has some ptr-&gt;int i wrote, but i was (trying to be) pretty careful around provenance so <em>hopefully</em> it should be fine)</p>",
        "id": 276144377,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1647925785
    },
    {
        "content": "<p>I'm assuming under your model reading the bytes of a pointer via transmute or pointer cast, and transmuting stuff to pointers is also wrong?</p>",
        "id": 276144620,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647926049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303115\">Quy Nguyen</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276144620\">said</a>:</p>\n<blockquote>\n<p>I'm assuming under your model reading the bytes of a pointer via transmute or pointer cast, and transmuting stuff to pointers is also wrong?</p>\n</blockquote>\n<p>i have no fundamental objection to getting the bytes of a pointer, under CHERI this isn't actually dangerous because you can't use \"stolen\" metadata for anything</p>",
        "id": 276145517,
        "sender_full_name": "Gankra",
        "timestamp": 1647927355
    },
    {
        "content": "<p>although it may Make You Sad if you observe implementation details that are Weird</p>",
        "id": 276145563,
        "sender_full_name": "Gankra",
        "timestamp": 1647927377
    },
    {
        "content": "<p>but yes you can't transmute anything to a pointer</p>",
        "id": 276145571,
        "sender_full_name": "Gankra",
        "timestamp": 1647927387
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/95199\">https://github.com/rust-lang/rust/pull/95199</a></p>",
        "id": 276145578,
        "sender_full_name": "Gankra",
        "timestamp": 1647927400
    },
    {
        "content": "<p>^ WIP</p>",
        "id": 276145580,
        "sender_full_name": "Gankra",
        "timestamp": 1647927406
    },
    {
        "content": "<p>I need to SLEEP</p>",
        "id": 276145583,
        "sender_full_name": "Gankra",
        "timestamp": 1647927409
    },
    {
        "content": "<p>goodnight!</p>",
        "id": 276146112,
        "sender_full_name": "Jubilee",
        "timestamp": 1647928163
    },
    {
        "content": "<p>Goodnight!</p>",
        "id": 276147122,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647929306
    },
    {
        "content": "<p>Damn, I need to sleep too but just got a random idea that I spent like 3 seconds thinking about. Iff the allocator can \"restore\" provenances by doing some <code>wrapping_offset</code>s, what if you had a something like <code>trait Ptr2IntSupportingAllocator: Allocator</code> as a fallback for weird stuff. This does tie into how this model handles [userspace] allocators tho.</p>",
        "id": 276147240,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647929506
    },
    {
        "content": "<p>Allocators are a particularly tough case, since they need to bend or break the rules for provenance, since they're returning \"unaliased\" allocations which (in practice if not in theory) are actually aliased by their internal representation of the data in question.</p>",
        "id": 276151882,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1647934742
    },
    {
        "content": "<p>ok back on the horse</p>",
        "id": 276180289,
        "sender_full_name": "Gankra",
        "timestamp": 1647951981
    },
    {
        "content": "<p>alloc::rc -- uses usize::MAX as its dangling sentinel -- another fine application of ptr::invalid</p>",
        "id": 276180347,
        "sender_full_name": "Gankra",
        "timestamp": 1647952014
    },
    {
        "content": "<p><code>ptr::invalid</code> might not compare unequal to a valid pointer.</p>",
        "id": 276180410,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647952056
    },
    {
        "content": "<p>it definitely will for usize::MAX for a pointee larger than 1 byte, which is what it's doing</p>",
        "id": 276180505,
        "sender_full_name": "Gankra",
        "timestamp": 1647952101
    },
    {
        "content": "<p>That wouldn't be valid for <code>NonNull::dangling</code> if the type has &gt;1 alignment, though.</p>",
        "id": 276180689,
        "sender_full_name": "Connor Horman",
        "timestamp": 1647952218
    },
    {
        "content": "<p>NonNull does not require alignment (same rules as *mut), and <code>dangling</code> is an argument-less ctor. This is just \"morally equivalent to dangling, but not\"</p>",
        "id": 276180810,
        "sender_full_name": "Gankra",
        "timestamp": 1647952305
    },
    {
        "content": "<p>alloc::slice -- taking the difference between addresses to compute array length -- trivial .addr()</p>",
        "id": 276180934,
        "sender_full_name": "Gankra",
        "timestamp": 1647952361
    },
    {
        "content": "<p>arc -- same as rc</p>",
        "id": 276181340,
        "sender_full_name": "Gankra",
        "timestamp": 1647952569
    },
    {
        "content": "<p>vec -- address difference for array length thing</p>",
        "id": 276181391,
        "sender_full_name": "Gankra",
        "timestamp": 1647952594
    },
    {
        "content": "<p>dwarf::eh -- our first pointer fuckery!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">round_up</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>changed to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">with_addr</span><span class=\"p\">(</span><span class=\"n\">round_up</span><span class=\"p\">(</span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">addr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276182205,
        "sender_full_name": "Gankra",
        "timestamp": 1647953023
    },
    {
        "content": "<p>oh my bad, this is all fuckery:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">encoding</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x0F</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_absptr</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">read</span>::<span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_uleb128</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">read_uleb128</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_udata2</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">read</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u16</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_udata4</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">read</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_udata8</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">read</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_sleb128</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">read_sleb128</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_sdata2</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">read</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i16</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_sdata4</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">read</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_sdata8</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">read</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i64</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(()),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">encoding</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"mh\">0x70</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_absptr</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// relative to address of the encoded value, despite the name</span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_pcrel</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">reader</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">addr</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_funcrel</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">func_start</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(());</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">func_start</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_textrel</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">get_text_start</span><span class=\"p\">)(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DW_EH_PE_datarel</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">get_data_start</span><span class=\"p\">)(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(()),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">encoding</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">DW_EH_PE_indirect</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276182480,
        "sender_full_name": "Gankra",
        "timestamp": 1647953151
    },
    {
        "content": "<p>(at the very end the cast the usize they've constructed to a pointer and read another usize out of it)</p>",
        "id": 276182602,
        "sender_full_name": "Gankra",
        "timestamp": 1647953195
    },
    {
        "content": "<p>this whole file needs a rejig, unfortunately</p>",
        "id": 276184549,
        "sender_full_name": "Gankra",
        "timestamp": 1647954117
    },
    {
        "content": "<p>The eh_personality function needs to be working outside of the regular pointer provenance rules anyway. The compiler trusts that it behaves in  accordance with the generated unwind tables. If it doesn't you get UB.</p>",
        "id": 276186207,
        "sender_full_name": "bjorn3",
        "timestamp": 1647954890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> hmm could you elaborate on that?</p>",
        "id": 276186265,
        "sender_full_name": "Gankra",
        "timestamp": 1647954920
    },
    {
        "content": "<p>that sounds plausible but i'm still waking up, and this is definitely an Interesting Case Study to say the least</p>",
        "id": 276186310,
        "sender_full_name": "Gankra",
        "timestamp": 1647954948
    },
    {
        "content": "<p>Normally you aren't allowed to read or write anything on the stack except when you have taken a pointer to it. The personality function (and the unwinding mechanism in general) reads and writes parts of the stack that contain eg spilled values. This is only allowed because the unwind tables specify exactly what the unwinding mechanism should do. Any deviation from this (eg writing some other value than told to) causes UB.</p>",
        "id": 276186723,
        "sender_full_name": "bjorn3",
        "timestamp": 1647955133
    },
    {
        "content": "<p>ok so in terms of a strict model this would be given provenance over ~the whole stack anyway</p>",
        "id": 276186845,
        "sender_full_name": "Gankra",
        "timestamp": 1647955191
    },
    {
        "content": "<p>so this is basically fine on the premise that the compiler <em>generated</em> this unwinding table, so it \"knows\" exactly what it will do already, but the runtime needs to remember what that is..?</p>",
        "id": 276187319,
        "sender_full_name": "Gankra",
        "timestamp": 1647955406
    },
    {
        "content": "<p>HMMM</p>",
        "id": 276187321,
        "sender_full_name": "Gankra",
        "timestamp": 1647955408
    },
    {
        "content": "<p>pretty much. if you follow the unwinding table generated by the compiler to the letter everything is fine. if you don't follow it, arbitrary bad things happen.</p>",
        "id": 276187559,
        "sender_full_name": "bjorn3",
        "timestamp": 1647955525
    },
    {
        "content": "<p>i should look into how CHERI expects a binary to establish this kind of chain of custody</p>",
        "id": 276187825,
        "sender_full_name": "Gankra",
        "timestamp": 1647955645
    },
    {
        "content": "<p>so it turns out that there's calls of that function that don't need the full capability lol</p>",
        "id": 276194204,
        "sender_full_name": "eddyb",
        "timestamp": 1647958351
    },
    {
        "content": "<p>specifically the \"call site encoding\" can only have two values:</p>\n<ol>\n<li>GCC: <a href=\"https://github.com/gcc-mirror/gcc/blob/373a2dc2be0089ae59b61202a6023458aaaf63d8/gcc/except.cc#L3118-L3122\">https://github.com/gcc-mirror/gcc/blob/373a2dc2be0089ae59b61202a6023458aaaf63d8/gcc/except.cc#L3118-L3122</a></li>\n<li>LLVM: <a href=\"https://github.com/llvm/llvm-project/blob/2ef95efb414e215490a222de05cafdffb8054758/llvm/lib/Target/TargetLoweringObjectFile.cpp#L50-L65\">https://github.com/llvm/llvm-project/blob/2ef95efb414e215490a222de05cafdffb8054758/llvm/lib/Target/TargetLoweringObjectFile.cpp#L50-L65</a><br>\n(there's also <code>CallSiteEncoding = dwarf::DW_EH_PE_udata4;</code> in <a href=\"https://github.com/llvm/llvm-project/blob/2ef95efb414e215490a222de05cafdffb8054758/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp\">https://github.com/llvm/llvm-project/blob/2ef95efb414e215490a222de05cafdffb8054758/llvm/lib/CodeGen/TargetLoweringObjectFileImpl.cpp</a>)</li>\n</ol>",
        "id": 276194421,
        "sender_full_name": "eddyb",
        "timestamp": 1647958447
    },
    {
        "content": "<p>so we could safely have a much more limited version that produces <code>Err</code> on anything other than integer encodings, for these 3 calls <a href=\"https://github.com/rust-lang/rust/blob/3ea44938e21f0de8ae7d4f6399a8a30f97867c70/library/panic_unwind/src/dwarf/eh.rs#L83-L85\">https://github.com/rust-lang/rust/blob/3ea44938e21f0de8ae7d4f6399a8a30f97867c70/library/panic_unwind/src/dwarf/eh.rs#L83-L85</a></p>",
        "id": 276194596,
        "sender_full_name": "eddyb",
        "timestamp": 1647958543
    },
    {
        "content": "<p>and then a lot of that file needs s/<code>usize</code>/<code>*mut u8</code>/ or thereabouts</p>",
        "id": 276194691,
        "sender_full_name": "eddyb",
        "timestamp": 1647958572
    },
    {
        "content": "<p>(fwiw the seh file also looks messy, but I didn't even bother since dwarf broke my spirit lol)</p>",
        "id": 276194806,
        "sender_full_name": "Gankra",
        "timestamp": 1647958626
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> but e.g. <code>DW_EH_PE_textrel</code> and <code>DW_EH_PE_datarel</code> should have their own separate pointer offsetting and whatnot, because those two could/should be isolated under CHERI</p>",
        "id": 276194841,
        "sender_full_name": "eddyb",
        "timestamp": 1647958639
    },
    {
        "content": "<p>for almost anything there's a clear chain of custody, and when there isn't, it looks an awful lot like \"CHERI would have a relocation so that the value is actually a valid pointer in memory\" (tho I guess DWARF doesn't want actual relocations in the debuginfo/EH sections? not sure)</p>",
        "id": 276195013,
        "sender_full_name": "eddyb",
        "timestamp": 1647958713
    },
    {
        "content": "<p>the best information I could find on <code>DW_EH_PE_indirect</code> is that it's used to encode a \"RTTI is a <code>static</code> accessible through this GOT\", which means that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">encoding</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">DW_EH_PE_indirect</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>should instead be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">encoding</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">DW_EH_PE_indirect</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(with <code>result</code> being <code>*const u8</code> instead of <code>usize</code>, at that point)</p>\n<p>That is, IIUC, GOT under CHERI would contain actual valid CHERI pointers (\"capabilities\"), <em>not</em> addresses</p>",
        "id": 276195377,
        "sender_full_name": "eddyb",
        "timestamp": 1647958861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> the worst part about this LSDA stuff is that GCC just made up an encoding and LLVM reimplemented it, but in neither case there's no actual strict spec AFAICT, and out of sheer laziness, existing unwinders (including this Rust code) support nonsensical situations</p>",
        "id": 276195696,
        "sender_full_name": "eddyb",
        "timestamp": 1647958974
    },
    {
        "content": "<p>up to 30/36 crates, just hit 33 cases in sys, not looking forward to that... break time...</p>",
        "id": 276196004,
        "sender_full_name": "Gankra",
        "timestamp": 1647959115
    },
    {
        "content": "<p>I think DWARF allows relocations in <code>.eh_frame</code> the linker output. It just needs the dynamic linker to perform them before the unwinder runs.</p>",
        "id": 276196013,
        "sender_full_name": "bjorn3",
        "timestamp": 1647959120
    },
    {
        "content": "<p>I guess that means using a large enough encoding to allow relocating, no ULEB128 shenans</p>",
        "id": 276196129,
        "sender_full_name": "eddyb",
        "timestamp": 1647959162
    },
    {
        "content": "<p>forked the <code>dwarf::eh</code> discussion into <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20in.20dwarf.3A.3Aeh\">https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20in.20dwarf.3A.3Aeh</a> because I left some notes there if anyone wants to clean up the implementation to be CHERI-friendly</p>",
        "id": 276198413,
        "sender_full_name": "eddyb",
        "timestamp": 1647960097
    },
    {
        "content": "<p>this thread would make for a great blog post as a case study in the difficulty of transitioning away from int-ptr casts in practice</p>",
        "id": 276198724,
        "sender_full_name": "bstrie",
        "timestamp": 1647960227
    },
    {
        "content": "<p>that is the point yes</p>",
        "id": 276208733,
        "sender_full_name": "Gankra",
        "timestamp": 1647963837
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">keyed_event_handle</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">c</span>::<span class=\"n\">HANDLE</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">INVALID</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">HANDLE</span>: <span class=\"nc\">AtomicUsize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AtomicUsize</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">INVALID</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">HANDLE</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">Relaxed</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">INVALID</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span>::<span class=\"n\">INVALID_HANDLE_VALUE</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">c</span>::<span class=\"n\">NtCreateKeyedEvent</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">c</span>::<span class=\"n\">GENERIC_READ</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">c</span>::<span class=\"n\">GENERIC_WRITE</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ptr</span>::<span class=\"n\">null_mut</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">c</span>::<span class=\"n\">STATUS_SUCCESS</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"Unable to create keyed event handle: error {r}\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">HANDLE</span><span class=\"p\">.</span><span class=\"n\">compare_exchange</span><span class=\"p\">(</span><span class=\"n\">INVALID</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Relaxed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Relaxed</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// Lost the race to another thread initializing HANDLE before we did.</span>\n<span class=\"w\">                    </span><span class=\"c1\">// Closing our handle and using theirs instead.</span>\n<span class=\"w\">                    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">c</span>::<span class=\"n\">CloseHandle</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">h</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">c</span>::<span class=\"n\">HANDLE</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">c</span>::<span class=\"n\">HANDLE</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276219431,
        "sender_full_name": "Gankra",
        "timestamp": 1647967776
    },
    {
        "content": "<p>windowsssss</p>",
        "id": 276219438,
        "sender_full_name": "Gankra",
        "timestamp": 1647967779
    },
    {
        "content": "<p>HANDLE is only sort of a pointer. It's not something anyone ever dereferences, I believe.</p>",
        "id": 276221271,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1647968505
    },
    {
        "content": "<p>yeah this code is actually pretty easy to swap out with AtomicPtr and stuff, afaict</p>",
        "id": 276221594,
        "sender_full_name": "Gankra",
        "timestamp": 1647968627
    },
    {
        "content": "<p>lol windows/os.rs just has <code>ch as usize == 0</code></p>",
        "id": 276221835,
        "sender_full_name": "Gankra",
        "timestamp": 1647968704
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">security_attributes</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// FIXME: should be a reference</span>\n</code></pre></div>",
        "id": 276222097,
        "sender_full_name": "Gankra",
        "timestamp": 1647968793
    },
    {
        "content": "<p>whelp that deserve a git blame</p>",
        "id": 276222118,
        "sender_full_name": "Gankra",
        "timestamp": 1647968798
    },
    {
        "content": "<p>nooooo</p>",
        "id": 276223117,
        "sender_full_name": "Gankra",
        "timestamp": 1647969177
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/ae30294771e3c5c65a2d70be0e09b5bec2490c66\">https://github.com/rust-lang/rust/commit/ae30294771e3c5c65a2d70be0e09b5bec2490c66</a></p>",
        "id": 276223120,
        "sender_full_name": "Gankra",
        "timestamp": 1647969178
    },
    {
        "content": "<p>rather than an <code>impl</code> Sync they just made the pointer a usize???????????</p>",
        "id": 276223167,
        "sender_full_name": "Gankra",
        "timestamp": 1647969198
    },
    {
        "content": "<p>no?????</p>",
        "id": 276223172,
        "sender_full_name": "Gankra",
        "timestamp": 1647969200
    },
    {
        "content": "<p>raw ptr behavior wrt auto traits is really suboptimal. best idea I have is they should make it <em>ambiguous</em> whether <code>Send</code>/<code>Sync</code> are implemented, and force you to explicitly say which is the case (cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>: IMO auto traits should use ternary logic :P)</p>",
        "id": 276223815,
        "sender_full_name": "eddyb",
        "timestamp": 1647969504
    },
    {
        "content": "<p>y-yeah that's called unsafe impl eddyb</p>",
        "id": 276223898,
        "sender_full_name": "Gankra",
        "timestamp": 1647969543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> comment from the PR that did it: \"Maybe it is better to remove the pointer for now, as the function to set also removed.\"</p>",
        "id": 276223922,
        "sender_full_name": "bstrie",
        "timestamp": 1647969551
    },
    {
        "content": "<p>The classic permanent temporary solution</p>",
        "id": 276223968,
        "sender_full_name": "bstrie",
        "timestamp": 1647969572
    },
    {
        "content": "<p>there's not a problem???</p>",
        "id": 276223988,
        "sender_full_name": "Gankra",
        "timestamp": 1647969579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276223898\">said</a>:</p>\n<blockquote>\n<p>y-yeah that's called unsafe impl eddyb</p>\n</blockquote>\n<p>no, that's risky in case a new field could be added that is <em>definitely</em> <code>!Send</code>/<code>!Sync</code> (like an <code>Rc</code>)</p>",
        "id": 276223990,
        "sender_full_name": "eddyb",
        "timestamp": 1647969581
    },
    {
        "content": "<p>wheres raw pointers are just \"sus idk\"</p>",
        "id": 276224014,
        "sender_full_name": "eddyb",
        "timestamp": 1647969594
    },
    {
        "content": "<p><em>I guess</em></p>",
        "id": 276224084,
        "sender_full_name": "Gankra",
        "timestamp": 1647969608
    },
    {
        "content": "<p>I maintain unsafe impl is just Right here</p>",
        "id": 276224103,
        "sender_full_name": "Gankra",
        "timestamp": 1647969618
    },
    {
        "content": "<p>I would want a non-<code>unsafe</code> version of <code>impl Send for Foo</code> that doesn't allow fields that are <code>!Send</code> <em>on purpose</em></p>",
        "id": 276224178,
        "sender_full_name": "eddyb",
        "timestamp": 1647969653
    },
    {
        "content": "<p>there are many solutions but this is like, the Worst one lol</p>",
        "id": 276224467,
        "sender_full_name": "Gankra",
        "timestamp": 1647969760
    },
    {
        "content": "<p>like newtyping the pointer would be just as much work as what they did</p>",
        "id": 276224536,
        "sender_full_name": "Gankra",
        "timestamp": 1647969787
    },
    {
        "content": "<p>oh definitely agreed heh. I would make an <code>unsafe impl Send + Sync</code> wrapper for that pointer if that was necessary - oh you just said that heh</p>",
        "id": 276224561,
        "sender_full_name": "eddyb",
        "timestamp": 1647969801
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">align</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">align</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// SAFETY: `MIN_ALIGN` &lt;= `offset` &lt;= `layout.align()` and the size of the allocated</span>\n<span class=\"w\">        </span><span class=\"c1\">// block is `layout.align() + layout.size()`. `aligned` will thus be a correctly aligned</span>\n<span class=\"w\">        </span><span class=\"c1\">// pointer inside the allocated block with at least `layout.size()` bytes after it and at</span>\n<span class=\"w\">        </span><span class=\"c1\">// least `MIN_ALIGN` bytes of padding before it.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276224798,
        "sender_full_name": "Gankra",
        "timestamp": 1647969901
    },
    {
        "content": "<p>don't we just have APIs for this now</p>",
        "id": 276224810,
        "sender_full_name": "Gankra",
        "timestamp": 1647969907
    },
    {
        "content": "<p>oh no wait it's the evil one that goes to infinity isn't it</p>",
        "id": 276224868,
        "sender_full_name": "Gankra",
        "timestamp": 1647969931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276223167\">said</a>:</p>\n<blockquote>\n<p>rather than an <code>impl</code> Sync they just made the pointer a usize???????????</p>\n</blockquote>\n<p>It would be very cool to have a list of places this was done. <code>rayon</code> does the same thing.</p>",
        "id": 276225171,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1647970064
    },
    {
        "content": "<p>hell yes now for the real fun</p>",
        "id": 276227141,
        "sender_full_name": "Gankra",
        "timestamp": 1647970886
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// Swap out our state with however we finished.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state_and_queue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">state_and_queue</span><span class=\"p\">.</span><span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">set_state_on_drop_to</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ordering</span>::<span class=\"n\">AcqRel</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// We should only ever see an old state which was RUNNING.</span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">state_and_queue</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"n\">STATE_MASK</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RUNNING</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276227146,
        "sender_full_name": "Gankra",
        "timestamp": 1647970890
    },
    {
        "content": "<p>sync::once doing atomic tagged pointers</p>",
        "id": 276227158,
        "sender_full_name": "Gankra",
        "timestamp": 1647970898
    },
    {
        "content": "<p>STATE_MASK is 3 so, should be Fine</p>",
        "id": 276227235,
        "sender_full_name": "Gankra",
        "timestamp": 1647970923
    },
    {
        "content": "<p>love too noop</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mutex</span><span class=\"p\">.</span><span class=\"n\">raw</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">mutex_imp</span>::<span class=\"n\">Mutex</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">c_void</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276231921,
        "sender_full_name": "Gankra",
        "timestamp": 1647972693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276227158\">said</a>:</p>\n<blockquote>\n<p>sync::once doing atomic tagged pointers</p>\n</blockquote>\n<p>Do your changes include support for this? I had been meaning to try hacking in the bitops on AtomicPtr as an experiment, but had (perhaps falsely) concluded it would be a pain in the ass and require a bunch of compiler changes</p>",
        "id": 276233421,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1647973248
    },
    {
        "content": "<p>the API as-is works fine, all the tagging is non-atomic, it's just doing cmpxchg on the tagged ptrs</p>",
        "id": 276233750,
        "sender_full_name": "Gankra",
        "timestamp": 1647973388
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/gS8lU3rOsKFuTB4ui7nq_onR/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/gS8lU3rOsKFuTB4ui7nq_onR/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/gS8lU3rOsKFuTB4ui7nq_onR/image.png\"></a></div>",
        "id": 276233825,
        "sender_full_name": "Gankra",
        "timestamp": 1647973420
    },
    {
        "content": "<p>;-;</p>",
        "id": 276233842,
        "sender_full_name": "Gankra",
        "timestamp": 1647973426
    },
    {
        "content": "<p>std::io::error::repr_bitpacked is a Whole Thing</p>",
        "id": 276234505,
        "sender_full_name": "Gankra",
        "timestamp": 1647973688
    },
    {
        "content": "<p>oof, shift by <em>32</em></p>",
        "id": 276234586,
        "sender_full_name": "Gankra",
        "timestamp": 1647973727
    },
    {
        "content": "<p>oh thank god it's an implicit union, and not a pointer actually getting shifted by 32</p>",
        "id": 276234850,
        "sender_full_name": "Gankra",
        "timestamp": 1647973823
    },
    {
        "content": "<p>whoever wrote this is a GOOD BEAN</p>",
        "id": 276235125,
        "sender_full_name": "Gankra",
        "timestamp": 1647973931
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">custom</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">().</span><span class=\"n\">cast</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">wrapping_sub</span><span class=\"p\">(</span><span class=\"n\">TAG_CUSTOM</span><span class=\"p\">).</span><span class=\"n\">cast</span>::<span class=\"o\">&lt;</span><span class=\"n\">Custom</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276235133,
        "sender_full_name": "Gankra",
        "timestamp": 1647973934
    },
    {
        "content": "<p>already responsible</p>",
        "id": 276235139,
        "sender_full_name": "Gankra",
        "timestamp": 1647973937
    },
    {
        "content": "<p>Oh, I wrote that</p>",
        "id": 276235359,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1647974028
    },
    {
        "content": "<p>I was thinking about provenance when I wrote it, but yes, it is a whole thing.</p>",
        "id": 276235462,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1647974060
    },
    {
        "content": "<p><em>high fives</em></p>",
        "id": 276235577,
        "sender_full_name": "Gankra",
        "timestamp": 1647974128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276236484,
        "sender_full_name": "Gankra",
        "timestamp": 1647974486
    },
    {
        "content": "<p>...huh</p>",
        "id": 276236486,
        "sender_full_name": "Gankra",
        "timestamp": 1647974488
    },
    {
        "content": "<p>i guess?</p>",
        "id": 276236504,
        "sender_full_name": "Gankra",
        "timestamp": 1647974494
    },
    {
        "content": "<p>PAST STAGE 1</p>",
        "id": 276239038,
        "sender_full_name": "Gankra",
        "timestamp": 1647975640
    },
    {
        "content": "<p>I've been auditing transmutes in the standard library (and working on getting lints for transmutes and unions working). Lot's of transmutes to/from in docs and tests, but not that many in actual std.</p>\n<p>main one is in mpsc, also appears to be the AtomicUsize thing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Converts to an unsafe usize value. Useful for storing in a pipe's state</span>\n<span class=\"w\">    </span><span class=\"sd\">/// flag.</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">cast_to_usize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Converts from an unsafe usize value. Useful for retrieving a pipe's state</span>\n<span class=\"w\">    </span><span class=\"sd\">/// flag.</span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">cast_from_usize</span><span class=\"p\">(</span><span class=\"n\">signal_ptr</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">SignalToken</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">SignalToken</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inner</span>: <span class=\"nc\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">signal_ptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276239906,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647976032
    },
    {
        "content": "<p>good to know</p>",
        "id": 276240399,
        "sender_full_name": "Gankra",
        "timestamp": 1647976274
    },
    {
        "content": "<p>actually yeah there's transmute checks now, I suppose we should complain about transmuting this stuff too...?</p>",
        "id": 276240451,
        "sender_full_name": "Gankra",
        "timestamp": 1647976296
    },
    {
        "content": "<p>but harder to catch</p>",
        "id": 276240458,
        "sender_full_name": "Gankra",
        "timestamp": 1647976301
    },
    {
        "content": "<p>anyway, onto STAGE 2 where we start getting the compiler narcing on itself for being mean to pointers</p>",
        "id": 276240533,
        "sender_full_name": "Gankra",
        "timestamp": 1647976333
    },
    {
        "content": "<p>rustc_arena, unsurprisingly, our first stop</p>",
        "id": 276240554,
        "sender_full_name": "Gankra",
        "timestamp": 1647976350
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new_end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"p\">.</span><span class=\"n\">checked_sub</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">align</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>thanks rustc_arena</p>",
        "id": 276242346,
        "sender_full_name": "Gankra",
        "timestamp": 1647977247
    },
    {
        "content": "<p>oh i <em>hate</em> whatever rustc_data_structures thinks it's doing</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Pointer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BITS</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">trailing_zeros</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_usize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Box</span>::<span class=\"n\">into_raw</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from_usize</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Box</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">with_ref</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ManuallyDrop</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">Self</span>::<span class=\"n\">from_usize</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">raw</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276244016,
        "sender_full_name": "Gankra",
        "timestamp": 1647978054
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compiler</span><span class=\"err\">\\</span><span class=\"n\">rustc_middle</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">ty</span><span class=\"err\">\\</span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"mi\">200</span>:<span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">rustc_data_structures</span>::<span class=\"n\">tagged_ptr</span>::<span class=\"n\">Pointer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"n\">compiler</span><span class=\"err\">\\</span><span class=\"n\">rustc_data_structures</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">tagged_ptr</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"mi\">91</span>:<span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Pointer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">107</span>:<span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Pointer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">123</span>:<span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Pointer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Arc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">139</span>:<span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Pointer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"mi\">154</span>:<span class=\"nc\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Pointer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276245299,
        "sender_full_name": "Gankra",
        "timestamp": 1647978741
    },
    {
        "content": "<p>crimes</p>",
        "id": 276245302,
        "sender_full_name": "Gankra",
        "timestamp": 1647978743
    },
    {
        "content": "<p>pretty fried, pushed up my work so far.</p>",
        "id": 276249570,
        "sender_full_name": "Gankra",
        "timestamp": 1647980772
    },
    {
        "content": "<p>rustc has a bunch of tagged pointers</p>",
        "id": 276249577,
        "sender_full_name": "Gankra",
        "timestamp": 1647980778
    },
    {
        "content": "<p>hey rustc_interface what the actual fuck</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(unix)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">current_dll_path</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">PathBuf</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"p\">{</span><span class=\"n\">CStr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OsStr</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">os</span>::<span class=\"n\">unix</span>::<span class=\"n\">prelude</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">current_dll_path</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">zeroed</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">libc</span>::<span class=\"n\">dladdr</span><span class=\"p\">(</span><span class=\"n\">addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">info</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"dladdr failed\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">.</span><span class=\"n\">dli_fname</span><span class=\"p\">.</span><span class=\"n\">is_null</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">info</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"dladdr returned null pointer\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CStr</span>::<span class=\"n\">from_ptr</span><span class=\"p\">(</span><span class=\"n\">info</span><span class=\"p\">.</span><span class=\"n\">dli_fname</span><span class=\"p\">).</span><span class=\"n\">to_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OsStr</span>::<span class=\"n\">from_bytes</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">PathBuf</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276268621,
        "sender_full_name": "Gankra",
        "timestamp": 1647991835
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">current_dll_path</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276268636,
        "sender_full_name": "Gankra",
        "timestamp": 1647991851
    },
    {
        "content": "<p><em>that's its own symbol</em></p>",
        "id": 276268642,
        "sender_full_name": "Gankra",
        "timestamp": 1647991858
    },
    {
        "content": "<p>it casts itself to a pointer........</p>",
        "id": 276268660,
        "sender_full_name": "Gankra",
        "timestamp": 1647991869
    },
    {
        "content": "<p>I see you've never worked with some <em>fun</em> platfrom APIs.</p>",
        "id": 276269240,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647992349
    },
    {
        "content": "<p>like i get the idea it's just a real double-take moment</p>",
        "id": 276269274,
        "sender_full_name": "Gankra",
        "timestamp": 1647992385
    },
    {
        "content": "<p>also the random as usize along the way is HMM</p>",
        "id": 276269353,
        "sender_full_name": "Gankra",
        "timestamp": 1647992437
    },
    {
        "content": "<p>unless is doing The AVR Hack</p>",
        "id": 276269363,
        "sender_full_name": "Gankra",
        "timestamp": 1647992452
    },
    {
        "content": "<p>But I doubt that?</p>",
        "id": 276269366,
        "sender_full_name": "Gankra",
        "timestamp": 1647992456
    },
    {
        "content": "<p>Probably the result of being unable to directly cast without going through the fn(...) -&gt; ... dance</p>",
        "id": 276269447,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1647992526
    },
    {
        "content": "<p>got stage2 built my marking a bunch of files in rustc as WONTFIX (for now, eddyb is looking at some of the most eggregious stuff)</p>",
        "id": 276271366,
        "sender_full_name": "Gankra",
        "timestamp": 1647993995
    },
    {
        "content": "<p>now figuring out what linux needs for std</p>",
        "id": 276271380,
        "sender_full_name": "Gankra",
        "timestamp": 1647994008
    },
    {
        "content": "<p>ha, gcc unwinder casts to uintptr_t: <a href=\"https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/library/panic_unwind/src/gcc.rs#L199\">https://github.com/rust-lang/rust/blob/5f37001055c29982f4c27ee9edd90449c8e07774/library/panic_unwind/src/gcc.rs#L199</a></p>",
        "id": 276272398,
        "sender_full_name": "Gankra",
        "timestamp": 1647994796
    },
    {
        "content": "<p>DlsymWeak just casually pulls out <em>transmute_copy</em> to convert a usize to a function pointer, you know, as you do.</p>",
        "id": 276273284,
        "sender_full_name": "Gankra",
        "timestamp": 1647995185
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute_copy</span>::<span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">addr</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276273298,
        "sender_full_name": "Gankra",
        "timestamp": 1647995190
    },
    {
        "content": "<p>I think the issue is the code is generic over all function pointer signatures but you can't... say... that...?</p>",
        "id": 276273348,
        "sender_full_name": "Gankra",
        "timestamp": 1647995211
    },
    {
        "content": "<p>you could write some trait for like 10 different argument counts and still wouldn't be able to handle for&lt;'a&gt;, correct</p>",
        "id": 276273724,
        "sender_full_name": "Talchas",
        "timestamp": 1647995387
    },
    {
        "content": "<p>for regular function pointers you could do <code>F: Fn&lt;Args&gt;</code> to add a little type-safety but you still wouldn't be able to do a <code>transmute</code></p>",
        "id": 276273887,
        "sender_full_name": "Talchas",
        "timestamp": 1647995460
    },
    {
        "content": "<p>agreed</p>",
        "id": 276273924,
        "sender_full_name": "Gankra",
        "timestamp": 1647995477
    },
    {
        "content": "<p>I think this code is \"\"\"fine\"\"\" if I make it use AtomicPtr instead of AtomicUsize</p>",
        "id": 276274029,
        "sender_full_name": "Gankra",
        "timestamp": 1647995526
    },
    {
        "content": "<p>the two-special-case match is a little uglier, but yeah</p>",
        "id": 276274178,
        "sender_full_name": "Talchas",
        "timestamp": 1647995601
    },
    {
        "content": "<p>no matter what it's relying on ptr == fnptr, but that's literally the dlsym API so</p>",
        "id": 276274192,
        "sender_full_name": "Talchas",
        "timestamp": 1647995619
    },
    {
        "content": "<p>that AVR thing in ptr has me super paranoid now lol</p>",
        "id": 276274546,
        "sender_full_name": "Gankra",
        "timestamp": 1647995769
    },
    {
        "content": "<p>unix thread code doing a lot of intptr stuff just to hack in <code>offset</code> on a c_void</p>",
        "id": 276276882,
        "sender_full_name": "Gankra",
        "timestamp": 1647997000
    },
    {
        "content": "<p>I'm replacing it with with_addr, because it's a bit less verbose than going to *mut u8 and back</p>",
        "id": 276276911,
        "sender_full_name": "Gankra",
        "timestamp": 1647997025
    },
    {
        "content": "<p>(and less disruptive)</p>",
        "id": 276276912,
        "sender_full_name": "Gankra",
        "timestamp": 1647997034
    },
    {
        "content": "<p>hmm unix::process....</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">want_clone3_pidfd</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">HAS_CLONE3</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">Ordering</span>::<span class=\"n\">Relaxed</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">clone_args</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">flags</span>: <span class=\"nc\">CLONE_PIDFD</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">pidfd</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">pidfd</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">pid_t</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">child_tid</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">parent_tid</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">exit_signal</span>: <span class=\"nc\">libc</span>::<span class=\"n\">SIGCHLD</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">stack</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">stack_size</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">tls</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">set_tid</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">set_tid_size</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">cgroup</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276277329,
        "sender_full_name": "Gankra",
        "timestamp": 1647997335
    },
    {
        "content": "<p><code>pidfd: &amp;mut pidfd as *mut pid_t as u64,</code></p>",
        "id": 276277337,
        "sender_full_name": "Gankra",
        "timestamp": 1647997351
    },
    {
        "content": "<p>second encounter with \"C ABI mandates integer\"</p>",
        "id": 276277369,
        "sender_full_name": "Talchas",
        "timestamp": 1647997396
    },
    {
        "content": "<p>in this case I suspect it's forcing a consistent size for x32</p>",
        "id": 276277375,
        "sender_full_name": "Talchas",
        "timestamp": 1647997412
    },
    {
        "content": "<p>addr() as u64 should work the same afaict</p>",
        "id": 276277397,
        "sender_full_name": "Gankra",
        "timestamp": 1647997430
    },
    {
        "content": "<p>I mean, the C is casting it back to a pointer and writing to it</p>",
        "id": 276277469,
        "sender_full_name": "Talchas",
        "timestamp": 1647997483
    },
    {
        "content": "<p>so it needs to be usable as a pointer</p>",
        "id": 276277504,
        "sender_full_name": "Talchas",
        "timestamp": 1647997523
    },
    {
        "content": "<p>hmm fair</p>",
        "id": 276277516,
        "sender_full_name": "Gankra",
        "timestamp": 1647997542
    },
    {
        "content": "<p>gonna mark this one WONTFIX for now</p>",
        "id": 276277693,
        "sender_full_name": "Gankra",
        "timestamp": 1647997724
    },
    {
        "content": "<p><a href=\"http://stack_overflow.rs\">stack_overflow.rs</a> has the same problem but sighandler_t == size_t</p>",
        "id": 276278296,
        "sender_full_name": "Gankra",
        "timestamp": 1647998463
    },
    {
        "content": "<p>same for PR_SET_NAME</p>",
        "id": 276278332,
        "sender_full_name": "Gankra",
        "timestamp": 1647998509
    },
    {
        "content": "<p>this time libc_ulong</p>",
        "id": 276278388,
        "sender_full_name": "Gankra",
        "timestamp": 1647998544
    },
    {
        "content": "<blockquote>\n<p>test result: FAILED. 12555 passed; 89 failed; 106 ignored; 0 measured; 0 filtered out; finished in 117.40s</p>\n</blockquote>",
        "id": 276279693,
        "sender_full_name": "Gankra",
        "timestamp": 1648000048
    },
    {
        "content": "<p>nice.</p>",
        "id": 276280202,
        "sender_full_name": "Jubilee",
        "timestamp": 1648000676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> am I just... allowed... to land these buckwild APIs???</p>",
        "id": 276281526,
        "sender_full_name": "Gankra",
        "timestamp": 1648002345
    },
    {
        "content": "<p>i feel like this kind of thing needs an rfc maybe</p>",
        "id": 276281745,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648002565
    },
    {
        "content": "<p>at least the fact that it comes with a future-compat lint</p>",
        "id": 276281756,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648002576
    },
    {
        "content": "<p>this is specifically in the context of just like .addr() and stuff so submodules can use it</p>",
        "id": 276281815,
        "sender_full_name": "Gankra",
        "timestamp": 1648002630
    },
    {
        "content": "<p>right not stdarch is sad because of a debug_assert</p>",
        "id": 276281830,
        "sender_full_name": "Gankra",
        "timestamp": 1648002646
    },
    {
        "content": "<p>Yeah, the lint can't land with the fn, but yes, the functions per se can simply be PRed as a library feature and they will fall under the purview of a T-libs signoff, but I feel the motivation is obvious.</p>",
        "id": 276281834,
        "sender_full_name": "Jubilee",
        "timestamp": 1648002649
    },
    {
        "content": "<p>I guess we could just, remove the debug_assert</p>",
        "id": 276281835,
        "sender_full_name": "Gankra",
        "timestamp": 1648002654
    },
    {
        "content": "<p>I was <em>intending</em> for this to just be a hacky ball that people run off with to do miri experiments on</p>",
        "id": 276281861,
        "sender_full_name": "Gankra",
        "timestamp": 1648002688
    },
    {
        "content": "<p>but I guess if I can just, add some APIs, sure, I guess?</p>",
        "id": 276281867,
        "sender_full_name": "Gankra",
        "timestamp": 1648002699
    },
    {
        "content": "<p>unstable ofc.</p>",
        "id": 276281871,
        "sender_full_name": "Jubilee",
        "timestamp": 1648002707
    },
    {
        "content": "<p>well yeah</p>",
        "id": 276281874,
        "sender_full_name": "Gankra",
        "timestamp": 1648002711
    },
    {
        "content": "<p>is it fine to const-stable an unstable API?</p>",
        "id": 276281924,
        "sender_full_name": "Gankra",
        "timestamp": 1648002727
    },
    {
        "content": "<p>i assume so?</p>",
        "id": 276281925,
        "sender_full_name": "Gankra",
        "timestamp": 1648002731
    },
    {
        "content": "<p>(nothing complains)</p>",
        "id": 276281929,
        "sender_full_name": "Gankra",
        "timestamp": 1648002739
    },
    {
        "content": "<p>If we did add the lint to the compiler I would hide it behind a -Z flag</p>",
        "id": 276281949,
        "sender_full_name": "Gankra",
        "timestamp": 1648002765
    },
    {
        "content": "<p>Yeah, I think so.</p>",
        "id": 276282048,
        "sender_full_name": "Jubilee",
        "timestamp": 1648002850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> We can just land <code>addr</code> and <code>with_addr</code>, right?</p>",
        "id": 276282061,
        "sender_full_name": "Jubilee",
        "timestamp": 1648002873
    },
    {
        "content": "<p>Might be worth tossing in map_addr if we're letting people actually mess around with them so they can tell us if one is better or not</p>",
        "id": 276282109,
        "sender_full_name": "Gankra",
        "timestamp": 1648002931
    },
    {
        "content": "<p>Yeah. :3</p>",
        "id": 276282430,
        "sender_full_name": "Jubilee",
        "timestamp": 1648003300
    },
    {
        "content": "<p>if we wanted to let people mess around with this it would be desirable to land:</p>\n<ul>\n<li>ptr.addr()</li>\n<li>ptr.with_addr()</li>\n<li>? ptr.map_addr()</li>\n<li>ptr::invalid</li>\n<li>ptr::invalid_mut</li>\n</ul>",
        "id": 276282492,
        "sender_full_name": "Gankra",
        "timestamp": 1648003379
    },
    {
        "content": "<p>fake_alloc and exists_zst are more me fucking around</p>",
        "id": 276282499,
        "sender_full_name": "Gankra",
        "timestamp": 1648003396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> do you want me to undo all the places where I use these APIs in the PR for them?</p>",
        "id": 276282562,
        "sender_full_name": "Gankra",
        "timestamp": 1648003468
    },
    {
        "content": "<p>Hmmmmmm, probably not unless it's really convoluted?</p>",
        "id": 276282669,
        "sender_full_name": "Jubilee",
        "timestamp": 1648003601
    },
    {
        "content": "<p>\"it depends\"</p>",
        "id": 276282678,
        "sender_full_name": "Gankra",
        "timestamp": 1648003621
    },
    {
        "content": "<p>Haha.</p>",
        "id": 276282687,
        "sender_full_name": "Jubilee",
        "timestamp": 1648003632
    },
    {
        "content": "<p>it's like 80% as -&gt; addr()<br>\n15% AtomicUsize -&gt; AtomicPtr</p>",
        "id": 276282688,
        "sender_full_name": "Gankra",
        "timestamp": 1648003643
    },
    {
        "content": "<p>Yeah I'd carve out the 15% then.</p>",
        "id": 276282698,
        "sender_full_name": "Jubilee",
        "timestamp": 1648003661
    },
    {
        "content": "<p>Since that isn't new API surface.</p>",
        "id": 276282746,
        "sender_full_name": "Jubilee",
        "timestamp": 1648003684
    },
    {
        "content": "<p>mm fair enough</p>",
        "id": 276282779,
        "sender_full_name": "Gankra",
        "timestamp": 1648003747
    },
    {
        "content": "<p>i'll think about how to untangle this into a palattable form tomorrow</p>",
        "id": 276282789,
        "sender_full_name": "Gankra",
        "timestamp": 1648003764
    },
    {
        "content": "<p>push latest?</p>",
        "id": 276282900,
        "sender_full_name": "Jubilee",
        "timestamp": 1648003891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276282900\">said</a>:</p>\n<blockquote>\n<p>push latest?</p>\n</blockquote>\n<p>what do you mean?</p>",
        "id": 276283139,
        "sender_full_name": "Gankra",
        "timestamp": 1648004168
    },
    {
        "content": "<p>oh was just a request in case you had any other changes on local</p>",
        "id": 276283151,
        "sender_full_name": "Jubilee",
        "timestamp": 1648004196
    },
    {
        "content": "<p>no i pushed it up, and also set the lint to Allow so the dependency \"isn't\" an issue</p>",
        "id": 276283169,
        "sender_full_name": "Gankra",
        "timestamp": 1648004233
    },
    {
        "content": "<p>aha.</p>",
        "id": 276283171,
        "sender_full_name": "Jubilee",
        "timestamp": 1648004238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276282492\">said</a>:</p>\n<blockquote>\n<p>if we wanted to let people mess around with this it would be desirable to land:</p>\n<ul>\n<li>ptr.addr()</li>\n<li>ptr.with_addr()</li>\n<li>? ptr.map_addr()</li>\n<li>ptr::invalid</li>\n<li>ptr::invalid_mut</li>\n</ul>\n</blockquote>\n<p>which of these is the equivalent of like, <code>0x0400_0000 as *mut u16</code></p>",
        "id": 276284768,
        "sender_full_name": "Lokathor",
        "timestamp": 1648006237
    },
    {
        "content": "<p>is that a sentinel value or a MMIO stuff?</p>",
        "id": 276284859,
        "sender_full_name": "Gankra",
        "timestamp": 1648006387
    },
    {
        "content": "<p>mmio stuff</p>",
        "id": 276284870,
        "sender_full_name": "Lokathor",
        "timestamp": 1648006420
    },
    {
        "content": "<p>fake_alloc which I'm not including in the first mvp, way too \"i'm making shit up now\"</p>",
        "id": 276284881,
        "sender_full_name": "Gankra",
        "timestamp": 1648006442
    },
    {
        "content": "<p>:(</p>",
        "id": 276284916,
        "sender_full_name": "Lokathor",
        "timestamp": 1648006456
    },
    {
        "content": "<p>the mvp will not be enforced, it will be opt-in semantics that e.g. std will use to work better under miri initially</p>",
        "id": 276284922,
        "sender_full_name": "Gankra",
        "timestamp": 1648006473
    },
    {
        "content": "<p>(fake_alloc would just be <code>as usize</code> in the mvp anyway)</p>",
        "id": 276284938,
        "sender_full_name": "Gankra",
        "timestamp": 1648006512
    },
    {
        "content": "<p>the <code>voladdress</code> crate is basically entirely \"i'll do your usize math for you and then turn it into a pointer and MMIO on it at the last moment\"</p>",
        "id": 276284942,
        "sender_full_name": "Lokathor",
        "timestamp": 1648006536
    },
    {
        "content": "<p><em>nods</em></p>",
        "id": 276284944,
        "sender_full_name": "Gankra",
        "timestamp": 1648006547
    },
    {
        "content": "<p>we'll get to figuring that stuff out</p>",
        "id": 276284946,
        "sender_full_name": "Gankra",
        "timestamp": 1648006554
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/95228\">https://github.com/rust-lang/rust/issues/95228</a></p>",
        "id": 276285097,
        "sender_full_name": "Gankra",
        "timestamp": 1648006769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> Excised the lint and AtomicPtr changes, now in <a href=\"https://github.com/rust-lang/rust/pull/95229\">https://github.com/rust-lang/rust/pull/95229</a> for you to loot.</p>",
        "id": 276286715,
        "sender_full_name": "Jubilee",
        "timestamp": 1648008981
    },
    {
        "content": "<p>Correction, now it's properly excised. Missed a spot.</p>",
        "id": 276287765,
        "sender_full_name": "Jubilee",
        "timestamp": 1648010480
    },
    {
        "content": "<p>oh wow, thanks!</p>",
        "id": 276289413,
        "sender_full_name": "Gankra",
        "timestamp": 1648012245
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276282061\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> We can just land <code>addr</code> and <code>with_addr</code>, right?</p>\n</blockquote>\n<p>I don't see a fundamental reason we couldn't land those on nightly. I wouldn't want to see them <em>stabilized</em> without consensus on the solution they're a part of, but for experimentation sure.</p>",
        "id": 276290956,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1648014029
    },
    {
        "content": "<p><em>nods</em></p>",
        "id": 276291092,
        "sender_full_name": "Jubilee",
        "timestamp": 1648014231
    },
    {
        "content": "<p>lol git</p>",
        "id": 276292178,
        "sender_full_name": "Jubilee",
        "timestamp": 1648015594
    },
    {
        "content": "<p>\"these things that don't conflict at all actually conflict!\"</p>",
        "id": 276292181,
        "sender_full_name": "Jubilee",
        "timestamp": 1648015605
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276274546\">said</a>:</p>\n<blockquote>\n<p>that AVR thing in ptr has me super paranoid now lol</p>\n</blockquote>\n<p>eh I don't think we support any UNIX platform with the Harvard code/data split :P</p>",
        "id": 276315783,
        "sender_full_name": "eddyb",
        "timestamp": 1648032953
    },
    {
        "content": "<p>we may need to add an unstable <code>cfg</code> tho, to actually check for it</p>",
        "id": 276315861,
        "sender_full_name": "eddyb",
        "timestamp": 1648032982
    },
    {
        "content": "<p>like <code>#[cfg(target_has_unified_code_and_data_addrspace)]</code> or something</p>",
        "id": 276315968,
        "sender_full_name": "eddyb",
        "timestamp": 1648033064
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276284942\">said</a>:</p>\n<blockquote>\n<p>the <code>voladdress</code> crate is basically entirely \"i'll do your usize math for you and then turn it into a pointer and MMIO on it at the last moment\"</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> hah what if we... added a function to <code>std::arch</code> that only existed on embedded targets, and which was like <code>std::arch::mmio_ptr</code> :P?</p>",
        "id": 276316429,
        "sender_full_name": "eddyb",
        "timestamp": 1648033291
    },
    {
        "content": "<p>probably needs a better name, but, that's probably as best as we could manage without forcing people to synthesize them from a whole-address-space root at startup</p>",
        "id": 276316533,
        "sender_full_name": "eddyb",
        "timestamp": 1648033332
    },
    {
        "content": "<p>the idea being that you're opting into non-portable code, and it's unstable/unaccessible outside of the platforms deemed relevant</p>",
        "id": 276316709,
        "sender_full_name": "eddyb",
        "timestamp": 1648033442
    },
    {
        "content": "<p>BTW, <code>ptr::addr</code> cannot be made valid in a <code>const_fn</code>, but would still be useful in static initializers, which may be an argument for leaving it a primitive operation.</p>",
        "id": 276319084,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648034746
    },
    {
        "content": "<p>And I think <code>with_addr</code> might be a similar story.<br>\n<code>claim</code>/<code>unclaim</code>/<code>invalid</code>/<code>invalid_mut</code>/<code>mmio_ptr</code> I think could theoretically be, though.</p>",
        "id": 276319195,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648034792
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276315783\">said</a>:</p>\n<blockquote>\n<p>eh I don't think we support any UNIX platform with the Harvard code/data split :P</p>\n</blockquote>\n<p>does rust work on any non-unix harvard architectures??</p>",
        "id": 276321648,
        "sender_full_name": "bstrie",
        "timestamp": 1648036159
    },
    {
        "content": "<p>bstrie: <a href=\"https://github.com/avr-rust/rust-legacy-fork/issues/143\">https://github.com/avr-rust/rust-legacy-fork/issues/143</a></p>",
        "id": 276321757,
        "sender_full_name": "Gankra",
        "timestamp": 1648036237
    },
    {
        "content": "<p><a href=\"https://github.com/avr-rust/rust-legacy-fork/issues/143#issuecomment-500126585\">https://github.com/avr-rust/rust-legacy-fork/issues/143#issuecomment-500126585</a></p>",
        "id": 276321782,
        "sender_full_name": "Gankra",
        "timestamp": 1648036259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276284942\">said</a>:</p>\n<blockquote>\n<p>the <code>voladdress</code> crate is basically entirely \"i'll do your usize math for you and then turn it into a pointer and MMIO on it at the last moment\"</p>\n</blockquote>\n<p>so thinking about this more, I think tying this stuff explicitly to <code>volatile</code> might be the right play here. I am imagining rebranding <code>claim_alloc</code> as <code>claim_volatile</code> with roughly the contract of \"all accesses to this address must be volatile and you must have permission to access this address (so basically you're a kernel)\".</p>\n<p>With the rationale that any valid use of <code>volatile</code> is basically wholy irrelevant to any kind of memory model. Like nothing should ever be reordered or cached, and there is a magical oracle that is changing the memory beyond the compiler's view. Only relevant thing is like \"don't free this\" but if you have volatile freeable memory I am Concerned to say the least.</p>",
        "id": 276321990,
        "sender_full_name": "Gankra",
        "timestamp": 1648036400
    },
    {
        "content": "<p>Wasm is a harvard architecture.</p>",
        "id": 276322040,
        "sender_full_name": "bjorn3",
        "timestamp": 1648036435
    },
    {
        "content": "<p>but I Am Not A Language Lawyer</p>",
        "id": 276322092,
        "sender_full_name": "Gankra",
        "timestamp": 1648036444
    },
    {
        "content": "<p>my mind is blown that wasm is harvard. that's cool</p>",
        "id": 276322285,
        "sender_full_name": "bstrie",
        "timestamp": 1648036567
    },
    {
        "content": "<p>You can't put function references in the linear memory. You have to put them in a table of funcref elements and then store the index into this table in the linear memory.</p>",
        "id": 276322472,
        "sender_full_name": "bjorn3",
        "timestamp": 1648036702
    },
    {
        "content": "<p>There is no way to read the actual code of a function.</p>",
        "id": 276322500,
        "sender_full_name": "bjorn3",
        "timestamp": 1648036730
    },
    {
        "content": "<p>it would be really nice if Rust had \"void* but for function pointers\" to make this stuff easier</p>",
        "id": 276322512,
        "sender_full_name": "Gankra",
        "timestamp": 1648036744
    },
    {
        "content": "<p>\"is the size and representation of a function pointer; if you make an array of function pointers, this will offset through it; you can do address comparisons just fine\"</p>",
        "id": 276322630,
        "sender_full_name": "Gankra",
        "timestamp": 1648036816
    },
    {
        "content": "<p>josh was expanding core::ffi recently, feel free to make it and stick it in there under its own feature flag</p>",
        "id": 276322857,
        "sender_full_name": "bstrie",
        "timestamp": 1648036927
    },
    {
        "content": "<p>i think it genuinely needs compiler/lang support</p>",
        "id": 276323010,
        "sender_full_name": "Gankra",
        "timestamp": 1648037044
    },
    {
        "content": "<p>hmm I guess it could be a repr(transparent) wrapper around <code>fn() -&gt; ()</code> that we transmute to?</p>",
        "id": 276323045,
        "sender_full_name": "Gankra",
        "timestamp": 1648037087
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276321648\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276315783\">said</a>:</p>\n<blockquote>\n<p>eh I don't think we support any UNIX platform with the Harvard code/data split :P</p>\n</blockquote>\n<p>does rust work on any non-unix harvard platforms??</p>\n</blockquote>\n<p>AVR at least (and <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> mentioned wasm which I had forgotten about) but also I was just discussing last night with someone that for both MSP430 and x86_16 (the latter not being supported yet at all I don't think) you could theoretically do 32-bit code pointers while keeping 16-bit data pointers heh</p>",
        "id": 276326168,
        "sender_full_name": "eddyb",
        "timestamp": 1648038927
    },
    {
        "content": "<p>Yeah, real mode outside of <code>-mflat</code> can both have pointers in different address spaces (even with <code>-mnear</code>), but also different code and data sizes (both cases, <code>-mnear-data-far-fn</code> and <code>-mfar-data-near-fn</code>)</p>",
        "id": 276326418,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648039066
    },
    {
        "content": "<p>(heh yeah I was staring at <a href=\"https://en.wikipedia.org/wiki/Intel_Memory_Model#Memory_models\">https://en.wikipedia.org/wiki/Intel_Memory_Model#Memory_models</a> last night and it's surprisingly more sensible than I thought - in retrospect, you can't really go crazy with near pointers in a compiled language, only in assembly can you operate on \"the segments live in the programmer's mind/code comments\" principles, similar to banked memory, anything else would really want to get into dependent types or at least some kind of other static reasoning shenanigans)</p>",
        "id": 276326859,
        "sender_full_name": "eddyb",
        "timestamp": 1648039321
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276322512\">said</a>:</p>\n<blockquote>\n<p>it would be really nice if Rust had \"void* but for function pointers\" to make this stuff easier</p>\n</blockquote>\n<p><code>unsafe extern \"C\" fn(...) -&gt;</code> oh... right, you can't do the varargs thing for the return, Objective-C has this issue where it needs one <code>objc_msgSend</code> for every possible return ABI.... (integer, float, indirect return that goes into the first argument pointer, etc.)</p>",
        "id": 276327176,
        "sender_full_name": "eddyb",
        "timestamp": 1648039483
    },
    {
        "content": "<p>and I guess you'd want to hide the ABI as well</p>",
        "id": 276327213,
        "sender_full_name": "eddyb",
        "timestamp": 1648039503
    },
    {
        "content": "<p>an integer can be defined but I agree that something weirder would be nice</p>",
        "id": 276327231,
        "sender_full_name": "eddyb",
        "timestamp": 1648039517
    },
    {
        "content": "<p>also Harvard arches make me happy we didn't go the <code>&amp;'static Code</code> route for <code>fn</code> pointers, because now we can account for that somehow, instead of being stuck</p>",
        "id": 276327283,
        "sender_full_name": "eddyb",
        "timestamp": 1648039550
    },
    {
        "content": "<p>With <code>&amp;'static Code</code> we can check that the pointee is a function, right?</p>",
        "id": 276330754,
        "sender_full_name": "bjorn3",
        "timestamp": 1648041361
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/95241\">https://github.com/rust-lang/rust/pull/95241</a> &lt;--- actually mergeable PR</p>",
        "id": 276353021,
        "sender_full_name": "Gankra",
        "timestamp": 1648050275
    },
    {
        "content": "<p>yooo :D</p>",
        "id": 276359750,
        "sender_full_name": "Jubilee",
        "timestamp": 1648052467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> could you give me <code>try</code> perms?</p>",
        "id": 276360909,
        "sender_full_name": "Gankra",
        "timestamp": 1648052835
    },
    {
        "content": "<p>(for this pr)</p>",
        "id": 276360933,
        "sender_full_name": "Gankra",
        "timestamp": 1648052845
    },
    {
        "content": "<p>suresure.</p>",
        "id": 276361004,
        "sender_full_name": "Jubilee",
        "timestamp": 1648052865
    },
    {
        "content": "<p>hmmm, did that not work.</p>",
        "id": 276361314,
        "sender_full_name": "Jubilee",
        "timestamp": 1648052964
    },
    {
        "content": "<p>does it haave to be delegate+ oookaaay</p>",
        "id": 276361346,
        "sender_full_name": "Jubilee",
        "timestamp": 1648052977
    },
    {
        "content": "<p>ah I think bors is dead.</p>",
        "id": 276361889,
        "sender_full_name": "Jubilee",
        "timestamp": 1648053143
    },
    {
        "content": "<p>Ah, we're experiencing \"degraded performance\". <a href=\"https://www.githubstatus.com/\">https://www.githubstatus.com/</a></p>",
        "id": 276362724,
        "sender_full_name": "Jubilee",
        "timestamp": 1648053459
    },
    {
        "content": "<p>bors love inttoptr, fighting back</p>",
        "id": 276365026,
        "sender_full_name": "Gankra",
        "timestamp": 1648054257
    },
    {
        "content": "<p>PR passed try</p>",
        "id": 276417881,
        "sender_full_name": "Gankra",
        "timestamp": 1648079567
    },
    {
        "content": "<p>i sleep</p>",
        "id": 276417887,
        "sender_full_name": "Gankra",
        "timestamp": 1648079571
    },
    {
        "content": "<p>gnight!</p>",
        "id": 276419177,
        "sender_full_name": "Jubilee",
        "timestamp": 1648080687
    },
    {
        "content": "<p>I've rebased/squashed all the previous changes and pushed up some new ones to fix review <a href=\"https://github.com/rust-lang/rust/pull/95241\">https://github.com/rust-lang/rust/pull/95241</a></p>",
        "id": 276745834,
        "sender_full_name": "Gankra",
        "timestamp": 1648328788
    },
    {
        "content": "<p>while I am <em>sympathetic</em> to the places where people said \"oh this can be turned into ptr.offset_from\" they're all in like, Pretty Fucking Fancy Code and I think this is introducing too high of a chance for error for a PR that is scattershotting through 50 files and therefore won't get the kind of scrutiny necessary for that kind of thing</p>",
        "id": 276745864,
        "sender_full_name": "Gankra",
        "timestamp": 1648328868
    },
    {
        "content": "<p>(I already have one CVE under my belt for such a sweeping stdlib refactor, I would prefer not to get another, tyvm)</p>",
        "id": 276745927,
        "sender_full_name": "Gankra",
        "timestamp": 1648328930
    },
    {
        "content": "<p>anyone who wants to fuck with memrchr, TypedArena, or sorting algorithms can be my guest but i'm not taking the blame lol</p>",
        "id": 276746029,
        "sender_full_name": "Gankra",
        "timestamp": 1648329119
    },
    {
        "content": "<p>I've massively fleshed out the tracking issue with more descriptive text and an FAQ / link-tree in the second comment: <a href=\"https://github.com/rust-lang/rust/issues/95228\">https://github.com/rust-lang/rust/issues/95228</a></p>",
        "id": 276794553,
        "sender_full_name": "Gankra",
        "timestamp": 1648396396
    },
    {
        "content": "<p>oh also I made it explicit that this work should tertiarily be trying to answer the question of \"what the fuck is the deal with harvard architectures\" because I kept running into that question during my prototyping, since fnptr &lt;-&gt; ptr/int casts kinda trivially get wrapped up into the same questions/issues.</p>",
        "id": 276794712,
        "sender_full_name": "Gankra",
        "timestamp": 1648396663
    },
    {
        "content": "<p>because i absolutely refused to get the MVP involved with the compiler, I was able to pull it out to a stable library, so anyone who wants to polyfill the APIs on stable can :D</p>\n<p><a href=\"https://crates.io/crates/sptr\">https://crates.io/crates/sptr</a></p>",
        "id": 276912601,
        "sender_full_name": "Gankra",
        "timestamp": 1648491645
    },
    {
        "content": "<blockquote>\n<p>sptr: The Strict Provenance Polyfill</p>\n</blockquote>",
        "id": 276912618,
        "sender_full_name": "Gankra",
        "timestamp": 1648491654
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^</p>",
        "id": 276912641,
        "sender_full_name": "Gankra",
        "timestamp": 1648491664
    },
    {
        "content": "<p>the <a href=\"http://docs.rs\">docs.rs</a> queue is so long today :(</p>",
        "id": 276913407,
        "sender_full_name": "Lokathor",
        "timestamp": 1648492039
    },
    {
        "content": "<p>always is ime</p>",
        "id": 276913441,
        "sender_full_name": "Gankra",
        "timestamp": 1648492060
    },
    {
        "content": "<p>I often-enough seem to publish stuff when it's nearly empty</p>",
        "id": 276913561,
        "sender_full_name": "Lokathor",
        "timestamp": 1648492108
    },
    {
        "content": "<p>nice :)</p>",
        "id": 276918957,
        "sender_full_name": "RalfJ",
        "timestamp": 1648495019
    },
    {
        "content": "<p>...should i add these</p>",
        "id": 276919689,
        "sender_full_name": "Gankra",
        "timestamp": 1648495404
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// A pointer that pretends to be an integer, for API Crimes.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// If you can't possibly satisfy strict provenance for whatever reason, you can at least</span>\n<span class=\"sd\">/// use this type to make sure the compiler still understands that Pointers Are Happening.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// All operations on this type will derive provenance from the left-hand-size (lhs).</span>\n<span class=\"sd\">/// So `x + y` has `x`'s provenance. *Many* operations are nonsensical if the pointer</span>\n<span class=\"sd\">/// inside is a real pointer, but hey, you've reached for the \"I Know What I'm Doing\"</span>\n<span class=\"sd\">/// lever, so we'll let you *say* whatever gibberish you want.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// Please submit a PR if you need some operation defined on usize to be exposed here.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// Please don't use these types.</span>\n<span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[allow(non_camel_case_types)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">uptr</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276919803,
        "sender_full_name": "Gankra",
        "timestamp": 1648495450
    },
    {
        "content": "<p>Some nits:</p>\n<ul>\n<li>I think <code>Strict</code>'s type parameter should be an associated type instead, no? Because it's nonsensical for a pointer to implement both <code>Strict&lt;Foo&gt;</code> and <code>Strict&lt;Bar&gt;</code>.</li>\n<li>I also wonder if <code>Strict</code> should be sealed, and am pretty sure that it should be an unsafe trait.</li>\n</ul>",
        "id": 276924445,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648497982
    },
    {
        "content": "<p>Does rust have first-class trait sealing now, or is there just A Trick You Do?</p>",
        "id": 276924868,
        "sender_full_name": "Gankra",
        "timestamp": 1648498230
    },
    {
        "content": "<p>Just A Trick You Do.</p>",
        "id": 276925783,
        "sender_full_name": "Jubilee",
        "timestamp": 1648498566
    },
    {
        "content": "<p>the trick is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">private</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Sealed</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span>: <span class=\"nc\">private</span>::<span class=\"n\">Sealed</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">private</span>::<span class=\"n\">Sealed</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// ...</span>\n</code></pre></div>",
        "id": 276925862,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648498610
    },
    {
        "content": "<p>(I still want it to become a real thing, especially since that could let us take it into account in coherence.)</p>",
        "id": 276925916,
        "sender_full_name": "scottmcm",
        "timestamp": 1648498644
    },
    {
        "content": "<p>Yeah I don't like having to use the hack really, becuase it feels like a hack.</p>",
        "id": 276925961,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648498671
    },
    {
        "content": "<p>Yeah, especially since there are bunch of different hacks with subtly different behaviours.</p>\n<p>Like you can also do something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">private</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Sealant</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">_sealed</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">private</span>::<span class=\"n\">Sealant</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">_sealed</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">private</span>::<span class=\"n\">Sealant</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276926385,
        "sender_full_name": "scottmcm",
        "timestamp": 1648498896
    },
    {
        "content": "<p>Ah right, yeah, I... dislike that one</p>",
        "id": 276926716,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648499086
    },
    {
        "content": "<p>Ok, I cleaned up the trait/sealed it (I don't think it needs to be unsafe... it's not a trait To Be Generic Over)</p>",
        "id": 276929059,
        "sender_full_name": "Gankra",
        "timestamp": 1648500426
    },
    {
        "content": "<p>published 0.2.0 with uptr/iptr and OpaqueFn stubbed out (behind features, only the stuff in the PR is on-by-default)</p>",
        "id": 276929096,
        "sender_full_name": "Gankra",
        "timestamp": 1648500458
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/sptr\">https://crates.io/crates/sptr</a></p>",
        "id": 276929104,
        "sender_full_name": "Gankra",
        "timestamp": 1648500461
    },
    {
        "content": "<p>(well OK I have the to_bits/from_bits deprecations on by default, but like, if you're using this stuff you <em>really</em> don't want to be using <em>that</em> stuff)</p>",
        "id": 276929178,
        "sender_full_name": "Gankra",
        "timestamp": 1648500492
    },
    {
        "content": "<p>Yeah, sealing means it doesn't matter if it's an unsafe trait or not.</p>",
        "id": 276929315,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648500585
    },
    {
        "content": "<p>Hmm... I'm sure I've seen crates expose things \"behind features\" before. Is there a special way to tell <a href=\"http://docs.rs\">docs.rs</a> to do that?</p>",
        "id": 276929960,
        "sender_full_name": "Gankra",
        "timestamp": 1648500906
    },
    {
        "content": "<p>ah, <a href=\"https://docs.rs/about/metadata\">https://docs.rs/about/metadata</a></p>",
        "id": 276930427,
        "sender_full_name": "Gankra",
        "timestamp": 1648501177
    },
    {
        "content": "<p>If you're wondering how some crates make it show up as requiring the feature in the docs (e.g. the bit on &lt;<a href=\"https://docs.rs/rusqlite/latest/rusqlite/blob/index.html\">https://docs.rs/rusqlite/latest/rusqlite/blob/index.html</a>&gt;, that says \"This is supported on crate feature blob only.\"), you need <code>#![feature(doc_cfg)]</code>.</p>\n<p>You can put this all behind a <code>cfg_attr</code> by using something like <code>rustdoc-args = [\"--cfg\", \"docsrs\"]</code> in the docsrs metadata, but it is a pain.</p>",
        "id": 276932381,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648502110
    },
    {
        "content": "<p>I think it's good enough that they'll try to use it and get told something's missing</p>",
        "id": 276932590,
        "sender_full_name": "Gankra",
        "timestamp": 1648502218
    },
    {
        "content": "<p>(for now)</p>",
        "id": 276932604,
        "sender_full_name": "Gankra",
        "timestamp": 1648502227
    },
    {
        "content": "<p>probably best not to spread this around until the PR lands (which, hopefully does not require a ton of administrative work...)</p>",
        "id": 276934941,
        "sender_full_name": "Gankra",
        "timestamp": 1648503613
    },
    {
        "content": "<p>Presumably we want a kind of, \"it's all here, use it\" rollout</p>",
        "id": 276934958,
        "sender_full_name": "Gankra",
        "timestamp": 1648503631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276932381\">said</a>:</p>\n<blockquote>\n<p><code>#![feature(doc_cfg)]</code>.</p>\n</blockquote>\n<p>It needs <code>#![feature(doc_cfg, doc_auto_cfg)]</code> if you want to avoid adding annotations everywhere</p>",
        "id": 276935680,
        "sender_full_name": "mejrs",
        "timestamp": 1648504186
    },
    {
        "content": "<p>Wow, TIL</p>",
        "id": 276939078,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648506883
    },
    {
        "content": "<p>Because <a href=\"https://github.com/rust-lang/rust/issues/90497\">https://github.com/rust-lang/rust/issues/90497</a></p>",
        "id": 276941059,
        "sender_full_name": "mejrs",
        "timestamp": 1648508630
    },
    {
        "content": "<p>I've just been adding annotations everywhere</p>",
        "id": 276941225,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648508768
    },
    {
        "content": "<p>so i think whatever the fuck is going on with SOCKET is actually fine but it sucks that things are inconsistent and wobbly, filed: <a href=\"https://github.com/microsoft/windows-rs/issues/1643\">https://github.com/microsoft/windows-rs/issues/1643</a></p>",
        "id": 276945686,
        "sender_full_name": "Gankra",
        "timestamp": 1648513348
    },
    {
        "content": "<p>tl;dr it's seemingly all integers pretending to be pointers For Fun, so provenance doesn't matter</p>",
        "id": 276945712,
        "sender_full_name": "Gankra",
        "timestamp": 1648513391
    },
    {
        "content": "<p>From a brief skim of types in <a href=\"https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types\">https://docs.microsoft.com/en-us/windows/win32/winprog/windows-data-types</a> that typedef to HANDLE, I found 2 that seem to actually be pointers:<br>\n1) HINSTANCE/HMODULE \"A handle to an instance. This is the base address of the module in memory.\"<br>\n2) HGLOBAL , return value of GlobalAlloc <a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-globalalloc\">https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-globalalloc</a></p>",
        "id": 276951630,
        "sender_full_name": "Nick12",
        "timestamp": 1648520813
    },
    {
        "content": "<p>Yeah those seem like they probably mean HANDLE should be a pointer</p>",
        "id": 276957977,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648529573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/276929315\">said</a>:</p>\n<blockquote>\n<p>Yeah, sealing means it doesn't matter if it's an unsafe trait or not.</p>\n</blockquote>\n<p>well that's like saying for private functions it doesnt matter if they are unsafe: technically correct but IMO morally wrong. ;) they should both still be annotated correctly.</p>",
        "id": 277041934,
        "sender_full_name": "RalfJ",
        "timestamp": 1648576069
    },
    {
        "content": "<p>i do not know what it means for a trait that makes no guarantees of its own intrinsic semantics to \"be unsafe\"</p>",
        "id": 277042117,
        "sender_full_name": "Gankra",
        "timestamp": 1648576150
    },
    {
        "content": "<p>like my understanding of an unsafe trait is \"a trait that generic code can assume all implementations are correct, at penalty of UB\"</p>",
        "id": 277042338,
        "sender_full_name": "Gankra",
        "timestamp": 1648576238
    },
    {
        "content": "<p>and generally speaking is only really useful for marker traits, ime</p>",
        "id": 277042435,
        "sender_full_name": "Gankra",
        "timestamp": 1648576277
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/277042435\">said</a>:</p>\n<blockquote>\n<p>and generally speaking is only really useful for marker traits, ime</p>\n</blockquote>\n<p>Well with specialization you can split the unsafeness into a marker, I guess.</p>\n<p>But IIRC <code>sort_unstable</code> could be something like 5-10% faster if <code>Ord</code> were <code>unsafe trait</code>.</p>",
        "id": 277045719,
        "sender_full_name": "scottmcm",
        "timestamp": 1648577839
    },
    {
        "content": "<p>yeah that's the standard trick with TrustedLen, right?</p>",
        "id": 277045896,
        "sender_full_name": "Gankra",
        "timestamp": 1648577951
    },
    {
        "content": "<p>And there's TrustedLen. I don't remember if it's that or another trait that powers the specializations that enable reusing a Vec allocation</p>",
        "id": 277045911,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1648577961
    },
    {
        "content": "<p>I am... dubious of these optimizations tbh. It's stripping away defense in depth. I get it, people want numbers to go down, just worries me. (anyway, off topic...)</p>",
        "id": 277046075,
        "sender_full_name": "Gankra",
        "timestamp": 1648578062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/277042338\">said</a>:</p>\n<blockquote>\n<p>like my understanding of an unsafe trait is \"a trait that generic code can assume all implementations are correct, at penalty of UB\"</p>\n</blockquote>\n<p>unsafe trait means \"when you implement this trait you have a proof obligation\". it's certainly useful for non-marker-traits as well, in particular when combined with <code>unsafe fn</code> inside the trait</p>",
        "id": 277050711,
        "sender_full_name": "RalfJ",
        "timestamp": 1648580451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/277046075\">said</a>:</p>\n<blockquote>\n<p>I am... dubious of these optimizations tbh. It's stripping away defense in depth. I get it, people want numbers to go down, just worries me. (anyway, off topic...)</p>\n</blockquote>\n<p>tbh this is why I have invested so much effort into portable SIMD on Rust. people should not be this eager to make crazy specialization stuff happen, there should be obvious fast impls.</p>",
        "id": 277089853,
        "sender_full_name": "Jubilee",
        "timestamp": 1648609873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/277046075\">said</a>:</p>\n<blockquote>\n<p>I am... dubious of these optimizations tbh. It's stripping away defense in depth. I get it, people want numbers to go down, just worries me. (anyway, off topic...)</p>\n</blockquote>\n<p>i think std being fast and having optimizations means theres less need for user code to use unsafe to get performance. Given that std probably gets more eyes than other random crates <em>and</em> gets auto-updated as they update their compiler (unlike some lib implementing a more optimized $foo from <a href=\"http://crates.io\">crates.io</a>), this feels worthwhile to me.</p>",
        "id": 277098385,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648620864
    },
    {
        "content": "<p>its a balance though, for sure.</p>",
        "id": 277098402,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1648620889
    },
    {
        "content": "<p>I am very uncomfortable with the fact that specialization is such a load-bearing feature in std which has (AFAIK) no candidates for a sound implementation. I'm not sure there are any other nightly features with that combination</p>",
        "id": 277098620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648621190
    },
    {
        "content": "<p>it would be better if all specializations were <code>unsafe impl</code>, although that still wouldn't address the problem of what the proof obligations for safety are</p>",
        "id": 277098720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1648621281
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// safety: I paid Ferris $10 to make sure this always works</span>\n</code></pre></div>",
        "id": 277100824,
        "sender_full_name": "Lokathor",
        "timestamp": 1648623352
    },
    {
        "content": "<p>Yeah it does seem unfortunate. I think for something as widely used as std performance is quite critical, but specialization seems like realizing footgun are better and playing with fireworks instead. An improvement sure, but...</p>\n<p>Off topic: I parsed Lok's statement as the anime Ferris and got a chuckle after the Ferris meme that's been floating around.</p>",
        "id": 277104567,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1648625910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/277089853\">said</a>:</p>\n<blockquote>\n<p>tbh this is why I have invested so much effort into portable SIMD on Rust. people should not be this eager to make crazy specialization stuff happen, there should be obvious fast impls.</p>\n</blockquote>\n<p>I think people will always be eager regardless. \"Find the optimal way to combine these two standards container types to improve performance\" is the kind of stuff that scratches people's optimization itch.</p>",
        "id": 277122584,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648635715
    },
    {
        "content": "<p>If you add better SIMD, you just give them more opportunity to optimize.</p>",
        "id": 277122640,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648635729
    },
    {
        "content": "<p>YESSSSS IT LANDED</p>\n<p>ok i will properly post a public announcement for this when it hits nightly and I can link the docs</p>",
        "id": 277137181,
        "sender_full_name": "Gankra",
        "timestamp": 1648643879
    },
    {
        "content": "<p>Nice.</p>",
        "id": 277137939,
        "sender_full_name": "Connor Horman",
        "timestamp": 1648644258
    },
    {
        "content": "<p>there is now a label for strict-provenance-related issues: <a href=\"https://github.com/rust-lang/rust/labels/A-strict-provenance\">https://github.com/rust-lang/rust/labels/A-strict-provenance</a></p>",
        "id": 277197114,
        "sender_full_name": "Gankra",
        "timestamp": 1648669929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/strict.20provenance.20std.20compat.20notes/near/277122640\">said</a>:</p>\n<blockquote>\n<p>If you add better SIMD, you just give them more opportunity to optimize.</p>\n</blockquote>\n<p>This is actually false, but for a non-intuitive reason:</p>\n<p>Explicit SIMD gets lowered into machine operations that can actually fully saturate an individual core's functionality, leaving essentially no slack to pick up in other ways.</p>",
        "id": 277203650,
        "sender_full_name": "Jubilee",
        "timestamp": 1648674237
    },
    {
        "content": "<p>The point is to make it so that if you really need to optimize, that the only thing left will largely be to find ways to actually operate on <strong>less data</strong>, and once you have finished removing steps where your program processes unnecessary data, you are done. There is nothing to take away or add.</p>",
        "id": 277204076,
        "sender_full_name": "Jubilee",
        "timestamp": 1648674466
    },
    {
        "content": "<p>In actuality we have small bubbles of variation because the SIMD operations are expressed largely in terms of the Rust Abstract Machine, with an imperfect mapping to the real ISA, much less real execution units. However, many of these are due to direct failings of the LLVM codegen backend which thus require ornate workarounds in C++ code as well.</p>",
        "id": 277204320,
        "sender_full_name": "Jubilee",
        "timestamp": 1648674611
    },
    {
        "content": "<p>(announcement stuff prepped, just gotta wait for the nightly....)</p>",
        "id": 277206572,
        "sender_full_name": "Gankra",
        "timestamp": 1648675853
    },
    {
        "content": "<p>threadddd <a href=\"https://twitter.com/Gankra_/status/1509335163045650436?s=20&amp;t=g1UCHrBNwblJOHhFYnf9vQ\">https://twitter.com/Gankra_/status/1509335163045650436?s=20&amp;t=g1UCHrBNwblJOHhFYnf9vQ</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/Gankra_/status/1509335163045650436?s=20&amp;t=g1UCHrBNwblJOHhFYnf9vQ\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/37663fd2872232bfa24553d81b8b079cdd79fc11/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f313233373135353532323631343336363230382f6c68686b554158395f6e6f726d616c2e6a7067\"></a><p>OK DON'T PANIC BUT I JUST REWROTE RUST'S MEMORY MODEL AND NOW ALL CODE IS UNDEFINED AND NEEDS TO BE FIXED RIGHT AWAY\n\n...ok no, I didn't, but the Strict Provenance experiment just hit nightly and is VERY IMPORTANT and I have SO MUCH to say about it!!\n\n<a href=\"https://t.co/JUS0pyv0ad\">https://github.com/rust-lang/rust/issues/95228</a></p><span>- Aria the Cat (@Gankra_)</span></div></div>",
        "id": 277222037,
        "sender_full_name": "Gankra",
        "timestamp": 1648689125
    }
]