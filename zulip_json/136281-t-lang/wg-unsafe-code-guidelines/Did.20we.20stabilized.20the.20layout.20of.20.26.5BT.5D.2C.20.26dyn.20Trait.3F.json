[
    {
        "content": "<p>I searched the RFC repo but didn't find anything which implies that the layout of DST-pointers like &amp;[T] or &amp;dyn Trait had been stabilized, on the other hand the official unsafe code guid lines imply that exactly that is the case. (<a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout/pointers.html\">https://rust-lang.github.io/unsafe-code-guidelines/layout/pointers.html</a>)</p>\n<p>I personal don't think we ever will change it for x86,ARM and I also think it's unlikely that there is an arch where a different layout is preferable, but as long was we didn't stabilize it officially it would be bad to advertise it at such. (Or I'm just blind and missed it when searching RFC's and the internals user forum <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> ).</p>",
        "id": 236733215,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1619725326
    },
    {
        "content": "<p>unsafe code guidelines are not official yet, and this is one of the main cases in the book where it makes a definitive statement that is not yet stable elsewhere</p>",
        "id": 236737745,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619727232
    },
    {
        "content": "<p>Ok, thanks a lot for the fast feedback.</p>",
        "id": 236739619,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1619728020
    },
    {
        "content": "<p>Is it reasonable to treat the unsafe guide lines as: \"people which are deeply involved in the whole specifying rust memory and execution model task believe that this will be the case in the future (and it works now)\".</p>\n<p>Or is this just a bug and a PR to fix this would be merged?</p>",
        "id": 236754955,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1619734093
    },
    {
        "content": "<p>The purpose of the unsafe code guidelines was/is to prepare a detailed design for a future RFC, so it is to be expected that it is ahead of rust stabilization</p>",
        "id": 236756701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619735132
    },
    {
        "content": "<p>I wouldn't count on the \"(and it works now)\" for the slice/dst layout. I mean, it's true, but I actually dont think that part will be stabilized tbh</p>",
        "id": 236760879,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619737547
    },
    {
        "content": "<p>Ok, thanks. I also have to apologize I entered the guidelines through a link onto the part wrt. DST-pointer layout and due to  that never properly read the intro. I just realized the intro says <code>\"recommends\" what kinds of things unsafe code can and cannot do</code> and so one. <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> . </p>\n<p>I know it would be nice to be able to rely on people reading the intro, but people tend to skip intros so if someone happens to be very bored it might maybe be a nice idea to add some kind of \"corner banner\" to the books template. Something like \"This document doesn't represent the current state of rust\" with a slightly orange but non aggressive yellow background or similar.  I would say I will do so on my weekend, but I don't know if I have the time and I haven't done any non trivial CSS development since 5 years.</p>",
        "id": 236765605,
        "sender_full_name": "Philipp Korber",
        "timestamp": 1619740812
    },
    {
        "content": "<p>slice layout is unlikely to be stabilized simply because there's already methods to get the raw parts and a function to make one from the raw parts. So unsafe code doesn't <em>need</em> a stable layout because you can call those stable methods and functions already.</p>",
        "id": 236779348,
        "sender_full_name": "Lokathor",
        "timestamp": 1619752320
    },
    {
        "content": "<p>I guess. It would still be useful in the same way repr(C) is useful</p>",
        "id": 236783201,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619755968
    },
    {
        "content": "<p>I don't think you're wrong, but sadly I also don't think I'm wrong.</p>",
        "id": 237188712,
        "sender_full_name": "Lokathor",
        "timestamp": 1620059283
    },
    {
        "content": "<p>I don't think there's any thing happening that would stabilize the <em>layout</em> of a slice or fat pointer, just <a href=\"https://github.com/rust-lang/rfcs/pull/2580\">https://github.com/rust-lang/rfcs/pull/2580</a> to make pulling them apart and putting them back together easier.</p>",
        "id": 237205643,
        "sender_full_name": "scottmcm",
        "timestamp": 1620066116
    },
    {
        "content": "<p>Not having <code>&amp;[u8] is not FFI safe</code> warning when passing arguments into <code>extern \"C\"</code> functions would be nice</p>",
        "id": 237226242,
        "sender_full_name": "Soveu",
        "timestamp": 1620074809
    },
    {
        "content": "<p>&lt;<a href=\"https://docs.rs/chromium/0.0.2/chromium/struct.SharedSlice.html\">https://docs.rs/chromium/0.0.2/chromium/struct.SharedSlice.html</a>&gt;</p>",
        "id": 237380816,
        "sender_full_name": "Lokathor",
        "timestamp": 1620154977
    },
    {
        "content": "<p>talking about layout of these is not all that useful without also talking about how they participate in CCs.</p>",
        "id": 237395618,
        "sender_full_name": "nagisa",
        "timestamp": 1620161450
    },
    {
        "content": "<p>where they are quite special-cased.</p>",
        "id": 237395637,
        "sender_full_name": "nagisa",
        "timestamp": 1620161460
    },
    {
        "content": "<p>It would be great if a <code>buf: &amp;[T]</code> field were officially guaranteed to be layout compatible to two fields <code>ptr: *const T, size: usize</code>.</p>",
        "id": 237406845,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620165423
    },
    {
        "content": "<p>It would give cbindgen opportunity to do this transformation automatically instead of offloading it to user like described in <a href=\"https://github.com/eqrion/cbindgen/issues/247#issuecomment-760571976\">https://github.com/eqrion/cbindgen/issues/247#issuecomment-760571976</a>.</p>",
        "id": 237406996,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620165494
    },
    {
        "content": "<p>This equivalence help to reuse a larger number of existing Rust structures across FFI instead of introducing some wrapper/adapter cruft.</p>",
        "id": 237407317,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1620165644
    },
    {
        "content": "<p>Reminds me a bit of the repr converstation for wasm about how it's splatted.  Could be interesting to have <code>repr(splatted)</code> defined for <code>&amp;[T]</code> to use it in <code>extern \"C\"</code> too.</p>",
        "id": 237413529,
        "sender_full_name": "scottmcm",
        "timestamp": 1620169116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Did.20we.20stabilized.20the.20layout.20of.20.26.5BT.5D.2C.20.26dyn.20Trait.3F/near/237380816\">said</a>:</p>\n<blockquote>\n<p>&lt;<a href=\"https://docs.rs/chromium/0.0.2/chromium/struct.SharedSlice.html\">https://docs.rs/chromium/0.0.2/chromium/struct.SharedSlice.html</a>&gt;</p>\n</blockquote>\n<p>Or the extra mile: <a href=\"https://getditto.github.io/safer_ffi/motivation/repr-c-forall.html\">https://getditto.github.io/safer_ffi/motivation/repr-c-forall.html</a></p>",
        "id": 237697980,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1620322283
    },
    {
        "content": "<p>i mean the rest of the chromium crate does all this stuff too.</p>",
        "id": 237702209,
        "sender_full_name": "Lokathor",
        "timestamp": 1620324030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Did.20we.20stabilized.20the.20layout.20of.20.26.5BT.5D.2C.20.26dyn.20Trait.3F/near/237406996\">said</a>:</p>\n<blockquote>\n<p>It would give cbindgen opportunity to do this transformation automatically instead of offloading it to user like described in <a href=\"https://github.com/eqrion/cbindgen/issues/247#issuecomment-760571976\">https://github.com/eqrion/cbindgen/issues/247#issuecomment-760571976</a>.</p>\n</blockquote>\n<p>why can't bindgen do it autoamtically now? it can generate wrapper functions that take slices, and that do the unpacking before calling the C function</p>",
        "id": 237969311,
        "sender_full_name": "RalfJ",
        "timestamp": 1620492517
    },
    {
        "content": "<ul>\n<li>bindgen makes Rust code that can call C code based on C header files.</li>\n<li>cbindgen is the opposite: it makes C header files that let C code call Rust code.</li>\n</ul>\n<p>so bindgen could theoretically make extra Rust code to convert formats (though i wouldn't trust it to know when to do that automatically).</p>\n<p>but cbindgen just makes C source so it can't add any Rust side code at all.</p>",
        "id": 237982865,
        "sender_full_name": "Lokathor",
        "timestamp": 1620506148
    },
    {
        "content": "<p>Ah I see -- in principle cbindgen could have a macro on the Rust side that performs \"C-ification\" of the Rust library</p>",
        "id": 238029125,
        "sender_full_name": "RalfJ",
        "timestamp": 1620559286
    },
    {
        "content": "<p>I assume this will be requires in many cases anyway (similar to exposing a C API from a C++ library)</p>",
        "id": 238029136,
        "sender_full_name": "RalfJ",
        "timestamp": 1620559302
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Did.20we.20stabilized.20the.20layout.20of.20.26.5BT.5D.2C.20.26dyn.20Trait.3F/near/238029125\">said</a>:</p>\n<blockquote>\n<p>Ah I see -- in principle cbindgen could have a macro on the Rust side that performs \"C-ification\" of the Rust library</p>\n</blockquote>\n<p>That's exactly what <a href=\"https://docs.rs/safer-ffi\">https://docs.rs/safer-ffi</a> does (<a href=\"https://getditto.github.io/safer_ffi/simple-examples/max.html\">example</a>), although the current version does require that the caller explicitly use the repr C types; I guess a way to <strong>opt into</strong> auto-marshalling of Rust types into/from their ReprC counterparts could be added <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 238043601,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1620575014
    },
    {
        "content": "<p>I think the intent for <code>cbindgen</code> is that it's a CLI program. You point the program at a rust crate and it generates C bindings for said crate. That way the crate maintainer doesn't have to think about doing any extra steps on their end.</p>\n<p>having a system where proc-macros tag a bunch of stuff within the crate like <code>safer-ffi</code> does is a valid but totally alternate approach.</p>",
        "id": 238096746,
        "sender_full_name": "Lokathor",
        "timestamp": 1620630980
    }
]