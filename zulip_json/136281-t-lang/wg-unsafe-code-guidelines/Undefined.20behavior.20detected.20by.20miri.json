[
    {
        "content": "<p>Hello everyone!</p>\n<p>I have recently been working on a crate that encode a linked list in a vec and I (tried to at least^^) implemented a mutable iterator.<br>\nClassically, I introduced an <code>IterMut</code> struct that holds a mutable reference to the list (that holds the vec) but in order to return reference that outlives the iterator, I had to use some bits of unsafe code by \"bypass\" the borrow checker.<br>\nI thought it was fine, until I added a test that was collecting all the yielded mutable refs in a vec and tried to modify it ...<br>\nThis is where miri started to complain of ub: <a href=\"https://github.com/marmeladema/clru-rs/pull/20/files\">https://github.com/marmeladema/clru-rs/pull/20/files</a></p>",
        "id": 215392530,
        "sender_full_name": "marmeladema",
        "timestamp": 1604359254
    },
    {
        "content": "<p>The illegal magic is probably introduced here: <a href=\"https://github.com/marmeladema/clru-rs/blob/2d0ead8eea98c6518a557d199104e507659e2aee/src/lib.rs#L348\">https://github.com/marmeladema/clru-rs/blob/2d0ead8eea98c6518a557d199104e507659e2aee/src/lib.rs#L348</a></p>",
        "id": 215392635,
        "sender_full_name": "marmeladema",
        "timestamp": 1604359330
    },
    {
        "content": "<p>Is there a way to please miri &amp; the borrow checker at the same time? I don't exactly know what are my options</p>",
        "id": 215392690,
        "sender_full_name": "marmeladema",
        "timestamp": 1604359394
    },
    {
        "content": "<p>I tried to use only safe APIs available on slices like <code>split_mut_at</code> but since I am not walking my node in the memory order I does not really work</p>",
        "id": 215392805,
        "sender_full_name": "marmeladema",
        "timestamp": 1604359492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> don't you just need <code>&amp;'a mut self</code>?</p>",
        "id": 215392814,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604359500
    },
    {
        "content": "<p>in the definition of <code>next</code>? You cannot because it's not how the trait is defined</p>",
        "id": 215392840,
        "sender_full_name": "marmeladema",
        "timestamp": 1604359528
    },
    {
        "content": "<p>oh hmm</p>",
        "id": 215392853,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604359535
    },
    {
        "content": "<p>I think you need GATs</p>",
        "id": 215392858,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604359540
    },
    {
        "content": "<p>as is, it's unsound because you could have a mut ref and an immutable borrow at the same time (if you drop the <code>&amp;mut self</code> just after returning)</p>",
        "id": 215392921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604359573
    },
    {
        "content": "<p>but technically, it's a similar problem to mutable iteration over a slice, which do exists. I looked at how it's implemented in the stdlib but could not really understand how that would NOT be tripping miri</p>",
        "id": 215392931,
        "sender_full_name": "marmeladema",
        "timestamp": 1604359589
    },
    {
        "content": "<p>yeah that looks like the same pattern for <code>IterMut</code></p>",
        "id": 215393117,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604359752
    },
    {
        "content": "<p>In the <code>IterMut</code> of <code>LinkedList</code> in stdlib, there are those lines in the code:</p>\n<div class=\"codehilite\"><pre><span></span><code>                // Need an unbound lifetime to get &#39;a\n                let node = &amp;mut *node.as_ptr();\n</code></pre></div>\n<p>I tried to do something similar, and it also trips miri :(</p>",
        "id": 215393648,
        "sender_full_name": "marmeladema",
        "timestamp": 1604360081
    },
    {
        "content": "<p>The actual error looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code>test tests::test_iter_forwards ... error: Undefined Behavior: no item granting read access to tag &lt;295525&gt; found in borrow stack.\n    --&gt; src/lib.rs:1276:17\n     |\n1276 |                 **v -= 1;\n     |                 ^^^^^^^^ no item granting read access to tag &lt;295525&gt; found in borrow stack.\n     |\n     = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n     = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n</code></pre></div>",
        "id": 215393884,
        "sender_full_name": "marmeladema",
        "timestamp": 1604360256
    },
    {
        "content": "<p>Tried to implement something similar on vec in the playground: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7000e7cf32926ba6b107e2abcf380084\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7000e7cf32926ba6b107e2abcf380084</a> and miri does not seem to complain, but maybe it's because it cannot see \"what happens inside stdlib\"?</p>",
        "id": 215394355,
        "sender_full_name": "marmeladema",
        "timestamp": 1604360638
    },
    {
        "content": "<p>Not sure how helpful this is, but I tried to simplify your example to a <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a4d622aaff2e72646c590234a691748d\">mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CLruCache</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s\">\"b\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s\">\"c\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">iter_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">v</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It seems that the UB is triggered when you move the iterator on to the second element and then access an old element</p>",
        "id": 215394515,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604360745
    },
    {
        "content": "<p>oh this might be a provenance issue</p>",
        "id": 215394631,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604360833
    },
    {
        "content": "<p>It's a step in the right direction I guess. Thanks! Not sure I know enough to fix this myself though :/</p>",
        "id": 215395054,
        "sender_full_name": "marmeladema",
        "timestamp": 1604361149
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d28957e7fd836b047ecb8ccc7ae1e169\">more minimal</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FixedSizeList</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">push_front</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">push_front</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">push_front</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cache</span><span class=\"p\">.</span><span class=\"n\">iter_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215395209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604361277
    },
    {
        "content": "<p>hu I managed to get it to pass</p>",
        "id": 215395249,
        "sender_full_name": "marmeladema",
        "timestamp": 1604361308
    },
    {
        "content": "<p>If I avoid the call to <code>node_mut()</code> in <code>next</code> and do <code>let node = list.nodes[front].as_mut().unwrap();</code> instead it works</p>",
        "id": 215395392,
        "sender_full_name": "marmeladema",
        "timestamp": 1604361418
    },
    {
        "content": "<p>but doing <code>let node = list.nodes.get_mut(front).and_then(|node| node.as_mut()).unwrap();</code> (copied from <code>node_mut()</code>) does not</p>",
        "id": 215395418,
        "sender_full_name": "marmeladema",
        "timestamp": 1604361442
    },
    {
        "content": "<p>what kind of dark magic happens in <code>get_mut()</code> or <code>and_then</code> that would make miri complain oO?</p>",
        "id": 215395527,
        "sender_full_name": "marmeladema",
        "timestamp": 1604361511
    },
    {
        "content": "<p>this is what I meant  by provenance</p>",
        "id": 215395555,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604361530
    },
    {
        "content": "<p>the first one only borrows <em>one</em> of the elements of the slice</p>",
        "id": 215395570,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604361539
    },
    {
        "content": "<p>the second borrows the <em>whole</em> slice, then gives you one element from it</p>",
        "id": 215395580,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604361549
    },
    {
        "content": "<p>so if you have two elements at once using the second method, then the 'provenence' 'remembers' that you borrowed the whole slice to start, and now you have two mutable references to the slice</p>",
        "id": 215395613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604361582
    },
    {
        "content": "<p>I would have honestly thought that <code>list.nodes[front]</code> would be strictly equivalent to <code>list.get_mut(front).unwrap()</code></p>",
        "id": 215395759,
        "sender_full_name": "marmeladema",
        "timestamp": 1604361650
    },
    {
        "content": "<p>Is there other ways/syntax to borrow only one element of a slice?</p>",
        "id": 215396050,
        "sender_full_name": "marmeladema",
        "timestamp": 1604361878
    },
    {
        "content": "<p>Besides <code>slice[idx]</code> I mean</p>",
        "id": 215396060,
        "sender_full_name": "marmeladema",
        "timestamp": 1604361894
    },
    {
        "content": "<p>I would be inclined to do this with raw pointers, although the available syntax for doing this is lacking</p>",
        "id": 215396168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604361986
    },
    {
        "content": "<p>Even though miri can be a little cryptic, it's really such a <em>great</em> tool</p>",
        "id": 215396352,
        "sender_full_name": "marmeladema",
        "timestamp": 1604362187
    },
    {
        "content": "<p>I managed to get this to work:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">FixedSizeListIterMut</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">list</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">FixedSizeList</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">front</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">len</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_lft</span>: <span class=\"nc\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">FixedSizeList</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">FixedSizeListIterMut</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unsafe_code)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">front</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Safety: This creates a copy of a mutable reference to the list.</span>\n<span class=\"w\">            </span><span class=\"c1\">// This is unsafe in Rust, see \"The Rules of References\" at</span>\n<span class=\"w\">            </span><span class=\"c1\">// https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html#the-rules-of-references.</span>\n<span class=\"w\">            </span><span class=\"c1\">// We need to do this because self.list only exists as long as the iterator does,</span>\n<span class=\"w\">            </span><span class=\"c1\">// but the iterator's result items must live longer than the iterator itself.</span>\n<span class=\"w\">            </span><span class=\"c1\">// See https://stackoverflow.com/a/30422716/2013738 for details on reference items outliving iterators.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">raw_mut</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">list</span><span class=\"p\">).</span><span class=\"n\">nodes</span><span class=\"p\">[</span><span class=\"n\">front</span><span class=\"p\">])</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">front</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"n\">front</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">None</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215396594,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604362377
    },
    {
        "content": "<p>I'm pretty sure this is kosher, since it doesn't actually materialize the <code>&amp;mut</code> until it has the relevant pointer first</p>",
        "id": 215396630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604362414
    },
    {
        "content": "<p>So yeah, I originally used a *mut and a PhantomData but ultimately switched to a regular mutable ref because I was not really needing the raw pointer</p>",
        "id": 215396779,
        "sender_full_name": "marmeladema",
        "timestamp": 1604362517
    },
    {
        "content": "<p>This is what I ended up merging: <a href=\"https://github.com/marmeladema/clru-rs/commit/bba2538920e23a24c544078fda7b2f118fc31eb8\">https://github.com/marmeladema/clru-rs/commit/bba2538920e23a24c544078fda7b2f118fc31eb8</a></p>",
        "id": 215396810,
        "sender_full_name": "marmeladema",
        "timestamp": 1604362548
    },
    {
        "content": "<p>I think that <code>list_ref</code> is still a bit risky; it's not caught by miri because you don't do anything with it besides build another path</p>",
        "id": 215396913,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604362637
    },
    {
        "content": "<p>unfortunately my alternative uses <code>raw_mut!</code> which is still unstable</p>",
        "id": 215396937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604362661
    },
    {
        "content": "<p>Hum and would storing directly a pointer+length to the slice be better? And using from_raw_parts_mut?</p>",
        "id": 215397210,
        "sender_full_name": "marmeladema",
        "timestamp": 1604362875
    },
    {
        "content": "<p>Yeah, you can do that on stable too</p>",
        "id": 215397327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604362980
    },
    {
        "content": "<p>What about just:</p>\n<div class=\"codehilite\"><pre><span></span><code>if self.len &gt; 0 {\n            let front = self.front;\n            let node = self.list.nodes[front].as_mut().unwrap();\n            self.front = node.next;\n            self.len -= 1;\n            Some((front, unsafe { &amp;mut *(&amp;mut node.data as *mut T) }))\n}\n</code></pre></div>",
        "id": 215397457,
        "sender_full_name": "marmeladema",
        "timestamp": 1604363096
    },
    {
        "content": "<p>I moved the unsafe block at the very end</p>",
        "id": 215397482,
        "sender_full_name": "marmeladema",
        "timestamp": 1604363119
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=583b567653bfbe3a35609083a3ea1542\">here's</a> an implementation where the iterator stores a pointer to the element:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">FixedSizeListIterMut</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">list</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">FixedSizeListNode</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">front</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">len</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_lft</span>: <span class=\"nc\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">FixedSizeList</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">node</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">front</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215397776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604363385
    },
    {
        "content": "<p>Is the link right? It seems to point to a code not using a pointer</p>",
        "id": 215397952,
        "sender_full_name": "marmeladema",
        "timestamp": 1604363543
    },
    {
        "content": "<p>But I understand your proposal nonetheless :) yeah that would work too</p>",
        "id": 215398085,
        "sender_full_name": "marmeladema",
        "timestamp": 1604363654
    },
    {
        "content": "<p>I don't really know what would be the \"best way\" though</p>",
        "id": 215398105,
        "sender_full_name": "marmeladema",
        "timestamp": 1604363671
    },
    {
        "content": "<p>I think the definitions are still a bit undetermined, so I generally err on the side of caution, not creating <code>&amp;mut</code> references unless they are actually dynamically valid</p>",
        "id": 215398230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604363765
    },
    {
        "content": "<p><code>*mut</code> pointers are a bit more ugly to work with but they don't make any lifetime related promises</p>",
        "id": 215398258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604363796
    },
    {
        "content": "<p>and the \"lifetime cast\" <code>unsafe { &amp;mut *(&amp;mut node.data as *mut T) }</code> in your version looks like the sort of thing that might conceivably be banned in the future with really strict reference types</p>",
        "id": 215398322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604363865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281572\">marmeladema</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Undefined.20behavior.20detected.20by.20miri/near/215395759\">said</a>:</p>\n<blockquote>\n<p>I would have honestly thought that <code>list.nodes[front]</code> would be strictly equivalent to <code>list.get_mut(front).unwrap()</code></p>\n</blockquote>\n<p>the problem is that <code>get_mut</code> takes <code>&amp; mut [T]</code>... so at that point you are promising \"no other pointers exist to this memory\", which is in conflict with the mutable refs handed out by the iterator before. At least that is the current interpretation in Stacked Borrows. I have some thoughts for being less strict here, but no time to work on them for the next few months...</p>",
        "id": 215952811,
        "sender_full_name": "RalfJ",
        "timestamp": 1604752074
    },
    {
        "content": "<blockquote>\n<p>the problem is that get_mut takes &amp; mut [T]</p>\n</blockquote>\n<p>But <code>IndexMut</code> also takes <code>self: &amp;mut [T]</code>, so why is that different?</p>",
        "id": 215968034,
        "sender_full_name": "Diggsey",
        "timestamp": 1604774903
    },
    {
        "content": "<p><code>name.field[index]</code> lowers to a primitive slice access on the MIR level, no <code>IndexMut</code> involved</p>",
        "id": 215971143,
        "sender_full_name": "RalfJ",
        "timestamp": 1604779721
    },
    {
        "content": "<p>for the model as it is implemented so far, that makes a huge difference -- primitive operations can be tracked precisely</p>",
        "id": 215971153,
        "sender_full_name": "RalfJ",
        "timestamp": 1604779739
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/133\">there is an open issue</a> that the current model might be too aggressive in how it interprets <code>&amp;mut</code></p>",
        "id": 215971241,
        "sender_full_name": "RalfJ",
        "timestamp": 1604779845
    },
    {
        "content": "<p>some time in 2021 I hope to explore alternative models that are more permissive</p>",
        "id": 215971258,
        "sender_full_name": "RalfJ",
        "timestamp": 1604779877
    },
    {
        "content": "<p>Hmm, I don't like that... There are certain things that I expect to have no effect on a program's correctness (like introducing new-type wrappers).<br>\nThere are also some edge-cases with generics and dyn Trait. I'm guessing in a generic context, it only matters whether it monomorphises to a primitive slice access, and if used via <code>dyn IndexMut</code> it never counts as a primitive slice access even if the underlying type is a slice?</p>",
        "id": 215971564,
        "sender_full_name": "Diggsey",
        "timestamp": 1604780363
    },
    {
        "content": "<blockquote>\n<p>and if used via dyn IndexMut it never counts as a primitive slice access even if the underlying type is a slice?</p>\n</blockquote>\n<p>I did not check, but I assume this to be the case</p>",
        "id": 215971722,
        "sender_full_name": "RalfJ",
        "timestamp": 1604780572
    },
    {
        "content": "<p>It certainly is not ideal. Future exploration will have to show if we can find a model that does not have these problems, but still permits all/most of the desired optimizations.</p>",
        "id": 215971737,
        "sender_full_name": "RalfJ",
        "timestamp": 1604780606
    }
]