[
    {
        "content": "<p>Is it valid to call <code>mem::zeroed()</code> for ZSTs in general? What about the specific case of the empty tuple <code>()</code>?</p>",
        "id": 198585907,
        "sender_full_name": "Diggsey",
        "timestamp": 1590331114
    },
    {
        "content": "<p>They have to be Copy.</p>\n<p>Otherwise the type is allowed to control its creation and destruction as normal for any rust type.</p>",
        "id": 198586025,
        "sender_full_name": "Lokathor",
        "timestamp": 1590331338
    },
    {
        "content": "<p>How does <code>Copy</code> relate to that? Something can be <code>Copy</code> and still have private fields</p>",
        "id": 198586076,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590331446
    },
    {
        "content": "<p>The fields would also have to be Copy</p>",
        "id": 198586084,
        "sender_full_name": "Lokathor",
        "timestamp": 1590331481
    },
    {
        "content": "<p>and a zst only has zst fields</p>",
        "id": 198586092,
        "sender_full_name": "Lokathor",
        "timestamp": 1590331508
    },
    {
        "content": "<p>Sure, but why does that make it ok to construct the type from outside the containing module?</p>",
        "id": 198586098,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590331535
    },
    {
        "content": "<p>Constructing a ZST via <code>mem::zeroed()</code> is not UB from what I understand, but if you don't control the ZST you can break arbitrary library invariants and cause UB that way</p>",
        "id": 198586160,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590331610
    },
    {
        "content": "<p>Well I suppose you <em>could</em> construct a counter-example but once the type is Copy I can't imagine what that counter-example could be</p>",
        "id": 198586167,
        "sender_full_name": "Lokathor",
        "timestamp": 1590331660
    },
    {
        "content": "<p>I'm not sure what you mean</p>",
        "id": 198586223,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590331753
    },
    {
        "content": "<p><code>bare_metal::CriticalSection</code> for example is <code>Copy</code> <a href=\"https://github.com/rust-embedded/bare-metal/blob/e2689eabf6c9c86ff9f02512d506251716d0b6af/src/lib.rs#L15-L18\">https://github.com/rust-embedded/bare-metal/blob/e2689eabf6c9c86ff9f02512d506251716d0b6af/src/lib.rs#L15-L18</a></p>",
        "id": 198586230,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590331774
    },
    {
        "content": "<p>But creating it is unsafe and must only be done when no preemption is possible</p>",
        "id": 198586234,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590331799
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 198586286,
        "sender_full_name": "Lokathor",
        "timestamp": 1590331857
    },
    {
        "content": "<p>So the count is unimportant, only that some initialization occurred</p>",
        "id": 198586343,
        "sender_full_name": "Lokathor",
        "timestamp": 1590331942
    },
    {
        "content": "<p>confounding</p>",
        "id": 198586347,
        "sender_full_name": "Lokathor",
        "timestamp": 1590331953
    },
    {
        "content": "<p>Yeah, and in this case the lifetime is important as well</p>",
        "id": 198586409,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590332057
    },
    {
        "content": "<p>In other embedded use cases you might have a ZST token without lifetimes to indicate that some initialization occurred (eg. an external clock is started)</p>",
        "id": 198586416,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1590332090
    },
    {
        "content": "<p>I should have thought of this already because this is actually a thing needed for some SIMD setups as well</p>",
        "id": 198586499,
        "sender_full_name": "Lokathor",
        "timestamp": 1590332205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"295632\">Diggory Blake</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Constructing.20ZSTs/near/198585907\">said</a>:</p>\n<blockquote>\n<p>Is it valid to call <code>mem::zeroed()</code> for ZSTs in general? What about the specific case of the empty tuple <code>()</code>?</p>\n</blockquote>\n<p>No. This is not valid for <code>!</code>.</p>",
        "id": 198586878,
        "sender_full_name": "RalfJ",
        "timestamp": 1590332738
    },
    {
        "content": "<p>And <code>!</code> is also <code>Copy</code> so that bound doesn't help either.</p>",
        "id": 198586884,
        "sender_full_name": "RalfJ",
        "timestamp": 1590332747
    },
    {
        "content": "<p>For the 0-ary tuple <code>()</code>, since it is inhabited <em>and</em> <code>Copy</code>, then yes <code>mem::zeroed()</code> is valid. So is <code>mem::uninitialized()</code>. These two functions are actually equivalent for ZSTs.</p>",
        "id": 198586955,
        "sender_full_name": "RalfJ",
        "timestamp": 1590332815
    },
    {
        "content": "<p>(I am avoiding \"empty tuple\" because \"empty type\" is a technical term in type theory and it refers to <code>!</code>, not <code>()</code>.)</p>",
        "id": 198586965,
        "sender_full_name": "RalfJ",
        "timestamp": 1590332844
    },
    {
        "content": "<p>field-less tuple</p>",
        "id": 198596978,
        "sender_full_name": "isHavvy",
        "timestamp": 1590349663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Constructing.20ZSTs/near/198586167\">said</a>:</p>\n<blockquote>\n<p>Well I suppose you <em>could</em> construct a counter-example but once the type is Copy I can't imagine what that counter-example could be</p>\n</blockquote>\n<p>(already mentioned above, just repeating for clarity) there actually is a very simple counterexample, and it's <code>!</code>.</p>",
        "id": 198597318,
        "sender_full_name": "RalfJ",
        "timestamp": 1590350127
    },
    {
        "content": "<p><a href=\"https://github.com/chorman0773/SNES-Dev/blob/e1b6989fd5a378244279c70cf82cf1e8352cbb1e/rust-api/src/lib.rs#L13\">https://github.com/chorman0773/SNES-Dev/blob/e1b6989fd5a378244279c70cf82cf1e8352cbb1e/rust-api/src/lib.rs#L13</a> mem::zeroed() this, I dare you.</p>",
        "id": 198709244,
        "sender_full_name": "Connor Horman",
        "timestamp": 1590450281
    },
    {
        "content": "<p>that does not even fit my initial invalid criteria</p>",
        "id": 198711911,
        "sender_full_name": "Lokathor",
        "timestamp": 1590454375
    },
    {
        "content": "<p>A more serious example would be a type with a bounded lifetime that exists as a promise of some state for that lifetime. If there is only one possible state to promise, that could easily be a ZST, and even be T: Copy.</p>",
        "id": 198716063,
        "sender_full_name": "Connor Horman",
        "timestamp": 1590461311
    },
    {
        "content": "<p>Yes that was the basic idea of the bare_metal example. Some people also plan to do that with CPU features.</p>",
        "id": 198717188,
        "sender_full_name": "Lokathor",
        "timestamp": 1590463134
    }
]