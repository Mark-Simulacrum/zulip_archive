[
    {
        "content": "<p>I wonder, is the resulting pointer from the following function <em>Safe to use</em>?</p>\n<div class=\"codehilite\"><pre><span></span>pub const fn ptr_to_maybe_uninit_slice&lt;T&gt;(ptr: *mut T) -&gt; *mut [MaybeUninit&lt;u8&gt;] {\n    ptr::slice_from_raw_parts_mut(\n        ptr as *mut MaybeUninit&lt;T&gt; as *mut MaybeUninit&lt;u8&gt;,\n        mem::size_of::&lt;T&gt;(),\n    )\n}\n</pre></div>\n\n\n<p>Im using the raw slice to be able to perform a const swap and replace: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f9520ce70378a708f229ff2e1965e356\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f9520ce70378a708f229ff2e1965e356\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f9520ce70378a708f229ff2e1965e356</a> .</p>",
        "id": 186435757,
        "sender_full_name": "DutchGhost",
        "timestamp": 1579813795
    },
    {
        "content": "<p>Interesting question, but why not use  <code>ptr::swap_nonoverlapping(lhs, rhs, 1)</code>?</p>\n<p>Which seems to actually do something somewhat similar but vetted and utilizing simd</p>",
        "id": 186619504,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1580041731
    },
    {
        "content": "<blockquote>\n<p>Interesting question, but why not use  <code>ptr::swap_nonoverlapping(lhs, rhs, 1)</code>?</p>\n<p>Which seems to actually do something somewhat similar but vetted and utilizing simd</p>\n</blockquote>\n<p>That function is non-const, and Im trying to make an array type which is fully usable in const-fn's. That requires stuff like push and pop to work. And the latter is implementable with a swap</p>",
        "id": 186629161,
        "sender_full_name": "DutchGhost",
        "timestamp": 1580058194
    },
    {
        "content": "<p>The code seems fine to me.</p>",
        "id": 186645468,
        "sender_full_name": "comex",
        "timestamp": 1580086178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224097\">@DutchGhost</span> <code>*mut T</code> is always safe as there's no assumotion safe code can make about raw ptrs... probably I am just not understanding the question</p>",
        "id": 187162995,
        "sender_full_name": "RalfJ",
        "timestamp": 1580565155
    },
    {
        "content": "<p>but if you used references I think that would be a sound function indeed</p>",
        "id": 187163049,
        "sender_full_name": "RalfJ",
        "timestamp": 1580565261
    },
    {
        "content": "<p>The question is whether that resulting <code>*mut [MaybeUninit&lt;u8&gt;]</code> is sound to use, especially if I originally called <code>ptr_to_maybe_unint_slice</code> with an &amp;mut T.<br>\nBasically, is the T referenced by the mutable reference interpretable as a <code>[MaybeUninit&lt;u8&gt;]</code></p>",
        "id": 187163231,
        "sender_full_name": "DutchGhost",
        "timestamp": 1580565634
    },
    {
        "content": "<p>the thing is that for e.g. <code>&amp;mut T</code> I know what \"sound to use\" means (give it to arbitrary safe code and there is no UB)</p>",
        "id": 187163437,
        "sender_full_name": "RalfJ",
        "timestamp": 1580566023
    },
    {
        "content": "<p>for raw ptrs, I guess you mean doing reads and writes inside the bounds of the slice, but that's far from given</p>",
        "id": 187163438,
        "sender_full_name": "RalfJ",
        "timestamp": 1580566035
    },
    {
        "content": "<p>maybe you mean also getting <code>&amp;mut MaybeUninit&lt;u8&gt;</code> to slice elemtents and doing arbitrary safe things with them</p>",
        "id": 187163441,
        "sender_full_name": "RalfJ",
        "timestamp": 1580566070
    },
    {
        "content": "<p>and while all of these do not cause immediate UB, they <em>can</em> cause UB later... like, turn <code>&amp;mut Vec&lt;i32&gt;</code> into <code>*mut [MaybeUninit&lt;u8&gt;]</code> and then fill this will all-0, now the original <code>Vec</code> ref points to something invalid</p>",
        "id": 187163486,
        "sender_full_name": "RalfJ",
        "timestamp": 1580566124
    },
    {
        "content": "<p>So summerized, in general, yes its okey to go from <code>&amp;mut T</code> -&gt; <code>*mut [MaybeUninit&lt;u8&gt;]</code>, and use that raw slice, except it depends on the type of T what operations are considered 'sound' on that raw slice.</p>",
        "id": 187163731,
        "sender_full_name": "DutchGhost",
        "timestamp": 1580566642
    },
    {
        "content": "<p>\"soundness\" is defined as \"cannot be used by safe code to cause UB\"</p>",
        "id": 187167643,
        "sender_full_name": "RalfJ",
        "timestamp": 1580574037
    },
    {
        "content": "<p>so it's just not a term that makes much sense when it comes to raw pointers</p>",
        "id": 187167651,
        "sender_full_name": "RalfJ",
        "timestamp": 1580574066
    },
    {
        "content": "<p>but other than terminology nits I think we are in agreement</p>",
        "id": 187167656,
        "sender_full_name": "RalfJ",
        "timestamp": 1580574077
    },
    {
        "content": "<p>(I think careful use of terminology is important when talking about subtle issues such as this, hence the nitpicking. I hope I'm not overdoing it.)</p>",
        "id": 187167668,
        "sender_full_name": "RalfJ",
        "timestamp": 1580574110
    },
    {
        "content": "<p>We need a term for \"unsafe code can do this and it's okay\" contrasted with the opposite of \"unsafe code can do that but it's not okay\" (which we call \"UB\" of course).</p>",
        "id": 187195343,
        "sender_full_name": "Lokathor",
        "timestamp": 1580629917
    },
    {
        "content": "<p>So, that term doesn't have to be \"sound\" but also since it's a state of being able to do something and not cause UB, \"sound\" seems fine to me.</p>",
        "id": 187195388,
        "sender_full_name": "Lokathor",
        "timestamp": 1580629964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224097\">@DutchGhost</span> correct, <em>creation</em> of the <code>*mut [MaybeUninit&lt;u8&gt;]</code> is always fine, <em>usage</em> isn't necessarily fine.</p>",
        "id": 187195402,
        "sender_full_name": "Lokathor",
        "timestamp": 1580630027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> hm... \"UB-free\"?^^</p>",
        "id": 187483822,
        "sender_full_name": "RalfJ",
        "timestamp": 1580929414
    }
]