[
    {
        "content": "<p>Out of interest, I took a look at <a href=\"https://github.com/seanmonstar/num_cpus/blob/master/src/lib.rs\" target=\"_blank\" title=\"https://github.com/seanmonstar/num_cpus/blob/master/src/lib.rs\">https://github.com/seanmonstar/num_cpus/blob/master/src/lib.rs</a> .<br>\nI noticed a couple of <code>mem::uninitialized()</code> and <code>mem::zeroed()</code> calls, and wondered why MaybeUninit isn't used instead.</p>\n<p>One answer I could come up with is that MaybeUninit isn't FFI - safe, but Im not sure. Could anyone clarify if it is FFI - safe, and if there are any niches like \"Its just as FFI safe as the T it holds inside\"?</p>\n<p>(also, are the uses of <code>mem::uninitialized()</code> and <code>mem::zeroed()</code> sound in num_cpu's? or should they switch asap?)</p>",
        "id": 172049358,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564501223
    },
    {
        "content": "<blockquote>\n<p>I noticed a couple of mem::uninitialized() and mem::zeroed() calls, and wondered why MaybeUninit isn't used instead.</p>\n</blockquote>\n<p>Is that code older than 2 weeks ? If so, then the answer is probably that MaybeUninit was not available in stable or did not even exist when that code was written.</p>",
        "id": 172054304,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564504939
    },
    {
        "content": "<p>The code appears to be 2 years old.</p>",
        "id": 172054343,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564504996
    },
    {
        "content": "<p>So the answer is probably that MaybeUninit did not exist when that code was written.</p>",
        "id": 172054360,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564505010
    },
    {
        "content": "<p>It could be, although there was a commit last month.<br>\nAnyway, I made a pr for it.</p>",
        "id": 172056906,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564506764
    },
    {
        "content": "<blockquote>\n<p>also, are the uses of mem::uninitialized() and mem::zeroed() sound in num_cpu's?</p>\n</blockquote>\n<p>the ones for <code>zeroed</code> are likely fine, I guess <code>cpu_set_t</code> is just an integer type.<br>\nthe ones for <code>uninitialized</code> are not fine under the current strict rules.</p>",
        "id": 172063239,
        "sender_full_name": "RalfJ",
        "timestamp": 1564511136
    },
    {
        "content": "<blockquote>\n<p>It could be, although there was a commit last month.</p>\n</blockquote>\n<p>You can right click on the line on github and click on \"blame\", it shows that some of the lines you mention where last modified 2 years ago.</p>\n<blockquote>\n<p>Anyway, I made a pr for it.</p>\n</blockquote>\n<p>Using MaybeUninit will bump the minimum supported Rust version to the latest one, which is a major semver breaking change and means that the package won't be buildable on Debian, Ubuntu, etc. when using the system toolchain</p>",
        "id": 172106302,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564559753
    },
    {
        "content": "<p>num_cpus is a super popular package, I would recommend being careful when rolling these kind of breaking changes</p>",
        "id": 172106375,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564559823
    },
    {
        "content": "<blockquote>\n<p>which is a major semver breaking change</p>\n</blockquote>\n<p>I don't think there is consensus on whether bumping the MSRV is semver-breaking or not</p>",
        "id": 172106859,
        "sender_full_name": "RalfJ",
        "timestamp": 1564560256
    },
    {
        "content": "<p>Facts do not need consensus.</p>",
        "id": 172108806,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564562336
    },
    {
        "content": "<p>I haven't seen anybody claim that bumping the MSRV does not break Rust code, and it is a claim that is trivial to refute.</p>",
        "id": 172108898,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564562414
    },
    {
        "content": "<p>What there is no consensus about is whether bumping the MSRV results in \"acceptable\" breakage and whether it should require a major semver version bump. But that has nothing to do whether the change is breaking. </p>\n<p>Some people were complaining on reddit last month that their code broke because a new method was added to the standard library.</p>",
        "id": 172109007,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564562527
    },
    {
        "content": "<p>A lot of people were trying to explain to them that those changes are not breaking, yet most of them did not get through to those users because they were pointing out the fact that their code is correct and was compiling yesterday but does not compile today anymore.</p>",
        "id": 172109065,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564562615
    },
    {
        "content": "<p>Firefox was holding the latest Debian release back because it did not compile with the toolchain it was using.</p>",
        "id": 172109134,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564562676
    },
    {
        "content": "<p>Our non-breaking changes policies aren't really policies about what are breaking changes and what are not. They are policies about which code we are ok with breaking. That does not mean that changes break no code, and bumping num_cpus to the latest released Rust version to fix undefined behavior would mean that Ubuntu, Debian, etc. cannot package that version of the crate because it does not compile with their toolchains. So if you wanted to make a big impact by fixing undefined behavior, doing it in such a way that cannot be distributed achieves very little short term.</p>",
        "id": 172109360,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564562858
    },
    {
        "content": "<blockquote>\n<p>Facts do not need consensus.</p>\n</blockquote>\n<p>you are making a particular interpretation of semver here. there's nothing factual about that.</p>",
        "id": 172109436,
        "sender_full_name": "RalfJ",
        "timestamp": 1564562902
    },
    {
        "content": "<p>I think it is a perfectly reasonable stanza to say \"my crate supports the latest 2 stable releases of Rust, and if a change only breaks with older compilers, that's not semver-breaking\"</p>",
        "id": 172109463,
        "sender_full_name": "RalfJ",
        "timestamp": 1564562939
    },
    {
        "content": "<p>I have seen such discussions come up several times. Not everyone shares your interpretation of semver, and pretending that it is the only interpretation won't change that.</p>",
        "id": 172109490,
        "sender_full_name": "RalfJ",
        "timestamp": 1564562972
    },
    {
        "content": "<p>I didn't suggest to bump the major semver version anywhere</p>",
        "id": 172109505,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564562994
    },
    {
        "content": "<p>I mentioned the fact that bumping the MSRV version breaks code</p>",
        "id": 172109551,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563004
    },
    {
        "content": "<p>\"semver breaking\" is defined as what triggers a major semver bump</p>",
        "id": 172109565,
        "sender_full_name": "RalfJ",
        "timestamp": 1564563014
    },
    {
        "content": "<p>saying something is semver breaking but doesnt cause a bump is self-contradicting</p>",
        "id": 172109582,
        "sender_full_name": "RalfJ",
        "timestamp": 1564563032
    },
    {
        "content": "<p>then I retract that, you are right that there are many interpretations about what semver means</p>",
        "id": 172109589,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563043
    },
    {
        "content": "<p>I specifically said <em>semver breaking</em>, not <em>breaking</em>. Causing inference failure by implementing a new trait is also definitely \"breaking\" code. it is not <em>semver breaking</em> though.</p>",
        "id": 172109603,
        "sender_full_name": "RalfJ",
        "timestamp": 1564563065
    },
    {
        "content": "<p>what I meant to say is that bumping the MSRV often breaks a lot of code</p>",
        "id": 172109615,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563076
    },
    {
        "content": "<p>I tried bumping the MSRV of libc crate in march to Rust 1.20</p>",
        "id": 172109624,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563092
    },
    {
        "content": "<p>I had to revert the change</p>",
        "id": 172109628,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563096
    },
    {
        "content": "<p>because a lot of projects broke</p>",
        "id": 172109632,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563103
    },
    {
        "content": "<p>we are in 2019, and libc targets Rust 1.13.0</p>",
        "id": 172109641,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563116
    },
    {
        "content": "<p>it breaks code for users of old compilers. not sure if that means the code is broken. but I agree with the gist.</p>",
        "id": 172109658,
        "sender_full_name": "RalfJ",
        "timestamp": 1564563120
    },
    {
        "content": "<p>it makes code that used to compile not compile anymore</p>",
        "id": 172109717,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563142
    },
    {
        "content": "<p>with old compilers</p>",
        "id": 172109724,
        "sender_full_name": "RalfJ",
        "timestamp": 1564563151
    },
    {
        "content": "<p>you might not consider this as breaking, because old compilers</p>",
        "id": 172109730,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563156
    },
    {
        "content": "<p>other people say it broke my bash script, therefore is breaking</p>",
        "id": 172109738,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563170
    },
    {
        "content": "<p>I guess all I am saying is \"broken\" is a compiler-version-relative notion here. but in the end for a user stuck on an old compiler that doesn't help, which is why I agree with your sentiment, just not with all of your terminology.</p>",
        "id": 172109763,
        "sender_full_name": "RalfJ",
        "timestamp": 1564563198
    },
    {
        "content": "<p>calling it \"semver breaking\" is controversial, depends on who is doing the releases and who is consuming them, and what there opinions are</p>",
        "id": 172109791,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563233
    },
    {
        "content": "<p>we do automatically check the libc crate on CI for all API semver breaking changes, and we do break semver every release</p>",
        "id": 172109851,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563258
    },
    {
        "content": "<p>because it is our opinion that some changes do not break as much code as others</p>",
        "id": 172109861,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563279
    },
    {
        "content": "<p>we have \"technical semver breaking changes\" for all changes that should technically require a semver major bump because they break some code</p>",
        "id": 172109898,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563312
    },
    {
        "content": "<blockquote>\n<p>we do automatically check the libc crate on CI for all API semver breaking changes, and we do break semver every release</p>\n</blockquote>\n<p>ever minor release, that is? or even patch release? (not sure if libc is 1.0 yet so the difference would matter)</p>",
        "id": 172109899,
        "sender_full_name": "RalfJ",
        "timestamp": 1564563312
    },
    {
        "content": "<p>and we have \"non-technical breaking changes\" for ones that are breaking according to the \"API guidelines\"</p>",
        "id": 172109913,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563329
    },
    {
        "content": "<p>every patch release</p>",
        "id": 172109921,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563336
    },
    {
        "content": "<p>libc does not do minor or major releases</p>",
        "id": 172109931,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563345
    },
    {
        "content": "<p>(it can't without breaking the world)</p>",
        "id": 172109985,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563366
    },
    {
        "content": "<p>there is a tool that puts two version of your crate into a third crate, and compares the typed AST of both crate versions, and produces a diff</p>",
        "id": 172110070,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563456
    },
    {
        "content": "<p>the diff includes whether the change is non-breaking, or whether it can break code, whether the breakage requires a patch version, minor version, major version bump, etc.</p>",
        "id": 172110128,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563484
    },
    {
        "content": "<p>pretty much all changes that add new items can break code for people doing glob imports, for example</p>",
        "id": 172110136,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563500
    },
    {
        "content": "<p><a href=\"https://github.com/rust-dev-tools/rust-semverver/\" target=\"_blank\" title=\"https://github.com/rust-dev-tools/rust-semverver/\">https://github.com/rust-dev-tools/rust-semverver/</a> - that's the tool</p>",
        "id": 172110168,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564563556
    },
    {
        "content": "<p>I didn't think about if it was a breaking change or not. I'm not the author of num_cpu's, so the author can decide what to do with the pr I made.<br>\nBut, isn't fixing UB somewhat allowed to be a breaking change?<br>\nAnd people who don't have a compiler that supports MaybeUninit on stable can always use a previous version, no?</p>",
        "id": 172112800,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564566031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224097\">@DutchGhost</span> another way to fix the UB there might be to replace all <code>undefined</code> by <code>zeroed</code>. (I didn't check though if that is sufficient.)</p>",
        "id": 172114587,
        "sender_full_name": "RalfJ",
        "timestamp": 1564567901
    },
    {
        "content": "<blockquote>\n<p>we are in 2019, and libc targets Rust 1.13.0</p>\n</blockquote>\n<p>An unreasonable situation if you ask me... the number of people who still use 1.13.0 are how many?...</p>",
        "id": 172145715,
        "sender_full_name": "centril",
        "timestamp": 1564593388
    },
    {
        "content": "<p>As I said, I tried to bump libc to 1.20 or so in march, and a couple of people complained</p>",
        "id": 172152748,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564597731
    },
    {
        "content": "<p>it isn't worth it for us to bump it to Rust 1.15 or something like that, because there isn't anything there that helps</p>",
        "id": 172152803,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564597758
    },
    {
        "content": "<p>like, IIRC, the regex crate supports old Rust versions, because it is required to build ripgrep, which is shipped by linux distros fixed with old rust toolchains, and might still ship patches</p>",
        "id": 172152858,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564597801
    },
    {
        "content": "<p>that crate depends on libc, so we can't bump libc beyond what it supports</p>",
        "id": 172152951,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564597838
    },
    {
        "content": "<p>all of this might be much easier if libc could just release a breaking version</p>",
        "id": 172153120,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564597937
    },
    {
        "content": "<p>I'd like the rust community to be a lot more aware of minimum rust version and that bumping it should always go with a semver version break bump as well (0.y+1 for pre-1.0, or x+1 for post 1.0, etc)</p>\n<p>unfortunately, the RFC for that seems to be stalled a bit :/</p>",
        "id": 172188516,
        "sender_full_name": "Lokathor",
        "timestamp": 1564631458
    },
    {
        "content": "<p>I think that would be a desaster</p>",
        "id": 172198128,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644538
    },
    {
        "content": "<p>it would basically grind the adoption of new features to a halt -- libraries tend to avoid major version bumps, for good reasons</p>",
        "id": 172198146,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644564
    },
    {
        "content": "<blockquote>\n<p>But, isn't fixing UB somewhat allowed to be a breaking change?</p>\n</blockquote>\n<p>Do you know that the behavior is undefined?</p>",
        "id": 172198240,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644631
    },
    {
        "content": "<p>AFAICT the behavior is unspecified for <code>mem::uninitialized()</code>, and the behavior of that code is defined for <code>mem::zeroed()</code>. Those are repr(C) types using integers and pointers, and all bytes zeroed is a valid representaiton for them.</p>",
        "id": 172198263,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644666
    },
    {
        "content": "<p>Using <code>mem::uninitialized()</code> for those types _might_ be ok, it definetely is ok with the current implementation.</p>",
        "id": 172198283,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644690
    },
    {
        "content": "<blockquote>\n<p>Using <code>mem::uninitialized()</code> for those types _might_ be ok, it definetely is ok with the current implementation.</p>\n</blockquote>\n<p>we consider it UB though</p>",
        "id": 172198293,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644711
    },
    {
        "content": "<p>Where?</p>",
        "id": 172198296,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644718
    },
    {
        "content": "<p>and call it out as such in e.g. the MaybeUninit docs</p>",
        "id": 172198298,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644720
    },
    {
        "content": "<p>So the MaybeUninit docs makes it undefined behavior?</p>",
        "id": 172198343,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644732
    },
    {
        "content": "<p>I dont really see what \"unspecified\" means here</p>",
        "id": 172198347,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644739
    },
    {
        "content": "<p>not having decided that it is allowed makes it UB</p>",
        "id": 172198348,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644745
    },
    {
        "content": "<p>Either we explicitly say that it is UB, or it is unspecified.</p>",
        "id": 172198356,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644763
    },
    {
        "content": "<p>\"unspecified\" works for things like layout where the compiler makes <em>a</em> choice but doesnt say which. but for steps of the abstract machine, if \"unspecified\" means \"the machine can take any step\", that is equivalent to UB.</p>",
        "id": 172198395,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644794
    },
    {
        "content": "<p>Whether uninitialized is a valid representation of an <code>i8</code></p>",
        "id": 172198428,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644825
    },
    {
        "content": "<p>Is that a step in the abstract machine?</p>",
        "id": 172198485,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644848
    },
    {
        "content": "<p>no the step(s) is \"execute <code>let x: u8 = mem::uninitialized()</code>\"</p>",
        "id": 172198498,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644869
    },
    {
        "content": "<p>that was an example of how to use <code>mem::uninitialized()</code> in their docs for a long time</p>",
        "id": 172198506,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644889
    },
    {
        "content": "<blockquote>\n<p>Whether uninitialized is a valid representation of an <code>i8</code></p>\n</blockquote>\n<p>I see, that's how you see this. interesting.</p>",
        "id": 172198509,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644891
    },
    {
        "content": "<p>that code is 2 years old</p>",
        "id": 172198513,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644901
    },
    {
        "content": "<p>this might work. so far the wording we (a few people including <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  and me) have been using is that these things are UB until we decided that they are not</p>",
        "id": 172198528,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644914
    },
    {
        "content": "<p>and you did not object to me using that wording for <a href=\"https://doc.rust-lang.org/nightly/nomicon/\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nomicon/\">https://doc.rust-lang.org/nightly/nomicon/</a></p>",
        "id": 172198544,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644943
    },
    {
        "content": "<p>I tend to think that everything is unspecified, and that if something is UB, it should be UB by design</p>",
        "id": 172198553,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644956
    },
    {
        "content": "<p>and have wording and rationale for it</p>",
        "id": 172198554,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644961
    },
    {
        "content": "<p>even if the wording is \"we don't know what to do here, so this is UB for now\"</p>",
        "id": 172198598,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644971
    },
    {
        "content": "<p>that doesnt work, unless unspecified = UB</p>",
        "id": 172198601,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644980
    },
    {
        "content": "<p>because then it would be a breaking change to make it UB later</p>",
        "id": 172198605,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644986
    },
    {
        "content": "<p>for integers we have enough of an idea of the spec that we boiled it down to two options, so there we have the option of saying \"A or B\"</p>",
        "id": 172198617,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645013
    },
    {
        "content": "<p>well then <code>let x: u8 = mem::uninitialized();</code> can't be UB without introducing a breaking change</p>",
        "id": 172198619,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645019
    },
    {
        "content": "<p>but in other cases that we explored less, we are nowhere close so that</p>",
        "id": 172198622,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645022
    },
    {
        "content": "<p>because that's the minimum the <code>mem::uninitialized</code> docs showed for it</p>",
        "id": 172198630,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645034
    },
    {
        "content": "<p>you are basically saying because Rust 1.0 didnt come with a full UB spec, we cannot make anything UB as it was all just unspecified?</p>",
        "id": 172198638,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645053
    },
    {
        "content": "<p>this is not C, where we claim any kind of exhaustive standard or so</p>",
        "id": 172198645,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645062
    },
    {
        "content": "<p>and AFAIK in C, the \"default\" when the standard imposes no requirement actually is UB</p>",
        "id": 172198653,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645075
    },
    {
        "content": "<p>It did come with docs</p>",
        "id": 172198654,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645077
    },
    {
        "content": "<p>and those docs do show that some things work</p>",
        "id": 172198692,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645084
    },
    {
        "content": "<p>yes for <code>mem::uninitialized</code> mistakes were made</p>",
        "id": 172198699,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645093
    },
    {
        "content": "<p>breaking those things are breaking changes, I do think that breaking changes are OK</p>",
        "id": 172198703,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645098
    },
    {
        "content": "<p>its an engineering tradeoff whether they are worth it</p>",
        "id": 172198719,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645107
    },
    {
        "content": "<p>but given that we haven't really formulated anywhere what <code>let x: u8 = mem::uninitialized();</code> does, and that in the UCG there seems to be consensus that this should work or otherwise too much code would break</p>",
        "id": 172198735,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645140
    },
    {
        "content": "<p>but there's tons of other open questions around deref/offset of dangling pointers, int-ptr-casts, ptr comparison, and then all the aliasing stuff of course</p>",
        "id": 172198742,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645145
    },
    {
        "content": "<p>sending PRs to crates fixing that is unecessary churn</p>",
        "id": 172198746,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645152
    },
    {
        "content": "<p>and it creates \"myths\" that those things are UB, that might survive a future RFC that says they are not</p>",
        "id": 172198774,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645181
    },
    {
        "content": "<p>so sure, if <code>let x: u8 = mem::uninitialized();</code> is UB, then we should fix those now, but we should argue why that is UB, what that UB buys us, and we should not in 3 months pass an RFC that says that's ok because people from the outside would rightfully think that we have no clue what we are doing</p>",
        "id": 172198891,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645283
    },
    {
        "content": "<p>if we are changing our minds about such \"basic\" things every 3 months</p>",
        "id": 172198903,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645293
    },
    {
        "content": "<p>(sorry had to switch buses)</p>",
        "id": 172199347,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645755
    },
    {
        "content": "<blockquote>\n<p>sending PRs to crates fixing that is unecessary churn</p>\n</blockquote>\n<p>you mean specifically for uninitialized integers?</p>",
        "id": 172199398,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645803
    },
    {
        "content": "<p>I'd rather have a myth that makes people not use <code>mem::uninitialized</code> than a myth that makes them use it</p>",
        "id": 172199437,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645834
    },
    {
        "content": "<p>but I see your point</p>",
        "id": 172199456,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645858
    },
    {
        "content": "<p>my thinking was: if it can become UB at any point in the future, that's equivalent to already being UB from a \"I want my code to keep working\" perspective</p>",
        "id": 172199488,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645884
    },
    {
        "content": "<p>we should certainly encourage people to write new code using <code>MaybeUninit</code></p>",
        "id": 172199512,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645905
    },
    {
        "content": "<p>Sure, for new code I agree, but there is a lot of code already, and changing it is not only a cost, it is also an opportunity to teach people something. I fear that we waste this opportunity if we are not sure of what the semantics we want to teach are.</p>",
        "id": 172200820,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564647168
    },
    {
        "content": "<p>If these PR would say \"Hey, <code>let x: u8 = mem::uninitialized();</code> is \"ok\", but using MaybeUninit is safer and more idiomatic\" I would be ok with that</p>",
        "id": 172200854,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564647214
    },
    {
        "content": "<p>or even \"Hey, we don't know whether <code>let x: u8 = uninitialized();</code> is going to be \"ok\" or not right now, it might be, but either way, using <code>MaybeUninit</code> is safer and more idiomatic anyways, so prefer that\".</p>",
        "id": 172200958,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564647255
    },
    {
        "content": "<p>and I'm not only thinking about PRs here, but also about clippy lints, warnings, etc.</p>",
        "id": 172200974,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564647277
    },
    {
        "content": "<p>we could be liniting <code>mem::uninitialized</code> and <code>mem::zeroed</code> already, but we should do so with care of avoiding confusing users</p>",
        "id": 172201001,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564647306
    },
    {
        "content": "<blockquote>\n<p>or even \"Hey, we don't know whether <code>let x: u8 = uninitialized();</code> is going to be \"ok\" or not right now, it might be, but either way, using <code>MaybeUninit</code> is safer and more idiomatic anyways, so prefer that\".</p>\n</blockquote>\n<p>that's the message I am usually going for</p>",
        "id": 172202792,
        "sender_full_name": "RalfJ",
        "timestamp": 1564649272
    },
    {
        "content": "<p>also see my question above, we are specifically talking about uninitialized integers here, right?</p>",
        "id": 172202848,
        "sender_full_name": "RalfJ",
        "timestamp": 1564649301
    },
    {
        "content": "<blockquote>\n<p>we could be liniting <code>mem::uninitialized</code> and <code>mem::zeroed</code> already, but we should do so with care of avoiding confusing users</p>\n</blockquote>\n<p>I think we should start by linting (for both <code>uninitialized</code> and <code>zeroed</code>) for types that don't allow the all-0 bit pattern -- i.e., references, <code>NonNull</code>, <code>NonZero*</code>, <code>fn</code>. That's definitely UB, and it has already repeatedly caused issues in practice.</p>",
        "id": 172202889,
        "sender_full_name": "RalfJ",
        "timestamp": 1564649357
    },
    {
        "content": "<p>I wouldnt lint for things where the rules are still open, that seems odd</p>",
        "id": 172202907,
        "sender_full_name": "RalfJ",
        "timestamp": 1564649379
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>But, isn't fixing UB somewhat allowed to be a breaking change?</p>\n</blockquote>\n<p>Do you know that the behavior is undefined?</p>\n</blockquote>\n<p>From what I understand from ralf's blog <a href=\"https://www.ralfj.de/blog/2019/07/14/uninit.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2019/07/14/uninit.html\">https://www.ralfj.de/blog/2019/07/14/uninit.html</a> , is when you write <code>mem::uninitialized()</code>, and use the value as is, the compiler has the right to shoot you in the foot whenever it wants. (unless the type you create is fine being unitialized, but such types are zst's, and MaybeUninit itself currently).<br>\nCorrect me if I'm wrong, but that seem pretty undefined to me.</p>\n<blockquote>\n<p>If these PR would say \"Hey, <code>let x: u8 = mem::uninitialized();</code> is \"ok\", but using MaybeUninit is safer and more idiomatic\" I would be ok with that</p>\n</blockquote>\n<p>I did exactly this: <a href=\"https://github.com/seanmonstar/num_cpus/pull/82\" target=\"_blank\" title=\"https://github.com/seanmonstar/num_cpus/pull/82\">https://github.com/seanmonstar/num_cpus/pull/82</a></p>\n<p>Also, mem::uninitialized() will be depricated in 1.39, so eventually there will be a a kinda soft-force to switch over, sooner or later.</p>",
        "id": 172229390,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564672123
    },
    {
        "content": "<blockquote>\n<p>the compiler has the right to shoot you in the foot whenever it wants. (unless the type you create is fine being unitialized, but such types are zst's, and MaybeUninit itself currently).<br>\nCorrect me if I'm wrong, but that seem pretty undefined to me</p>\n</blockquote>\n<p>the thing is, the compiler curently <em>won't</em> shoot you in the foot if it is an integer type</p>",
        "id": 172229816,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672466
    },
    {
        "content": "<p>and there's a lot of code relying on that. old code from when there was just no other way to work with uninitialized memory.</p>",
        "id": 172229832,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672490
    },
    {
        "content": "<p>now one could say that code is wrong and shouldnt have been written (like some people argued for code that has panics passing through FFI), but well, the code exists and we have to do the best we can to deal with that.</p>",
        "id": 172229861,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672521
    },
    {
        "content": "<p>Whether <code>let x: u8 = mem::uninitialized()</code> <em>should</em> be UB is being discussed at <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71\">https://github.com/rust-lang/unsafe-code-guidelines/issues/71</a></p>",
        "id": 172229896,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672550
    },
    {
        "content": "<p>and my personal position is that no, it should not be UB. (this has changed since that discussion started more than half a year ago.)</p>",
        "id": 172229961,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672569
    },
    {
        "content": "<p>so this is basically \"UB for forwards-compatibility\"</p>",
        "id": 172229969,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672577
    },
    {
        "content": "<p>which is unlike e.g. <code>let x: bool = mem::uninitialized()</code> which is UB \"for real\" and <em>does</em> already cause problems and there is no intention to make this defined.</p>",
        "id": 172229990,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672603
    },
    {
        "content": "<p>I think that when sending PRs to libraries, you better make sure that the things are \"hard\" UB if they are not super clearly specified yet - for num_cpus, one needs to inspect the types involved, and see if they use <code>bool</code>, or <code>fn</code> or <code>&amp;T</code>, and based on that make an assesment</p>",
        "id": 172230774,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673194
    },
    {
        "content": "<p>at least until the specification advances a bit</p>",
        "id": 172230788,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673207
    },
    {
        "content": "<blockquote>\n<p>I think we should start by linting (for both uninitialized and zeroed) for types that don't allow the all-0 bit pattern -- i.e., references, NonNull, NonZero*, fn. That's definitely UB, and it has already repeatedly caused issues in practice.</p>\n</blockquote>\n<p>PRs welcome <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 172263316,
        "sender_full_name": "centril",
        "timestamp": 1564694887
    },
    {
        "content": "<p>time machines welcome ;)</p>",
        "id": 172263881,
        "sender_full_name": "RalfJ",
        "timestamp": 1564695367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  I don't mean from you necessarily ;)</p>",
        "id": 172264044,
        "sender_full_name": "centril",
        "timestamp": 1564695522
    }
]