[
    {
        "content": "<p>You can't round-trip a Box for example from <code>Box&lt;u64&gt;</code> -&gt; <code>Box&lt;()&gt;</code> -&gt; <code>Box&lt;u64&gt;</code>, because as a <code>Box&lt;()&gt;</code> it has provenance over fewer bytes. Can I complain about this in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/258\">https://github.com/rust-lang/unsafe-code-guidelines/issues/258</a> or should I create a new UCG issue?</p>",
        "id": 278423944,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649529100
    },
    {
        "content": "<p>Maybe use non-ZST for both? Regardless of provenance, <code>Box&lt;()&gt;</code> doesn't actually hit the allocator at all.</p>",
        "id": 278426934,
        "sender_full_name": "cuviper",
        "timestamp": 1649533209
    },
    {
        "content": "<p>I think that's <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\">https://github.com/rust-lang/unsafe-code-guidelines/issues/134</a></p>",
        "id": 278426937,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1649533214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> The problem is that <code>eyre</code> does actually attempt to do this round-trip in order to type-erase a generic parameter inside the <code>Box</code></p>",
        "id": 278427199,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649533612
    },
    {
        "content": "<p>Ugh... by what means? I thought all the raw box conversions required compatible <code>Layout</code>.</p>",
        "id": 278427373,
        "sender_full_name": "cuviper",
        "timestamp": 1649533851
    },
    {
        "content": "<p>well, <em>technically</em> only if you drop that Box, otherwise it's just the pointer uniqueness-asserting rules you need to worry about when moving the box</p>",
        "id": 278427481,
        "sender_full_name": "Lokathor",
        "timestamp": 1649533982
    },
    {
        "content": "<p>oh, and alignment of the target i suppose</p>",
        "id": 278427500,
        "sender_full_name": "Lokathor",
        "timestamp": 1649534015
    },
    {
        "content": "<p>all the normal \"reference cast\" rules basically</p>",
        "id": 278427506,
        "sender_full_name": "Lokathor",
        "timestamp": 1649534031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <code>transmute</code></p>",
        "id": 278427642,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649534216
    },
    {
        "content": "<p>I commented with code snippets on the link Tavian provided</p>",
        "id": 278427657,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649534257
    },
    {
        "content": "<p>Why do it in this way?</p>",
        "id": 278427707,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1649534300
    },
    {
        "content": "<p>Well if \"erase the generic\" is the goal... actually that sounds tricky.</p>",
        "id": 278427729,
        "sender_full_name": "Lokathor",
        "timestamp": 1649534387
    },
    {
        "content": "<p>I <em>think</em> it makes bubbling up errors a lot simpler when they all have the same type. Do you have another way to type-erase? I found one other way to fix this: Boxing the E so that the transmutee has the same provenance</p>",
        "id": 278427735,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649534400
    },
    {
        "content": "<p><code>Box::into_raw</code> and cast to a <code>*mut ()</code>?</p>",
        "id": 278427823,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1649534430
    },
    {
        "content": "<p>Hmm, even <code>Box::from_raw</code> is fuzzier about this than I would like, only talking about safety for destruction. I would have preferred to require matching layout immediately.</p>",
        "id": 278427830,
        "sender_full_name": "cuviper",
        "timestamp": 1649534436
    },
    {
        "content": "<p>You know what, that's a good idea</p>",
        "id": 278427833,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649534442
    },
    {
        "content": "<p>But I'm not sure it's easy to implement</p>",
        "id": 278427836,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649534455
    },
    {
        "content": "<p>It's quite similar to what Tokio does to type-erase the futures you spawn.</p>",
        "id": 278427857,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1649534485
    },
    {
        "content": "<p>For deallocating, you can store a function pointer that knows how to deallocate it together with it.</p>",
        "id": 278427926,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1649534562
    },
    {
        "content": "<p>Yeah, rayon does this too</p>",
        "id": 278427991,
        "sender_full_name": "cuviper",
        "timestamp": 1649534651
    },
    {
        "content": "<p>(That's what c++ <code>shared_ptr</code> does all the time, as well)</p>",
        "id": 278428549,
        "sender_full_name": "scottmcm",
        "timestamp": 1649535527
    },
    {
        "content": "<p>Ah, yeah if you keep it as a pointer to () instead of a box that's probably fine</p>",
        "id": 278428954,
        "sender_full_name": "Lokathor",
        "timestamp": 1649536117
    },
    {
        "content": "<p>Yeah, because Box is special to SB which I intensely dislike</p>",
        "id": 278429426,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649536776
    },
    {
        "content": "<p>It's worth noting that <code>Box</code> is a std-internal <code>ptr::Unique</code>, not <code>ptr::NonNull</code>, and we actively tag <code>Box</code> with <code>noalias</code> because of it</p>",
        "id": 278443352,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649557522
    },
    {
        "content": "<p>we may be able to make <code>Box</code> less special in the future (e.g. <code>DerefMove</code>) but it's inherently more restricted than a userspace implementation on top of <code>ptr::NonNull</code> because of the uniqueness</p>",
        "id": 278443404,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649557584
    },
    {
        "content": "<p>I think userspace could implement <code>Box</code> by using \"<code>&amp;'unsafe mut T</code>\". Or, using today's Rust, <code>&amp;'static mut T</code> and being <em>verrry</em> careful.</p>",
        "id": 278443779,
        "sender_full_name": "Christopher Durham",
        "timestamp": 1649558203
    },
    {
        "content": "<p>Yes? My concern is that nobody expects Box to have SB-unique properties. There's an entire crate devoted to enshrining that fact. And C++ has an owning pointer which uses \"unique\" to mean something very different.</p>\n<p>I think that regardless of whether users can implement Box, they won't want to.</p>",
        "id": 278444733,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649559860
    },
    {
        "content": "<p>I could have sworn that the fact <code>Box</code> was unique was stated somewhere, but I can't find it</p>",
        "id": 278444955,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649560266
    },
    {
        "content": "<p>The only note is in the reference where it's noted that it's a validity requirement for <code>Box</code> to point at a valid value</p>",
        "id": 278444963,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649560298
    },
    {
        "content": "<p>But <code>Box</code> has also been <code>ptr::Unique</code> since the start</p>",
        "id": 278445001,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649560324
    },
    {
        "content": "<p>So?</p>",
        "id": 278445020,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649560395
    },
    {
        "content": "<p>In any case, <code>stable_deref_trait</code> also implements <code>StableDeref</code> for <code>&amp;mut</code> which is definitely wrong</p>",
        "id": 278445063,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649560459
    },
    {
        "content": "<p>So supporting a \"<code>Box</code> shouldn't be unique\" off of <code>StableDeref</code> is iffy</p>",
        "id": 278445071,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649560486
    },
    {
        "content": "<p>Even the documentation for Unique, which is not even public, doesn't even suggest that Unique has the SB uniqueness property</p>",
        "id": 278445074,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649560493
    },
    {
        "content": "<p>I can cite other crates which assume it is stable if you want</p>",
        "id": 278445088,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649560523
    },
    {
        "content": "<p>string_cache, lru, owning_ref, tokio-utils off the top of my head</p>",
        "id": 278445097,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649560561
    },
    {
        "content": "<p>owning_ref is derived from stable_deref and has other soundness issues as well, IIRC tokio stores <code>*mut ()</code></p>",
        "id": 278445157,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649560675
    },
    {
        "content": "<p>Maybe I've mandella effected myself but I feel like <code>Box</code> has always been a \"unique pointer\"</p>",
        "id": 278445198,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649560693
    },
    {
        "content": "<p>tokio-utils does SB invalidation with a Box</p>",
        "id": 278445199,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649560694
    },
    {
        "content": "<p>I currently have a PR up to fix it</p>",
        "id": 278445202,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649560706
    },
    {
        "content": "<p>It certainly feels like there's a lot of Mandela effect here. Ralf has the same line about how <code>Unique</code> somehow gives SB permission to treat <code>Box</code> as it does <code>&amp;mut</code> and also <code>Vec</code>, because it also uses <code>Unique</code>. I really don't know where that's coming from. All I ever heard about aliasing properties in Rust before I got into this was that <code>&amp;mut</code> was special. I wouldn't be surprised if that is the impression that all these other authors have as well.</p>",
        "id": 278445218,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649560796
    },
    {
        "content": "<p>I think the docs at least <em>can</em> be read to justify the SB unique / <code>noalias</code> behavior:</p>\n<blockquote>\n<p>Unlike <code>*mut T</code>, <code>Unique&lt;T&gt;</code> behaves \"as if\" it were an instance of <code>T</code>.</p>\n</blockquote>\n<p>This would imply that <code>&amp;mut Unique&lt;T&gt;</code> behaves \"as if\" it were <code>&amp;mut T</code></p>",
        "id": 278445260,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649560807
    },
    {
        "content": "<p>Consider also</p>\n<blockquote>\n<p><strong>It also implies the kind of strong aliasing guarantees</strong> an instance of <code>T</code> can expect: the referent of the pointer should not be modified without a unique path to its owning Unique.</p>\n</blockquote>",
        "id": 278445286,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649560878
    },
    {
        "content": "<p>Oh I must have blown right past that. That's interesting.<br>\nWould be cool if this were publicly documented though.</p>",
        "id": 278445287,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649560881
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/559c01931b94d82b31d9180f5311244321530607/library/core/src/ptr/unique.rs#L11-L15\">https://github.com/rust-lang/rust/blob/559c01931b94d82b31d9180f5311244321530607/library/core/src/ptr/unique.rs#L11-L15</a></p>",
        "id": 278445291,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649560896
    },
    {
        "content": "<p>Argh I can't follow the git-blame past the point where Ralf moved the stuff from file to file, when <code>rust-lang/rust</code> was temporarily a normal Rust crate</p>",
        "id": 278445355,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649560985
    },
    {
        "content": "<p>Blame this one: <a href=\"https://github.com/rust-lang/rust/blame/524580312039e4fa5ccf91e8f7093cd755bc1aad/src/libcore/ptr.rs#L2750-L2754\">https://github.com/rust-lang/rust/blame/524580312039e4fa5ccf91e8f7093cd755bc1aad/src/libcore/ptr.rs#L2750-L2754</a></p>",
        "id": 278445466,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649561172
    },
    {
        "content": "<p>That's interesting. But it still doesn't support the kind of SB invalidation that you get from <code>Box</code>.</p>",
        "id": 278445538,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649561384
    },
    {
        "content": "<blockquote>\n<p>the kind of strong aliasing guarantees an instance of <code>T</code> can expect:<br>\nthe referent of the pointer should not be modified without a unique path to<br>\nits owning Unique.</p>\n</blockquote>\n<p>The problem I have is that we have UB according to SB even without mutation of the referent</p>",
        "id": 278445606,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649561452
    },
    {
        "content": "<p>Not surprising that <span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> is responsible for those doc lines <a href=\"https://github.com/rust-lang/rust/pull/41064\">https://github.com/rust-lang/rust/pull/41064</a></p>",
        "id": 278445610,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649561463
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/6e2efe3aa477bdc8d7ccdb904523ad18d612bbb6\">https://github.com/rust-lang/rust/commit/6e2efe3aa477bdc8d7ccdb904523ad18d612bbb6</a></p>",
        "id": 278445616,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649561489
    },
    {
        "content": "<p>I believe the \"as if\" clause justifies the SB treatment</p>",
        "id": 278445656,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649561530
    },
    {
        "content": "<p>As in, <code>Unique&lt;T&gt;</code> is transparent to SB</p>",
        "id": 278445658,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649561549
    },
    {
        "content": "<p>If that is true, we should delete the rest of that paragraph because it is misleading.</p>",
        "id": 278445672,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649561603
    },
    {
        "content": "<p>But also, I think the UB we will unleash on the ecosystem by treating <code>Vec</code> as <code>Unique</code> is not worth the dubious-if-any optimization value that it will provide, so we should change the documentation to remove that phrasing.</p>",
        "id": 278445723,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649561690
    },
    {
        "content": "<p>We already do mark <code>Vec</code> as <code>noalias</code> since it uses <code>Unique</code></p>",
        "id": 278445906,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649562049
    },
    {
        "content": "<p>But in <code>Vec</code>'s case I also do recall discussions about whether <code>push</code> invalidates pointers saying \"probably not if it doesn't reallocate\"</p>",
        "id": 278445915,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649562083
    },
    {
        "content": "<p>so</p>",
        "id": 278445916,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649562084
    },
    {
        "content": "<p>Vec does not currently get <code>noalias</code> afaict; aiui Box gets it from its own flags, and Unique is pointless opt-wise</p>",
        "id": 278445972,
        "sender_full_name": "Talchas",
        "timestamp": 1649562185
    },
    {
        "content": "<p>huh ok</p>",
        "id": 278445979,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649562225
    },
    {
        "content": "<p>I thought it was <code>Unique</code> specifically because of <code>raw_vec</code>'s <a href=\"https://github.com/rust-lang/rust/blob/559c01931b94d82b31d9180f5311244321530607/library/alloc/src/raw_vec.rs#L41\">https://github.com/rust-lang/rust/blob/559c01931b94d82b31d9180f5311244321530607/library/alloc/src/raw_vec.rs#L41</a></p>\n<blockquote>\n<p>Contains a <code>ptr::Unique</code> and thus endows the user with all related benefits.</p>\n</blockquote>",
        "id": 278446021,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649562276
    },
    {
        "content": "<p>SB also does shallow retagging, so I do not believe it actually sees through</p>",
        "id": 278446134,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649562494
    },
    {
        "content": "<p>And I'm honestly not sure if that makes it easier or harder, because I do have to explain to people why some code is UB only with a slice not a Vec, but also it makes less code UB.</p>",
        "id": 278446149,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649562578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120827\">Ben Kimock (Saethlin)</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Where.20do.20I.20complain.20about.20Box.20provenance.20behavior/near/278423944\">said</a>:</p>\n<blockquote>\n<p>You can't round-trip a Box for example from <code>Box&lt;u64&gt;</code> -&gt; <code>Box&lt;()&gt;</code> -&gt; <code>Box&lt;u64&gt;</code>, because as a <code>Box&lt;()&gt;</code> it has provenance over fewer bytes. Can I complain about this in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/258\">https://github.com/rust-lang/unsafe-code-guidelines/issues/258</a> or should I create a new UCG issue?</p>\n</blockquote>\n<p>depends; do you think you should be allowed to do the same with a <code>&amp;mut</code>?</p>",
        "id": 278476765,
        "sender_full_name": "RalfJ",
        "timestamp": 1649608096
    },
    {
        "content": "<p>and as for <code>Unique</code>, indeed my hope is to one day make <code>Unique</code> special rather than <code>Box</code>. not sure if that will make <span class=\"user-mention\" data-user-id=\"120827\">@Ben Kimock (Saethlin)</span> any less unhappy though. ;)<br>\nit might help with this particular example since <code>Unique</code> necessarily has no clue what the extent of the aliasing guarantee is -- it cannot do any subobject provenance. (otherwise it wouldnt work for <code>Vec</code>.)</p>",
        "id": 278476996,
        "sender_full_name": "RalfJ",
        "timestamp": 1649608337
    },
    {
        "content": "<p>in the end I totally leave the decision of where to put <code>Unique</code> up to others, but at least in the implementation the libs team has been quite clear about its intent here. I admit the docs might be not as clear about this as they should. nobody knows what to write about <code>Unique</code>...</p>\n<p>for <code>Box</code> we actually exploit this with optimizations (<code>noalias</code>), so I wanted to be sure I got at least that covered in Miri.</p>",
        "id": 278477110,
        "sender_full_name": "RalfJ",
        "timestamp": 1649608467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> How would making <code>Unique</code> special instead of <code>Box</code> help with this type-erasing <code>transmute</code>?</p>",
        "id": 278481060,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649613141
    },
    {
        "content": "<p>At least I think that's what you mean by \"this particular example\"</p>",
        "id": 278481077,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649613161
    },
    {
        "content": "<p><code>Unique</code> cannot do subobject provenance</p>",
        "id": 278481086,
        "sender_full_name": "RalfJ",
        "timestamp": 1649613169
    },
    {
        "content": "<p>ofc this all depends on what else happens in the code, but if literally all that happens is a transmute from <code>Box&lt;u64&gt;</code> to <code>Box&lt;()&gt;</code> and back, then I think this would work if we apply <code>Unique</code> semantics (and nothing on top)</p>",
        "id": 278481098,
        "sender_full_name": "RalfJ",
        "timestamp": 1649613207
    },
    {
        "content": "<p>So sinking the guarantee into <code>Unique</code> would prevent the provenance from shrinking?</p>",
        "id": 278481171,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649613287
    },
    {
        "content": "<p>yeah I think so</p>",
        "id": 278481249,
        "sender_full_name": "RalfJ",
        "timestamp": 1649613379
    },
    {
        "content": "<p>this is all speculative of course since no concrete model for <code>Unique</code> exists yet ;)</p>",
        "id": 278481253,
        "sender_full_name": "RalfJ",
        "timestamp": 1649613389
    },
    {
        "content": "<p>to clarify: Unique is unstable and 100% an implementation detail of std that I used to basically \"mark\" Box-like things to express intent/semantics. Whether it has any <em>real</em> language semantics at all is up to the discretion of lang/compiler people, and really has nothing to do with Unique itself, other than that it's clearly trying to indicate \"whatever rules exist for Box should probably exist for these other types\" (unless DerefMove or whatever is Truly Magic and Box and Vec are Truly Different).</p>",
        "id": 278497086,
        "sender_full_name": "Gankra",
        "timestamp": 1649635984
    },
    {
        "content": "<p>right but if the <code>Box</code>/<code>Vec</code> specs/docs don't mention anything about these types having special aliasing semantics, then we can't really expect users to uphold them...</p>",
        "id": 278497327,
        "sender_full_name": "RalfJ",
        "timestamp": 1649636313
    },
    {
        "content": "<p>Ideally (to me, at least), they'd document that they do have special aliasing rules.<br>\nI have no preference as an implementor that they'd have special provenance rules, but as a user I'd lean towards them not destroying provenance</p>\n<p><span class=\"user-mention silent\" data-user-id=\"137587\">Gankra</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Where.20do.20I.20complain.20about.20Box.20provenance.20behavior/near/278497086\">said</a>:</p>\n<blockquote>\n<p>to clarify: Unique is unstable and 100% an implementation detail of std that I used to basically \"mark\" Box-like things to express intent/semantics. Whether it has any <em>real</em> language semantics at all is up to the discretion of lang/compiler people, and really has nothing to do with Unique itself, other than that it's clearly trying to indicate \"whatever rules exist for Box should probably exist for these other types\" (unless DerefMove or whatever is Truly Magic and Box and Vec are Truly Different).</p>\n</blockquote>\n<p>Note: lccc's stdlib similarily has <code>Unique</code> in core::ptr, and <code>Unique</code> get's the xlang pointer attribute <code>unique</code> (which is rough equivalent of SB Unique, but on its own is allowed to point to nothing, and doesn't necessarily require nor grant write access).</p>",
        "id": 278498761,
        "sender_full_name": "Connor Horman",
        "timestamp": 1649638428
    },
    {
        "content": "<p>yeah basically: until they publically doc it / lang specs it or whatever, imo Stacked Borrows treating Box special is totally just miri messing around</p>",
        "id": 278499894,
        "sender_full_name": "Gankra",
        "timestamp": 1649640008
    },
    {
        "content": "<p>But I am willing to try to conform to that messing around</p>",
        "id": 278499903,
        "sender_full_name": "Gankra",
        "timestamp": 1649640032
    },
    {
        "content": "<p>well but technically if we start specing it now that's a breaking change, isnt it?</p>",
        "id": 278503215,
        "sender_full_name": "RalfJ",
        "timestamp": 1649644885
    },
    {
        "content": "<p>so really we should have something suitably vague in the docs to ensure we can properly spec it later...</p>",
        "id": 278503230,
        "sender_full_name": "RalfJ",
        "timestamp": 1649644903
    },
    {
        "content": "<p>Honestly I don't think we have reasonable cause to treat <code>Unique</code> as special under SB. There's no \"it's a soundness fix\" excuse like there is for <code>&amp;mut</code>, which was long promised to be special to the optimizer. Any promises about <code>Unique</code> were kept <em>completely</em> internal, so I don't know how you reason out of doing anything special with <code>Box</code> being a breaking change now.</p>",
        "id": 278504189,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649646175
    },
    {
        "content": "<p>But I wouldn't mind commenting such on a PR as well</p>",
        "id": 278504206,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649646206
    },
    {
        "content": "<p>I ran across docs I'm pretty sure mean <code>Vec</code> at least can't be special for SB</p>\n<blockquote>\n<p>The caller must ensure that the vector outlives the pointer this function returns, or else it will end up pointing to garbage. Modifying the vector may cause its buffer to be reallocated, which would also make any pointers to it invalid. <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html#method.as_mut_ptr\">[<code>Vec::as_mut_ptr</code>]</a></p>\n</blockquote>",
        "id": 278505354,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649647878
    },
    {
        "content": "<p>Specifically, as this says</p>\n<blockquote>\n<p>Modifying the vector may cause its buffer to be reallocated, which would also make any pointers to it invalid.</p>\n</blockquote>\n<p>That directly implies that if the buffer isn't reallocated, pointers aren't invalidated</p>",
        "id": 278505370,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649647915
    },
    {
        "content": "<p>It doesn't <em>say</em> it, but it very much implies it</p>",
        "id": 278505408,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649647924
    },
    {
        "content": "<p>No, what we need is for the addresses in these containers to unstable when the container is moved. That is the problem people run into with <code>Box</code>. They create a read-only pointer into the heap allocation, then move the <code>Box</code> itself. If <code>Box</code> is just an owning pointer, this is fine. But it isn't, if it's SB Unique.</p>",
        "id": 278505864,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649648665
    },
    {
        "content": "<p>Right, because retag is shallow</p>",
        "id": 278505883,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649648711
    },
    {
        "content": "<p>Is this what marking <code>Box</code> as <code>noalias</code> (theoretically) communicates to LLVM?</p>",
        "id": 278505898,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649648743
    },
    {
        "content": "<p>If we can justify <code>noalias</code> on <code>Box</code> without treating it specially as SB Unique, then I don't think there's any practical benefit to <code>Box</code> being SB Unique</p>",
        "id": 278505947,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649648780
    },
    {
        "content": "<p>If we can't justify <code>noalias</code> without it, then there is at least motivation for the restriction</p>",
        "id": 278505954,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649648800
    },
    {
        "content": "<p>SB Unique is probably much more restrictive than noalias</p>",
        "id": 278505961,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649648825
    },
    {
        "content": "<p>The definition of noalias is very hand-wavy, so it's not clear to me if this what noalias would have to be formalized as, or if it's much more restrictive.</p>",
        "id": 278506015,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649648893
    },
    {
        "content": "<p>/shrug</p>",
        "id": 278506088,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649649030
    },
    {
        "content": "<p>This is beyond the amount of thinking I have capacity for <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 278506093,
        "sender_full_name": "Christopher Durham (CAD97)",
        "timestamp": 1649649056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132829\">Christopher Durham (CAD97)</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Where.20do.20I.20complain.20about.20Box.20provenance.20behavior/near/278505370\">said</a>:</p>\n<blockquote>\n<p>Specifically, as this says</p>\n<blockquote>\n<p>Modifying the vector may cause its buffer to be reallocated, which would also make any pointers to it invalid.</p>\n</blockquote>\n<p>That directly implies that if the buffer isn't reallocated, pointers aren't invalidated</p>\n</blockquote>\n<p>Just wanted to chip in a minor observation, as far as I'm aware, the only way to use vec fallibly (without panic or abort on allocation failure) is by calling <code>try_reserve(_exact)</code> and then <code>push</code> (some bounded number of times), which one then assumes won't allocate (and change the buffer). While it doesn't necessarily imply \"if the buffer isn't reallocated, pointers aren't invalidated\", this pattern seems to lean towards it IMO</p>\n<p>(Of course, I hope we get better APIs to work with fallible containers one day... as it is, if you're trying to use vec without panicking or abort on failure, there's nothing preventing you from forgetting the <code>try_reserve</code> call, or calling <code>push</code> too many times)</p>",
        "id": 278506094,
        "sender_full_name": "Raekye",
        "timestamp": 1649649061
    },
    {
        "content": "<p>I think the resolution here is to remove <code>noalias</code> from <code>Box</code>. I am not aware of any realistic benchmarks which can support having it. I just tried setting <code>RUSTFLAGS_BOOTSTRAP=-Zmutable-noalias=no</code> and I couldn't find a perf regression at all in rustc-perf. Maybe that's just not the right way to benchmark this. Would love to hear that.</p>\n<p>So if we haven't even warned people that this (Box invalidation pattern) isn't allowed and we can't detect any kind of benefit, I can't understand why suggesting adding UB to the standard library.</p>",
        "id": 278506150,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649649141
    },
    {
        "content": "<p>I don't currently have the capacity to think a lot about Box and Vec. if someone wants to bring this up with the lib and lang teams that'd be great. I'd love to know if I have to worry about <code>Unique</code> in designing the next-gen aliasing model for Rust. ;)</p>",
        "id": 278579238,
        "sender_full_name": "RalfJ",
        "timestamp": 1649694304
    },
    {
        "content": "<p>I created <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/326\">https://github.com/rust-lang/unsafe-code-guidelines/issues/326</a> so we can keep track of it</p>",
        "id": 278580131,
        "sender_full_name": "RalfJ",
        "timestamp": 1649694669
    }
]