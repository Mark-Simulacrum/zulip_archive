[
    {
        "content": "<p>Here is some example code:</p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7841ef908f534ef11daca616a16cc0b9\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7841ef908f534ef11daca616a16cc0b9\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7841ef908f534ef11daca616a16cc0b9</a></p>\n<p>My question is: are the unsafe blocks here actually properly justified? Should we consider it a sound construction?</p>\n<p>Suppose you had some other function like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">sli</span>: <span class=\"nc\">CSharedSlice</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;the length is {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sli</span><span class=\"p\">.</span><span class=\"n\">to_slice</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>And a bit of C code calls this function with a totally zeroed struct and UB happens.</p>\n<p>If there is UB, it's a bug in the compiler or an unsafe block was used improperly. This is the rule we always live by.</p>\n<p>In this case, some C code did the thing which broke the contract of the function and lead to UB. Do we consider the C code to be the improper unsafe block? Because it's still impossible to make <code>foo</code> trigger UB from safe Rust, so it should still be considered sound.</p>",
        "id": 189352681,
        "sender_full_name": "Lokathor",
        "timestamp": 1582925105
    },
    {
        "content": "<p>The original \"unsafe block\" that is to blame for the UB is the one that invoked the C code that eventually called your function with invalid arguments.</p>",
        "id": 189358224,
        "sender_full_name": "Amanieu",
        "timestamp": 1582929472
    },
    {
        "content": "<p>If your code is a library and the program is in C, then you can just blame the user for the UB since it's his fault he decided to run a C program <span aria-label=\"mischievous\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"mischievous\">:mischievous:</span></p>",
        "id": 189358301,
        "sender_full_name": "Amanieu",
        "timestamp": 1582929521
    },
    {
        "content": "<p>But seriously, I would consider your code perfectly sound as it is.</p>",
        "id": 189358348,
        "sender_full_name": "Amanieu",
        "timestamp": 1582929590
    },
    {
        "content": "<p>Yeah, okay. Might put the full form of this into a crate for easy reference.</p>",
        "id": 189358858,
        "sender_full_name": "Lokathor",
        "timestamp": 1582930104
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 189360153,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1582931191
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    // Safety: Safe rust can never construct this type\n    // with incorrect fields, so we can trust the fields.\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> sounds like your type <code>CSharedSlice</code> has some invariant about these fields attached to it.<br>\nIf you are using \"SAFETY:\" comments, I think it is a good idea to explicitly write down that invariant in a comment at the type definition. Then \"SAFETY\" comments elsewhere, like in <code>to_slice</code> can refer to that invariant.<br>\nThe comment you have there right now is very non-local: this one safety comment suddenly means I need to re-read all the rest of this code to check that what it says is correct. SAFETY comments should be <em>locally</em> checkable.</p>",
        "id": 189382701,
        "sender_full_name": "RalfJ",
        "timestamp": 1582966351
    },
    {
        "content": "<p>Well the safety section is the entire safety section of core::slice::from_raw_parts</p>",
        "id": 189391494,
        "sender_full_name": "Lokathor",
        "timestamp": 1582984956
    },
    {
        "content": "<p>Fundamentally you can't rely on module privacy and then also have local checks</p>",
        "id": 189394155,
        "sender_full_name": "Lokathor",
        "timestamp": 1582990149
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Unsafe.20Policy.3A.20does.20all.20foreign.20code.20count.20as.20.22an.20unsafe.20.2E.2E.2E/near/189394155\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Unsafe.20Policy.3A.20does.20all.20foreign.20code.20count.20as.20.22an.20unsafe.20.2E.2E.2E/near/189394155\">said</a>:</p>\n<blockquote>\n<p>Fundamentally you can't rely on module privacy and then also have local checks</p>\n</blockquote>\n<p>not sure why you'd say that</p>",
        "id": 189400250,
        "sender_full_name": "RalfJ",
        "timestamp": 1583001340
    },
    {
        "content": "<p>but when we formally prove things like RefCell correct, we do everything locally as we'd prefer not to go crazy</p>",
        "id": 189400256,
        "sender_full_name": "RalfJ",
        "timestamp": 1583001361
    },
    {
        "content": "<p>the key point is to put everything global that you might need into the invariant -- because then you can locally check that you always maintain the invariant, and you get to locally <em>assume</em> that everything else follows the invariant, and thus you never need to think about more than one line of code at a time (once the invariant is set)</p>",
        "id": 189400308,
        "sender_full_name": "RalfJ",
        "timestamp": 1583001408
    },
    {
        "content": "<p>when I saw such proofs for the first time my mind was kind of blown :D</p>",
        "id": 189400313,
        "sender_full_name": "RalfJ",
        "timestamp": 1583001423
    },
    {
        "content": "<p>with the current state of the art in formal methods, we can do entirely local proofs (local in \"time and space\") of the craziest concurrent data structures, and we can do it machine-checked in Coq :)</p>",
        "id": 189400362,
        "sender_full_name": "RalfJ",
        "timestamp": 1583001487
    },
    {
        "content": "<p>Well, assuming that you mean locally to be like, \"in the current function\", then I don't know how you can possibly locally check an invariant such as \"the length value is correct for the allocation associated with this pointer so we can make this slice\".</p>",
        "id": 189420443,
        "sender_full_name": "Lokathor",
        "timestamp": 1583040531
    },
    {
        "content": "<p>But, to \"zoom out\" a bit, there is now a proper draft of this code available on github, &lt;<a href=\"https://github.com/Lokathor/chromium/blob/master/src/c_shared_slice.rs\" target=\"_blank\" title=\"https://github.com/Lokathor/chromium/blob/master/src/c_shared_slice.rs\">https://github.com/Lokathor/chromium/blob/master/src/c_shared_slice.rs</a>&gt; and I'll add the mutable version tomorrow and put it out as a 0.0.1 if things look good.</p>",
        "id": 189420494,
        "sender_full_name": "Lokathor",
        "timestamp": 1583040624
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Unsafe.20Policy.3A.20does.20all.20foreign.20code.20count.20as.20.22an.20unsafe.20.2E.2E.2E/near/189420443\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Unsafe.20Policy.3A.20does.20all.20foreign.20code.20count.20as.20.22an.20unsafe.20.2E.2E.2E/near/189420443\">said</a>:</p>\n<blockquote>\n<p>Well, assuming that you mean locally to be like, \"in the current function\", then I don't know how you can possibly locally check an invariant such as \"the length value is correct for the allocation associated with this pointer so we can make this slice\".</p>\n</blockquote>\n<p>you have to <em>declare</em> the invariant once, globally. and then you, roughly speaking, check locally at each line that it is maintained.</p>",
        "id": 189442298,
        "sender_full_name": "RalfJ",
        "timestamp": 1583086629
    },
    {
        "content": "<p>I agree with that, but I also absolutely wouldn't call it \"locally checkable\"</p>",
        "id": 189442522,
        "sender_full_name": "Lokathor",
        "timestamp": 1583087033
    },
    {
        "content": "<p>hm. well \"local\" (\"in time and space\") is the/a standard term for this in the academic literature, but I am open to alternative suggestions ;)</p>",
        "id": 189478093,
        "sender_full_name": "RalfJ",
        "timestamp": 1583144727
    },
    {
        "content": "<p>there are other proof methods where verifying one thread requires checking something <em>specific to this thread</em> about all the other threads -- that is then not \"local\" any more</p>",
        "id": 189478154,
        "sender_full_name": "RalfJ",
        "timestamp": 1583144765
    }
]