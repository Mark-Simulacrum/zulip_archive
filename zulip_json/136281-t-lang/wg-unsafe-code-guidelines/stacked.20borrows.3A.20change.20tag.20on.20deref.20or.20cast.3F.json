[
    {
        "content": "<p>One slightly unsatisfying point in stacked borrows is that I have a rule that when you deref a raw pointer (<code>*x</code>), that deref forgets the tag -- so e.g. <code>&amp;*x</code> is not actually the identity on a raw pointer. I now realized I could get rid of this if <em>instead</em> I make it so that casts forget the tag. Now I am torn because I am not sure what I like more: cast being the same as transmute (in MIR; the surface-level <code>x as *mut _</code> also emits an <code>EscapeToRaw</code> and is very much not like a transmute), or deref not changing the tag (and hence <code>&amp;*</code> being the identity). I <em>think</em> the compiler optimizes <code>&amp;*</code> away, maybe even for raw ptr, and does not optimize casts away, which indicates erase-tag-on-cast might be better than erase-tag-on-raw-ptr-deref. Any thoughts?</p>",
        "id": 147849239,
        "sender_full_name": "RalfJ",
        "timestamp": 1542405682
    },
    {
        "content": "<p>After sleeping about it, I think I prefer erase-tag-on-cast. That makes a raw ptr deref do absolutely nothing to the tag and the stack, which means we can faithfully say that ptr derefs in C are like raw ptr derefs in Rust.<br>\nIt also means that you better use a cast, not a transmute, to \"export\" your pointers. But that has pretty much already been true before this change (and I am aware it can be a problem for some patterns).</p>",
        "id": 147869118,
        "sender_full_name": "RalfJ",
        "timestamp": 1542442024
    }
]