[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> I'm just getting to comments on <a href=\"https://github.com/rust-lang/rust/issues/31\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/31\">#31</a>, and I'd like to know <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/31#discussion_r227469510\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/31#discussion_r227469510\">what you think of this</a>?</p>",
        "id": 136348375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540312081
    },
    {
        "content": "<p>My general position is that it's cool if it's some deterministic function, but if the inputs to that function are as expansive as they have to be to accommodate the current (lack of) consensus, that determinism isn't useful in practice. For example, Cargo passes very comprehensive hashes of the crate metadata and absolute paths, so it seems basically impossible to get the exact same command line twice unless you go to even more effort than typical reproducible build setups do</p>",
        "id": 136348987,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540312707
    },
    {
        "content": "<p>OK. I don't disagree with that, I agree the set of inputs is pretty expansive. The phrasing I gave is basically \"all compiler input\"</p>",
        "id": 136349198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540312927
    },
    {
        "content": "<p>I suppose I said sort of two contradictory things</p>",
        "id": 136349217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540312966
    },
    {
        "content": "<p>maybe I'll just cut the opening paragraph more-or-less and run with this follow-on paragraph:</p>\n<p>As of this writing, we have not reached a full consensus on what<br>\nlimitations should exist on possible field struct layouts. Therefore,<br>\nthe default layout of structs is considered undefined and subject to<br>\nchange between individual compilations. This implies that (among other<br>\nthings) two structs with the same field types may not be laid out in<br>\nthe same way (for example, the hypothetical struct representing tuples<br>\nmay be laid out differently from user-declared structs).</p>",
        "id": 136349237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540312990
    },
    {
        "content": "<p>which is basically what you were advocating <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span></p>",
        "id": 136349238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540312997
    },
    {
        "content": "<p>I don't mind giving specific (non-exhaustive) examples of things that might influence layout</p>",
        "id": 136349309,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540313090
    },
    {
        "content": "<p>But either way it should be clear that something like abomonation isn't covered by it</p>",
        "id": 136349362,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540313145
    },
    {
        "content": "<p>what do you think of this:</p>\n<p><strong>The default layout of structs is not specified.</strong> As of this<br>\nwriting, we have not reached a full consensus on what limitations<br>\nshould exist on possible field struct layouts, so effectively one must<br>\nassume that the compiler can select any layout it likes on each<br>\ncompilation. This implies that (among other things) two structs with<br>\nthe same field types may not be laid out in the same way (for example,<br>\nthe hypothetical struct representing tuples may be laid out<br>\ndifferently from user-declared structs).</p>\n<p>Known things that can influence layout (non-exhaustive):</p>\n<ul>\n<li>the type of the struct fields and the layout of those types</li>\n<li>compiler settings, including esoteric choices like optimization fuel</li>\n<li>whether a given field was declared with a generic type or not<ul>\n<li>this is necessary because the presence or absence of generics can<br>\n  make a difference (e.g., <code>struct Foo { x: u16, y: u32 }</code> and<br>\n<code>struct Foo&lt;T&gt; { x: u16, y: T }</code> where <code>T = u32</code> are not<br>\n  guaranteed to be identical), owing to the possibility of unsizing<br>\n  coercions</li>\n</ul>\n</li>\n</ul>",
        "id": 136349565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540313364
    },
    {
        "content": "<p>One thing I'd call out in the first paragraph is choosing different layout for the <em>same</em> type across different compilations. It's heavily implied by everything else but I think it's worth calling out in those words because it's just as subtle and important as the case of two distinct but structually-identical types in one compilation.</p>",
        "id": 136349773,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540313534
    },
    {
        "content": "<blockquote>\n<ul>\n<li>whether a given field was declared with a generic type or not<ul>\n<li>this is necessary because the presence or absence of generics can<br>\n  make a difference (e.g., <code>struct Foo { x: u16, y: u32 }</code> and<br>\n<code>struct Foo&lt;T&gt; { x: u16, y: T }</code> where <code>T = u32</code> are not<br>\n  guaranteed to be identical), owing to the possibility of unsizing<br>\n  coercions</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>Come to think of it, this seems a bit out of place now. It's an important observation as soon as we try to guarantee that two structs with (in some precise sense) equivalent fields are laid out the same, but since the current text doesn't do anything like that...</p>",
        "id": 136349991,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540313805
    },
    {
        "content": "<p>yes, but</p>",
        "id": 136350001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540313817
    },
    {
        "content": "<p>I opted to include it because</p>",
        "id": 136350003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540313820
    },
    {
        "content": "<p>it just seemed like something worth knowing</p>",
        "id": 136350011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540313830
    },
    {
        "content": "<p>I guess because <em>in practice</em> if you are trying to understand what the compiler <em>really does</em></p>",
        "id": 136350017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540313844
    },
    {
        "content": "<p>you would like to know it</p>",
        "id": 136350018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540313847
    },
    {
        "content": "<p>perhaps I'll move it down to the \"Compiler's current behavior\" section</p>",
        "id": 136350019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540313855
    },
    {
        "content": "<p>yes that seems better</p>",
        "id": 136350023,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540313866
    },
    {
        "content": "<p>understanding the current behavior tends to be an obstacle to knowing what one can rely on :)</p>",
        "id": 136350076,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540313896
    },
    {
        "content": "<p>I also added</p>\n<p><strong>A note on determinism.</strong> The definition above does not guarantee<br>\ndeterminism between executions of the compiler -- two executions may<br>\nselect different layouts. Naturally, in practice, the compiler aims to<br>\nproduce deterministic output. However, it is difficult to produce a<br>\ncomprehensive summary of the various factors that may affect the<br>\nlayout of structs, and so for the time being we have opted for a<br>\nconservative definition.</p>",
        "id": 136350228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540314057
    },
    {
        "content": "<p>did you see <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/31#discussion_r227478178\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/31#discussion_r227478178\">this</a>? I wasn't aware that <code>#[repr(C)] struct Foo { }</code> had zero-size...</p>",
        "id": 136350308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540314130
    },
    {
        "content": "<p>tbh I hadn't really thought about it :P</p>",
        "id": 136350310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540314142
    },
    {
        "content": "<p>yeah, it's annoying for hand-written bindings but otherwise probably not an issue. tbh even if one messes that up it seems hard to write a program that will actually go wrong because of that difference (I expect that accesses to struct Foo {} are nops in C too)</p>",
        "id": 136350438,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540314274
    },
    {
        "content": "<p>yeah by-value passing and load/stores of empty structs are nops in C <a href=\"https://godbolt.org/z/Y02oVi\" target=\"_blank\" title=\"https://godbolt.org/z/Y02oVi\">https://godbolt.org/z/Y02oVi</a></p>",
        "id": 136350707,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540314516
    },
    {
        "content": "<p>in the x86 and x86_64 SysV ABIs, I should say</p>",
        "id": 136351558,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540315222
    },
    {
        "content": "<p>I'd be more concerned about the layout of things that embed empty structs being different in subtle ways</p>",
        "id": 136351837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540315446
    },
    {
        "content": "<p>oh good point</p>",
        "id": 136353178,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540316511
    },
    {
        "content": "<blockquote>\n<p>But either way it should be clear that something like abomonation isn't covered by it</p>\n</blockquote>\n<p>What is abomonation doing that you are referring to here?</p>",
        "id": 136370028,
        "sender_full_name": "RalfJ",
        "timestamp": 1540331665
    },
    {
        "content": "<p>I am referring to assuming the same program compiled twice by the same rustc version will have the same layout for everything. That isn't inherent in abomonation itself but <em>using it</em> generally requires that because e.g. you're communicating between a cdylib and a binary that include the same source files</p>",
        "id": 136370256,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540331942
    },
    {
        "content": "<p>ah you mean essentially dumping the raw memory representation into a file, and reading it back later with just some fixes for ptrs?</p>",
        "id": 136370364,
        "sender_full_name": "RalfJ",
        "timestamp": 1540332045
    },
    {
        "content": "<p>that's basically what abomonation does, yes</p>",
        "id": 136370404,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540332087
    },
    {
        "content": "<p>well, for me the core thing was always that it also plays crazy tricks with lifetimes and references, that's why I was confused at first^^</p>",
        "id": 136370872,
        "sender_full_name": "RalfJ",
        "timestamp": 1540332666
    },
    {
        "content": "<p>oh right, there's plenty there to be proven sound there, I was only thinking about layout stuff</p>",
        "id": 136370954,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540332794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> to be clear, that is C++</p>",
        "id": 136440985,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1540420532
    },
    {
        "content": "<p>C does not have empty structs</p>",
        "id": 136440989,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1540420540
    },
    {
        "content": "<p>My godbolt link was running clang in c++ mode, yes. clang's and gcc's c mode also accept empty structs though, so we'll want interop with that no matter what the c standard says</p>",
        "id": 136441088,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540420681
    },
    {
        "content": "<p>clang and gcc's C mode have empty structs with size 0.</p>",
        "id": 136441135,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1540420698
    },
    {
        "content": "<p>huh, indeed</p>",
        "id": 136441162,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540420740
    },
    {
        "content": "<p>thanks for pointing that out</p>",
        "id": 136441180,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540420758
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/AS2gdC\" target=\"_blank\" title=\"https://godbolt.org/z/AS2gdC\">https://godbolt.org/z/AS2gdC</a></p>",
        "id": 136441269,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1540420829
    },
    {
        "content": "<p>no worries, it's a common bit of confusion :)</p>",
        "id": 136441477,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1540421062
    },
    {
        "content": "<p>especially among C++ programmers who think it's shitty that <code>Bar</code> takes up more than four bytes of space, cough cough :&lt;</p>",
        "id": 136441495,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1540421093
    }
]