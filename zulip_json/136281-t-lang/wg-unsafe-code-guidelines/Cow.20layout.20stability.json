[
    {
        "content": "<p>Has the layout of <code>std::borrow::Cow</code> been specified/stabilized yet?<br>\nI'm asking because somebody has found a way to implement it in a slightly more compact way (3 words instead of 4) and I'm wondering if a similar approach could be taken by <code>std</code> eventually: <a href=\"https://github.com/maciejhirsz/beef/\" target=\"_blank\" title=\"https://github.com/maciejhirsz/beef/\">https://github.com/maciejhirsz/beef/</a></p>",
        "id": 190592350,
        "sender_full_name": "Shnatsel",
        "timestamp": 1584184083
    },
    {
        "content": "<p><code>beef</code> only works for things that have a capacity field, while <code>std::borrow::Cow</code> works for all values.</p>",
        "id": 190592424,
        "sender_full_name": "bjorn3",
        "timestamp": 1584184244
    },
    {
        "content": "<p>It also doesn't differentiate between <code>String::new()</code> and a borrowed string, if I interpret the code correctly. That is mostly inconsequential for strings and vectors but still a slight detail.</p>",
        "id": 190592553,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1584184546
    },
    {
        "content": "<p>(But regardless, Cow's layout is definitely not stable to my knowledge -- it's just a regular repr(Rust) enum, right?)</p>",
        "id": 190595716,
        "sender_full_name": "simulacrum",
        "timestamp": 1584189015
    },
    {
        "content": "<p>if String's implementation will ever change to allocate on <code>String::new()</code> or \"break their layout\" <code>beef</code> will break..</p>",
        "id": 190717556,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1584363245
    },
    {
        "content": "<p><code>beef</code> doesn't transmute a <code>String</code>. Instead it uses <code>.as_mut_ptr()</code>, <code>.len()</code> and <code>.capacity()</code> to deconstruct the string and later uses <code>Vec::from_raw_parts</code> + <code>String::from_utf8_unchecked</code> to reconstruct it: <a href=\"https://github.com/maciejhirsz/beef/blob/64b7812a3e10524a64404a47551e59a1a4b0f195/src/lib.rs#L86-L90\" target=\"_blank\" title=\"https://github.com/maciejhirsz/beef/blob/64b7812a3e10524a64404a47551e59a1a4b0f195/src/lib.rs#L86-L90\">https://github.com/maciejhirsz/beef/blob/64b7812a3e10524a64404a47551e59a1a4b0f195/src/lib.rs#L86-L90</a></p>",
        "id": 190718134,
        "sender_full_name": "bjorn3",
        "timestamp": 1584363564
    },
    {
        "content": "<p>you're right. my mistake, they don't care about the layout of string.</p>\n<p>But can't we somehow enable the niche optimization we have for option on Cow too? because <code>size_of::&lt;Option&lt;String&gt;&gt;() == size_of::&lt;String&gt;()</code> so we could theoretically use that same bit for Cow for the discriminant</p>",
        "id": 190721075,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1584365107
    },
    {
        "content": "<p>there's no bit though. there's a single \"niche value\", 0x0000000000000000</p>",
        "id": 190838454,
        "sender_full_name": "RalfJ",
        "timestamp": 1584447265
    },
    {
        "content": "<p>that's enough for <code>None</code> but not enough for <code>Borrowed(ptr)</code>, because the latter has data to store</p>",
        "id": 190838482,
        "sender_full_name": "RalfJ",
        "timestamp": 1584447289
    },
    {
        "content": "<p>For <code>Cow&lt;str&gt;</code> <code>Owned</code> could be represented as \"ptr | len | capacity\" while <code>Borrowed</code> could be represented as \"0x0 | ptr | len\".</p>",
        "id": 190840130,
        "sender_full_name": "bjorn3",
        "timestamp": 1584448312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can we do this? ^</p>",
        "id": 190964144,
        "sender_full_name": "RalfJ",
        "timestamp": 1584528807
    },
    {
        "content": "<p>lmao</p>",
        "id": 190964174,
        "sender_full_name": "eddyb",
        "timestamp": 1584528834
    },
    {
        "content": "<p>yeah uhhh I've been planning to work on that for ages</p>",
        "id": 190964255,
        "sender_full_name": "eddyb",
        "timestamp": 1584528858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> <a href=\"https://github.com/rust-lang/rust/issues/46213\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46213\">https://github.com/rust-lang/rust/issues/46213</a></p>",
        "id": 190964350,
        "sender_full_name": "eddyb",
        "timestamp": 1584528958
    },
    {
        "content": "<p>I also have some notes somewhere on how to do it</p>",
        "id": 190964412,
        "sender_full_name": "eddyb",
        "timestamp": 1584528985
    },
    {
        "content": "<p>I think it requires a slight redesign of the enum layout code, which might slow it down</p>",
        "id": 190964421,
        "sender_full_name": "eddyb",
        "timestamp": 1584528993
    },
    {
        "content": "<p>but basically we first compute the unoptimized layout and we only pick an optimization if it's <em>smaller</em></p>",
        "id": 190964456,
        "sender_full_name": "eddyb",
        "timestamp": 1584529019
    },
    {
        "content": "<p>because tagged enums are always easier for LLVM to work with, IIRC, and this way we don't have to be clever about ensuring an optimized layout is smaller</p>",
        "id": 190964499,
        "sender_full_name": "eddyb",
        "timestamp": 1584529058
    },
    {
        "content": "<p>we just check</p>",
        "id": 190964511,
        "sender_full_name": "eddyb",
        "timestamp": 1584529062
    },
    {
        "content": "<p>so we can fix <a href=\"https://github.com/rust-lang/rust/issues/63866\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63866\">https://github.com/rust-lang/rust/issues/63866</a> that way then try to compute the layout for <a href=\"https://github.com/rust-lang/rust/issues/46213\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46213\">https://github.com/rust-lang/rust/issues/46213</a></p>",
        "id": 190964661,
        "sender_full_name": "eddyb",
        "timestamp": 1584529148
    },
    {
        "content": "<p>the best part is everything using layouts (miri, codegen) should work unchanged (barring any bugs) once we optimize layouts with non-empty niche variants</p>",
        "id": 190964874,
        "sender_full_name": "eddyb",
        "timestamp": 1584529261
    },
    {
        "content": "<p>the word \"dataful\" would be a lie at that point I guess</p>",
        "id": 190964943,
        "sender_full_name": "eddyb",
        "timestamp": 1584529303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> lol <a href=\"https://github.com/rust-lang/rust/issues/46213#issuecomment-394388912\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/46213#issuecomment-394388912\">https://github.com/rust-lang/rust/issues/46213#issuecomment-394388912</a></p>",
        "id": 190965020,
        "sender_full_name": "eddyb",
        "timestamp": 1584529344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Cow.20layout.20stability/near/190964874\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Cow.20layout.20stability/near/190964874\">said</a>:</p>\n<blockquote>\n<p>the best part is everything using layouts (miri, codegen) should work unchanged (barring any bugs) once we optimize layouts with non-empty niche variants</p>\n</blockquote>\n<p>I hope so :) that will put my understanding of niches to the test though ;)</p>",
        "id": 190966167,
        "sender_full_name": "RalfJ",
        "timestamp": 1584530202
    },
    {
        "content": "<p>oh look at that <a href=\"https://github.com/rust-lang/rust/pull/70477\" title=\"https://github.com/rust-lang/rust/pull/70477\">https://github.com/rust-lang/rust/pull/70477</a></p>",
        "id": 192093254,
        "sender_full_name": "eddyb",
        "timestamp": 1585352515
    },
    {
        "content": "<p>I probably would've forgotten about it for another year tbh</p>",
        "id": 192093354,
        "sender_full_name": "eddyb",
        "timestamp": 1585352598
    },
    {
        "content": "<p>I dont think I entirely understand what this does, but the wins in <code>static_assert_size</code> are nice :D</p>",
        "id": 192114194,
        "sender_full_name": "RalfJ",
        "timestamp": 1585387230
    }
]