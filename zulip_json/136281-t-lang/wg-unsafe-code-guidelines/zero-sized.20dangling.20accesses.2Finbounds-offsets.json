[
    {
        "content": "<p>Is the following code UB or not?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">((((),),</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">((),)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// getelementptr inbounds with offset 0 of a dangling pointer</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x_inner</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// 0-sized access of a dangling pointer</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/93\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/93\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues/93</a></p>",
        "id": 159224404,
        "sender_full_name": "RalfJ",
        "timestamp": 1550918871
    },
    {
        "content": "<p>Notice that this better not be UB, we do this a lot in libstd:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">((),)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"k\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// getelementptr inbounds with offset 0 of a dangling pointer</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x_inner</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// 0-sized access of a dangling pointer</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159224449,
        "sender_full_name": "RalfJ",
        "timestamp": 1550918915
    },
    {
        "content": "<p>my sense is that a zero-sized load ought to be a \"no-op\" and hence never UB... is that too simplistic?</p>",
        "id": 159627738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551370377
    },
    {
        "content": "<p>that's kind of my understanding, except that maybe alignment should be checked</p>",
        "id": 159627891,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551370510
    },
    {
        "content": "<p>(although now that I think about it... probably best to check it at reference creation?)</p>",
        "id": 159627962,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551370565
    },
    {
        "content": "<p>Hmm, yes, maybe, although don't we create a \"dummy pointer\" like <code>0x1</code> or something for these?</p>",
        "id": 159628397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551370904
    },
    {
        "content": "<p>I forget</p>",
        "id": 159628403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551370909
    },
    {
        "content": "<p>I guess maybe we should just change the dummy pointer to <code>0x1000</code> :)</p>",
        "id": 159628419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551370917
    },
    {
        "content": "<p>or whatever the alignment is</p>",
        "id": 159628460,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551370923
    },
    {
        "content": "<p>I haven't heard anyone disagreeing that zero-sized accesses should be NOPs, the real tricky part are GEP-inbounds operations which can happen not only in the presence of ZSTs but also when you have e.g. an empty slice of non-ZST element type, so we can't simply side-step the LLVM questions surrounding those by not emitting LLVM IR for them</p>",
        "id": 159629054,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1551371336
    },
    {
        "content": "<p>from my understanding, zero-sized accesses do have to be aligned and non-NULL. that's consistent with other 0-sized operations.</p>",
        "id": 159629228,
        "sender_full_name": "RalfJ",
        "timestamp": 1551371433
    },
    {
        "content": "<p>but yes, the real question here is GEPi</p>",
        "id": 159629252,
        "sender_full_name": "RalfJ",
        "timestamp": 1551371452
    },
    {
        "content": "<p>Yes, using \"NOP\" loosely here. The dangling-ness shouldn't be an issue is what I meant</p>",
        "id": 159629289,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1551371471
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> I think an empty slice of non-ZST types is no problem, as you'll not GEPi into it</p>",
        "id": 159629295,
        "sender_full_name": "RalfJ",
        "timestamp": 1551371477
    },
    {
        "content": "<p>a non-empty slice of ZST types, however, is a problem</p>",
        "id": 159629324,
        "sender_full_name": "RalfJ",
        "timestamp": 1551371503
    },
    {
        "content": "<p>hm, you're right, i think i mixed something up<br>\nbut if ZSTs are involved, we know they're ZSTs and can modify our IR generation, can't we?</p>",
        "id": 159629433,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1551371573
    },
    {
        "content": "<p>hm...</p>",
        "id": 159629487,
        "sender_full_name": "RalfJ",
        "timestamp": 1551371616
    },
    {
        "content": "<p>really I'd rather make LLVM change their GEPi semantics to delay the UB further -- OOB arithmetic doesnt go poison but \"taints\" the pointer such that using it for an actual access is UB</p>",
        "id": 159629563,
        "sender_full_name": "RalfJ",
        "timestamp": 1551371659
    },
    {
        "content": "<p>oh no I remember now, <em>slicing</em> an empty slice was the issue: <a href=\"https://github.com/rust-lang/rust/issues/54857\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54857\">https://github.com/rust-lang/rust/issues/54857</a></p>",
        "id": 159629572,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1551371663
    },
    {
        "content": "<p>We already generate different code in rustc in presence of ZSTs IIRC</p>",
        "id": 159629587,
        "sender_full_name": "nagisa",
        "timestamp": 1551371670
    },
    {
        "content": "<p>that'd solve all problems, and to my knowledge preserves everything the alias analysis needs</p>",
        "id": 159629589,
        "sender_full_name": "RalfJ",
        "timestamp": 1551371672
    },
    {
        "content": "<p>but well...</p>",
        "id": 159629590,
        "sender_full_name": "RalfJ",
        "timestamp": 1551371673
    },
    {
        "content": "<blockquote>\n<p>oh no I remember now, <em>slicing</em> an empty slice was the issue: <a href=\"https://github.com/rust-lang/rust/issues/54857\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54857\">https://github.com/rust-lang/rust/issues/54857</a></p>\n</blockquote>\n<p>oh right we can always do that</p>",
        "id": 159629613,
        "sender_full_name": "RalfJ",
        "timestamp": 1551371693
    },
    {
        "content": "<p>not because we’re avoiding UB or anything of the sort, but rather simply to avoid unnecessary IR.</p>",
        "id": 159629615,
        "sender_full_name": "nagisa",
        "timestamp": 1551371695
    },
    {
        "content": "<p>well really what I'd like to know is what the rules on the MIR side are. and then we can think about how to compile that to LLVM.</p>",
        "id": 159629647,
        "sender_full_name": "RalfJ",
        "timestamp": 1551371730
    },
    {
        "content": "<p>and I see no good way to statically detect the MIR-level place projections that might be 0 and allow dangling pointers</p>",
        "id": 159629678,
        "sender_full_name": "RalfJ",
        "timestamp": 1551371753
    },
    {
        "content": "<p>My unsubstantiated gut feeling is I don't feel we really need anything as tricky as GEPi for the optimizations that might reasonably happen at MIR level, it's more something we want to preserve for the later stages of codegen. However, for those later stages, it appears that it's not just AA that cares. Mostly it appears LLVM passes care about the \"no wraparound\" aspect.</p>",
        "id": 159630682,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1551372580
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> we use <code>heap::Empty&lt;T&gt;</code>, which is <code>align_of&lt;T&gt; as *mut T</code></p>",
        "id": 159633478,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551374570
    },
    {
        "content": "<p>aiui</p>",
        "id": 159633483,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1551374575
    }
]