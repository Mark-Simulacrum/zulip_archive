[
    {
        "content": "<p>Right now, my idea of barriers is that we make sure that in a <code>fn foo(x: &amp;mut i32)</code>, the item for this reference cannot get popped off the stack while the function is running. However, I cannot do that for <code>&amp;UnsafeCell</code>, because I am pushing the barrier on top of the stack, but an <code>&amp;UnsafeCell</code> can be fairly deep down the stack when it is passed to a function (like when there is also an <code>&amp;mut</code> pointing into the same <code>RefCell</code>/<code>Mutex</code>). But that means that an <code>&amp;UnsafeCell</code> could actually become invalid, and even deallocated, during the execution of a function -- in contradiction to the <code>dereferencable</code> attribute we set for LLVM. I see two options:</p>\n<ul>\n<li>No longer emit that attribute. Maybe change it to <code>dereferencable_on_entry</code> once <a href=\"https://lists.llvm.org/pipermail/llvm-dev/2018-July/124555.html\" target=\"_blank\" title=\"https://lists.llvm.org/pipermail/llvm-dev/2018-July/124555.html\">LLVM supports that</a>. This would also fix <code>Arc::drop</code>, which is <a href=\"https://internals.rust-lang.org/t/is-it-possible-to-be-memory-safe-with-deallocated-self/8457/8\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/is-it-possible-to-be-memory-safe-with-deallocated-self/8457/8\">currently technically unsound</a> (the <code>ArcInner</code> could get deallocated while <code>AtomicUsize::fetch_sub</code> still holds a shared reference to it).</li>\n<li>Push barriers into the middle of the stack. Then we can also have barriers for <code>&amp;UnsafeCell</code>, but we'd do a step away from the idea of the stack. However, we already are nit entirely a stack with this <code>frozen_since</code> business, and indeed this alternative could allow us to replace <code>frozen_since</code> by another kind of item on the stack.</li>\n</ul>\n<p>Cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span></p>",
        "id": 148119061,
        "sender_full_name": "RalfJ",
        "timestamp": 1542815720
    },
    {
        "content": "<p>by barriers do we mean C11 concurrency stuff?</p>",
        "id": 148119079,
        "sender_full_name": "Gankra",
        "timestamp": 1542815745
    },
    {
        "content": "<p>no, I just picked a bad name and cannot find a better one</p>",
        "id": 148119084,
        "sender_full_name": "RalfJ",
        "timestamp": 1542815760
    },
    {
        "content": "<p>this has nothing to do with concurrency</p>",
        "id": 148119123,
        "sender_full_name": "RalfJ",
        "timestamp": 1542815764
    },
    {
        "content": "<p>cool</p>",
        "id": 148119126,
        "sender_full_name": "Gankra",
        "timestamp": 1542815766
    },
    {
        "content": "<p>I described it in my <a href=\"https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html#42-barriers\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2018/08/07/stacked-borrows.html#42-barriers\">first stacked borrows post</a></p>",
        "id": 148119128,
        "sender_full_name": "RalfJ",
        "timestamp": 1542815772
    },
    {
        "content": "<p>if you can come up with a better name, please let me know :)</p>",
        "id": 148119153,
        "sender_full_name": "RalfJ",
        "timestamp": 1542815810
    },
    {
        "content": "<p>Oh interesting I had mentally filed the <code>raw</code> state as a strictly leaf one</p>",
        "id": 148120162,
        "sender_full_name": "Gankra",
        "timestamp": 1542816749
    },
    {
        "content": "<p>are you sure you are replying in the right topic...?</p>",
        "id": 148120195,
        "sender_full_name": "RalfJ",
        "timestamp": 1542816794
    },
    {
        "content": "<p>from your link \"This could happen if the stack contained, somewhere, a Raw. \"</p>",
        "id": 148120208,
        "sender_full_name": "Gankra",
        "timestamp": 1542816823
    },
    {
        "content": "<p>ah</p>",
        "id": 148120254,
        "sender_full_name": "RalfJ",
        "timestamp": 1542816844
    },
    {
        "content": "<p>well you can reborrow a raw ptr to a mutable ref</p>",
        "id": 148120266,
        "sender_full_name": "RalfJ",
        "timestamp": 1542816853
    },
    {
        "content": "<p>upon reflection it makes sense that raws can be sprinkled through the stack as we upgrade pointers to refs temporarily</p>",
        "id": 148120267,
        "sender_full_name": "Gankra",
        "timestamp": 1542816854
    },
    {
        "content": "<p>not even so uncommon</p>",
        "id": 148120269,
        "sender_full_name": "RalfJ",
        "timestamp": 1542816856
    },
    {
        "content": "<p>it's just a bit weird to think raw pointer accesses are always valid if there's a raw somewhere in the stack, it will just wildly invalidate a bunch of refs :)</p>",
        "id": 148120325,
        "sender_full_name": "Gankra",
        "timestamp": 1542816905
    },
    {
        "content": "<p>true</p>",
        "id": 148120337,
        "sender_full_name": "RalfJ",
        "timestamp": 1542816919
    },
    {
        "content": "<p>that's why barriers restrict this :)</p>",
        "id": 148120340,
        "sender_full_name": "RalfJ",
        "timestamp": 1542816924
    },
    {
        "content": "<p>but generally, this kind of stuff happens in an access-based model</p>",
        "id": 148120401,
        "sender_full_name": "RalfJ",
        "timestamp": 1542816974
    },
    {
        "content": "<p>you get exclusivity guarantees for what happened <em>between two accesses</em> with your reference</p>",
        "id": 148120413,
        "sender_full_name": "RalfJ",
        "timestamp": 1542816990
    },
    {
        "content": "<p>if there was a raw ptr access in the mean time, even if it worked, it would have invalidated your ref, so the 2nd access would have been UB, so you can assume that does not happen</p>",
        "id": 148120441,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817029
    },
    {
        "content": "<p>Can you elaborate on how \"an &amp;UnsafeCell could actually become invalid, and even deallocated, during the execution of a function\"</p>",
        "id": 148120535,
        "sender_full_name": "Gankra",
        "timestamp": 1542817131
    },
    {
        "content": "<p>well e.g. someone could deallocate that memory</p>",
        "id": 148120666,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817273
    },
    {
        "content": "<p>Can you give some sample code? I can't picture the situation you're describing</p>",
        "id": 148120893,
        "sender_full_name": "Gankra",
        "timestamp": 1542817502
    },
    {
        "content": "<p>here's a gross example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">UnsafeCell</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">fn</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// `f` may mutate x because it is shared +  non-frozen - but is it okay to deallocate?</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">into_raw</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">UnsafeCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148121185,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817785
    },
    {
        "content": "<p>a realistic example is actually <code>Arc</code>, where we call <code>fetch_sub</code> to decrement the refcount. immediately after that decrement happened, and before <code>fetch_sub</code> returns, another thread could deallocate the <code>ArcInner</code></p>",
        "id": 148121259,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817824
    },
    {
        "content": "<p>For the UnsafeCell example, I definitely had a mental model that function arguments had a phantom use at the start and end of the function</p>",
        "id": 148121386,
        "sender_full_name": "Gankra",
        "timestamp": 1542817929
    },
    {
        "content": "<p>(and therefore that code is super busted)</p>",
        "id": 148121408,
        "sender_full_name": "Gankra",
        "timestamp": 1542817948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> oh well then let me make it even more gross</p>",
        "id": 148121419,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817957
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">UnsafeCell</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"nc\">fn</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// `f` may mutate x because it is shared +  non-frozen - but is it okay to deallocate?</span>\n<span class=\"w\">    </span><span class=\"n\">f</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"c1\">// we never get to the end</span>\n<span class=\"w\">   </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">into_raw</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">UnsafeCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148121432,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817972
    },
    {
        "content": "<p>barriers \"kick in\" even if the end of the function is never reached</p>",
        "id": 148121447,
        "sender_full_name": "RalfJ",
        "timestamp": 1542817987
    },
    {
        "content": "<p>Right sure</p>",
        "id": 148121464,
        "sender_full_name": "Gankra",
        "timestamp": 1542818006
    },
    {
        "content": "<p>we have \"phantom use at the beginning\" in the form of retagging</p>",
        "id": 148121475,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818024
    },
    {
        "content": "<p>right</p>",
        "id": 148121489,
        "sender_full_name": "Gankra",
        "timestamp": 1542818041
    },
    {
        "content": "<p>but not at the end</p>",
        "id": 148121528,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818046
    },
    {
        "content": "<p>I found barriers more elegant than actually inserting <code>Retag</code> everywhere, I guess</p>",
        "id": 148121534,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818062
    },
    {
        "content": "<p>hm no actually this doesnt work</p>",
        "id": 148121541,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818077
    },
    {
        "content": "<p>So are barriers not reified in mir like retag is?</p>",
        "id": 148121545,
        "sender_full_name": "Gankra",
        "timestamp": 1542818082
    },
    {
        "content": "<p>consider</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">))</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>surely we dont want a phantom use of <code>x</code> at the end, that would invalidate the return value!</p>",
        "id": 148121559,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818111
    },
    {
        "content": "<blockquote>\n<p>So are barriers not reified in mir like retag is?</p>\n</blockquote>\n<p>retag has a <code>bool</code> parameter saying whether a barrier is pushed</p>",
        "id": 148121579,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818135
    },
    {
        "content": "<p>But barriers <em>do</em> handle <code>foo</code> properly?</p>",
        "id": 148121583,
        "sender_full_name": "Gankra",
        "timestamp": 1542818151
    },
    {
        "content": "<p>then they are no the stack and affect accesses (but currently not derefs!)</p>",
        "id": 148121588,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818156
    },
    {
        "content": "<p>so yes they are kind-of reified</p>",
        "id": 148121632,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818167
    },
    {
        "content": "<p>but their effect is different from \"retag in a few places\"</p>",
        "id": 148121634,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818174
    },
    {
        "content": "<blockquote>\n<p>But barriers <em>do</em> handle <code>foo</code> properly?</p>\n</blockquote>\n<p>yes</p>",
        "id": 148121638,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818180
    },
    {
        "content": "<p>(will be back in a couple minutes, need to catch a bus)</p>",
        "id": 148121653,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818200
    },
    {
        "content": "<p>Ok so if this is just asking \"is it fine to set barriers on items that aren't the top of the stack\", it seems perfectly fine to me?</p>",
        "id": 148122213,
        "sender_full_name": "Gankra",
        "timestamp": 1542818693
    },
    {
        "content": "<p>that's one of the questions, yes -- going a bit (more) away from a strict stack discipline</p>",
        "id": 148122258,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818729
    },
    {
        "content": "<p>and other question is: what do we do about <code>Arc::drop</code>?</p>",
        "id": 148122271,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818745
    },
    {
        "content": "<p>Although I'm not clear how/why the &amp;UnsafeCell could both not be the top of the stack at the time of a barrier <em>and</em> stuff above it would be reasonable to pop?</p>",
        "id": 148122316,
        "sender_full_name": "Gankra",
        "timestamp": 1542818763
    },
    {
        "content": "<p>if we indeed want <code>&amp;UnsafeCell</code> to come with a barrier, to ensure that there is no deallocation, we must do something there</p>",
        "id": 148122327,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818768
    },
    {
        "content": "<p>like, have a <code>fetch_sub</code> that takes a raw ptr</p>",
        "id": 148122336,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818780
    },
    {
        "content": "<blockquote>\n<p>Although I'm not clear how/why the &amp;UnsafeCell could both not be the top of the stack at the time of a barrier <em>and</em> stuff above it would be reasonable to pop?</p>\n</blockquote>\n<p>\"reasonable to pop\"? my favourite <code>RefCell</code> example shows we must not pop stuff on top of a <code>&amp;UnsafeCell</code> barrier:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">aliasing_mut_and_shr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"n\">rc</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">aliasing</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">aliasing</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_escape_to_raw</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rc</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">aliasing</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_shr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">rc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">aliasing</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RefCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">23</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">bmut</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rc</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">inner</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">bmut</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">bmut</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">rc</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">23</span><span class=\"o\">+</span><span class=\"mi\">12</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148122392,
        "sender_full_name": "RalfJ",
        "timestamp": 1542818851
    },
    {
        "content": "<p>It seems like that doesn't cover what I'm saying, but not sure</p>",
        "id": 148122666,
        "sender_full_name": "Gankra",
        "timestamp": 1542819074
    },
    {
        "content": "<p>need to sketch it</p>",
        "id": 148122672,
        "sender_full_name": "Gankra",
        "timestamp": 1542819078
    },
    {
        "content": "<p>ok let's put it this way: when would it be valid for calling a function to result in a stack reduction?</p>",
        "id": 148123094,
        "sender_full_name": "Gankra",
        "timestamp": 1542819425
    },
    {
        "content": "<p>naively it would seem that functions have to preserver the caller's stack, since they're opaque..?</p>",
        "id": 148123198,
        "sender_full_name": "Gankra",
        "timestamp": 1542819490
    },
    {
        "content": "<p>maybe i'm thinking too lifetimey?</p>",
        "id": 148123254,
        "sender_full_name": "Gankra",
        "timestamp": 1542819526
    },
    {
        "content": "<p>well that's what barriers ensure</p>",
        "id": 148123570,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819759
    },
    {
        "content": "<p>that during a function call, we only pop stuff that was pushed during the call</p>",
        "id": 148123580,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819774
    },
    {
        "content": "<p>it's basically an operational reification of the principle that the lifetimes of references passed to a function outlive that function</p>",
        "id": 148123622,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819812
    },
    {
        "content": "<p>but as the <code>Arc</code> example shows, there are use-cases for <em>other functions in other threads</em> to do stuff that makes my reference invalid</p>",
        "id": 148123690,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819852
    },
    {
        "content": "<p>Is Arc potentially out of scope since you're not \"handling\" concurrency?</p>",
        "id": 148123745,
        "sender_full_name": "Gankra",
        "timestamp": 1542819911
    },
    {
        "content": "<p>or alternatively, are atomic ops just special?</p>",
        "id": 148123766,
        "sender_full_name": "Gankra",
        "timestamp": 1542819935
    },
    {
        "content": "<p>I wouldn't say so</p>",
        "id": 148123774,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819941
    },
    {
        "content": "<p>I have not thought much about concurrency, but all atomic ops happen in non-frozen data</p>",
        "id": 148123785,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819954
    },
    {
        "content": "<p>so they should all be essentially raw accesses with a <code>Shr(None)</code> tag</p>",
        "id": 148123834,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819966
    },
    {
        "content": "<p>which, I think, should work just fine -- except for this detail about deallocation</p>",
        "id": 148123849,
        "sender_full_name": "RalfJ",
        "timestamp": 1542819982
    },
    {
        "content": "<p>and no matter what my model says, it is quite clear that <code>Arc</code> <em>is</em> in conflict with <code>dereferencable</code> as we send it to LLVM</p>",
        "id": 148123880,
        "sender_full_name": "RalfJ",
        "timestamp": 1542820020
    },
    {
        "content": "<p>Stacked Borrows can just tell us whether the fault is in Arc, or in rustc</p>",
        "id": 148123899,
        "sender_full_name": "RalfJ",
        "timestamp": 1542820039
    },
    {
        "content": "<p>Is this only possible because ArcInner has an UnsafeCell?</p>",
        "id": 148124039,
        "sender_full_name": "Gankra",
        "timestamp": 1542820167
    },
    {
        "content": "<p>yes</p>",
        "id": 148124152,
        "sender_full_name": "RalfJ",
        "timestamp": 1542820230
    },
    {
        "content": "<p>races are generally only possible on <code>UnsafeCell</code></p>",
        "id": 148124163,
        "sender_full_name": "RalfJ",
        "timestamp": 1542820240
    },
    {
        "content": "<p>as they require shared accesses where at least one is a write</p>",
        "id": 148124174,
        "sender_full_name": "RalfJ",
        "timestamp": 1542820249
    },
    {
        "content": "<p>ok now I see why you brought up this freeing closure example</p>",
        "id": 148124184,
        "sender_full_name": "Gankra",
        "timestamp": 1542820257
    },
    {
        "content": "<p>:)</p>",
        "id": 148124295,
        "sender_full_name": "RalfJ",
        "timestamp": 1542820347
    },
    {
        "content": "<p>I am increasingly convincing myself that &amp;UnsafeCell should not be considered dereferenceable, as they are all candidates for atomic accesses, which seems fundamentally racey?</p>",
        "id": 148125627,
        "sender_full_name": "Gankra",
        "timestamp": 1542821856
    },
    {
        "content": "<p>I've been back-and-forth between both possibilities</p>",
        "id": 148125900,
        "sender_full_name": "RalfJ",
        "timestamp": 1542822092
    },
    {
        "content": "<p>but it definitely seems footgun-y to make it <code>dereferencable</code></p>",
        "id": 148125912,
        "sender_full_name": "RalfJ",
        "timestamp": 1542822110
    },
    {
        "content": "<p>Also I will blindly assert optimizing UnsafeCell memory accesses is low impact?</p>",
        "id": 148126091,
        "sender_full_name": "Gankra",
        "timestamp": 1542822264
    },
    {
        "content": "<p>I do not like that I am leaning towards the freeing-closure being valid</p>",
        "id": 148126362,
        "sender_full_name": "Gankra",
        "timestamp": 1542822529
    },
    {
        "content": "<blockquote>\n<p>Also I will blindly assert optimizing UnsafeCell memory accesses is low impact?</p>\n</blockquote>\n<p>I guess we should measure that?</p>",
        "id": 148127321,
        "sender_full_name": "RalfJ",
        "timestamp": 1542823441
    },
    {
        "content": "<p>I mean, intuitively either every access is carefully managed and so there's not much to do (Arc) or you escape to internal references ASAP (RefCell)</p>",
        "id": 148130607,
        "sender_full_name": "Gankra",
        "timestamp": 1542826584
    },
    {
        "content": "<p>\"internal references\"?</p>",
        "id": 148131045,
        "sender_full_name": "RalfJ",
        "timestamp": 1542827131
    },
    {
        "content": "<p>Like with RefCell/Mutex you make a guard and then promote that to a reference inside (and thus unaffected by) the UnsafeCell</p>",
        "id": 148131288,
        "sender_full_name": "Gankra",
        "timestamp": 1542827441
    },
    {
        "content": "<p>ah I see. yes.</p>",
        "id": 148131400,
        "sender_full_name": "RalfJ",
        "timestamp": 1542827599
    },
    {
        "content": "<blockquote>\n<p>For the UnsafeCell example, I definitely had a mental model that function arguments had a phantom use at the start and end of the function</p>\n</blockquote>\n<p>btw, this immediately implies that <code>BTreeMap</code> as of now is incorrect, because that phantom use is out-of-bounds if the reference points to an allocation that is \"too short\" compared to its type ;)</p>",
        "id": 148140254,
        "sender_full_name": "RalfJ",
        "timestamp": 1542838101
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> </p>\n<blockquote>\n<p>I mean, intuitively either every access is carefully managed and so there's not much to do (Arc) or you escape to internal references ASAP (RefCell)</p>\n</blockquote>\n<p>This sorta makes sense for Arc and RefCell, but UnsafeCell also powers Cell, which is supposed to be a cheap way to get shared mutable memory -- much like any <code>T &amp;</code> in C++, for example. I can easily see <code>dereferenceable</code> mattering for that kind of usage. I am actually coming around to UnsafeCell allowing deallocation under one's feet (Clang's usage of <code>dereferenceable</code> is unsound for the same reasons) but it might very well result in a measurable loss of optimization power.</p>",
        "id": 148167928,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1542883788
    },
    {
        "content": "<p>Ideally <code>Cell</code> could opt back into that, but that seems hard to do practically</p>",
        "id": 148171217,
        "sender_full_name": "RalfJ",
        "timestamp": 1542888077
    },
    {
        "content": "<p>FWIW, all the complications around barriers for <code>UnsafeCell</code> do not apply to <code>Cell</code> because one cannot get a reference into a <code>Cell</code></p>",
        "id": 148171231,
        "sender_full_name": "RalfJ",
        "timestamp": 1542888104
    },
    {
        "content": "<p>wait, question - why can't we mark it as dereferenceable, given that C++ has the same issue?</p>",
        "id": 148184613,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542903902
    },
    {
        "content": "<p>(which would imply it's not UB to deallocate from under the feet of a reference)</p>",
        "id": 148184626,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542903924
    },
    {
        "content": "<p>unless this is a known bug in LLVM</p>",
        "id": 148184630,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542903934
    },
    {
        "content": "<blockquote>\n<p>unless this is a known bug in LLVM</p>\n</blockquote>\n<p>it is</p>",
        "id": 148184869,
        "sender_full_name": "RalfJ",
        "timestamp": 1542904248
    },
    {
        "content": "<p>see <a href=\"https://lists.llvm.org/pipermail/llvm-dev/2018-July/124555.html\" target=\"_blank\" title=\"https://lists.llvm.org/pipermail/llvm-dev/2018-July/124555.html\">https://lists.llvm.org/pipermail/llvm-dev/2018-July/124555.html</a></p>",
        "id": 148184873,
        "sender_full_name": "RalfJ",
        "timestamp": 1542904258
    },
    {
        "content": "<p>mmh</p>",
        "id": 148191815,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542914924
    },
    {
        "content": "<p>does this cause an issue in practice?</p>",
        "id": 148191819,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542914934
    },
    {
        "content": "<p>I'd be tempted to use it as long as it doesn't, since if it does, then C++ also becomes wrong</p>",
        "id": 148191828,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542914950
    },
    {
        "content": "<p>and we can yell at LLVM</p>",
        "id": 148191830,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1542914970
    },
    {
        "content": "<p>well I'd say we should first decide what guarantee we want -- we could also declare <code>Arc::drop</code> to be wrong</p>",
        "id": 148192030,
        "sender_full_name": "RalfJ",
        "timestamp": 1542915286
    },
    {
        "content": "<p>if we decide that <code>Arc::drop</code> is right and rustc is wrong, we should at least open an I-unsound issue to track this</p>",
        "id": 148192042,
        "sender_full_name": "RalfJ",
        "timestamp": 1542915318
    },
    {
        "content": "<p>(a bit like <a href=\"https://github.com/rust-lang/rust/issues/28728\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/28728\">https://github.com/rust-lang/rust/issues/28728</a>: fix required but blocked on someone getting LLVM in shape)</p>",
        "id": 148192111,
        "sender_full_name": "RalfJ",
        "timestamp": 1542915445
    }
]