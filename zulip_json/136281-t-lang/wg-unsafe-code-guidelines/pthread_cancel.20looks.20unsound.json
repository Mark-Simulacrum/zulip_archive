[
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=aa730479e323f7efe10c4d5acd590190\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=aa730479e323f7efe10c4d5acd590190\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=aa730479e323f7efe10c4d5acd590190</a></p>",
        "id": 178203749,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571152969
    },
    {
        "content": "<p>notice how the destructor of DropGuard is never called</p>",
        "id": 178203779,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571152992
    },
    {
        "content": "<p>Yet the DropGuard variable is deallocated</p>",
        "id": 178203788,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571153003
    },
    {
        "content": "<p>We do guarantee that destructors of variables are called before they are deallocated (required for Pin being sound)</p>",
        "id": 178203934,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571153077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> I recall an issue about this somewhere but I can't find it</p>",
        "id": 178205654,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571154157
    },
    {
        "content": "<p>I also recall that actually something like this should cause the other thread to unwind from a cancellation point</p>",
        "id": 178205722,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571154192
    },
    {
        "content": "<p>Good thing it's unsafe then ;)</p>",
        "id": 178205975,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1571154345
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=596dc7790e74de1da07fbbceb29e7854\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=596dc7790e74de1da07fbbceb29e7854\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=596dc7790e74de1da07fbbceb29e7854</a></p>",
        "id": 178206134,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571154449
    },
    {
        "content": "<p>It sometimes unwinds, and sometimes just gets deallocated without unwinding</p>",
        "id": 178206164,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571154479
    },
    {
        "content": "<p>it depends on whether I run it in debug or release</p>",
        "id": 178206337,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571154585
    },
    {
        "content": "<p>and the timings</p>",
        "id": 178206415,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571154614
    },
    {
        "content": "<p>So I kind of expected that this would unwind</p>",
        "id": 178206657,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571154792
    },
    {
        "content": "<p>That's bad in another whole dimension (all the syscalls or libc APIs are <code>nounwind</code>)</p>",
        "id": 178206670,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571154813
    },
    {
        "content": "<p>But what I did not expect is that this would also terminate the thread without unwinding</p>",
        "id": 178206694,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571154836
    },
    {
        "content": "<p>I'm not sure how that could even happen, a signal maybe ?</p>",
        "id": 178206764,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571154873
    },
    {
        "content": "<p>But I don't think <code>std::thread</code>s catch any signals by default</p>",
        "id": 178206811,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571154919
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-memory-model/issues/46\" target=\"_blank\" title=\"https://github.com/rust-lang/rust-memory-model/issues/46\">https://github.com/rust-lang/rust-memory-model/issues/46</a></p>",
        "id": 178207116,
        "sender_full_name": "Amanieu",
        "timestamp": 1571155103
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> The difference between debug and release is probably because the nounwind marking on the FFI sleep call is wrong.</p>",
        "id": 178207257,
        "sender_full_name": "Amanieu",
        "timestamp": 1571155202
    },
    {
        "content": "<p>I don't think we misoptimize this case due to <code>nounwind</code>, but I can check that</p>",
        "id": 178207336,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571155237
    },
    {
        "content": "<p>(the only known misoptimization requires <code>noreturn</code> + <code>nounwind</code>)</p>",
        "id": 178207363,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571155256
    },
    {
        "content": "<p>If LLVM can see that there is no way for the unwind path to be reached then it will simply eliminate the unwind path.</p>",
        "id": 178207447,
        "sender_full_name": "Amanieu",
        "timestamp": 1571155320
    },
    {
        "content": "<p>Unwinding is still happening, it's just that the destructor isn't getting called because LLVM \"knows\" that it is unreachable.</p>",
        "id": 178207576,
        "sender_full_name": "Amanieu",
        "timestamp": 1571155383
    },
    {
        "content": "<p>One possible fix is to open up \"man 7 pthreads\" and add <code>#[unwind]</code> to all functions listed as cancellation points.</p>",
        "id": 178207708,
        "sender_full_name": "Amanieu",
        "timestamp": 1571155451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> but the issue is that in debug builds destructors don't run, but they do run on release</p>",
        "id": 178207728,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571155471
    },
    {
        "content": "<p>that's the opposite of what I would expect if your hypothesis was true (LLVM optimizing debug builds, but not release builds)</p>",
        "id": 178207765,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571155492
    },
    {
        "content": "<p>In your second example you have a race. Add handle.join() at the end.</p>",
        "id": 178207902,
        "sender_full_name": "Amanieu",
        "timestamp": 1571155571
    },
    {
        "content": "<p>The threads are overlapping</p>",
        "id": 178207910,
        "sender_full_name": "Amanieu",
        "timestamp": 1571155576
    },
    {
        "content": "<p>Ah, I see what you mean now</p>",
        "id": 178208216,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571155767
    },
    {
        "content": "<p>Weird</p>",
        "id": 178208415,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571155889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> so the race is part of the problem</p>",
        "id": 178208854,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156156
    },
    {
        "content": "<p>without <code>.join()</code>, the thread gets dettached</p>",
        "id": 178208904,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156166
    },
    {
        "content": "<p>but <code>pthread_cancel</code> was already called</p>",
        "id": 178208923,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156176
    },
    {
        "content": "<p>so even if unwinding starts happening, it can happen that <code>main</code> exits before that</p>",
        "id": 178208957,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156194
    },
    {
        "content": "<p>If you look up, it's aborting with an error</p>",
        "id": 178208982,
        "sender_full_name": "Amanieu",
        "timestamp": 1571156207
    },
    {
        "content": "<p>FATAL: exception not rethrown</p>",
        "id": 178208990,
        "sender_full_name": "Amanieu",
        "timestamp": 1571156214
    },
    {
        "content": "<p>In the other case I mean</p>",
        "id": 178209012,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156228
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=fafb18f0e64c08faae4d602cbd120de1\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=fafb18f0e64c08faae4d602cbd120de1\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=fafb18f0e64c08faae4d602cbd120de1</a></p>",
        "id": 178209015,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156230
    },
    {
        "content": "<p>In that case, without <code>.join()</code>, the second thread has already been cancelled before main tries to exit, but it maybe gets dettached before the unwind is raised there</p>",
        "id": 178209057,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156261
    },
    {
        "content": "<p>Oh that's just main exiting before the thread gets to handle the exception</p>",
        "id": 178209064,
        "sender_full_name": "Amanieu",
        "timestamp": 1571156267
    },
    {
        "content": "<p>yes</p>",
        "id": 178209072,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156272
    },
    {
        "content": "<p>So this is all a false alert, unwind is working fine.</p>",
        "id": 178209162,
        "sender_full_name": "Amanieu",
        "timestamp": 1571156307
    },
    {
        "content": "<p>yes</p>",
        "id": 178209170,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156312
    },
    {
        "content": "<p>well, \"fine\"</p>",
        "id": 178209184,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156321
    },
    {
        "content": "<p>it is still unsound, but it is working reliably</p>",
        "id": 178209201,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156333
    },
    {
        "content": "<p>Well apart from FATAL: exception not rethrown, but that's because it's crashing in the <code>catch_unwind</code> at the root of the thread</p>",
        "id": 178209209,
        "sender_full_name": "Amanieu",
        "timestamp": 1571156339
    },
    {
        "content": "<p>The unwind exception thrown by pthread_cancel is not meant to be caught</p>",
        "id": 178209256,
        "sender_full_name": "Amanieu",
        "timestamp": 1571156367
    },
    {
        "content": "<p>Yes, the problem is that <code>catch_unwind</code> probably doesn't know how to handle foreign exceptions</p>",
        "id": 178209269,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156374
    },
    {
        "content": "<p>or the force exception</p>",
        "id": 178209276,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156378
    },
    {
        "content": "<p>Maybe we should fix <code>catch_unwind</code> to ignore any non-Rust exceptions</p>",
        "id": 178209279,
        "sender_full_name": "Amanieu",
        "timestamp": 1571156381
    },
    {
        "content": "<p>that's what C++ does</p>",
        "id": 178209298,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156394
    },
    {
        "content": "<p>well, C++ allows you to catch them in <code>catch(...)</code></p>",
        "id": 178209355,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156405
    },
    {
        "content": "<p>but not in any other context</p>",
        "id": 178209367,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156412
    },
    {
        "content": "<p>so if the error is \"exception not rethrown\", this must be a \"force unwind\"</p>",
        "id": 178209396,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156433
    },
    {
        "content": "<p>and the Itanium ABI says that those must always be rethrown</p>",
        "id": 178209406,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156442
    },
    {
        "content": "<p>_Unwind_ForcedUnwind</p>",
        "id": 178209552,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156549
    },
    {
        "content": "<p><a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html#base-framework\" target=\"_blank\" title=\"https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html#base-framework\">https://itanium-cxx-abi.github.io/cxx-abi/abi-eh.html#base-framework</a></p>\n<blockquote>\n<p>\"forced\" unwinding (such as caused by longjmp or thread termination).</p>\n<p>During \"forced unwinding\", on the other hand, an external agent is driving the unwinding. For instance, this can be the longjmp routine. This external agent, not each personality routine, knows when to stop unwinding. The fact that a personality routine is not given a choice about whether unwinding will proceed is indicated by the _UA_FORCE_UNWIND flag.</p>\n</blockquote>",
        "id": 178209671,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156620
    },
    {
        "content": "<p>IMO catch_unwind should only catch native rust exceptions. If you want to catch foreign exceptions, write a wrapper in C or C++.</p>",
        "id": 178210209,
        "sender_full_name": "Amanieu",
        "timestamp": 1571156902
    },
    {
        "content": "<p>but this is not a foreign exception</p>",
        "id": 178210302,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156973
    },
    {
        "content": "<p>this is a ForceUnwind</p>",
        "id": 178210310,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571156980
    },
    {
        "content": "<p>The ABI allows catching foreign exceptions and interrupting unwinding. What it doesn't allow is catching ForceUnwinds and interrupting unwinding (you can pause it, do something, but must rethrow the ForceUnwind afterwards).</p>",
        "id": 178210440,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571157060
    },
    {
        "content": "<p>That doesn't mean that <code>catch_unwind</code> should catch foreign exceptions</p>",
        "id": 178210488,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571157105
    },
    {
        "content": "<p>But even if it doesn't, we probably want to do so on the thread boundary anyways, and <code>abort</code></p>",
        "id": 178210580,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571157158
    },
    {
        "content": "<p><del>or something like that</del> abort sounds good</p>",
        "id": 178210634,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571157212
    },
    {
        "content": "<p>Otherwise the unwind will just terminate the process anyways IIUC</p>",
        "id": 178210993,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571157471
    },
    {
        "content": "<p>Or how is unwinding propagated across a thread boundary ?</p>",
        "id": 178211074,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571157506
    },
    {
        "content": "<p>Ah! This particular unwinding is allowed to reach the thread boundary, and that will cancel the thread</p>",
        "id": 178211253,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571157631
    },
    {
        "content": "<p>what happens with -C panic=abort?</p>",
        "id": 178251753,
        "sender_full_name": "comex",
        "timestamp": 1571190526
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust-memory-model/issues/46\" target=\"_blank\" title=\"https://github.com/rust-lang/rust-memory-model/issues/46\">https://github.com/rust-lang/rust-memory-model/issues/46</a></p>\n</blockquote>\n<p>moved that to the UCG repo: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/211\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/211\">https://github.com/rust-lang/unsafe-code-guidelines/issues/211</a></p>",
        "id": 178310955,
        "sender_full_name": "RalfJ",
        "timestamp": 1571247471
    },
    {
        "content": "<p>(we don't already have an issue covering that, do we?)</p>",
        "id": 178311007,
        "sender_full_name": "RalfJ",
        "timestamp": 1571247485
    },
    {
        "content": "<p>but we dont have a fitting <code>A-*</code> I think... hm</p>",
        "id": 178311030,
        "sender_full_name": "RalfJ",
        "timestamp": 1571247502
    },
    {
        "content": "<p><code>A-unwind</code>? <code>A-drop</code>?</p>",
        "id": 178311041,
        "sender_full_name": "RalfJ",
        "timestamp": 1571247509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198590\">@comex</span> AFAICT, with <code>-C panic=abort</code>, the stack frame unwinds</p>",
        "id": 178361660,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302042
    },
    {
        "content": "<p>Otherwise you can't cancel threads in C without <code>-fexceptions</code></p>",
        "id": 178361676,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302067
    },
    {
        "content": "<p>Destructors aren't necessarily run when that happens though</p>",
        "id": 178361748,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571302113
    }
]