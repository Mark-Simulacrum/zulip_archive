[
    {
        "content": "<p>Does this seem like the correct replacement / upgrade guide?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">switch</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This is safe since we will overwrite it without ever reading it.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">uninitialized</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// We absolutely must **never** panic while the uninitialized value is around!</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Foo</span>::<span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Foo</span>::<span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">uninitialized</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mem</span>::<span class=\"n\">forget</span><span class=\"p\">(</span><span class=\"n\">uninitialized</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>New</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">switch</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">this</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"c1\">// After this line, `self` and `this` are effectively undefined and</span>\n<span class=\"w\">        </span><span class=\"c1\">// must not be read until we re-establish a value. This also means</span>\n<span class=\"w\">        </span><span class=\"c1\">// that the code must **not** panic!</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Foo</span>::<span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Foo</span>::<span class=\"n\">Baz</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">ptr</span>::<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188944396,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1582563495
    },
    {
        "content": "<p>The <code>read</code> and <code>write</code> seem reasonable, but that <code>transmute</code> feels heavy-handed.</p>",
        "id": 188945571,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1582564284
    },
    {
        "content": "<p>You can go through raw pointer casts if you want - <code>&amp;mut *(self as *mut Self as *mut MaybeUninit&lt;Self&gt;)</code></p>",
        "id": 188946729,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1582565124
    },
    {
        "content": "<p>might also be worth adding an abort-on-unwind guard type as a bit of extra insurance</p>",
        "id": 188946774,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1582565153
    },
    {
        "content": "<p>a transmute seems preferable and less of a footgun, cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 188946827,
        "sender_full_name": "centril",
        "timestamp": 1582565164
    },
    {
        "content": "<p>This is <a href=\"https://docs.rs/take_mut/0.2.2/take_mut/fn.take.html\" target=\"_blank\" title=\"https://docs.rs/take_mut/0.2.2/take_mut/fn.take.html\">https://docs.rs/take_mut/0.2.2/take_mut/fn.take.html</a>  tho so I wouldn't roll my own inline version of that</p>",
        "id": 188947059,
        "sender_full_name": "centril",
        "timestamp": 1582565309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping/near/188945571\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping/near/188945571\">said</a>:</p>\n<blockquote>\n<p>The <code>read</code> and <code>write</code> seem reasonable, but that <code>transmute</code> feels heavy-handed.</p>\n</blockquote>\n<p><code>uninitialized</code> is in some sense a much bigger hammer than <code>transmute</code> though, I'd say</p>",
        "id": 188948311,
        "sender_full_name": "RalfJ",
        "timestamp": 1582566103
    },
    {
        "content": "<p>The <code>take_mut</code> crate doesn't use <code>MaybeUninit</code>; does that worry anyone?</p>",
        "id": 188952652,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1582569298
    },
    {
        "content": "<p>It should be fine, it never uses undefined bytes.</p>",
        "id": 188953370,
        "sender_full_name": "Amanieu",
        "timestamp": 1582569833
    },
    {
        "content": "<blockquote>\n<p>it never uses undefined bytes.</p>\n</blockquote>\n<p>I'm not sure I follow. Seems like if I take that argument to the end, there was never a need for <code>MaybeUninit</code> in the first place, so long as people never used undefined bytes.</p>",
        "id": 188961578,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1582575246
    },
    {
        "content": "<p>The comment is definitely incorrect</p>",
        "id": 188999870,
        "sender_full_name": "Lokathor",
        "timestamp": 1582619236
    },
    {
        "content": "<p>the panic danger is not that self and this are both uninitialized. The panic danger is that tmp is a byte duplicate of a non-Copy type so you're in danger of a double drop.</p>",
        "id": 188999970,
        "sender_full_name": "Lokathor",
        "timestamp": 1582619354
    },
    {
        "content": "<p>In fact, because of the way read and write are used in the new version, there's absolutely no need for uninit at all.</p>",
        "id": 189000174,
        "sender_full_name": "Lokathor",
        "timestamp": 1582619631
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> There's no need in your code for MaybeUninit. there's only a need to prevent panicking and dropping. because if it has a non trivial Drop impl it can then use after free or read uninit bytes etc.</p>",
        "id": 189004154,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1582623828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping/near/188961578\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping/near/188961578\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>it never uses undefined bytes.</p>\n</blockquote>\n<p>I'm not sure I follow. Seems like if I take that argument to the end, there was never a need for <code>MaybeUninit</code> in the first place, so long as people never used undefined bytes.</p>\n</blockquote>\n<p>ah, and again we have confusion about the word \"use\"</p>",
        "id": 189100374,
        "sender_full_name": "RalfJ",
        "timestamp": 1582711596
    },
    {
        "content": "<p>the term we use in the reference now is \"you must not <em>produce</em> an invalid value\".<br>\n<code>MaybeUninit::&lt;bool&gt;::uninit().assume_init()</code> produces a <code>bool</code> that is invalid, hence it is UB.<br>\n<code>take_mut</code>, however, never does anything like that.</p>",
        "id": 189100429,
        "sender_full_name": "RalfJ",
        "timestamp": 1582711659
    },
    {
        "content": "<p>doing <code>ptr::read</code> on an <code>&amp;mut T</code> does not <em>produce</em> an invalid value anywhere -- the only value it produces at all is what gets returned, which is a valid <code>T</code> (assuming there wasn't already something wrong with the reference)</p>",
        "id": 189100503,
        "sender_full_name": "RalfJ",
        "timestamp": 1582711706
    },
    {
        "content": "<p>What happens if you read from <code>&amp;mut &amp;mut T</code>?  Can you end up with 2 unique pointers pointing to the same location?</p>",
        "id": 189163620,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1582753958
    },
    {
        "content": "<p>yes actually.</p>\n<p><code>ptr::read</code> doesn't in any way affect what you read from, so there's no \"de-initialization\" or anything like that (despite what many people seem to believe).</p>",
        "id": 189165745,
        "sender_full_name": "Lokathor",
        "timestamp": 1582755193
    },
    {
        "content": "<p>Does that mean that the <code>take_mut</code> crate is unsound? It does pretty much this.<br>\n<a href=\"https://docs.rs/take_mut/0.2.2/src/take_mut/lib.rs.html#31-41\" target=\"_blank\" title=\"https://docs.rs/take_mut/0.2.2/src/take_mut/lib.rs.html#31-41\">https://docs.rs/take_mut/0.2.2/src/take_mut/lib.rs.html#31-41</a><br>\nAnd if it is unsound then is there a way to make it sound?</p>",
        "id": 189169649,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1582757691
    },
    {
        "content": "<p>So I got up from a nap, and happened to check Zullip first, and you really made my heart sink with this one. :(</p>\n<p>You'd have to run Miri on it to be sure. Maybe I'm wrong and this particular code flow is somehow a freakish edgecase that is allowed. I don't think so though. I think it really is unsound if T is a unique reference (or something that contains a unique reference).</p>\n<p>If there is a problem, I don't think there's any possible fix in the general case.</p>\n<p>You could add a bound of <code>where T: 'static</code> to the function, but that can be evaded if you have <code>&amp;'static mut T</code>. That sounds silly for a moment maybe, until you remember that <code>Box::leak</code> is officially stable and safe and gives you <code>&amp;'a mut T</code> when you leak the box and it <em>goes out of its way</em> to say you can have 'a be 'static if your referenced type is 'static.</p>",
        "id": 189186122,
        "sender_full_name": "Lokathor",
        "timestamp": 1582777727
    },
    {
        "content": "<p>take_mut uses catch_unwind, but that won't catch foreign exceptions.</p>",
        "id": 189190892,
        "sender_full_name": "bjorn3",
        "timestamp": 1582785911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping/near/189163620\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping/near/189163620\">said</a>:</p>\n<blockquote>\n<p>What happens if you read from <code>&amp;mut &amp;mut T</code>?  Can you end up with 2 unique pointers pointing to the same location?</p>\n</blockquote>\n<p>this is where the details of the aliasing model really become relevant -- e.g., <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\">Stacked Borrows</a>. A more concrete example would help me answer your question.</p>",
        "id": 189194159,
        "sender_full_name": "RalfJ",
        "timestamp": 1582791417
    },
    {
        "content": "<p>but <code>take_mut</code> should be fine, I think -- the uniqueness is not about which references <em>exist</em> but about which <em>get used</em></p>",
        "id": 189194181,
        "sender_full_name": "RalfJ",
        "timestamp": 1582791465
    },
    {
        "content": "<p>(where \"use\" is defined rather loosely, and a reborrow or assignment/move/copy is already a use)</p>",
        "id": 189194223,
        "sender_full_name": "RalfJ",
        "timestamp": 1582791489
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping/near/189190892\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping/near/189190892\">said</a>:</p>\n<blockquote>\n<p>take_mut uses catch_unwind, but that won't catch foreign exceptions.</p>\n</blockquote>\n<p>I dont think there are non-UB foreign exceptions in Rust as of today?</p>",
        "id": 189194257,
        "sender_full_name": "RalfJ",
        "timestamp": 1582791578
    },
    {
        "content": "<p>Indeed, but there will be in the future.</p>",
        "id": 189194767,
        "sender_full_name": "bjorn3",
        "timestamp": 1582792218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> So... a person <em>can</em> have two unique references to the same location as long as they don't actually use both of them?</p>\n<p>That seems quite different from the previous position of \"any aliasing is immediately UB (even before you do anything with it)\"</p>",
        "id": 189196584,
        "sender_full_name": "Lokathor",
        "timestamp": 1582794160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping/near/189194767\" title=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/updating.20uninitialized.20swapping/near/189194767\">said</a>:</p>\n<blockquote>\n<p>Indeed, but there will be in the future.</p>\n</blockquote>\n<p>this seems pretty relevant for the unwinding discussion then -- adding kinds of uwninding that <code>catch_unwind</code> does not catch could make take_mut, rayon and other libraries unsound</p>",
        "id": 189197391,
        "sender_full_name": "RalfJ",
        "timestamp": 1582795007
    },
    {
        "content": "<p>is that already on the radar of the FFI-unwind group? Where would be a good point to raise this?</p>",
        "id": 189197403,
        "sender_full_name": "RalfJ",
        "timestamp": 1582795021
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"120076\">@BatmanAoD (Kyle Strand)</span></p>",
        "id": 189197423,
        "sender_full_name": "RalfJ",
        "timestamp": 1582795045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> I mean, safe code can have two mutable references to the same location as long as it doesnt use both of them... </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// x and y are aliasing</span>\n</pre></div>",
        "id": 189197504,
        "sender_full_name": "RalfJ",
        "timestamp": 1582795095
    },
    {
        "content": "<p>I dont think I ever said \"any aliasing is UB\", I said \"just creating the reference counts as access and causes UB <em>if there is a conflict</em>\"</p>",
        "id": 189197543,
        "sender_full_name": "RalfJ",
        "timestamp": 1582795140
    },
    {
        "content": "<p>but if all uses/reborrows/reference creations are well-nested following the stack, there's no conflict</p>",
        "id": 189197557,
        "sender_full_name": "RalfJ",
        "timestamp": 1582795160
    },
    {
        "content": "<p>but the take_mut case doesn't follow the stack really</p>",
        "id": 189197576,
        "sender_full_name": "Lokathor",
        "timestamp": 1582795197
    },
    {
        "content": "<p>you'd have like... two elements at the same stack depth, uh, sorta</p>",
        "id": 189197628,
        "sender_full_name": "Lokathor",
        "timestamp": 1582795214
    },
    {
        "content": "<p>that's not really possible. I guess I need to see some concrete code to understand what you are concerned about.</p>",
        "id": 189197792,
        "sender_full_name": "RalfJ",
        "timestamp": 1582795452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> regarding unwinding the best place to ask is <a class=\"stream\" data-stream-id=\"210922\" href=\"/#narrow/stream/210922-project-ffi-unwind\">#project-ffi-unwind</a></p>",
        "id": 189206645,
        "sender_full_name": "Amanieu",
        "timestamp": 1582804384
    },
    {
        "content": "<p>But yes, <code>catch_unwind</code> can only catch Rust panics because it has to return a <code>Box&lt;Any&gt;</code>. This is not possible for foreign exceptions.</p>",
        "id": 189206676,
        "sender_full_name": "Amanieu",
        "timestamp": 1582804435
    },
    {
        "content": "<p>I guess we could return a <code>Box&lt;ForeignException&gt;</code>, but then if you try to rethrow that with <code>resume_unwind</code> you get a Rust panic, not the original foreign exception.</p>",
        "id": 189207066,
        "sender_full_name": "Amanieu",
        "timestamp": 1582804863
    },
    {
        "content": "<p>probably catch_foreign_exception as a separate utility would be best</p>",
        "id": 189228948,
        "sender_full_name": "Lokathor",
        "timestamp": 1582820651
    },
    {
        "content": "<blockquote>\n<p>probably catch_foreign_exception as a separate utility would be best</p>\n</blockquote>\n<p>I can't imagine any realistic case where you'd want to catch only foreign exceptions and not rust panics</p>",
        "id": 189279693,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1582858768
    },
    {
        "content": "<p>immediately around an ffi call of course</p>",
        "id": 189288172,
        "sender_full_name": "Lokathor",
        "timestamp": 1582873395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> you are right, sorry for the noise, I'll move the unwinding thing there</p>",
        "id": 189294407,
        "sender_full_name": "RalfJ",
        "timestamp": 1582881603
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 189347963,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1582921896
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 189348050,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1582921954
    }
]