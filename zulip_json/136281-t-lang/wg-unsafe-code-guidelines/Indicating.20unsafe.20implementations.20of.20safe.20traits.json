[
    {
        "content": "<p>I want to put a raw pointer into a HashSet. However, the implementation of Hash / Borrow require accessing the pointers data. That means I need to have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Borrow</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RawStr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">borrow</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This means that someone could call these trait methods without realizing the safety invariants they need to uphold. </p>\n<p>In my case, I’m going to put it in a tightly controlled module and wrap it in a newtype, but I can foresee accidentally leaking some “safe” method that is actually unsafe. Are there any good suggestions to protect myself and my users?</p>",
        "id": 223755331,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611416296
    },
    {
        "content": "<p>I want to put a raw pointer into a HashSet. However, the implementation of Hash / Borrow require accessing the pointers data. That means I need to have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Borrow</span><span class=\"o\">&lt;</span><span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RawStr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">borrow</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This means that someone could call these trait methods without realizing the safety invariants they need to uphold. </p>\n<p>In my case, I’m going to put it in a tightly controlled module and wrap it in a newtype, but I can foresee accidentally leaking some “safe” method that is actually unsafe. Are there any good suggestions to protect myself and my users?</p>",
        "id": 223755341,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611416307
    },
    {
        "content": "<p>I think the most likely avenue for making this work is to ensure that the trait impl is private, which, since that's not a thing, probably means that users can't be given access to <code>RawStr</code> and/or <code>HashSet&lt;RawStr, ...&gt;</code> at all</p>",
        "id": 223755786,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1611416906
    },
    {
        "content": "<p>Yep, that’s what I mean by module and newtype. Good to know that I was on the right path.</p>",
        "id": 223756917,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1611418380
    }
]