[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I mentioned Pin in the last commit, but I guess my question was whether not jumping over Pin is a safety or validity invariant of Pin</p>",
        "id": 158800105,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550496870
    },
    {
        "content": "<p>*jumping, and deallocating Pin's memory without dropping the Pin</p>",
        "id": 158800142,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550496907
    },
    {
        "content": "<p>IIUC the issue is that safe Rust guarantees that freeing the memory of a Drop type will run its destructor</p>",
        "id": 158800309,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497076
    },
    {
        "content": "<p>it's a safety thing</p>",
        "id": 158800378,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497112
    },
    {
        "content": "<p>an incorrect non-local jump can break this guarantee, and if it does, the behavior is undefined</p>",
        "id": 158800389,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497133
    },
    {
        "content": "<p>but that's the case independently of whether you jump over a Pin or some other type</p>",
        "id": 158800410,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497155
    },
    {
        "content": "<blockquote>\n<p>IIUC the issue is that safe Rust guarantees that freeing the memory of a Drop type will run its destructor</p>\n</blockquote>\n<p>well, not really. You can do e.g. <code>fn free_box_without_drop(x: Box&lt;T&gt;) { mem::forget(*x) }</code></p>",
        "id": 158800419,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497163
    },
    {
        "content": "<p>the problem with Pin is that if drop is not called you can get an use-after-free right?</p>",
        "id": 158800442,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497197
    },
    {
        "content": "<p>e.g. if some future is running in an executor in a different thread, and tries to read the memory behind the Pin which was deallocated</p>",
        "id": 158800507,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497224
    },
    {
        "content": "<p>uh, no. futures don't need this guarantee.</p>",
        "id": 158800539,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497271
    },
    {
        "content": "<blockquote>\n<p>well, not really. You can do e.g. <code>fn free_box_without_drop(x: Box&lt;T&gt;) { mem::forget(*x) }</code></p>\n</blockquote>",
        "id": 158800547,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497285
    },
    {
        "content": "<p>so what's the fundamental thing that non-local goto's break that Pin relies on ?</p>",
        "id": 158800548,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497285
    },
    {
        "content": "<p>the guarantee is relevant for intrusive collections</p>",
        "id": 158800549,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497285
    },
    {
        "content": "<p>and that my Pin-like library couldn't make use of ?</p>",
        "id": 158800559,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497296
    },
    {
        "content": "<p>(sorry i'm in an ICE and WLAN sucks)</p>",
        "id": 158800566,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497307
    },
    {
        "content": "<blockquote>\n<p>so what's the fundamental thing that non-local goto's break that Pin relies on ?</p>\n</blockquote>\n<p><a href=\"https://www.ralfj.de/blog/2018/04/10/safe-intrusive-collections-with-pinning.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2018/04/10/safe-intrusive-collections-with-pinning.html\">https://www.ralfj.de/blog/2018/04/10/safe-intrusive-collections-with-pinning.html</a></p>",
        "id": 158800583,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497315
    },
    {
        "content": "<blockquote>\n<p>and that my Pin-like library couldn't make use of ?</p>\n</blockquote>\n<p>well I suppose now that we blessed <code>Pin</code> other libs can do similar things</p>",
        "id": 158800657,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497364
    },
    {
        "content": "<p>but before <code>Pin</code> there just was no (blessed) type that relied on things like this</p>",
        "id": 158800668,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497384
    },
    {
        "content": "<p>But Pin's safety invariant is just a doc comment AFAICT</p>",
        "id": 158800686,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497409
    },
    {
        "content": "<p>so what?</p>",
        "id": 158800690,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497417
    },
    {
        "content": "<p>this is abozut the semantic meaning of types</p>",
        "id": 158800694,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497423
    },
    {
        "content": "<p>the compiler doesn't understand these</p>",
        "id": 158800697,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497429
    },
    {
        "content": "<p>but still they are relevant when building safe abstractions</p>",
        "id": 158800701,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497438
    },
    {
        "content": "<p>it assumes that safe Rust code can't do non-local jumps and that is still true</p>",
        "id": 158800761,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497472
    },
    {
        "content": "<p>sure, my point is just that Pin isn't special</p>",
        "id": 158800762,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497474
    },
    {
        "content": "<p>it's just like leakpocalpyse. the safety invariants involved here were all just doc comments, and yet we got UB -- from compsotion of several libraries that were safe in isolation.</p>",
        "id": 158800769,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497483
    },
    {
        "content": "<blockquote>\n<p>sure, my point is just that Pin isn't special</p>\n</blockquote>\n<p>well, it is and it isn't. when two libraries are mutually incompatible, which one is special?</p>",
        "id": 158800792,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497507
    },
    {
        "content": "<p>a non-local jump over a Drop type is UB, independently of whether Pin exists or not</p>",
        "id": 158800817,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497531
    },
    {
        "content": "<p>like, you could kick out <code>Pin</code> and have some kind of safe closure-based interface for setjmp/longjmp</p>",
        "id": 158800821,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497532
    },
    {
        "content": "<p>no it isnt</p>",
        "id": 158800827,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497536
    },
    {
        "content": "<p>that's just <code>mem::forget</code> of a stack frame, basically</p>",
        "id": 158800836,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497551
    },
    {
        "content": "<p>the thing is that you cannot <code>mem::forget</code> the <em>content</em> of a <code>Pin&lt;Box&lt;T&gt;&gt;</code></p>",
        "id": 158800902,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497583
    },
    {
        "content": "<p>and you cannot <code>mem::forget</code> something that got pinned to the stack using pin-utils either</p>",
        "id": 158800913,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497595
    },
    {
        "content": "<p>ah because you can move out of the <code>Box</code> but you can't move out of the <code>Pin&lt;Box&gt;</code></p>",
        "id": 158800965,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497660
    },
    {
        "content": "<p>but you can do that with unsafe code, and the non-local jump allows you to do that with unsafe code as well</p>",
        "id": 158801028,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497701
    },
    {
        "content": "<p>so in a sense, <code>Pin</code> is special -- just as special as <code>Rc</code></p>",
        "id": 158801032,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497703
    },
    {
        "content": "<p>they both are blessed safe APIs that restrict what other safe APIs may do</p>",
        "id": 158801036,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497713
    },
    {
        "content": "<p>even though the compiler knows nothing about either of them</p>",
        "id": 158801042,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497720
    },
    {
        "content": "<blockquote>\n<p>they both are blessed safe APIs that restrict what other safe APIs may do</p>\n</blockquote>\n<p>sorry, \"do\" was the wrong term here.<br>\nthey restrict what other safe APIs may <em>assume about unknown safe code</em>.</p>",
        "id": 158801067,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497748
    },
    {
        "content": "<p>and that is the key point</p>",
        "id": 158801072,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497752
    },
    {
        "content": "<p>so the question is whether you can create a safe wrapper over non-local jumps that works even if Pin exists?</p>",
        "id": 158801081,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497764
    },
    {
        "content": "<p>I don't think you can, as you have to rule out stack-pinned variables</p>",
        "id": 158801095,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497780
    },
    {
        "content": "<p>on the stack frames you are killing</p>",
        "id": 158801100,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497786
    },
    {
        "content": "<p>but if e.g. we decided that stack pinning wasnt possible, we could have a safe wrapper for such non-local jumps</p>",
        "id": 158801179,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497814
    },
    {
        "content": "<p>yeah, a stack frame with pinned variables is \"pinned\" as well, in some sense</p>",
        "id": 158801180,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497816
    },
    {
        "content": "<p>exactly</p>",
        "id": 158801185,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497821
    },
    {
        "content": "<p>there are many other issues that make writing a safe wrapper for such non-local jumps probably impossible</p>",
        "id": 158801215,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497849
    },
    {
        "content": "<p>so even if Pin would not exist, that would at least be very hard</p>",
        "id": 158801229,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497867
    },
    {
        "content": "<p>are you sure? the rest you mention seem solvable to me</p>",
        "id": 158801231,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497869
    },
    {
        "content": "<p>with a closure-based API in the style of call/cc + lifetimes to control scopding</p>",
        "id": 158801238,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497886
    },
    {
        "content": "<p>you can't allow non-volatile reads and stores between the setjmp and longjmp, you can't call longjump from a different thread</p>",
        "id": 158801256,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497902
    },
    {
        "content": "<p>and non-<code>Send</code> types to make sure the \"handle\" stays in the same thread</p>",
        "id": 158801261,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497909
    },
    {
        "content": "<p>ah right you mentioned those stores, I dont understand why they are necessary</p>",
        "id": 158801267,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497918
    },
    {
        "content": "<p>that would mean that you can't create new send types within the closure</p>",
        "id": 158801325,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497939
    },
    {
        "content": "<p>nono the handle gets passed in as an extra argument</p>",
        "id": 158801341,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497957
    },
    {
        "content": "<p>just make that non-<code>Send</code></p>",
        "id": 158801343,
        "sender_full_name": "RalfJ",
        "timestamp": 1550497959
    },
    {
        "content": "<p>ah just like crossbeam scope ?</p>",
        "id": 158801381,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550497996
    },
    {
        "content": "<p>yeah sth like that</p>",
        "id": 158801387,
        "sender_full_name": "RalfJ",
        "timestamp": 1550498003
    },
    {
        "content": "<p>if you can only longjmp back from the handle, then that problem is solvable</p>",
        "id": 158801403,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550498021
    },
    {
        "content": "<p>so why do all laods/stores need to be volatile? that's weird</p>",
        "id": 158801450,
        "sender_full_name": "RalfJ",
        "timestamp": 1550498043
    },
    {
        "content": "<p>basically because the C standard says so and that's what LLVM implements</p>",
        "id": 158801465,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550498067
    },
    {
        "content": "<p>I'd intuitively (without any idea what I am talking about :P ) expect that compiler barriers around setjmp and longjmp should suffice</p>",
        "id": 158801476,
        "sender_full_name": "RalfJ",
        "timestamp": 1550498086
    },
    {
        "content": "<p>well there's probably a reason they are saying this, some transformations that would otherwise break stuff or so</p>",
        "id": 158801491,
        "sender_full_name": "RalfJ",
        "timestamp": 1550498103
    },
    {
        "content": "<p><code>#[returns_twice]</code> elides certain optimizations, but not all of them</p>",
        "id": 158801506,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550498123
    },
    {
        "content": "<p>i have one example, sec:</p>",
        "id": 158801507,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550498123
    },
    {
        "content": "<p>This is UB even if <code>setjmp</code> is <code>returns_twice</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span>: <span class=\"nc\">jmp_buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">setjmp</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"c1\">// Step 0: setjmp returns 0</span>\n<span class=\"w\">        </span><span class=\"c1\">// Step 3: when setjmp returns 1 x has always been</span>\n<span class=\"w\">        </span><span class=\"c1\">// modified to be  == 13 so this should always return 13:</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Step 1: x is modified</span>\n<span class=\"w\">    </span><span class=\"n\">longjmp</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Step 2: jumps to Step 0 returning 1</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"c1\">// this will never be reached</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 158801609,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550498231
    },
    {
        "content": "<p>That's because: <a href=\"http://port70.net/~nsz/c/c11/n1570.html#7.13.2.1p3\" target=\"_blank\" title=\"http://port70.net/~nsz/c/c11/n1570.html#7.13.2.1p3\">http://port70.net/~nsz/c/c11/n1570.html#7.13.2.1p3</a></p>",
        "id": 158801850,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550498434
    },
    {
        "content": "<p>Basically, <code>longjmp</code> states that, because <code>x</code> was modified between the <code>setjmp</code> and the <code>longjmp</code>, the behavior of performing a non-volatile read of it is undefined.</p>",
        "id": 158801988,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550498580
    },
    {
        "content": "<p>We could allow that in Rust, but the API docs of the C FFI function would still say that this is UB.</p>",
        "id": 158802242,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550498825
    },
    {
        "content": "<p>so the problem is the compiler will move the store to after the <code>longjmp</code>?</p>",
        "id": 158802454,
        "sender_full_name": "RalfJ",
        "timestamp": 1550499040
    },
    {
        "content": "<p>hm, I see... compiler barriers don't help because of the \"did the address escape\" analysis compilers are doing.</p>",
        "id": 158802482,
        "sender_full_name": "RalfJ",
        "timestamp": 1550499071
    },
    {
        "content": "<p>that analysis is cause so much trouble :(</p>",
        "id": 158802486,
        "sender_full_name": "RalfJ",
        "timestamp": 1550499081
    },
    {
        "content": "<p>the problem is that the compiler might const propagate x = 42 to return x because it assumes that if some code changed it, the user needs to perform a volatile read, but it is not doing that here</p>",
        "id": 158802490,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550499086
    },
    {
        "content": "<p>basically, LLVM <code>returns_twice</code> maps to C's semantics, where if a volatile read is not used, LLVM assumes that the value was not modified between the <code>setjmp</code> and the <code>longjmp</code>.</p>",
        "id": 158802571,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550499142
    },
    {
        "content": "<p>the LLVM <code>returns_twice</code> attribute disables other optimizations, but not this one</p>",
        "id": 158802621,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550499220
    },
    {
        "content": "<p>since for C, that optimization is correct</p>",
        "id": 158802632,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550499233
    },
    {
        "content": "<p>(if the compiler cannot prove that the value was not modified, it would need to insert a volatile load)</p>",
        "id": 158802692,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550499261
    },
    {
        "content": "<p>setjmp/longjmp = unsafe &amp; problems solved.</p>",
        "id": 158805366,
        "sender_full_name": "nagisa",
        "timestamp": 1550501792
    },
    {
        "content": "<p><span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 158805371,
        "sender_full_name": "nagisa",
        "timestamp": 1550501798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> so I was trying to add a summary comment of the discussion before modifying the RFC, and I am not sure I fully understood: <code>fn free_box_without_drop(x: Box&lt;T&gt;) { mem::forget(*x) }</code>. That function moves the content of the box out of the box into stack storage, then drops the empty Box, right? That's not the exact same thing as freeing the box without dropping its contents and without moving its contents into the stack.</p>",
        "id": 158808231,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550504314
    },
    {
        "content": "<p>Is it possible to free the box memory without dropping its contents and without using extra stack memory in safe Rust? (that would be more similar to what non-local goto does). I am not sure if the difference matters though.</p>",
        "id": 158808272,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550504384
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">@RalfJ</span> so I was trying to add a summary comment of the discussion before modifying the RFC, and I am not sure I fully understood: <code>fn free_box_without_drop(x: Box&lt;T&gt;) { mem::forget(*x) }</code>. That function moves the content of the box out of the box into stack storage, then drops the empty Box, right? That's not the exact same thing as freeing the box without dropping its contents and without moving its contents into the stack.</p>\n</blockquote>\n<p>the <code>memcpy</code> of the contents to the stack is not observable (ignoring stack overflow^^)</p>",
        "id": 158808396,
        "sender_full_name": "RalfJ",
        "timestamp": 1550504485
    },
    {
        "content": "<p>so I'd argue this is exactly dropping the Box without dropping its contents</p>",
        "id": 158808401,
        "sender_full_name": "RalfJ",
        "timestamp": 1550504497
    },
    {
        "content": "<p>actually I'd expect LLVM will optimize away the useless <code>memcpy</code></p>",
        "id": 158808411,
        "sender_full_name": "RalfJ",
        "timestamp": 1550504515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> i think the issue with the longjmp is that it takes ownership of all the stack frames</p>",
        "id": 158808605,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550504680
    },
    {
        "content": "<p>moves them out, and frees them</p>",
        "id": 158808632,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550504712
    },
    {
        "content": "<p>there's many ways to describe the same issue ;)</p>",
        "id": 158808713,
        "sender_full_name": "RalfJ",
        "timestamp": 1550504782
    },
    {
        "content": "<p>but you can't move a <code>Pin</code> (that's the whole point), so the problem with longjmp is a move of a <code>!Move</code> type, or however we would express <code>Pin</code> in the type system if we could</p>",
        "id": 158808723,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550504789
    },
    {
        "content": "<p>that is, even though Rust does not have <code>Move</code> (or <code>!Move</code>), by blessing <code>Pin</code>, we have actually added them to the language</p>",
        "id": 158808812,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550504897
    },
    {
        "content": "<p>So this is what I've wrote as summarizing comment. I don't know if there is a more succinct or clear way to put this.</p>\n<hr>\n<p>The RFC is incorrect, because deallocating memory without calling destructors is ok in safe Rust, e.g., <code>fn free_box_without_drop(x: Box&lt;T&gt;) { mem::forget(*x) }</code>.</p>\n<p>Notice how, to deallocate the Box without dropping its contents, you have to move the contents of the box out first. </p>\n<p>The issue triggered by non-local goto's and <code>Pin</code>, is deallocating pinned memory. Doing that would require moving the object out of the <code>Pin</code> first, forgetting it to avoid running destructors, and then deallocating the memory, but one cannot move out of a <code>Pin</code>. </p>\n<p>So what non-local goto can introduce, is a move out of a \"<code>!Move</code>\" type, which violates the type-system invariants, and is undefined behavior.</p>",
        "id": 158809351,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550505392
    },
    {
        "content": "<p>that's not wrong, but IMO you are mixing up cause an effect here</p>",
        "id": 158821782,
        "sender_full_name": "RalfJ",
        "timestamp": 1550516672
    },
    {
        "content": "<p>really what we have added to the language by blessing <code>Pin</code> is that you cant just deallocate stuff, even if you are never going to look at it again</p>",
        "id": 158821826,
        "sender_full_name": "RalfJ",
        "timestamp": 1550516730
    },
    {
        "content": "<p>in the general case, you might have to \"ask for permission\"</p>",
        "id": 158821837,
        "sender_full_name": "RalfJ",
        "timestamp": 1550516741
    },
    {
        "content": "<p>I wouldn't call that <code>!Move</code></p>",
        "id": 158821839,
        "sender_full_name": "RalfJ",
        "timestamp": 1550516747
    },
    {
        "content": "<p>but it does have somewhat similar effects, I agree with that</p>",
        "id": 158821884,
        "sender_full_name": "RalfJ",
        "timestamp": 1550516765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210267\">@Nemo157</span> pointed out that deallocating a <code>Pin</code> without calling its destructor is not unsafe, because a <code>Pin</code> can only contain a reference to the value being allocated, but it cannot contain the value itself in line. So if the <code>Pin</code> is freed, that's ok, because no other code can have references to that Pin, only to the value it refers to, and that value would have been leaked.</p>",
        "id": 165165288,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557323993
    },
    {
        "content": "<p>e.g. if you have a <code>Pin&lt;Box&lt;T&gt;&gt;</code> jumping over the pin frees the Box memory, but does not free the memory the Box refers to</p>",
        "id": 165165395,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557324051
    },
    {
        "content": "<p>the problem would be to have a that <code>Pin&lt;&amp;mut T&gt;</code> refers to a <code>T</code>, where the <code>T</code> is freed without calling its destructor (e.g. because the <code>T</code> is jumped over)</p>",
        "id": 165165562,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557324193
    },
    {
        "content": "<blockquote>\n<p>e.g. if you have a <code>Pin&lt;Box&lt;T&gt;&gt;</code> jumping over the pin frees the Box memory, but does not free the memory the Box refers to</p>\n</blockquote>\n<p>why would it free the Box memory? the destructor for all of this never gets called.</p>",
        "id": 165167470,
        "sender_full_name": "RalfJ",
        "timestamp": 1557325588
    },
    {
        "content": "<p>i mean the memory of the Box value itself, not the memory it manages</p>",
        "id": 165167621,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557325689
    },
    {
        "content": "<p>but then where is the problem? that's the same as doing <code>mem::forget</code> on a <code>Pin&lt;Box&lt;T&gt;&gt;</code></p>",
        "id": 165169237,
        "sender_full_name": "RalfJ",
        "timestamp": 1557326815
    },
    {
        "content": "<p>no problem, just clarifying that the reason stack-pinning is unsafe with setjmp, is not because one can deallocate <code>Pin&lt;&amp;mut T&gt;</code> without calling <code>Pin</code>'s destructor, but because that <code>&amp;mut T</code> can refer to the stack, and that <code>T</code> can be deallocated without calling its destructor</p>",
        "id": 165169649,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557327111
    },
    {
        "content": "<p>that is accurate</p>",
        "id": 165169803,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327209
    },
    {
        "content": "<p>i don't know if deallocating the storage for that <code>T</code> \"moves it\", which is what the Pin docs say should not happen, but it certainly invalidates any references to the type</p>",
        "id": 165170022,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557327344
    },
    {
        "content": "<p>which is what the Pin docs might want to, at least, note</p>",
        "id": 165170099,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557327372
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/std/pin/struct.Pin.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/pin/struct.Pin.html\">https://doc.rust-lang.org/nightly/std/pin/struct.Pin.html</a></p>",
        "id": 165170114,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557327385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <a href=\"https://doc.rust-lang.org/nightly/std/pin/index.html#drop-guarantee\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/pin/index.html#drop-guarantee\">https://doc.rust-lang.org/nightly/std/pin/index.html#drop-guarantee</a></p>",
        "id": 165170152,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327420
    },
    {
        "content": "<p>is there it talks about deallocating the storage</p>",
        "id": 165170174,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327429
    },
    {
        "content": "<p>lol, i've never seen that page</p>",
        "id": 165170185,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557327445
    },
    {
        "content": "<p>I've always just looked at <code>pin::Pin</code> haha</p>",
        "id": 165170198,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557327461
    },
    {
        "content": "<p>you have seen that the only thing it says there is \"go to module docs please\"?^^</p>",
        "id": 165170272,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327487
    },
    {
        "content": "<p>as someone who spent lots of time writing that particular doc, I'd appreciate feedback for making people actually go there ;)</p>",
        "id": 165170319,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327530
    },
    {
        "content": "<p>Make it bold</p>",
        "id": 165170670,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557327744
    },
    {
        "content": "<p>and 20pt? :P</p>",
        "id": 165170684,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327759
    },
    {
        "content": "<p>I saw that, but I supposed that was just to show which other types are in the module or something</p>",
        "id": 165170694,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557327767
    },
    {
        "content": "<p>i was totally wrong</p>",
        "id": 165170705,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557327777
    },
    {
        "content": "<p>well played</p>",
        "id": 165170727,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557327792
    },
    {
        "content": "<p>there's precedent for making it italic though: <a href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">https://doc.rust-lang.org/nightly/std/primitive.i32.html</a></p>",
        "id": 165170763,
        "sender_full_name": "RalfJ",
        "timestamp": 1557327824
    },
    {
        "content": "<p>Maybe one could add a <code>**Note**: the documentation for this types lives in the module documentation and not here</code> or something like that, that makes it more clear that this page is not what the type documentation is intended to be</p>",
        "id": 165172623,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557329035
    },
    {
        "content": "<p>I disagree with the statement that this is how how it is \"intended to be\"</p>",
        "id": 165172896,
        "sender_full_name": "RalfJ",
        "timestamp": 1557329209
    },
    {
        "content": "<p>pinning-the-concept != pin-the-type</p>",
        "id": 165172905,
        "sender_full_name": "RalfJ",
        "timestamp": 1557329217
    },
    {
        "content": "<p>so module-level docs seem like the right place to me. that's why I put it there ;)</p>",
        "id": 165172928,
        "sender_full_name": "RalfJ",
        "timestamp": 1557329233
    },
    {
        "content": "<p>i mean, the type documentation is intended to just be the \"brief\" comment that IDEs show (the first line), the actual documentation (about how to use the type, or the context in which the type is intended to be used) lives in the module</p>",
        "id": 165173067,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557329330
    }
]