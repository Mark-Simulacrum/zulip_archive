[
    {
        "content": "<p>Under my model we can define LLVM's <code>inttoptr</code> and <code>ptrtoint</code> as transmutes (no effect on the bits) which makes the <code>inttoptr(ptrtoint(p)) &lt;-&gt; p</code> transformation legal.</p>",
        "id": 278702068,
        "sender_full_name": "Zoxc",
        "timestamp": 1649774379
    },
    {
        "content": "<p>Formally I'd add <code>expose_addr</code> / <code>from_exposed_addr</code> as additional new instructions or intrinsics, but <code>asm</code> should work in practice as a placeholder for those.</p>",
        "id": 278702531,
        "sender_full_name": "Zoxc",
        "timestamp": 1649774550
    },
    {
        "content": "<p>then how do I write Rust's <code>addr</code> in LLVM?</p>",
        "id": 278702839,
        "sender_full_name": "RalfJ",
        "timestamp": 1649774685
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116466\">Zoxc</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Problems.20with.20integer.20provenance/near/278702068\">said</a>:</p>\n<blockquote>\n<p>Under my model we can define LLVM's <code>inttoptr</code> and <code>ptrtoint</code> as transmutes (no effect on the bits) which makes the <code>inttoptr(ptrtoint(p)) &lt;-&gt; p</code> transformation legal.</p>\n</blockquote>\n<p>that will make a huge fraction of existing code with these instructions UB, since that code will do stuff like pointer tagging.<br>\nand that UB can <em>not</em> be fixed by adding <code>asm</code>. maybe we can get the compiler to stop exploiting it but that's miles away from a fix. so, this sounds like a bad idea to me.</p>",
        "id": 278702945,
        "sender_full_name": "RalfJ",
        "timestamp": 1649774728
    },
    {
        "content": "<p>LLVM already has <code>bitcast</code> for transmutation; it seems very odd to me that the evocatively named <code>ptrtoint</code>/<code>inttoptr</code> would be the operations you'd basically never want to use for these casts</p>",
        "id": 278703076,
        "sender_full_name": "RalfJ",
        "timestamp": 1649774770
    },
    {
        "content": "<p>I think the only backwards compatible thing to do is to make <code>ptrtoint := expose_addr</code>, <code>inttoptr := from_exposed_addr</code>, and then add new operations/intrinsics for <code>addr</code> and <code>with_addr</code>. so IMO that's the best option.</p>",
        "id": 278703496,
        "sender_full_name": "RalfJ",
        "timestamp": 1649774948
    },
    {
        "content": "<p>(I moved this to a new thread since i moved quite far away from where \"problems with PVI\" started)</p>",
        "id": 278703747,
        "sender_full_name": "RalfJ",
        "timestamp": 1649775068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Pointer-integer.20casts.20in.20LLVM/near/278702839\">said</a>:</p>\n<blockquote>\n<p>then how do I write Rust's <code>addr</code> in LLVM?</p>\n</blockquote>\n<p>Not sure if it can be written in LLVM now without lowering to a new cast instruction, but adding a intrinsic / operation for it would make sense for optimization purposes.</p>",
        "id": 278704432,
        "sender_full_name": "Zoxc",
        "timestamp": 1649775323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Pointer-integer.20casts.20in.20LLVM/near/278703076\">said</a>:</p>\n<blockquote>\n<p>LLVM already has <code>bitcast</code> for transmutation; it seems very odd to me that the evocatively named <code>ptrtoint</code>/<code>inttoptr</code> would be the operations you'd basically never want to use for these casts</p>\n</blockquote>\n<p>Yes, they should probably be removed and have their uses replaced with <code>bitcast</code>, but that requires actual work ^.^.  It doesn't make them wrong though.</p>",
        "id": 278704777,
        "sender_full_name": "Zoxc",
        "timestamp": 1649775462
    },
    {
        "content": "<p>I mean technically you are right but in terms of the intention of people that emit these instructions your change makes everything wrong</p>",
        "id": 278704971,
        "sender_full_name": "RalfJ",
        "timestamp": 1649775534
    },
    {
        "content": "<p>like, this will literally make safe Rust unsound. that's a huge breaking change on the side of LLVM.</p>",
        "id": 278705103,
        "sender_full_name": "RalfJ",
        "timestamp": 1649775581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Pointer-integer.20casts.20in.20LLVM/near/278702945\">said</a>:</p>\n<blockquote>\n<p>that will make a huge fraction of existing code with these instructions UB, since that code will do stuff like pointer tagging.<br>\nand that UB can <em>not</em> be fixed by adding <code>asm</code>. maybe we can get the compiler to stop exploiting it but that's miles away from a fix. so, this sounds like a bad idea to me.</p>\n</blockquote>\n<p>My argument is that in practice it already is UB and is causing miscompilations. LLVM IR is not a stable language so it can and does change its semantics and expect front ends to adapt. This change doesn't cause more miscompilations than LLVM currently does. Clang could keep using inttoptr/ptrtoint and say they will fix end to end miscompilations (sometimes). Effectively the change preserves the status quo, but we gain formal semantics and frontends like Rust can adapt to avoid miscompilations.</p>",
        "id": 278705915,
        "sender_full_name": "Zoxc",
        "timestamp": 1649775832
    },
    {
        "content": "<p>So Rust gains some formal correctness and LLVM / Clang doesn't need to change their behavior or implementation much.</p>",
        "id": 278706087,
        "sender_full_name": "Zoxc",
        "timestamp": 1649775878
    },
    {
        "content": "<p>Nuno Lopes didn't have any immediate objections to my semantics for bitwise poison. The previous attempt was trying to define integer operations to return bitwise poison too, perhaps to avoid freeze.</p>",
        "id": 278708509,
        "sender_full_name": "Zoxc",
        "timestamp": 1649776816
    },
    {
        "content": "<p>Another way you could phrase things is that Clang adheres to the C standard and doesn't formally support ptr&lt;-&gt;int, but tries to on a best effort basis.</p>",
        "id": 278711144,
        "sender_full_name": "Zoxc",
        "timestamp": 1649778068
    },
    {
        "content": "<p>it causes miscompilations because LLVM is buggy :) I dont think it is good style to outsource that problem to the frontends. this is a common problem across all frontends since it's actually an LLVM IR problem.<br>\nit's true that LLVM IR doesn't <em>technically</em> guarantee ptr-int roundtrips, but that's because nobody thought that would even need stating. it's also entirely clear that the <em>intention</em> of ptrtoint and inttoptr is to support these round-trips (and doing integer ops in between), given that clang and LLVM IR were co-designed.</p>",
        "id": 278715537,
        "sender_full_name": "RalfJ",
        "timestamp": 1649779978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116466\">Zoxc</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Pointer-integer.20casts.20in.20LLVM/near/278711144\">said</a>:</p>\n<blockquote>\n<p>Another way you could phrase things is that Clang adheres to the C standard and doesn't formally support ptr&lt;-&gt;int, but tries to on a best effort basis.</p>\n</blockquote>\n<p>that sounds like a cheap excuse but is totally unrealistic. clang definitely intends to support them. I bet there's even documentation along those lines...</p>",
        "id": 278715713,
        "sender_full_name": "RalfJ",
        "timestamp": 1649780053
    },
    {
        "content": "<p>I also dont see which problem this change solves. like, we <em>need</em> an operation like <code>expose_addr</code>/<code>from_exposed_addr</code> to support the kind of code people write in C (and Rust). no matter the journey, at its end such an operation should exist. what do we gain by \"burning\" the names <code>inttoptr</code> and <code>ptrtoint</code> (which every frontend already expects to work like that!) by making them equivalent to <code>bitcast</code>, and then coming up with <em>new</em> names for the operations we <em>actually</em> want?</p>",
        "id": 278715885,
        "sender_full_name": "RalfJ",
        "timestamp": 1649780152
    },
    {
        "content": "<p>Rust doesnt gain any formal correctness at all until <code>addr</code> and <code>expose_addr</code> can be expressed in LLVM IR. adding <code>asm</code> blocks as optimization barriers and then hoping that's enough is the antithesis of formal correctness.^^</p>",
        "id": 278715994,
        "sender_full_name": "RalfJ",
        "timestamp": 1649780198
    },
    {
        "content": "<p>I don't disagree with the intent of <code>ptrtoint</code> and <code>inttoptr</code> and Clang's intent in using them. The reason I'm not redefining them as casts is that it allows gradual adoption of them in LLVM without first removing all existing uses and optimizations of <code>ptrtoint</code> and <code>inttoptr</code>. Frontends can opt in to the new casts when LLVM optimizes them sufficiently for their needs. This seems to make adoption much more practical and it does not cause additional miscompiles or lost performance during a transition period.</p>",
        "id": 278722467,
        "sender_full_name": "Zoxc",
        "timestamp": 1649783206
    },
    {
        "content": "<p>breaking all frontends doesn't sound like \"gradual adoption\" to me. rather the opposite.</p>",
        "id": 278722586,
        "sender_full_name": "RalfJ",
        "timestamp": 1649783263
    },
    {
        "content": "<p>What would break? I'm not proposing any changes to LLVM's implementation (ignoring the new addition of casts)</p>",
        "id": 278722945,
        "sender_full_name": "Zoxc",
        "timestamp": 1649783422
    },
    {
        "content": "<p>It does shifts the blame for the current broken behavior from LLVM to Clang (and other frontends). Changing the frontends to emit something different for casts seems much easier than changing LLVM itself.</p>",
        "id": 278723425,
        "sender_full_name": "Zoxc",
        "timestamp": 1649783676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116466\">Zoxc</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Pointer-integer.20casts.20in.20LLVM/near/278723425\">said</a>:</p>\n<blockquote>\n<p>It does shifts the blame for the current broken behavior from LLVM to Clang (and other frontends). Changing the frontends to emit something different for casts seems much easier than changing LLVM itself.</p>\n</blockquote>\n<p>why is changing <em>all</em> frontends easier than changing their single shared backend? I'd expect the exact opposite.</p>",
        "id": 278732284,
        "sender_full_name": "RalfJ",
        "timestamp": 1649787596
    },
    {
        "content": "<p>Maybe just incrementally fixing existing <code>inttoptr</code> and <code>ptrtoint</code> is fine. I'd prefer some better naming though. They don't sound very side-effecty. Things get a bit odd with <code>addr()</code> in the mix too.</p>",
        "id": 278732894,
        "sender_full_name": "Zoxc",
        "timestamp": 1649787853
    },
    {
        "content": "<blockquote>\n<p>They don't sound very side-effecty.</p>\n</blockquote>\n<p>yeah, we have to fight years or decades of incorrect intuition here</p>",
        "id": 278732956,
        "sender_full_name": "RalfJ",
        "timestamp": 1649787889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116466\">Zoxc</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Pointer-integer.20casts.20in.20LLVM/near/278723425\">said</a>:</p>\n<blockquote>\n<p>It does shifts the blame for the current broken behavior from LLVM to Clang (and other frontends).</p>\n</blockquote>\n<p>FWIW I think \"shift the burden\" might be okay, but if LLVM starts claiming that Rust \"should have known better\" or so and not expect LLVM <code>ptrtoint</code> to do the job that it says on the tin -- if LLVM starts to put the blame on the Rust frontend for this -- then I'm going to be in strong disagreement.^^</p>",
        "id": 278733126,
        "sender_full_name": "RalfJ",
        "timestamp": 1649787967
    },
    {
        "content": "<p>but I still think it'd make a lot more sense to make <code>inttoptr</code>/<code>ptrtoint</code> <em>not</em> equivalent to <code>bitcast</code>. there's no reason to have alternative names for <code>bitcast</code>.<br>\nin fact I'd say the fact that these are separate operations indicates that the LLVM designers might have had a hunch that this is <em>not</em> the same as a bitcast.</p>",
        "id": 278733383,
        "sender_full_name": "RalfJ",
        "timestamp": 1649788076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Pointer-integer.20casts.20in.20LLVM/near/278732956\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>They don't sound very side-effecty.</p>\n</blockquote>\n<p>yeah, we have to fight years or decades of incorrect intuition here</p>\n</blockquote>\n<p>from a frontend perspective though, these names are probably the ones we want (for the expose-related operations). some part of this discussion boils down to whether the API is designed for frontends or for optimizations...</p>",
        "id": 278733710,
        "sender_full_name": "RalfJ",
        "timestamp": 1649788174
    },
    {
        "content": "<p>on <code>ptrtoint</code> we might have a flag that indicates whether exposing happens or not, and old bitcode <code>ptrtoint</code> might be migrated to <code>ptrtoint expose</code>. maybe that would help remind optimization authors that there is a side-effect here?<br>\nthat's harder for <code>from_exposed_addr</code> vs <code>with_addr</code> as these operations have different sigantures.</p>",
        "id": 278733882,
        "sender_full_name": "RalfJ",
        "timestamp": 1649788230
    },
    {
        "content": "<p>I think it just make sense to have separate ptr&lt;-&gt;int instructions for exposed and strict provenance things. Make it easier to see that the former has global reads/writes. LLVM IR definitely seems designed for optimizations to me.</p>",
        "id": 278736286,
        "sender_full_name": "Zoxc",
        "timestamp": 1649789351
    },
    {
        "content": "<p>I also had in mind a <code>clearptr</code> instruction which just removes provenance from any value. Combined with <code>bitcast</code> it can implement <code>addr()</code>. You could also use <code>with_addr</code> on an integer.</p>",
        "id": 278736573,
        "sender_full_name": "Zoxc",
        "timestamp": 1649789494
    },
    {
        "content": "<p>So strict provenance instructions doesn't need to cast between IR types. It's possible that <code>clearptr</code> would be helpful for other things to remove poison from integer operations too.</p>",
        "id": 278736746,
        "sender_full_name": "Zoxc",
        "timestamp": 1649789574
    },
    {
        "content": "<p>even with making <code>inttoptr</code> and <code>ptrtoint</code> aliases for <code>bitcast</code>, there's still something that needs to be fixed in LLVM: replacing one <code>icmp eq</code>-equal pointer by another. that's <a href=\"https://github.com/llvm/llvm-project/issues/34577\">https://github.com/llvm/llvm-project/issues/34577</a>.<br>\nthere's no way to avoid acknowledging that <em>some</em> things LLVM did are definitely wrong. so I dont see why you want to maintain <code>inttoptr(ptrtoint(_))</code> simplification so badly.</p>",
        "id": 278736810,
        "sender_full_name": "RalfJ",
        "timestamp": 1649789607
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116466\">Zoxc</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Pointer-integer.20casts.20in.20LLVM/near/278736286\">said</a>:</p>\n<blockquote>\n<p>I think it just make sense to have separate ptr&lt;-&gt;int instructions for exposed and strict provenance things. Make it easier to see that the former has global reads/writes.</p>\n</blockquote>\n<p>fair. but <code>bitcast</code> is neither of them. :D</p>",
        "id": 278736920,
        "sender_full_name": "RalfJ",
        "timestamp": 1649789645
    },
    {
        "content": "<p>Actually I think you only need an <code>replaceprov</code> instruction with <code>addr(x)</code> being <code>replaceprov(x, 0)</code>.</p>",
        "id": 278737697,
        "sender_full_name": "Zoxc",
        "timestamp": 1649789990
    },
    {
        "content": "<p>there are many ways to skin that cat</p>",
        "id": 278738160,
        "sender_full_name": "RalfJ",
        "timestamp": 1649790138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Pointer-integer.20casts.20in.20LLVM/near/278736810\">said</a>:</p>\n<blockquote>\n<p>even with making <code>inttoptr</code> and <code>ptrtoint</code> aliases for <code>bitcast</code>, there's still something that needs to be fixed in LLVM: replacing one <code>icmp eq</code>-equal pointer by another. that's <a href=\"https://github.com/llvm/llvm-project/issues/34577\">https://github.com/llvm/llvm-project/issues/34577</a>.<br>\nthere's no way to avoid acknowledging that <em>some</em> things LLVM did are definitely wrong. so I dont see why you want to maintain <code>inttoptr(ptrtoint(_))</code> simplification so badly.</p>\n</blockquote>\n<p>Yeah. We have to make sure that LLVM does not change the type used for <code>icmp</code>.</p>",
        "id": 278738209,
        "sender_full_name": "Zoxc",
        "timestamp": 1649790163
    },
    {
        "content": "<p>that said, I would usually expect <code>replaceprov</code> to return a pointer, not an integer</p>",
        "id": 278738210,
        "sender_full_name": "RalfJ",
        "timestamp": 1649790164
    },
    {
        "content": "<p>It can operate on any value here so it preserves the input type. It may be more efficient to integrate casting though.</p>",
        "id": 278738467,
        "sender_full_name": "Zoxc",
        "timestamp": 1649790266
    }
]