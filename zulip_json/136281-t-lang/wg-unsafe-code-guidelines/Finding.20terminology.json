[
    {
        "content": "<p>We could use some more eyes on <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/40\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/40\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/40</a> to come up with a name for the thing that we sometimes call an \"rvalue\", an \"operand\" or just a \"value\" in Rust currently -- the thing that gets stored in a place; the thing that is denoted by the right-hand side of an assignment operation. :)</p>",
        "id": 137151362,
        "sender_full_name": "RalfJ",
        "timestamp": 1541327717
    },
    {
        "content": "<p>(\"value\" is a bad term because for many of us -- those coming from FP or PL -- a \"value\" is just the result of a computation. So it doesn't make any sense to call the <code>3+2</code> in <code>x = 3+2</code> a <em>value</em>. The term value, for us, is to distinguish from \"expression\" or \"computation\" -- it's about being the result vs. the instructions that can be executed to compute said result. So we can have \"place expressions\" like <code>&amp;x.field</code> which then compute to a \"place value\" like <code>{ pointer: 0x002345f0, alignment: 4 }</code>. The \"place\" vs \"rvalue\" distinction is on an orthogonal axis, this is about whether we are computing a location in memory that we can store some data in, or whether we are computing the data that is to be stored somewhere.)</p>",
        "id": 137151462,
        "sender_full_name": "RalfJ",
        "timestamp": 1541327887
    },
    {
        "content": "<p>I find the discussion hard to follow, and also am a bit confused about how these are called in other languages. The \"value cartegories\" in C++ change pretty much with every std</p>",
        "id": 137151473,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541327963
    },
    {
        "content": "<p>Yeah I propose we ignore the mess that C++ made there, other than using it as a bad example</p>",
        "id": 137151475,
        "sender_full_name": "RalfJ",
        "timestamp": 1541327985
    },
    {
        "content": "<p>lucky enough, I think in rust we just have these two (\"place\" vs the to-be-named thing). C++ got a way more categories (must be a dozen by now), I suppose due to its approach to \"move semantics\". (CC <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span>)</p>",
        "id": 137151519,
        "sender_full_name": "RalfJ",
        "timestamp": 1541328021
    },
    {
        "content": "<p>For me personally, separating \"memory\" from \"objects\" is what makes most sense, but that might not be strict enough to be useful</p>",
        "id": 137151531,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541328077
    },
    {
        "content": "<p>what do you mean? (FWIW I also favor \"object\" currently as the term)</p>",
        "id": 137151535,
        "sender_full_name": "RalfJ",
        "timestamp": 1541328106
    },
    {
        "content": "<p>so <code>3+2</code> would be an \"object expression\" denoting the \"object\" <code>5</code></p>",
        "id": 137151539,
        "sender_full_name": "RalfJ",
        "timestamp": 1541328121
    },
    {
        "content": "<p><code>3</code>, <code>3+4</code>, ... are expressions producing objects<br>\n<code>let x = 3;</code> <code>x</code> is an expression reading the object from the \"memory\" at <code>x</code></p>",
        "id": 137151578,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541328133
    },
    {
        "content": "<p>you can take an address to an object in memory, but the object produced by <code>3+4</code> is not in any memory</p>",
        "id": 137151581,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541328154
    },
    {
        "content": "<p>the latter is place-to-object conversion, which rads the object from memory if that's where it is. I agree.</p>",
        "id": 137151588,
        "sender_full_name": "RalfJ",
        "timestamp": 1541328171
    },
    {
        "content": "<p>so <code>&amp;x</code> is \"ok\", but <code>&amp;(3+4)</code> would not be</p>",
        "id": 137151590,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541328177
    },
    {
        "content": "<p>in miri, objects can be either in memory or \"immediate\"</p>",
        "id": 137151591,
        "sender_full_name": "RalfJ",
        "timestamp": 1541328179
    },
    {
        "content": "<p><code>&amp;(3+4)</code> is okay in Rust though :P</p>",
        "id": 137151597,
        "sender_full_name": "RalfJ",
        "timestamp": 1541328190
    },
    {
        "content": "<p>but it desugars to something where a place is involved</p>",
        "id": 137151600,
        "sender_full_name": "RalfJ",
        "timestamp": 1541328209
    },
    {
        "content": "<p>i know, so to make that ok we need to define in which memory it is</p>",
        "id": 137151601,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541328217
    },
    {
        "content": "<p>well we can just apply our definitions after desugaring</p>",
        "id": 137151602,
        "sender_full_name": "RalfJ",
        "timestamp": 1541328237
    },
    {
        "content": "<p>then all is easy</p>",
        "id": 137151603,
        "sender_full_name": "RalfJ",
        "timestamp": 1541328239
    },
    {
        "content": "<p><code>let _tmp = 3+4; &amp;_tmp</code> is what happens</p>",
        "id": 137151642,
        "sender_full_name": "RalfJ",
        "timestamp": 1541328248
    },
    {
        "content": "<p>so we first evaluate the object 3+4 to the object value 7, then we store that in the place _tmp, and then we do place-to-object conversion (<code>&amp;</code>), which proceeds by computing the place value (which is an address in memory and some more information like alignment), and then turning that into an object value (the location in memory; the alignment gets discarded)</p>",
        "id": 137151660,
        "sender_full_name": "RalfJ",
        "timestamp": 1541328351
    },
    {
        "content": "<p>yeah, that makes sense to me. IIRC ubsan does not like the term \"object\", but I don't find it is confusing due to \"trait object\"</p>",
        "id": 137151866,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541328810
    },
    {
        "content": "<p>Yeah, let's see what <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> thinks. I also wonder if <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> has any thoughts.</p>",
        "id": 137151968,
        "sender_full_name": "RalfJ",
        "timestamp": 1541329023
    },
    {
        "content": "<p>1) no. object is a bloody awful term. It is both overloaded by OO languages, and means exactly the opposite of what you want it to mean.</p>",
        "id": 137160197,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541346157
    },
    {
        "content": "<p>2) there are three categories of expression in C++ - lvalue, xvalue, prvalue. There are two kinds of category; glvalue = {lvalue, xvalue}; rvalue = {prvalue, xvalue}. A glvalue is an expression which refers to an object, as opposed to just a value; and an rvalue is an expression which can be bound to an xvalue reference (i.e., you can coerce a prvalue into an xvalue).</p>",
        "id": 137160270,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541346272
    },
    {
        "content": "<p>3) please just call it value vs place. It's really not that hard. A value is what one operates on - something like <code>5</code> or <code>\"hello\"</code> or <code>(\"boop\", 2)</code>. A place is a location, value pair - a \"place\" that one can put a \"value\".</p>",
        "id": 137160499,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541346631
    },
    {
        "content": "<p>3.) no. a value is something else for a significant chunk of our community -- in particular for the chink that has most experience with anything formal.</p>",
        "id": 137160797,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347148
    },
    {
        "content": "<p>just because C/C++ use \"value\" the wrong way doesnt mean we should</p>",
        "id": 137160844,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347202
    },
    {
        "content": "<p>In C the word \"object\" is pretty close to what we're referring to</p>",
        "id": 137160871,
        "sender_full_name": "Andrew Poelstra",
        "timestamp": 1541347207
    },
    {
        "content": "<p>C++ uses it to mean \"instance of a class\" like in Java, which was a weird decision because it was very divergent from C</p>",
        "id": 137160883,
        "sender_full_name": "Andrew Poelstra",
        "timestamp": 1541347227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I don't agree? I use value to mean exactly the same thing in OCaml and Haskell.</p>",
        "id": 137160890,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347254
    },
    {
        "content": "<p>you suggested in (3) above to call <code>3+4</code> a value</p>",
        "id": 137160901,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347273
    },
    {
        "content": "<p>it is not</p>",
        "id": 137160902,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132769\">@Andrew Poelstra</span> no - C++ uses object like C uses object</p>",
        "id": 137160904,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <code>3 + 4</code> is a value expression - an expression that results in a value</p>",
        "id": 137160905,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347292
    },
    {
        "content": "<p>\"value expression\" just makes no sense</p>",
        "id": 137160917,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347302
    },
    {
        "content": "<p>yes it does?</p>",
        "id": 137160962,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347335
    },
    {
        "content": "<p>ocaml+haskell do not have this distinction between places and \"objects\". they have expressions and values, done.</p>",
        "id": 137160963,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347339
    },
    {
        "content": "<p><code>7</code> is a value which <code>3 + 4</code> results in</p>",
        "id": 137160964,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347347
    },
    {
        "content": "<p>once you have places and \"objects\", you have 4 kinds of things as they both are written down as expressions and evaluate to some kind of value</p>",
        "id": 137160966,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347364
    },
    {
        "content": "<p>OCaml absolutely has this distinction, because they have <code>ref</code></p>",
        "id": 137160968,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347366
    },
    {
        "content": "<p>ocaml has <code>ref</code> but doesnt need places</p>",
        "id": 137160971,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347378
    },
    {
        "content": "<p>that's what a <code>ref</code> is - a place</p>",
        "id": 137160976,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347389
    },
    {
        "content": "<p>there are just values of type <code>ref</code>, that's enough. this is because ocaml does not have the <code>&amp;</code> operator.</p>",
        "id": 137160977,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347395
    },
    {
        "content": "<p>look, please at least try to understand</p>",
        "id": 137160988,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347434
    },
    {
        "content": "<p>I get the feeling you are not trying to understand</p>",
        "id": 137161027,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347445
    },
    {
        "content": "<p>I'm trying to use reasonable language that people from other systems languages would understand</p>",
        "id": 137161034,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347478
    },
    {
        "content": "<p>I am trying to use reasonable language that people from other functional-style langauges would understand</p>",
        "id": 137161037,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347495
    },
    {
        "content": "<p>Rust isn't a functional-style language</p>",
        "id": 137161047,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347514
    },
    {
        "content": "<p>your terms are already used in my community and they mean something different. I acknowledge \"object\" is already used in your communicty so I am looking for something else.</p>",
        "id": 137161049,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347519
    },
    {
        "content": "<p>it is fucntional enough to start using such terminology. it is expression based. it is not really less functional than ocaml is.</p>",
        "id": 137161052,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347535
    },
    {
        "content": "<p>that's just untrue?</p>",
        "id": 137161056,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347545
    },
    {
        "content": "<p>\"functional\" is in how you write code</p>",
        "id": 137161109,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347570
    },
    {
        "content": "<p>\"expression-based\" is a nice feature for any language</p>",
        "id": 137161115,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347583
    },
    {
        "content": "<p>and also, it's not like value is an overloaded term here.</p>",
        "id": 137161132,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347603
    },
    {
        "content": "<p>it means exactly the same thing in OCaml as it does here</p>",
        "id": 137161155,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347614
    },
    {
        "content": "<p>no and I explained above why</p>",
        "id": 137161165,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347638
    },
    {
        "content": "<p>you explained why... incorrectly</p>",
        "id": 137161167,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347651
    },
    {
        "content": "<p>OCaml and Haskell have no need for places</p>",
        "id": 137161212,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347687
    },
    {
        "content": "<p>therefore, all of their expressions result in values</p>",
        "id": 137161213,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347696
    },
    {
        "content": "<blockquote>\n<p>OCaml and Haskell have no need for places</p>\n</blockquote>\n<p>at least we agree on that now, you said sth else above</p>",
        "id": 137161216,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347713
    },
    {
        "content": "<p>since Rust adds a kind of thing that an expression returns, you need the distinction between expressions that return values, and expressions that return places</p>",
        "id": 137161218,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347740
    },
    {
        "content": "<blockquote>\n<p>therefore, all of their expressions result in values</p>\n</blockquote>\n<p>they only have one kind of expression, and hence one kind of value</p>",
        "id": 137161223,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347746
    },
    {
        "content": "<p>Rust, C, C++ have multiple kinds of expressions</p>",
        "id": 137161226,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347754
    },
    {
        "content": "<p>and hence multiple kinds of values</p>",
        "id": 137161227,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347761
    },
    {
        "content": "<p>yes</p>",
        "id": 137161228,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347768
    },
    {
        "content": "<p>this is why it's called prvalue and glvalue in C++</p>",
        "id": 137161230,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347777
    },
    {
        "content": "<p>\"value\" comes from \"evaluate\", its literally the result of evaluating something</p>",
        "id": 137161232,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347782
    },
    {
        "content": "<p>so \"places\" evaluate to one kind of value, and <code>3+4</code> evaluates to another kind of value</p>",
        "id": 137161235,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347797
    },
    {
        "content": "<p>no?</p>",
        "id": 137161280,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347806
    },
    {
        "content": "<p>that's not how etymology works</p>",
        "id": 137161281,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347814
    },
    {
        "content": "<p><em>lol</em> its not how you define these terms, but its how an entire community does</p>",
        "id": 137161286,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347834
    },
    {
        "content": "<p>you cannot just \"no\" that away</p>",
        "id": 137161287,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347838
    },
    {
        "content": "<p>no I mean literally, value does not come from evaluate</p>",
        "id": 137161294,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347861
    },
    {
        "content": "<p>so do we agree there are two axis here? the place vs {\"object\"/\"value\"/<code>3+4</code>} axis, and the expression vs {value/result/evaluated term} axis.</p>",
        "id": 137161302,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347872
    },
    {
        "content": "<p>evaluate comes from value</p>",
        "id": 137161303,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347873
    },
    {
        "content": "<p>I don't agree - the latter is not an axis</p>",
        "id": 137161362,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541347936
    },
    {
        "content": "<p>what else is it...?</p>",
        "id": 137161365,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347955
    },
    {
        "content": "<p>these two axis form 4 concepts, and <em>all of these 4 concepts exist as types in rustc</em></p>",
        "id": 137161377,
        "sender_full_name": "RalfJ",
        "timestamp": 1541347995
    },
    {
        "content": "<p>there's nothing hypothetical about this</p>",
        "id": 137161379,
        "sender_full_name": "RalfJ",
        "timestamp": 1541348000
    },
    {
        "content": "<p>you can have a concept which is not an axis</p>",
        "id": 137161389,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541348032
    },
    {
        "content": "<p>it seems to me you want to conflate the two kinds of values we have, but I disagree with mixing up distinct concepts</p>",
        "id": 137161393,
        "sender_full_name": "RalfJ",
        "timestamp": 1541348037
    },
    {
        "content": "<p>hey, do you mind not being confrontational about this?</p>",
        "id": 137161438,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541348071
    },
    {
        "content": "<p>you're putting words in my mouth.</p>",
        "id": 137161439,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541348078
    },
    {
        "content": "<p>stop it. let me write the code</p>",
        "id": 137161441,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541348087
    },
    {
        "content": "<p>well TBH I think I'll reboot and do some gaming now. maybe we better have this discussion asychronously.</p>",
        "id": 137161456,
        "sender_full_name": "RalfJ",
        "timestamp": 1541348117
    },
    {
        "content": "<p>god, you're really difficult to talk to, you know that?</p>",
        "id": 137161463,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541348143
    },
    {
        "content": "<p>well at least there's two of us that feel that way then</p>",
        "id": 137161504,
        "sender_full_name": "RalfJ",
        "timestamp": 1541348179
    },
    {
        "content": "<p>see, as I'm thinking through this, I'm starting to agree that \"value\" meaning \"the result of an expression\" seems like a reasonable way to call these things</p>",
        "id": 137161740,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541348540
    },
    {
        "content": "<p>\"place\" is good for \"lvalue\", but I'm not sure what we should call \"values\".</p>",
        "id": 137161759,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541348602
    },
    {
        "content": "<p>\"object\" isn't good, it's overloaded</p>",
        "id": 137161809,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541348664
    },
    {
        "content": "<p>apparently, compcert calls the type of r-values <code>val</code></p>",
        "id": 144562817,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541394434
    },
    {
        "content": "<p>ooh, thought: \"immediate\"</p>",
        "id": 144562870,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1541394551
    },
    {
        "content": "<p>I was afraid \"object\" would be confusing for C/C++ people, which is why I specifically asked for your feedback.<br>\nI do see the clash with C++; I still do not understand though why you say this is not compatible with how C uses the term. They speak about \"array objects\" and such thing, all that seems perfectly consistent with how I proposed to use the term.</p>",
        "id": 146792045,
        "sender_full_name": "RalfJ",
        "timestamp": 1541421014
    },
    {
        "content": "<p>I am going to call them \"robjects\" for now just so that I can consistently refer to them some way; that term should be sufficiently bad that nobody should like it enough to grow attached to it. ;)</p>",
        "id": 146792050,
        "sender_full_name": "RalfJ",
        "timestamp": 1541421041
    },
    {
        "content": "<p>\"immediate\" is what I would call \"things we can immediately manipulate\" (miri <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/enum.Immediate.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/enum.Immediate.html\">literally has a type with that name</a>, and it used to be called <code>Value</code> and the docs didn't get updated entirely <em>oops</em>). <code>3</code> is an intermediate, but <code>(3, 3, 3)</code> is not because it only exists in memory, doesn't fit in a register. (We also have two-register immediates, matching LLVM's <code>ScalarPair</code>, but that's where it ends.)<br>\nThese <em>are</em> of course implementation details, but it is no good if we cannot use consistent terminology in rustc and miri.</p>",
        "id": 146792088,
        "sender_full_name": "RalfJ",
        "timestamp": 1541421102
    },
    {
        "content": "<p>the way I see it, immediates are a subclass of robjects</p>",
        "id": 146792091,
        "sender_full_name": "RalfJ",
        "timestamp": 1541421110
    },
    {
        "content": "<p>it might be worth it to collect discussion points for this before the next meeting</p>",
        "id": 146796436,
        "sender_full_name": "gnzlbg",
        "timestamp": 1541426127
    },
    {
        "content": "<p>So I think I prefer the <code>operand</code> version</p>",
        "id": 147519375,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542021574
    },
    {
        "content": "<p>I find using <code>value</code> that way a bit weird TBH, and I attach a kind of \"temporary\" meaning to the word <code>operand</code> that <code>value</code> does not seem to have. Although I agree with ubsan that the term is also overloaded when considering function operands.</p>",
        "id": 147519493,
        "sender_full_name": "gnzlbg",
        "timestamp": 1542021654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I don't know that I understand what you were using \"objects\" to mean</p>",
        "id": 147592578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542117878
    },
    {
        "content": "<p>were you saying that \"object\" referred to the <em>expression</em> <code>3+4</code>, or is it some kind of runtime notion?</p>",
        "id": 147592609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542117927
    },
    {
        "content": "<p>If so, that seems quite divergent from how I understand the term in C -- though fwiw I agree with <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> that it's not a great choice regardless.  (I quite like value/place, and I confess I don't know why \"value expression\" seems like nonsense to you -- I understand that as \"an expression that evaluates to a value\", vs \"place expression\", which would be an expression that evaluates to a place (which can then be converted into a value).)</p>",
        "id": 147592811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Both. That place vs. non-place is an axis orthogonal to expression vs. run-time.</p>",
        "id": 147592819,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118125
    },
    {
        "content": "<p>\"expression that evaluates to a value\" is like... \"wet water\" or so. (dang the usual example that we use for that in German doesn't work.) It's a tautology.</p>",
        "id": 147592927,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118215
    },
    {
        "content": "<p>well, it is in a language that lacks <code>&amp;</code></p>",
        "id": 147592944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118240
    },
    {
        "content": "<p>it doesnt make any additional distinction, at least not if \"value\" means that it does for me and anyone around me</p>",
        "id": 147592954,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118248
    },
    {
        "content": "<p>no, this has nothing to do with places or not</p>",
        "id": 147592960,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118254
    },
    {
        "content": "<p>but ok so we're trying to find some terminology that is distinct from both camps, and yet familiar to both?</p>",
        "id": 147592965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118260
    },
    {
        "content": "<p>\"being a value\" just means \"being in some kind of normal-form\"</p>",
        "id": 147592976,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118266
    },
    {
        "content": "<p>do we consider <code>**x</code> an expression?</p>",
        "id": 147592991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118287
    },
    {
        "content": "<p>sure? was that ever a question?^^</p>",
        "id": 147593005,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118306
    },
    {
        "content": "<p>that is, the way I think of it, it 'evaluates' to a place, which does involve some work</p>",
        "id": 147593009,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118312
    },
    {
        "content": "<blockquote>\n<p>sure? was that ever a question?^^</p>\n</blockquote>\n<p>not to me :) but I'm trying to understand the countours here :)</p>",
        "id": 147593071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118336
    },
    {
        "content": "<p>I see it as being an expression. but we have mutliple kinds of expressions. so \"place expression\" is a way to disambiguate those kinds.</p>",
        "id": 147593074,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118340
    },
    {
        "content": "<p>and \"value expression\" doesn't work for you in this sense, because <code>value</code> is just an expression in a normal form?</p>",
        "id": 147593090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118363
    },
    {
        "content": "<p>I guess the question is whether one considers place a <em>value</em></p>",
        "id": 147593099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118376
    },
    {
        "content": "<p>and then it evaluates, and if we want to fully precise we can say it evaluates to a \"place value\", but we can also just say it evaluates to a \"place\" because the fact that it is a value that we get is clear from context</p>",
        "id": 147593100,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118377
    },
    {
        "content": "<p>if you only call the <em>result</em> of these computations a place, <code>rustc::mir::Place</code> would be misnamed</p>",
        "id": 147593115,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118394
    },
    {
        "content": "<blockquote>\n<p>and \"value expression\" doesn't work for you in this sense, because <code>value</code> is just an expression in a normal form?</p>\n</blockquote>\n<p>yes</p>",
        "id": 147593130,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118421
    },
    {
        "content": "<p>sure, I think of that as representing a \"place expression\"</p>",
        "id": 147593139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118427
    },
    {
        "content": "<p>we don't have runtime values in that context</p>",
        "id": 147593145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118432
    },
    {
        "content": "<p>so there isn't much point to distinguish</p>",
        "id": 147593148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118437
    },
    {
        "content": "<p>in miri, it's different</p>",
        "id": 147593153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118441
    },
    {
        "content": "<blockquote>\n<p>I guess the question is whether one considers place a <em>value</em></p>\n</blockquote>\n<p>Right, that's why both <code>$NON_PLACE</code> and <code>$EVAL_RESULT</code> are still free variables in this discussion</p>",
        "id": 147593198,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118447
    },
    {
        "content": "<p>ok, I am at least understanding better the crux of the conflict :)</p>",
        "id": 147593213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118462
    },
    {
        "content": "<blockquote>\n<p>we don't have runtime values in that context</p>\n</blockquote>\n<p>The runtime version is <code>rustc_mir::interpret::Place</code>. They live happily next to each other. ;)</p>",
        "id": 147593228,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118476
    },
    {
        "content": "<p>But the point I was just trying to make is that \"place\" in its own doesnt say if we are talking about a static/syntactic or a run-time concept</p>",
        "id": 147593290,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118528
    },
    {
        "content": "<p>it is rather making a distinction along another axis, the place-<code>$NON_PLACE</code> axis</p>",
        "id": 147593302,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118542
    },
    {
        "content": "<p>yes, ok</p>",
        "id": 147593348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118563
    },
    {
        "content": "<p>so expression/value is a potential thing for static/dynamic context</p>",
        "id": 147593369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118571
    },
    {
        "content": "<p>I think this is your preference, right?</p>",
        "id": 147593373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118579
    },
    {
        "content": "<p>and then we might have to disambugate by saying \"place expression\" (aka <code>rustc::mir::Place</code>) and \"place <code>$EVAL_RESULT</code>\" (aka <code>rustc_mir::interpret::Place</code>)</p>",
        "id": 147593377,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118587
    },
    {
        "content": "<p>yes, ok, I see</p>",
        "id": 147593400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118621
    },
    {
        "content": "<p>/me shrugs</p>",
        "id": 147593405,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118627
    },
    {
        "content": "<p>interesting question :)</p>",
        "id": 147593408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118632
    },
    {
        "content": "<p>and I prefer <code>EVAL_RESULT=value</code>, yes. And I <em>think</em> that is actually consistent with C, C just doesn't have a term for the static thing. But if it is too confusing we might better pick an altogether different word.</p>",
        "id": 147593409,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118632
    },
    {
        "content": "<p>However, the bigger contention is around what to use for <code>$NON_PLACE</code></p>",
        "id": 147593417,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118644
    },
    {
        "content": "<p>I don't think value is a terrible word</p>",
        "id": 147593427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118660
    },
    {
        "content": "<p>right, the real question is the non-place part</p>",
        "id": 147593499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118692
    },
    {
        "content": "<p>I think \"value\" is a terrible choice for <code>$NON_PLACE</code> because there are many people that will think it means <code>$EVAL_RESULT</code></p>",
        "id": 147593505,
        "sender_full_name": "RalfJ",
        "timestamp": 1542118698
    },
    {
        "content": "<p>yes, sorry, I meant that value is reasonable for <code>$EVAL_RESULT</code></p>",
        "id": 147593528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118728
    },
    {
        "content": "<p>though it does leave open the question of what to call <code>$NON_PLACE</code></p>",
        "id": 147593538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118741
    },
    {
        "content": "<p>I think part of this is that I've usually had a \"subset\" notion in my head</p>",
        "id": 147593591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118800
    },
    {
        "content": "<p>that is, you have \"expressions\" and \"place expressions\" (a subset of expressions that can be evaluated to a place)</p>",
        "id": 147593645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118815
    },
    {
        "content": "<p>similarly \"values\" and \"place values\" (aka pointers, though I think maybe they carry a bit more, like a type)</p>",
        "id": 147593658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118835
    },
    {
        "content": "<p>(just trying to think about why I never felt a lot of conflict here)</p>",
        "id": 147593669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118848
    },
    {
        "content": "<p>but it seems useful to consider them as disjoint sets -- sub isn't really right, since e.g. <code>&amp;</code> treats them very differently</p>",
        "id": 147593683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118865
    },
    {
        "content": "<p>so they are not \"subtypes\" in the Liskov substitution sense</p>",
        "id": 147593693,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118871
    },
    {
        "content": "<p>well, I guess it's more than \"non-place expressions\" get \"promoted\" to a place expression by creating a temporary</p>",
        "id": 147593708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118891
    },
    {
        "content": "<p>anyway... now I see why \"immediate\" was suggested. It makes sense, though it does carry this notion of \"constant\" -- everything you need to know is \"immediately\" available</p>",
        "id": 147593761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118923
    },
    {
        "content": "<p>it feels like the distinction between <code>3+4</code> and <code>x</code> is that the former \"produces\" a new value, I wonder if there is some name along those lines</p>",
        "id": 147593811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118968
    },
    {
        "content": "<p>/me will ponder</p>",
        "id": 147593813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542118970
    },
    {
        "content": "<blockquote>\n<p>but it seems useful to consider them as disjoint sets -- sub isn't really right, since e.g. <code>&amp;</code> treats them very differently</p>\n</blockquote>\n<p>Indeed a place carries information that is not in a reference value: It carries an alignment. So I do not think subsets work.</p>",
        "id": 147593884,
        "sender_full_name": "RalfJ",
        "timestamp": 1542119035
    }
]