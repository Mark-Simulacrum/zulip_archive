[
    {
        "content": "<p>I'm trying to determine if <code>let vector = std::mem::transmute::&lt;Vec&lt;NonZeroU8&gt;, Vec&lt;u8&gt;&gt;(vector);</code> is OK or do I need <code>Vec::from_raw_parts()</code> instead. <br>\nThe documentation on this exists, but it's confusing. <a href=\"https://doc.rust-lang.org/std/mem/fn.transmute.html#alternatives\" target=\"_blank\" title=\"https://doc.rust-lang.org/std/mem/fn.transmute.html#alternatives\">https://doc.rust-lang.org/std/mem/fn.transmute.html#alternatives</a> has an example with a Vec being transmuted and claims it's UB, but doesn't explain why. I also don't understand why <code>.clone()</code> is called on the vector being transmuted, yet the comments claim that the operation does not copy the vector.</p>",
        "id": 174662639,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567345958
    },
    {
        "content": "<p>Also the mem::forget at the end looks fishy. I think it should be before the transmute, not after.</p>",
        "id": 174662888,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567346443
    },
    {
        "content": "<p>That code block contains three completely separate ways to perform the type punning. The mem::forget at the end goes with the <code>from_raw_parts</code> only. But it's true that the first (transmute) example shouldn't clone. (But either way it wouldn't need a <code>mem::forget</code>, since transmute is by-value.)</p>",
        "id": 174664491,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1567349476
    },
    {
        "content": "<p>As for why the transmute is UB, the simple reason is that <code>Vec</code> doesn't guarantee that such type punning is OK. There's also the fact that we don't guarantee any kind of determinism for layout of repr(Rust) structs (of which <code>Vec</code> is one), but for a stdlib type that's a technicality we could side-step if we wanted to.</p>",
        "id": 174664545,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1567349574
    },
    {
        "content": "<p><code>.as_mut_ptr()</code> does not consume the vector, merely returns a pointer, so when we call <code>.from_raw_parts()</code> in that example we actually have mutable aliasing, which I believe is UB</p>",
        "id": 174665917,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567351922
    },
    {
        "content": "<p>I've run the first pattern through Clippy and it didn't complain, so I'll open an issue for Clippy as soon as this is clarified</p>",
        "id": 174666945,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567353612
    },
    {
        "content": "<p>Hmm, I would have said it's fine since the original Vec isn't used afterwards but it actually is, since it's passed to <code>mem::forget</code>.</p>",
        "id": 174667698,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1567354873
    },
    {
        "content": "<p>For some reason miri doesn't complain about this: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=87a6f1f8bc386f3c80b5f6157da1b161\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=87a6f1f8bc386f3c80b5f6157da1b161\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=87a6f1f8bc386f3c80b5f6157da1b161</a></p>",
        "id": 174668299,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567356069
    },
    {
        "content": "<p>presumably because Vec just (transitively) contains a <code>Unique</code> which is currently implemented as just a plain old raw pointer for aliasing questions</p>",
        "id": 174668353,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1567356206
    },
    {
        "content": "<p>So that's a bug in miri? Or rather, a limitation?</p>",
        "id": 174668412,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567356311
    },
    {
        "content": "<p>I wouldn't say that, miri is making the most of what's in the liballoc source code. It's kind of a liballoc/rustc issue in that <code>Vec</code>'s data pointer doesn't get any noalias superpowers in LLVM IR generation either, but some other factors block that too, so I guess miri is the main way that this can be observed today</p>",
        "id": 174668617,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1567356777
    },
    {
        "content": "<p>OK, I've opened an issue about the confusing docs: <a href=\"https://github.com/rust-lang/rust/issues/64073\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64073\">https://github.com/rust-lang/rust/issues/64073</a></p>",
        "id": 174669932,
        "sender_full_name": "Shnatsel",
        "timestamp": 1567359296
    },
    {
        "content": "<p>I'd say it is a Miri limitation, I'd like to make <code>Unique</code> meaningful eventually</p>",
        "id": 175748071,
        "sender_full_name": "RalfJ",
        "timestamp": 1568552636
    },
    {
        "content": "<p>but so far I did not have a good idea for how to do that</p>",
        "id": 175748110,
        "sender_full_name": "RalfJ",
        "timestamp": 1568552643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127617\">@Shnatsel</span> ^</p>",
        "id": 175748115,
        "sender_full_name": "RalfJ",
        "timestamp": 1568552653
    }
]