[
    {
        "content": "<p>An interesting question: <a href=\"https://www.reddit.com/r/rust/comments/95f4xi/stacked_borrows_an_aliasing_model_for_rust/e3u0749/?context=3\" target=\"_blank\" title=\"https://www.reddit.com/r/rust/comments/95f4xi/stacked_borrows_an_aliasing_model_for_rust/e3u0749/?context=3\">https://www.reddit.com/r/rust/comments/95f4xi/stacked_borrows_an_aliasing_model_for_rust/e3u0749/?context=3</a></p>",
        "id": 131160660,
        "sender_full_name": "RalfJ",
        "timestamp": 1533807096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> are there still plans to change MIR to not allow \"nested path expressions\" like <code>a.b.c.d</code> or <code>(*a.f).f2</code>?</p>",
        "id": 131160670,
        "sender_full_name": "RalfJ",
        "timestamp": 1533807117
    },
    {
        "content": "<p>vague plans, yes</p>",
        "id": 131162057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533808990
    },
    {
        "content": "<p>no action has been taken</p>",
        "id": 131162058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533808994
    },
    {
        "content": "<p>At least when it comes to nested fields, I am not convinced any more that we want that. would still be nice to have for deref, though.</p>",
        "id": 131162292,
        "sender_full_name": "RalfJ",
        "timestamp": 1533809385
    },
    {
        "content": "<p>or at least, <em>if</em> we do this even for field accesses, that should probably mean that when accessing <code>t.b</code> we actually activate all of <code>t</code></p>",
        "id": 131162354,
        "sender_full_name": "RalfJ",
        "timestamp": 1533809430
    },
    {
        "content": "<p>I envision these being a special sort of operation -- sort of like <code>GEP</code> in LLVM -- that ends with some kind of \"bless\" operation</p>",
        "id": 131162465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809584
    },
    {
        "content": "<p>that indicates the final path the user wrote</p>",
        "id": 131162477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809617
    },
    {
        "content": "<p>it seems like that would be important to the borrowck</p>",
        "id": 131162481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809624
    },
    {
        "content": "<p>in particular we need to be able to permit access to disjoint fields</p>",
        "id": 131162484,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809634
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131162534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533809671
    },
    {
        "content": "<p>hm, yeah</p>",
        "id": 131162909,
        "sender_full_name": "RalfJ",
        "timestamp": 1533810167
    },
    {
        "content": "<p>so point is I could imagine that the \"GEP\" part of it somehow has less validation?</p>",
        "id": 131162938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533810221
    },
    {
        "content": "<p>that was an interesting question though (the one from reddit)</p>",
        "id": 131162998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533810271
    },
    {
        "content": "<p>I feel like the \"tagging\" question also comes into play?</p>",
        "id": 131163008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533810296
    },
    {
        "content": "<p>e.g., does <code>let t = &amp;*s;</code> retag the data in <code>s</code>? oh, well, I guess there are no <em>references</em> in there</p>",
        "id": 131163020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533810311
    },
    {
        "content": "<p>no this doesn't load anything from memory, no retagging</p>",
        "id": 131163299,
        "sender_full_name": "RalfJ",
        "timestamp": 1533810664
    },
    {
        "content": "<p>but of course a new ref is created, which gets a fresh tag</p>",
        "id": 131163304,
        "sender_full_name": "RalfJ",
        "timestamp": 1533810672
    },
    {
        "content": "<p>I see</p>",
        "id": 131163613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533811110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123893\">@alercah</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">split_at_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mid</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// here a Raw gets pushed onto the stack for the entire slice</span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">mid</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">from_raw_parts_mut</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mid</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// now the first half of the slice has a new Uniq pushed</span>\n<span class=\"w\">             </span><span class=\"n\">from_raw_parts_mut</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">mid</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">mid</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"c1\">// and now the second part follows suit</span>\n<span class=\"w\">           </span><span class=\"c1\">// using `self` again here would be possible, but that would invalidate the two `from_raw_parts`! I.e., if you returned</span>\n<span class=\"w\">           </span><span class=\"c1\">// them (which activates references), that would be UB. But since `self` is not used again, this code is fine.</span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132073494,
        "sender_full_name": "RalfJ",
        "timestamp": 1534196180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123893\">@alercah</span> (if you click my message before replying, your reply should go to the right topic. we should try not to be too much off-topic in the exhaustiveness discussion.)<br>\nHow would it create the subslices without calling <code>from_raw_parts_mut</code>?</p>",
        "id": 132077047,
        "sender_full_name": "RalfJ",
        "timestamp": 1534201306
    },
    {
        "content": "<p>Ah, I forgot I replied to this but I didn't. It would require different aliasing rules.</p>",
        "id": 132511994,
        "sender_full_name": "alercah",
        "timestamp": 1534850954
    },
    {
        "content": "<p>Got a first implementation of stacked borrows (without barriers or retagging). That went much smoother than I expected :D</p>",
        "id": 135972009,
        "sender_full_name": "RalfJ",
        "timestamp": 1539782388
    },
    {
        "content": "<p>\"implementation\" in... what?</p>",
        "id": 135972077,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539782420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> in miri</p>",
        "id": 135972357,
        "sender_full_name": "RalfJ",
        "timestamp": 1539782730
    },
    {
        "content": "<p>ah dang, not seeing some of the errors I was expecting though</p>",
        "id": 135972365,
        "sender_full_name": "RalfJ",
        "timestamp": 1539782738
    },
    {
        "content": "<p>something is not being tracked enough</p>",
        "id": 135972369,
        "sender_full_name": "RalfJ",
        "timestamp": 1539782743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> </p>\n<blockquote>\n<p>ps is there stacked borrow code I can review?</p>\n</blockquote>\n<p><a href=\"https://github.com/RalfJung/miri/commits/stacked-borrows\" target=\"_blank\" title=\"https://github.com/RalfJung/miri/commits/stacked-borrows\">https://github.com/RalfJung/miri/commits/stacked-borrows</a></p>",
        "id": 135972724,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783021
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/pull/55125\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55125\">https://github.com/rust-lang/rust/pull/55125</a></p>",
        "id": 135972739,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> &lt;3 thanks!</p>",
        "id": 135973166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783477
    },
    {
        "content": "<p>ah dang... we optimize away <code>&amp;*x</code> to just <code>x</code> even when they don't have the same type, I forgot about that</p>",
        "id": 135973209,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783489
    },
    {
        "content": "<p>are those overlapping?</p>",
        "id": 135973210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783489
    },
    {
        "content": "<p>that is, if I review <a href=\"https://github.com/rust-lang/rust/issues/55125\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55125\">#55125</a>, does that  suffice?</p>",
        "id": 135973217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783502
    },
    {
        "content": "<p>namely we do that even when <code>x</code> is a mutable ref and we are turning it into a shared ref</p>",
        "id": 135973221,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783506
    },
    {
        "content": "<p>so there is no <code>Ref</code> left for me to hook...</p>",
        "id": 135973223,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783513
    },
    {
        "content": "<p>interesting</p>",
        "id": 135973225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783515
    },
    {
        "content": "<p>I knew that. and forgot.^^</p>",
        "id": 135973230,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> one is the rustc changes and the other is the miri changes. no overlap.</p>",
        "id": 135973241,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783533
    },
    {
        "content": "<p>dang that makes things much harder</p>",
        "id": 135973278,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783580
    },
    {
        "content": "<p>basically we are transmuting <code>&amp;mut</code> to <code>&amp;</code> all the time, even if the original source didn't</p>",
        "id": 135973289,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783595
    },
    {
        "content": "<p>I think it's \"ok\" to remove that, or at least only do it if validation is disabled or something.. but I guess that's annoying because libstd?</p>",
        "id": 135973442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783729
    },
    {
        "content": "<p>that is, it is not clearly a \"valid\" optimization for us to be doing</p>",
        "id": 135973518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783811
    },
    {
        "content": "<p>well depends. people have been asking for more details on transmutes anyway</p>",
        "id": 135973536,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783839
    },
    {
        "content": "<p>I just hoped I could get a basic model working that just looks at <code>&amp;</code>, <code>*</code>, casts and memory accesses</p>",
        "id": 135973607,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783863
    },
    {
        "content": "<p>no retagging, no recursing over the types</p>",
        "id": 135973617,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783882
    },
    {
        "content": "<p>and, well, it works with <code>-Zmir-opt-level=0</code>^^</p>",
        "id": 135973653,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783915
    },
    {
        "content": "<blockquote>\n<p>well depends. people have been asking for more details on transmutes anyway</p>\n</blockquote>\n<p>confirm</p>",
        "id": 135973654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783923
    },
    {
        "content": "<p>I guess if transmutes are \"silent\"</p>",
        "id": 135973665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783940
    },
    {
        "content": "<p>what should I confirm?</p>",
        "id": 135973675,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783942
    },
    {
        "content": "<p>sorry, that means \"I agree, you are correct\" :)</p>",
        "id": 135973681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783955
    },
    {
        "content": "<p>oh. I thought it was an imperative. ^^</p>",
        "id": 135973727,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783965
    },
    {
        "content": "<p>well back on topic though, I'll work with mir-opt-level=0 for now</p>",
        "id": 135974472,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784792
    },
    {
        "content": "<p>retagging is annoying because it has to happen after <em>every</em>... well not sure after every what. every assignment, likely? plus fn calls and return?</p>",
        "id": 135974529,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784824
    },
    {
        "content": "<p>it has some logic that's similar to validation</p>",
        "id": 135974535,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784835
    },
    {
        "content": "<p>but unlike validation it needs to be able to actually mutate stuff, validation works on operands that you cannot mutate</p>",
        "id": 135974549,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784851
    },
    {
        "content": "<p>so all in all, not nice</p>",
        "id": 135974571,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784875
    },
    {
        "content": "<p>oh wait someone siwtched the topic</p>",
        "id": 135974585,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784899
    },
    {
        "content": "<p>when did that happen^^</p>",
        "id": 135974587,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784902
    },
    {
        "content": "<p>heh that was me :P</p>",
        "id": 135974588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539784903
    },
    {
        "content": "<p>you can change it back quite easily</p>",
        "id": 135974595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539784913
    },
    {
        "content": "<p>for just my msgs?</p>",
        "id": 135974641,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784925
    },
    {
        "content": "<p>just click the \"edit\" next to your msg</p>",
        "id": 135974644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539784929
    },
    {
        "content": "<p>and you can select \"this message and all ones after it\"</p>",
        "id": 135974646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539784934
    },
    {
        "content": "<p>yes</p>",
        "id": 135974647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539784934
    },
    {
        "content": "<p>wow technology</p>",
        "id": 135974669,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784968
    },
    {
        "content": "<p>no autocompletion for the topic name though</p>",
        "id": 135974673,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784979
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I just realized (seems rather obvious now) that optimizing away <code>x as *const _</code> to just a transmute is not legal. we do want to rule out using raw ptrs to access locations that never got \"leaked\" by being cast to raw. So I will assume that such optimizations don't happen. (I think currently they don't, but who knows which ideas people have.)</p>",
        "id": 136108441,
        "sender_full_name": "RalfJ",
        "timestamp": 1539952986
    },
    {
        "content": "<p>that leaves optimizing away <code>&amp;[mut] *x</code>, where <code>x</code> might be a ref or a raw ptr -- but at least the output of the transmutes we want to support are restricted to references.</p>",
        "id": 136108499,
        "sender_full_name": "RalfJ",
        "timestamp": 1539953055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> makes sense</p>",
        "id": 136108557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539953156
    },
    {
        "content": "<p>also, at least the way I have implemented this now, <code>&amp;mut</code>'s validaity invariant actually says that the tag must be a <code>Uniq</code>. everything else is insta-UB. That makes some things simpler...</p>",
        "id": 136115834,
        "sender_full_name": "RalfJ",
        "timestamp": 1539960302
    },
    {
        "content": "<p>actually it can also be a <code>Raw</code>, which pretty much behaves like a raw ref... it's not <em>really</em> unique. but that seems okay; for unique refs we didnt retag we also cannot know if their tag is <em>really</em> unique.</p>",
        "id": 136116616,
        "sender_full_name": "RalfJ",
        "timestamp": 1539961025
    },
    {
        "content": "<p>an <code>&amp;mut</code> with a <code>Frz</code> tag however is insta-UB, for now.</p>",
        "id": 136116626,
        "sender_full_name": "RalfJ",
        "timestamp": 1539961035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have a rather surprising case: <a href=\"https://github.com/RalfJung/miri/blob/stacked-borrows/tests/compile-fail/stacked_borrows/illegal_write4.rs\" target=\"_blank\" title=\"https://github.com/RalfJung/miri/blob/stacked-borrows/tests/compile-fail/stacked_borrows/illegal_write4.rs\">https://github.com/RalfJung/miri/blob/stacked-borrows/tests/compile-fail/stacked_borrows/illegal_write4.rs</a><br>\nI really want this to fail earlier, but cannot find a way to make that happen without breaking code we probably want to allow.</p>",
        "id": 136123389,
        "sender_full_name": "RalfJ",
        "timestamp": 1539967371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> here's another interesting problem: Doing <code>&amp;slice[0] as *const _</code> only leaks the first element of the slice to a raw pointer, so you cannot access the other elements even after you did that...</p>",
        "id": 136277228,
        "sender_full_name": "RalfJ",
        "timestamp": 1540224667
    },
    {
        "content": "<p>oh, that's an interesting reason to prefer <code>as_ptr</code></p>",
        "id": 136277777,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540225262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> regarding your first example: do you have a sense of where you <em>want</em> it to fail? It seems like pursuing <code>transmute</code> is having the effect that <em>creating references</em> becomes far less significant until they are used...does that seem accurate?</p>",
        "id": 136278162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540225666
    },
    {
        "content": "<blockquote>\n<p>oh, that's an interesting reason to prefer <code>as_ptr</code></p>\n</blockquote>\n<p>only that <code>as_ptr</code> would be to be a primitive MIR operation to make this actually work</p>",
        "id": 136278786,
        "sender_full_name": "RalfJ",
        "timestamp": 1540226188
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> regarding your first example: do you have a sense of where you <em>want</em> it to fail? It seems like pursuing <code>transmute</code> is having the effect that <em>creating references</em> becomes far less significant until they are used...does that seem accurate?</p>\n</blockquote>\n<p>I had hoped that and use of an <code>&amp;mut</code> would give you basically that it is still exercising its exclusive access. And we could maybe still get there but we'd have to say that a non-exclusively-reborrowed <code>&amp;mut T</code> is allowed to point only to memory with its tag being the top of the stack, <em>ignoring freezing and barriers</em>. Currently, we check if it is anywhere on the stack, i.e., we check if reactivating it would be possible at all.</p>",
        "id": 136279037,
        "sender_full_name": "RalfJ",
        "timestamp": 1540226466
    },
    {
        "content": "<blockquote>\n<p>only that as_ptr would be to be a primitive MIR operation to make this actually work</p>\n</blockquote>\n<p>Not necessarily - <code>&amp;[T] as *const [T] as *const T</code> should work.</p>",
        "id": 136279212,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1540226640
    },
    {
        "content": "<p>actually what I said above is wrong, we have to also allow an <code>&amp;mut</code> pointing to sth that is currently raw because if there is interior mutability, that#s what happens</p>",
        "id": 136279297,
        "sender_full_name": "RalfJ",
        "timestamp": 1540226691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> good point! I'll try that immediately.</p>",
        "id": 136279304,
        "sender_full_name": "RalfJ",
        "timestamp": 1540226699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> this actually works :-)</p>",
        "id": 136279722,
        "sender_full_name": "RalfJ",
        "timestamp": 1540227077
    },
    {
        "content": "<p>good! I'd hope so :P</p>",
        "id": 136281088,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1540228440
    }
]