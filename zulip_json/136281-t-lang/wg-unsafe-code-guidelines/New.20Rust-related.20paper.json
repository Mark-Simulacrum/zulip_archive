[
    {
        "content": "<p>Spotted this preprint that might be of interest: \"Is Rust Used Safely by Software Developers?\" <a href=\"https://arxiv.org/abs/2007.00752\">https://arxiv.org/abs/2007.00752</a></p>\n<blockquote>\n<p>Furthermore, we recommend changes to the Rust compiler and to the central Rust repository's interface to help Rust software developers be aware of when their Rust code is unsafe.</p>\n</blockquote>",
        "id": 246270736,
        "sender_full_name": "bstrie",
        "timestamp": 1626465319
    },
    {
        "content": "<blockquote>\n<p>We conclude that although the use of the keyword unsafe is limited, the propagation of unsafeness offers a challenge to the claim of Rust as a memory-safe language.</p>\n</blockquote>\n<p>ugh, no, that's not what the claim means</p>",
        "id": 246276197,
        "sender_full_name": "cuviper",
        "timestamp": 1626468292
    },
    {
        "content": "<p>(but I haven't read the actual paper yet)</p>",
        "id": 246276210,
        "sender_full_name": "cuviper",
        "timestamp": 1626468300
    },
    {
        "content": "<p>Based on the findings described in the introduction, I disagree with the main claims (and research methodology, to some extent).</p>\n<blockquote>\n<p>RQ2: How much of the Rust code is Unsafe Rust?<br>\nUnsafe Rust is necessary, but undermines the memory-safety and data-race freedom guarantees. Since Unsafe Rust may modify an arbitrary memory location, any use of Unsafe Rust in any dependency compromises the static guarantees of the whole library. Rust libraries that do not contain Unsafe Rust operations, but call functions from external libraries that do, appear Safe Rust, but, in fact, are not statically guaranteed safe. The goal of RQ2 is to determine what percentage of the Rust libraries lack full safety compiler guarantees.</p>\n</blockquote>\n<p>Unsafe Rust may not modify arbitrary memory locations, that's the point. Certainly the compiler has limitations in what it can check, because it's not a proof language and it can't solve the halting problem. But this idea that any crate internally using unsafe code infects all its dependencies with unsafety is definitely the wrong way to analyze the situation. In fact I'm surprised by that metric that they don't get closer to 100% of crates using unsafe, since std uses unsafe and most crates depend on it. And of course intrinsics are unsafe.</p>",
        "id": 246283986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626471737
    },
    {
        "content": "<p>An <em>unsound</em> crate will infect all its users with unsafety but it's pretty hard to get statistics on how many crates in the wild are unsound. At least, this is mostly considered a bug and it's not hard to push through PRs that make sure to mark public functions with safety conditions as <code>unsafe</code></p>",
        "id": 246284477,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626472007
    },
    {
        "content": "<p>that sounds basically like <a href=\"https://crates.io/crates/cargo-geiger\">cargo-geiger</a>, which also exempts the standard library</p>",
        "id": 246284536,
        "sender_full_name": "cuviper",
        "timestamp": 1626472053
    },
    {
        "content": "<p>The thing that bugs me about cargo-geiger's approach is that even if I have a library with unsafe and formally prove its correctness, it's still considered a dangerous crate and anyone who uses my library is similarly marked as dangerous. There is no space in this worldview for <em>encapsulated</em> unsafety</p>",
        "id": 246284963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626472318
    },
    {
        "content": "<p>yep</p>",
        "id": 246285038,
        "sender_full_name": "cuviper",
        "timestamp": 1626472355
    },
    {
        "content": "<p>I read this paper the other day, I remember when this subject has come up before people were suggesting maybe renaming <code>unsafe</code> to something else to better convey the concept, and after reading this I wondered if anyone suggested <code>relaxed</code> as an alternative to <code>unsafe</code>?</p>\n<p>It might be more clear that it doesn‚Äôt make code unsafe, but instead removes or ‚Äúrelaxes‚Äù some of the rules. It can also be thought of as telling the compiler, ‚ÄúRelax, I know what I‚Äôm doing‚Äù. üòÑ</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">relaxed</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">read</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">src</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\">  </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">relaxed</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mh\">0x00</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246330475,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1626536527
    },
    {
        "content": "<p><code>unchecked</code> would be a better name IMHO. This is already used in the name of various unsafe functions and clearly explains that rustc doesn't check some things when using this.</p>",
        "id": 246331134,
        "sender_full_name": "bjorn3",
        "timestamp": 1626537447
    },
    {
        "content": "<p>I agree that <code>unchecked</code> fits the meaning.</p>",
        "id": 246335486,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626543991
    },
    {
        "content": "<p>So does <code>trusted</code>, but it has too positive a connotation outside of computer security.</p>",
        "id": 246335498,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626544025
    },
    {
        "content": "<p><code>relaxed</code> doesnt sound good IMO, the rules arent relaxed -- you just have to ensure them yourself with much less compiler help</p>",
        "id": 246336138,
        "sender_full_name": "RalfJ",
        "timestamp": 1626544954
    },
    {
        "content": "<p>I think <code>unchecked</code> is heading in the right direction, but even that is misleading. It still performs all of the normal checks, but also enables additional functionality that can't be checked.</p>",
        "id": 246337486,
        "sender_full_name": "cuviper",
        "timestamp": 1626546989
    },
    {
        "content": "<p>Unchecked is also nice</p>",
        "id": 246337489,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1626547003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I mean I would consider that a definition of a relaxed rule, something that‚Äôs up to you to uphold.</p>",
        "id": 246337572,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1626547135
    },
    {
        "content": "<p>even <code>unchecked</code> isn't perfect, because it might feed the misconception that <code>unsafe</code> \"turns off\" safety checks, e.g. turning off the borrow checker</p>",
        "id": 246337676,
        "sender_full_name": "bstrie",
        "timestamp": 1626547323
    },
    {
        "content": "<p>Maybe it could be described as something like a <code>critical</code> section, since part of the idea is that extra scrutiny is required.</p>",
        "id": 246337716,
        "sender_full_name": "cuviper",
        "timestamp": 1626547379
    },
    {
        "content": "<p>critical section kind of already has another meaning though.</p>",
        "id": 246338116,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1626547924
    },
    {
        "content": "<p>Yeah, I was kind of trying to lean on that, but it's not a great match. Maybe there's a synonym along those lines though?</p>",
        "id": 246338333,
        "sender_full_name": "cuviper",
        "timestamp": 1626548173
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">trustmeferris</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">set_len</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246339321,
        "sender_full_name": "Lokathor",
        "timestamp": 1626549288
    },
    {
        "content": "<p>you want to express that the code is delicate and potentially explosive, so clearly <code>volatile</code> is the proper keyword</p>",
        "id": 246339436,
        "sender_full_name": "bstrie",
        "timestamp": 1626549431
    },
    {
        "content": "<p><code>delicate</code>...</p>",
        "id": 246339463,
        "sender_full_name": "nagisa",
        "timestamp": 1626549482
    },
    {
        "content": "<p>It is mildly unfortunate that unsafe using and unsafe declaring use the same keyword, but that's not the fatal flaw of the paper, or of anyone who thinks along the same lines.</p>",
        "id": 246339801,
        "sender_full_name": "Lokathor",
        "timestamp": 1626549926
    },
    {
        "content": "<p>The flaw is the absolute lack of belief in the possibility of encapsulating unsafe operations with a safe interface</p>",
        "id": 246339860,
        "sender_full_name": "Lokathor",
        "timestamp": 1626549985
    },
    {
        "content": "<p>I don't think there's any problem with <code>unsafe</code> as applied to functions. it's unsafe blocks that could be more clear, and could be a totally separate keyword (although I'm not sure if a different keyword would actually overcome the misconceptions people have)</p>",
        "id": 246340405,
        "sender_full_name": "bstrie",
        "timestamp": 1626550777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219696\">XAMPPRocky</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/New.20Rust-related.20paper/near/246337572\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> I mean I would consider that a definition of a relaxed rule, something that‚Äôs up to you to uphold.</p>\n</blockquote>\n<p>well, the static rules are relaxed, but the UB rules are not -- and thinking that \"UB is okay in unsafe blocks\" is something I've seen in the wild</p>",
        "id": 246341518,
        "sender_full_name": "RalfJ",
        "timestamp": 1626552199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/New.20Rust-related.20paper/near/246337676\">said</a>:</p>\n<blockquote>\n<p>even <code>unchecked</code> isn't perfect, because it might feed the misconception that <code>unsafe</code> \"turns off\" safety checks, e.g. turning off the borrow checker</p>\n</blockquote>\n<p>it turns off the checjs that reject raw ptr derefs and things like that -- sounds unchecked to me. but I see what you mean.</p>",
        "id": 246341526,
        "sender_full_name": "RalfJ",
        "timestamp": 1626552226
    },
    {
        "content": "<p>A check implies that some sort of test happens and the test result affects the code flow. index out of bounds and panic, or whatever. unchecked means the test is removed and assumed to have passed.</p>\n<p>So from that point of view, raw pointers needing an unsafe block isn't \"checked\". There's no check that occurs before reading the pointer if the check passed.</p>",
        "id": 246341701,
        "sender_full_name": "Lokathor",
        "timestamp": 1626552479
    },
    {
        "content": "<p>a check can be many things. does not have to be at runtime. there's a check rejecting raw ptr deref. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span><br>\n(IOW, I dont accept your narrow definition of \"check\".)</p>",
        "id": 246342310,
        "sender_full_name": "RalfJ",
        "timestamp": 1626553326
    },
    {
        "content": "<p>From the point of view of the programmer, if I use an <code>unsafe</code> block but don't use any unsafe operations or functions then it's exactly the same as not using <code>unsafe</code> at all (i.e. it's unnecessary unsafe). So it doesn't \"turn off\" anything in that sense. It just gives me \"super powers\" (as <a href=\"https://doc.rust-lang.org/stable/book/ch19-01-unsafe-rust.html#unsafe-superpowers\">the book</a> puts it) which allows me to use operations that are otherwise completely forbidden in safe code.</p>",
        "id": 246343334,
        "sender_full_name": "Chris Denton",
        "timestamp": 1626555100
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>superrust { ... }\n</code></pre></div>\n<p>:D</p>",
        "id": 246343599,
        "sender_full_name": "RalfJ",
        "timestamp": 1626555562
    },
    {
        "content": "<p>Too long a keyword for Rust, ¬´¬†sprust¬†¬ª maybe <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span> ?</p>",
        "id": 246345179,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1626556856
    },
    {
        "content": "<p><code>rust++ { }</code>, obviously</p>",
        "id": 246345210,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1626556924
    },
    {
        "content": "<p>We already have <code>extern \"Rust\" { }</code> for declarations, I don't see why we couldn't allow definitions/expressions within and make up a rust++ \"CC\".</p>",
        "id": 246345452,
        "sender_full_name": "nagisa",
        "timestamp": 1626557335
    },
    {
        "content": "<p>or rather just rename to rust++ and allow plain old rust in <code>extern \"Rust\"</code> blocks.</p>",
        "id": 246345533,
        "sender_full_name": "nagisa",
        "timestamp": 1626557460
    },
    {
        "content": "<p>though that sounds dangerously like saying unsafe Rust is the better Rust^^</p>",
        "id": 246346918,
        "sender_full_name": "RalfJ",
        "timestamp": 1626559690
    },
    {
        "content": "<p><code>super</code> is already a keyword...</p>",
        "id": 246348245,
        "sender_full_name": "cuviper",
        "timestamp": 1626562155
    },
    {
        "content": "<p><code>super {}</code>, <code>super fn foo() {}</code>, <code>pub(super) super fn bar() {}</code>, ...</p>",
        "id": 246348364,
        "sender_full_name": "cuviper",
        "timestamp": 1626562333
    },
    {
        "content": "<p><a href=\"https://xkcd.com/149/\">https://xkcd.com/149/</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sudo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">23</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246428414,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626683247
    },
    {
        "content": "<p>i shuddered when i read this but perhaps it was unrelated...</p>",
        "id": 246474120,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1626710285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/New.20Rust-related.20paper/near/246346918\">said</a>:</p>\n<blockquote>\n<p>though that sounds dangerously like saying unsafe Rust is the better Rust^^</p>\n</blockquote>\n<p>in what world would Rust++ not be a better rust (i kid, i kid)</p>",
        "id": 246474194,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1626710329
    },
    {
        "content": "<p>i think unsafe is not perfect but its hard to find an improvement. unsafe leans on having a discouraging connotation, which i think is the right default.</p>\n<p>personally, when i started with rust, it was about a year before i used unsafe for the first time (despite being proficient in low level c and c++). admittedly, this is because i figured \"what's the point of rust if I'm just going to use unsafe everwhere\", which is probably not the right attitude (there are a lot of good reasons to use unsafe, even as a beginner, although our beginner documentation around unsafe is sorely lacking, since we assume we can punt it to advance unsafe docs...) but i think its not too far from the right direction for the average case.</p>",
        "id": 246474539,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1626710468
    },
    {
        "content": "<p>maybe a good alternative to <code>unsafe</code> is to name <code>unsafe</code> blocks/impls \"manually proven blocks\": <code>mprove { *ptr }</code> and functions/traits that are <code>unsafe</code> to implement/call: \"manual proof required\":</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">mproofr</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">read</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246489012,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626717345
    },
    {
        "content": "<p>having separate keywords for the different use cases would likely reduce confusion.</p>",
        "id": 246489212,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626717432
    },
    {
        "content": "<p>Ha, if we rename <code>unsafe { ... }</code> to <code>theorem { ... }</code> I'm sure that will make people more afraid to use it</p>",
        "id": 246490435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626717953
    },
    {
        "content": "<p>or perhaps a postfix keyword, <code>{ ... } qed</code></p>",
        "id": 246490535,
        "sender_full_name": "bstrie",
        "timestamp": 1626717975
    },
    {
        "content": "<p>for unsafe functions I guess it could be something like <code>requires [..]</code> (with an explicit <code>[..]</code> because we're punting on actual syntax for requires clauses)</p>",
        "id": 246490806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1626718077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/New.20Rust-related.20paper/near/246490535\">said</a>:</p>\n<blockquote>\n<p>or perhaps a postfix keyword, <code>{ ... } qed</code></p>\n</blockquote>\n<p><code>{ ... } ‚àé</code>, and we could call them <a href=\"https://en.wikipedia.org/wiki/Tombstone_(typography)\">tombstone blocks</a>. :)</p>",
        "id": 246492777,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1626719030
    },
    {
        "content": "<p>a tombstone block, as in, this is the place you will be buried if you dare to violate memory safety</p>",
        "id": 246493048,
        "sender_full_name": "bstrie",
        "timestamp": 1626719159
    },
    {
        "content": "<p>or, the place Rust's designers will be buried because they made the syntax impossible to type...</p>",
        "id": 246493437,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1626719316
    },
    {
        "content": "<p><em>Laughs in arbitrary unicode entry</em></p>",
        "id": 246495459,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626720150
    }
]