[
    {
        "content": "<p>Hi,<br>\nthe safety docs for <code>std::ptr::drop_in_place</code> say: <br>\n<code>Additionally, if T is not Copy, using the pointed-to value after calling drop_in_place can cause undefined behavior</code>.<br>\nOnly the <em>use</em> of that pointer cause UB or  also just holding a reference to that object?</p>\n<p>Something along these lines: <a href=\"https://play.rust-lang.org/?gist=8adc59a9026c4d6fc85cb68a6f1da2e9\">https://play.rust-lang.org/?gist=8adc59a9026c4d6fc85cb68a6f1da2e9</a></p>",
        "id": 201697769,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592899705
    },
    {
        "content": "<p><code>Drop::drop</code> itself takes <code>&amp;mut self</code> so whatever state the object was left in after being destroyed must be a state that is valid according to the Rust language, but not necessarily a state that the object itself supports any further operations on. Therefore holding a reference to a dropped object <em>should</em> be fine as long as you don't attempt to call any methods of that object which make assumptions about the state of the object which were invalidated during the drop.</p>",
        "id": 201699377,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1592900802
    },
    {
        "content": "<blockquote>\n<p>call any methods of that object which make assumptions about the state of the object which were invalidated during the drop.</p>\n</blockquote>\n<p>Or any of its fields</p>",
        "id": 201699444,
        "sender_full_name": "lcnr",
        "timestamp": 1592900858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125267\">Peter Rabbit</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/drop_in_place.20safety/near/201699377\">said</a>:</p>\n<blockquote>\n<p><code>Drop::drop</code> itself takes <code>&amp;mut self</code> so whatever state the object was left in after being destroyed must be a state that is valid according to the Rust language, but not necessarily a state that the object itself supports any further operations on.</p>\n</blockquote>\n<p>That's a great point!<br>\nI still wonder about other subtleties though, like this: <a href=\"https://play.rust-lang.org/?gist=d2498c9a727155d188969763b8464077\">https://play.rust-lang.org/?gist=d2498c9a727155d188969763b8464077</a> I don't do any operations on the vec afterwards, but I assume the slice is emitting <code>dereferencable</code> to llvm. and it stays after it's not, is this UB? (obviously under any optimization the slice will be entirely removed)</p>",
        "id": 201700753,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1592901720
    },
    {
        "content": "<p>When calling <code>drop_in_place</code> on the <code>Vec</code>, the allocation that backed the slice got deallocated, yet you still passed the slice to a function that has a <code>dereferencable</code> attribute for it's reference argument. This is UB.</p>",
        "id": 201701346,
        "sender_full_name": "bjorn3",
        "timestamp": 1592902138
    },
    {
        "content": "<p>While references to the value itself which was dropped are okay to have but not touch, references to memory which was deallocated by the drop are UB to even have at all.</p>",
        "id": 201705627,
        "sender_full_name": "Peter Rabbit",
        "timestamp": 1592905141
    },
    {
        "content": "<p>IOW, using that internal slice here counts as \"making assumptions about the state of the object\"</p>",
        "id": 201753001,
        "sender_full_name": "RalfJ",
        "timestamp": 1592931595
    }
]