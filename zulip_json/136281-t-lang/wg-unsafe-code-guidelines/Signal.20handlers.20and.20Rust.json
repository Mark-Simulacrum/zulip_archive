[
    {
        "content": "<p>I have a terminal application and it would like to track the terminal size. On Windows this is communicated with normal event polling, but with unix systems a change in terminal size sends a signal to your process. By default the signal is ignored, so you have to set a custom signal handler.</p>\n<p>My question is, \"does Rust have any specific rules about signal handlers? or is it just <em>follow the C rules</em>?\"</p>\n<p>Particularly, can the signal handler just write an AtomicBool for \"you need to check the size again\", which the main code then checks every \"frame\" of input gathering? What aromic ordering would be sufficient here to interact that data between the main code and the signal handler, Or would even just a static Cell&lt;bool&gt; be correct?</p>",
        "id": 184840923,
        "sender_full_name": "Lokathor",
        "timestamp": 1578215570
    },
    {
        "content": "<p>a static Cell&lt;usize&gt; would certainly not be correct, for the same reasons a non-volatile global in C isn't (ordinary load-store optimizations of sequential programs can break the communication with a signal handler)</p>",
        "id": 184843788,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1578221241
    },
    {
        "content": "<p>Yes <code>AtomicBool</code> should be fine for communicating with a signal handler.</p>",
        "id": 184857464,
        "sender_full_name": "Amanieu",
        "timestamp": 1578245971
    },
    {
        "content": "<p>In terms of ordering, you don't need anything since you are not transmitting any data other than the flag. So <code>Relaxed</code> is fine.</p>",
        "id": 184857527,
        "sender_full_name": "Amanieu",
        "timestamp": 1578246015
    },
    {
        "content": "<p>If you need anything more (i.e. sending additional data about the signal through an <code>UnsafeCell</code> guarded by an atomic flag), then you would need to use <code>compiler_fence</code> on the main thread side to ensure the flag is checked before you access the protected data.</p>",
        "id": 184857551,
        "sender_full_name": "Amanieu",
        "timestamp": 1578246083
    },
    {
        "content": "<p>Hmm, so as long as it's only the atomic in question, just basic reads and writes are fine? I could also use an AtomicU32 to store a <code>[u16; 2]</code> of the dimensions or something like that.</p>",
        "id": 184865917,
        "sender_full_name": "Lokathor",
        "timestamp": 1578259836
    },
    {
        "content": "<p>Yea if you data is within the atomic itself then relaxed load/store is fine.</p>",
        "id": 184869165,
        "sender_full_name": "Amanieu",
        "timestamp": 1578265052
    },
    {
        "content": "<p>&lt;<a href=\"https://github.com/Lokathor/vanadium/blob/master/src/bin/vanadium.rs\" target=\"_blank\" title=\"https://github.com/Lokathor/vanadium/blob/master/src/bin/vanadium.rs\">https://github.com/Lokathor/vanadium/blob/master/src/bin/vanadium.rs</a>&gt; it seems to be working well</p>",
        "id": 184940237,
        "sender_full_name": "Lokathor",
        "timestamp": 1578340736
    },
    {
        "content": "<p>I'd treat the signal handler like a separate thread (which it sounds like you're already doing)</p>",
        "id": 185052940,
        "sender_full_name": "RalfJ",
        "timestamp": 1578429946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> when using release/acquire atomics, I suppose no fence is needed? what's good enough for inter-thread communication should also suffice for communication with the signal handler?</p>",
        "id": 185053008,
        "sender_full_name": "RalfJ",
        "timestamp": 1578429982
    },
    {
        "content": "<p>(I guess using full-spectrum atomics is overkill, but then I'd be surprised if signal handlers were perf-critical)</p>",
        "id": 185053056,
        "sender_full_name": "RalfJ",
        "timestamp": 1578430022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> For signal handlers you can use Acquire/Release but that's overkill. In practice you just need Relaxed + compiler_fence.</p>",
        "id": 185053235,
        "sender_full_name": "Amanieu",
        "timestamp": 1578430182
    },
    {
        "content": "<p>Also you only need the fence on the main thread side, not the signal handler, since returning from the signal handler acts as an implicit fence.</p>",
        "id": 185053329,
        "sender_full_name": "Amanieu",
        "timestamp": 1578430229
    },
    {
        "content": "<p>you need an acquire fence in the signal handler though I suppose, to avoid reordering the signal load and the data load?</p>",
        "id": 185053650,
        "sender_full_name": "RalfJ",
        "timestamp": 1578430422
    },
    {
        "content": "<p>I find it much easier to treat these as separate threads than trying to optimize for how signal handlers differ from threads^^</p>",
        "id": 185053708,
        "sender_full_name": "RalfJ",
        "timestamp": 1578430443
    },
    {
        "content": "<p>if both the handler and the main code use Relaxed, will that reach an \"eventual\" consistency? That is, assuming the main thread is very frequently checking the signal handler's AtomicBool, I'm comfortable with the handler running and then the main code not seeing that change on the very next loop, only some fuzzy number of loops later.</p>",
        "id": 185054031,
        "sender_full_name": "Lokathor",
        "timestamp": 1578430711
    },
    {
        "content": "<p>Such as with this:<br>\nmain loop reads the flag before getting any other input: &lt;<a href=\"https://github.com/Lokathor/vanadium/blob/master/src/bin/vanadium.rs#L142\" target=\"_blank\" title=\"https://github.com/Lokathor/vanadium/blob/master/src/bin/vanadium.rs#L142\">https://github.com/Lokathor/vanadium/blob/master/src/bin/vanadium.rs#L142</a>&gt;<br>\nand the signal handler just flips the flag on every time it's triggered &lt;<a href=\"https://github.com/Lokathor/vanadium/blob/master/src/bin/vanadium.rs#L202\" target=\"_blank\" title=\"https://github.com/Lokathor/vanadium/blob/master/src/bin/vanadium.rs#L202\">https://github.com/Lokathor/vanadium/blob/master/src/bin/vanadium.rs#L202</a>&gt;</p>",
        "id": 185054116,
        "sender_full_name": "Lokathor",
        "timestamp": 1578430793
    },
    {
        "content": "<p>To be clear, the demo does run and work as intended, I'm just kinda unclear if it's an accidentally sort of working or if this is an expected sort of working.</p>",
        "id": 185054251,
        "sender_full_name": "Lokathor",
        "timestamp": 1578430886
    },
    {
        "content": "<p>It works as expected.</p>",
        "id": 185054255,
        "sender_full_name": "Amanieu",
        "timestamp": 1578430896
    },
    {
        "content": "<p>okay cool</p>",
        "id": 185054272,
        "sender_full_name": "Lokathor",
        "timestamp": 1578430912
    },
    {
        "content": "<p>I've never ever touched C++ so a lot of the time when Rust says \"it works kinda how C++ works because that's what LLVM does\" it can be harder.</p>",
        "id": 185054355,
        "sender_full_name": "Lokathor",
        "timestamp": 1578430953
    },
    {
        "content": "<p>(I hope that in the future we'll move towards a knowledge base that doesn't assume the user knows any previous programming languages.)</p>",
        "id": 185054407,
        "sender_full_name": "Lokathor",
        "timestamp": 1578430998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> You only need acquire/release if you need to transfer data outside the atomic. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">DATA</span>: <span class=\"kt\">i64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FLAG</span>: <span class=\"nc\">AtomicBool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AtomicBool</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sig_handler</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Release ensures FLAG is stored after DATA</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">DATA</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FLAG</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ordering</span>::<span class=\"n\">Release</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main_thread</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Acquire ensures FLAG is loaded before DATA</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">FLAG</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">Ordering</span>::<span class=\"n\">Acquire</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">DATA</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 185054765,
        "sender_full_name": "Amanieu",
        "timestamp": 1578431233
    },
    {
        "content": "<p>This is the generic version where the signal handler is modeled as a separate thread.</p>",
        "id": 185054821,
        "sender_full_name": "Amanieu",
        "timestamp": 1578431270
    },
    {
        "content": "<p>oh so they only matter if the atomic is a pseudo-lock sort of thing on some other non-atomic data?</p>",
        "id": 185055016,
        "sender_full_name": "Lokathor",
        "timestamp": 1578431340
    },
    {
        "content": "<p>However you can do better since you know the main thread is suspended while the signal handler is running:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">DATA</span>: <span class=\"kt\">i64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FLAG</span>: <span class=\"nc\">AtomicBool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AtomicBool</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sig_handler</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Since the main thread is suspended, the</span>\n<span class=\"w\">    </span><span class=\"c1\">// entire signal handler is an atomic operation</span>\n<span class=\"w\">    </span><span class=\"c1\">// from the point of view of the thread.</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">DATA</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FLAG</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ordering</span>::<span class=\"n\">Relaxed</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main_thread</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Acquire ensures the load instruction for FLAG happens before the load instruction for DATA</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">FLAG</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">Ordering</span>::<span class=\"n\">Relaxed</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">compiler_fence</span><span class=\"p\">(</span><span class=\"n\">Ordering</span>::<span class=\"n\">Acquire</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">DATA</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 185055050,
        "sender_full_name": "Amanieu",
        "timestamp": 1578431372
    },
    {
        "content": "<p>does the Acquire need a compiler_fence Release to match it?</p>",
        "id": 185055156,
        "sender_full_name": "Lokathor",
        "timestamp": 1578431430
    },
    {
        "content": "<p>Not in this case because there is an implicit one when the signal handler ends.</p>",
        "id": 185055176,
        "sender_full_name": "Amanieu",
        "timestamp": 1578431452
    },
    {
        "content": "<p>Or to put it another way, it doesn't matter if FLAG is stored before DATA because the thread is suspended by the signal handler.</p>",
        "id": 185055234,
        "sender_full_name": "Amanieu",
        "timestamp": 1578431492
    },
    {
        "content": "<p>So from the thread's point of view they both happen at the same time.</p>",
        "id": 185055249,
        "sender_full_name": "Amanieu",
        "timestamp": 1578431502
    },
    {
        "content": "<p>i meant in the main thread, it doesn't need a release to match the acquire?</p>",
        "id": 185055318,
        "sender_full_name": "Lokathor",
        "timestamp": 1578431526
    },
    {
        "content": "<p>the ordering docs made it sound like you should always use matched pairs</p>",
        "id": 185055368,
        "sender_full_name": "Lokathor",
        "timestamp": 1578431560
    },
    {
        "content": "<p>You mean in the first example? The Release in the signal handler is matched with the Acquire in the main thread.</p>",
        "id": 185055403,
        "sender_full_name": "Amanieu",
        "timestamp": 1578431586
    },
    {
        "content": "<p>In this one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">DATA</span>: <span class=\"kt\">i64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FLAG</span>: <span class=\"nc\">AtomicBool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AtomicBool</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sig_handler</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Since the main thread is suspended, the</span>\n<span class=\"w\">    </span><span class=\"c1\">// entire signal handler is an atomic operation</span>\n<span class=\"w\">    </span><span class=\"c1\">// from the point of view of the thread.</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">DATA</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FLAG</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ordering</span>::<span class=\"n\">Relaxed</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main_thread</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Acquire ensures the load instruction for FLAG happens before the load instruction for DATA</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">FLAG</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">Ordering</span>::<span class=\"n\">Relaxed</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">compiler_fence</span><span class=\"p\">(</span><span class=\"n\">Ordering</span>::<span class=\"n\">Acquire</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">DATA</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><code>main_thread</code> has Acquire but no Release</p>",
        "id": 185056232,
        "sender_full_name": "Lokathor",
        "timestamp": 1578432186
    },
    {
        "content": "<p>if that's fine it's no problem, but the docs for the atomic Ordering values make it <em>sound like</em> Acquire and Release must always have matching pairs</p>",
        "id": 185056327,
        "sender_full_name": "Lokathor",
        "timestamp": 1578432251
    },
    {
        "content": "<p>Well, that is true in the general case.</p>",
        "id": 185058602,
        "sender_full_name": "Amanieu",
        "timestamp": 1578433830
    },
    {
        "content": "<p>For example this code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">DATA</span>: <span class=\"kt\">i64</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FLAG</span>: <span class=\"nc\">AtomicBool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AtomicBool</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">thread_a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Since the main thread is suspended, the</span>\n<span class=\"w\">    </span><span class=\"c1\">// entire signal handler is an atomic operation</span>\n<span class=\"w\">    </span><span class=\"c1\">// from the point of view of the thread.</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">DATA</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">compiler_fence</span><span class=\"p\">(</span><span class=\"n\">Ordering</span>::<span class=\"n\">Release</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">FLAG</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ordering</span>::<span class=\"n\">Relaxed</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">thread_b</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Acquire ensures the load instruction for FLAG happens before the load instruction for DATA</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">FLAG</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">Ordering</span>::<span class=\"n\">Relaxed</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">compiler_fence</span><span class=\"p\">(</span><span class=\"n\">Ordering</span>::<span class=\"n\">Acquire</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">DATA</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 185058621,
        "sender_full_name": "Amanieu",
        "timestamp": 1578433849
    },
    {
        "content": "<p>Will work correctly on a uniprocessor system that simulates multiprocessing with preemption.</p>",
        "id": 185058710,
        "sender_full_name": "Amanieu",
        "timestamp": 1578433922
    },
    {
        "content": "<p>But that's because you have 2 threads running and execution could switch to the other at any time.</p>",
        "id": 185058829,
        "sender_full_name": "Amanieu",
        "timestamp": 1578434006
    },
    {
        "content": "<p>though if you use <code>thread::spawn</code> this will still be UB, uniprocessor or not. so, \"work correctly\" is relative.</p>",
        "id": 185058906,
        "sender_full_name": "RalfJ",
        "timestamp": 1578434050
    },
    {
        "content": "<p>(assuming you actually mean threads here. the comments sound more like signal handlers.)</p>",
        "id": 185058948,
        "sender_full_name": "RalfJ",
        "timestamp": 1578434080
    },
    {
        "content": "<p>I'm pretty sure my code will work on an uniprocessor system.</p>",
        "id": 185059015,
        "sender_full_name": "Amanieu",
        "timestamp": 1578434129
    },
    {
        "content": "<p>Since you can think of the whole system only having a single thread, and task switching being done in a signal handler.</p>",
        "id": 185059137,
        "sender_full_name": "Amanieu",
        "timestamp": 1578434179
    },
    {
        "content": "<p>if it was assembly I'd agree</p>",
        "id": 185059335,
        "sender_full_name": "RalfJ",
        "timestamp": 1578434301
    },
    {
        "content": "<p>but it has UB in Rust, so none of these arguments matter</p>",
        "id": 185059345,
        "sender_full_name": "RalfJ",
        "timestamp": 1578434310
    },
    {
        "content": "<p>this is the same argument as in <a href=\"https://www.ralfj.de/blog/2019/07/14/uninit.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2019/07/14/uninit.html\">this blog post</a></p>",
        "id": 185059371,
        "sender_full_name": "RalfJ",
        "timestamp": 1578434336
    },
    {
        "content": "<p>the compiler is totally allowed to optimize your code to garbage because of the data race it has</p>",
        "id": 185059405,
        "sender_full_name": "RalfJ",
        "timestamp": 1578434364
    },
    {
        "content": "<p>I may sound like a broken record, but I think this is an important point, which is why I keep making it^^. You can only apply hardware/OS-level reasoning after you established that the program doesn't have UB.</p>",
        "id": 185059593,
        "sender_full_name": "RalfJ",
        "timestamp": 1578434489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> But you agree the code is correct if I use <code>fence</code> instead of <code>compiler_fence</code>?</p>",
        "id": 185060815,
        "sender_full_name": "Amanieu",
        "timestamp": 1578435421
    },
    {
        "content": "<p>i would like to note that a signal handler can also be triggered on any thread, not just the main thread</p>",
        "id": 185061284,
        "sender_full_name": "Lokathor",
        "timestamp": 1578435813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> yes. (Assuming all <code>main</code> does is just run those two functions in parallel.)</p>",
        "id": 185090926,
        "sender_full_name": "RalfJ",
        "timestamp": 1578474275
    }
]