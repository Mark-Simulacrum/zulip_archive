[
    {
        "content": "<p>Should this Rust be valid?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">uninitialized</span>::<span class=\"o\">&lt;&amp;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">cloned</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_f</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 134029578,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537053220
    },
    {
        "content": "<p>Spoiler:</p>\n<div class=\"codehilite\"><pre><span></span>==2711== Conditional jump or move depends on uninitialised value(s)\n==2711==    at 0x10E080: md::main (main.rs:10)\n==2711==    by 0x10E16F: std::rt::lang_start::{{closure}} (rt.rs:74)\n==2711==    by 0x119EF2: {{closure}} (rt.rs:59)\n==2711==    by 0x119EF2: _ZN3std9panicking3try7do_call17he206d249d44a142eE.llvm.17113965321911306163 (panicking.rs:310)\n==2711==    by 0x126699: __rust_maybe_catch_panic (lib.rs:105)\n==2711==    by 0x10EA85: try&lt;i32,closure&gt; (panicking.rs:289)\n==2711==    by 0x10EA85: catch_unwind&lt;closure,i32&gt; (panic.rs:392)\n==2711==    by 0x10EA85: std::rt::lang_start_internal (rt.rs:58)\n==2711==    by 0x10E147: std::rt::lang_start (rt.rs:74)\n==2711==    by 0x10E0E9: main (in /tmp/md/target/debug/md)\n</pre></div>\n\n\n<p>Line 10 is <code>Some(_) =&gt; 1,</code></p>",
        "id": 134029627,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537053332
    },
    {
        "content": "<p>but removing <code>cloned</code> or changing to <code>mem::uninitialized::&lt;()&gt;</code> stops the Valgrind error</p>",
        "id": 134029674,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537053375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has evidently already looked at the original version of this.</p>",
        "id": 134029841,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537053757
    },
    {
        "content": "<p>i guess the underlying question here is: what has to be initialized so you can you check the discriminant of an enum? at minimum the bytes where the discriminant is stored must be initialized. that's why <code>&amp;()</code> vs <code>()</code> makes a difference -- for the reference, the layout optimization puts the discriminant into the (uninit) bytes of the reference</p>",
        "id": 134029907,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1537053895
    },
    {
        "content": "<p>but if we want to keep expanding the amount of layout optimizations we do with enum tags, we need to declare this sort of thing UB for all types where we may want this sort of layout optimization</p>",
        "id": 134029917,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1537053959
    },
    {
        "content": "<p>The original context - <a href=\"https://stackoverflow.com/questions/52348277/vector-is-empty-after-cloning-struct-with-uninitialized-member/52349655#52349655\" target=\"_blank\" title=\"https://stackoverflow.com/questions/52348277/vector-is-empty-after-cloning-struct-with-uninitialized-member/52349655#52349655\">https://stackoverflow.com/questions/52348277/vector-is-empty-after-cloning-struct-with-uninitialized-member/52349655#52349655</a></p>",
        "id": 134029956,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> so the nullable pointer optimization kicking in makes sense, but why is <code>cloned</code> needed to trigger it?</p>",
        "id": 134029969,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054073
    },
    {
        "content": "<p>i have not thought deeply about that because i expect it to be rooted in some uninteresting technicality of the generated code</p>",
        "id": 134030010,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1537054120
    },
    {
        "content": "<p>One tidbit is that the original code used <code>ManuallyDrop</code> and the code worked in 1.28 but fails in 1.29</p>",
        "id": 134030024,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054190
    },
    {
        "content": "<p>and <code>ManuallyDrop</code> changed in 1.29</p>",
        "id": 134030061,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054203
    },
    {
        "content": "<p>So it <em>seems</em> that stdlib change introduced UB in end-user programs</p>",
        "id": 134030072,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054229
    },
    {
        "content": "<p>what's the change in 1.29?<br>\nbut in any case i would argue this was always UB (like most other uses of mem::uninitialized) and the change you speak of just exposed it</p>",
        "id": 134030209,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1537054511
    },
    {
        "content": "<p>ManuallyDrop and MaybeUninit are separate for a reason, though admittedly MaybeUninit still isn't a thing (&gt;_&gt;)</p>",
        "id": 134030217,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1537054548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> <a href=\"https://github.com/rust-lang/rust/commit/591eeff22af299043637e75bb5735c3c65e0c7fe\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/591eeff22af299043637e75bb5735c3c65e0c7fe\">https://github.com/rust-lang/rust/commit/591eeff22af299043637e75bb5735c3c65e0c7fe</a></p>",
        "id": 134030262,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054593
    },
    {
        "content": "<p>ah, I had suspected that one but didn't think it was old enough to be in 1.29</p>",
        "id": 134030271,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1537054614
    },
    {
        "content": "<blockquote>\n<p>MaybeUninit still isn't a thing (&gt;_&gt;)</p>\n</blockquote>\n<p>It is not ;-)</p>",
        "id": 134030281,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054638
    },
    {
        "content": "<p>OTOH I believe one can do the same in stable library code, using unions (and ManuallyDrop b/c unions containing Drop data are bad)</p>",
        "id": 134030400,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1537054827
    },
    {
        "content": "<p>cloned is just because before cloned you have Option&lt;&amp;&amp;T&gt;</p>",
        "id": 134030410,
        "sender_full_name": "eddyb",
        "timestamp": 1537054882
    },
    {
        "content": "<p>Some(&amp;garbage)</p>",
        "id": 134030411,
        "sender_full_name": "eddyb",
        "timestamp": 1537054893
    },
    {
        "content": "<p>oh right!</p>",
        "id": 134030412,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1537054898
    },
    {
        "content": "<p>which is shallowly valid</p>",
        "id": 134030413,
        "sender_full_name": "eddyb",
        "timestamp": 1537054901
    },
    {
        "content": "<p>ah, good point</p>",
        "id": 134030414,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054901
    },
    {
        "content": "<p>you know, we figured this out hours ago on discord</p>",
        "id": 134030418,
        "sender_full_name": "eddyb",
        "timestamp": 1537054916
    },
    {
        "content": "<p>Where's my move-out-array iterators :-p</p>",
        "id": 134030457,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054929
    },
    {
        "content": "<p>somwthing soemtjong frafmented chat platforms</p>",
        "id": 134030458,
        "sender_full_name": "eddyb",
        "timestamp": 1537054939
    },
    {
        "content": "<p>alsp, mobile keyboards apparently</p>",
        "id": 134030459,
        "sender_full_name": "eddyb",
        "timestamp": 1537054946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> in fact, no, I didn't, because the original poster asked a question on SO bu t didn't post their own answer</p>",
        "id": 134030462,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054956
    },
    {
        "content": "<p>leaving it there, unanswered</p>",
        "id": 134030463,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054965
    },
    {
        "content": "<p>idk why people ask on SO <em>first</em></p>",
        "id": 134030465,
        "sender_full_name": "eddyb",
        "timestamp": 1537054982
    },
    {
        "content": "<p>and then come to me</p>",
        "id": 134030472,
        "sender_full_name": "eddyb",
        "timestamp": 1537054988
    },
    {
        "content": "<p>only after posting here and submitting an answer did I see that they mentioned they talked to you</p>",
        "id": 134030475,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537054998
    },
    {
        "content": "<p>anyway you can find the discussion in #compiler on discord</p>",
        "id": 134030479,
        "sender_full_name": "eddyb",
        "timestamp": 1537055019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> by that logic, there would never be any questions on SO. Do you not want a front-line defense?</p>",
        "id": 134030481,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537055031
    },
    {
        "content": "<p>the gist of it is that mem::uninitialized is utterly useless</p>",
        "id": 134030483,
        "sender_full_name": "eddyb",
        "timestamp": 1537055037
    },
    {
        "content": "<p>no, I mean, they already were gonna ask me</p>",
        "id": 134030522,
        "sender_full_name": "eddyb",
        "timestamp": 1537055054
    },
    {
        "content": "<p>because they knew I was aware of them and slotmap</p>",
        "id": 134030524,
        "sender_full_name": "eddyb",
        "timestamp": 1537055073
    },
    {
        "content": "<p>Why they posted and then immediately asked you, I dunno. You gotta wait for time and thinking for a Q.</p>",
        "id": 134030526,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537055083
    },
    {
        "content": "<p>like, we had discussed it before lol</p>",
        "id": 134030528,
        "sender_full_name": "eddyb",
        "timestamp": 1537055097
    },
    {
        "content": "<p>anyway, yeah, this is an impossible problem on stable without using space or restricting the types of values significantly</p>",
        "id": 134030540,
        "sender_full_name": "eddyb",
        "timestamp": 1537055144
    },
    {
        "content": "<p>and on nightly you have to keep your own copy of MaybeUninit</p>",
        "id": 134030544,
        "sender_full_name": "eddyb",
        "timestamp": 1537055159
    },
    {
        "content": "<p>what why would you need nightly for copying MaybeUninit?</p>",
        "id": 134030588,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1537055185
    },
    {
        "content": "<p>copy restriction on unions</p>",
        "id": 134030590,
        "sender_full_name": "eddyb",
        "timestamp": 1537055203
    },
    {
        "content": "<p>the OP is the author of slotmap</p>",
        "id": 134030591,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537055214
    },
    {
        "content": "<p>oh it requires Copy not absence of drop glue</p>",
        "id": 134030592,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1537055215
    },
    {
        "content": "<p>yeah the RFC isn't even in FCP yet</p>",
        "id": 134030597,
        "sender_full_name": "eddyb",
        "timestamp": 1537055231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> you should be linking <a href=\"https://github.com/rust-lang/rust/issues/53491\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53491\">https://github.com/rust-lang/rust/issues/53491</a> or related threads</p>",
        "id": 134030698,
        "sender_full_name": "eddyb",
        "timestamp": 1537055448
    },
    {
        "content": "<p>or maybe just <a href=\"https://github.com/rust-lang/rust/pull/53508\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53508\">https://github.com/rust-lang/rust/pull/53508</a></p>",
        "id": 134030705,
        "sender_full_name": "eddyb",
        "timestamp": 1537055481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> linking ... from where? in my answer?</p>",
        "id": 134030708,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537055490
    },
    {
        "content": "<p>something in there should explain how useless <code>mem::uninitialized</code> is</p>",
        "id": 134030711,
        "sender_full_name": "eddyb",
        "timestamp": 1537055496
    },
    {
        "content": "<p>yeah, somewhere on the SO post</p>",
        "id": 134030712,
        "sender_full_name": "eddyb",
        "timestamp": 1537055506
    },
    {
        "content": "<p>just in general? Is this my new .sig? <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 134030714,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1537055509
    },
    {
        "content": "<p>lol</p>",
        "id": 134030716,
        "sender_full_name": "eddyb",
        "timestamp": 1537055514
    },
    {
        "content": "<p>I just want to go to sleep</p>",
        "id": 134030742,
        "sender_full_name": "eddyb",
        "timestamp": 1537055522
    },
    {
        "content": "<p>point is, this is not an isolated case. you can't use <code>mem::uninitialized</code> safely, with generics</p>",
        "id": 134030759,
        "sender_full_name": "eddyb",
        "timestamp": 1537055537
    },
    {
        "content": "<p>and if you think you can, chances are you're wrong</p>",
        "id": 134030761,
        "sender_full_name": "eddyb",
        "timestamp": 1537055554
    },
    {
        "content": "<p>there's a reason we're trying to deprecate it into oblivion</p>",
        "id": 134030762,
        "sender_full_name": "eddyb",
        "timestamp": 1537055563
    },
    {
        "content": "<p>(and <code>mem::zeroed</code> is almost entirely as bad)</p>",
        "id": 134030771,
        "sender_full_name": "eddyb",
        "timestamp": 1537055592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> in terms of <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s blog post, this code is incorrect because the <strong>validity predicate</strong> (which must <em>always</em> hold, even in unsafe code) of <code>&amp;T</code> will require that it be non-null (though this is not \"formally decided\" or even discussed; but it's needed to justify the <code>Option</code>-layout optimizations)</p>",
        "id": 134108545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537198855
    },
    {
        "content": "<p><code>mem::uninitialized::&lt;&amp;()&gt;()</code> is insta-UB...</p>",
        "id": 134115763,
        "sender_full_name": "RalfJ",
        "timestamp": 1537206385
    },
    {
        "content": "<blockquote>\n<p>why is cloned needed to trigger it?</p>\n</blockquote>\n<p>this is a question you can never answer with UB. or rather, the answer always is \"because otherwise LLVM was not yet smart enough to see youwere doing it wrong\"</p>",
        "id": 134115871,
        "sender_full_name": "RalfJ",
        "timestamp": 1537206531
    },
    {
        "content": "<p>only if you e.g. run this code in miri you can start doing actual statements of the form \"adding X makes a difference\"</p>",
        "id": 134115896,
        "sender_full_name": "RalfJ",
        "timestamp": 1537206564
    },
    {
        "content": "<p>(though miri does not yet implement enough validation to notice the insta-UB in the first line here)</p>",
        "id": 134115904,
        "sender_full_name": "RalfJ",
        "timestamp": 1537206577
    },
    {
        "content": "<p>But at least at this point we are close to having <code>MaybeUninit</code> in nightly</p>",
        "id": 134116301,
        "sender_full_name": "RalfJ",
        "timestamp": 1537206937
    },
    {
        "content": "<p>might just take another year or so tog et it on stable... ;)</p>",
        "id": 134116310,
        "sender_full_name": "RalfJ",
        "timestamp": 1537206945
    }
]