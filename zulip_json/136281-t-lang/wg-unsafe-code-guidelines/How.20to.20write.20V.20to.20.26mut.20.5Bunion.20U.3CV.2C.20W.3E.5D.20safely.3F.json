[
    {
        "content": "<p>You would probably need some sort of project-safe-transmute-like thing.</p>",
        "id": 263516861,
        "sender_full_name": "Lokathor",
        "timestamp": 1638488974
    },
    {
        "content": "<p>For MaybeUninit, it's <code>repr(transparent)</code> so you have a lot of flexibility. <code>*u = MaybeUninit::new(v)</code>, <code>u.as_mut_ptr().write(v)</code>, or writing via a simd scatter intrinsic all will be fine.</p>\n<p>For user unions it's hard to speak generally. Unions can have drop impls and by default will be <code>#[repr(Rust)]</code> so you really would want to do <code>*u = Union::new(val)</code>.</p>",
        "id": 263516863,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1638488979
    },
    {
        "content": "<p>Oof.</p>",
        "id": 263516884,
        "sender_full_name": "Jubilee",
        "timestamp": 1638489001
    },
    {
        "content": "<p>I got good news: if you write the maybeuninit case, and the initialized slice case, then you can tell people \"hey just cast the slice into one of these slice types using whatever slice casting lib you want, and use that slice with either of these functions\"</p>",
        "id": 263516961,
        "sender_full_name": "Lokathor",
        "timestamp": 1638489059
    },
    {
        "content": "<blockquote>\n<p>I can already see the \"scatter should allow <code>MyPersonalUnionType&lt;T: SimdElement&gt;</code>\" request that would be coming on this one's heels</p>\n</blockquote>\n<p>I think this should be disallowed for sure. If you want I can write the github comment that says no.</p>",
        "id": 263516968,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1638489064
    },
    {
        "content": "<p>Yeah I basically agree with Thom</p>",
        "id": 263516985,
        "sender_full_name": "Lokathor",
        "timestamp": 1638489091
    },
    {
        "content": "<p>Go for it, I just need a formal answer to this question so I can point someone at it later, basically.</p>",
        "id": 263517047,
        "sender_full_name": "Jubilee",
        "timestamp": 1638489127
    },
    {
        "content": "<p>The \"real\" building block there is writing to the maybeuninit, but then writing to the initialized version is also easy and obvious to put on top. for anything else, well, there's a lot that's out of scope for core.</p>",
        "id": 263517104,
        "sender_full_name": "Lokathor",
        "timestamp": 1638489181
    },
    {
        "content": "<p>I also dont think it's that likely. If they want that and know it will be fine, they have the ability to reinterpret as MaybeUninit&lt;TheSimdElement&gt; to perform the write, which will always be valid if the layout does indeed match (or, if it's invalid, it's because they bypassed the <code>Drop</code> impl on their type, which like, yeah).</p>",
        "id": 263517154,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1638489239
    },
    {
        "content": "<p>\"the problem is in the <code>unsafe</code> code you wrote\" yes.</p>",
        "id": 263517205,
        "sender_full_name": "Jubilee",
        "timestamp": 1638489268
    },
    {
        "content": "<p>the only times I've seen MyPersonalMaybeUninit-alikes is for code that's shimming maybeuninit p much, and hopefully nobody is doing that anymore, especially if they're interested in using std::simd</p>",
        "id": 263517337,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1638489380
    },
    {
        "content": "<p>it would be very surprising, to say the least</p>",
        "id": 263517353,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1638489397
    },
    {
        "content": "<p>Any time you spot a non-<code>#[repr(C)]</code> union, open an issue / contact its author to ask them to tag it as such. There isn't that much you can do soundly with a repr-Rust union; it should actually be even linted.</p>",
        "id": 263558688,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1638526668
    },
    {
        "content": "<p>If you ensure that you only read the variant that is written that is fine even for non-<code>#[repr(C)]</code> unions.</p>",
        "id": 263559016,
        "sender_full_name": "bjorn3",
        "timestamp": 1638526876
    },
    {
        "content": "<p>Yep, untagged enums is basically their only use case. But that can be covered by a <code>#[repr(C)]</code> enum as well, whereas transmutation cannot be handled by repr-Rust unions, currently. And <code>union</code>s lure people intro using them for transmutation very often, due to how much they look like a C union. So I stand by my rule of thumb; if anything, repr-Rust <code>union</code>s should be opt-in rather than the other way around:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">union</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* â€¦ */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// warning, missing `#[repr(C)]`, which is very error-prone.</span>\n<span class=\"w\">                      </span><span class=\"c1\">// If you did intend never to use this enum to transmute stuff,</span>\n<span class=\"w\">                      </span><span class=\"c1\">// then add a `#[repr(Rust)]` to silence this warning.</span>\n</code></pre></div>",
        "id": 263574377,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1638535746
    },
    {
        "content": "<p>yeah it should be a lint</p>",
        "id": 263600528,
        "sender_full_name": "Lokathor",
        "timestamp": 1638547600
    },
    {
        "content": "<p>...could programmers who want this with their own type just use a <code>#[repr(C)]</code> union with one of the variants being <code>[MaybeUninit&lt;T&gt;; N]</code>?<br>\nThat would be hilarious.</p>",
        "id": 263628554,
        "sender_full_name": "Jubilee",
        "timestamp": 1638560792
    },
    {
        "content": "<p>in fact they could. or just use <code>transmute::&lt;MaybeUninit&lt;i32&gt;, MyI32LikeType&gt;</code></p>",
        "id": 263628725,
        "sender_full_name": "Lokathor",
        "timestamp": 1638560880
    },
    {
        "content": "<p>or whatever similar mechanism depending, cast a slice for example</p>",
        "id": 263628798,
        "sender_full_name": "Lokathor",
        "timestamp": 1638560898
    }
]