[
    {
        "content": "<p>Is it ever sound to have more than  one Box&lt;T&gt; pointing to the same allocation?</p>\n<p>I was watching a jonhoo stream about evmap and he said this: <a href=\"https://clips.twitch.tv/KitschyBlazingTaroDatSheffy\">https://clips.twitch.tv/KitschyBlazingTaroDatSheffy</a><br>\nHe's talking about evmap and mentions making shallow Box&lt;T&gt; copies, when asked about aliasing and Unique&lt;T&gt; mentions it's fine as long as it's only accessed for reading and it's only dropped once. Is that correct under stacked borrows and llvm aliasing?</p>\n<p>I think this is the code he's talking about: <a href=\"https://github.com/jonhoo/rust-evmap/blob/master/src/shallow_copy.rs#L65-L72\">https://github.com/jonhoo/rust-evmap/blob/master/src/shallow_copy.rs#L65-L72</a></p>",
        "id": 217513290,
        "sender_full_name": "Nick12",
        "timestamp": 1605984219
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">ManuallyDrop</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">black_box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error: Undefined Behavior: no item granting read access to tag &lt;2946&gt; at alloc1411 found in borrow stack.\n --&gt; src/main.rs:6:15\n  |\n6 |     black_box(**b);\n  |               ^^^ no item granting read access to tag &lt;2946&gt; at alloc1411 found in borrow stack.\n  |\n  = help: this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\n  = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n\n  = note: inside `main` at src/main.rs:6:15\n</code></pre></div>",
        "id": 217513508,
        "sender_full_name": "bjorn3",
        "timestamp": 1605984523
    },
    {
        "content": "<p>I don't think it is fine. I think the read of <code>*a</code> assumes exclusivity.</p>",
        "id": 217513525,
        "sender_full_name": "bjorn3",
        "timestamp": 1605984552
    },
    {
        "content": "<p>it's more that <code>Box</code> is an exclusive ptr and even reads through aliases are disallowed when a ptr is exclusive</p>",
        "id": 217513727,
        "sender_full_name": "RalfJ",
        "timestamp": 1605984864
    },
    {
        "content": "<p>(this grants extra optimization power because it means nobody else can even observe the current value stored behind the ptr)</p>",
        "id": 217513735,
        "sender_full_name": "RalfJ",
        "timestamp": 1605984888
    },
    {
        "content": "<p>Side note, that code creates a box from a shared reference, which by itself might be UB even if the other box is forgotten.<br>\n(because afaiu box acts similar to &amp;mut T, and you can't make that from a shared reference)</p>",
        "id": 217523748,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1606000102
    },
    {
        "content": "<p>Opened an issue <a href=\"https://github.com/jonhoo/rust-evmap/issues/74\">https://github.com/jonhoo/rust-evmap/issues/74</a></p>\n<p>Also mentioned it in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/145\">https://github.com/rust-lang/unsafe-code-guidelines/issues/145</a></p>",
        "id": 217567489,
        "sender_full_name": "Nick12",
        "timestamp": 1606075670
    }
]