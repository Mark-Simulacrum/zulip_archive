[
    {
        "content": "<p>I wrote a vector with O(1) push (non-amortized), for which <code>self.push(x)</code> does never invalidate any references to any vector elements. I was wondering if I can exploit this somehow for a better API.</p>",
        "id": 148786737,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543498698
    },
    {
        "content": "<p>AFAICT the answer is no: the API of <code>Vec::push</code> cannot be improved if one adds to it the guarantee that it never invalidates any references to any pre-existing vector elements</p>",
        "id": 148786792,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543498777
    },
    {
        "content": "<p>you could have a <code>push(&amp;self)</code></p>",
        "id": 148786995,
        "sender_full_name": "RalfJ",
        "timestamp": 1543498979
    },
    {
        "content": "<p>would require some <code>UnsafeCell</code> somewhere, for the length field or whatever other metadata you have</p>",
        "id": 148787006,
        "sender_full_name": "RalfJ",
        "timestamp": 1543498999
    },
    {
        "content": "<p>The only \"improvement\" that I would think worth pursuing here is changing <code>push</code> to <code>push(&amp;self, T)</code> instead of <code>&amp;mut self</code>.</p>",
        "id": 148787024,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543499039
    },
    {
        "content": "<p>But doing so comes at the cost of making <code>&amp;Vec&lt;T&gt;: !Sync</code>.</p>",
        "id": 148787025,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543499039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> yeah, i was thinking along those lines, but then I can't make <code>&amp;Vec&lt;T&gt;: Sync</code> without adding internal synchronization right ?</p>",
        "id": 148787219,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543499229
    },
    {
        "content": "<p>yeah</p>",
        "id": 148787241,
        "sender_full_name": "RalfJ",
        "timestamp": 1543499260
    },
    {
        "content": "<p>e.g. that would allow two concurrent threads to call <code>push(&amp;self)</code>, and they would modify the length concurrently and append elements in some order</p>",
        "id": 148787246,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543499270
    },
    {
        "content": "<p>you could also have an iterator that supports insertion. Like, have a <code>push</code> method on the iterator. not sure if that's useful.</p>",
        "id": 148787306,
        "sender_full_name": "RalfJ",
        "timestamp": 1543499287
    },
    {
        "content": "<p>yeah, this iterator would then just be !Sync</p>",
        "id": 148787330,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543499326
    },
    {
        "content": "<p>there are a lot of vague proposals floating around for annotating methods or their parameters with \"what parts of the struct\" they access. those variants which don't tie this to fields but introduce a more abstract notion of \"disjoint pieces of this value\" could maybe allow signatures that say \"push needs exclusive access to the Vec's len+capacity but no access to its elements\" and \"<code>get</code> needs shared access to all of the Vec\" which is a bit more precise</p>",
        "id": 148787518,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543499485
    },
    {
        "content": "<p>that might be useful:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">vec</span>: <span class=\"nc\">MyVec</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">it</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 148787525,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543499490
    },
    {
        "content": "<p>um, actually, to get anything out of that separation you need different lifetimes for the access to the len+cap vs the access to the elements (e.g. to allow pushing while holding references to elements)</p>",
        "id": 148787620,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543499601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> only shared references are involved there</p>",
        "id": 148787716,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543499721
    },
    {
        "content": "<p>I am talking about an alternative where you don't use UnsafeCell and are thus still Sync</p>",
        "id": 148787731,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543499741
    },
    {
        "content": "<p>Ah!</p>",
        "id": 148787737,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543499754
    },
    {
        "content": "<p>(assuming a very far-fetched future language feature)</p>",
        "id": 148787740,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543499760
    },
    {
        "content": "<p>yeah, I don't think that's possible right now, I am not sure if that would be possible with such a feature either</p>",
        "id": 148787799,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543499792
    },
    {
        "content": "<p>even if capacity is not mutated, if the type is <code>Sync</code>, and <code>push(&amp;self)</code>, then two threads can insert into the vector concurrently, so they have to mutate <code>len</code> and the data behind <code>ptr</code> atomically</p>",
        "id": 148787816,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543499825
    },
    {
        "content": "<p>so AFAICT that would need some kind of extra synchronization</p>",
        "id": 148787895,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543499896
    },
    {
        "content": "<p>push would take a mutable reference _to the len+capacity_, without touching the elements. then if <code>get()</code> only touches len+capacity during the <code>get()</code> call and the long-term loan tied to the returned reference only covers the elements, you can push while having</p>",
        "id": 148788719,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543500725
    },
    {
        "content": "<p>:s i'm not sure I fully follow how that would work, if <code>push</code> takes a mutable reference to the length and capacity, then you can't call it concurrently via &amp;Vec, right ?</p>",
        "id": 148788925,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543500933
    },
    {
        "content": "<p>Well yeah, you need <code>&amp;mut Vec</code>. But you can take references to the elements of the vec -- in straw syntax this borrows <code>(*vec).$elements</code> -- while still pushing to it -- which borrows only <code>(*vec).$metadata</code> in straw syntax.</p>",
        "id": 148789147,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543501157
    },
    {
        "content": "<p>In the same way you can currently have <code>p: &amp;mut Point</code> where <code>struct Point(i32, i32);</code> and borrow <code>p.0</code> while modifying <code>p.1</code></p>",
        "id": 148789164,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543501192
    },
    {
        "content": "<p>Ah, yeah, i was thinking about something else.</p>",
        "id": 148789245,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543501265
    },
    {
        "content": "<p>That would be cool, and it would be nice for my vector, because <code>push</code> does not invalidate references.</p>",
        "id": 148789346,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543501361
    },
    {
        "content": "<p>however this is a very elaborate version of a feature that people are already reluctant to introduce in its simplest forms because it seems niche and rather complex for what it enables. though perhaps this sort of data structure is a convincing motivating example?</p>",
        "id": 148789517,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543501530
    },
    {
        "content": "<p>No I don't think so. If this would work for <code>Vec</code>, then that might be a motivating example, but because <code>Vec::push</code> invalidates all references, then this cannot work there. A <code>Vec</code> that never invalidates references of push is certainly useful, but too niche.</p>",
        "id": 148789619,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543501606
    },
    {
        "content": "<blockquote>\n<p>yeah, this iterator would then just be !Sync</p>\n</blockquote>\n<p>I was thinking of <code>IterMut</code>, and its push method could take <code>&amp;mut self</code>, so it could still be <code>Sync</code></p>",
        "id": 148789893,
        "sender_full_name": "RalfJ",
        "timestamp": 1543501810
    },
    {
        "content": "<p>then I don't follow, I thought the goal was inserting into the vector via the iterator while iterating. If it is <code>IterMut</code>, then it returns <code>&amp;mut T</code>, so one cannot call <code>push(&amp;mut T)</code> through the iterator while having a <code>&amp;mut T</code> to an element inside the loop, or what am I missing? Maybe some pseudo-code would be helpful.</p>",
        "id": 148789987,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543501914
    },
    {
        "content": "<p><code>IterMut::next</code> returns a long-lived <code>&amp;mut</code>, doesn't it?</p>",
        "id": 148790042,
        "sender_full_name": "RalfJ",
        "timestamp": 1543501937
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/beta/std/slice/struct.IterMut.html#method.next\" target=\"_blank\" title=\"https://doc.rust-lang.org/beta/std/slice/struct.IterMut.html#method.next\">https://doc.rust-lang.org/beta/std/slice/struct.IterMut.html#method.next</a></p>",
        "id": 148790066,
        "sender_full_name": "RalfJ",
        "timestamp": 1543501968
    },
    {
        "content": "<p>mind the lifetime</p>",
        "id": 148790070,
        "sender_full_name": "RalfJ",
        "timestamp": 1543501970
    },
    {
        "content": "<p>so, <code>let f = it.next(); it.push(...); *f = 5;</code> is actually allowed</p>",
        "id": 148790085,
        "sender_full_name": "RalfJ",
        "timestamp": 1543501984
    },
    {
        "content": "<p>ah the lifetime of <code>&amp;mut T</code> does not have anything to do with the lifetime of the iterator</p>",
        "id": 148790121,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543502017
    },
    {
        "content": "<p>just like <code>let f1 = it.next(): let f2 = it.next(); *f1 = 5;</code> is allowed</p>",
        "id": 148790127,
        "sender_full_name": "RalfJ",
        "timestamp": 1543502025
    },
    {
        "content": "<p>yeah, that sounds good</p>",
        "id": 148790166,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543502043
    },
    {
        "content": "<p>the more ergonomic variant would probably be an iterator yielding cursors that <code>DerefMut</code> to <code>T</code> but also can <code>push</code>, or so</p>",
        "id": 148790198,
        "sender_full_name": "RalfJ",
        "timestamp": 1543502067
    },
    {
        "content": "<p>so that you can still do <code>for ... in</code></p>",
        "id": 148790202,
        "sender_full_name": "RalfJ",
        "timestamp": 1543502072
    },
    {
        "content": "<p>but that's a detail</p>",
        "id": 148790203,
        "sender_full_name": "RalfJ",
        "timestamp": 1543502076
    }
]