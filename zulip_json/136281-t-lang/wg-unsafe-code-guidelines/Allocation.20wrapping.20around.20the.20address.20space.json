[
    {
        "content": "<p>The safety docs for pointers say the following sentence a lot:</p>\n<blockquote>\n<p>The offset being in bounds cannot rely on “wrapping around” the address space</p>\n</blockquote>\n<p>How do I make sure of that though? Say I got some buffer (pointer+length) from C code, can I assume it's contingous and doesn't wrap around the address space? (assuming I don't know which allocator does the C code use, doesn't know the target architecture and can't read its code).</p>\n<p>Should I add some assert to check this? if so, how? (I have a feeling <code>assert!((ptr as usize).checked_add(size).unwrap() &lt;= isize::MAX as usize)</code> is somewhat UBish)</p>",
        "id": 245321001,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625754569
    },
    {
        "content": "<p>I'm not sure if <code>wrapping_add</code> solves it because it says it basically has the same rules but just deferred to the time of dereferencing?</p>",
        "id": 245321364,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625754715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Allocation.20wrapping.20around.20the.20address.20space/near/245321001\">said</a>:</p>\n<blockquote>\n<p>The safety docs for pointers say the following sentence a lot:</p>\n<blockquote>\n<p>The offset being in bounds cannot rely on “wrapping around” the address space</p>\n</blockquote>\n<p>How do I make sure of that though? Say I got some buffer (pointer+length) from C code, can I assume it's contingous and doesn't wrap around the address space? (assuming I don't know which allocator does the C code use, doesn't know the target architecture and can't read its code).</p>\n<p>Should I add some assert to check this? if so, how? (I have a feeling <code>assert!((ptr as usize).checked_add(size).unwrap() &lt;= isize::MAX as usize)</code> is somewhat UBish)</p>\n</blockquote>\n<p>If you have a buffer that's contiguous in memory, then you can safely add up to the <a href=\"https://doc.rust-lang.org/std/primitive.pointer.html#method.add\">length</a> without UB.</p>\n<blockquote>\n<p>If any of the following conditions are violated, the result is Undefined Behavior:<br>\n -  Both the starting and resulting pointer must be either in bounds or one byte past the end of the same allocated object.<br>\n -  The computed offset, in bytes, cannot overflow an isize.<br>\n -  The offset being in bounds cannot rely on “wrapping around” the address space. That is, the infinite-precision sum must fit in a usize.</p>\n</blockquote>\n<p>If it's contiguous in memory, then none of these can be violated, I believe. But you really have to know it's contiguous, which any standard allocator should do. <code>allocator_traits::allocate</code> must assign contiguous memory for newer C++ <a href=\"https://en.cppreference.com/w/cpp/memory/allocator_traits/allocate\">standards</a>:</p>\n<blockquote>\n<p>Alloc::allocate was not required to create array object until P0593R6, which made using non-default allocator for std::vector and some other containers not actually well-defined according to the core language specification.</p>\n<p>After calling allocate and before construction of elements, pointer arithmethic of Alloc::value_type* is well-defined within the allocated array, but the behavior is undefined if elements are accessed.</p>\n</blockquote>",
        "id": 245322638,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625755209
    },
    {
        "content": "<p>I believe the same is true for malloc, let me check now.</p>",
        "id": 245322813,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625755317
    },
    {
        "content": "<p>C also has the same requirement of allocations not wrapping around the address space. So taking a pointer+length from C code should be fine.</p>",
        "id": 245323257,
        "sender_full_name": "Amanieu",
        "timestamp": 1625755493
    },
    {
        "content": "<p>As of C11, <code>calloc</code> says in 7.22.3.2:</p>\n<blockquote>\n<p>The calloc function allocates space for an array of nmem bobjects, each of whose size issize. The space is initialized to all bits zero.</p>\n</blockquote>\n<p><code>malloc</code> says in 7.22.3.4:</p>\n<blockquote>\n<p>The malloc function allocates space for an object whose size is specified by size and whose value is indeterminate.</p>\n</blockquote>\n<p>So yep, can guarantee contiguous memory as of C11.</p>",
        "id": 245323360,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625755542
    },
    {
        "content": "<p>In short, as long as someone isn't doing something very weird, as long as the code or custom malloc is standards-conformant, if you can do in your code <code>while ptr &lt; array + size</code>, then you're guaranteed no UB.</p>",
        "id": 245323577,
        "sender_full_name": "Alexander Huszagh (He/Him)",
        "timestamp": 1625755606
    },
    {
        "content": "<p>but if C gives me an mmapped file, then I think it could wrap the address space hypothetically?</p>",
        "id": 245335565,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1625760697
    },
    {
        "content": "<p>The kernel won't ever wrap around when mmapping AFAIK. The high half of the address space is reserved by the kernel itself on most OSes.</p>",
        "id": 245336308,
        "sender_full_name": "bjorn3",
        "timestamp": 1625761058
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Allocation.20wrapping.20around.20the.20address.20space/near/245336308\">said</a>:</p>\n<blockquote>\n<p>The kernel won't ever wrap around when mmapping AFAIK. The high half of the address space is reserved by the kernel itself on most OSes.</p>\n</blockquote>\n<p>That's true for some architectures. On some, the full address space belongs to userspace, from <code>0</code> to <code>usize::MAX</code>. It'd still be unusual to wrap, not least of which because the OS typically reserves the page at 0 to catch null pointers, but it's not portable to assume that the high half of the address space is reserved.</p>",
        "id": 245341528,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625763745
    },
    {
        "content": "<p>On x86-32, for instance, you can have a 3G/1G split (high quarter, not high half), or even a 4G/4G split. <a href=\"https://lwn.net/Articles/39283/\">https://lwn.net/Articles/39283/</a></p>",
        "id": 245341634,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625763809
    },
    {
        "content": "<p>It is LLVM UB even in that case I think, so it shouldn't happen even for C code. At least when compiled with clang.</p>",
        "id": 245342799,
        "sender_full_name": "bjorn3",
        "timestamp": 1625764359
    }
]