[
    {
        "content": "<p>Hi all. Is <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\">https://github.com/rust-lang/unsafe-code-guidelines/issues/77</a> the right issue for the question of whether <code>&amp;[u8]</code> pointing to uninitialized bytes should be UB?</p>",
        "id": 196591214,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1588745555
    },
    {
        "content": "<p>The context is: Iâ€™m wondering whether new memory-allocation methods should return <code>NonNull&lt;MaybeUninit&lt;u8&gt;&gt;</code> instead of <code>NonNull&lt;u8&gt;</code></p>",
        "id": 196591283,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1588745642
    },
    {
        "content": "<p>raw pointers and NonNull have lesser assurances than references do, so NonNull&lt;u8&gt; is fine to point to Uninit</p>",
        "id": 196591515,
        "sender_full_name": "Lokathor",
        "timestamp": 1588745777
    },
    {
        "content": "<p>I understand that. The point of <code>MaybeUninit</code> would be to encourage patterns such as dereferencing to <code>&amp;mut [MaybeUninit&lt;_&gt;]</code> for initialization</p>",
        "id": 196591707,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1588746078
    },
    {
        "content": "<p>I suppose.</p>\n<p>I don't think that's a very easy to use pattern compared to just writing to a pointer.</p>",
        "id": 196650323,
        "sender_full_name": "Lokathor",
        "timestamp": 1588778468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> both the one you linked and <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71\">https://github.com/rust-lang/unsafe-code-guidelines/issues/71</a> are related</p>",
        "id": 196686894,
        "sender_full_name": "RalfJ",
        "timestamp": 1588794286
    },
    {
        "content": "<p>basically, if both the reference and the int type are very strict in their validity invariant, then having such a slice is UB</p>",
        "id": 196686945,
        "sender_full_name": "RalfJ",
        "timestamp": 1588794308
    },
    {
        "content": "<p>if <em>either</em> one is relaxed, it's fine</p>",
        "id": 196686955,
        "sender_full_name": "RalfJ",
        "timestamp": 1588794313
    },
    {
        "content": "<p>I personally feel we should be relaxed with references, and I think my last proposal for handling <code>&amp;!</code> was generally received well, but I am not sure if there would be consensus for the plan I raised there</p>",
        "id": 196687052,
        "sender_full_name": "RalfJ",
        "timestamp": 1588794356
    },
    {
        "content": "<p>as for integers, I keep flip-flopping, and right now my inclination is to indeed make them UB when uninitialized -- but I know that certainly has no consensus ATM</p>",
        "id": 196687186,
        "sender_full_name": "RalfJ",
        "timestamp": 1588794397
    },
    {
        "content": "<p>I like that thought direction, <span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span>.  Could lead to things like <code>&amp;mut [MaybeUninit&lt;T&gt;]</code>s out of <code>Vec&lt;T&gt;</code>s too, to help avoid accidental write-outside-allocated-space issues that are so easy when just using <code>as_mut_ptr</code>.</p>",
        "id": 197506352,
        "sender_full_name": "scottmcm",
        "timestamp": 1589432396
    }
]