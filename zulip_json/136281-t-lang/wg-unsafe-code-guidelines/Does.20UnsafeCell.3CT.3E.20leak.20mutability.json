[
    {
        "content": "<p>I was wondering for a while about UnsafeCell, and how it interacts with aliasing rules. In particular it's valid to mutate a T inside a shared reference to an UnsafeCell&lt;T&gt;. I was wondering if this \"leaks\" outwards to the UnsafeCell.<br>\nThis applies to some optimizations in lccc (a compiler I'm working on). Essentially, in lccc, an UnsafeCell is represented as a struct with a mutable member (with C's mutability semantics, plus some attribute propagation suppression). However, I wouldn't like suppress the readonly attribute on &amp;UnsafeCell&lt;T&gt;. Is it valid to assume, in rust, that if a mutable pointer to an UnsafeCell (or a generic type/type dependent on a generic parameter, which may be or contain an UnsafeCell) is written to, that it cannot alias a shared reference of the same type (IE. is the interior mutability of UnsafeCell perfectly interior).</p>",
        "id": 214139411,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603335982
    },
    {
        "content": "<p>See the internal <code>Freeze</code> auto-trait, which <code>UnsafeCell</code> does not implement.</p>",
        "id": 214140874,
        "sender_full_name": "cuviper",
        "timestamp": 1603338448
    },
    {
        "content": "<p>Note that <code>&amp;mut UnsafeCell&lt;_&gt;</code> still has all the same <code>&amp;mut</code> rules -- you can't have one of those while also having any <code>&amp;UnsafeCell&lt;_&gt;</code>s.</p>",
        "id": 214140946,
        "sender_full_name": "scottmcm",
        "timestamp": 1603338562
    },
    {
        "content": "<p>Frozen <code>&amp;</code> references are marked <code>noalias</code> for LLVM, even though they can alias, because they're never data races</p>",
        "id": 214140950,
        "sender_full_name": "cuviper",
        "timestamp": 1603338572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Does.20UnsafeCell.3CT.3E.20leak.20mutability/near/214140946\">said</a>:</p>\n<blockquote>\n<p>Note that <code>&amp;mut UnsafeCell&lt;_&gt;</code> still has all the same <code>&amp;mut</code> rules -- you can't have one of those while also having any <code>&amp;UnsafeCell&lt;_&gt;</code>s.</p>\n</blockquote>\n<p>Does that mean that <code>get_mut(&amp;mut UnsafeCell&lt;T&gt;) -&gt; &amp;mut T</code> could be a safe function?</p>",
        "id": 214152704,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603352254
    },
    {
        "content": "<p>No, I think there could still be \"aliasing\" references to the inside of the <code>UnsafeCell&lt;T&gt;</code> just not the <code>UnsafeCell</code> itself.</p>",
        "id": 214171769,
        "sender_full_name": "Diggsey",
        "timestamp": 1603364987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Does.20UnsafeCell.3CT.3E.20leak.20mutability/near/214152704\">said</a>:</p>\n<blockquote>\n<p>Does that mean that <code>get_mut(&amp;mut UnsafeCell&lt;T&gt;) -&gt; &amp;mut T</code> could be a safe function?</p>\n</blockquote>\n<p><a href=\"https://doc.rust-lang.org/nightly/std/cell/struct.UnsafeCell.html#method.get_mut\">https://doc.rust-lang.org/nightly/std/cell/struct.UnsafeCell.html#method.get_mut</a></p>",
        "id": 214177323,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603368683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"295632\">Diggory Blake</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Does.20UnsafeCell.3CT.3E.20leak.20mutability/near/214171769\">said</a>:</p>\n<blockquote>\n<p>No, I think there could still be \"aliasing\" references to the inside of the <code>UnsafeCell&lt;T&gt;</code> just not the <code>UnsafeCell</code> itself.</p>\n</blockquote>\n<p>Well, you can still use <code>mem::swap::&lt;UnsafeCell&lt;_&gt;&gt;</code> and things like <code>*x = UnsafeCell::new(...);</code> to perform <code>noalias</code> mutations, so <code>.get_mut()</code> is a given.</p>",
        "id": 214177661,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603368865
    },
    {
        "content": "<blockquote>\n<p>See the internal <code>Freeze</code> auto-trait, which <code>UnsafeCell</code> does not implement.</p>\n</blockquote>\n<p>Yes, I am aware of the rustc implementation. My question is if a different implementation which does emit readonly (at the ir level, not the llvm level), and preforms TBAA to determine whether accesses can interfere is correct (Which allows me to do readonly alias checking in a dependant context)? Is there anything in rust and/or SB that says whether or not <code>UnsafeCell&lt;T&gt;</code> allows you to mutate the UnsafeCell itself (and not the inner field) via a pointer derived from a <code>&amp;UnsafeCell</code>?</p>",
        "id": 214203593,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603380503
    },
    {
        "content": "<blockquote>\n<p>mutate the UnsafeCell itself (and not the inner field)</p>\n</blockquote>\n<p>what does this mean?</p>",
        "id": 214203747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603380564
    },
    {
        "content": "<p>I think it is pretty rare to actually have a <code>&amp;mut UnsafeCell&lt;T&gt;</code>, because it's equivalent to a <code>&amp;mut T</code> as discussed</p>",
        "id": 214203902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603380621
    },
    {
        "content": "<p>I think the existence of <code>UnsafeCell::get_mut</code> implies that this is UB:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cell</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UnsafeCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cell</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mutr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cell</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"o\">*</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"p\">(</span><span class=\"n\">mutr</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214204400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603380833
    },
    {
        "content": "<p>(In lccc's model, which is derived mostly from C and C++) Conceptually in let x = UnsafeCell::new(5);, there are two distinct objects: x itself, and x.inner, even though they are perfectly overlapping in memory. x has type UnsafeCell&lt;i32&gt; and x.inner has type i32. I want to maintain this logical distinction, even when it is not a physical one (using <em>pointer-interconvertibility</em> rules)</p>",
        "id": 214204403,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603380834
    },
    {
        "content": "<p>Would that extend to ptr::write as well?</p>",
        "id": 214204553,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603380886
    },
    {
        "content": "<p>the write to <code>r</code> is <code>ptr::write</code></p>",
        "id": 214204610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603380905
    },
    {
        "content": "<p>Isn't it technically a reborrow-dereference (since it drops)</p>",
        "id": 214204693,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603380948
    },
    {
        "content": "<p>what drops?</p>",
        "id": 214204775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603380969
    },
    {
        "content": "<p>in SB, <code>mutr</code> is invalidated at the write to <code>r</code>, so the use is UB</p>",
        "id": 214204813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603380989
    },
    {
        "content": "<p><code>r</code> is a raw pointer, but it still logically has a lifetime associated to it even though rust can't track it</p>",
        "id": 214204919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603381052
    },
    {
        "content": "<p>if it could, it would see that <code>r</code> and <code>mutr</code> are live simultaneously so it wouldn't compile</p>",
        "id": 214204975,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603381080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Does.20UnsafeCell.3CT.3E.20leak.20mutability/near/214204693\">said</a>:</p>\n<blockquote>\n<p>Isn't it technically a reborrow-dereference (since it drops)</p>\n</blockquote>\n<p>Oh I see now what you mean, the original value in the unsafe cell (the <code>0</code>) is dropped with <code>*r = 1</code></p>",
        "id": 214205184,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603381162
    },
    {
        "content": "<p>but both <code>ptr::write(r, 1)</code> and <code>*r = 1</code> have the same effect on the memory insofar as they both write via raw pointer, invalidating the existing <code>Uniq</code> tag</p>",
        "id": 214205391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603381234
    },
    {
        "content": "<p>So an example where you mutate the cell directly would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cell</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UnsafeCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cell</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mutr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">cell</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"o\">*</span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"p\">(</span><span class=\"n\">mutr</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>and this would also be UB</p>",
        "id": 214205766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603381416
    },
    {
        "content": "<p>But regarding TBAA, I don't know if there is anything nontrivial you can say about rust code satisfying TBAA like restrictions</p>",
        "id": 214205974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603381498
    },
    {
        "content": "<p>Rust doesn't allow TBAA. For example <code>std::mem::transmute::&lt;&amp;u32, &amp;[u8; 4]&gt;(p)</code> is allowed and used in libstd.</p>",
        "id": 214205990,
        "sender_full_name": "bjorn3",
        "timestamp": 1603381504
    },
    {
        "content": "<p><code>u32::as_ne_bytes</code> is effectively that, though it uses a pointer cast.</p>",
        "id": 214206085,
        "sender_full_name": "bjorn3",
        "timestamp": 1603381554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> What are the restrictions on the lifetimes in that transmute?</p>",
        "id": 214206086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603381555
    },
    {
        "content": "<p>The lifetime has to be smaller or equal for the output like normal.</p>",
        "id": 214206269,
        "sender_full_name": "bjorn3",
        "timestamp": 1603381616
    },
    {
        "content": "<p>I wonder how that works out in more complex situations</p>",
        "id": 214206324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603381642
    },
    {
        "content": "<p>has safe-transmute WG tried to address this?</p>",
        "id": 214206349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603381655
    },
    {
        "content": "<p>I assume the safe-transmute WG doesn't concern itself with types containing references. Only POD's.</p>",
        "id": 214206609,
        "sender_full_name": "bjorn3",
        "timestamp": 1603381748
    },
    {
        "content": "<p>Is it possible to do TBAA if you don't have any such transmutes in the code? SB might be able to supply the aliasing restrictions on references from \"foreign\" code and TBAA can carry the rest under limited conditions</p>",
        "id": 214206702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603381797
    },
    {
        "content": "<blockquote>\n<p>Rust doesn't allow TBAA. For example <code>std::mem::transmute::&lt;&amp;u32, &amp;[u8; 4]&gt;(p)</code> is allowed and used in libstd.</p>\n</blockquote>\n<p>Not strict-aliasing. TBAA where I use the fact two pointers are the same type, but with incompatible attributes, to show they don' alias.</p>",
        "id": 214206824,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603381842
    },
    {
        "content": "<p>Lifetimes are not a validity invariant (atm). They are a very important safety invariant though.<br>\nIt's not invalid to transmute a ref to <code>&amp;'static _</code> but you can't use it with that lifetime</p>",
        "id": 214206846,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1603381855
    },
    {
        "content": "<p>Is there a reason why you are allowed to? I would also prefer to assume you can't widen a bound (how lifetimes are represented) ever.</p>",
        "id": 214206951,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603381911
    },
    {
        "content": "<p>well you don't have lifetimes per se but you do have SB which is almost the same</p>",
        "id": 214206966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603381919
    },
    {
        "content": "<p>No, SB is an execution model. Lifetimes are a type model that only permit a subset of executions of SB.</p>",
        "id": 214207102,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1603381972
    },
    {
        "content": "<p>As far as I know strict-aliasing is when you use <code>restrict</code> to say that two pointer arguments don't alias. TBAA is saying that two pointers don't alias when their types are different.</p>",
        "id": 214207119,
        "sender_full_name": "bjorn3",
        "timestamp": 1603381979
    },
    {
        "content": "<p>Lifetimes are pretty much static approximation of the things allowed by SB.</p>",
        "id": 214207258,
        "sender_full_name": "bjorn3",
        "timestamp": 1603382042
    },
    {
        "content": "<p>strict-aliasing is you can't access an object of type T through an lvalue of an unrelated type.</p>",
        "id": 214207347,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603382068
    },
    {
        "content": "<p>that's definitely not true for rust</p>",
        "id": 214207377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603382085
    },
    {
        "content": "<p>TBAA is a wide set of optimizations based on the types of pointers, and includes strict-aliasing.</p>",
        "id": 214207394,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603382094
    },
    {
        "content": "<p>what optimizations are you talking about specifically then?</p>",
        "id": 214207443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603382119
    },
    {
        "content": "<p>You could conclude that two types that have no overlap of valid representations can not alias as references.</p>",
        "id": 214207495,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1603382141
    },
    {
        "content": "<p>in rust the type of a pointer is almost completely irrelevant</p>",
        "id": 214207514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603382151
    },
    {
        "content": "<p>what matters are the aliasing restrictions coming from SB</p>",
        "id": 214207605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603382174
    },
    {
        "content": "<p>E.g. <code>enum A { Foo = 0 } \\n enum B { Foo = 1 }</code> then <code>(a: &amp;A) != &amp;(b: B)</code> must hold</p>",
        "id": 214207636,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1603382189
    },
    {
        "content": "<p>but <code>(a: *const A) != (b: *const B)</code> doesn't</p>",
        "id": 214207684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603382214
    },
    {
        "content": "<p>In rust it is allowed to have <code>&amp;2 as *const bool</code>. A bool can't ever be 2, but a <code>*const bool</code> is allowed to point to the value 2.</p>",
        "id": 214207696,
        "sender_full_name": "bjorn3",
        "timestamp": 1603382221
    },
    {
        "content": "<p>Yes, that wouldn't need to hold. But you can safely create any pointer value of a sized type</p>",
        "id": 214207726,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1603382234
    },
    {
        "content": "<blockquote>\n<p>E.g. <code>enum A { Foo = 0 } \\n enum B { Foo = 1 }</code> then <code>(a: &amp;A) != &amp;(b: B)</code> must hold<br>\nWe don't know that references need to refer to valid values yet.</p>\n</blockquote>",
        "id": 214207779,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603382259
    },
    {
        "content": "<p>Also under Ralf's proposal of validity not depending on memory, I don't think <code>(a: &amp;A) != &amp;(b: B)</code> must hold</p>",
        "id": 214207892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603382294
    },
    {
        "content": "<p>Count it to the pile of arguments for _not_ deciding on this yet.</p>",
        "id": 214207947,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1603382326
    },
    {
        "content": "<p>Also, I'm not asserting that <code>*mut T </code> doesn't alias a <code>*mut T</code>, rather I'm asserting a written to <code>*mut T</code> does not alias subsequently used <code>&amp;T</code>, even when T has an interior mutable field, or is a generic type that may have an interior mutable field.</p>",
        "id": 214209566,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603383008
    },
    {
        "content": "<p>And seeing the above, I assume this is a valid transformation.</p>",
        "id": 214210329,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603383310
    },
    {
        "content": "<p>I don't think SB prevents the following from being well defined:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cell</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">UnsafeCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cell</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">UnsafeCell</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">cell</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">ptr</span>::<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UnsafeCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214210414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603383348
    },
    {
        "content": "<p>because the write to <code>r</code> is indistinguishable from if we had not cast it and just used <code>ptr::write(r, 1)</code></p>",
        "id": 214210562,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603383405
    },
    {
        "content": "<p>which is exactly what you don't want to hear, I think</p>",
        "id": 214210598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603383422
    },
    {
        "content": "<p>If I understand what you mean correctly the answer is: SB doesn't allow it at the moment, but it is possible to do this using safe code.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">RefMut</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RefCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">());</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214210611,
        "sender_full_name": "bjorn3",
        "timestamp": 1603383429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Does.20UnsafeCell.3CT.3E.20leak.20mutability/near/214210562\">said</a>:</p>\n<blockquote>\n<p>because the write to <code>r</code> is indistinguishable from if we had not cast it and just used <code>ptr::write(r, 1)</code></p>\n</blockquote>\n<p>That specific example doesn't work I think. <code>&amp;cell</code> pops the SharedReadWrite item pushed by <code>cell.get()</code> from the stack I think.</p>",
        "id": 214211061,
        "sender_full_name": "bjorn3",
        "timestamp": 1603383612
    },
    {
        "content": "<p>no, because it's an unsafecell</p>",
        "id": 214211101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603383635
    },
    {
        "content": "<p><code>UnsafeCell</code> caused the the <code>.get()</code> to push SharedReadWrite instead of SharedReadOnly.</p>",
        "id": 214211206,
        "sender_full_name": "bjorn3",
        "timestamp": 1603383687
    },
    {
        "content": "<p>yeah, but creating (or already having) an <code>&amp;UnsafeCell</code> should not invalidate the SharedReadWrite</p>",
        "id": 214211385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603383758
    },
    {
        "content": "<p>you could swap the <code>let r</code> and <code>let r2</code> lines in the example</p>",
        "id": 214211433,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603383782
    },
    {
        "content": "<p>You're right. I can't get miri to complain.</p>",
        "id": 214211483,
        "sender_full_name": "bjorn3",
        "timestamp": 1603383810
    },
    {
        "content": "<blockquote>\n<p>which is exactly what you don't want to hear, I think</p>\n</blockquote>\n<p>Yeah, that's not exactly the most favourable answer. I'd rather avoid having pointer attributes be replaceable. In the case above, I actually treat that as a semantically different value (a most-derived subobject of an object of a <code>repr(transparent)</code> struct is <em>pointer-interconvertible</em> with that object, so the cast from <code>*mut T</code> to <code>*mut UnsafeCell&lt;T&gt;</code> actually produces an actual pointer to the UnsafeCell, not a reinterpreted pointer to the T. This is the primary justification for the optimization I want to do, because you are writing to a readonly object (an IR-level invalid operation). It's kind of annoying that I can't do this, because it actually extends to other optimizations (Ideally, most of my optimization passes are before generic declarations are instantiated, because it reduces time spent in those optimizations).</p>",
        "id": 214215693,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603385686
    },
    {
        "content": "<p>In cg_llvm the <code>noalias</code> attribute is not emitted for references to types that are <code>!Freeze</code> (<code>tcx.is_freeze</code>) The <code>noalias</code> attribute is never emitted for pointers.</p>",
        "id": 214216763,
        "sender_full_name": "bjorn3",
        "timestamp": 1603386173
    },
    {
        "content": "<p>I'm not asking about rustc, cg_llvm is out of scope for this question. I'm asking about rust proper, and the UCG understanding of it (especially since I intend to adopt UCG as correct in lccc, except where it violates some rule of rust or some narrowly-tailored guarantee lccc makes). If the answer is yes, I can do this optimization, brilliant. If not, I can probably work around it. Also, here attributes applied to a pointer value include inferred attributes.</p>",
        "id": 214217510,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603386515
    },
    {
        "content": "<p>But basically, the answer is I can't have a &amp;mut UnsafeCell&lt;T&gt; and a &amp;UnsafeCell&lt;T&gt; at the same time, but it's valid to write to a *mut UnsafeCell&lt;T&gt; even if it came from a shared reference? I think I can live with that. It just slightly reduces the scope of attribute aliasing analysis in generic types that may contain an UnsafeCell (or really anything with a mutable tagged member).</p>",
        "id": 214219660,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603387493
    },
    {
        "content": "<blockquote>\n<p>Is it valid to assume, in rust, that if a mutable pointer to an UnsafeCell (or a generic type/type dependent on a generic parameter, which may be or contain an UnsafeCell) is written to, that it cannot alias a shared reference of the same type (IE. is the interior mutability of UnsafeCell perfectly interior).</p>\n</blockquote>\n<p>If the writing pointer is a mutable <em>reference</em>, then yes -- this falls out of the uniqueness of mutable references.<br>\nif the writing pointer is a raw pointer, then no.</p>",
        "id": 214340811,
        "sender_full_name": "RalfJ",
        "timestamp": 1603473557
    },
    {
        "content": "<p>I feel fairly strongly that C/C++'s \"object memory model\" is way too complicated for its own good, and that the memory contents of an allocation should be \"flat\", i.e., just a list of \"abstract bytes\" (but those bytes can be <a href=\"https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html\">somewhat weird</a>). I reflected this in my notes on the <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/memory-interface.md\">memory interface</a>.<br>\nThese objects make memory in C <em>extremely</em> complicated; the only precise description of it that I know is <a href=\"https://robbertkrebbers.nl/thesis.html\">this PhD thesis</a>. (The standard itself is far from what I consider a precise description.) I do not think the complexity is justified. Programmers like to think of memory as being flat and consisting of bytes, I would like to diverge from that as little as absolutely necessary. Ergo, I would like to use the aliasing model and nothing else to satisfy any optimizations needs we have regarding aliasing within a single allocation. I think that is possible, and I think it is much easier than making memory a tree of abstract objects and defining how to reinterpet that tree as plain bytes when doing <code>char*</code> accesses.</p>",
        "id": 214341193,
        "sender_full_name": "RalfJ",
        "timestamp": 1603473749
    },
    {
        "content": "<p>My argument would that a flat aliasing model isn't sufficient with UnsafeCell at the least, since an &amp;UnsafeCell&lt;T&gt;'s memory can overlap with a &amp;mut T (one of the reasons for UnsafeCell, and part of the safe api of RefCell&lt;T&gt;). Even if it doesn't require that, an object model should be a valid implementation of rust, as long as the as-if rule isn't violated. I don't build memory out of abstract objects, rather I \"allocate\" the objects into memory (or registers, or anywhere else either, as long as it doesn't violate the as-if rule), distinct objects can intersect in any way that one object totally exists within the allocation of another under certain circumstances. The most major issue was what I brought up here, and the resolution is one I can live with (it just limits how pointer invalidation interacts with attribute inference).</p>",
        "id": 214360107,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603483754
    },
    {
        "content": "<blockquote>\n<p>My argument would that a flat aliasing model isn't sufficient with UnsafeCell at the least</p>\n</blockquote>\n<p>I think Stacked Borrows is sufficient, and we even have proofs that it enables a bunch of powerful optimizations. :)</p>",
        "id": 214417313,
        "sender_full_name": "RalfJ",
        "timestamp": 1603531073
    },
    {
        "content": "<blockquote>\n<p>since an &amp;UnsafeCell&lt;T&gt;'s memory can overlap with a &amp;mut T </p>\n</blockquote>\n<p>no it cannot, <code>&amp;mut T</code> is still unique. that's what I said above. but it can overlap with a <code>*mut T</code>.</p>",
        "id": 214417362,
        "sender_full_name": "RalfJ",
        "timestamp": 1603531123
    },
    {
        "content": "<blockquote>\n<p>Even if it doesn't require that, an object model should be a valid implementation of rust,</p>\n</blockquote>\n<p>This is where we rather strongly disagree. The only way I know is to permit an object model in an implementation is to put one in the spec. And that would be a huge mistake I think.<br>\nI am in favor of implementation divergence, but only insofar as it does not make the lives of Rust programmers harder. Imposing an object memory model on all Rust programmers just because some implementation wants to do something more C/C++-like would be a mistake. The point of Rust is to learn from the mistakes of C/C++, not to repeat them.</p>\n<blockquote>\n<p>as long as the as-if rule isn't violated</p>\n</blockquote>\n<p>I mean sure, if you can prove that your model refines a non-object-based Rust specification, then your model is a correct implementation of Rust. I just have not seen such an object model so far and I am skeptical for how useful it still could be -- it seems it would have to carry all the complexity of a \"tree-like\" memory without any of the benefits since every single memory access can \"violate the object structure\" arbitrarily.</p>",
        "id": 214417425,
        "sender_full_name": "RalfJ",
        "timestamp": 1603531214
    },
    {
        "content": "<p>Regarding your original question, current Stacked Borrows actually goes even further than \"leaking\" things to <code>*mut T</code>: a <code>&amp;Option&lt;Cell&lt;T&gt;&gt;</code> permits mutating the data field even if the <code>Option</code> is <code>None</code> (see <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/236\">this issue</a>). I am not very happy with this, but the alternative is to make the aliasing model itself perform memory accesses to figure out what the active variants of the involved enums are, and that makes me even more unhappy than the current situation.^^</p>",
        "id": 214417578,
        "sender_full_name": "RalfJ",
        "timestamp": 1603531489
    },
    {
        "content": "<p>The only \"problem\" with UnsafeCell is that multiple &amp;UnsafeCell&lt;T&gt; can alias each other even though they actually allow write access (they can also alias &amp;T which doesn't allow write access)<br>\nBut nothing in rust allows aliasing a &amp;mut T, not even UnsafeCell</p>",
        "id": 214426230,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1603544068
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>since an &amp;UnsafeCell&lt;T&gt;'s memory can overlap with a &amp;mut T </p>\n</blockquote>\n<p>no it cannot, <code>&amp;mut T</code> is still unique. that's what I said above. but it can overlap with a <code>*mut T</code>.</p>\n</blockquote>\n<p>What I mean is that from a &amp;UnsafeCell&lt;T&gt;, you can get a &amp;mut T, which overlaps the same memory reach. This is a feature of RefCell and of Mutex. I didn't say it wasn't UB to get multiple &amp;mut Ts from a &amp;UnsafeCell&lt;T&gt;, but the mere fact you can seems, at least in my opinion, to violate the aliasing rules. (So therefore, UnsafeCell is magic under SB. Under the model I use, it's <em>less</em> magic, but it's still 50% magic because of how mutable, which is used in the implementation, interacts with pointer invalidation)</p>",
        "id": 214433019,
        "sender_full_name": "Connor Horman",
        "timestamp": 1603552857
    },
    {
        "content": "<blockquote>\n<p>from a &amp;UnsafeCell&lt;T&gt;, you can get a &amp;mut T</p>\n</blockquote>\n<p>Ah yes. that is indeed one of the key goals of <code>UnsafeCell</code>.<br>\nAnd <code>UnsafeCell</code> is definitely magic, that's why it needs to be a lang item.</p>",
        "id": 214435030,
        "sender_full_name": "RalfJ",
        "timestamp": 1603555554
    }
]