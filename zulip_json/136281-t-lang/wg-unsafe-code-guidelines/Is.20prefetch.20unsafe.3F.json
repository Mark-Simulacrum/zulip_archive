[
    {
        "content": "<p>_mm_prefetch is marked unsafe; Is there any principle this follows? It's the only unsafe thing in my crate, and easy to audit, but was wondering if I should turn this into a 1 line pull request to mark it as safe? Thanks<br>\nref: pub unsafe fn _mm_prefetch(p: *const i8, strategy: i32) { ....}<br>\n<a href=\"https://github.com/rust-lang/stdarch/blob/1a577bd78e84e357e29c5336ff8beb432873046b/crates/core_arch/src/x86/sse.rs\">https://github.com/rust-lang/stdarch/blob/1a577bd78e84e357e29c5336ff8beb432873046b/crates/core_arch/src/x86/sse.rs</a></p>",
        "id": 199030831,
        "sender_full_name": "Jim Hurd",
        "timestamp": 1590676756
    },
    {
        "content": "<p>all intrinsics are unsafe as a blanket default</p>",
        "id": 199031374,
        "sender_full_name": "Lokathor",
        "timestamp": 1590676972
    },
    {
        "content": "<p><code>_mm_prefetch</code> is only safe when <code>sse</code> is supported by the processor.</p>",
        "id": 199031378,
        "sender_full_name": "bjorn3",
        "timestamp": 1590676974
    },
    {
        "content": "<p>Note that Rust i686 and x86_64 targets have SSE and SSE2 enabled by default and it's already broken all over if the processor doesn't support that and you run the program.</p>\n<p>If you want a pre-SSE target you'll need the i586 targets</p>",
        "id": 199031814,
        "sender_full_name": "Lokathor",
        "timestamp": 1590677161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Is.20prefetch.20unsafe.3F/near/199031374\">said</a>:</p>\n<blockquote>\n<p>all intrinsics are unsafe as a blanket default</p>\n</blockquote>\n<p>That makes total sense, but do you think it makes sense to special case unmark this one? It can double the speed of some code, but any unsafe code in a crate is a red flag to some (with good reason, no one wants to audit other peoples code)</p>",
        "id": 199032365,
        "sender_full_name": "Jim Hurd",
        "timestamp": 1590677377
    },
    {
        "content": "<p>Technically it's only a hint so the program shouldn't be any different with or without it as long as sse is present. I'd put it behind a cfg attribute:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[cfg(target_feature=</span><span class=\"s\">&quot;sse&quot;</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">unsafe</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// prefetch however</span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 199033994,
        "sender_full_name": "Lokathor",
        "timestamp": 1590678008
    },
    {
        "content": "<p>shouldn't be <em>operationally</em> different i mean, of course the goal is a <em>speed</em> difference.</p>",
        "id": 199034118,
        "sender_full_name": "Lokathor",
        "timestamp": 1590678056
    },
    {
        "content": "<p>Agreed, its already marked #[target_feature(enable = \"sse\")] in stdarch/sse.rs. And marked this way in my crate, but I wondered if for the sake of other authors if the \"unsafe\" should be removed from <a href=\"http://sse.rs\">sse.rs</a>; that would remove the angst about including unsafe code since my understanding is that prefetch is safe.</p>",
        "id": 199034924,
        "sender_full_name": "Jim Hurd",
        "timestamp": 1590678358
    },
    {
        "content": "<p>I submitted it. We'll see if the maintainers are amused or annoyed.</p>",
        "id": 199041455,
        "sender_full_name": "Jim Hurd",
        "timestamp": 1590681221
    },
    {
        "content": "<p>target_feature(enable) is actually quite different. That tells the compiler to <em>assume</em> the presence of the feature within the marked function, thus allowing inlining and so on.</p>",
        "id": 199042891,
        "sender_full_name": "Lokathor",
        "timestamp": 1590681895
    },
    {
        "content": "<p>In general, none of the unsafe designations anywhere in <code>core::arch::*</code> can be removed always, and rust doesn't (yet) support things being unsafe or not based on enabled features. (that will roughly be how target_feature1.1 works though, once it's completed)</p>",
        "id": 199043092,
        "sender_full_name": "Lokathor",
        "timestamp": 1590681993
    },
    {
        "content": "<p>Ah, Yes I see now \"error[E0658]: <code>#[target_feature(..)]</code> can only be applied to <code>unsafe</code> functions<br>\n    --&gt; crates\\core_arch\\src\\x86\\sse.rs:1836:1\"  I guess this is a much bigger patch.  I will wait for target_feature1.1</p>",
        "id": 199044516,
        "sender_full_name": "Jim Hurd",
        "timestamp": 1590682714
    },
    {
        "content": "<p>If you have the spare time could you file an issue about this on the <code>safe_arch</code> crate? <a href=\"https://github.com/Lokathor/safe_arch/issues\">https://github.com/Lokathor/safe_arch/issues</a> I initially skipped pre-fetch wrapping when implementing SSE support since I was kinda unclear on how people would even want to call the function. If you could show the example of where you are doing a pre-fetch that would be helpful.</p>",
        "id": 199049236,
        "sender_full_name": "Lokathor",
        "timestamp": 1590685010
    }
]