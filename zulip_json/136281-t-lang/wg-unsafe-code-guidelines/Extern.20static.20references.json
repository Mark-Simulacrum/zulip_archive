[
    {
        "content": "<p>Hi, I was wondering if it is UB to have references that are 0 in external statics:</p>\n<div class=\"codehilite\"><pre><span></span>extern {\n    static V: &amp;&#39;static u8;\n}\n\nmod internal {\n    #[no_mangle]\n    static V: usize = 0;\n}\n\nfn main() {\n    println!(&quot;{:p}&quot;, unsafe { V });\n}\n</pre></div>\n\n\n<p>That program wil print <code>0x00</code>. Now, you might say I had to use <code>unsafe</code> to access the external static, but having invalid references is UB by definition, and I didn't use any unsafe to do that.</p>",
        "id": 180364303,
        "sender_full_name": "DutchGhost",
        "timestamp": 1573394051
    },
    {
        "content": "<p>Oh, related issue seems <a href=\"https://github.com/rust-lang/rust/issues/28179\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/28179\">https://github.com/rust-lang/rust/issues/28179</a> . Should I add this example there?</p>",
        "id": 180364638,
        "sender_full_name": "DutchGhost",
        "timestamp": 1573394681
    },
    {
        "content": "<p>no_mangle can often sort of \"sneak in\" unsafe, since you're essentially overriding an arbitrary symbol</p>",
        "id": 180365272,
        "sender_full_name": "simulacrum",
        "timestamp": 1573395950
    },
    {
        "content": "<p>but in general, yes, I'd say that program has UB.</p>",
        "id": 180365319,
        "sender_full_name": "simulacrum",
        "timestamp": 1573395980
    },
    {
        "content": "<p>that's instant UB, and you don't need <code>#[no_mangle]</code> for it</p>",
        "id": 180365949,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397027
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 180366007,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397058
    },
    {
        "content": "<p>If <code>V</code> is ever null, that program has UB</p>",
        "id": 180366013,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397072
    },
    {
        "content": "<blockquote>\n<p>that's instant UB, and you don't need <code>#[no_mangle]</code> for it</p>\n</blockquote>\n<p>Is it insta UB <em>without</em> accessing the static?</p>",
        "id": 180366020,
        "sender_full_name": "DutchGhost",
        "timestamp": 1573397098
    },
    {
        "content": "<p>Yes, just constructing the static with an invalid value is UB</p>",
        "id": 180366034,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397116
    },
    {
        "content": "<p>The access happens somewhere on program initialization, when a value is assigned to the static \"somehow\"</p>",
        "id": 180366041,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397133
    },
    {
        "content": "<blockquote>\n<p>Yes, just constructing the static with an invalid value is UB</p>\n</blockquote>\n<p>Is that defined anywere in the reference? Or some place otherwise?</p>",
        "id": 180366094,
        "sender_full_name": "DutchGhost",
        "timestamp": 1573397163
    },
    {
        "content": "<p>In the unsafe code guidelines, that's the validity invariant</p>",
        "id": 180366099,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397177
    },
    {
        "content": "<p>See here: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/glossary.md#validity-and-safety-invariant\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/glossary.md#validity-and-safety-invariant\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/glossary.md#validity-and-safety-invariant</a></p>",
        "id": 180366118,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397208
    },
    {
        "content": "<p>It's the same kind of UB as a <code>let x: bool = transmute(42);</code></p>",
        "id": 180366138,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397229
    },
    {
        "content": "<p>even if you never access the <code>x</code> afterwards, just creating the <code>bool</code> with the invalid value is already UB</p>",
        "id": 180366145,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397247
    },
    {
        "content": "<blockquote>\n<p>even if you never access the <code>x</code> afterwards, just creating the <code>bool</code> with the invalid value is already UB</p>\n</blockquote>\n<p>But the difference is that for the transmute, you need to write <code>unsafe</code></p>",
        "id": 180366157,
        "sender_full_name": "DutchGhost",
        "timestamp": 1573397272
    },
    {
        "content": "<p>sadly, safe Rust != Rust without <code>unsafe</code></p>",
        "id": 180366213,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397301
    },
    {
        "content": "<p><code>extern \"C\" { ... }</code> declarations are unsound, there are a couple of issues regarding that</p>",
        "id": 180366221,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397318
    },
    {
        "content": "<p>That's a bummer.<br>\nCould <code>extern static</code> of type <code>T</code> be considered as <code>MaybeUninit&lt;T&gt;</code> until an <code>unsafe</code> access takes place, which under the hoods <code>assume_init</code>s it, hence the <code>unsafe</code>ty ?</p>",
        "id": 180366229,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1573397332
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/198\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/198\">https://github.com/rust-lang/unsafe-code-guidelines/issues/198</a></p>",
        "id": 180366242,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397350
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">mod</span> <span class=\"nn\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 180366257,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397381
    },
    {
        "content": "<p>There I am providing two incompatible declarations for the <code>foo</code> symbol</p>",
        "id": 180366331,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397451
    },
    {
        "content": "<p>and <code>b::foo</code> is currently optimized to have the same return type \"properties\" as <code>a::foo</code></p>",
        "id": 180366370,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397500
    },
    {
        "content": "<p>You can cause the same issue with statics, e.g.,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">mod</span> <span class=\"nn\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">mod</span> <span class=\"nn\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;C&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>where if you access <code>b::V</code> it will be nonnull, dereferenceable, etc. because it gets optimized as a <code>&amp;T</code></p>",
        "id": 180366446,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397604
    },
    {
        "content": "<p>even if you never access <code>a::V</code>, accessing <code>b::V</code> with the pointer being null will trigger a miscompilation</p>",
        "id": 180366493,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397643
    },
    {
        "content": "<p>We can see <code>extern fn</code> to be a <code>static</code> of the <code>fn(...)</code> / <code>code&lt;ABI&gt;</code> DST type.<br>\nThen under my suggestion, these static should all be considered <code>MaybeUninit</code> and only <code>assume_init</code>ed on the <code>unsafe</code> access.<br>\nIn other words, there are no validity invariants applicable on <code>extern</code> declarations until they get used</p>",
        "id": 180366521,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1573397699
    },
    {
        "content": "<blockquote>\n<p>Could extern static of type T be considered as MaybeUninit&lt;T&gt; until an unsafe access takes place, which under the hoods assume_inits it, hence the unsafety ?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> maybe? I think the simplest thing would be to require <code>unsafe extern \"C\" { ... }</code> when writing declarations.</p>",
        "id": 180366533,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397706
    },
    {
        "content": "<p>Yes, that's a far simpler solution. Could that be done in a future edition ?</p>",
        "id": 180366549,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1573397746
    },
    {
        "content": "<p>It's a syntactic change, so I guess so. It's more of a question of whether the churn will be worth it, and whether there are better ways to fix this issue.</p>",
        "id": 180366603,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397797
    },
    {
        "content": "<p>It's not just extern <code>static</code>s, but extern fn declarations have the same problem.</p>",
        "id": 180366622,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397841
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/84\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/84\">https://github.com/rust-lang/unsafe-code-guidelines/issues/84</a></p>",
        "id": 180366681,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573397909
    },
    {
        "content": "<p><code>extern fn</code>s could be seen as a very special cased <code>extern static</code>, in the same fashion as a <code>fn</code> \"pointer\" could be seen as a <code>&amp;'static code&lt;Abi&gt;</code> reference</p>",
        "id": 180367109,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1573398587
    },
    {
        "content": "<p>I've posted and linked this thread here: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/198#issuecomment-552203032\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/198#issuecomment-552203032\">https://github.com/rust-lang/unsafe-code-guidelines/issues/198#issuecomment-552203032</a></p>",
        "id": 180367113,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573398599
    },
    {
        "content": "<p>There are maybe two things that are UB: one is the violation of the validity invariant by writing null to  <code>FOO</code>. The other one is that for that to happen probably an incompatible definition of <code>FOO</code> exists somewhere.</p>",
        "id": 180367165,
        "sender_full_name": "gnzlbg",
        "timestamp": 1573398650
    },
    {
        "content": "<blockquote>\n<p>that's instant UB, and you don't need <code>#[no_mangle]</code> for it</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>Using <code>V</code> there will cause a linker error, so thats what the</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">mod</span> <span class=\"nn\">internal</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>was for. And that also forces the external static <code>V</code> to be 0 as far as I know.</p>",
        "id": 180372523,
        "sender_full_name": "DutchGhost",
        "timestamp": 1573408025
    }
]