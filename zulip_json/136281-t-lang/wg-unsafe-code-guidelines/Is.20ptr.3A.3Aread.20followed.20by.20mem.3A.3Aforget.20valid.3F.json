[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">(</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">into_inner</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">mem</span>::<span class=\"n\">forget</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)).</span><span class=\"n\">into_inner</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Miri complains (Miri evaluation error: trying to reborrow for Unique, but parent tag &lt;1843&gt; does not have an appropriate item in the borrow stack) about this, it's used by <a href=\"https://github.com/abonander/buf_redux/blob/bc614ae2a87442f3edc750108d8f1488037d3a39/src/lib.rs#L631\" target=\"_blank\" title=\"https://github.com/abonander/buf_redux/blob/bc614ae2a87442f3edc750108d8f1488037d3a39/src/lib.rs#L631\">https://github.com/abonander/buf_redux/blob/bc614ae2a87442f3edc750108d8f1488037d3a39/src/lib.rs#L631</a> to retrieve certain struct fields without calling destructor. Should it work this way?</p>",
        "id": 172112530,
        "sender_full_name": "Konrad Borowski",
        "timestamp": 1564565768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198039\">@Konrad Borowski</span> ah, I have seen this pattern before. the issue is that <code>mem::forget</code> is just like any other function call, so when you pass <code>self</code> to <code>mem::forget</code>  you are basically saying \"this is the only pointer to that memory, make other pointers invalid\". At least that's the case with current Stacked Borrows, which is still experimental.</p>",
        "id": 172114679,
        "sender_full_name": "RalfJ",
        "timestamp": 1564567979
    },
    {
        "content": "<p>The recommended way to avoid that is to entirely avoid <code>mem::forget</code> and use <code>ManuallyDrop</code> instead</p>",
        "id": 172114702,
        "sender_full_name": "RalfJ",
        "timestamp": 1564568000
    },
    {
        "content": "<p>so for your code, something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ManuallyDrop</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">ptr</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">a</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172114779,
        "sender_full_name": "RalfJ",
        "timestamp": 1564568054
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/rust/pull/62610\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62610\">https://github.com/rust-lang/rust/pull/62610</a></p>",
        "id": 172114803,
        "sender_full_name": "RalfJ",
        "timestamp": 1564568082
    }
]