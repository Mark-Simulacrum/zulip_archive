[
    {
        "content": "<p>What are the implication for transmuting a <code>Copy</code> type to a <code>[u8; N]</code> where <code>N</code> matches it size, storing that array in memory, loading it back and transmuting it back into the correct type? The value isn't modified.</p>",
        "id": 215538417,
        "sender_full_name": "Zoxc",
        "timestamp": 1604461835
    },
    {
        "content": "<p>If the array is MaybeUninit instead of u8, I believe this is just fine. There are likely additional questions though if you have references in the type, at least because you'd need to track the lifetime somehow.</p>",
        "id": 215539232,
        "sender_full_name": "simulacrum",
        "timestamp": 1604463026
    },
    {
        "content": "<p>Why <code>MaybeUninit</code>? The array has no invalid states?</p>\n<p>I do also want to consider the case with references. I think that should be fine with some C models, but I wonder if stacked borrows have any complications. The type is transmuted back into the same type (with same lifetimes).</p>",
        "id": 215539702,
        "sender_full_name": "Zoxc",
        "timestamp": 1604463534
    },
    {
        "content": "<p>miri doesn't complain unless I inspect the bytes, and that's because it's unsupported</p>",
        "id": 215540191,
        "sender_full_name": "Zoxc",
        "timestamp": 1604464155
    },
    {
        "content": "<p>You need [MaybeUninit&lt;u8&gt;; N] if the type has any padding between the fields (that padding would be uninitialized. Otherwise, [u8; N] is fine.</p>",
        "id": 215564370,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1604486273
    },
    {
        "content": "<p>Oh, references... going from <code>[u8; N]</code> to a &amp;'a T (or something holding one) sounds like its probably UB under stacked borrows.</p>",
        "id": 215564480,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1604486346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/storing.20type.20as.20a.20byte.20array/near/215564480\">said</a>:</p>\n<blockquote>\n<p>Oh, references... going from <code>[u8; N]</code> to a &amp;'a T (or something holding one) sounds like its probably UB under stacked borrows.</p>\n</blockquote>\n<p>Why UB? AFAIU it should be the same as <code>&amp;*(some_usize as *const T)</code>, which can be UB or not depending on T and where you got that <code>usize</code> from</p>",
        "id": 215565330,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1604486914
    },
    {
        "content": "<p>Stacked borrows have explicit semantics for casting to a raw pointer though.</p>\n<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> Can you think of any examples where Miri would detect UB with casting references? At least this passes:  <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c5be9ff8d1ec64a73d3b9b4d83770bb7\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c5be9ff8d1ec64a73d3b9b4d83770bb7</a></p>",
        "id": 215566209,
        "sender_full_name": "Zoxc",
        "timestamp": 1604487533
    },
    {
        "content": "<p>I think a more precise question is how does the operations semantics of moving or copying locals or memory differ between the array type and a reference. Also would this difference apply to a function generic over <code>T: Copy</code>?</p>",
        "id": 215566950,
        "sender_full_name": "Zoxc",
        "timestamp": 1604488040
    },
    {
        "content": "<p>Hm, that's true, it probably is equivalent to going through <code>usize</code>.</p>",
        "id": 215577623,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1604495492
    },
    {
        "content": "<p>From what I've been able to derive from various discussions, that's explicitly allowed. Rust doesn't care what type the value was declared with, you can access it as whatever (provided you don't violate provenance).</p>",
        "id": 215705573,
        "sender_full_name": "Connor Horman",
        "timestamp": 1604580091
    },
    {
        "content": "<p>It seems unlikely that provenance will survive this process, so this should be equivalent to casting via integral types or something similarly provenance-erasing</p>",
        "id": 215764930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604605768
    },
    {
        "content": "<p>Ah yeah, pointers are always <em>fun</em>.</p>",
        "id": 215798505,
        "sender_full_name": "Connor Horman",
        "timestamp": 1604628137
    },
    {
        "content": "<p>transmuting a reference to <code>[MaybeUninit&lt;u8&gt;; PTR_SIZE]</code> and back <em>should</em> work... unlike a cast-to-usize provenance does not get erased</p>",
        "id": 215952863,
        "sender_full_name": "RalfJ",
        "timestamp": 1604752170
    },
    {
        "content": "<p>(but Miri has some limitations when you do that and then copy the bytes 1-by-1... it can currently only preserve provenance when you copy the entire pointer at once)</p>",
        "id": 215952910,
        "sender_full_name": "RalfJ",
        "timestamp": 1604752213
    }
]