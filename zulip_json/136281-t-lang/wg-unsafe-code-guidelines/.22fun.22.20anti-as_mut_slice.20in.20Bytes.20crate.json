[
    {
        "content": "<p>it explicitly creates an &amp;mut [u8] for all the <em>uninitialized</em> memory in a vec: <a href=\"https://docs.rs/bytes/0.4.12/src/bytes/buf/buf_mut.rs.html#1150\" target=\"_blank\" title=\"https://docs.rs/bytes/0.4.12/src/bytes/buf/buf_mut.rs.html#1150\">https://docs.rs/bytes/0.4.12/src/bytes/buf/buf_mut.rs.html#1150</a></p>",
        "id": 167542060,
        "sender_full_name": "Gankra",
        "timestamp": 1559876566
    },
    {
        "content": "<p>I think the final expression was meant to be <code>&amp;mut slice::from_raw_parts_mut(ptr, cap)[..len]</code> ? But even that would be wrong, there's no reason at all to over create a first slice and then try to reslice down to the real size.</p>",
        "id": 167547772,
        "sender_full_name": "Lokathor",
        "timestamp": 1559884112
    },
    {
        "content": "<p>yeah that should be a <code>*mut [u8]</code>... if only those were not so painful to use^^</p>",
        "id": 167557860,
        "sender_full_name": "RalfJ",
        "timestamp": 1559896088
    },
    {
        "content": "<p>this also reminds me <a href=\"https://github.com/rust-lang/rust/pull/60667\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60667\">https://github.com/rust-lang/rust/pull/60667</a> is still open?</p>",
        "id": 167557885,
        "sender_full_name": "RalfJ",
        "timestamp": 1559896115
    },
    {
        "content": "<p>Lokathor: no, the API is explicitly intended to create a slice for the uninitialized memory, so you can initialize it</p>",
        "id": 167573033,
        "sender_full_name": "Gankra",
        "timestamp": 1559911530
    },
    {
        "content": "<p>Well that's just psychotic</p>",
        "id": 167593349,
        "sender_full_name": "Lokathor",
        "timestamp": 1559926514
    },
    {
        "content": "<p>Hi everyone, sorry if this is not the right place. This is my very first time I'm posting here. Things discussed here are new to me but I'm curious and want to know more. I've been trying to educate myself with UB (what is it exactly?) reading John Regehr's and Ralf's blogs etc. I have to confess that I've got an uneasy feeling that many unanswered questions have deep roots in LLVM itself. I'd like to ask you to what extent we can prove safety? (I mean mathematical, rigorous proofs). I'm aware of miri and Rustbelt, though these're not accessible to me and I don't know the minimum requirements, but what I'm looking at is ideas and intuitions behind validity and safety proofs (if there're some!). Is there any place I can get most of the idea from? (blogs etc.)</p>",
        "id": 167734692,
        "sender_full_name": "Ehsan M. Kermani",
        "timestamp": 1560145040
    },
    {
        "content": "<p>I should add that the current attempt in <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html\" target=\"_blank\" title=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html\">https://rust-lang.github.io/unsafe-code-guidelines/glossary.html</a> and previously <a href=\"https://github.com/nikomatsakis/rust-memory-model\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust-memory-model\">https://github.com/nikomatsakis/rust-memory-model</a> are good places to get some idea about the basics, I don't know of any material that equip me with reasoning about what's valid and what's not. Since there're many unanswered questions and the whole point of wg is try to answer them, I'd like to help to be a test audience proof-reading and trying to clarify things from scratch. Would that be any useful or I'm in a wrong place?</p>",
        "id": 167735096,
        "sender_full_name": "Ehsan M. Kermani",
        "timestamp": 1560145587
    },
    {
        "content": "<p>(you posted these in the wrong topic but that's okay, Zulip's UI can be confusing in the beginning. try to make sure that you have selected a matching topic in the left-hand panel, or click \"new topic\" if you want to start a new conversation like you did here)</p>",
        "id": 167745628,
        "sender_full_name": "RalfJ",
        "timestamp": 1560159419
    },
    {
        "content": "<blockquote>\n<p>I should add that the current attempt in <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html\" target=\"_blank\" title=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html\">https://rust-lang.github.io/unsafe-code-guidelines/glossary.html</a> and previously <a href=\"https://github.com/nikomatsakis/rust-memory-model\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust-memory-model\">https://github.com/nikomatsakis/rust-memory-model</a> are good places to get some idea about the basics, I don't know of any material that equip me with reasoning about what's valid and what's not. Since there're many unanswered questions and the whole point of wg is try to answer them, I'd like to help to be a test audience proof-reading and trying to clarify things from scratch. Would that be any useful or I'm in a wrong place?</p>\n</blockquote>\n<p>yes, test audiences are always useful! This reminds of a <a href=\"https://users.rust-lang.org/t/is-there-a-checklist-for-review-of-unsafe-code/28414\" target=\"_blank\" title=\"https://users.rust-lang.org/t/is-there-a-checklist-for-review-of-unsafe-code/28414\">recent discussions in the forums</a>.</p>",
        "id": 167745648,
        "sender_full_name": "RalfJ",
        "timestamp": 1560159466
    },
    {
        "content": "<p>that said, currently the goal of the WG is not to enable rigorous proofs; at least my thinking is that we are very far from making those accessible enough that they become widely doable for unsafe code authors. The idea is more to come up with guidelines/checklists, examples, that kind of stuff.</p>",
        "id": 167745726,
        "sender_full_name": "RalfJ",
        "timestamp": 1560159545
    }
]