[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any opinion on <a href=\"https://github.com/rust-lang/rust/pull/56161\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56161\">https://github.com/rust-lang/rust/pull/56161</a> ?</p>",
        "id": 148801090,
        "sender_full_name": "RalfJ",
        "timestamp": 1543511236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> on which aspect of it exactly? on the final changes that wound up being needed?</p>",
        "id": 148895909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543618873
    },
    {
        "content": "<p>yeah, basically. does that seem like a reasonable change to request (and make the original code UB, long-term)? can we land this change?</p>",
        "id": 150675062,
        "sender_full_name": "RalfJ",
        "timestamp": 1543652120
    },
    {
        "content": "<p>I am still curious if there's any footing in being able to declare an as/coercion chain in a single expr as \"atomic\" in the sense that only the start and end matter (which would fix this, yes?)</p>",
        "id": 150855869,
        "sender_full_name": "Gankra",
        "timestamp": 1543938182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> I feel like my personal favorite solution is \"the point at which the reference becomes an object\"</p>",
        "id": 150861656,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543942925
    },
    {
        "content": "<p>while it's still a value, it can be invalid</p>",
        "id": 150861670,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543942940
    },
    {
        "content": "<p>i have no idea what object means in this context</p>",
        "id": 150861676,
        "sender_full_name": "Gankra",
        "timestamp": 1543942951
    },
    {
        "content": "<p>like, when it gets bound to a name</p>",
        "id": 150861684,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543942971
    },
    {
        "content": "<p>(although it should also apply in return context)</p>",
        "id": 150861696,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543942984
    },
    {
        "content": "<p>i.e., <code>let x = &amp;&lt;invalid-lvalue&gt;;</code> &lt;- not valid, <code>let x = &amp;&lt;invalid-lvalue&gt; as &amp;T as &amp;T as *const T;</code> &lt;- fine</p>",
        "id": 150861807,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543943080
    },
    {
        "content": "<p>Did y'all ever go forward with being able to pass things by-value where references are expected?</p>",
        "id": 150861910,
        "sender_full_name": "Gankra",
        "timestamp": 1543943195
    },
    {
        "content": "<p>(maybe causes problems with this kind of logic)</p>",
        "id": 150861915,
        "sender_full_name": "Gankra",
        "timestamp": 1543943204
    },
    {
        "content": "<p>Likely too risky wrt breaking code expecting some address stability, but passing by value would also \"create an object\" in this terminology</p>",
        "id": 150862034,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543943336
    },
    {
        "content": "<p>er, phrased like that it's the wrong way around for what you're saying, but the other way around (when the source code passes a reference) is fine too</p>",
        "id": 150862154,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543943445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  why are the <code>as *[const,mut] T</code> required ?</p>",
        "id": 151098808,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544174872
    },
    {
        "content": "<p>Shouldn't <code>NonZero(reference)</code> just work ?</p>",
        "id": 151099054,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544175201
    },
    {
        "content": "<blockquote>\n<p>i.e., <code>let x = &amp;&lt;invalid-lvalue&gt;;</code> &lt;- not valid, <code>let x = &amp;&lt;invalid-lvalue&gt; as &amp;T as &amp;T as *const T;</code> &lt;- fine</p>\n</blockquote>\n<p>IMO that's way too non-compositional. We should be able to describe behavior as a sequence of steps in a simple language (on the level of MIR, but not quite MIR). Seen from that lense, what you are saying sounds a bit like <a href=\"https://github.com/rust-lang/rfcs/pull/2582\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2582\">my Raw Reference RFC</a>, but with more cases being translated to \"the raw ref operation\"?<br>\nCrucially, I think we want a syntactic condition here, not something semantic/operational like \"bound to a name\".</p>",
        "id": 151101357,
        "sender_full_name": "RalfJ",
        "timestamp": 1544177961
    },
    {
        "content": "<blockquote>\n<p>Shouldn't <code>NonZero(reference)</code> just work ?</p>\n</blockquote>\n<p>hm. maybe? the code had casts in it from the start</p>",
        "id": 151101368,
        "sender_full_name": "RalfJ",
        "timestamp": 1544177982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> yeah <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b978e10ce4a5dbe90c31982c05075d74\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=b978e10ce4a5dbe90c31982c05075d74\">it works</a> but it also desugars to first creating a raw ref and then casting that to <code>*const</code> :(</p>",
        "id": 151101484,
        "sender_full_name": "RalfJ",
        "timestamp": 1544178078
    },
    {
        "content": "<p>so what's the point of the <code>as _</code> ?</p>",
        "id": 151101720,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544178304
    },
    {
        "content": "<p>maybe the code was trying to properly cast to a <code>*const T</code> but failed</p>",
        "id": 151101736,
        "sender_full_name": "gnzlbg",
        "timestamp": 1544178340
    },
    {
        "content": "<blockquote>\n<p>so what's the point of the <code>as _</code> ?</p>\n</blockquote>\n<p>beats me</p>",
        "id": 151101995,
        "sender_full_name": "RalfJ",
        "timestamp": 1544178645
    }
]