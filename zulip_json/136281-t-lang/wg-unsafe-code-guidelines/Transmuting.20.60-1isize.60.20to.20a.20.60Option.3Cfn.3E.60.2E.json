[
    {
        "content": "<p>SQLite's API requires passing a <code>-1isize</code> as a <code>Option&lt;unsafe extern \"C\" fn(a: *mut c_void)&gt;</code>: <a href=\"https://www.sqlite.org/c3ref/c_static.html\" title=\"https://www.sqlite.org/c3ref/c_static.html\">https://www.sqlite.org/c3ref/c_static.html</a> in some cases. Transmuting between these works, but it gives me the heebie jeebies and I suspect it's unsound...</p>\n<p>I don't think rust code ever needs to call this, so I suspect we might be able to override bindgen and just use a repr(transparent) wrapper (I guess in theory a platform exists where isize and function pointers have a different ABI, but... realistically...)</p>",
        "id": 192988358,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1586137754
    },
    {
        "content": "<p>You shouldn't need to transmute; you should be able to convert to usize and then to a fn type like any other pointer.</p>",
        "id": 192991869,
        "sender_full_name": "comex",
        "timestamp": 1586143114
    },
    {
        "content": "<p>But see <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/72\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/72\">https://github.com/rust-lang/unsafe-code-guidelines/issues/72</a></p>",
        "id": 192991874,
        "sender_full_name": "comex",
        "timestamp": 1586143136
    },
    {
        "content": "<p>\"With the proposed wording for a future RFC, the only value you can't assign to a function pointer is 0, all other values are ok.\" ... but this hasn't actually been accepted yet</p>",
        "id": 192991888,
        "sender_full_name": "comex",
        "timestamp": 1586143160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198590\">@comex</span> hm? I'm not sure I follow what you mean by \"and then to a fn type like any other pointer\" -- I can't do <code>some_usize as unsafe extern \"C\" fn(a: *mut c_void)</code>.</p>",
        "id": 192997494,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1586151840
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198590\">@comex</span> <code>fn</code> ptrs in Rust are safe to call and thus not safe to cast from. there are no raw fn ptrs.</p>",
        "id": 193001920,
        "sender_full_name": "RalfJ",
        "timestamp": 1586156892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> ah, you basically want <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/197\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/197\">https://github.com/rust-lang/unsafe-code-guidelines/pull/197</a> I think</p>",
        "id": 193001942,
        "sender_full_name": "RalfJ",
        "timestamp": 1586156913
    },
    {
        "content": "<p>Hmm, so AFAICT it's not strictly well defined, but there are no plans to make it UB (just the opposite) so I... probably am just not going to worry about it too much, since I don't have a lot of choice wrt using this API.</p>",
        "id": 193002118,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1586157033
    },
    {
        "content": "<p>so right now it is well-defined if and only if fn ptrs have no alignment restrictions on your platform</p>",
        "id": 193002872,
        "sender_full_name": "RalfJ",
        "timestamp": 1586157559
    },
    {
        "content": "<p>see <a href=\"https://doc.rust-lang.org/stable/reference/behavior-considered-undefined.html\" title=\"https://doc.rust-lang.org/stable/reference/behavior-considered-undefined.html\">https://doc.rust-lang.org/stable/reference/behavior-considered-undefined.html</a></p>",
        "id": 193002880,
        "sender_full_name": "RalfJ",
        "timestamp": 1586157568
    },
    {
        "content": "<p>oh lol that actually doesnt even mention fn ptr alignment and just makes it well-defined</p>",
        "id": 193002908,
        "sender_full_name": "RalfJ",
        "timestamp": 1586157597
    },
    {
        "content": "<p>which I think is because all platforms we currently support do not make alignment requirements for fn ptrs</p>",
        "id": 193002962,
        "sender_full_name": "RalfJ",
        "timestamp": 1586157609
    },
    {
        "content": "<p>but we have no RFC that this cannot change in the future</p>",
        "id": 193002969,
        "sender_full_name": "RalfJ",
        "timestamp": 1586157617
    },
    {
        "content": "<p>if function pointers have an alignment restriction, the original C API doesn't work either :)</p>",
        "id": 193012384,
        "sender_full_name": "comex",
        "timestamp": 1586163236
    },
    {
        "content": "<p>or rather, is undefined behavior in C</p>",
        "id": 193012497,
        "sender_full_name": "comex",
        "timestamp": 1586163283
    },
    {
        "content": "<p>(it might still <em>work</em>)</p>",
        "id": 193012522,
        "sender_full_name": "comex",
        "timestamp": 1586163297
    }
]