[
    {
        "content": "<p>So, I could use a quick refresher on what the current UCG consensus is regarding observation of padding bytes.</p>",
        "id": 178202740,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571152301
    },
    {
        "content": "<p>I think I remember that reading from padding bytes was UB, which makes sense as it kind of naturally falls out from the idea that reading from uninitialized memory is UB. But I'm not sure how such a contract can be still considered tenable when it means that e.g. memcpy-ing a struct from one memory location to another is UB.</p>",
        "id": 178202924,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571152430
    },
    {
        "content": "<p>(unless memcpy has special superpowers that allow it to ignore the fact that observing padding bytes is UB, in which case I could be interested in figuring out how I can get similar superpowers in code other than the implementation of memcpy)</p>",
        "id": 178203050,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571152502
    },
    {
        "content": "<p>Which means that moving Rust objects around is UB, since our moves are basically memcpy, again unless the compiler has special superpower to move objects with padding the safe way.</p>",
        "id": 178203140,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571152564
    },
    {
        "content": "<p>It seems to me that memcpy would somehow need to implement the elusive <code>freeze</code> semantics that can magically turn uninitialized bytes into non-deterministic valid bytes.</p>",
        "id": 178203522,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571152810
    },
    {
        "content": "<blockquote>\n<p>So, I could use a quick refresher on what the current UCG consensus is regarding observation of padding bytes.</p>\n</blockquote>\n<p>in my view, it is that there's no such thing as \"padding bytes\" in the memory of the rust abstract machine. so \"observing padding bytes\" is kind of an ill-typed question.<br>\nsee <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md#the-role-of-the-value-representation-in-the-operational-semantics\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md#the-role-of-the-value-representation-in-the-operational-semantics\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md#the-role-of-the-value-representation-in-the-operational-semantics</a> for all the glory details.</p>",
        "id": 178309147,
        "sender_full_name": "RalfJ",
        "timestamp": 1571246166
    },
    {
        "content": "<p>but if we ignore some details, reading from padding is the same as reading uninitialized memory</p>",
        "id": 178309172,
        "sender_full_name": "RalfJ",
        "timestamp": 1571246198
    },
    {
        "content": "<p>and that's decidedly not UB. see <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md#the-role-of-the-value-representation-in-the-operational-semantics\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md#the-role-of-the-value-representation-in-the-operational-semantics\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md#the-role-of-the-value-representation-in-the-operational-semantics</a> for the details.</p>",
        "id": 178309192,
        "sender_full_name": "RalfJ",
        "timestamp": 1571246217
    },
    {
        "content": "<p>the reason that <code>let b: bool = mem::uninitialized()</code> is UB is not that we read uninit memory. it's that we constructed a <code>bool</code> that is not valid.</p>",
        "id": 178309225,
        "sender_full_name": "RalfJ",
        "timestamp": 1571246245
    },
    {
        "content": "<p>this requires thinking of Rust memory as storing an <code>Option&lt;u8&gt;</code> for each location (tracking initializedness)</p>",
        "id": 178309244,
        "sender_full_name": "RalfJ",
        "timestamp": 1571246268
    },
    {
        "content": "<p>and then the validity invariant for <code>bool</code> says that <code>None</code> is not valid</p>",
        "id": 178309256,
        "sender_full_name": "RalfJ",
        "timestamp": 1571246279
    },
    {
        "content": "<p>however, all types (currently) rule out uninit bytes in their validity invariant. the only places where reading uninit bytes is <em>not</em> UB is <code>MaybeUninit</code>, and when the uninit byte is a padding byte of the type used for the access</p>",
        "id": 178311403,
        "sender_full_name": "RalfJ",
        "timestamp": 1571247741
    },
    {
        "content": "<p>I should have prefaced: the key mindset here is that <em>memory is untyped</em> (just a sequence of uninterpreted <code>Option&lt;u8&gt;</code> -- okay actually sth more complicated than that but good enough for now), but <em>operations are types</em> (when doing a load at type <code>T</code>, you take the sequence of raw bytes and interpret them according to the rules of type <code>T</code> -- and <em>types</em> have padding, but memory does not)</p>",
        "id": 178311495,
        "sender_full_name": "RalfJ",
        "timestamp": 1571247806
    },
    {
        "content": "<p>Then, to bring this closer to my underlying use case, how would you implement memcpy() in a UB-free way that still allows the implementation of Rust's move operation?</p>",
        "id": 178314945,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571249826
    },
    {
        "content": "<p>(Knowing that during a Rust move operation the memcpy operation may be used to copy the internal representation of a certain type T, which has uninitialized padding bytes)</p>",
        "id": 178315004,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571249868
    },
    {
        "content": "<p>I think what I'm trying to do is to implement the equivalent of the \"typed copy\" operation that you are describing in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md#the-role-of-the-value-representation-in-the-operational-semantics\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md#the-role-of-the-value-representation-in-the-operational-semantics\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/value-domain.md#the-role-of-the-value-representation-in-the-operational-semantics</a> .</p>",
        "id": 178315682,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571250331
    },
    {
        "content": "<p>I don't really want to preserve the value of the padding bytes. It just happens that I am not the Rust compiler, and therefore have no knowledge of where they are and cannot cautiously implement a custom memcpy operation that refrains from reading from them.</p>",
        "id": 178315793,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571250396
    },
    {
        "content": "<p>(even though I know what the type T which I am in the process of copying is, I don't know its layout)</p>",
        "id": 178315866,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571250449
    },
    {
        "content": "<blockquote>\n<p>Then, to bring this closer to my underlying use case, how would you implement memcpy() in a UB-free way that still allows the implementation of Rust's move operation?</p>\n</blockquote>\n<p>you mean implement inside Rust? By copying <code>MaybeUninit&lt;u8&gt;</code>, bytewise</p>",
        "id": 178316157,
        "sender_full_name": "RalfJ",
        "timestamp": 1571250648
    },
    {
        "content": "<p>but that's not the same as a Rust move</p>",
        "id": 178316163,
        "sender_full_name": "RalfJ",
        "timestamp": 1571250658
    },
    {
        "content": "<p>Rust's move is typed, <code>memcpy</code> is untyped</p>",
        "id": 178316181,
        "sender_full_name": "RalfJ",
        "timestamp": 1571250665
    },
    {
        "content": "<p>it is <em>correct</em> to use <code>memcpy</code> to implement Rust's move, but not \"complete\" -- as in, you make some undefined programs defined by doing that replacement.</p>",
        "id": 178316225,
        "sender_full_name": "RalfJ",
        "timestamp": 1571250695
    },
    {
        "content": "<p>Rust's move can be done in unsafe code using <code>dest.write(src.read())</code>, where <code>dest: *mut T</code> and <code>src: *const T</code> and <code>T</code> is the type at which you want to do the (\"typed\") copy</p>",
        "id": 178316330,
        "sender_full_name": "RalfJ",
        "timestamp": 1571250761
    },
    {
        "content": "<p>Mmmm... the thing is, this is inside of Abomonation, and I need to send the bytes to a Write implementation. Which may do all kind of strange and wonderful and IO-ish things with them. And then at the end someone somewhere will get an &amp;[u8] and deserialize it into an &amp;T.</p>",
        "id": 178316456,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571250845
    },
    {
        "content": "<p>So I cannot use MaybeUninit&lt;u8&gt;, nor copy from *const T to *mut T, because the Write interface expects u8s...</p>",
        "id": 178316477,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571250862
    },
    {
        "content": "<p>I guess I'm stuck with UB here, until / if ever Rust gets a freeze() operation.</p>",
        "id": 178316491,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571250878
    },
    {
        "content": "<p>Then I can transmute &amp;T into &amp;[MaybeUninit&lt;u8&gt;], freeze the bytes to get &amp;[u8], and send that to whatever Write implementation I was given.</p>",
        "id": 178316738,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571251057
    },
    {
        "content": "<p>Posted a summary on the abomonation bugtracker, feel free to cross-check and correct it : <a href=\"https://github.com/TimelyDataflow/abomonation/issues/32\" target=\"_blank\" title=\"https://github.com/TimelyDataflow/abomonation/issues/32\">https://github.com/TimelyDataflow/abomonation/issues/32</a></p>",
        "id": 178319991,
        "sender_full_name": "Hadrien Grasland",
        "timestamp": 1571253428
    },
    {
        "content": "<p>yeah, using <code>[u8]</code> to represent \"any kind of data\" is (currently) wrong</p>",
        "id": 178321214,
        "sender_full_name": "RalfJ",
        "timestamp": 1571254439
    },
    {
        "content": "<p>you're not alone in making that mistake though; libstd's <code>Read</code> trait also did it^^</p>",
        "id": 178321261,
        "sender_full_name": "RalfJ",
        "timestamp": 1571254451
    },
    {
        "content": "<p>IMO this is actually strong motivation to <em>not</em> make that immediate UB, but <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/71\">https://github.com/rust-lang/unsafe-code-guidelines/issues/71</a> kind of stalled (mostly needs a write-up)</p>",
        "id": 178321302,
        "sender_full_name": "RalfJ",
        "timestamp": 1571254511
    }
]