[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> </p>\n<blockquote>\n<p>Given <code>x: *const [T]</code>, how would I write the equivalent of <code>&amp;raw mut (*x)[i]</code>? </p>\n</blockquote>\n<p>How would you do that with <code>raw</code> ? AFAICT, the array itself <code>[T]</code> can be at an unaligned memory location (that is the <code>len</code> and the <code>ptr</code> of the <code>[T]</code> are not properly aligned), and <code>(*x)[i]</code> creates a <code>&amp;self</code>, which would be invalid right ?</p>",
        "id": 166391584,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558639619
    },
    {
        "content": "<p>why would that create a <code>&amp;self</code>?</p>",
        "id": 166393609,
        "sender_full_name": "RalfJ",
        "timestamp": 1558640944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> because the <code>&lt;[T] as IndexMut&gt;::index_mut(&amp;mut self)</code> method is called, or isn't it?</p>",
        "id": 166393819,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558641091
    },
    {
        "content": "<p>I read <code>&amp;raw mut (*x)[i]</code> as <code>&amp;raw mut &lt;[T] as IndexMut&gt;::index_mut(*x: &amp;mut [T], i)</code></p>",
        "id": 166393981,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558641204
    },
    {
        "content": "<p>or am I reading the parenthesis wrong, and that should be <code>&lt;[T] as IndexMut&gt;::index_mut(*x: &amp;raw mut [T], i)</code> ?</p>",
        "id": 166394092,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558641289
    },
    {
        "content": "<p>or do we have an <code>IndexRawMut::index_raw_mut(x: &amp;raw mut self, i: usize)</code> API ?</p>",
        "id": 166394124,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558641318
    },
    {
        "content": "<p>as in, <code>(&amp;raw mut (*x))[i]</code> expands to <code>&lt;[T] as IndexRawMut&gt;::index_raw_mut(&amp;raw mut (*x), i): &amp;raw mut T</code> ?</p>",
        "id": 166394247,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558641416
    },
    {
        "content": "<p>I thought this was a <em>hypothetical</em> <code>IndexRawMut</code> overload of the indexing operator for raw pointer slices</p>",
        "id": 166403471,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558648268
    },
    {
        "content": "<p><code>IndexMut</code> does not get called when indexing a raw slice with a usize</p>",
        "id": 166431198,
        "sender_full_name": "RalfJ",
        "timestamp": 1558684720
    },
    {
        "content": "<p>(and we dont support indexing them with anything else)</p>",
        "id": 166431203,
        "sender_full_name": "RalfJ",
        "timestamp": 1558684726
    },
    {
        "content": "<p>So what gets called ?</p>",
        "id": 166468197,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558715297
    },
    {
        "content": "<p>The only thing I can think of is the _hypothetical_ <code>IndexRawMut</code> trait that <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> mentions.</p>",
        "id": 166468267,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558715379
    },
    {
        "content": "<p>IIUC Ralf is saying nothing gets called, it's a compiler built-in</p>",
        "id": 166468313,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558715404
    },
    {
        "content": "<p>That sounds plausible</p>",
        "id": 166468349,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558715409
    },
    {
        "content": "<p>So it wouldn't be a <code>#[lang_item]</code> + unstable trait in libcore ? (implementation-wise)</p>",
        "id": 166468442,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558715491
    },
    {
        "content": "<p>otherwise it would need to be implemented fairly different than <code>[]</code> overloads for all other types</p>",
        "id": 166468531,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558715564
    },
    {
        "content": "<p>This is no different to how <code>impl Add for i32</code> ends up boiling down to just <code>return self + rhs</code>. Injecting built-in operations that precedes the general trait based overloading isn't super difficult.</p>",
        "id": 166468675,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558715662
    },
    {
        "content": "<p>indeed. MIR has a primitive operator to index a slice (works for raw slices and reference slices), just like it has a primitive operator for addition.</p>",
        "id": 166468991,
        "sender_full_name": "RalfJ",
        "timestamp": 1558715937
    }
]