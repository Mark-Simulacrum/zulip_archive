[
    {
        "content": "<p>If, <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20use-after-free/near/219813804\">as Ralf just mentioned in another thread</a>, it's not currently UB to read after moving something, does that mean I could workaround <a href=\"https://github.com/rust-lang/rust/issues/79914\">https://github.com/rust-lang/rust/issues/79914</a> by forgetting something, but then continuing to use it at its original address?</p>",
        "id": 219815180,
        "sender_full_name": "scottmcm",
        "timestamp": 1607937037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I don't think so. All I said is that the read itself is not UB, but if the destructor actually does something destructive, there can still be UB caused by use-after-move.</p>",
        "id": 219819373,
        "sender_full_name": "RalfJ",
        "timestamp": 1607939654
    },
    {
        "content": "<p>but then the reason is a use-after-free (if it was a <code>Box</code>), it's not the move itself that caused the UB</p>",
        "id": 219819403,
        "sender_full_name": "RalfJ",
        "timestamp": 1607939679
    },
    {
        "content": "<p>so in a sense use-after-move is <em>library UB</em> as you cannot tell what the type might be doing in its destructor. it's not currently language UB though.</p>",
        "id": 219819434,
        "sender_full_name": "RalfJ",
        "timestamp": 1607939702
    },
    {
        "content": "<p>Sorry, I'm not following here.  If I'm forgetting it, where's the destructor coming in?  Or can the \"move\" into <code>mem::forget</code> cause a problem with using <code>drop_in_place</code> on the original locations?  Or when re-moving them from the same location?</p>",
        "id": 219893402,
        "sender_full_name": "scottmcm",
        "timestamp": 1607975407
    },
    {
        "content": "<p>it could be <em>any</em> operation that invalidates the old fields -- like moving a <code>Vec</code> and then pushing into it, if that <code>realloc</code>s then the stale moved-from copy will have a dangling pointer.</p>",
        "id": 219917289,
        "sender_full_name": "cuviper",
        "timestamp": 1607988487
    },
    {
        "content": "<p>Right, but I'm forgetting after the move, so there are <em>no</em> operations done on it after the move.</p>",
        "id": 219922055,
        "sender_full_name": "scottmcm",
        "timestamp": 1607991650
    },
    {
        "content": "<p>ah, maybe <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> missed the \"forgetting\" detail just as I did</p>",
        "id": 219922845,
        "sender_full_name": "cuviper",
        "timestamp": 1607992163
    },
    {
        "content": "<p>it surprises me that Rust doesn't try to reuse moved-from storage, but maybe there's not much to be gained</p>",
        "id": 219922979,
        "sender_full_name": "cuviper",
        "timestamp": 1607992239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Use-after-move/near/219922979\">said</a>:</p>\n<blockquote>\n<p>it surprises me that Rust doesn't try to reuse moved-from storage, but maybe there's not much to be gained</p>\n</blockquote>\n<p>on the MIR level, that would basically mean adding <code>StorageEnd</code> right after the move</p>",
        "id": 219960135,
        "sender_full_name": "RalfJ",
        "timestamp": 1608028326
    },
    {
        "content": "<p>if we do that then indeed \"use-after-move\" could be UB for accessing deallocated memory</p>",
        "id": 219960157,
        "sender_full_name": "RalfJ",
        "timestamp": 1608028339
    },
    {
        "content": "<p>but currently, MIR lowering doesn't do that -- intentionally or not, I do not know</p>",
        "id": 219960177,
        "sender_full_name": "RalfJ",
        "timestamp": 1608028354
    },
    {
        "content": "<p>also, what about moving from <code>x.1</code> but not from the other field? then we cannot deallocate that part of the storage...</p>",
        "id": 219960205,
        "sender_full_name": "RalfJ",
        "timestamp": 1608028377
    },
    {
        "content": "<p>Honestly I expected that there'd be a StorageEnd after the move</p>",
        "id": 220018311,
        "sender_full_name": "scottmcm",
        "timestamp": 1608055539
    },
    {
        "content": "<p>I would expect to be able to mir-optimize <code>_2 = move _1; _3 = move _2; _4 = move _3</code> to <code>_4 = move _1</code> because move should imply the intermediate variable has no other uses</p>",
        "id": 220018471,
        "sender_full_name": "scottmcm",
        "timestamp": 1608055606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Use-after-move/near/220018471\">said</a>:</p>\n<blockquote>\n<p>I would expect to be able to mir-optimize <code>_2 = move _1; _3 = move _2; _4 = move _3</code> to <code>_4 = move _1</code> because move should imply the intermediate variable has no other uses</p>\n</blockquote>\n<p>there's two ways to achieve this:</p>\n<ul>\n<li>make sure there are StorageEnd</li>\n<li>make <code>move</code> a destructive read that leaves the src memory uninitialized</li>\n</ul>\n<p>The latter is problematic because it makes \"move\" reads a mutating operation (which needs to be considered carefully for optimizations, and which will break some type-based sanity checks we have in miri that currently ensure that reads are read-only); the former is problematic because it is unclear how to scale this to moves out of places with projections.</p>",
        "id": 220092554,
        "sender_full_name": "RalfJ",
        "timestamp": 1608110284
    },
    {
        "content": "<p>Is this something we <em>can</em> change though, at the language level?</p>",
        "id": 220146830,
        "sender_full_name": "cuviper",
        "timestamp": 1608140094
    },
    {
        "content": "<p>that is, if it's not already declared as UB to access storage after a move, then some code could be using this</p>",
        "id": 220146925,
        "sender_full_name": "cuviper",
        "timestamp": 1608140140
    },
    {
        "content": "<p>or maybe this is super undefined, in the sense that we haven't decided whether it's UB or not</p>",
        "id": 220147158,
        "sender_full_name": "cuviper",
        "timestamp": 1608140259
    },
    {
        "content": "<p>Feels like the \"we haven't been clear about it, so we can probably make it UB, unless there turns out to be a bunch of people relying on it for a good reason\"</p>",
        "id": 220147612,
        "sender_full_name": "scottmcm",
        "timestamp": 1608140478
    },
    {
        "content": "<p>then we could start with that declaration of UB, whether or not we actually add the <code>StorageEnd</code>to let it be reused</p>",
        "id": 220152879,
        "sender_full_name": "cuviper",
        "timestamp": 1608142889
    },
    {
        "content": "<p>(issues for lang vs. compiler respectively)</p>",
        "id": 220152915,
        "sender_full_name": "cuviper",
        "timestamp": 1608142912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Use-after-move/near/220152879\">said</a>:</p>\n<blockquote>\n<p>then we could start with that declaration of UB, whether or not we actually add the <code>StorageEnd</code>to let it be reused</p>\n</blockquote>\n<p>well we have to start by figuring out what exactly we mean by \"use-after-move is UB\". As always, \"use\" is a rather ambiguous term.</p>",
        "id": 220411479,
        "sender_full_name": "RalfJ",
        "timestamp": 1608316513
    },
    {
        "content": "<p>in a way that's precise enough that I could put it in Miri ;)</p>",
        "id": 220411510,
        "sender_full_name": "RalfJ",
        "timestamp": 1608316536
    },
    {
        "content": "<p>things are fairly clear when it is <code>move(_1)</code> (deallocate the memory backing that local), but what about <code>move(_1.field.field)</code>?</p>",
        "id": 220411536,
        "sender_full_name": "RalfJ",
        "timestamp": 1608316552
    },
    {
        "content": "<p>my intuition is that a \"use\" is reading or writing that storage. simply pointing to it is fine, since pointers don't have to have a valid target anyway</p>",
        "id": 220412327,
        "sender_full_name": "cuviper",
        "timestamp": 1608316976
    },
    {
        "content": "<p>and with partial moves, it would only be UB to read/write the moved part</p>",
        "id": 220412422,
        "sender_full_name": "cuviper",
        "timestamp": 1608317036
    },
    {
        "content": "<p>I trust you to make a formal definition from \"what <span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span>  thinks\" <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 220412547,
        "sender_full_name": "cuviper",
        "timestamp": 1608317083
    },
    {
        "content": "<p>well, the only way I know to make that formal is to add a new state for storage: now it can not just be uninitialized, but also \"invalid\", where reads are UB (or do they yield \"uninit\"?) and writes are UB.</p>",
        "id": 220464869,
        "sender_full_name": "RalfJ",
        "timestamp": 1608375361
    },
    {
        "content": "<p>as for pointers... is a pointer to such storage considered \"dereferencable\"?</p>",
        "id": 220464910,
        "sender_full_name": "RalfJ",
        "timestamp": 1608375381
    },
    {
        "content": "<p>this is more complicated than past proposals where the memory was just made uninitialized (in which case writes would still work)</p>",
        "id": 220464924,
        "sender_full_name": "RalfJ",
        "timestamp": 1608375438
    },
    {
        "content": "<p>I do not entirely understand what the benefit is of <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span>'s proposal over \"move deinitializes memory\".</p>",
        "id": 220464931,
        "sender_full_name": "RalfJ",
        "timestamp": 1608375478
    },
    {
        "content": "<blockquote>\n<p>as for pointers... is a pointer to such storage considered \"dereferencable\"?</p>\n</blockquote>\n<p>I would assume not. dereferencable, to me, implies a certain number of bytes are \"reachable\" from a pointer, and those bytes do not exist. It could be considered that a move doesn't merely logically uninitialize the source, but logically deallocates the storage (thus we have the same question for a different scenario, would you expect a pointer into a dropped box to be dereferencable). </p>\n<p>I think reads should be promoted to UB and not uninit, because that would allow an implementation where the location is actually destroyed IE. inaccessible, in a sparse address space. Note that, of course, this would allow an implementation that merely yields uninit, for those that have contiguous address spaces.</p>",
        "id": 220470773,
        "sender_full_name": "Connor Horman",
        "timestamp": 1608386073
    },
    {
        "content": "<blockquote>\n<p>It could be considered that a move doesn't merely logically uninitialize the source, but logically deallocates the storage </p>\n</blockquote>\n<p>But that means allocations can have \"gaps\" in them, so that is still a quite fundamental change to the memory model</p>",
        "id": 220471279,
        "sender_full_name": "RalfJ",
        "timestamp": 1608386855
    },
    {
        "content": "<p>If a move from a local causes the storage for that local to be deallocated, but a move from a field of a local doesn't cause that field to be deallocated, SROA (scalar replacement of array) would not be allowed as it could cause a move out of a field to turn into a move out of a local, thereby introducing a deallocation that didn't previously exist.</p>",
        "id": 220472743,
        "sender_full_name": "bjorn3",
        "timestamp": 1608389249
    },
    {
        "content": "<blockquote>\n<p>But that means allocations can have \"gaps\" in them, so that is still a quite fundamental change to the memory model</p>\n</blockquote>\n<p>I should add, I only mean for this to applied at the top level, moving a \"complete object\" as it were. Partial moving could still just render the storage uninit.</p>",
        "id": 220473049,
        "sender_full_name": "Connor Horman",
        "timestamp": 1608389745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Use-after-move/near/220473049\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>But that means allocations can have \"gaps\" in them, so that is still a quite fundamental change to the memory model</p>\n</blockquote>\n<p>I should add, I only mean for this to applied at the top level, moving a \"complete object\" as it were. Partial moving could still just render the storage uninit.</p>\n</blockquote>\n<p>As <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> pointed out, that doesn't work in the presence of SROA</p>",
        "id": 220473096,
        "sender_full_name": "RalfJ",
        "timestamp": 1608389779
    }
]