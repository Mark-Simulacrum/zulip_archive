[
    {
        "content": "<p>We are having a good discussion over in <a href=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/mmap.20concerns\" title=\"#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/mmap.20concerns\">https://rust-lang.zulipchat.com/#narrow/stream/187831-t-compiler.2Fwg-self-profile/topic/mmap.20concerns</a>, but I figured this WG might have something to add.</p>\n<p>TL;DR, I think that <em>any</em> usage of file-backed-mmap in Rust leads to UB. This is because we get a <code>*mut T</code> from mmap. If we convert it to a <code>&amp;T</code> or <code>&amp;mut T</code>, the rules of references could be broken by any arbitrary process writing to the backing file. This would be reflected in the Rust process, effectively causing an immutable reference to mutate or a mutable reference to mutate by \"not us\".</p>\n<p>I'd love to know that my concerns are unwarranted!</p>",
        "id": 161854458,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553690174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> did point out that we might be able to get a <code>&amp;[Cell&lt;...&gt;]</code> (or equivalent) from mmap, which might sidestep all concerns.</p>",
        "id": 161856682,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553691883
    },
    {
        "content": "<p>Well, all the mutable-xor-shared concerns. There is also the question of how concurrent modification <em>by other processes</em> interacts with the memory consistency model, in particular whether volatile or atomic accesses are needed.</p>",
        "id": 161857072,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1553692166
    },
    {
        "content": "<p>These concerns are possibly better considered from the standpoint of shared memory and we at Standard thought a lot about it. The most trivial example would be two distinct virtual memory pages backed by the same physical memory page.</p>",
        "id": 161859514,
        "sender_full_name": "nagisa",
        "timestamp": 1553693963
    },
    {
        "content": "<p>basically the conclusion we arrived at is that the mmaped shared memory shall only be accessed via raw pointers.</p>",
        "id": 161859560,
        "sender_full_name": "nagisa",
        "timestamp": 1553693995
    },
    {
        "content": "<p>For now, anyway.</p>",
        "id": 161859580,
        "sender_full_name": "nagisa",
        "timestamp": 1553694002
    },
    {
        "content": "<p>We also considered using <code>&amp;[{Unsafe,}Cell&lt;_&gt;]</code> and friends, but we found that to be too inconvenient for other reasons (we want to be able to do atomic operations on the memory...)</p>",
        "id": 161859669,
        "sender_full_name": "nagisa",
        "timestamp": 1553694060
    },
    {
        "content": "<p>The problem with mmap is that two consecutive reads can return different values in a sequential program. Because of this, if the reads are not volatile, AFAICT the behavior is undefined. Whether you are reading from mmap'ed memory that's modified by different processes, whether the same physical memory page is mapped to two different virtual memory pages within the same process, or whether you are reading from a register that's modified by a sensor, does not really matter.</p>",
        "id": 161870189,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553700187
    },
    {
        "content": "<p>Somebody made the argument that multiple processes can be considered multiple threads of execution, and therefore atomic read / stores are enough, but that's IMO a long shot. Multiple processes != multiple threads, and unless our memory model ends up being multi-process (which is something that AFAICT no practical PL memory model does), atomic reads / writes guarantees don't apply here. Synchronization across threads does not matter if the program is sequential, and a \"sufficiently smart\" compiler could prove that the program is single threaded and turn all atomic read / writes into normal read / writes.</p>",
        "id": 161870573,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553700416
    },
    {
        "content": "<p>Isn't that basically a similar problem to what the embedded working group approaches with libs like volatile cell? <a href=\"https://github.com/japaric/vcell\" target=\"_blank\" title=\"https://github.com/japaric/vcell\">https://github.com/japaric/vcell</a> ?</p>",
        "id": 161870953,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1553700613
    },
    {
        "content": "<p>Yep, that's pretty much it.</p>",
        "id": 161875387,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553703366
    },
    {
        "content": "<p>There is also: <a href=\"https://docs.rs/voladdress/0.2.3/voladdress/\" target=\"_blank\" title=\"https://docs.rs/voladdress/0.2.3/voladdress/\">https://docs.rs/voladdress/0.2.3/voladdress/</a> which lets you handle slices as well</p>",
        "id": 161875605,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553703519
    },
    {
        "content": "<p>note how weird the API of <code>VolBlock</code> there has to be</p>",
        "id": 161875740,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553703609
    },
    {
        "content": "<p>basically when indexing into an element of a volatile array to get a reference, you need a volatile reference that performs volatile load / stores on access</p>",
        "id": 161875787,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553703660
    },
    {
        "content": "<blockquote>\n<p>Isn't that basically a similar problem to what the embedded working group approaches with libs like volatile cell? <a href=\"https://github.com/japaric/vcell\" target=\"_blank\" title=\"https://github.com/japaric/vcell\">https://github.com/japaric/vcell</a> ?</p>\n</blockquote>\n<p>I'm glad I'm not the only one who had this thought (and that it appears to be valid)</p>",
        "id": 161884542,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553709579
    },
    {
        "content": "<blockquote>\n<p>two consecutive reads can return different values</p>\n</blockquote>\n<p>One argument made in the other thread was that in this case, data is never read via mmap. It's write-once-read-never. Does that change the situation?</p>",
        "id": 161884675,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553709669
    },
    {
        "content": "<p>Well the problem is that your program behaves differently depending on how its optimized</p>",
        "id": 161930970,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553759751
    },
    {
        "content": "<p>If one does not care about that, then one does not really care about UB I guess</p>",
        "id": 161931036,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553759807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> there's been a long discussion about mmap on a forum... last year or so. let me find that.</p>",
        "id": 161951725,
        "sender_full_name": "RalfJ",
        "timestamp": 1553779856
    },
    {
        "content": "<p>here you go: <a href=\"https://users.rust-lang.org/t/how-unsafe-is-mmap/19635\" target=\"_blank\" title=\"https://users.rust-lang.org/t/how-unsafe-is-mmap/19635\">https://users.rust-lang.org/t/how-unsafe-is-mmap/19635</a></p>",
        "id": 161951846,
        "sender_full_name": "RalfJ",
        "timestamp": 1553779920
    },
    {
        "content": "<p>given that no H/W IO stuff is involved, I think that atomics and not volatile are the right tool here</p>",
        "id": 161951952,
        "sender_full_name": "RalfJ",
        "timestamp": 1553779981
    },
    {
        "content": "<p>notice that \"two consecutive reads can return different values\" is an argument for atomic accesses just as much as it is one for volatile accesses</p>",
        "id": 161951988,
        "sender_full_name": "RalfJ",
        "timestamp": 1553780000
    },
    {
        "content": "<p>mmap can share memory with threads that run in a different address space (aka process), but I dont see why that would make a fundamental difference compared to threads running in the same address space -- the relevant part is that the physical address spaces backing the virtual pages overlap.</p>",
        "id": 161952111,
        "sender_full_name": "RalfJ",
        "timestamp": 1553780053
    },
    {
        "content": "<p>also <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> one terminology nit:</p>\n<blockquote>\n<p>any usage of file-backed-mmap in Rust leads to UB</p>\n</blockquote>\n<p>it is UB <em>only if the file gets mutated</em>. you make it sound like just the act of mmap'ing and taking a reference leads to UB, that is not true. (sorry if I misunderstood you.)</p>",
        "id": 161952214,
        "sender_full_name": "RalfJ",
        "timestamp": 1553780128
    },
    {
        "content": "<blockquote>\n<p>It's write-once-read-never. Does that change the situation?</p>\n</blockquote>\n<p>no, it just makes it harder to come up with examples.^^ \"other parties can observe when the write happens\" also means we have to use atomics/volatile.</p>",
        "id": 161952292,
        "sender_full_name": "RalfJ",
        "timestamp": 1553780180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I would like to hear your argument about why atomics are not enough for when HW I/O is involved (or where you suggesting that they are?), you can think of HW I/O as some process with its own threads, on a separate CPU, writing to some memory location that your process is able to read.</p>",
        "id": 161965768,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553788300
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 161965898,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553788389
    },
    {
        "content": "<p>AFAIK the difference between volatile and atomics is that volatile guarantees that the accesses will happen exactly in the order specified in the program, while atomics guarantees that your program will behave \"as if\" these accessed happened and \"as if\" they happened in that order - the difference between \"exactly\" and \"as if\" meaning that the compiler can eliminate consecutive read/writes for atomics (or dead ones) but not for volatile</p>",
        "id": 161975290,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553794718
    },
    {
        "content": "<p>for memory mapped I/O whether the difference between \"exactly\" and \"as if\" matters is subtle - consider:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y_val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">y_val</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"cm\">/* dead code ? */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 161975492,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553794858
    },
    {
        "content": "<p>with atomics, the two reads to <code>y</code> could be coalesced, and the <code>if</code> optimized away</p>",
        "id": 161975565,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553794913
    },
    {
        "content": "<p>but while <code>x</code> and <code>y</code> point to two different virtual addresses,  they can refer to the same physical memory even within the same process  - if the reads are volatile, the <code>if</code> won't be removed, and its block will be executed when this is the case</p>",
        "id": 161975672,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553794968
    },
    {
        "content": "<p>for this code to be correct using atomics, the <code>y.read()</code>s cannot be coalesced into one, that at least rules out using relaxed ordering</p>",
        "id": 161976646,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553795634
    },
    {
        "content": "<p>but yeah, I think I see now that atomics (with the appropriate ordering) should be sufficient</p>",
        "id": 161978282,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553796671
    },
    {
        "content": "<blockquote>\n<p>it is UB <em>only if the file gets mutated</em>. you make it sound like just the act of mmap'ing and taking a reference leads to UB, that is not true. (sorry if I misunderstood you.)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> you understood me correctly. I was under the impression that Rust was taking the position of \"if any code flow path could cause UB, it is always UB\".</p>",
        "id": 161983652,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553800467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> </p>\n<blockquote>\n<p>I would like to hear your argument about why atomics are not enough for when HW I/O is involved (or where you suggesting that they are?), you can think of HW I/O as some process with its own threads, on a separate CPU, writing to some memory location that your process is able to read.</p>\n</blockquote>\n<p>Atomics do not guarantee that every read/write hits the memory bus verbatim. For example, the compiler can optimize <code>x.store(5, some_ordering); let val = x.load(some_other_ordering)</code> assuming that <code>val == 5</code>. Atomics still assume that the observer is another thread running in the same memory model.  In fact if the compiler can prove that <code>x</code> is never shared with another thread, it can even downgrade the atomic accesses to non-atomic accesses.<br>\n<code>volatile</code> OTOH is for the case where the observer basically literally sits on your memory bus and can observe every single read and write. It seems intuitively like that is a stronger observer and hence it should be legal to replace (relaxed!) atomic accesses with <code>volatile</code>, but that is not how memory models are defined. It might be possible to define them like that, but I know of no research looking into this. (and for non-relaxed atomic accesses this cannot work because of the synchronization they induce.)</p>",
        "id": 162029923,
        "sender_full_name": "RalfJ",
        "timestamp": 1553851268
    },
    {
        "content": "<p>(This is basically what you said about \"exactly\" vs \"as if\", but IMO this answers the question about why atomics are not good enough for memory-mapped IO)</p>",
        "id": 162030063,
        "sender_full_name": "RalfJ",
        "timestamp": 1553851402
    },
    {
        "content": "<p>The question is then for mmapped files for interprocess communication (or virtual memory shenanigans), which atomic orderings are necessary ?</p>",
        "id": 162030143,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553851456
    },
    {
        "content": "<blockquote>\n<p>for this code to be correct using atomics, the <code>y.read()</code>s cannot be coalesced into one, that at least rules out using relaxed ordering</p>\n</blockquote>\n<p>I am afraid the area of virtual memory effects is entirely unspecified, so I dont think any standard literally says anything about your program. Anything we can say here is wild speculation.<br>\nAny formal model I am aware of would allow the compiler to assume that objects at distinct virtual addresses are independent of each other.</p>",
        "id": 162030210,
        "sender_full_name": "RalfJ",
        "timestamp": 1553851538
    },
    {
        "content": "<p>in the same way that the compiler can assume that another process won't mutate memory that you are using behind your back ?</p>",
        "id": 162030301,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553851603
    },
    {
        "content": "<p>I suppose that is comparable, yes</p>",
        "id": 162030311,
        "sender_full_name": "RalfJ",
        "timestamp": 1553851620
    },
    {
        "content": "<p>if you start messing with <code>/dev/mem</code>, you asked for it. basically. ;)</p>",
        "id": 162030329,
        "sender_full_name": "RalfJ",
        "timestamp": 1553851632
    },
    {
        "content": "<p>unless you use volatile</p>",
        "id": 162030333,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553851643
    },
    {
        "content": "<blockquote>\n<p>The question is then for mmapped files for interprocess communication (or virtual memory shenanigans), which atomic orderings are necessary ?</p>\n</blockquote>\n<p>Ignore the fact that this is interprocess. The orderings are the same as within one process. I mean, it's two threads sharing <em>some</em> of their address space that are synchronizing here.</p>",
        "id": 162030337,
        "sender_full_name": "RalfJ",
        "timestamp": 1553851648
    },
    {
        "content": "<blockquote>\n<p>unless you use volatile</p>\n</blockquote>\n<p>yes. not that any formal model would cover this, but volatile should be sufficiently restricted to achieve this.</p>",
        "id": 162030345,
        "sender_full_name": "RalfJ",
        "timestamp": 1553851656
    },
    {
        "content": "<p>i was hoping that there was a way to do this with a strong memory ordering</p>",
        "id": 162030408,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553851686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> so <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> can't do better than using volatile loads / stores, unless, they are ensuring synchronization in some way ?</p>",
        "id": 162030582,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553851851
    },
    {
        "content": "<p>well I think I'd use atomic accesses, I think</p>",
        "id": 162030684,
        "sender_full_name": "RalfJ",
        "timestamp": 1553851946
    },
    {
        "content": "<p>or do you mean if the same file gets mapped twice?</p>",
        "id": 162030789,
        "sender_full_name": "RalfJ",
        "timestamp": 1553852074
    },
    {
        "content": "<p>I think at that point I am just out, all I can do is speculate. We are way off in uncharted territory, formally speaking,  and I do not know enough about LLVM to tell if it would exploit pointer comparisons assuming the virtual memory mapping is injective.</p>",
        "id": 162030822,
        "sender_full_name": "RalfJ",
        "timestamp": 1553852129
    },
    {
        "content": "<p>i mean mapping a file once, but another process (or thread can also map it), and then two processes (or threads) modify it concurrently</p>",
        "id": 162030882,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553852171
    },
    {
        "content": "<p>also I'm afraid I'll have to leave now, got a lot of stuff to do. I'll hopefully be back online in the evening.</p>",
        "id": 162030885,
        "sender_full_name": "RalfJ",
        "timestamp": 1553852187
    }
]