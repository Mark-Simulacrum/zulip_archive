[
    {
        "content": "<p>Lets say I have a struct on the stack. I get a pointer to it, and a pointer to its field. I then use <code>ptr::offset_from</code> to compute the difference between them after casting both to bytes (yes, this is essentially an <code>offset_of</code>)</p>\n<p>Is this always sound? Almost all the safety requirements in <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset_from\">https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.offset_from</a> are easy to prove, the tricky ones are:</p>\n<ul>\n<li>The distance between the pointers, in bytes, cannot overflow an isize.</li>\n<li>The distance being in bounds cannot rely on “wrapping around” the address space.</li>\n</ul>\n<p>I don't know if this is guaranteed for this case. In practice it is obviously always true for values on the stack (well, perhaps not during CTFE? ... Not sure). Additionally, I believe the compiler relies on this when it emits llvm gepi for struct field access (although maybe it won't do that in some cases or something, IDK).</p>\n<p>That said, I couldn't find anything that actually guaranteed this, so I turn to y'all.</p>",
        "id": 228695562,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614818465
    },
    {
        "content": "<p>Concretely, something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Note: `SomeType` is not a reference or a pointer,</span>\n<span class=\"c1\">// and doesn't impl Deref. (We aren't talking about</span>\n<span class=\"c1\">// those cases).</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">some_object</span>: <span class=\"nc\">SomeType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">whatever</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">some_object</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">field_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">some_object</span><span class=\"p\">.</span><span class=\"n\">field</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">field_ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">).</span><span class=\"n\">offset_from</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Lets ignore that I can use integer arithmetic here, it's not relevant to the question (also it doesn't work in const, whereas ptr::offset_from can be used in const with <code>#![feature(const_offset_from)]</code> (and a few others))</p>",
        "id": 228696173,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614818883
    },
    {
        "content": "<p>Hmm, looking around I found: <a href=\"https://github.com/Gilnaa/memoffset/blob/master/src/offset_of.rs#L56\">https://github.com/Gilnaa/memoffset/blob/master/src/offset_of.rs#L56</a>. This is unsound (even with addr_of) if wrapping is possible there. (in what's likely a purely theoretical way)</p>\n<p>Git blame blames <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> for that line, which is encouraging to me for this being fine</p>",
        "id": 228717568,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614834000
    },
    {
        "content": "<p>Doesn't this macro just inherit the same safety requirements as <code>offset_from</code> itself?</p>",
        "id": 228719176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614835098
    },
    {
        "content": "<p>you have to kinda go up a few levels to see how it's used, sorry</p>",
        "id": 228719501,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614835375
    },
    {
        "content": "<p>just on its own, yes, but in context it's relying on base and field not being able to wrap for soundness. note that <code>offset_of!</code> is a safe macro</p>",
        "id": 228719557,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614835428
    },
    {
        "content": "<p>from the naming I assume these are <code>&amp;x</code> and <code>&amp;x.field</code> for some struct <code>x</code>. AFAIK memory allocators don't produce or permit wrapping allocations</p>",
        "id": 228720850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614836426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Field.20access.20wrap.20around.20possible.3F.20(offset_from.20safety.20reqs)/near/228717568\">said</a>:</p>\n<blockquote>\n<p>Hmm, looking around I found: <a href=\"https://github.com/Gilnaa/memoffset/blob/master/src/offset_of.rs#L56\">https://github.com/Gilnaa/memoffset/blob/master/src/offset_of.rs#L56</a>. This is unsound (even with addr_of) if wrapping is possible there. (in what's likely a purely theoretical way)</p>\n<p>Git blame blames <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> for that line, which is encouraging to me for this being fine</p>\n</blockquote>\n<p>wrapping is impossible when the ptr is actually dereferencable for the full size -- right?</p>",
        "id": 228732492,
        "sender_full_name": "RalfJ",
        "timestamp": 1614845738
    },
    {
        "content": "<blockquote>\n<p>AFAIK memory allocators don't produce or permit wrapping allocations</p>\n</blockquote>\n<p>Indeed. And furthermore, at least with the LLVM backend, memory allocations also can never be larger than <code>isize::MAX</code>.</p>",
        "id": 228732662,
        "sender_full_name": "RalfJ",
        "timestamp": 1614845819
    },
    {
        "content": "<blockquote>\n<p>wrapping is impossible when the ptr is actually dereferencable for the full size -- right?</p>\n</blockquote>\n<p>Hm, right, yes, that makes sense. Sold!</p>",
        "id": 228732933,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614845971
    },
    {
        "content": "<p>One could actually remove some of these clauses in the offset_from docs I think</p>",
        "id": 228733714,
        "sender_full_name": "RalfJ",
        "timestamp": 1614846329
    },
    {
        "content": "<p>this</p>\n<blockquote>\n<p>Both the starting and other pointer must be either in bounds or one byte past the end of the same allocated object.</p>\n</blockquote>\n<p>implies both</p>\n<blockquote>\n<p>The distance between the pointers, in bytes, cannot overflow an isize.</p>\n</blockquote>\n<p>and </p>\n<blockquote>\n<p>The distance being in bounds cannot rely on “wrapping around” the address space.</p>\n</blockquote>",
        "id": 228733757,
        "sender_full_name": "RalfJ",
        "timestamp": 1614846358
    },
    {
        "content": "<p>hm I guess the text after the list discusses this. but it makes it sound like one couldnt rely on this, whereas in practice on kind of has to.</p>",
        "id": 228733942,
        "sender_full_name": "RalfJ",
        "timestamp": 1614846446
    },
    {
        "content": "<blockquote>\n<p>However, some 32-bit and 16-bit platforms may successfully serve a request for more than isize::MAX bytes with things like Physical Address Extension. As such, memory acquired directly from allocators or memory mapped files may be too large to handle with this function.</p>\n</blockquote>\n<p>The thing is, not just offset_from breaks for such objects. Even <code>add</code> becomes wrong for such objects; it casts <code>usize</code> to <code>isize</code> and then calls <code>offset</code> and that would be wrong if there was an overflow.</p>",
        "id": 228734085,
        "sender_full_name": "RalfJ",
        "timestamp": 1614846526
    },
    {
        "content": "<p>ah I guess <code>add</code> says that</p>\n<blockquote>\n<p>The computed offset, in bytes, cannot overflow an isize.</p>\n</blockquote>",
        "id": 228734119,
        "sender_full_name": "RalfJ",
        "timestamp": 1614846552
    },
    {
        "content": "<p>Yeah, the fact that those were listed separately from the overflow/wraparound case made me think there was some situation I was missing, which is why I added this topic. It would be nice to clarify this in those docs somehow.</p>",
        "id": 228734516,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1614846768
    },
    {
        "content": "<p>LLVM kind of assumes allocations are never bigger than isize so I am not entirely sure if what the docs say even makes sense here</p>",
        "id": 228735305,
        "sender_full_name": "RalfJ",
        "timestamp": 1614847196
    },
    {
        "content": "<p>I guess it \"works in practice\" since LLVM doesnt notice that your allocation is so big, if you are really careful with your offsets</p>",
        "id": 228735387,
        "sender_full_name": "RalfJ",
        "timestamp": 1614847218
    },
    {
        "content": "<p>With regard to <a href=\"https://github.com/Gilnaa/memoffset/blob/91114005f0a5f5f20e90203426ab97c0c241cf04/src/offset_of.rs#L52\">https://github.com/Gilnaa/memoffset/blob/91114005f0a5f5f20e90203426ab97c0c241cf04/src/offset_of.rs#L52</a>, <code>_memoffset_offset_from</code> is a <code>#[macro_export]</code> <em>safe</em> macro that wraps the <em>unsafe</em> <code>offset_from</code> without checking anything?<br>\nThat looks scary, even it's a \"private\" macro prefixed with <code>_</code>, since nothing can prevent people from abusing it:<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=69b3863fd3f61338eca35367133ab313\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=69b3863fd3f61338eca35367133ab313</a></p>",
        "id": 228735710,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614847381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"374396\">@hyd-dev</span> yeah, but Rust doesnt have private macros so there's not much we can do about this<br>\nEDIT: Or rather, it doesnt have enough hygiene such that public macros can use private macros.</p>",
        "id": 228735786,
        "sender_full_name": "RalfJ",
        "timestamp": 1614847425
    },
    {
        "content": "<p>FWIW, I think this is common for macro-using crates -- many of them have \"private\" <code>pub</code> modules full of stuff that users must never use</p>",
        "id": 228735824,
        "sender_full_name": "RalfJ",
        "timestamp": 1614847443
    },
    {
        "content": "<p>also, I dont know what you mean by \"safe macro\", there is no such thing as \"(un)safe macros\"</p>",
        "id": 228736203,
        "sender_full_name": "RalfJ",
        "timestamp": 1614847666
    },
    {
        "content": "<p>I mean maybe the macro can be made to require to be used in an <code>unsafe</code> block? (Sorry for not being clear.)</p>",
        "id": 228736306,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614847714
    },
    {
        "content": "<p>That is,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">_memoffset_offset_from</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$field</span>:<span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$base</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Compute offset, with unstable `offset_from` for const-compatibility.</span>\n<span class=\"w\">        </span><span class=\"c1\">// (Requires the pointers to not dangle, but we already need that for `raw_field!` anyway.)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"cp\">$field</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">).</span><span class=\"n\">offset_from</span><span class=\"p\">(</span><span class=\"cp\">$base</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228736392,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614847798
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=09cba7848689696923b872083ce25409\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=09cba7848689696923b872083ce25409</a></p>",
        "id": 228736575,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614847879
    },
    {
        "content": "<p>And then we'll get <code>unused_unsafe</code> warnings when the other version of the macro is used due to <code>offset_from</code> not being available</p>",
        "id": 228737262,
        "sender_full_name": "RalfJ",
        "timestamp": 1614848297
    },
    {
        "content": "<p>I'd be okay renaming the macro to include the word <code>unsafe</code>, that seems rather low-risk, but beyond that I dont think it is worth defending against people that go out of their way to break things by using private undocumented APIs</p>",
        "id": 228737330,
        "sender_full_name": "RalfJ",
        "timestamp": 1614848355
    },
    {
        "content": "<p>You can always force a macro to be unsafe with something like <code>if false { std::hint::unreachable_unchecked() }; actual_macro_code</code></p>",
        "id": 228750223,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614854652
    }
]