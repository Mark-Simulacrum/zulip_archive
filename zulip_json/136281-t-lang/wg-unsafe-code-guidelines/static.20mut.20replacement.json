[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/53639\">https://github.com/rust-lang/rust/issues/53639</a> discusses making <code>static mut</code> safer. There are various proposals for enforcing this at the language-level, but in the meantime the suggestion is that end users replace their <code>static mut</code> with <code>static</code>s containing <code>Sync</code> versions of <code>UnsafeCell</code>, which I'll call <code>RacyCell</code> for now. I wanted to check whether or not people thought that this made sense; in particular there's a handful of variations of <code>RacyCell</code> bouncing around. Does the following look like a reasonable API that could serve as a safer replacement for <code>static mut</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(transparent)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">RacyCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">UnsafeCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">RacyCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">RacyCell</span><span class=\"p\">(</span><span class=\"n\">UnsafeCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Sync</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">RacyCell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In addition one of the proposed <code>RacyCell</code> definitions offers this inherent method, which seems pretty suspect to me, and I wanted to see whether other people thought so too. I think there's a few people already using this in their own code, so we should warn them if it's just as unsafe as the <code>static mut</code> they're replacing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_mut_unchecked</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 272808996,
        "sender_full_name": "bstrie",
        "timestamp": 1645539737
    },
    {
        "content": "<p>The note in <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Stacked.20borrows.20retagging.20on.20assignments/near/272624351\">https://rust-lang.zulipchat.com/#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Stacked.20borrows.20retagging.20on.20assignments/near/272624351</a> definitely makes me worried about <code>get_mut_unchecked</code>, since it gives the \"just stop the deprecation warning\" path of calling it instead, without actually being any more correct.</p>\n<p>minor thoughts: maybe give <code>get</code> a name more evocative of a pointer?  And part of me says that <code>-&gt; NonNull&lt;T&gt;</code> would be nice, but that probably doesn't work because any sound usage would probably end up needing to call <code>as_mut_ptr</code> on it to avoid creating references.</p>\n<p>(This makes me wonder if we should have something like an <code>UnsafeDeref</code> that could allow <code>NonNull</code> in <code>ptr::addr_of_mut!</code>...)</p>",
        "id": 272851558,
        "sender_full_name": "scottmcm",
        "timestamp": 1645556739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> Are you working on opening an RFC/PR?</p>",
        "id": 273570023,
        "sender_full_name": "Ibraheem Ahmed",
        "timestamp": 1646091229
    }
]