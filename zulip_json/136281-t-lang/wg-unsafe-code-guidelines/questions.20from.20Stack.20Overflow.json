[
    {
        "content": "<p>Is it sound to transmute a MaybeUninit&lt;[T; N]&gt; to [MaybeUninit&lt;T&gt;; N]? (<a href=\"https://stackoverflow.com/q/55313460/155423\" target=\"_blank\" title=\"https://stackoverflow.com/q/55313460/155423\">https://stackoverflow.com/q/55313460/155423</a>)</p>\n<p>/cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 161526724,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553349010
    },
    {
        "content": "<p>I think it's \"yes\", but I've spent all of 5 seconds thinking about it</p>",
        "id": 161526748,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553349077
    },
    {
        "content": "<p>my rationale (as much as I have) is because it's a union</p>",
        "id": 161527246,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553349873
    },
    {
        "content": "<p>With what we guarantee about arrays, this question boils down to \"does <code>MaybeUninit&lt;T&gt;</code> have the same memory layout as <code>T</code>?\". Everyone wants that but I don't think it is technically guaranteed yet.</p>",
        "id": 161528611,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1553352301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> so my wishful \"cause it's a <code>union</code>\" holds no water? I guess I shouldn't be surprised.</p>",
        "id": 161528902,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1553352812
    },
    {
        "content": "<p>Well, MaybeUninit makes all the concerns about validity go away. But transmute also needs memory layout compatibility and that isn't specified for unions in general (only for <code>repr(C)</code> ones).</p>",
        "id": 161528955,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1553352888
    },
    {
        "content": "<p>Well, the validity of unions in general is also not settled, but the entire point of MaybeUninit is to side-step validity based pitfalls, so you'll be fine in that respect.</p>",
        "id": 161528972,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1553352936
    },
    {
        "content": "<p><code>#[repr(transparent)]</code> to the rescue?</p>",
        "id": 161538823,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1553368311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> while that is not guaranteed, this is how it is actually implemented</p>",
        "id": 161629127,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553508718
    },
    {
        "content": "<p><code>transmute</code> only works if both types have the same size - if the layout of the union were to change in such a way that this is broken, then I can't imagine a situation in which <code>transmute</code> wouldn't have to fail to compile</p>",
        "id": 161629242,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553508817
    },
    {
        "content": "<p>since the field in the union must be properly aligned, so for the layout to change, the size would need to change</p>",
        "id": 161629269,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553508841
    },
    {
        "content": "<p>The best way of resolving these kinds of questions is to put the relevant conversions in the standard library/compiler.</p>",
        "id": 161719355,
        "sender_full_name": "briansmith",
        "timestamp": 1553561031
    },
    {
        "content": "<p>These are unsafe conversions, I don't think we have a trait for this.</p>",
        "id": 161739758,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553587499
    },
    {
        "content": "<p>Wait, I'm wrong, these aren't unsafe:</p>\n<div class=\"codehilite\"><pre><span></span>impl&lt;T, N: const usize&gt; MaybeUninit&lt;[T; N]&gt; {\n    fn foo(self) -&gt; [MaybeUninit&lt;T&gt;; N];\n}\nimpl&lt;T, N: const usize&gt; [MaybeUninit&lt;T&gt;; N] {\n    fn bar(self) -&gt; MaybeUninit&lt;[T; N]&gt;;\n}\n</pre></div>\n\n\n<p>so we can probably just use <code>From</code>/<code>Into</code> for these.</p>",
        "id": 161742856,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553591045
    },
    {
        "content": "<p>yeah I think this transmute is fine. it's part of \"interaction of <code>MaybeUninit</code> and arrays/slices\" which we'll get to eventually, I hope</p>",
        "id": 161743747,
        "sender_full_name": "RalfJ",
        "timestamp": 1553591902
    },
    {
        "content": "<blockquote>\n<p>With what we guarantee about arrays, this question boils down to \"does <code>MaybeUninit&lt;T&gt;</code> have the same memory layout as <code>T</code>?\". Everyone wants that but I don't think it is technically guaranteed yet.</p>\n</blockquote>\n<p>I think while we do not guarantee it for unions the user writes, we do guarantee it for <code>MaybeUninit</code></p>",
        "id": 161743769,
        "sender_full_name": "RalfJ",
        "timestamp": 1553591943
    },
    {
        "content": "<p><code>as_ptr</code> and the other ptr/ref-getters of <code>MaybeUninit</code> basically rely on this</p>",
        "id": 161743780,
        "sender_full_name": "RalfJ",
        "timestamp": 1553591957
    },
    {
        "content": "<p>Technically the interface of those conversions could be implemented even if MaybeUninit had e.g. extra padding or larger alignment, right? They only need MaybeUninit to actually contain a T, not to contain <em>only</em> a T.</p>",
        "id": 161749284,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1553597029
    },
    {
        "content": "<p>hmm I am not sure</p>",
        "id": 161751873,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553599513
    },
    {
        "content": "<p>if <code>MaybeUnit</code> had padding, then how do you get a pointer to its field without creating a reference ?</p>",
        "id": 161751897,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553599539
    },
    {
        "content": "<p>right now all of this relies on \"pointer to union == pointer to all fields\", but that only holds if <code>MaybeUninit</code> is <code>repr(C)</code>, which it is not (and making it <code>repr(C)</code> runs into what do ZSTs do in <code>repr(C)</code>-type of issues)</p>",
        "id": 161751967,
        "sender_full_name": "gnzlbg",
        "timestamp": 1553599605
    },
    {
        "content": "<p>The implementation we have right now certainly assumes on \"pointer to union == pointer to all fields\" but that's not exposed by those interfaces (they could be implemented with unstable or rustc-specific intrinsics or knowledge, for example). None of this is intended to say that MaybeUninit should ever be layout <em>in</em>compatible, or that the implementation needs to be changes. I'm just saying, right now as an external user, you can't rules lawyer your way to the conclusion that MaybeUninit&lt;T&gt; has the same layout as T. We should fix that, of course.</p>",
        "id": 161787730,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1553623364
    }
]