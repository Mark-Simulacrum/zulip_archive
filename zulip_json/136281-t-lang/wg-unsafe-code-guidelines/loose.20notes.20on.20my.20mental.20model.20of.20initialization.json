[
    {
        "content": "<p>Was trying to work out how ManuallyDrop is supposed to actually be defined, wrote out some thoughts which might be interesting, or worth desensitizing me from, in the case that I need to write proper docs for these things: <a href=\"https://gist.github.com/Gankro/5a62f7b5a62e84b9c299f72d2ce9c33c\" target=\"_blank\" title=\"https://gist.github.com/Gankro/5a62f7b5a62e84b9c299f72d2ce9c33c\">https://gist.github.com/Gankro/5a62f7b5a62e84b9c299f72d2ce9c33c</a></p>",
        "id": 165289171,
        "sender_full_name": "Gankra",
        "timestamp": 1557436174
    },
    {
        "content": "<p>seems reasonable, although I don't understand what the special case with local variables is, and I don't think double dropping on things that don't have drop glue is bad; basically, you should be able to do anything with a deinit variable, except for do anything logical with it's fields? maybe? I don't know if it's actually useful to have a non-library concept of \"dropped\"</p>",
        "id": 165295909,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557443574
    },
    {
        "content": "<p>I needed to be careful that <code>let x: bool;</code> was not the same <code>let x: bool = unintialized()</code>, since the former is obviously fine, and the latter is insta-ub</p>",
        "id": 165296002,
        "sender_full_name": "Gankra",
        "timestamp": 1557443662
    },
    {
        "content": "<p>personally, I'm of the opinion from the top of my head that the destructor is simply a function you call</p>",
        "id": 165296005,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557443672
    },
    {
        "content": "<p>But it has the library guarantee (that the language enforces where it can) that it's not called twice without reinitialization</p>",
        "id": 165296038,
        "sender_full_name": "Gankra",
        "timestamp": 1557443715
    },
    {
        "content": "<p>right</p>",
        "id": 165296041,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557443723
    },
    {
        "content": "<p>so it's a library concept, not a language concept</p>",
        "id": 165296048,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557443731
    },
    {
        "content": "<p>like, if you wanted to define a type for which double-drops are fine, and then call <code>drop_in_place</code> on it twice, that should be fine in my un-thought-through opinion</p>",
        "id": 165296068,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557443762
    },
    {
        "content": "<p>i.e., <code>let x = 0; drop_in_place(&amp;mut x);</code> should probably be fine</p>",
        "id": 165296110,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557443780
    },
    {
        "content": "<p>Agreed</p>",
        "id": 165296115,
        "sender_full_name": "Gankra",
        "timestamp": 1557443790
    },
    {
        "content": "<p>Although it's not super clear why that is at all useful</p>",
        "id": 165296121,
        "sender_full_name": "Gankra",
        "timestamp": 1557443800
    },
    {
        "content": "<p>other than just \"less ub\"</p>",
        "id": 165296132,
        "sender_full_name": "Gankra",
        "timestamp": 1557443810
    },
    {
        "content": "<p>I mean, I think it's more like it's not useful to make it UB</p>",
        "id": 165296136,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557443815
    },
    {
        "content": "<p>if you don't have any reason to make something UB, why complexify your model to make it UB?</p>",
        "id": 165296155,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557443834
    },
    {
        "content": "<p>there's a world where the compiler could prove something on the basis that the opposite implies a double-drop</p>",
        "id": 165296229,
        "sender_full_name": "Gankra",
        "timestamp": 1557443893
    },
    {
        "content": "<p>I guess</p>",
        "id": 165296234,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557443904
    },
    {
        "content": "<p>doesn't seem _that_ useful for opts tho</p>",
        "id": 165296238,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557443917
    },
    {
        "content": "<p>no, but it wasn't obvious until I wrote it out that it's possible to make a consistent model where we don't just say it's UB</p>",
        "id": 165296305,
        "sender_full_name": "Gankra",
        "timestamp": 1557443996
    },
    {
        "content": "<p>as in, it might be if dropping created mem::uninit</p>",
        "id": 165296373,
        "sender_full_name": "Gankra",
        "timestamp": 1557444042
    },
    {
        "content": "<p>hm, I dont think we want \"deinit\" on the lang level -- is that what you have been arguing about? (it seemed more about <code>drop</code>)</p>",
        "id": 165315063,
        "sender_full_name": "RalfJ",
        "timestamp": 1557472438
    },
    {
        "content": "<blockquote>\n<p>If we have a value: T = uninit, the compiler may adversarially assume any bit patterns, which subsequently means that if T's bitwise or logical constraints are non-empty, Behaviour is Undefined.</p>\n</blockquote>\n<p>I find this double-negation (\"non-empty contraints\") to be hard to understand -- what is even formally a constraint? the complement of the invariant?</p>",
        "id": 165315175,
        "sender_full_name": "RalfJ",
        "timestamp": 1557472555
    },
    {
        "content": "<p>your \"logical constraints\" seem to be \"between\" my validity/initialization invariant and my safety invariant. However, they all seem to be ptr-related, so they basically just refer to Stacked Borrows. I've been wondering if Stacked Borrows should \"enter\" <code>ManuallyDrop</code>.</p>",
        "id": 165315256,
        "sender_full_name": "RalfJ",
        "timestamp": 1557472674
    },
    {
        "content": "<p>however, this interpretation assumes that <code>&amp;mut T</code> does not require the pointed-to memory to be a valid <code>T</code>, which some people are demanding</p>",
        "id": 165315317,
        "sender_full_name": "RalfJ",
        "timestamp": 1557472715
    },
    {
        "content": "<p>oh I was assuming it also held for &amp;mut T</p>",
        "id": 165342855,
        "sender_full_name": "Gankra",
        "timestamp": 1557500178
    },
    {
        "content": "<p>(My understanding is the Box and &amp;mut T are \"as if\" they were T for most purposes)</p>",
        "id": 165344342,
        "sender_full_name": "Gankra",
        "timestamp": 1557501269
    },
    {
        "content": "<blockquote>\n<p>like, if you wanted to define a type for which double-drops are fine, and then call drop_in_place on it twice, that should be fine in my un-thought-through opinion</p>\n</blockquote>\n<p>One consequence of saying that this is fine is that generic code cannot reason about these two different kind of types, so it has to assume that it can only drop things once.</p>",
        "id": 165516763,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557744396
    },
    {
        "content": "<p>I had a similar question, where <code>Drop::drop</code> would panic, and the panic would be caught, whether you can try to re-drop a type.</p>",
        "id": 165516777,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557744418
    },
    {
        "content": "<p>For example, when <code>Drop::drop</code> panics for an element of <code>Vec</code>, not all elements will be dropped, and their memory will be deallocated</p>",
        "id": 165516800,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557744454
    },
    {
        "content": "<p>so trying to double drop the vector after the panic won't work</p>",
        "id": 165516827,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557744480
    },
    {
        "content": "<p>the vector can't do anything about this, because even if it would correct, e.g., the len field, to leave the vector in a re-droppable state, the vector fields would be dropped, and the destructor of <code>RawVec</code> would deallocate the memory anyways</p>",
        "id": 165516884,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557744515
    },
    {
        "content": "<p>fixing this would require making <code>RawVec</code> <code>ManuallyDrop</code> inside the vector, and correcting the length field when the element type implements drop. Feels like adding complexity to support something that shouldn't really happen in practice</p>",
        "id": 165516921,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557744586
    },
    {
        "content": "<blockquote>\n<p>oh I was assuming it also held for &amp;mut T</p>\n</blockquote>\n<p>it = what?</p>",
        "id": 165518089,
        "sender_full_name": "RalfJ",
        "timestamp": 1557745818
    },
    {
        "content": "<blockquote>\n<p>One consequence of saying that this is fine is that generic code cannot reason about these two different kind of types, so it has to assume that it can only drop things once.</p>\n</blockquote>\n<p>we have that already without any kind of special treatment like \"deinit\" bits. <code>Vec</code> is a type where calling <code>drop</code> twice is UB.</p>",
        "id": 165518123,
        "sender_full_name": "RalfJ",
        "timestamp": 1557745866
    },
    {
        "content": "<blockquote>\n<p>For example, when <code>Drop::drop</code> panics for an element of <code>Vec</code>, not all elements will be dropped, and their memory will be deallocated</p>\n</blockquote>\n<p>that's not true; <code>Vec</code> drops via the drop code for slices and that AFAIK properly resumes dropping with the next element.</p>",
        "id": 165518141,
        "sender_full_name": "RalfJ",
        "timestamp": 1557745906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the update to the slice len will not be propagated to the vector len, the memory the slice refers to will be deallocated anyways, and the slice itself is dropped before the memory is deallocated, so I don't know how that matters</p>",
        "id": 165519158,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557746972
    },
    {
        "content": "<blockquote>\n<p>we have that already without any kind of special treatment like \"deinit\" bits. Vec is a type where calling drop twice is UB.</p>\n</blockquote>\n<p>Sure my point is that generic code (and users writing code in general) cannot assume that any type can be dropped more than once</p>",
        "id": 165519278,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557747070
    },
    {
        "content": "<p>and in general, if drop fails, then the type must be leaked</p>",
        "id": 165519410,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557747232
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> the update to the slice len will not be propagated to the vector len, the memory the slice refers to will be deallocated anyways, and the slice itself is dropped before the memory is deallocated, so I don't know how that matters</p>\n</blockquote>\n<p>...?<br>\nYou said \"when Drop::drop panics for an element of Vec, not all elements will be dropped\". I think that's wrong. When drop panics for an elem of <code>Vec</code>, it'll drop the next elem.</p>",
        "id": 165519602,
        "sender_full_name": "RalfJ",
        "timestamp": 1557747439
    },
    {
        "content": "<blockquote>\n<p>and in general, if drop fails, then the type must be leaked</p>\n</blockquote>\n<p>you mean when working \"from the outside\"? sure, I can't just hope that <code>drop</code> is idempotent or so.</p>",
        "id": 165519688,
        "sender_full_name": "RalfJ",
        "timestamp": 1557747519
    },
    {
        "content": "<p>which is why I wonder why <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> has these \"deinit\" bits in their model, that seems like an unnecessary complication.</p>",
        "id": 165519701,
        "sender_full_name": "RalfJ",
        "timestamp": 1557747541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> indeed, you are right, slice drop continues dropping the next element</p>",
        "id": 165519725,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557747585
    },
    {
        "content": "<p>making <code>Drop::drop</code> for <code>Vec</code> idempotent should be trivial then</p>",
        "id": 165519825,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557747688
    },
    {
        "content": "<p>We could have an <code>IdempotentDrop</code> auto trait for that</p>",
        "id": 165520192,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557747991
    },
    {
        "content": "<p>If being able to tell these apart ever has applcations</p>",
        "id": 165520206,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557748014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> well I  do say at the top that \"i don't think deinit is necessary\"</p>",
        "id": 165529094,
        "sender_full_name": "Gankra",
        "timestamp": 1557754887
    },
    {
        "content": "<p>:)</p>",
        "id": 165529097,
        "sender_full_name": "Gankra",
        "timestamp": 1557754889
    },
    {
        "content": "<p>It's just kind've where I started when trying to picture ManuallyDrop, but later found it was seemingly unnecessary</p>",
        "id": 165529193,
        "sender_full_name": "Gankra",
        "timestamp": 1557754927
    },
    {
        "content": "<p>(similarly I thought it might be important to locals)</p>",
        "id": 165529243,
        "sender_full_name": "Gankra",
        "timestamp": 1557754963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> whats the story for holding a raw ptr to a local? Is it UB if there's no other use keeping the var alive?</p>",
        "id": 165529293,
        "sender_full_name": "Gankra",
        "timestamp": 1557754998
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> well I  do say at the top that \"i don't think deinit is necessary\"</p>\n</blockquote>\n<p>fair^^ but I don't understand why they are even present optionally ;)</p>",
        "id": 165532451,
        "sender_full_name": "RalfJ",
        "timestamp": 1557756976
    },
    {
        "content": "<p>seems to be \"historic reasons\" then^^</p>",
        "id": 165532490,
        "sender_full_name": "RalfJ",
        "timestamp": 1557757013
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> whats the story for holding a raw ptr to a local? Is it UB if there's no other use keeping the var alive?</p>\n</blockquote>\n<p>using it becomes UB after a <code>StorageDead</code></p>",
        "id": 165532504,
        "sender_full_name": "RalfJ",
        "timestamp": 1557757025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is it sufficient to do a dead load at the end of the scope? e.g. let _keep_alive = val;</p>",
        "id": 165533175,
        "sender_full_name": "Gankra",
        "timestamp": 1557757476
    },
    {
        "content": "<p>hmm, miri seems to think this is fine? <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=690492a439a7a641b3ddb23be8d8f4fe\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=690492a439a7a641b3ddb23be8d8f4fe\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=690492a439a7a641b3ddb23be8d8f4fe</a></p>",
        "id": 165535297,
        "sender_full_name": "Gankra",
        "timestamp": 1557758927
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> is it sufficient to do a dead load at the end of the scope? e.g. let _keep_alive = val;</p>\n</blockquote>\n<p>this depends on how rustc inserts <code>StorageDead</code>...</p>",
        "id": 165535367,
        "sender_full_name": "RalfJ",
        "timestamp": 1557758974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> what is the model that allows a variable to store a reference that dangles? Is that StorageDead?</p>",
        "id": 165536259,
        "sender_full_name": "Gankra",
        "timestamp": 1557759546
    },
    {
        "content": "<p>I dont understand the question</p>",
        "id": 165536362,
        "sender_full_name": "RalfJ",
        "timestamp": 1557759604
    },
    {
        "content": "<p><code>StorageDead</code> is an instruction, not a model</p>",
        "id": 165536383,
        "sender_full_name": "RalfJ",
        "timestamp": 1557759612
    },
    {
        "content": "<p>and Rust lets you store dangling ptrs in a variable in safe code, so all models allow that</p>",
        "id": 165536404,
        "sender_full_name": "RalfJ",
        "timestamp": 1557759636
    },
    {
        "content": "<p>wait doesn't that contradict that they're dereferencable()</p>",
        "id": 165539539,
        "sender_full_name": "Gankra",
        "timestamp": 1557761694
    },
    {
        "content": "<p>or is that only function args</p>",
        "id": 165539549,
        "sender_full_name": "Gankra",
        "timestamp": 1557761703
    },
    {
        "content": "<p>I am confused</p>",
        "id": 165541985,
        "sender_full_name": "RalfJ",
        "timestamp": 1557763248
    },
    {
        "content": "<p>could you give an example?</p>",
        "id": 165541992,
        "sender_full_name": "RalfJ",
        "timestamp": 1557763252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> something having type &amp;T is supposed to indicate the compiler can freely read from it whever it wants, no? And a dangling reference is consequently UB?</p>",
        "id": 165547417,
        "sender_full_name": "Gankra",
        "timestamp": 1557767118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span>  oh, sorry, missed the reference part. yeah references cannot dangle, though that does not answer the question of \"<em>when</em> can they not dangle\"</p>",
        "id": 165557953,
        "sender_full_name": "RalfJ",
        "timestamp": 1557773599
    },
    {
        "content": "<p>but that has nothing to do with <code>StorageDead</code></p>",
        "id": 165557968,
        "sender_full_name": "RalfJ",
        "timestamp": 1557773606
    }
]