[
    {
        "content": "<p>Hi,<br>\nwhy is <code>static A: *const u8 = &5;</code> not allowed but <code> static A: &amp;u8 = &5;</code> is?<br>\nalso, why is a non mut static pointer \"not thread safe\"? it's read only memory into a static variable. it should be pretty defined.</p>",
        "id": 185211034,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1578576089
    },
    {
        "content": "<p>I think I understand.<br>\n<code>static A: &amp;u8 = &5;</code> is a reference so there's a promise there cannot safely be a <code>&amp;mut T</code> here. but <code>*const T</code> doesn't have such promise</p>",
        "id": 185214650,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1578579095
    },
    {
        "content": "<p>you can't go from a <code>*const T</code> to a <code>&amp;mut T</code> in safe code</p>",
        "id": 185219123,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578581932
    },
    {
        "content": "<p>IIRC there is an issue about implementing Send and Sync for raw pointers in the rfc repo</p>",
        "id": 185219171,
        "sender_full_name": "gnzlbg",
        "timestamp": 1578581965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span>  the technical answer is that statics must be <code>Sync</code>, and raw pointers are not</p>",
        "id": 185691062,
        "sender_full_name": "RalfJ",
        "timestamp": 1579089818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the unanswered part of the question is why aren't raw pointers <code>Sync</code>, where the current answer is probably \"because that would be a footgun\"</p>",
        "id": 185696816,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579094852
    },
    {
        "content": "<p>this protection is not strictly necessary, since to trigger undefined UB one still needs to use <code>unsafe</code> code to read/write through these pointers.</p>",
        "id": 185696921,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579094924
    },
    {
        "content": "<p>and there one is already proving that there are no data-races</p>",
        "id": 185696942,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579094944
    },
    {
        "content": "<p>indeed, raw pointers are non-<code>Sync</code> mostly as a lint... and because a <code>struct</code> containing raw pointers probably has some sufficiently interesting stuff going on that users should explicitly acknowledge thread-safety with <code>unsafe impl Send/Sync</code></p>",
        "id": 185713838,
        "sender_full_name": "RalfJ",
        "timestamp": 1579105198
    },
    {
        "content": "<p>(also they can't opt-out by themselves as <code>impl !Send/Sync</code> is unstable)</p>",
        "id": 185713907,
        "sender_full_name": "RalfJ",
        "timestamp": 1579105211
    },
    {
        "content": "<p>for <code>static</code>s that a bit silly, but then what is the use-case for a <code>static</code> const ptr anyway?</p>",
        "id": 185714011,
        "sender_full_name": "RalfJ",
        "timestamp": 1579105269
    },
    {
        "content": "<blockquote>\n<p>for statics that a bit silly, but then what is the use-case for a static const ptr anyway</p>\n</blockquote>\n<p>mapping a static to a dynamic array?</p>",
        "id": 185714396,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579105483
    },
    {
        "content": "<p>e.g. the linker puts a size at a symbol, and the array content at another symbol</p>",
        "id": 185714419,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579105499
    },
    {
        "content": "<p>so you end up with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">ARRAY_SIZE</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">ARRAY</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 185714479,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579105532
    },
    {
        "content": "<p>You can't make <code>ARRAY</code> an array cause you don't know the length within your Rust program, You can't make it a reference cause maybe the size is <code>0</code>  (and other issues)</p>",
        "id": 185714588,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579105586
    },
    {
        "content": "<p>You also can't make it a slice</p>",
        "id": 185714600,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579105593
    },
    {
        "content": "<p>ah... interesting. doesnt match the OP, but still a good answer.</p>",
        "id": 185729376,
        "sender_full_name": "RalfJ",
        "timestamp": 1579113591
    },
    {
        "content": "<blockquote>\n<p>for <code>static</code>s that a bit silly, but then what is the use-case for a <code>static</code> const ptr anyway?</p>\n</blockquote>\n<p>My use case is passing that to FFI, by default it uses an extern static for a pointer, I wanted to replace that in fuzzing with a null pointer</p>",
        "id": 185814533,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579181613
    },
    {
        "content": "<p>I dont know what \"using an extern static for a pointer\" means</p>",
        "id": 185840159,
        "sender_full_name": "RalfJ",
        "timestamp": 1579196870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> if FFI uses a raw pointer, you should use a raw pointer as well</p>",
        "id": 185911580,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579264560
    },
    {
        "content": "<p>If you want to access that from multiple threads, then you should make sure that this is safe, and provide an abstraction (using <code>unsafe</code> code) that does that.</p>",
        "id": 185911666,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579264584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> well the only reason I opened this is <em>because</em> my FFI uses raw pointer but rust doesn't allow me to define a raw pointer static myself.</p>",
        "id": 185990878,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579345785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> I'd expect <code>extern { static Foo: UnsafeCell&lt;*const c_int&gt;; }</code> to just work</p>",
        "id": 185990931,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579345854
    },
    {
        "content": "<p>but yeah, because raw pointers aren't <code>Sync</code>, you can't use bare raw pointers</p>",
        "id": 185990937,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579345875
    },
    {
        "content": "<p>alternatively you can have a <code>#[repr(transparent)] struct Wrapper(*const c_int);</code> that implements <code>Sync</code>.</p>",
        "id": 185990942,
        "sender_full_name": "gnzlbg",
        "timestamp": 1579345917
    },
    {
        "content": "<p>:/ that sucks. Too bad we can't override this with unsafe somehow. But I guess that's the language :)</p>",
        "id": 185990995,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1579345954
    }
]