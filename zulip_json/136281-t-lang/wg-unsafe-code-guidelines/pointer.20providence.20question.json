[
    {
        "content": "<p>Let's say I have a function like so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">copy_pointer</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">ptr</span>::<span class=\"n\">copy_nonoverlapping</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mem</span>::<span class=\"n\">transmute_copy</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Would this be a valid function that returns a copy of <code>b</code> that has the same providence as <code>a</code>?</p>",
        "id": 196124681,
        "sender_full_name": "Yato",
        "timestamp": 1588541854
    },
    {
        "content": "<p>One more thing, <code>U</code> will always be the type of a field of <code>T</code>. I'm exploring this option as a way to get safe field projections in for <a href=\"https://crates.io/crates/cell-project\" title=\"https://crates.io/crates/cell-project\"><code>cell-project</code></a> that allow projecting to <code>!Sized</code> fields. If this is not sound, I can fallback to using an offset and supporting projections to <code>Sized</code> fields.</p>",
        "id": 196124818,
        "sender_full_name": "Yato",
        "timestamp": 1588542100
    },
    {
        "content": "<p>Because this is a projection from a <code>&amp;Cell&lt;T&gt;</code> I know that the pointer is valid, and I can temporarily get a reference to a field. (this will be passed to <code>b</code>). But it would be unsound for me to use that reference as the projection because it will be invalidated by the next write into the <code>&amp;Cell&lt;T&gt;</code>. So I need derive the projection directly from <code>Cell::as_ptr</code> without intermediate references.</p>",
        "id": 196124874,
        "sender_full_name": "Yato",
        "timestamp": 1588542213
    },
    {
        "content": "<p>(FWIW, it's <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#pointer-provenance\" title=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#pointer-provenance\">\"provenance\"</a>, not \"providence\")</p>",
        "id": 196182367,
        "sender_full_name": "RalfJ",
        "timestamp": 1588600396
    },
    {
        "content": "<p>ptr provenance is preserved by basically all raw pointer operations</p>",
        "id": 196182395,
        "sender_full_name": "RalfJ",
        "timestamp": 1588600418
    },
    {
        "content": "<blockquote>\n<p>Would this be a valid function that returns a copy of b that has the same providence as a?</p>\n</blockquote>\n<p>uh... what? I don't think such an operation exists, and it also is not very meaningful at all (depending on the kind of provenance).</p>",
        "id": 196182515,
        "sender_full_name": "RalfJ",
        "timestamp": 1588600467
    },
    {
        "content": "<p>you cant just separate the provenance of a pointer from its value</p>",
        "id": 196182565,
        "sender_full_name": "RalfJ",
        "timestamp": 1588600495
    },
    {
        "content": "<p>this smells like an A-B problem to me</p>",
        "id": 196182573,
        "sender_full_name": "RalfJ",
        "timestamp": 1588600501
    },
    {
        "content": "<p><code>&amp;Cell&lt;T&gt;</code> are shared read-writable pointers. they are not in general invalidated by writes using other pointers.</p>",
        "id": 196182792,
        "sender_full_name": "RalfJ",
        "timestamp": 1588600600
    },
    {
        "content": "<p>so this is not necessarily true:</p>\n<blockquote>\n<p>But it would be unsound for me to use that reference as the projection because it will be invalidated by the next write into the &amp;Cell&lt;T&gt;</p>\n</blockquote>",
        "id": 196182811,
        "sender_full_name": "RalfJ",
        "timestamp": 1588600611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"202379\">@Yato</span> could you show some concrete self-contained code that you think is wrong because of this invalidation?</p>",
        "id": 196182865,
        "sender_full_name": "RalfJ",
        "timestamp": 1588600639
    },
    {
        "content": "<p>I think the following code is UB because I am converting a <code>&amp;i32</code> to a <code>&amp;Cell&lt;i32&gt;</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Pair</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pair_cell</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"n\">Pair</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">pair_cell</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">first_cell</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Cell</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>i could calculate the offset of the field, and use that to construct a <code>&amp;Cell&lt;i32&gt;</code> without an intermediate reference, but that doesn't work if I want to project to a <code>!Sized</code> field. I wanted to see if there was some other way to project to a <code>!Sized</code> field.</p>",
        "id": 196231901,
        "sender_full_name": "Yato",
        "timestamp": 1588622045
    },
    {
        "content": "<p>For an example of a projection to a <code>!Sized</code>  field</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">header</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">unsized_field</span>: <span class=\"nc\">dyn</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unsized_field</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"c1\">// UB version</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unsized_field</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">unsized_field</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Cell</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"c1\">// or with `raw_ref_op` (but that&#39;s nightly only for now)</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unsized_field</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()).</span><span class=\"kr\">unsized</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">unsized_field</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">unsized_field</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Cell</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196232543,
        "sender_full_name": "Yato",
        "timestamp": 1588622380
    },
    {
        "content": "<blockquote>\n<p>converting a &amp;i32 to a &amp;Cell&lt;i32&gt;</p>\n</blockquote>\n<p>ah yes that is definitely not okay :D</p>",
        "id": 196686242,
        "sender_full_name": "RalfJ",
        "timestamp": 1588794015
    },
    {
        "content": "<p>so then you want to take than <code>&amp;i32</code> address an equip it wth the <code>&amp;Cell&lt;i32&gt;</code> provenance? curious.</p>",
        "id": 196686299,
        "sender_full_name": "RalfJ",
        "timestamp": 1588794049
    },
    {
        "content": "<p>I think something offset-based is indeed the only way to currently do that, like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"sd\">/// Return a pointer with the address of `addr` and the provenance of `prov`.</span>\n<span class=\"sd\">///</span>\n<span class=\"sd\">/// Safety conditions: TBD</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">copy_ptr_provenance</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">prov</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">addr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\">  </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">addr</span><span class=\"p\">.</span><span class=\"n\">offset_from</span><span class=\"p\">(</span><span class=\"n\">prov</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">prov</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">diff</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196686575,
        "sender_full_name": "RalfJ",
        "timestamp": 1588794159
    },
    {
        "content": "<p>this requires both ptrs to be in the same allocation, but that should suffice for your usecase <span class=\"user-mention\" data-user-id=\"202379\">@Yato</span></p>",
        "id": 196686712,
        "sender_full_name": "RalfJ",
        "timestamp": 1588794223
    }
]