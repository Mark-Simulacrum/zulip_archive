[
    {
        "content": "<p>I think the API docs of <code>mem::zeroed</code> are incorrect. They currently say: </p>\n<blockquote>\n<p>Creates a value whose bytes are all zero.</p>\n</blockquote>",
        "id": 172127416,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564579958
    },
    {
        "content": "<p>From which it follows that:</p>",
        "id": 172127466,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564580003
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"cp\">#[repr(C)]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">zeroed</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">((</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">).</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">read</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// always passes</span>\n</pre></div>",
        "id": 172127557,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564580062
    },
    {
        "content": "<p>I don't think we can guarantee anywhere which values <code>mem::zeroed()</code> writes to padding bytes, and it probably should write anything to them</p>",
        "id": 172127599,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564580106
    },
    {
        "content": "<p>definetely not be required / guarantee that it does</p>",
        "id": 172127607,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564580116
    },
    {
        "content": "<p>Yeah. Please file an issue.</p>",
        "id": 172130797,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564582341
    },
    {
        "content": "<p>I see. In my view what happens is that indeed there was an all-0 value, but then when the function returns that value, \"typed copy\" rules apply.</p>",
        "id": 172145711,
        "sender_full_name": "RalfJ",
        "timestamp": 1564593382
    },
    {
        "content": "<p>This expalains both why there is UB if 0 does not satisfy the validity invariant, and why padding is not preserved.</p>",
        "id": 172145739,
        "sender_full_name": "RalfJ",
        "timestamp": 1564593404
    },
    {
        "content": "<p>That is technically correct but we should definitely note explicitly what happens with padding, because it's subtle</p>",
        "id": 172147992,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564595009
    },
    {
        "content": "<p>indeed, the docs don't need to talk about \"typed copies\" or so.</p>",
        "id": 172149887,
        "sender_full_name": "RalfJ",
        "timestamp": 1564596082
    },
    {
        "content": "<p>I was thinking of the abstract machine spec and making sure it doesnt have to account separately for the padding here.</p>",
        "id": 172149931,
        "sender_full_name": "RalfJ",
        "timestamp": 1564596104
    },
    {
        "content": "<p>And I was also thinking of the abstract machine when writing those docs, which is why I missed the padding aspect. ;)</p>",
        "id": 172149942,
        "sender_full_name": "RalfJ",
        "timestamp": 1564596118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> so just to triple check. IIUC even with the current API docs, the assert here can fail right ?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">union</span> <span class=\"nc\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">zeroed</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0_</span><span class=\"k\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172150500,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564596405
    },
    {
        "content": "<p>(supposing that all zeroes is a valid representation for T, etc.</p>",
        "id": 172150604,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564596465
    },
    {
        "content": "<p>Yes. Arguably it might even be UB, if we say padding is always written as 0xUU</p>",
        "id": 172150719,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564596515
    },
    {
        "content": "<p>Well I suppose the question is whether this code is UB or not then.</p>",
        "id": 172150990,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564596660
    },
    {
        "content": "<p>I think that even with the current docs that say that it writes zero to all bytes of T, the behavior is undefined, because the value of the padding bytes can change to undef before the read of y</p>",
        "id": 172151173,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564596768
    },
    {
        "content": "<p>Oh wait, what do you mean by \"even with the current API docs\"?</p>",
        "id": 172151316,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564596859
    },
    {
        "content": "<p>The current docs guarantee that all bytes of T are actually zeroed</p>",
        "id": 172152607,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564597663
    },
    {
        "content": "<p>I guess my confusion is whether you mean what a normal user would intuit or what follows from the \"typed copy\" perspective</p>",
        "id": 172154612,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564598896
    },
    {
        "content": "<blockquote>\n<p>I think that even with the current docs that say that it writes zero to all bytes of T, the behavior is undefined, because the value of the padding bytes can change to undef before the read of y</p>\n</blockquote>\n<p>that depends on whether there was ever a type at type <code>T</code></p>",
        "id": 172158084,
        "sender_full_name": "RalfJ",
        "timestamp": 1564601608
    },
    {
        "content": "<p>as <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> argued on GH, there is no such thing as a \"padding byte\" per se. There is only a \"padding byte for some type <code>T</code>\".</p>",
        "id": 172158113,
        "sender_full_name": "RalfJ",
        "timestamp": 1564601627
    },
    {
        "content": "<p>evaluating zeroed() and putting the result in the union is uncontroversially a typed copy, right?</p>",
        "id": 172158252,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564601730
    },
    {
        "content": "<p>yes. but <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> was hypothesizing \"with the current docs\".</p>",
        "id": 172158549,
        "sender_full_name": "RalfJ",
        "timestamp": 1564601900
    },
    {
        "content": "<p>I guess that's a moot point because the current docs are not operational enough to answer this question.</p>",
        "id": 172158561,
        "sender_full_name": "RalfJ",
        "timestamp": 1564601925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> They might be barely enough. For example, is this a valid transformation of the program above?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">union</span> <span class=\"nc\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">y</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tmp</span>: <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">zeroed</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">u</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">tmp</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">u</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0_</span><span class=\"k\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172198131,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644542
    },
    {
        "content": "<p>I think so,  so even with the current docs, we do not guarantee that the assert will pass. The behavior of the assert is undefined.</p>",
        "id": 172198161,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564644592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I think we both agree on what the semantics of <code>zeroed</code> are, don't we? and that the docs can be improved?</p>",
        "id": 172198165,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644601
    },
    {
        "content": "<p>I see no point in trying to interpret more into these docs <em>that I wrote</em> than I had in my mind when writing them^^</p>",
        "id": 172198224,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644616
    },
    {
        "content": "<p>\"can and should be improved\", that is</p>",
        "id": 172198243,
        "sender_full_name": "RalfJ",
        "timestamp": 1564644634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> shall I fill an issue ? or shall we try to come up with wording that fixes them and just modify them ?</p>",
        "id": 172198962,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645330
    },
    {
        "content": "<p>I think that saying that it zeroes the bytes \"of the value representation of <code>T</code>\" should be enough</p>",
        "id": 172198970,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564645345
    },
    {
        "content": "<p>except nobody will understand what that means</p>",
        "id": 172199565,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645927
    },
    {
        "content": "<p>like, not even in the UCG glossary with all my PRs merged have we defined \"the bytes of the value representation of <code>T</code>\"</p>",
        "id": 172199579,
        "sender_full_name": "RalfJ",
        "timestamp": 1564645947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> alternative proposal: something along the lines of \"transmutes zero-ed memory to <code>T</code>\". and then we can go on explaining that, since padding bytes are not preserved when e.g. returned from a function, this means that some bytes of the returned datum can be 0.</p>",
        "id": 172199658,
        "sender_full_name": "RalfJ",
        "timestamp": 1564646040
    },
    {
        "content": "<p>yet another proposal: actually functions return values, not lists of bytes or so, so the \"return value\" doesn't even have padding. so we could try something along the lines of \"returns the value represented by the all-0 bit pattern\".</p>",
        "id": 172199728,
        "sender_full_name": "RalfJ",
        "timestamp": 1564646082
    },
    {
        "content": "<p>These two are very clever but I don't think there is any wording that avoids the need for an explicit note to the effect that padding is not preserved in this case either, and so if <code>T</code> has padding, the result will not be entirely zeroes. We don't don't need a precise official definition of padding (and when it is lost) or go into the differences between values and bytes lists to say that.</p>",
        "id": 172200129,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564646463
    },
    {
        "content": "<p>sure, I am all for explicitly stating the consequences of the definition. but at the same time I dont want this to sound like a weird magic special case, which it is not.</p>",
        "id": 172200606,
        "sender_full_name": "RalfJ",
        "timestamp": 1564646891
    },
    {
        "content": "<p>The actual wording with such a note might even be enough?</p>",
        "id": 172200627,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564646946
    },
    {
        "content": "<p>Otherwise, saying that \"<code>mem::zeroed&lt;T&gt;</code> returns the value represented by the all-0 bit pattern\" seems good as well.</p>",
        "id": 172200651,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564646988
    },
    {
        "content": "<p>I like \"the value represented by the all-0 bit pattern\" because it does not involve a lot of weird jargon -- the terms there have a precise meaning but you can also read it and kind of understand it without knowing that precise meanings.<br>\nbut we should definitely add a note saying that this means e.g. for <code>(u8, u16)</code> the padding byte does <em>not</em> have to be 0.</p>",
        "id": 172202768,
        "sender_full_name": "RalfJ",
        "timestamp": 1564649242
    },
    {
        "content": "<p>Sounds good to me.</p>",
        "id": 172204033,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564650534
    },
    {
        "content": "<p>do you want to make a PR?</p>",
        "id": 172204799,
        "sender_full_name": "RalfJ",
        "timestamp": 1564651244
    },
    {
        "content": "<p>i could at some point, but every time I need to make a PR, I need to branch, branches get out of sync, switching between branches takes days if LLVM needs to be recompiled, etc.</p>",
        "id": 172204956,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564651437
    },
    {
        "content": "<p>having multiple checkouts helps</p>",
        "id": 172205085,
        "sender_full_name": "RalfJ",
        "timestamp": 1564651557
    },
    {
        "content": "<p>so you can have multiple branches checked out and built (I use <code>git worktree</code> for that)</p>",
        "id": 172205147,
        "sender_full_name": "RalfJ",
        "timestamp": 1564651593
    },
    {
        "content": "<p>of course it also means <em>when</em> LLVM updates it needs to eventually be recompiled once for each worktree^^</p>",
        "id": 172205159,
        "sender_full_name": "RalfJ",
        "timestamp": 1564651612
    },
    {
        "content": "<p>but for this PR you dont even need LLVM</p>",
        "id": 172205182,
        "sender_full_name": "RalfJ",
        "timestamp": 1564651646
    },
    {
        "content": "<p><code>./x.py test --stage 0 src/libcore</code> should be all you need</p>",
        "id": 172205189,
        "sender_full_name": "RalfJ",
        "timestamp": 1564651656
    },
    {
        "content": "<p>that takes just a few min even on a fresh checkout</p>",
        "id": 172205204,
        "sender_full_name": "RalfJ",
        "timestamp": 1564651677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> each check out takes ~30 Gb</p>",
        "id": 172207130,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564653499
    },
    {
        "content": "<p>my laptop has ~256 Gb and is quite full, so I'm bottle necked at one checkout</p>",
        "id": 172207148,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564653527
    },
    {
        "content": "<p>ah. yeah Rust eats disk space like there's no tomorrow.</p>",
        "id": 172208599,
        "sender_full_name": "RalfJ",
        "timestamp": 1564655020
    },
    {
        "content": "<p>I recently freed 100GB by cleaning my compiler checkouts and a few projects.</p>",
        "id": 172208603,
        "sender_full_name": "RalfJ",
        "timestamp": 1564655032
    },
    {
        "content": "<p>I need to start using the GCC compile farm again</p>",
        "id": 172213801,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564660675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> you don't even need to do anything locally; just make a branch via the github UI and edit the text there...</p>",
        "id": 172261955,
        "sender_full_name": "centril",
        "timestamp": 1564693900
    },
    {
        "content": "<p>yeah for just a docs change the webpage works great.</p>",
        "id": 172732304,
        "sender_full_name": "Lokathor",
        "timestamp": 1565230509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> what were you respond to? The docs change <a href=\"https://doc.rust-lang.org/nightly/std/mem/fn.zeroed.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/mem/fn.zeroed.html\">has already landed</a>. Which webpage?</p>",
        "id": 172746810,
        "sender_full_name": "RalfJ",
        "timestamp": 1565252129
    },
    {
        "content": "<p>Sorry, I hadn't noticed the date on the thread. I was agreeing with Centril that just editing docs through the github webpage is much easier than cloning a local copy of rustc</p>",
        "id": 172747408,
        "sender_full_name": "Lokathor",
        "timestamp": 1565252798
    },
    {
        "content": "<p>dunno, I am usually doing this in one of the 3 local copies I have and I prefer having a proper editor ;)</p>",
        "id": 172747540,
        "sender_full_name": "RalfJ",
        "timestamp": 1565252954
    }
]