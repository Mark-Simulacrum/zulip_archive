[
    {
        "content": "<p>Hello,<br>\nI recently had an email discussion with Felix Klock, who mentioned the fact that (if I understand correctly), mutable references are marked as non-aliasable, so the compiler can make optimizations based on this: <a href=\"https://github.com/rust-lang/rust/pull/82834\">https://github.com/rust-lang/rust/pull/82834</a></p>\n<p>As it is possible to bypass the \"uniqueness\" of mutable references with unsafe code, some uses of unsafe code should trigger an undefined behavior. Thus, an aliasing model for Rust should be needed. From what I understand, Stacked Borrow (SB) is such a proposal for an aliasing model, but as far as I know, SB has not (yet?) been accepted as the official aliasing model for Rust. Thus, I wonder what is the justification for this optimization.</p>\n<p>Felix advised me to call this question on this stream. Thus, does this optimization rely on SB? Does it rely on another aliasing model? Or has is been written without an official model, because it passes the test? Or did I misunderstand what the pull request <a href=\"https://github.com/rust-lang/rust/issues/82834\">#82834</a> is?</p>\n<p>I am a newbie, so I apologize if my question is clumsy or if I misunderstood the issue.</p>",
        "id": 278044521,
        "sender_full_name": "Alban Reynaud",
        "timestamp": 1649260181
    },
    {
        "content": "<p>I don't think <code>noalias</code> is actually special here. It's in general a good question how Rust code can have any optimizations performed on it - either by rustc, or by LLVM, or by their interaction - without a stable memory model. The resolution to this is that right now we sort of just do \"reasonable\" optimizations that we think the memory model should definitely allow</p>",
        "id": 278047336,
        "sender_full_name": "Jak{e,ob} Degen",
        "timestamp": 1649261302
    },
    {
        "content": "<p>The optimization (adding <code>noalias</code> to <code>&amp;mut</code> and <code>Box</code>) exists without any formal model or proof. It is based entirely on the fact that it seems like this was already disallowed and nobody has opened an issue about how it broke their code yet.</p>",
        "id": 278055129,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649264627
    },
    {
        "content": "<p>Note that SB is probably much more restrictive than <code>noalias</code> needs. I say probably because nobody is sure what <code>noalias</code> means.</p>",
        "id": 278055283,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649264687
    },
    {
        "content": "<p>also, don't forget that <code>noalias</code> is applied to <code>&amp;T</code> as well for <code>T: Freeze</code> (contains no <code>UnsafeCell</code>)</p>",
        "id": 278065607,
        "sender_full_name": "cuviper",
        "timestamp": 1649269277
    },
    {
        "content": "<p>(I have no idea whether SB speaks to that side of things...)</p>",
        "id": 278065632,
        "sender_full_name": "cuviper",
        "timestamp": 1649269295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"492399\">@Alban Reynaud</span> techically speaking the justification for <code>noalias</code> is this item in the <a href=\"https://doc.rust-lang.org/reference/behavior-considered-undefined.html\">Rust UB list</a>: it is UB to...</p>\n<blockquote>\n<p>Breaking the pointer aliasing rules. &amp;mut T and &amp;T follow LLVM’s scoped noalias model, except if the &amp;T contains an UnsafeCell&lt;U&gt;.</p>\n</blockquote>",
        "id": 278074056,
        "sender_full_name": "RalfJ",
        "timestamp": 1649273356
    },
    {
        "content": "<p>now that definition is extremely vague and directly references a concrete backend, which nobody is happy with, so it will be replaced by Stacked Borrows or one of its successors one day.</p>",
        "id": 278074126,
        "sender_full_name": "RalfJ",
        "timestamp": 1649273386
    },
    {
        "content": "<blockquote>\n<p>and nobody has opened an issue about how it broke their code yet.</p>\n</blockquote>\n<p>They have, multiple times <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> — <a href=\"https://stackoverflow.com/q/57259126/155423\">Why does the Rust compiler not optimize code assuming that two mutable references cannot alias?</a></p>",
        "id": 278074549,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649273552
    },
    {
        "content": "<p>that's the opposite question though ;)</p>",
        "id": 278075555,
        "sender_full_name": "RalfJ",
        "timestamp": 1649274034
    },
    {
        "content": "<p>Is it? It was disabled <em>because</em> someone opened issues stating that adding <code>noalias</code> broke their code.</p>",
        "id": 278077092,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649274836
    },
    {
        "content": "<p>Timeline: the optimization was applied, issues filed about how it broke code, optimization disabled, someone posted the question.</p>",
        "id": 278077258,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649274903
    },
    {
        "content": "<p>The answer links to the two occurrences / issues that I'm aware of.</p>",
        "id": 278077317,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649274935
    },
    {
        "content": "<p>Weren't the complaints all root-caused to LLVM bugs, as opposed to Rust code not following the vague implied noalias rules?</p>",
        "id": 278078604,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649275465
    },
    {
        "content": "<p>Sure, but what's the operational benefit of the difference?</p>",
        "id": 278081000,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649276542
    },
    {
        "content": "<p>buggy user code vs buggy compiler makes a big difference. we can fix the compiler much more easily than user code.</p>",
        "id": 278089139,
        "sender_full_name": "RalfJ",
        "timestamp": 1649280730
    },
    {
        "content": "<p>But for 99.9% of Rust users, <code>rustc</code> and LLVM are both \"the compiler\", so I feel like I'm missing your points. </p>\n<p>The binary <code>rustc</code> took user-provided code and produced malfunctioning code because  <code>noalias</code> was applied. The user \"opened an issue about how it broke their code\". We fixed the issue by changing the compiler (disabling <code>noalias</code> in rustc) and then changing the compiler (fixing LLVM).</p>\n<p>This process happened two unique times, as documented in the SO Q&amp;A. What piece am I missing? Is there a joke or something that is going over my head?</p>",
        "id": 278105945,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649293094
    },
    {
        "content": "<p>I think the difference is that noalias has broken is not because people misunderstand how to write Rust and it breaks, but because the compiler is broken.</p>\n<p>I guess the closest analogy would be (say SB was normative), code passing MIRI and then getting miscompiled, versus code not passing MIRI (and getting miscompiled) because MIRI/SB is too strict.</p>",
        "id": 278107322,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1649294538
    },
    {
        "content": "<p>If users wrote UB that didn't matter in practice until <code>noalias</code> was applied, then they either have to fix it or we have to adjust our rules to make their behavior defined.</p>\n<p>If the compiler has a <code>noalias</code> bug, in rustc or LLVM, then we have to fix that. AFAIK this was the situation.</p>\n<p>Either way, reverts gave us time to figure it out.</p>",
        "id": 278109902,
        "sender_full_name": "cuviper",
        "timestamp": 1649297542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  in the future, if \"user-provided code [is turned into] malfunctioning code because noalias was applied\", we might close the issue as wontfix if the user code has a bug (namely, violating our aliasing rules)</p>",
        "id": 278353289,
        "sender_full_name": "RalfJ",
        "timestamp": 1649447031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> certainly, but I still don't see how that invalidates my point.</p>",
        "id": 278358150,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649449702
    },
    {
        "content": "<p>well that is the difference between \"miscompiling\" code due to compiler bugs vs user UB. I thought that was the question?</p>",
        "id": 278358180,
        "sender_full_name": "RalfJ",
        "timestamp": 1649449727
    },
    {
        "content": "<p>I'm literally responding to the above point:</p>\n<blockquote>\n<p>nobody has opened an issue about how [adding <code>noalias</code> to <code>&amp;mut</code> and <code>Box</code>] broke their code yet.</p>\n</blockquote>\n<p>I'm saying that, yes, they have. Twice in fact.</p>",
        "id": 278358277,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649449789
    },
    {
        "content": "<p>Maybe that poster meant something other than the words they typed?</p>",
        "id": 278358378,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649449825
    },
    {
        "content": "<p>I was mostly respond to this question of yours<br>\n<span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Justification.20for.20noalias.20with.20mutable.20references/near/278081000\">said</a>:</p>\n<blockquote>\n<p>Sure, but what's the operational benefit of the difference?</p>\n</blockquote>",
        "id": 278358845,
        "sender_full_name": "RalfJ",
        "timestamp": 1649450069
    },
    {
        "content": "<p>I think in the text you quote, by \"it\" (the thing you expanded in [...]) they mean the optimizations we actually consider legitimate</p>",
        "id": 278358934,
        "sender_full_name": "RalfJ",
        "timestamp": 1649450134
    },
    {
        "content": "<p>we don't have reports of <em>those</em> breaking code, AFAIK</p>",
        "id": 278359004,
        "sender_full_name": "RalfJ",
        "timestamp": 1649450167
    },
    {
        "content": "<p>I assume that is partially because we dont do that many of them ;) and we keep disabling them to fix incorrect optimizations</p>",
        "id": 278359035,
        "sender_full_name": "RalfJ",
        "timestamp": 1649450194
    },
    {
        "content": "<p>And... you lost me again.</p>\n<blockquote>\n<p>the optimizations we actually consider legitimate<br>\nwe don't have reports of those breaking code</p>\n</blockquote>\n<p>I pointed to two issues where our usage of <code>noalias</code> broke code and was reported.</p>\n<p>It sounds like you are both adding an implicit conditional akin to \"and the implementation of the optimization is correct\", but that seems too handwavy for me. Too close to</p>\n<blockquote>\n<p>Beware of bugs in the above code; I have only proved it correct, not tried it</p>\n</blockquote>",
        "id": 278359466,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649450451
    },
    {
        "content": "<blockquote>\n<p>I pointed to two issues where our usage of noalias broke code and was reported.</p>\n</blockquote>\n<p>yes but the breakage was not due to legimiate optimizations</p>",
        "id": 278359551,
        "sender_full_name": "RalfJ",
        "timestamp": 1649450509
    },
    {
        "content": "<p>it was due to buggy optimizations</p>",
        "id": 278359566,
        "sender_full_name": "RalfJ",
        "timestamp": 1649450514
    },
    {
        "content": "<p>I'm aware that it may seem like I'm being unnecessarily difficult about this, but that's not my intention. <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 278359623,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649450530
    },
    {
        "content": "<blockquote>\n<p>It sounds like you are both adding an implicit conditional akin to \"and the implementation of the optimization is correct\", but that seems too handwavy for me.</p>\n</blockquote>\n<p>I mean, I think for a bug report against the compiler, the question whether the compiler is correct seems rather relevant?</p>",
        "id": 278359661,
        "sender_full_name": "RalfJ",
        "timestamp": 1649450552
    },
    {
        "content": "<p>when someone reports \"your software does X\" as a bug, then the first thing you do is figure out if X is intended behavior of the software or not, isnt it?</p>",
        "id": 278359764,
        "sender_full_name": "RalfJ",
        "timestamp": 1649450610
    },
    {
        "content": "<p>Sure. And from one perspective it was: Because we had <code>&amp;mut</code> or <code>Box</code> or whatever, we added <code>noalias</code>.</p>",
        "id": 278360343,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649450946
    },
    {
        "content": "<p>no it was definitely not intended behavior</p>",
        "id": 278360370,
        "sender_full_name": "RalfJ",
        "timestamp": 1649450963
    },
    {
        "content": "<p>we didn't add <code>noalias</code> thinking: literally anything this does to the code is what we want it to do</p>",
        "id": 278360392,
        "sender_full_name": "RalfJ",
        "timestamp": 1649450977
    },
    {
        "content": "<p>nobody in their right mind would say \"I enabled this thing and then upstream code produces wrong results but that is clearly intended because I enabled the thing\", right? that just makes no sense</p>",
        "id": 278360532,
        "sender_full_name": "RalfJ",
        "timestamp": 1649451052
    },
    {
        "content": "<p>I honestly have no idea where you are coming from or going for with this :/</p>",
        "id": 278360557,
        "sender_full_name": "RalfJ",
        "timestamp": 1649451066
    },
    {
        "content": "<p>Again, I'm being <em>very</em> literal.</p>\n<p>Statement A: \"No one has filed bugs saying that Optimization Z has caused problems\"<br>\nStatement B: \"Here are some bugs where people said Optimization Z has caused problems\"</p>",
        "id": 278360708,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649451160
    },
    {
        "content": "<p>those were two different Z</p>",
        "id": 278360742,
        "sender_full_name": "RalfJ",
        "timestamp": 1649451184
    },
    {
        "content": "<p>How so?</p>",
        "id": 278360773,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649451204
    },
    {
        "content": "<p>the problems were optimization Z', which had bugs</p>",
        "id": 278360790,
        "sender_full_name": "RalfJ",
        "timestamp": 1649451216
    },
    {
        "content": "<p>I think we are going in cycles so I doubt much more is going to come out of this discussion <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 278360884,
        "sender_full_name": "RalfJ",
        "timestamp": 1649451244
    },
    {
        "content": "<p>It's perhaps true, and again, I'm not trying to be difficult. I'm equally as frustrated as I assume you are <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 278360947,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649451283
    },
    {
        "content": "<p>There was a literal statement which I attempted to refute. I think you and <strong>Ben Kimock (Saethlin)</strong>  may be looking at the problem with <a href=\"https://devblogs.microsoft.com/oldnewthing/20110512-00/?p=10683\">compiler-colored glasses on</a>, while I'm looking at it from user-colored glasses.</p>",
        "id": 278361059,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649451358
    },
    {
        "content": "<p>Most people don't <em>care</em> if the optimization is fundamentally incorrect or if its \"just\" implemented incorrectly — the code they put in came out broken.</p>\n<p>Yes, it was great that we could turn off the usage of <code>noalias</code> and then fix LLVM, but the entire optimization, as presented to the user, was busted.</p>",
        "id": 278361171,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649451404
    },
    {
        "content": "<p>If the original statement was \"no one has ever filed a bug stating that the ideal implementation of an optimization (which is not what is present in the compiler today) has broken their code\", then, sure, that'd be true, but also not very useful.</p>",
        "id": 278361468,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649451565
    },
    {
        "content": "<p>I personally find it hard to empathize with the user-colored glasses because so many of the users I've seen who actually interact with implementors already have compiler-colored glasses. I always see people who open the conversation asking if this is a bug in their code or a bug in the compiler, or who are ready to accept either.</p>",
        "id": 278361622,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649451618
    },
    {
        "content": "<p>I'm not making a judgement. I just suspect that whatever our userbase is like, we suffer from massive biases in our interactions</p>",
        "id": 278361735,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649451669
    },
    {
        "content": "<p>That sounds a lot like survivor bias <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>. The people who get to the point of opening an issue against the compiler are a different group than those that don't.</p>",
        "id": 278361779,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649451688
    },
    {
        "content": "<p>Yeah, that could be. Or it could be that C and C++ are so steeped in UB as a part of the language, which fundamentally blurs the line unless you have a checker or very good knowledge of your code and the rules</p>",
        "id": 278361967,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649451775
    },
    {
        "content": "<p>There's also room for \"user reports that our less-than-perfect optimization broke their code when <code>noalias</code> was applied, and we determined that the optimization was correct.\"</p>",
        "id": 278361990,
        "sender_full_name": "cuviper",
        "timestamp": 1649451789
    },
    {
        "content": "<p>If the original statement was \"no one has ever filed a bug stating that the <strong>concept</strong> of this optimization would break their code (but some have filed issues about the implementation)\" I also wouldn't have spoken up.</p>",
        "id": 278362028,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649451817
    },
    {
        "content": "<p>Otherwise we get into No True <del>Scotsman</del> Optimization territory.</p>",
        "id": 278362140,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1649451867
    },
    {
        "content": "<p>I think some of us interpreted the meaning  as \"no one filed a bug stating [the justification behind] the optimization would break their code\", which explains this long song and dance :P. (Ah you just said that, dang internet)</p>",
        "id": 278362250,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1649451938
    },
    {
        "content": "<p>yeah, as a user when your code doesn't do what you think it should, I appreciate it can be hard to figure out if this is a compiler bug or UB. a huge part of my work has the goal of improving that situation. ;)</p>",
        "id": 278363712,
        "sender_full_name": "RalfJ",
        "timestamp": 1649452802
    }
]