[
    {
        "content": "<p>Hi I'm writing a VM and I ran miri with some code examples to check if I was causing UB, and apparently I do:</p>\n<div class=\"codehilite\"><pre><span></span><code>trying to reborrow for SharedReadOnly, but parent tag &lt;untagged&gt; does not have an appropriate item in the borrow stack\n</code></pre></div>\n\n\n<p>This error appears exactly on this line: <a href=\"https://github.com/christianpoveda/pijama/blob/master/pijama_runtime/src/instruction.rs#L462\">https://github.com/christianpoveda/pijama/blob/master/pijama_runtime/src/instruction.rs#L462</a></p>\n<p>What's happening is that when a new closure (my lang's closure, not a rust closure) is created I store it in the heap and take a <code>*const</code> pointer to it. That pointer is pushed into the stack and it's used when the closure is called. Given that my stack only holds <code>i64</code> I had to do some casts to make it fit (this is running on a 64-bit machine so there should be no problem with that I hope). Then when I read that pointer I get the miri error I pasted above.</p>\n<p>Is this actually UB? </p>\n<p>cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 210624162,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600534261
    },
    {
        "content": "<p>Does it work if you use <code>.as_ptr()</code> instead of <code>.deref()</code> at <a href=\"https://github.com/christianpoveda/pijama/blob/cf22ce07821a87abb607c30e12d76da5d4c3a120/pijama_runtime/src/bytecode.rs#L61\">https://github.com/christianpoveda/pijama/blob/cf22ce07821a87abb607c30e12d76da5d4c3a120/pijama_runtime/src/bytecode.rs#L61</a></p>\n<p>Edit: found other raw pointers in your code</p>",
        "id": 210657701,
        "sender_full_name": "bjorn3",
        "timestamp": 1600593816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> I'm afraid there's just too much code there to really tell. :/ I cannot debug this just be browsing the code. And since it's a raw pointer that got invalidated, it is also not clear what the other, conflicting access is...</p>",
        "id": 210658780,
        "sender_full_name": "RalfJ",
        "timestamp": 1600595807
    },
    {
        "content": "<blockquote>\n<p>This error appears exactly on this line: <a href=\"https://github.com/christianpoveda/pijama/blob/master/pijama_runtime/src/instruction.rs#L462\">https://github.com/christianpoveda/pijama/blob/master/pijama_runtime/src/instruction.rs#L462</a></p>\n</blockquote>\n<p>that line doesnt even do anything with any pointer though? could you paste the full error?</p>",
        "id": 210658794,
        "sender_full_name": "RalfJ",
        "timestamp": 1600595869
    },
    {
        "content": "<blockquote>\n<p>What's happening is that when a new closure (my lang's closure, not a rust closure) is created I store it in the heap and take a *const pointer to it. That pointer is pushed into the stack and it's used when the closure is called. Given that my stack only holds i64 I had to do some casts to make it fit (this is running on a 64-bit machine so there should be no problem with that I hope). Then when I read that pointer I get the miri error I pasted above.</p>\n</blockquote>\n<p>the error indicates that <em>after</em> the <code>*const</code> got created, you are creating or passing around or otherwise handling a mutable reference to that same memory. doing so invalidates raw pointers that were created before (except if the reference is itself created from that raw pointer).</p>",
        "id": 210658848,
        "sender_full_name": "RalfJ",
        "timestamp": 1600595925
    },
    {
        "content": "<p><a href=\"https://github.com/christianpoveda/pijama/blob/aed83e0d84b92e7537b626cad8de7cc5c8283d8a/pijama_runtime/src/instruction.rs#L525\">https://github.com/christianpoveda/pijama/blob/aed83e0d84b92e7537b626cad8de7cc5c8283d8a/pijama_runtime/src/instruction.rs#L525</a></p>",
        "id": 210670107,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600613487
    },
    {
        "content": "<p>ah, that line makes more sense :D</p>",
        "id": 210670170,
        "sender_full_name": "RalfJ",
        "timestamp": 1600613556
    },
    {
        "content": "<p>heh yeah I forgot to use a permalink :facepalm:</p>",
        "id": 210670493,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600614027
    },
    {
        "content": "<p>I don't know if this would help but each <code>Closure</code> is stored in an <code>UnsafeCell</code>. Those cells are stored in a linked list to guarantee that they won't get dropped or moved from their original location.</p>",
        "id": 210670584,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600614173
    },
    {
        "content": "<p>Here's where each raw ptr is created: <a href=\"https://github.com/christianpoveda/pijama/blob/aed83e0d84b92e7537b626cad8de7cc5c8283d8a/pijama_runtime/src/heap.rs#L18\">https://github.com/christianpoveda/pijama/blob/aed83e0d84b92e7537b626cad8de7cc5c8283d8a/pijama_runtime/src/heap.rs#L18</a></p>",
        "id": 210670647,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600614248
    },
    {
        "content": "<p>Once that ptr is created it is pushed into a <code>Vec</code></p>",
        "id": 210670657,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600614268
    },
    {
        "content": "<p>what surprises me is that nothing else is accessing this value through this pointer nor being modified between the ptr creation and when the ptr is popped from the stack.</p>",
        "id": 210670810,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600614516
    },
    {
        "content": "<p>there's another possible cause for this error, which is that the pointer never was valid to begin with</p>",
        "id": 210670813,
        "sender_full_name": "RalfJ",
        "timestamp": 1600614533
    },
    {
        "content": "<p>when you turn a reference <code>&amp;T</code> to a <code>*const T</code>, the resulting rwa ptr must only be used for the memory covered by that <code>T</code></p>",
        "id": 210670832,
        "sender_full_name": "RalfJ",
        "timestamp": 1600614560
    },
    {
        "content": "<p>so e.g. when you are in a slice and turn a ref to the first element into a raw pointer, then the raw pointer is <em>for the first element only</em></p>",
        "id": 210670847,
        "sender_full_name": "RalfJ",
        "timestamp": 1600614585
    },
    {
        "content": "<p>ohh, the whole list is behind a <code>UnsafeCell</code>, could it be that this error happens because I'm getting a pointer to each closure through a raw pointer?</p>",
        "id": 210670899,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600614628
    },
    {
        "content": "<p>(re: the question in the thread title, the vector has nothing to do with it. it doesnt matter where you put the raw ptr. it only matters how you create it, and which other things access the memory it points to.)</p>",
        "id": 210670911,
        "sender_full_name": "RalfJ",
        "timestamp": 1600614644
    },
    {
        "content": "<p>ok I get it</p>",
        "id": 210670916,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600614659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132916\">Christian Poveda</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/UB.20by.20putting.20raw.20ptr.20in.20vector.3F/near/210670899\">said</a>:</p>\n<blockquote>\n<p>ohh, the whole list is behind a <code>UnsafeCell</code>, could it be that this error happens because I'm getting a pointer to each closure through a raw pointer?</p>\n</blockquote>\n<p>no idea, I dont know how your list works. <code>UnsafeCell</code> itself makes no difference at all here.</p>",
        "id": 210670928,
        "sender_full_name": "RalfJ",
        "timestamp": 1600614675
    },
    {
        "content": "<p>the only thing <em>that</em> lets you do is mutate things that would usually be immutable</p>",
        "id": 210670934,
        "sender_full_name": "RalfJ",
        "timestamp": 1600614690
    },
    {
        "content": "<p>yes, so the list is behind an unsafecell itself, so the only way to store something in it is to use a raw pointer</p>",
        "id": 210670944,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600614715
    },
    {
        "content": "<p>which means that the pointer that's causing the error is created by accessing a raw pointer to the whole list. That sounds like what you said about \"only using it for the memory covered by that <code>T</code>\"</p>",
        "id": 210671003,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600614766
    },
    {
        "content": "<p>or am I misunderstanding this?</p>",
        "id": 210671015,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600614797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132916\">Christian Poveda</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/UB.20by.20putting.20raw.20ptr.20in.20vector.3F/near/210670944\">said</a>:</p>\n<blockquote>\n<p>yes, so the list is behind an unsafecell itself, so the only way to store something in it is to use a raw pointer</p>\n</blockquote>\n<p>these two things seem to have nothing to do with each other?</p>",
        "id": 210671153,
        "sender_full_name": "RalfJ",
        "timestamp": 1600615031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132916\">Christian Poveda</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/UB.20by.20putting.20raw.20ptr.20in.20vector.3F/near/210671015\">said</a>:</p>\n<blockquote>\n<p>or am I misunderstanding this?</p>\n</blockquote>\n<p>dunno, I dont understand what you are saying.^^<br>\nsee <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/134\">https://github.com/rust-lang/unsafe-code-guidelines/issues/134</a> for more on this behavior of raw pointers.</p>",
        "id": 210671164,
        "sender_full_name": "RalfJ",
        "timestamp": 1600615073
    },
    {
        "content": "<p>I think probably the only way for me to say more is if you manage to reproduce the problem in a self-contained minimal example on the playground, so I can actually follow the code.</p>",
        "id": 210671213,
        "sender_full_name": "RalfJ",
        "timestamp": 1600615101
    },
    {
        "content": "<p>another wild guess: you are doing <code>&amp;mut *self.nodes.get()</code></p>",
        "id": 210671239,
        "sender_full_name": "RalfJ",
        "timestamp": 1600615187
    },
    {
        "content": "<p>you claimed earlier you wouldnt create references to the closures but this is exactly what that line does!</p>",
        "id": 210671242,
        "sender_full_name": "RalfJ",
        "timestamp": 1600615201
    },
    {
        "content": "<p>the <code>&amp;mut</code> this creates points to the full node, including its closure field</p>",
        "id": 210671280,
        "sender_full_name": "RalfJ",
        "timestamp": 1600615210
    },
    {
        "content": "<p>so you are, at this point, asserting that you have a unique pointer to that closure</p>",
        "id": 210671285,
        "sender_full_name": "RalfJ",
        "timestamp": 1600615225
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/UB.20by.20putting.20raw.20ptr.20in.20vector.3F/near/210671239\">said</a>:</p>\n<blockquote>\n<p>another wild guess: you are doing <code>&amp;mut *self.nodes.get()</code></p>\n</blockquote>\n<p>yes</p>",
        "id": 210672908,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600617987
    },
    {
        "content": "<p>I think that's the issue after what you said</p>",
        "id": 210672909,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600617996
    },
    {
        "content": "<p><a href=\"https://play.integer32.com/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=8b483572e83a213081acbd2bf6823582\">https://play.integer32.com/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=8b483572e83a213081acbd2bf6823582</a></p>",
        "id": 210672910,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600617997
    },
    {
        "content": "<p>so basically everytime I'm inserting something new, I'm invalidating all the other pointers I have anyway.</p>",
        "id": 210672944,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600618048
    },
    {
        "content": "<p>in the playground, if you remove the second insert, there's no issue.</p>",
        "id": 210672971,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1600618083
    }
]