[
    {
        "content": "<p>Finally finished my write-up of enum representation:</p>\n<p><a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/57\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/57\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/57</a></p>",
        "id": 152202226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545243885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was surprised to see you propose that non-C-compatible layouts are guaranteed to have the tag at the beginning, IIUC. I have several cases where it would be better for the tag to be put at the end. In particular, when the enum has a variant with large alignment, forcing the tag to be at the beginning wastes a huge amount of space (127 bits of space, in my cases).</p>",
        "id": 152214859,
        "sender_full_name": "briansmith",
        "timestamp": 1545255244
    },
    {
        "content": "<p>Is it really important to guarantee the layout of these?</p>",
        "id": 152214876,
        "sender_full_name": "briansmith",
        "timestamp": 1545255272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> Are you talking about repr(Int) on enums whose variants have fields? That was explicitly RFC'd to do what that PR documents (<a href=\"https://github.com/rust-lang/rfcs/pull/2195\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2195\">https://github.com/rust-lang/rfcs/pull/2195</a>)</p>",
        "id": 152215042,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1545255476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> I'm just talking about regular enums like <code>enum E { A(A), B(B) }</code> where types A and/or B have large alignment.</p>",
        "id": 152215151,
        "sender_full_name": "briansmith",
        "timestamp": 1545255555
    },
    {
        "content": "<p>Huh, does the PR specify that? If so, I must have missed it</p>",
        "id": 152215180,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1545255578
    },
    {
        "content": "<p>How does it waste space? You still need padding at the end.</p>",
        "id": 152215253,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1545255621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133214\">@briansmith</span> I believe that I explicitly said that the layout without a <code>#[repr]</code> is not defined</p>",
        "id": 152215306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545255697
    },
    {
        "content": "<p>if not, then I made a mistake, or perhaps I wrote it in a confusing way</p>",
        "id": 152215315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545255707
    },
    {
        "content": "<p>(I did document the current behavior, which might not be worth doing)</p>",
        "id": 152215319,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545255718
    },
    {
        "content": "<p>Oh, I see: I interpreted \"Non-C-compatible layouts\" to mean \"all Non-C-compatible-layouts\" but it's really only Non-C-compatible layouts that have a <code>#[repr(Int)]</code>.</p>",
        "id": 152215385,
        "sender_full_name": "briansmith",
        "timestamp": 1545255752
    },
    {
        "content": "<p>I agree that everything is OK.</p>",
        "id": 152215391,
        "sender_full_name": "briansmith",
        "timestamp": 1545255758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Whether you need padding at the end depends on the alignment of the object that follows it. That object mighty have alignment 1</p>",
        "id": 152215430,
        "sender_full_name": "briansmith",
        "timestamp": 1545255809
    },
    {
        "content": "<p>No? In <code>struct A { f: i64, g: i8 }, struct B { a: A, h: i8}</code> B must be at least 24 bytes.</p>",
        "id": 152215623,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1545255963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Really? I thought that Rust reserved the right to not only pack things into padding, but also even reorder members of structs that don't have explicit <code>#[repr(...)]</code>.</p>",
        "id": 152215900,
        "sender_full_name": "briansmith",
        "timestamp": 1545256274
    },
    {
        "content": "<p>It can reorder members, but all orders are the same here. It has to guarantee that one can write to all <code>mem::size_of::&lt;A&gt;()</code> bytes of a <code>&amp;mut A</code> that refers to <code>a</code>.</p>",
        "id": 152216651,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1545257019
    },
    {
        "content": "<blockquote>\n<p>Oh, I see: I interpreted \"Non-C-compatible layouts\" to mean \"all Non-C-compatible-layouts\" but it's really only Non-C-compatible layouts that have a <code>#[repr(Int)]</code>.</p>\n</blockquote>\n<p>I tried to make it more clear</p>",
        "id": 152217284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545257677
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Really? I thought that Rust reserved the right to not only pack things into padding, but also even reorder members of structs that don't have explicit <code>#[repr(...)]</code>.</p>\n</blockquote>\n<p>packing into padding is impossible unfortunately; <code>mem::swap</code> would break: it overrides all bytes of both objects. so e.g. whatever <code>&amp;mut b.a</code> points to cannot overlap with anything packed</p>",
        "id": 152239740,
        "sender_full_name": "RalfJ",
        "timestamp": 1545292023
    },
    {
        "content": "<p>though... I wonder if there is any chance that we could ever have a type whose size is unequal to its stride in an array?</p>",
        "id": 152239752,
        "sender_full_name": "RalfJ",
        "timestamp": 1545292074
    },
    {
        "content": "<p>I see no fundamental reason why such types couldn't exist, except that tons of unsafe code could rely on such types not existing...</p>",
        "id": 152239800,
        "sender_full_name": "RalfJ",
        "timestamp": 1545292123
    },
    {
        "content": "<p>Yeah, it's invalid not because it's invalid as a concept, but because it would break so much code.</p>",
        "id": 152244226,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1545298396
    },
    {
        "content": "<p>Swift does this, for example</p>",
        "id": 152244229,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1545298402
    },
    {
        "content": "<p>shame that we didn't do this from the start, to avoid such code :/</p>",
        "id": 152244659,
        "sender_full_name": "RalfJ",
        "timestamp": 1545298976
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> I can't tell how to respond to this on github but I don't quite understand this comment:</p>\n<blockquote>\n<p>Which indexing types do you mean? Option&lt;usize&gt; takes 128 bits according to the playground.</p>\n</blockquote>\n<p>This is because <code>usize</code> does not define any niche values -- all bitpatterns are valid.</p>",
        "id": 152268147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545323472
    },
    {
        "content": "<p>I responded on GH</p>",
        "id": 152268364,
        "sender_full_name": "RalfJ",
        "timestamp": 1545323615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> said.</p>",
        "id": 152268603,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1545323767
    },
    {
        "content": "<p>I can't figure out what <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> said</p>",
        "id": 152268685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545323847
    },
    {
        "content": "<p>GH reviews can be very weird</p>",
        "id": 152268697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545323859
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 152268714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545323873
    },
    {
        "content": "<p>that was in the context of another thread earlier up, ok</p>",
        "id": 152268726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545323879
    },
    {
        "content": "<p>no wonder it seemed so random</p>",
        "id": 152268776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545323897
    },
    {
        "content": "<p>TIL about <code>rustc_layout_scalar_valid_range_end</code></p>",
        "id": 152268779,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1545323902
    },
    {
        "content": "<p>Do we want to say something about that in the discussion of niches?</p>",
        "id": 152268794,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1545323925
    },
    {
        "content": "<p>I have been assuming that is the next area -- i.e., when we discuss validity invariants (although I agree with you it is potentially useful to peel off a \"representation invariant\" or \"bitstring invariant\" or something)</p>",
        "id": 152268929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545324025
    },
    {
        "content": "<p>Can we peel off \"niche\", to make the representation section self-contained?</p>",
        "id": 152268958,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1545324061
    },
    {
        "content": "<p>Might make sense. I'd still be a bit reluctant to discuss <code>#[rustc_layout_scalar_valid_range_end]</code> -- well, I guess it's <em>ok</em>, it's just that it's pretty wildly unstable.</p>",
        "id": 152269054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545324126
    },
    {
        "content": "<p>Might be worth saying something vague then, about mechanisms for user-defined niches still being unstable.</p>",
        "id": 152269226,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1545324265
    },
    {
        "content": "<p>I think we want to merge the rep + invariant documents eventually</p>",
        "id": 152269279,
        "sender_full_name": "RalfJ",
        "timestamp": 1545324314
    },
    {
        "content": "<p>but for discussion, niche is really where rep exploits the invariant</p>",
        "id": 152269291,
        "sender_full_name": "RalfJ",
        "timestamp": 1545324325
    },
    {
        "content": "<p>if we peel off that we might as well merge the discussions</p>",
        "id": 152269300,
        "sender_full_name": "RalfJ",
        "timestamp": 1545324334
    },
    {
        "content": "<p>btw, I think that enums are a clear use-case for some form of \"first-field-has-zero-offset\" <code>#[repr]</code></p>",
        "id": 152269359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545324365
    },
    {
        "content": "<p>it is silly that we use <code>#[repr(C)]</code> on all the substructs and hency fully order the fields of the variants</p>",
        "id": 152269368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545324375
    },
    {
        "content": "<p>when all we need is the ability to read the discriminant</p>",
        "id": 152269373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545324380
    },
    {
        "content": "<p>there are <em>so many</em> possible <code>repr</code></p>",
        "id": 152269390,
        "sender_full_name": "RalfJ",
        "timestamp": 1545324402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Would merging rep + invariant end up putting concepts like lifetimes etc. into the rep chapter?</p>",
        "id": 152269394,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1545324408
    },
    {
        "content": "<blockquote>\n<p>there are <em>so many</em> possible <code>repr</code></p>\n</blockquote>\n<p>I don't think this is a useful argument against any individual one</p>",
        "id": 152269401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545324418
    },
    {
        "content": "<p>validity invariants have nothing to do with lifetimes IMO</p>",
        "id": 152269408,
        "sender_full_name": "RalfJ",
        "timestamp": 1545324424
    },
    {
        "content": "<p>but I suppose this is worth having a separate topic, and anyway it's not that imp't, the other reprs don't exist <em>now</em></p>",
        "id": 152269443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545324449
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>there are <em>so many</em> possible <code>repr</code></p>\n</blockquote>\n<p>I don't think this is a useful argument against any individual one</p>\n</blockquote>\n<p>sure, but we could instead have a \"most general\" one? have an attribute at each field where the user gives an offset</p>",
        "id": 152269445,
        "sender_full_name": "RalfJ",
        "timestamp": 1545324450
    },
    {
        "content": "<p>that's fine</p>",
        "id": 152269456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545324460
    },
    {
        "content": "<p>hm I guess we'd need a DSL to compute the offset based on size+alignment of other types... yeah that'll be complicated^^</p>",
        "id": 152269472,
        "sender_full_name": "RalfJ",
        "timestamp": 1545324473
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Would merging rep + invariant end up putting concepts like lifetimes etc. into the rep chapter?</p>\n</blockquote>\n<p>as far as I can see, merging them leaves nothing to be said for validity invariants</p>",
        "id": 152269533,
        "sender_full_name": "RalfJ",
        "timestamp": 1545324491
    },
    {
        "content": "<p>that's why I think we shouldn't</p>",
        "id": 152269544,
        "sender_full_name": "RalfJ",
        "timestamp": 1545324498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> would it be possible to start linting such code ?</p>",
        "id": 152317325,
        "sender_full_name": "gnzlbg",
        "timestamp": 1545382929
    },
    {
        "content": "<p>which code?</p>",
        "id": 152317348,
        "sender_full_name": "RalfJ",
        "timestamp": 1545382992
    },
    {
        "content": "<blockquote>\n<p>packing into padding is impossible unfortunately; mem::swap would break: it overrides all bytes of both objects. so e.g. whatever &amp;mut b.a points to cannot overlap with anything packed</p>\n</blockquote>",
        "id": 152318834,
        "sender_full_name": "gnzlbg",
        "timestamp": 1545384854
    },
    {
        "content": "<p>i wish zulip would allow replying to messages within a thread, linking the message that its being replied to (EDIT: now there is an issue for that: <a href=\"https://github.com/zulip/zulip/issues/11105\" target=\"_blank\" title=\"https://github.com/zulip/zulip/issues/11105\">https://github.com/zulip/zulip/issues/11105</a>)</p>",
        "id": 152318838,
        "sender_full_name": "gnzlbg",
        "timestamp": 1545384877
    },
    {
        "content": "<p>absolutely zero way</p>",
        "id": 152319509,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1545385767
    },
    {
        "content": "<p>yeah no, that just breaks what references mean. I don't think it can be linted, even dynamically checking for it might be hard.</p>",
        "id": 152334287,
        "sender_full_name": "RalfJ",
        "timestamp": 1545403059
    },
    {
        "content": "<p>Are we feeling ok about the current state of <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/57\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/57\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/57</a> ?</p>",
        "id": 152560918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545843023
    }
]