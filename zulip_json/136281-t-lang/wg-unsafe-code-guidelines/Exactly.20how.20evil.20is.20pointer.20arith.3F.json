[
    {
        "content": "<p>Hello, if I have a slice of primitives obtained from valid Rust and I am determined to ignore builtin pointer methods, how many conniption fits does our compilation model have if I take the base pointer and then do pointer arithmetic to find items and read them, assuming my math is flawless and never leaves bounds? I know I could get stronger opts from using stuff like fn offset, and I know provenance makes things... Complicated... I just want to know more, because there are other conditions in my case that may make doing raw arithmetic somewhat compelling.</p>",
        "id": 241671209,
        "sender_full_name": "Jubilee",
        "timestamp": 1622952607
    },
    {
        "content": "<p>I think that's basically the same as <code>wrapping_offset</code>, so maybe see what that talks about? <a href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.wrapping_offset\">https://doc.rust-lang.org/nightly/std/primitive.pointer.html#method.wrapping_offset</a></p>",
        "id": 241671272,
        "sender_full_name": "scottmcm",
        "timestamp": 1622952694
    },
    {
        "content": "<p>Yeh, that is my current working assumption.</p>",
        "id": 241671313,
        "sender_full_name": "Jubilee",
        "timestamp": 1622952731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> it's a bit hard to say without concrete code, but in general if you have <code>x: &amp;mut [i32]</code>, and then do <code>x.as_mut_ptr()</code>, you are free to do ptr arithmetic on that raw pointer <em>within the bounds of the slice</em> (i.e., the length stored in the wide ptr <code>x</code> matters) as much as you want.  However, you must not use <code>x</code> any more -- the moment you use <code>x</code> again, all raw ptrs and everything transitively derived from them becomes invalid.</p>",
        "id": 241680394,
        "sender_full_name": "RalfJ",
        "timestamp": 1622968030
    },
    {
        "content": "<p>However, I am confused by \"basically the same as wrapping_offset\" -- if by \"pointer arithmetic\" you don't mean \"wrapping_offset\"/\"offset\", then what do you mean?</p>",
        "id": 241680450,
        "sender_full_name": "RalfJ",
        "timestamp": 1622968126
    },
    {
        "content": "<p>I mean that I don't want to individually call wrapping_offset four times on four pointers, I would like to cast the values into raw integers so I can do math on four integers at once, then cast back to pointers and read them. :^)</p>",
        "id": 241693656,
        "sender_full_name": "Jubilee",
        "timestamp": 1622988530
    },
    {
        "content": "<p>that number \"four\" suspiciously sounds like simd</p>",
        "id": 241694428,
        "sender_full_name": "Lokathor",
        "timestamp": 1622989669
    },
    {
        "content": "<p>Doing pointer arithmetic as integers is <em>fun</em>. If you ask me, <code>(p as usize)+4 as *mut T</code> is equivalent to <code>p.cast::&lt;u8&gt;().wrapping_add(4).cast::&lt;T&gt;()</code>, but idk what llvm will say (and the latter is fairly important).</p>",
        "id": 241695774,
        "sender_full_name": "Connor Horman",
        "timestamp": 1622991738
    },
    {
        "content": "<p>LLVM doesn't particularly care about the pointed-to types. It is more about the underlying objects, and how they are accessed (i.e. whether the access is aligned)</p>",
        "id": 241696393,
        "sender_full_name": "nagisa",
        "timestamp": 1622992675
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Exactly.20how.20evil.20is.20pointer.20arith.3F/near/241693656\">said</a>:</p>\n<blockquote>\n<p>I mean that I don't want to individually call wrapping_offset four times on four pointers, I would like to cast the values into raw integers so I can do math on four integers at once, then cast back to pointers and read them. :^)</p>\n</blockquote>\n<p>oh... that's not pointer arithmetic (in my book), that's integer arithmetic and integer-ptr casts. That is truly evil. ;)</p>",
        "id": 241698683,
        "sender_full_name": "RalfJ",
        "timestamp": 1622996204
    },
    {
        "content": "<p>but if you follow what I said above in terms of aliasing, you should be fine -- just make sure to do <code>slice.as_mut_ptr() as usize</code> to get a ptr that is valid for the entire slice, and turn that  into an int</p>",
        "id": 241699827,
        "sender_full_name": "RalfJ",
        "timestamp": 1622997965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"257758\">Connor Horman</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Exactly.20how.20evil.20is.20pointer.20arith.3F/near/241695774\">said</a>:</p>\n<blockquote>\n<p>Doing pointer arithmetic as integers is <em>fun</em>. If you ask me, <code>(p as usize)+4 as *mut T</code> is equivalent to <code>p.cast::&lt;u8&gt;().wrapping_add(4).cast::&lt;T&gt;()</code>, but idk what llvm will say (and the latter is fairly important).</p>\n</blockquote>\n<p>it's certainly not equivalent due to provenance issues (in particular, <code>wrapping_add</code> cannot be used to create a valid ptr across allocation boundaries)</p>",
        "id": 241699830,
        "sender_full_name": "RalfJ",
        "timestamp": 1622997967
    },
    {
        "content": "<p>round-tripping through integers loses provenance; <code>wrapping_offset</code> preserves provenance</p>",
        "id": 241699836,
        "sender_full_name": "RalfJ",
        "timestamp": 1622998002
    },
    {
        "content": "<p>Alright! I am definitely doing that (well, specifically I am using <code>slice.as_ptr()</code> when only reading and <code>mutable_slice.as_mut_ptr()</code> when writing), so we're good then.<br>\nIdeally I would have a way to assert I am preserving provenance while still doing SIMD math on pointers, but atm I don't care too much. This is an MVP, baby!</p>",
        "id": 241701471,
        "sender_full_name": "Jubilee",
        "timestamp": 1623000400
    },
    {
        "content": "<p>in my dream world, we'd replace <code>int as *mut T</code> by an operation <code>int_to_ptr_with_provenance(addr: usize, provenance: *mut T) -&gt; *mut T</code>, so you could explicitly define the provenance of he new ptr, and moreover you would be <em>forced</em> to do so</p>",
        "id": 241701705,
        "sender_full_name": "RalfJ",
        "timestamp": 1623000737
    },
    {
        "content": "<p>that would solve basically all the problems that integer-pointer-casts are causing in formal memory models^^</p>",
        "id": 241701713,
        "sender_full_name": "RalfJ",
        "timestamp": 1623000756
    },
    {
        "content": "<p>(we can in fact implement this operation in rust, but as long as the no-provenance cast also still exists, that doesn't help simplify anything)</p>",
        "id": 241701736,
        "sender_full_name": "RalfJ",
        "timestamp": 1623000825
    },
    {
        "content": "<p>Yeah, there's a reason I'm not even exposing integer-to-ptr casts directly to users in our MVP API, tbh.</p>",
        "id": 241701778,
        "sender_full_name": "Jubilee",
        "timestamp": 1623000848
    },
    {
        "content": "<p>yeah that sounds like it'd be crazy hard to use correctly^^</p>",
        "id": 241701787,
        "sender_full_name": "RalfJ",
        "timestamp": 1623000876
    },
    {
        "content": "<p>Just the safe version that has <strong>my</strong> demonic power in the code. <span aria-label=\"smiling imp\" class=\"emoji emoji-1f608\" role=\"img\" title=\"smiling imp\">:smiling_imp:</span></p>",
        "id": 241701788,
        "sender_full_name": "Jubilee",
        "timestamp": 1623000878
    },
    {
        "content": "<blockquote>\n<p>Alright! I am definitely doing that (well, specifically I am using slice.as_ptr() when only reading and mutable_slice.as_mut_ptr() when writing), so we're good then.</p>\n</blockquote>\n<p>and not using the original <code>mutable_slice</code> <em>at all</em> until you are done with all the integers you got there, I hope :)</p>",
        "id": 241701800,
        "sender_full_name": "RalfJ",
        "timestamp": 1623000912
    },
    {
        "content": "<p>oh yeah, it begins and ends inside the function.</p>",
        "id": 241701806,
        "sender_full_name": "Jubilee",
        "timestamp": 1623000934
    },
    {
        "content": "<p>what I mean is, even <code>mutable_slice.len()</code> is deadly</p>",
        "id": 241701807,
        "sender_full_name": "RalfJ",
        "timestamp": 1623000946
    },
    {
        "content": "<p>I actually generate the mask first.</p>",
        "id": 241701847,
        "sender_full_name": "Jubilee",
        "timestamp": 1623000967
    },
    {
        "content": "<p>not sure what that means, but the usual pattern is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mutable_slice</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mutable_slice</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"c1\">// now just use 'len'</span>\n</code></pre></div>\n<p>the order of these two <code>let</code> matters</p>",
        "id": 241701853,
        "sender_full_name": "RalfJ",
        "timestamp": 1623001001
    },
    {
        "content": "<p>(in Stacked Borrows. there might be better aliasing models in the glorious future that are less sensitive.)</p>",
        "id": 241701860,
        "sender_full_name": "RalfJ",
        "timestamp": 1623001028
    },
    {
        "content": "<p>yeah! Okay so the mask is the thing that is derived from <code>.len()</code>, and it tells me which of the pointers I'm about to create are going to be readable/writeable.</p>",
        "id": 241701864,
        "sender_full_name": "Jubilee",
        "timestamp": 1623001033
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Exactly.20how.20evil.20is.20pointer.20arith.3F/near/241696393\">said</a>:</p>\n<blockquote>\n<p>LLVM doesn't particularly care about the pointed-to types. It is more about the underlying objects, and how they are accessed (i.e. whether the access is aligned)</p>\n</blockquote>\n<p>FWIW It looks like llvm doesn't auto-vectorize pointer addition: <a href=\"https://godbolt.org/z/fG65fb7PE\">https://godbolt.org/z/fG65fb7PE</a></p>",
        "id": 241702153,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1623001560
    },
    {
        "content": "<p>And that is why I am bothering to do a vector add and pointer cast, yes.</p>",
        "id": 241702205,
        "sender_full_name": "Jubilee",
        "timestamp": 1623001607
    },
    {
        "content": "<p>The actual reads/writes have all of Rust's usual safety guarantees in place because they're from/to a proper slice that the user has presumably obtained in a \"lawful\" way, and if they don't that's their problem. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 241702277,
        "sender_full_name": "Jubilee",
        "timestamp": 1623001694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Exactly.20how.20evil.20is.20pointer.20arith.3F/near/241702153\">said</a>:</p>\n<blockquote>\n<p>FWIW It looks like llvm doesn't auto-vectorize pointer addition: <a href=\"https://godbolt.org/z/fG65fb7PE\">https://godbolt.org/z/fG65fb7PE</a></p>\n</blockquote>\n<p>Seems quite plausible. pointer offset is not an integer addition, its a gep(i), and that doesn't have a variant that would generate multiple results at once.</p>",
        "id": 241703043,
        "sender_full_name": "nagisa",
        "timestamp": 1623002873
    },
    {
        "content": "<p>well:</p>\n<h3>‘getelementptr’ Instruction</h3>\n<h4>Syntax:</h4>\n<div class=\"codehilite\" data-code-language=\"ABNF\"><pre><span></span><code>&lt;<span class=\"nc\">result</span>&gt; <span class=\"o\">=</span> <span class=\"nc\">getelementptr</span> &lt;<span class=\"nc\">ty</span>&gt;, &lt;<span class=\"nc\">ty</span>&gt;<span class=\"o\">*</span> &lt;<span class=\"nc\">ptrval</span>&gt;{, <span class=\"p\">[</span><span class=\"nc\">inrange</span><span class=\"p\">]</span> &lt;<span class=\"nc\">ty</span>&gt; &lt;<span class=\"nc\">idx</span>&gt;}<span class=\"o\">*</span>\n&lt;<span class=\"nc\">result</span>&gt; <span class=\"o\">=</span> <span class=\"nc\">getelementptr</span> <span class=\"nc\">inbounds</span> &lt;<span class=\"nc\">ty</span>&gt;, &lt;<span class=\"nc\">ty</span>&gt;<span class=\"o\">*</span> &lt;<span class=\"nc\">ptrval</span>&gt;{, <span class=\"p\">[</span><span class=\"nc\">inrange</span><span class=\"p\">]</span> &lt;<span class=\"nc\">ty</span>&gt; &lt;<span class=\"nc\">idx</span>&gt;}<span class=\"o\">*</span>\n&lt;<span class=\"nc\">result</span>&gt; <span class=\"o\">=</span> <span class=\"nc\">getelementptr</span> &lt;<span class=\"nc\">ty</span>&gt;, &lt;<span class=\"nc\">ptr</span> <span class=\"nc\">vector</span>&gt; &lt;<span class=\"nc\">ptrval</span>&gt;, <span class=\"p\">[</span><span class=\"nc\">inrange</span><span class=\"p\">]</span> &lt;<span class=\"nc\">vector</span> <span class=\"nc\">index</span> <span class=\"nc\">type</span>&gt; &lt;<span class=\"nc\">idx</span>&gt;\n</code></pre></div>\n<h4>Overview:</h4>\n<p>The ‘getelementptr’ instruction is used to get the address of a subelement of an aggregate data structure. It performs address calculation only and does not access memory. The instruction <em>can also be used to calculate a vector of such addresses</em>.</p>",
        "id": 241704177,
        "sender_full_name": "Jubilee",
        "timestamp": 1623004218
    },
    {
        "content": "<p>your 5s faster than me...I was just about to post that</p>",
        "id": 241704195,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623004258
    },
    {
        "content": "<p>seems like we need <code>simd_wrapping_offset</code> and <code>simd_offset</code> intrinsics</p>",
        "id": 241704289,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623004330
    },
    {
        "content": "<p><del>Might not need new intrinsics, just to make the existing ones work when passed vector types.</del></p>",
        "id": 241705651,
        "sender_full_name": "scottmcm",
        "timestamp": 1623006000
    },
    {
        "content": "<p>Oh, never mind, offset takes <code>*const T</code>, not just <code>T</code>.  New ones, then.</p>",
        "id": 241705707,
        "sender_full_name": "scottmcm",
        "timestamp": 1623006039
    },
    {
        "content": "<p>yeah, I was about to say. I am pretty sure pointer manipulation is its own particular internal intrinsic in rustc already.</p>",
        "id": 241705708,
        "sender_full_name": "Jubilee",
        "timestamp": 1623006043
    },
    {
        "content": "<p>huh, first time I see this</p>",
        "id": 241707073,
        "sender_full_name": "nagisa",
        "timestamp": 1623007908
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> looks like it exists for ever.</p>",
        "id": 241707163,
        "sender_full_name": "nagisa",
        "timestamp": 1623008016
    },
    {
        "content": "<p>Oh, but there's no inbounds version of this, though.</p>",
        "id": 241707308,
        "sender_full_name": "nagisa",
        "timestamp": 1623008258
    },
    {
        "content": "<p>So you would only be able to make a wrapping_offset equivalent, and not the regular offset.</p>",
        "id": 241707362,
        "sender_full_name": "nagisa",
        "timestamp": 1623008296
    },
    {
        "content": "<p>You could probably still make <code>.offset</code>, <code>gep</code> is a strict superset of <code>gep inbounds</code> in llvm, IIRC.</p>",
        "id": 241707819,
        "sender_full_name": "Connor Horman",
        "timestamp": 1623009049
    },
    {
        "content": "<p>In terms of situations where it is applicable, yes. But it would also penalize alias analysis significantly. To the point I bet that in most cases just using scalar gepi would still be more beneficial.</p>",
        "id": 241707964,
        "sender_full_name": "nagisa",
        "timestamp": 1623009262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> Out of curiosity, MVP API for what?</p>",
        "id": 241709698,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623011863
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Exactly.20how.20evil.20is.20pointer.20arith.3F/near/241707308\">said</a>:</p>\n<blockquote>\n<p>Oh, but there's no inbounds version of this, though.</p>\n</blockquote>\n<p>That's not true, they just don't have an example for <code>inbounds</code> on a vector of pointers. The docs specifically mention:</p>\n<blockquote>\n<p>In cases where the base is a vector of pointers, the inbounds keyword applies to each of the computations element-wise.</p>\n</blockquote>",
        "id": 241710620,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1623013210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Exactly.20how.20evil.20is.20pointer.20arith.3F/near/241709698\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> Out of curiosity, MVP API for what?</p>\n</blockquote>\n<p>presumably the Portable SIMD, some sort of scatter/gather related work.</p>",
        "id": 241727984,
        "sender_full_name": "Lokathor",
        "timestamp": 1623040639
    }
]