[
    {
        "content": "<p>Is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Is this an access?</span>\n</pre></div>\n\n\n<p>What about:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>: <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">ptr</span>::<span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Is this an access?</span>\n</pre></div>",
        "id": 159268049,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550998753
    },
    {
        "content": "<p>I thought that reading or writing some memory are accesses, but reading / writing no memory are not accesses. But that would make dereferencing a pointer to a ZST not an access.</p>\n<p>This is why I don't understand the discussion about whether accesses to ZSTs are valid. I thought these weren't accesses at all. </p>\n<p>If dereferencing a pointer to a ZST accesses something, what does it access? It does not access any memory or place.</p>",
        "id": 159268118,
        "sender_full_name": "gnzlbg",
        "timestamp": 1550998912
    },
    {
        "content": "<blockquote>\n<p><code>let y: () = *x; // Is this an access?</code></p>\n</blockquote>\n<p>this is a zero-sized access. the details for that are still somewhat unclear, see <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/93\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/93\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues/93</a></p>",
        "id": 159272700,
        "sender_full_name": "RalfJ",
        "timestamp": 1551007851
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>let (x, y): (*mut i32, *mut i32);\nptr::copy(x, y, 0); // Is this an access?\n</pre></div>\n\n\n<p>no, this is not. but the pointer must still be aligned and non-NULL.</p>",
        "id": 159272764,
        "sender_full_name": "RalfJ",
        "timestamp": 1551008020
    },
    {
        "content": "<p>but yes, we could also rule that zero-sized \"accesses\" nor not accesses. and that's in fact what Miri implements. (Note that the ptr <em>does</em> need to be aligned though, the alignment check happens before actually doing an access.)</p>",
        "id": 159272847,
        "sender_full_name": "RalfJ",
        "timestamp": 1551008162
    },
    {
        "content": "<p>but that still leaves the problem with zero-offset GEP.  If zero-offset GEP is <em>always valid</em>, then I am fine also making zero-sized accesses \"not really accesses\". but imposing requirements on a zero-offset GEP and NOT on a zero-sized access, that is inconsistent IMO.</p>",
        "id": 159272888,
        "sender_full_name": "RalfJ",
        "timestamp": 1551008267
    },
    {
        "content": "<p>Hm, just to check I follow. Iff a dereference of a pointer to a ZST is an access, but <code>ptr::copy(x, y, 0)</code> is not, then that is because <code>ptr::copy</code> checks the length first (<code>0</code>), and dereferences no pointers, therefore it performs no accesses ?</p>",
        "id": 159276003,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551014443
    },
    {
        "content": "<p>hm, yeah that's how I was imagining it. but I do agree that it is also somewhat inconsistent.</p>",
        "id": 159279934,
        "sender_full_name": "RalfJ",
        "timestamp": 1551022104
    },
    {
        "content": "<p>the best solution to me seems to be to allow getelementptr-by-0 on all pointers, but I am not sure if LLVM is happy with that.</p>",
        "id": 159279951,
        "sender_full_name": "RalfJ",
        "timestamp": 1551022130
    },
    {
        "content": "<p>I think I can follow the reasoning: pointer dereferences are the primitive operation here, not <code>copy</code>. <br>\nI somehow expected it to be the other way around: pointer dereferences are not the primitive operation, memory copying is. A pointer dereference just copies memory from some address somewhere else.</p>",
        "id": 159320981,
        "sender_full_name": "gnzlbg",
        "timestamp": 1551083533
    }
]