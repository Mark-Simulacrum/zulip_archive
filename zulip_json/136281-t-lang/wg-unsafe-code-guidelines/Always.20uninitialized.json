[
    {
        "content": "<p>Can I use:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">type</span> <span class=\"nc\">AlwaysUninit</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MaybeUninit</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>as a safe Always  Uninitialized wrapper over a T ?</p>",
        "id": 172304039,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564748974
    },
    {
        "content": "<p>If you mean that nobody can ever (safely) write anything to the <code>T</code> bytes, then no. For example, with sufficient placement/RVO smarts, <code>let x: AlwaysUninit&lt;String&gt; = (\"foo\".into(), panic!())</code> not only writes a <code>String</code> to <code>x</code>, it even cleans it up afterwards.</p>",
        "id": 172304211,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564749146
    },
    {
        "content": "<p>I only want to prevent reads via <code>MaybeUninit::assume_init</code></p>",
        "id": 172304245,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564749194
    },
    {
        "content": "<p>If someone wants to do anything more complex to actually read or write to the bytes, they should be able to</p>",
        "id": 172304256,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564749225
    },
    {
        "content": "<p>Yeah, it is valid and the call will panic</p>",
        "id": 172304928,
        "sender_full_name": "nagisa",
        "timestamp": 1564749858
    },
    {
        "content": "<p>Many <code>MaybeUninit</code> by-value methods should compile down to a panic when its <code>T</code> is uninhabited, which is true in this case.</p>",
        "id": 172304963,
        "sender_full_name": "nagisa",
        "timestamp": 1564749903
    },
    {
        "content": "<p>Now this made me wonder… did we reach a decision on unhabitedness of <code>&amp;!</code>?</p>",
        "id": 172305045,
        "sender_full_name": "nagisa",
        "timestamp": 1564749976
    },
    {
        "content": "<blockquote>\n<p>Now this made me wonder… did we reach a decision on unhabitedness of &amp;!?</p>\n</blockquote>\n<p>No, that is <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/77\">https://github.com/rust-lang/unsafe-code-guidelines/issues/77</a></p>",
        "id": 172306776,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564751366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I do not understand what you are trying to achieve</p>",
        "id": 172322283,
        "sender_full_name": "RalfJ",
        "timestamp": 1564763251
    },
    {
        "content": "<p><code>assume_init</code> is unsafe so if you are worried about a safe wrapper, you can ignore it</p>",
        "id": 172322311,
        "sender_full_name": "RalfJ",
        "timestamp": 1564763279
    },
    {
        "content": "<p>I actually needed a type to express that something is always uninitialized</p>",
        "id": 172412615,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564850144
    },
    {
        "content": "<p>You said so from the start but it's not clear what that means or what you want it for (I know from discord you were thinking about manually adding padding to a type but what exactly do you intend to accomplish by \"expressing\" this?)</p>",
        "id": 172412659,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564850223
    },
    {
        "content": "<p>Its \"explicit\" padding for <code>repr(C)</code> types, there is never a need to initialize that to anything, nor to try to <code>::assume_init</code> it, so none of that is needed.</p>",
        "id": 172415099,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564854554
    },
    {
        "content": "<p>sounds like you just want a newtype around <code>[MaybeUninit&lt;u8&gt;; N]</code>?</p>",
        "id": 172416741,
        "sender_full_name": "RalfJ",
        "timestamp": 1564857694
    },
    {
        "content": "<p>no type will have a validity invariant \"must be uninitialized\"</p>",
        "id": 172416742,
        "sender_full_name": "RalfJ",
        "timestamp": 1564857710
    },
    {
        "content": "<p>and the safety invariant is up to you with a newtype</p>",
        "id": 172416745,
        "sender_full_name": "RalfJ",
        "timestamp": 1564857720
    },
    {
        "content": "<p>but I also cannot imagine a situation where uninitialized memory is okay but initialized memory is not</p>",
        "id": 172416786,
        "sender_full_name": "RalfJ",
        "timestamp": 1564857739
    },
    {
        "content": "<p>this includes padding</p>",
        "id": 172416788,
        "sender_full_name": "RalfJ",
        "timestamp": 1564857745
    },
    {
        "content": "<p>in which case plain <code>[MaybeUninit&lt;u8&gt;; N]</code> would do it</p>",
        "id": 172416793,
        "sender_full_name": "RalfJ",
        "timestamp": 1564857762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I just ended with a wrapper <code>struct Padding&lt;T&gt;(MaybeUninit&lt;T&gt;);</code> that does not expose the private field, has no <code>assume_init</code>, etc.</p>",
        "id": 172486730,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564992888
    },
    {
        "content": "<p>seems reasonable</p>",
        "id": 172519591,
        "sender_full_name": "RalfJ",
        "timestamp": 1565024267
    }
]