[
    {
        "content": "<p>Since <code>Box&lt;T, A&gt;</code> is not <code>#[repr(C)]</code>, transmuting between <code>Box&lt;T, A&gt;</code> and <code>Box&lt;U, A&gt;</code> where <code>U</code> has the same <code>Layout</code> as <code>T</code> (<em>e.g.</em>, <code>U = MU&lt;T&gt;</code> or <code>U = MD&lt;T&gt;</code>) is not well-defined (unless <code>A</code> is a ZST)</p>\n<p>However, there seem to be instances where having this guarantee could be very useful, or even \"needed\".  For instance, in <a href=\"https://github.com/rust-lang/rust/pull/85577/files/a29b1959d80f8eb95a274c95f28f50c49ce2cd75#r639629318\">https://github.com/rust-lang/rust/pull/85577/files/a29b1959d80f8eb95a274c95f28f50c49ce2cd75#r639629318</a>, we end up in a tricky situation: we'd like to do <code>**boxed = value;</code>, except that <code>boxed</code>'s pointee is not <code>Sized</code> (but we know it has the same layout as <code>value</code>'s, and that <code>value</code> can coerce to the <code>?Sized</code> type of the pointee).</p>\n<p>So, to \"implement\" this operation, given a <code>boxed: &amp;mut Box&lt;T, A&gt;</code>, a <code>drop_in_place</code> of  <code>**boxed</code> is performed, and <code>finally</code> (through a drop-guard), the (now potentially dropped) pointee is overwritten with <code>value</code> (and the pointer itself is also overwritten with one having correct metadata).</p>\n<p>The issue lies in that drop-guard: it needs to capture a <code>&amp;mut Box&lt;T, A&gt;</code>, except that since <code>T</code> may have been dropped, I suggested that <code>&amp;mut Box&lt;MD&lt;T&gt;, A&gt;</code> be used instead. But, indeed, such cast can only be done if we know these two have the same layout, which is not guaranteed for a non-ZST <code>A</code>llocator.</p>",
        "id": 240330357,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1622038239
    },
    {
        "content": "<p>MU = MaybeUninit<br>\nMD = Manually Drop<br>\n(took me a minute to figure that part out)</p>",
        "id": 240331789,
        "sender_full_name": "Lokathor",
        "timestamp": 1622038825
    },
    {
        "content": "<p>Sorry <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 240331932,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1622038879
    },
    {
        "content": "<p>For <code>A=Global</code> specifically, wouldn't the transmute be guaranteed? Layout-compatibility is an equivalence relation, and Box&lt;T,Global&gt; is layout-compatible with <code>*mut T</code>.</p>",
        "id": 240332180,
        "sender_full_name": "Connor Horman",
        "timestamp": 1622038957
    },
    {
        "content": "<p>Though that wouldn't help the general case from <code>allocator_api</code>.</p>",
        "id": 240332250,
        "sender_full_name": "Connor Horman",
        "timestamp": 1622038986
    },
    {
        "content": "<p>Yes, for <code>A = Global</code> (and maybe more generally for when <code>A</code> is a <code>Zst</code>), the transmute is well-defined. But the PR in question was indeed using the <code>allocator_api</code></p>",
        "id": 240333194,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1622039364
    },
    {
        "content": "<p>Yeah that sounds like a reasonable guarantee to make (and I think it will currently be true in practice)</p>",
        "id": 240698297,
        "sender_full_name": "RalfJ",
        "timestamp": 1622289116
    }
]