[
    {
        "content": "<p>Hello friends! Any agenda items?</p>",
        "id": 148796685,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543507474
    },
    {
        "content": "<p>One thing that came up in the representation of pointers...</p>",
        "id": 148797613,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543508167
    },
    {
        "content": "<p>the defns of \"representation\", \"validity\" and \"safety\".</p>",
        "id": 148797639,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543508194
    },
    {
        "content": "<p>If we're using the defns of <a href=\"https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html\">https://www.ralfj.de/blog/2018/08/22/two-kinds-of-invariants.html</a> then we should say so somewhere!</p>",
        "id": 148797678,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543508248
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"810\">@WG-unsafe-code-guidelines</span></p>",
        "id": 148797679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543508248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> sounds like something to pop in the introduction</p>",
        "id": 148797703,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543508277
    },
    {
        "content": "<p>Also, are we okay with representation depending on validity?</p>",
        "id": 148797706,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543508281
    },
    {
        "content": "<p>which i can do</p>",
        "id": 148797710,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543508282
    },
    {
        "content": "<p>i think representation and validity will be combined, but we wanted the discussions to be separate</p>",
        "id": 148797766,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543508303
    },
    {
        "content": "<p>I think that was the whole <em>point</em> of validity? (to help us figure out what repr optimizations we could do)</p>",
        "id": 148797783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543508316
    },
    {
        "content": "<p>I think validity on a single type level depends on representation</p>",
        "id": 148797818,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543508353
    },
    {
        "content": "<p>and representation on a sum type level depends on validity of sub-types</p>",
        "id": 148797833,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543508376
    },
    {
        "content": "<p>I guess what I mean is that they are intertwined; e.g., we can optimize <code>Option&lt;&amp;T&gt;</code> to use NULL because the repr invariant assures it can never be NULL</p>",
        "id": 148797850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543508393
    },
    {
        "content": "<p>(not the right word, but I can't think of a better one - member types, maybe?)</p>",
        "id": 148797852,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543508395
    },
    {
        "content": "<p>Yes, the problem is that validity of references includes being dereferenceable, so representation now depends on the state of all memory.</p>",
        "id": 148797923,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543508441
    },
    {
        "content": "<p>no, validity depends on the state of all memory</p>",
        "id": 148797934,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543508459
    },
    {
        "content": "<p>representation does not</p>",
        "id": 148797943,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543508465
    },
    {
        "content": "<p>I guess you could say that there is some subset of validity ... \"representation validity\" or something.</p>",
        "id": 148797961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543508492
    },
    {
        "content": "<p>I think that what <span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> meant here is that the definitions of the terms \"representation\", \"validity\", and \"safety\", should be in the introduction - otherwise it is very hard to follow along.</p>",
        "id": 148797964,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543508493
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> yeah</p>",
        "id": 148797979,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543508516
    },
    {
        "content": "<p>This is independent from whether we decide to combine representation and validity or not</p>",
        "id": 148797984,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543508521
    },
    {
        "content": "<p>yes, makes sense, and it seems like it may take a bit of back and forth to settle precisely how they are layered :)</p>",
        "id": 148798022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543508524
    },
    {
        "content": "<p>and some of this layering depends on decisions we have yet to make</p>",
        "id": 148798040,
        "sender_full_name": "RalfJ",
        "timestamp": 1543508553
    },
    {
        "content": "<p>i'll try to get the intro submitted--it will take liberally from both gankro's and ralf's posts</p>",
        "id": 148798043,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543508555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, something like \"bitstring validity\" which just says whether a sequence of bits is possibly valid for <code>T</code> without looking at memory.</p>",
        "id": 148798047,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543508563
    },
    {
        "content": "<p>like, I know some people want to make <code>&amp;T</code> valid only if it points to <em>valid</em> data</p>",
        "id": 148798048,
        "sender_full_name": "RalfJ",
        "timestamp": 1543508565
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, something like \"bitstring validity\" which just says whether a sequence of bits is possibly valid for <code>T</code> without looking at memory.</p>\n</blockquote>\n<p>I still claim this is not a useful notion and only confusing. in a stateful language such as Rust, <em>all</em> invariants, statements, things you can say may depend on memory. that's just something to get used to. if you dont like it, use Haskell. ;)</p>",
        "id": 148798080,
        "sender_full_name": "RalfJ",
        "timestamp": 1543508616
    },
    {
        "content": "<p>I think it is worth to have some \"loose\" definitions for now, we can revisit them later, but it comes over and over again that discussions get mixed because we can tell these really appart</p>",
        "id": 148798095,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543508642
    },
    {
        "content": "<p>So a value of type <code>&amp;T</code>would be bitstring-valid if it's non-zero and a multiple of <code>T</code>s alignment.</p>",
        "id": 148798121,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543508643
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> here</p>",
        "id": 148798143,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543508651
    },
    {
        "content": "<p>and if you <em>really</em> insist, your \"bitstring validity\" is just \"there exists a memory such that this is valid\". there are no separate choices to be made.</p>",
        "id": 148798177,
        "sender_full_name": "RalfJ",
        "timestamp": 1543508679
    },
    {
        "content": "<p>The niche optimization just depends on bitstring validity.</p>",
        "id": 148798189,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543508694
    },
    {
        "content": "<p>So we'd have repr depending on \"bitstring validity\" rather than all of validity.</p>",
        "id": 148798221,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543508726
    },
    {
        "content": "<blockquote>\n<p>The niche optimization just depends on bitstring validity.</p>\n</blockquote>\n<p>hm. I can see how you see it that way, though I do not think of it in these terms</p>",
        "id": 148798224,
        "sender_full_name": "RalfJ",
        "timestamp": 1543508731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126854\">@avadacatavra</span> did we have an agenda?</p>",
        "id": 148798231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543508739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i wanted to see if anyone had agenda items</p>",
        "id": 148798245,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543508759
    },
    {
        "content": "<p>(I know I failed utterly to do the things I wanted to do last week, which I will blame on being laid out sick the last 2 days)</p>",
        "id": 148798247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543508761
    },
    {
        "content": "<p>Ok, let's back up a level</p>",
        "id": 148798292,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543508776
    },
    {
        "content": "<p>I have one agenda item</p>",
        "id": 148798296,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543508783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126854\">@avadacatavra</span> please go over the agenda, we can discuss my item at the end if there is time (it's the bool stuff)</p>",
        "id": 148798351,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543508872
    },
    {
        "content": "<p>Agenda:</p>\n<ul>\n<li>repr discussions:<ul>\n<li>int/fp rough draft submitted (i saw that there's been a lot of discussion but haven't read it)</li>\n<li>vector types</li>\n<li>function pointers</li>\n<li>pointers/references</li>\n<li>enum</li>\n<li>introduction (i'm working on it)</li>\n</ul>\n</li>\n<li>validity discussions: have we actually started them yet?</li>\n<li>I've rebooted the formal verification working group if anyone here is interested in that</li>\n</ul>",
        "id": 148798404,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543508907
    },
    {
        "content": "<p>is there nesting to that list ? :)</p>",
        "id": 148798437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543508950
    },
    {
        "content": "<blockquote>\n<p>is there nesting to that list ? :)</p>\n</blockquote>\n<p>...i'm working on it....</p>",
        "id": 148798479,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543508993
    },
    {
        "content": "<p>:D</p>",
        "id": 148798542,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509008
    },
    {
        "content": "<p>/me thinks that was unnecessarily difficult</p>",
        "id": 148798558,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543509025
    },
    {
        "content": "<p>Do we have any other repr writeups needed?</p>",
        "id": 148798589,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543509062
    },
    {
        "content": "<p>I sort of recall agreeing to do \"enum\"?</p>",
        "id": 148798599,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509073
    },
    {
        "content": "<p>Pointers</p>",
        "id": 148798601,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543509074
    },
    {
        "content": "<p>but I didn't :P</p>",
        "id": 148798607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509082
    },
    {
        "content": "<p><a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues?q=is%3Aissue+is%3Aopen+label%3Atopic-repr\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues?q=is%3Aissue+is%3Aopen+label%3Atopic-repr\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues?q=is%3Aissue+is%3Aopen+label%3Atopic-repr</a></p>",
        "id": 148798609,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509090
    },
    {
        "content": "<p>references?</p>",
        "id": 148798610,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509092
    },
    {
        "content": "<p>doesnt even have someone assigned yet</p>",
        "id": 148798616,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509097
    },
    {
        "content": "<p>I got assigned it</p>",
        "id": 148798626,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543509110
    },
    {
        "content": "<p>enums is the big one, the one from pointers, we might want to move it into <code>int</code>/<code>fp</code>/..., it might be \"trivial\"</p>",
        "id": 148798628,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509113
    },
    {
        "content": "<p>and then I guess the other open issues should get an \"postponed / open question\" label or so?</p>",
        "id": 148798678,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509134
    },
    {
        "content": "<p><a href=\"https://github.com/asajeffrey/unsafe-code-guidelines/blob/repr-pointers/reference/src/representation/pointers.md\" target=\"_blank\" title=\"https://github.com/asajeffrey/unsafe-code-guidelines/blob/repr-pointers/reference/src/representation/pointers.md\">https://github.com/asajeffrey/unsafe-code-guidelines/blob/repr-pointers/reference/src/representation/pointers.md</a></p>",
        "id": 148798682,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543509139
    },
    {
        "content": "<p>ah right we cannot assign alan because he's not a member of the repo or so? can we change that?^^</p>",
        "id": 148798700,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509165
    },
    {
        "content": "<p>It got bogged down with discssions of basic defns.</p>",
        "id": 148798716,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543509184
    },
    {
        "content": "<p>I can fix that</p>",
        "id": 148798720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> what is your GH username?</p>",
        "id": 148798741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span>  looks good, you might want to revise it now that we have hopefully clarified repr and validity, it should get a bit simpler if it only has to focus on repr, but don't throw the validity parts away, we'll need them soon :)</p>",
        "id": 148798747,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509225
    },
    {
        "content": "<p>also,, <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span>, I'll add you too</p>",
        "id": 148798749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509226
    },
    {
        "content": "<p>asajeffrey</p>",
        "id": 148798751,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543509232
    },
    {
        "content": "<p>woo look at us accomplishing things!</p>",
        "id": 148798803,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543509256
    },
    {
        "content": "<p>you both need to <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/invitations\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/invitations\">confirm with this link</a></p>",
        "id": 148798816,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509273
    },
    {
        "content": "<p>oh I gotta go or miss my bus, o7</p>",
        "id": 148798824,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1543509286
    },
    {
        "content": "<p>ok, so it seems like things are on track with the repr writeups</p>",
        "id": 148798826,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543509288
    },
    {
        "content": "<p>any repr writeups reading for merging?</p>",
        "id": 148798841,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509308
    },
    {
        "content": "<p>layout of vectors maybe, there are a couple of open questions</p>",
        "id": 148798847,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509325
    },
    {
        "content": "<p>I'm wondering if there is something we can say</p>",
        "id": 148798861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509360
    },
    {
        "content": "<p>about e.g. single variant structs</p>",
        "id": 148798904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509367
    },
    {
        "content": "<p>I sort of forget though, have to review</p>",
        "id": 148798910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509376
    },
    {
        "content": "<p>I feel like there was <em>some</em> basic minimum that a lot of folks rely on in practice anyhow, probably newtype layout</p>",
        "id": 148798917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509391
    },
    {
        "content": "<p>there is an issue open about homogeneous structs, of which single variant are a subset</p>",
        "id": 148798922,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509396
    },
    {
        "content": "<p>I created an open-question label for things we want to revisit</p>",
        "id": 148798926,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543509401
    },
    {
        "content": "<p>I added <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/50\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/50\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues/50</a></p>",
        "id": 148798946,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543509424
    },
    {
        "content": "<blockquote>\n<p>there is an issue open about homogeneous structs, of which single variant are a subset</p>\n</blockquote>\n<p>yes but I think the single variant may be something we could agree on <em>now</em></p>",
        "id": 148798955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509436
    },
    {
        "content": "<p>with homogeneity left for later</p>",
        "id": 148798961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you mean saying something in the spirit of <code>repr(transparent)</code> ?</p>",
        "id": 148798964,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509444
    },
    {
        "content": "<p>that was my impression at some point</p>",
        "id": 148798967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> just for layout I assume, not for ABI</p>",
        "id": 148798976,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509462
    },
    {
        "content": "<p>right</p>",
        "id": 148798980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509466
    },
    {
        "content": "<p><code>#[repr(transparent)]</code> would extend it to ABI</p>",
        "id": 148798986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509473
    },
    {
        "content": "<p>it's certainly true <em>now</em></p>",
        "id": 148798990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509479
    },
    {
        "content": "<p>so, you can transmute but not pass by value</p>",
        "id": 148798991,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509480
    },
    {
        "content": "<p>and I can't imagine it ever <em>not</em> being true</p>",
        "id": 148799033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509487
    },
    {
        "content": "<p>but then I guess that's the question :)</p>",
        "id": 148799048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509506
    },
    {
        "content": "<p>Is there a reason why saying that they have the same size and alignment is a bad idea?</p>",
        "id": 148799057,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509521
    },
    {
        "content": "<p>I guess that sort of implies also that it must start at offset 0 :)</p>",
        "id": 148799076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509542
    },
    {
        "content": "<p>but since it only has one element, there aren't any other offsets ? I don't recall if we allow <code>repr(Rust)</code> struct fields to start at a different offset than zero, probably we don't say anything about this anywhere, but in practice we don't</p>",
        "id": 148799102,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509601
    },
    {
        "content": "<p>right we're talking about committing to it</p>",
        "id": 148799163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509618
    },
    {
        "content": "<p>anyway I'll maybe propose it</p>",
        "id": 148799181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509646
    },
    {
        "content": "<p>sounds good to me--any further discussion can go in gh</p>",
        "id": 148799183,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543509648
    },
    {
        "content": "<p>We could open an issue to see if anyone has anything against that: <code>repr(Rust)</code> struct with one field have the field at offset zero, or in general</p>",
        "id": 148799186,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509651
    },
    {
        "content": "<p>is that something that should have an rfc?</p>",
        "id": 148799202,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543509664
    },
    {
        "content": "<p>I was going to open a PR</p>",
        "id": 148799206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509666
    },
    {
        "content": "<p>and link to it from the issues</p>",
        "id": 148799209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509671
    },
    {
        "content": "<p>to get feedback</p>",
        "id": 148799212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509675
    },
    {
        "content": "<p>seems like a minor edit to the struct section</p>",
        "id": 148799217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509681
    },
    {
        "content": "<p>that's even better</p>",
        "id": 148799219,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509685
    },
    {
        "content": "<p>we already have an issue for this: <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/34\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/34\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues/34</a></p>",
        "id": 148799238,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509716
    },
    {
        "content": "<p>ok, any other lingering things we should take care of in the repr discussion?</p>",
        "id": 148799289,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543509735
    },
    {
        "content": "<p><code>bool</code></p>",
        "id": 148799305,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> talk to me about bool</p>",
        "id": 148799324,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543509781
    },
    {
        "content": "<p>we have had some RFCs on the topic</p>",
        "id": 148799330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509783
    },
    {
        "content": "<p>the T-lang and T-compiler teams committed already to one thing, but we might want to do something that's potentially incompatible to that decision</p>",
        "id": 148799336,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509787
    },
    {
        "content": "<p>uh?</p>",
        "id": 148799347,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509798
    },
    {
        "content": "<p>I don't really think we can do that :)</p>",
        "id": 148799352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509807
    },
    {
        "content": "<p>basically the T-lang and T-compiler said that <code>bool</code> is equivalent to C <code>_Bool</code></p>",
        "id": 148799358,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509813
    },
    {
        "content": "<p>and we might want to go over that and say that <code>bool</code> has a size of <code>1</code>, <code>0 == true</code> and <code>1 == false</code></p>",
        "id": 148799428,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509844
    },
    {
        "content": "<p>i may have done a poor job of summarizing consensus etc -- i'm totally open to revisions</p>",
        "id": 148799432,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543509846
    },
    {
        "content": "<p>is this sort of stronger than C <code>_Bool</code>, in theory?</p>",
        "id": 148799452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509866
    },
    {
        "content": "<p>this wasn't raised in the issue, <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> luckily remember it in the PR</p>",
        "id": 148799462,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509873
    },
    {
        "content": "<p>in theory it is incompatible, in practice right now it might not matter, because that's how it is in all platforms that Rust supports</p>",
        "id": 148799489,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509901
    },
    {
        "content": "<p>so the concern here is that this will rule out porting Rust to platforms where C has a non-1-sized bool?</p>",
        "id": 148799499,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509908
    },
    {
        "content": "<p>no, that's something that we want to support</p>",
        "id": 148799508,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509922
    },
    {
        "content": "<p>(I thought I read somewhere than next-gen C or C++ will specify 0 and 1 for false and true but I might hallucinate)</p>",
        "id": 148799524,
        "sender_full_name": "RalfJ",
        "timestamp": 1543509938
    },
    {
        "content": "<blockquote>\n<p>this wasn't raised in the issue, <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> luckily remember it in the PR</p>\n</blockquote>\n<p>(which PR?)</p>",
        "id": 148799526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> i think the int/fp pr</p>",
        "id": 148799532,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543509955
    },
    {
        "content": "<p>ok</p>",
        "id": 148799536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543509959
    },
    {
        "content": "<p><a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/49#discussion_r236762111\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/49#discussion_r236762111\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/49#discussion_r236762111</a></p>",
        "id": 148799540,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543509963
    },
    {
        "content": "<p>we want people to use <code>bool</code> on C FFI, we don't want people to create a <code>c_bool</code> type due to \"portability paranoia\", so the goals are aligned with the T-Compiler and T-lang decisions</p>",
        "id": 148799601,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510006
    },
    {
        "content": "<p>we also might want to guarantee that <code>bool</code> has size 1, and its valid values as integers,</p>",
        "id": 148799624,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510033
    },
    {
        "content": "<p>and we don't want to break FFI with platforms in which C <code>_Bool</code> is different than ours</p>",
        "id": 148799629,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510047
    },
    {
        "content": "<p>yes ok I just skimmed it</p>",
        "id": 148799655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510077
    },
    {
        "content": "<p>so one idea here was to, if Rust ever supports such a platform, it could warn/error that bool is not a proper c type</p>",
        "id": 148799656,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510077
    },
    {
        "content": "<p>I suspect this same thing will arise in other contexts</p>",
        "id": 148799704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510090
    },
    {
        "content": "<p>if we want to say <code>bool == _Bool</code>, then we can't say much</p>",
        "id": 148799708,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510106
    },
    {
        "content": "<p>it feels like there is a kind of \"general rule of thumb\" we should settle</p>",
        "id": 148799709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510107
    },
    {
        "content": "<p>because <code>_Bool</code> is pretty much _implementation-defined_ in the C standard</p>",
        "id": 148799722,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510127
    },
    {
        "content": "<p>C20 and C++20 do want to guarantee that <code>0 == false</code> and <code>1 == true</code>, and maybe some day that it has size 1</p>",
        "id": 148799755,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510149
    },
    {
        "content": "<p>so why can't we just stick to \"like C\"?</p>",
        "id": 148799770,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510170
    },
    {
        "content": "<p>do you want me to raise this in a lang team meeting? tbh I don't remember what people felt from those prior discussions. I have a sense that the feeling was \"let's define to be something useful\" -- I think there is an interesting argument about which is the most \"useful\" here</p>",
        "id": 148799774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510175
    },
    {
        "content": "<p>for repr: size same as C<br>\nfor validity: the two bit patterns are the same as C's</p>",
        "id": 148799780,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510186
    },
    {
        "content": "<blockquote>\n<p>so why can't we just stick to \"like C\"?</p>\n</blockquote>\n<p>I think the reason is that people find C frustratingly vague</p>",
        "id": 148799786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510191
    },
    {
        "content": "<p>and wind up in practice relying on stronger things</p>",
        "id": 148799794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510201
    },
    {
        "content": "<p>at least that's what I got from the PR comments</p>",
        "id": 148799844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510206
    },
    {
        "content": "<p>I find all of this repr discussion frustratingly vague :P</p>",
        "id": 148799851,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510210
    },
    {
        "content": "<p>we can document what this means for the popular platforms</p>",
        "id": 148799868,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510234
    },
    {
        "content": "<p>I don't know, I think it is ok to say \"like <code>_Bool</code>\" now, and resolve this as we go</p>",
        "id": 148799872,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510239
    },
    {
        "content": "<p>is this something i should just put as a controversy?</p>",
        "id": 148799874,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510243
    },
    {
        "content": "<p>but if we want to guarantee anything else, we probably need to involve T-lang and T-compiler somehow</p>",
        "id": 148799887,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510256
    },
    {
        "content": "<p>and document what we've talked about here</p>",
        "id": 148799899,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510266
    },
    {
        "content": "<p>seems ok</p>",
        "id": 148799904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510271
    },
    {
        "content": "<p>I think maybe me and <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> and <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> could go over this again, and prepare a proposal, and discuss it in the next meeting</p>",
        "id": 148799911,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510281
    },
    {
        "content": "<p>I think we can either say \"like C\" and have a separation section that says \"on popular platforms, that means this\"</p>",
        "id": 148799916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510283
    },
    {
        "content": "<p>and say \"rust doesn't support other platforms yet so that's not <em>formally</em> decided\"</p>",
        "id": 148799920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510292
    },
    {
        "content": "<p>ok i'll revise the pr</p>",
        "id": 148799922,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510295
    },
    {
        "content": "<p>yes, the docs currently say that <code>bool</code> has size <code>1</code>, but they are not \"normative\"</p>",
        "id": 148799932,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510306
    },
    {
        "content": "<p>but yeah it feels like this will come up (e.g., with fn pointers) in a number of places -- or maybe just a handful :)</p>",
        "id": 148799934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510309
    },
    {
        "content": "<p>so, unless there's anything else,are we ready to chat about validity</p>",
        "id": 148799985,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510329
    },
    {
        "content": "<p>yay :D</p>",
        "id": 148799989,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510336
    },
    {
        "content": "<p>unfortunately I have pretty much 0 time for, uh, about a week...</p>",
        "id": 148799996,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126854\">@avadacatavra</span> state like <code>_Bool</code> in the PR, that's the safe bet, I'll open an issue just about this, and ping the relevant people, we should just resolve this before the RFC</p>",
        "id": 148799998,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510349
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> thanks :)</p>",
        "id": 148800008,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510359
    },
    {
        "content": "<p>what exactly did we want to say about \"validity\"?</p>",
        "id": 148800022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> will you be at all hands?</p>",
        "id": 148800024,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> mostly i want to see if we've started discussing it</p>",
        "id": 148800031,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126854\">@avadacatavra</span> which one? in Feb in Berlin, yes</p>",
        "id": 148800033,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510402
    },
    {
        "content": "<p>and if we haven't, what's our starting point</p>",
        "id": 148800035,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510406
    },
    {
        "content": "<p>ok</p>",
        "id": 148800039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510411
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"126854\">@avadacatavra</span> which one? in Feb in Berlin, yes</p>\n</blockquote>\n<p>i meant the one next week</p>",
        "id": 148800050,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510425
    },
    {
        "content": "<p>but not the mozilla one, no</p>",
        "id": 148800051,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510428
    },
    {
        "content": "<p>I have to write some documents for job applications... and I hate every minute of it^^</p>",
        "id": 148800093,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510444
    },
    {
        "content": "<p>Speaking of all hands:</p>\n<ul>\n<li>probably no meeting next week--Niko and I will be in Orlando (you'll be there, right <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>?) and there's no telling what scheduling will be like</li>\n<li>I won't be at the Rust all hands in Feb...</li>\n<li>because I'm moving back to the states at the end of February!</li>\n</ul>",
        "id": 148800157,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510511
    },
    {
        "content": "<p>The layout of vectors should be finished, and can be merged.</p>",
        "id": 148800175,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510532
    },
    {
        "content": "<p>yes, I'll be there next week, and I am sure we won't be avail for meeting...</p>",
        "id": 148800177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510534
    },
    {
        "content": "<p>congrats re: move (I guess?) =)</p>",
        "id": 148800181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510541
    },
    {
        "content": "<p>So, validity. Where will we start? (and then we'll adjorn)</p>",
        "id": 148800182,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510542
    },
    {
        "content": "<p>I guess we mostly need a PR to \"kick off\" the conversation</p>",
        "id": 148800201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510553
    },
    {
        "content": "<p>/me will be in your timezone!</p>",
        "id": 148800251,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510566
    },
    {
        "content": "<p>validity of ints etc. is probably the easiest place to start</p>",
        "id": 148800256,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510571
    },
    {
        "content": "<p>what would be the \"issues\"</p>",
        "id": 148800257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510574
    },
    {
        "content": "<p>all bit patterns are valid</p>",
        "id": 148800259,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510578
    },
    {
        "content": "<p><a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/50\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/50\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues/50</a> might be a good start.</p>",
        "id": 148800261,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543510579
    },
    {
        "content": "<p>validity of references is thorny, because they interact with pointers, niches, enum optimizations, DSTs, ...</p>",
        "id": 148800277,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510602
    },
    {
        "content": "<p>seems like <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> has some instinct for what has additional \"validity\" requires beyond the bit-pattern rules</p>",
        "id": 148800281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510607
    },
    {
        "content": "<p>I imagine they can rattle off a list for us :)</p>",
        "id": 148800290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510616
    },
    {
        "content": "<p>we probably need the enum layout part merged first before starting with validity of references</p>",
        "id": 148800293,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> would you be able to open a PR to open up the discussion?</p>",
        "id": 148800300,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510624
    },
    {
        "content": "<p>i'm happy to start discussion in issues before we finalize all writeup merges</p>",
        "id": 148800331,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510645
    },
    {
        "content": "<blockquote>\n<p>validity of ints etc. is probably the easiest place to start</p>\n</blockquote>\n<p>oh no ints are subtle</p>",
        "id": 148800335,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510647
    },
    {
        "content": "<p>because \"bit patterns\" include uninitialized data</p>",
        "id": 148800341,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510652
    },
    {
        "content": "<p>and we have to talk about whether we want to allow uninitialized ints</p>",
        "id": 148800352,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510661
    },
    {
        "content": "<p>why is it always the things that seem easiest that are the hardest.</p>",
        "id": 148800366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510676
    },
    {
        "content": "<p>Does \"validity\" include discussions of provenance?</p>",
        "id": 148800368,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543510678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> sounds good--pick a starting point you think is better :D</p>",
        "id": 148800372,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510680
    },
    {
        "content": "<blockquote>\n<p>Does \"validity\" include discussions of provenance?</p>\n</blockquote>\n<p>I hope not :D</p>",
        "id": 148800414,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> do we have an issue about provenance</p>",
        "id": 148800416,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510689
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> sounds good--pick a starting point you think is better :D</p>\n</blockquote>\n<p>structs are easy</p>",
        "id": 148800417,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510690
    },
    {
        "content": "<p>they are valid if all their fields are valid</p>",
        "id": 148800425,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510696
    },
    {
        "content": "<p>maybe that should be a proposed topic</p>",
        "id": 148800426,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510700
    },
    {
        "content": "<p>I hope enums will be easy, too^^</p>",
        "id": 148800428,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510701
    },
    {
        "content": "<p>Sounds good. So, this is what I have as a summary...</p>",
        "id": 148800448,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510720
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> would you be able to open a PR to open up the discussion?</p>\n</blockquote>\n<p>what would that PR do?</p>",
        "id": 148800454,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510724
    },
    {
        "content": "<p>that PR would propose the topics for further discussion</p>",
        "id": 148800461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510734
    },
    {
        "content": "<p>lay out common definitions</p>",
        "id": 148800465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510738
    },
    {
        "content": "<p>I dont think I should commit to doing anything before Wed or so</p>",
        "id": 148800479,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510746
    },
    {
        "content": "<p>state questions of things to resolve, tricky things, etc.</p>",
        "id": 148800484,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510756
    },
    {
        "content": "<p>probably not <em>urgent</em> as we still haven't really wrapped up validity</p>",
        "id": 148800486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510757
    },
    {
        "content": "<p>I really need to get these documents written^^</p>",
        "id": 148800489,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510759
    },
    {
        "content": "<p>though it'd be nice to do so by next meeting</p>",
        "id": 148800490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510761
    },
    {
        "content": "<p>but yeah sure I can write that thing, eventually</p>",
        "id": 148800507,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510793
    },
    {
        "content": "<p>maybe one of us can try to draft up an outline of interesting questions and run it by you for feedback?</p>",
        "id": 148800508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510793
    },
    {
        "content": "<p>I guess I can look at the repr one to see how they look like?</p>",
        "id": 148800560,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510804
    },
    {
        "content": "<p>1. Document what we've said about bool<br>\n2. I will do the intro<br>\n3. Niko will do enum<br>\n4. We'll try to get all the validity stuff merged<br>\n5. Ralf will start the validity discussion with a PR next week (possibly with assistance)<br>\n6. No meeting next week</p>",
        "id": 148800581,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510818
    },
    {
        "content": "<blockquote>\n<p>though it'd be nice to do so by next meeting</p>\n</blockquote>\n<p>that's in 2 weeks, right? easy</p>",
        "id": 148800582,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510819
    },
    {
        "content": "<blockquote>\n<p>I guess I can look at the repr one to see how they look like?</p>\n</blockquote>\n<p>yeah <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/5\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/5\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/5</a></p>",
        "id": 148800604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510849
    },
    {
        "content": "<p>/me disappears</p>",
        "id": 148800623,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510866
    },
    {
        "content": "<p>i can't next week <span class=\"emoji emoji-1f3c2\" title=\"snowboarder\">:snowboarder:</span></p>",
        "id": 148800629,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510871
    },
    {
        "content": "<p>/me will try to open some prs/edit them tonight/tomorrow</p>",
        "id": 148800637,
        "sender_full_name": "avadacatavra",
        "timestamp": 1543510879
    },
    {
        "content": "<p>I'll delete from the calendar item</p>",
        "id": 148800641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so you say single-field structs are trivial, but shouldnt ZST structs be even trivialler?</p>",
        "id": 148800702,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510923
    },
    {
        "content": "<p>heh you'd think so</p>",
        "id": 148800728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> not in C FFI</p>",
        "id": 148800736,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543510952
    },
    {
        "content": "<p>and really one depends on the other</p>",
        "id": 148800737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510954
    },
    {
        "content": "<p>i.e., is it \"single-field plus ZSTs?\"</p>",
        "id": 148800740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543510962
    },
    {
        "content": "<p>yeah</p>",
        "id": 148800745,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510969
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> not in C FFI</p>\n</blockquote>\n<p>we can leave <em>that</em> part open</p>",
        "id": 148800756,
        "sender_full_name": "RalfJ",
        "timestamp": 1543510979
    },
    {
        "content": "<p>but we are unliked to change what <code>repr(C)</code> does</p>",
        "id": 148800785,
        "sender_full_name": "RalfJ",
        "timestamp": 1543511001
    },
    {
        "content": "<p>so we might as well document it</p>",
        "id": 148800789,
        "sender_full_name": "RalfJ",
        "timestamp": 1543511006
    },
    {
        "content": "<p>I may decide it's not worth it, but it does feel like this is a real question that arises and I don't think there's really much <em>dispute</em> about the answer, just hesitation about how to word it</p>",
        "id": 148800793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543511011
    },
    {
        "content": "<p>and as niko said it's kind of needed for single-field stuff</p>",
        "id": 148800798,
        "sender_full_name": "RalfJ",
        "timestamp": 1543511014
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> should I mark both ZST and single-field as \"writeup needed\"?</p>",
        "id": 148800820,
        "sender_full_name": "RalfJ",
        "timestamp": 1543511037
    },
    {
        "content": "<p>I think so</p>",
        "id": 148800857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543511043
    },
    {
        "content": "<p>i gotta run, I guess it might be easier to discuss it with a PR that proposes what to do</p>",
        "id": 148800872,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543511050
    },
    {
        "content": "<p>or in an issue explaining the problems</p>",
        "id": 148800885,
        "sender_full_name": "gnzlbg",
        "timestamp": 1543511065
    },
    {
        "content": "<p>ack</p>",
        "id": 148800927,
        "sender_full_name": "RalfJ",
        "timestamp": 1543511114
    },
    {
        "content": "<p>see you!</p>",
        "id": 148800933,
        "sender_full_name": "RalfJ",
        "timestamp": 1543511116
    },
    {
        "content": "<p>I submitted <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/51\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/pull/51\">https://github.com/rust-rfcs/unsafe-code-guidelines/pull/51</a></p>",
        "id": 148801072,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1543511218
    }
]