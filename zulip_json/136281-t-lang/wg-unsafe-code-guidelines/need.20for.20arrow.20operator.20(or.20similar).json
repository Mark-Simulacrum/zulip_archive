[
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/need-for-operator-for-unsafe-code-guidelines/10022\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/need-for-operator-for-unsafe-code-guidelines/10022\">https://internals.rust-lang.org/t/need-for-operator-for-unsafe-code-guidelines/10022</a></p>",
        "id": 164994461,
        "sender_full_name": "Gankra",
        "timestamp": 1557158794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^</p>",
        "id": 164994465,
        "sender_full_name": "Gankra",
        "timestamp": 1557158800
    },
    {
        "content": "<p>Yes yes please!</p>",
        "id": 165020067,
        "sender_full_name": "RalfJ",
        "timestamp": 1557177592
    },
    {
        "content": "<p>I am too tired right now to think about whether this changes the story for <code>&amp;raw [const|mut] &lt;expr&gt;</code>... but on first sight I think it would not.</p>",
        "id": 165020151,
        "sender_full_name": "RalfJ",
        "timestamp": 1557177620
    },
    {
        "content": "<p>I don't <em>100%</em> understand what this arrow operator would do</p>",
        "id": 165020446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177867
    },
    {
        "content": "<p>oh, like, it is <em>literally</em> the <code>-&gt;</code> from C</p>",
        "id": 165020482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177919
    },
    {
        "content": "<p>this is just because <code>(*foo).bar</code> is annoying to write?</p>",
        "id": 165020497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177930
    },
    {
        "content": "<p><code>ptr-&gt;field</code> would be either <code>(*ptr).field</code>, or maybe a raw ptr to that.</p>",
        "id": 165020505,
        "sender_full_name": "RalfJ",
        "timestamp": 1557177939
    },
    {
        "content": "<blockquote>\n<p>this is just because <code>(*foo).bar</code> is annoying to write?</p>\n</blockquote>\n<p>write and read</p>",
        "id": 165020512,
        "sender_full_name": "RalfJ",
        "timestamp": 1557177952
    },
    {
        "content": "<p>could we just define <code>-&gt;</code> only on raw pointers?</p>",
        "id": 165020517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177957
    },
    {
        "content": "<p>like, <code>(*x.foo().bar()).field1.field2</code></p>",
        "id": 165020563,
        "sender_full_name": "RalfJ",
        "timestamp": 1557177966
    },
    {
        "content": "<p>in which case, one can think of them as \"C pointers\"</p>",
        "id": 165020566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177970
    },
    {
        "content": "<p>which...seems like a pretty accurate mental model?</p>",
        "id": 165020574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177985
    },
    {
        "content": "<p>i.e., just as in C you would do <code>foo-&gt;bar</code>...</p>",
        "id": 165020579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557177993
    },
    {
        "content": "<p>but also, pointers in C code that you link to are literally also treated like raw pointers</p>",
        "id": 165020595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557178012
    },
    {
        "content": "<p>(from UCG perspective)</p>",
        "id": 165020598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557178018
    },
    {
        "content": "<p>anyway, seems..ok to me</p>",
        "id": 165020645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557178071
    },
    {
        "content": "<blockquote>\n<p>could we just define <code>-&gt;</code> only on raw pointers?</p>\n</blockquote>\n<p>yeah, there's probably no good reason to have it on references</p>",
        "id": 165021003,
        "sender_full_name": "RalfJ",
        "timestamp": 1557178342
    },
    {
        "content": "<p>Can't raw pointers just use <code>.</code> like references? (Still requiring <code>unsafe</code>.)<br>\nIIRC, something like this was planned eventually when unsafety checking was moved to MIR.</p>",
        "id": 165022411,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1557179664
    },
    {
        "content": "<p>This is counter to my memory, in which it was generally understood that <code>.</code> on raw pointers (especially when they're nullable) is waaay too dangerous.</p>",
        "id": 165028976,
        "sender_full_name": "Gankra",
        "timestamp": 1557185951
    },
    {
        "content": "<p>Specifically, I was able to land the new ptr methods specifically under the rationale that raw pointers will never implement Deref-style . (and also, we already had a few methods so it was too late to stop it)</p>",
        "id": 165029042,
        "sender_full_name": "Gankra",
        "timestamp": 1557186014
    },
    {
        "content": "<p>I think familiarity of <code>foo-&gt;bar</code> in C++ et. al works against us here; I think it might encourage overuse of raw pointers where references would otherwise suffice</p>",
        "id": 165029161,
        "sender_full_name": "centril",
        "timestamp": 1557186137
    },
    {
        "content": "<p>no that's the point, we have discouraged raw pointers too much, and it's literally making rust programs unsound</p>",
        "id": 165029179,
        "sender_full_name": "Gankra",
        "timestamp": 1557186164
    },
    {
        "content": "<p>you literally should avoid using references as much as possible once you're using raw pointers</p>",
        "id": 165029186,
        "sender_full_name": "Gankra",
        "timestamp": 1557186180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span>  I mean for normal uses where you don't need raw pointers</p>",
        "id": 165029212,
        "sender_full_name": "centril",
        "timestamp": 1557186215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I <em>think</em> if we did proposal 3, it would eliminate most uses for &amp;raw? Most obvious exception being indexing results, but it wouldn't be that unreasonable to make *const [T] indexing work like my proposed raw pointer dot operator</p>",
        "id": 165029214,
        "sender_full_name": "Gankra",
        "timestamp": 1557186219
    },
    {
        "content": "<p><code>foo.*bar</code> seems better if we're going with new syntax tbh</p>",
        "id": 165029273,
        "sender_full_name": "centril",
        "timestamp": 1557186252
    },
    {
        "content": "<p>I am super dubious of people considering raw pointers more convenient than references</p>",
        "id": 165029333,
        "sender_full_name": "Gankra",
        "timestamp": 1557186332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> I feel we already have such overuse by people coming from C &amp; C++</p>",
        "id": 165029393,
        "sender_full_name": "centril",
        "timestamp": 1557186364
    },
    {
        "content": "<p>got any citations on that..?</p>",
        "id": 165029406,
        "sender_full_name": "Gankra",
        "timestamp": 1557186390
    },
    {
        "content": "<p>not on hand</p>",
        "id": 165029425,
        "sender_full_name": "centril",
        "timestamp": 1557186420
    },
    {
        "content": "<p>imo this also doesn't belong on the roadmap for 2019</p>",
        "id": 165029453,
        "sender_full_name": "centril",
        "timestamp": 1557186475
    },
    {
        "content": "<p>is <a href=\"https://github.com/rust-lang/rfcs/pull/2582\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2582\">https://github.com/rust-lang/rfcs/pull/2582</a> also similarly not going to be considered for 2019?</p>",
        "id": 165029528,
        "sender_full_name": "Gankra",
        "timestamp": 1557186547
    },
    {
        "content": "<p>No that one will because it's both preexisting and makes something possible which otherwise isn't and moreover facilitates closing soundness holes.</p>",
        "id": 165029622,
        "sender_full_name": "centril",
        "timestamp": 1557186659
    },
    {
        "content": "<p>I really don't like adding <code>-&gt;</code> without adding a way to overload it</p>",
        "id": 165030326,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557187451
    },
    {
        "content": "<p>but <code>*.</code> seems reasonable, imo</p>",
        "id": 165030332,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557187464
    },
    {
        "content": "<p>what if my proposal is an effective alternative to <a href=\"https://github.com/rust-lang/rust/issues/2582\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/2582\">#2582</a> ?</p>",
        "id": 165030354,
        "sender_full_name": "Gankra",
        "timestamp": 1557187502
    },
    {
        "content": "<p>I also don't like <code>.*</code> b/c it seems out of order</p>",
        "id": 165030378,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557187543
    },
    {
        "content": "<p>Also TIL C++ has .*, and I believe it means what I was proposing raw_ptr.field is</p>",
        "id": 165030507,
        "sender_full_name": "Gankra",
        "timestamp": 1557187682
    },
    {
        "content": "<p>it's very different</p>",
        "id": 165030536,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557187709
    },
    {
        "content": "<p>ah; <code>foo*.bar</code> then -- seems better than <code>-&gt;</code></p>",
        "id": 165030553,
        "sender_full_name": "centril",
        "timestamp": 1557187745
    },
    {
        "content": "<p><code>x.*y</code>, by default, takes <code>cls* x; T cls::* y;</code>, and does a member-pointer lookup by <code>y</code> on <code>x</code></p>",
        "id": 165030568,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557187793
    },
    {
        "content": "<p>what's the solution to *.'s ambiguity?</p>",
        "id": 165030623,
        "sender_full_name": "Gankra",
        "timestamp": 1557187817
    },
    {
        "content": "<p>i.e:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"n\">Foo</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">Foo</span><span class=\"o\">::*</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"o\">&amp;</span><span class=\"n\">Foo</span><span class=\"o\">::</span><span class=\"n\">x</span><span class=\"p\">;</span>\n  <span class=\"n\">Foo</span> <span class=\"n\">f</span><span class=\"p\">{};</span>\n  <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 165030629,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557187837
    },
    {
        "content": "<p>0.o</p>",
        "id": 165030643,
        "sender_full_name": "Gankra",
        "timestamp": 1557187858
    },
    {
        "content": "<p>but also, you can overload it for any LHS and RHS types</p>",
        "id": 165030645,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557187860
    },
    {
        "content": "<p>like other binary operators</p>",
        "id": 165030678,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557187913
    },
    {
        "content": "<p>unlike <code>-&gt;</code>, which is overloaded as a unary operator</p>",
        "id": 165030721,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557187923
    },
    {
        "content": "<p>it's not especially useful for fields, but it's really nice for methods</p>",
        "id": 165030817,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557188082
    },
    {
        "content": "<p>it's possibly postfix deref would also be ambgious with foo * [0] (is this (*foo)[0] or mul(foo, [0])?</p>",
        "id": 165030986,
        "sender_full_name": "Gankra",
        "timestamp": 1557188298
    },
    {
        "content": "<p>hmm, point</p>",
        "id": 165031184,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557188563
    },
    {
        "content": "<p>I was thinking specifically <code>*.</code> as an operator tho</p>",
        "id": 165031216,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557188600
    },
    {
        "content": "<p>how can you parse that out of foo*.0, though?</p>",
        "id": 165031334,
        "sender_full_name": "Gankra",
        "timestamp": 1557188707
    },
    {
        "content": "<p>you'd parse <code>*.</code> as an operator</p>",
        "id": 165032198,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557189760
    },
    {
        "content": "<p><code>foo *. 0</code></p>",
        "id": 165032202,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557189770
    },
    {
        "content": "<p>it's a breaking change, but not one that should break anybody who isn't making two really poor style decisions :P</p>",
        "id": 165032223,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557189803
    },
    {
        "content": "<p>seems unecessarily brutal</p>",
        "id": 165033386,
        "sender_full_name": "Gankra",
        "timestamp": 1557191390
    },
    {
        "content": "<blockquote>\n<p>I think familiarity of <code>foo-&gt;bar</code> in C++ et. al works against us here; I think it might encourage overuse of raw pointers where references would otherwise suffice</p>\n</blockquote>\n<p>all current data points towards people using references when they should use raw ptrs (and causing unsoundness along the way). So I doubt this. References are still more convenient than raw ptrs even if we got <code>-&gt;</code>.</p>",
        "id": 165052987,
        "sender_full_name": "RalfJ",
        "timestamp": 1557218443
    },
    {
        "content": "<blockquote>\n<p>all current data points towards people using references when they should use raw ptrs (and causing unsoundness along the way).</p>\n</blockquote>\n<p>Do we have any data on people using pointers where they should actually be using references ? IIRC, many of the soundness bugs in actix where due to this.</p>",
        "id": 165083409,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557243907
    },
    {
        "content": "<p>While I feel <span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> 's pain, my first thought was \"Could we fix this with a lint ?\"</p>",
        "id": 165083500,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557243948
    },
    {
        "content": "<p>As opposed to adding an operator for this.</p>",
        "id": 165083510,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557243961
    },
    {
        "content": "<p>Also, IMO, the main reason people don't write <code>(*x.foo().bar()).field1.field2</code> is because they don't know they need to. <br>\nI don't see how <code>-&gt;</code> fixes that.</p>",
        "id": 165083632,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557244026
    },
    {
        "content": "<p>The problem that people don't know that they have to use <code>-&gt;</code> instead of references would still be there.</p>",
        "id": 165083669,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557244061
    },
    {
        "content": "<blockquote>\n<p>Also, IMO, the main reason people don't write <code>(*x.foo().bar()).field1.field2</code> is because they don't know they need to. <br>\nI don't see how <code>-&gt;</code> fixes that.</p>\n</blockquote>\n<p>it's annoying as hell to write and doesnt nest the right way</p>",
        "id": 165108623,
        "sender_full_name": "RalfJ",
        "timestamp": 1557261357
    },
    {
        "content": "<p>postfix compsotionality is awesome, it seems like it'll even dominate the await discussion. not having it for raw ptrs is a huge pain and I sure can see that affecting people's decisions when weighing raw ptr against ref. it also makes fixing such bugs much more annoying (and much less of a search-and-replace as you need to add parentheses).<br>\nbut yes, we also have tons of teaching to do.</p>",
        "id": 165108776,
        "sender_full_name": "RalfJ",
        "timestamp": 1557261443
    },
    {
        "content": "<p>the only reason I'm against the arrow operator is because it's not overloadable -- I really dislike adding new operators that can't be overloaded</p>",
        "id": 165111128,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557263172
    },
    {
        "content": "<p>The only operators that shouldn't be overloadable are those which exist automatically for all types (i.e., <code>&amp;</code>)</p>",
        "id": 165111204,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557263230
    },
    {
        "content": "<p>What is the overloadable signature of <code>-&gt;</code> ? <code>(&amp;self) -&gt; *mut|const T</code>?</p>",
        "id": 165172482,
        "sender_full_name": "Gankra",
        "timestamp": 1557328929
    },
    {
        "content": "<p>yeah</p>",
        "id": 165177065,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1557332172
    },
    {
        "content": "<p>Is the method generic ?</p>",
        "id": 165182028,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557335901
    },
    {
        "content": "<p>e.g. <code>trait Arrow { fn arrow&lt;T&gt;(&amp;self) -&gt; *const T; }</code> ?</p>",
        "id": 165182082,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557335945
    },
    {
        "content": "<p>or the trait, e.g., <code>trait Arrow&lt;RHS&gt; { fn arrow(&amp;self) -&gt; *const RHS; }</code> ?</p>",
        "id": 165182145,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557335998
    },
    {
        "content": "<p>I guess it'd be like <code>Deref</code>, with an associated type</p>",
        "id": 165182300,
        "sender_full_name": "RalfJ",
        "timestamp": 1557336112
    },
    {
        "content": "<p>or should the type be an input parameter, e.g., <code>trait Arrow { type Output; fn arrow(&amp;self) -&gt; *const Self::Output; }</code> that one has to implement for all relevant output params, e.g., <code>impl&lt;O&gt; Arrow for MyType { type Output = O; ... }</code></p>",
        "id": 165182356,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557336132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> with Deref, dereferencing a type always gives you some other constant type, but here <code>value-&gt;field0</code> and <code>value-&gt;field1</code> give you two different types</p>",
        "id": 165182451,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557336213
    },
    {
        "content": "<p><code>Deref</code> does the part before the field</p>",
        "id": 165182554,
        "sender_full_name": "RalfJ",
        "timestamp": 1557336281
    },
    {
        "content": "<p>so I guess <code>Arrow</code> would just the same give you the ptr to get the field from</p>",
        "id": 165182563,
        "sender_full_name": "RalfJ",
        "timestamp": 1557336292
    },
    {
        "content": "<p>I mean otherwise we need ptr-to-member</p>",
        "id": 165182585,
        "sender_full_name": "RalfJ",
        "timestamp": 1557336308
    },
    {
        "content": "<p>(which also seems fine and could help with some other things but is a much bigger endeavor)</p>",
        "id": 165182613,
        "sender_full_name": "RalfJ",
        "timestamp": 1557336330
    },
    {
        "content": "<p>I don't think I follow, I thought the internals thread proposed a <code>value-&gt;field</code> that expands to <code>(*value).field</code></p>",
        "id": 165182937,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557336590
    },
    {
        "content": "<p>and that the whole point of providing a way to overload it is to be able to map <code>(input: typeof(value)) -&gt; typeof(field)</code> or similar</p>",
        "id": 165183048,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557336656
    },
    {
        "content": "<p>yes. and then to overload <code>-&gt;</code> you could have a <code>fn arrow(&amp;self) -&gt; *const Self::Out</code> or so, so it really desugars to <code>(*Arrow::arrow(&amp;value)).field</code>.</p>",
        "id": 165183052,
        "sender_full_name": "RalfJ",
        "timestamp": 1557336661
    },
    {
        "content": "<p>that would mirror the situation for <code>Deref</code></p>",
        "id": 165183070,
        "sender_full_name": "RalfJ",
        "timestamp": 1557336670
    },
    {
        "content": "<p>why can't we use <code>Deref</code> for that ?</p>",
        "id": 165183087,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557336690
    },
    {
        "content": "<p>because <code>Deref</code> returns a reference</p>",
        "id": 165183094,
        "sender_full_name": "RalfJ",
        "timestamp": 1557336699
    },
    {
        "content": "<p>and the entire point is that we need to make it a raw ptr</p>",
        "id": 165183100,
        "sender_full_name": "RalfJ",
        "timestamp": 1557336706
    },
    {
        "content": "<p>Ah, duh, yes</p>",
        "id": 165183105,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557336709
    },
    {
        "content": "<p>so arrow is just <code>trait Arrow { type Out; fn arrow(&amp;self) -&gt; *const Self::Out; }</code>, so that one can implement arrow, e.g., on <code>Box</code> to get a pointer to a field?</p>",
        "id": 165183198,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557336768
    },
    {
        "content": "<p>that is, it would be possible to, e.g., implement Deref and Arrow, with different input parameters, for the same type ?</p>",
        "id": 165183362,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557336875
    },
    {
        "content": "<p><code>struct A(u32); struct B(i32); struct C(A, B); impl Deref&lt;Output = A&gt; for C { ... } impl Arrow&lt;Output = B&gt; for C { ... }; </code> ?</p>",
        "id": 165183541,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557337020
    },
    {
        "content": "<p>hm that's not nice. but if people really want to shoot themselves in the foot...</p>",
        "id": 165187949,
        "sender_full_name": "RalfJ",
        "timestamp": 1557339961
    }
]