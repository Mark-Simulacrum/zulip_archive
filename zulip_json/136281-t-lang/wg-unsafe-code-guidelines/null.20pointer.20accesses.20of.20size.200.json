[
    {
        "content": "<p>I was reading <a href=\"https://doc.rust-lang.org/beta/std/ptr/index.html#safety\">https://doc.rust-lang.org/beta/std/ptr/index.html#safety</a> and saw</p>\n<blockquote>\n<ul>\n<li>A null pointer is never valid, not even for accesses of size zero.</li>\n<li>All pointers (except for the null pointer) are valid for all operations of size zero.</li>\n</ul>\n</blockquote>\n<p>Now, I have no use case here, but why aren't null pointers valid for accesses of size 0 if all other pointers are?</p>",
        "id": 218235582,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606691763
    },
    {
        "content": "<p>because optimisations assume that it isn't if its dereferenced.</p>",
        "id": 218235696,
        "sender_full_name": "nagisa",
        "timestamp": 1606691953
    },
    {
        "content": "<p>â€¦ I believe.</p>",
        "id": 218235707,
        "sender_full_name": "nagisa",
        "timestamp": 1606691987
    },
    {
        "content": "<p>Hmm, for zero size accesses?</p>",
        "id": 218235711,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606691998
    },
    {
        "content": "<p>Are those optimizations profitable for zero-sized accesses?</p>",
        "id": 218235754,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606692012
    },
    {
        "content": "<p>though in practice we don't generate any code for dereferences, but that's just an implementation detail, really.</p>",
        "id": 218235755,
        "sender_full_name": "nagisa",
        "timestamp": 1606692012
    },
    {
        "content": "<p>If  it's an implementation detail, wouldn't that mean that \"All pointers (except for the null pointer) are valid for all operations of size zero.\" isn't true? E.g. clearly if i read from <code>1 as *const ()</code> that can't ever generate any code.</p>",
        "id": 218235793,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606692101
    },
    {
        "content": "<p>but according to the above <code>*(1 as *const ())</code> is allowed but <code>*(0 as *const ())</code> isn't</p>",
        "id": 218235836,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606692130
    },
    {
        "content": "<p>I'd guess it has something to do with layout optimizations (e.g. <code>Option&lt;NonNull&lt;()&gt;&gt;</code>) and/or emitted <code>nonnull</code> attributes for LLVM</p>",
        "id": 218236779,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1606693581
    },
    {
        "content": "<p>That doesn't sound right, since it's only about the reads and writes, not about the values. It's totally legal to have null pointers (not null <code>NonNull&lt;T&gt;</code>s, but null <code>*mut T</code>/<code>*const T</code>s)</p>",
        "id": 218236821,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606693673
    },
    {
        "content": "<p>E.g. this function is safe: <a href=\"https://doc.rust-lang.org/std/ptr/fn.null_mut.html\">https://doc.rust-lang.org/std/ptr/fn.null_mut.html</a></p>",
        "id": 218236874,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1606693696
    },
    {
        "content": "<p>I'd argue that the fact optimizations are only applied to generated code is an implementation-detailed. <br>\nFor example, an optimization applied to a generic function, before monomorphization.</p>",
        "id": 218238946,
        "sender_full_name": "Connor Horman",
        "timestamp": 1606696835
    },
    {
        "content": "<p>note that what the docs say is unfortunately too simplified (and the nightly docs are more precise)</p>",
        "id": 218292895,
        "sender_full_name": "RalfJ",
        "timestamp": 1606746564
    },
    {
        "content": "<blockquote>\n<p>Even for operations of size zero, the pointer must not be pointing to deallocated memory, i.e., deallocation makes pointers invalid even for zero-sized operations. However, casting any non-zero integer literal to a pointer is valid for zero-sized accesses, even if some memory happens to exist at that address and gets deallocated. This corresponds to writing your own allocator: allocating zero-sized objects is not very hard. The canonical way to obtain a pointer that is valid for zero-sized accesses is NonNull::dangling.</p>\n</blockquote>",
        "id": 218292936,
        "sender_full_name": "RalfJ",
        "timestamp": 1606746584
    },
    {
        "content": "<p>I am not particularly happy about this, but this reflects requirements LLVM imposes on the IR we generate, that we currently have no choice but forward to the user</p>",
        "id": 218293071,
        "sender_full_name": "RalfJ",
        "timestamp": 1606746629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/null.20pointer.20accesses.20of.20size.200/near/218235755\">said</a>:</p>\n<blockquote>\n<p>though in practice we don't generate any code for dereferences, but that's just an implementation detail, really.</p>\n</blockquote>\n<p>we don't generate LLVM IR, but we do generate MIR. and MIR optimizations might conclude from a <code>*p</code> that <code>p != NULL</code>, no matter which type <code>p</code> points to. that is the current set of rules anyway; we could relax this but I am unsure of the cost of that.</p>",
        "id": 218293208,
        "sender_full_name": "RalfJ",
        "timestamp": 1606746703
    },
    {
        "content": "<p>We probably won't be able to relax that, unless MIR becomes non-generic.</p>",
        "id": 218330776,
        "sender_full_name": "nagisa",
        "timestamp": 1606763215
    }
]