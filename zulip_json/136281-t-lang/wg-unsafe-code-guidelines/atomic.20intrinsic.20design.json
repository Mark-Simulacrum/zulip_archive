[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> </p>\n<blockquote>\n<p>FWIW I never understood why we need <code>AtomicXY</code> types, instead of having <code>ptr.atomic_load(...)</code> methods.</p>\n</blockquote>\n<p>Yeah I wondered the same. It's very annoying that e.g. <code>AtomicCell</code> has to transmute <code>(u8, u16)</code> to <code>u32</code>  to implement atomic accesses...</p>",
        "id": 171789348,
        "sender_full_name": "RalfJ",
        "timestamp": 1564160102
    },
    {
        "content": "<p>I think it would be better to have intrinsics taking pointers that can be used to build the types.</p>",
        "id": 171789499,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564160177
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 171789733,
        "sender_full_name": "RalfJ",
        "timestamp": 1564160321
    },
    {
        "content": "<p>I think it was <em>an attempt</em> to try and limit the types that you'd use atomic with, in the same way that right now you can volatile load and store any pointer but it only works without tearing at specific sizes, per arch</p>",
        "id": 171833981,
        "sender_full_name": "Lokathor",
        "timestamp": 1564212382
    },
    {
        "content": "<p>Also, it makes statics way easier</p>",
        "id": 171833994,
        "sender_full_name": "Lokathor",
        "timestamp": 1564212453
    },
    {
        "content": "<p>what is the interaction with statics?</p>",
        "id": 171834335,
        "sender_full_name": "RalfJ",
        "timestamp": 1564213059
    },
    {
        "content": "<p>so, when you have a static value you declare it</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">SDL_ACTIVE</span>: <span class=\"nc\">AtomicBool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">AtomicBool</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>or similar. Then every thread sees it and can safely call load and store all that. If there wasn't a dedicated type for this you'd have to do a whole song and dance to make an atomically editable bool. It'd be a <code>static mut</code>, and then you'd pray to Ferris and unsafely take a <code>&amp;mut</code> to it in the hope that no other thread was doing that right then, call <code>atomic_whatever</code>, and it'd just be a lot more error prone.</p>",
        "id": 171836815,
        "sender_full_name": "Lokathor",
        "timestamp": 1564217797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> we are only talking about the internal intrinsics here that are used to implement these types; I agree that <code>AtomicBool</code> makes sense as a user-facing type.</p>",
        "id": 171837028,
        "sender_full_name": "RalfJ",
        "timestamp": 1564218252
    },
    {
        "content": "<p>however, it should be possible to do atomic accesess on a <code>*mut (u8, u16)</code>. currently you have to cast to <code>*mut u32</code> which is (a) hacky and (b) raises concerns about padding.</p>",
        "id": 171837039,
        "sender_full_name": "RalfJ",
        "timestamp": 1564218314
    },
    {
        "content": "<p>I don't understand how <code>atomic_whatever::&lt;(u8, u16)&gt;(ptr, ...)</code> would help with anything (it actually exists internally!). The hardware only provides atomic accesses to (naturally aligned) 8/16/32/... bit chunks. If you want to use the 32 bit atomics with a honest-to-god <code>(u8, u16)</code>, you have to worry about the padding (and alignment) anyway at some level because it's a fundamental mismatch.</p>",
        "id": 171837300,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564218954
    },
    {
        "content": "<p>ah! for internals, okay</p>",
        "id": 171837478,
        "sender_full_name": "Lokathor",
        "timestamp": 1564219267
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> at least for loads and stores, there's no good reason I should have to transmute my <code>(u8, u16)</code> to <code>u32</code> before storing it</p>",
        "id": 171838501,
        "sender_full_name": "RalfJ",
        "timestamp": 1564221261
    },
    {
        "content": "<p>Fair, though there's still alignment concerns -- you can't load/store with arbitrary <code>&amp;mut (u8, u16)</code>, it has to be aligned to 4 bytes. In fact, I recall the existing unstable intrinsics could be instantiated with <code>(u8, u16)</code> but rustc would put the wrong alignment on the LLVM intrinsic.</p>",
        "id": 171838773,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1564221831
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 171839185,
        "sender_full_name": "Славик Бут",
        "timestamp": 1564222671
    },
    {
        "content": "<p>hm, yeah, I didnt think about alignment for a sec and there it got me again</p>",
        "id": 171839422,
        "sender_full_name": "RalfJ",
        "timestamp": 1564223054
    },
    {
        "content": "<p><code>atomic_relaxed_load_u32(ptr: *const u32) -&gt; MaybeUninit&lt;u32&gt;</code> would just require <code>ptr</code> to be aligned to a 4-byte boundary</p>",
        "id": 171842227,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564227964
    },
    {
        "content": "<p>So if you have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">atomic_relaxed_load_u32</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and if the pointer isn't properly aligned the behavior is undefined. <code>clippy</code> will actually yell at this code, warning that you are casting pointers with different alignment requirements.</p>",
        "id": 171842236,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564228057
    },
    {
        "content": "<p>I don't see how alignment is any more problematic than, e.g., size, with such an API. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">atomic_relaxed_load_u32</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>would read out-of-bounds, which is also UB.</p>",
        "id": 171842291,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564228160
    }
]