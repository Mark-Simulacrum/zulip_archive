[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/61011\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61011\">https://github.com/rust-lang/rust/issues/61011</a></p>",
        "id": 166185560,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1558454214
    },
    {
        "content": "<p><a href=\"https://twitter.com/ManishEarth/status/1130855712869867522\" target=\"_blank\" title=\"https://twitter.com/ManishEarth/status/1130855712869867522\">https://twitter.com/ManishEarth/status/1130855712869867522</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/ManishEarth/status/1130855712869867522\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/2902505817/5ff15a47a60ae0b71fcf1529e9e676f8_normal.png\"></a><p><a href=\"https://twitter.com/Gankro\" target=\"_blank\" title=\"https://twitter.com/Gankro\">@Gankro</a> <a href=\"https://twitter.com/QuietMisdreavus\" target=\"_blank\" title=\"https://twitter.com/QuietMisdreavus\">@QuietMisdreavus</a> I think having to keep around the carcass precludes a *ton* of use cases in general, and that's what's always bothered me about uninit. Can we make it transparent and document some examples of carcass removal?</p><span>- Who ordered *that*? (@ManishEarth)</span></div></div>",
        "id": 166185583,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1558454227
    },
    {
        "content": "<p>(i can explain more if y'all need, but most of the context is in the git issue and twitter thread)</p>",
        "id": 166185609,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1558454248
    },
    {
        "content": "<p>The necessary layout guarantee was discussed as part of RFC 2645, though not so much in the context of heap allocation. That RFC doesn't actually <em>make</em> <code>MaybeUninit&lt;T&gt;</code> be laid out as <code>T</code> but the desire to do so was part of the motivation, and the discussion of this point was largely about whether extending repr(transparent) is the best way to provide that guarantee or whether we should guarantee it in other ways. Nobody questioned that it's a good thing IIRC.</p>\n<p>However, the discussion there also highlighted a caveat: when layout optimizations are involved, it's sometimes impossible to treat <code>A&lt;MaybeUninit&lt;T&gt;&gt;</code> the same as <code>A&lt;T&gt;</code> (e.g., for <code>A</code> = <code>Option</code>) because <code>MaybeUninit&lt;T&gt;</code> has no niches even if <code>T</code> has them. IOW, \"transparent wrapper\" only means same size and alignment, not same niches. That isn't a problem for any of the standard collections as far as I recall, but it means such transmuting needs to be explicitly blessed by each individual collection, it can't be a blanket property of MaybeUninit.</p>\n<p>Associated types and constants already mean <code>A&lt;T&gt;</code> and <code>A&lt;TransparentNewtypeOfT&gt;</code> may not have the same layout, but when this occurs it's generally more obvious from the definition of the type and the bounds placed on the type parameter.</p>",
        "id": 166188887,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558456637
    },
    {
        "content": "<p>(answering on GH to avoid having two threads)</p>",
        "id": 166193500,
        "sender_full_name": "RalfJ",
        "timestamp": 1558459890
    }
]