[
    {
        "content": "<p>So libm uses <code>volatile</code> all over the place to force side-effects, e.g., </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"c1\">// set overflow flags:</span>\n<span class=\"w\">     </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\">  </span><span class=\"p\">).</span><span class=\"n\">read_volatile</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169712406,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562336566
    },
    {
        "content": "<p>If x * x overflows, some flags in a register might be set. libm wants to set those flags, so it does things like this</p>",
        "id": 169712444,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562336613
    },
    {
        "content": "<p>It has a macro called <code>force_eval!</code> for it, which is defined as:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">force_eval</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span>::<span class=\"n\">core</span>::<span class=\"n\">ptr</span>::<span class=\"n\">read_volatile</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"cp\">$e</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169712550,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562336678
    },
    {
        "content": "<p>Spot the problem: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// mod foo:</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// mod bar:</span>\n<span class=\"n\">force_eval</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\">  </span><span class=\"c1\">// look ma, no unsafe { }</span>\n</pre></div>",
        "id": 169712804,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562336886
    },
    {
        "content": "<p>AFAICT the only way to do a volatile load on a reference, is to go via a pointer first, so there is no way to do that without unsafe code =/</p>",
        "id": 169712979,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562337050
    },
    {
        "content": "<p>Oh. Now I know what I'm doing in Underhanded Rust competition if they ever hold another one.</p>",
        "id": 169726692,
        "sender_full_name": "Shnatsel",
        "timestamp": 1562350417
    },
    {
        "content": "<p>I'm putting something unsafe under <code>lazy_static!</code></p>",
        "id": 169726765,
        "sender_full_name": "Shnatsel",
        "timestamp": 1562350471
    },
    {
        "content": "<p>if lazy static allows you to call unsafe code without using unsafe, then that sounds like a cool thing</p>",
        "id": 169740346,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562367528
    },
    {
        "content": "<p>\"cool\"</p>",
        "id": 169757447,
        "sender_full_name": "Lokathor",
        "timestamp": 1562400198
    },
    {
        "content": "<p>wait, what is wrong with that?</p>",
        "id": 169798461,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1562480862
    },
    {
        "content": "<p>that gets turned into <code>read_volatile(&amp;(foo())) -&gt; read_volatile(&amp;0) -&gt; 0</code></p>",
        "id": 169798503,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1562480899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> you could call the macro with <code>{ unsafe_fn(); expr }</code> and you wouldn't need an unsafe block for calling <code>unsafe_fn</code></p>",
        "id": 169822744,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562526778
    },
    {
        "content": "<p>beyond that, there is nothing wrong with that; the point I tried to make is that this shouldn't be unsafe, the reason why this is unsafe is because we don't have <code>volatile_read</code> methods implemented for <code>&amp;T</code>, so one has to cast to a raw pointer, and then dereference the raw pointer</p>",
        "id": 169822802,
        "sender_full_name": "gnzlbg",
        "timestamp": 1562526853
    },
    {
        "content": "<p>oh, got it; yeah, makes sense now</p>",
        "id": 169828653,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1562537721
    },
    {
        "content": "<blockquote>\n<p>beyond that, there is nothing wrong with that; the point I tried to make is that this shouldn't be unsafe, the reason why this is unsafe is because we don't have <code>volatile_read</code> methods implemented for <code>&amp;T</code>, so one has to cast to a raw pointer, and then dereference the raw pointer</p>\n</blockquote>\n<p>OTOH it is very easy to write a safer wrapper in a library</p>",
        "id": 170643280,
        "sender_full_name": "RalfJ",
        "timestamp": 1562858452
    },
    {
        "content": "<p>this does not <em>have to</em> be a libcore thing</p>",
        "id": 170643283,
        "sender_full_name": "RalfJ",
        "timestamp": 1562858458
    },
    {
        "content": "<p>simple safe-wrapping operations for core types that can be in core should be in core. As a person who has spent all week working on a core only safe wrapping crate, I would be happy if core went around finding other useful core-compatible safe-wrapping stuff and just absorbing it so that everyone can benefit instead of trying to convince people to use a crate they've never heard of</p>",
        "id": 170662771,
        "sender_full_name": "Lokathor",
        "timestamp": 1562872154
    }
]