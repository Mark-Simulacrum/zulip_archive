[
    {
        "content": "<p>That'd be <code>#[repr(frank)]</code></p>",
        "id": 133076899,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535653304
    },
    {
        "content": "<p>(Since the meeting is over...)</p>",
        "id": 133076935,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535653323
    },
    {
        "content": "<p>^^</p>",
        "id": 133076963,
        "sender_full_name": "RalfJ",
        "timestamp": 1535653358
    },
    {
        "content": "<p>I did try and flip through them and see if one was \"the obvious fit\", but I wasn't entirely sure. The abom stuff (as well as a few related things, like Rust-on-Rust FFI) don't exactly care <em>what</em> the layout is, just that it stays put. So, it may be weaker than needing a defined binary repr.</p>",
        "id": 133077005,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1535653439
    },
    {
        "content": "<p>But, if there is an obvious place to watch (e.g. data-invariants) or just for the next meeting, I'll do that and get back to my book. :)</p>",
        "id": 133077061,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1535653478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> yeah I think what you are asking about is mostly happening several layers higher... like, safety invariants for references permitting transmute of <code>&amp; &amp;mut T</code> to <code>&amp;&amp;T</code> or so</p>",
        "id": 133077109,
        "sender_full_name": "RalfJ",
        "timestamp": 1535653555
    },
    {
        "content": "<p>I was thinking the same thing; this <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/8\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/8\">proposed topic of validity invariants</a> might be relevant, but we're not there yet</p>",
        "id": 133077179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535653593
    },
    {
        "content": "<p>but if that gives you any hope, the formal model we built last year to prove Rust's safety was specifically taking into account <a href=\"http://www.frankmcsherry.org/serialization/2015/05/04/unsafe-at-any-speed.html\" target=\"_blank\" title=\"http://www.frankmcsherry.org/serialization/2015/05/04/unsafe-at-any-speed.html\">http://www.frankmcsherry.org/serialization/2015/05/04/unsafe-at-any-speed.html</a> so that we could prove a transmute from <code>&amp;&amp;T</code> to <code>&amp;Box&lt;T&gt;</code>^^</p>",
        "id": 133077194,
        "sender_full_name": "RalfJ",
        "timestamp": 1535653610
    },
    {
        "content": "<p>it seems like the biggest area of concern would be exactly those places where the \"definition of memory\" deviates from \"just bytes\" â€” e.g., references and (maybe but probably not?) uninit memory</p>",
        "id": 133077199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535653616
    },
    {
        "content": "<p>Yeah, I recall you observing that the \"hard part\" of abomonation looked plausible. I'm mostly just planning on showing up so that no one forgets that something like it is useful too. I.e., in the glorious battle between \"zomg random data layout opts\" and \"zomg please stop we are trying to make computers fast\", I represent the latter.</p>",
        "id": 133077288,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1535653700
    },
    {
        "content": "<p>I think both teams are on the \"make go faster\" side ;-)</p>",
        "id": 133077320,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535653748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I could totally update that post, if it would help (stroke-be-less-harmful); there are several things that are wrong in it (you've probably noticed, but lots of other people noticed too; I opted not to edit it once it was live).</p>",
        "id": 133077416,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1535653804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> yes, sorry that's totally fair. Maybe the real point is that optimizing/randomizing layouts come with a cost, and I am here to represent that (vs just hearing about the great advantages of layout re-optimization).</p>",
        "id": 133077506,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1535653916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> whatever you prefer, I think I got out of that post what I can.^^ that single transmute is, to me, the essence of what is going on. (the post does it for <code>Vec</code>, of course, but that makes no fundamental difference.)</p>",
        "id": 133077625,
        "sender_full_name": "RalfJ",
        "timestamp": 1535654034
    },
    {
        "content": "<p>I think everyone knew what you meant, so it wasn't a slam.</p>\n<p>It's most likely all about control and visibility...</p>\n<p>I'd guess that your POV is that you know more beyond what the compiler does/can so you want the ability to control the layout to increase speed. <br>\nI'd guess the compilers POV is that it knows more beyond what the user does/can so it wants the ability to control layout to increase speed.</p>",
        "id": 133077733,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535654133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  I think I'll get to re-write it soon. Timely just got a zero-copy dataplane, and part of that is \"not copying from bytes to typed data\" (courtesy abom) and I suspect explaining that will require re-explaining abom. Btw, have you seen / have opinions on <a href=\"https://github.com/frankmcsherry/blog/blob/master/posts/2017-07-27.md\" target=\"_blank\" title=\"https://github.com/frankmcsherry/blog/blob/master/posts/2017-07-27.md\">https://github.com/frankmcsherry/blog/blob/master/posts/2017-07-27.md</a>, in which I pretend that abomonation is a lot like region allocation?</p>",
        "id": 133077816,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1535654208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> &gt; I'd guess that your POV is that you know more beyond what the compiler does/can so you want the ability to control the layout to increase speed.</p>\n<p>It's a bit weaker than this, personally. I'm up for the compiler determining the layout, but I need some structure to know when I can re-interpret bytes. If compiler says \"they must be like this\" I'm good with that as long as it stays true for a while. At the moment, I'm weirded out by the fact that the compiler can change this with every recompile, and as I understand it doesn't directly promise this (but is boxed in by needing to be able to link dynamically with other libraries).</p>",
        "id": 133077903,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1535654287
    },
    {
        "content": "<p>Ah, I assumed that you were constrained by a pre-existing external layout (yon blobs of bytes on the disk)</p>",
        "id": 133078367,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535654791
    },
    {
        "content": "<p>Most of my uses are \"I have a program, it wants to turn types to bytes and back to &amp;types\". It would also be cool to have a stable layout for longer term storage, but I think at that point you want the grown-up Protobuf, CapnProto, FlatBuffers stuff (or <em>shudder</em> JSON).</p>",
        "id": 133078605,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1535655084
    },
    {
        "content": "<p>As one example, that I think is pretty hard with lots of approaches: it would be great to be able to memmap a blob of data and have it behave as a &amp;type, allowing random access without needing a full scan of the data. The systems-level difference between \"process starts; data read immediately, go\" vs \"process starts, rescans 100GB of data, go\" is huge in the space I'm working in (big data, fault-tolerance, blah blah).</p>",
        "id": 133078693,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1535655212
    },
    {
        "content": "<p>I was saddened to realize that <code>mmap</code> will always be <code>unsafe</code> because you cannot guarantee that you are the sole owner of a piece of memory (a.k.a. a big point of <code>mmap</code>)</p>",
        "id": 133078858,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535655365
    },
    {
        "content": "<p>Also I feel I have to make a declaration: While <span class=\"user-mention\" data-user-id=\"116609\">@Frank McSherry</span> and <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> are in different camps of the \"make computers be fast\" team (I know you're not really but bear with me here ;), I am squarely in the \"make computers be sane\" team. I know I am fighting windmills, but I will be a bastion of sanity against everyone who intents to sacrifice everything and their grandma on the altar of performance. Too long have the evangelists of speed reigned in the space of compilers, it is time we break their rule and make programming languages beautiful again!</p>",
        "id": 133080783,
        "sender_full_name": "RalfJ",
        "timestamp": 1535657462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I claim no camp.</p>",
        "id": 133080862,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535657527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I know but the story worked better this way :P</p>",
        "id": 133080883,
        "sender_full_name": "RalfJ",
        "timestamp": 1535657550
    },
    {
        "content": "<p>Do I get to be the Jedi or the Sith</p>",
        "id": 133080899,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1535657566
    },
    {
        "content": "<p>I leave that up to you. as far as I am concerned, performance people are Sith and of course I am on the light side. ;)</p>",
        "id": 133080929,
        "sender_full_name": "RalfJ",
        "timestamp": 1535657606
    },
    {
        "content": "<p>wow, I had no idea you had such poetry in you, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 133081959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1535658686
    },
    {
        "content": "<p>Still new to this, particularly in English. ;)</p>",
        "id": 133082264,
        "sender_full_name": "RalfJ",
        "timestamp": 1535658982
    },
    {
        "content": "<p>I personally think computers are way too fast; we should switch back to before all this caching BS :3</p>",
        "id": 133087387,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1535664339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I think that, a year ago, people might have melted down at the suggestion that speed was not the one true god. But with the spectre of 2018 looming close still, I think that people may be willing to, at the very least, speculate alternatives, and so I'll support you in this execution.</p>",
        "id": 133411641,
        "sender_full_name": "alercah",
        "timestamp": 1536192413
    }
]