[
    {
        "content": "<p>I found a stacked borrows violation in LinkedList: <a href=\"https://github.com/rust-lang/rust/pull/60072\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60072\">https://github.com/rust-lang/rust/pull/60072</a><br>\nIs that good news because it's one bug less or bad news because not even libstd can get the aliasing right? I don't know.^^</p>",
        "id": 163637192,
        "sender_full_name": "RalfJ",
        "timestamp": 1555581772
    },
    {
        "content": "<p>or maybe this is a data point for \"mutable reference should only become unique once written to the first time\"? That would however severely reduce the amount of optimizations we can do.</p>",
        "id": 163637257,
        "sender_full_name": "RalfJ",
        "timestamp": 1555581821
    },
    {
        "content": "<p>here's another Stacked Borrows violation that's also about a mutable reference that got created but never used: <a href=\"https://github.com/SimonSapin/rust-typed-arena/issues/26\" target=\"_blank\" title=\"https://github.com/SimonSapin/rust-typed-arena/issues/26\">https://github.com/SimonSapin/rust-typed-arena/issues/26</a></p>",
        "id": 163651116,
        "sender_full_name": "RalfJ",
        "timestamp": 1555594036
    },
    {
        "content": "<p>This mutable reference <em>does</em> however get passed to a function, namely <code>as_mut_ptr</code>. So even if we wanted to say that only writes and passing-to-a-function actually make an <code>&amp;mut</code> unique (which could save some optimizations), there'd still be a bug here.</p>",
        "id": 163651257,
        "sender_full_name": "RalfJ",
        "timestamp": 1555594145
    },
    {
        "content": "<p>I'm new here, but it seems like these cases are all \"dead code/ability\" cases, i.e. requesting a feature or doing a thing that is then never used, right?</p>",
        "id": 164189820,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1556212359
    },
    {
        "content": "<p>Perhaps we can remove those before doing optimizations?</p>",
        "id": 164189845,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1556212378
    },
    {
        "content": "<p>well the reference does get used, but only for some fields of the struct</p>",
        "id": 164189954,
        "sender_full_name": "RalfJ",
        "timestamp": 1556212480
    },
    {
        "content": "<p>so you cannot really remove the reference entirely</p>",
        "id": 164189966,
        "sender_full_name": "RalfJ",
        "timestamp": 1556212494
    },
    {
        "content": "<p>Right, but aren't you just downgrading them in the fix?</p>",
        "id": 164190019,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1556212561
    },
    {
        "content": "<p>I guess I'm not clear on exactly what's wrong, sorry.</p>",
        "id": 164190076,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1556212573
    },
    {
        "content": "<p>Im replacing referenced by raw pointers</p>",
        "id": 164242750,
        "sender_full_name": "RalfJ",
        "timestamp": 1556267585
    },
    {
        "content": "<p>Ah, ok, taking advantage of the fact that raw pointers don't constrain things as much as a reference does. But nevertheless, you mentioned \"mutable reference that got created but never used\" -- can that be detected and removed before analysis?</p>",
        "id": 164576253,
        "sender_full_name": "JP Sugarbroad",
        "timestamp": 1556657973
    },
    {
        "content": "<p>I responded to that above:</p>\n<blockquote>\n<p>well the reference does get used, but only for some fields of the struct<br>\nso you cannot really remove the reference entirely</p>\n</blockquote>",
        "id": 164612091,
        "sender_full_name": "RalfJ",
        "timestamp": 1556703727
    },
    {
        "content": "<p>also, when defining a semantics and e.g. implementing it in Miri, it's really hard to say \"oh and if this value we just created never gets looked at, then these side-effects also dont happen\"</p>",
        "id": 164612106,
        "sender_full_name": "RalfJ",
        "timestamp": 1556703776
    },
    {
        "content": "<p>I wouldn't know how to define that without getting into contradictions. Miri would have to predict the future or something?</p>",
        "id": 164612123,
        "sender_full_name": "RalfJ",
        "timestamp": 1556703803
    },
    {
        "content": "<p>You could to a source-to-source translation before defining the semantics, bu that would be a very weird mix of static and dynamic approaches for the semantics. Probably possible, but very hard to analyze and reason about, which would also be a problem.</p>",
        "id": 164612139,
        "sender_full_name": "RalfJ",
        "timestamp": 1556703833
    }
]