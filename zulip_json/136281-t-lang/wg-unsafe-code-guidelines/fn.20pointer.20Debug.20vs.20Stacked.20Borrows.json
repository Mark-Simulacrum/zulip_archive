[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">test_fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello!&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">FunctionHolder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">function</span>: <span class=\"nc\">fn</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">FunctionHolder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">FunctionHolder</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">function</span>: <span class=\"nc\">test_fn</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">f0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionHolder</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0080]: constant evaluation error: attempted to do invalid arithmetic on pointers that would leak base addresses, e.g., comparing pointers into different allocations\n   --&gt; /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/cmp.rs:978:52\n    |\n978 |                 fn ge(&amp;self, other: &amp;$t) -&gt; bool { (*self) &gt;= (*other) }\n    |                                                    ^^^^^^^^^^^^^^^^^^^ attempted to do invalid arithmetic on pointers that would leak base addresses, e.g., comparing pointers into different allocations\n    |\n    = note: inside call to `std::cmp::impls::&lt;impl std::cmp::PartialOrd for usize&gt;::ge` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/fmt/num.rs:53:30\n    = note: inside call to `&lt;core::fmt::num::LowerHex as core::fmt::num::GenericRadix&gt;::fmt_int::&lt;usize&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/fmt/num.rs:135:46\n    = note: inside call to `core::fmt::num::&lt;impl std::fmt::LowerHex for usize&gt;::fmt` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/fmt/mod.rs:2024:19\n    = note: inside call to `&lt;*const () as std::fmt::Pointer&gt;::fmt` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/ptr.rs:2634:17\n    = note: inside call to `std::ptr::&lt;impl std::fmt::Debug for fn()&gt;::fmt` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/fmt/mod.rs:1914:81\n    = note: inside call to `&lt;&amp;fn() as std::fmt::Debug&gt;::fmt` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/fmt/builders.rs:146:17\n    = note: inside call to closure at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/result.rs:639:22\n    = note: inside call to `std::result::Result::&lt;(), std::fmt::Error&gt;::and_then::&lt;(), [closure@DefId(2/1:2376 ~ core[6458]::fmt[0]::builders[0]::{{impl}}[2]::field[0]::{{closure}}[0]) 0:&amp;mut &amp;mut std::fmt::DebugStruct, 1:&amp;&amp;str, 2:&amp;&amp;dyn std::fmt::Debug]&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/fmt/builders.rs:130:23\nnote: inside call to `std::fmt::DebugStruct::field` at src/main.rs:5:10\n   --&gt; src/main.rs:5:10\n    |\n5   | #[derive(Debug)]\n    |          ^^^^^\n    = note: inside call to `&lt;FunctionHolder as std::fmt::Debug&gt;::fmt` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/fmt/mod.rs:1016:17\n    = note: inside call to `std::fmt::write` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/io/mod.rs:1279:15\n    = note: inside call to `&lt;std::io::StdoutLock as std::io::Write&gt;::write_fmt` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/io/stdio.rs:533:9\n    = note: inside call to `&lt;std::io::Stdout as std::io::Write&gt;::write_fmt` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/io/stdio.rs:786:9\n    = note: inside call to closure at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/thread/local.rs:299:16\n    = note: inside call to `std::thread::LocalKey::&lt;std::cell::RefCell&lt;std::option::Option&lt;std::boxed::Box&lt;dyn std::io::Write + std::marker::Send&gt;&gt;&gt;&gt;::try_with::&lt;[closure@DefId(1/1:1027 ~ std[82ff]::io[0]::stdio[0]::print_to[0]::{{closure}}[0]) 0:&amp;std::fmt::Arguments, 1:&amp;fn() -&gt; std::io::Stdout], std::result::Result&lt;(), std::io::Error&gt;&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/io/stdio.rs:780:18\n    = note: inside call to `std::io::stdio::print_to::&lt;std::io::Stdout&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/io/stdio.rs:802:5\nnote: inside call to `std::io::_print` at &lt;::std::macros::println macros&gt;:2:3\n   --&gt; src/main.rs:18:5\n    |\n18  |     println!(&quot;{:?}&quot;, f0);\n    |     ^^^^^^^^^^^^^^^^^^^^^\n    = note: inside call to `main` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:64:34\n    = note: inside call to closure at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:52:53\n    = note: inside call to closure at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/panicking.rs:293:40\n    = note: inside call to `std::panicking::try::do_call::&lt;[closure@DefId(1/1:1834 ~ std[82ff]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/panicking.rs:289:5\n    = note: inside call to `std::panicking::try::&lt;i32, [closure@DefId(1/1:1834 ~ std[82ff]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe]&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/panic.rs:388:9\n    = note: inside call to `std::panic::catch_unwind::&lt;[closure@DefId(1/1:1834 ~ std[82ff]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32&gt;` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:52:25\n    = note: inside call to `std::rt::lang_start_internal` at /root/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libstd/rt.rs:64:5\n    = note: inside call to `std::rt::lang_start::&lt;()&gt;`\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n</pre></div>\n\n\n<p>/cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^</p>",
        "id": 163954238,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1555984432
    },
    {
        "content": "<p>This has nothing to do with Stacked Borrows. You cannot print pointers in Miri.</p>",
        "id": 164003281,
        "sender_full_name": "RalfJ",
        "timestamp": 1556035423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>  basically Miri does not actually pick integer base addresses for allocations, it keeps them abstract to make execution deterministic. so whenever program behavior actually depends on that choice, Miri aborts.</p>",
        "id": 164024880,
        "sender_full_name": "RalfJ",
        "timestamp": 1556049790
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/miri/issues/224\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/224\">https://github.com/rust-lang/miri/issues/224</a> for the way we plan to fix this, eventually</p>",
        "id": 164024897,
        "sender_full_name": "RalfJ",
        "timestamp": 1556049807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  Sure, but is Miri \"right\" or \"wrong\" here?</p>",
        "id": 164042882,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1556066538
    },
    {
        "content": "<p>the message doesn't mean \"this is UB\", it means \"this program does stuff nit supported by Miri\"</p>",
        "id": 164059582,
        "sender_full_name": "RalfJ",
        "timestamp": 1556090131
    },
    {
        "content": "<p>(we have a long-standing open issue to make this classification clearer)</p>",
        "id": 164059586,
        "sender_full_name": "RalfJ",
        "timestamp": 1556090148
    },
    {
        "content": "<p>Ohhhhhhhh. TIL</p>",
        "id": 164265335,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1556288165
    }
]