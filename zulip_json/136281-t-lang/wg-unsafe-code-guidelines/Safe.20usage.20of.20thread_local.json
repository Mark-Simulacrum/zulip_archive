[
    {
        "content": "<p>I'm trying to understand if this is safe or not: <a href=\"https://play.rust-lang.org/?gist=5568e43218d48148c44f8718b1d68616\">https://play.rust-lang.org/?gist=5568e43218d48148c44f8718b1d68616</a><br>\nOn one hand, logically, it should be safe.<br>\non the other shouldn't <code>one_ref.get_increment()</code> invalidate the pointer that <code>second_ref</code> holds?</p>",
        "id": 216333807,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1605094169
    },
    {
        "content": "<p>I think it is fine due to the <code>UnsafeCell</code>. At least miri thinks it is fine.</p>",
        "id": 216334223,
        "sender_full_name": "bjorn3",
        "timestamp": 1605094447
    },
    {
        "content": "<p>but it doesn't know later that <code>UnsafeCell</code> is used (or does miri tracks pointers that have originated from an unsafeCell?)</p>",
        "id": 216334498,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1605094667
    },
    {
        "content": "<p><code>UnsafeCell::get</code> returns a pointer with <code>SharedReadWrite</code> provenance. This allows mixing accesses with other <code>SharedReadWrite</code> pointers to the same location.</p>",
        "id": 216335172,
        "sender_full_name": "bjorn3",
        "timestamp": 1605095064
    },
    {
        "content": "<p>Miri tracks a borrow stack for each memory byte. Hence the name stacked borrows.</p>\n<p>(it actually merges the borrow stacks of consecutive bytes with the same stack as optimization, but that isn't observable)</p>",
        "id": 216335290,
        "sender_full_name": "bjorn3",
        "timestamp": 1605095150
    },
    {
        "content": "<p>Your example is fine in that your <code>*mut T</code> is actually a <code>&amp;'_ Cell&lt;T&gt;</code>, so Stacked-Borrows-wise, all is fine.<br>\nYour example is unsound in that your <code>*mut T</code> is actually a <code>&amp;'static Cell&lt;T&gt;</code>. There is a reason thread locals have such a \"weird\" / inconvenient API.</p>",
        "id": 216343547,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605100370
    },
    {
        "content": "<p>PoC (run with Miri): <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9deec168fb63a1b0b2369ac6d3790041\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=9deec168fb63a1b0b2369ac6d3790041</a></p>",
        "id": 216345220,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605101297
    },
    {
        "content": "<p>So this is how I'd implement your abstraction instead: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2d377f86906b70e18cf6e3bf959a4df7\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2d377f86906b70e18cf6e3bf959a4df7</a></p>",
        "id": 216346686,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605102102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> hmm so the problem in your PoC is because of drop order in thread_local's?</p>",
        "id": 216355249,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1605106333
    },
    {
        "content": "<p>Basically thread locals are / may be dropped, so they're not <code>'static</code>-forever-lasting. But due to their global nature, they can be arbitrarily forged in many places, and used in that many places, such as in destructors. And indeed destructor order is not guaranteed, so you could have somebody using your <code>ThreadLocal::get_increment</code> within a destructor of another thread-local that happens to be dropped _after_ the (<code>Unsafe</code>)<code>Cell&lt;usize&gt;</code>) thread-local <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 216355572,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605106498
    },
    {
        "content": "<p>But the current drop order will \"drop\" globals without destructors last, right? (which is why you had to add <code>OnDrop2</code> that also impls Drop)</p>",
        "id": 216356083,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1605106744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"249222\">Elichai Turkel</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Safe.20usage.20of.20thread_local/near/216356083\">said</a>:</p>\n<blockquote>\n<p>But the current drop order will \"drop\" globals without destructors last, right?</p>\n</blockquote>\n<p><code>thread_local!</code> uses os-specific APIs to call <code>drop</code> for thread-locals. I am not sure if there is any way to predict the order in which this happens.</p>",
        "id": 216729566,
        "sender_full_name": "RalfJ",
        "timestamp": 1605361111
    }
]