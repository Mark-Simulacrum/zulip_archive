[
    {
        "content": "<p>Hello, the reference doesn't say (as far as I could find) anything about when it is safe to transmute things. The nomicon gives some examples of when it's <em>un</em>safe, but it's not clear whether they're supposed to be exhaustive.</p>\n<p>In particular, the nomicon says that transmuting between non-repr(C) types is always UB, but it's not clear whether <code>T&lt;'a&gt;</code> and <code>T&lt;'b&gt;</code> should be considered \"different types\". It seems transmuting between those must be okay (as long as the lifetimes are actually valid for the objects in question, of course), but I can't find anywhere where this is guaranteed.</p>\n<p>It does seem to be allowed by the examples on <a href=\"https://doc.rust-lang.org/std/mem/fn.transmute.html\">https://doc.rust-lang.org/std/mem/fn.transmute.html</a> , but I'm not sure whether that is meant to be considered an authoritative reference.</p>",
        "id": 199369147,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1591018430
    },
    {
        "content": "<p>To add some color here, we have two methods we'd love to use in order to reduce allocations; I've wanted this plenty of other times in the past too but never asked. Would either of these be deemed \"defined behavior\"?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">safe_transmute1</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;inner</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;outer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;inner</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;outer</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"na\">&#39;outer</span>: <span class=\"na\">&#39;inner</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"na\">&#39;outer</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">safe_transmute2</span><span class=\"o\">&lt;</span><span class=\"n\">T1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T2</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T1</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T2</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T1</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T2</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T1</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T2</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">clear</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Clearly the innards of <code>Vec::with_capacity</code> perform some shenanigans, and the goal is to recycle the allocation without actually needing to involve the allocator. The use (for context) is where you have buffers of things with lifetimes, and you want to re-use the buffer across the things with the lifetimes, but are happy to empty it completely each time.</p>\n<p>But, don't let these specific questions get in the way of Brennan's question.</p>",
        "id": 199370032,
        "sender_full_name": "Frank McSherry",
        "timestamp": 1591018827
    },
    {
        "content": "<p>If you manually construct the new vec with Vec::from_raw_parts, that function should be fine, since the requirements there are just that the allocation is appropriately sized and aligned</p>",
        "id": 199371918,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1591019668
    },
    {
        "content": "<p>a transmute should definitely work, but IMO doing it manually gives you more obvious guarantees</p>",
        "id": 199371956,
        "sender_full_name": "Steven Fackler",
        "timestamp": 1591019700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243558\">@Steven Fackler</span> should it be documented/guaranteed somewhere that transmuting <code>T&lt;'a&gt;</code> to <code>T&lt;'b&gt;</code> is always okay as long as the lifetimes are valid?</p>",
        "id": 199375670,
        "sender_full_name": "Brennan Vincent",
        "timestamp": 1591021779
    },
    {
        "content": "<p>it absolutely should be</p>",
        "id": 199403162,
        "sender_full_name": "Lokathor",
        "timestamp": 1591035011
    },
    {
        "content": "<p>The second one is definetly UB, because Vec&lt;T1&gt; != V&lt;T2&gt;<br>\nMore concretely, Rust is allowed to change the order of the fields in a struct, so 2 different types even if they look the same might not have the same field order, padding, etc.</p>\n<p>About the first I'm not sure if monomorphism produces 2 different types for different lifetimes. But as people already pointed out, <code>to_raw_parts</code> and <code>from_raw_parts</code> are what you're actually looking for.</p>",
        "id": 199414926,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1591041289
    },
    {
        "content": "<p>After borrowck all lifetimes are replaces with <code>ReErased</code>, so the layout must be identical. (by the way this replacement of lifetimes <code>ReErased</code> after borrowck is the reason specialization is unsound, as lifetimes can affect how associated types are resolved and thus replacing them with <code>ReErased</code> can change it compared to what typeck sees)</p>",
        "id": 199415193,
        "sender_full_name": "bjorn3",
        "timestamp": 1591041475
    },
    {
        "content": "<p>generally, the answer to \"when is transmute guaranteed to work\" is \"whenever data layout of both types is guaranteed, and matches appropriately\". This just shifts the question but data layout is more broadly useful than transmute so I think it helps. :D</p>",
        "id": 200514701,
        "sender_full_name": "RalfJ",
        "timestamp": 1591862313
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/unsafe-code-guidelines/layout.html\">https://rust-lang.github.io/unsafe-code-guidelines/layout.html</a> is the best docs we have for what is guaranteed there. please note the disclaimers for things that the UCG agreed should be guaranteed but haven't been RFC'd yet.</p>",
        "id": 200514756,
        "sender_full_name": "RalfJ",
        "timestamp": 1591862365
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232844\">Brennan Vincent</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/transmute/near/199375670\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243558\">Steven Fackler</span> should it be documented/guaranteed somewhere that transmuting <code>T&lt;'a&gt;</code> to <code>T&lt;'b&gt;</code> is always okay as long as the lifetimes are valid?</p>\n</blockquote>\n<p>that is not something that has come up in UCG discussions around guaranteed layout, I think. But it's a good question. Could you open a thread about that in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues\">https://github.com/rust-lang/unsafe-code-guidelines/issues</a> ?</p>",
        "id": 200514774,
        "sender_full_name": "RalfJ",
        "timestamp": 1591862395
    }
]