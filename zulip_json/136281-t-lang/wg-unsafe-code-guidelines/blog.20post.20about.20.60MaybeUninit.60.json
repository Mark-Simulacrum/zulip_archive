[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>! We were discussing <a href=\"https://github.com/rust-lang/rust/pull/60445\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60445\">https://github.com/rust-lang/rust/pull/60445</a> in the lang team meeting today, and we were thinking that it would be great if we had a good write-up about the deprecation of <code>mem::uninitialized</code>. Such a write-up would, I think, motivate the change, explain what is deprecated, and epxlain what people should do instead.  We thought you would be the perfect person to write it. Interested? :) </p>\n<p>(cc <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  )</p>",
        "id": 164741387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556827984
    },
    {
        "content": "<p>Now that I write this, I am wondering if \"blog post\" is the right term</p>",
        "id": 164741400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556827997
    },
    {
        "content": "<p>Maybe it should be posted as a github issue and then 'cross-posted' to internals, for example</p>",
        "id": 164741407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556828009
    },
    {
        "content": "<p>(The idea is that the deprecation notice can also link to this)</p>",
        "id": 164741421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556828024
    },
    {
        "content": "<p>That is, we want to (a) notify folks in advance and then (b) have something to link them to</p>",
        "id": 164741432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556828035
    },
    {
        "content": "<p>Interested, yes. Does this come with a ticket for my nearest time machine? :P</p>",
        "id": 164919277,
        "sender_full_name": "RalfJ",
        "timestamp": 1557062542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> what did you have in mind in terms of timing and where this would end up being posted? When I look at my Rust folder I already feel like I made too many commitments, so I am a bit hesitant right now to add new ones^^. But also this is a topic I'd very much like to help \"get right\".</p>",
        "id": 164919299,
        "sender_full_name": "RalfJ",
        "timestamp": 1557062639
    },
    {
        "content": "<blockquote>\n<p>Does this come with a ticket for my nearest time machine? :P</p>\n</blockquote>\n<p>Sorry; we are all out of those. :P</p>\n<blockquote>\n<p>what did you have in mind in terms of timing and where this would end up being posted?</p>\n</blockquote>\n<p>Close to the 1.36 release would be good so we can link to it in <a href=\"http://blog.rust-lang.org\" target=\"_blank\" title=\"http://blog.rust-lang.org\">blog.rust-lang.org</a><br>\nI was thinking you can post it in your own blog but maybe Niko thought something else.</p>",
        "id": 164919404,
        "sender_full_name": "centril",
        "timestamp": 1557062770
    },
    {
        "content": "<p>If writing the post is too much work, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, helping to edit it might be another option</p>",
        "id": 164999850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557162733
    },
    {
        "content": "<p>I wonder what the post should say about <code>MaybeUninit</code> and structs...</p>",
        "id": 165788004,
        "sender_full_name": "RalfJ",
        "timestamp": 1557993469
    },
    {
        "content": "<p>Is there anything to say about MaybeUninit other than: mem::uninitialized doesn't really work because types can have validity constraints, and uninit basically says \"please assume any constraints are violated\". So here's a type-level solution so that the compiler can understand what you're trying to do and not apply those assumptions?</p>",
        "id": 165837200,
        "sender_full_name": "Gankra",
        "timestamp": 1558032182
    },
    {
        "content": "<p>I am kinda bored, so if that's right, I am willing to do the writeup</p>",
        "id": 165837320,
        "sender_full_name": "Gankra",
        "timestamp": 1558032270
    },
    {
        "content": "<p>(Might also mention that undef/poison is a disaster in LLVM, so avoiding that as much as possible is also For The Best)</p>",
        "id": 165837355,
        "sender_full_name": "Gankra",
        "timestamp": 1558032304
    },
    {
        "content": "<p>(Although does MaybeUninit still just lower to undef..?)</p>",
        "id": 165837393,
        "sender_full_name": "Gankra",
        "timestamp": 1558032342
    },
    {
        "content": "<p>yeah that's basically it</p>",
        "id": 165839297,
        "sender_full_name": "RalfJ",
        "timestamp": 1558033475
    },
    {
        "content": "<p>it lowers to cosntructing a union by initializing a zero-sized field</p>",
        "id": 165839319,
        "sender_full_name": "RalfJ",
        "timestamp": 1558033488
    },
    {
        "content": "<p>so, its effectively <code>undef</code></p>",
        "id": 165839338,
        "sender_full_name": "RalfJ",
        "timestamp": 1558033499
    },
    {
        "content": "<p>is it <em>not</em> undef in any particular way?</p>",
        "id": 165840815,
        "sender_full_name": "Gankra",
        "timestamp": 1558034585
    },
    {
        "content": "<p>only in the way how we codegen (the <code>uninit</code> intrinsic is not involved)</p>",
        "id": 165844585,
        "sender_full_name": "RalfJ",
        "timestamp": 1558037272
    },
    {
        "content": "<p>Drafted the post up. Do Not Distribute: <a href=\"https://gankro.github.io/blah/initialize-me-maybe/\" target=\"_blank\" title=\"https://gankro.github.io/blah/initialize-me-maybe/\">https://gankro.github.io/blah/initialize-me-maybe/</a></p>",
        "id": 165859148,
        "sender_full_name": "Gankra",
        "timestamp": 1558050043
    },
    {
        "content": "<blockquote>\n<p>// statically uninit, init it</p>\n</blockquote>\n<p>I prefer to expand the initialisms here (+ consequence changes in the whole text)</p>",
        "id": 165860128,
        "sender_full_name": "centril",
        "timestamp": 1558051220
    },
    {
        "content": "<p>I didn't want the lines to get long, and also it gets super repetitive</p>",
        "id": 165860263,
        "sender_full_name": "Gankra",
        "timestamp": 1558051384
    },
    {
        "content": "<blockquote>\n<p>rust has the Option type (or any enum, really):</p>\n</blockquote>\n<p>You sometimes capitalize Rust and sometimes not... pick one :P</p>\n<p>Also, <code>Option&lt;T&gt;</code>  is the type, <code>Option</code> isn't a type.</p>",
        "id": 165860274,
        "sender_full_name": "centril",
        "timestamp": 1558051391
    },
    {
        "content": "<blockquote>\n<p>and also very poorly specified.</p>\n</blockquote>\n<p>s/very//g</p>",
        "id": 165860285,
        "sender_full_name": "centril",
        "timestamp": 1558051414
    },
    {
        "content": "<p>s/can't/cannot/g</p>",
        "id": 165860608,
        "sender_full_name": "centril",
        "timestamp": 1558051774
    },
    {
        "content": "<p>disagreed on \"can't\" and \"Option\"</p>",
        "id": 165860674,
        "sender_full_name": "Gankra",
        "timestamp": 1558051832
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md#referring-to-types\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md#referring-to-types\">https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md#referring-to-types</a></p>",
        "id": 165860696,
        "sender_full_name": "centril",
        "timestamp": 1558051872
    },
    {
        "content": "<blockquote>\n<p>What Is MaybeUninit?</p>\n</blockquote>\n<p>I don't think you link to the type in the standard library anywhere in the post, would be good to do so</p>",
        "id": 165861948,
        "sender_full_name": "centril",
        "timestamp": 1558053409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> I don't have much time, but the general impression is that the post is too long</p>",
        "id": 165889648,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558090118
    },
    {
        "content": "<p>We should just explain \"What's uninitialized memory?\" \"Why is that useful for Rust? (optimizations)\" \"Why is that useful for users? (optimizations)\" \"Why is it dangerous?\" (user optimization with bug gets \"\"misoptimized\"\") \"Why is mem::uninitialized deprecated?\" (makes it almost impossible to write code that doesn't get misoptimized), \"What is MaybeUninit and how does it improve on mem::uninitialized failures?\"</p>",
        "id": 165889771,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558090248
    },
    {
        "content": "<p>I don't really think we have to cover the heap to explain any of that</p>",
        "id": 165889789,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558090265
    },
    {
        "content": "<p>A more comprehensive blog post covering everything there is to know about uninitialized memory might want to do that (although that might belong in the nomicon), but the blog post that accompanies the release should be short and to the point, such that hopefully most people read it.</p>",
        "id": 165889843,
        "sender_full_name": "gnzlbg",
        "timestamp": 1558090331
    },
    {
        "content": "<p>I could definitely see removing the \"working with safe uninit memory\" section, but everything else seems relevant and fairly brief</p>",
        "id": 165910099,
        "sender_full_name": "Gankra",
        "timestamp": 1558107138
    },
    {
        "content": "<blockquote>\n<p>So as a conservative model it's reasonable to just declare that it is Undefined Behaviour to read uninitialized memory. Full stop.</p>\n</blockquote>\n<p>Uh, I am not sure if I agree. <code>memcpy</code> of uninitialized memory is generally considered okay. In fact, given that padding is uninitialized, this occurs in safe Rust.</p>",
        "id": 165919343,
        "sender_full_name": "RalfJ",
        "timestamp": 1558113992
    },
    {
        "content": "<p>Also, I feel the first section doesnt go far enough in saying <em>how exotic</em> uninit memory is -- namely, that it is unstable and can change when you look at it multiple times</p>",
        "id": 165919380,
        "sender_full_name": "RalfJ",
        "timestamp": 1558114021
    },
    {
        "content": "<p>so even <code>x == x</code> (for <code>x: i32</code>) can legimiately be made <code>false</code> by the compiler</p>",
        "id": 165919406,
        "sender_full_name": "RalfJ",
        "timestamp": 1558114043
    },
    {
        "content": "<p>so IMO one should really think of bits as having 3 possible states (0, 1, U). I feel that's easier to explain than the \"magic substance\"^^</p>",
        "id": 165919441,
        "sender_full_name": "RalfJ",
        "timestamp": 1558114074
    },
    {
        "content": "<p>Also I tend to agree about the length -- I think the \"safe working with uninit memory\" can be shortened, and I am not sure if a survey of all sources of uninit memory in Rust is the best approach here. My thinking was that the post would explain mem::uninit (that can come nicely after the safe section, basically as a way to \"trick\" the \"overly strict\" static checks described in the safe section), and how its wrong, and then how MaybeUninit saves the day</p>",
        "id": 165919727,
        "sender_full_name": "RalfJ",
        "timestamp": 1558114256
    },
    {
        "content": "<p>the fact that it is a union shouldnt matter</p>",
        "id": 165919737,
        "sender_full_name": "RalfJ",
        "timestamp": 1558114261
    },
    {
        "content": "<p>I wasn't sure if the \"can change value\" thing was a concensus semantic (or if that was undef vs poison)</p>",
        "id": 165920518,
        "sender_full_name": "Gankra",
        "timestamp": 1558114834
    },
    {
        "content": "<p>but that's a good point on memcopying</p>",
        "id": 165920536,
        "sender_full_name": "Gankra",
        "timestamp": 1558114863
    },
    {
        "content": "<p>also idk, in my mind it's very interesting that it's just \"yo use a union\" and not like \"ah we made this brilliant new thing that's magic\"</p>",
        "id": 165920570,
        "sender_full_name": "Gankra",
        "timestamp": 1558114911
    },
    {
        "content": "<blockquote>\n<p>I wasn't sure if the \"can change value\" thing was a concensus semantic (or if that was undef vs poison)</p>\n</blockquote>\n<p>undef has it and poison makes it not observable</p>",
        "id": 165920711,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115005
    },
    {
        "content": "<p>so yes I'd say it is pretty much consesus</p>",
        "id": 165920718,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115016
    },
    {
        "content": "<p>I mean this is but one way to explain the three-valued-bit thing</p>",
        "id": 165920816,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115089
    },
    {
        "content": "<p>the other is to just say \"it is special and not like any initialized memory, hence -&gt; bits have three states\"</p>",
        "id": 165920839,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115106
    },
    {
        "content": "<blockquote>\n<p>also idk, in my mind it's very interesting that it's just \"yo use a union\" and not like \"ah we made this brilliant new thing that's magic\"</p>\n</blockquote>\n<p>it <em>is</em> interesting, but I think when using MaybeUninit one should generally treat it as an opaque abstraction, and hence it should be possible to explain it as such</p>",
        "id": 165920937,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115167
    },
    {
        "content": "<p>also re: the post structure, that was just what I had in mind. maybe other structures work better. I guess I am curious why you chose yours :)</p>",
        "id": 165920973,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115194
    },
    {
        "content": "<p>I just wrote it from the perspective of \"how do I explain this to someone who has never heard of any of this\"</p>",
        "id": 165921202,
        "sender_full_name": "Gankra",
        "timestamp": 1558115351
    },
    {
        "content": "<p>I guess also your goal was different -- my goal would have been to explain \"just\" mem::uninit vs MaybeUninit</p>",
        "id": 165921402,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115484
    },
    {
        "content": "<p>How do you feel about \"So as a conservative model it's reasonable to just declare that if you do anything with uninitialized memory <em>other</em> than just copying it around, <strong>it is Undefined Behaviour</strong>. Full stop.\"</p>",
        "id": 165921410,
        "sender_full_name": "Gankra",
        "timestamp": 1558115490
    },
    {
        "content": "<p>I agree factually :)</p>",
        "id": 165921422,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115504
    },
    {
        "content": "<p>I still think this is a good opportunity to instill the idea in people that uninit is not \"magic\" and not \"random bits\" but just that bits can be more than 0 and 1. People need to free themselves from the bounds of the hardware that constraints their imagination in terms of what the abstract machine they are <em>really</em> programming looks like :D</p>",
        "id": 165921519,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115559
    },
    {
        "content": "<p>I'm not convinced that nature of uninitialized memory is as well-defined as you claim</p>",
        "id": 165921609,
        "sender_full_name": "Gankra",
        "timestamp": 1558115628
    },
    {
        "content": "<p>this is our language, we can define it :D</p>",
        "id": 165921948,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115829
    },
    {
        "content": "<p>and this is basically the poison model</p>",
        "id": 165921976,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115859
    },
    {
        "content": "<p>which is the most reasonable model out there (and you linked to the paper showing that)</p>",
        "id": 165921989,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115865
    },
    {
        "content": "<p>so while there may be changes in the fine print, I think it is more useful to teach <em>a</em> concrete model (even if it is preliminary) than to wobble around with nothing concrete to say or point at</p>",
        "id": 165922073,
        "sender_full_name": "RalfJ",
        "timestamp": 1558115900
    },
    {
        "content": "<p>I second this. \"Bits can be more than 0 or 1\" seems a fairly useful intuition to instill in people. There's a lot of decisions to be made about whether it's actually per-bit or more coarse, how it propagates exactly, etc. but the general idea seems like it can be stretched to cover practically any plausible semantics. It's only completely misleading for a model where uninitialized memory is really just a non-deterministic string of 1s and 0s but I see no way we'll actually end up with that.</p>",
        "id": 165922239,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558116037
    },
    {
        "content": "<p>also, this helps when eventually we have to teach people that pointers are more than an integer (because pointers got provenance). if they already gave up the idea that Rust's memory equals hardware memory, that will be an easier sell. ;)</p>",
        "id": 165922584,
        "sender_full_name": "RalfJ",
        "timestamp": 1558116296
    },
    {
        "content": "<p>shameless plug: <a href=\"https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html\">https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html</a></p>",
        "id": 165922618,
        "sender_full_name": "RalfJ",
        "timestamp": 1558116325
    },
    {
        "content": "<blockquote>\n<p>There's a lot of decisions to be made about whether it's actually per-bit or more coarse, how it propagates exactly, etc</p>\n</blockquote>\n<p>yeah, that's the part I meant by \"fine print\"</p>",
        "id": 165922713,
        "sender_full_name": "RalfJ",
        "timestamp": 1558116379
    },
    {
        "content": "<p>The thing is, we're slaves to our compiler backends, so as long as uninit memory becomes llvm undef, we have to cope with that mess</p>",
        "id": 165922946,
        "sender_full_name": "Gankra",
        "timestamp": 1558116574
    },
    {
        "content": "<p>compiling from this bitwise-poison model to undef is sound</p>",
        "id": 165923033,
        "sender_full_name": "RalfJ",
        "timestamp": 1558116620
    },
    {
        "content": "<p>(we have to make the right choices for how operators propagate poison, but it can be done)</p>",
        "id": 165923100,
        "sender_full_name": "RalfJ",
        "timestamp": 1558116672
    },
    {
        "content": "<p>basically, a bitstring like <code>0UU1</code> maps to the set of LLVM values such that the non-U parts of the bitstring are the same</p>",
        "id": 165923189,
        "sender_full_name": "RalfJ",
        "timestamp": 1558116726
    },
    {
        "content": "<p>so <code>UUUUUUUU</code> = <code>undef</code> (at i8)</p>",
        "id": 165923195,
        "sender_full_name": "RalfJ",
        "timestamp": 1558116737
    },
    {
        "content": "<p>and then we say that <code>UUUUUUUU * 00000000 = UUUUUUUU</code>, while LLVM says the result is <code>00000000</code>, but that's okay because we are less defined (so in the worst case, a program that has UB in Rust will not have UB in LLVM)</p>",
        "id": 165923238,
        "sender_full_name": "RalfJ",
        "timestamp": 1558116789
    },
    {
        "content": "<p>ok I update the section definiing uninit memory, and also removed the safe use section (replaced with links to the nomicon and option): <a href=\"https://gankro.github.io/blah/initialize-me-maybe/\" target=\"_blank\" title=\"https://gankro.github.io/blah/initialize-me-maybe/\">https://gankro.github.io/blah/initialize-me-maybe/</a></p>",
        "id": 165924273,
        "sender_full_name": "Gankra",
        "timestamp": 1558117487
    },
    {
        "content": "<p>Considering there's a \"skip to the good parts\" link, I think this is a pretty reasonable structure</p>",
        "id": 165924322,
        "sender_full_name": "Gankra",
        "timestamp": 1558117508
    },
    {
        "content": "<p>(most of the vertical height is code examples)</p>",
        "id": 165924362,
        "sender_full_name": "Gankra",
        "timestamp": 1558117538
    },
    {
        "content": "<p>does your template supports subsections? looks like the \"three kind of uninit\" should be subsections of the \"unsafe\" section</p>",
        "id": 165925097,
        "sender_full_name": "RalfJ",
        "timestamp": 1558118015
    },
    {
        "content": "<p>not having clicked the \"skip to the good parts\" link, I thought these were all top-level, so I didnt really see anything stand out as I went to the \"good parts\"</p>",
        "id": 165925163,
        "sender_full_name": "RalfJ",
        "timestamp": 1558118044
    },
    {
        "content": "<p>also, seems odd to have \"Finally, we come to the focus of this post.\" in the \"skip this\" part?</p>",
        "id": 165925185,
        "sender_full_name": "RalfJ",
        "timestamp": 1558118063
    },
    {
        "content": "<p>hm. your wording is dancing the edge to make it sound like an uninit <code>i32</code> would be okay because it has no extra invariant...</p>",
        "id": 165925272,
        "sender_full_name": "RalfJ",
        "timestamp": 1558118130
    },
    {
        "content": "<p>and it may well be but we dont want to commit to that yet^^</p>",
        "id": 165925294,
        "sender_full_name": "RalfJ",
        "timestamp": 1558118149
    },
    {
        "content": "<p>also, if you want to add another example, \"out pointers\" are a nice one</p>",
        "id": 165925398,
        "sender_full_name": "RalfJ",
        "timestamp": 1558118223
    },
    {
        "content": "<p>They are subsections in the markup, I just make h1/h2 look the same atm</p>",
        "id": 165928746,
        "sender_full_name": "Gankra",
        "timestamp": 1558120614
    },
    {
        "content": "<p>is this good to go?</p>",
        "id": 166175817,
        "sender_full_name": "Gankra",
        "timestamp": 1558447803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^</p>",
        "id": 166176055,
        "sender_full_name": "Gankra",
        "timestamp": 1558447951
    },
    {
        "content": "<p>I left some comments here that you didn't reply to, such as</p>\n<blockquote>\n<p>seems odd to have \"Finally, we come to the focus of this post.\" in the \"skip this\" part?</p>\n</blockquote>",
        "id": 166178511,
        "sender_full_name": "RalfJ",
        "timestamp": 1558449579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> made a tweek to \"what went wrong\" that should hopefully satisfy the concern you had with that: <a href=\"/user_uploads/4715/m_wSRewrTJBR0R21t3jUtDIY/Screen-Shot-2019-05-21-at-10.39.27-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-05-21-at-10.39.27-AM.png\">Screen-Shot-2019-05-21-at-10.39.27-AM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/m_wSRewrTJBR0R21t3jUtDIY/Screen-Shot-2019-05-21-at-10.39.27-AM.png\" target=\"_blank\" title=\"Screen-Shot-2019-05-21-at-10.39.27-AM.png\"><img src=\"/user_uploads/4715/m_wSRewrTJBR0R21t3jUtDIY/Screen-Shot-2019-05-21-at-10.39.27-AM.png\"></a></div>",
        "id": 166178618,
        "sender_full_name": "Gankra",
        "timestamp": 1558449621
    },
    {
        "content": "<p>(looking at skip this now...)</p>",
        "id": 166178657,
        "sender_full_name": "Gankra",
        "timestamp": 1558449657
    },
    {
        "content": "<p>ok yeah made it link to the previous subsection. It's short enough and easy to skip forward from if people feel familiar with the type.</p>",
        "id": 166179048,
        "sender_full_name": "Gankra",
        "timestamp": 1558449896
    },
    {
        "content": "<p>what about?</p>\n<blockquote>\n<p>your wording is dancing the edge to make it sound like an uninit i32 would be okay because it has no extra invariant...</p>\n</blockquote>",
        "id": 166180616,
        "sender_full_name": "RalfJ",
        "timestamp": 1558450954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is that not addressed by the screenshot i just posted?</p>",
        "id": 166181134,
        "sender_full_name": "Gankra",
        "timestamp": 1558451316
    },
    {
        "content": "<p>oh, sorry, missed that <em>oops</em></p>",
        "id": 166181786,
        "sender_full_name": "RalfJ",
        "timestamp": 1558451733
    },
    {
        "content": "<p>so should I post this..?</p>",
        "id": 166184890,
        "sender_full_name": "Gankra",
        "timestamp": 1558453817
    },
    {
        "content": "<p><em>squirms impatiently</em></p>",
        "id": 166196937,
        "sender_full_name": "Gankra",
        "timestamp": 1558461854
    },
    {
        "content": "<p>I'm gonna post this at 3pm EST (in 40 mins) unless someone objects, because people are already discussing the change</p>",
        "id": 166197782,
        "sender_full_name": "Gankra",
        "timestamp": 1558462383
    },
    {
        "content": "<p>the release is happening in 6 weeks, why the urge?^^</p>",
        "id": 166197939,
        "sender_full_name": "RalfJ",
        "timestamp": 1558462493
    },
    {
        "content": "<p>people were discussing this for months</p>",
        "id": 166197958,
        "sender_full_name": "RalfJ",
        "timestamp": 1558462509
    },
    {
        "content": "<p>but also, you addressedd all the comments I can remember, so I wont object ;)</p>",
        "id": 166197993,
        "sender_full_name": "RalfJ",
        "timestamp": 1558462545
    },
    {
        "content": "<p>Because people using nightly will start seeing this, and they need a clear explanation</p>",
        "id": 166198013,
        "sender_full_name": "Gankra",
        "timestamp": 1558462561
    },
    {
        "content": "<blockquote>\n<p>For the compiler people out there, mem::uninitialized simply lowers to llvm's undef.</p>\n</blockquote>\n<p>might be worth relating this to the \"uninitailized\" state of the three-state boolean you mention earlier in the post?</p>",
        "id": 166198115,
        "sender_full_name": "RalfJ",
        "timestamp": 1558462619
    },
    {
        "content": "<p>they wont see a deprecation warning unless they specifically opt-on via <code>warn(deprecated_in_future)</code> if that's what you mean</p>",
        "id": 166198140,
        "sender_full_name": "RalfJ",
        "timestamp": 1558462642
    },
    {
        "content": "<p>oh! didn't know that was a thing</p>",
        "id": 166198244,
        "sender_full_name": "Gankra",
        "timestamp": 1558462708
    },
    {
        "content": "<blockquote>\n<p>I wasn't 100% sure if I could claim that arr[i] = x doesn't create a reference,</p>\n</blockquote>\n<p>this is a MIR primitive, so you can be sure. but the moment <code>Deref</code> or <code>Index</code> are involved you are hosed...</p>",
        "id": 166198336,
        "sender_full_name": "RalfJ",
        "timestamp": 1558462782
    },
    {
        "content": "<blockquote>\n<p>And to be absolutely clear, it's not obvious to the Unsafe Code Guidelines team that mem::uninitialized is usable even for always-valid types like u32. </p>\n</blockquote>\n<p>again might be worth saying that this is because of the three-state boolean (so u32 isn't really always-valid, it's just always-valid for 0s and 1s)</p>",
        "id": 166198463,
        "sender_full_name": "RalfJ",
        "timestamp": 1558462851
    },
    {
        "content": "<p>other than that, looks great :)</p>",
        "id": 166198594,
        "sender_full_name": "RalfJ",
        "timestamp": 1558462891
    },
    {
        "content": "<blockquote>\n<p>this is a MIR primitive, so you can be sure. but the moment <code>Deref</code> or <code>Index</code> are involved you are hosed...</p>\n</blockquote>\n<p>I don't think we want to guarantee such MIR details to users right now. More conservative to pretend it goes through the (actually existing) <code>impl Index&lt;usize&gt; for [T]</code>.</p>",
        "id": 166198602,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558462900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> does both slices and arrays have the \"builtin\" impl?</p>",
        "id": 166198614,
        "sender_full_name": "Gankra",
        "timestamp": 1558462911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> fair</p>",
        "id": 166198887,
        "sender_full_name": "RalfJ",
        "timestamp": 1558463074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> looks like it: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c2a206fa78dcd76fdee9d5776877b7d1\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c2a206fa78dcd76fdee9d5776877b7d1\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c2a206fa78dcd76fdee9d5776877b7d1</a></p>",
        "id": 166198895,
        "sender_full_name": "RalfJ",
        "timestamp": 1558463078
    },
    {
        "content": "<p>neat</p>",
        "id": 166198933,
        "sender_full_name": "Gankra",
        "timestamp": 1558463107
    },
    {
        "content": "<p>but yeah I agree it's too subtle to declare atm</p>",
        "id": 166198946,
        "sender_full_name": "Gankra",
        "timestamp": 1558463115
    },
    {
        "content": "<p>it's sad that we lose the bounds check that way though</p>",
        "id": 166199106,
        "sender_full_name": "RalfJ",
        "timestamp": 1558463216
    },
    {
        "content": "<p>I mean, we totally will one day rely on <code>(*x).field</code> not going through any <code>Deref</code></p>",
        "id": 166199139,
        "sender_full_name": "RalfJ",
        "timestamp": 1558463238
    },
    {
        "content": "<p>not sure why <code>(*x)[i]</code> should be different, then</p>",
        "id": 166199148,
        "sender_full_name": "RalfJ",
        "timestamp": 1558463246
    },
    {
        "content": "<p>Field access can't be overloaded, indexing can, so treating <code>(*x)[i]</code> differently depending on the type of <code>x</code> means there's some inconsistency</p>",
        "id": 166199243,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558463309
    },
    {
        "content": "<p>But to be clear, I could totally see us guaranteeing it, just... not now</p>",
        "id": 166199287,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558463351
    },
    {
        "content": "<p>I would be scared to rely on it just because if I see x[i] i don't know if that's like an array or slice or vec, and if it's vec, is the indexing impl on vec or the slice and it's doing autoderef andddddd aaaaaaaaa</p>",
        "id": 166199494,
        "sender_full_name": "Gankra",
        "timestamp": 1558463478
    },
    {
        "content": "<p>but my good friend ptr.add(i).write(val) will never do me wrong</p>",
        "id": 166199540,
        "sender_full_name": "Gankra",
        "timestamp": 1558463519
    },
    {
        "content": "<p>posted: <a href=\"https://twitter.com/Gankro/status/1130914262631821312\" target=\"_blank\" title=\"https://twitter.com/Gankro/status/1130914262631821312\">https://twitter.com/Gankro/status/1130914262631821312</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/Gankro/status/1130914262631821312\" target=\"_blank\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/990027762143379456/yizf_HW8_normal.jpg\"></a><p><span aria-label=\"music\" class=\"emoji emoji-1f3b5\" role=\"img\" title=\"music\">:music:</span> Hey, I just alloc'd you\n<span aria-label=\"music\" class=\"emoji emoji-1f3b5\" role=\"img\" title=\"music\">:music:</span> and this is UB\n<span aria-label=\"music\" class=\"emoji emoji-1f3b5\" role=\"img\" title=\"music\">:music:</span> But here's my type\n<span aria-label=\"music\" class=\"emoji emoji-1f3b5\" role=\"img\" title=\"music\">:music:</span> so initialize me maybe\n\nmem::uninitialized IS BROKEN AND DEPRECATED\n\n<a href=\"https://t.co/9kcLkRJ1AZ\" target=\"_blank\" title=\"https://t.co/9kcLkRJ1AZ\">https://gankro.github.io/blah/initialize-me-maybe/</a></p><span>- Alexis Beingessner (@Gankro)</span></div></div>",
        "id": 166203140,
        "sender_full_name": "Gankra",
        "timestamp": 1558465968
    },
    {
        "content": "<p><span aria-label=\"musical notes\" class=\"emoji emoji-1f3b6\" role=\"img\" title=\"musical notes\">:musical_notes:</span></p>",
        "id": 166203828,
        "sender_full_name": "RalfJ",
        "timestamp": 1558466482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankro</span> sorry, was traveling, but it seems like there was a lot of discussion here! thanks for working on that!</p>",
        "id": 166753921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559073665
    },
    {
        "content": "<p>if i have time I'm going to write a followup comparing the C++/Rust models here a bit more, because a lot of people got caught up on \"well C++ can do this\", because I didn't really drill into the buckwild things mem::uninitialized vaguely implies you can do.</p>",
        "id": 166765872,
        "sender_full_name": "Gankra",
        "timestamp": 1559082558
    }
]