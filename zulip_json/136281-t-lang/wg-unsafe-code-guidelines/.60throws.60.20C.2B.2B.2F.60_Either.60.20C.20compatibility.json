[
    {
        "content": "<p>Have people been thinking about how to make us compatible with <a href=\"https://docs.google.com/viewer?a=v&amp;pid=forums&amp;srcid=MTEwODAzNzI2MjM1OTc0MjE3MjkBMDIyMjg0NDY2NTc4NzYyMDQzODYBX1RlYjRCNjREQUFKATAuMQFpc29jcHAub3JnAXYy&amp;authuser=0\" target=\"_blank\" title=\"https://docs.google.com/viewer?a=v&amp;pid=forums&amp;srcid=MTEwODAzNzI2MjM1OTc0MjE3MjkBMDIyMjg0NDY2NTc4NzYyMDQzODYBX1RlYjRCNjREQUFKATAuMQFpc29jcHAub3JnAXYy&amp;authuser=0\">https://docs.google.com/viewer?a=v&amp;pid=forums&amp;srcid=MTEwODAzNzI2MjM1OTc0MjE3MjkBMDIyMjg0NDY2NTc4NzYyMDQzODYBX1RlYjRCNjREQUFKATAuMQFpc29jcHAub3JnAXYy&amp;authuser=0</a> ?</p>\n<p>Ability to communicate high-level errors between the three systems languages is a high priority thing for the new static exceptions proposal.</p>",
        "id": 131151106,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533791245
    },
    {
        "content": "<p>I haven't looked at that specific proposal, but I do think that we should find ways to be \"officially\" compatible with various other exception mechanisms</p>",
        "id": 131163080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533810362
    },
    {
        "content": "<p>this came up in the context of <code>setjmp</code> etc as well</p>",
        "id": 131163092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533810373
    },
    {
        "content": "<p>and Microsoft's error handling mechanism, the name of which escapes me just now</p>",
        "id": 131163097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533810385
    },
    {
        "content": "<p>woah that stuff looks extremely familiar</p>",
        "id": 131163438,
        "sender_full_name": "RalfJ",
        "timestamp": 1533810886
    },
    {
        "content": "<p>are they copying this from Rust verbatim? ;)</p>",
        "id": 131163439,
        "sender_full_name": "RalfJ",
        "timestamp": 1533810896
    },
    {
        "content": "<p>they even have <code>try!</code>...</p>",
        "id": 131163450,
        "sender_full_name": "RalfJ",
        "timestamp": 1533810908
    },
    {
        "content": "<blockquote>\n<p>I don't wish to mention the `m word' in this paper,</p>\n</blockquote>\n<p><span class=\"emoji emoji-1f602\" title=\"joy\">:joy:</span></p>",
        "id": 131163521,
        "sender_full_name": "RalfJ",
        "timestamp": 1533811007
    },
    {
        "content": "<p>SEH, but to be clear this is _extremely_ different. This has a similar ABI to Rust Either&lt;T, E&gt;, and is written like those <code>throws</code> functions that may or may not have gotten int</p>",
        "id": 131175017,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533824269
    },
    {
        "content": "<p>to me this sounds like having two return continuations</p>",
        "id": 131175352,
        "sender_full_name": "RalfJ",
        "timestamp": 1533824597
    },
    {
        "content": "<p>in CPS terminology</p>",
        "id": 131175356,
        "sender_full_name": "RalfJ",
        "timestamp": 1533824600
    },
    {
        "content": "<p>which they also avoid talking about, but still, that's exactly what it is?</p>",
        "id": 131175360,
        "sender_full_name": "RalfJ",
        "timestamp": 1533824609
    },
    {
        "content": "<p>similar, yeah, but using the return slot</p>",
        "id": 131175449,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533824669
    },
    {
        "content": "<p>it's really just <code>Result&lt;T, E&gt;</code></p>",
        "id": 131175458,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533824680
    },
    {
        "content": "<p>with a special ABI</p>",
        "id": 131175467,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533824687
    },
    {
        "content": "<p>So it always jumps back to the same address, and the only special thing is an enum layout optimization where the tag is stored in some flag register?</p>",
        "id": 131176265,
        "sender_full_name": "RalfJ",
        "timestamp": 1533825490
    },
    {
        "content": "<p>yep</p>",
        "id": 131176278,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533825502
    },
    {
        "content": "<p>makes sense</p>",
        "id": 131176294,
        "sender_full_name": "RalfJ",
        "timestamp": 1533825519
    },
    {
        "content": "<p>did they do this after seeing how well it works in Rust?</p>",
        "id": 131176303,
        "sender_full_name": "RalfJ",
        "timestamp": 1533825531
    },
    {
        "content": "<p>I dunno</p>",
        "id": 131176313,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533825540
    },
    {
        "content": "<p>Rust isn't mentioned, except for the changelog saying it used to be mentioned^^</p>",
        "id": 131176314,
        "sender_full_name": "RalfJ",
        "timestamp": 1533825541
    },
    {
        "content": "<p>I think they mostly took it from Haskell?</p>",
        "id": 131176325,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533825547
    },
    {
        "content": "<p>but I imagine that Rust was also a major inspiration</p>",
        "id": 131176331,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533825562
    },
    {
        "content": "<p>so Haskell has sth. like <code>try!</code>?</p>",
        "id": 131176337,
        "sender_full_name": "RalfJ",
        "timestamp": 1533825572
    },
    {
        "content": "<p>but the older papers included a \"what this might look like in Rust\"</p>",
        "id": 131176347,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533825587
    },
    {
        "content": "<p>because they really want ABI-compat for this between the three languages</p>",
        "id": 131176358,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533825601
    },
    {
        "content": "<p>Haskell has monads, so it doesn't need <code>try</code></p>",
        "id": 131176406,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533825613
    },
    {
        "content": "<p>well for us it would be a special ABI, I guess, for functions returning <code>Result</code>.</p>",
        "id": 131176408,
        "sender_full_name": "RalfJ",
        "timestamp": 1533825617
    },
    {
        "content": "<p>but everything else would just work</p>",
        "id": 131176417,
        "sender_full_name": "RalfJ",
        "timestamp": 1533825627
    },
    {
        "content": "<p>yeah, that was their plan</p>",
        "id": 131176435,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533825651
    },
    {
        "content": "<p>what ever happened with <code>throws</code> functions?</p>",
        "id": 131176467,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533825675
    },
    {
        "content": "<p><code>fn blah() -&gt; T throws U</code></p>",
        "id": 131176491,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1533825707
    },
    {
        "content": "<p>we've talked about enhancing the Rust ABI to treat <code>Result</code> specially</p>",
        "id": 131178032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533827113
    },
    {
        "content": "<p>seems like it would be good to be compatible, in that case</p>",
        "id": 131178039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533827119
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> meant SEH for Windows?</p>\n<p>Is there a specific reason that unwinding isn't cross-language compatible? The Itanium ABI, at least, is specifically designed to allow interplay between unwinding mechanisms in a safe way.</p>",
        "id": 132008523,
        "sender_full_name": "alercah",
        "timestamp": 1534102386
    },
    {
        "content": "<p>(I need to read the paper still)</p>",
        "id": 132008529,
        "sender_full_name": "alercah",
        "timestamp": 1534102411
    },
    {
        "content": "<p>FWIW if this ends up with anyone going to a C++ committee meeting, I'd be happy to have an excuse as I would love to meet up with a number of friends. ;)</p>",
        "id": 132008530,
        "sender_full_name": "alercah",
        "timestamp": 1534102437
    },
    {
        "content": "<p>(Ah, I see that unwinding isn't directly related to this proposal because it mostly intends to avoid it, but it is necessary for <code>setjmp</code> and SEH as well as existing C++ exceptions)</p>",
        "id": 132010221,
        "sender_full_name": "alercah",
        "timestamp": 1534106149
    },
    {
        "content": "<p>Wow, I dislike the proposed C++ type using <code>void*</code> and suggesting putting a pointer to a dynamic allocation into a <code>intptr_t</code>. I agree that we could do it with special ABI, but we'd have to be careful whether that imposes a performance hit because of having to translate between the memory and calling-convention representations.</p>",
        "id": 132012078,
        "sender_full_name": "alercah",
        "timestamp": 1534109988
    },
    {
        "content": "<p>Possibly it would make sense to have an <code>extern \"throws\"</code> ABI as an interim measure?</p>",
        "id": 132012142,
        "sender_full_name": "alercah",
        "timestamp": 1534110060
    },
    {
        "content": "<p>The author of the paper had some <a href=\"https://www.reddit.com/r/cpp/comments/9owiju/exceptions_may_finally_get_fixed/e7xygud/\" target=\"_blank\" title=\"https://www.reddit.com/r/cpp/comments/9owiju/exceptions_may_finally_get_fixed/e7xygud/\">progress to report</a> yesterday:</p>\n<blockquote>\n<p>The WG14 discussion on this just closed. I won't repeat my notes here as it is bad form to do so (official minutes only!), but I think I am allowed to say that the vote went as follows:</p>\n<p>Does WG14 like the general direction of N2289?</p>\n<p>Favour: 15 Opposed: 2 Abstentions: 2</p>\n</blockquote>",
        "id": 136025021,
        "sender_full_name": "Darsstar",
        "timestamp": 1539847114
    },
    {
        "content": "<p>woot! :D</p>",
        "id": 136058122,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1539883432
    }
]