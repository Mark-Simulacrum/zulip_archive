[
    {
        "content": "<p>And another Stacked Borrows violation in <code>VecDeque::drain</code>: <a href=\"https://github.com/rust-lang/rust/issues/60076\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60076\">https://github.com/rust-lang/rust/issues/60076</a></p>",
        "id": 163642605,
        "sender_full_name": "RalfJ",
        "timestamp": 1555587349
    },
    {
        "content": "<p>This is interesting because it is the first time I found a conflict between existing code and the notion of \"barriers\". I think without barriers there would be no issue.</p>",
        "id": 163737311,
        "sender_full_name": "RalfJ",
        "timestamp": 1555682655
    },
    {
        "content": "<p>This is a bit like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">NoCopy</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">NoCopy</span><span class=\"o\">&lt;&amp;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// &quot;consume&quot; the shared reference</span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>The <code>NoCopy</code> wrapper here changes nothing, and without that this is clearly UB.</p>",
        "id": 163737451,
        "sender_full_name": "RalfJ",
        "timestamp": 1555682779
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this relates to the question of whether to traverse below private fields or not</p>",
        "id": 163737472,
        "sender_full_name": "RalfJ",
        "timestamp": 1555682814
    },
    {
        "content": "<p>uh, actually <code>RefCell</code> has the same problem...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"p\">{</span><span class=\"n\">RefCell</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ref</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">break_it</span><span class=\"p\">(</span><span class=\"n\">rc</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">RefCell</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span>: <span class=\"nc\">Ref</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// `r` has a shared reference, it is passed in as argument and hence</span>\n<span class=\"w\">    </span><span class=\"c1\">// a barrier is added that marks this memory as read-only for the entire</span>\n<span class=\"w\">    </span><span class=\"c1\">// duration of this function.</span>\n<span class=\"w\">    </span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// *oops* here we can mutate that memory.</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">rc</span><span class=\"p\">.</span><span class=\"n\">borrow_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RefCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">break</span><span class=\"n\">_it</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rc</span><span class=\"p\">.</span><span class=\"n\">borrow</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163763052,
        "sender_full_name": "RalfJ",
        "timestamp": 1555706065
    },
    {
        "content": "<p>actually <span class=\"user-mention\" data-user-id=\"198590\">@comex</span> <a href=\"https://internals.rust-lang.org/t/stacked-borrows-an-aliasing-model-for-rust/8153/12\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/stacked-borrows-an-aliasing-model-for-rust/8153/12\">predicted this long ago</a> but it seems I kind of forgot about it <em>oops</em></p>",
        "id": 163763194,
        "sender_full_name": "RalfJ",
        "timestamp": 1555706204
    }
]