[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I am not 100% sure what's happening in those examples.</p>",
        "id": 157686833,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549457301
    },
    {
        "content": "<p>We have a single place, and this place has multiple types, with different validity requirements.</p>",
        "id": 157686881,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549457343
    },
    {
        "content": "<p>Depending on the value stored at this place, however, we have one type or the other.</p>",
        "id": 157686987,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549457437
    },
    {
        "content": "<p>if we think of these types as <code>Option::Some(&amp;T)</code> and <code>Option::None</code></p>",
        "id": 157687016,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549457474
    },
    {
        "content": "<p>OTOH, if we think of these types as <code>Option&lt;&amp;T&gt;</code> and <code>&amp;T</code>, then the place can be typed by both at the same time</p>",
        "id": 157687046,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549457505
    },
    {
        "content": "<p>As in, the place is always either <code>Option::Some</code> or <code>Option::None</code>, and it sometimes is <code>&amp;T</code> as well.</p>",
        "id": 157687116,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549457544
    },
    {
        "content": "<p>Do we require validity to always hold (even if type is not used), or do we require validity to hold on use ?</p>",
        "id": 157687234,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549457682
    },
    {
        "content": "<p>If we require validity to hold only on use / before the last use, then none of these examples are UB IMO. One writes through the reference to modify the discriminat, but the reference is not used afterwards.</p>",
        "id": 157687263,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549457720
    },
    {
        "content": "<blockquote>\n<p>If we require validity to hold only on use / before the last use, then none of these examples are UB IMO. One writes through the reference to modify the discriminat, but the reference is not used afterwards.</p>\n</blockquote>\n<p>that's the point. is that really what we want? and if not, how can we make precise what we really want?</p>",
        "id": 157688515,
        "sender_full_name": "RalfJ",
        "timestamp": 1549458914
    },
    {
        "content": "<p>Well, suppose that's not what we want. Then the validity of <code>Option&lt;T&amp;&gt;</code> and <code>T&amp;</code> both have to hold simultaneously for that single place AFAICT</p>",
        "id": 157689207,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549459461
    },
    {
        "content": "<p>how would you even make that precise without going into the hell that is typed memory? i don't want to end up with a rust where we need an equivalent of <code>std::launder</code></p>",
        "id": 157690224,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1549460376
    },
    {
        "content": "<p>We probably just want to say that all values must be valid from creation till their last use.</p>",
        "id": 157690590,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549460659
    },
    {
        "content": "<p>Alternatively, we could say that all values must be valid on use, but then we'd have to discuss whether creating a raw pointer to a value / place uses the value. If it does not use the value, we have pretty much the same validity as in C, where value must be valid when they participate in an lvalue expression.</p>",
        "id": 157690769,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549460802
    },
    {
        "content": "<p>If creating a raw pointer to a value uses the value, there is nothing that you can actually do with an invalid value beyond dropping it (as long as it has no destructors), and we might as well require all values to be valid from creation until last use, and if that isn't enough, we can relax that later, in some useful way.</p>",
        "id": 157690838,
        "sender_full_name": "gnzlbg",
        "timestamp": 1549460878
    },
    {
        "content": "<p>the only way i can parse any of this in a way other than \"memory locations inherently have a type, and accesses that type-pun it must write bytes valid for the place's actual type\" (i.e., typed memory) is as a sort of recursive , e.g. passing a <code>&amp;T</code> around requires that it points at memory valid for T. that is an option (discussed in <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/77\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/77\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues/77</a>) but it doesn't make any of the examples in <a href=\"https://github.com/rust-lang/rust/issues/84\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/84\">#84</a> UB</p>",
        "id": 157691841,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1549461747
    },
    {
        "content": "<p>actually, come to think of it, not even typed memory would rule out any of this, you'd really need a \"shadow discriminant\" (as in <a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/69#issuecomment-460195005\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/69#issuecomment-460195005\">https://github.com/rust-rfcs/unsafe-code-guidelines/issues/69#issuecomment-460195005</a>), not just the knowledge that there's an Option&lt;T&gt; and a T in the same place</p>",
        "id": 157691984,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1549461871
    },
    {
        "content": "<p>even the shadow discriminant does not fix the case where a bool is set to 2 and not used again</p>",
        "id": 157693882,
        "sender_full_name": "RalfJ",
        "timestamp": 1549463522
    }
]