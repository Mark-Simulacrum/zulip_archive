[
    {
        "content": "<p>So I think it is too late to reasonably have this meeting</p>",
        "id": 135620035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275547
    },
    {
        "content": "<p>but I would like to make progress here</p>",
        "id": 135620052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275561
    },
    {
        "content": "<p>I was going over the struct+tuple PR this morning and realized that there were some unclear points to me</p>",
        "id": 135620059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> and I already had a meeting about memory invariants :)</p>",
        "id": 135620060,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539275577
    },
    {
        "content": "<p>=)</p>",
        "id": 135620062,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275581
    },
    {
        "content": "<p>I was trying to make edits, it seemed like there were a few \"contenious\" points and I was debating how to handle it</p>",
        "id": 135620075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275598
    },
    {
        "content": "<p>I think my feeling before has been: no need to settle every question, at least let's describe the unknowns and move on, and circle back later</p>",
        "id": 135620081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275612
    },
    {
        "content": "<p>but it's always tempting to try and \"fix\" a few things</p>",
        "id": 135620090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275621
    },
    {
        "content": "<p>(to be clear, I view all of this as making \"recommendations\" that can become RFCs anyway, and maybe that framing helps)</p>",
        "id": 135620108,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275638
    },
    {
        "content": "<p>to that end I was debating about writing a section that explicitly said something like \"We recommend the following semantics\" around these points</p>\n<ul>\n<li><code>struct Foo { x: T }</code> with one field (and <code>repr(Rust)</code>) has the same memory layout (not necessarily other ABI details) as <code>T</code><br>\n    - Question: what about zero-sized types? </li>\n<li>structs with homogenous types (just like tuples) have the same representation as <code>[T; N]</code><br>\n    - however, I realize now that this raises a weird question about ordering -- we might say that this is true but the order of fields is undefined apart from tuple structs?</li>\n<li>struct layout is a deterministic function from the (transitive) types of the fields plus compiler flags<br>\n    - but I realized various complications here, I forget where I landed</li>\n</ul>",
        "id": 135620259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275771
    },
    {
        "content": "<p>but really we don't have to answer those specific questions here necessarily, I'd rather get feedback on the meta question of how we handle this sort of question -- how much should we try to make a decision --</p>",
        "id": 135620285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275829
    },
    {
        "content": "<p>that and how we are going to get progress on the other write-ups we talked about :)</p>",
        "id": 135620292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275838
    },
    {
        "content": "<p>thoughts? :)</p>",
        "id": 135620400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539275955
    },
    {
        "content": "<p>If \"struct Foo { x: T } with one field (and repr(Rust)) has the same memory layout (not necessarily other ABI details) as T\" then does this make <code>repr(transparent)</code>unncessary?</p>",
        "id": 135620524,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539276121
    },
    {
        "content": "<p>no, because repr(transparent) is specifically about the ABI details</p>",
        "id": 135620606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276186
    },
    {
        "content": "<p>what's an example? alignment?</p>",
        "id": 135620621,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539276209
    },
    {
        "content": "<p>no</p>",
        "id": 135620694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276293
    },
    {
        "content": "<p>e.g. do you use a register</p>",
        "id": 135620696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276297
    },
    {
        "content": "<p>or pass on the stack</p>",
        "id": 135620698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276300
    },
    {
        "content": "<p>ah, that makes sense.</p>",
        "id": 135620726,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539276345
    },
    {
        "content": "<p>Imo, the rules around tuple structs for a type <code>struct X(Tn...);</code> should be exactly as if you wrote <code>struct X { fn...: Tn... }</code></p>",
        "id": 135620826,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1539276467
    },
    {
        "content": "<p>also, we agreed struct layout should be non-deterministic, afaik.</p>",
        "id": 135620910,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1539276560
    },
    {
        "content": "<p>I don't think anyone's objecting to <code>(T,T,T)</code> having the same layout as <code>[T;3]</code>, is the issue whether <code>x.i</code> should have the same semantics as <code>x[i]</code>?</p>",
        "id": 135620968,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539276605
    },
    {
        "content": "<p>I feel like the order of named fields should not be significant</p>",
        "id": 135620984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276637
    },
    {
        "content": "<p>for all the details that came up on the thread</p>",
        "id": 135621014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276679
    },
    {
        "content": "<p>the order of anonymous fields is <em>already</em> significant from a semver POV</p>",
        "id": 135621020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276695
    },
    {
        "content": "<p>i.e., if you expose public anonymous fields</p>",
        "id": 135621023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276699
    },
    {
        "content": "<p>your clients are already relying on the order</p>",
        "id": 135621032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276709
    },
    {
        "content": "<blockquote>\n<p>for all the details that came up on the thread</p>\n</blockquote>\n<p>for all the <em>reasons</em> I meant</p>",
        "id": 135621044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276720
    },
    {
        "content": "<p>so that was my concern: if we just say that \"all structs of homogenous type are laid out as an array\" the question naturally becomes \"which index is which field\"</p>",
        "id": 135621100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this is in conflict with the goals of a) having tuples and structs agree on layout, b) having tuples and arrays agree on layout, and c) having array indexing and field access agree. :(</p>",
        "id": 135621106,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539276764
    },
    {
        "content": "<p>maybe we should just ditch the whole thing</p>",
        "id": 135621111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> read <a href=\"#narrow/stream/131828-t-compiler/topic/rust.20calling.20convention.20and.20LLVM\" title=\"#narrow/stream/131828-t-compiler/topic/rust.20calling.20convention.20and.20LLVM\">this</a> for more details (not of direct relevance, but still pretty relevant)</p>",
        "id": 135621112,
        "sender_full_name": "nagisa",
        "timestamp": 1539276772
    },
    {
        "content": "<p>and you should use the type <code>[T; N]</code> instead :)</p>",
        "id": 135621126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276787
    },
    {
        "content": "<p>I agree <span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> there is some conflict â€” this is what I was attempting to resolve by saying \"the mapping from named fields to indices is undefined\"</p>",
        "id": 135621141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276809
    },
    {
        "content": "<p>i.e., it does have the layout of <code>[T; N]</code>, but you can't reliably tell which field is where</p>",
        "id": 135621145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276820
    },
    {
        "content": "<p>so then the only difference between tuple structs and named structs is that exact case</p>",
        "id": 135621154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276837
    },
    {
        "content": "<p>(that is, in one case there is a mapping)</p>",
        "id": 135621176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276843
    },
    {
        "content": "<p>and that difference is sort of pre-existing and banked into the pattern matching syntax anyway</p>",
        "id": 135621204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276853
    },
    {
        "content": "<p>anyway I don't know how much I care about this. I think it falls under that \"useful\" guarantee</p>",
        "id": 135621212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276875
    },
    {
        "content": "<p>perhaps I will move all the \"useful guarantees\" to some sort of \"recommendation\" section of \"stuff we are 90% sure is a good idea\"</p>",
        "id": 135621222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> ta, that looks like a related but probably orthogonal issue?</p>",
        "id": 135621242,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539276933
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> ta, that looks like a related but probably orthogonal issue?</p>\n</blockquote>\n<p>It is related in a sense that similar differences apply as for with <code>#[repr(transparent)]</code> structs and <code>#[repr(Rust)]</code> ones.</p>",
        "id": 135621264,
        "sender_full_name": "nagisa",
        "timestamp": 1539276963
    },
    {
        "content": "<p>in any case I definitely think this should not be specific to tuples</p>",
        "id": 135621298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539276968
    },
    {
        "content": "<p>Its just the context in which this occurs thatâ€™s different.</p>",
        "id": 135621314,
        "sender_full_name": "nagisa",
        "timestamp": 1539276989
    },
    {
        "content": "<p>Tuples cannot guarantee in-memory order of its elements anyway, because of the layout optimisation</p>",
        "id": 135621363,
        "sender_full_name": "nagisa",
        "timestamp": 1539277072
    },
    {
        "content": "<p>I see no reason to make a special case for <code>(T, T, ..., T)</code></p>",
        "id": 135621372,
        "sender_full_name": "nagisa",
        "timestamp": 1539277082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so is the proposal to drop (c)? or to change the representation of structs such that order does matter in certain cases?</p>",
        "id": 135621419,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539277090
    },
    {
        "content": "<p>(where (c) is \"having array indexing and field access agree\")</p>",
        "id": 135621459,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539277170
    },
    {
        "content": "<p>(since that itemized list has scrolled off the page already)</p>",
        "id": 135621474,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539277193
    },
    {
        "content": "<p>I am confused what proposal you are talking about :)</p>",
        "id": 135621520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277212
    },
    {
        "content": "<p>I guess you mean the thing I sketched above?</p>",
        "id": 135621535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes</p>",
        "id": 135621542,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539277234
    },
    {
        "content": "<p>I would prefer to focus on a meta question: my proposal for the RFC</p>",
        "id": 135621543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277235
    },
    {
        "content": "<p>I think I settled on this courses of action:</p>",
        "id": 135621548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277241
    },
    {
        "content": "<p>I will enumerate the things I think might be contentious in the RFC</p>",
        "id": 135621552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277247
    },
    {
        "content": "<p>(which include this point)</p>",
        "id": 135621555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277250
    },
    {
        "content": "<blockquote>\n<p>so that was my concern: if we just say that \"all structs of homogenous type are laid out as an array\" the question naturally becomes \"which index is which field\"</p>\n</blockquote>\n<p>and the answer naturally is \"the order as written\"? so yes, in this special case the order <em>does</em> matter</p>",
        "id": 135621556,
        "sender_full_name": "RalfJ",
        "timestamp": 1539277250
    },
    {
        "content": "<p>I will open issues to discuss them</p>",
        "id": 135621558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277254
    },
    {
        "content": "<p>we will close the main struct + tuples issue</p>",
        "id": 135621571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277268
    },
    {
        "content": "<p>and we can merge the write-up as is (with \"open questions\" linking to the issues in question)</p>",
        "id": 135621576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277278
    },
    {
        "content": "<p>then we can (once we seem to have some agreement) close down those issues with an open PR</p>",
        "id": 135621582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277288
    },
    {
        "content": "<p>seem reasonable?</p>",
        "id": 135621583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sounds sensible</p>",
        "id": 135621588,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539277298
    },
    {
        "content": "<p>the idea being that we should be refining the set of open issues to narrow questions</p>",
        "id": 135621591,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277300
    },
    {
        "content": "<p>(to circle back to your point, <span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span>, I would say that \"field access and array indexing agree\" is not a clear notion when you have something like <code>foo.bar</code> -- to what index does <code>bar</code> map? It seems much clearer for <code>foo.1</code> =)</p>",
        "id": 135621655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277353
    },
    {
        "content": "<p>and hence I don't feel I am <em>abandoning</em> <code>c</code> by saying that the indices assigned to \"named fields\" are compiler determined</p>",
        "id": 135621670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277375
    },
    {
        "content": "<p>it's sort of like saying \"what is 1/0\" and answering undefined :P</p>",
        "id": 135621678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277386
    },
    {
        "content": "<p>OK, so, I will make those edits to the struct PR</p>",
        "id": 135621757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277493
    },
    {
        "content": "<p>question then becomes: what is the process for merging :)</p>",
        "id": 135621765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277499
    },
    {
        "content": "<p>I propose we add a \"final comment period\" label and post an annoucement somewhere</p>",
        "id": 135621778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277515
    },
    {
        "content": "<p>then next meeting we can merge?</p>",
        "id": 135621779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277518
    },
    {
        "content": "<p>(I don't really want to go the whole rfcbot way because I didn't want to have to enumerate who the people are that have to check their names)</p>",
        "id": 135621793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277534
    },
    {
        "content": "<p>(but we could do that, I've just been hoping to keep this process more \"open\" feeling)</p>",
        "id": 135621797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277548
    },
    {
        "content": "<p>makes sense to me</p>",
        "id": 135621933,
        "sender_full_name": "RalfJ",
        "timestamp": 1539277690
    },
    {
        "content": "<p>OK</p>",
        "id": 135621961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277754
    },
    {
        "content": "<p>so</p>",
        "id": 135621962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277756
    },
    {
        "content": "<p>what about the other topics :)</p>",
        "id": 135621966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277759
    },
    {
        "content": "<p>/me goes to look for the meeting minutes from last time</p>",
        "id": 135621975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277779
    },
    {
        "content": "<p><a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/blob/master/meeting-notes/20180913.md\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/blob/master/meeting-notes/20180913.md\">link to minutes in repo</a></p>",
        "id": 135621983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277790
    },
    {
        "content": "<ul>\n<li>structs and tuples: niko</li>\n<li>references and pointers: avadacatavra</li>\n<li>function pointers: nicole mazzuca</li>\n<li>packed/align: &lt;this could be you!&gt;</li>\n</ul>",
        "id": 135622033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277806
    },
    {
        "content": "<p>I think packed/align I kind of described in my PR</p>",
        "id": 135622039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277811
    },
    {
        "content": "<p>the minutes also say</p>",
        "id": 135622049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277838
    },
    {
        "content": "<p>Weâ€™re still looking for a consensus/further discussion on:</p>\n<ul>\n<li><a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/10\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/10\">enums</a></li>\n<li><a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/13\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/13\">unions</a></li>\n<li><a href=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/9\" target=\"_blank\" title=\"https://github.com/rust-rfcs/unsafe-code-guidelines/issues/9\">integers/floating points</a></li>\n</ul>",
        "id": 135622051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277839
    },
    {
        "content": "<p>not sure if that is still true</p>",
        "id": 135622061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277850
    },
    {
        "content": "<p>I have some unread notifications</p>",
        "id": 135622063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277853
    },
    {
        "content": "<p>but I would imagine we can at least do the \"write up consensus and then open subissue\" thing</p>",
        "id": 135622071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this is for memory layouts, not semantic invariants, yes?</p>",
        "id": 135622088,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539277907
    },
    {
        "content": "<p>confirm</p>",
        "id": 135622107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277923
    },
    {
        "content": "<p>I am amused that integers turned out to be one of the more controversial issues</p>",
        "id": 135622148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277944
    },
    {
        "content": "<p>We are experts at punting issues :)</p>",
        "id": 135622164,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539277951
    },
    {
        "content": "<p>but this is what C has done to us ;)</p>",
        "id": 135622165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277952
    },
    {
        "content": "<p>\"how dare you think you can say how a u32 is represented\"</p>",
        "id": 135622176,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539277967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this will return, at the point that we're discussing invariants.</p>",
        "id": 135622183,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539277976
    },
    {
        "content": "<p>Do scalar types carry any shadow state? Er um, don't know.</p>",
        "id": 135622209,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539278013
    },
    {
        "content": "<p>/me hides their head in the sand</p>",
        "id": 135622289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278082
    },
    {
        "content": "<p>well, so <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span>, still think you have time to write up fn types?</p>",
        "id": 135622307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278099
    },
    {
        "content": "<p>else I can do it</p>",
        "id": 135622322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278111
    },
    {
        "content": "<p>BTW, I realized talking to <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> that although we appear to be comfortable with the phrase \"shadow state\", I'm not sure what to call the \"real state\", that is the bit of the semantics that's really kept in memory at run-time.</p>",
        "id": 135622327,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539278117
    },
    {
        "content": "<p>lol</p>",
        "id": 135622334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278128
    },
    {
        "content": "<p>what is the opposite of a \"shadow\"</p>",
        "id": 135622338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278132
    },
    {
        "content": "<p>(reified state?)</p>",
        "id": 135622350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278149
    },
    {
        "content": "<p>\"sunshine state\" :)</p>",
        "id": 135622352,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539278157
    },
    {
        "content": "<p>we'll just call it the FL</p>",
        "id": 135622395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278173
    },
    {
        "content": "<p>or the FL state</p>",
        "id": 135622397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278175
    },
    {
        "content": "<p>:)</p>",
        "id": 135622400,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539278182
    },
    {
        "content": "<p>/me wonders if Florida is the Sunshine State. Or is that CA?</p>",
        "id": 135622404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278189
    },
    {
        "content": "<p>FL IIRC</p>",
        "id": 135622410,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539278197
    },
    {
        "content": "<p>no way I am naming our state after california</p>",
        "id": 135622412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278201
    },
    {
        "content": "<p>/me has no real idea why they are trashing CA right now, either</p>",
        "id": 135622420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278223
    },
    {
        "content": "<p>mostly jealousy for all the people who hang out in the SF and MV offices and have friends and stuff</p>",
        "id": 135622440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278250
    },
    {
        "content": "<p>ok, anyway, back on topic</p>",
        "id": 135622442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278254
    },
    {
        "content": "<p>anyway, this is bikeshedding.</p>",
        "id": 135622443,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539278256
    },
    {
        "content": "<p>I like the word reify, for the record. It always makes me feel very educated.</p>",
        "id": 135622492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278286
    },
    {
        "content": "<p>so who will tackle unions</p>",
        "id": 135622504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278299
    },
    {
        "content": "<p>I nominate <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> :)</p>",
        "id": 135622510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278305
    },
    {
        "content": "<p>It has an air of 1990s object-orientation about  it though :/</p>",
        "id": 135622515,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539278311
    },
    {
        "content": "<p>anyway, maybe the thing to do is to post some links in internals and see if we can get someone excited to do it</p>",
        "id": 135622525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278330
    },
    {
        "content": "<p>I'd like to grow the group here</p>",
        "id": 135622527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278331
    },
    {
        "content": "<p>and we're not all here chatting and making stupid jokes (that's just me, really)</p>",
        "id": 135622529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278336
    },
    {
        "content": "<p>me too!</p>",
        "id": 135622547,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539278359
    },
    {
        "content": "<p>your jokes are funnier</p>",
        "id": 135622558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278374
    },
    {
        "content": "<p>Thank you.</p>",
        "id": 135622623,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539278404
    },
    {
        "content": "<p>I think trying to recruit from internal is A Good Idea.</p>",
        "id": 135622654,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539278436
    },
    {
        "content": "<p>We can't just volunteer <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> for everything while his back is turned.</p>",
        "id": 135622701,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539278498
    },
    {
        "content": "<p>oh I thought they were around</p>",
        "id": 135622764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278531
    },
    {
        "content": "<p>but I suppose you're right:)</p>",
        "id": 135622768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278538
    },
    {
        "content": "<p>so there was this comment on the PR:</p>\n<blockquote>\n<p>Maybe it might be worth spelling out which properties of repr(C) are platform dependent (implementation defined) and cannot be relied on by portable code.</p>\n</blockquote>",
        "id": 135622794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278593
    },
    {
        "content": "<p>they went on to say:</p>\n<hr>\n<p>I meant properties like this:</p>\n<div class=\"codehilite\"><pre><span></span>Assuming the struct is not packed, each field&#39;s offset is aligned[^aligned] to\nthe ABI-mandated alignment for that field&#39;s type, possibly creating\nunused padding bits.\n</pre></div>\n\n\n<p>For example, I can hardcode the address offset of the first field w.r.t. to a value of the struct type to 0, and that will work on all platforms. But doing the same for any other field, even if it is correct for the platform being targeted, is not portable in general.</p>",
        "id": 135622809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278608
    },
    {
        "content": "<p>I kind of have no idea what they are talking about</p>",
        "id": 135622812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278614
    },
    {
        "content": "<p>I guess <code>#[repr(C)]</code> in principle leaves more freedom than that?</p>",
        "id": 135622818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278627
    },
    {
        "content": "<p>this comes back to a meta point</p>",
        "id": 135622822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278632
    },
    {
        "content": "<p>where I would <strong>really</strong> like it if we can separate \"theoretical portability concerns that apply to a few esoteric platforms\" from  things \"everybody relies on all the time\" (though it's good to highlight them both I think)</p>",
        "id": 135622879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278666
    },
    {
        "content": "<p>I will adjust the language to</p>\n<blockquote>\n<p>For structs tagged <code>#[repr(C)]</code>, the compiler will apply a C-like<br>\nlayout scheme. See section 6.7.2.1 of the [C17 specification][C17] for<br>\na detailed write-up of what such rules entail. For most platforms,<br>\nhowever, this means the following:</p>\n</blockquote>\n<p>[C17]: <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf\">http://www.open-std.org/jtc1/sc22/wg14/www/abq/c17_updated_proposed_fdis.pdf</a></p>",
        "id": 135622912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278707
    },
    {
        "content": "<p>which I think is accurate</p>",
        "id": 135622918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539278714
    },
    {
        "content": "<p>ha, actually, writing that up made me realize: clearly we should guarantee that <code>struct Foo;</code> is zero-sized, right..?</p>",
        "id": 135623416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539279296
    },
    {
        "content": "<p>Presumably. Ditto <code>enum Foo;</code>?</p>",
        "id": 135623499,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1539279393
    },
    {
        "content": "<p>presumably</p>",
        "id": 135623914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539279846
    },
    {
        "content": "<p>ok, I've done that work, and I'm going to post now on internals and try to draw some attention</p>",
        "id": 135623920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539279860
    },
    {
        "content": "<p>also write up some minutes</p>",
        "id": 135623921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539279862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, I'll do it this weekend</p>",
        "id": 135624101,
        "sender_full_name": "Nicole Mazzuca",
        "timestamp": 1539280047
    },
    {
        "content": "<p>oh, great! :)</p>",
        "id": 135624824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539280754
    },
    {
        "content": "<p>I'll put that back to writeup-assigned then</p>",
        "id": 135624832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539280762
    },
    {
        "content": "<p>unions? what do I know about unions?^^</p>",
        "id": 135632731,
        "sender_full_name": "RalfJ",
        "timestamp": 1539288666
    },
    {
        "content": "<p>I guess I can try writing something, so as I said I generally dont care much about these layout questions. In my work I assume they are answered and go from there, which leaves enough stuff open^^ my knowledge of arcane platforms and the C rules for this is pretty limited.</p>",
        "id": 135632758,
        "sender_full_name": "RalfJ",
        "timestamp": 1539288708
    },
    {
        "content": "<p>no worries ;) I was poking a stick at random</p>",
        "id": 135634011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539289808
    },
    {
        "content": "<p>you keep your eye on stacked borrows!</p>",
        "id": 135634018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539289820
    },
    {
        "content": "<p>whatever you prefer. feel free to assign someone else in that issue. I can do it, but of course that means I have less time for miri ;)</p>",
        "id": 135635148,
        "sender_full_name": "RalfJ",
        "timestamp": 1539290863
    }
]