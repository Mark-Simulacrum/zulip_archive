[
    {
        "content": "<p>Is transmuting from <code>*const Dst</code> to <code>*const Wrapper&lt;Dst&gt;</code> sound?</p>\n<p>(<code>Wrapper</code> being <code>#[repr(transparent))] struct Wrapper&lt;T: ?Sized&gt;(T);</code>)</p>\n<p>I noticed that <code>bytemuck</code> does that transmute in <a href=\"https://docs.rs/bytemuck/1.7.2/src/bytemuck/transparent.rs.html#103\"><code>wrap_ref</code></a></p>",
        "id": 253028519,
        "sender_full_name": "matt1992",
        "timestamp": 1631499575
    },
    {
        "content": "<p>how wouldn't it be sound? that's part of the guarantees made by repr(transparent), no?</p>",
        "id": 253028703,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1631499790
    },
    {
        "content": "<p>I'm not aware that <code>#[repr(transparent)]</code> makes guarantees about arbitrary generic types that have it as a type parameter.<br>\nI'm only aware about guarantees made WRT using it by value.</p>",
        "id": 253029058,
        "sender_full_name": "matt1992",
        "timestamp": 1631500043
    },
    {
        "content": "<p>Transmuting from <code>*const T</code> to <code>*const U</code> is sound for any (sized) <code>T</code> and <code>U</code></p>",
        "id": 253029176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631500176
    },
    {
        "content": "<p>...but I suppose that's not what you mean</p>",
        "id": 253029187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631500193
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/transmute.20from.20.60*const.20Dst.60.20to.20.60*const.20Wrapper.3CDst.3E.60/near/253029187\">said</a>:</p>\n<blockquote>\n<p>...but I suppose that's not what you mean</p>\n</blockquote>\n<p>I did mean <code>!Sized</code> types, like <code>str</code> or <code>[T]</code>.</p>",
        "id": 253029260,
        "sender_full_name": "matt1992",
        "timestamp": 1631500230
    },
    {
        "content": "<p>I believe that <code>#[repr(transparent)]</code> guarantees that <code>*const Transparent&lt;T&gt;</code> and <code>*const T</code> (likewise <code>*mut</code>) have the same layout as well.</p>",
        "id": 253029270,
        "sender_full_name": "Connor Horman",
        "timestamp": 1631500244
    },
    {
        "content": "<p>(Regardless of the <code>Sized</code>ness of <code>T</code>)</p>",
        "id": 253029285,
        "sender_full_name": "Connor Horman",
        "timestamp": 1631500263
    },
    {
        "content": "<p>I don't think <code>*const impl !Sized</code> types have a stable ABI</p>",
        "id": 253029305,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631500296
    },
    {
        "content": "<p>They don't, but transparent does special things.</p>",
        "id": 253029316,
        "sender_full_name": "Connor Horman",
        "timestamp": 1631500311
    },
    {
        "content": "<p>You wouldn't be able to rely on the layout, but you should be able to rely on the layouts matching in that case <em>because</em> of the <code>repr(transparent)</code></p>",
        "id": 253029375,
        "sender_full_name": "Connor Horman",
        "timestamp": 1631500340
    },
    {
        "content": "<p>I see. I believe that goes a bit beyond the documented guarantees of <code>repr(transparent)</code>, but it is a logical extension</p>",
        "id": 253029416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1631500406
    },
    {
        "content": "<p>One notable case for this is UnsafeCell, which allows &amp;mut T =&gt; &amp;UnsafeCell&lt;T&gt; (for T: ?Sized)</p>",
        "id": 253029496,
        "sender_full_name": "Connor Horman",
        "timestamp": 1631500495
    },
    {
        "content": "<p>I think you meant <code>Cell</code>, which if you look at how that is implemented:<br>\n<a href=\"https://doc.rust-lang.org/1.55.0/src/core/cell.rs.html#529\">https://doc.rust-lang.org/1.55.0/src/core/cell.rs.html#529</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">from_mut</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Cell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Cell</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>doesn't <em>transmute</em> the pointer type.</p>\n<p>Using <code>as</code> casts allows the compiler to swap the pointer metadata with the data pointer if it wanted to.</p>",
        "id": 253029782,
        "sender_full_name": "matt1992",
        "timestamp": 1631500704
    },
    {
        "content": "<p>True</p>",
        "id": 253029791,
        "sender_full_name": "Connor Horman",
        "timestamp": 1631500719
    }
]