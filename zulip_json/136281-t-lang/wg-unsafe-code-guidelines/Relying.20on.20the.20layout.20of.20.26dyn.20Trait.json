[
    {
        "content": "<p>Can I rely on the memory layout of &amp;dyn Trait ? Especially the case of the pointer to the concrete type being the first one ?</p>\n<p><code>Any</code> seems to rely on that (<a href=\"https://doc.rust-lang.org/src/core/any.rs.html#218\">https://doc.rust-lang.org/src/core/any.rs.html#218</a>), I wonder if I can also do it...</p>",
        "id": 246246385,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1626452987
    },
    {
        "content": "<p>no, this is unspecified, the standard library can rely on it because it is tied to a specific compiler</p>",
        "id": 246246526,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626453046
    },
    {
        "content": "<p>Thanks, that was my suspicious</p>",
        "id": 246246567,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1626453070
    },
    {
        "content": "<p>Is that a way to go from <code>Box&lt;dyn Any&gt;</code> to <code>Box&lt;T&gt;</code> ?</p>",
        "id": 246248096,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1626453809
    },
    {
        "content": "<p>is that actually relying on layout? I think <code>self as *const dyn Any as *const T</code> should be well-formed, and the compiler will translate the fat pointer to thin in the <code>as</code> cast.</p>",
        "id": 246248383,
        "sender_full_name": "cuviper",
        "timestamp": 1626453920
    },
    {
        "content": "<p>ah, right, that is fine of course</p>",
        "id": 246248442,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626453952
    },
    {
        "content": "<p>Good catch</p>",
        "id": 246248538,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1626453983
    },
    {
        "content": "<p>So I can do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"nb\">Box</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">into_raw</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span>:\n</code></pre></div>\n<p>??</p>\n<p>With <code>self</code> being <code>Box&lt;dyn Trait&gt;</code> and  after being checked that it's indeed <code>T</code>.</p>",
        "id": 246249251,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1626454371
    },
    {
        "content": "<p>I think so</p>",
        "id": 246249757,
        "sender_full_name": "cuviper",
        "timestamp": 1626454619
    },
    {
        "content": "<p>actually, isn't that just <a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html#method.downcast\">https://doc.rust-lang.org/std/boxed/struct.Box.html#method.downcast</a> ?</p>",
        "id": 246249898,
        "sender_full_name": "cuviper",
        "timestamp": 1626454687
    },
    {
        "content": "<p>Thank you, I was sure something like that existed</p>",
        "id": 246250231,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1626454836
    },
    {
        "content": "<p>That only works for dyn Any, not any other dyn Trait</p>",
        "id": 246250271,
        "sender_full_name": "simulacrum",
        "timestamp": 1626454850
    },
    {
        "content": "<p>true</p>",
        "id": 246250370,
        "sender_full_name": "cuviper",
        "timestamp": 1626454897
    },
    {
        "content": "<p>Yeah, it doesn't cover everything I want but helps me now</p>",
        "id": 246250382,
        "sender_full_name": "Thales Fragoso",
        "timestamp": 1626454904
    },
    {
        "content": "<p>there's crates on <a href=\"http://crates.io\">crates.io</a> (don't recall names off hand) that let you extend a trait with any-like behavior</p>",
        "id": 246250446,
        "sender_full_name": "simulacrum",
        "timestamp": 1626454924
    },
    {
        "content": "<p>other traits could have an <code>is_foo</code> to enable other downcasts</p>",
        "id": 246250473,
        "sender_full_name": "cuviper",
        "timestamp": 1626454930
    }
]