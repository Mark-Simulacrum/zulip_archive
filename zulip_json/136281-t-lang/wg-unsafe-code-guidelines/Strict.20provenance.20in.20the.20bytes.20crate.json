[
    {
        "content": "<p>I just submitted a PR to the bytes crate that should make it strict provenance compatible. Unfortunately, it seems like the blessed version of <code>map_addr</code> doesn't optimize as well. Any thoughts on whether it's possible to get it to optimize better?<br>\nPR is: &lt;<a href=\"https://github.com/tokio-rs/bytes/pull/542\">https://github.com/tokio-rs/bytes/pull/542</a>&gt;</p>",
        "id": 278049778,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1649262318
    },
    {
        "content": "<p>Do the <code>.wrapping_add(HUGE).wrapping_sub(HUGE)</code> complications also apply to stuff like <code>ptr.wrapping_sub(old_addr).wrapping_add(new_addr)</code>?</p>",
        "id": 278066646,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1649269758
    },
    {
        "content": "<p>On CHERI, yes, but there's apparently some provision for top-bit pointer tagging Gankra was talking about.</p>",
        "id": 278067264,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1649270052
    },
    {
        "content": "<p>Are you saying there is an issue or there is not?</p>",
        "id": 278067682,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1649270265
    },
    {
        "content": "<p>In the general case yes, and from looking at the PR that's why std's <code>map_addr</code> is formulated like that. (I didn't see your new changes with my last response, that's my bad)</p>",
        "id": 278067993,
        "sender_full_name": "Quy Nguyen",
        "timestamp": 1649270407
    },
    {
        "content": "<p>Oh <em>that's</em> why you did that diff thing at first</p>",
        "id": 278068287,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649270567
    },
    {
        "content": "<p>If there's a cfg for CHERI, I suppose I can just do it the other way when running on CHERI. Do you know if there's already a cfg for CHERI?</p>",
        "id": 278069342,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1649271114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303115\">Quy Nguyen</span> <a href=\"#narrow/stream/136281-t-lang.2Fwg-unsafe-code-guidelines/topic/Strict.20provenance.20in.20the.20bytes.20crate/near/278067993\">said</a>:</p>\n<blockquote>\n<p>In the general case yes, and from looking at the PR that's why std's <code>map_addr</code> is formulated like that. (I didn't see your new changes with my last response, that's my bad)</p>\n</blockquote>\n<p>not sure what you mean, which other way could <code>map_addr</code> have been formulated?</p>",
        "id": 278074417,
        "sender_full_name": "RalfJ",
        "timestamp": 1649273505
    },
    {
        "content": "<p>oh you mean starting with <code>a.wrapping_sub(a as usize)</code>. hm, that's an interesting alternative.</p>",
        "id": 278074688,
        "sender_full_name": "RalfJ",
        "timestamp": 1649273626
    },
    {
        "content": "<p>might be worth a report with LLVM so that it can recognize the other pattern and optimize it equally well?</p>",
        "id": 278074798,
        "sender_full_name": "RalfJ",
        "timestamp": 1649273669
    },
    {
        "content": "<p>For CHERI the easiest way to avoid unrepresentable values without optimizations would be to calculate the address difference and do a single wrapping_add</p>",
        "id": 278074930,
        "sender_full_name": "Alexander Richardson",
        "timestamp": 1649273735
    },
    {
        "content": "<p>yeah that's the way that doesnt seem to optimize well</p>",
        "id": 278074997,
        "sender_full_name": "RalfJ",
        "timestamp": 1649273763
    },
    {
        "content": "<p>at least some of these can be written entirely without <code>map_addr</code> though, like the <code>let data = ptr_map(ptr, |addr| addr | KIND_VEC);</code> where we know <code>ptr as usize &amp; 0x1 == 0</code> (and <code>KIND_VEC==1</code>) so you can also do <code>let data = ptr.wrapping_add(KIND_VEC)</code>.</p>",
        "id": 278075137,
        "sender_full_name": "RalfJ",
        "timestamp": 1649273850
    },
    {
        "content": "<p>Hmm that's annoying. I guess for CHERI it would make sense to use the @llvm.cheri.cap.address.set intrinsic directly and just use whatever is the fastest implementation for non-CHERI until there is actually CHERI support in upstream rust.</p>",
        "id": 278075269,
        "sender_full_name": "Alexander Richardson",
        "timestamp": 1649273903
    },
    {
        "content": "<p>C++ also has the issue according to this test:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdint.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">uintptr_t</span><span class=\"w\"> </span><span class=\"n\">old_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">uintptr_t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">uintptr_t</span><span class=\"w\"> </span><span class=\"n\">new_value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">old_value</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new_value</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">old_value</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278076911,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1649274735
    },
    {
        "content": "<p>yeah, why would anyone write such code in C++? ;)</p>",
        "id": 278079630,
        "sender_full_name": "RalfJ",
        "timestamp": 1649275934
    },
    {
        "content": "<p>Where do you report it if you want to report this kind of thing to LLVM?</p>",
        "id": 278079944,
        "sender_full_name": "Alice Ryhl",
        "timestamp": 1649276062
    },
    {
        "content": "<p>I feel like I heard a lot about LLVM moving to GitHub: <a href=\"https://github.com/llvm/llvm-project/issues\">https://github.com/llvm/llvm-project/issues</a><br>\nThough they still do reviews elsewhere, so I'm not certain</p>",
        "id": 278086694,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1649279469
    },
    {
        "content": "<p>yeah that seems to be their issue tracker. they also have a discourse forum.</p>",
        "id": 278089201,
        "sender_full_name": "RalfJ",
        "timestamp": 1649280777
    }
]