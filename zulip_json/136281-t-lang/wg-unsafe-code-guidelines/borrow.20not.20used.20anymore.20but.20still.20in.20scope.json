[
    {
        "content": "<p>If I have unsafe code manipulating <code>UnsafeCell&lt;T&gt;</code>, I must ensure that <code>&amp;T</code> and <code>&amp;mut T</code> to the same value do not \"exist\" at the same time. Does \"exist\" include a local variable that is not used anymore but still in scope? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7e4ceb12450ebdf13d05497562e79778\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7e4ceb12450ebdf13d05497562e79778</a></p>",
        "id": 199873762,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1591362871
    },
    {
        "content": "<p>I don't think so. According to NLL, the scope of a variable ends when it is last used.</p>",
        "id": 199891667,
        "sender_full_name": "Amanieu",
        "timestamp": 1591370339
    },
    {
        "content": "<p>OTOH, at least under current rules, we do mark it as <code>dereferenceable</code> so you shouldn't free the memory behind it</p>",
        "id": 199894347,
        "sender_full_name": "simulacrum",
        "timestamp": 1591371439
    },
    {
        "content": "<p>though how that plays into aliasing UB I'm not sure</p>",
        "id": 199894387,
        "sender_full_name": "simulacrum",
        "timestamp": 1591371459
    },
    {
        "content": "<p>Good point Amanieu, NLL allows <code>let mut x = something; let a = &amp;mut x; let b = &amp;mut x;</code> with <code>a</code> still in lexical scope when <code>b</code> is introduced</p>",
        "id": 199894722,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1591371609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> Stacked Borrows says that \"exist\" lasts until the last \"use\" of a reference, where \"use\" includes reborrows and dereferencing (so any [implicit] use of the <code>*</code> operator, not just actual memory accesses). <em>Additionally</em>, if your reference is passed as an argument to a function, then the reference \"exists\" until the function returns.</p>",
        "id": 200515920,
        "sender_full_name": "RalfJ",
        "timestamp": 1591863194
    },
    {
        "content": "<p>(That last clause is related to <code>dereferencable</code> meaning \"dereferencable during the entire function this was passed to\".)</p>",
        "id": 200515968,
        "sender_full_name": "RalfJ",
        "timestamp": 1591863225
    }
]