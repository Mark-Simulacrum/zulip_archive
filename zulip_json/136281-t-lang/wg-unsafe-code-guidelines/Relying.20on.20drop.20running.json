[
    {
        "content": "<p>AFAIK it is well-accepted that you can rely on drop glue running <em>in your own code</em>, as that is not impeded by <code>mem::forget</code>. However, just recently someone was surprised by this, and now someone is <a href=\"https://github.com/japaric/microamp/issues/6#issuecomment-493972302\" target=\"_blank\" title=\"https://github.com/japaric/microamp/issues/6#issuecomment-493972302\">actively doubting it</a>. Does someone here know examples of libraries relying on this? I thought crossbeam did, but it uses <code>catch_unwind</code> instead. I found <a href=\"https://github.com/rust-lang/rust/blob/27cc0db7a248308fc2634ac68d7608a20b4a1c09/src/liballoc/vec.rs#L685\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/27cc0db7a248308fc2634ac68d7608a20b4a1c09/src/liballoc/vec.rs#L685\">one case in libstd</a>.</p>",
        "id": 166393771,
        "sender_full_name": "RalfJ",
        "timestamp": 1558641055
    },
    {
        "content": "<p>Stack-allocated GC rooting is a good example of this, e.g. providing an unsafe rooting API but then wrapping it in a macro that ensures the user can't call <code>mem::forget</code>.</p>",
        "id": 166478981,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1558723181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> ah, josephine is doing that these days, right?</p>",
        "id": 166479451,
        "sender_full_name": "RalfJ",
        "timestamp": 1558723557
    },
    {
        "content": "<p>hm, can't find that macro in josephine's docs?</p>",
        "id": 166479588,
        "sender_full_name": "RalfJ",
        "timestamp": 1558723681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> see also binary_heap::Hole: <a href=\"https://github.com/rust-lang/rust/blob/27cc0db7a248308fc2634ac68d7608a20b4a1c09/src/liballoc/collections/binary_heap.rs#L924-L983\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/27cc0db7a248308fc2634ac68d7608a20b4a1c09/src/liballoc/collections/binary_heap.rs#L924-L983\">https://github.com/rust-lang/rust/blob/27cc0db7a248308fc2634ac68d7608a20b4a1c09/src/liballoc/collections/binary_heap.rs#L924-L983</a></p>",
        "id": 166670018,
        "sender_full_name": "Gankra",
        "timestamp": 1558997926
    },
    {
        "content": "<p>hashbrown::ScopeGuard: <a href=\"https://github.com/Amanieu/hashbrown/blob/master/src/scopeguard.rs\" target=\"_blank\" title=\"https://github.com/Amanieu/hashbrown/blob/master/src/scopeguard.rs\">https://github.com/Amanieu/hashbrown/blob/master/src/scopeguard.rs</a></p>",
        "id": 166670041,
        "sender_full_name": "Gankra",
        "timestamp": 1558997977
    },
    {
        "content": "<p>...every user of the scopeguard crate: <a href=\"https://crates.io/crates/scopeguard/reverse_dependencies\" target=\"_blank\" title=\"https://crates.io/crates/scopeguard/reverse_dependencies\">https://crates.io/crates/scopeguard/reverse_dependencies</a></p>",
        "id": 166670175,
        "sender_full_name": "Gankra",
        "timestamp": 1558998084
    },
    {
        "content": "<p>Relying on this _for safety_ ? Or just relying on this? E.g. <code>Box</code> relies on this..</p>",
        "id": 166691346,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559029843
    },
    {
        "content": "<p>for not leaking memory</p>",
        "id": 166691351,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559029857
    },
    {
        "content": "<p>if the user does not explicitly leak memory (e.g  by writing <code>mem::forget</code>)</p>",
        "id": 166691366,
        "sender_full_name": "gnzlbg",
        "timestamp": 1559029872
    },
    {
        "content": "<p>I was looking for safety cases</p>",
        "id": 166691932,
        "sender_full_name": "RalfJ",
        "timestamp": 1559030437
    },
    {
        "content": "<blockquote>\n<p>Stack-allocated GC rooting is a good example of this, e.g. providing an unsafe rooting API but then wrapping it in a macro that ensures the user can't call <code>mem::forget</code>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"128323\">@Alan Jeffrey</span> do you have a link for this?</p>",
        "id": 166691955,
        "sender_full_name": "RalfJ",
        "timestamp": 1559030460
    },
    {
        "content": "<p>For Josephine I think the plan is to use the JS context and rooting scopes to avoid a magic macro, as discussed here: <a href=\"https://github.com/asajeffrey/josephine/issues/52\" target=\"_blank\" title=\"https://github.com/asajeffrey/josephine/issues/52\">https://github.com/asajeffrey/josephine/issues/52</a></p>",
        "id": 166715308,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1559049446
    },
    {
        "content": "<p>the use of a macro is something I've discussed a lot with nox, let me ping him and see if there's anything written down.</p>",
        "id": 166715408,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1559049500
    },
    {
        "content": "<p>The basic idea is a macro which enforces that you can only create a <code>Foo</code> via <code>let ref mut x = Foo::new()</code>, so the caller doesn't have a owned <code>Foo</code> they can <code>mem::forget</code>, <code>ManuallyDrop</code> etc.</p>",
        "id": 166715542,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1559049598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^</p>",
        "id": 166715592,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1559049605
    },
    {
        "content": "<p>yes that's what I imagined, I just thought that would already be implemented</p>",
        "id": 166716685,
        "sender_full_name": "RalfJ",
        "timestamp": 1559050216
    },
    {
        "content": "<p>if not, could you speak up in <a href=\"https://github.com/rust-lang-nursery/nomicon/issues/135\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/nomicon/issues/135\">https://github.com/rust-lang-nursery/nomicon/issues/135</a> and cite that as a usecase?</p>",
        "id": 166716757,
        "sender_full_name": "RalfJ",
        "timestamp": 1559050265
    },
    {
        "content": "<p>I was confused for a sec here but the <code>Pin</code> in <a href=\"https://github.com/asajeffrey/josephine/issues/52\" target=\"_blank\" title=\"https://github.com/asajeffrey/josephine/issues/52\">https://github.com/asajeffrey/josephine/issues/52</a> is not the one in libstd right?^^</p>",
        "id": 166716828,
        "sender_full_name": "RalfJ",
        "timestamp": 1559050315
    },
    {
        "content": "<blockquote>\n<p>I was confused for a sec here but the <code>Pin</code> in <a href=\"https://github.com/asajeffrey/josephine/issues/52\" target=\"_blank\" title=\"https://github.com/asajeffrey/josephine/issues/52\">https://github.com/asajeffrey/josephine/issues/52</a> is not the one in libstd right?^^</p>\n</blockquote>\n<p>yeah, Josephine's <code>Pin</code> predates the one in std.</p>",
        "id": 166717435,
        "sender_full_name": "Alan Jeffrey",
        "timestamp": 1559050670
    }
]