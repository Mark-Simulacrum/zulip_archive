[
    {
        "content": "<p>So I do realize that, in C, comparing pointers that are not from the same allocation is undefined behavior.<br>\nIn Rust, arbitrary pointers can be compared safely using either Eq or Ord.<br>\nBut if I run that code in miri, I get an error.<br>\nDoes that mean that comparisons of unrelated pointers are secretly UB? Or is this just something miri can not reason about?</p>",
        "id": 165076089,
        "sender_full_name": "Wanja Hentze",
        "timestamp": 1557239489
    },
    {
        "content": "<p>More concretely, should I be able to write the following function without UB?<br>\n<code>fn is_in_bounds(ptr: *const T, slice: *const [T])</code></p>",
        "id": 165076442,
        "sender_full_name": "Wanja Hentze",
        "timestamp": 1557239712
    },
    {
        "content": "<blockquote>\n<p>But if I run that code in miri, I get an error.</p>\n</blockquote>\n<p>That is a limitation of Miri, not an indication of UB. The issues for that is <a href=\"https://github.com/rust-lang/miri/issues/224\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/224\">https://github.com/rust-lang/miri/issues/224</a>.</p>",
        "id": 165108232,
        "sender_full_name": "RalfJ",
        "timestamp": 1557261109
    },
    {
        "content": "<p>ptr comparison between any two pointers is safe in Rust.</p>",
        "id": 165108314,
        "sender_full_name": "RalfJ",
        "timestamp": 1557261144
    },
    {
        "content": "<p>there are some thorny questions around specifying that precisely though :/</p>",
        "id": 165108335,
        "sender_full_name": "RalfJ",
        "timestamp": 1557261163
    },
    {
        "content": "<p>I have a question in the same line of thought.<br>\nBecause in rust we disallow this: <code>let a: [u8]; let ptr1: *const u8 = &amp;a[0]; let a1 = unsafe {*ptr1.offset(1)};</code> (we require you to get a pointer to the whole slice).<br>\ndo we even promise that <code>let a: [u8]; let ptr1: *const u8 = a.as_ptr().wrapping_add(1); let ptr2 = &amp;a[1]; assert_eq!(ptr1, ptr2);</code>?<br>\nI thought about that while reading <a href=\"https://blog.frondeus.pl/parser-1/\" target=\"_blank\" title=\"https://blog.frondeus.pl/parser-1/\">https://blog.frondeus.pl/parser-1/</a> which in their he calculates pointer offsets a lot and I wonder if we promise that two pointers to the same \"object\" are always equivalent even if you obtain them in different ways, and they have different validity requirements.</p>",
        "id": 190486930,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1584093534
    },
    {
        "content": "<p>uh wow talk about stream necromancy^^</p>",
        "id": 190641223,
        "sender_full_name": "RalfJ",
        "timestamp": 1584268839
    },
    {
        "content": "<p>we've implemented ptr-int-casts since the original qustion, so basically everything about it changed</p>",
        "id": 190641229,
        "sender_full_name": "RalfJ",
        "timestamp": 1584268864
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> that's a good question, and I would formally state it has \"how much does pointer provenance affect pointer comparison\"</p>",
        "id": 190641325,
        "sender_full_name": "RalfJ",
        "timestamp": 1584268928
    },
    {
        "content": "<p>I would hope that the stacked borrow tag does not affect comparison, and I <em>think</em> that reflects what LLVM dos, but since LLVM is very unsound around ptr-int casts, that's hard to say for sure.</p>",
        "id": 190641328,
        "sender_full_name": "RalfJ",
        "timestamp": 1584268972
    },
    {
        "content": "<p>other provenance, like the original allocation the pointer \"comes from\", certainly <em>can</em> affect ptr comparison in LLVM</p>",
        "id": 190641340,
        "sender_full_name": "RalfJ",
        "timestamp": 1584268999
    },
    {
        "content": "<p>that <em>should</em> mean that casting ptrs to integers and comparing those is actually a different operation than comparing the pointers. unfortunately LLVM will optimize the former to the latter. which is wrong (part of the unsoundness I mentioned).</p>",
        "id": 190641353,
        "sender_full_name": "RalfJ",
        "timestamp": 1584269038
    }
]