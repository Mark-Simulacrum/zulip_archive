[
    {
        "content": "<blockquote>\n<blockquote>\n<p>(I think we should consider exposing Freeze)</p>\n</blockquote>\n<p>@centril what problem would that solve that can't be solved with UnsafeCell&lt;T&gt; ?</p>\n</blockquote>\n<p>See <a href=\"https://github.com/rust-lang/rust/issues/60715\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60715\">https://github.com/rust-lang/rust/issues/60715</a></p>",
        "id": 173204689,
        "sender_full_name": "centril",
        "timestamp": 1565790824
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 173205213,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565791163
    },
    {
        "content": "<p>I thought somebody wanted to expose it in such a way that it can be implemented for their own types</p>",
        "id": 173205234,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565791179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I guess that could make sense if you have some type that is <code>!Freeze</code> that you've wrapped inside another type which you want to be <code>Freeze</code> but you've ensured that no interior mutation is possible through the wrapper type</p>",
        "id": 173205491,
        "sender_full_name": "centril",
        "timestamp": 1565791325
    },
    {
        "content": "<p>idk how useful that is</p>",
        "id": 173205495,
        "sender_full_name": "centril",
        "timestamp": 1565791330
    },
    {
        "content": "<p><code>Freeze</code> can also be used to create an owned type which does not allow mutation at all</p>",
        "id": 173205550,
        "sender_full_name": "centril",
        "timestamp": 1565791371
    },
    {
        "content": "<p>no matter if moved to a new binding or not</p>",
        "id": 173205567,
        "sender_full_name": "centril",
        "timestamp": 1565791386
    },
    {
        "content": "<p>I'm having a hard time imagine which problems these would solve</p>",
        "id": 173205880,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565791591
    },
    {
        "content": "<p>well the latter is useful as a sort of \"let's really restrict mutation for code maintainability purposes\";<br>\nthe former swym usecase is more compelling tho</p>",
        "id": 173205979,
        "sender_full_name": "centril",
        "timestamp": 1565791676
    },
    {
        "content": "<p>the swym usecase of using <code>T: Freeze</code> as bound feels ok</p>",
        "id": 173206076,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565791732
    },
    {
        "content": "<p>the case for implementing <code>Freeze</code> manually is probably not compelling, but just wait for someone to do something weird :P</p>",
        "id": 173206163,
        "sender_full_name": "centril",
        "timestamp": 1565791787
    },
    {
        "content": "<p>but using <code>T: !Freeze</code> as bound doesn't feel that useful,<br>\nimplementing <code>Freeze</code> for types that would be <code>!Freeze</code> feels like maaybe,</p>",
        "id": 173206176,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565791801
    },
    {
        "content": "<p>implementing <code>!Freeze</code> for types that would be <code>Freeze</code> feels wrong</p>",
        "id": 173206232,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565791812
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Freeze</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\">  </span><span class=\"c1\">// Foo === UnsafeCell&lt;Foo&gt; ?</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">next</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 173206409,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565791931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> the usecase for implementing <code>!Freeze</code> manually is mostly to avoid committing (in the semver sense) to being <code>Freeze</code>; you can use <code>PhantomData&lt;Cell&lt;()&gt;&gt;</code> for that tho.</p>\n<p>As for negative bounds that isn't a thing...?</p>",
        "id": 173207494,
        "sender_full_name": "centril",
        "timestamp": 1565792688
    },
    {
        "content": "<p>I thought you can have a generic impl for T, and then specialize it for T: Freeze</p>",
        "id": 173207869,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565792920
    },
    {
        "content": "<p>and now you have separated !Freeze from Freeze</p>",
        "id": 173207887,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565792940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> maybe something like <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=94a031ddac7b2c5185292531f3f58f46\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=94a031ddac7b2c5185292531f3f58f46\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=94a031ddac7b2c5185292531f3f58f46</a> but rustc refuses to make that work</p>",
        "id": 173209116,
        "sender_full_name": "centril",
        "timestamp": 1565793811
    },
    {
        "content": "<p>but why would you use <code>T: !Freeze</code> as a bound... I could see using <code>T: Freeze</code> as a bound for optimization purposes or for correctness</p>",
        "id": 173209185,
        "sender_full_name": "centril",
        "timestamp": 1565793843
    },
    {
        "content": "<p>same question, i don't think doing that would be useful</p>",
        "id": 173210175,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565794550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> it's clearly useful in the swym case...?</p>",
        "id": 173210475,
        "sender_full_name": "centril",
        "timestamp": 1565794771
    },
    {
        "content": "<p>They use <code>T: Freezw</code>, not <code>T: !Freeze</code>, right? Otherwise I completely misunderstood what they were doing</p>",
        "id": 173210519,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565794801
    },
    {
        "content": "<p>I thought they wanted to use <code>T: Freeze</code> to avoid using types containing <code>UnsafeCell</code></p>",
        "id": 173210594,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565794821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> I think we are talking past each other; we both agree that bounding on <code>!Freeze</code> is not useful</p>",
        "id": 173210602,
        "sender_full_name": "centril",
        "timestamp": 1565794827
    },
    {
        "content": "<p>yep</p>",
        "id": 173210609,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565794836
    },
    {
        "content": "<p>bounding on <code>T: Freeze</code> seems definetely useful</p>",
        "id": 173210624,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565794846
    },
    {
        "content": "<p>yep</p>",
        "id": 173210628,
        "sender_full_name": "centril",
        "timestamp": 1565794852
    },
    {
        "content": "<p>implementing Freeze or !Freeze might be useful</p>",
        "id": 173210638,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565794862
    },
    {
        "content": "<p>i would be fine with allowing people to play with that behind a different feature gate</p>",
        "id": 173210652,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565794877
    },
    {
        "content": "<p>I wonder if there are any interesting optimizations you can do through specialization with <code>T: Freeze</code></p>",
        "id": 173210658,
        "sender_full_name": "centril",
        "timestamp": 1565794882
    },
    {
        "content": "<p>Yep; we should also audit the compiler's use of the lang item</p>",
        "id": 173210676,
        "sender_full_name": "centril",
        "timestamp": 1565794906
    }
]