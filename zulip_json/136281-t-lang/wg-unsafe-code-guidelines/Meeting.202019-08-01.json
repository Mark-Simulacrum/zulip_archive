[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"810\">@WG-unsafe-code-guidelines</span> !</p>",
        "id": 172229735,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672429
    },
    {
        "content": "<p>hello! is this like a public meeting? sorry if I interrupted otherwise</p>",
        "id": 172229914,
        "sender_full_name": "DutchGhost",
        "timestamp": 1564672560
    },
    {
        "content": "<p>it's public, otherwise it wouldn't be on Zulip. ;) we usually do some triage, basically, and think about which topics might be most interesting for the WG to look at next.</p>",
        "id": 172230037,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672639
    },
    {
        "content": "<p>if you have things related to that, feel free to chime in!</p>",
        "id": 172230071,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672671
    },
    {
        "content": "<p>otherwise please just open another topic here on zulip</p>",
        "id": 172230107,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672682
    },
    {
        "content": "<p>if it's just me in terms of WG people I guess there is no meeting anyway.^^</p>",
        "id": 172230132,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672689
    },
    {
        "content": "<p>so in terms of triage: I think the current state of our PRs is that <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/180\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/180\">https://github.com/rust-lang/unsafe-code-guidelines/pull/180</a> is read to be merged. I was just going to wait a bit if any other suggestions come up, and was hoping <span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> or <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> or so would be here to give me the green light. ;)<br>\nMy other PR also hasn't seen comments in a bit, but it's a lot of text so I'll just let it sit for a bit mote.</p>",
        "id": 172230348,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> 's PRs AFAIK are all waiting for them to do some edits.</p>",
        "id": 172230356,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672859
    },
    {
        "content": "<p>i'm here</p>",
        "id": 172230365,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564672863
    },
    {
        "content": "<p>so, do you think we can merge <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/180\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/180\">https://github.com/rust-lang/unsafe-code-guidelines/pull/180</a> ?</p>",
        "id": 172230399,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  i was hoping to hear <span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> opinion on that as well. But since the reference kind of uses those terms already and they haven't chimed in the discussion, I think we can merge this.</p>",
        "id": 172230467,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564672927
    },
    {
        "content": "<p>Maybe they are not getting zulip notifications on RL got in their way. I can try pinging them on Discord</p>",
        "id": 172230480,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564672943
    },
    {
        "content": "<p>same here, but I also have not heard from them for a bit</p>",
        "id": 172230489,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672950
    },
    {
        "content": "<p>having <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> look at this would also be nice</p>",
        "id": 172230498,
        "sender_full_name": "RalfJ",
        "timestamp": 1564672960
    },
    {
        "content": "<p>and also I am using basically their proposed terms here (\"value\" and \"place\") so I dont expect objection to that, but they probably have opinions on how I defined those terms.</p>",
        "id": 172230544,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673004
    },
    {
        "content": "<p>merging its ok for me, I can't find nicole on discord either</p>",
        "id": 172230623,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673055
    },
    {
        "content": "<p>okay, going to merge. it's not like that makes it immutable forever anyway.</p>",
        "id": 172230637,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673072
    },
    {
        "content": "<p>but with this we have completed the TODO items that were added to the glossary long ago :)</p>",
        "id": 172230650,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> is there one of your PRs that you think I should look at again or that we should talk about? last time I checked there was outstanding feedback for all of them.</p>",
        "id": 172230687,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673140
    },
    {
        "content": "<p>(no pressure, just trying to make sure I'm not missing things)</p>",
        "id": 172230764,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673184
    },
    {
        "content": "<p>I don't recall, had a paper deadline this week, and have been a bit disconnected</p>",
        "id": 172230819,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673231
    },
    {
        "content": "<p>we can just skim over the list and see if any is ready?</p>",
        "id": 172230832,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673240
    },
    {
        "content": "<p>sure</p>",
        "id": 172230854,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673262
    },
    {
        "content": "<p>so i have 5 PR open</p>",
        "id": 172230868,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673278
    },
    {
        "content": "<p>what's blocking <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/153\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/153\">https://github.com/rust-lang/unsafe-code-guidelines/pull/153</a> ?</p>",
        "id": 172230939,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673306
    },
    {
        "content": "<p>we talked about that one last weet at the mtg</p>",
        "id": 172230997,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673369
    },
    {
        "content": "<p>and I left a note there about what we decided :D</p>",
        "id": 172231005,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673377
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/153#pullrequestreview-266745247\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/153#pullrequestreview-266745247\">https://github.com/rust-lang/unsafe-code-guidelines/pull/153#pullrequestreview-266745247</a></p>",
        "id": 172231023,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673390
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/184\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/184\">https://github.com/rust-lang/unsafe-code-guidelines/issues/184</a></p>",
        "id": 172231030,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673398
    },
    {
        "content": "<p>i've punted the work of making subsection consistent</p>",
        "id": 172231084,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673407
    },
    {
        "content": "<p>right but the PR still defines \"layout includes these things\"</p>",
        "id": 172231106,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673427
    },
    {
        "content": "<p>which we decided is not how we wanted to approach this</p>",
        "id": 172231112,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673435
    },
    {
        "content": "<p>ok, so that PR is not ready, that still needs to happen</p>",
        "id": 172231120,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673440
    },
    {
        "content": "<p>I think I'll do the work in that PR</p>",
        "id": 172231129,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673456
    },
    {
        "content": "<p>and the PR does change some parts in some sections; at least those it should use the new terminology for then</p>",
        "id": 172231140,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673466
    },
    {
        "content": "<p>also to see if it really works</p>",
        "id": 172231147,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673473
    },
    {
        "content": "<p>doing the sweeping change then can be left as future work (it should be rather clear at that point which parts are \"old\" and which are \"new\")</p>",
        "id": 172231169,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673500
    },
    {
        "content": "<p>i think i will do both there</p>",
        "id": 172231221,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673522
    },
    {
        "content": "<p>it's hard to know from the local change only whether this makes sense everywhere</p>",
        "id": 172231238,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673535
    },
    {
        "content": "<p>only when updating the rest did we realize that spelling everything out was a mouthful, and decided to do something else</p>",
        "id": 172231249,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673554
    },
    {
        "content": "<p>yes</p>",
        "id": 172231257,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673561
    },
    {
        "content": "<p>we can then decide whether that's really what we want, and whether it should be split in different PRs</p>",
        "id": 172231270,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673569
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/159\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/159\">https://github.com/rust-lang/unsafe-code-guidelines/pull/159</a> is blocked on clarifiying a bit field less and data-carrying enums, and on removing the &amp;! bits</p>",
        "id": 172231309,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673618
    },
    {
        "content": "<p>i'd rather open an issue to clarify field-less and data-carrying enums a bit more, remove the &amp;! parts, and see if we can merge the rest</p>",
        "id": 172231330,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673641
    },
    {
        "content": "<p>I'll split that PR in two</p>",
        "id": 172231394,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673666
    },
    {
        "content": "<p>I also have some open comments in there</p>",
        "id": 172231439,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673709
    },
    {
        "content": "<p>like not using Rust code to demonstrate layout equality things that cannot actually be demonstrated in code</p>",
        "id": 172231458,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673722
    },
    {
        "content": "<p>yep, I remove that</p>",
        "id": 172231471,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673732
    },
    {
        "content": "<p>and \"inhabited\" is a bombshell that you dropped there^^</p>",
        "id": 172231488,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673746
    },
    {
        "content": "<p>you mention the comment was confusing, I don't have an opinion either way</p>",
        "id": 172231489,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673749
    },
    {
        "content": "<p>I did not forsee it would be so controversial</p>",
        "id": 172231495,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673757
    },
    {
        "content": "<p>I think \"inhabited\" is a term not to be used without a precise definition</p>",
        "id": 172231548,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673781
    },
    {
        "content": "<p>I still think that this would hold for whatever definition of inhabited / uninhabited that we pick, or maybe put in another way, we should pick a definition such that it holds</p>",
        "id": 172231559,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673793
    },
    {
        "content": "<p>I have been involved in long and heated discussions on the rust forums about that term^^</p>",
        "id": 172231565,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673798
    },
    {
        "content": "<p>but since we haven't done that, its wrong to force that here</p>",
        "id": 172231572,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673807
    },
    {
        "content": "<p>it should be discussed whether this is a constraint worth having when trying to define inhabited</p>",
        "id": 172231597,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673826
    },
    {
        "content": "<p>IMO this story should start with a glossary definition of \"uninhabited\"</p>",
        "id": 172231614,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673847
    },
    {
        "content": "<p>yep, let's punt that to later and just remove those parts</p>",
        "id": 172231714,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673910
    },
    {
        "content": "<p>maybe open an issue to track defining uninhabited ?</p>",
        "id": 172231726,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673923
    },
    {
        "content": "<blockquote>\n<p>'d rather open an issue to clarify field-less and data-carrying enums a bit more</p>\n</blockquote>\n<p>I made a concrete small proposal for clarification. I dont think an issue is warranted. if you dont want to implement that proposal in your PR I can just make a PR for it.</p>",
        "id": 172231727,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673924
    },
    {
        "content": "<blockquote>\n<p>maybe open an issue to track defining uninhabited ?</p>\n</blockquote>\n<p>we have <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/165\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/165\">https://github.com/rust-lang/unsafe-code-guidelines/issues/165</a></p>",
        "id": 172231768,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673953
    },
    {
        "content": "<p>I'd say that's the same discussion</p>",
        "id": 172231772,
        "sender_full_name": "RalfJ",
        "timestamp": 1564673957
    },
    {
        "content": "<p>I'll update all PRs after the meeting, and we can discuss what to do inline (can't remember how small or large the changes were)</p>",
        "id": 172231773,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673958
    },
    {
        "content": "<p>sounds good</p>",
        "id": 172231776,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673963
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/160#discussion_r307866029\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/160#discussion_r307866029\">https://github.com/rust-lang/unsafe-code-guidelines/pull/160#discussion_r307866029</a> is blocked on me rephrasing that, or removing it, will check later</p>",
        "id": 172231812,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564673996
    },
    {
        "content": "<p>yes</p>",
        "id": 172231893,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674030
    },
    {
        "content": "<p>also that was the PR with the \"pictures\", right?</p>",
        "id": 172231900,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674037
    },
    {
        "content": "<p>yes, i'd prefer to add pictures afterwards to the struct an union sections</p>",
        "id": 172231922,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674061
    },
    {
        "content": "<p>yes: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/160#discussion_r307714990\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/160#discussion_r307714990\">https://github.com/rust-lang/unsafe-code-guidelines/pull/160#discussion_r307714990</a></p>",
        "id": 172231941,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674077
    },
    {
        "content": "<p>sure, I can open an issue</p>",
        "id": 172231948,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674083
    },
    {
        "content": "<p>at some point, I think we should try to go through the book, and \"summarize\" stuff</p>",
        "id": 172231964,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674098
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/161\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/161\">https://github.com/rust-lang/unsafe-code-guidelines/pull/161</a> has some open comments</p>",
        "id": 172232026,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674125
    },
    {
        "content": "<p>and not much discussion yet</p>",
        "id": 172232033,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674130
    },
    {
        "content": "<p>reading the struct and enum chapters feels like some simple things are explained with a lot of words</p>",
        "id": 172232037,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674135
    },
    {
        "content": "<p>so I guess you can just go over them and see</p>",
        "id": 172232038,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674135
    },
    {
        "content": "<blockquote>\n<p>reading the struct and enum chapters feels like some simple things are explained with a lot of words</p>\n</blockquote>\n<p>that's what I was trying to fight in some of your PRs as well ;)</p>",
        "id": 172232065,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674160
    },
    {
        "content": "<p>OTOH, precisely stating the obvious is an art on its own</p>",
        "id": 172232082,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674180
    },
    {
        "content": "<p>I think we should summarize in PRs that are \"non-functional changes\". As in, that PR cannot change semantics in any way. </p>\n<hr>\n<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/161\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/161\">https://github.com/rust-lang/unsafe-code-guidelines/pull/161</a><br>\nI think we can now slowly try to resolve those. Your PR with a definition for value representation is already merged?</p>",
        "id": 172232122,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674205
    },
    {
        "content": "<p>Instead of using padding, I think we can word <a href=\"https://github.com/rust-lang/rust/issues/161\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/161\">#161</a> to just mention something about the bytes of the value representation</p>",
        "id": 172232152,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674231
    },
    {
        "content": "<p>yes we can, but the mtg has 2 more minutes and then my bus comes, so lets do that in the PR :)</p>",
        "id": 172232153,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674232
    },
    {
        "content": "<p>\"bytes of the value rep\" is not a term that has been defined anywhere yet</p>",
        "id": 172232206,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674245
    },
    {
        "content": "<p>and I honestly dont know what it means</p>",
        "id": 172232220,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674252
    },
    {
        "content": "<p>unless its a weird way to say \"non-padding\"</p>",
        "id": 172232229,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674260
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/164\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/164\">https://github.com/rust-lang/unsafe-code-guidelines/pull/164</a> should be updated to the \"1-ZST\" terminology. Otherwise this seems uncontroversial.</p>",
        "id": 172232291,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674317
    },
    {
        "content": "<p>the value relationship is a 1:1 relationship, not many to one</p>",
        "id": 172232305,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674330
    },
    {
        "content": "<p>or something like that</p>",
        "id": 172232312,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674335
    },
    {
        "content": "<p>the relationship is between values and lists of bytes</p>",
        "id": 172232330,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674347
    },
    {
        "content": "<p>so that doesnt even typecheck what you just said</p>",
        "id": 172232343,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674356
    },
    {
        "content": "<p>so saying that this relationship is injective</p>",
        "id": 172232344,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674356
    },
    {
        "content": "<p>would be a way to say that there is no padding</p>",
        "id": 172232397,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674365
    },
    {
        "content": "<p>its a relation not a function and we use it both ways so \"injective\" isnt clear...</p>",
        "id": 172232466,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674415
    },
    {
        "content": "<p>you mean the bytelist-to-val mapping is injective? different lists -&gt; different values?</p>",
        "id": 172232507,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674438
    },
    {
        "content": "<p>not sure if padding is the <em>only</em> cause of ambiguity that we could have there... like, I deliberately did not define the values for <code>f32</code> ;)</p>",
        "id": 172232546,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674469
    },
    {
        "content": "<p>yes, if we use it both ways it would be bijective and invertible</p>",
        "id": 172232556,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674473
    },
    {
        "content": "<p>well for f32 it wouldn't be bijective right ?</p>",
        "id": 172232646,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674507
    },
    {
        "content": "<p>and anyway that would still only help to define <em>types with no padding at all</em>, ut doesnt help to define what the \"bytes of the value rep\" are or  what a \"padding byte\" is</p>",
        "id": 172232656,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674514
    },
    {
        "content": "<p>do we want to define what a padding byte is at all ?</p>",
        "id": 172232689,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674544
    },
    {
        "content": "<blockquote>\n<p>well for f32 it wouldn't be bijective right ?</p>\n</blockquote>\n<p>no idea. do we guarantee to preserve NaN bits?</p>",
        "id": 172232695,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674550
    },
    {
        "content": "<p>no we don't</p>",
        "id": 172232705,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674555
    },
    {
        "content": "<p>or at least, not yet, LLVM does not preserve them, so we currently cannot</p>",
        "id": 172232716,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674568
    },
    {
        "content": "<p>does everyone know that?^^ seems like a huge footfun</p>",
        "id": 172232726,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674573
    },
    {
        "content": "<p>it should be in the reference somewhere</p>",
        "id": 172232738,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674581
    },
    {
        "content": "<blockquote>\n<p>do we want to define what a padding byte is at all ?</p>\n</blockquote>\n<p>I would prefer if we did not have to talk about this in the spec, ever, and it just arose naturally from the \"typed copy\" rules</p>",
        "id": 172232753,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674591
    },
    {
        "content": "<p>but with the mess that is unions passed by value, I am not sure if we have that luxury</p>",
        "id": 172232791,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674602
    },
    {
        "content": "<p>so we can define padding as those bytes that are not copied on typed copies :D</p>",
        "id": 172232814,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674609
    },
    {
        "content": "<p>that's way too informal, typed copies dont copy bytes</p>",
        "id": 172232841,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674631
    },
    {
        "content": "<p>they perform two value-bytelist-conversions</p>",
        "id": 172232847,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674636
    },
    {
        "content": "<p>anyway I got to go, cu!</p>",
        "id": 172232865,
        "sender_full_name": "RalfJ",
        "timestamp": 1564674653
    },
    {
        "content": "<p>cu, we should continue that discussion in that issue</p>",
        "id": 172232885,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674666
    },
    {
        "content": "<p>we can try to find a way to specify that with the terms what we have, and if we can't, we shall identify which new definitions we need, and work towards adding those first, and then re-evaluate</p>",
        "id": 172232947,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564674720
    },
    {
        "content": "<p>and meanwhile the rest of that PR can proceed without this</p>",
        "id": 172234337,
        "sender_full_name": "RalfJ",
        "timestamp": 1564675422
    },
    {
        "content": "<p>Couldn't we just state \"<strong>Padding</strong> consists of all bytes in the layout of a <code>struct</code>, or the layout of an <code>enum</code> with associated data, that were added by the compiler to provide required alignment for the explicitly-specified fields of the <code>struct</code> or <code>enum</code>.\" ?</p>",
        "id": 172237264,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1564677658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> this is odd: <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/structs-and-tuples.md#zero-sized-structs\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/structs-and-tuples.md#zero-sized-structs\">https://github.com/rust-lang/unsafe-code-guidelines/blob/master/reference/src/layout/structs-and-tuples.md#zero-sized-structs</a><br>\nit talks about all repr's but is inside the \"repr Rust\" section</p>",
        "id": 172237411,
        "sender_full_name": "RalfJ",
        "timestamp": 1564677776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> that would be an intensional definition of padding -- in terms of when it gets added, not how it behaves. That could also work.<br>\nYou have to mention extra trailing padding though that has to be added sometimes with <code>repr(align)</code> to make the size a multiple of the alignment.</p>",
        "id": 172237526,
        "sender_full_name": "RalfJ",
        "timestamp": 1564677847
    },
    {
        "content": "<p>this def.n would basically delegate it to struct/enum/union to say what their respective padding bytes are</p>",
        "id": 172237584,
        "sender_full_name": "RalfJ",
        "timestamp": 1564677896
    },
    {
        "content": "<blockquote>\n<p>this is odd<br>\nwe can move this somewhere else</p>\n</blockquote>",
        "id": 172238356,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564678341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I believe that we have to define \"padding\" before we can specify its behavior. I had wondered about the trailing padding; some of the UCG discussions I've seen include it but most do not.  That's probably because it's inclusion seems mandatory only for items that are in an array (though I would like to consider it to also be needed to align with cache lines, etc). Personally I believe that trailing padding needs to be included.</p>",
        "id": 172238755,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1564678628
    },
    {
        "content": "<p>Another way to define padding could be \"<strong>Padding</strong> consists of all bytes in an actual layout that were added by the compiler to satisfy type alignment constraints.\" That definition implies that, in general, the programmer cannot predict exactly how much padding, if any, will be added. That situation is particularly apparent when rustc is free to reorder fields within a layout: (uint8, int16, int8) could have two bytes of padding if laid out in that order, or no bytes if laid out as (int8, uint8, int16).</p>",
        "id": 172239579,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1564679184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> yeah, we should likey have a section on <code>### Stuff that is true for all repr's</code></p>",
        "id": 172239708,
        "sender_full_name": "RalfJ",
        "timestamp": 1564679287
    },
    {
        "content": "<blockquote>\n<p>believe that we have to define \"padding\" before we can specify its behavior</p>\n</blockquote>\n<p>I disagree. See <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/183\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/183\">https://github.com/rust-lang/unsafe-code-guidelines/issues/183</a> for a definition.<br>\nMost of the behavior of padding (at least the part where padding bytes are not preserved on copis) is actually specified in <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/175\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/pull/175\">https://github.com/rust-lang/unsafe-code-guidelines/pull/175</a>, and the beauty is that the spec dosnt even need to talk about padding to specify that. :D</p>",
        "id": 172239785,
        "sender_full_name": "RalfJ",
        "timestamp": 1564679363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> trailing padding is also mandatory for <code>#[repr(align(8)] struct Foo(u8);</code></p>",
        "id": 172239820,
        "sender_full_name": "RalfJ",
        "timestamp": 1564679394
    },
    {
        "content": "<blockquote>\n<p>That definition implies that, in general, the programmer cannot predict exactly how much padding, if any, will be added.</p>\n</blockquote>\n<p>I quite disagree, in fact it says very precisely that if type alignment constraints are met, no padding will be added.<br>\nthere are proposals for having padding in unions in a way that has nothing to do with type alignment constraints.</p>",
        "id": 172239914,
        "sender_full_name": "RalfJ",
        "timestamp": 1564679454
    },
    {
        "content": "<p>^^ In that case the type size constraint needs to include both any initial padding of the first byte of the type and any terminal padding after the last byte of the type. Otherwise the prefix padding for the second element of an array would include the implied suffix padding for the first element, and the array as a whole could have unspecified suffix padding. (Sorry if I'm using \"wrong\" terminology here. I'm just trying to convey what I see as the issue.)</p>\n<p>As to <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/183\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/183\">https://github.com/rust-lang/unsafe-code-guidelines/issues/183</a>, I don't feel bad about not knowing about an issue that was opened only yesterday.</p>",
        "id": 172242148,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1564681094
    },
    {
        "content": "<p>I didnt say you should feel bad. :) just pointed out that padding can indeed be defined \"extensionally\", based on behavior that the Rust Abstract Machine has anyway.</p>",
        "id": 172247350,
        "sender_full_name": "RalfJ",
        "timestamp": 1564684312
    },
    {
        "content": "<p>Obviously the UCG team has decided that the Rust Abstract Machine (RustAM) should model non-trapping NotAValues (NaVs) as 0xUU Should the RustAM also model Itanium-style trapping NaVs, or is the UCG presuming that no future ISA will impose a similar poorly-though-out \"feature\"?</p>",
        "id": 172248181,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1564684744
    },
    {
        "content": "<p>nothing around 0xUU is decided. that's all just my personal proposals so far. But it is the only really concrete proposal we got.</p>",
        "id": 172248378,
        "sender_full_name": "RalfJ",
        "timestamp": 1564684857
    },
    {
        "content": "<p>I have read about trapping \"NaVs\" on Itanium but do not know much about them and do not know what it would take for the spec to account for them</p>",
        "id": 172248452,
        "sender_full_name": "RalfJ",
        "timestamp": 1564684906
    },
    {
        "content": "<p>I think if we declared <code>let x: u8 = mem::uninitialized()</code> allowed we might actually be able to handle itanium. or maybe not.</p>",
        "id": 172248528,
        "sender_full_name": "RalfJ",
        "timestamp": 1564684933
    },
    {
        "content": "<p>My understanding is that the Itanium trapping NaVs are not in primary memory, but only in registers and (probably) cache lines. If so, it's more a compiler problem that the compiler can predict. Any load of a cache line from primary memory will have 0xUUs rather than trapping NaVs. Of course I may be incorrect; I've never had to work with the Itanium ISA and, at the moment, have to run so I can't research it before posting this reply.</p>",
        "id": 172251011,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1564686365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> i don't think Rust support Itanium, at least, not yet</p>",
        "id": 172260354,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564692685
    },
    {
        "content": "<p>if it does, the current proposal means that copying NaVs is ok</p>",
        "id": 172260467,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564692777
    },
    {
        "content": "<p>i don't know if that would mean that Rust wouldn't be able to target Itanium</p>",
        "id": 172260599,
        "sender_full_name": "gnzlbg",
        "timestamp": 1564692864
    },
    {
        "content": "<p>Okay, I've done a very brief investigation of the IA64  (also known as Intel Itanium) Instruction Set Architecture (ISA), based on <a href=\"https://www.intel.com/content/dam/www/public/us/en/documents/manuals/itanium-architecture-vol-3-manual.pdf\" target=\"_blank\" title=\"https://www.intel.com/content/dam/www/public/us/en/documents/manuals/itanium-architecture-vol-3-manual.pdf\">https://www.intel.com/content/dam/www/public/us/en/documents/manuals/itanium-architecture-vol-3-manual.pdf</a>. </p>\n<p><strong>Disclaimer:</strong> The following analysis might be in error.</p>\n<p>Most architecture registers have an associated <code>NaT</code> (Not a Thing) status flag, whose primary purpose is to invalidate speculative execution results that need to be discarded because the execution trace took a different path. These bits are not programmer-visible in other out-of-order architecture implementations, but in IA64 they are programmer visible. <strong>Conclusion 1:</strong> rustc is unlikely to encounter this \"feature\" in any future ISA.</p>\n<p>If rustc is ported to IA64, which seems not very likely since the IA64 product line is considered obsolete, then there are two IA64 extensions of the per-architecture-register NaT flags that will need to be considered. First, it is possible to tag pages in the memory map as <code>NaT</code> pages, so that any load from such a page propagates the <code>NaT</code> status to the architecture register containing the loaded value. Second, and much more important, there is an IA64 architecture register that contains a configurable floating-point NaN value (called <code>NaTVal</code>) which, when encountered,  propagates preemptively through all IA64 floating-point operations. That permits floating-point values whose status is still speculative to be spilled to memory and later reloaded without losing their <code>NaT</code> status. <strong>Conclusion 2:</strong> The RustAM should not bother to model this IA64 peculiarity.</p>",
        "id": 172294295,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1564736777
    },
    {
        "content": "<blockquote>\n<p>The RustAM should not bother to model this IA64 peculiarity</p>\n</blockquote>\n<p>I like this conclusion ;)</p>\n<p>Thanks <span class=\"user-mention\" data-user-id=\"132894\">@Tom Phinney</span> !</p>",
        "id": 172294658,
        "sender_full_name": "RalfJ",
        "timestamp": 1564737295
    },
    {
        "content": "<p>I can see other WLIW architectures using a similar mechanism TBQH, but I think that making <code>NaT</code>-like thing visible would throw a wrench not only into Rust’s wheels but also every other language’s as well.</p>",
        "id": 172304044,
        "sender_full_name": "nagisa",
        "timestamp": 1564748989
    }
]