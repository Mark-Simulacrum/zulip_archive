[
    {
        "content": "<p>So, I was just reading the <a class=\"stream-topic\" data-stream-id=\"201246\" href=\"/#narrow/stream/201246-wg-async-foundations.2Fbook/topic/Restructuring.20the.20async.20book\">#wg-async-foundations/book &gt; Restructuring the async book</a> topic with great interest and I want to call something out. While we think about the book, we should also be thinking about user stories for the async vision doc!</p>\n<p>For example, the (excellent) points that <span class=\"user-mention\" data-user-id=\"218683\">@Alice Ryhl</span> was raising about problems people hit should <strong>absolutely</strong> make it into a user story! I was thinking they might fit well into a story about Grace, the principal engineer, because they seem like the sort of problems that even experienced folks could fit and find very puzzling, but it could also be good for Alan. Doesn't matter probably.</p>\n<p>Similarly <a href=\"#narrow/stream/201246-wg-async-foundations.2Fbook/topic/Restructuring.20the.20async.20book/near/227886476\">this comment by <span class=\"user-mention\" data-user-id=\"204219\">@Matthias247</span></a> seems like a good fit:</p>\n<blockquote>\n<p>I think actors are great! But async mutexes are not that bad either. The good part about them is that they allow better cancellation. There is not something enqueued in the actor which still runs  in the background. That can be a plus (but also a negative thing - really depends on the use-case))</p>\n</blockquote>",
        "id": 228049662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614422472
    },
    {
        "content": "<p>At minimum, maybe folk can drop notes in this topic when they have ideas for things that should show up in user stories?</p>",
        "id": 228049670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614422493
    },
    {
        "content": "<p>Specific suggestions by <span class=\"user-mention\" data-user-id=\"218683\">@Alice Ryhl</span> that seem on the money:</p>",
        "id": 228053028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614426309
    },
    {
        "content": "<ul>\n<li>putting I/O resources in <code>Mutex</code></li>\n</ul>",
        "id": 228053034,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614426319
    },
    {
        "content": "<ul>\n<li>\"beware of blocking code\" -- getting confused and finding it hard to know what is blocking, what is not</li>\n</ul>",
        "id": 228053040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614426333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/201246-wg-async-foundations.2Fbook/topic/user.20stories/near/228053040\">said</a>:</p>\n<blockquote>\n<ul>\n<li>\"beware of blocking code\" -- getting confused and finding it hard to know what is blocking, what is not</li>\n</ul>\n</blockquote>\n<p>Well, the term \"blocking\" is very overloaded, both to things that _might_ cause thread preemption and just code that runs too long</p>",
        "id": 228206160,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1614593733
    },
    {
        "content": "<p>none of the currently existing software allows you to detect or mitigate either of those cases, so all we can do is document</p>",
        "id": 228206186,
        "sender_full_name": "Florian Gilcher",
        "timestamp": 1614593754
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  that very confusion seems like it might be part of the story!</p>",
        "id": 228472848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614714304
    },
    {
        "content": "<p>Sorry, I missed this topic. Agree that accidentally blocking the executor is a common and hard-to-detect pitfall.</p>",
        "id": 228862741,
        "sender_full_name": "Didrik Nordstrom",
        "timestamp": 1614897062
    },
    {
        "content": "<p>Re actors: We should document tasks and channels, and how they can be used to synchronize data. This is just \"vanilla\" async Rust and gets you many properties that the actor model sets out to solve, without requiring the reader to know about concurrent design patterns. There is a design patterns section planned, where this fits nicely.</p>",
        "id": 228863656,
        "sender_full_name": "Didrik Nordstrom",
        "timestamp": 1614897570
    },
    {
        "content": "<p>I only just saw this channel (and my mentions in a previous meeting) as apparently I had notifications disabled! But I just wanted to mention that the main thing that made the existing book non-optimal when I was  learning (and led me to write <a href=\"http://jamesmcm.github.io/blog/2020/05/06/a-practical-introduction-to-async-programming-in-rust/#en\">my blog post</a> ) was that it  focussed on the implementation using the Future trait and the requirement for Pin rather than the common usage for most developers.</p>\n<p>We have a lot of Rust developers like myself come from more data engineering/systems programming background where async operations and concurrency might be new concepts, so I think it'd be good to cover that an intro i.e. when to use async and when to use rayon (e.g. IO waiting vs. CPU intensive operations). I think that the graphs in my blog post really helped me understand that clearly so I'd recommend a similar approach for the introduction (but hopefully with better graphics!). Note that there is an <a href=\"https://github.com/jamesmcm/async-rust-example/tree/async-std\">async-std</a> version of the blog post code too.</p>\n<p>Also regarding the above, an issue I hit repeatedly was trying to await the Futures in a sequence rather than using FuturesUnordered.</p>",
        "id": 228864844,
        "sender_full_name": "jamesmcm",
        "timestamp": 1614898221
    },
    {
        "content": "<p>Hey, I'm new here, having dabbled in Rust for a few years both in private and at work, but only for small stand-alone pieces. I was looking at the async user stories, in particular the one about buffered streams <a href=\"https://rust-lang.github.io/wg-async-foundations/vision/submitted_stories/status_quo/barbara_battles_buffered_streams.html\">https://rust-lang.github.io/wg-async-foundations/vision/submitted_stories/status_quo/barbara_battles_buffered_streams.html</a>, and thought I might have a suggestion how Barbara could use a mutex and a sink to get her desired behavior. Is this the place where I ask if that would have any interest (and then go on to learn that my approach won't work), or should I go somewhere else?</p>",
        "id": 247607931,
        "sender_full_name": "Jonas Dahlbæk",
        "timestamp": 1627576510
    },
    {
        "content": "<p>I went to <a class=\"stream\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-wg-async-foundations\">#wg-async-foundations</a> with my comment instead</p>",
        "id": 247798050,
        "sender_full_name": "Jonas Dahlbæk",
        "timestamp": 1627728162
    }
]