[
    {
        "content": "<p>Hey, so I've been playing with a possible reorganization for the async book. You can get a feel for it here:</p>\n<p><a href=\"https://github.com/nikomatsakis/async-book/blob/master/src/SUMMARY.md\" target=\"_blank\" title=\"https://github.com/nikomatsakis/async-book/blob/master/src/SUMMARY.md\">https://github.com/nikomatsakis/async-book/blob/master/src/SUMMARY.md</a></p>",
        "id": 168152562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531463
    },
    {
        "content": "<p>the high-level idea is to pull the async-await material up higher</p>",
        "id": 168152576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> you mentioned having a big PR incoming, is it <a href=\"https://github.com/rust-lang/async-book/pull/18\" target=\"_blank\" title=\"https://github.com/rust-lang/async-book/pull/18\">https://github.com/rust-lang/async-book/pull/18</a> ?</p>",
        "id": 168152646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531498
    },
    {
        "content": "<p>indeed</p>",
        "id": 168152657,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560531511
    },
    {
        "content": "<p>btw <a href=\"https://github.com/rust-lang/async-book/issues/18\" target=\"_blank\" title=\"https://github.com/rust-lang/async-book/issues/18\">async-book#18</a> should work now ;)</p>",
        "id": 168152687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531536
    },
    {
        "content": "<p>fancy</p>",
        "id": 168152726,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560531571
    },
    {
        "content": "<p>But <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> I was hoping to get a better idea what you think is the \"key thing\" that closer understanding of the <code>Future</code> trait provides. You mentioned that you felt like it was important to helping unconfuse people</p>",
        "id": 168152742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531589
    },
    {
        "content": "<p>(I'm wondering if there is some simplified version of the intution that can be given more easily, with the full details deferred for later)</p>",
        "id": 168152833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531629
    },
    {
        "content": "<p>Hm, I'm curious what the full details you have in mind are that you think we could omit</p>",
        "id": 168152947,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560531719
    },
    {
        "content": "<p>I think it's really important to cover the execution model (how futures are scheduled, what happens when you poll them, how they resolve etc.)</p>",
        "id": 168153008,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560531748
    },
    {
        "content": "<p>as well as how the combinators work via delegating to child futures</p>",
        "id": 168153029,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560531770
    },
    {
        "content": "<p>and giving an intuition for how the same principle applies to async/await code</p>",
        "id": 168153044,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560531785
    },
    {
        "content": "<p>I've found that trying to handwave \"it's like javascript except if you don't <code>await</code> it it doesn't do anything\" to not work very well</p>",
        "id": 168153054,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560531809
    },
    {
        "content": "<p>where does that break down?</p>",
        "id": 168153077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531834
    },
    {
        "content": "<p>there're too many holes around e.g. futures all being different types, how they're actually getting run, etc.</p>",
        "id": 168153082,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560531838
    },
    {
        "content": "<p>and that stuff all falls out more naturally if folks understand the structure of the state machines</p>",
        "id": 168153134,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560531861
    },
    {
        "content": "<p>Really interesting.</p>",
        "id": 168153196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531913
    },
    {
        "content": "<p>I could imagine trying to convey some sense of the \"polling\" model</p>",
        "id": 168153221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531935
    },
    {
        "content": "<p>in a more high-level way</p>",
        "id": 168153225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531938
    },
    {
        "content": "<p>You think the current TimerFuture and \"build an executor\" examples are too lengthy?</p>",
        "id": 168153240,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560531961
    },
    {
        "content": "<p>I mean in the end I think it's fine to show the details too</p>",
        "id": 168153281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531965
    },
    {
        "content": "<p>(I haven't read those examples yet)</p>",
        "id": 168153296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531977
    },
    {
        "content": "<blockquote>\n<p>I mean in the end I think it's fine to show the details too</p>\n</blockquote>\n<p>people will definitely want to learn these!</p>",
        "id": 168153302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560531985
    },
    {
        "content": "<p>I just imagine that it'll work better if you come to it</p>",
        "id": 168153315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532002
    },
    {
        "content": "<p>after you've played around a bit with async-await</p>",
        "id": 168153322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532007
    },
    {
        "content": "<p>maybe even being exposed to some of those gaps</p>",
        "id": 168153338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532017
    },
    {
        "content": "<p>my experience has been that people get pretty frustrated trying to write async/await code if they haven't taken the time to understand how futures work</p>",
        "id": 168153356,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560532032
    },
    {
        "content": "<p>it's a pretty leaky abstraction</p>",
        "id": 168153368,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560532041
    },
    {
        "content": "<p>well you definitely have more experience with watching people do that (and doing it!) than I do</p>",
        "id": 168153376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532048
    },
    {
        "content": "<p>though I'd love to have some specific examples (it's hard to do that, I know) of the kinds of things people get confused about</p>",
        "id": 168153407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532077
    },
    {
        "content": "<p>but I could also imagine encouraging patterns that make people less likely to hit rough edges, e.g. boxing everywhere at first</p>",
        "id": 168153447,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560532084
    },
    {
        "content": "<p>I've only written a small amount, so I guess my own experiences are not represenstative</p>",
        "id": 168153462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532095
    },
    {
        "content": "<p>so far I've not really had to know about the model (but of course I also kind of do)</p>",
        "id": 168153467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532103
    },
    {
        "content": "<blockquote>\n<p>but I could also imagine encouraging patterns that make people less likely to hit rough edges, e.g. boxing everywhere at first</p>\n</blockquote>\n<p>yes so .. one thing that <span class=\"user-mention\" data-user-id=\"203289\">@boats</span> brought up was that people might have to know about <code>pin</code> (at present, at least) to use <code>select</code>, or maybe some other combinators</p>",
        "id": 168153496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532139
    },
    {
        "content": "<p>I'd definitely expect boxing as a reasonable starting point</p>",
        "id": 168153509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532151
    },
    {
        "content": "<p>indeed</p>",
        "id": 168153512,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560532152
    },
    {
        "content": "<p><code>select!</code> is unfortunately complex for a number of reasons</p>",
        "id": 168153526,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560532169
    },
    {
        "content": "<p>I feel like the book is a good .. way for us to help understand the overall \"ergonomic picture\"</p>",
        "id": 168153574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532202
    },
    {
        "content": "<p>Btw, cc <span class=\"user-mention\" data-user-id=\"215333\">@Florian Gilcher</span> -- who was it you were saying we should talk to re: async-book?</p>",
        "id": 168153615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532212
    },
    {
        "content": "<blockquote>\n<p>a good way for us to understand the overall ergonomic picture</p>\n</blockquote>",
        "id": 168153802,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560532332
    },
    {
        "content": "<p>ps I'm going to merge <a href=\"https://github.com/rust-lang/async-book/issues/18\" target=\"_blank\" title=\"https://github.com/rust-lang/async-book/issues/18\">async-book#18</a> .. seems good?</p>",
        "id": 168153850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560532370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> works for me (cc <span class=\"user-mention\" data-user-id=\"211722\">@Yoshua Wuyts</span> )</p>",
        "id": 168153893,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560532396
    },
    {
        "content": "<p>it's gonna be annoying having to update all those line numbers every time we make a change ;)<br>\nIt'll be a good incentive to keep examples small and in their own crates :)</p>",
        "id": 168153932,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560532440
    },
    {
        "content": "<blockquote>\n<p>a good way for us to understand the overall ergonomic picture</p>\n</blockquote>\n<p>yeah, I'm going to expand on some of the later sections, and I'm hoping that will help add some clarity around where some of the unavoidable ergonomic burdens are</p>",
        "id": 168154030,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560532515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> to start I'm going to open a PR with a more minimal version of my proposal =)</p>",
        "id": 168159243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560536602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> maybe it would be good to describe the execution model in a pictorial form?</p>",
        "id": 168168953,
        "sender_full_name": "centril",
        "timestamp": 1560543969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> sounds good</p>",
        "id": 168174747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549341
    },
    {
        "content": "<p>I feel like there should be some way to explain the model without (e.g.) talking about <code>Waker</code></p>",
        "id": 168174759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549355
    },
    {
        "content": "<p>but I'm not sure :)</p>",
        "id": 168174804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549368
    },
    {
        "content": "<p>I'd still like to better understand what kind of unexpected leaks occur</p>",
        "id": 168174823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560549381
    },
    {
        "content": "<blockquote>\n<p>I'd still like to better understand what kind of unexpected leaks occur</p>\n</blockquote>\n<p>Is there a reason you expect unexpected leaks?</p>",
        "id": 168326903,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560790067
    },
    {
        "content": "<p>oh, \"leaks\" as in the abstraction</p>",
        "id": 168326953,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1560790090
    },
    {
        "content": "<p>right I just mean I want to understand more examples of what kind of confusion arises and what parts of the futures model explanation cleared it up. It seems to me like saying \"futures are lazy, you await them or spawn them\" would cover it, but I believe you when you say it does't</p>",
        "id": 168345331,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560803980
    },
    {
        "content": "<p>For me the confusion or rather lack of documentation is on examples of constructing Streams and whether one can construct a stream from a series (Vec?) of Futures. I think also showing the desugering in the book is a good way to demystify things.</p>",
        "id": 171589471,
        "sender_full_name": "Giles Cope",
        "timestamp": 1563958929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120134\">@Giles Cope</span> what desugaring are you referring to?</p>",
        "id": 173152024,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1565730700
    },
    {
        "content": "<p>Showing how an async call is turned into an impl Future signature. I'm pretty sure your going to cover that though. Now I think my main questions are whether <a href=\"https://github.com/dtolnay/async-trait\" target=\"_blank\" title=\"https://github.com/dtolnay/async-trait\">https://github.com/dtolnay/async-trait</a> or <a href=\"https://github.com/taiki-e/futures-async-stream\" target=\"_blank\" title=\"https://github.com/taiki-e/futures-async-stream\">https://github.com/taiki-e/futures-async-stream</a> or something else is going to be a good stop-gap for creating streams. Would be good to point out the efforts out there.</p>",
        "id": 174246849,
        "sender_full_name": "Giles Cope",
        "timestamp": 1566924059
    },
    {
        "content": "<p>yeah, documenting <code>#[async_trait]</code> in general seems good</p>",
        "id": 174247049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1566924169
    }
]