[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> with <code>-Zmir-opt-level=3</code>, I am seeing an ICE when generating the miri stack trace of one of our compile-fail tests. We get an out-of-bounds access at <a href=\"https://github.com/rust-lang/rust/blob/96064eb61/src/librustc_mir/interpret/eval_context.rs#L718\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/96064eb61/src/librustc_mir/interpret/eval_context.rs#L718\">https://github.com/rust-lang/rust/blob/96064eb61/src/librustc_mir/interpret/eval_context.rs#L718</a>. Is that expected (so we should change that code to return <code>None</code>) or a bug somewhere?</p>",
        "id": 136698001,
        "sender_full_name": "RalfJ",
        "timestamp": 1540810242
    },
    {
        "content": "<p>I've seen this before. If you look at the MIR you see that the MIR is borked post-inlining</p>",
        "id": 136700679,
        "sender_full_name": "oli",
        "timestamp": 1540813825
    },
    {
        "content": "<p>well, just calling <code>rustc</code> on that file works...</p>",
        "id": 136702172,
        "sender_full_name": "RalfJ",
        "timestamp": 1540815814
    },
    {
        "content": "<p>yes it is, but if you do dump-mir and look at the MIR directly after inlining you can see that the <code>source_scope_local_data</code> has fewer elements than referenced by <code>source_info.scope</code> of various statements</p>",
        "id": 136702731,
        "sender_full_name": "oli",
        "timestamp": 1540816566
    },
    {
        "content": "<p>I've not been able to figure out what exactly caused it though</p>",
        "id": 136702743,
        "sender_full_name": "oli",
        "timestamp": 1540816596
    },
    {
        "content": "<p>there's some <code>source_scole_local_data</code> merging going on in inlining, I'd presume the bug is in there</p>",
        "id": 136702755,
        "sender_full_name": "oli",
        "timestamp": 1540816624
    },
    {
        "content": "<p>is there an issue open for this?</p>",
        "id": 136702875,
        "sender_full_name": "RalfJ",
        "timestamp": 1540816790
    },
    {
        "content": "<p>didn't find it, I thought I opened one</p>",
        "id": 136702989,
        "sender_full_name": "oli",
        "timestamp": 1540816905
    },
    {
        "content": "<p>I talked with eddy about it <span class=\"emoji emoji-1f615\" title=\"confused\">:confused:</span></p>",
        "id": 136702991,
        "sender_full_name": "oli",
        "timestamp": 1540816912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> this is what the printed MIR looks like:</p>\n<div class=\"codehilite\"><pre><span></span>fn make_raw() -&gt; *const f32{\n    let mut _0: *const f32;              // return place\n    scope 1 {\n        scope 2 {\n        }\n    }\n\n    bb0: {\n        _0 = const std::intrinsics::uninit() -&gt; bb1; // bb0[0]: scope 2 at /home/r/src/rust/rustc.2/src/libcore/mem.rs:599:5: 599:25\n                                         // ty::Const\n                                         // + ty: unsafe extern &quot;rust-intrinsic&quot; fn() -&gt; *const f32 {std::intrinsics::uninit::&lt;*const f32&gt;}\n                                         // + val: Scalar(Bits { size: 0, bits: 0 })\n                                         // mir::Constant\n                                         // + span: /home/r/src/rust/rustc.2/src/libcore/mem.rs:599:5: 599:23\n                                         // + ty: unsafe extern &quot;rust-intrinsic&quot; fn() -&gt; *const f32 {std::intrinsics::uninit::&lt;*const f32&gt;}\n                                         // + literal: Const { ty: unsafe extern &quot;rust-intrinsic&quot; fn() -&gt; *const f32 {std::intrinsics::uninit::&lt;*const f32&gt;}, val: Scalar(Bits { size: 0, bits: 0 }) }\n    }\n\n    bb1: {\n        Validate(Acquire, [_0: *const f32]); // bb1[0]: scope 2 at /home/r/src/rust/rustc.2/src/libcore/mem.rs:599:5: 599:25\n        Validate(Release, [_0: *const f32]); // bb1[1]: scope 2 at /home/r/src/rust/rustc.2/src/libcore/mem.rs:599:5: 599:25\n        return;                          // bb1[2]: scope 0 at tests/compile-fail/validity/undef.rs:8:2: 8:2\n    }\n}\n</pre></div>",
        "id": 136779933,
        "sender_full_name": "RalfJ",
        "timestamp": 1540909595
    },
    {
        "content": "<p>I cannot see anything wrong with it? but there is a dangling <code>source_scope_local_data</code> it seems</p>",
        "id": 136779984,
        "sender_full_name": "RalfJ",
        "timestamp": 1540909662
    },
    {
        "content": "<p>would be nice, for a bugreport, to find a way to trigger that ICE without involving miri</p>",
        "id": 136780080,
        "sender_full_name": "RalfJ",
        "timestamp": 1540909741
    },
    {
        "content": "<p>maybe a well-placed <code>debug_assert!</code>? But what would be a good place?</p>",
        "id": 136780099,
        "sender_full_name": "RalfJ",
        "timestamp": 1540909756
    },
    {
        "content": "<p>do we have a \"MIR validation\" pass like LLVM has for IR? Feels like this would be perfect for such things</p>",
        "id": 136782734,
        "sender_full_name": "oli",
        "timestamp": 1540912268
    },
    {
        "content": "<p>if you don't know about it, I certainly don't. ;)</p>",
        "id": 136783097,
        "sender_full_name": "RalfJ",
        "timestamp": 1540912600
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> any suggestions? See above.</p>",
        "id": 136783152,
        "sender_full_name": "RalfJ",
        "timestamp": 1540912655
    },
    {
        "content": "<p>The problem is, I can write such a pass easily, but that will basically break mir opt level 3</p>",
        "id": 136783639,
        "sender_full_name": "oli",
        "timestamp": 1540912984
    },
    {
        "content": "<p>maybe make the pass opt-in via a <code>-Z</code> flag for now?</p>",
        "id": 136784593,
        "sender_full_name": "RalfJ",
        "timestamp": 1540913855
    },
    {
        "content": "<p>then we can slowly work towards enabling it per default on debug builds</p>",
        "id": 136784603,
        "sender_full_name": "RalfJ",
        "timestamp": 1540913870
    },
    {
        "content": "<p>(and still have the <code>-Z</code> flag on release builds)</p>",
        "id": 136784608,
        "sender_full_name": "RalfJ",
        "timestamp": 1540913882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> has worked on fixing MIR inlining recently, they might be interested in whatever that pass uncovers</p>",
        "id": 136784670,
        "sender_full_name": "RalfJ",
        "timestamp": 1540913935
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> if you want to have an example of something that gets broken by inlining, here's a simple one:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">make_raw</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">uninitialized</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136784852,
        "sender_full_name": "RalfJ",
        "timestamp": 1540914056
    },
    {
        "content": "<p>the resulting MIR contains a <code>source_scope_local_data</code> referring to locals that do not exist any more</p>",
        "id": 136784874,
        "sender_full_name": "RalfJ",
        "timestamp": 1540914077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I'm not familiar with <code>source_scope_local_data</code>. I'll certainly look into it though. Does that have something to do with debug info?</p>",
        "id": 136785134,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1540914334
    },
    {
        "content": "<p>I do not have the slightest idea :)</p>",
        "id": 136785566,
        "sender_full_name": "RalfJ",
        "timestamp": 1540914678
    },
    {
        "content": "<p>All I know is that miri accesses it when generating a backtrace, and we are getting an out-of-bounds array access at <a href=\"https://github.com/rust-lang/rust/blob/96064eb61dc703c289fae61bdf90593d3e7b2449/src/librustc_mir/interpret/eval_context.rs#L718\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/96064eb61dc703c289fae61bdf90593d3e7b2449/src/librustc_mir/interpret/eval_context.rs#L718\">https://github.com/rust-lang/rust/blob/96064eb61dc703c289fae61bdf90593d3e7b2449/src/librustc_mir/interpret/eval_context.rs#L718</a></p>",
        "id": 136785584,
        "sender_full_name": "RalfJ",
        "timestamp": 1540914707
    },
    {
        "content": "<p>so it seems there is an invariant that <code>source_info.scope</code>, for the <code>source_info</code> one finds in the MIR, is in-bounds for that array. or so.</p>",
        "id": 136785658,
        "sender_full_name": "RalfJ",
        "timestamp": 1540914761
    },
    {
        "content": "<p>Ah ok. Sounds like it might be debug info related then.</p>",
        "id": 136785878,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1540914991
    },
    {
        "content": "<p>(Which doesn't mean I'm not interested, I'm just still trying to sort out the mis compilations so it might be awhile before I get around to fixing that)</p>",
        "id": 136785905,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1540915041
    },
    {
        "content": "<p>sure</p>",
        "id": 136786156,
        "sender_full_name": "RalfJ",
        "timestamp": 1540915242
    }
]