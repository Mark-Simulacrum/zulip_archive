[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0080]: could not evaluate static initializer\n  --&gt; src/lib.rs:53:35\n   |\n25 |         e(0); e(0); e(0); e(0);\n   |                     ---- inside call to `CONST_FN::e::e::e::e` at src/lib.rs:25:21\n26 |         e(0); e(0); e(0); e(0)\n   |               ----  ---- inside call to `CONST_FN::e::e::e` at src/lib.rs:26:21\n   |               |\n   |               inside call to `CONST_FN::e::e` at src/lib.rs:26:15\n...\n32 |         e(0); e(0); e(0); e(0)\n   |         ---- inside call to `CONST_FN::e` at src/lib.rs:32:9\n...\n53 | const fn inc(i: i32) -&gt; i32 { i + 1 }\n   |                                   ^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n...\n58 | expensive_static!(CONST_FN: i32 = inc(42); [8 16 16 16 16]);\n   |                                   ------- inside call to `inc` at src/lib.rs:58:35\n</pre></div>\n\n\n<p>on the perf ctfe-stress-4 benchmark</p>",
        "id": 191651948,
        "sender_full_name": "simulacrum",
        "timestamp": 1585073736
    },
    {
        "content": "<p>Should we bump up the step limit? cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> (?)</p>",
        "id": 191651970,
        "sender_full_name": "simulacrum",
        "timestamp": 1585073753
    },
    {
        "content": "<p>Did this go over the limit recently?</p>",
        "id": 191652035,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585073777
    },
    {
        "content": "<p>uh, yeah, in the past day or two</p>",
        "id": 191652126,
        "sender_full_name": "simulacrum",
        "timestamp": 1585073844
    },
    {
        "content": "<p>I can get exact commit in a moment</p>",
        "id": 191652142,
        "sender_full_name": "simulacrum",
        "timestamp": 1585073856
    },
    {
        "content": "<p>Was it <a href=\"https://github.com/rust-lang/rust/pull/70087\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70087\">https://github.com/rust-lang/rust/pull/70087</a>?</p>",
        "id": 191652163,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585073866
    },
    {
        "content": "<p>broke in <a href=\"https://github.com/rust-lang/rust/commit/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60\">https://github.com/rust-lang/rust/commit/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60</a></p>",
        "id": 191652254,
        "sender_full_name": "simulacrum",
        "timestamp": 1585073898
    },
    {
        "content": "<p>probably that PR?</p>",
        "id": 191652289,
        "sender_full_name": "simulacrum",
        "timestamp": 1585073916
    },
    {
        "content": "<p>Yeah looks that way</p>",
        "id": 191652306,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585073926
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span></p>",
        "id": 191652314,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585073930
    },
    {
        "content": "<p>To answer your question, probably yeah. If <code>ctfe-stress-4</code> is breaking, there's probably other crazy CTFE code out there that's going to break too</p>",
        "id": 191652445,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585073996
    },
    {
        "content": "<p>oh, I meant that as in \"bump the step limit in perf\"</p>",
        "id": 191652518,
        "sender_full_name": "simulacrum",
        "timestamp": 1585074015
    },
    {
        "content": "<p>but bumping it globally seems good</p>",
        "id": 191652530,
        "sender_full_name": "simulacrum",
        "timestamp": 1585074021
    },
    {
        "content": "<p>Ah</p>",
        "id": 191652564,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585074051
    },
    {
        "content": "<p>(can also do both, fwiw)</p>",
        "id": 191652596,
        "sender_full_name": "simulacrum",
        "timestamp": 1585074066
    },
    {
        "content": "<p>I didn't realize we had that option.</p>",
        "id": 191652618,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585074078
    },
    {
        "content": "<p>Bumping it for <code>ctfe-stress-4</code> locally seems like a good first step regardless</p>",
        "id": 191652652,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585074100
    },
    {
        "content": "<p>sure, we can just edit the perf benchmark to include the attribute</p>",
        "id": 191652668,
        "sender_full_name": "simulacrum",
        "timestamp": 1585074110
    },
    {
        "content": "<p>suprisingly the error message does not suggest a limit</p>",
        "id": 191652689,
        "sender_full_name": "simulacrum",
        "timestamp": 1585074119
    },
    {
        "content": "<p>hm, so the limit is unstable</p>",
        "id": 191653207,
        "sender_full_name": "simulacrum",
        "timestamp": 1585074343
    },
    {
        "content": "<p>that seems bad</p>",
        "id": 191653213,
        "sender_full_name": "simulacrum",
        "timestamp": 1585074345
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0658]: the `#[const_eval_limit]` attribute is an experimental feature\n --&gt; src/lib.rs:2:1\n  |\n2 | #![const_eval_limit = &quot;1000000&quot;]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: see issue #67217 &lt;https://github.com/rust-lang/rust/issues/67217&gt; for more information\n  = help: add `#![feature(const_eval_limit)]` to the crate attributes to enable\n</pre></div>",
        "id": 191653222,
        "sender_full_name": "simulacrum",
        "timestamp": 1585074348
    },
    {
        "content": "<p>then we should definitely bump the default up because that suggests that previously working code on stable could regress?</p>",
        "id": 191653294,
        "sender_full_name": "simulacrum",
        "timestamp": 1585074364
    },
    {
        "content": "<p>Ah yeah</p>",
        "id": 191653303,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585074369
    },
    {
        "content": "<p>I think we should get <code>ctfe-stress-4</code> running again asap so adding the feature attribute seems fine to me</p>",
        "id": 191653366,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585074407
    },
    {
        "content": "<p>yeah pushing a fix now</p>",
        "id": 191653387,
        "sender_full_name": "simulacrum",
        "timestamp": 1585074419
    },
    {
        "content": "<p>But we should think about the fallout of this more</p>",
        "id": 191653392,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585074420
    },
    {
        "content": "<p>could you open up an issue or comment somewhere?</p>",
        "id": 191653421,
        "sender_full_name": "simulacrum",
        "timestamp": 1585074432
    },
    {
        "content": "<p>Would re-opening <a href=\"https://github.com/rust-lang/rust/issues/54384\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54384\">https://github.com/rust-lang/rust/issues/54384</a> be appropriate or should I create a new issue?</p>",
        "id": 191653579,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585074515
    },
    {
        "content": "<p>I would open a new issue</p>",
        "id": 191655513,
        "sender_full_name": "simulacrum",
        "timestamp": 1585075462
    },
    {
        "content": "<p>I addressed backwards compatibility issues in the summary of <a href=\"https://github.com/rust-lang/rust/issues/70087\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/70087\">#70087</a>, which also had a crater run with 0 regressions. The fact that <code>ctfe-stress-4</code> broke doesn't change my thinking here, since I believe that the likelihood of real world code going over the limit without loops or conditional recursion (both of which require nightly features) is basically zero.</p>",
        "id": 191659444,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1585077353
    },
    {
        "content": "<p>so the default limit is 1_000_000 (10^6) and this stress test required 10_000_000 (10^7)? That seems reasonable, the test is extremely silly. I wouldn't increase the default limit for that, I'd say this shows the limit was picked quite reasonably.^^</p>",
        "id": 191764025,
        "sender_full_name": "RalfJ",
        "timestamp": 1585150371
    },
    {
        "content": "<p>the risk of increasing the limit is just that we run for longer before emitting a warning though right?</p>",
        "id": 191764958,
        "sender_full_name": "simulacrum",
        "timestamp": 1585150696
    },
    {
        "content": "<p>I dont think there's a warning any more? we just hard error and abort evaluation</p>",
        "id": 191765026,
        "sender_full_name": "RalfJ",
        "timestamp": 1585150719
    },
    {
        "content": "<p>similar to the recursion_limit rustc uses elsewhere</p>",
        "id": 191765047,
        "sender_full_name": "RalfJ",
        "timestamp": 1585150726
    },
    {
        "content": "<p>er, yeah, I meant an error</p>",
        "id": 191765053,
        "sender_full_name": "simulacrum",
        "timestamp": 1585150727
    },
    {
        "content": "<p>so realistically it feels like we should set it such that no program we know of encounters it</p>",
        "id": 191765078,
        "sender_full_name": "simulacrum",
        "timestamp": 1585150736
    },
    {
        "content": "<p>I'd qualify that with \"no <em>reasonable</em> program\", or at least \"no <em>realistic</em> program\"</p>",
        "id": 191765137,
        "sender_full_name": "RalfJ",
        "timestamp": 1585150756
    },
    {
        "content": "<p>maybe that's not the right policy though, not sure</p>",
        "id": 191765139,
        "sender_full_name": "simulacrum",
        "timestamp": 1585150757
    },
    {
        "content": "<p>hm, okay. given the zero regression crater run we're probably fine</p>",
        "id": 191765224,
        "sender_full_name": "simulacrum",
        "timestamp": 1585150786
    },
    {
        "content": "<p>if we set it too high, people will see the compiler hang and not know what's going on... not sure how the team decided about the recursion_limit default value, or about requests to increase it</p>",
        "id": 191765335,
        "sender_full_name": "RalfJ",
        "timestamp": 1585150807
    },
    {
        "content": "<p>I've certainly seen that value increased in the wild</p>",
        "id": 191765360,
        "sender_full_name": "RalfJ",
        "timestamp": 1585150817
    },
    {
        "content": "<p>yeah, me too</p>",
        "id": 191765392,
        "sender_full_name": "simulacrum",
        "timestamp": 1585150831
    },
    {
        "content": "<p>ideally we'd be able to \"know\" apriori that the limit will be reached, but that's obviously not really possible</p>",
        "id": 191765428,
        "sender_full_name": "simulacrum",
        "timestamp": 1585150848
    },
    {
        "content": "<p>;)</p>",
        "id": 191765455,
        "sender_full_name": "RalfJ",
        "timestamp": 1585150858
    },
    {
        "content": "<p>anyway I'm happy with leaving it as is I guess</p>",
        "id": 191765475,
        "sender_full_name": "simulacrum",
        "timestamp": 1585150864
    },
    {
        "content": "<p>kk. and thanks for bringing this up, it's a good data point.</p>",
        "id": 191765526,
        "sender_full_name": "RalfJ",
        "timestamp": 1585150879
    },
    {
        "content": "<p>we'll only really get user data \"in the wild\" once loops are allowed in stable CTFE, I think</p>",
        "id": 191765575,
        "sender_full_name": "RalfJ",
        "timestamp": 1585150895
    },
    {
        "content": "<p>makes sense</p>",
        "id": 191765956,
        "sender_full_name": "simulacrum",
        "timestamp": 1585151027
    },
    {
        "content": "<p>I wonder if we could borrow from what bpf(?) in the kernel did for those loops etc -- IIRC, they managed to ensure that things terminate</p>",
        "id": 191766185,
        "sender_full_name": "simulacrum",
        "timestamp": 1585151086
    },
    {
        "content": "<p>otoh, even if you will eventually terminate but will run for years we probably want to error out</p>",
        "id": 191766282,
        "sender_full_name": "simulacrum",
        "timestamp": 1585151112
    },
    {
        "content": "<p>(e)BPF is... really weird :P</p>",
        "id": 191766466,
        "sender_full_name": "eddyb",
        "timestamp": 1585151170
    },
    {
        "content": "<p>and I don't think it's anything we can replicate anyway</p>",
        "id": 191766511,
        "sender_full_name": "eddyb",
        "timestamp": 1585151187
    },
    {
        "content": "<p>yeah I don't know the details. wouldn't be surprised</p>",
        "id": 191766563,
        "sender_full_name": "simulacrum",
        "timestamp": 1585151206
    },
    {
        "content": "<p>also I think it has arbitrary limits too? so it's not like a principled solution or anything</p>",
        "id": 191766726,
        "sender_full_name": "eddyb",
        "timestamp": 1585151265
    },
    {
        "content": "<p>(dependently typed aka \"proof assistant\" languages are the main example I know of that does enforce termination, but it's nothing we can do for miri, as the problem is the turing-complete unsafe-internals Rust code and we can't realistically enforce <em>it</em> will terminate)</p>",
        "id": 191766960,
        "sender_full_name": "eddyb",
        "timestamp": 1585151347
    },
    {
        "content": "<p>the way you make an interpreter for some TC imperative thing in one of those languages is with \"fuel\", i.e. an instruction limit of sorts</p>",
        "id": 191767215,
        "sender_full_name": "eddyb",
        "timestamp": 1585151420
    },
    {
        "content": "<p>it works because natural numbers are inductive and you can think of it like uhhh <code>5000</code> is a container that has <code>4999</code> inside which has <code>4998</code> all the way down to <code>2</code> containing <code>1</code> containing <code>0</code> and then it bottoms out</p>",
        "id": 191767379,
        "sender_full_name": "eddyb",
        "timestamp": 1585151490
    },
    {
        "content": "<p>so if each step is guaranteed to terminate then doing <code>n: Nat</code> steps is like a list fold, it's <code>n</code> that determines the shape of your execution/termination, <em>not</em> the interpreted code</p>",
        "id": 191767573,
        "sender_full_name": "eddyb",
        "timestamp": 1585151552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/perf.20stress.20test.20broken/near/191766960\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/perf.20stress.20test.20broken/near/191766960\">said</a>:</p>\n<blockquote>\n<p>(dependently typed aka \"proof assistant\" languages are the main example I know of that does enforce termination, but it's nothing we can do for miri, as the problem is the turing-complete unsafe-internals Rust code and we can't realistically enforce <em>it</em> will terminate)</p>\n</blockquote>\n<p>it's also not really better than an arbitrary limit, in practice. I can easily write a Coq program that terminates, but not in your lifetime.</p>",
        "id": 191852006,
        "sender_full_name": "RalfJ",
        "timestamp": 1585211695
    }
]