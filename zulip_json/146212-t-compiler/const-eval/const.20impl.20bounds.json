[
    {
        "content": "<p>Hello :)</p>\n<p>I'm playing with the const generics features on nightly, and am not sure about the syntax. This:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub trait A&lt;T&gt; { fn a(self) -&gt; T; }\npub trait B&lt;T&gt; { fn b(T) -&gt; Self; }\n\nimpl&lt;T, U: B&lt;T&gt;&gt; const A&lt;U&gt; for T { fn a(self) -&gt; U { B::b(self) } }\n</code></pre></div>\n<p>fails. The error suggests that B::b  is not a const function. Is there a way to provide this impl only when that is the case?</p>",
        "id": 231075763,
        "sender_full_name": "Hannah E",
        "timestamp": 1616181233
    },
    {
        "content": "<p>Sorry if I messed it up, its my first time asking here. I've tried it in the playground, and it also fails there: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a29cdfaa66257a40bc67043fe3f01741\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=a29cdfaa66257a40bc67043fe3f01741</a></p>",
        "id": 231075863,
        "sender_full_name": "Hannah E",
        "timestamp": 1616181273
    },
    {
        "content": "<p>Is there maybe a channel for beginner questions here?</p>",
        "id": 231075912,
        "sender_full_name": "Hannah E",
        "timestamp": 1616181297
    },
    {
        "content": "<p><code>impl const Trait</code> is a different feature from const generics, what exactly are you trying to do?</p>",
        "id": 231076288,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616181466
    },
    {
        "content": "<p>I want to provide that trait impl of <code>const A&lt;U&gt; for T</code></p>",
        "id": 231076422,
        "sender_full_name": "Hannah E",
        "timestamp": 1616181521
    },
    {
        "content": "<p><code>A</code> and <code>B</code> are like <code>From</code> and <code>Into</code>. I really like that I can provide <code>const From</code> impls for my types, but I always forget that then I can only use <code>From::from</code> in <code>const</code> functions, and that <code>.into()</code> does not work because the blanket impls of it for types that implement <code>From</code> are not <code>const</code> :(</p>",
        "id": 231076592,
        "sender_full_name": "Hannah E",
        "timestamp": 1616181603
    },
    {
        "content": "<p>I tried to provide a specialization of  the blanket <code>Into</code> impl but unfortunately the one in <code>std</code> is not <code>default</code> :(</p>",
        "id": 231076665,
        "sender_full_name": "Hannah E",
        "timestamp": 1616181641
    },
    {
        "content": "<p>hmm, not sure why this doesn't work, I believe it is intended to work though</p>",
        "id": 231076754,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616181679
    },
    {
        "content": "<p>we're pretty far away from marking impls as <code>const</code> in libstd, the feature is still very experimental</p>",
        "id": 231076805,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616181714
    },
    {
        "content": "<p>When using bounds in const functions, the impls are automatically required to be const. Maybe that is different for trait impls?</p>",
        "id": 231076897,
        "sender_full_name": "Hannah E",
        "timestamp": 1616181744
    },
    {
        "content": "<p>could be, yeah</p>",
        "id": 231076988,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616181790
    },
    {
        "content": "<p>I tried <code>impl&lt;T, U: const B&lt;T&gt;&gt; const A&lt;U&gt;...</code> but <code>U: const B&lt;T&gt;</code> is not allowed. From reading the docs it does not appear necessary.</p>",
        "id": 231076995,
        "sender_full_name": "Hannah E",
        "timestamp": 1616181793
    },
    {
        "content": "<p>yeah, the intention is that all bounds have to be const when something is used from a const context unless you opt out with <code>?const</code></p>",
        "id": 231077081,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616181837
    },
    {
        "content": "<p>For functions at least, if one doesn't want to require a <code>const impl</code> in the bounds, one needs to write <code>U: ?const B&lt;T&gt;</code></p>",
        "id": 231077139,
        "sender_full_name": "Hannah E",
        "timestamp": 1616181852
    },
    {
        "content": "<p>yeah exactly, I think this is supposed to work the same on impls</p>",
        "id": 231077199,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616181880
    },
    {
        "content": "<p>but it might not</p>",
        "id": 231077219,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616181891
    },
    {
        "content": "<p>I hope I am not doing something wrong.<br>\nI've tried to find a workaround, but all my ideas were bad.</p>",
        "id": 231077304,
        "sender_full_name": "Hannah E",
        "timestamp": 1616181937
    },
    {
        "content": "<p>we should probably give more information when that error occurs, this could help narrow down the issue</p>",
        "id": 231077523,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616182049
    },
    {
        "content": "<p>Is there another place I could ask for help ?</p>",
        "id": 231077777,
        "sender_full_name": "Hannah E",
        "timestamp": 1616182194
    },
    {
        "content": "<p>maybe over at <a class=\"stream\" data-stream-id=\"146212\" href=\"/#narrow/stream/146212-t-compiler.2Fconst-eval\">#t-compiler/const-eval</a> someone more familiar with how this is supposed to work can help</p>",
        "id": 231081543,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1616183977
    },
    {
        "content": "<p>Hello :) I have a question about const impl bounds. Is it possible to move this thread <a href=\"#narrow/stream/122651-general/topic/const.20impl.20bounds\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/const.20impl.20bounds</a> to this stream?</p>",
        "id": 231082934,
        "sender_full_name": "Hannah E",
        "timestamp": 1616184616
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"122651\" href=\"/#narrow/stream/122651-general/topic/const.20impl.20bounds\">#general &gt; const impl bounds</a> by <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span></p>",
        "id": 231144667,
        "sender_full_name": "Notification Bot",
        "timestamp": 1616244804
    },
    {
        "content": "<p>yea, this should compile, looks like \"just an oversight\" in the appropriate logic. Here's a minimized version:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">a</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">b</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nc\">B</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">a</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">U</span>::<span class=\"n\">b</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 231145036,
        "sender_full_name": "oli",
        "timestamp": 1616245241
    },
    {
        "content": "<p>If you want, you can open an issue about it and create a PR that adds this test to our test suite as a failure test so we'll fix it in the future</p>",
        "id": 231145080,
        "sender_full_name": "oli",
        "timestamp": 1616245293
    }
]