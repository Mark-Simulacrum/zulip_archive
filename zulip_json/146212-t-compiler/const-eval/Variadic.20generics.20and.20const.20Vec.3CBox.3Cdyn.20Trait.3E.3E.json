[
    {
        "content": "<p>I just had an idea that most (all?) things that can be done with variadic generics can probably be done with <code>const Vec&lt;Box&lt;dyn Trait&gt;&gt;</code>. I define “can be done” as the same compile-time optimisation opportunities, rather than the end API. At their core they’re just (slightly different) ways of expressing compile-time collections that are somewhat dynamic. Is this a thought someone else has had before me, has it already been considered? </p>\n<p>Or am I just completely off my rocker and there’s a simple counter-example I’m not thinking of?</p>",
        "id": 276787431,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1648386238
    },
    {
        "content": "<p>dyn Trait in const generics is going to be interesting. It technically has the same issues as function pointers</p>",
        "id": 276805470,
        "sender_full_name": "oli",
        "timestamp": 1648412034
    },
    {
        "content": "<p>Like... it's not structural match currently, but it could be a valtree I think.</p>",
        "id": 276805524,
        "sender_full_name": "oli",
        "timestamp": 1648412084
    },
    {
        "content": "<p>If you're going to use <code>dyn Trait</code>, you might as well pass them as runtime arguments. The vtables can probably be bypassed with enough inlining.</p>",
        "id": 276850231,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648461372
    },
    {
        "content": "<p>The main drawback is that you're limited to dyn-safe traits. Eg serde's current Serialize and Deserialize traits couldn't be passed that way.</p>",
        "id": 276850392,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648461446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Variadic.20generics.20and.20const.20Vec.3CBox.3Cdyn.20Trait.3E.3E/near/276850231\">said</a>:</p>\n<blockquote>\n<p>If you're going to use <code>dyn Trait</code>, you might as well pass them as runtime arguments. The vtables can probably be bypassed with enough inlining.</p>\n</blockquote>\n<p>I think the argument is that we can do various operations at compile-time that avoid the dynamicness at runtime</p>",
        "id": 276862619,
        "sender_full_name": "oli",
        "timestamp": 1648469159
    },
    {
        "content": "<p>The Limitation I see of Enums and structural matching is that it’s not extendable by other crates.</p>",
        "id": 276874243,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1648474748
    },
    {
        "content": "<p>Also I tried a simple example of adding things to a Vec via dyn, it was a 4x performance slowdown.</p>",
        "id": 276874364,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1648474803
    }
]