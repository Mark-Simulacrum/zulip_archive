[
    {
        "content": "<p>I am experimenting with the const_trait_impl feature. However, I often run into the problem that standard library traits (e.g. Add, Sub, PartialEq) are not const yet. My current workaround is to patch the standard library and compile rustc myself.  Making these traits const (behind a feature flag) seems relatively straightforward, so I was wondering if anyone is working on this already. An example of some code that would be possible if PartialEq would be const: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=5c25a165af4a4001c23ac704ed65ebdf\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=5c25a165af4a4001c23ac704ed65ebdf</a></p>",
        "id": 247491854,
        "sender_full_name": "chocolate",
        "timestamp": 1627494215
    },
    {
        "content": "<p>as long as they are made unstably const, we can add them. You should coordinate with <span class=\"user-mention\" data-user-id=\"361356\">@fee1-dead</span> though</p>",
        "id": 247496944,
        "sender_full_name": "oli",
        "timestamp": 1627496441
    },
    {
        "content": "<p>I'm all for that but we need to wait for team decision on <a href=\"https://github.com/rust-lang/rust/issues/86808\">#86808</a> and we also need to wait for the next beta release.</p>",
        "id": 247540867,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627529022
    },
    {
        "content": "<p>OK understood. If you need any help in the future let me know.</p>",
        "id": 247564152,
        "sender_full_name": "chocolate",
        "timestamp": 1627553025
    }
]