[
    {
        "content": "<p>I was playing around with const generics and I tried making a recursive type that was recursive over a const parameter. This should work, so long as there was a way to specialize for a base case. <br>\nAs an example, I think this would work for an enum to represent a buddy allocator</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Block</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">Level</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Allocated</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Free</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Split</span><span class=\"p\">(</span><span class=\"n\">Block</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Level</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Block</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Level</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Block</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Allocated</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Free</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I think this would work as it has a fully known size, and so it shouldn't need a pointer type for the recursion, which is quite useful for embedded stuff.</p>",
        "id": 188345556,
        "sender_full_name": "Zachary Freed",
        "timestamp": 1581899610
    },
    {
        "content": "<p>I think having GADTs would also allow this?</p>",
        "id": 188421020,
        "sender_full_name": "Zachary Freed",
        "timestamp": 1581996016
    },
    {
        "content": "<p>I think having GADTs would also allow this?</p>",
        "id": 188429800,
        "sender_full_name": "Zachary Freed",
        "timestamp": 1582012120
    }
]