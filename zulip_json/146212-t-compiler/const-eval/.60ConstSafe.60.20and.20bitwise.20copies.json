[
    {
        "content": "<p><code>ConstSafe</code> and <code>ConstRefSafe</code> seem to be the framework we're planning to use to enable heap allocation in constants. Am I correct in saying that <code>ConstSafe</code> is a requirement on types? And does <code>ConstSafe</code> imply that something is bitwise copyable?</p>",
        "id": 179958556,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572977029
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">V</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">V</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This code will compile on 1.39 stable, but obviously not all <code>Vec</code>s are <code>ConstSafe</code>, just the one returned from <code>Vec::new</code></p>",
        "id": 179958716,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572977128
    },
    {
        "content": "<p>How do we differentiate <code>Box::new(1)</code> from <code>Vec::new()</code> when both would be <code>const fn</code> under most proposals for heap allocation in consts? We still want to be able to do <code>const B: &amp;Box&lt;i32&gt; = &amp;Box::new(1);</code> after all.</p>",
        "id": 179958820,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572977202
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 179958852,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572977223
    },
    {
        "content": "<p>Do we need an additional effect here? i.e.<code> const(ref) fn new(x: T) -&gt; Box&lt;T&gt;</code></p>",
        "id": 179959089,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572977377
    },
    {
        "content": "<p>uh... maybe we were a bit too quick to stabilize <code>Vec::new</code> as a <code>const fn</code>? Cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 179966743,
        "sender_full_name": "RalfJ",
        "timestamp": 1572981637
    },
    {
        "content": "<p>I think this became a problem as soon as we allowed types with custom <code>Drop</code> impls to be returned from a <code>const fn</code> while allowing <code>Drop</code> types in the final value of a <code>const</code>. Users can write stable <code>const</code> constructors for their own <code>Vec</code>-like container types today.</p>",
        "id": 179967459,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572982072
    },
    {
        "content": "<p>I dont see a relation to <code>Drop</code> here TBH?</p>",
        "id": 179967889,
        "sender_full_name": "RalfJ",
        "timestamp": 1572982281
    },
    {
        "content": "<p>one could have a silly <code>Vec</code> with heap allocations that doesnt drop</p>",
        "id": 179967925,
        "sender_full_name": "RalfJ",
        "timestamp": 1572982301
    },
    {
        "content": "<p>Uh yeah, I guess I really mean non-<code>Copy</code>?</p>",
        "id": 179967936,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572982309
    },
    {
        "content": "<p>I mean for <code>Copy</code> types its trivial that we can bit-copy them^^</p>",
        "id": 179968040,
        "sender_full_name": "RalfJ",
        "timestamp": 1572982364
    },
    {
        "content": "<p><code>NeedsDrop</code> is what's talked about in <code>qualify_consts</code></p>",
        "id": 179968072,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572982390
    },
    {
        "content": "<p>I thought thats for other purposes?</p>",
        "id": 179968091,
        "sender_full_name": "RalfJ",
        "timestamp": 1572982413
    },
    {
        "content": "<p>it (a) protects against calling non-const-drop impls during const eval, and (b) affects promotion</p>",
        "id": 179968113,
        "sender_full_name": "RalfJ",
        "timestamp": 1572982429
    },
    {
        "content": "<p>but the final value of a const is explicitly <em>exempt</em> from it</p>",
        "id": 179968126,
        "sender_full_name": "RalfJ",
        "timestamp": 1572982437
    },
    {
        "content": "<p>Basically, by writing <code>const fn</code>, you are implicitly stating that the returned value is bitwise copyable, even if the returned type is not <code>Copy</code>.</p>",
        "id": 179968467,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572982603
    },
    {
        "content": "<p>Well, even by constructing something in a <code>const</code> at all. E.g., if I have a <code>Fd(u32)</code> that closes a file descriptor when dropped (and thus can't be copy) and I put it in a <code>const</code>, bad things will happen.</p>",
        "id": 179968881,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572982859
    },
    {
        "content": "<p>well in a const you cant open a file to get a file descriptor^^</p>",
        "id": 179969428,
        "sender_full_name": "RalfJ",
        "timestamp": 1572983175
    },
    {
        "content": "<p>Right, my point is that being in a <code>const</code> allows you to bitwise copy things that are not <code>Copy</code>. While this is fine for now, it means we would need additional machinery to enable things that are <strong>really</strong> not <code>Copy</code> in a const context. We can't just reuse <code>const fn</code> for this.</p>",
        "id": 179969635,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572983315
    },
    {
        "content": "<p>Alternatively, we could do less bitwise copying of <code>const</code>s, and have it really act like you copy-pasted the initializer into your code. Like you, I  think those semantics may be unworkable, but it should be discussed at least.</p>",
        "id": 179969907,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572983506
    },
    {
        "content": "<p>How would my idea work inside a loop for example? <code>loop { x = CONST_BOX; }</code></p>",
        "id": 179970170,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572983652
    },
    {
        "content": "<p>(it doesn't XD)</p>",
        "id": 179970216,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572983681
    },
    {
        "content": "<p>^^</p>",
        "id": 179970303,
        "sender_full_name": "RalfJ",
        "timestamp": 1572983741
    },
    {
        "content": "<p>Well I mean, we could make it do something, but like you said, nothing about it would be const</p>",
        "id": 179970385,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572983788
    },
    {
        "content": "<p>well, the plan might be to first inspect the final value of the constant, and only if that contains any heap pointers <code>ConstSafe</code> becomes relevant</p>",
        "id": 179971570,
        "sender_full_name": "RalfJ",
        "timestamp": 1572984530
    },
    {
        "content": "<p>with <code>const</code> changing the value of the constant already is semver-breaking anyway as there could be arbitrary compile-time dependencies</p>",
        "id": 179971627,
        "sender_full_name": "RalfJ",
        "timestamp": 1572984573
    },
    {
        "content": "<p>Delaying all <code>ConstSafe</code> errors until MIRI is run seems ungreat to me. Also this means generic consts can be <code>ConstSafe</code> for some <code>T</code> but not others? I think being explicit is better here.</p>",
        "id": 179972333,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572984994
    },
    {
        "content": "<p>well it's kind of too late for an entirely type-based solution, it seems...</p>",
        "id": 179974808,
        "sender_full_name": "RalfJ",
        "timestamp": 1572986354
    },
    {
        "content": "<p>Like I said, I think we would need an effect, a modifier on top of <code>const</code> that says \"this code can execute at compile time, but its result is not necessarily bitwise copyable\". If we don't wish to (edit) detect this in the interpreter.</p>",
        "id": 179975236,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572986588
    },
    {
        "content": "<blockquote>\n<p>well, the plan might be to first inspect the final value of the constant, and only if that contains any heap pointers <code>ConstSafe</code> becomes relevant</p>\n</blockquote>\n<p>as <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> noted on the const heap issue that won't work for associated constants or other generic situtations. Maybe we need to explore the exposed-const-fn-bodies strategy again by bubbling up information like whether it allocates or not</p>",
        "id": 180012229,
        "sender_full_name": "oli",
        "timestamp": 1573029893
    },
    {
        "content": "<blockquote>\n<p>Like I said, I think we would need an effect, a modifier on top of <code>const</code> that says \"this code can execute at compile time, but its result is not necessarily bitwise copyable\". If we don't wish to (edit) detect this in the interpreter.</p>\n</blockquote>\n<p>We can automatically determine if the result is bitwise copyable once we have a concrete const value, though</p>",
        "id": 180018306,
        "sender_full_name": "RalfJ",
        "timestamp": 1573035710
    },
    {
        "content": "<blockquote>\n<p>as @eddyb noted on the const heap issue that won't work for associated constants or other generic situtations. Maybe we need to explore the exposed-const-fn-bodies strategy again by bubbling up information like whether it allocates or not</p>\n</blockquote>\n<p>Then we'll just have to be conservative. Though I am not sure how.</p>",
        "id": 180018360,
        "sender_full_name": "RalfJ",
        "timestamp": 1573035732
    },
    {
        "content": "<p>Right, we can just go for a post monomorphization error, but we don't want to unless we really have to</p>",
        "id": 180018510,
        "sender_full_name": "oli",
        "timestamp": 1573035887
    },
    {
        "content": "<p>So just to be sure I got it, the current proposal is that the final value of a <code>const</code> must be either free of heap ptrs (or even free of ptrs that point to not-yet-interned memory?), or their type must be<code>ConstSafe</code>. Is that right? Is that allowing strictly more than we do right now?</p>",
        "id": 180018696,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036069
    },
    {
        "content": "<p>hm, consts can point to not yet-interned memory right now I think, with things like <code>const FOO: &amp;Vec&lt;i32&gt; = &amp;Vec::new();</code>.  This is not promotion.</p>",
        "id": 180018785,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036141
    },
    {
        "content": "<p>free of heap pointers is the only condition</p>",
        "id": 180018925,
        "sender_full_name": "oli",
        "timestamp": 1573036291
    },
    {
        "content": "<p>this is the \"enclosing scope\" stuff</p>",
        "id": 180018926,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036291
    },
    {
        "content": "<p>I wonder if we can backpadel on that for consts...</p>",
        "id": 180018931,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036301
    },
    {
        "content": "<p>not-yet-interned memory does not exist</p>",
        "id": 180018933,
        "sender_full_name": "oli",
        "timestamp": 1573036306
    },
    {
        "content": "<blockquote>\n<p>not-yet-interned memory does not exist</p>\n</blockquote>\n<p>hu?</p>",
        "id": 180018938,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036320
    },
    {
        "content": "<p>well, it isn't checked at least</p>",
        "id": 180018982,
        "sender_full_name": "oli",
        "timestamp": 1573036329
    },
    {
        "content": "<p>we intern everything that is referenced, but there may be dangling pointers, so we error on these</p>",
        "id": 180018998,
        "sender_full_name": "oli",
        "timestamp": 1573036350
    },
    {
        "content": "<p>but everything that is not dangling is interned</p>",
        "id": 180019000,
        "sender_full_name": "oli",
        "timestamp": 1573036356
    },
    {
        "content": "<p>right but in a const it's actually hard to reference anything</p>",
        "id": 180019005,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036365
    },
    {
        "content": "<p>right</p>",
        "id": 180019007,
        "sender_full_name": "oli",
        "timestamp": 1573036372
    },
    {
        "content": "<p>at least assuming <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> goes through with changing promotion in consts to do \"MIR extraction\" like it does in runtime contexts</p>",
        "id": 180019016,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036389
    },
    {
        "content": "<p>anyway, that seems orthogonal</p>",
        "id": 180019020,
        "sender_full_name": "oli",
        "timestamp": 1573036398
    },
    {
        "content": "<p>then the only remaining way to do that is to use the \"enclosing scope\" rule, I think. so if we could somehow move into a place where consts never contain any not-yet-interned pointers (or else we error), that would be good. it would make the heap story much easier, anyway.</p>",
        "id": 180019031,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036426
    },
    {
        "content": "<p>the only problem with that proposal is that it has post monomorphization errors just like if you do <code>0 - T::ASSOC_CONST</code> it may error post monomorphization</p>",
        "id": 180019087,
        "sender_full_name": "oli",
        "timestamp": 1573036456
    },
    {
        "content": "<p>how would that make the heap story easier?</p>",
        "id": 180019125,
        "sender_full_name": "oli",
        "timestamp": 1573036478
    },
    {
        "content": "<p>we'd know that all currently defined <code>const</code> are good</p>",
        "id": 180019138,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036500
    },
    {
        "content": "<p>the problem with the proposed check is that if we define a const using some generic const, we cannot check if the return value contains any heap ptrs</p>",
        "id": 180019165,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036543
    },
    {
        "content": "<p>I don't know how that could be done without significant overcommitting to the interned memory</p>",
        "id": 180019167,
        "sender_full_name": "oli",
        "timestamp": 1573036544
    },
    {
        "content": "<p>so we have to demand <code>ConstSafe</code></p>",
        "id": 180019171,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036549
    },
    {
        "content": "<p><code>const FOO: () = { let x = &42; };</code> should not intern</p>",
        "id": 180019221,
        "sender_full_name": "oli",
        "timestamp": 1573036567
    },
    {
        "content": "<blockquote>\n<p><code>const FOO: () = { let x = &42; };</code> should not intern</p>\n</blockquote>\n<p>we do intern for dead run-time code, what is worse about dead compile-time code?</p>",
        "id": 180019245,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036598
    },
    {
        "content": "<p>if we eagerly intern, that would happen though</p>",
        "id": 180019250,
        "sender_full_name": "oli",
        "timestamp": 1573036599
    },
    {
        "content": "<p>hmm...</p>",
        "id": 180019262,
        "sender_full_name": "oli",
        "timestamp": 1573036615
    },
    {
        "content": "<p>the problem is less about \"dead\" and more about \"not referenced by final constant\"</p>",
        "id": 180019293,
        "sender_full_name": "oli",
        "timestamp": 1573036642
    },
    {
        "content": "<p>vs \"not referenced by remaining code\", for the run-time case. seems symmetric to me.</p>",
        "id": 180019312,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036669
    },
    {
        "content": "<p>ok, so assuming overcommit is fine. how do we know when to intern?</p>",
        "id": 180019395,
        "sender_full_name": "oli",
        "timestamp": 1573036732
    },
    {
        "content": "<p>but I think you are right that it doesn't really help... we cannot just start demanding <code>ConstSafe</code> on opaque consts as we already allow using them without any such bound</p>",
        "id": 180019396,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036732
    },
    {
        "content": "<p>yea, that's the problem with the generic situation and it was a problem at 1.0</p>",
        "id": 180019421,
        "sender_full_name": "oli",
        "timestamp": 1573036771
    },
    {
        "content": "<p>yeah</p>",
        "id": 180019504,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036826
    },
    {
        "content": "<p>we could treat generic constants as <code>!ConstRefSafe</code>, but that won't help for the value of the constant</p>",
        "id": 180019511,
        "sender_full_name": "oli",
        "timestamp": 1573036830
    },
    {
        "content": "<p>oh, no we can't do that either</p>",
        "id": 180019526,
        "sender_full_name": "oli",
        "timestamp": 1573036844
    },
    {
        "content": "<p>that's not backcompat though?</p>",
        "id": 180019531,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036847
    },
    {
        "content": "<p>yea I just realized that, too</p>",
        "id": 180019534,
        "sender_full_name": "oli",
        "timestamp": 1573036855
    },
    {
        "content": "<p>basically we need a new flag similar to the cell checks</p>",
        "id": 180019556,
        "sender_full_name": "oli",
        "timestamp": 1573036890
    },
    {
        "content": "<p>but even if we could break everything, what would we even do? it looks like you basically want all generic and assoc consts to be <code>ConstSafe</code></p>",
        "id": 180019562,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036899
    },
    {
        "content": "<p>but it also needs to look at function bodies :D</p>",
        "id": 180019563,
        "sender_full_name": "oli",
        "timestamp": 1573036900
    },
    {
        "content": "<p>that's a severe restriction for their usefulnes</p>",
        "id": 180019564,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036907
    },
    {
        "content": "<blockquote>\n<p>but it also needs to look at function bodies :D</p>\n</blockquote>\n<p>I hope you mean \"return value\", we should never inspect the <em>code</em></p>",
        "id": 180019573,
        "sender_full_name": "RalfJ",
        "timestamp": 1573036919
    },
    {
        "content": "<p>well... we have precedent for that in terms of <code>Send</code> and <code>Sync</code> marker traits</p>",
        "id": 180019634,
        "sender_full_name": "oli",
        "timestamp": 1573036962
    },
    {
        "content": "<p>except that noone ever did something like that for functions</p>",
        "id": 180019646,
        "sender_full_name": "oli",
        "timestamp": 1573036976
    },
    {
        "content": "<p>only types</p>",
        "id": 180019647,
        "sender_full_name": "oli",
        "timestamp": 1573036978
    },
    {
        "content": "<p>so you want to basically infer \"returns const safe\" for functions? might as well infer <code>const fn</code> then. :P</p>",
        "id": 180019683,
        "sender_full_name": "RalfJ",
        "timestamp": 1573037022
    },
    {
        "content": "<p>but even so... that would still be overly restrictive, so we don't want that</p>",
        "id": 180019699,
        "sender_full_name": "oli",
        "timestamp": 1573037035
    },
    {
        "content": "<p>I'm still for the post-monomorphization-errors if they occur rarely</p>",
        "id": 180019752,
        "sender_full_name": "oli",
        "timestamp": 1573037059
    },
    {
        "content": "<p>well we don't know how rare they will be</p>",
        "id": 180019810,
        "sender_full_name": "RalfJ",
        "timestamp": 1573037116
    },
    {
        "content": "<p>maybe <code>Box::new</code> cannot be a <code>const fn</code> after all, just a <code>const(heap) fn</code>...</p>",
        "id": 180019890,
        "sender_full_name": "RalfJ",
        "timestamp": 1573037183
    },
    {
        "content": "<p>that won't help, because then <code>Vec::push</code> will also be <code>const (heap)</code> and a function using <code>Vec::push</code>, even if not putting that thing into its return value will also be <code>const (heap)</code> even if it doesn't need to be</p>",
        "id": 180019934,
        "sender_full_name": "oli",
        "timestamp": 1573037234
    },
    {
        "content": "<p>and values into which <code>const(heap)</code> computations flow may only be used as \"full\" <code>const</code> values of their type is <code>ConstSafe</code></p>",
        "id": 180019948,
        "sender_full_name": "RalfJ",
        "timestamp": 1573037248
    },
    {
        "content": "<p>like, <code>ConstSafe</code> is the thing that \"masks\" the <code>heap</code> effect</p>",
        "id": 180019959,
        "sender_full_name": "RalfJ",
        "timestamp": 1573037257
    },
    {
        "content": "<p>you'll need to look at function bodies to figure out <code>const (heap)</code></p>",
        "id": 180019973,
        "sender_full_name": "oli",
        "timestamp": 1573037278
    },
    {
        "content": "<p>how is that proposal different from mine?</p>",
        "id": 180020027,
        "sender_full_name": "oli",
        "timestamp": 1573037289
    },
    {
        "content": "<p>functions need to set it</p>",
        "id": 180020029,
        "sender_full_name": "RalfJ",
        "timestamp": 1573037292
    },
    {
        "content": "<p>it's explicit, not inferred</p>",
        "id": 180020033,
        "sender_full_name": "RalfJ",
        "timestamp": 1573037298
    },
    {
        "content": "<p>even if we end up inferring things I think it is good to start with the explicit calculus and work out its rules^^</p>",
        "id": 180020063,
        "sender_full_name": "RalfJ",
        "timestamp": 1573037344
    },
    {
        "content": "<p>hm</p>",
        "id": 180020065,
        "sender_full_name": "oli",
        "timestamp": 1573037346
    },
    {
        "content": "<p>but anyway, first consts should be able to call generic fns before we take on another big project^^</p>",
        "id": 180020198,
        "sender_full_name": "RalfJ",
        "timestamp": 1573037431
    },
    {
        "content": "<p>it seems like <code>Vec::new</code> doesnt make anything worse, so there is no emergency here</p>",
        "id": 180020219,
        "sender_full_name": "RalfJ",
        "timestamp": 1573037447
    },
    {
        "content": "<p>ok this seems nice... it's opt-in, just like if everything were <code>const</code> and we'd have <code>notconst</code> functions</p>",
        "id": 180020227,
        "sender_full_name": "oli",
        "timestamp": 1573037457
    },
    {
        "content": "<p>yea, users can already do that for their own types</p>",
        "id": 180020245,
        "sender_full_name": "oli",
        "timestamp": 1573037468
    },
    {
        "content": "<p><code>Vec::new</code> just does it for a libstd type</p>",
        "id": 180020261,
        "sender_full_name": "oli",
        "timestamp": 1573037481
    },
    {
        "content": "<p>yeah</p>",
        "id": 180020270,
        "sender_full_name": "RalfJ",
        "timestamp": 1573037489
    },
    {
        "content": "<p>I summarized this at <a href=\"https://github.com/rust-lang/const-eval/issues/20#issuecomment-550260232\" target=\"_blank\" title=\"https://github.com/rust-lang/const-eval/issues/20#issuecomment-550260232\">https://github.com/rust-lang/const-eval/issues/20#issuecomment-550260232</a></p>",
        "id": 180021400,
        "sender_full_name": "RalfJ",
        "timestamp": 1573038344
    },
    {
        "content": "<p>though \"effect\" seems like a wrong term to me now, this is purely a property of the return value, not the computation</p>",
        "id": 180021407,
        "sender_full_name": "RalfJ",
        "timestamp": 1573038357
    },
    {
        "content": "<p>it's more like \"refinement types\"</p>",
        "id": 180021473,
        "sender_full_name": "RalfJ",
        "timestamp": 1573038382
    },
    {
        "content": "<p><code>Vec::new()</code> returns a \"<code>Vec</code> that is <code>ConstSafe</code>\" (even though the type in general is not)</p>",
        "id": 180021498,
        "sender_full_name": "RalfJ",
        "timestamp": 1573038402
    },
    {
        "content": "<p>while <code>Box::new(0)</code> makes no such extra statement</p>",
        "id": 180021509,
        "sender_full_name": "RalfJ",
        "timestamp": 1573038412
    },
    {
        "content": "<blockquote>\n<p>at least assuming <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> goes through with changing promotion in consts to do \"MIR extraction\" like it does in runtime contexts</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> informed me that we can't with the current setup, but should be trivial once promotion is its own pass</p>",
        "id": 180036511,
        "sender_full_name": "eddyb",
        "timestamp": 1573050166
    },
    {
        "content": "<p>speaking of which, I should go review their PRs :P</p>",
        "id": 180036648,
        "sender_full_name": "eddyb",
        "timestamp": 1573050262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I love refinement types and the <code>Vec</code> vs <code>Box</code> distinction makes perfect sense to me but I'm a bit worried there's no \"simple\" solution in general</p>",
        "id": 180036691,
        "sender_full_name": "eddyb",
        "timestamp": 1573050303
    },
    {
        "content": "<blockquote>\n<p><code>Vec::new()</code> returns a \"<code>Vec</code> that is <code>ConstSafe</code>\" (even though the type in general is not)</p>\n</blockquote>\n<p>Neat!</p>",
        "id": 180039804,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1573052150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> tis might also be a good way to think about some of our other type-based analyses... <code>CopyValueOf&lt;Option&lt;T&gt;&gt;</code> refers to those values of type <code>Option&lt;T&gt;</code> that can be copied, like <code>None</code>, etc</p>",
        "id": 180044393,
        "sender_full_name": "RalfJ",
        "timestamp": 1573054820
    }
]