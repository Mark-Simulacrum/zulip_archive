[
    {
        "content": "<p>In a <a href=\"https://github.com/rust-lang/lang-team/pull/43\">lang-team project group proposal</a> it came up that it would be extremely nice to some day be able to write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[repr(align(/* some const expression that makes a usize value*/))]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">MyType</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<ul>\n<li>It seems like this would be fairly simple to do within the current compiler for non-generic expressions.</li>\n<li>It seems like this would be <em>possible</em> to do some day even if there are generics involved.</li>\n</ul>\n<p>But we wanted to get some feedback about the feasibility of such a thing from the const eval people. Thoughts?</p>",
        "id": 209325442,
        "sender_full_name": "Lokathor",
        "timestamp": 1599510062
    },
    {
        "content": "<p>Concretely, it'd be nice to write <code>#[repr(align(align_of::&lt;*const u8&gt;()))]</code>, for instance.</p>",
        "id": 209327532,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599512578
    },
    {
        "content": "<p>I wonder whether there are grammar questions here too -- can we parse an arbitrary expression at that point in attributes, for example?</p>\n<p>Part of me thinks that once it can be a full expression, it would be better off in something not an attribute -- maybe an associated const -- because it'll want full error reporting, clippy lints applied, ...</p>",
        "id": 209332626,
        "sender_full_name": "scottmcm",
        "timestamp": 1599519623
    },
    {
        "content": "<p>well maybe it should be an identifier, and then the identifier can be any const you've defined anywhere you like.</p>",
        "id": 209333248,
        "sender_full_name": "Lokathor",
        "timestamp": 1599520347
    },
    {
        "content": "<p>Sketch of a thing I'd be curious to see what people hate about it:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">repr</span>::<span class=\"n\">Align</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ALIGN</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>(Has the interesting behaviour that the attribute could expand to that, and coherence gives all the \"you can't have multiple impls\" stuff.  Obviously it's really long, but...)</p>",
        "id": 209338121,
        "sender_full_name": "scottmcm",
        "timestamp": 1599527893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> That's...not the worst thing ever, but it's pretty quirky. :)</p>",
        "id": 209345802,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599540936
    },
    {
        "content": "<p>But the idea of making it an identifier to avoid parsing complexity isn't unreasonable. Though I think the grammar <em>would</em> allow an arbitrary expression there; I don't know what it'd be ambiguous with.</p>",
        "id": 209345848,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599540971
    },
    {
        "content": "<p>What about the potential cyclic loops? I assume they'd need special handling with that idea?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">repr</span>::<span class=\"n\">Align</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ALIGN</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Bar</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">repr</span>::<span class=\"n\">Align</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ALIGN</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>But with traits in particular, align_of could probably then be implemented in terms of repr::Align instead, so existing compiler infrastructure could handle the dependency.</p>",
        "id": 209346899,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599542575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"277614\">@Braden Nelson</span> Cyclic definitions are possible today with const evaluation, I believe.</p>",
        "id": 209348336,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599544839
    },
    {
        "content": "<p>I'm aware. The compiler is smart enough to handle them in normal situations (cycle detection). align_of would need some level of specialty handling if it's in any way built \"outside\" the current systems, as far as I can tell.</p>",
        "id": 209349294,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599546188
    },
    {
        "content": "<p>(I've also often wished that it was <code>&lt;T as Something&gt;::ALIGN</code> instead of <code>align_of::&lt;T&gt;()</code> to get alignment of things, but that's probably not worth churning.)</p>",
        "id": 209349855,
        "sender_full_name": "scottmcm",
        "timestamp": 1599546886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const.20eval.20within.20attributes/near/209325442\">said</a>:</p>\n<blockquote>\n<p>In a <a href=\"https://github.com/rust-lang/lang-team/pull/43\">lang-team project group proposal</a> it came up that it would be extremely nice to some day be able to write:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[repr(align(/* some const expression that makes a usize value*/))]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">MyType</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<ul>\n<li>It seems like this would be fairly simple to do within the current compiler for non-generic expressions.</li>\n<li>It seems like this would be <em>possible</em> to do some day even if there are generics involved.</li>\n</ul>\n<p>But we wanted to get some feedback about the feasibility of such a thing from the const eval people. Thoughts?</p>\n</blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=66801018f8aa2447b41d4c0099bd1d88\">Here's a demonstration of how this can be accomplished with the current capabilities of const generics.</a></p>",
        "id": 209410515,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1599582224
    },
    {
        "content": "<p>Clever!</p>",
        "id": 209410690,
        "sender_full_name": "comex",
        "timestamp": 1599582305
    },
    {
        "content": "<p>A downside of requiring an identifier is that there'd be no way to mention generic parameters.  Lokathor suggested this may not be supported in an initial implementation anyway, but it's still desirable to support someday.  Although it <em>would</em> make for somewhat awkward syntax: you'd be mentioning generic parameters before they're declared, textually speaking (<code>#[repr(align(align_of::&lt;T&gt;()))] struct Foo&lt;T&gt; …</code>)</p>",
        "id": 209412043,
        "sender_full_name": "comex",
        "timestamp": 1599582935
    },
    {
        "content": "<p>Part of this reminds me of the situation with <code>PhantomData</code>.  After all, in theory, we could say: repr align will never be extended; instead we'll add a type like in <span class=\"user-mention\" data-user-id=\"219211\">@Jack Wrenn</span>'s demo to the standard library and have that be the official way to achieve alignment depending on an expression.  One major downside would of course be inconsistency.  But another would be the same problem that <code>PhantomData</code> has: dummy fields make it annoying to construct and destructure structs!</p>",
        "id": 209412930,
        "sender_full_name": "comex",
        "timestamp": 1599583428
    },
    {
        "content": "<p>On the flipside, if we go with supporting expressions in the existing repr-align attribute, perhaps someday PhantomData could also become an attribute.</p>",
        "id": 209413170,
        "sender_full_name": "comex",
        "timestamp": 1599583539
    },
    {
        "content": "<p>\"Phantom fields\"—fields that affect layout and capture type parameters but don't impede construction or destructuring—is a neat thought!</p>",
        "id": 209413396,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1599583666
    },
    {
        "content": "<p>Separately: I want to note that there <em>isn't</em> really an equivalent trick for <code>repr(packed(N))</code>. Fields can only increase the alignment of the type they're in, not decrease it. An equivalent <code>packed(N)</code> hack would need to <em>wrap</em> the annotated type in an archetype that constraints its alignment.</p>\n<p>You could do it, but it would be even more un-ergonomic than the <code>_align</code> field of my demo.</p>",
        "id": 209413721,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1599583803
    },
    {
        "content": "<p>Phantom fields could also allow <code>Ok()</code> to become <code>Ok(())</code> and such, if we wanted.  And if they were restricted to <code>Default + Copy + StableTransmuteFrom&lt;()&gt;</code> I don't think anyone could complain about them holding useful information...</p>",
        "id": 209415110,
        "sender_full_name": "scottmcm",
        "timestamp": 1599584474
    },
    {
        "content": "<blockquote>\n<p>StableTransmuteFrom&lt;()&gt;</p>\n</blockquote>\n<p>Heh, nice trick ya got there. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 209415306,
        "sender_full_name": "Jack Wrenn",
        "timestamp": 1599584538
    },
    {
        "content": "<p>maybe use some syntax like:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">MyStruct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209425070,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1599589472
    },
    {
        "content": "<p>repr traits sound like cool ideas, since it makes the data immediate to rather than a side effect of the type system.</p>",
        "id": 209591648,
        "sender_full_name": "Jubilee",
        "timestamp": 1599707060
    },
    {
        "content": "<p>my concern is not \"does this cycle?\" but rather \"is this a reasonable promise in terms of the type system?\"</p>",
        "id": 209594152,
        "sender_full_name": "Jubilee",
        "timestamp": 1599710720
    },
    {
        "content": "<p>Well the instant I say \"I can't imagine what you could possibly do by being generic over things with a minimum alignment of 4\" I'm sure someone will nerdsnipe me with an example.</p>",
        "id": 209601374,
        "sender_full_name": "Lokathor",
        "timestamp": 1599720699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> bytemuck-ish. <code>cast&lt;A: Pod,B: Pod&gt; where A::Align::ALIGN = B::Align::ALIGN</code></p>",
        "id": 209686045,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599761258
    },
    {
        "content": "<p>owned transmute doesn't actually need alignment similarly at all, though that reminds me that a vec transmute might use it</p>",
        "id": 209686308,
        "sender_full_name": "Lokathor",
        "timestamp": 1599761362
    },
    {
        "content": "<p>Also tagged pointers care greatly -- <code>CompressedReferenceAndBool</code> needs <code>Align &gt;= 2</code></p>",
        "id": 209686904,
        "sender_full_name": "scottmcm",
        "timestamp": 1599761576
    },
    {
        "content": "<p>SIMD cares a lot about alignment too for obvious reasons, though my brain hasn't figured out to turn this into a nerdsnipey thing yet.</p>",
        "id": 209715312,
        "sender_full_name": "Jubilee",
        "timestamp": 1599775330
    }
]