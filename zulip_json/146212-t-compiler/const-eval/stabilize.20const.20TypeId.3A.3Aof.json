[
    {
        "content": "<p>I'm interested in getting <code>const_type_id</code> stabilized. Are there any lingering concerns or blocking issues?</p>",
        "id": 192970651,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586109995
    },
    {
        "content": "<p>not sure, is there anything left on the tracking issue?</p>",
        "id": 193014005,
        "sender_full_name": "oli",
        "timestamp": 1586164187
    },
    {
        "content": "<p>that's where we usually list concerns</p>",
        "id": 193014010,
        "sender_full_name": "oli",
        "timestamp": 1586164192
    },
    {
        "content": "<p>There isn't one for <code>const_type_id</code> specifically. The Unstable book links the Const Fn issue (<a href=\"https://github.com/rust-lang/rust/issues/57563\" title=\"https://github.com/rust-lang/rust/issues/57563\">#57563</a>) and the unstable attribute links <code>non_static_type_id</code> (<a href=\"https://github.com/rust-lang/rust/issues/41875\" title=\"https://github.com/rust-lang/rust/issues/41875\">#41875</a>), which is a separate change.</p>",
        "id": 193029257,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586173509
    },
    {
        "content": "<p>I guess it's the big brother of <code>const_type_name</code>, so all concerns for that apply to <code>const_type_id</code>, too, maybe even more strongly.</p>",
        "id": 193031032,
        "sender_full_name": "oli",
        "timestamp": 1586174665
    },
    {
        "content": "<p>the tracking issue for that is <a href=\"https://github.com/rust-lang/rust/issues/63084\" title=\"https://github.com/rust-lang/rust/issues/63084\">https://github.com/rust-lang/rust/issues/63084</a></p>",
        "id": 193031111,
        "sender_full_name": "oli",
        "timestamp": 1586174723
    },
    {
        "content": "<p>So, basically, the team isn't willing to stabilize it as const because compiler versions will make it differ? Why is that any different? Still the same caveat, needs to be treated with the same caution.</p>",
        "id": 193038132,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586178353
    },
    {
        "content": "<p>No, not because compiler versions will differ, that's a separate discussion that I think everyone is on the same page</p>",
        "id": 193038847,
        "sender_full_name": "oli",
        "timestamp": 1586178700
    },
    {
        "content": "<p>as far as I can tell, the issue is that you can make decisions about generic types without your ability to do so showing up as trait bounds</p>",
        "id": 193038991,
        "sender_full_name": "oli",
        "timestamp": 1586178761
    },
    {
        "content": "<p>I'm sorry, how do trait bounds matter for TypeId?</p>",
        "id": 193040734,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586179539
    },
    {
        "content": "<p>it doesn't have a bound at all</p>",
        "id": 193041488,
        "sender_full_name": "eddyb",
        "timestamp": 1586179831
    },
    {
        "content": "<p>so a function like <code>mem::swap</code> could check if the type is <code>[u8; 16]</code> and do something different. although, there is the <code>'static</code> bound, for now :P. and specialization exists, it's just not stable</p>",
        "id": 193041585,
        "sender_full_name": "eddyb",
        "timestamp": 1586179881
    },
    {
        "content": "<p>I'm really lost now. How does any of this have to do with making <code>TypeId::of</code> const? The inner <code>u64</code> is already compile-time generated, and that's the only inner value... This has nothing to do with enforcing what people are doing with the values, just identifying them.</p>",
        "id": 193044271,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586181160
    },
    {
        "content": "<p>oh I remember now</p>",
        "id": 193045022,
        "sender_full_name": "eddyb",
        "timestamp": 1586181485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252217\">@Khionu Sybiern</span> <code>const fn</code>s cannot have trait bounds today</p>",
        "id": 193045062,
        "sender_full_name": "eddyb",
        "timestamp": 1586181500
    },
    {
        "content": "<p>they're very limited on purpose</p>",
        "id": 193045095,
        "sender_full_name": "eddyb",
        "timestamp": 1586181514
    },
    {
        "content": "<p><code>TypeId::of</code> <em>in a <code>const fn</code></em> (without <code>#![feature(const_fn)]</code>) lets you tell apart types which you can't today</p>",
        "id": 193045180,
        "sender_full_name": "eddyb",
        "timestamp": 1586181553
    },
    {
        "content": "<p>ooof...</p>",
        "id": 193045186,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586181554
    },
    {
        "content": "<p>at least I think that's the argument</p>",
        "id": 193045196,
        "sender_full_name": "eddyb",
        "timestamp": 1586181559
    },
    {
        "content": "<p>(it's not necessary a <em>good</em> argument for keeping <code>TypeId::of</code> unstable)</p>",
        "id": 193045227,
        "sender_full_name": "eddyb",
        "timestamp": 1586181581
    },
    {
        "content": "<p>Dang. This is blocking me on making my API any kind of ergonomic without a DSL. Currently require a if/else if chains to try to cast an object...</p>",
        "id": 193045607,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586181721
    },
    {
        "content": "<p>hehe, your use case sounds like the very reason ppl are hesitant to stabilize it</p>",
        "id": 193045823,
        "sender_full_name": "oli",
        "timestamp": 1586181791
    },
    {
        "content": "<p>If Rust had better RTTI, I wouldn't be in this situation.</p>",
        "id": 193045937,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586181838
    },
    {
        "content": "<p>I have two options: associated type, which sets a hard restriction of one type, or try_cast'ing</p>",
        "id": 193046053,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586181877
    },
    {
        "content": "<p>I think if we had specialization your matching code would be the worst way to implement your library ;)</p>",
        "id": 193046334,
        "sender_full_name": "oli",
        "timestamp": 1586181965
    },
    {
        "content": "<p>I gave up on Specialization being implemented in the near enough future, otherwise that would solve a lot of my problems</p>",
        "id": 193046434,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586182010
    },
    {
        "content": "<p>You'd just be able to implement a trait for all types, and specialize it for specific types</p>",
        "id": 193046442,
        "sender_full_name": "oli",
        "timestamp": 1586182012
    },
    {
        "content": "<p>well, this feature is just crappy specialization on stilts if you use it as you describe it. And as I specified before, your use case is why people don't want to stabilize type id</p>",
        "id": 193046654,
        "sender_full_name": "oli",
        "timestamp": 1586182084
    },
    {
        "content": "<p>Honestly, I've considered diving off the unsafe cliff and start implementing my own type tracking. It's just so painful to try and do it in safe/stable Rust.</p>",
        "id": 193046759,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586182128
    },
    {
        "content": "<p>Also, I don't actually think Specialization would help me here. User starts with a single root function that gets passed a state, context, and message. They should be able to branch based on what the message is and what their state is.</p>",
        "id": 193047011,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586182230
    },
    {
        "content": "<p>This discussion is getting off topic. I don't think you'll be able to move the stabilization ahead with your use case as a motivating example. Rather the opposite, the fact that this is what you're trying to use it for is motivation for not stabilizing it.</p>",
        "id": 193047399,
        "sender_full_name": "oli",
        "timestamp": 1586182399
    },
    {
        "content": "<p>I may be severely misinterpreting the situation though</p>",
        "id": 193047449,
        "sender_full_name": "oli",
        "timestamp": 1586182422
    },
    {
        "content": "<p>The situation is that I'm trying to use TypeId to make my type erasure process more ergonomic. Maybe there's another solution, but I haven't been able to think of one, nor has anyone I've asked.</p>",
        "id": 193047930,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586182588
    },
    {
        "content": "<p>What's the point of TypeId (const or no) if we're not supposed to be able to do runtime type evaluation?</p>",
        "id": 193047989,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586182620
    },
    {
        "content": "<p>I don't understand why this shouldn't be stabilized since we already have the function. It's stalemating because of a decision that was already made.</p>",
        "id": 193048221,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586182719
    },
    {
        "content": "<p>I get the technical reasons, but you're saying there's also language direction reasons</p>",
        "id": 193048295,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586182748
    },
    {
        "content": "<p>Yes, the keyword you're looking for in language jargon is \"referential transparency\"</p>",
        "id": 193048355,
        "sender_full_name": "oli",
        "timestamp": 1586182775
    },
    {
        "content": "<p>but you're talking to the wrong person, I neither understand the implications nor believe that referential transparency is something that can be pursued reasonably in Rust</p>",
        "id": 193048507,
        "sender_full_name": "oli",
        "timestamp": 1586182828
    },
    {
        "content": "<p>my belief may come from my lack of understanding, so...</p>",
        "id": 193048541,
        "sender_full_name": "oli",
        "timestamp": 1586182850
    },
    {
        "content": "<p>My understanding is that there's a number of people that want Rust to have static purity, which does make sense for a number of reasons, but it also is harshly restrictive.</p>",
        "id": 193048641,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586182897
    },
    {
        "content": "<p>I'll drop this for now, I'll see if I can find other options</p>",
        "id": 193048885,
        "sender_full_name": "Khionu Sybiern",
        "timestamp": 1586183001
    },
    {
        "content": "<p>You can always open a tracking issue for it, that will help move things forward (even if the direction is unknown)</p>",
        "id": 193049041,
        "sender_full_name": "oli",
        "timestamp": 1586183067
    }
]