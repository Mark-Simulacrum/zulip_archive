[
    {
        "content": "<p>Would it be possible to evaluate format strings at compile time?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;Hello there {}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>This could produce a single string.</p>",
        "id": 200260772,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591722402
    },
    {
        "content": "<p>copy propagation would do that opportunistically</p>",
        "id": 200264705,
        "sender_full_name": "oli",
        "timestamp": 1591724238
    },
    {
        "content": "<p>it can't right now, but when we get const prop for <code>const fn</code> calls and make the formatting infrastructure <code>const fn</code>, then we'll be able to do that</p>",
        "id": 200264756,
        "sender_full_name": "oli",
        "timestamp": 1591724268
    },
    {
        "content": "<p>Does const prop have to care about whether a function is marked <code>const</code>?</p>",
        "id": 200264983,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1591724390
    },
    {
        "content": "<p>I assume that everyone pronounces that as \"copprop\"</p>",
        "id": 200266525,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725150
    },
    {
        "content": "<p>(assuming copy and const prop are two separate things?)</p>",
        "id": 200266588,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725186
    },
    {
        "content": "<p>const prop does have to care, because the mir interpreter will likely panic if you run it on non-const fns</p>",
        "id": 200266606,
        "sender_full_name": "oli",
        "timestamp": 1591725197
    },
    {
        "content": "<p>but the inliner could be more aggressive on functions where all arguments are const</p>",
        "id": 200266638,
        "sender_full_name": "oli",
        "timestamp": 1591725213
    },
    {
        "content": "<p>I mean, we run it on non-const fns now :)</p>",
        "id": 200266642,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1591725216
    },
    {
        "content": "<p>The ones we're optimizing</p>",
        "id": 200266649,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1591725221
    },
    {
        "content": "<p>I mean optimizing a function call</p>",
        "id": 200266666,
        "sender_full_name": "oli",
        "timestamp": 1591725231
    },
    {
        "content": "<p>not optimizing a function, that we do on all functions indeed</p>",
        "id": 200266675,
        "sender_full_name": "oli",
        "timestamp": 1591725240
    },
    {
        "content": "<p>I think the bigger issue is just that it probably won't actually be able to completely evaluate the call (if the fn isn't const) which will hurt compile times for no wins</p>",
        "id": 200266772,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1591725275
    },
    {
        "content": "<p>Rub a little more magic on, and I bet you can make this work: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;hello {} worlds&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">).</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 200266816,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725300
    },
    {
        "content": "<p>that, too, but ppl may still want slow optimizations for specific cases</p>",
        "id": 200266828,
        "sender_full_name": "oli",
        "timestamp": 1591725304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> that requires the exact same features and will work at the same time it works in const prop ;)</p>",
        "id": 200266889,
        "sender_full_name": "oli",
        "timestamp": 1591725338
    },
    {
        "content": "<p>but yea, I want that to work</p>",
        "id": 200266898,
        "sender_full_name": "oli",
        "timestamp": 1591725345
    },
    {
        "content": "<p>const eval truly is wonderful</p>",
        "id": 200266906,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725351
    },
    {
        "content": "<p>oh wait, there's a heap alloc in there... <code>format_args!(...)</code> will work with the same features</p>",
        "id": 200266971,
        "sender_full_name": "oli",
        "timestamp": 1591725373
    },
    {
        "content": "<blockquote>\n<p>the exact same features </p>\n</blockquote>\n<p>yeah.</p>",
        "id": 200266988,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725380
    },
    {
        "content": "<p><code>format!</code> needs const heap, too :D</p>",
        "id": 200266991,
        "sender_full_name": "oli",
        "timestamp": 1591725381
    },
    {
        "content": "<p><em>whew</em> glad I wasn't missing something</p>",
        "id": 200267015,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725394
    },
    {
        "content": "<p>hehe</p>",
        "id": 200267028,
        "sender_full_name": "oli",
        "timestamp": 1591725398
    },
    {
        "content": "<p>const eval all the things^TM</p>",
        "id": 200267067,
        "sender_full_name": "oli",
        "timestamp": 1591725421
    },
    {
        "content": "<p>That's rather the goal, yeah?</p>",
        "id": 200267087,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725430
    },
    {
        "content": "<p>there's a bunch of things we know that we can't do</p>",
        "id": 200267147,
        "sender_full_name": "oli",
        "timestamp": 1591725458
    },
    {
        "content": "<p>not because it isn't possible impl wise, but it will cause undesirable behaviours</p>",
        "id": 200267180,
        "sender_full_name": "oli",
        "timestamp": 1591725475
    },
    {
        "content": "<p>we can't do threading</p>",
        "id": 200267223,
        "sender_full_name": "oli",
        "timestamp": 1591725483
    },
    {
        "content": "<p>for example</p>",
        "id": 200267235,
        "sender_full_name": "oli",
        "timestamp": 1591725486
    },
    {
        "content": "<p>Getting <code>format!</code> and <code>println!</code> to not produce such huge piles of code is one of my personal goals in terms of MIR optimizations.</p>",
        "id": 200267287,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1591725508
    },
    {
        "content": "<p>Might want to say \"we choose not to\" then, otherwise you'll get pedants like me trying to prove you wrong <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 200267321,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725527
    },
    {
        "content": "<p>It kills me how much MIR \"hello world\" generates.</p>",
        "id": 200267345,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1591725543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> And any such gains should help in embedded as well, I'd hope?</p>",
        "id": 200267382,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725564
    },
    {
        "content": "<p>I would think so</p>",
        "id": 200267400,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1591725573
    },
    {
        "content": "<p>And is that part of const-eval or \"just\" MIR optimizations?</p>",
        "id": 200267429,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725590
    },
    {
        "content": "<p>probably both</p>",
        "id": 200267564,
        "sender_full_name": "oli",
        "timestamp": 1591725634
    },
    {
        "content": "<p>stronger const eval means possibly stronger const prop</p>",
        "id": 200267608,
        "sender_full_name": "oli",
        "timestamp": 1591725659
    },
    {
        "content": "<p>but there's many things that will require independent MIR optimizations</p>",
        "id": 200267651,
        "sender_full_name": "oli",
        "timestamp": 1591725682
    },
    {
        "content": "<p>I really need to work more on the MIR inliner. Now that the LLVM upgrade happened, maybe it's worth retesting where we're at.</p>",
        "id": 200267823,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1591725760
    },
    {
        "content": "<p>Why didn't y'all just write it the fast way to start with :troll:</p>",
        "id": 200267835,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725771
    },
    {
        "content": "<p>Oh damn, why didn't we think of that? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 200267871,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1591725790
    },
    {
        "content": "<p>For both const eval and polonius, I'm like \"please happen soon\" but I know that saying that doesn't help, so just know we all appreciate the work!</p>",
        "id": 200268089,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591725924
    },
    {
        "content": "<p>we're reworking the way wg-const-eval works by giving us more autonomy in the small things by having an overarching plan that T-lang signs off on and frees them from the small questions</p>",
        "id": 200272557,
        "sender_full_name": "oli",
        "timestamp": 1591728101
    },
    {
        "content": "<p>but... alas... I have a thesis to finish, so I'm gonna do that right now :D</p>",
        "id": 200272627,
        "sender_full_name": "oli",
        "timestamp": 1591728127
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> how dare you work on something other than rust <span aria-label=\"rage\" class=\"emoji emoji-1f621\" role=\"img\" title=\"rage\">:rage:</span></p>",
        "id": 200310690,
        "sender_full_name": "mark-i-m",
        "timestamp": 1591752054
    },
    {
        "content": "<p>Seriously, though, I'm exactly with <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span>: impatient for this awesome work to land... and then I remember it's all volunteer work, which is almost more awe-inspiring than the work itself</p>",
        "id": 200310778,
        "sender_full_name": "mark-i-m",
        "timestamp": 1591752141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198054\">mark-i-m</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/format.20strings/near/200310690\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> how dare you work on something other than rust <span aria-label=\"rage\" class=\"emoji emoji-1f621\" role=\"img\" title=\"rage\">:rage:</span></p>\n</blockquote>\n<p>The thesis is a lot about Rust, does that count? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 200386295,
        "sender_full_name": "oli",
        "timestamp": 1591774909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> you can figure out what you need to get a feature by looking at <a href=\"https://static.turbo.fish/const-eval-skill-tree/skill-tree.html\">https://static.turbo.fish/const-eval-skill-tree/skill-tree.html</a> (thanks <span class=\"user-mention\" data-user-id=\"198047\">@jplatte</span> for hosting this!)</p>",
        "id": 200437482,
        "sender_full_name": "oli",
        "timestamp": 1591805177
    },
    {
        "content": "<p>most of these nodes are hyperlinks to the tracking issue of the feature</p>",
        "id": 200437560,
        "sender_full_name": "oli",
        "timestamp": 1591805214
    },
    {
        "content": "<p>Oh look at that. Format all the way over there at the edge.</p>",
        "id": 200438783,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591805688
    },
    {
        "content": "<p>hehe</p>",
        "id": 200438810,
        "sender_full_name": "oli",
        "timestamp": 1591805700
    },
    {
        "content": "<p>serde would be a the same level</p>",
        "id": 200438843,
        "sender_full_name": "oli",
        "timestamp": 1591805715
    },
    {
        "content": "<p>hmm actually, just remembered there's some function pointer hackery in the formatting infrastructure</p>",
        "id": 200438907,
        "sender_full_name": "oli",
        "timestamp": 1591805741
    },
    {
        "content": "<p>serde is easier than <code>format!</code></p>",
        "id": 200438923,
        "sender_full_name": "oli",
        "timestamp": 1591805746
    },
    {
        "content": "<p>Things you don’t expect to hear every day.</p>",
        "id": 200439183,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591805828
    },
    {
        "content": "<p>yeah... Miri can do <code>format!</code> but it's tricky</p>",
        "id": 200516475,
        "sender_full_name": "RalfJ",
        "timestamp": 1591863597
    },
    {
        "content": "<p>I think the last bug where Miri actually executed programs incorrectly was in <code>format!</code>, because it relies on fn ptr equality in non-trivial ways</p>",
        "id": 200516532,
        "sender_full_name": "RalfJ",
        "timestamp": 1591863618
    },
    {
        "content": "<p>on top of a lot of nasty unsafe code effectively implementing type erasure without using <code>dyn</code>^^</p>",
        "id": 200516562,
        "sender_full_name": "RalfJ",
        "timestamp": 1591863648
    }
]