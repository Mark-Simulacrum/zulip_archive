[
    {
        "content": "<p>I'm trying to fix <a href=\"https://github.com/rust-lang/rust/issues/79898\">https://github.com/rust-lang/rust/issues/79898</a><br>\nThis is the code in question</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_fn)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_precise_live_drops)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_trait_impl)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">TestTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test_fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Boo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">TestTrait</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Boo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">test_fn</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">forget</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I did some debugging and saw that there is no logic right now to handle this. Nothing's mentioned in the <a href=\"https://github.com/rust-lang/rfcs/pull/2632\">RFC</a> either. So I'm not sure how to fix this.</p>",
        "id": 219987906,
        "sender_full_name": "vn-ki",
        "timestamp": 1608043234
    },
    {
        "content": "<p>The problem I think is that the predicates for <code>T: TestTrait</code> doesn't have the const. If there is a const fn inside the impl, does it mean that the predicates of the bounds have to satisfy consts too?</p>",
        "id": 219988223,
        "sender_full_name": "vn-ki",
        "timestamp": 1608043359
    },
    {
        "content": "<p>CC: <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> because I saw that you implemented this for normal fns</p>",
        "id": 219988277,
        "sender_full_name": "vn-ki",
        "timestamp": 1608043389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355545\">vn-ki</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/regarding.20const.20fns.20in.20impl/near/219988223\">said</a>:</p>\n<blockquote>\n<p>The problem I think is that the predicates for <code>T: TestTrait</code> doesn't have the const. If there is a const fn inside the impl, does it mean that the predicates of the bounds have to satisfy consts too?</p>\n</blockquote>\n<p>I think the predicate from the impl should be marked as const while inside the <code>const fn</code>, but not while inside non-const <code>fn</code>s in the same impl.</p>\n<p>I don't know how hard it would be to implement this though.</p>",
        "id": 219988968,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608043722
    },
    {
        "content": "<p>ah, this is the parent/child bound situation? I though const fn in impl blocks just copied all the bounds from the impl block, but they are just referencing them?</p>",
        "id": 220013459,
        "sender_full_name": "oli",
        "timestamp": 1608053464
    },
    {
        "content": "<p>I guess what we could do is actually copy all bounds for just <code>const fn</code> and make them <code>const Trait</code> bounds</p>",
        "id": 220013563,
        "sender_full_name": "oli",
        "timestamp": 1608053507
    },
    {
        "content": "<p>Copying would probably work, but be unfortunate. Another possibility could be to mutate the bounds as they are extracted. So in the return value of <code>predicates_of</code> we could make the <code>parent</code> field private and add accessor methods that give us the data that consumers of <code>predicates_of</code> need, but only after mutating that data to contain the right bounds</p>",
        "id": 220103135,
        "sender_full_name": "oli",
        "timestamp": 1608117347
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/regarding.20const.20fns.20in.20impl/near/220103135\">said</a>:</p>\n<blockquote>\n<p>Copying would probably work, but be unfortunate. Another possibility could be to mutate the bounds as they are extracted. So in the return value of <code>predicates_of</code> we could make the <code>parent</code> field private and add accessor methods that give us the data that consumers of <code>predicates_of</code> need, but only after mutating that data to contain the right bounds</p>\n</blockquote>\n<p><a href=\"https://github.com/vn-ki/rust/blob/e261649593cf9c2707f7b30a61c46c4469c67ebb/compiler/rustc_ty_utils/src/ty.rs#L242-L243\"><code>instantiate_into</code> seems to be being used for this in <code>param_env</code></a> (which is the query used in our issue).</p>\n<p><a href=\"https://github.com/vn-ki/rust/blob/e261649593cf9c2707f7b30a61c46c4469c67ebb/compiler/rustc_middle/src/ty/mod.rs#L974-L990\">https://github.com/vn-ki/rust/blob/e261649593cf9c2707f7b30a61c46c4469c67ebb/compiler/rustc_middle/src/ty/mod.rs#L974-L990</a></p>",
        "id": 220105500,
        "sender_full_name": "vn-ki",
        "timestamp": 1608119064
    },
    {
        "content": "<p>maybe making constness a field of <code>GenericPredicate</code> works?</p>",
        "id": 220105575,
        "sender_full_name": "vn-ki",
        "timestamp": 1608119147
    },
    {
        "content": "<p>Ah good find</p>",
        "id": 220105658,
        "sender_full_name": "oli",
        "timestamp": 1608119205
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/3f2088aa603d2cd3f43c20795872de9cd6ec7735/compiler/rustc_middle/src/ty/mod.rs#L986\">https://github.com/rust-lang/rust/blob/3f2088aa603d2cd3f43c20795872de9cd6ec7735/compiler/rustc_middle/src/ty/mod.rs#L986</a></p>",
        "id": 220105666,
        "sender_full_name": "oli",
        "timestamp": 1608119209
    },
    {
        "content": "<p>here we can mutate the data before putting it into the target</p>",
        "id": 220105679,
        "sender_full_name": "oli",
        "timestamp": 1608119221
    }
]