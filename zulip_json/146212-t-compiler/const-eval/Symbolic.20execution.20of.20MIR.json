[
    {
        "content": "<p>Hello everyone, I'm doing some work related to const generics which is writing an small symbolic interpreter for MIR as a part of my masters thesis. Right now it can only execute a reduced set of MIR expressions but I believe it could be explored further. </p>\n<p>I'd like to know if there is some way of taking Rust code, compile it into MIR and then use my code to execute and manipulate the resulting MIR code, I assume this is possible given that miri is a separated project</p>",
        "id": 162094330,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1553904589
    },
    {
        "content": "<p>You'll have to create your own driver (see <code>src/bin/miri.rs</code> in miri or <code>src/bin/driver.rs</code> in clippy). You can fetch the main function's MIR like miri does it and then process the resulting MIR as your see fit</p>",
        "id": 162132449,
        "sender_full_name": "oli",
        "timestamp": 1553969207
    },
    {
        "content": "<p>Thank you! I'm just checking  <code>src/bin/miri.rs</code>. I guess that in <a href=\"https://github.com/rust-lang/miri/blob/master/src/bin/miri.rs#L44\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/blob/master/src/bin/miri.rs#L44\">https://github.com/rust-lang/miri/blob/master/src/bin/miri.rs#L44</a> miri is fetching the id of the main function and then <code>miri::eval_main</code> will take the mir of the main function from the context using <code>entry_def_id</code>. Am i correct?</p>",
        "id": 162138628,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1553979454
    },
    {
        "content": "<p>yes</p>",
        "id": 162179864,
        "sender_full_name": "oli",
        "timestamp": 1554046728
    },
    {
        "content": "<p>Thank you for your help! I've been able to do a lot since friday. Currently I can evaluate recursive functions without side effects and I hope to do a lot of improvements this week</p>",
        "id": 162363534,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1554231291
    },
    {
        "content": "<p>If anyone wants to see the code: <a href=\"https://github.com/christianpoveda/sire\" target=\"_blank\" title=\"https://github.com/christianpoveda/sire\">https://github.com/christianpoveda/sire</a></p>",
        "id": 162363554,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1554231300
    },
    {
        "content": "<p>Currently my project is able to evaluate recursive functions with conditionals by creating an interpreter for each branch and leaving stated the recursive call. However, functions with loops cannot be evaluated given that blocks don't exist in my representation. It would make sense to try to separate the blocks in a loop into an auxiliary function? For example, if I have the function</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">r</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>the MIR of <code>foo</code> contains the following transitions between basic blocks:<br>\n- <code>bb0 -&gt;  bb1</code>.<br>\n- <code>bb1 -&gt; bb2 or bb3</code><br>\n- <code>bb3 -&gt; bb1</code></p>\n<p>I was wondering if it is reasonable to move the blocks <code>bb1</code> and <code>bb3</code> to its own function to be able to write the MIR of <code>foo</code> as a recursive function. However, I'm worried about the differences when a panic happens for example. Also I'm not sure if the subset of MIR functions that are produced from valid Rust functions is restricted enough to be able to do this in all cases.</p>",
        "id": 162716955,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1554579588
    },
    {
        "content": "<p>Can't you treat every BB as its own function in your evaluator? Instead of rewriting the MIR, just treat it as if that were the representation</p>",
        "id": 162739926,
        "sender_full_name": "oli",
        "timestamp": 1554616873
    },
    {
        "content": "<p>I could, but then some simple functions would have a really long representation</p>",
        "id": 162765131,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1554658805
    },
    {
        "content": "<p>I guess I could represent every block as a function and then check if I can inline it</p>",
        "id": 162765145,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1554658856
    },
    {
        "content": "<p>i was checking the mir generated for a function containing a <code>for</code> loop. I realized that even with level 3 optimizations the mir is really huge (or at least more than I expected after checking a similar function with a <code>while</code> loop. There are a couple terminators that i've never seen <code>falseEdges</code> and <code>falseUnwind</code>, what are those doing?</p>",
        "id": 163748179,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555693512
    },
    {
        "content": "<p>that's NLL stuff, I think</p>",
        "id": 163748262,
        "sender_full_name": "RalfJ",
        "timestamp": 1555693577
    },
    {
        "content": "<p>I was checking  the same function with the playground but I've realised that is smaller than mine. I guess release includes more compiler flags than just opt-level 3?</p>",
        "id": 163748544,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555693868
    },
    {
        "content": "<p>release affects which MIR gets generated</p>",
        "id": 163748628,
        "sender_full_name": "RalfJ",
        "timestamp": 1555693935
    },
    {
        "content": "<p>like, whether arithmetic is translated with or without overflow checks</p>",
        "id": 163748635,
        "sender_full_name": "RalfJ",
        "timestamp": 1555693945
    },
    {
        "content": "<p>and debug assertions, obviously</p>",
        "id": 163748639,
        "sender_full_name": "RalfJ",
        "timestamp": 1555693949
    },
    {
        "content": "<p>how can I reproduce the behaviour of the compiler under release using only rustc?</p>",
        "id": 163748660,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555693978
    },
    {
        "content": "<p>release mode corresponds to the <code>-O</code> flag</p>",
        "id": 163749582,
        "sender_full_name": "RalfJ",
        "timestamp": 1555694809
    },
    {
        "content": "<p>also see <code>rustc --help</code></p>",
        "id": 163749598,
        "sender_full_name": "RalfJ",
        "timestamp": 1555694820
    },
    {
        "content": "<p><code>opt-level=2</code>?</p>",
        "id": 163749974,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555695105
    },
    {
        "content": "<p>i see no discernible difference in the number of blocks</p>",
        "id": 163750057,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555695157
    },
    {
        "content": "<p>there are around 30 and the playground version has 7</p>",
        "id": 163750071,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555695177
    },
    {
        "content": "<blockquote>\n<p>There are a couple terminators that i've never seen <code>falseEdges</code> and <code>falseUnwind</code>, what are those doing?</p>\n</blockquote>\n<p>These shouldn't exist in optimized MIR (after all passes have been performed).</p>",
        "id": 163750639,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1555695675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> could you share the code you are using to test this?</p>",
        "id": 163752063,
        "sender_full_name": "RalfJ",
        "timestamp": 1555696791
    },
    {
        "content": "<p><a href=\"https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=7dfbc38e5d8b4e3e79cd37f8f0c5f6ed\" target=\"_blank\" title=\"https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=7dfbc38e5d8b4e3e79cd37f8f0c5f6ed\">https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=7dfbc38e5d8b4e3e79cd37f8f0c5f6ed</a></p>",
        "id": 163752161,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555696842
    },
    {
        "content": "<p>Is the MIR you're looking at locally produced by <code>rustc ... --emit mir</code> or is it (a dump of) the MIR that your custom driver gets?</p>",
        "id": 163752491,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1555697118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> I can reproduce the playground output with just <code>rustc --emit mir -O file.rs</code></p>",
        "id": 163753522,
        "sender_full_name": "RalfJ",
        "timestamp": 1555697905
    },
    {
        "content": "<p>Is the MIR I get when dumping the mir using the -Z flag</p>",
        "id": 163754462,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555698616
    },
    {
        "content": "<p>Maybe im looking the wrong mir file?</p>",
        "id": 163754468,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555698625
    },
    {
        "content": "<p>Oh the -Z flag might dump after every pass, in that case it would be very easy to look at a file that's wildly different from the final MIR that playground/<code>--emit mir</code> show</p>",
        "id": 163754530,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1555698680
    },
    {
        "content": "<p>I'm gonna check the mir i'd get from the custom driver</p>",
        "id": 163755574,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555699545
    },
    {
        "content": "<p>Ok yes the driver gets a short mir also</p>",
        "id": 163755750,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555699644
    },
    {
        "content": "<p>is it there any way to \"emit\" the .dot diagram for this?</p>",
        "id": 163755766,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555699660
    },
    {
        "content": "<p>hm, it is still strange though that there are no dump files of <code>sum</code> from phase 3</p>",
        "id": 163755906,
        "sender_full_name": "RalfJ",
        "timestamp": 1555699785
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>-rw-r--r-- 1 r r 10353 Apr 19 20:46 rustc.sum.001-000.SimplifyCfg-initial.after.mir\n-rw-r--r-- 1 r r 11972 Apr 19 20:46 rustc.sum.001-000.SimplifyCfg-initial.before.mir\n-rw-r--r-- 1 r r 10343 Apr 19 20:46 rustc.sum.001-001.TypeckMir.after.mir\n-rw-r--r-- 1 r r 10344 Apr 19 20:46 rustc.sum.001-001.TypeckMir.before.mir\n-rw-r--r-- 1 r r 10345 Apr 19 20:46 rustc.sum.001-002.SanityCheck.after.mir\n-rw-r--r-- 1 r r 10346 Apr 19 20:46 rustc.sum.001-002.SanityCheck.before.mir\n-rw-r--r-- 1 r r 10353 Apr 19 20:46 rustc.sum.001-003.UniformArrayMoveOut.after.mir\n-rw-r--r-- 1 r r 10354 Apr 19 20:46 rustc.sum.001-003.UniformArrayMoveOut.before.mir\n-rw-r--r-- 1 r r 10360 Apr 19 20:46 rustc.sum.002-000.QualifyAndPromoteConstants.after.mir\n-rw-r--r-- 1 r r 10361 Apr 19 20:46 rustc.sum.002-000.QualifyAndPromoteConstants.before.mir\n-rw-r--r-- 1 r r 10360 Apr 19 20:46 rustc.sum.002-001.SimplifyCfg-qualify-consts.after.mir\n-rw-r--r-- 1 r r 10361 Apr 19 20:46 rustc.sum.002-001.SimplifyCfg-qualify-consts.before.mir\n-rw-r--r-- 1 r r 11955 Apr 19 20:46 rustc.sum.-------.mir_map.0.mir\n</pre></div>",
        "id": 163755917,
        "sender_full_name": "RalfJ",
        "timestamp": 1555699801
    },
    {
        "content": "<p>ah... it's because the fn is never called so doesnt get dumped</p>",
        "id": 163756058,
        "sender_full_name": "RalfJ",
        "timestamp": 1555699914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> <code>mir_dump/rustc.sum.003-027.PreCodegen.after.mir</code> matches the MIR on playground</p>",
        "id": 163756136,
        "sender_full_name": "RalfJ",
        "timestamp": 1555699948
    },
    {
        "content": "<p>generated by <code>rustc -Zdump-mir=all p.rs -O --emit mir</code></p>",
        "id": 163756140,
        "sender_full_name": "RalfJ",
        "timestamp": 1555699959
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/rust/issues/43620\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/43620\">https://github.com/rust-lang/rust/issues/43620</a></p>",
        "id": 163756185,
        "sender_full_name": "RalfJ",
        "timestamp": 1555699997
    },
    {
        "content": "<p>oh ok, i guess that solves the problem</p>",
        "id": 163756288,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555700075
    },
    {
        "content": "<p>well thank you both :) this has been really helpful</p>",
        "id": 163756780,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1555700407
    },
    {
        "content": "<p>It seems I'm misunderstanding the semantic of <code>StorageLive/Dead</code>, why the mir of the <code>is_odd</code> function does not have an <code>StorageLive(_4)</code> statement? <a href=\"https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=756a4645cf1d86997a90708e1beb9966\" target=\"_blank\" title=\"https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=756a4645cf1d86997a90708e1beb9966\">https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=756a4645cf1d86997a90708e1beb9966</a></p>",
        "id": 164495076,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556577739
    },
    {
        "content": "<p>as a side question, why does 2 == 0 does not evaluate to false immediately?</p>",
        "id": 164510265,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556598520
    },
    {
        "content": "<p>some variables are implicitly live and never have a <code>Storage</code> annotation. I don't know why.</p>",
        "id": 164527095,
        "sender_full_name": "RalfJ",
        "timestamp": 1556619469
    },
    {
        "content": "<p>Uhhh i started a new thread by accident...</p>",
        "id": 164537162,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556629726
    },
    {
        "content": "<p>I was thinking on just allocating space for every local at the same time when the function argument locals are allocated and freeing all the locals at the end of execution. Otherwise I'd have to check which locals lack of an <code>StorageLive</code> and <code>StorageDead</code> statement before even executing the function.</p>",
        "id": 164537313,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556629847
    },
    {
        "content": "<p>no that does not happen right now</p>",
        "id": 164537553,
        "sender_full_name": "oli",
        "timestamp": 1556630094
    },
    {
        "content": "<p>yea, we do that check in clippy, but we optimized it out for some situations</p>",
        "id": 164537609,
        "sender_full_name": "oli",
        "timestamp": 1556630144
    },
    {
        "content": "<p>I guess for the moment is enough to reserve everyone at the same time and just ignore the <code>Storage</code> statements then, I'll let a comment on my code in case this becomes relevant after</p>",
        "id": 164537826,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556630320
    },
    {
        "content": "<blockquote>\n<p>It seems I'm misunderstanding the semantic of <code>StorageLive/Dead</code>, why the mir of the <code>is_odd</code> function does not have an <code>StorageLive(_4)</code> statement? <a href=\"https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=756a4645cf1d86997a90708e1beb9966\" target=\"_blank\" title=\"https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=756a4645cf1d86997a90708e1beb9966\">https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=756a4645cf1d86997a90708e1beb9966</a></p>\n</blockquote>\n<p>I have another question, why on that specific example <code>_4</code> is not resolved to false during compilation?</p>",
        "id": 164537884,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556630378
    },
    {
        "content": "<p>I think the only thing that can be problematic with the way you're addressing is that you may not notice if someone is accessing a dangling pointer, because your local still lives</p>",
        "id": 164537888,
        "sender_full_name": "oli",
        "timestamp": 1556630380
    },
    {
        "content": "<blockquote>\n<p>I think the only thing that can be problematic with the way you're addressing is that you may not notice if someone is accessing a dangling pointer, because your local still lives</p>\n</blockquote>\n<p>Jmm... the other option is to still allocate and free using <code>StorageLive/Dead</code> and also at the beginning and end of execution and do double frees #YOLO</p>",
        "id": 164538033,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556630486
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>It seems I'm misunderstanding the semantic of <code>StorageLive/Dead</code>, why the mir of the <code>is_odd</code> function does not have an <code>StorageLive(_4)</code> statement? <a href=\"https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=756a4645cf1d86997a90708e1beb9966\" target=\"_blank\" title=\"https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=756a4645cf1d86997a90708e1beb9966\">https://play.integer32.com/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=756a4645cf1d86997a90708e1beb9966</a></p>\n</blockquote>\n<p>I have another question, why on that specific example <code>_4</code> is not resolved to false during compilation?</p>\n</blockquote>\n<p>because <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Other.20available.20work.3F\" title=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Other.20available.20work.3F\">https://rust-lang.zulipchat.com/#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/Other.20available.20work.3F</a> is still a WIP (const propagation is not actually propagating yet)</p>",
        "id": 164538141,
        "sender_full_name": "oli",
        "timestamp": 1556630550
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>I think the only thing that can be problematic with the way you're addressing is that you may not notice if someone is accessing a dangling pointer, because your local still lives</p>\n</blockquote>\n<p>Jmm... the other option is to still allocate and free using <code>StorageLive/Dead</code> and also at the beginning and end of execution and do double frees #YOLO</p>\n</blockquote>\n<p>I thing I'm gonna do the Right Thing™ and check which locals lack of <code>StorageLive/Dead</code> statements. Is possible that one local has just one of those two?</p>",
        "id": 164538452,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556630786
    },
    {
        "content": "<p>Meaning that they are allocated explicitly but freed at the end of the function, and viceversa?</p>",
        "id": 164538494,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556630832
    },
    {
        "content": "<p>I think that used to be a problem, not sure if it is anymore</p>",
        "id": 164538510,
        "sender_full_name": "oli",
        "timestamp": 1556630849
    },
    {
        "content": "<p>miri just checks if either exist</p>",
        "id": 164538519,
        "sender_full_name": "oli",
        "timestamp": 1556630863
    },
    {
        "content": "<p>if a local has either, that's weird but shouldnt need a special case -- that local may not get used until a storagelive happened. (so if it has just a StorageDead, it may never be used at all.)</p>",
        "id": 164539083,
        "sender_full_name": "RalfJ",
        "timestamp": 1556631297
    },
    {
        "content": "<p>I'll get hands on then</p>",
        "id": 164539237,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556631432
    },
    {
        "content": "<p>Ok It worked!!!</p>",
        "id": 164540201,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556632207
    },
    {
        "content": "<p>:D</p>",
        "id": 164540202,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556632209
    },
    {
        "content": "<p>I'm going to check that the whole memory is empty after execution</p>",
        "id": 164543842,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556634826
    },
    {
        "content": "<p>just to be sure</p>",
        "id": 164543845,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1556634830
    }
]