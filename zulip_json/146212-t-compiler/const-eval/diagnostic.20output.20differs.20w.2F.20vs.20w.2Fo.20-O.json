[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> while investigating issues associated with PR <a href=\"https://github.com/rust-lang/rust/issues/55532\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55532\">#55532</a>, I encountered the following seeming oddity: on the test in question, I get <em>slightly</em> different diagnostic output based on whether I do or don't include <code>-O</code></p>",
        "id": 146942155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600222
    },
    {
        "content": "<p>I wanted to know if 1. you are aware of this, 2. if its currently expected behavior, and 3. if there's any hope of ... eliminating the difference here?</p>",
        "id": 146942209,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> seems to be related to overflow checks?</p>",
        "id": 146942635,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600584
    },
    {
        "content": "<p>Oh ... because our semantics for overflow differ for with <code>-O</code> vs without, hmmm, yes?</p>",
        "id": 146942670,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600619
    },
    {
        "content": "<p>for anything MIR-based, that is kind-of expected. Not sure how much can be done. The MIR, once generated, encodes whether arithmetic is checked for overflow or not, so anything just executing the MIR will only do overflow checks in debug mode</p>",
        "id": 146942671,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600620
    },
    {
        "content": "<p>the thing is the semantics of MIR <em>do not</em> differ</p>",
        "id": 146942679,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600629
    },
    {
        "content": "<p>MIR building differs</p>",
        "id": 146942689,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600633
    },
    {
        "content": "<p>(I cannot remember now whether the intention was for such checks to be controlled via <code>-O</code> or <code>-g</code>, but either way, its an excellent hypothesis for why this is arising)</p>",
        "id": 146942747,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600658
    },
    {
        "content": "<p>I once was foolish enough to think that I could make MIR interpretation (miri/CTFE) check for overflow even when the MIR does not ask for it</p>",
        "id": 146942757,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600671
    },
    {
        "content": "<p>half a year later we had a segfault because of that^^</p>",
        "id": 146942763,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600681
    },
    {
        "content": "<p>wait, what?</p>",
        "id": 146942770,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600696
    },
    {
        "content": "<p>can you point me to the issue?</p>",
        "id": 146942779,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600702
    },
    {
        "content": "<p>well there were other things playing into this as well, it was because promotion happened and CTFE did not the same thing as run-time code</p>",
        "id": 146942803,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600720
    },
    {
        "content": "<p>that's just to explain why we do overflow checks only when the MIR explicitly asks for it</p>",
        "id": 146942836,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600755
    },
    {
        "content": "<blockquote>\n<p>can you point me to the issue?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/50814\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50814\">https://github.com/rust-lang/rust/issues/50814</a></p>",
        "id": 146942904,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600784
    },
    {
        "content": "<p>the interesting thing to me here is that the diagnostic output is <em>so</em> similar</p>",
        "id": 146942938,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600828
    },
    {
        "content": "<p><code>const_prop</code> however does special magic to still do overflow checks even in release mode, I think</p>",
        "id": 146942942,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600834
    },
    {
        "content": "<p>maybe that special magic is not quite close enough to what debug mode does</p>",
        "id": 146942948,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600847
    },
    {
        "content": "<p>like, it seems like const_eval is reporting a problem in either case</p>",
        "id": 146942949,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600848
    },
    {
        "content": "<p>but it gets tied in with the other overflow checking in different ways....?</p>",
        "id": 146942955,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600863
    },
    {
        "content": "<p>no const_eval involved here</p>",
        "id": 146942956,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600864
    },
    {
        "content": "<p>...</p>",
        "id": 146942959,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600867
    },
    {
        "content": "<p>this is not in const context</p>",
        "id": 146942961,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600869
    },
    {
        "content": "<p>this is <code>const_prop</code></p>",
        "id": 146942965,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600872
    },
    {
        "content": "<p>which opportunistically walks over <em>runtime</em> MIR and interprets the parts of it that it can to provide some diagnostics</p>",
        "id": 146943018,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600900
    },
    {
        "content": "<p>its a bad, horrible hack^^</p>",
        "id": 146943029,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600905
    },
    {
        "content": "<p><code>let x: i8 = --128;</code> is not const context?</p>",
        "id": 146943031,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600908
    },
    {
        "content": "<p>uh, no?</p>",
        "id": 146943036,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600915
    },
    {
        "content": "<p>okay hey I don't know</p>",
        "id": 146943039,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600920
    },
    {
        "content": "<p>there's no <code>const</code> there</p>",
        "id": 146943040,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600921
    },
    {
        "content": "<p>okay :)</p>",
        "id": 146943046,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600924
    },
    {
        "content": "<p>you have to ask for const context with <code>const</code></p>",
        "id": 146943063,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600937
    },
    {
        "content": "<p>I see</p>",
        "id": 146943067,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600938
    },
    {
        "content": "<p>otherwise its not const context</p>",
        "id": 146943070,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600942
    },
    {
        "content": "<p>I should see how this behaves if you do that</p>",
        "id": 146943077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600944
    },
    {
        "content": "<p>with one glaring exception: promotion</p>",
        "id": 146943082,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600946
    },
    {
        "content": "<p>promotion makes some things const context that the user didnt write in const context.</p>",
        "id": 146943103,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600970
    },
    {
        "content": "<p>okay, is this a case where promotion applies then?</p>",
        "id": 146943104,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600971
    },
    {
        "content": "<p>but in this case, there's no promotion, so this must be the <code>const_prop</code> pass</p>",
        "id": 146943113,
        "sender_full_name": "RalfJ",
        "timestamp": 1541600980
    },
    {
        "content": "<p>(because I think that was what I was thinking of. Sure, yeah, that's the ticket)</p>",
        "id": 146943116,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541600983
    },
    {
        "content": "<p>There's no promotion... because its not a <code>&amp;--128</code> or something?</p>",
        "id": 146943133,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541601002
    },
    {
        "content": "<p>exactly</p>",
        "id": 146943183,
        "sender_full_name": "RalfJ",
        "timestamp": 1541601006
    },
    {
        "content": "<p>Const prop is slightly hacky, because it had to replicate the old const folding const evaluator</p>",
        "id": 146945998,
        "sender_full_name": "oli",
        "timestamp": 1541601352
    },
    {
        "content": "<p>We could make const prop deterministic, so that --release overflows are also detected</p>",
        "id": 146946824,
        "sender_full_name": "oli",
        "timestamp": 1541601419
    },
    {
        "content": "<p>But we need to have a big discussion about the future of const prop anyway... I don't think it is good the way it is, because we're partially reimplementing miri</p>",
        "id": 146948088,
        "sender_full_name": "oli",
        "timestamp": 1541601514
    },
    {
        "content": "<p>Okay. Well this isn't the only case of a test that depends on the <code>-O</code> flag (cc <a href=\"#narrow/stream/131828-t-compiler/subject/Tests.20with.20optimization-level.20specified.20by.20the.20test.3F\" title=\"#narrow/stream/131828-t-compiler/subject/Tests.20with.20optimization-level.20specified.20by.20the.20test.3F\">T-compiler topic</a>), so I'll leave this be for now</p>",
        "id": 146949667,
        "sender_full_name": "pnkfelix",
        "timestamp": 1541601620
    }
]