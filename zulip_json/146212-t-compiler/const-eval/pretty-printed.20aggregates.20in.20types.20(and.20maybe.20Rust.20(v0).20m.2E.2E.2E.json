[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> hang on, we have <code>destructure_const</code>, and it's a query, right?</p>",
        "id": 193123408,
        "sender_full_name": "eddyb",
        "timestamp": 1586223629
    },
    {
        "content": "<ol>\n<li>isn't <code>const_field</code> obsolete then?</li>\n<li>do we really need anything else to be able to mangle non-trivial consts?</li>\n</ol>",
        "id": 193123428,
        "sender_full_name": "eddyb",
        "timestamp": 1586223684
    },
    {
        "content": "<p>there should be something that turns <code>&amp;T</code> into <code>T</code> I guess</p>",
        "id": 193123436,
        "sender_full_name": "eddyb",
        "timestamp": 1586223701
    },
    {
        "content": "<p>We're really running in circles</p>",
        "id": 193143633,
        "sender_full_name": "oli",
        "timestamp": 1586238979
    },
    {
        "content": "<p>you have reached my starting point</p>",
        "id": 193143636,
        "sender_full_name": "oli",
        "timestamp": 1586238983
    },
    {
        "content": "<p>The reason I started this discussion is because of our broken match code</p>",
        "id": 193143645,
        "sender_full_name": "oli",
        "timestamp": 1586239000
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/70743\" title=\"https://github.com/rust-lang/rust/pull/70743\">https://github.com/rust-lang/rust/pull/70743</a></p>",
        "id": 193143655,
        "sender_full_name": "oli",
        "timestamp": 1586239028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> replying to the wrong topic?</p>",
        "id": 193162336,
        "sender_full_name": "eddyb",
        "timestamp": 1586252870
    },
    {
        "content": "<p>this is about that thing I told you that we could make v0 value mangling work for tuples, structs and arrays by abusing <code>const_field</code></p>",
        "id": 193162405,
        "sender_full_name": "eddyb",
        "timestamp": 1586252892
    },
    {
        "content": "<p>const field is there for <code>simd_shuffle</code></p>",
        "id": 193163057,
        "sender_full_name": "oli",
        "timestamp": 1586253287
    },
    {
        "content": "<p>but we may be albe to eliminate it at some point</p>",
        "id": 193163071,
        "sender_full_name": "oli",
        "timestamp": 1586253295
    },
    {
        "content": "<p>I implemented <code>const_deref</code>, but I'm unsure how to handle wide pointers</p>",
        "id": 193163123,
        "sender_full_name": "oli",
        "timestamp": 1586253328
    },
    {
        "content": "<p>right... destructure_const should do the trick for <code>v0</code></p>",
        "id": 193163213,
        "sender_full_name": "oli",
        "timestamp": 1586253364
    },
    {
        "content": "<p>but is <code>const_field</code> <em>needed</em> if you can just call <code>destructure_const</code>?</p>",
        "id": 193163262,
        "sender_full_name": "eddyb",
        "timestamp": 1586253405
    },
    {
        "content": "<p>for <code>simd_shuffle</code> I mean</p>",
        "id": 193163269,
        "sender_full_name": "eddyb",
        "timestamp": 1586253411
    },
    {
        "content": "<p>ah</p>",
        "id": 193163337,
        "sender_full_name": "oli",
        "timestamp": 1586253469
    },
    {
        "content": "<p>well... it's a bit more expensive, but that's probably irrelevant</p>",
        "id": 193163349,
        "sender_full_name": "oli",
        "timestamp": 1586253481
    },
    {
        "content": "<p>wouldn't <code>const_field</code> be more expensive?</p>",
        "id": 193163408,
        "sender_full_name": "eddyb",
        "timestamp": 1586253502
    },
    {
        "content": "<p>given that it's called for every element of the array?</p>",
        "id": 193163419,
        "sender_full_name": "eddyb",
        "timestamp": 1586253512
    },
    {
        "content": "<p>since what <code>simd_shuffle</code> wants is to get the whole array, no?</p>",
        "id": 193163436,
        "sender_full_name": "eddyb",
        "timestamp": 1586253523
    },
    {
        "content": "<p>I thought it would just extract a single thing, but I probably misremember</p>",
        "id": 193163457,
        "sender_full_name": "oli",
        "timestamp": 1586253536
    },
    {
        "content": "<p>also <code>Vec&lt;ty::Const&gt;</code> should probably be <code>&amp;[ty::Const]</code> just to make the query even cheaper :P</p>",
        "id": 193163524,
        "sender_full_name": "eddyb",
        "timestamp": 1586253585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> oh wait even before mangling... we can pretty-print ADTs :D</p>",
        "id": 193183145,
        "sender_full_name": "eddyb",
        "timestamp": 1586264450
    },
    {
        "content": "<p>brought to you by reading:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"mh\">0x01</span><span class=\"p\">)</span>: <span class=\"nc\">std</span>::<span class=\"n\">option</span>::<span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193183220,
        "sender_full_name": "eddyb",
        "timestamp": 1586264483
    },
    {
        "content": "<p><code>destructure_const</code> + <code>ty::Adt</code> has all the info we need</p>",
        "id": 193183301,
        "sender_full_name": "eddyb",
        "timestamp": 1586264517
    },
    {
        "content": "<p>/me gets tempted to try and do this <em>now</em></p>",
        "id": 193183368,
        "sender_full_name": "eddyb",
        "timestamp": 1586264533
    },
    {
        "content": "<p>heh</p>",
        "id": 193183480,
        "sender_full_name": "oli",
        "timestamp": 1586264589
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/values.20in.20Rust.20(v0).20mangling/near/193163524\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/values.20in.20Rust.20(v0).20mangling/near/193163524\">said</a>:</p>\n<blockquote>\n<p>also <code>Vec&lt;ty::Const&gt;</code> should probably be <code>&amp;[ty::Const]</code> just to make the query even cheaper :P</p>\n</blockquote>\n<p>idk why I imagined <code>Vec</code>, it's <code>pub fields: &amp;'tcx [&amp;'tcx ty::Const&lt;'tcx&gt;]</code> already</p>",
        "id": 193184386,
        "sender_full_name": "eddyb",
        "timestamp": 1586264991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> 5min test logic: :D</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gd\">-       -         _11 = const {transmute(0x28): Temp}; // bb1[4]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28</span>\n<span class=\"gi\">+       -         _11 = const Temp#0{40u8,};       // bb1[4]: scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28</span>\n</pre></div>",
        "id": 193435934,
        "sender_full_name": "eddyb",
        "timestamp": 1586430883
    },
    {
        "content": "<p>the next step is to make it pretty :P</p>",
        "id": 193436023,
        "sender_full_name": "eddyb",
        "timestamp": 1586430941
    },
    {
        "content": "<p>but the fields work</p>",
        "id": 193436025,
        "sender_full_name": "eddyb",
        "timestamp": 1586430943
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"gd\">-       -         _1 = const {transmute(()): ((), ())}; // bb0[5]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28</span>\n<span class=\"gi\">+       -         _1 = const ((), ())#0{()#0{},()#0{},}; // bb0[5]: scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28</span>\n</pre></div>",
        "id": 193436136,
        "sender_full_name": "eddyb",
        "timestamp": 1586431003
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"gd\">-       +         ((*_4).0: alloc::raw_vec::RawVec&lt;u32&gt;) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::&lt;u32&gt;; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL</span>\n<span class=\"gi\">+       +         ((*_4).0: alloc::raw_vec::RawVec&lt;u32&gt;) = const alloc::raw_vec::RawVec::&lt;u32&gt;#0{std::ptr::Unique::&lt;u32&gt;#0{{0x4 as *const u32},std::marker::PhantomData::&lt;u32&gt;#0{},},0usize,std::alloc::Global#0{},}; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL</span>\n</pre></div>",
        "id": 193436188,
        "sender_full_name": "eddyb",
        "timestamp": 1586431056
    },
    {
        "content": "<p>oooh fascinating</p>",
        "id": 193436196,
        "sender_full_name": "eddyb",
        "timestamp": 1586431062
    },
    {
        "content": "<p>I wonder how many <code>alloc</code> dumps I can get rid of, <em>without</em> implementing anything for references</p>",
        "id": 193436313,
        "sender_full_name": "eddyb",
        "timestamp": 1586431140
    },
    {
        "content": "<p>whoa</p>",
        "id": 193436322,
        "sender_full_name": "oli",
        "timestamp": 1586431147
    },
    {
        "content": "<p>well... for references you can just steal the <code>deref_const</code> query from my other PR</p>",
        "id": 193436359,
        "sender_full_name": "oli",
        "timestamp": 1586431178
    },
    {
        "content": "<p>so that raw pointers and references still use <code>alloc</code></p>",
        "id": 193436363,
        "sender_full_name": "eddyb",
        "timestamp": 1586431181
    },
    {
        "content": "<p>(at least in MIR dumps)</p>",
        "id": 193436372,
        "sender_full_name": "eddyb",
        "timestamp": 1586431189
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"gd\">-       +         _3 = const {transmute(0x01): std::option::Option&lt;bool&gt;}; // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44</span>\n<span class=\"gi\">+       +         _3 = const std::option::Option::&lt;bool&gt;#1{true,}; // bb0[3]: scope 0 at $DIR/discriminant.rs:6:34: 6:44</span>\n</pre></div>",
        "id": 193436413,
        "sender_full_name": "eddyb",
        "timestamp": 1586431203
    },
    {
        "content": "<p>found the motivating example :P</p>",
        "id": 193436430,
        "sender_full_name": "eddyb",
        "timestamp": 1586431211
    },
    {
        "content": "<p>the <code>#1</code>s are the variant id?</p>",
        "id": 193436438,
        "sender_full_name": "oli",
        "timestamp": 1586431219
    },
    {
        "content": "<p>yeah</p>",
        "id": 193436443,
        "sender_full_name": "eddyb",
        "timestamp": 1586431226
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">destructure_const</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ty</span>::<span class=\"n\">ParamEnv</span>::<span class=\"n\">reveal_all</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">and</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">().</span><span class=\"n\">mk_const</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">val</span>: <span class=\"nc\">ty</span>::<span class=\"n\">ConstKind</span>::<span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">ct</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">})),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"n\">p</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">&quot;#{:?}{{&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"p\">.</span><span class=\"n\">variant</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">field</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"p\">.</span><span class=\"n\">fields</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">p</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">&quot;,&quot;</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">p</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">&quot;}}&quot;</span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193436480,
        "sender_full_name": "eddyb",
        "timestamp": 1586431245
    },
    {
        "content": "<p>that's literally it</p>",
        "id": 193436486,
        "sender_full_name": "eddyb",
        "timestamp": 1586431252
    },
    {
        "content": "<p>(I have a check that there's no type/const parameters, to make sure the empty param env is correct)</p>",
        "id": 193436523,
        "sender_full_name": "eddyb",
        "timestamp": 1586431276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> came back to this, spent a few minutes on it and got:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gd\">-       +         ((*_4).0: alloc::raw_vec::RawVec&lt;u32&gt;) = const ByRef { alloc: Allocation { bytes: [4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [] }), undef_mask: UndefMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 3 }, mutability: Not, extra: () }, offset: Size { raw: 0 } }: alloc::raw_vec::RawVec::&lt;u32&gt;; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL</span>\n<span class=\"gi\">+       +         ((*_4).0: alloc::raw_vec::RawVec&lt;u32&gt;) = const alloc::raw_vec::RawVec::&lt;u32&gt; { ptr: std::ptr::Unique::&lt;u32&gt; { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::&lt;u32&gt; }, cap: 0usize, alloc: std::alloc::Global }; // bb0[4]: scope 2 at $SRC_DIR/liballoc/vec.rs:LL:COL</span>\n</pre></div>",
        "id": 194383435,
        "sender_full_name": "eddyb",
        "timestamp": 1587082618
    },
    {
        "content": "<p>that RHS on the second line is:<br>\n<code>alloc::raw_vec::RawVec::&lt;u32&gt; { ptr: std::ptr::Unique::&lt;u32&gt; { pointer: {0x4 as *const u32}, _marker: std::marker::PhantomData::&lt;u32&gt; }, cap: 0usize, alloc: std::alloc::Global }</code></p>",
        "id": 194383531,
        "sender_full_name": "eddyb",
        "timestamp": 1587082703
    },
    {
        "content": "<p>aand we have a PR :D <a href=\"https://github.com/rust-lang/rust/pull/71232\" title=\"https://github.com/rust-lang/rust/pull/71232\">https://github.com/rust-lang/rust/pull/71232</a></p>",
        "id": 194391625,
        "sender_full_name": "eddyb",
        "timestamp": 1587092439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> thanks :D</p>",
        "id": 194460301,
        "sender_full_name": "eddyb",
        "timestamp": 1587138324
    },
    {
        "content": "<p>^^ that PR was so much less complex than I had anticipated</p>",
        "id": 194460856,
        "sender_full_name": "oli",
        "timestamp": 1587138567
    },
    {
        "content": "<p>told ya :P</p>",
        "id": 194460880,
        "sender_full_name": "eddyb",
        "timestamp": 1587138577
    },
    {
        "content": "<p>the moment I saw <code>destructure_const</code> I was like \"hang on the hard part will be making it pretty\"</p>",
        "id": 194460919,
        "sender_full_name": "eddyb",
        "timestamp": 1587138592
    },
    {
        "content": "<p>but also I think there's a bug in std, <code>fmt.debug_tuple(\"\").finish()</code> prints nothing instead of <code>()</code></p>",
        "id": 194461109,
        "sender_full_name": "eddyb",
        "timestamp": 1587138651
    },
    {
        "content": "<p>eh who cares</p>",
        "id": 194461130,
        "sender_full_name": "eddyb",
        "timestamp": 1587138662
    },
    {
        "content": "<p>(the trailing comma behavior does depend on whether the name is an empty string, so there's that :P)</p>",
        "id": 194461210,
        "sender_full_name": "eddyb",
        "timestamp": 1587138702
    },
    {
        "content": "<p>lolwat</p>",
        "id": 194461234,
        "sender_full_name": "oli",
        "timestamp": 1587138713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <code>debug_tuple</code> theoretically handles both tuples and tuple structs/variants</p>",
        "id": 194461316,
        "sender_full_name": "eddyb",
        "timestamp": 1587138737
    }
]