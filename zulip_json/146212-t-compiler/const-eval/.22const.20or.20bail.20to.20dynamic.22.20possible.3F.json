[
    {
        "content": "<p>Is it possible to deliberately mark something as interesting for the const-eval machinery to attempt on something and then bail to dynamic right now?  I am trying to think about how I would do it in \"real\" user-facing Rust code but I can't think of anything. It's fine even if it's just in the compiler, as I am thinking about how to improve already compiler-internal mechanics.</p>\n<p>I guess \"is it possible for something to have a marker that it is probably valuable to attempt to const-propagate it\"?</p>",
        "id": 209719532,
        "sender_full_name": "Jubilee",
        "timestamp": 1599778486
    },
    {
        "content": "<p>( it's a somewhat odd question I know, but it would even be useful if it actually could resolve to a different variant of an enumerated type so that at runtime it could execute a different code path. )</p>",
        "id": 209735125,
        "sender_full_name": "Jubilee",
        "timestamp": 1599790849
    },
    {
        "content": "<p>AFAIK there is no \"const eval hint\" implemented right now. The closest I could think of would be to mark a function as <code>inline=always</code> to increase the chances the computation is evaluated at compile time rather than the compiler deciding to save space and keep it as a function.</p>",
        "id": 209740426,
        "sender_full_name": "yodal",
        "timestamp": 1599799506
    },
    {
        "content": "<p>As with most of the talk of const prop around here recently, I don't think it matters much usually to worry about if something is being propagated, and when it really does matter, you probably want to ensure it is a const rather than hoping a hint is applied by using an actual const or cost generics once those get stabilized.</p>",
        "id": 209740616,
        "sender_full_name": "yodal",
        "timestamp": 1599799806
    },
    {
        "content": "<p>Well, the thing desired was actually the different dispatch. The function that takes the data and uses it, uh, basically is too complex to be optimized away currently even if everything is const-evaluated, but it could be much simpler if it knew it was working with predefined values.</p>",
        "id": 209751164,
        "sender_full_name": "Jubilee",
        "timestamp": 1599811402
    },
    {
        "content": "<p>In what ways are you thinking a function may be less complex when it is working with precomputed values? I suppose I'm having a hard time myself thinking of such a case</p>",
        "id": 209753614,
        "sender_full_name": "yodal",
        "timestamp": 1599813168
    },
    {
        "content": "<p>To me this sounds more closely related to optimization hints such as <code>#[inline]</code> than to const-eval. const-eval is specifically about <em>things that the compiler definitely has to compute at compile-time</em>, like array lengths.</p>",
        "id": 209760870,
        "sender_full_name": "RalfJ",
        "timestamp": 1599817909
    },
    {
        "content": "<p>While there is some overlap, there are also plenty of fundamental differences between const-eval and optimizations. const-eval <a href=\"https://github.com/rust-lang/rust/tree/master/compiler/rustc_mir/src/const_eval\">is implemented here</a> with some other crucial bits in other parts of the compiler (like <a href=\"https://github.com/rust-lang/rust/tree/master/compiler/rustc_mir/src/transform/check_consts\">checking code for being const-evaluable</a>); const-prop (the optimization) <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/transform/const_prop.rs\">is here</a>.</p>",
        "id": 209761074,
        "sender_full_name": "RalfJ",
        "timestamp": 1599818031
    },
    {
        "content": "<p>So while such a marker might be useful, it is probably more in the purview of the wg-mir-opt than this stream here, I think.</p>",
        "id": 209761158,
        "sender_full_name": "RalfJ",
        "timestamp": 1599818065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218608\">@yodal</span> One place this has come up is in things like <code>ptr::swap_nonoverlapping</code> -- if <code>count == 1</code> <em>as a const</em> it'd be nice to call <code>swap_nonoverlapping_one</code> instead of the general one, but that branch isn't worth it at runtime.  <a href=\"https://github.com/rust-lang/rust/blob/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/library/core/src/ptr/mod.rs#L418-L452\">https://github.com/rust-lang/rust/blob/bc57bd8c7e3e28f8bed4fced3973bfe04949918f/library/core/src/ptr/mod.rs#L418-L452</a></p>",
        "id": 209842715,
        "sender_full_name": "scottmcm",
        "timestamp": 1599863201
    },
    {
        "content": "<p>it is a very similar case (in formatting). Basically mustering the data is so much effort, but if it's known to already be there? _Just write it_. BAM, ten times faster. Literally.</p>",
        "id": 209845009,
        "sender_full_name": "Jubilee",
        "timestamp": 1599865204
    }
]