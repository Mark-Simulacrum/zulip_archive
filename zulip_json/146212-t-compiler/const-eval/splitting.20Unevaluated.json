[
    {
        "content": "<p>I think that at least some places get a bit cleaner when splitting <code>ConstKind::Unevaluated</code> into <code>Unevaluated</code> and <code>Promoted</code> or something instead of using <code>Unevaluated</code> for both. I would like to try splitting these. </p>\n<p>Does one of you have a preference here? cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span></p>",
        "id": 217677525,
        "sender_full_name": "lcnr",
        "timestamp": 1606162451
    },
    {
        "content": "<p>imo the difference between promoteds and other unevaluated anon consts is quite big</p>",
        "id": 217677614,
        "sender_full_name": "lcnr",
        "timestamp": 1606162516
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/splitting.20Unevaluated/near/217677614\">said</a>:</p>\n<blockquote>\n<p>imo the difference between promoteds and other unevaluated anon consts is quite big</p>\n</blockquote>\n<p>that's in itself something we should fix, not adjust the rest of the compiler around</p>",
        "id": 217684840,
        "sender_full_name": "RalfJ",
        "timestamp": 1606166814
    },
    {
        "content": "<p>also see <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20RFC.20draft\">this WIP RFC draft</a></p>",
        "id": 217684897,
        "sender_full_name": "RalfJ",
        "timestamp": 1606166859
    },
    {
        "content": "<p>doesn't your WIP draft increase the difference</p>",
        "id": 217684979,
        "sender_full_name": "lcnr",
        "timestamp": 1606166894
    },
    {
        "content": "<p>afaik promoteds do not participate in typeck and can't fail evaluation</p>",
        "id": 217685017,
        "sender_full_name": "lcnr",
        "timestamp": 1606166918
    },
    {
        "content": "<p>they are also accessed in a different way to other constants by using <code>promoted_mir</code></p>",
        "id": 217685053,
        "sender_full_name": "lcnr",
        "timestamp": 1606166948
    },
    {
        "content": "<p>re the wip draft, i think we could add and promote <code>CheckedDiv</code> and <code>CheckedMod</code> so we don't break <code>&amp;(1 % 2)</code></p>",
        "id": 217685428,
        "sender_full_name": "lcnr",
        "timestamp": 1606167196
    },
    {
        "content": "<p>i think i already wanted to do something similar while working on <code>AbstractConst</code>s</p>",
        "id": 217685450,
        "sender_full_name": "lcnr",
        "timestamp": 1606167213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/splitting.20Unevaluated/near/217684979\">said</a>:</p>\n<blockquote>\n<p>doesn't your WIP draft increase the difference</p>\n</blockquote>\n<p>how that? currently the difference is that promoteds can fail to evaluate. at least all cases that I have seen where promoteds need special-casing were due to that. you might be talking about other special cases.</p>",
        "id": 218120202,
        "sender_full_name": "RalfJ",
        "timestamp": 1606502952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/splitting.20Unevaluated/near/217685428\">said</a>:</p>\n<blockquote>\n<p>re the wip draft, i think we could add and promote <code>CheckedDiv</code> and <code>CheckedMod</code> so we don't break <code>&amp;(1 % 2)</code></p>\n</blockquote>\n<p>not breaking that is easy, we can just check the RHS and if it is a non-0 literal, accept the division. <code>&amp;(1 % (1+1))</code> is harder as we'd have to evaluate the RHS, which I don't think we want to do. if we truly need this then indeed we should go for <code>CheckedMod</code> I think.</p>",
        "id": 218120282,
        "sender_full_name": "RalfJ",
        "timestamp": 1606503014
    },
    {
        "content": "<p><code>1 / N</code> where <code>N</code> is a const param</p>",
        "id": 218121408,
        "sender_full_name": "lcnr",
        "timestamp": 1606503975
    },
    {
        "content": "<p>yes and that. my hope is that that doesnt happen in practice so we do not have to support it.^^</p>",
        "id": 218156798,
        "sender_full_name": "RalfJ",
        "timestamp": 1606556698
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n<p>i experimented a bit with pretty much moving promoteds out of <code>ty::Const</code> entirely and instead using an enum in <code>mir::Constant</code> and it seems fairly promising to me</p>",
        "id": 218933504,
        "sender_full_name": "lcnr",
        "timestamp": 1607171768
    },
    {
        "content": "<p>it makes dealing with <code>Constant</code>s a bit less pleasant in mir, though it also makes it more clear what's going on everywhere</p>",
        "id": 218933513,
        "sender_full_name": "lcnr",
        "timestamp": 1607171811
    },
    {
        "content": "<p>but imo it does noticeably improve interacting with consts in the type system</p>",
        "id": 218933523,
        "sender_full_name": "lcnr",
        "timestamp": 1607171862
    },
    {
        "content": "<p>will probably experiment a bit more and then open a draft PR and an MCP</p>",
        "id": 218933570,
        "sender_full_name": "lcnr",
        "timestamp": 1607171928
    },
    {
        "content": "<p>I remain opposed to this. Promoteds should be made <em>more</em> like other consts, not less like them. The more we have to make them a special case, the more something is wrong.</p>",
        "id": 218935469,
        "sender_full_name": "RalfJ",
        "timestamp": 1607175296
    },
    {
        "content": "<p>Could you please give an example for where this is helpful? So far I don't think I have seen one that would not be fixed by my RFC.</p>",
        "id": 218935473,
        "sender_full_name": "RalfJ",
        "timestamp": 1607175304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/splitting.20Unevaluated/near/218933504\">said</a>:</p>\n<blockquote>\n<p>i experimented a bit with pretty much moving promoteds out of <code>ty::Const</code> entirely and instead using an enum in <code>mir::Constant</code> and it seems fairly promising to me</p>\n</blockquote>\n<p>btw, we (<span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and me) have some plans to fairly fundamentally refactor all of this using valtrees, also to help const generics. my notes on this <a href=\"https://hackmd.io/Qvrj_eOFTkCHZrhJ7f1ItA\">can be found here</a>. I am not sure how what you said above fits into that plan.</p>",
        "id": 218980176,
        "sender_full_name": "RalfJ",
        "timestamp": 1607250454
    },
    {
        "content": "<p>it would fit in fairly well</p>",
        "id": 218980888,
        "sender_full_name": "lcnr",
        "timestamp": 1607251664
    },
    {
        "content": "<p>i think, so afaict you want to pretty much use <code>mir::Const</code> inside of <code>mir::Operand</code>?</p>",
        "id": 218980935,
        "sender_full_name": "lcnr",
        "timestamp": 1607251713
    },
    {
        "content": "<p>this is the only place where promoted can exist as well</p>",
        "id": 218980941,
        "sender_full_name": "lcnr",
        "timestamp": 1607251725
    },
    {
        "content": "<p>so we would end up using</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">LazyConst</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Param</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Infer</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bound</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Placeholder</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Promoted</span><span class=\"p\">(</span><span class=\"n\">def</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">P</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Evaluated</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218980957,
        "sender_full_name": "lcnr",
        "timestamp": 1607251784
    },
    {
        "content": "<p>with <code>mir::Const</code> using <code>P = Promoted</code></p>",
        "id": 218980959,
        "sender_full_name": "lcnr",
        "timestamp": 1607251794
    },
    {
        "content": "<p>and <code>ty::Const</code> using <code>P = !</code> with allows us to completely ignore the <code>Promoted</code> variant when using <code>feature(exhaustive_patterns)</code></p>",
        "id": 218981007,
        "sender_full_name": "lcnr",
        "timestamp": 1607251829
    },
    {
        "content": "<p>i think we could even remove <code>Infer</code> variant for <code>mir::Const</code> this way as that shouldn't exist</p>",
        "id": 218981026,
        "sender_full_name": "lcnr",
        "timestamp": 1607251915
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/splitting.20Unevaluated/near/218980935\">said</a>:</p>\n<blockquote>\n<p>i think, so afaict you want to pretty much use <code>mir::Const</code> inside of <code>mir::Operand</code>?</p>\n</blockquote>\n<p>yes. going through a <code>ty</code> type there conceptually makes little sense anyway.</p>",
        "id": 218981876,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/splitting.20Unevaluated/near/218981007\">said</a>:</p>\n<blockquote>\n<p>and <code>ty::Const</code> using <code>P = !</code> with allows us to completely ignore the <code>Promoted</code> variant when using <code>feature(exhaustive_patterns)</code></p>\n</blockquote>\n<p>so which problems is this solving? I assume whatever it is that <code>Unevaluated</code> takes as argument can be an opaque type \"identifying a constant (any constant, promoted or not)\" and then there is a way to evaluate any such identified constant. With that being the case, it just shouldn't matter whether this is a promoted or not?</p>",
        "id": 218981896,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253212
    },
    {
        "content": "<p>The only <code>ty::Const</code> which can be promoted are the ones used in <code>mir::Operand</code></p>",
        "id": 218981967,
        "sender_full_name": "lcnr",
        "timestamp": 1607253329
    },
    {
        "content": "<p>you cannot have a type which contains a promoted constant</p>",
        "id": 218981970,
        "sender_full_name": "lcnr",
        "timestamp": 1607253341
    },
    {
        "content": "<blockquote>\n<p>so which problems is this solving?</p>\n</blockquote>\n<p>that there are no <code>ty::Const</code> which contain a promoted</p>",
        "id": 218982016,
        "sender_full_name": "lcnr",
        "timestamp": 1607253394
    },
    {
        "content": "<p>so it's currently always <code>None</code></p>",
        "id": 218982020,
        "sender_full_name": "lcnr",
        "timestamp": 1607253403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/splitting.20Unevaluated/near/218982020\">said</a>:</p>\n<blockquote>\n<p>so it's currently always <code>None</code></p>\n</blockquote>\n<p>it = what?</p>",
        "id": 218982028,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253435
    },
    {
        "content": "<p><code>ty::Const</code></p>",
        "id": 218982029,
        "sender_full_name": "lcnr",
        "timestamp": 1607253441
    },
    {
        "content": "<p><code>ty::Const</code> is <code>None</code>?</p>",
        "id": 218982035,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253467
    },
    {
        "content": "<p>for <code>ty::Const</code> once we added <code>mir::Const</code> the <code>Option&lt;Promoted&gt;</code> of <code>ConstKInd::Unevaluated</code> would always be none</p>",
        "id": 218982037,
        "sender_full_name": "lcnr",
        "timestamp": 1607253471
    },
    {
        "content": "<p>I assume you refer to this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">WithOptConstParam</span><span class=\"o\">&lt;</span><span class=\"n\">DefId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SubstsRef</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Promoted</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218982038,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253474
    },
    {
        "content": "<p>yes</p>",
        "id": 218982043,
        "sender_full_name": "lcnr",
        "timestamp": 1607253481
    },
    {
        "content": "<p>so what I am proposing is to replace this by</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">ConstId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SubstsRef</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 218982081,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253499
    },
    {
        "content": "<p>yeah</p>",
        "id": 218982082,
        "sender_full_name": "lcnr",
        "timestamp": 1607253505
    },
    {
        "content": "<p>where <code>ConstId</code> is its own abstraction and nboody in the outside world cares if there even exists a <code>promoted</code> field</p>",
        "id": 218982087,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253522
    },
    {
        "content": "<p>no, <code>Unevaluated(WithOptConstParam&lt;DefId&gt;, SubstsRef&lt;'tcx&gt;)</code></p>",
        "id": 218982088,
        "sender_full_name": "lcnr",
        "timestamp": 1607253528
    },
    {
        "content": "<p>there are no promoteds inside of types</p>",
        "id": 218982090,
        "sender_full_name": "lcnr",
        "timestamp": 1607253540
    },
    {
        "content": "<p>right so what?</p>",
        "id": 218982094,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253548
    },
    {
        "content": "<p>and then there are functions to say \"please give me the result of evaluating that <code>ConstId</code>\"</p>",
        "id": 218982096,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253554
    },
    {
        "content": "<p>IOW, I agree types shouldnt have to care about that promoteds field. but I think your approach is not the right one to achieve this.</p>",
        "id": 218982103,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253580
    },
    {
        "content": "<p>note that I wrote above is \"what <em>I</em> am proposing\"</p>",
        "id": 218982107,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253595
    },
    {
        "content": "<p>I didnt claim his to be the same as your proposal</p>",
        "id": 218982119,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253602
    },
    {
        "content": "<p>misread that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 218982149,
        "sender_full_name": "lcnr",
        "timestamp": 1607253612
    },
    {
        "content": "<p>I thought so :D</p>",
        "id": 218982154,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253617
    },
    {
        "content": "<p>now, this <code>WithOptConstParam</code> stuff makes this even more \"interesting\"</p>",
        "id": 218982167,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253643
    },
    {
        "content": "<p>since <code>mir::Constant</code> shouldnt have to care about that, right?</p>",
        "id": 218982170,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253654
    },
    {
        "content": "<p>I think so</p>",
        "id": 218982227,
        "sender_full_name": "lcnr",
        "timestamp": 1607253733
    },
    {
        "content": "<p>though maybe we do some weird stuff with constants in mir during borrowck or something</p>",
        "id": 218982239,
        "sender_full_name": "lcnr",
        "timestamp": 1607253767
    },
    {
        "content": "<p>do we try to evaluate <code>mir::Constant</code>s when optimizing?</p>",
        "id": 218982251,
        "sender_full_name": "lcnr",
        "timestamp": 1607253814
    },
    {
        "content": "<p>I see no reason why we wouldnt</p>",
        "id": 218982254,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253829
    },
    {
        "content": "<p>then we need <code>WithOptConstParam</code> i think</p>",
        "id": 218982256,
        "sender_full_name": "lcnr",
        "timestamp": 1607253839
    },
    {
        "content": "<p>I dont think so. the type of a <code>mir::Constant</code> should always be known locally.</p>",
        "id": 218982298,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253878
    },
    {
        "content": "<p>constants in MIR worked just fine before you added that thing. I consider that constructive evidence that it is not needed. :D</p>",
        "id": 218982303,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253896
    },
    {
        "content": "<p>we never used const params in type dependent paths before i added that thing</p>",
        "id": 218982319,
        "sender_full_name": "lcnr",
        "timestamp": 1607253928
    },
    {
        "content": "<p>so typeck also worked fine before i added this</p>",
        "id": 218982324,
        "sender_full_name": "lcnr",
        "timestamp": 1607253939
    },
    {
        "content": "<p>but there are no <code>mir::Constant</code> there I think</p>",
        "id": 218982328,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253942
    },
    {
        "content": "<p>that's true</p>",
        "id": 218982335,
        "sender_full_name": "lcnr",
        "timestamp": 1607253956
    },
    {
        "content": "<p>as you said yourself, it's about <em>type</em>-dependent paths</p>",
        "id": 218982372,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253964
    },
    {
        "content": "<p>IOW, it's about <code>ty::Const</code></p>",
        "id": 218982375,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253970
    },
    {
        "content": "<p>not <code>mir::Const</code></p>",
        "id": 218982377,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253973
    },
    {
        "content": "<p>yeah, <code>mir::Constant</code> is fine</p>",
        "id": 218982378,
        "sender_full_name": "lcnr",
        "timestamp": 1607253974
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> thinking is hard</p>",
        "id": 218982381,
        "sender_full_name": "lcnr",
        "timestamp": 1607253992
    },
    {
        "content": "<p>so I wonder if it wouldnt make more sense to move the wrapper out, and have <code>WithOptConstParam&lt;ty::Const&gt;</code>...</p>",
        "id": 218982383,
        "sender_full_name": "RalfJ",
        "timestamp": 1607253997
    },
    {
        "content": "<p>the only alternative I see is to make the <code>LazyConst</code> from my proposal generic not only in the type of the evaluated const but also the type of the \"const identifer\". but that'll make working on LazyConst generically quite a bit more painful -- now we need a <code>trait ConstId</code> or so to even be able to write functions like \"please evaluate that <code>LazyConst</code>\"</p>",
        "id": 218982457,
        "sender_full_name": "RalfJ",
        "timestamp": 1607254112
    },
    {
        "content": "<p>yeah, adding a param to toggle between <code>DefId</code> and <code>WithOptConstParam&lt;DefId&gt;</code> seems like a hastle</p>",
        "id": 218982474,
        "sender_full_name": "lcnr",
        "timestamp": 1607254152
    },
    {
        "content": "<p>though <code>WithOptConstParam</code> feels like something you \"have to learn\" when dealing with unevaluated constants and they don't really worsen the perf when dealing with <code>ConstKind::Unevaluated</code> so I don't feel too bad about keeping it even for <code>mir::Const</code></p>",
        "id": 218982534,
        "sender_full_name": "lcnr",
        "timestamp": 1607254233
    },
    {
        "content": "<p><code>ConstKind::Promoted</code> could use a plain <code>DefId</code> though</p>",
        "id": 218982536,
        "sender_full_name": "lcnr",
        "timestamp": 1607254246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/splitting.20Unevaluated/near/218982474\">said</a>:</p>\n<blockquote>\n<p>yeah, adding a param to toggle between <code>DefId</code> and <code>WithOptConstParam&lt;DefId&gt;</code> seems like a hastle</p>\n</blockquote>\n<p>well, but it would also provide an alternative way to implement your proposal:<br>\n<code>ty::Const = LazyConst&lt;WithOptConstParam&lt;DefId&gt;, Valtree&gt;</code> and<br>\n<code>mir::Const = LazyConst&lt;(DefId, Option&lt;Promoted&gt;), ConstVal&gt;</code></p>",
        "id": 218984277,
        "sender_full_name": "RalfJ",
        "timestamp": 1607257000
    },
    {
        "content": "<p>I am not sure how well that would work, but I'd prefer this over adding a <code>LazyConst::Promoted</code> variant</p>",
        "id": 218984284,
        "sender_full_name": "RalfJ",
        "timestamp": 1607257025
    }
]