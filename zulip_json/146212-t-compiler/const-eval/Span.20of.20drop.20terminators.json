[
    {
        "content": "<p>I am working on <a href=\"https://github.com/rust-lang/rust/issues/72907\">https://github.com/rust-lang/rust/issues/72907</a> and I started to poke the spans to see if i was able to get an span that matches the place where the dropping happens. I've tried to use the drop terminator's span to produce a second message:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_if_match)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_loop)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">never_returned</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">always_returned</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">always_returned</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">never_returned</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"c1\">// ^^^^^^^^^^^^^^^  location of the terminator</span>\n<span class=\"w\">        </span><span class=\"n\">never_returned</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"n\">always_returned</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>However it seems it would be better to show the error one line after according to the comments in the issue? or is it OK to let the location for the message there and add a comment like \"value is dropped after here\".</p>",
        "id": 201055656,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592332085
    },
    {
        "content": "<p>why one line after? This looks like the right location</p>",
        "id": 201108151,
        "sender_full_name": "oli",
        "timestamp": 1592378388
    },
    {
        "content": "<p>in the second loop iteration, <code>always_returned</code> is <code>Some</code> and thus overwritten with <code>None</code> and thus dropped</p>",
        "id": 201108209,
        "sender_full_name": "oli",
        "timestamp": 1592378412
    },
    {
        "content": "<p>oh right</p>",
        "id": 201108319,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592378529
    },
    {
        "content": "<p>yeah I was focusing on the line number and apparently I got one line less somehow so I was confused</p>",
        "id": 201108346,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592378581
    },
    {
        "content": "<p>But then I have a 2nd question :P</p>",
        "id": 201108359,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592378595
    },
    {
        "content": "<p>How can I emit an error that involves more than one span inside <code>validation::Validator</code>?  Right now we're just calling <code>Validator::check_op_spanned(LiveDrop, span)</code> which just emits an error in <code>span</code>. I see no way of passing a second span to it or emit the error without \"reimplementing\" it</p>",
        "id": 201108768,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592378913
    },
    {
        "content": "<p>hmm... you can give <code>LiveDrop</code> a field</p>",
        "id": 201110335,
        "sender_full_name": "oli",
        "timestamp": 1592380259
    },
    {
        "content": "<p>yep that's it</p>",
        "id": 201110368,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592380300
    },
    {
        "content": "<p>thanks :P</p>",
        "id": 201110369,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592380301
    },
    {
        "content": "<p>I was under the impression that the <code>NonConstOp</code> methods were all static</p>",
        "id": 201110430,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592380327
    },
    {
        "content": "<p>:D this thing was <em>designed</em> it didn't grow</p>",
        "id": 201110481,
        "sender_full_name": "oli",
        "timestamp": 1592380401
    },
    {
        "content": "<p>heh</p>",
        "id": 201110633,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592380534
    }
]