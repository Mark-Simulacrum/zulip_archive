[
    {
        "content": "<p>Hello, everyone. I'm looking for help getting started on <a href=\"https://github.com/rust-lang/rust/issues/53325\">#53325</a>. I see it's labelled <code>E-mentor</code> and <code>E-medium</code>. I've done only three PRs so far: Two for the test suite and one for error messages. Was looking to dive in deeper.</p>",
        "id": 210357230,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600328719
    },
    {
        "content": "<p>Oh wow, that issue is ancient <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 210358424,
        "sender_full_name": "oli",
        "timestamp": 1600329457
    },
    {
        "content": "<p>But still as relevant as ever</p>",
        "id": 210358450,
        "sender_full_name": "oli",
        "timestamp": 1600329479
    },
    {
        "content": "<p>I see it's labelled <code>P-low</code>, would there be a better issue to work on?</p>",
        "id": 210358552,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600329520
    },
    {
        "content": "<p>Oh that just means we don't look at it often during triage</p>",
        "id": 210358605,
        "sender_full_name": "oli",
        "timestamp": 1600329549
    },
    {
        "content": "<p>I personally would love for this to finally get resolved</p>",
        "id": 210358617,
        "sender_full_name": "oli",
        "timestamp": 1600329561
    },
    {
        "content": "<p>so... the cool thing is that printing the memory of an allocation is a single function call nowadays</p>",
        "id": 210358646,
        "sender_full_name": "oli",
        "timestamp": 1600329586
    },
    {
        "content": "<p>So I guess we print it to a String and put that String into a <code>note</code> on the diagnostic</p>",
        "id": 210358757,
        "sender_full_name": "oli",
        "timestamp": 1600329646
    },
    {
        "content": "<p>The harder part is to know which allocation to print, but maybe the validation error carries that?</p>",
        "id": 210358800,
        "sender_full_name": "oli",
        "timestamp": 1600329671
    },
    {
        "content": "<p>hmm, doesn't look like it</p>",
        "id": 210358835,
        "sender_full_name": "oli",
        "timestamp": 1600329708
    },
    {
        "content": "<p>So... step 1: Find out where that specific error is built (not emitted, but built in <code>rustc_mir/interpret/validation.rs</code>)</p>",
        "id": 210358931,
        "sender_full_name": "oli",
        "timestamp": 1600329764
    },
    {
        "content": "<p>step 2: add a <code>Pointer</code> field to that error</p>",
        "id": 210358986,
        "sender_full_name": "oli",
        "timestamp": 1600329803
    },
    {
        "content": "<p>Mhmm, step 3, where it's emitted, add a note?</p>",
        "id": 210359111,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600329879
    },
    {
        "content": "<p>sorry, got a phone call</p>",
        "id": 210359477,
        "sender_full_name": "oli",
        "timestamp": 1600330113
    },
    {
        "content": "<p>step 3: at the emitter site invoke <code>write_allocation_track_relocs</code> (may need to make that one public) to fill in a <code>String</code></p>",
        "id": 210359517,
        "sender_full_name": "oli",
        "timestamp": 1600330149
    },
    {
        "content": "<p>then use that string to add a note to the diagnostic</p>",
        "id": 210359536,
        "sender_full_name": "oli",
        "timestamp": 1600330161
    },
    {
        "content": "<p>Does that function exist?</p>",
        "id": 210359599,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600330203
    },
    {
        "content": "<p>yes, but it's private</p>",
        "id": 210359642,
        "sender_full_name": "oli",
        "timestamp": 1600330222
    },
    {
        "content": "<p>let me check for a public wrapper, one moment</p>",
        "id": 210359646,
        "sender_full_name": "oli",
        "timestamp": 1600330227
    },
    {
        "content": "<p>Thanks so much for all the help. It means a lot to me. <span aria-label=\"hearts\" class=\"emoji emoji-2665\" role=\"img\" title=\"hearts\">:hearts:</span>Ô∏è</p>",
        "id": 210359677,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600330257
    },
    {
        "content": "<p>Ah no, you'll want <code>display_allocation</code></p>",
        "id": 210359719,
        "sender_full_name": "oli",
        "timestamp": 1600330285
    },
    {
        "content": "<p>which gives you a formatter, so <code>display_allocation(tcx, allocation).to_string()</code>. This only gives you a single allocation, in the future we may print more, but let's start with just the allocation that we're blaming for things</p>",
        "id": 210359807,
        "sender_full_name": "oli",
        "timestamp": 1600330331
    },
    {
        "content": "<p>Okay. I'll start working on it in a few hours, and come back if I have any questions. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 210359909,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600330420
    },
    {
        "content": "<p>ok cool! yes please don't hesitate to ask anything!</p>",
        "id": 210360532,
        "sender_full_name": "oli",
        "timestamp": 1600330846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do you know which function this will hit in <code>valididty.rs</code>?</p>",
        "id": 210481225,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600408545
    },
    {
        "content": "<p>so... I guess it's <a href=\"https://github.com/rust-lang/rust/blob/f3c923a13a458c35ee26b3513533fce8a15c9c05/compiler/rustc_mir/src/interpret/validity.rs#L509\">https://github.com/rust-lang/rust/blob/f3c923a13a458c35ee26b3513533fce8a15c9c05/compiler/rustc_mir/src/interpret/validity.rs#L509</a> but I don't see how to inject an allocation there...</p>",
        "id": 210488507,
        "sender_full_name": "oli",
        "timestamp": 1600415734
    },
    {
        "content": "<p>There's this: <a href=\"https://github.com/rust-lang/rust/blob/f3c923a13a458c35ee26b3513533fce8a15c9c05/compiler/rustc_mir/src/interpret/validity.rs#L45\">https://github.com/rust-lang/rust/blob/f3c923a13a458c35ee26b3513533fce8a15c9c05/compiler/rustc_mir/src/interpret/validity.rs#L45</a></p>\n<p>But that's a lot more general. And it changes the ABI, not sure if that's okay.</p>",
        "id": 210488619,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600415803
    },
    {
        "content": "<p>Should I add a <code>Pointer</code> to <code>ValidationFailure</code>?</p>",
        "id": 210488645,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600415831
    },
    {
        "content": "<p>Yea that's what I'm thinking, too, but then you'll also have to pass it into every <code>throw_validation_failure</code> invocation</p>",
        "id": 210488797,
        "sender_full_name": "oli",
        "timestamp": 1600415935
    },
    {
        "content": "<p>maybe we can just do this at the validation site and report the <em>entire</em> constant instead of just the broken part</p>",
        "id": 210488820,
        "sender_full_name": "oli",
        "timestamp": 1600415954
    },
    {
        "content": "<p>though that won't give us the location that we could highlight</p>",
        "id": 210488837,
        "sender_full_name": "oli",
        "timestamp": 1600415969
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ideas? Opinions?</p>",
        "id": 210488849,
        "sender_full_name": "oli",
        "timestamp": 1600415978
    },
    {
        "content": "<p>Perhaps an <code>Option&lt;Pointer&gt;</code>?</p>",
        "id": 210489299,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600416271
    },
    {
        "content": "<p>Sure, we could start out with just improving the mentioned case and generalizing later</p>",
        "id": 210497438,
        "sender_full_name": "oli",
        "timestamp": 1600422154
    },
    {
        "content": "<p>I'd still like to hear from <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> before fiddling with the validator as he put a lot of design effort into that API</p>",
        "id": 210497663,
        "sender_full_name": "oli",
        "timestamp": 1600422326
    },
    {
        "content": "<p>(and I don't want to waste your time with going off on an implementation that we may have to throw away)</p>",
        "id": 210497740,
        "sender_full_name": "oli",
        "timestamp": 1600422365
    },
    {
        "content": "<p>(the issue description in <a href=\"https://github.com/rust-lang/rust/issues/53325\">#53325</a> is really confusing as the issue got repurposed without updating the description^^)</p>",
        "id": 210502350,
        "sender_full_name": "RalfJ",
        "timestamp": 1600425984
    },
    {
        "content": "<p>hm, on first sight it seems reasonable that <code>throw_validation_failure</code> would not just take the path information for locating the error in the value (type-driven), but also some way to locate the error in memory</p>",
        "id": 210503706,
        "sender_full_name": "RalfJ",
        "timestamp": 1600426889
    },
    {
        "content": "<p>however, do we even always have memory? we are validating arbitrary <code>OpTy</code></p>",
        "id": 210503745,
        "sender_full_name": "RalfJ",
        "timestamp": 1600426918
    },
    {
        "content": "<p>but maybe once <a href=\"https://github.com/rust-lang/rust/pull/74949\">https://github.com/rust-lang/rust/pull/74949</a> finally lands we'll only have to validate in-memory things?</p>",
        "id": 210503821,
        "sender_full_name": "RalfJ",
        "timestamp": 1600426952
    },
    {
        "content": "<p>So it seems the consensus is \"let's leave it as-is for now\", right?</p>",
        "id": 210506215,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600428634
    },
    {
        "content": "<p>leave what as-is? not sure what the alternative plan is to adding a <code>Pointer</code>?</p>",
        "id": 210506242,
        "sender_full_name": "RalfJ",
        "timestamp": 1600428667
    },
    {
        "content": "<p>The issue. Or would you recommend adding a <code>Pointer</code>/<code>Option&lt;Pointer&gt;</code>?</p>",
        "id": 210506290,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600428711
    },
    {
        "content": "<p>The alternative is to not have an error location and just dump the constant's memory</p>",
        "id": 210506351,
        "sender_full_name": "oli",
        "timestamp": 1600428732
    },
    {
        "content": "<p>not sure how amused users are if we tell them \"uh sorry, due to impl constraints here's a memory dump for you to find your own problems in\"</p>",
        "id": 210506380,
        "sender_full_name": "oli",
        "timestamp": 1600428763
    },
    {
        "content": "<p>But I think this would be a reasonable start for any constants that are backed by memory</p>",
        "id": 210506446,
        "sender_full_name": "oli",
        "timestamp": 1600428819
    },
    {
        "content": "<p>Especially when we have the information, even if not easily accessible.</p>",
        "id": 210506447,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600428819
    },
    {
        "content": "<p>So... bascially in <a href=\"https://github.com/rust-lang/rust/blob/f3c923a13a458c35ee26b3513533fce8a15c9c05/compiler/rustc_mir/src/const_eval/eval_queries.rs#L225\">https://github.com/rust-lang/rust/blob/f3c923a13a458c35ee26b3513533fce8a15c9c05/compiler/rustc_mir/src/const_eval/eval_queries.rs#L225</a> you can grab the <code>RawConst</code> and get the <code>AllocId</code> from that</p>",
        "id": 210506589,
        "sender_full_name": "oli",
        "timestamp": 1600428938
    },
    {
        "content": "<p>then you can use the printing we discussed and attach it as a note in <a href=\"https://github.com/rust-lang/rust/blob/f3c923a13a458c35ee26b3513533fce8a15c9c05/compiler/rustc_mir/src/const_eval/eval_queries.rs#L227\">https://github.com/rust-lang/rust/blob/f3c923a13a458c35ee26b3513533fce8a15c9c05/compiler/rustc_mir/src/const_eval/eval_queries.rs#L227</a></p>",
        "id": 210506628,
        "sender_full_name": "oli",
        "timestamp": 1600428964
    },
    {
        "content": "<p>This would be the first step. As a next step we'd have to replicate the logic for finding all allocations mentioned by that root allocation and also print those. But we can do that in a separate PR</p>",
        "id": 210506703,
        "sender_full_name": "oli",
        "timestamp": 1600429039
    },
    {
        "content": "<p>This PR will cause lots of ui test changes already <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 210506725,
        "sender_full_name": "oli",
        "timestamp": 1600429056
    },
    {
        "content": "<p>Thanks for digging into this! This approach seems quite doable.</p>",
        "id": 210506812,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600429117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256313\">Hameer Abbasi</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Looking.20for.20help.20on.20.2353325/near/210506290\">said</a>:</p>\n<blockquote>\n<p>The issue. Or would you recommend adding a <code>Pointer</code>/<code>Option&lt;Pointer&gt;</code>?</p>\n</blockquote>\n<p>yeah I think <code>Option&lt;Pointer&gt;</code> seems fine, then we can use the information whenever we have it</p>",
        "id": 210507059,
        "sender_full_name": "RalfJ",
        "timestamp": 1600429301
    },
    {
        "content": "<p>PR is up: <a href=\"https://github.com/rust-lang/rust/pull/76881\">https://github.com/rust-lang/rust/pull/76881</a></p>",
        "id": 210523325,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600438094
    },
    {
        "content": "<p>Hello. In the above-mentioned PR I'm having trouble normalising the output to something that doensn't break on 32-bit systems. I've tried a few regex variants, for example</p>\n<div class=\"codehilite\"><pre><span></span><code>// normalize-stderr-test &quot;\\(size: [0-9]+, align: [0-9]+\\) {[\\s\\S]*}&quot;-&gt;&quot;(size: XX, align: YY) {...}&quot;\n</code></pre></div>\n\n\n<p>which works <a href=\"http://regexr.com/5cd1d\">here</a> but doesn't in the comment, raising the error:</p>\n<p><code>error: repetition quantifier expects a valid decimal</code></p>\n<p>cc <span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span></p>",
        "id": 210653314,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600585475
    },
    {
        "content": "<p>IIUC, the <code>rust-regex</code> library is _always_ treating <code>*</code> as a repetition quantifier, when it can match characters as well. Is this a known bug?</p>",
        "id": 210653514,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600585814
    },
    {
        "content": "<p>doesn't the following work? <code>\\*</code></p>",
        "id": 210654027,
        "sender_full_name": "lcnr",
        "timestamp": 1600586953
    },
    {
        "content": "<p>I believe that's for the literal <code>*</code> character, not matching any string, which is what I'd like to do here. In any case, it doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><code>regex parse error:\n    \\(size: [0-9]+, align: [0-9]+\\) {[\\s\\S]\\*}\n                                     ^\nerror: repetition quantifier expects a valid decimal\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n)&#39;, src/tools/compiletest/src/runtest.rs:3388:42\n</code></pre></div>",
        "id": 210654117,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600587080
    },
    {
        "content": "<p>I am really not using regex enough to be too helpful here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> what prevents you from using  .* instead of  <code>{[\\s\\S]\\*}</code>?</p>\n<p>Or more naively, how do curly braces work in regex?</p>",
        "id": 210654382,
        "sender_full_name": "lcnr",
        "timestamp": 1600587600
    },
    {
        "content": "<p>oh... I don't know if these things can do multi-line processing</p>",
        "id": 210654497,
        "sender_full_name": "oli",
        "timestamp": 1600587832
    },
    {
        "content": "<p>One thing is that you need to escape the <code>\\{</code> I think</p>",
        "id": 210654541,
        "sender_full_name": "oli",
        "timestamp": 1600587904
    },
    {
        "content": "<p>another is that  you can try using <code>[^\\}]*</code> as a pattern</p>",
        "id": 210654544,
        "sender_full_name": "oli",
        "timestamp": 1600587911
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Looking.20for.20help.20on.20.2353325/near/210654497\">said</a>:</p>\n<blockquote>\n<p>oh... I don't know if these things can do multi-line processing</p>\n</blockquote>\n<p>They can't na√Øvely. Maybe there's an option though.</p>\n<p>/me digs furiously into code</p>",
        "id": 210654602,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600587993
    },
    {
        "content": "<p>Alternatively we can teach compiletest something to handle this specific case. Like where we specifiy a start and end pattern (in our case the end pattern is <code>^\\w*\\}\\w*$</code> I think?)</p>",
        "id": 210655573,
        "sender_full_name": "oli",
        "timestamp": 1600589810
    },
    {
        "content": "<p>so it would just skip all lines after the first pattern until it encounters the second pattern</p>",
        "id": 210655584,
        "sender_full_name": "oli",
        "timestamp": 1600589835
    },
    {
        "content": "<p>what do you think about that?</p>",
        "id": 210655586,
        "sender_full_name": "oli",
        "timestamp": 1600589839
    },
    {
        "content": "<p>I could do that; where in compiletest would I have to touch?</p>",
        "id": 210655763,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600590143
    },
    {
        "content": "<p>grep for <code>normalize-stderr-test</code> in the source of compiletest, I can give you more info in an hour, breakfast time</p>",
        "id": 210655824,
        "sender_full_name": "oli",
        "timestamp": 1600590251
    },
    {
        "content": "<p>hmm... this is all not fun</p>",
        "id": 210656677,
        "sender_full_name": "oli",
        "timestamp": 1600591929
    },
    {
        "content": "<p>maybe we need something like the 32/64 bit difference for mir-opt tests, so we'd get two files, one per bit size</p>",
        "id": 210656684,
        "sender_full_name": "oli",
        "timestamp": 1600591957
    },
    {
        "content": "<p>I wonder if we should just do an MCP and see how everyone likes it</p>",
        "id": 210656690,
        "sender_full_name": "oli",
        "timestamp": 1600592003
    },
    {
        "content": "<p>and done: <a href=\"https://github.com/rust-lang/compiler-team/issues/365\">https://github.com/rust-lang/compiler-team/issues/365</a></p>",
        "id": 210656891,
        "sender_full_name": "oli",
        "timestamp": 1600592346
    },
    {
        "content": "<p>It'd be hard to generate/modify such test expects if not on a target machine.</p>",
        "id": 210656901,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600592382
    },
    {
        "content": "<p>The following regex-s seem to work:</p>\n<div class=\"codehilite\"><pre><span></span><code>// normalize-stderr-test &quot;\\(size: [0-9]+, align: [0-9]+\\)&quot; -&gt; &quot;(size: XX, align: YY)&quot;\n// normalize-stderr-test &quot;‚ïæ.*‚ïº&quot; -&gt; &quot;...&quot;\n// normalize-stderr-test &quot;([0-9_][0-9_] ){4,}.*[.|‚ñë]&quot; -&gt; &quot;...&quot;\n</code></pre></div>\n\n\n<p>But they're flaky.</p>",
        "id": 210656979,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600592491
    },
    {
        "content": "<p>Oh, you already covered that in your MCP. Well, I'm thinking of macOS where running 32-bit binaries on Catalina+ is forbidden.</p>",
        "id": 210657121,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600592764
    },
    {
        "content": "<p>you can just run tests against the 32 bit version of your own platform. I frequently run with <code>--target i686-unknown-linux-gnu</code></p>",
        "id": 210657699,
        "sender_full_name": "oli",
        "timestamp": 1600593811
    },
    {
        "content": "<p>you don't need to <em>run</em> any binaries, that's the beauty</p>",
        "id": 210657744,
        "sender_full_name": "oli",
        "timestamp": 1600593847
    },
    {
        "content": "<p>you just need to build them</p>",
        "id": 210657749,
        "sender_full_name": "oli",
        "timestamp": 1600593856
    },
    {
        "content": "<p>I mean, most likey you can just cross compile for <code>i686-unknown-linux-gnu</code></p>",
        "id": 210657753,
        "sender_full_name": "oli",
        "timestamp": 1600593875
    },
    {
        "content": "<p>yea, that test is going to be flaky because the number of lines will differ, too. You can try just removing the entire line that contains such a fragment</p>",
        "id": 210657769,
        "sender_full_name": "oli",
        "timestamp": 1600593911
    },
    {
        "content": "<p>but in that case, we're not really testing the output anymore <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 210657775,
        "sender_full_name": "oli",
        "timestamp": 1600593927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256313\">@Hameer Abbasi</span> The problem with your regex is that you're using a <em>repetition quantifier</em> (that's the <code>{m,n}</code> or <code>{m}</code> syntax) as a literal, but you aren't escaping it. so use <code>\\{</code> and <code>\\}</code> to match literal braces.</p>",
        "id": 210684966,
        "sender_full_name": "BurntSushi",
        "timestamp": 1600635339
    },
    {
        "content": "<p>This is the key piece, I think, and the answer for my question.</p>\n<p>I see the MCP got no traction so far.</p>",
        "id": 210714764,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600678231
    },
    {
        "content": "<p>yea, I already mentioned that these need to be escaped earlier, I should have pushed more on that end. But I don't know if this helps, because I don't know if we support multi-line replacements</p>",
        "id": 210715980,
        "sender_full_name": "oli",
        "timestamp": 1600679111
    },
    {
        "content": "<p>The MCP won't do anything before thursday I think</p>",
        "id": 210715992,
        "sender_full_name": "oli",
        "timestamp": 1600679122
    },
    {
        "content": "<p>&lt;ignore me&gt;</p>",
        "id": 210716285,
        "sender_full_name": "mati865",
        "timestamp": 1600679301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> wrong stream and topic?</p>",
        "id": 210716445,
        "sender_full_name": "oli",
        "timestamp": 1600679402
    },
    {
        "content": "<p>Sorry, accidentality hit arrow too many times <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 210716607,
        "sender_full_name": "mati865",
        "timestamp": 1600679450
    }
]