[
    {
        "content": "<blockquote>\n<blockquote>\n<p>but I haven't checked</p>\n</blockquote>\n<p>but not all <code>AnonConst</code> might be array lengths?</p>\n</blockquote>",
        "id": 135980032,
        "sender_full_name": "oli",
        "timestamp": 1539790395
    },
    {
        "content": "<p>right, so we basically need to keep the <code>None</code> arm, check the parent, and decide on that what to print</p>",
        "id": 135980058,
        "sender_full_name": "oli",
        "timestamp": 1539790439
    },
    {
        "content": "<p>if the parent is an array type, print <code>LEN</code>, if it's an enum variant, print <code>DISCRIMINANT</code>, ...</p>",
        "id": 135980112,
        "sender_full_name": "oli",
        "timestamp": 1539790469
    },
    {
        "content": "<p>there aren't that many <code>AnonConst</code> in the <code>rustc::hir</code> datastructures</p>",
        "id": 135980131,
        "sender_full_name": "oli",
        "timestamp": 1539790496
    },
    {
        "content": "<p>the case where <code>get_opt_name</code> returns <code>None</code> is the one we are already in</p>",
        "id": 135982164,
        "sender_full_name": "RalfJ",
        "timestamp": 1539792290
    },
    {
        "content": "<p>but before this even decides how to print the current thing, it prints the parent</p>",
        "id": 135982183,
        "sender_full_name": "RalfJ",
        "timestamp": 1539792300
    },
    {
        "content": "<p>and <em>that's</em> what fails for the array length</p>",
        "id": 135982205,
        "sender_full_name": "RalfJ",
        "timestamp": 1539792308
    },
    {
        "content": "<p>that's here: <a href=\"https://github.com/rust-lang/rust/blob/9d7f0da367bae7587ed0ef69bd4384392099fc9e/src/librustc/util/ppaux.rs#L264\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9d7f0da367bae7587ed0ef69bd4384392099fc9e/src/librustc/util/ppaux.rs#L264\">https://github.com/rust-lang/rust/blob/9d7f0da367bae7587ed0ef69bd4384392099fc9e/src/librustc/util/ppaux.rs#L264</a></p>",
        "id": 135982346,
        "sender_full_name": "RalfJ",
        "timestamp": 1539792418
    },
    {
        "content": "<p><code>as_interned_str</code> seems like a good place to put the <code>{{LEN}}</code> in but for that we have to first print the parent</p>",
        "id": 135982397,
        "sender_full_name": "RalfJ",
        "timestamp": 1539792475
    },
    {
        "content": "<p>so I dont think I understand what you are suggesting</p>",
        "id": 135982442,
        "sender_full_name": "RalfJ",
        "timestamp": 1539792482
    },
    {
        "content": "<p>Oh... I misunderstood that. Printing an array type does not make sense here I think, we'd need to skip two Items I suppose</p>",
        "id": 135983431,
        "sender_full_name": "oli",
        "timestamp": 1539793451
    },
    {
        "content": "<p>maybe... I have to leave, I'll investigate tomorrow</p>",
        "id": 135983437,
        "sender_full_name": "oli",
        "timestamp": 1539793473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> any news?</p>",
        "id": 136068510,
        "sender_full_name": "RalfJ",
        "timestamp": 1539893638
    },
    {
        "content": "<p>nope, forgot about this, sorry</p>",
        "id": 136068603,
        "sender_full_name": "oli",
        "timestamp": 1539893714
    },
    {
        "content": "<p>kk</p>",
        "id": 136068615,
        "sender_full_name": "RalfJ",
        "timestamp": 1539893738
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/55199\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55199\">https://github.com/rust-lang/rust/pull/55199</a> fixed</p>",
        "id": 136103378,
        "sender_full_name": "oli",
        "timestamp": 1539946015
    },
    {
        "content": "<p>it's untestable without <code>RUST_LOG</code> sadly</p>",
        "id": 136103384,
        "sender_full_name": "oli",
        "timestamp": 1539946027
    },
    {
        "content": "<p>so I don't think I can add regression tests</p>",
        "id": 136103387,
        "sender_full_name": "oli",
        "timestamp": 1539946034
    },
    {
        "content": "<p>Add an <code>info!</code> ? heh.</p>",
        "id": 136103842,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539946696
    },
    {
        "content": "<p>or wait, what debug level is <code>trace!</code> at?</p>",
        "id": 136103849,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539946729
    },
    {
        "content": "<p>that is, is it included in non-debug builds of <code>rustc</code> ?</p>",
        "id": 136103862,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539946750
    },
    {
        "content": "<p>if so, you could resort to a <code>run-make/</code> test (yikes!)</p>",
        "id": 136103870,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539946769
    },
    {
        "content": "<p>oh, info would work, too, but yea, I don't want a run-make test <span class=\"emoji emoji-1f615\" title=\"confused\">:confused:</span></p>",
        "id": 136104571,
        "sender_full_name": "oli",
        "timestamp": 1539947792
    },
    {
        "content": "<p>aren't there tests that link to librustc?</p>",
        "id": 136104697,
        "sender_full_name": "RalfJ",
        "timestamp": 1539947966
    },
    {
        "content": "<p>they could do a <code>println(\"{:?}\", some_instance)</code></p>",
        "id": 136104707,
        "sender_full_name": "RalfJ",
        "timestamp": 1539947985
    },
    {
        "content": "<p>almost. then I'd still need to get an instance <span class=\"emoji emoji-1f615\" title=\"confused\">:confused:</span></p>",
        "id": 136104771,
        "sender_full_name": "oli",
        "timestamp": 1539948052
    },
    {
        "content": "<p>hm yeah</p>",
        "id": 136104778,
        "sender_full_name": "RalfJ",
        "timestamp": 1539948068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> this seems to have arisen again, rustfmt and RLS are failing to build due to an ICE caused at the to string call</p>",
        "id": 203535671,
        "sender_full_name": "simulacrum",
        "timestamp": 1594402284
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/74081\">https://github.com/rust-lang/rust/issues/74081</a></p>",
        "id": 203535686,
        "sender_full_name": "simulacrum",
        "timestamp": 1594402295
    },
    {
        "content": "<p>we're trying to see if bumping rustfmt's internal libraries fixes it though</p>",
        "id": 203535713,
        "sender_full_name": "simulacrum",
        "timestamp": 1594402313
    },
    {
        "content": "<p>okay, just finished testing that, doesn't seem like it does fix it. here's a backtrace: <a href=\"https://gist.github.com/Mark-Simulacrum/c1fd825658ba202c9d7f8be9293f62bc\">https://gist.github.com/Mark-Simulacrum/c1fd825658ba202c9d7f8be9293f62bc</a></p>",
        "id": 203535821,
        "sender_full_name": "simulacrum",
        "timestamp": 1594402362
    },
    {
        "content": "<p>uhm... so apparently rustc is const evaluating <a href=\"https://github.com/rust-lang/hashbrown/blob/fd03e12a3fbe4833b38a455e62128d8b13641d28/src/raw/mod.rs#L1321\">https://github.com/rust-lang/hashbrown/blob/fd03e12a3fbe4833b38a455e62128d8b13641d28/src/raw/mod.rs#L1321</a> which is neither a const fn, nor has it zero arguments</p>",
        "id": 203583571,
        "sender_full_name": "oli",
        "timestamp": 1594449182
    },
    {
        "content": "<p>High probability that the fault is <a href=\"https://github.com/rust-lang/rust/pull/73871\">https://github.com/rust-lang/rust/pull/73871</a></p>",
        "id": 203583753,
        "sender_full_name": "oli",
        "timestamp": 1594449555
    },
    {
        "content": "<p>It's super high up in the stack: <a href=\"https://gist.github.com/Mark-Simulacrum/c1fd825658ba202c9d7f8be9293f62bc#file-gistfile1-txt-L39\">https://gist.github.com/Mark-Simulacrum/c1fd825658ba202c9d7f8be9293f62bc#file-gistfile1-txt-L39</a></p>",
        "id": 203583766,
        "sender_full_name": "oli",
        "timestamp": 1594449581
    },
    {
        "content": "<p>ugh not that stuff again</p>",
        "id": 203584235,
        "sender_full_name": "eddyb",
        "timestamp": 1594450555
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> bringing up something related to that, I think? but then it fell through the cracks again</p>",
        "id": 203584273,
        "sender_full_name": "eddyb",
        "timestamp": 1594450570
    },
    {
        "content": "<p>more readable version of oli's gist: <a href=\"https://gist.githubusercontent.com/Mark-Simulacrum/c1fd825658ba202c9d7f8be9293f62bc/raw/7b78f74d28cb90e8cb079b91ebba718c6d0adcb1/gistfile1.txt\">https://gist.githubusercontent.com/Mark-Simulacrum/c1fd825658ba202c9d7f8be9293f62bc/raw/7b78f74d28cb90e8cb079b91ebba718c6d0adcb1/gistfile1.txt</a></p>",
        "id": 203584276,
        "sender_full_name": "eddyb",
        "timestamp": 1594450593
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> 209:     0x7fe13036d32e - rustc_middle::mir::interpret::queries::&lt;impl rustc_middle::ty::context::TyCtxt&gt;::const_eval_resolve::hc189e1a9ad3fa99d\n                               at src/librustc_middle/mir/interpret/queries.rs:45\n 210:     0x7fe12f9955b6 - rustc_middle::ty::sty::Const::eval::h877b3831cdee3589\n                               at /home/mark/Build/rust/src/librustc_middle/ty/sty.rs:2369\n</code></pre></div>",
        "id": 203584333,
        "sender_full_name": "eddyb",
        "timestamp": 1594450685
    },
    {
        "content": "<p>why would there be an <code>Unevaluated</code> for that <code>new</code> method?</p>",
        "id": 203584336,
        "sender_full_name": "eddyb",
        "timestamp": 1594450739
    },
    {
        "content": "<p>idk, I tried to track that down, but then figured I'd first look at the PRs</p>",
        "id": 203584516,
        "sender_full_name": "oli",
        "timestamp": 1594451080
    },
    {
        "content": "<p>but none of the PRs could cause a change to constants afaict</p>",
        "id": 203584519,
        "sender_full_name": "oli",
        "timestamp": 1594451101
    },
    {
        "content": "<p>okay, <code>.find(|child| child.res.def_id() == def_id)</code> in <code>ty/print/pretty.rs</code> could be rewritten</p>",
        "id": 203584536,
        "sender_full_name": "eddyb",
        "timestamp": 1594451155
    },
    {
        "content": "<p>this must be hitting the stdlib or something, and specifically one of the lists of builtin macros. or a reexport in some random crate?</p>",
        "id": 203584576,
        "sender_full_name": "eddyb",
        "timestamp": 1594451194
    },
    {
        "content": "<p>I'm currently trying to produce some logging output to see if we really have an unevaluated for the function and not maybe something else</p>",
        "id": 203584578,
        "sender_full_name": "oli",
        "timestamp": 1594451197
    },
    {
        "content": "<p>are you fixing the <code>pretty.rs</code> code? do we know how to even trigger this?</p>",
        "id": 203584586,
        "sender_full_name": "eddyb",
        "timestamp": 1594451217
    },
    {
        "content": "<p>(where the something else just prints its query stack like this)</p>",
        "id": 203584587,
        "sender_full_name": "oli",
        "timestamp": 1594451220
    },
    {
        "content": "<p>I think just build rustfmt with debug assertions on</p>",
        "id": 203584593,
        "sender_full_name": "oli",
        "timestamp": 1594451236
    },
    {
        "content": "<p>(with a rustc with debug assertions on)</p>",
        "id": 203584596,
        "sender_full_name": "oli",
        "timestamp": 1594451244
    },
    {
        "content": "<p>okay but we can't really make a testcase out of that :(</p>",
        "id": 203584597,
        "sender_full_name": "eddyb",
        "timestamp": 1594451258
    },
    {
        "content": "<p>time to try to repro from scratch on playground I guess</p>",
        "id": 203584598,
        "sender_full_name": "eddyb",
        "timestamp": 1594451273
    },
    {
        "content": "<p>no, that's why I want to add some logging</p>",
        "id": 203584601,
        "sender_full_name": "oli",
        "timestamp": 1594451280
    },
    {
        "content": "<p>I want to know the site that causes this</p>",
        "id": 203584641,
        "sender_full_name": "oli",
        "timestamp": 1594451287
    },
    {
        "content": "<p>I wonder if we could insert things into the query stack for printing spans without actually adding a query.</p>",
        "id": 203584652,
        "sender_full_name": "oli",
        "timestamp": 1594451368
    },
    {
        "content": "<p>lol</p>",
        "id": 203584654,
        "sender_full_name": "eddyb",
        "timestamp": 1594451381
    },
    {
        "content": "<p>I'm serious!</p>",
        "id": 203584656,
        "sender_full_name": "oli",
        "timestamp": 1594451389
    },
    {
        "content": "<p>this would have helped so many times</p>",
        "id": 203584659,
        "sender_full_name": "oli",
        "timestamp": 1594451396
    },
    {
        "content": "<p>oh, attach more data to the query backtrace?</p>",
        "id": 203584699,
        "sender_full_name": "eddyb",
        "timestamp": 1594451413
    },
    {
        "content": "<p>and right here it would give us the places that the collector is looking at</p>",
        "id": 203584700,
        "sender_full_name": "oli",
        "timestamp": 1594451417
    },
    {
        "content": "<p>I could see there being something that's like logging but it buffers into the current query's stack frame</p>",
        "id": 203584706,
        "sender_full_name": "eddyb",
        "timestamp": 1594451437
    },
    {
        "content": "<p>yea, you need to be proactive though, you can't figure it out when you hit the assert I think</p>",
        "id": 203584710,
        "sender_full_name": "oli",
        "timestamp": 1594451448
    },
    {
        "content": "<p>but <em>shrug</em> we should just switch to <code>tracing</code> and have proper hierarchical logging</p>",
        "id": 203584713,
        "sender_full_name": "eddyb",
        "timestamp": 1594451454
    },
    {
        "content": "<p>so we'd do this just in debug assert mode or sth</p>",
        "id": 203584714,
        "sender_full_name": "oli",
        "timestamp": 1594451456
    },
    {
        "content": "<p>right</p>",
        "id": 203584717,
        "sender_full_name": "oli",
        "timestamp": 1594451460
    },
    {
        "content": "<p>or that</p>",
        "id": 203584718,
        "sender_full_name": "oli",
        "timestamp": 1594451462
    },
    {
        "content": "<p>didn't we have an MCP for that?</p>",
        "id": 203584723,
        "sender_full_name": "oli",
        "timestamp": 1594451467
    },
    {
        "content": "<p>nope</p>",
        "id": 203584737,
        "sender_full_name": "oli",
        "timestamp": 1594451492
    },
    {
        "content": "<p>damn</p>",
        "id": 203584738,
        "sender_full_name": "oli",
        "timestamp": 1594451494
    },
    {
        "content": "<p>I guess I'll do that then</p>",
        "id": 203584742,
        "sender_full_name": "oli",
        "timestamp": 1594451511
    },
    {
        "content": "<p>I know some people over in wg-traits were excited about it</p>",
        "id": 203584782,
        "sender_full_name": "eddyb",
        "timestamp": 1594451528
    },
    {
        "content": "<p>like a month or two ago</p>",
        "id": 203584783,
        "sender_full_name": "eddyb",
        "timestamp": 1594451532
    },
    {
        "content": "<p>yea I think it was said \"do an MCP\" and that never happened</p>",
        "id": 203584790,
        "sender_full_name": "oli",
        "timestamp": 1594451547
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> I guess?</p>",
        "id": 203584807,
        "sender_full_name": "eddyb",
        "timestamp": 1594451591
    },
    {
        "content": "<p>this looks great :D <a href=\"#narrow/stream/144729-wg-traits/topic/tracing-tree/near/201164847\">https://rust-lang.zulipchat.com/#narrow/stream/144729-wg-traits/topic/tracing-tree/near/201164847</a></p>",
        "id": 203584812,
        "sender_full_name": "eddyb",
        "timestamp": 1594451633
    },
    {
        "content": "<p>although I wonder how it will scale to rustc's deep callstacks :P</p>",
        "id": 203584853,
        "sender_full_name": "eddyb",
        "timestamp": 1594451659
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues/331\">https://github.com/rust-lang/compiler-team/issues/331</a></p>",
        "id": 203584909,
        "sender_full_name": "oli",
        "timestamp": 1594451781
    },
    {
        "content": "<p>ugh I got distracted</p>",
        "id": 203585304,
        "sender_full_name": "eddyb",
        "timestamp": 1594452564
    },
    {
        "content": "<p>so the problem is a <em>renaming</em> reexport in the same module that also reexports one of the builtin macros</p>",
        "id": 203585368,
        "sender_full_name": "eddyb",
        "timestamp": 1594452717
    },
    {
        "content": "<p>and prelude doesn't rename. so I can't test this on playground :(</p>",
        "id": 203585408,
        "sender_full_name": "eddyb",
        "timestamp": 1594452730
    },
    {
        "content": "<p>/me remembers they can use <code>echo '...' | rustc -</code> with multiline code snippets, in <code>fish</code></p>",
        "id": 203585410,
        "sender_full_name": "eddyb",
        "timestamp": 1594452757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> okay I can't really get this <code>.def_id()</code> to panic... I wonder where I need to get me some bad reexports from</p>",
        "id": 203585792,
        "sender_full_name": "eddyb",
        "timestamp": 1594453462
    },
    {
        "content": "<p>oh I see it panics here:</p>\n<div class=\"codehilite\"><pre><span></span><code>  75:     0x7fe130368058 - rustc_hir::def::Res&lt;Id&gt;::def_id::{{closure}}::h9150df0de4562214\n                               at /home/mark/Build/rust/src/libstd/macros.rs:16\n</code></pre></div>",
        "id": 203585881,
        "sender_full_name": "eddyb",
        "timestamp": 1594453655
    },
    {
        "content": "<p>then it tries to print the query stack and panics again lol</p>",
        "id": 203585886,
        "sender_full_name": "eddyb",
        "timestamp": 1594453675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so you need to fix the bug to even see the query stack</p>",
        "id": 203585925,
        "sender_full_name": "eddyb",
        "timestamp": 1594453694
    },
    {
        "content": "<p>yea I saw the double panic, but didn't realize we were missing some parts during debugging</p>",
        "id": 203585928,
        "sender_full_name": "oli",
        "timestamp": 1594453718
    },
    {
        "content": "<p>I'm amazed we get anything at all</p>",
        "id": 203585930,
        "sender_full_name": "eddyb",
        "timestamp": 1594453732
    },
    {
        "content": "<p>I guess it panics <em>while</em> printing</p>",
        "id": 203585931,
        "sender_full_name": "eddyb",
        "timestamp": 1594453740
    },
    {
        "content": "<p>so we're missing whatever tried to const-eval that <code>new</code> method?</p>",
        "id": 203585937,
        "sender_full_name": "eddyb",
        "timestamp": 1594453766
    },
    {
        "content": "<p>the panic has been caught -&gt; no double panic</p>",
        "id": 203585940,
        "sender_full_name": "oli",
        "timestamp": 1594453792
    },
    {
        "content": "<p>oh weird</p>",
        "id": 203585942,
        "sender_full_name": "eddyb",
        "timestamp": 1594453799
    },
    {
        "content": "<p>are you sure it's not something <em>inside</em> the <code>new</code> method?</p>",
        "id": 203585981,
        "sender_full_name": "oli",
        "timestamp": 1594453811
    },
    {
        "content": "<p>look at the backtrace, it's panicking while it's printing the query stack</p>",
        "id": 203585983,
        "sender_full_name": "eddyb",
        "timestamp": 1594453828
    },
    {
        "content": "<p>we've had confusing stack traces before</p>",
        "id": 203585985,
        "sender_full_name": "oli",
        "timestamp": 1594453834
    },
    {
        "content": "<p>I wonder if it hits a query cycle and panics trying to print it</p>",
        "id": 203585988,
        "sender_full_name": "eddyb",
        "timestamp": 1594453850
    },
    {
        "content": "<p>yea, the panic was caught, so we print the query stack, ...</p>",
        "id": 203585989,
        "sender_full_name": "oli",
        "timestamp": 1594453853
    },
    {
        "content": "<p><del>the backtrace before the panic was caught includes trying to print the query stack</del> wait I'm not sure</p>",
        "id": 203585995,
        "sender_full_name": "eddyb",
        "timestamp": 1594453878
    },
    {
        "content": "<p>anyway just fix the bug lol</p>",
        "id": 203585998,
        "sender_full_name": "eddyb",
        "timestamp": 1594453897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> replace the <code>.def_id() == def_id</code> with <code>.opt_def_id() == Some(def_id)</code></p>",
        "id": 203586039,
        "sender_full_name": "eddyb",
        "timestamp": 1594453978
    },
    {
        "content": "<p>in <code>src/librustc_middle/ty/print/pretty.rs</code> on line 396 or w/e</p>",
        "id": 203586044,
        "sender_full_name": "eddyb",
        "timestamp": 1594454002
    },
    {
        "content": "<p>I'm trying to figure out how to even get a non-<code>DefId</code> child</p>",
        "id": 203586046,
        "sender_full_name": "eddyb",
        "timestamp": 1594454024
    },
    {
        "content": "<p>a <code>#[rustc_builtin_macro]</code> still has a proper <code>DefId</code>, right?</p>",
        "id": 203586197,
        "sender_full_name": "eddyb",
        "timestamp": 1594454304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> oh btw I wanted to list the missing queries:</p>\n<ul>\n<li><code>normalize_generic_arg_after_erasing_regions</code></li>\n<li><code>collect_and_partition_mono_items</code></li>\n</ul>",
        "id": 203586260,
        "sender_full_name": "eddyb",
        "timestamp": 1594454413
    },
    {
        "content": "<p>I believe it's <code>normalize_generic_arg_after_erasing_regions</code>' argument that triggers the bug</p>",
        "id": 203586266,
        "sender_full_name": "eddyb",
        "timestamp": 1594454427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> omg I think I found it, I can't believe this code compiles</p>",
        "id": 203586392,
        "sender_full_name": "eddyb",
        "timestamp": 1594454600
    },
    {
        "content": "<p>aaand no crash still?</p>",
        "id": 203586396,
        "sender_full_name": "eddyb",
        "timestamp": 1594454615
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> oh I'm dumb the order matters and I had the correct thing first <em>sigh</em></p>",
        "id": 203586407,
        "sender_full_name": "eddyb",
        "timestamp": 1594454640
    },
    {
        "content": "<p>bingo</p>",
        "id": 203586445,
        "sender_full_name": "eddyb",
        "timestamp": 1594454672
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"nb\">echo</span> <span class=\"s1\">&#39;</span>\n<span class=\"s1\">    mod private {</span>\n<span class=\"s1\">        pub mod public { pub struct Pub; }</span>\n<span class=\"s1\">    }</span>\n<span class=\"s1\">    pub use cfg_attr as attr; // built-in attribute</span>\n<span class=\"s1\">    pub use private::public as renamed;</span>\n<span class=\"s1\">&#39;</span> <span class=\"p\">|</span> rustc +rust-2-stage1 - --crate-type<span class=\"o\">=</span>lib --crate-name<span class=\"o\">=</span>dep --edition<span class=\"o\">=</span><span class=\"m\">2018</span>\n\n<span class=\"nb\">echo</span> <span class=\"s1\">&#39;fn main() { let () = dep::renamed::Pub; }&#39;</span> <span class=\"p\">|</span> rustc - --extern <span class=\"nv\">dep</span><span class=\"o\">=</span>libdep.rlib\n</code></pre></div>",
        "id": 203586453,
        "sender_full_name": "eddyb",
        "timestamp": 1594454753
    },
    {
        "content": "<p>so you'd need to find a crate that does <code>pub use \\w+ as</code> where the name coincides with a builtin attribute name</p>",
        "id": 203586501,
        "sender_full_name": "eddyb",
        "timestamp": 1594454841
    },
    {
        "content": "<p>hmm maybe it doesn't need to be that specific. but I'm not finding any examples</p>",
        "id": 203586540,
        "sender_full_name": "eddyb",
        "timestamp": 1594454891
    },
    {
        "content": "<p>not really finding any examples under <code>~/.cargo</code> that match builtin attribute names</p>",
        "id": 203586588,
        "sender_full_name": "eddyb",
        "timestamp": 1594455004
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> if you want I can take over, my workdirs are a bit kept up at the moment but I think I can make it work</p>",
        "id": 203586596,
        "sender_full_name": "eddyb",
        "timestamp": 1594455052
    },
    {
        "content": "<p>but you should be able to make a test that fails until <code>.def_id()</code> is replaced with <code>.opt_def_id()</code></p>",
        "id": 203586602,
        "sender_full_name": "eddyb",
        "timestamp": 1594455079
    },
    {
        "content": "<p>I should report it as an issue I guess</p>",
        "id": 203586745,
        "sender_full_name": "eddyb",
        "timestamp": 1594455395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244331\">@da-x</span> hey! did you independently fix this, or what happened?</p>",
        "id": 203587213,
        "sender_full_name": "eddyb",
        "timestamp": 1594456476
    },
    {
        "content": "<p>I just saw <a href=\"https://github.com/rust-lang/rust/issues/74081#issuecomment-657012684\">https://github.com/rust-lang/rust/issues/74081#issuecomment-657012684</a></p>",
        "id": 203587215,
        "sender_full_name": "eddyb",
        "timestamp": 1594456482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244331\">@da-x</span> if you want to submit a PR make sure to include the testcase from <a href=\"https://github.com/rust-lang/rust/issues/74236\">https://github.com/rust-lang/rust/issues/74236</a></p>",
        "id": 203587271,
        "sender_full_name": "eddyb",
        "timestamp": 1594456621
    },
    {
        "content": "<p>(and make sure to run the tests w/o the fix applied to make sure it doesn't pass)</p>",
        "id": 203587276,
        "sender_full_name": "eddyb",
        "timestamp": 1594456644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> oh...... this is what triggers everything.... I'm dumb <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/const_eval/eval_queries.rs#L281-L286\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/const_eval/eval_queries.rs#L281-L286</a></p>",
        "id": 203587322,
        "sender_full_name": "eddyb",
        "timestamp": 1594456738
    },
    {
        "content": "<p>maybe this could be set up better?</p>",
        "id": 203587326,
        "sender_full_name": "eddyb",
        "timestamp": 1594456745
    },
    {
        "content": "<p>I guess it'd be hard to make it more obvious that it's triggered by that</p>",
        "id": 203587334,
        "sender_full_name": "eddyb",
        "timestamp": 1594456793
    },
    {
        "content": "<p>how did I misread the backtrace though</p>",
        "id": 203587375,
        "sender_full_name": "eddyb",
        "timestamp": 1594456817
    },
    {
        "content": "<p>I am very confused as to what's happening</p>",
        "id": 203587386,
        "sender_full_name": "eddyb",
        "timestamp": 1594456897
    },
    {
        "content": "<p>there's definitely missing entries in the query stack just based on <code>::compute</code> entries in the backtrace</p>",
        "id": 203587391,
        "sender_full_name": "eddyb",
        "timestamp": 1594456917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> how did you get that backtrace? was <code>RUST_BACKTRACE=1</code> set?</p>",
        "id": 203587491,
        "sender_full_name": "eddyb",
        "timestamp": 1594457083
    },
    {
        "content": "<p>any chance there was anything before the contents of <a href=\"https://gist.githubusercontent.com/Mark-Simulacrum/c1fd825658ba202c9d7f8be9293f62bc/raw/7b78f74d28cb90e8cb079b91ebba718c6d0adcb1/gistfile1.txt\">https://gist.githubusercontent.com/Mark-Simulacrum/c1fd825658ba202c9d7f8be9293f62bc/raw/7b78f74d28cb90e8cb079b91ebba718c6d0adcb1/gistfile1.txt</a></p>",
        "id": 203587505,
        "sender_full_name": "eddyb",
        "timestamp": 1594457123
    },
    {
        "content": "<p>because it <em>looks</em> like, unless some buffering shenanigans are happening, that the backtrace in there is produced by a second nested <code>report_ice</code> calling into the default panic hook</p>",
        "id": 203587546,
        "sender_full_name": "eddyb",
        "timestamp": 1594457171
    },
    {
        "content": "<p>meaning that the first <code>report_ice</code> would've already called the hook, and there should be another backtrace above the pasted one</p>",
        "id": 203587559,
        "sender_full_name": "eddyb",
        "timestamp": 1594457268
    },
    {
        "content": "<p>(this is what I'm referring to: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_driver/lib.rs#L1159-L1161\">https://github.com/rust-lang/rust/blob/master/src/librustc_driver/lib.rs#L1159-L1161</a>)</p>",
        "id": 203587600,
        "sender_full_name": "eddyb",
        "timestamp": 1594457330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so I think that the canary <code>.to_string()</code> should probably be wrapped in a <code>catch_unwind</code></p>",
        "id": 203587727,
        "sender_full_name": "eddyb",
        "timestamp": 1594457563
    },
    {
        "content": "<p>although no that wouldn't help argh</p>",
        "id": 203587731,
        "sender_full_name": "eddyb",
        "timestamp": 1594457588
    },
    {
        "content": "<p>it's kind of funny how unstoppable some stuff is once it gets going</p>",
        "id": 203587734,
        "sender_full_name": "eddyb",
        "timestamp": 1594457614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> trying to print an <code>Instance</code>, if it panics, actually guarantees you'll get this double panic nonsense. because it will panic again in the panic handler, when it tries to print the query stack. so you need to set a thread-local flag or something telling the ICE handler to not try to print the query stack lol, because it's guaranteed to panic</p>",
        "id": 203587785,
        "sender_full_name": "eddyb",
        "timestamp": 1594457732
    },
    {
        "content": "<p>this is so cursed</p>",
        "id": 203587787,
        "sender_full_name": "eddyb",
        "timestamp": 1594457743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> there is indeed a good chance that there was another backtrace before that, I think I assumed it was from a different crate. I can get that copied too if it's helpful</p>",
        "id": 203592284,
        "sender_full_name": "simulacrum",
        "timestamp": 1594466375
    },
    {
        "content": "<p>it would help confirm my theory of how this double panic happens</p>",
        "id": 203592330,
        "sender_full_name": "eddyb",
        "timestamp": 1594466407
    },
    {
        "content": "<p>working on getting it then</p>",
        "id": 203592407,
        "sender_full_name": "simulacrum",
        "timestamp": 1594466590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"https://gist.github.com/Mark-Simulacrum/2abee553db3ca55b9cd5272fc43a5308\">https://gist.github.com/Mark-Simulacrum/2abee553db3ca55b9cd5272fc43a5308</a></p>",
        "id": 203592468,
        "sender_full_name": "simulacrum",
        "timestamp": 1594466649
    },
    {
        "content": "<p>raw: <a href=\"https://gist.githubusercontent.com/Mark-Simulacrum/2abee553db3ca55b9cd5272fc43a5308/raw/9fa12f0cfa2397af7f1331cc8f8f598a8aa24bd6/gistfile1.txt\">https://gist.githubusercontent.com/Mark-Simulacrum/2abee553db3ca55b9cd5272fc43a5308/raw/9fa12f0cfa2397af7f1331cc8f8f598a8aa24bd6/gistfile1.txt</a></p>",
        "id": 203592751,
        "sender_full_name": "eddyb",
        "timestamp": 1594467158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> thanks! this confirms it :D</p>",
        "id": 203592754,
        "sender_full_name": "eddyb",
        "timestamp": 1594467182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  where does <code>cfg_attr</code> come from in the test case?</p>",
        "id": 203592763,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1594467216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so I was right. the second panic is triggered by the <a href=\"https://github.com/rust-lang/rust/issues/3\">#3</a> query stack frame. so <code>normalize_generic_arg_after_erasing_regions</code></p>",
        "id": 203592764,
        "sender_full_name": "eddyb",
        "timestamp": 1594467216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244331\">@da-x</span> Rust :)</p>",
        "id": 203592765,
        "sender_full_name": "eddyb",
        "timestamp": 1594467227
    },
    {
        "content": "<p>it's <code>#[cfg_attr(...)]</code> - you can other other builtin attributes if you want, that one just came to mind</p>",
        "id": 203592803,
        "sender_full_name": "eddyb",
        "timestamp": 1594467243
    },
    {
        "content": "<p>Ah I didn't add <code>// edition: 2018</code></p>",
        "id": 203592806,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1594467254
    },
    {
        "content": "<p><code>no_mangle</code> for example would also work</p>",
        "id": 203592810,
        "sender_full_name": "eddyb",
        "timestamp": 1594467258
    },
    {
        "content": "<p>yeah that's the only way AFAIK to import one of these things</p>",
        "id": 203592814,
        "sender_full_name": "eddyb",
        "timestamp": 1594467272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> oooooh <code>const_eval_*</code> queries don't print their instances but rather the <code>DefId</code>s, right? whereas <code>normalize_generic_arg_after_erasing_regions</code> prints the <code>ty::GenericArg</code> which is a <code>ty::Const</code> most likely, with full detail</p>",
        "id": 203592827,
        "sender_full_name": "eddyb",
        "timestamp": 1594467325
    },
    {
        "content": "<p>okay I see, it actually panics <em>3</em> times</p>",
        "id": 203592871,
        "sender_full_name": "eddyb",
        "timestamp": 1594467366
    },
    {
        "content": "<p>there's two partial printouts of the query stack, and the second one is followed by:</p>\n<blockquote>\n<p>thread panicked while processing panic. aborting.</p>\n</blockquote>",
        "id": 203592876,
        "sender_full_name": "eddyb",
        "timestamp": 1594467391
    },
    {
        "content": "<p>so you were right about the panic being caught, it's just followed by a double panic :P</p>",
        "id": 203592885,
        "sender_full_name": "eddyb",
        "timestamp": 1594467430
    },
    {
        "content": "<p>the 3rd time (second uncaught panic) it doesn't invoke the hook, however, and just aborts</p>",
        "id": 203592938,
        "sender_full_name": "eddyb",
        "timestamp": 1594467490
    },
    {
        "content": "<p>or actually is there any catching? I'm starting to doubt it. either way, <code>report_ice</code> definitely runs twice</p>",
        "id": 203592943,
        "sender_full_name": "eddyb",
        "timestamp": 1594467518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  PR <a href=\"https://github.com/rust-lang/rust/pull/74240\">https://github.com/rust-lang/rust/pull/74240</a></p>",
        "id": 203593483,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1594468548
    },
    {
        "content": "<p>I verified that the test catches this, when I ran with the fix reverted.</p>",
        "id": 203593528,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1594468581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244331\">@da-x</span> thanks, awesome! spared me of having to juggle my worktrees :P</p>",
        "id": 203610449,
        "sender_full_name": "eddyb",
        "timestamp": 1594496447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/anon_const_instance_printing/near/203587322\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> oh...... this is what triggers everything.... I'm dumb <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/const_eval/eval_queries.rs#L281-L286\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/const_eval/eval_queries.rs#L281-L286</a></p>\n</blockquote>\n<p>oh... sorry, that should have been made clearer. The reason it's posted here is because of that comment</p>",
        "id": 203636347,
        "sender_full_name": "oli",
        "timestamp": 1594547163
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/anon_const_instance_printing/near/203587334\">said</a>:</p>\n<blockquote>\n<p>I guess it'd be hard to make it more obvious that it's triggered by that</p>\n</blockquote>\n<p>we can wrap it in <code>catch_unwind</code> ^^</p>",
        "id": 203636355,
        "sender_full_name": "oli",
        "timestamp": 1594547186
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/anon_const_instance_printing/near/203587727\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> so I think that the canary <code>.to_string()</code> should probably be wrapped in a <code>catch_unwind</code></p>\n</blockquote>\n<p>aha <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> you got to the same conclusion</p>",
        "id": 203636361,
        "sender_full_name": "oli",
        "timestamp": 1594547220
    },
    {
        "content": "<p>how does that help? I am confused.^^</p>",
        "id": 203647257,
        "sender_full_name": "RalfJ",
        "timestamp": 1594566238
    },
    {
        "content": "<p>I added that clause because Miri used to ICE with <code>MIRI_LOG=info</code> because we couldnt print some DefId</p>",
        "id": 203647303,
        "sender_full_name": "RalfJ",
        "timestamp": 1594566257
    },
    {
        "content": "<p>papering over the problem there wont avoid the ICE elsewhere</p>",
        "id": 203647311,
        "sender_full_name": "RalfJ",
        "timestamp": 1594566292
    },
    {
        "content": "<p>it's not about avoiding the ICE, it's about still getting a reasonable debugging experience</p>",
        "id": 203650041,
        "sender_full_name": "oli",
        "timestamp": 1594570945
    },
    {
        "content": "<p>it was hard to tell from that backtrace where that ICE is happening</p>",
        "id": 203650053,
        "sender_full_name": "oli",
        "timestamp": 1594570981
    },
    {
        "content": "<p>if we catch the unwinding, we can add more messages</p>",
        "id": 203650063,
        "sender_full_name": "oli",
        "timestamp": 1594570995
    },
    {
        "content": "<p>it also might be possible to avoid the double backtrace which is otherwise inevitable lol</p>",
        "id": 203660758,
        "sender_full_name": "eddyb",
        "timestamp": 1594587501
    },
    {
        "content": "<p>and makes things needlessly confusing (e.g. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> cut the first one out accidentally and we were left with the aftermath one which had a panic-in-panic with no output from the first panic)</p>",
        "id": 203660798,
        "sender_full_name": "eddyb",
        "timestamp": 1594587544
    },
    {
        "content": "<p>Part of it was the 400+ line output from just the second one, which makes it hard to digest. It's maybe a good idea to change the double panic message to be more verbose, it's super easy to miss amidst backtraces and cargo output etc</p>",
        "id": 203660953,
        "sender_full_name": "simulacrum",
        "timestamp": 1594587773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> an example of what <code>catch_unwind</code> could let you do is generate an proper error message printing out the <code>DefId</code> in its rawest form, for ease of debugging</p>",
        "id": 203660954,
        "sender_full_name": "eddyb",
        "timestamp": 1594587776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> there's actually an important difference that is visual and kind of made me feel like there was something weird about the originally posted (second) backtrace that I couldn't put my finger on: it has addresses</p>",
        "id": 203660973,
        "sender_full_name": "eddyb",
        "timestamp": 1594587826
    },
    {
        "content": "<p>a normal backtrace does not</p>",
        "id": 203660974,
        "sender_full_name": "eddyb",
        "timestamp": 1594587833
    },
    {
        "content": "<p>but it can be subtle lol</p>",
        "id": 203661018,
        "sender_full_name": "eddyb",
        "timestamp": 1594587852
    },
    {
        "content": "<p>it could use some ASCII art tbh</p>",
        "id": 203661022,
        "sender_full_name": "eddyb",
        "timestamp": 1594587869
    },
    {
        "content": "<p>Oh huh I completely missed that a normal one doesn't. I think that may have changed at some point?</p>",
        "id": 203661028,
        "sender_full_name": "simulacrum",
        "timestamp": 1594587896
    },
    {
        "content": "<p>(and we can do that in <code>rustc</code> itself, since we can replicate the TLS \"am I already in a panic\" thing)</p>",
        "id": 203661031,
        "sender_full_name": "eddyb",
        "timestamp": 1594587900
    },
    {
        "content": "<p>so yeah who wants to make some \"nested ICE\" ASCII art :P?</p>",
        "id": 203661040,
        "sender_full_name": "eddyb",
        "timestamp": 1594587926
    },
    {
        "content": "<p>Perhaps I could interest you in adding <a href=\"https://github.com/rust-lang/rust/issues/13871\">some Lovecraft quotes</a>?</p>",
        "id": 203661251,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594588259
    },
    {
        "content": "<p>there's been talk of just making panics in dtors abort which I think eliminates double backtraces entirely?</p>",
        "id": 203661342,
        "sender_full_name": "simulacrum",
        "timestamp": 1594588404
    },
    {
        "content": "<p>(I guess you can still print them)</p>",
        "id": 203661343,
        "sender_full_name": "simulacrum",
        "timestamp": 1594588411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I don't think we have any interesting destructors in rustc</p>",
        "id": 203661410,
        "sender_full_name": "eddyb",
        "timestamp": 1594588478
    },
    {
        "content": "<p>this is panicking in the panic hook</p>",
        "id": 203661418,
        "sender_full_name": "eddyb",
        "timestamp": 1594588492
    },
    {
        "content": "<p><em>before</em> unwinding</p>",
        "id": 203661420,
        "sender_full_name": "eddyb",
        "timestamp": 1594588495
    },
    {
        "content": "<p>that's why the second backtrace entirely contains the first one</p>",
        "id": 203661430,
        "sender_full_name": "eddyb",
        "timestamp": 1594588508
    },
    {
        "content": "<p>basically no unwinding ever happens</p>",
        "id": 203661435,
        "sender_full_name": "eddyb",
        "timestamp": 1594588518
    },
    {
        "content": "<p>panic -&gt; report_ice -&gt; try to print query stack -&gt; panic -&gt; report_ice -&gt; try to print query stack -&gt; panic -&gt; abort</p>",
        "id": 203661444,
        "sender_full_name": "eddyb",
        "timestamp": 1594588560
    },
    {
        "content": "<p>so there are actually 3 panics lol</p>",
        "id": 203661493,
        "sender_full_name": "eddyb",
        "timestamp": 1594588592
    },
    {
        "content": "<p>(you can tell because there's two query stacks printed, so there's two <code>report_ice</code>s, each of which is capable of triggering the panic again through query stack printing - although I am assuming no weird IO shenanigans)</p>",
        "id": 203661499,
        "sender_full_name": "eddyb",
        "timestamp": 1594588624
    },
    {
        "content": "<p>anyway the second <code>report_ice</code> is the interesting one, to me. ICE-in-ICE more than panic-in-panic (which is usually panic-while-unwinding)</p>",
        "id": 203661561,
        "sender_full_name": "eddyb",
        "timestamp": 1594588688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/anon_const_instance_printing/near/203650041\">said</a>:</p>\n<blockquote>\n<p>it's not about avoiding the ICE, it's about still getting a reasonable debugging experience</p>\n</blockquote>\n<p>oh, so it would be caught, worked on, and then made to panic again or otherwise abort compilation? that makes sense. to me, \"add <code>catch_unwind</code>\" sounded like a proposal to just ignore the error.^^</p>",
        "id": 203682322,
        "sender_full_name": "RalfJ",
        "timestamp": 1594622519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> tbh, <code>catch_unwind</code> is useless if you think about it, since <code>rustc</code> aborts due to nested panicking, before <em>ever</em> unwinding, you need to override the panic hook to wrap around the <code>report_ice</code> one or something (or have a global concept of a \"critical section\" that configures <code>report_ice</code> to present extra information in the ICE output)</p>",
        "id": 203682983,
        "sender_full_name": "eddyb",
        "timestamp": 1594623340
    },
    {
        "content": "<p>I guess it's important to distinguish between \"panic hook\" that pretty much gets called as the first thing when panicking, and the \"unwinding\" that only runs after the hook is done printing the panic message, backtrace, etc.</p>",
        "id": 203683069,
        "sender_full_name": "eddyb",
        "timestamp": 1594623472
    },
    {
        "content": "<p>yea, I know we cant do anything about the main error, but we can at least emit an additional thing before finishing unwinding, which should then show up just before the query stack printing</p>",
        "id": 203685269,
        "sender_full_name": "oli",
        "timestamp": 1594625619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> it <strong>never</strong> unwinds!</p>",
        "id": 203686562,
        "sender_full_name": "eddyb",
        "timestamp": 1594626739
    },
    {
        "content": "<p>when an ICE happens, the query stack is <em>always</em> printed <em>downstack</em> from the <code>panic!()</code> or <code>bug!()</code> or w/e</p>",
        "id": 203686578,
        "sender_full_name": "eddyb",
        "timestamp": 1594626770
    },
    {
        "content": "<p>öh</p>",
        "id": 203686599,
        "sender_full_name": "oli",
        "timestamp": 1594626791
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/anon_const_instance_printing/near/203661444\">said</a>:</p>\n<blockquote>\n<p>panic -&gt; report_ice -&gt; try to print query stack -&gt; panic -&gt; report_ice -&gt; try to print query stack -&gt; panic -&gt; abort</p>\n</blockquote>\n<p>stack depth increases with each -&gt;</p>",
        "id": 203686610,
        "sender_full_name": "eddyb",
        "timestamp": 1594626802
    },
    {
        "content": "<p>it aborts at the deepest nesting level</p>",
        "id": 203686632,
        "sender_full_name": "eddyb",
        "timestamp": 1594626814
    },
    {
        "content": "<p>heh lol</p>",
        "id": 203686634,
        "sender_full_name": "oli",
        "timestamp": 1594626816
    },
    {
        "content": "<p>ok</p>",
        "id": 203686637,
        "sender_full_name": "oli",
        "timestamp": 1594626817
    },
    {
        "content": "<p>that part I did not realize</p>",
        "id": 203686648,
        "sender_full_name": "oli",
        "timestamp": 1594626823
    },
    {
        "content": "<p>I thought it actually gave up after the second round</p>",
        "id": 203686653,
        "sender_full_name": "oli",
        "timestamp": 1594626830
    },
    {
        "content": "<p>this is almost impossible to guess without <em>both</em> backtraces</p>",
        "id": 203686655,
        "sender_full_name": "eddyb",
        "timestamp": 1594626833
    },
    {
        "content": "<p>which each have the same partial query stack printed out</p>",
        "id": 203686688,
        "sender_full_name": "eddyb",
        "timestamp": 1594626842
    },
    {
        "content": "<p>the second one has the one line message from nested panicking, before aborting</p>",
        "id": 203686715,
        "sender_full_name": "eddyb",
        "timestamp": 1594626862
    },
    {
        "content": "<p>anyway I'll probably forget but like 11h ago I was imagining drawing some ASCII art :P</p>",
        "id": 203686747,
        "sender_full_name": "eddyb",
        "timestamp": 1594626895
    },
    {
        "content": "<p>haha</p>",
        "id": 203686769,
        "sender_full_name": "oli",
        "timestamp": 1594626910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <a href=\"https://gist.githubusercontent.com/eddyb/17185d9cd23e238fa989194acf8ae89c/raw/4393204aace47364f4e09da7af336dd6cda98d36/ICE%255Eice\">https://gist.githubusercontent.com/eddyb/17185d9cd23e238fa989194acf8ae89c/raw/4393204aace47364f4e09da7af336dd6cda98d36/ICE%255Eice</a></p>",
        "id": 203688513,
        "sender_full_name": "eddyb",
        "timestamp": 1594628304
    },
    {
        "content": "<p>or <a href=\"https://gist.github.com/eddyb/17185d9cd23e238fa989194acf8ae89c\">https://gist.github.com/eddyb/17185d9cd23e238fa989194acf8ae89c</a></p>",
        "id": 203688527,
        "sender_full_name": "eddyb",
        "timestamp": 1594628314
    },
    {
        "content": "<p>shouldn't it be <code>ICE²</code>?</p>",
        "id": 203688552,
        "sender_full_name": "RalfJ",
        "timestamp": 1594628340
    },
    {
        "content": "<p>emojis are a pain to align, at least in VSCode I get some decent results just by using two spaces as the width of an emoji</p>",
        "id": 203688554,
        "sender_full_name": "eddyb",
        "timestamp": 1594628342
    },
    {
        "content": "<p>lol</p>",
        "id": 203688567,
        "sender_full_name": "eddyb",
        "timestamp": 1594628353
    },
    {
        "content": "<p>or maybe</p>\n<div class=\"codehilite\"><pre><span></span><code>  ICE\nI     I\nC     C\nE     E\n  ICE\n</code></pre></div>",
        "id": 203688586,
        "sender_full_name": "RalfJ",
        "timestamp": 1594628372
    },
    {
        "content": "<p>since I'm imagining this would go between two backtraces... oh I'm missing some detail heh</p>",
        "id": 203688612,
        "sender_full_name": "eddyb",
        "timestamp": 1594628393
    },
    {
        "content": "<p>I mean, <code>ICE³</code> would be way cooler but that's not what happens ;) (right?)</p>",
        "id": 203688616,
        "sender_full_name": "RalfJ",
        "timestamp": 1594628396
    },
    {
        "content": "<p>I wish browsers could render like this: <a href=\"/user_uploads/4715/EEIaD_5z9UNKG3VGu3dBWsUN/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/EEIaD_5z9UNKG3VGu3dBWsUN/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/EEIaD_5z9UNKG3VGu3dBWsUN/image.png\"></a></div>",
        "id": 203688713,
        "sender_full_name": "eddyb",
        "timestamp": 1594628450
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>                                  A\n                       #  ##  ##  |\n                         #   #  # |\n                       # #   ###  |\n|#| ####   #### #####  # #   #    |\n|#|  ##   ##    ##     #  ##  ##  |\n|#|  ##  ##     ##\n|#|  ##  ##     ####\n|#|  ##  ##     ##\n|#|  ##   ##    ##\n|#| ####   #### #####\n\\#/\n V\n</code></pre></div>",
        "id": 203689646,
        "sender_full_name": "eddyb",
        "timestamp": 1594629133
    },
    {
        "content": "<p>I'm done</p>",
        "id": 203689652,
        "sender_full_name": "eddyb",
        "timestamp": 1594629137
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>⢹⡏  ⣴⠋⠉  ⣿⣉⠁\n⣸⣇  ⠻⣄⣀  ⣿⣉⡀\n</code></pre></div>\n\n\n<p><a href=\"/user_uploads/4715/48yvB__rYHE6OFAXGO7Ynfet/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/48yvB__rYHE6OFAXGO7Ynfet/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/48yvB__rYHE6OFAXGO7Ynfet/image.png\"></a></div>",
        "id": 203692904,
        "sender_full_name": "bjorn3",
        "timestamp": 1594631636
    },
    {
        "content": "<p>oh right I always forget that's an option :P</p>",
        "id": 203693437,
        "sender_full_name": "eddyb",
        "timestamp": 1594632011
    }
]