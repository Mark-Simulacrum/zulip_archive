[
    {
        "content": "<p>I've started working on <a href=\"https://github.com/rust-lang/rust/issues/71212\">https://github.com/rust-lang/rust/issues/71212</a> and following <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> 's instructions I changed <a href=\"https://github.com/rust-lang/rust/blob/77f95a89a108d4cd6ad1230fb210b3640952b146/src/librustc_mir/transform/check_consts/qualifs.rs#L81\">https://github.com/rust-lang/rust/blob/77f95a89a108d4cd6ad1230fb210b3640952b146/src/librustc_mir/transform/check_consts/qualifs.rs#L81</a> to also match mutable references. However we are not sure if that's enough. <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> do you have any opinions/suggestions about it?</p>",
        "id": 199276735,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1590874177
    },
    {
        "content": "<p>We use <code>HasMutInterior</code> to forbid <code>&amp;x</code> when <code>x</code> is something with interior mutability like a <code>Cell</code>. Won't you be forbidding <code>&amp;&amp;mut x</code> everywhere with that change?</p>",
        "id": 199524876,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591118513
    },
    {
        "content": "<p>I did the following. I hope I understood what you meant</p>",
        "id": 199559173,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591134978
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Is OK in my branch and in master</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BAR</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"p\">(</span><span class=\"o\">&amp;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// Is OK in my branch and in master</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BAZ</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\">  </span><span class=\"c1\">// Is a compilation error in my branch and an ICE master</span>\n</code></pre></div>",
        "id": 199559227,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591135048
    },
    {
        "content": "<p>That's correct, but I'm more interested in the how than the fact that it works. I'm happy to review a PR. I don't have a concrete strategy in mind for how to fix <a href=\"https://github.com/rust-lang/rust/issues/71212\">#71212</a>.</p>",
        "id": 199562226,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591137480
    },
    {
        "content": "<p>sure I'll open a draft pr and ping you</p>",
        "id": 199563625,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591138801
    },
    {
        "content": "<p>I think the question was about <code>const BIZ: &amp;'static &amp;'static mut usize = &amp;&amp;mut 5;</code>, which isn't mutable but the changes we discussed will mark it as such</p>",
        "id": 199585706,
        "sender_full_name": "oli",
        "timestamp": 1591168078
    },
    {
        "content": "<p>then again, this may be fine for a first version</p>",
        "id": 199585745,
        "sender_full_name": "oli",
        "timestamp": 1591168086
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: mutable memory (`&amp;mut`) is not allowed in constant\n --&gt; asd.rs:7:1\n  |\n7 | const BIZ: &amp;&#39;static &amp;&#39;static mut usize = &amp;&amp;mut 5;\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n\n\n<p>both of you were right.</p>",
        "id": 199624731,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591193758
    },
    {
        "content": "<p>That error is not from const checking though?</p>",
        "id": 199627769,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591195169
    },
    {
        "content": "<p>Should this be an AST based qualif?</p>",
        "id": 199627803,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591195192
    },
    {
        "content": "<blockquote>\n<p>Should this be an AST based qualif?</p>\n</blockquote>",
        "id": 199627889,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591195224
    },
    {
        "content": "<p>Im not familiar with that term</p>",
        "id": 199627916,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591195240
    },
    {
        "content": "<p>What would that mean?</p>",
        "id": 199628024,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591195300
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 199628128,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591195338
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 199628140,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591195345
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 199628141,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591195346
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 199628142,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591195346
    },
    {
        "content": "<p>nevermind</p>",
        "id": 199628146,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591195349
    },
    {
        "content": "<p>I was wondering if there was a way to know if a constant is exposed to be used during runtime or not</p>",
        "id": 199628254,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591195425
    },
    {
        "content": "<p>If you were to do that with HasMutInterior, you would disallow <code>&amp;&amp;mut</code> anywhere in a const fn, not just the final value.</p>",
        "id": 199628395,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591195496
    },
    {
        "content": "<p>I think this needs more of a \"top-down\" approach, changing a single line here or there is not enough</p>",
        "id": 199628480,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591195541
    },
    {
        "content": "<p>You could write a new Qualif for mutable references and only check for it in the final value of a const.</p>",
        "id": 199628608,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591195594
    },
    {
        "content": "<p>Ohhh ok</p>",
        "id": 199628726,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591195648
    },
    {
        "content": "<p>Did you consider my proposal to disallow &amp;mut at the top level of a const or static?</p>",
        "id": 199628764,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591195669
    },
    {
        "content": "<p>how/where are <code>Qualif</code>s called?</p>",
        "id": 199628767,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591195669
    },
    {
        "content": "<p>The file is called validation</p>",
        "id": 199628869,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591195702
    },
    {
        "content": "<p>Im on a phone so linking is a pain XD</p>",
        "id": 199628959,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591195746
    },
    {
        "content": "<p>Adding a new qualif that runs unconditionally is not ideal though, I had hoped there might be a better way</p>",
        "id": 199629098,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591195803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199628959\">said</a>:</p>\n<blockquote>\n<p>Im on a phone so linking is a pain XD</p>\n</blockquote>\n<p>np I'll look it up</p>",
        "id": 199629169,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591195836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199628764\">said</a>:</p>\n<blockquote>\n<p>Did you consider my proposal to disallow &amp;mut at the top level of a const or static?</p>\n</blockquote>\n<p>I'm not <code>Qualif</code>ied enough to say if that works or not but it sounds reasonable to me.</p>",
        "id": 199629257,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591195869
    },
    {
        "content": "<p>what counts as an \"item\" for <code>ConstCx</code>?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"sd\">/// Information about the item currently being const-checked, as well as a reference to the global</span>\n<span class=\"sd\">/// context.</span>\n</code></pre></div>",
        "id": 199629711,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591196075
    },
    {
        "content": "<p>The syntactical \"item\" like a fn or a const</p>",
        "id": 199630753,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591196526
    },
    {
        "content": "<p>ok great</p>",
        "id": 199630818,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591196554
    },
    {
        "content": "<p>I'll try to add a new dummy qualif to get familiar with them</p>",
        "id": 199630887,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591196585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132916\">Christian Poveda</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199624731\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>error: mutable memory (`&amp;mut`) is not allowed in constant\n --&gt; asd.rs:7:1\n  |\n7 | const BIZ: &amp;&#39;static &amp;&#39;static mut usize = &amp;&amp;mut 5;\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n\n\n<p>both of you were right.</p>\n</blockquote>\n<p>is is there any way to know which qualif caused this error?</p>",
        "id": 199664768,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591212389
    },
    {
        "content": "<p>grep for the error message</p>",
        "id": 199664812,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591212419
    },
    {
        "content": "<p>Ok it is done by <code>InternVisitor</code></p>",
        "id": 199665271,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591212603
    },
    {
        "content": "<p>inside <code>visit_value</code></p>",
        "id": 199665341,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591212636
    },
    {
        "content": "<p>but then should I remove that?</p>",
        "id": 199665365,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591212648
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132916\">Christian Poveda</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199665365\">said</a>:</p>\n<blockquote>\n<p>but then should I remove that?</p>\n</blockquote>\n<p>To accomplish what?</p>",
        "id": 199665571,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591212724
    },
    {
        "content": "<p>I think I don't  understand what's running before what</p>",
        "id": 199665883,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591212866
    },
    {
        "content": "<p>I believe that error originates during const-eval (which runs post-monomorphization) and not during const-checking (which runs before). We want to catch this error in const-checking, which is where the <code>Qualif</code> API lives.</p>",
        "id": 199666100,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591212981
    },
    {
        "content": "<p>ok but then something weird is happening</p>",
        "id": 199666166,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591213014
    },
    {
        "content": "<p>If i remove this: <a href=\"https://github.com/rust-lang/rust/pull/72934/\">https://github.com/rust-lang/rust/pull/72934/</a></p>",
        "id": 199666226,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591213043
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: mutable memory (`&amp;mut`) is not allowed in constant\n --&gt; asd.rs:7:1\n  |\n7 | const BIZ: &amp;&#39;static &amp;&#39;static mut usize = &amp;&amp;mut 5;\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n\n\n<p>this error also happens</p>",
        "id": 199666272,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591213069
    },
    {
        "content": "<p>(wrong window)</p>",
        "id": 199666349,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591213088
    },
    {
        "content": "<p>so it seems that \"just changing\" that line doesn't catch the error</p>",
        "id": 199666481,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591213155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199666100\">said</a>:</p>\n<blockquote>\n<p>I believe that error originates during const-eval (which runs post-monomorphization) and not during const-checking (which runs before). We want to catch this error in const-checking, which is where the <code>Qualif</code> API lives.</p>\n</blockquote>\n<p>but then If we manage to write a good enough <code>Qualif</code>  then we should be able to capture cases like these before const-eval (and avoid the <code>InternVisitor</code> error. Right?</p>",
        "id": 199666691,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591213246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Are we thinking that using dataflow to detect <code>&amp;mut</code> in the return place is the correct approach?</p>",
        "id": 199667160,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591213438
    },
    {
        "content": "<p>I kind of wanted to avoid another dataflow analysis for const-checking. I think my \"no <code>&amp;mut</code> at the top-level, only in <code>const fn</code>\" rule would accomplish this. Is that too restrictive?</p>",
        "id": 199667453,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591213575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> The alternative (which you seem to have discussed in a private forum?) would be to add an <code>AllowsIndirectMutation</code> implementer of the <code>Qualif</code> trait  that is <code>in_any_value_of_ty</code> for all types that contain a mutable reference, and <code>in_adt_inherently</code> for <code>&amp;mut T</code>. Handling <code>&amp;&amp;mut T</code>, which I think could be legal, can be handled later since it will require changing the validation logic in const-eval .</p>",
        "id": 199668127,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591213878
    },
    {
        "content": "<p>You would then check for that <code>Qualif</code> in the return place at all <code>Return</code> terminators in the <code>Visitor</code> in <code>validation.rs</code>, emitting an error if necessary.</p>",
        "id": 199668364,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591213969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199667453\">said</a>:</p>\n<blockquote>\n<p>I kind of wanted to avoid another dataflow analysis for const-checking. I think my \"no <code>&amp;mut</code> at the top-level, only in <code>const fn</code>\" rule would accomplish this. Is that too restrictive?</p>\n</blockquote>\n<p>I don't have any strong opinions on this matter. I'd do whatever you think is the correct approach.</p>",
        "id": 199668651,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591214109
    },
    {
        "content": "<p><code>in_adt_inherently</code> is so named because the only things that were a problem in a const context, custom <code>Drop</code> impls and <code>UnsafeCell</code>, were on ADTs, not primitives.</p>",
        "id": 199668654,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591214112
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132916\">Christian Poveda</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199668651\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199667453\">said</a>:</p>\n<blockquote>\n<p>I kind of wanted to avoid another dataflow analysis for const-checking. I think my \"no <code>&amp;mut</code> at the top-level, only in <code>const fn</code>\" rule would accomplish this. Is that too restrictive?</p>\n</blockquote>\n<p>I don't have any strong opinions on this matter. I'd do whatever you think is the correct approach.</p>\n</blockquote>\n<p>We need to come to a consensus here still.</p>",
        "id": 199668769,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591214164
    },
    {
        "content": "<p>We meaning <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span></p>",
        "id": 199668877,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591214223
    },
    {
        "content": "<p>We'll need to change <code>in_adt_inherently</code> to work on all types. I think it won't quite work as is</p>",
        "id": 199670794,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591215113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199670794\">said</a>:</p>\n<blockquote>\n<p>We'll need to change <code>in_adt_inherently</code> to work on all types. I think it won't quite work as is</p>\n</blockquote>\n<p>Why? is it because <code>in_adt_inherently</code> is not capable of reading the generic parameters of a type or something like that?</p>",
        "id": 199686475,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591224361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199667160\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> Are we thinking that using dataflow to detect <code>&amp;mut</code> in the return place is the correct approach?</p>\n</blockquote>\n<p>Not necessarily</p>",
        "id": 199712164,
        "sender_full_name": "oli",
        "timestamp": 1591254929
    },
    {
        "content": "<p>I think we'd be fine just blocking on <code>&amp;mut</code> in the final type, so we'd forbid <code>Option&lt;&amp;mut T&gt;</code> even if it is <code>None</code></p>",
        "id": 199712245,
        "sender_full_name": "oli",
        "timestamp": 1591254965
    },
    {
        "content": "<p>which is totally fine, since we can always move to dataflow if we want to</p>",
        "id": 199712254,
        "sender_full_name": "oli",
        "timestamp": 1591254975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199712245\">said</a>:</p>\n<blockquote>\n<p>I think we'd be fine just blocking on <code>&amp;mut</code> in the final type, so we'd forbid <code>Option&lt;&amp;mut T&gt;</code> even if it is <code>None</code></p>\n</blockquote>\n<p>That's a breaking change.</p>",
        "id": 199772291,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591287690
    },
    {
        "content": "<p>oh right... then I don't understand how you plan on getting this to work without dataflow</p>",
        "id": 199772768,
        "sender_full_name": "oli",
        "timestamp": 1591287890
    },
    {
        "content": "<p>If we forbid <code>&amp;mut</code>at the \"top-level\", there's no way to get a <code>&amp;mut T</code> into the final value of a <code>const</code> without running afoul of the borrow-checker.</p>",
        "id": 199773317,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591288146
    },
    {
        "content": "<p>At some point, there will be stuff like <code>Box::leak</code>, but that's a ways off.</p>",
        "id": 199773513,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591288223
    },
    {
        "content": "<p>I get that, I don't get how you want to forbid it. If you aren't forbidding it at the type level (which would be hard due to associated consts anyway), I don't understand where you mean to forbid it</p>",
        "id": 199773545,
        "sender_full_name": "oli",
        "timestamp": 1591288238
    },
    {
        "content": "<p>The same way we currently forbid <code>&amp;mut</code> in consts, forbid creating them with <code>Rvalue::Ref(BorrowKind::Mut)</code></p>",
        "id": 199773687,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591288304
    },
    {
        "content": "<p>or do you mean to forbid any <code>&amp;mut x</code> rvalues inside const contexts except for <code>const fn</code>?</p>",
        "id": 199773703,
        "sender_full_name": "oli",
        "timestamp": 1591288316
    },
    {
        "content": "<p>ooh</p>",
        "id": 199773712,
        "sender_full_name": "oli",
        "timestamp": 1591288320
    },
    {
        "content": "<p>we can certainly start this way, as  it's definitely forward compatible to adding it to more places later</p>",
        "id": 199773853,
        "sender_full_name": "oli",
        "timestamp": 1591288384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199773853\">said</a>:</p>\n<blockquote>\n<p>we can certainly start this way, as adding it to more places is definitely forward compatible</p>\n</blockquote>\n<p>Yeah, I think once we have heap allocation this will no longer be sufficent, since it's another way to allocate things at compile-time that would live for the duration of the program. Until then, however, I believe the only way to get a long lived thing in const-eval is putting it at the top-level of a <code>const</code> or <code>static</code> or via promotion, which doesn't apply to <code>&amp;mut</code> except for zero-sized arrays.</p>",
        "id": 199774386,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591288633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/mutable.20borrows.20in.20constants/near/199773703\">said</a>:</p>\n<blockquote>\n<p>or do you mean to forbid any <code>&amp;mut x</code> rvalues inside const contexts except for <code>const fn</code>?</p>\n</blockquote>\n<p>so, is this the final consensus?</p>",
        "id": 199776952,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591289740
    },
    {
        "content": "<p>I think we're still thinking through the implications. Because we promote <code>&amp;mut []</code>, it would be possible to define a <code>const fn</code> that returns a <code>&amp;'static mut [i32; 0]</code>. Then we could put that into the final value of a <code>const</code>. Is this okay?</p>",
        "id": 199777519,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591289985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> does that mean that if <code>&amp;mut []</code> gets promoted, this:</p>\n<blockquote>\n<p>or do you mean to forbid any &amp;mut x rvalues inside const contexts except for const fn?</p>\n</blockquote>\n<p>would cause a compilation error when otherwise it would not have failed?</p>",
        "id": 199778734,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591290487
    },
    {
        "content": "<p>I don't understand the question</p>",
        "id": 199779014,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591290627
    },
    {
        "content": "<p>Maybe an example would help?</p>",
        "id": 199779036,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591290637
    },
    {
        "content": "<p>I don't have a clear example yet. My question is why promoting <code>&amp;mut []</code> is a problem with this approach?</p>",
        "id": 199779253,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591290749
    },
    {
        "content": "<p>It might be incompatible with a future dataflow- or type-based approach. That's not a problem for now, but we should be thinking about what we are ultimately willing to stabilize.</p>",
        "id": 199779530,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591290876
    },
    {
        "content": "<p>Since <code>const fn foo() -&gt; &amp;'static [i32] { &amp;mut [] }</code> doesn't compile on stable today, we can just not allow it in this minimal <code>&amp;mut</code> feature, too</p>",
        "id": 199839881,
        "sender_full_name": "oli",
        "timestamp": 1591338678
    },
    {
        "content": "<p>Since it even won't compile with the feature gates (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=39e910d5ac87ffe533ae2c7f22aa66df\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=39e910d5ac87ffe533ae2c7f22aa66df</a>) I think we're actually fine here</p>",
        "id": 199839947,
        "sender_full_name": "oli",
        "timestamp": 1591338743
    },
    {
        "content": "<p>Ah, you're right. We only promote <code>&amp;mut []</code> in a <a href=\"https://github.com/rust-lang/rust/blob/118b50524b79e565f017e08bce9b90a16c63634f/src/librustc_mir/transform/promote_consts.rs#L382-L387\">non-const <code>fn</code></a></p>",
        "id": 199984195,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591462966
    },
    {
        "content": "<p>So with that ruled out, I think there's no safe way to get a <code>&amp;'static mut</code> without a top-level <code>&amp;mut</code>.</p>",
        "id": 199984308,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591463114
    },
    {
        "content": "<p>The question now is whether this is worth doing given the usability hit. Users should usually be able to refactor their <code>const</code> or <code>static</code> initializer into a <code>const fn</code> if they need to use a short-lived <code>&amp;mut</code>.  I think we should implement this and see what kind of complaints we get.</p>",
        "id": 199984397,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591463263
    },
    {
        "content": "<p>I agree, this is the best path forward</p>",
        "id": 199985730,
        "sender_full_name": "oli",
        "timestamp": 1591465429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> Okay, we have consensus <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span>. Do you want to implement this or should I? It should only require a few lines in <code>check_consts::ops</code> (see <code>ops::UnionAccess</code>)</p>",
        "id": 199987630,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591468595
    },
    {
        "content": "<p>I want to</p>",
        "id": 199987699,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591468740
    },
    {
        "content": "<p>:D</p>",
        "id": 199987700,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591468741
    },
    {
        "content": "<p>Sweet. It's all yours.</p>",
        "id": 199987705,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1591468753
    },
    {
        "content": "<p>thanks. I'll take a look and come back with questions.</p>",
        "id": 199987715,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591468783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  do you think this behavior is correct? This test fails now</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"kt\">usize</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">(</span><span class=\"n\">foo</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">)</span>-&gt; <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">raw</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">().</span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// This fails because `Foo::bar`requires a mutable reference.</span>\n<span class=\"w\">    </span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"> </span><span class=\"c1\">// This fails because there is an explicit mutable reference.</span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 200147356,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591645868
    },
    {
        "content": "<p>Yes, that seems entirely correct to me</p>",
        "id": 200147798,
        "sender_full_name": "oli",
        "timestamp": 1591646079
    },
    {
        "content": "<p>as in, this test failing to compile is the correct behaviour</p>",
        "id": 200147926,
        "sender_full_name": "oli",
        "timestamp": 1591646142
    },
    {
        "content": "<p>and especially it failing in the way you describe</p>",
        "id": 200147945,
        "sender_full_name": "oli",
        "timestamp": 1591646149
    },
    {
        "content": "<p>Yeah to me too. But the first error was a little bit surprising to me from an user's perspective</p>",
        "id": 200147971,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591646161
    },
    {
        "content": "<p>like, I actually had to think about <code>bar</code> requiring the <code>&amp;mut self</code> for a second before realizing why it's an error</p>",
        "id": 200148072,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591646197
    },
    {
        "content": "<p>but i suppose such things aren't in the scope of this PR :P</p>",
        "id": 200148106,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591646217
    },
    {
        "content": "<p>Well :D if you feel up to it, make sure the diagnostic makes it obvious enough</p>",
        "id": 200148999,
        "sender_full_name": "oli",
        "timestamp": 1591646615
    },
    {
        "content": "<p>if not, open a diagnostics issue ;)</p>",
        "id": 200149018,
        "sender_full_name": "oli",
        "timestamp": 1591646622
    },
    {
        "content": "<p>I think I'll try to be sure the behavior is correct before complaining/fixing the diagnostics :P</p>",
        "id": 200149120,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591646660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what should happen with statics?</p>",
        "id": 200149836,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591647020
    },
    {
        "content": "<p>same thing</p>",
        "id": 200149864,
        "sender_full_name": "oli",
        "timestamp": 1591647035
    },
    {
        "content": "<p>even <code>static mut</code></p>",
        "id": 200149869,
        "sender_full_name": "oli",
        "timestamp": 1591647039
    },
    {
        "content": "<p>isn't that too restrictive?</p>",
        "id": 200149888,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591647052
    },
    {
        "content": "<p>much simpler to just do everything the same way everywhere</p>",
        "id": 200149891,
        "sender_full_name": "oli",
        "timestamp": 1591647055
    },
    {
        "content": "<p>less fragile, too</p>",
        "id": 200149902,
        "sender_full_name": "oli",
        "timestamp": 1591647059
    },
    {
        "content": "<p><code>static mut</code> is considered unsound anyway: <a href=\"https://github.com/rust-lang/rust/issues/53639\">https://github.com/rust-lang/rust/issues/53639</a></p>",
        "id": 200150082,
        "sender_full_name": "oli",
        "timestamp": 1591647135
    },
    {
        "content": "<p>and <code>static</code> is no different from <code>const</code> wrt mutable references</p>",
        "id": 200150114,
        "sender_full_name": "oli",
        "timestamp": 1591647148
    },
    {
        "content": "<p>also, we want to start out very restrictive and see if we can get away with it</p>",
        "id": 200150153,
        "sender_full_name": "oli",
        "timestamp": 1591647173
    },
    {
        "content": "<p>ok then</p>",
        "id": 200150173,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591647187
    },
    {
        "content": "<p>so I don't think there's any <code>too restrictive</code> as long as we get <code>&amp;mut</code> in <code>const fn</code> bodies, args and return types</p>",
        "id": 200150196,
        "sender_full_name": "oli",
        "timestamp": 1591647199
    },
    {
        "content": "<p>Ok then, I updated the tests, if CI is happy with them I think this is ready for review: <a href=\"https://github.com/rust-lang/rust/pull/72934\">https://github.com/rust-lang/rust/pull/72934</a></p>",
        "id": 200150758,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1591647484
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span>  I've updated the issues to reflect the status quo and pinged the lang team for stabilization of <code>&amp;mut</code>: <a href=\"https://github.com/rust-lang/rust/issues/57349#issuecomment-665897390\">https://github.com/rust-lang/rust/issues/57349#issuecomment-665897390</a></p>",
        "id": 205407584,
        "sender_full_name": "oli",
        "timestamp": 1596053484
    },
    {
        "content": "<p>great :)</p>",
        "id": 205407945,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1596053660
    },
    {
        "content": "<p>I still have/want to enable <code>&amp;mut</code> outside <code>const fn</code>s as we discussed but as you said that can be done independently</p>",
        "id": 205408045,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1596053715
    },
    {
        "content": "<p>Sweet. Thanks <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>. Const qualification should be sound (although not precise) in the presence of <code>&amp;mut</code>, so I don't know of any blockers.</p>",
        "id": 205415698,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1596057916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I have a concern that as we get more and more fractal with our divisions as part of stabilizing what's ready, we create a frustrating experience for users where they are very regularly surprised by implementation limitations on stable</p>",
        "id": 205483899,
        "sender_full_name": "boats",
        "timestamp": 1596118708
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 205483903,
        "sender_full_name": "boats",
        "timestamp": 1596118711
    },
    {
        "content": "<p>yea</p>",
        "id": 205484718,
        "sender_full_name": "oli",
        "timestamp": 1596119100
    },
    {
        "content": "<p>I'd at least like a better sense of the plan and time frame for 71212</p>",
        "id": 205486543,
        "sender_full_name": "boats",
        "timestamp": 1596119930
    },
    {
        "content": "<p>the reason we did this split is that we didn't have a properly hashed out plan. I'm writing that now by checking our validation logic</p>",
        "id": 205487656,
        "sender_full_name": "oli",
        "timestamp": 1596120439
    }
]