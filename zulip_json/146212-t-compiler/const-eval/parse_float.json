[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> any idea what the purpose of this <code>parse</code> call is?<br>\n<a href=\"https://github.com/rust-lang/rust/blob/2268d9923bcb34a6c921d285cca7fa3dba857c02/src/librustc_mir/hair/constant.rs#L89\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2268d9923bcb34a6c921d285cca7fa3dba857c02/src/librustc_mir/hair/constant.rs#L89\">https://github.com/rust-lang/rust/blob/2268d9923bcb34a6c921d285cca7fa3dba857c02/src/librustc_mir/hair/constant.rs#L89</a><br>\nthe result is thrown away as is the error information, but this does short-circuit in case of error. but then it parses the same thing again anyway?</p>",
        "id": 166567952,
        "sender_full_name": "RalfJ",
        "timestamp": 1558864020
    },
    {
        "content": "<p>It parses it again with a different algorithm though. I thought it was intended to cross-validate the two implementations, but i can't explain why it combines them in this way.</p>",
        "id": 166568018,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558864185
    },
    {
        "content": "<p>there used to be a comment there that referenced an issue, not sure why it got lost or what issue that was</p>",
        "id": 166570031,
        "sender_full_name": "oli",
        "timestamp": 1558867913
    },
    {
        "content": "<p>oh you're probably thinking of <a href=\"https://github.com/rust-lang/rust/issues/31407\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/31407\">#31407</a></p>",
        "id": 166571064,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1558869894
    },
    {
        "content": "<p>code seems to be added by <a href=\"https://github.com/rust-lang/rust/commit/cf103e56bd0bfdc3ef7202ba774a1981adb36a46\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/cf103e56bd0bfdc3ef7202ba774a1981adb36a46\">https://github.com/rust-lang/rust/commit/cf103e56bd0bfdc3ef7202ba774a1981adb36a46</a> (by <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  :D ) and I dont see a comment</p>",
        "id": 166571757,
        "sender_full_name": "RalfJ",
        "timestamp": 1558871255
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> that's because it was copied from very old code :P</p>",
        "id": 166722890,
        "sender_full_name": "eddyb",
        "timestamp": 1559054205
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/e999e7b8b2e35a495d6b9630ab987c0703c6ab48/src/librustc_const_math/float.rs#L79-L89\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e999e7b8b2e35a495d6b9630ab987c0703c6ab48/src/librustc_const_math/float.rs#L79-L89\">https://github.com/rust-lang/rust/blob/e999e7b8b2e35a495d6b9630ab987c0703c6ab48/src/librustc_const_math/float.rs#L79-L89</a></p>",
        "id": 166723119,
        "sender_full_name": "eddyb",
        "timestamp": 1559054367
    },
    {
        "content": "<p>huh this is missing a FIXME</p>",
        "id": 166723135,
        "sender_full_name": "eddyb",
        "timestamp": 1559054380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do you remember why you removed the check that <code>libcore</code> and <code>rustc_apfloat</code> agree?</p>",
        "id": 166723420,
        "sender_full_name": "eddyb",
        "timestamp": 1559054559
    },
    {
        "content": "<p>yeah with such a check I wouldn't have asked</p>",
        "id": 166724560,
        "sender_full_name": "RalfJ",
        "timestamp": 1559055340
    },
    {
        "content": "<p>but maybe they actually disagree in practice and this made more programs go through -- as in, <a href=\"https://github.com/rust-lang/rust/issues/31407\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/31407\">https://github.com/rust-lang/rust/issues/31407</a></p>",
        "id": 166724578,
        "sender_full_name": "RalfJ",
        "timestamp": 1559055357
    },
    {
        "content": "<p>if they disagree then we have an issue? but I'd defer to <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span></p>",
        "id": 166724645,
        "sender_full_name": "eddyb",
        "timestamp": 1559055384
    },
    {
        "content": "<p>We'd have a novel (frightening) issue if they both parsed the same string as a different float. We already know they can disagree in that libcore fails to parse something apfloat can parse.</p>",
        "id": 166725636,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1559055992
    },
    {
        "content": "<p>oh so they disagree in which floats they accept, but if they both accept they should give the same result?</p>",
        "id": 166725689,
        "sender_full_name": "RalfJ",
        "timestamp": 1559056022
    },
    {
        "content": "<p>Yes. The disagreement about which floats are accepted is a bug (in libcore), but a relatively benign one.</p>",
        "id": 166725729,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1559056051
    },
    {
        "content": "<p>also why do we care if the one in libcore accepts this float at all?^^ is that just serving as \"extended testsuite\"?</p>",
        "id": 166725736,
        "sender_full_name": "RalfJ",
        "timestamp": 1559056059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> we re-introduced the check that both succeed, are you saying we should also be checking that they both produce the same result in case of success?</p>",
        "id": 166725815,
        "sender_full_name": "eddyb",
        "timestamp": 1559056096
    },
    {
        "content": "<p>If you want better cross-validation, yeah. Accepting the right decimal strings is relatively easy compared to computing the right binary float result.</p>",
        "id": 166725887,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1559056146
    },
    {
        "content": "<p>we should then run a <code>check</code> crater run w/ the check reintroduced</p>",
        "id": 166725924,
        "sender_full_name": "eddyb",
        "timestamp": 1559056187
    },
    {
        "content": "<p>I guess? I don't think it's terribly likely that this finds any issues (I have relatively high confidence in both implementations now that they're been around long enough and have been cross-validated for a while), but if we're going to compare them <em>at all</em> then comparing the results as well seems more sensible.</p>",
        "id": 166726111,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1559056304
    },
    {
        "content": "<p>also if that line there is really just to test the libcore parser, there should be a comment saying so :)</p>",
        "id": 166726716,
        "sender_full_name": "RalfJ",
        "timestamp": 1559056717
    },
    {
        "content": "<p>Not so much testing one implementation as sanity-checking both, but yeah, the intent should be documented so we don't need another thread like this :)</p>",
        "id": 166727182,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1559057042
    }
]