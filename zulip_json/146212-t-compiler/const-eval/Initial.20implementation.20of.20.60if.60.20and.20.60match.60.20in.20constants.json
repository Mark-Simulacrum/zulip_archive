[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/66507\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66507\">#66507</a> is now up with an initial implementation of RFC 2342 (allow <code>if</code> and <code>match</code> in constants <a href=\"https://github.com/rust-lang/rust/issues/49146\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49146\">#49146</a>). This is my first PR that adds a new feature to rust, so hopefully I didn't do anything too weird. Let me know if I missed anything obvious, or if you have ideas for tests (coverage is pretty sparse at the moment).</p>",
        "id": 180990586,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574056718
    },
    {
        "content": "<p>Taking a look <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 180994655,
        "sender_full_name": "centril",
        "timestamp": 1574063914
    },
    {
        "content": "<p>omfgz <span aria-label=\"tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"tears\">:tears:</span> It's been three years (for me) and we are finally getting there</p>",
        "id": 180996836,
        "sender_full_name": "oli",
        "timestamp": 1574066701
    },
    {
        "content": "<p>I think we should try to come up with a comprehensive list of tests that we want. It's hard for me to keep track of ad-hoc suggestions in comments. If we weren't concerned about readability, we would want the cartesian product of every category below.</p>\n<p>I personally feel comfortable not testing every const-context, but instead having just one test that does this (currently this is <code>control-flow/loop.rs</code>). Also I think we don't need to do both const/runtime asserts everywhere.</p>\n<p>const contexts:<br>\n- <code>const</code><br>\n- <code>static</code> and <code>static mut</code><br>\n- <code>const fn</code><br>\n- <code>array initializer</code><br>\n- <code>const generic param</code></p>\n<p>branching constructs<br>\n- <code>if</code><br>\n- <code>if let</code><br>\n- <code>match</code><br>\n- <code>&amp;&amp;</code> and <code>||</code><br>\n- single-arm <code>match</code></p>\n<p>ways to check results<br>\n- const <code>assert</code><br>\n- runtime <code>assert</code></p>\n<p>qualifs<br>\n- <code>NeedsDrop</code><br>\n- <code>HasMutInterior</code></p>",
        "id": 181047869,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574105507
    },
    {
        "content": "<p>yea one const context totally suffices. Although I think we should just keep forbidding it in <code>static mut</code></p>",
        "id": 181097874,
        "sender_full_name": "oli",
        "timestamp": 1574158825
    },
    {
        "content": "<p>I don't want to think about the extra features available in <code>static mut</code> that may make this messy</p>",
        "id": 181097893,
        "sender_full_name": "oli",
        "timestamp": 1574158849
    },
    {
        "content": "<p>A few <code>const fn</code> tests would be good, too, because they are a bit different from constants due to having arguments</p>",
        "id": 181098026,
        "sender_full_name": "oli",
        "timestamp": 1574158929
    },
    {
        "content": "<p>if there's a few <code>if</code> tests, it seems sufficient to just keep <code>match</code> everywhere</p>",
        "id": 181098199,
        "sender_full_name": "oli",
        "timestamp": 1574159053
    },
    {
        "content": "<p><code>&amp;&amp;</code> and <code>||</code> are lowered in a way where I don't see how it would be beneficial to test them over just testing nested matches</p>",
        "id": 181098408,
        "sender_full_name": "oli",
        "timestamp": 1574159261
    },
    {
        "content": "<p>same with <code>if let</code></p>",
        "id": 181098419,
        "sender_full_name": "oli",
        "timestamp": 1574159278
    },
    {
        "content": "<p>so basically... test everything somewhere, but do the qualif and assert tests only with <code>match</code></p>",
        "id": 181098480,
        "sender_full_name": "oli",
        "timestamp": 1574159307
    },
    {
        "content": "<blockquote>\n<p>yea one const context totally suffices.</p>\n</blockquote>\n<p>That depends entirely on how many differences there are between the contexts</p>",
        "id": 181106157,
        "sender_full_name": "centril",
        "timestamp": 1574166364
    },
    {
        "content": "<p>I think we can generally collapse \"const, array init, enum discr\" to just \"const\"</p>",
        "id": 181106179,
        "sender_full_name": "centril",
        "timestamp": 1574166406
    },
    {
        "content": "<p>but having some tests for all context would also be good</p>",
        "id": 181106202,
        "sender_full_name": "centril",
        "timestamp": 1574166431
    },
    {
        "content": "<blockquote>\n<p>if there's a few if tests, it seems sufficient to just keep match everywhere</p>\n</blockquote>\n<p>This sort of assumes that the desugaring will always use <code>match</code>, but I don't think it will in the future</p>",
        "id": 181106269,
        "sender_full_name": "centril",
        "timestamp": 1574166485
    },
    {
        "content": "<p>To throw in more categories, we'll also need tests for <code>ref mut</code></p>",
        "id": 181106300,
        "sender_full_name": "centril",
        "timestamp": 1574166522
    },
    {
        "content": "<p>I think we should err on the side of high test coverage here as the analysis is complicated and the interactions are many</p>",
        "id": 181106399,
        "sender_full_name": "centril",
        "timestamp": 1574166605
    },
    {
        "content": "<p>(but we can also add tests over time...)</p>",
        "id": 181106428,
        "sender_full_name": "centril",
        "timestamp": 1574166650
    },
    {
        "content": "<blockquote>\n<p>I don't want to think about the extra features available in <code>static mut</code> that may make this messy</p>\n</blockquote>\n<p>IMO it is more messy to special-case <code>static mut</code></p>",
        "id": 181123910,
        "sender_full_name": "RalfJ",
        "timestamp": 1574178459
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>if there's a few if tests, it seems sufficient to just keep match everywhere</p>\n</blockquote>\n<p>This sort of assumes that the desugaring will always use <code>match</code>, but I don't think it will in the future</p>\n</blockquote>\n<p>The MIR-level checks that use dataflow analysis for <code>NeedsDrop</code> and <code>HasInteriorMut</code> won't really be affected by desugaring. It all ends up as a <code>SwitchInt</code> eventually. That's why I avoided replicating those tests across multiple high-level constructs.</p>",
        "id": 181142470,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574189623
    },
    {
        "content": "<p>The HIR checks on the other hand should be tested across all high-level constructs.</p>",
        "id": 181142554,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574189668
    },
    {
        "content": "<p>Which currently happens in <code>constrol-flow/loops.rs</code>, but I should replicate this test for <code>if</code>/<code>match</code> as well.</p>",
        "id": 181142760,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574189811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  <code>static mut</code> allows you to create <code>&amp;mut</code> slices, which is kind of scary, but <code>Deref</code> projections of them are forbidden, meaning you can't really mutate them.</p>",
        "id": 181143749,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574190363
    },
    {
        "content": "<p>I think I lean towards allowing <code>if</code>/<code>match</code> in <code>static mut</code> for now, since it makes it easier for the community to try and break it. We should add this to <a href=\"https://github.com/rust-lang/rust/issues/49146\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49146\">#49146</a> as a question to resolve before stabilization though.</p>",
        "id": 181155104,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574198108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I'd also like to write an inside rust blog post before this gets released on nightly explaining some of the weirdness around <code>Drop</code> types and interior mutability in consts.</p>",
        "id": 181155163,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574198160
    },
    {
        "content": "<blockquote>\n<p>The HIR checks on the other hand should be tested across all high-level constructs.</p>\n</blockquote>\n<p>right, but these don't need the combinatorial explosion for everything, just once per construct instead of once per test per construct per qualif bit</p>",
        "id": 181198852,
        "sender_full_name": "oli",
        "timestamp": 1574249432
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>  <code>static mut</code> allows you to create <code>&amp;mut</code> slices, which is kind of scary, but <code>Deref</code> projections of them are forbidden, meaning you can't really mutate them.</p>\n</blockquote>\n<p>well... that's something we'll want to allow at some point, so we'll have to keep it in mind</p>",
        "id": 181198883,
        "sender_full_name": "oli",
        "timestamp": 1574249496
    },
    {
        "content": "<p>We can certainly delay merging the PR until there's a blogpost explaining it</p>",
        "id": 181199136,
        "sender_full_name": "oli",
        "timestamp": 1574249811
    },
    {
        "content": "<p>side note when reading <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/461/files\" target=\"_blank\" title=\"https://github.com/rust-lang/blog.rust-lang.org/pull/461/files\">https://github.com/rust-lang/blog.rust-lang.org/pull/461/files</a> : while we should feature gate loops and conditions separately, we should probably stabilize together so we don't nudge ppl into writing loops via recursion</p>",
        "id": 181199790,
        "sender_full_name": "oli",
        "timestamp": 1574250595
    },
    {
        "content": "<p>agree wrt. stabilizing together; had the same thought</p>",
        "id": 181216278,
        "sender_full_name": "centril",
        "timestamp": 1574263036
    },
    {
        "content": "<p>I also think we should go nuts with using <code>rustc_const_unstable</code> everywhere as much as we can to test the implementation and see how far it takes us</p>",
        "id": 181216341,
        "sender_full_name": "centril",
        "timestamp": 1574263073
    },
    {
        "content": "<p>then we can FCP the actual stabilizations</p>",
        "id": 181216386,
        "sender_full_name": "centril",
        "timestamp": 1574263083
    },
    {
        "content": "<p>(well we need to stabilize the language features first)</p>",
        "id": 181216408,
        "sender_full_name": "centril",
        "timestamp": 1574263089
    },
    {
        "content": "<p>We'll also need to test stuff like <code>ref mut</code> btw</p>",
        "id": 181216461,
        "sender_full_name": "centril",
        "timestamp": 1574263139
    }
]