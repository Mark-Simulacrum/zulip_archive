[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> while explaining someone places and value on miri over lunch, I had an epiphany: I think we should change the <code>meta</code> field in <code>MemPlace</code> from <code>Option&lt;Scalar&gt;</code> to <code>Size</code>. A place refers to a piece of memory, and it seems perfectly sensible to say that we must know location and size of that piece. It also completes a nice symmetry because we already have an <code>Align</code> in there.</p>",
        "id": 136034270,
        "sender_full_name": "RalfJ",
        "timestamp": 1539860880
    },
    {
        "content": "<p>but the meta field can also be other things, like a vtable pointer</p>",
        "id": 136034327,
        "sender_full_name": "oli",
        "timestamp": 1539860938
    },
    {
        "content": "<p>we only ever need it to compute the size of the place, right?</p>",
        "id": 136034335,
        "sender_full_name": "RalfJ",
        "timestamp": 1539860952
    },
    {
        "content": "<p>oh</p>",
        "id": 136034339,
        "sender_full_name": "oli",
        "timestamp": 1539860958
    },
    {
        "content": "<p>hm</p>",
        "id": 136034340,
        "sender_full_name": "oli",
        "timestamp": 1539860959
    },
    {
        "content": "<p>as in, <code>size_and_align_of</code></p>",
        "id": 136034342,
        "sender_full_name": "RalfJ",
        "timestamp": 1539860961
    },
    {
        "content": "<p>MemPlace is already \"monomorphized\", right?</p>",
        "id": 136034355,
        "sender_full_name": "oli",
        "timestamp": 1539860986
    },
    {
        "content": "<p>moreover, we might then want to change <code>memory</code> such that all access happens through a <code>MemPlace</code>. That would group some arguments together nicely, and it'd also have prevented some bugs in my stacked borrows implementation where I accessed memory without doing a value-to-place conversion first, which stacked borrows assume always happens (<span class=\"user-mention\" data-user-id=\"125253\">@Nicole Mazzuca</span> will like this)</p>",
        "id": 136034359,
        "sender_full_name": "RalfJ",
        "timestamp": 1539860998
    },
    {
        "content": "<p>\"monomorphized\"?</p>",
        "id": 136034401,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861005
    },
    {
        "content": "<p>I remember you wrote some code for what happens during a deref of a fat pointer</p>",
        "id": 136034426,
        "sender_full_name": "oli",
        "timestamp": 1539861047
    },
    {
        "content": "<p>so that the <code>MemPlace</code>'s pointer already points to the beginning of a slice's memory</p>",
        "id": 136034442,
        "sender_full_name": "oli",
        "timestamp": 1539861081
    },
    {
        "content": "<p>or in case of a trait object, points to the beginning of the object</p>",
        "id": 136034453,
        "sender_full_name": "oli",
        "timestamp": 1539861100
    },
    {
        "content": "<p>ah no that was something else</p>",
        "id": 136034503,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861132
    },
    {
        "content": "<p>that was for <code>MPlaceTy</code></p>",
        "id": 136034508,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861138
    },
    {
        "content": "<p>monomorphizing the <em>type</em></p>",
        "id": 136034513,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861144
    },
    {
        "content": "<p>it is also all gone again because it made no sense</p>",
        "id": 136034518,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861151
    },
    {
        "content": "<p>computing the monomorphized type is sometimes hard (like, in <code>Rc&lt;Debug&gt;</code> we'd have to adapt the <code>subst</code>), and sometimes that type doesn't even exist (what is the type of a <code>str</code> with length 10?)</p>",
        "id": 136034532,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861198
    },
    {
        "content": "<p>right</p>",
        "id": 136034541,
        "sender_full_name": "oli",
        "timestamp": 1539861233
    },
    {
        "content": "<p>I have to say this idea right now excites me quite a bit :)</p>",
        "id": 136034639,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861327
    },
    {
        "content": "<p>we already pass ptr-size-align to <code>memory</code></p>",
        "id": 136034644,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861335
    },
    {
        "content": "<p>now finally we'd close the gap between that are the <code>MemPlace</code> abstraction</p>",
        "id": 136034652,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861345
    },
    {
        "content": "<p>I just checked, but the only place where I thought we'd have run into trouble is <a href=\"https://github.com/rust-lang/rust/blob/2d81989974a134025be733115574bee8084095b4/src/librustc_mir/interpret/place.rs#L932\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/2d81989974a134025be733115574bee8084095b4/src/librustc_mir/interpret/place.rs#L932\">https://github.com/rust-lang/rust/blob/2d81989974a134025be733115574bee8084095b4/src/librustc_mir/interpret/place.rs#L932</a> and that seems fine</p>",
        "id": 136034718,
        "sender_full_name": "oli",
        "timestamp": 1539861402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span>  hm... no actually that's not fine</p>",
        "id": 136034937,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861698
    },
    {
        "content": "<p>I'll have to see where that gets called</p>",
        "id": 136034941,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861710
    },
    {
        "content": "<p>with this, a <code>MemPlace</code> has less information than the reference did</p>",
        "id": 136034985,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861748
    },
    {
        "content": "<p>which, uh, also kills the ref-place-roundrip. so maybe this doesn't work... :/</p>",
        "id": 136034988,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861760
    },
    {
        "content": "<p>but with the instance you should be able to reconstruct everything?</p>",
        "id": 136034995,
        "sender_full_name": "oli",
        "timestamp": 1539861784
    },
    {
        "content": "<p>but I wouldnt have the instance?</p>",
        "id": 136035008,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861836
    },
    {
        "content": "<p>also reconstructing the length of a <code>Rc&lt;[u8]&gt;</code> seems rather hard</p>",
        "id": 136035049,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861859
    },
    {
        "content": "<p>so I think adding <code>Size</code> makes sense, and then we could use <code>MemPlace</code> for the memory interface, but we'd have to keep the <code>meta</code> around to be able to turn a place into a reference again...</p>",
        "id": 136035086,
        "sender_full_name": "RalfJ",
        "timestamp": 1539861955
    },
    {
        "content": "<p>that ends up making a place larger though, not smaller. and memory really doesn't need that metadata</p>",
        "id": 136035296,
        "sender_full_name": "RalfJ",
        "timestamp": 1539862210
    },
    {
        "content": "<p>hm... so maybe we should first try to get rid of the <code>Local</code> optimization, see if that hurts; that frees the name <code>Place</code> because we dont need places referring to locals any more. then <code>MemPlace</code> could be ptr+size+align, and <code>Place</code> could be <code>MemPlace</code>+meta</p>",
        "id": 136035324,
        "sender_full_name": "RalfJ",
        "timestamp": 1539862255
    },
    {
        "content": "<p>and then all memory accesses have to happen through a <code>MemPlace</code></p>",
        "id": 136035394,
        "sender_full_name": "RalfJ",
        "timestamp": 1539862365
    },
    {
        "content": "<p>I'm currently busy with experimenting with making <code>AllocId</code> an <code>enum</code> to get rid of global ids for allocations</p>",
        "id": 136036440,
        "sender_full_name": "oli",
        "timestamp": 1539863482
    },
    {
        "content": "<p>but I can take nuking <code>Local</code>s next</p>",
        "id": 136036454,
        "sender_full_name": "oli",
        "timestamp": 1539863501
    },
    {
        "content": "<p>let's see who gets there first, and let's avoid race conditions?^^</p>",
        "id": 136036581,
        "sender_full_name": "RalfJ",
        "timestamp": 1539863630
    }
]