[
    {
        "content": "<p>I am trying to understand the effect of <a href=\"https://github.com/rust-lang/rust/blob/5171cc76c264fd46f32e140c2e460c77ca87d5e5/compiler/rustc_mir/src/transform/promote_consts.rs#L686\">this code</a> in promotion.<br>\nRemoving it makes only one test case fail: <a href=\"https://github.com/rust-lang/rust/blob/5171cc76c264fd46f32e140c2e460c77ca87d5e5/src/test/ui/statics/static-promotion.rs#L17\">this one</a>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">B</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">STR</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">b\"hi\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&lt;</span><span class=\"n\">B</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">STR</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>But that is very confusing, since I cannot see a reborrow anywhere in that code? <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span>  any idea what is going on?</p>",
        "id": 214489406,
        "sender_full_name": "RalfJ",
        "timestamp": 1603632190
    },
    {
        "content": "<p>I think this comment is actually wrong</p>",
        "id": 214489540,
        "sender_full_name": "oli",
        "timestamp": 1603632367
    },
    {
        "content": "<p><code>_5 = (*_6); </code> is in the MIR of <code>C</code></p>",
        "id": 214489545,
        "sender_full_name": "oli",
        "timestamp": 1603632377
    },
    {
        "content": "<p>and it is a deref of a double reference</p>",
        "id": 214489547,
        "sender_full_name": "oli",
        "timestamp": 1603632384
    },
    {
        "content": "<p>aaah, and that double reference happens because mentioning a static item is <code>*&amp;STR</code></p>",
        "id": 214489578,
        "sender_full_name": "oli",
        "timestamp": 1603632478
    },
    {
        "content": "<p>I'm not sure this is the intended use case of that piece of code</p>",
        "id": 214489626,
        "sender_full_name": "oli",
        "timestamp": 1603632509
    },
    {
        "content": "<p>although... this is part of <code>Rvalue::Ref</code></p>",
        "id": 214489718,
        "sender_full_name": "oli",
        "timestamp": 1603632663
    },
    {
        "content": "<p>so... you're right, this shouldn't be part of anything here. Did you try dumping the MIR before promotion?</p>",
        "id": 214489729,
        "sender_full_name": "oli",
        "timestamp": 1603632692
    },
    {
        "content": "<p>maybe it's just the pre-promotion MIR that contains the reborrow</p>",
        "id": 214489733,
        "sender_full_name": "oli",
        "timestamp": 1603632711
    },
    {
        "content": "<p>is \"PromoteTemps\" the right pass name?</p>",
        "id": 214490166,
        "sender_full_name": "RalfJ",
        "timestamp": 1603633346
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>// MIR for `C` before PromoteTemps\n\nstatic C: A&lt;B&lt;B&lt;[u8]&gt;&gt;&gt; = {\n    let mut _0: A&lt;B&lt;B&lt;[u8]&gt;&gt;&gt;;           // return place in scope 0 at src/test/ui/statics/static-promotion.rs:16:11: 16:24\n    let mut _1: &amp;B&lt;B&lt;[u8]&gt;&gt;;             // in scope 0 at src/test/ui/statics/static-promotion.rs:17:7: 19:6\n    let _2: &amp;B&lt;B&lt;[u8]&gt;&gt;;                 // in scope 0 at src/test/ui/statics/static-promotion.rs:17:7: 19:6\n    let _3: B&lt;B&lt;[u8]&gt;&gt;;                  // in scope 0 at src/test/ui/statics/static-promotion.rs:17:8: 19:6\n    let mut _4: &amp;B&lt;[u8]&gt;;                // in scope 0 at src/test/ui/statics/static-promotion.rs:18:12: 18:25\n    let _5: &amp;B&lt;[u8]&gt;;                    // in scope 0 at src/test/ui/statics/static-promotion.rs:18:12: 18:25\n    let _6: B&lt;[u8]&gt;;                     // in scope 0 at src/test/ui/statics/static-promotion.rs:18:13: 18:25\n    let mut _7: &amp;[u8];                   // in scope 0 at src/test/ui/statics/static-promotion.rs:18:20: 18:23\n    let mut _8: &amp;&amp;[u8];                  // in scope 0 at src/test/ui/statics/static-promotion.rs:18:20: 18:23\n\n    bb0: {\n        StorageLive(_1);                 // scope 0 at src/test/ui/statics/static-promotion.rs:17:7: 19:6\n        StorageLive(_2);                 // scope 0 at src/test/ui/statics/static-promotion.rs:17:7: 19:6\n        StorageLive(_3);                 // scope 0 at src/test/ui/statics/static-promotion.rs:17:8: 19:6\n        StorageLive(_4);                 // scope 0 at src/test/ui/statics/static-promotion.rs:18:12: 18:25\n        StorageLive(_5);                 // scope 0 at src/test/ui/statics/static-promotion.rs:18:12: 18:25\n        StorageLive(_6);                 // scope 0 at src/test/ui/statics/static-promotion.rs:18:13: 18:25\n        StorageLive(_7);                 // scope 0 at src/test/ui/statics/static-promotion.rs:18:20: 18:23\n        StorageLive(_8);                 // scope 0 at src/test/ui/statics/static-promotion.rs:18:20: 18:23\n        _8 = const {alloc1: &amp;&amp;[u8]};     // scope 0 at src/test/ui/statics/static-promotion.rs:18:20: 18:23\n                                         // ty::Const\n                                         // + ty: &amp;&amp;[u8]\n                                         // + val: Value(Scalar(alloc1))\n                                         // mir::Constant\n                                         // + span: src/test/ui/statics/static-promotion.rs:18:20: 18:23\n                                         // + literal: Const { ty: &amp;&amp;[u8], val: Value(Scalar(alloc1)) }\n        _7 = (*_8);                      // scope 0 at src/test/ui/statics/static-promotion.rs:18:20: 18:23\n        _6 = B::&lt;[u8]&gt; { x: move _7 };   // scope 0 at src/test/ui/statics/static-promotion.rs:18:13: 18:25\n        _5 = &amp;_6;                        // scope 0 at src/test/ui/statics/static-promotion.rs:18:12: 18:25\n        _4 = &amp;(*_5);                     // scope 0 at src/test/ui/statics/static-promotion.rs:18:12: 18:25\n        _3 = B::&lt;B&lt;[u8]&gt;&gt; { x: move _4 }; // scope 0 at src/test/ui/statics/static-promotion.rs:17:8: 19:6\n        _2 = &amp;_3;                        // scope 0 at src/test/ui/statics/static-promotion.rs:17:7: 19:6\n        _1 = &amp;(*_2);                     // scope 0 at src/test/ui/statics/static-promotion.rs:17:7: 19:6\n        _0 = A::&lt;B&lt;B&lt;[u8]&gt;&gt;&gt;(move _1);   // scope 0 at src/test/ui/statics/static-promotion.rs:17:5: 19:7\n        StorageDead(_8);                 // scope 0 at src/test/ui/statics/static-promotion.rs:20:1: 20:2\n        StorageDead(_6);                 // scope 0 at src/test/ui/statics/static-promotion.rs:20:1: 20:2\n        StorageDead(_5);                 // scope 0 at src/test/ui/statics/static-promotion.rs:20:1: 20:2\n        StorageDead(_3);                 // scope 0 at src/test/ui/statics/static-promotion.rs:20:1: 20:2\n        StorageDead(_2);                 // scope 0 at src/test/ui/statics/static-promotion.rs:20:1: 20:2\n        return;                          // scope 0 at src/test/ui/statics/static-promotion.rs:16:1: 20:3\n    }\n}\n\nalloc1 (static: STR, size: 16, align: 8) {\n    ╾───────alloc0────────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........\n}\n\nalloc0 (size: 2, align: 1) {\n    68 69                                           │ hi\n}\n</code></pre></div>",
        "id": 214490175,
        "sender_full_name": "RalfJ",
        "timestamp": 1603633371
    },
    {
        "content": "<p>so for some reason it inserts a bunch of reborrows... I thought we only did that for mutable references?</p>",
        "id": 214490201,
        "sender_full_name": "RalfJ",
        "timestamp": 1603633429
    },
    {
        "content": "<p>I also don't get why this test <em>needs</em> that special case to work, it seems like perfectly promotable things everywhere</p>",
        "id": 214490249,
        "sender_full_name": "RalfJ",
        "timestamp": 1603633453
    },
    {
        "content": "<p>(that special case exists in <code>validate_rvalue</code> but not in the mostly-duplicate code in <code>validate_candidate</code> so I was seeing if I can get rid of it)</p>",
        "id": 214490336,
        "sender_full_name": "RalfJ",
        "timestamp": 1603633575
    },
    {
        "content": "<p>yea, it looks wrong for there to be reborrows inserted, but maybe it's hard to figure that out in mir building?</p>",
        "id": 214490774,
        "sender_full_name": "oli",
        "timestamp": 1603634198
    },
    {
        "content": "<p>probably -- and that is probably why promotion special-cases reborrows</p>",
        "id": 214490794,
        "sender_full_name": "RalfJ",
        "timestamp": 1603634243
    },
    {
        "content": "<p>hm the mroe I learna bout it the more I am actually surprised by how <em>similar</em> the code in <code>validate_candidate</code> and <code>validate_rvalue</code> is... at least I think it is the case that when we promote such a candidate, we only promote the <em>base</em> and still do the projections at runtime? that is the only way <code>&amp;promoted[runtime_idx]</code> can work...</p>",
        "id": 214490856,
        "sender_full_name": "RalfJ",
        "timestamp": 1603634314
    },
    {
        "content": "<p>so I don't understand how this <code>has_mut_interior</code> check (removing the flag when... some condition is met) can make sense on both places</p>",
        "id": 214490872,
        "sender_full_name": "RalfJ",
        "timestamp": 1603634348
    },
    {
        "content": "<p><a href=\"https://github.com/RalfJung/rust/commit/0f57b9f0473bfc23652ad8cde42c1dbd31a172e0\">this patch</a> does not seem to make any of our existing tests fail...</p>",
        "id": 214491467,
        "sender_full_name": "RalfJ",
        "timestamp": 1603635144
    },
    {
        "content": "<p>lol, <a href=\"https://github.com/RalfJung/rust/commit/686deea3822\">removing the other has_interior_mut special case</a> also doesn't make any test fail^^ <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you craft testcases for one/both of them?</p>",
        "id": 214491663,
        "sender_full_name": "RalfJ",
        "timestamp": 1603635381
    },
    {
        "content": "<p>I would guess without those <code>let _: &amp;'static _ = &amp;(Cell::new(1), 2).0;</code> would successfully compile?</p>",
        "id": 214494687,
        "sender_full_name": "oli",
        "timestamp": 1603639148
    },
    {
        "content": "<p>What is this snippet doing?<br>\n<code>[proj_base @ .., ProjectionElem::Deref]</code></p>",
        "id": 214495380,
        "sender_full_name": "oliver",
        "timestamp": 1603640012
    },
    {
        "content": "<p>This is a pattern that requires the last element to be deref and yields everything but the last element as a slice in the <code>proj_base</code> binding</p>",
        "id": 214496967,
        "sender_full_name": "oli",
        "timestamp": 1603642037
    },
    {
        "content": "<p>And projection is the same as it's used here:<br>\n<a href=\"https://rustc-dev-guide.rust-lang.org/queries/incremental-compilation-in-detail.html#the-projection-query-pattern\">https://rustc-dev-guide.rust-lang.org/queries/incremental-compilation-in-detail.html#the-projection-query-pattern</a></p>",
        "id": 214497048,
        "sender_full_name": "oliver",
        "timestamp": 1603642132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Promotion.20and.20reborrows/near/214494687\">said</a>:</p>\n<blockquote>\n<p>I would guess without those <code>let _: &amp;'static _ = &amp;(Cell::new(1), 2).0;</code> would successfully compile?</p>\n</blockquote>\n<p>these snippets allow <em>more</em> promoteds</p>",
        "id": 214498701,
        "sender_full_name": "RalfJ",
        "timestamp": 1603644158
    },
    {
        "content": "<p>they are about clearing the <code>has_mut_interior</code> flag</p>",
        "id": 214498710,
        "sender_full_name": "RalfJ",
        "timestamp": 1603644170
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Promotion.20and.20reborrows/near/214494687\">said</a>:</p>\n<blockquote>\n<p>I would guess without those <code>let _: &amp;'static _ = &amp;(Cell::new(1), 2).0;</code> would successfully compile?</p>\n</blockquote>\n<p>nope, I added that case to <code>promote-not.rs</code> and it still passes</p>",
        "id": 214498815,
        "sender_full_name": "RalfJ",
        "timestamp": 1603644296
    },
    {
        "content": "<p>hm, I thought <code>let _val: &amp;'static _ = &amp;(Cell::new(1), 2).1;</code> was supposed to work but that is already rejected on stable</p>",
        "id": 214499427,
        "sender_full_name": "RalfJ",
        "timestamp": 1603644959
    },
    {
        "content": "<p>ah, <code>let _val: &amp;'static _ = &amp;(Cell::new(1), 2).1;</code> <em>inside a <code>const</code>/<code>static</code></em> fails to promote without this special case</p>",
        "id": 214499759,
        "sender_full_name": "RalfJ",
        "timestamp": 1603645247
    },
    {
        "content": "<p>I think in a <code>fn</code>/<code>const fn</code> we can never even reach that case as we do not promote anything that <em>introduces</em> interior mutability</p>",
        "id": 214499856,
        "sender_full_name": "RalfJ",
        "timestamp": 1603645330
    },
    {
        "content": "<p><del>oh, in a <code>const</code> this cannot happen either as we do not permit interior mutability there</del></p>",
        "id": 214499989,
        "sender_full_name": "RalfJ",
        "timestamp": 1603645461
    },
    {
        "content": "<p><del>so this is only for inside a <code>static</code> initializer</del><br>\nsorry I tested wrong</p>",
        "id": 214499997,
        "sender_full_name": "RalfJ",
        "timestamp": 1603645467
    },
    {
        "content": "<p>I suggest we do a crater experiment, unless <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can come up with more testcases for this:<br>\n<a href=\"https://github.com/rust-lang/rust/pull/78363\">https://github.com/rust-lang/rust/pull/78363</a></p>",
        "id": 214500330,
        "sender_full_name": "RalfJ",
        "timestamp": 1603645894
    }
]