[
    {
        "content": "<p>How much thought has been put in how const generics would add post-monomorphization errors, and impact what is / isn't a semver-breaking change?</p>",
        "id": 276329040,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648040467
    },
    {
        "content": "<p>it wont add post mono errors</p>",
        "id": 276329061,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1648040478
    },
    {
        "content": "<blockquote>\n<p>How much thought has been put in how const generics would add post-monomorphization errors,</p>\n</blockquote>\n<p>a bunch</p>",
        "id": 276329216,
        "sender_full_name": "lcnr",
        "timestamp": 1648040532
    },
    {
        "content": "<p>Eg <a href=\"https://rust-lang.github.io/project-const-generics/design/opaque-and-transparent-assoc-consts.html#additional-stability-requirements\">the design document says</a>:</p>\n<blockquote>\n<p>Without transparent associated constant, this can't break anything. If ASSOC is treated transparently, this change is now theoretically breaking. </p>\n</blockquote>\n<p>But the ramifications of this don't seem to be really explored</p>",
        "id": 276329225,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648040536
    },
    {
        "content": "<p>our current impl requires the user to always have propagate bounds that constants evaluate successfully</p>",
        "id": 276329301,
        "sender_full_name": "lcnr",
        "timestamp": 1648040583
    },
    {
        "content": "<p>thereby preventing CTFE errors during monomorphization</p>",
        "id": 276329335,
        "sender_full_name": "lcnr",
        "timestamp": 1648040601
    },
    {
        "content": "<p>that doesn't make everyone happy. Or well, people dislike it by varying amounts with some believing allowing errors during monomorphization are preferable</p>",
        "id": 276329543,
        "sender_full_name": "lcnr",
        "timestamp": 1648040715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Post-monomorphization.20errors.20and.20stability.20implications/near/276329225\">said</a>:</p>\n<blockquote>\n<p>Eg <a href=\"https://rust-lang.github.io/project-const-generics/design/opaque-and-transparent-assoc-consts.html#additional-stability-requirements\">the design document says</a>:</p>\n<blockquote>\n<p>Without transparent associated constant, this can't break anything. If ASSOC is treated transparently, this change is now theoretically breaking. </p>\n</blockquote>\n<p>But the ramifications of this don't seem to be really explored</p>\n</blockquote>\n<p>I don't understand what you mean here? This is unrelated to evaluation failures</p>",
        "id": 276329925,
        "sender_full_name": "lcnr",
        "timestamp": 1648040886
    },
    {
        "content": "<p>Right, maybe I'm conflating two things.</p>",
        "id": 276329926,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648040887
    },
    {
        "content": "<p>the relevant section of the design doc is <a href=\"https://rust-lang.github.io/project-const-generics/design/index.html#-const-evaluatable-bounds\">https://rust-lang.github.io/project-const-generics/design/index.html#-const-evaluatable-bounds</a></p>",
        "id": 276329983,
        "sender_full_name": "lcnr",
        "timestamp": 1648040930
    },
    {
        "content": "<p>which, as you can see, is currently still mostly empty</p>",
        "id": 276330003,
        "sender_full_name": "lcnr",
        "timestamp": 1648040944
    },
    {
        "content": "<p>The more general question I was asking is \"How much do const generics expose internal code as part of your interface's contract?\"</p>",
        "id": 276330236,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648041092
    },
    {
        "content": "<p>that's still undecided</p>",
        "id": 276330254,
        "sender_full_name": "lcnr",
        "timestamp": 1648041106
    },
    {
        "content": "<p>Right</p>",
        "id": 276330364,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648041148
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/project-const-generics/design/eval-errors-during-selection.html\">https://rust-lang.github.io/project-const-generics/design/eval-errors-during-selection.html</a> talks about adding stability guarantees to panics</p>",
        "id": 276330375,
        "sender_full_name": "lcnr",
        "timestamp": 1648041155
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/project-const-generics/design/opaque-and-transparent-assoc-consts.html\">https://rust-lang.github.io/project-const-generics/design/opaque-and-transparent-assoc-consts.html</a> about leaking implementation details of associated constants</p>",
        "id": 276330389,
        "sender_full_name": "lcnr",
        "timestamp": 1648041167
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/project-const-generics/design/valid-const-parameter-types.html\">https://rust-lang.github.io/project-const-generics/design/valid-const-parameter-types.html</a> \"talks\" (once it is written) about addnig stability guarantees about type definitions (e.g. private fields, this is similar to the current behavior of auto traits)</p>",
        "id": 276330484,
        "sender_full_name": "lcnr",
        "timestamp": 1648041220
    },
    {
        "content": "<p>Okay, you know what, I bungled my original question. Post-mono errors aren't really what I'm asking about. I'm going to start over in a new thread.</p>",
        "id": 276330559,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648041247
    }
]