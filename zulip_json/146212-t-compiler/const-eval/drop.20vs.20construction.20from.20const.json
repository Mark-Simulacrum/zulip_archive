[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Questions.20regarding.20Heap.20allocation.20in.20const.20eval/near/216635183\">said</a>:</p>\n<blockquote>\n<p>the same with <code>const FOO: String = String::new();</code></p>\n</blockquote>\n<p>so, this is actually really really tricky, isn't it? In particular, this means there is a proof obligation in <code>const fn String__new</code>  that <em>the value returned here will cause <code>drop</code> to be a NOP</em>. Because <code>drop</code> <em>will</em> be called in such a const when it gets used.<br>\nOr is the argument that, since no allocation could possibly have been made as part of this (as CTFE wouldnt allow that), ergo <code>drop</code> cannot soundly deallocate any allocation anyway? Hm... I have a hard time turning this into something that I could formalize in Coq, which worries me.^^</p>",
        "id": 216729919,
        "sender_full_name": "RalfJ",
        "timestamp": 1605361496
    },
    {
        "content": "<p>I think the theorem we'd need here is \"if CTFE completes without an error, then the value it produced is also a value that executing the same code at runtime could have produced\". Then we can show that there cannot be an allocation after running this code, so any call to <code>free</code> by <code>drop</code> would be a soundness issue.</p>",
        "id": 216730063,
        "sender_full_name": "RalfJ",
        "timestamp": 1605361651
    },
    {
        "content": "<p>This works fine, until we give users the ability to execute different code at runtime vs compiletime^^</p>",
        "id": 216730099,
        "sender_full_name": "RalfJ",
        "timestamp": 1605361683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Questions.20regarding.20Heap.20allocation.20in.20const.20eval/near/216729919\">said</a>:</p>\n<blockquote>\n<p>so, this is actually really really tricky, isn't it? In particular, this means there is a proof obligation in <code>const fn String__new</code>  that <em>the value returned here will cause <code>drop</code> to be a NOP</em>. Because <code>drop</code> <em>will</em> be called in such a const when it gets used.<br>\nOr is the argument that, since no allocation could possibly have been made as part of this (as CTFE wouldnt allow that), ergo <code>drop</code> cannot soundly deallocate any allocation anyway? Hm... I have a hard time turning this into something that I could formalize in Coq, which worries me.^^</p>\n</blockquote>\n<p>That's not how I see it. I see no relation to dropping or any further processing here. That is an effect (no effect system pun intended) of the fact that <code>const</code> items are actually just constructors of their type</p>",
        "id": 216730588,
        "sender_full_name": "oli",
        "timestamp": 1605362233
    },
    {
        "content": "<p>I always like the example of the \"zst-no-fields-struct-but-!Copy\" situation: <code>struct Foo; const FOO: Foo = Foo;</code>. You can use <code>Foo</code> everywhere to construct values of type <code>Foo</code>, and you can use <code>FOO</code> everywhere to construct values of type <code>Foo</code>. There's no copy happening. It's construction that is happening</p>",
        "id": 216730642,
        "sender_full_name": "oli",
        "timestamp": 1605362307
    },
    {
        "content": "<p>in the case of constants, that construction can be arbitrarily complex</p>",
        "id": 216730647,
        "sender_full_name": "oli",
        "timestamp": 1605362318
    },
    {
        "content": "<p>let's split the discussion here, zulip has threads after all</p>",
        "id": 216730658,
        "sender_full_name": "oli",
        "timestamp": 1605362365
    },
    {
        "content": "<p>but what are the subthreads?^^</p>",
        "id": 216730722,
        "sender_full_name": "RalfJ",
        "timestamp": 1605362461
    },
    {
        "content": "<p>one moment</p>",
        "id": 216730735,
        "sender_full_name": "oli",
        "timestamp": 1605362488
    },
    {
        "content": "<p>I kept the stuff about the different allocators in the original thread</p>",
        "id": 216730786,
        "sender_full_name": "oli",
        "timestamp": 1605362561
    },
    {
        "content": "<p>this thread is now just about our mental models of constants and their uses</p>",
        "id": 216730792,
        "sender_full_name": "oli",
        "timestamp": 1605362576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Questions.20regarding.20Heap.20allocation.20in.20const.20eval/near/216730642\">said</a>:</p>\n<blockquote>\n<p>I always like the example of the \"zst-no-fields-struct-but-!Copy\" situation: <code>struct Foo; const FOO: Foo = Foo;</code>. You can use <code>Foo</code> everywhere to construct values of type <code>Foo</code>, and you can use <code>FOO</code> everywhere to construct values of type <code>Foo</code>. There's no copy happening. It's construction that is happening</p>\n</blockquote>\n<p>that's not what I mean though -- String::new could be doing arbitrary things but we have to somehow argue why calling <code>drop</code> on the value it returned will not be UB <em>even though</em> we are executing things \"in a weird way\" (partially at compile-time, with a memoized result).</p>",
        "id": 216730858,
        "sender_full_name": "RalfJ",
        "timestamp": 1605362670
    },
    {
        "content": "<p>if you dig down into why that is correct, I think you end up with the same result: soundness is given only if the CTFE execution already is a possible runtime execution, and thus covered by the existing soundness proof for this unsafe code</p>",
        "id": 216730891,
        "sender_full_name": "RalfJ",
        "timestamp": 1605362753
    },
    {
        "content": "<p>I get that <code>String::new</code> is arbitrarily complex, but it produces a single value, which, if created manually via just constructors (ignoring privacy), could totally be repeated arbitrarily often without causing problems.</p>",
        "id": 216730938,
        "sender_full_name": "oli",
        "timestamp": 1605362803
    },
    {
        "content": "<p>FWIW, a curious hack I just through of for your proposed primitive for dispatching to different code at const-time vs runtime is that we could say that, <em>for the purpose of a soundness proof</em>, you have to show that either choice works. IOW, in the Abstract Machine, we non-determinisitcally pick one or the other branch. But then we make an extra guarantee that the runtime implementation will always pick one branch and the CTFE implementation will always pick the other.</p>",
        "id": 216730958,
        "sender_full_name": "RalfJ",
        "timestamp": 1605362853
    },
    {
        "content": "<p>well... <code>\"foo\".to_string()</code> would be a possible runtime execution, and we could trivially allow it in CTFE by sprinkling <code>const</code> around and implementing some allocator functions.</p>",
        "id": 216730960,
        "sender_full_name": "oli",
        "timestamp": 1605362855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/drop.20vs.20construction.20from.20const/near/216730960\">said</a>:</p>\n<blockquote>\n<p>well... <code>\"foo\".to_string()</code> would be a possible runtime execution, and we could trivially allow it in CTFE by sprinkling <code>const</code> around and implementing some allocator functions.</p>\n</blockquote>\n<p>but our proof wouldnt work any more. note how my proof relied on executing the code in an Absract Machine <em>with no allocator</em> to show that \"switching\" from the compile-time to the run-time allocator cannot cause trouble. that's part of the \"weird way\".</p>",
        "id": 216731016,
        "sender_full_name": "RalfJ",
        "timestamp": 1605362930
    },
    {
        "content": "<p>oh... I like that (wrt the ctfe/runtime switching logic). I mean, runtime is in fact allowed to arbitrarily switch to the compile-time version. It may even make sense to do so in debug mode</p>",
        "id": 216731017,
        "sender_full_name": "oli",
        "timestamp": 1605362934
    },
    {
        "content": "<p>uh</p>",
        "id": 216731027,
        "sender_full_name": "oli",
        "timestamp": 1605362972
    },
    {
        "content": "<p>ok, I'm confused now about the allocator switching</p>",
        "id": 216731031,
        "sender_full_name": "oli",
        "timestamp": 1605362981
    },
    {
        "content": "<p>why is there allocator switching?</p>",
        "id": 216731032,
        "sender_full_name": "oli",
        "timestamp": 1605362986
    },
    {
        "content": "<p>the allocations done at compiletime dont go through <code>malloc</code></p>",
        "id": 216731037,
        "sender_full_name": "RalfJ",
        "timestamp": 1605363000
    },
    {
        "content": "<p>so when you use a compile-time generated value at runtime, you are switching out the allocator \"beneath its feet\"</p>",
        "id": 216731082,
        "sender_full_name": "RalfJ",
        "timestamp": 1605363022
    },
    {
        "content": "<p>yes, and for <code>String::new()</code> they actually never will</p>",
        "id": 216731083,
        "sender_full_name": "oli",
        "timestamp": 1605363023
    },
    {
        "content": "<p>oh... you're talking about the transient heap allocs?</p>",
        "id": 216731096,
        "sender_full_name": "oli",
        "timestamp": 1605363050
    },
    {
        "content": "<p>right but that's why \"implementing some allocator functions\" to support <code>\"foo\".to_string()</code> would be wrong</p>",
        "id": 216731114,
        "sender_full_name": "RalfJ",
        "timestamp": 1605363063
    },
    {
        "content": "<p>like if we just reused <code>Global</code> during CTFE to mean \"transient\"?</p>",
        "id": 216731117,
        "sender_full_name": "oli",
        "timestamp": 1605363064
    },
    {
        "content": "<p>(we know it is wrong as <code>drop</code> would cause UB, but we have to explain where the proof fails)</p>",
        "id": 216731121,
        "sender_full_name": "RalfJ",
        "timestamp": 1605363075
    },
    {
        "content": "<p>I was not talking about transient allocations</p>",
        "id": 216731130,
        "sender_full_name": "RalfJ",
        "timestamp": 1605363096
    },
    {
        "content": "<p>I thought you meant</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"nb\">String</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216731135,
        "sender_full_name": "RalfJ",
        "timestamp": 1605363116
    },
    {
        "content": "<p>transient allocations do not have to be \"switched\" since they are transient. so yes that explains why <code>Global</code> can be used for transient allocations.</p>",
        "id": 216731190,
        "sender_full_name": "RalfJ",
        "timestamp": 1605363168
    },
    {
        "content": "<p>the more I think about this the more I feel like treating CTFE allocation (at least those we want to carry over to be accessible at runtime) as a separate allocator makes a huge lot of sense :D</p>",
        "id": 216731206,
        "sender_full_name": "RalfJ",
        "timestamp": 1605363226
    },
    {
        "content": "<p>ok, let's expand some types here: <code>const FOO: String&lt;Global&gt; = String::&lt;Global&gt;::new();</code> is what happens \"today\" (assuming <code>impl&lt;A&gt; String&lt;A&gt; { fn new() -&gt; Self { ... }}</code>, and <code>struct String&lt;A = Global&gt;(...);</code>), because using <code>const FOO: String</code> will pick <code>Global</code> from the default and thus use <code>Global</code> for <code>String::new()</code></p>",
        "id": 216731325,
        "sender_full_name": "oli",
        "timestamp": 1605363404
    },
    {
        "content": "<p>But under the system we're talking about we'd need <code>const FOO: String&lt;Const&gt; = String::&lt;Const&gt;::new();</code>, which would break existing code. Though, because <code>new</code> has no <code>AllocRef</code> bound, we can probably figure out that <code>const FOO: String&lt;Global&gt; = String::&lt;Global&gt;::new();</code> is fine, because the <code>Global</code> is guaranteed to not be used in the body of <code>new</code></p>",
        "id": 216731396,
        "sender_full_name": "oli",
        "timestamp": 1605363508
    },
    {
        "content": "<p>I think we're talking about different things</p>",
        "id": 216732013,
        "sender_full_name": "RalfJ",
        "timestamp": 1605364443
    },
    {
        "content": "<p>this thread started out with the current sitaution, i.e. no <code>Const</code> allocator. the question is: why is what we currently do sound, what are the key proof obligations?</p>",
        "id": 216732067,
        "sender_full_name": "RalfJ",
        "timestamp": 1605364485
    },
    {
        "content": "<p>I didnt mean to add a CTFE allocator in this thread</p>",
        "id": 216732102,
        "sender_full_name": "RalfJ",
        "timestamp": 1605364543
    },
    {
        "content": "<p>the proof obligation is that any code we use cannot have any allocator usage at all. Firstly, because we don't have <code>impl const</code> and secondly because we don't have any generic bounds beyond <code>Sized</code></p>",
        "id": 216732167,
        "sender_full_name": "oli",
        "timestamp": 1605364594
    },
    {
        "content": "<p>thus there are no allocations by definition, so there can't be any deallocations</p>",
        "id": 216732190,
        "sender_full_name": "oli",
        "timestamp": 1605364608
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/drop.20vs.20construction.20from.20const/near/216732167\">said</a>:</p>\n<blockquote>\n<p>the proof obligation is that any code we use cannot have any allocator usage at all. Firstly, because we don't have <code>impl const</code> and secondly because we don't have any generic bounds beyond <code>Sized</code></p>\n</blockquote>\n<p>I agree we cannot have allocator usage but the reason is simply that CTFE hasnt implemented them. no need to talk about trait bounds IMO.</p>",
        "id": 216732208,
        "sender_full_name": "RalfJ",
        "timestamp": 1605364641
    },
    {
        "content": "<p>true</p>",
        "id": 216732217,
        "sender_full_name": "oli",
        "timestamp": 1605364656
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/drop.20vs.20construction.20from.20const/near/216732190\">said</a>:</p>\n<blockquote>\n<p>thus there are no allocations by definition, so there can't be any deallocations</p>\n</blockquote>\n<p>that is much more tricky though because you switched to a different execution engine mid-way! suddenly we are in unrestricted runtime code.</p>",
        "id": 216732221,
        "sender_full_name": "RalfJ",
        "timestamp": 1605364670
    },
    {
        "content": "<p>hmm</p>",
        "id": 216732274,
        "sender_full_name": "oli",
        "timestamp": 1605364691
    },
    {
        "content": "<p>ok, yea, I don't have a good mental image of how this switch affects any proofs (not that I have a great understanding of proofs at all)</p>",
        "id": 216732282,
        "sender_full_name": "oli",
        "timestamp": 1605364721
    },
    {
        "content": "<p>but going back to my suggestion about the value of a constant being in fact a constructor, why can't that be the boundary</p>",
        "id": 216732306,
        "sender_full_name": "oli",
        "timestamp": 1605364758
    },
    {
        "content": "<p>no context swithcing necessary</p>",
        "id": 216732315,
        "sender_full_name": "oli",
        "timestamp": 1605364763
    },
    {
        "content": "<p>CTFE is just procedural generation of constructor \"expressions\"</p>",
        "id": 216732321,
        "sender_full_name": "oli",
        "timestamp": 1605364779
    },
    {
        "content": "<p>I dont know what a \"constructor\" is, in a way that would be useful for a proof</p>",
        "id": 216732515,
        "sender_full_name": "RalfJ",
        "timestamp": 1605364965
    },
    {
        "content": "<p>for <code>struct Foo(i32, u32)</code> a constructor is the <code>Foo</code> function with the signature <code>fn(i32, u32) -&gt; Foo</code></p>",
        "id": 216732541,
        "sender_full_name": "oli",
        "timestamp": 1605365013
    },
    {
        "content": "<p>for tuples it's the <code>(a, b, c)</code> expression</p>",
        "id": 216732552,
        "sender_full_name": "oli",
        "timestamp": 1605365028
    },
    {
        "content": "<p>yeah but that's all syntactic</p>",
        "id": 216732601,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365045
    },
    {
        "content": "<p>which is useless, we need a semantic statement. something about the <em>behavior</em> of this code.</p>",
        "id": 216732610,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365063
    },
    {
        "content": "<p>clearly, syntactically, <code>const</code> are in general <em>not</em> constructors</p>",
        "id": 216732619,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365078
    },
    {
        "content": "<p>their use via the name behave very similarly to constructors</p>",
        "id": 216732645,
        "sender_full_name": "oli",
        "timestamp": 1605365104
    },
    {
        "content": "<p>so <code>let x = FOO;</code> is very similar to <code>let x = Foo;</code></p>",
        "id": 216732659,
        "sender_full_name": "oli",
        "timestamp": 1605365119
    },
    {
        "content": "<p>if we assume that every CTFE execution is a valid runtime execution, then we can argue that the specification for any use of a <code>const FOO</code> is to just copy-paste the <code>FOO</code> body to all usage sites. the fact that we pre-compute the const and only put in the result is not observable (*).</p>",
        "id": 216732681,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365151
    },
    {
        "content": "<p>a different view, maybe this works better than the constructor analogy, is that a use of a constant is actually a runtime <code>transmute</code> call from some arbitrary bits</p>",
        "id": 216732683,
        "sender_full_name": "oli",
        "timestamp": 1605365152
    },
    {
        "content": "<p>hmm</p>",
        "id": 216732744,
        "sender_full_name": "oli",
        "timestamp": 1605365180
    },
    {
        "content": "<p>but does that view about copy pasting the body really help? that would work for <code>\"foo\".to_string()</code></p>",
        "id": 216732759,
        "sender_full_name": "oli",
        "timestamp": 1605365202
    },
    {
        "content": "<p>and <em>additionally</em> we know that this pre-computation does not involve any calls to the allocator</p>",
        "id": 216732760,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365202
    },
    {
        "content": "<p>oh</p>",
        "id": 216732763,
        "sender_full_name": "oli",
        "timestamp": 1605365210
    },
    {
        "content": "<p>so putting these two together, this means that the <code>const</code> body could have been run at runtime without any call to an allocator. so there <em>might</em> at runtime be no actual allocation. which means <code>drop</code> (and any other function) needs to already be correct for the case where there is no allocation.</p>",
        "id": 216732797,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365247
    },
    {
        "content": "<p>oh</p>",
        "id": 216732813,
        "sender_full_name": "oli",
        "timestamp": 1605365275
    },
    {
        "content": "<p>yea</p>",
        "id": 216732817,
        "sender_full_name": "oli",
        "timestamp": 1605365277
    },
    {
        "content": "<p>ok, I was about to ask about transient allocs, but the way you wrote it now it makes it clear that these are irrelevant, because you could have written the code without transient allocs and emitted the same result</p>",
        "id": 216732876,
        "sender_full_name": "oli",
        "timestamp": 1605365323
    },
    {
        "content": "<p>right now, the fact that CTFE succeeds proves that there <em>are</em> no transient allocs.</p>",
        "id": 216733110,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365554
    },
    {
        "content": "<p>argml, right, sorry I keep forgetting we're talking about proving the current status</p>",
        "id": 216733136,
        "sender_full_name": "oli",
        "timestamp": 1605365599
    },
    {
        "content": "<p>once we allow transient allocs, the argument becomes more tricky. we can still block heap allocs at the interner, so we know that the final value cannot point to any heap allocation, but <em>in theory</em> one could imagine allocators <em>for which this is not enough</em></p>",
        "id": 216733146,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365608
    },
    {
        "content": "<p>well, won't that be the allocator's fault if they made their trait impls <code>const</code>?</p>",
        "id": 216733212,
        "sender_full_name": "oli",
        "timestamp": 1605365657
    },
    {
        "content": "<p>like, imagine every call to <code>alloc</code> is globally registered somewhere, and there is a way to inspect those allocations even if all other pointers to them got lost. now if CTFE performs allocations and does not \"carry them over\", they will be observably missing from that global registry.</p>",
        "id": 216733222,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365663
    },
    {
        "content": "<p>I mean if we start hooking <code>Global::alloc</code> in CTFE, we dont even know what <code>#[global_allocator]</code> will be...</p>",
        "id": 216733248,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365697
    },
    {
        "content": "<p>you can't access static items in <code>const fn</code>, so you can't have a global registry of allocations</p>",
        "id": 216733272,
        "sender_full_name": "oli",
        "timestamp": 1605365721
    },
    {
        "content": "<p>so we cant really blame the allocator. unless we explicitly make this part of the contract. somehow.</p>",
        "id": 216733273,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365722
    },
    {
        "content": "<p>oh</p>",
        "id": 216733292,
        "sender_full_name": "oli",
        "timestamp": 1605365746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/drop.20vs.20construction.20from.20const/near/216733272\">said</a>:</p>\n<blockquote>\n<p>you can't access static items in <code>const fn</code>, so you can't have a global registry of allocations</p>\n</blockquote>\n<p>I was talking about what the runtime allocator would do. of course our CTFE hooks would do nothing like that.</p>",
        "id": 216733300,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365754
    },
    {
        "content": "<p>hehe, ok, that is indeed weird</p>",
        "id": 216733312,
        "sender_full_name": "oli",
        "timestamp": 1605365762
    },
    {
        "content": "<p>but when we permit <code>Global::alloc</code> to be called during CTFE, <em>we have no clue</em> what runtime code we are supposed to \"emulate\" here</p>",
        "id": 216733352,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365773
    },
    {
        "content": "<p>I think we can safely ignore that</p>",
        "id": 216733386,
        "sender_full_name": "oli",
        "timestamp": 1605365831
    },
    {
        "content": "<p>you can't possibly build a communication channel between that allocator at compile-time and at runtime</p>",
        "id": 216733432,
        "sender_full_name": "oli",
        "timestamp": 1605365885
    },
    {
        "content": "<p>there's no API for it</p>",
        "id": 216733435,
        "sender_full_name": "oli",
        "timestamp": 1605365889
    },
    {
        "content": "<p>that is exactly the problem</p>",
        "id": 216733436,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365899
    },
    {
        "content": "<p>because if allocation is a runtime-only thing, you <em>can</em> have a \"communication channel\" between all allocator functions</p>",
        "id": 216733445,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365918
    },
    {
        "content": "<p>and between an unknown set of extra functions</p>",
        "id": 216733446,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365925
    },
    {
        "content": "<p>sure, but none of this functionality is available at compile-time</p>",
        "id": 216733455,
        "sender_full_name": "oli",
        "timestamp": 1605365961
    },
    {
        "content": "<p>I am fairly certain I can craft a (horrible) example where everything goes very wrong but none of the proof obligations we have spelled out so far is violated</p>",
        "id": 216733456,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/drop.20vs.20construction.20from.20const/near/216733455\">said</a>:</p>\n<blockquote>\n<p>sure, but none of this functionality is available at compile-time</p>\n</blockquote>\n<p>that doesnt matter</p>",
        "id": 216733458,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365968
    },
    {
        "content": "<p>the point is, <em>you can observe whether heap allocations happened</em></p>",
        "id": 216733461,
        "sender_full_name": "RalfJ",
        "timestamp": 1605365983
    },
    {
        "content": "<p>and now CTFE lets you <em>run code where heap allocations definitely happened</em>, but in a way that cannot be observed</p>",
        "id": 216733508,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366006
    },
    {
        "content": "<p>ergo we have unsoundness</p>",
        "id": 216733515,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366010
    },
    {
        "content": "<p>so basically you make a <code>MyThing</code> struct marker type that just does <code>drop(Box::new(42))</code> internally and since we get a <code>MyThing</code> marker value, that we can put into the return value of the constant, runtime code can read that marker value and thus assume that this specific heap alloc has happend</p>",
        "id": 216733537,
        "sender_full_name": "oli",
        "timestamp": 1605366083
    },
    {
        "content": "<p>very roughly speaking:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Type invariant: constructing an element of this type will cause a heap allocation</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Evil</span><span class=\"p\">(());</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Evil</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Evil</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">  </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">number_of_heap_allocs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cm\">/* call private allocator API */</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">number_of_heap_allocs</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">unreachable_unchecked</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216733585,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366128
    },
    {
        "content": "<p>this code is sound if you remove the <code>const</code></p>",
        "id": 216733586,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366139
    },
    {
        "content": "<p>damn <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 216733590,
        "sender_full_name": "oli",
        "timestamp": 1605366146
    },
    {
        "content": "<p>but unsond with <code>const</code></p>",
        "id": 216733592,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366153
    },
    {
        "content": "<p>so clearly there is some extra proof obligation required <em>somewhere</em></p>",
        "id": 216733595,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366156
    },
    {
        "content": "<p>well, only unsound if you do <code>fn check(&amp;self)</code></p>",
        "id": 216733598,
        "sender_full_name": "oli",
        "timestamp": 1605366162
    },
    {
        "content": "<p>thats what soundness means</p>",
        "id": 216733604,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366172
    },
    {
        "content": "<p>that you can do arbitrary safe things</p>",
        "id": 216733606,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366178
    },
    {
        "content": "<p>oh you mean I had a typo^^ fixed</p>",
        "id": 216733621,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366197
    },
    {
        "content": "<p>jup</p>",
        "id": 216733623,
        "sender_full_name": "oli",
        "timestamp": 1605366202
    },
    {
        "content": "<p>I agree, this is a problem</p>",
        "id": 216733626,
        "sender_full_name": "oli",
        "timestamp": 1605366215
    },
    {
        "content": "<p>now, compilers will <em>already</em> happily remove calls to <code>malloc</code> when the result is unused</p>",
        "id": 216733641,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366241
    },
    {
        "content": "<p>so I think the best fix is to make this part of the contract for <code>unsafe impl Allocator</code></p>",
        "id": 216733681,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366257
    },
    {
        "content": "<p>okay so we should write this up somewhere^^</p>",
        "id": 216733805,
        "sender_full_name": "RalfJ",
        "timestamp": 1605366493
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/79045\">https://github.com/rust-lang/rust/pull/79045</a></p>",
        "id": 216736010,
        "sender_full_name": "oli",
        "timestamp": 1605369491
    }
]