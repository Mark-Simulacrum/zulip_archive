[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I think for the implementation of the last piece of stacked borrows, I'd like to have access to some global state from the memory access hooks (<code>memory_read</code>, <code>memory_written</code>, <code>memory_deallocated</code>). The state should be shared across all allocations. What do you think would be the best way to do that?</p>",
        "id": 147602982,
        "sender_full_name": "RalfJ",
        "timestamp": 1542127064
    },
    {
        "content": "<p>I am talking about \"function barriers\", which get pushed when a reference is passed to a function and should get removed when the function returns. A naive implementation would be to store the index of the function in the call stack, and then on a pop iterate over all of memory to get rid of these barriers. But I don't want to iterate over all of memory...</p>",
        "id": 147603080,
        "sender_full_name": "RalfJ",
        "timestamp": 1542127186
    },
    {
        "content": "<p>So instead I think I will introduce an indirection: Every call frame gets an ID that is unique across program execution, and we use that ID in the barrier. We have a global table storing which IDs are no longer in use, where frames get added when they are popped. When we encounter a barrier, if its ID is one of a call stack that is marked in that table as having popped already, we just ignore it.</p>",
        "id": 147603174,
        "sender_full_name": "RalfJ",
        "timestamp": 1542127260
    },
    {
        "content": "<p>But that means I need access to this global table from the memory access hooks. My best idea so far: Re-introduce the <code>MemoryData</code> that I killed some PRs ago, and pass that to the hooks. With the hooks being called from methods on allocations, that means those methods need to take a pointer to where the <code>MemoryData</code> is. Kind of ugly, but not <em>too</em> bad -- <code>MemoryData</code> would be <code>()</code> for CTFE so when CTFE accesses an allocation directly (outside of an execution), it can just pass <code>&amp;()</code>.</p>",
        "id": 147603280,
        "sender_full_name": "RalfJ",
        "timestamp": 1542127356
    },
    {
        "content": "<p>What about using Rc? That would be completely encapsulated in miri and the engine would never know</p>",
        "id": 147604069,
        "sender_full_name": "oli",
        "timestamp": 1542128027
    },
    {
        "content": "<p>Would of course incur the memory cost of an additional pointer per AllocationExtra</p>",
        "id": 147604178,
        "sender_full_name": "oli",
        "timestamp": 1542128088
    },
    {
        "content": "<p>how would that <code>Rc</code> get into the hooks?</p>",
        "id": 147604328,
        "sender_full_name": "RalfJ",
        "timestamp": 1542128230
    },
    {
        "content": "<p>Uh, I don't know, I'm on mobile right now, so gimme a moment</p>",
        "id": 147604438,
        "sender_full_name": "oli",
        "timestamp": 1542128289
    },
    {
        "content": "<p>So, you do in fact reintroduce the MemoryData, and you also add an AllocExtra method for <code>allocate</code>, which produces the AllocExtra. You pass a reference to MemoryData to the allocate hook. CTFE just ignores the arg and has an empty function body producing the expected unit</p>",
        "id": 147605694,
        "sender_full_name": "oli",
        "timestamp": 1542128703
    },
    {
        "content": "<p>So no more Default bound on AllocationExtra</p>",
        "id": 147605836,
        "sender_full_name": "oli",
        "timestamp": 1542128731
    },
    {
        "content": "<p>Seems nicely symmetric with the deallocate hook</p>",
        "id": 147605931,
        "sender_full_name": "oli",
        "timestamp": 1542128759
    },
    {
        "content": "<p>If you need access to the allocation itself during the allocate hook, pass an allocation with the empty tuple as AllocExtra</p>",
        "id": 147606274,
        "sender_full_name": "oli",
        "timestamp": 1542128852
    },
    {
        "content": "<p>So you want every <code>AllocExtra</code> to carry a pointer to the <code>MemoryData</code>? Why is that better than passing in a pointer on every read/write/dealloc? Passing in <code>&amp;()</code> does not seem too bad?</p>",
        "id": 147653400,
        "sender_full_name": "RalfJ",
        "timestamp": 1542183494
    },
    {
        "content": "<p>well... every call from within miri-engine and miri is already given a <code>tcx</code>, now a <code>&amp;MemoryData</code>, too... these arguments are just noise. Maybe we can make <code>get</code> and <code>get_mut</code> return a wrapper around <code>Allocation</code> which has the same methods as <code>Allocation</code> but without the extra arguments</p>",
        "id": 147653576,
        "sender_full_name": "oli",
        "timestamp": 1542183829
    },
    {
        "content": "<p>I do like not using <code>Default</code>, I got some use for that, but I don't like that extra ptr-sized overhead of memory use everywhere. Hm.</p>",
        "id": 147654459,
        "sender_full_name": "RalfJ",
        "timestamp": 1542184855
    },
    {
        "content": "<p>but maybe I am overthinking it and one more ptr size per allocation is not worth the effort?</p>",
        "id": 147655176,
        "sender_full_name": "RalfJ",
        "timestamp": 1542185924
    },
    {
        "content": "<p>It's either complexity at every memory operation site or an Rc in the structure + one Mutex check per memory operation</p>",
        "id": 147655194,
        "sender_full_name": "oli",
        "timestamp": 1542185969
    },
    {
        "content": "<p>the complexity at every operation site can be solved by making <code>get</code> and <code>get_mut</code> return a wrapper around <code>Allocation</code></p>",
        "id": 147655205,
        "sender_full_name": "oli",
        "timestamp": 1542186001
    },
    {
        "content": "<p>Are you planning on trying to get stacked borrows into const eval $ever?</p>",
        "id": 147655301,
        "sender_full_name": "oli",
        "timestamp": 1542186115
    },
    {
        "content": "<p>If not, then I think we should go with the extra <code>Rc</code> in miri</p>",
        "id": 147655359,
        "sender_full_name": "oli",
        "timestamp": 1542186161
    },
    {
        "content": "<p>Not sure about <code>$ever</code>, but it'd probably kill compile times...</p>",
        "id": 147655595,
        "sender_full_name": "RalfJ",
        "timestamp": 1542186519
    },
    {
        "content": "<p>okay I will go with <code>Rc</code> for now</p>",
        "id": 147655600,
        "sender_full_name": "RalfJ",
        "timestamp": 1542186526
    },
    {
        "content": "<p>which <code>Mutex</code>?</p>",
        "id": 147655607,
        "sender_full_name": "RalfJ",
        "timestamp": 1542186529
    },
    {
        "content": "<p>Well you need an <code>Rc&lt;Mutex&lt;Data&gt;&gt;</code> otherwise you can't mutate it ;)</p>",
        "id": 147656202,
        "sender_full_name": "oli",
        "timestamp": 1542187342
    },
    {
        "content": "<p>or RefCell</p>",
        "id": 147656205,
        "sender_full_name": "oli",
        "timestamp": 1542187348
    },
    {
        "content": "<p>same thing</p>",
        "id": 147656207,
        "sender_full_name": "oli",
        "timestamp": 1542187351
    },
    {
        "content": "<p>fair enough</p>",
        "id": 147656236,
        "sender_full_name": "RalfJ",
        "timestamp": 1542187429
    },
    {
        "content": "<p>I also think I will actually use a <code>HashSet</code> of unique stack frame identifiers that have NOT been popped yet, that won't grow unboundedly like my original idea would^^</p>",
        "id": 147656291,
        "sender_full_name": "RalfJ",
        "timestamp": 1542187491
    }
]