[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I applied you <code>walk_array/visit_array</code> suggestion. I suppose I could do something similar for structs. Not sure yet whether I can reach the API you suggested.</p>",
        "id": 136979614,
        "sender_full_name": "RalfJ",
        "timestamp": 1541145669
    },
    {
        "content": "<p>I think you forgot to push</p>",
        "id": 136980500,
        "sender_full_name": "oli",
        "timestamp": 1541146450
    },
    {
        "content": "<p>not \"forgot\", still doing the 2nd half ;)</p>",
        "id": 136980798,
        "sender_full_name": "RalfJ",
        "timestamp": 1541146756
    },
    {
        "content": "<p>:D</p>",
        "id": 136980813,
        "sender_full_name": "oli",
        "timestamp": 1541146779
    },
    {
        "content": "<p>kk</p>",
        "id": 136980815,
        "sender_full_name": "oli",
        "timestamp": 1541146781
    },
    {
        "content": "<p>do tell me once my suggestions are getting out of hand! You have a clearer picture of what it's needed for</p>",
        "id": 136980909,
        "sender_full_name": "oli",
        "timestamp": 1541146828
    },
    {
        "content": "<p>I have no idea what I am doing^^</p>",
        "id": 136981543,
        "sender_full_name": "RalfJ",
        "timestamp": 1541147416
    },
    {
        "content": "<p>I originally thought I couldn't write a \"normal\" visitor</p>",
        "id": 136981565,
        "sender_full_name": "RalfJ",
        "timestamp": 1541147438
    },
    {
        "content": "<p>but that was before I had two traits (<code>Value</code> and <code>ValueVisitor</code>)</p>",
        "id": 136981577,
        "sender_full_name": "RalfJ",
        "timestamp": 1541147450
    },
    {
        "content": "<p>now that I do, it's getting better. But I still don't think I can do your <code>visit_array(impl Iterator)</code>. that's no loss though.</p>",
        "id": 136981604,
        "sender_full_name": "RalfJ",
        "timestamp": 1541147489
    },
    {
        "content": "<p>or maybe I can, but that will be one step further down the refactoring of this^^</p>",
        "id": 136981608,
        "sender_full_name": "RalfJ",
        "timestamp": 1541147499
    },
    {
        "content": "<p>it's at least compiling again now :)</p>",
        "id": 136981732,
        "sender_full_name": "RalfJ",
        "timestamp": 1541147618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> pushed something</p>",
        "id": 136981924,
        "sender_full_name": "RalfJ",
        "timestamp": 1541147790
    },
    {
        "content": "<p>now to see if we can smuggle an iterator into there</p>",
        "id": 136981935,
        "sender_full_name": "RalfJ",
        "timestamp": 1541147802
    },
    {
        "content": "<p>no reason to make that specific to arrays though, I think. <code>visit_aggregate(impl Iterator)</code> has a nice ring to it :D</p>",
        "id": 136981971,
        "sender_full_name": "RalfJ",
        "timestamp": 1541147846
    },
    {
        "content": "<p>woah I have no idea why the borrow checker accepts this^^</p>",
        "id": 136984582,
        "sender_full_name": "RalfJ",
        "timestamp": 1541150508
    },
    {
        "content": "<p>the iterator captures some data, but seemingly little enough that the lifetimes still work out. crazy.</p>",
        "id": 136984630,
        "sender_full_name": "RalfJ",
        "timestamp": 1541150525
    },
    {
        "content": "<p>hm. but for general aggregates I do not think I can make this work... the iterator may need to access memory to determine size&amp;align of a DST</p>",
        "id": 136985008,
        "sender_full_name": "RalfJ",
        "timestamp": 1541150889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I added a commit to this PR that is needed to make the visitor usable in miri where I need it... let me know if you want me to put that in a separate PR instead</p>",
        "id": 137007329,
        "sender_full_name": "RalfJ",
        "timestamp": 1541161715
    },
    {
        "content": "<p>Nah, it's fine to include it here</p>",
        "id": 137007521,
        "sender_full_name": "oli",
        "timestamp": 1541161780
    },
    {
        "content": "<p><em>dang</em> I need a read-only visitor as well...</p>",
        "id": 137010776,
        "sender_full_name": "RalfJ",
        "timestamp": 1541162687
    },
    {
        "content": "<p>or I need to make everything that might execute a <code>Deref</code> projection take <code>&amp;mut</code></p>",
        "id": 137010868,
        "sender_full_name": "RalfJ",
        "timestamp": 1541162713
    },
    {
        "content": "<p>isn't purely read-only hard because of <code>force_allocation</code>?</p>",
        "id": 137010950,
        "sender_full_name": "oli",
        "timestamp": 1541162741
    },
    {
        "content": "<p>no it's also because I later want to write another visitor that actually changes stuff</p>",
        "id": 137011064,
        "sender_full_name": "RalfJ",
        "timestamp": 1541162763
    },
    {
        "content": "<p>anyway, you can do that by using a macro like in <code>intravisit</code></p>",
        "id": 137011069,
        "sender_full_name": "oli",
        "timestamp": 1541162764
    },
    {
        "content": "<p>walks over a value and changes all the tag of pointers in there</p>",
        "id": 137011097,
        "sender_full_name": "RalfJ",
        "timestamp": 1541162772
    },
    {
        "content": "<p><code>force_allocation</code> is not even called any more</p>",
        "id": 137011180,
        "sender_full_name": "RalfJ",
        "timestamp": 1541162800
    },
    {
        "content": "<p>the other annoying one is <code>place_field</code></p>",
        "id": 137011201,
        "sender_full_name": "RalfJ",
        "timestamp": 1541162806
    },
    {
        "content": "<p>which needs <code>&amp;mut</code> because... okay I guess that's because <code>force_allocation</code>. the alternative would be for <code>Place::Local</code> to also have an offset or something similarly horrible</p>",
        "id": 137011427,
        "sender_full_name": "RalfJ",
        "timestamp": 1541162872
    },
    {
        "content": "<p>we used to have this... for a short time</p>",
        "id": 137011626,
        "sender_full_name": "oli",
        "timestamp": 1541162915
    },
    {
        "content": "<p>let's not repeat that</p>",
        "id": 137011640,
        "sender_full_name": "oli",
        "timestamp": 1541162919
    },
    {
        "content": "<p>^^</p>",
        "id": 137011651,
        "sender_full_name": "RalfJ",
        "timestamp": 1541162922
    },
    {
        "content": "<p>maybe you can only visit <code>OpTy</code> and <code>MPlaceTy</code> then. I dont want to also make THAT mut-polymorphic</p>",
        "id": 137011670,
        "sender_full_name": "RalfJ",
        "timestamp": 1541162927
    },
    {
        "content": "<p>just <code>force_allocate</code> if you want to visit a <code>PlaceTy</code></p>",
        "id": 137011712,
        "sender_full_name": "RalfJ",
        "timestamp": 1541162940
    },
    {
        "content": "<p>(which retagging will do)</p>",
        "id": 137011740,
        "sender_full_name": "RalfJ",
        "timestamp": 1541162947
    },
    {
        "content": "<p>makes sense</p>",
        "id": 137012191,
        "sender_full_name": "oli",
        "timestamp": 1541163057
    },
    {
        "content": "<p>okay pushed a mut-polymorphic version. it's not as bad as I thought  -- though it would be nicer if we could do it without macros</p>",
        "id": 137016625,
        "sender_full_name": "RalfJ",
        "timestamp": 1541164200
    },
    {
        "content": "<p>I am getting a lifetime error that I dont understand at all... suddenly now that I use <code>'tcx</code>in argument position in the stacked borrow extension trait, it complains. but other extension traits do that, too...</p>",
        "id": 137020871,
        "sender_full_name": "RalfJ",
        "timestamp": 1541165144
    },
    {
        "content": "<p>oh got it</p>",
        "id": 137021064,
        "sender_full_name": "RalfJ",
        "timestamp": 1541165181
    },
    {
        "content": "<p>some of the other types had hidden lifetimes</p>",
        "id": 137021123,
        "sender_full_name": "RalfJ",
        "timestamp": 1541165195
    },
    {
        "content": "<p>when are we getting mandatory <code>'_</code> again?^^</p>",
        "id": 137021987,
        "sender_full_name": "RalfJ",
        "timestamp": 1541165395
    },
    {
        "content": "<p>When I'm done cleaning up the compiler :P</p>",
        "id": 137026696,
        "sender_full_name": "oli",
        "timestamp": 1541166572
    },
    {
        "content": "<p>okay, so never then :P</p>",
        "id": 137035424,
        "sender_full_name": "RalfJ",
        "timestamp": 1541168653
    }
]