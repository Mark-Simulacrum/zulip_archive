[
    {
        "content": "<p>I've noticed that this code compiles in every single Rust version that allows user-defined const fns:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>: <span class=\"nb\">Clone</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Was this supposed to compile before const bounds are stabilized?</p>",
        "id": 222214631,
        "sender_full_name": "matt1992",
        "timestamp": 1610271800
    },
    {
        "content": "<p>Just the bound, without actually using anything from the trait?  Seems low-risk, at least...</p>",
        "id": 222214743,
        "sender_full_name": "scottmcm",
        "timestamp": 1610271990
    },
    {
        "content": "<p>I discovered this behavior when trying to use an associated constant from a trait in a const fn.<br>\nI haven't written any committed code yet that relies on this working.</p>\n<p>Here's an example of the const method that uses an associated constant being called at compile-time on stable Rust:<br>\n<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=19592d24da0e3a6c00987e4030c98648\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=19592d24da0e3a6c00987e4030c98648</a><br>\nWith the possibly problematic impl being:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>: <span class=\"nc\">Trait</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Gets the usize value of this type</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">to_usize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">USIZE</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222214757,
        "sender_full_name": "matt1992",
        "timestamp": 1610272056
    },
    {
        "content": "<p>ugh... this is indeed a forward compat issue. We wanted to catch this, not sure how we failed to do that... The problem is not usage within the const fn, but usage <em>of</em> the const fn. Right now it is allowed, but it will fail to compile in the future if used with types that do not satisfy <code>Self: const Trait</code></p>",
        "id": 222279389,
        "sender_full_name": "oli",
        "timestamp": 1610360415
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=db88cc5820ed910400af3dc694aa5aa9\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=db88cc5820ed910400af3dc694aa5aa9</a></p>",
        "id": 222279393,
        "sender_full_name": "oli",
        "timestamp": 1610360416
    },
    {
        "content": "<p>we may have painted ourselves into a corner</p>",
        "id": 222279409,
        "sender_full_name": "oli",
        "timestamp": 1610360427
    },
    {
        "content": "<p>fix it and do a crater run to valuate the fallout?</p>",
        "id": 222284222,
        "sender_full_name": "RalfJ",
        "timestamp": 1610363578
    },
    {
        "content": "<p>OTOH, requiring <code>const</code> bounds explicitly to make functions callable would anyway be more consistent with <code>fn</code> pointers and <code>dyn Trait</code> objects ;)</p>",
        "id": 222284260,
        "sender_full_name": "RalfJ",
        "timestamp": 1610363612
    },
    {
        "content": "<p>yeaa</p>",
        "id": 222285131,
        "sender_full_name": "oli",
        "timestamp": 1610364177
    },
    {
        "content": "<p>I know <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 222285133,
        "sender_full_name": "oli",
        "timestamp": 1610364180
    },
    {
        "content": "<p>I think we'll have to got down that road</p>",
        "id": 222285149,
        "sender_full_name": "oli",
        "timestamp": 1610364195
    },
    {
        "content": "<p>Lets fix that in the 2021 edition</p>",
        "id": 222354846,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1610397426
    }
]