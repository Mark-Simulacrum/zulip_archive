[
    {
        "content": "<p>I was just reviewing <a href=\"https://github.com/rust-lang/rust/pull/92433\">https://github.com/rust-lang/rust/pull/92433</a> (cc <span class=\"user-mention\" data-user-id=\"361356\">@fee1-dead</span> ) and was wondering whether any <code>~const Trait</code> bound should automatically imply <code>~const Drop</code>. It would be backwards compatible to add since we have no stable <code>~const Trait</code> bounds yet. It would unfortunately mean that any type that has a <code>Drop</code> impl and implements a trait constly essentially also needs to make its <code>Drop</code> impl const, as it is not really usable in const contexts otherwise. Is that too much of an edge case so we could ignore it (considering there would be no workaround)? Any other ideas on how to prevent us from having to add <code>~const Drop</code> to essentially all generic args of <code>const fn</code>?</p>",
        "id": 267594283,
        "sender_full_name": "oli",
        "timestamp": 1641913594
    },
    {
        "content": "<p><code>~const Tr</code> does not always require <code>~const Drop</code> though, e.g. <code>fn foo&lt;F: ~const Fn()&gt;(func: &amp;F) {}</code></p>",
        "id": 267595198,
        "sender_full_name": "fee1-dead",
        "timestamp": 1641913980
    },
    {
        "content": "<p>yea, but <em>very often</em> XD</p>",
        "id": 267595229,
        "sender_full_name": "oli",
        "timestamp": 1641913992
    },
    {
        "content": "<p>although i'd admit that that PR took quite a lot of tokens</p>",
        "id": 267595259,
        "sender_full_name": "fee1-dead",
        "timestamp": 1641914009
    },
    {
        "content": "<p>I just want us to talk about it, maybe someone can come up with a cool solution</p>",
        "id": 267595308,
        "sender_full_name": "oli",
        "timestamp": 1641914032
    },
    {
        "content": "<p>opt-out: <code>T: ~const Trait + ?Drop</code> means requires maybe-const <code>Trait</code> but doesn't require const drop</p>",
        "id": 267670539,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1641949818
    },
    {
        "content": "<p>That could be misinterpreted as <code>T: ~const Trait</code> and <code>T: ?Drop</code>, though.</p>",
        "id": 267671566,
        "sender_full_name": "Connor Horman",
        "timestamp": 1641950621
    },
    {
        "content": "<p><code>~const Trait + ?const Drop</code></p>",
        "id": 267672054,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1641951073
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.22implicit.22.20const-if-const.20Drop/near/267595229\">said</a>:</p>\n<blockquote>\n<p>yea, but <em>very often</em> XD</p>\n</blockquote>\n<p>Some practical data: I checked <code>core/src/option.rs</code>, there are 31<code>~const</code> bounds, 9 of which uses <code>~const Trait + ~const Drop</code>, 14 of them use s <code>~const Drop</code> only, and 8 of <code>~const Trait</code>only. So having <code>~const Trait</code> imply <code>~const Drop</code> just reduces 1 line but now we need 8 negative bounds.</p>",
        "id": 267679873,
        "sender_full_name": "Gary Guo",
        "timestamp": 1641959663
    },
    {
        "content": "<p>All <code>~const Trait + ~const Drop</code> cases involves <code>FnOnce()</code></p>",
        "id": 267679889,
        "sender_full_name": "Gary Guo",
        "timestamp": 1641959695
    },
    {
        "content": "<p>What, we could do is allow all types to be dropped in const fn but simply make it a no-op for non-const Drop during const eval</p>",
        "id": 274880927,
        "sender_full_name": "oli",
        "timestamp": 1646939287
    },
    {
        "content": "<p>Wouldn't that be inconsistent in some cases? Where the distinction between const eval code and runtime code isn't clear</p>",
        "id": 274942654,
        "sender_full_name": "fee1-dead",
        "timestamp": 1646986313
    },
    {
        "content": "<p>It's like the compiler automatically inserting <code>const_eval_select(x, mem::forget, mem::drop)</code></p>",
        "id": 274942716,
        "sender_full_name": "fee1-dead",
        "timestamp": 1646986354
    }
]