[
    {
        "content": "<p>We have lots of fun bugs around evaluating constants during typeck, because we sometimes even do that when the constant itself has a type error. One solution could be to run the mir typechecker on the constant's body before evaluating it.</p>",
        "id": 232626558,
        "sender_full_name": "oli",
        "timestamp": 1617209738
    },
    {
        "content": "<p>It may be more expensive than just checking that all predicates on a constant hold and then hoping for the best during evaluation, but it is also more precise, as we'd only typeck the parts that we need post-monomorphization instead of assuming that generic predicates have been proven by the caller and trying to prove all predicates.</p>",
        "id": 232626870,
        "sender_full_name": "oli",
        "timestamp": 1617209856
    },
    {
        "content": "<p>so that i don't forget it while i am on a week long break... at least for the \"incorrect substitution\" problem we have in <a class=\"stream\" data-stream-id=\"260443\" href=\"/#narrow/stream/260443-project-const-generics\">#project-const-generics</a>, it should be enough to only check the substituted param env of the constant once the constant itself isn't part of its own param env anymore</p>",
        "id": 232629517,
        "sender_full_name": "lcnr",
        "timestamp": 1617210787
    },
    {
        "content": "<p>this is something we have to do anyways to deal with the following causing a cycle error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"p\">}]</span>: <span class=\"nb\">Sized</span> <span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 232629675,
        "sender_full_name": "lcnr",
        "timestamp": 1617210849
    },
    {
        "content": "<p>one example of this problem is <a href=\"https://github.com/rust-lang/rust/issues/79047\">https://github.com/rust-lang/rust/issues/79047</a></p>",
        "id": 232925138,
        "sender_full_name": "RalfJ",
        "timestamp": 1617383450
    }
]