[
    {
        "content": "<p>Slicing (<code>&amp;a[x..]</code>, <code>&amp;a[..y]</code>, etc) is currently not allowed in const context, however pattern matching on slices <em>is</em> allowed. This makes possible to implement ad-hoc const fn slicing :)</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=547c3bfa06aad5b27d817c11bc59bbc1\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=547c3bfa06aad5b27d817c11bc59bbc1</a></p>",
        "id": 261496768,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1636983170
    },
    {
        "content": "<p>Clever. That'd make some code I wrote in the past a lot cleaner.</p>",
        "id": 261604568,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1637046446
    },
    {
        "content": "<p>This and other const tricks can be found in the <a href=\"https://docs.rs/konst/0.2.13/konst/\">konst crate</a>.</p>",
        "id": 261626254,
        "sender_full_name": "Chris Denton",
        "timestamp": 1637061310
    },
    {
        "content": "<p>we could change the MIR building for slicing to use the primitives, just like we do with indexing. Thoughts <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span> ?</p>",
        "id": 261636790,
        "sender_full_name": "oli",
        "timestamp": 1637067785
    },
    {
        "content": "<p>so we have primitive slicing in MIR, that is allowed inside const, but used only for pattern matching?</p>",
        "id": 261650173,
        "sender_full_name": "RalfJ",
        "timestamp": 1637073781
    },
    {
        "content": "<p>changing MIR building to use that seems more like a change relevant to the MIR team, not const-eval</p>",
        "id": 261650244,
        "sender_full_name": "RalfJ",
        "timestamp": 1637073816
    },
    {
        "content": "<p>yes, but I first want to evaluate the opinions on allowing them this way here before I move the discussion to an MCP</p>",
        "id": 261661839,
        "sender_full_name": "oli",
        "timestamp": 1637078026
    },
    {
        "content": "<p>Would const impl SliceIndex work?</p>",
        "id": 261664856,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637079042
    },
    {
        "content": "<p>It would, but I think having a \"hack\" for it and stabilizing the hack before stabilizing the whole const_trait_impl feature would be better IMO.</p>",
        "id": 261665509,
        "sender_full_name": "fee1-dead",
        "timestamp": 1637079301
    },
    {
        "content": "<p>IIRC the slicing in MIR is done via projections, and currently subslice projection requires constant indexes.</p>",
        "id": 261666155,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637079567
    },
    {
        "content": "<p>And it doesn't take bounds checking into account; bounds checking requires explicit generation, and then we would need to move the bounds checking panic messages to <code>AssertKind</code> as well.</p>",
        "id": 261666609,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637079740
    },
    {
        "content": "<p>/me wonders if we can use const impl SliceIndex as impl detail and somehow stabilise it before const_trait_impl</p>",
        "id": 261666757,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637079819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Observation.3A.20stable.20slicing.20in.20const.20context/near/261666609\">said</a>:</p>\n<blockquote>\n<p>And it doesn't take bounds checking into account; bounds checking requires explicit generation, and then we would need to move the bounds checking panic messages to <code>AssertKind</code> as well.</p>\n</blockquote>\n<p>oh I guess pattern matching does not need an AssertKind since it will just skip that match arm if the slice is not long enough?</p>",
        "id": 261739404,
        "sender_full_name": "RalfJ",
        "timestamp": 1637119649
    },
    {
        "content": "<p>Yep</p>",
        "id": 261739481,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637119711
    }
]