[
    {
        "content": "<p>Obviously this is a long way from being able to be marked const.<br>\nWhat is required to at least get propagation working here, so that <code>get</code> is free?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">map</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">map</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">BTreeMap</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">)].</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201218989,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1592442271
    },
    {
        "content": "<p>you mean you want the body of <code>foo</code> to get optimized to <code>5</code>?</p>",
        "id": 201235014,
        "sender_full_name": "oli",
        "timestamp": 1592464811
    },
    {
        "content": "<p>Yes, or for it to allocate and drop the btree and return <code>5</code>. I just care about <code>get</code> being replaced with <code>5</code>, not the allocation.</p>",
        "id": 201265023,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1592485889
    },
    {
        "content": "<p>yea, that's gonna need some serious improvements to either const eval or super aggressive inlining plus a little bit of const prop</p>",
        "id": 201266282,
        "sender_full_name": "oli",
        "timestamp": 1592486475
    },
    {
        "content": "<p>but that's some Haskell level inlining</p>",
        "id": 201266413,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592486525
    },
    {
        "content": "<p>yea, my money's on const eval improvements</p>",
        "id": 201266443,
        "sender_full_name": "oli",
        "timestamp": 1592486541
    },
    {
        "content": "<p>we need an inlining working group to balance the bets</p>",
        "id": 201266546,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592486607
    },
    {
        "content": "<p>heresy</p>",
        "id": 201266560,
        "sender_full_name": "oli",
        "timestamp": 1592486617
    },
    {
        "content": "<p>inlining is the pathway to habilities some consider unnatural</p>",
        "id": 201266737,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592486697
    },
    {
        "content": "<p>both routes seem implausible to me. what's gonna tell const prop that evaluating so much, at that specific program point, is useful and worth the compile time? what's gonna make the inliner think that inlining everything necessary for simplifying this snippet is a good trade off?</p>",
        "id": 201268345,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592487403
    },
    {
        "content": "<p>If you have a <code>const fn</code> call with const arguments, I believe it is reasonable in all cases (and release mode) to replace that call with its result.</p>",
        "id": 201271173,
        "sender_full_name": "oli",
        "timestamp": 1592488714
    },
    {
        "content": "<p>other than heap allocations what else would be needed?</p>",
        "id": 201273355,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1592489627
    },
    {
        "content": "<p>impl const trait and then loads of actual impl const traits in libstd</p>",
        "id": 201273738,
        "sender_full_name": "oli",
        "timestamp": 1592489785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209924\">@Avi Dessauer</span> sounds to me like you are confusing CTFE with constant folding? if all you want is optimizations, you are looking for the latter.</p>",
        "id": 201472075,
        "sender_full_name": "RalfJ",
        "timestamp": 1592649177
    },
    {
        "content": "<p>CTFE (compile-time function evaluation, i.e., all the <code>const stuff</code>) is for using expressions in places where they <em>have to</em> be evaluated at compile-time.</p>",
        "id": 201472122,
        "sender_full_name": "RalfJ",
        "timestamp": 1592649249
    },
    {
        "content": "<p>but the compiler can always <em>try</em> to evaluate things at compiletime as an observation with no observable change in behavior, and in fact it does.</p>",
        "id": 201472128,
        "sender_full_name": "RalfJ",
        "timestamp": 1592649277
    },
    {
        "content": "<p>like if you write a function <code>pub fn foo() { 2+2 }</code> you'll see the assembly just always returns <code>4</code>. and that has nothing to do with CTFE or <code>const</code>.</p>",
        "id": 201472143,
        "sender_full_name": "RalfJ",
        "timestamp": 1592649304
    },
    {
        "content": "<p>It does somewhat relate to const eval, as const prop can only evaluate <code>const fn</code> function calls, so CTFE needs to support everything to make <code>map</code> and <code>get</code> <code>const fn</code> in order to allow const prop to optimize away the body of <code>foo</code></p>",
        "id": 201472212,
        "sender_full_name": "oli",
        "timestamp": 1592649471
    },
    {
        "content": "<p>const prop could in principle use the full miri engine</p>",
        "id": 201472959,
        "sender_full_name": "RalfJ",
        "timestamp": 1592650800
    },
    {
        "content": "<p>that hard part about CTFE is not being able to run the code, but being able to statically determine that we can run it</p>",
        "id": 201473005,
        "sender_full_name": "RalfJ",
        "timestamp": 1592650815
    },
    {
        "content": "<p>for const prop we can just run it and if it fails, roll back. so I think the problems are mostly orthogonal.</p>",
        "id": 201473012,
        "sender_full_name": "RalfJ",
        "timestamp": 1592650830
    },
    {
        "content": "<p>the analysis for whether we <em>want to</em> const prop also seems very different to me from the one whether we are <em>able to</em> CTFE</p>",
        "id": 201473021,
        "sender_full_name": "RalfJ",
        "timestamp": 1592650859
    },
    {
        "content": "<p>IOW, the fact that const-prop internally uses the miri engine is an implementation detail</p>",
        "id": 201473031,
        "sender_full_name": "RalfJ",
        "timestamp": 1592650879
    },
    {
        "content": "<p>sure. What I mean is that <em>every</em> <code>const fn</code> call with solely const arguments should be const proppable by just evaluating that function call</p>",
        "id": 201473292,
        "sender_full_name": "oli",
        "timestamp": 1592651374
    },
    {
        "content": "<p>Although I must point out that \"possible\" does not necessarily mean \"a good idea\". With the introduction of control flow, const fns can take arbitrarily long to evaluate, and it's not given that running doing so at compile time pays off (e.g., the call might turn out to be dead, or evaluating it doesn't simplify the IR enough to reduce compile time overall, or miri overhead might be much larger than just compiling it and running the machine code).</p>",
        "id": 201473547,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1592651832
    },
    {
        "content": "<p>yes that's what I meant above -- whether <em>want to</em>  const prop is a question that is somewhat independent from whether we are <em>able to</em> CTFE.</p>",
        "id": 201473593,
        "sender_full_name": "RalfJ",
        "timestamp": 1592651891
    },
    {
        "content": "<p>sure, but we'll to be able to do it at all before it makes even sense to have the discussion about the feasability.</p>",
        "id": 201473864,
        "sender_full_name": "oli",
        "timestamp": 1592652471
    },
    {
        "content": "<p>I could totally see this as being a clippy lint that tells you \"you could put this function call in a constant to make it evaluated at compile-time\"</p>",
        "id": 201473925,
        "sender_full_name": "oli",
        "timestamp": 1592652557
    },
    {
        "content": "<p>My question was about both, a guarantee of CTFE is preferable, but I suspect farther out.</p>",
        "id": 201490395,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1592677400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124289\">Hanna Kruppe</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Prorogation.20of.20BTreeMap.2Eget/near/201473547\">said</a>:</p>\n<blockquote>\n<p>Although I must point out that \"possible\" does not necessarily mean \"a good idea\". With the introduction of control flow, const fns can take arbitrarily long to evaluate, and it's not given that running doing so at compile time pays off (e.g., the call might turn out to be dead, or evaluating it doesn't simplify the IR enough to reduce compile time overall, or miri overhead might be much larger than just compiling it and running the machine code).</p>\n</blockquote>\n<p>Maybe the solution to this particular problem is to use \"anytime optimization\", as in, we give that optimizer a certain amount of time that it does not know, to optimize. Its task is thus to deliver progressively optimized versions of the code, and the caller will use the last one that was returned before the time expired - i.e. the \"current best one\" from the perspective of the optimizer.</p>\n<p>This works fairly well for Heuristic Search problems where the optimal route might be arbitrarily costly to compute. You can give \"as good as you can\" solutions with the allotted time. I think this approach is reasonable for optimizing code, if we ever find ourselves wanting to optimize in a scenario where we don't know the upper bounds of the optimization cost.</p>",
        "id": 201922516,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593047258
    },
    {
        "content": "<p>that sounds like a discussion for the <a class=\"stream\" data-stream-id=\"189540\" href=\"/#narrow/stream/189540-t-compiler.2Fwg-mir-opt\">#t-compiler/wg-mir-opt</a> channel ;)</p>",
        "id": 201936669,
        "sender_full_name": "oli",
        "timestamp": 1593067035
    }
]