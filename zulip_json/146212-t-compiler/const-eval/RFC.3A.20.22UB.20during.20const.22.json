[
    {
        "content": "<p>So would that be a reasonable next step in the unsafe+const space for us -- to write an RFC that specifies what can and cannot happen from UB during const-eval?</p>",
        "id": 201883547,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022340
    },
    {
        "content": "<p>feels to me like that (and the corresponding nomicon chapter) should come before we even tackle unconst</p>",
        "id": 201883568,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022362
    },
    {
        "content": "<p>and then a very \"cheap\" solution for unconst would be to say it is UB, period^^</p>",
        "id": 201883583,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022374
    },
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span> ^</p>",
        "id": 201883674,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022440
    },
    {
        "content": "<p>Are we concerned that, by punting and saying unconst = UB, we'll have people writing unconst code that happens to work?</p>",
        "id": 201883747,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1593022468
    },
    {
        "content": "<p>In other words, is it feasible/desirable to break unconst operations during CTFE while we're in a transitional period where <code>unsafe</code> operations are stable but unconst operations are technically UB?</p>",
        "id": 201883912,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1593022553
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/RFC.3A.20.22UB.20during.20const.22/near/201883747\">said</a>:</p>\n<blockquote>\n<p>Are we concerned that, by punting and saying unconst = UB, we'll have people writing unconst code that happens to work?</p>\n</blockquote>\n<p>well, we detect unconst when it happens</p>",
        "id": 201884123,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022673
    },
    {
        "content": "<p>so I think my main concern is that \"unconst = UB\" is weaker than what we actually implement, and likely weaker than any reasonable implementation</p>",
        "id": 201884189,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022698
    },
    {
        "content": "<p>OTOH it is very easy to explain I think</p>",
        "id": 201884200,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022704
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/RFC.3A.20.22UB.20during.20const.22/near/201883912\">said</a>:</p>\n<blockquote>\n<p>In other words, is it feasible/desirable to break unconst operations during CTFE while we're in a transitional period where <code>unsafe</code> operations are stable but unconst operations are technically UB?</p>\n</blockquote>\n<p>I am not sure what you concern is here? do you have an example?</p>",
        "id": 201884274,
        "sender_full_name": "RalfJ",
        "timestamp": 1593022750
    },
    {
        "content": "<p>Not immediately.</p>",
        "id": 201884338,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1593022800
    },
    {
        "content": "<p>I guess it doesn't really affect the RFC you want to do. Only once we start const-stabilizing various <code>unsafe</code> operations in the future. I'll try to come up with a coherent example before then.</p>",
        "id": 201884769,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1593023013
    },
    {
        "content": "<p>Trying to write down a response here i came to the conclusion that unconst and UB behaviour are orthogonal topics. So yea, let's do an RFC defining the boundaries of UB during const eval. After that we can explain unconst ops. Then comes the part where they overlap: even if we forbid unconst ops statically, you can write unsafe code that works around that (e.g. by transmuting a reference to a usize)</p>",
        "id": 201897992,
        "sender_full_name": "oli",
        "timestamp": 1593029706
    },
    {
        "content": "<blockquote>\n<p>even if we forbid unconst ops statically, you can write unsafe code that works around that (e.g. by transmuting a reference to a usize)</p>\n</blockquote>\n<p>Right. So this means we at least have to make unconst ops UB before we stabilize any unsafe op.</p>\n<p>I am not convinced it is worth doing more for unconst.</p>",
        "id": 201937021,
        "sender_full_name": "RalfJ",
        "timestamp": 1593067503
    },
    {
        "content": "<p>Also I feel none of this should block <code>transmute</code> in <code>const</code> (not <code>const fn</code>)</p>",
        "id": 201937096,
        "sender_full_name": "RalfJ",
        "timestamp": 1593067599
    },
    {
        "content": "<p>Here's <a href=\"https://github.com/rust-lang/rust/issues/71499#issuecomment-649270784\">another kind of UB</a> that we cannot reliably check for during CTFE (besides MIR optimizations exploiting UB)</p>",
        "id": 201937184,
        "sender_full_name": "RalfJ",
        "timestamp": 1593067760
    },
    {
        "content": "<p>hmm didn't I have a PR working on the transmute in <code>const</code>? XD let me check my PRs</p>",
        "id": 201937482,
        "sender_full_name": "oli",
        "timestamp": 1593068202
    },
    {
        "content": "<p>ah yes <a href=\"https://github.com/rust-lang/rust/pull/72920\">https://github.com/rust-lang/rust/pull/72920</a></p>",
        "id": 201937499,
        "sender_full_name": "oli",
        "timestamp": 1593068258
    },
    {
        "content": "<p>yea, <code>transmute</code> in <code>const</code> isn't blocked on anything. We're just waiting for the rest of T-lang to sign off on the stabilization</p>",
        "id": 201937564,
        "sender_full_name": "oli",
        "timestamp": 1593068333
    },
    {
        "content": "<p>nice :)</p>",
        "id": 201958618,
        "sender_full_name": "RalfJ",
        "timestamp": 1593085787
    },
    {
        "content": "<p>so coming back to \"orthogonal\", I am not sure I agree with that. As you said, once we have unsafe code it can cause unconst things. and conversely, saying \"its UB\" is one option for specifying unconst ops.</p>",
        "id": 201959154,
        "sender_full_name": "RalfJ",
        "timestamp": 1593086183
    },
    {
        "content": "<p>sure, I just meant the \"what is UB\" and \"what is unconst\" questions are independent things to explain, and starting them out intermingled will cause confusion</p>",
        "id": 201964237,
        "sender_full_name": "oli",
        "timestamp": 1593089546
    },
    {
        "content": "<p>A single RFC could explain all steps, but keeping these separate while introducing them helps communicate the point of each imo</p>",
        "id": 201964337,
        "sender_full_name": "oli",
        "timestamp": 1593089610
    },
    {
        "content": "<p>I agree they should be separate RFCs</p>",
        "id": 201965113,
        "sender_full_name": "RalfJ",
        "timestamp": 1593089993
    },
    {
        "content": "<p>I feel there is a dependency here where it helps to have the UB RFC first</p>",
        "id": 201965167,
        "sender_full_name": "RalfJ",
        "timestamp": 1593090004
    },
    {
        "content": "<p>seems reasonable to me</p>",
        "id": 201965775,
        "sender_full_name": "oli",
        "timestamp": 1593090335
    },
    {
        "content": "<p>it's the one without any prerequisites</p>",
        "id": 201965786,
        "sender_full_name": "oli",
        "timestamp": 1593090346
    }
]