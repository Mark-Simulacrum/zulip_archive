[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span> Currently the implementation of RFC 2203 (<a href=\"https://github.com/rust-lang/rust/issues/49147\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49147\">#49147</a>) is incomplete for e.g. <code>Vec::new()</code> in array repeat expressions. I opened <a href=\"https://github.com/rust-lang/rust/issues/65737\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65737\">#65737</a> to track this. There, I allude to the changes to the rules for promotability that would be required to make this work; specifically, <code>Drop</code> types need to be promoted in an explicit context.  I know <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> will have some thoughts on this as well.</p>",
        "id": 178894535,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571863159
    },
    {
        "content": "<p>So the motivational text of the RFC might not be fully up to date; <code>const X: Vec&lt;T&gt; = Vec::new();</code> and such may be required but I think we will need to reconsider the design of the RFC</p>",
        "id": 178896626,
        "sender_full_name": "centril",
        "timestamp": 1571864568
    },
    {
        "content": "<p>FWIW I don't think it's a deal-breaker to promote <code>Drop</code> things in an explicit context (this does <strong>not</strong> include <code>&amp;NeedsDrop</code>)</p>",
        "id": 178896783,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571864665
    },
    {
        "content": "<p>I'd rather push towards explicit anonymous <code>const</code> as opposed to promoting more things</p>",
        "id": 179746409,
        "sender_full_name": "RalfJ",
        "timestamp": 1572786060
    },
    {
        "content": "<p>long-term I'd really like is to push towards removing <code>#[rustc_promotable]</code> from as many methods as we can get away with</p>",
        "id": 179746421,
        "sender_full_name": "RalfJ",
        "timestamp": 1572786094
    },
    {
        "content": "<p>probably some of them only had it for backcompat but are hardly used? what would be the requirements for making a fn no longer promoted?</p>",
        "id": 179746427,
        "sender_full_name": "RalfJ",
        "timestamp": 1572786117
    },
    {
        "content": "<p>I agree that <code>rustc_promotable</code> isn't the right thing to do here.</p>",
        "id": 179759249,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572808312
    },
    {
        "content": "<p>I may write up an RFC discussing the various ways we could do this.</p>",
        "id": 179759299,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572808368
    },
    {
        "content": "<p>We really want to just call <code>Vec::new()</code> N times, not once and have another unstable effect system that determines whether the result of a function call is bitwise copyable.</p>",
        "id": 179759437,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572808595
    },
    {
        "content": "<p>But this diverges from the behavior for <code>Copy</code> types, where the initializer is invoked exactly once and then copied N times.</p>",
        "id": 179759502,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572808741
    },
    {
        "content": "<p><code>Vec::new</code> is a const fn so copying is fine -- we should just be explicit about it</p>",
        "id": 179760662,
        "sender_full_name": "RalfJ",
        "timestamp": 1572810613
    },
    {
        "content": "<p>It's not fine if heap allocations ever become usable in a <code>const</code></p>",
        "id": 179760825,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572810874
    },
    {
        "content": "<p><code>Vec::new</code> doesnt do any heap allocation</p>",
        "id": 179760864,
        "sender_full_name": "RalfJ",
        "timestamp": 1572810945
    },
    {
        "content": "<p>Obviously, but we can't differentiate between <code>Vec::new()</code> and <code>Box::new(1i32)</code> (if the latter ever were to become a <code>const fn</code>) without an explicit attribute (e.g. <code>rustc_promotable</code>) or an analysis that looks through function calls</p>",
        "id": 179760948,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572811035
    },
    {
        "content": "<p>neither of which we want I think</p>",
        "id": 179760954,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572811043
    },
    {
        "content": "<p>solving that problem is the burden of the const-heap-alloc proposal though. it has nothing to do with array init.</p>",
        "id": 179761022,
        "sender_full_name": "RalfJ",
        "timestamp": 1572811129
    },
    {
        "content": "<p>like, a <code>const FOO: Vec&lt;i32&gt; = Vec::new()</code> also relies on this being bit-copyable</p>",
        "id": 179761039,
        "sender_full_name": "RalfJ",
        "timestamp": 1572811149
    },
    {
        "content": "<p>that's what <code>const</code> is about</p>",
        "id": 179761045,
        "sender_full_name": "RalfJ",
        "timestamp": 1572811154
    },
    {
        "content": "<p>I don'twant to make any decisions here that would make const-heap-alloc more difficult is all. If we start guaranteeing bitwise copies for <code>const</code>, how will we ever support <code>const X = Box::new(1)</code>?</p>",
        "id": 179761294,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572811469
    },
    {
        "content": "<p>I mean, maybe that ship has already sailed</p>",
        "id": 179761316,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572811540
    },
    {
        "content": "<blockquote>\n<p>I mean, maybe that ship has already sailed</p>\n</blockquote>\n<p>it definitely has</p>",
        "id": 179763228,
        "sender_full_name": "RalfJ",
        "timestamp": 1572814590
    },
    {
        "content": "<p>bit-wise copy is the defining property of <code>const</code></p>",
        "id": 179763231,
        "sender_full_name": "RalfJ",
        "timestamp": 1572814605
    },
    {
        "content": "<blockquote>\n<p>it definitely has</p>\n</blockquote>\n<p>I don't think everyone is convinced of this: <a href=\"https://github.com/rust-rfcs/const-eval/issues/20#issuecomment-520227200\" target=\"_blank\" title=\"https://github.com/rust-rfcs/const-eval/issues/20#issuecomment-520227200\">https://github.com/rust-rfcs/const-eval/issues/20#issuecomment-520227200</a></p>",
        "id": 179763286,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572814710
    },
    {
        "content": "<blockquote>\n<p>bit-wise copy is the defining property of <code>const</code></p>\n</blockquote>\n<p>I thought the defining property of <code>const</code> was something like \"behaves as if you copy-pasted the definition everywhere the const was used\"</p>",
        "id": 179763310,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572814786
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> It's possible that this has evolved over time I guess.</p>",
        "id": 179763333,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572814803
    },
    {
        "content": "<blockquote>\n<p>I don't think everyone is convinced of this: <a href=\"https://github.com/rust-rfcs/const-eval/issues/20#issuecomment-520227200\" target=\"_blank\" title=\"https://github.com/rust-rfcs/const-eval/issues/20#issuecomment-520227200\">https://github.com/rust-rfcs/const-eval/issues/20#issuecomment-520227200</a></p>\n</blockquote>\n<p>well if they find a way for that the same thing will work for arrays</p>",
        "id": 179763354,
        "sender_full_name": "RalfJ",
        "timestamp": 1572814804
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>bit-wise copy is the defining property of <code>const</code></p>\n</blockquote>\n<p>I thought the defining property of <code>const</code> was something like \"behaves as if you copy-pasted the definition everywhere the const was used\"</p>\n</blockquote>\n<p>right, but the \"as-if\" part would be boring if we really would do that^^</p>",
        "id": 179763364,
        "sender_full_name": "RalfJ",
        "timestamp": 1572814834
    },
    {
        "content": "<p>it's \"as-if\" because in reality we are just copying the result</p>",
        "id": 179763367,
        "sender_full_name": "RalfJ",
        "timestamp": 1572814842
    },
    {
        "content": "<p>if we change that (and I strongly doubt we will), whatever we do for <code>const</code> uses then is something we can also do for arrays</p>",
        "id": 179763381,
        "sender_full_name": "RalfJ",
        "timestamp": 1572814882
    },
    {
        "content": "<p>Stepping back for a moment, what do you think about the following:</p>\n<p>If the type of a repeat array initializer (<code>[expr; 20]</code>) is not <code>Copy</code>, but is explicitly promotable, the array initializer will be expanded to the following array literal (<code>[expr, expr, ..., expr]</code>)</p>",
        "id": 179763518,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572815141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> this is the proposal I was considering for the hypothetical RFC I mentioned above.</p>",
        "id": 179763571,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572815223
    },
    {
        "content": "<p>I don't like that it does very different things for <code>const</code>-safe initalizers and <code>Copy</code> initializers.</p>",
        "id": 179763630,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572815349
    },
    {
        "content": "<p>The reasoning behind this is that it shouldn't be observable whether a <code>const fn</code> is called once with the same inputs or multiple times. I'm not sure how true this is today, and I think a moderately powerful <code>unconst</code> would break this assumption.</p>",
        "id": 179763681,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572815452
    },
    {
        "content": "<p>If one of the invocations of <code>expr</code> panics btw, it would be a compile-time error. I assume the reason we don't just do this for every array initializer is we would need to handle panics with a partially initialized array.</p>",
        "id": 179763732,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572815551
    },
    {
        "content": "<blockquote>\n<p>The reasoning behind this is that it shouldn't be observable whether a <code>const fn</code> is called once with the same inputs or multiple times. I'm not sure how true this is today, and I think a moderately powerful <code>unconst</code> would break this assumption.</p>\n</blockquote>\n<p>it is true today but will likely not be true for unsafe code forever</p>",
        "id": 179763743,
        "sender_full_name": "RalfJ",
        "timestamp": 1572815611
    },
    {
        "content": "<p>and UB should be something that you can actually check, which \"impurity\" isn't, not really</p>",
        "id": 179763746,
        "sender_full_name": "RalfJ",
        "timestamp": 1572815632
    },
    {
        "content": "<p>do you know what the plans are (if any) for \"truly run-time\" array initializers? @Centril mentioned something along those lines</p>",
        "id": 179763798,
        "sender_full_name": "RalfJ",
        "timestamp": 1572815691
    },
    {
        "content": "<p>No idea, although that would make this a non-issue. The only concern I have is that it would behave very differently <code>Copy</code> types than for non-<code>Copy</code> ones when the initializer has side effects: <code>[rand::&lt;BigInt&gt;(); 4]</code> vs <code>[rand::&lt;i32&gt;::(); 4]</code></p>",
        "id": 179763869,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572815835
    },
    {
        "content": "<p>One thing that someone brought up at the lang-team meeting was making the requirement <code>const Clone</code> instead of <code>Copy</code></p>",
        "id": 179763875,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572815880
    },
    {
        "content": "<p>Obviously this depends on having support for <code>const</code> traits</p>",
        "id": 179763916,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572815897
    },
    {
        "content": "<p>so it's a ways off</p>",
        "id": 179763920,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572815910
    },
    {
        "content": "<p>But it would mean that any observable side-effects would have to be in the <code>Clone</code> impl, which we could more easily make rules around.</p>",
        "id": 179763938,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572815980
    },
    {
        "content": "<p>hm. but that would likely also require us to actually evaluate <code>clone</code> N times</p>",
        "id": 179763984,
        "sender_full_name": "RalfJ",
        "timestamp": 1572816033
    },
    {
        "content": "<p><code>[const { Vec::new() }; N]</code>, using anonymous constant, seems like the easiest way forward IMO</p>",
        "id": 179763993,
        "sender_full_name": "RalfJ",
        "timestamp": 1572816070
    },
    {
        "content": "<p>I don't think that really resolves the question about whether that means called <code>N</code> times, called once and const-cloned <code>N</code> times, or called once and bitwise copied <code>N</code> times (the final one requiring that the top-level value in a <code>const</code> be bitwise-copyable)</p>",
        "id": 179764186,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572816466
    },
    {
        "content": "<p>if you tie this to <code>const Clone</code> then of course this ties it to const-clone it <code>N</code> times, how else would it make any sense?</p>",
        "id": 179764784,
        "sender_full_name": "RalfJ",
        "timestamp": 1572817492
    },
    {
        "content": "<p>There's three choices above</p>",
        "id": 179764798,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572817523
    },
    {
        "content": "<p>That's one of them</p>",
        "id": 179764803,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572817533
    },
    {
        "content": "<p>The proposal I described would be the first (<code>expr</code> would be evaluated <code>N</code> times)</p>",
        "id": 179764861,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572817576
    },
    {
        "content": "<p>I assume that you're in favor of the last one (<code>expr</code> evaluated once and bitwise-copied <code>N</code> times)</p>",
        "id": 179764873,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572817635
    },
    {
        "content": "<blockquote>\n<p>The proposal I described would be the first (<code>expr</code> would be evaluated <code>N</code> times)</p>\n</blockquote>\n<p>what I ams aying is, if this is what we do, what's the point of the <code>const Clone</code> requirement?<br>\nI guess I am just confused at what concretely you are proposing.</p>",
        "id": 179914490,
        "sender_full_name": "RalfJ",
        "timestamp": 1572946009
    },
    {
        "content": "<p>The <code>const Clone</code> idea is mutually exclusive with the first one. It would be more consistent with the current behavior of array initialization for non-const functions that return <code>Copy</code> types (called once, copied <code>N</code> times)</p>",
        "id": 179951787,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572972925
    },
    {
        "content": "<p>I think I got confused between the multiple ideas that you raised and about what belonged to what^^</p>",
        "id": 179966993,
        "sender_full_name": "RalfJ",
        "timestamp": 1572981792
    },
    {
        "content": "<p>I could have been more clear.</p>",
        "id": 179967147,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572981875
    },
    {
        "content": "<p>I'm just thinking out-loud mostly</p>",
        "id": 179967211,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572981913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  brought up an interesting point in the lang team meeting today about allowing arbitrary <code>const fn</code>s. Currently, we look to see if the initializer is promotable, and if so we run it at compile-time even if it would be allowed at run-time because it is <code>Copy</code>.  As a result, making an existing  <code>fn</code> that returns a <code>Copy</code> type into a <code>const fn</code> will change the semantics of <code>[fn_that_might_panic(); 4]</code>. This is the whole reason that we have the implicit/explicit distinction, and it suggests we should use the implicit promotability rules, which don't allow calls to arbitrary <code>const fn</code>.</p>\n<p>In the meeting, I proposed only trying to do promotion if the type is not <code>Copy</code> to avoid this problem. Promotion happens pretty late in the compilation pipeline, so this is <em>probably</em> feasible, but there's complexity around e.g. generics/associated consts. I don't think this feature warrants the additional complexity, so I'm inclined to use the rules for implicit promotion always.</p>",
        "id": 180172893,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573158793
    },
    {
        "content": "<p>yes</p>",
        "id": 180220731,
        "sender_full_name": "oli",
        "timestamp": 1573211942
    },
    {
        "content": "<p>we can allow function calls via explicit <code>const</code> blocks</p>",
        "id": 180220743,
        "sender_full_name": "oli",
        "timestamp": 1573211957
    },
    {
        "content": "<p>or we have something like the suggested <code>const(heap)</code> functions which are <code>const(dont_panic)</code></p>",
        "id": 180220812,
        "sender_full_name": "oli",
        "timestamp": 1573212009
    },
    {
        "content": "<p>ATM, rustc_promotable is basically dont_panic right?</p>",
        "id": 180229885,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573220266
    },
    {
        "content": "<p>nope</p>",
        "id": 180229965,
        "sender_full_name": "oli",
        "timestamp": 1573220305
    },
    {
        "content": "<p><code>&amp;(0 - 7)</code> gets promoted</p>",
        "id": 180229971,
        "sender_full_name": "oli",
        "timestamp": 1573220314
    },
    {
        "content": "<p>I mean the attribute. Would you ever put it on a function that panicked?</p>",
        "id": 180230057,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573220391
    },
    {
        "content": "<p>Is it promising more?</p>",
        "id": 180230123,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573220433
    },
    {
        "content": "<p>I mean<code>#[rustc_promotable]</code> doesn't actually check anything in the function body, but I think that's pretty much how it's used.</p>",
        "id": 180231627,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573221609
    },
    {
        "content": "<p>oh... yea, that's kinda true</p>",
        "id": 180245810,
        "sender_full_name": "oli",
        "timestamp": 1573230412
    },
    {
        "content": "<p>I thought you meant an analysis</p>",
        "id": 180245832,
        "sender_full_name": "oli",
        "timestamp": 1573230427
    },
    {
        "content": "<blockquote>\n<p>Currently, we look to see if the initializer is promotable, and if so we run it at compile-time even if it would be allowed at run-time because it is Copy. </p>\n</blockquote>\n<p>Some weeks ago I specifically asked if we do that because it would be problematic -- failure to promote <em>must</em> imply failure to compile (if we use explicit promotion rules), and this is a counterexample. Back then I was told that indeed we only fall back to promotion but prefer <code>Copy</code>, so now I am confused^^</p>",
        "id": 180308161,
        "sender_full_name": "RalfJ",
        "timestamp": 1573297732
    },
    {
        "content": "<p>so I feel I raised that exact point weeks ago^^ I am glad that it now got recognized but I am worried why it needs to be raised multiple times for that to happen.</p>",
        "id": 180308226,
        "sender_full_name": "RalfJ",
        "timestamp": 1573297806
    },
    {
        "content": "<blockquote>\n<p><code>&amp;(0 - 7)</code> gets promoted</p>\n</blockquote>\n<p>the thing that gets promoted doesnt panic though</p>",
        "id": 180308238,
        "sender_full_name": "RalfJ",
        "timestamp": 1573297843
    },
    {
        "content": "<p>we promote the <code>overflowing_add</code>, which is <code>dont_panic</code></p>",
        "id": 180308239,
        "sender_full_name": "RalfJ",
        "timestamp": 1573297851
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> the change in my thinking was around the second paragraph, not the first. I used to think the fact that we did promotion unconditionally was a bug that should be fixed. I now no longer think this. You can watch the lang-team meeting video (should be around minute 5) once it's posted to see the discussion in full.</p>",
        "id": 180387965,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573432033
    },
    {
        "content": "<p>If your concerns are about me specifically, perhaps we should discuss them in private.</p>",
        "id": 180388010,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573432100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span>  no I dont have any concerns with you specifically, not at all. :)<br>\nI am just confused. there is a misunderstanding somewhere and I'd like to figure out who misunderstood what where, with the hope of avoiding that in the future.</p>",
        "id": 180905169,
        "sender_full_name": "RalfJ",
        "timestamp": 1573896845
    },
    {
        "content": "<p>or maybe that's less important than making sure that we cleared all the misunderstandings and are actually talking about the same thing <em>now</em>.</p>",
        "id": 180905177,
        "sender_full_name": "RalfJ",
        "timestamp": 1573896868
    },
    {
        "content": "<p>this is the comment where I raised that exact point: <a href=\"https://github.com/rust-lang/rust/issues/65737#issuecomment-545786146\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65737#issuecomment-545786146\">https://github.com/rust-lang/rust/issues/65737#issuecomment-545786146</a></p>\n<blockquote>\n<p>For us to use explicit promotion rules, failure to promote must imply failure to compile.</p>\n</blockquote>",
        "id": 180905397,
        "sender_full_name": "RalfJ",
        "timestamp": 1573897322
    },
    {
        "content": "<p>the whole reason I mentioned that is exactly what you wrote some weeks later:</p>\n<blockquote>\n<p>Currently, we look to see if the initializer is promotable, and if so we run it at compile-time even if it would be allowed at run-time because it is Copy. As a result, making an existing fn that returns a Copy type into a const fn will change the semantics of [fn_that_might_panic(); 4]. This is the whole reason that we have the implicit/explicit distinction, and it suggests we should use the implicit promotability rules, which don't allow calls to arbitrary const fn.</p>\n</blockquote>\n<p>but somehow it seems I failed to communicate that, as back then the response was \"From this perspective, for Copy arrays, promotion is not involved at all.\", which then in turn I read as you actually having understood the above point...</p>",
        "id": 180905424,
        "sender_full_name": "RalfJ",
        "timestamp": 1573897424
    },
    {
        "content": "<p>but, whatever. I think we now agree that, for both Copy and non-Copy, if we use explicit promotion rules, then in case the promotion analysis says \"no\", we must return a hard error. we can <em>not</em>, <em>after</em> this check, have a special case for <code>Copy</code>. that would violate \"failure to promote implies failure to compile\".</p>",
        "id": 180905479,
        "sender_full_name": "RalfJ",
        "timestamp": 1573897506
    },
    {
        "content": "<p>we could still do the <code>Copy</code> check <em>before</em> even doing a promotion analysis</p>",
        "id": 180905481,
        "sender_full_name": "RalfJ",
        "timestamp": 1573897518
    },
    {
        "content": "<p>I wasn't asserting that the first paragraph contained any new information. It is exactly the point you brought up, and I have <em>indeed</em> understood it for the duration of the discussion in <a href=\"https://github.com/rust-lang/rust/issues/65737\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65737\">#65737</a>.  That paragraph was a summary of the lang team discussion at the meeting, meant for people who were unfamiliar with the concerns here. I did not intend for it to sound like something original. Perhaps I erred by mentioning <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> in the first paragraph rather than the second.</p>",
        "id": 180919036,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573922500
    },
    {
        "content": "<p>I also don't think this particular line of questioning is all that useful, so let's focus on summarizing the remaining technical issue: Do we only try promotion for non-<code>Copy</code> array initializers?</p>",
        "id": 180919248,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573922829
    },
    {
        "content": "<p>I should say that it <em>is</em> important that we agree on this:</p>\n<blockquote>\n<p>but, whatever. I think we now agree that, for both Copy and non-Copy, if we use explicit promotion rules, then in case the promotion analysis says \"no\", we must return a hard error. we can <em>not</em>, <em>after</em> this check, have a special case for <code>Copy</code>. that would violate \"failure to promote implies failure to compile\".</p>\n</blockquote>",
        "id": 180919314,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573922908
    },
    {
        "content": "<p>I thought that const array initializer promotion worked like this both in practice and in theory, so this wasn't really a point  of contention. I was wrong. It definitely doesn't work like this in practice, and we have to decide whether we want to change this.</p>",
        "id": 180919400,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573923024
    },
    {
        "content": "<p>If we keep the status quo (try promotion first, even for <code>Copy</code> types), I agree with you that we <em>cannot</em> use the explicit rules for promotion.</p>",
        "id": 180919422,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573923105
    },
    {
        "content": "<p>So I <em>think</em> the choice is this: do we check whether <code>T</code> is <code>Copy</code> before trying promote the initializer for <code>[T; 4]</code>, which would allow us to use the explicit promotion rules? Or do we keep the status quo, always promote if we can but use the implicit promotion rules so the user cannot observe what we're doing.</p>",
        "id": 180919669,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573923532
    },
    {
        "content": "<p>(I'll stop here to see if everyone agrees on this framing, but I'd like to reiterate that my answer to <em>this question</em> is what changed during the lang-team meeting)</p>",
        "id": 180919745,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573923624
    },
    {
        "content": "<blockquote>\n<p>If we keep the status quo (try promotion first, even for <code>Copy</code> types), I agree with you that we <em>cannot</em> use the explicit rules for promotion.</p>\n</blockquote>\n<p>looks like we agree then, good. :) and sorry for the noise, that probably wasn't helpful.</p>",
        "id": 180920023,
        "sender_full_name": "RalfJ",
        "timestamp": 1573924115
    },
    {
        "content": "<p>since I agree on the framing, let me weigh the two options you gave: I am not very happy about \"explicit promotion after a <code>Copy</code> check\", because in this case the \"signal\" by the programmer that they <em>want</em> const-eval is very weak. In particular they might not be aware that their data is non-<code>Copy</code> and thus they might be surprised by promotion happening.</p>",
        "id": 180920087,
        "sender_full_name": "RalfJ",
        "timestamp": 1573924220
    },
    {
        "content": "<p>my preferred option is thus your second (status quo), <em>plus</em> explicit promotion through anonymous <code>const</code> blocks</p>",
        "id": 180920092,
        "sender_full_name": "RalfJ",
        "timestamp": 1573924245
    },
    {
        "content": "<p>I agree with this. <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do we have consensus here?</p>",
        "id": 180920155,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573924357
    },
    {
        "content": "<p>If we do we can close <a href=\"https://github.com/rust-lang/rust/issues/65737\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65737\">#65737</a> and amend the RFC</p>",
        "id": 180920221,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573924497
    },
    {
        "content": "<p><em>sigh</em></p>",
        "id": 180931810,
        "sender_full_name": "eddyb",
        "timestamp": 1573944924
    },
    {
        "content": "<p>I'll defer to <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 180931817,
        "sender_full_name": "eddyb",
        "timestamp": 1573944951
    },
    {
        "content": "<p>I am interested in hearing your opinion if you want to share</p>",
        "id": 180932277,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573945699
    },
    {
        "content": "<blockquote>\n<p><em>sigh</em></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  not sure what to do with that feedback^^</p>",
        "id": 180951465,
        "sender_full_name": "RalfJ",
        "timestamp": 1573985397
    },
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang/rust/issues/49147#issuecomment-521113759\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49147#issuecomment-521113759\">https://github.com/rust-lang/rust/issues/49147#issuecomment-521113759</a> you (if I am reading correctly) argued for <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span>'s option (1) [first try <code>Copy</code>, then fall back to promotion with explicit rules]. I agree that is workable, but I am not a big fan because which types are <code>Copy</code> and which not can be quite sublte, I think. However I am happy to be convinced otherwise here.</p>",
        "id": 180951526,
        "sender_full_name": "RalfJ",
        "timestamp": 1573985504
    },
    {
        "content": "<p>as a future-compatible measure, maybe we should for now move to try <code>Copy</code> first and then fall back to promotion with the <em>implicit</em> rules?</p>",
        "id": 180951571,
        "sender_full_name": "RalfJ",
        "timestamp": 1573985527
    },
    {
        "content": "<p>So... just catch me if I'm wrong here. We have 4 ways to go:</p>\n<ol>\n<li>implicit promotion, if fails, keep requiring <code>Copy</code></li>\n<li>check <code>Copy</code>, if <code>!Copy</code> use implicit promotion</li>\n<li>check <code>Copy</code>, if <code>!Copy</code> use explicit promotion</li>\n<li>explicit promotion, if fails, keep requiring <code>Copy</code></li>\n</ol>\n<p>2 is forward compatible with choosing 3 later<br>\n1 and 4 have semver implications (2. and 3. don't have these, because adding a <code>Copy</code> bound when the value is already promotable won't change whether the thing compiles)</p>\n<p>There's no difference in capabilities between 1/4 vs 2/3 so the path of least worry is 2. (we could even immediately add a feature gate for 3. as to see what ppl do on nightly)</p>",
        "id": 180954976,
        "sender_full_name": "oli",
        "timestamp": 1573992006
    },
    {
        "content": "<p>I don't think there's any way to observe the difference between 1 and 2, so 1 is also forward compatible with 3, is this correct? Also, do we all agree that 4 is unworkable? It would make changing a <code>fn</code> that might panic (e.g., due to integer overflow) into a <code>const fn</code> a breaking change.</p>",
        "id": 180962695,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574007105
    },
    {
        "content": "<p>It matters for lifetime dependent <code>Copy</code> implementations, but those are pretty broken anyway. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 180963048,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574007828
    },
    {
        "content": "<p>I do think it would be worth trying 2/3, just to see how hard or easy it is to implement</p>",
        "id": 180967133,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574015172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yeah those seem like the 4 options, plus the extra choice for each of them of having explicit <code>const { ... }</code> blocks for users to opt-in to explicit promotion</p>",
        "id": 180994133,
        "sender_full_name": "RalfJ",
        "timestamp": 1574063241
    },
    {
        "content": "<p>and (4) is bad, for the same reason that implicitly promoting <code>const fn</code> calls in normal <code>fn</code> bodies is bad -- it could break programs that otherwise compile and run fine</p>",
        "id": 180994185,
        "sender_full_name": "RalfJ",
        "timestamp": 1574063287
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><em>sigh</em></p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span>  not sure what to do with that feedback^^</p>\n</blockquote>\n<p>I'm sighing at the complicated nature of the situation, which is the usual \"I want to have my cake and eat it too\"</p>",
        "id": 181122089,
        "sender_full_name": "eddyb",
        "timestamp": 1574177492
    },
    {
        "content": "<p>fair ;)</p>",
        "id": 181124061,
        "sender_full_name": "RalfJ",
        "timestamp": 1574178522
    }
]