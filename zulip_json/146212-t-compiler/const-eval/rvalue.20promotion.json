[
    {
        "content": "<p>Should we expect rvalue promotion to kick in for const fn at some point?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">Foo</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0515]: cannot return reference to temporary value\n --&gt; src/lib.rs:9:5\n  |\n9 |     &amp;Foo::new()\n  |     ^----------\n  |     ||\n  |     |temporary value created here\n  |     returns a reference to data owned by the current function\n</pre></div>",
        "id": 156488499,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548002961
    },
    {
        "content": "<p>Whereas these work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">A</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156488511,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548002996
    },
    {
        "content": "<p>/cc  <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span></p>",
        "id": 156488637,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548003130
    },
    {
        "content": "<p>I think the answer is no: <a href=\"https://github.com/rust-lang/rust/issues/53851\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53851\">#53851</a></p>",
        "id": 156488674,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1548003233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> ah, thank you!</p>",
        "id": 156488893,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548003575
    },
    {
        "content": "<p>Although I read it a bit differently: more like \"we don't know what we want now, so be conservative\". Maybe once we know more, we can unlock it.</p>",
        "id": 156488956,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548003613
    },
    {
        "content": "<p>I have formulated a \"no\" here: <a href=\"https://github.com/rust-rfcs/const-eval/issues/19\" target=\"_blank\" title=\"https://github.com/rust-rfcs/const-eval/issues/19\">https://github.com/rust-rfcs/const-eval/issues/19</a></p>",
        "id": 156520389,
        "sender_full_name": "oli",
        "timestamp": 1548058279
    },
    {
        "content": "<p>This is not what I wanted. Y u do this.</p>",
        "id": 156540840,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548082133
    },
    {
        "content": "<p>(I mean, I'm gonna read it, and I'm sure there are good reasons)</p>",
        "id": 156540868,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548082188
    },
    {
        "content": "<p>I'm fine with it if we invent sth like <code>&amp;const { Foo::new() }</code> blocks</p>",
        "id": 156541719,
        "sender_full_name": "oli",
        "timestamp": 1548082981
    },
    {
        "content": "<p>or possibly even <code>&amp;static { Foo::new() }</code>, which fits the semantics more</p>",
        "id": 156541751,
        "sender_full_name": "oli",
        "timestamp": 1548083015
    },
    {
        "content": "<p>I was about to say that</p>",
        "id": 156541853,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548083071
    },
    {
        "content": "<p>the <code>static</code> part or the explicit blocks part?</p>",
        "id": 156541908,
        "sender_full_name": "oli",
        "timestamp": 1548083130
    },
    {
        "content": "<p>The static part. The const block part is clear IMO -- it's an anonymous constant, so it's just like <code>const X: _ = Foo::new(); &amp;X</code> which is distinct from promotion.</p>",
        "id": 156541998,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548083196
    },
    {
        "content": "<p>Well, it's not promotion of the <code>Foo::new()</code> call at least</p>",
        "id": 156542033,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548083229
    },
    {
        "content": "<p>Hm, but it works in every case where opt-in promotion would work, so there's really no need to introduce <code>static {}</code>, is there?</p>",
        "id": 156542137,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548083316
    },
    {
        "content": "<p>The rationale for not allowing <code>&amp;Foo::new()</code> is in the link further up. But yes, trivial cases like <code>&amp;SOME_CONST</code> should not require <code>&amp;static{SOME_CONST}</code></p>",
        "id": 156542525,
        "sender_full_name": "oli",
        "timestamp": 1548083722
    },
    {
        "content": "<p>I know the rationale, I mean that whenever \"opt-in promotion\" would work, so would <code>&amp;const { &lt;expr&gt; }</code> under the usual proposed meaning of the block (anonymous constant). Hence, no need to actually introduce \"opt-in promotion\", it's subsumed by anonymous constants.</p>",
        "id": 156542641,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548083841
    },
    {
        "content": "<p>Despite anonymous constants being, well, constants rather than statics.</p>",
        "id": 156542654,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548083869
    },
    {
        "content": "<p>We can't just desugar at the AST level, since we don't have constants that infer their types (and I don't think we should go down that avenue)</p>",
        "id": 156542960,
        "sender_full_name": "oli",
        "timestamp": 1548084124
    },
    {
        "content": "<p>But we already have anonymous constants in the compiler. Array lengths and enum discriminant inititalizers are both anonymous constants</p>",
        "id": 156542989,
        "sender_full_name": "oli",
        "timestamp": 1548084161
    },
    {
        "content": "<p><code>&amp;static { Foo::new() }</code> — feels too close to the generator (?) syntax of <code>static || {}</code></p>",
        "id": 156554908,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548096656
    },
    {
        "content": "<p>That generator syntax is entirely temporary</p>",
        "id": 156555160,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1548097009
    },
    {
        "content": "<p>It's not meant to stick around :)</p>",
        "id": 156555162,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1548097017
    },
    {
        "content": "<p>oh? will something need to replace it?</p>",
        "id": 156573266,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548122807
    },
    {
        "content": "<p>Test</p>",
        "id": 156593015,
        "sender_full_name": "Patrrick",
        "timestamp": 1548151479
    },
    {
        "content": "<blockquote>\n<p><code>&amp;static { Foo::new() }</code> — feels too close to the generator (?) syntax of <code>static || {}</code></p>\n</blockquote>\n<p>This is a reply</p>",
        "id": 156593042,
        "sender_full_name": "Patrrick",
        "timestamp": 1548151520
    }
]