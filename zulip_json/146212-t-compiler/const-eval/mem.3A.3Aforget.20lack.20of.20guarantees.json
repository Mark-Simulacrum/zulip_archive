[
    {
        "content": "<p>Someone pointed out to me on my recent blog post that mem::forget explicitly does not guarantee that pointers to the forgotten memory remain valid</p>",
        "id": 169857581,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562582370
    },
    {
        "content": "<p>Could miri check this? (<a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8dea89516c17edbe73ae7eb1ce3d2165\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8dea89516c17edbe73ae7eb1ce3d2165\">AFACIT</a> it currently does not; see lines 15-17 of linked playpen.) And if it could, <em>should</em> it?</p>",
        "id": 169857824,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562582673
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/miri/issues/753\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/753\">https://github.com/rust-lang/miri/issues/753</a></p>",
        "id": 170461455,
        "sender_full_name": "oli",
        "timestamp": 1562684615
    },
    {
        "content": "<p>I think it should be enough to make moves invalidate (set to undef) the bytes that are moved out of</p>",
        "id": 170461530,
        "sender_full_name": "oli",
        "timestamp": 1562684648
    },
    {
        "content": "<p>But that may end up becoming rather slow (especially since that's what's happening in many cases already via StorageDead)</p>",
        "id": 170461591,
        "sender_full_name": "oli",
        "timestamp": 1562684687
    },
    {
        "content": "<p>For moves via ptr::read this may not be an option, not sure.</p>",
        "id": 170461663,
        "sender_full_name": "oli",
        "timestamp": 1562684757
    },
    {
        "content": "<p>I think the game is still open whether <code>mem::forget</code> kills pointers</p>",
        "id": 170645097,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859644
    },
    {
        "content": "<p>seems strange to me honestly, it does explicilty <em>not</em> deallocate</p>",
        "id": 170645114,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859656
    },
    {
        "content": "<blockquote>\n<p>I think it should be enough to make moves invalidate (set to undef) the bytes that are moved out of</p>\n</blockquote>\n<p>that's not enough, then you can still write to that memory</p>",
        "id": 170645152,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859687
    },
    {
        "content": "<p>I have not seen an operational model that lets us actually formalize this. and I dont believe in axiomatic semantics. ;)</p>",
        "id": 170645175,
        "sender_full_name": "RalfJ",
        "timestamp": 1562859705
    },
    {
        "content": "<p>oh</p>",
        "id": 170716531,
        "sender_full_name": "oli",
        "timestamp": 1562933575
    },
    {
        "content": "<p>my mental model of moves is just undefing the memory that you move out of</p>",
        "id": 170716541,
        "sender_full_name": "oli",
        "timestamp": 1562933592
    },
    {
        "content": "<p>yes we have talked about that before. I just am still waiting to see a case where that actually enables any optimization.^^</p>",
        "id": 170779630,
        "sender_full_name": "RalfJ",
        "timestamp": 1563003941
    },
    {
        "content": "<p>I thought it was useful. But I am not so sure any more.</p>",
        "id": 170779634,
        "sender_full_name": "RalfJ",
        "timestamp": 1563003952
    }
]