[
    {
        "content": "<p>I have been doing a lot of work with <code>const_trait_impl</code>, and I begin to realize the syntax proposed by the RFC is not the best.</p>\n<p>We currently have <code>impl const Trait</code>, but we don't have <code>T: const Trait</code>. This feels inconsistent when you have to look for <code>T: Trait</code> as well as <code>T: ?const Trait</code> to find non-const bounds (and the former can be acually a const bound when on a const function!)</p>\n<p>I really like <code>T: const Trait</code>, because we can now put constness as a part of a TraitRef. So the rest of the world becomes pretty consistent: <code>impl TraitRef</code> the constness is part of TraitRef and not part of the <code>impl</code>'s header. We could disallow other places for now such as <code>&lt;T as const Trait&gt;::blah()</code>, and it would make other things easier to come: const fn pointer, const dyn traits...</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 249682641,
        "sender_full_name": "fee1-dead",
        "timestamp": 1629181328
    },
    {
        "content": "<blockquote>\n<p>and it would make other things easier to come: const fn pointer, const dyn traits...</p>\n</blockquote>\n<p>Are you referring to the issues <a href=\"https://github.com/rust-lang/rfcs/pull/2632/files#diff-35cd717db1fda75bddd264a534c83b255ae6afba2458b47d9ae74c70ecf3b9efR619\">raised here</a> and the alternative <a href=\"https://github.com/rust-lang/rfcs/pull/2632/files#diff-35cd717db1fda75bddd264a534c83b255ae6afba2458b47d9ae74c70ecf3b9efR705\">described here</a>?</p>",
        "id": 249692743,
        "sender_full_name": "RalfJ",
        "timestamp": 1629190474
    },
    {
        "content": "<p>If yes, I think I agree. However, there are two different things you could be meaning here:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">do_add</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">+</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Does this mean that the function <em>always</em> requires a <code>impl const Add</code> or just when called in a context that might be evaluated at compiletime? IOW, does this build?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Copy,Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">MyType</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Runtime-only function!</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">MyType</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">do_add</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(This is related to <code>?const Add</code> in the RFC)</p>",
        "id": 249693064,
        "sender_full_name": "RalfJ",
        "timestamp": 1629190715
    },
    {
        "content": "<p>yea, the one concern I have with this is <code>fn foo&lt;T: const Trait&gt;()</code> and what that's supposed to mean. In full \"const effect\" syntax we want something like a generic parameter: <code>for&lt;const C: bool&gt; const&lt;C&gt; fn foo&lt;T: const&lt;C&gt; Trait&gt;()</code>so we can use the functions constness to change whether the bound is const</p>",
        "id": 249697125,
        "sender_full_name": "oli",
        "timestamp": 1629193754
    },
    {
        "content": "<p>we may one day want to allow <code>fn foo&lt;T: const Trait&gt;() { let x = const { T::method() } }</code>, so the plain const bound syntax is not clearly the right thing to me</p>",
        "id": 249697317,
        "sender_full_name": "oli",
        "timestamp": 1629193906
    },
    {
        "content": "<blockquote>\n<p>fn foo&lt;T: const Trait&gt;() and what that's supposed to mean</p>\n</blockquote>\n<p>as I keep saying -- I think that whatever it means, it should be consistent with <code>fn foo(x: &amp;dyn const Trait)</code> (and likewise for <code>T: Trait</code> and <code>&amp;dyn Trait</code>)</p>",
        "id": 249700378,
        "sender_full_name": "RalfJ",
        "timestamp": 1629196099
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249697317\">said</a>:</p>\n<blockquote>\n<p>we may one day want to allow <code>fn foo&lt;T: const Trait&gt;() { let x = const { T::method() } }</code>, so the plain const bound syntax is not clearly the right thing to me</p>\n</blockquote>\n<p>not sure what \"the plain const bound syntax\" is, but I guess you are bringing this up as an argument for <em>not</em> accepting the code in my example above?</p>",
        "id": 249700414,
        "sender_full_name": "RalfJ",
        "timestamp": 1629196148
    },
    {
        "content": "<p>if your example compiles, then the <code>const</code> in <code>const Add</code> depends on the call site. That makes little sense for non-const fn, so imo we should treat <code>const Trait</code> bounds as \"always require constness\" and figure something out that is not as horrible as the \"effect syntax\"</p>",
        "id": 249701567,
        "sender_full_name": "oli",
        "timestamp": 1629197194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249700414\">said</a>:</p>\n<blockquote>\n<p>I guess you are bringing this up as an argument for <em>not</em> accepting the code in my example above?</p>\n</blockquote>\n<p>yes</p>",
        "id": 249701579,
        "sender_full_name": "oli",
        "timestamp": 1629197208
    },
    {
        "content": "<p>\"the plain const bound syntax\" -&gt; <code>const Trait</code> in bounds</p>",
        "id": 249701610,
        "sender_full_name": "oli",
        "timestamp": 1629197238
    },
    {
        "content": "<blockquote>\n<p>That makes little sense for non-const fn,</p>\n</blockquote>\n<p>Ah okay; originally I thought the plan might be to only allow this on <code>const fn</code></p>",
        "id": 249704217,
        "sender_full_name": "RalfJ",
        "timestamp": 1629199221
    },
    {
        "content": "<blockquote>\n<p>figure something out that is not as horrible as the \"effect syntax\"</p>\n</blockquote>\n<p>didn't you propose <code>const?</code> for this?</p>",
        "id": 249704227,
        "sender_full_name": "RalfJ",
        "timestamp": 1629199234
    },
    {
        "content": "<p>well, I did propose <code>?const</code> with the meaning like <code>?Sized</code> (so can be const or not, we don't care in any situation). We could come up with arbitrary other syntax, but I don't think we should re-use <code>?const</code> in a way that means \"const if in const context, otherwise not\", as that seems to differ too much from how <code>?Sized</code> works</p>",
        "id": 249705165,
        "sender_full_name": "oli",
        "timestamp": 1629199934
    },
    {
        "content": "<p>That said. idk what <code>dyn const Trait</code> even means outside of const contexts</p>",
        "id": 249705206,
        "sender_full_name": "oli",
        "timestamp": 1629199960
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249705206\">said</a>:</p>\n<blockquote>\n<p>That said. idk what <code>dyn const Trait</code> even means outside of const contexts</p>\n</blockquote>\n<p>it means the vtable comes from an <code>impl const Trait</code></p>",
        "id": 249705232,
        "sender_full_name": "RalfJ",
        "timestamp": 1629199982
    },
    {
        "content": "<p>whether that's useful though is another question^^</p>",
        "id": 249705242,
        "sender_full_name": "RalfJ",
        "timestamp": 1629199989
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249705242\">said</a>:</p>\n<blockquote>\n<p>whether that's useful though is another question^^</p>\n</blockquote>\n<p>ok, yea I know what it means, but what it's for is unclear</p>",
        "id": 249705253,
        "sender_full_name": "oli",
        "timestamp": 1629200005
    },
    {
        "content": "<p>unless we have some guarantees that const bounds bring that we can't have otherwise</p>",
        "id": 249705267,
        "sender_full_name": "oli",
        "timestamp": 1629200029
    },
    {
        "content": "<p>but even then</p>",
        "id": 249705270,
        "sender_full_name": "oli",
        "timestamp": 1629200030
    },
    {
        "content": "<p>if we make it \"const if in const context\" if used on <code>const fn</code> args, what do we do on non-const fn?</p>",
        "id": 249705340,
        "sender_full_name": "oli",
        "timestamp": 1629200055
    },
    {
        "content": "<p>mixing the \"must have an <code>impl const Trait</code>\" with \"must have an <code>impl const Trait</code> if in const context\" seems like an aweful situation</p>",
        "id": 249705430,
        "sender_full_name": "oli",
        "timestamp": 1629200115
    },
    {
        "content": "<p>If we forbid it on non-const fn, this problem is resolved</p>",
        "id": 249705482,
        "sender_full_name": "oli",
        "timestamp": 1629200143
    },
    {
        "content": "<p>but then we have no syntax for actually requiring a <code>const Trait</code> bound outside of <code>const fn</code> used in a const context</p>",
        "id": 249705557,
        "sender_full_name": "oli",
        "timestamp": 1629200173
    },
    {
        "content": "<p>which is fine if we never need such a feature, but we should at least consider if we want to throw away the obvious syntax for that forever</p>",
        "id": 249705605,
        "sender_full_name": "oli",
        "timestamp": 1629200222
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249705482\">said</a>:</p>\n<blockquote>\n<p>If we forbid it on non-const fn, this problem is resolved</p>\n</blockquote>\n<p>except what do we do with bounds in <code>impl</code> blocks?</p>",
        "id": 249705747,
        "sender_full_name": "RalfJ",
        "timestamp": 1629200305
    },
    {
        "content": "<p>the same thing as in <code>const fn</code>?</p>",
        "id": 249705778,
        "sender_full_name": "oli",
        "timestamp": 1629200327
    },
    {
        "content": "<p>bounds are the same everywhere</p>",
        "id": 249705793,
        "sender_full_name": "oli",
        "timestamp": 1629200341
    },
    {
        "content": "<p>or am I missing something?</p>",
        "id": 249705806,
        "sender_full_name": "oli",
        "timestamp": 1629200352
    },
    {
        "content": "<p>is this allowed?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Something</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249705814,
        "sender_full_name": "RalfJ",
        "timestamp": 1629200364
    },
    {
        "content": "<p>heh</p>",
        "id": 249705831,
        "sender_full_name": "oli",
        "timestamp": 1629200384
    },
    {
        "content": "<p>ok</p>",
        "id": 249705834,
        "sender_full_name": "oli",
        "timestamp": 1629200388
    },
    {
        "content": "<p>those impl blocks</p>",
        "id": 249705842,
        "sender_full_name": "oli",
        "timestamp": 1629200395
    },
    {
        "content": "<p>forgot about inherent ones</p>",
        "id": 249705849,
        "sender_full_name": "oli",
        "timestamp": 1629200400
    },
    {
        "content": "<p>yea</p>",
        "id": 249705851,
        "sender_full_name": "oli",
        "timestamp": 1629200401
    },
    {
        "content": "<p>uh</p>",
        "id": 249705857,
        "sender_full_name": "oli",
        "timestamp": 1629200403
    },
    {
        "content": "<p>it's all not great. Ignoring the <code>const</code> for non-const functions seems like a real mess</p>",
        "id": 249705914,
        "sender_full_name": "oli",
        "timestamp": 1629200426
    },
    {
        "content": "<p>I mean... we could just require you to re-state bounds you want const on the function</p>",
        "id": 249705955,
        "sender_full_name": "oli",
        "timestamp": 1629200467
    },
    {
        "content": "<p>\"problem solved\"</p>",
        "id": 249705965,
        "sender_full_name": "oli",
        "timestamp": 1629200473
    },
    {
        "content": "<p>basically that block should be equivalent to having the <code>&lt;T: const Trait&gt;</code> on each fn separately, I'd say</p>",
        "id": 249705975,
        "sender_full_name": "RalfJ",
        "timestamp": 1629200479
    },
    {
        "content": "<p>if that would be rejected, then this block should be rejected</p>",
        "id": 249705985,
        "sender_full_name": "RalfJ",
        "timestamp": 1629200486
    },
    {
        "content": "<p>yea</p>",
        "id": 249705988,
        "sender_full_name": "oli",
        "timestamp": 1629200492
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Something</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"o\">..</span><span class=\"p\">.}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>should not be rejected then</p>",
        "id": 249706074,
        "sender_full_name": "oli",
        "timestamp": 1629200527
    },
    {
        "content": "<p>though doesnt this become even more interesting for trait impls, in particular if the trait contains both <code>fn</code> and <code>const fn</code>?</p>",
        "id": 249706078,
        "sender_full_name": "RalfJ",
        "timestamp": 1629200530
    },
    {
        "content": "<p>traits can't do that</p>",
        "id": 249706098,
        "sender_full_name": "oli",
        "timestamp": 1629200541
    },
    {
        "content": "<p>not yet</p>",
        "id": 249706108,
        "sender_full_name": "RalfJ",
        "timestamp": 1629200546
    },
    {
        "content": "<p>seems like a reasonable extension though</p>",
        "id": 249706116,
        "sender_full_name": "RalfJ",
        "timestamp": 1629200557
    },
    {
        "content": "<p>sure <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> but we're in \"throw away all nice syntax for future extensions\" mode already</p>",
        "id": 249706130,
        "sender_full_name": "oli",
        "timestamp": 1629200570
    },
    {
        "content": "<p>are we?^^ it's less about \"nice\" and more about being internally coherent</p>",
        "id": 249706188,
        "sender_full_name": "RalfJ",
        "timestamp": 1629200614
    },
    {
        "content": "<p>well... you could add where bounds on the const fn</p>",
        "id": 249706311,
        "sender_full_name": "oli",
        "timestamp": 1629200671
    },
    {
        "content": "<p>oh, one thing: non-const impl blocks can't use generic params to call methods in their assoc consts if we go with <code>const Trait</code> not being allowed outside of const fn</p>",
        "id": 249706387,
        "sender_full_name": "oli",
        "timestamp": 1629200748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249706387\">said</a>:</p>\n<blockquote>\n<p>oh, one thing: non-const impl blocks can't use generic params to call methods in their assoc consts if we go with <code>const Trait</code> not being allowed outside of const fn</p>\n</blockquote>\n<p>I dont follow, do you have an example?</p>",
        "id": 249706643,
        "sender_full_name": "RalfJ",
        "timestamp": 1629200916
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Bound</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SomeTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">assoc_fn</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249706710,
        "sender_full_name": "oli",
        "timestamp": 1629200963
    },
    {
        "content": "<p>to me, the obvious syntax here is <code>T: const Bound</code></p>",
        "id": 249707026,
        "sender_full_name": "oli",
        "timestamp": 1629201139
    },
    {
        "content": "<p>I mean... we could go with allowing <code>const Trait</code> bounds everywhere and only allowing <code>?const Trait</code> bounds (or other syntax) only on <code>const fn</code> and <code>impl const Trait</code> to mean \"if used in const context\"</p>",
        "id": 249707686,
        "sender_full_name": "oli",
        "timestamp": 1629201523
    },
    {
        "content": "<p>ah so that is basically the same case as the \"trait that mixes fn and const fn\" that I brought up above</p>",
        "id": 249708536,
        "sender_full_name": "RalfJ",
        "timestamp": 1629201997
    },
    {
        "content": "<p>except the trait would mix fn and assoc consts</p>",
        "id": 249708550,
        "sender_full_name": "RalfJ",
        "timestamp": 1629202010
    },
    {
        "content": "<p>yea</p>",
        "id": 249708551,
        "sender_full_name": "oli",
        "timestamp": 1629202010
    },
    {
        "content": "<p>but you can't add bounds on assoc consts I think?</p>",
        "id": 249708584,
        "sender_full_name": "oli",
        "timestamp": 1629202035
    },
    {
        "content": "<p>yeah</p>",
        "id": 249708611,
        "sender_full_name": "RalfJ",
        "timestamp": 1629202061
    },
    {
        "content": "<p>and on a trait impl... that makes no sense anyway</p>",
        "id": 249708617,
        "sender_full_name": "oli",
        "timestamp": 1629202064
    },
    {
        "content": "<p>but this also indicates that the semantics should really be \"must be <code>const</code>, period\"</p>",
        "id": 249708632,
        "sender_full_name": "RalfJ",
        "timestamp": 1629202074
    },
    {
        "content": "<p>I agree</p>",
        "id": 249708638,
        "sender_full_name": "oli",
        "timestamp": 1629202081
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249707686\">said</a>:</p>\n<blockquote>\n<p>I mean... we could go with allowing <code>const Trait</code> bounds everywhere and only allowing <code>?const Trait</code> bounds (or other syntax) only on <code>const fn</code> and <code>impl const Trait</code> to mean \"if used in const context\"</p>\n</blockquote>\n<p>this</p>",
        "id": 249708691,
        "sender_full_name": "oli",
        "timestamp": 1629202093
    },
    {
        "content": "<p>otherwise what the heck happens in cases like this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Bound</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">SomeTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">assoc_fn</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">FOO</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249708711,
        "sender_full_name": "RalfJ",
        "timestamp": 1629202108
    },
    {
        "content": "<p>bugs, likely bugs will happen</p>",
        "id": 249708735,
        "sender_full_name": "oli",
        "timestamp": 1629202129
    },
    {
        "content": "<p>no I mean what would even be the correct thing to do, if <code>T: const Bound</code> means \"const when used in const context\"</p>",
        "id": 249708768,
        "sender_full_name": "RalfJ",
        "timestamp": 1629202152
    },
    {
        "content": "<p>the syntax is irrelevant -- what would any kind of \"const when used in const context\" system do here?</p>",
        "id": 249708786,
        "sender_full_name": "RalfJ",
        "timestamp": 1629202176
    },
    {
        "content": "<p>since assoc consts have no where clauses, \"const when used in const context\" couldnt be used in assoc consts, I think</p>",
        "id": 249708920,
        "sender_full_name": "RalfJ",
        "timestamp": 1629202256
    },
    {
        "content": "<p>which, uh, wtf^^</p>",
        "id": 249708921,
        "sender_full_name": "RalfJ",
        "timestamp": 1629202258
    },
    {
        "content": "<blockquote>\n<p>and only allowing ?const Trait bounds (or other syntax) only on const fn and impl const Trait to mean \"if used in const context\"</p>\n</blockquote>\n<p>so given the above I am not sure what allowing it on <code>impl const Trait</code> would lead mean exactly</p>",
        "id": 249709047,
        "sender_full_name": "RalfJ",
        "timestamp": 1629202347
    },
    {
        "content": "<p>there is no fundamental difference between \"const if in const\" bounds on <code>const fn</code> and on <code>impl const Trait</code>. So</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Boo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">constifinconst</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">OtherTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">SomeStruct</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">T</span>::<span class=\"n\">some_method</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\">  </span><span class=\"c1\">// illegal,</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">some_method</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// legal</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">boo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Boo</span><span class=\"o\">&gt;</span>::<span class=\"n\">some_method</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// illegal</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249712127,
        "sender_full_name": "oli",
        "timestamp": 1629204085
    },
    {
        "content": "<p>from the outside, so when calling <code>&lt;SomeStruct&lt;T&gt; as OtherTrait&gt;::something()</code>, you now need to supply a <code>T</code> with a const <code>Trait</code> impl if you are calling that function from within a const context, and can use any <code>T: Trait</code> otherwise</p>",
        "id": 249712483,
        "sender_full_name": "oli",
        "timestamp": 1629204254
    },
    {
        "content": "<p>this behaviour is already implemented today with the implicit syntax</p>",
        "id": 249712511,
        "sender_full_name": "oli",
        "timestamp": 1629204268
    },
    {
        "content": "<blockquote>\n<p>there is no fundamental difference between \"const if in const\" bounds on const fn and on impl const Trait</p>\n</blockquote>\n<p>there is, see all the discussion we just had^^</p>",
        "id": 249712515,
        "sender_full_name": "RalfJ",
        "timestamp": 1629204271
    },
    {
        "content": "<p>no, that was about <code>const fn</code> vs <code>fn</code> in impl blocks</p>",
        "id": 249712604,
        "sender_full_name": "oli",
        "timestamp": 1629204311
    },
    {
        "content": "<p>right so just add an assoc const to the above</p>",
        "id": 249712629,
        "sender_full_name": "RalfJ",
        "timestamp": 1629204324
    },
    {
        "content": "<p>that's <code>foo</code></p>",
        "id": 249712651,
        "sender_full_name": "oli",
        "timestamp": 1629204338
    },
    {
        "content": "<p>same thing</p>",
        "id": 249712654,
        "sender_full_name": "oli",
        "timestamp": 1629204340
    },
    {
        "content": "<p>can't use it</p>",
        "id": 249712663,
        "sender_full_name": "oli",
        "timestamp": 1629204343
    },
    {
        "content": "<p>that doesnt seem to make much sense though</p>",
        "id": 249712751,
        "sender_full_name": "RalfJ",
        "timestamp": 1629204388
    },
    {
        "content": "<p>it makes as much sense as not being able to do <code>let x: T = ..</code> for <code>T: ?Sized</code></p>",
        "id": 249712803,
        "sender_full_name": "oli",
        "timestamp": 1629204419
    },
    {
        "content": "<p>you don't know the constness</p>",
        "id": 249712813,
        "sender_full_name": "oli",
        "timestamp": 1629204423
    },
    {
        "content": "<p>thus you can't rely on it</p>",
        "id": 249712824,
        "sender_full_name": "oli",
        "timestamp": 1629204428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249712803\">said</a>:</p>\n<blockquote>\n<p>it makes as much sense as not being able to do <code>let x: T = ..</code> for <code>T: ?Sized</code></p>\n</blockquote>\n<p>uh that comparison makes even less sense to me :P</p>",
        "id": 249712851,
        "sender_full_name": "RalfJ",
        "timestamp": 1629204441
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249712824\">said</a>:</p>\n<blockquote>\n<p>thus you can't rely on it</p>\n</blockquote>\n<p>Im not. it's literally in a <code>const</code> block.^^</p>",
        "id": 249712873,
        "sender_full_name": "RalfJ",
        "timestamp": 1629204454
    },
    {
        "content": "<p>yea, and that is an error</p>",
        "id": 249712894,
        "sender_full_name": "oli",
        "timestamp": 1629204463
    },
    {
        "content": "<p>I wrote \"illegal\"</p>",
        "id": 249712908,
        "sender_full_name": "oli",
        "timestamp": 1629204469
    },
    {
        "content": "<p>yea and that makes no sense, is what I said ;)</p>",
        "id": 249712929,
        "sender_full_name": "RalfJ",
        "timestamp": 1629204479
    },
    {
        "content": "<p>or rather, seems to make little sense</p>",
        "id": 249712994,
        "sender_full_name": "RalfJ",
        "timestamp": 1629204498
    },
    {
        "content": "<p>then we need an effect system afaict</p>",
        "id": 249712995,
        "sender_full_name": "oli",
        "timestamp": 1629204498
    },
    {
        "content": "<p>idk</p>",
        "id": 249713000,
        "sender_full_name": "oli",
        "timestamp": 1629204500
    },
    {
        "content": "<p>what do you feel like is the problem here?</p>",
        "id": 249713014,
        "sender_full_name": "oli",
        "timestamp": 1629204512
    },
    {
        "content": "<p>what is and isnt allowed seems extremely surprising</p>",
        "id": 249713202,
        "sender_full_name": "RalfJ",
        "timestamp": 1629204631
    },
    {
        "content": "<p><code>impl const Trait</code> sounds like basically all functions need to be <code>const fn</code>, but then the rules should be the same for <code>foo</code> and <code>bar</code></p>",
        "id": 249713258,
        "sender_full_name": "RalfJ",
        "timestamp": 1629204666
    },
    {
        "content": "<p>but this is not <code>impl const Trait</code>, this is <code>impl const? Trait</code></p>",
        "id": 249713279,
        "sender_full_name": "RalfJ",
        "timestamp": 1629204677
    },
    {
        "content": "<p>this is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">Constness</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">constif</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">constif</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">OtherTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\"></span>\n</code></pre></div>\n<p>which is not at all what I expect from the <code>impl const OtherTrait</code> syntax</p>",
        "id": 249713489,
        "sender_full_name": "RalfJ",
        "timestamp": 1629204773
    },
    {
        "content": "<p>no</p>",
        "id": 249718259,
        "sender_full_name": "oli",
        "timestamp": 1629206934
    },
    {
        "content": "<p>that's not what it is</p>",
        "id": 249718266,
        "sender_full_name": "oli",
        "timestamp": 1629206938
    },
    {
        "content": "<p><del><code>impl&lt;C: Constness, T: constif(C) Trait&gt; const OtherTrait for Type</code>. But</del> since <code>T: constif(C) Trait</code>, you cannot use it where <code>T: const Trait</code> is required, only where <code>T: constif(X) Trait</code> is required</p>",
        "id": 249718354,
        "sender_full_name": "oli",
        "timestamp": 1629206991
    },
    {
        "content": "<p>and any const item will require <code>const Trait</code></p>",
        "id": 249718366,
        "sender_full_name": "oli",
        "timestamp": 1629206999
    },
    {
        "content": "<blockquote>\n<p><code>impl&lt;C: Constness, T: constif(C) Trait&gt; const OtherTrait for Type</code></p>\n</blockquote>\n<p>I cant make sense of that -- these <code>C: Constness</code> parameters only make sense when they are used more than once</p>",
        "id": 249718617,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207103
    },
    {
        "content": "<p>oh</p>",
        "id": 249718648,
        "sender_full_name": "oli",
        "timestamp": 1629207116
    },
    {
        "content": "<p>they are all about tying together the constness of at least 2 things</p>",
        "id": 249718649,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207116
    },
    {
        "content": "<p>yea you're right</p>",
        "id": 249718655,
        "sender_full_name": "oli",
        "timestamp": 1629207119
    },
    {
        "content": "<p>sorry</p>",
        "id": 249718658,
        "sender_full_name": "oli",
        "timestamp": 1629207120
    },
    {
        "content": "<p>but that doesn't change the internal behaviour</p>",
        "id": 249718720,
        "sender_full_name": "oli",
        "timestamp": 1629207130
    },
    {
        "content": "<p>so is my interpretation above correct, that this is <code>impl&lt;C: Constness, T: constif(C) Trait&gt; constif(C) OtherTrait for Type</code>?</p>",
        "id": 249718786,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207165
    },
    {
        "content": "<p>yes</p>",
        "id": 249718799,
        "sender_full_name": "oli",
        "timestamp": 1629207171
    },
    {
        "content": "<p>right, so I was completely lead down the wrong path by the syntax then</p>",
        "id": 249718826,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207186
    },
    {
        "content": "<p>this is how the RFC specified it, too</p>",
        "id": 249718833,
        "sender_full_name": "oli",
        "timestamp": 1629207189
    },
    {
        "content": "<p>and the RFC had this written in the pseudo effect syntax similar to what you wrote</p>",
        "id": 249718867,
        "sender_full_name": "oli",
        "timestamp": 1629207203
    },
    {
        "content": "<p>otherwise we couldn't make anything generic in libstd use const</p>",
        "id": 249718922,
        "sender_full_name": "oli",
        "timestamp": 1629207228
    },
    {
        "content": "<p>as that would be a breaking change</p>",
        "id": 249718935,
        "sender_full_name": "oli",
        "timestamp": 1629207235
    },
    {
        "content": "<p>and it would create a const ecosystem in parallel to the not-const ecosystem</p>",
        "id": 249719021,
        "sender_full_name": "oli",
        "timestamp": 1629207259
    },
    {
        "content": "<p>which is exactly what we wanted to avoid</p>",
        "id": 249719045,
        "sender_full_name": "oli",
        "timestamp": 1629207266
    },
    {
        "content": "<p>yeah... but after the discussion we just had about <code>const Trait</code> bounds, I totally did not expect <code>const Trait</code> imples to also be non-const impls</p>",
        "id": 249719068,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207276
    },
    {
        "content": "<p>ah</p>",
        "id": 249719082,
        "sender_full_name": "oli",
        "timestamp": 1629207283
    },
    {
        "content": "<p>well.. everything is in flux xD</p>",
        "id": 249719091,
        "sender_full_name": "oli",
        "timestamp": 1629207290
    },
    {
        "content": "<p>the <em>concept</em> makes sense, but the syntax tripped me</p>",
        "id": 249719096,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207295
    },
    {
        "content": "<p>maybe we should do <code>impl ?const Trait</code>?</p>",
        "id": 249719100,
        "sender_full_name": "oli",
        "timestamp": 1629207298
    },
    {
        "content": "<p>adding more <code>?</code> everywhere is sure going to help avoid everyone being confused :P</p>",
        "id": 249719130,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207314
    },
    {
        "content": "<p>well</p>",
        "id": 249719135,
        "sender_full_name": "oli",
        "timestamp": 1629207319
    },
    {
        "content": "<p>come up with a better syntax XD</p>",
        "id": 249719144,
        "sender_full_name": "oli",
        "timestamp": 1629207325
    },
    {
        "content": "<p>but yeah that's why I said \"this is <code>impl const? Trait</code>\" above</p>",
        "id": 249719145,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207325
    },
    {
        "content": "<p>your placement of the question mark operator does not help things <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 249719173,
        "sender_full_name": "oli",
        "timestamp": 1629207339
    },
    {
        "content": "<p>no it makes all the difference :P</p>",
        "id": 249719185,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207349
    },
    {
        "content": "<p>oh</p>",
        "id": 249719192,
        "sender_full_name": "oli",
        "timestamp": 1629207353
    },
    {
        "content": "<p>like regex?</p>",
        "id": 249719196,
        "sender_full_name": "oli",
        "timestamp": 1629207359
    },
    {
        "content": "<p>we can have a compromise: <code>impl ?const? Trait</code></p>",
        "id": 249719210,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207362
    },
    {
        "content": "<p>rofl</p>",
        "id": 249719245,
        "sender_full_name": "oli",
        "timestamp": 1629207366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249719245\">said</a>:</p>\n<blockquote>\n<p>rofl</p>\n</blockquote>\n<p>I almost fell of my chair</p>",
        "id": 249719284,
        "sender_full_name": "oli",
        "timestamp": 1629207386
    },
    {
        "content": "<p>:-)</p>",
        "id": 249719302,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207393
    },
    {
        "content": "<p>whatever. I don't care if we introduce a <code>inferconst</code> keyword or do some other stuff</p>",
        "id": 249719369,
        "sender_full_name": "oli",
        "timestamp": 1629207419
    },
    {
        "content": "<p>but I have come over to your side of just allowing all trait bounds in const fn and make them unusable to call and add new syntax that actually makes them callable</p>",
        "id": 249719468,
        "sender_full_name": "oli",
        "timestamp": 1629207461
    },
    {
        "content": "<p>which solves all inconsistencies between const items already being allowed to use traits and fn pointers</p>",
        "id": 249719568,
        "sender_full_name": "oli",
        "timestamp": 1629207491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249719468\">said</a>:</p>\n<blockquote>\n<p>but I have come over to your side of just allowing all trait bounds in const fn and make them unusable to call and add new syntax that actually makes them callable</p>\n</blockquote>\n<p>\"them\" = the bounds, as in the const fn cannot call trait fn even though (non-const) bounds are in scope?<br>\n(alternative interpretation: them = the const fn)</p>",
        "id": 249719788,
        "sender_full_name": "RalfJ",
        "timestamp": 1629207607
    },
    {
        "content": "<p>zes, the bounds</p>",
        "id": 249720474,
        "sender_full_name": "oli",
        "timestamp": 1629207888
    },
    {
        "content": "<p>wait <code>impl const Trait</code> can be satisfied by a non-const trait impl some of the time? Did I skim that right?</p>",
        "id": 249723707,
        "sender_full_name": "Lokathor",
        "timestamp": 1629209266
    },
    {
        "content": "<p><code>impl const Trait</code> is an impl block, what does it even mean for an impl block to be \"satisifed\"? <em>bounds</em> can be satisified, but impls...?</p>",
        "id": 249724163,
        "sender_full_name": "RalfJ",
        "timestamp": 1629209427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249705605\">said</a>:</p>\n<blockquote>\n<p>which is fine if we never need such a feature, but we should at least consider if we want to throw away the obvious syntax for that forever</p>\n</blockquote>\n<p>Maybe we can introduce new syntax for that feature: <code>const!</code> which means \"must be const\". Or instead of using <code>?const</code> to signify const-if-const, we use <code>~const</code> or something else. I don't like the implicitness of the current syntax. It is fine to separate \"always const\" functions from \"const if some generic parameters have const impls for some traits\" functions.</p>",
        "id": 249725282,
        "sender_full_name": "fee1-dead",
        "timestamp": 1629209874
    },
    {
        "content": "<p><code>!</code> in Rust is either \"not\" or \"macro\"; we don't have any precedent for using it to mean \"I mean it\" or similar emphasis.</p>",
        "id": 249731539,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1629212440
    },
    {
        "content": "<p>(or never type)</p>",
        "id": 249731608,
        "sender_full_name": "simulacrum",
        "timestamp": 1629212471
    },
    {
        "content": "<p>I'd rather use <code>?const</code> and <code>const</code> to be consistent with <code>Sized</code>.</p>",
        "id": 249731645,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1629212493
    },
    {
        "content": "<p>Sorry Ralf, I was thinking in arg position for a function.</p>",
        "id": 249732203,
        "sender_full_name": "Lokathor",
        "timestamp": 1629212729
    },
    {
        "content": "<p>like impl vs dyn, not like the block</p>",
        "id": 249732330,
        "sender_full_name": "Lokathor",
        "timestamp": 1629212777
    },
    {
        "content": "<p>I like <code>~const</code>, \"somewhat const\" <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 249737517,
        "sender_full_name": "oli",
        "timestamp": 1629215067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249732203\">said</a>:</p>\n<blockquote>\n<p>Sorry Ralf, I was thinking in arg position for a function.</p>\n</blockquote>\n<p>oh I see. I havent though about <code>impl const Trait</code> types, but I'd hope they are consistent with <code>dyn const Trait</code> :D</p>",
        "id": 249742343,
        "sender_full_name": "RalfJ",
        "timestamp": 1629217114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132916\">Christian Poveda</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249731645\">said</a>:</p>\n<blockquote>\n<p>I'd rather use <code>?const</code> and <code>const</code> to be consistent with <code>Sized</code>.</p>\n</blockquote>\n<p>If those are consistent with <code>Sized</code>, there is no way to signify that \"if this type has a const impl for a trait, then this function is const, otherwise this function cannot be called in a const context\" other than leaving any modifiers out.</p>\n<p>IMO, the syntax could be: <code>T: Foo</code> <em>always</em> means a non-const bound, <code>T: ~const Foo</code> would mean \"const-if-const\" which will only be allowed for bounds on const items, and <code>T: const Foo</code> would mean <code>T</code> must implement <code>const Foo</code>, <em>always</em> (which should be in separate RFC from const_trait_impl).</p>",
        "id": 249743873,
        "sender_full_name": "fee1-dead",
        "timestamp": 1629217824
    },
    {
        "content": "<p>yeah the analogy with <code>Sized</code> doesn't really hold up</p>",
        "id": 249744094,
        "sender_full_name": "RalfJ",
        "timestamp": 1629217925
    },
    {
        "content": "<p>the point of <code>?const</code> is to <em>tie together the constness of a bound and of the impl</em></p>",
        "id": 249744131,
        "sender_full_name": "RalfJ",
        "timestamp": 1629217943
    },
    {
        "content": "<p>as is made explicit by</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">Constness</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">constif</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">constif</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">OtherTrait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Type</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249744164,
        "sender_full_name": "RalfJ",
        "timestamp": 1629217958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249744131\">said</a>:</p>\n<blockquote>\n<p>to <em>tie together the constness of a bound and of the impl</em></p>\n</blockquote>\n<p>and we can just use something like <code>~const</code>instead of <code>?const</code> to avoid the inconsistency with the meaning of <code>?Sized</code>, <em>problem solved</em></p>",
        "id": 249744861,
        "sender_full_name": "fee1-dead",
        "timestamp": 1629218268
    },
    {
        "content": "<p>except for the \"uh, more sigilis\" effect</p>",
        "id": 249745024,
        "sender_full_name": "RalfJ",
        "timestamp": 1629218344
    },
    {
        "content": "<p>there's no easy answers in syntax, ever, and you dont \"just\" do anything^^</p>",
        "id": 249745052,
        "sender_full_name": "RalfJ",
        "timestamp": 1629218355
    },
    {
        "content": "<p>It's definitely better than having a full effect system, and also better than the syntax from the current proposal IMO.</p>",
        "id": 249745320,
        "sender_full_name": "fee1-dead",
        "timestamp": 1629218505
    },
    {
        "content": "<p>we can always do something non-sigilly. <code>T: const in const Trait</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 249745728,
        "sender_full_name": "oli",
        "timestamp": 1629218684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249745728\">said</a>:</p>\n<blockquote>\n<p>we can always do something non-sigilly. <code>T: const in const Trait</code> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>\n</blockquote>\n<p>for real tho: if anyone comes up with a single word, we can likely do a thing where <code>T: your_word Trait</code> works, because that already doesn't compile today</p>",
        "id": 249745816,
        "sender_full_name": "oli",
        "timestamp": 1629218730
    },
    {
        "content": "<p>Can we all agree that the rules of </p>\n<ul>\n<li><code>T: Trait</code> is a non-const bound</li>\n<li><code>T: (insert modifier here) Trait</code> means const-if-const</li>\n<li>and <code>T: const Trait</code>is a const bound</li>\n</ul>\n<p>is good and we need to find out what goes in \"insert modifier here\" as a next step for the RFC?</p>",
        "id": 249746625,
        "sender_full_name": "fee1-dead",
        "timestamp": 1629219117
    },
    {
        "content": "<p>Maybe trying to reach consensus here isn't a great idea... I will draft a post/pre-rfc to post on internals to discuss this more.</p>",
        "id": 249748279,
        "sender_full_name": "fee1-dead",
        "timestamp": 1629219848
    },
    {
        "content": "<p>separating semantics consensus from syntax consensus is probably a good idea though :)</p>",
        "id": 249748502,
        "sender_full_name": "RalfJ",
        "timestamp": 1629219959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361356\">fee1-dead</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249746625\">said</a>:</p>\n<blockquote>\n<p>Can we all agree that the rules of </p>\n<ul>\n<li><code>T: Trait</code> is a non-const bound</li>\n<li><code>T: (insert modifier here) Trait</code> means const-if-const</li>\n<li>and <code>T: const Trait</code>is a const bound</li>\n</ul>\n</blockquote>\n<p>This is how I see it, too</p>",
        "id": 249752351,
        "sender_full_name": "oli",
        "timestamp": 1629221768
    },
    {
        "content": "<blockquote>\n<p>T: (insert modifier here) Trait means const-if-const</p>\n</blockquote>\n<p>this is well-defined in <code>impl const Trait</code> blocks via the desugaring above; for it to be meaningful elsewhere we should give similar desugarings</p>",
        "id": 249753790,
        "sender_full_name": "RalfJ",
        "timestamp": 1629222556
    },
    {
        "content": "<p>but if we say we only accept such bounds in <code>impl const Trait</code> blocks, then -- agreed :)</p>",
        "id": 249753907,
        "sender_full_name": "RalfJ",
        "timestamp": 1629222606
    },
    {
        "content": "<p>(and I mean in the top-level bounds for that block, not nested in <code>where</code> clauses inside the block)</p>",
        "id": 249753947,
        "sender_full_name": "RalfJ",
        "timestamp": 1629222627
    },
    {
        "content": "<p>I would expect the const-if-const bound on a <code>const fn</code> to work in the same way as a <code>const impl</code> described above.</p>",
        "id": 249757589,
        "sender_full_name": "fee1-dead",
        "timestamp": 1629224317
    },
    {
        "content": "<p>I think I can see that for inherent <code>const fn</code></p>",
        "id": 249758468,
        "sender_full_name": "RalfJ",
        "timestamp": 1629224722
    },
    {
        "content": "<p>but if we ever have <code>const fn</code> in a <code>trait</code> I cant entirely make sense of this any more^^</p>",
        "id": 249758498,
        "sender_full_name": "RalfJ",
        "timestamp": 1629224734
    },
    {
        "content": "<p>and free const fn</p>",
        "id": 249758504,
        "sender_full_name": "oli",
        "timestamp": 1629224736
    },
    {
        "content": "<p>yes, I meant \"non-trait\"</p>",
        "id": 249758529,
        "sender_full_name": "RalfJ",
        "timestamp": 1629224749
    },
    {
        "content": "<p>which I guess for now is all of them</p>",
        "id": 249758554,
        "sender_full_name": "RalfJ",
        "timestamp": 1629224761
    },
    {
        "content": "<p>but still, this might be worth keeping in mind</p>",
        "id": 249758606,
        "sender_full_name": "RalfJ",
        "timestamp": 1629224769
    },
    {
        "content": "<p>yea</p>",
        "id": 249758638,
        "sender_full_name": "oli",
        "timestamp": 1629224784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/249758468\">said</a>:</p>\n<blockquote>\n<p>I think I can see that for inherent <code>const fn</code></p>\n</blockquote>\n<p>to be concrete, it'd be something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"n\">C</span>: <span class=\"nc\">Constness</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">constif</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">cosntif</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249758724,
        "sender_full_name": "RalfJ",
        "timestamp": 1629224825
    },
    {
        "content": "<p>this I remember seeing spelled out in the RFC :D</p>",
        "id": 249758794,
        "sender_full_name": "RalfJ",
        "timestamp": 1629224864
    },
    {
        "content": "<p>for the <code>impl</code> I dont think I saw it before, or maybe I forgot</p>",
        "id": 249758817,
        "sender_full_name": "RalfJ",
        "timestamp": 1629224875
    },
    {
        "content": "<p>FYI: I posted a draft/pre-rfc to <a href=\"https://internals.rust-lang.org/t/pre-rfc-revamped-const-trait-impl-aka-rfc-2632/15192\">internals</a>.</p>",
        "id": 249872039,
        "sender_full_name": "fee1-dead",
        "timestamp": 1629302591
    },
    {
        "content": "<p>fwiw: we got enough leeway as wg-const-eval to change the unstable feature's syntax in the ways you propose</p>",
        "id": 249876752,
        "sender_full_name": "oli",
        "timestamp": 1629304755
    },
    {
        "content": "<p>without reiterating with T-lang</p>",
        "id": 249876773,
        "sender_full_name": "oli",
        "timestamp": 1629304766
    },
    {
        "content": "<p>It will cause breakages. do we need to follow some sort of deprecation path (for <code>?const</code>) before we completely change the syntax?</p>",
        "id": 249879882,
        "sender_full_name": "fee1-dead",
        "timestamp": 1629306078
    },
    {
        "content": "<p>nope, unstable feature, people need to adjust themselves</p>",
        "id": 249884784,
        "sender_full_name": "oli",
        "timestamp": 1629308147
    },
    {
        "content": "<p>Tilde char  '~' is very annoying to type on some variants of ISO keyboard. I would love it if Rust never used ~.</p>\n<p>Would <code>T = const X</code> work instead of <code>T: ~const X</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>looks much nicer in my opinion. This syntax would match with const default values and be more obvious to people who are used to  <code>param=\"value\";</code> pattern.</p>",
        "id": 250901080,
        "sender_full_name": "Bot+",
        "timestamp": 1630053778
    },
    {
        "content": "<p>Wouldn't that imply some kind of default parameter?</p>",
        "id": 250904610,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1630055900
    },
    {
        "content": "<p>I agree that <code>~</code> should be avoided though</p>",
        "id": 250904670,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1630055952
    },
    {
        "content": "<p>I would like to think of types as yet another primitive.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Would desugar to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250904867,
        "sender_full_name": "Bot+",
        "timestamp": 1630056085
    },
    {
        "content": "<p>I don't understand why you would want to change the bound syntax. what is the difference between <code>=</code> and <code>:</code> bounds?</p>",
        "id": 250916969,
        "sender_full_name": "oli",
        "timestamp": 1630063415
    },
    {
        "content": "<p>we want to change the constness of a trait bound, not change something about the entirety of how bounds work</p>",
        "id": 250917054,
        "sender_full_name": "oli",
        "timestamp": 1630063445
    },
    {
        "content": "<p>I'd be fine with other syntaxes, but it must fit the existing system</p>",
        "id": 250917080,
        "sender_full_name": "oli",
        "timestamp": 1630063464
    },
    {
        "content": "<p><code>?const</code> was nice in the previous system, because it was indeed an opt out</p>",
        "id": 250917137,
        "sender_full_name": "oli",
        "timestamp": 1630063497
    },
    {
        "content": "<p>just using plain <code>const</code> suggests that the generic parameter <em>must</em> have a const impl for that bound</p>",
        "id": 250917264,
        "sender_full_name": "oli",
        "timestamp": 1630063563
    },
    {
        "content": "<p>so we need some third option</p>",
        "id": 250917295,
        "sender_full_name": "oli",
        "timestamp": 1630063571
    },
    {
        "content": "<p>we could go with an obvious placeholder syntax like <code>T: const if const Trait</code> to make it clear that it's not a syntax that has had its proper bikeshed</p>",
        "id": 250917354,
        "sender_full_name": "oli",
        "timestamp": 1630063616
    },
    {
        "content": "<p>or we go with an attribute (though attributes aren't yet allowed in the middle of bounds)</p>",
        "id": 250917389,
        "sender_full_name": "oli",
        "timestamp": 1630063637
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: expected one of `!`, `(`, `,`, `=`, `&gt;`, `?`, `for`, lifetime, or path, found `#`\n --&gt; src/lib.rs:1:11\n  |\n1 | fn foo&lt;T: #[allow(foo)] Eq&gt;(){}\n  |           ^ expected one of 9 possible tokens\n</code></pre></div>",
        "id": 250917444,
        "sender_full_name": "oli",
        "timestamp": 1630063681
    },
    {
        "content": "<p>just had an idea: <code>T: Trait&lt;const, 'a, U, V&gt;</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 250917597,
        "sender_full_name": "oli",
        "timestamp": 1630063773
    },
    {
        "content": "<p>Use ':' for types, '=' for traits.</p>\n<p>Assuming</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">NewTrait</span>: <span class=\"nb\">Clone</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">MyTraitA</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">MyTraitB</span><span class=\"w\"> </span><span class=\"p\">{};</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">NewTrait</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"k\">trait</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Default</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">MyTraitA</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">MyTraitB</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We get something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Before</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// After</span>\n<span class=\"k\">enum</span> <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Plain</span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">TraitCollection</span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"k\">trait</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span>::<span class=\"n\">Plain</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Type</span>::<span class=\"n\">TraitCollection</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">input</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Compiler would need to perform type inference on what comes after <code>T=</code> to check if it is value, type or trait.</p>\n<p><code>fn test&lt;T=8u32&gt;(x: T) -&gt; T {x}  =&gt; Err(\"Expected Type or Trait(s). Did you mean to use 'const T:u32=8u32'?\")</code><br>\n<code>fn test&lt;const T: u32=MyTrait&gt;() -&gt; u32{T} =&gt; Err(\"Expected a 'u32' value, 'MyTrait' is a trait\")</code></p>",
        "id": 250919854,
        "sender_full_name": "Bot+",
        "timestamp": 1630065089
    },
    {
        "content": "<p>My main issue with tilde is accessibility.</p>\n<p>Dead Keys ('´', '`', '~', '^', '¨') are used to combine a diacritic with a letter. In my opinion they are the second hardest characters to type on Western keyboards, only behind directly typing the char code.</p>\n<p>For example it is faster to type \"a xor b\" than \"a ^ b\"</p>\n<p>So at least use #const, ?const, %const, !const, @const, ...</p>",
        "id": 250920143,
        "sender_full_name": "Bot+",
        "timestamp": 1630065258
    },
    {
        "content": "<p>uhm</p>",
        "id": 250920186,
        "sender_full_name": "oli",
        "timestamp": 1630065291
    },
    {
        "content": "<p>I'm still not sure what you are suggestinggb</p>",
        "id": 250920226,
        "sender_full_name": "oli",
        "timestamp": 1630065315
    },
    {
        "content": "<p>this is not about const generics</p>",
        "id": 250920233,
        "sender_full_name": "oli",
        "timestamp": 1630065321
    },
    {
        "content": "<p>Your proposal seems orthogonal to what we are trying to do here</p>",
        "id": 250920324,
        "sender_full_name": "oli",
        "timestamp": 1630065365
    },
    {
        "content": "<p>like a more general syntax</p>",
        "id": 250920334,
        "sender_full_name": "oli",
        "timestamp": 1630065372
    },
    {
        "content": "<p>we need a shorthand/sugar syntax, too, no matter what more general syntax we have</p>",
        "id": 250920363,
        "sender_full_name": "oli",
        "timestamp": 1630065387
    },
    {
        "content": "<p>I don't want to mix const-if-const bounds with something else that is contentious</p>",
        "id": 250920395,
        "sender_full_name": "oli",
        "timestamp": 1630065419
    },
    {
        "content": "<p>My proposal's shortest variant would be  <code>fn foo&lt;T= MyTrait&gt;()</code> for general case, and fn foo&lt;T= const MyTrait&gt;() when trait is const_trait.</p>",
        "id": 250920668,
        "sender_full_name": "Bot+",
        "timestamp": 1630065580
    },
    {
        "content": "<p>but how is <code>T= MyTrait</code> different from <code>T: MyTrait</code>?</p>",
        "id": 250925049,
        "sender_full_name": "oli",
        "timestamp": 1630068081
    },
    {
        "content": "<p>we want a <code>const</code> bound that is only const if we are in a const context</p>",
        "id": 250925070,
        "sender_full_name": "oli",
        "timestamp": 1630068098
    },
    {
        "content": "<p><code>T= dyn MyTrait</code>?</p>",
        "id": 250926370,
        "sender_full_name": "Bot+",
        "timestamp": 1630068726
    },
    {
        "content": "<p>I don't understand what that means</p>",
        "id": 250938880,
        "sender_full_name": "oli",
        "timestamp": 1630074212
    },
    {
        "content": "<p>My problem with <code>T = MyTrait</code> is that it's weird and counterintuitive to use it to restrict generic parameters. I would expect it to mean \"if <code>T</code> is not specified or can't be inferred then use type <code>MyTrait</code>\". Same for const generics, so in <code>const T: Type = Type::TraitCollection(vec![const X, dyn Y, Z]</code> I would expect <code>Type::TraitCollection(vec![const X, dyn Y, Z]</code>to be the defaul value of that const generic.</p>",
        "id": 250980215,
        "sender_full_name": "Giacomo Stevanato",
        "timestamp": 1630091285
    },
    {
        "content": "<p>I am still confused, what does any of this have to do with const bounds? It looks like there are still const bounds (<code>const X</code>) in your example, and I don't see how they behave as \"const if in const\" and not just as \"must be const\"</p>",
        "id": 250981677,
        "sender_full_name": "oli",
        "timestamp": 1630091909
    },
    {
        "content": "<p>I suggested using <code>const&lt;&gt;</code> or <code>const()</code> instead of <code>~const</code>: <a href=\"https://internals.rust-lang.org/t/pre-rfc-revamped-const-trait-impl-aka-rfc-2632/15192/16?u=programmerjake\">https://internals.rust-lang.org/t/pre-rfc-revamped-const-trait-impl-aka-rfc-2632/15192/16?u=programmerjake</a></p>",
        "id": 251010521,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1630107770
    },
    {
        "content": "<p>so... empty bounds mean \"infer from context\"?</p>",
        "id": 251061696,
        "sender_full_name": "oli",
        "timestamp": 1630162948
    },
    {
        "content": "<p>\"const in const\" seems like the good default, and then the only other situation you'd really need is to have is \"always const even if I'm not\".</p>",
        "id": 251061849,
        "sender_full_name": "Lokathor",
        "timestamp": 1630163134
    },
    {
        "content": "<p>but I'm not sure if that suggests syntax</p>",
        "id": 251061929,
        "sender_full_name": "Lokathor",
        "timestamp": 1630163205
    },
    {
        "content": "<p>How do folks pronounce <code>~const</code> when reading it? Is it: \"maybe const\"?</p>",
        "id": 252756211,
        "sender_full_name": "Yoshua Wuyts [he/they]",
        "timestamp": 1631265503
    },
    {
        "content": "<p>\"cifc\"? XD</p>",
        "id": 252766788,
        "sender_full_name": "oli",
        "timestamp": 1631270910
    },
    {
        "content": "<p>I think we can just pronounce it as \"const\" without any modifier, as \"it becomes clear from context\" what kind of constness is meant</p>",
        "id": 252767093,
        "sender_full_name": "oli",
        "timestamp": 1631271005
    },
    {
        "content": "<p>it's like a pronoun, only makes sense if you said the name before</p>",
        "id": 252767115,
        "sender_full_name": "oli",
        "timestamp": 1631271020
    },
    {
        "content": "<p>Just put some inflection at the end: const <em>?</em> <em>?</em> <em>?</em> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 252786466,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1631280478
    },
    {
        "content": "<p>FWIW I would say “Tilde const”.</p>",
        "id": 252829279,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1631298564
    },
    {
        "content": "<p><del>box const</del></p>",
        "id": 252846874,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631306221
    },
    {
        "content": "<p>When was the <code>~const</code> syntax first proposed? I remember lots of conversations about the concept of \"const if thing is const\", and similar mechanisms for traits for that matter. But I don't remember seeing the concrete syntax proposal.</p>",
        "id": 252854075,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631309734
    },
    {
        "content": "<p>I remember being surprised the first time I saw <code>~const</code>.</p>",
        "id": 252854250,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631309835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const_trait_impl's.20syntax/near/252854075\">said</a>:</p>\n<blockquote>\n<p>When was the <code>~const</code> syntax first proposed? I remember lots of conversations about the concept of \"const if thing is const\", and similar mechanisms for traits for that matter. But I don't remember seeing the concrete syntax proposal.</p>\n</blockquote>\n<p>It's proposed in this thread <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> If you scroll up you'll see the proposal and the pre-RFC link.</p>",
        "id": 252881916,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631335460
    },
    {
        "content": "<p>It's just a placeholder (and proposed) syntax as <code>?const</code> definitely sent the wrong message and we wanted to get this merged.</p>",
        "id": 252903474,
        "sender_full_name": "oli",
        "timestamp": 1631360398
    },
    {
        "content": "<p>this will need lang team sign off before anything remotely going towards stabilization happens here</p>",
        "id": 252903530,
        "sender_full_name": "oli",
        "timestamp": 1631360422
    },
    {
        "content": "<p>we would have gone with an attribute, but can't have attributes on trait bounds XD</p>",
        "id": 252903538,
        "sender_full_name": "oli",
        "timestamp": 1631360445
    }
]