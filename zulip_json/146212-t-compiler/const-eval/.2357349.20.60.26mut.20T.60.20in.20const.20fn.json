[
    {
        "content": "<p>(There didn't seem to be a zulip topic for this one so I figured we could open one. Mods please merge this if I missed it.)</p>\n<ul>\n<li>Tracker Issue: <a href=\"https://github.com/rust-lang/rust/issues/57349\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57349\">https://github.com/rust-lang/rust/issues/57349</a>, though the tracker doesn't currently seem to have much info on progress, blockers, etc.</li>\n</ul>\n<p>It seems like a very obvious thing to have, and there's not much design to be done for this particular thing. The language allows mutable references in const or not, there's no syntax questions or anything like that. I think that the hold up, if any, would be in the const evaluator.</p>\n<p>Has the past year of general const evaluation improvement made this something that could be pushed towards stable any time sooner than \"no ETA\"?</p>",
        "id": 186855298,
        "sender_full_name": "Lokathor",
        "timestamp": 1580271812
    },
    {
        "content": "<p>I was planning on retaking this in a few weeks but I have no idea when this will be suitable for stabilization.</p>",
        "id": 186856879,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1580274615
    },
    {
        "content": "<p>I think there are still a few issues (e.g. <code>const FOO: &amp;mut T</code>, let me grab the topic.</p>",
        "id": 186879061,
        "sender_full_name": "oli",
        "timestamp": 1580299360
    },
    {
        "content": "<p><a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/unsoundness.20in.20constant.20mutable.20borrows/near/183594829\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/unsoundness.20in.20constant.20mutable.20borrows/near/183594829\">https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/unsoundness.20in.20constant.20mutable.20borrows/near/183594829</a></p>",
        "id": 186879193,
        "sender_full_name": "oli",
        "timestamp": 1580299484
    },
    {
        "content": "<p>Maybe we should split the feature gate into <code>&amp;mut</code> in args/variable types and <code>&amp;mut</code> in <code>const</code> types and return types</p>",
        "id": 186879241,
        "sender_full_name": "oli",
        "timestamp": 1580299550
    },
    {
        "content": "<p>If we were to ban the creation of a mutable reference to a local at the \"top-level\", inside a const or static initializer, I think we can allow everything it inside <code>const fn</code>. Inside a <code>const fn</code>, the borrow checker does the \"escape analysis\" to ensure a mutable reference does not escape to the containing scope. However, at the top-level, everything is <code>'static</code> so <code>&amp;mut</code> can escape from the initializer into the final value of a const.</p>",
        "id": 186966520,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1580376312
    },
    {
        "content": "<p>As long as we are willing to settle for post monomorphization errors for programs with UB, we can also allow <code>*mut</code> in the return type of a <code>const fn</code>.</p>",
        "id": 186966706,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1580376487
    },
    {
        "content": "<p>I think I'll need a bit of mentoring for this</p>",
        "id": 187095777,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1580486354
    },
    {
        "content": "<p>hmm... not 100% sure, but isn't this essentially equivalent to the existing interior mutability checks?</p>",
        "id": 187102840,
        "sender_full_name": "oli",
        "timestamp": 1580490741
    },
    {
        "content": "<p>ah no, <code>&amp;&amp;mut T</code> is technically ok</p>",
        "id": 187102858,
        "sender_full_name": "oli",
        "timestamp": 1580490760
    },
    {
        "content": "<p>I'd be fine with being overconservative for now and forbidding <code>&amp;&amp;mut T</code> right now</p>",
        "id": 187102876,
        "sender_full_name": "oli",
        "timestamp": 1580490773
    },
    {
        "content": "<p>So we could just extend <a href=\"https://github.com/rust-lang/rust/blob/ecde10fc283530db0db42e2c3e2e3132e809b139/src/librustc_mir/transform/check_consts/qualifs.rs#L196\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ecde10fc283530db0db42e2c3e2e3132e809b139/src/librustc_mir/transform/check_consts/qualifs.rs#L196\">https://github.com/rust-lang/rust/blob/ecde10fc283530db0db42e2c3e2e3132e809b139/src/librustc_mir/transform/check_consts/qualifs.rs#L196</a> to also cover mutable references</p>",
        "id": 187102957,
        "sender_full_name": "oli",
        "timestamp": 1580490830
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 234170458,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1618238380
    }
]