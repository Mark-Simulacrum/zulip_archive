[
    {
        "content": "<p>There's been some discussion lately about what the best syntax would be for declaring \"this trait method isn't const, but its default impl is const\".</p>\n<p>One syntax that could generalize pretty well could be this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// FORWARD DECLARATION</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foobar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// IMPLEMENTATION</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foobar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278287853,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649415793
    },
    {
        "content": "<p>I say \"could generalize pretty well\" because the general rule could be \"default method implementation is stricter than method declaration\". For instance, with RPIT-in-traits:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// FORWARD DECLARATION</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foobar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// IMPLEMENTATION</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foobar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278288214,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649416023
    },
    {
        "content": "<p>Heh. This is basically what specialization will allow you to do</p>",
        "id": 278289192,
        "sender_full_name": "oli",
        "timestamp": 1649416590
    },
    {
        "content": "<p>Separate declaration of default methods by creating (partial) impls for all types</p>",
        "id": 278289245,
        "sender_full_name": "oli",
        "timestamp": 1649416622
    },
    {
        "content": "<p>You can then reduce it from \"all types\" to an arbitrary subset like with any other impl block</p>",
        "id": 278289282,
        "sender_full_name": "oli",
        "timestamp": 1649416655
    },
    {
        "content": "<p>Yeah, I guess</p>",
        "id": 278289825,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649416973
    },
    {
        "content": "<p>I think there was a proposal to add <code>impl Trait { }</code> blocks and have them been syntactic sugar for specialization</p>",
        "id": 278289864,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649417007
    },
    {
        "content": "<p>This could be the same</p>",
        "id": 278289870,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649417013
    },
    {
        "content": "<p>Yes</p>",
        "id": 278290047,
        "sender_full_name": "oli",
        "timestamp": 1649417101
    },
    {
        "content": "<p>For now const traits will have to have all default impls be const, too</p>",
        "id": 278290130,
        "sender_full_name": "oli",
        "timestamp": 1649417152
    },
    {
        "content": "<p>FWIW, I'd love to have more options for conditional default impls that aren't full specialization.  Things like \"you get this default method body only if you overrode that method\" would be super handy in a bunch of core traits, for example <a href=\"#narrow/stream/219381-t-libs/topic/Read.20.2B.20uninit.20memory/near/205667902\">https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Read.20.2B.20uninit.20memory/near/205667902</a></p>",
        "id": 278326531,
        "sender_full_name": "scottmcm",
        "timestamp": 1649434277
    },
    {
        "content": "<p>Yeah, I think it came up with the ReadBuf RFC, which adds a new <code>read_buf()</code> method to the Read trait. Ideally you'd want to define <code>Read::read()</code> to use read_buf by default, but doing so would let people implement traits with no method (so both read and read_buf would have their default implementation and call each other).</p>",
        "id": 278532037,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649671657
    },
    {
        "content": "<p>... oh, wait, that's the discussion you were linking to. That makes sense ^^</p>",
        "id": 278532145,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1649671715
    }
]