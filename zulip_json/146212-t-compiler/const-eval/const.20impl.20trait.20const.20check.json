[
    {
        "content": "<p>we allow non const param candidates as const if there are no non-const trait impls for that trait</p>",
        "id": 249962951,
        "sender_full_name": "lcnr",
        "timestamp": 1629366114
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/4968a8bbd19cea8713aabff9b1575ec60e208670/compiler/rustc_mir/src/transform/check_consts/check.rs#L889-L902\">https://github.com/rust-lang/rust/blob/4968a8bbd19cea8713aabff9b1575ec60e208670/compiler/rustc_mir/src/transform/check_consts/check.rs#L889-L902</a></p>",
        "id": 249963007,
        "sender_full_name": "lcnr",
        "timestamp": 1629366129
    },
    {
        "content": "<p>this seems wrong to me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// crate-a</span>\n<span class=\"cp\">#![feature(const_fn_trait_bound)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_trait_impl)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_trait_bound_opt_out)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">assoc</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">T</span>::<span class=\"n\">assoc</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// crate-b</span>\n<span class=\"cp\">#![feature(const_fn_trait_bound)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_trait_impl)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(const_trait_bound_opt_out)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">a</span>::<span class=\"n\">A</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">assoc</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"hey ho\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kc\">true</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">a</span>::<span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249963044,
        "sender_full_name": "lcnr",
        "timestamp": 1629366166
    },
    {
        "content": "<p>results in </p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0080]: could not evaluate static initializer\n  --&gt; /home/lcnr/wtf/a/src/lib.rs:11:5\n   |\n11 |     T::assoc()\n   |     ^^^^^^^^^^\n   |     |\n   |     calling non-const function `&lt;Foo as A&gt;::assoc`\n   |     inside `foo::&lt;Foo&gt;` at /home/lcnr/wtf/a/src/lib.rs:11:5\n   |\n  ::: src/main.rs:15:19\n   |\n15 | static F: bool =  a::foo::&lt;Foo&gt;();\n   |                   --------------- inside `F` at src/main.rs:15:19\n</code></pre></div>",
        "id": 249963061,
        "sender_full_name": "lcnr",
        "timestamp": 1629366184
    },
    {
        "content": "<p>i.e. const eval throws ub</p>",
        "id": 249963073,
        "sender_full_name": "lcnr",
        "timestamp": 1629366195
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"361356\">@fee1-dead</span> I guess at this point we should move to re-using the regular trait system logic to prove bounds on the param env by making sure <code>?const</code> bounds show up as <code>NotConst</code> in the param env, while having a substitution system that replaces all <code>?const</code> bounds with <code>NotConst</code> or <code>Const</code> depending on the constness of the caller. That way we don't have to duplicate such checking and can just trust the trait system to figure it out</p>",
        "id": 249965485,
        "sender_full_name": "oli",
        "timestamp": 1629367902
    }
]