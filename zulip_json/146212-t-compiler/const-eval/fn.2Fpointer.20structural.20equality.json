[
    {
        "content": "<p>I was looking at <a href=\"https://github.com/rust-lang/rust/issues/84238\">#84238</a> about [fn(); N] being allowed as a const param type and it seems like <code>StructuralEq</code> gets derived for structs containing fn/pointers too. Do you know if this is correct <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ?<br>\n<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=80bc6e1ca25e1f45d76e8012be846d32\">playground</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics, structural_match)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">marker</span>::<span class=\"n\">StructuralEq</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[derive(Eq, PartialEq)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"k\">fn</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">StructuralEq</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// &lt;- ?? no compile error</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">B</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">F</span>: <span class=\"nc\">Foo</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 235061162,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618740774
    },
    {
        "content": "<p>I think this is not correct</p>",
        "id": 235061693,
        "sender_full_name": "RalfJ",
        "timestamp": 1618741336
    },
    {
        "content": "<p>but <code>StructuralEq</code> is a poorly defined mess currently^^</p>",
        "id": 235061697,
        "sender_full_name": "RalfJ",
        "timestamp": 1618741345
    },
    {
        "content": "<p>I think it's what's causing that const generics issue</p>",
        "id": 235061702,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618741350
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/rust/issues/74446\">https://github.com/rust-lang/rust/issues/74446</a></p>",
        "id": 235061712,
        "sender_full_name": "RalfJ",
        "timestamp": 1618741362
    },
    {
        "content": "<p>ahhh yes I remember seeing this issue lol</p>",
        "id": 235061715,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618741377
    },
    {
        "content": "<p>yeah that seems likely</p>",
        "id": 235061718,
        "sender_full_name": "RalfJ",
        "timestamp": 1618741381
    },
    {
        "content": "<p>well there's 2 issues:</p>\n<ul>\n<li>we should really ICE or error when using fn ptrs in const generics (concretely: when constructing a valtree for something involving fn ptrs), but currently these sanity checks are missing (because we are not constructing these valtrees yet)</li>\n<li>we incorrectly classify fn ptrs as having structural eq -- at least I think it's incorrect, but since structural eq is not properly defined this is hard to tell</li>\n</ul>",
        "id": 235061743,
        "sender_full_name": "RalfJ",
        "timestamp": 1618741435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> has some WIP patch for valtrees: <a href=\"https://github.com/rust-lang/rust/pull/83234\">https://github.com/rust-lang/rust/pull/83234</a>. I <em>think</em> that would turn the fn ptrs array into an ICE or error, which is better than the current behavior.</p>",
        "id": 235061829,
        "sender_full_name": "RalfJ",
        "timestamp": 1618741512
    },
    {
        "content": "<p>specifically, <a href=\"https://github.com/rust-lang/rust/pull/83234/files#diff-5809d5770c4c639b699be36651c1e8942ce7aa946dac2657f4fe08895e605b09R100\">here</a> we refuse to create a valtree for values involving fn ptrs -- not sure what that <code>None</code> turns into later when a valtree is required due to a const being used as a generic</p>",
        "id": 235061953,
        "sender_full_name": "RalfJ",
        "timestamp": 1618741633
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/fn.2Fpointer.20structural.20equality/near/235061743\">said</a>:</p>\n<blockquote>\n<p>well there's 2 issues:</p>\n<ul>\n<li>we should really ICE or error when using fn ptrs in const generics (concretely: when constructing a valtree for something involving fn ptrs), but currently these sanity checks are missing (because we are not constructing these valtrees yet)</li>\n<li>we incorrectly classify fn ptrs as having structural eq -- at least I think it's incorrect, but since structural eq is not properly defined this is hard to tell</li>\n</ul>\n</blockquote>\n<p>This makes sense to me <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> we could really do with defining structural eq better, const generics seems to care about it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 235071283,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1618751584
    },
    {
        "content": "<p>Yea, valtree construction returning None means not structurally eq</p>",
        "id": 235071791,
        "sender_full_name": "oli",
        "timestamp": 1618752133
    }
]