[
    {
        "content": "<p>Most <code>const fn</code> in the <code>std</code>/<code>alloc</code>/<code>core</code>  I've seen so far have either <code>#[rustc_const_unstable]</code> or <code>#[rustc_const_stable]</code>, but <code>UnsafeCell::raw_get</code> has neither: <a href=\"https://github.com/rust-lang/rust/blob/68a698baf6bfc61d85ce6e25122a092c60c7f21a/library/core/src/cell.rs#L1963-L1964\">source</a>. Is this fine or an error?</p>",
        "id": 258683302,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1634893563
    },
    {
        "content": "<p>If it's omitted that just means it's been const as long as it's been stable.</p>",
        "id": 258692394,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634898606
    },
    {
        "content": "<p>We should probably start requiring either attribute for stable const fn, so that we don't accidentally stabilize the constness somewhere</p>",
        "id": 258713286,
        "sender_full_name": "oli",
        "timestamp": 1634910196
    },
    {
        "content": "<p>I can try to implement this if you say where I should add this check <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 258766624,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1634933085
    },
    {
        "content": "<p>Once I get around to implementing the const-stable on unstable function lint, it would be trivial to add a check like this in I would think.</p>",
        "id": 258795557,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1634952373
    },
    {
        "content": "<p>Cool! Can you tag me (<code>@wafflelapkin</code> on github), once you make the PR? Just want to know the progress :)</p>",
        "id": 258818139,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1634987926
    },
    {
        "content": "<p>I will if I remember. Which honestly is probably less likely than not.</p>",
        "id": 258842095,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1635022367
    },
    {
        "content": "<p>Coming back around to this. This <em>should</em> already be caught on stable methods. The relevant code is <a href=\"https://github.com/rust-lang/rust/blob/d914f17ca71a33a89b2dc3436fca51b1a091559e/compiler/rustc_passes/src/stability.rs#L579-L592\">here</a> with it being called in a pass <a href=\"https://github.com/rust-lang/rust/blob/d914f17ca71a33a89b2dc3436fca51b1a091559e/compiler/rustc_passes/src/stability.rs#L617-L623\">here</a>. Interestingly, this is only <em>supposed</em> to apply to stable methods, which is surprising to me.</p>",
        "id": 261745812,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637127556
    },
    {
        "content": "<p>And yes, <a href=\"https://github.com/rust-lang/rust/blob/d914f17ca71a33a89b2dc3436fca51b1a091559e/src/test/ui/stability-attribute/missing-const-stability.rs\">there is a test</a> that's supposed to ensure this. No idea where the pass is going wrong.</p>",
        "id": 261745887,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637127664
    },
    {
        "content": "<p>After updating that code to be more extensive, I'm back to tests. I'm 99% sure it's because it's an <code>impl</code> block. I'll figure it out when I get more time.</p>",
        "id": 261760158,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637141264
    },
    {
        "content": "<p>Figured it out — the method just wasn't being called in one specific location. You would not believe how many errors this is emitting... 208 in <code>core</code> alone.</p>",
        "id": 261762849,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637142973
    },
    {
        "content": "<p>Also! Before I forget. This change necessarily includes <a href=\"https://github.com/rust-lang/rust/issues/90687\">#90687</a>. I'd prefer that be merged separately as it includes its own test, but it should be done before this code is completed. If someone is willing to review, that would be great.</p>",
        "id": 261763151,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637143134
    },
    {
        "content": "<p>In one specific code path, the check was forgotten to be called and it currently misses 208 methods? whoah</p>",
        "id": 261791358,
        "sender_full_name": "Waffle Lapkin",
        "timestamp": 1637159385
    },
    {
        "content": "<p>Admittedly I expanded the check to include unstable methods as well, but yes. Just in core.</p>",
        "id": 261820884,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637171197
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Is.20this.20ok.20for.20a.20const.20fn.20to.20not.20have.20.60.23.5Brustc_const_*.5D.60.3F/near/261762849\">said</a>:</p>\n<blockquote>\n<p>Figured it out — the method just wasn't being called in one specific location. You would not believe how many errors this is emitting... 208 in <code>core</code> alone.</p>\n</blockquote>\n<p>oh wow. also makes me wonder how we can avoid such mistakes in the future...</p>",
        "id": 261821096,
        "sender_full_name": "RalfJ",
        "timestamp": 1637171282
    },
    {
        "content": "<p>Well...I have previously worked on the assumption that the attributes weren't necessary if it was the same as the regular stability. To the point I'd actually remove it if they were being stabilized at the same time. I presume others have done the same.</p>",
        "id": 261821257,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637171349
    },
    {
        "content": "<p>But this change will ensure no one does that again.</p>",
        "id": 261821273,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637171360
    },
    {
        "content": "<p>For sanity purposes I'm going to initially limit the change to only stable methods (essentially just fixing the existing bug). Turns out it's far more reasonable (\"only\" 14 errors in core)</p>",
        "id": 261876438,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637199987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273349\">@Waffle Lapkin</span> PR for reference: <a href=\"https://github.com/rust-lang/rust/issues/90998\">#90998</a></p>",
        "id": 261878751,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637202407
    }
]