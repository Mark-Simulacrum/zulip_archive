[
    {
        "content": "<p><code>#![feature(const_panic)]</code> was stabilized in <a href=\"https://github.com/rust-lang/rust/issues/89508\">#89508</a>. However, <code>core::panicking::panic</code> is not <code>const</code>, causing anything like <code>assert!</code> fails (like in <a href=\"https://github.com/rust-lang/rust/issues/89542\">#89542</a>). I recall a hack being used to determine if evaluation was at compile time or runtime. Given that <code>panic_fmt</code> is <em>not</em> being stabilized, there's no need to stabilize <code>Arguments::new_v1</code> as <code>const</code>. That said, something still has to be done — I believe along the lines of the aforementioned hack. There is <code>const_panic_fmt</code>, which <a href=\"https://github.com/rust-lang/rust/blob/223f58085aacb586c06c7dbfaa60b85c1b1f1da4/compiler/rustc_const_eval/src/const_eval/machine.rs#L66\">appears to be</a> called any time <code>panic_fmt</code> is called during const eval. If that's the case, should I slap <code>#[rustc_do_not_const_check]</code> on <code>core::panicking::panic</code> in the same manner as  <code>core::panicking::panic_fmt</code>? If not, what should be done?</p>",
        "id": 260556198,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636264215
    },
    {
        "content": "<p>This will need to be backported given that <code>const_panic</code> is already in beta.</p>",
        "id": 260556204,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636264228
    },
    {
        "content": "<p>Putting <code>#[rustc_do_not_const_check]</code> does resolve the error as expected, but I'm not sure if it's correct.</p>",
        "id": 260556380,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636264581
    },
    {
        "content": "<p>Interestingly, it looks like this only affects rustc &amp; stdlib. User code (code without stability attributes) has no issue handling this.</p>",
        "id": 260556734,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636265145
    },
    {
        "content": "<p>I would check with Mara - we've not yet migrated std/core to 2021 which means they're using older macros for panicking, maybe we missed a stabilization somewhere?</p>",
        "id": 260568742,
        "sender_full_name": "simulacrum",
        "timestamp": 1636284611
    },
    {
        "content": "<p>It seems suspicious that we only hit this now, since I'm pretty sure there's asserts in at least some compiler and std const code, though maybe I'm misremembering</p>",
        "id": 260568847,
        "sender_full_name": "simulacrum",
        "timestamp": 1636284779
    },
    {
        "content": "<p>If this only affects std, it probably doesn't <em>require</em> a backport, right?</p>",
        "id": 260569077,
        "sender_full_name": "simulacrum",
        "timestamp": 1636285177
    },
    {
        "content": "<p>Hm so it looks like it's hitting the wrong branch in panic_2015 which isn't yet intended to be stable</p>",
        "id": 260569710,
        "sender_full_name": "simulacrum",
        "timestamp": 1636286133
    },
    {
        "content": "<p>I have changed <code>core::panicking::panic</code> to const in <a href=\"https://github.com/rust-lang/rust/issues/90273\">#90273</a></p>",
        "id": 260570009,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636286510
    },
    {
        "content": "<p>I'm the one who stabilized const panic initially — I <strong>definitely</strong> missed something here as assertions were supposed to be permitted. I couldn't figure out why <a href=\"https://github.com/rust-lang/rust/issues/89542\">#89542</a> was failing at first, but it turns out that's why.</p>\n<p><span class=\"user-mention\" data-user-id=\"303710\">@Gary Guo</span> I was able to reproduce this on master as of last night, so that apparently wasn't sufficient.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"310399\">@Mara</span></p>",
        "id": 260583856,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636303638
    },
    {
        "content": "<p>I do think this should be backported even if it only affects std. Other internal things have been in the past to my knowledge. It seems odd that we would knowingly let a bug hit stable.</p>",
        "id": 260583919,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636303723
    },
    {
        "content": "<p>Also, iirc from last night this occurred regardless of edition in use</p>",
        "id": 260584123,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636303961
    },
    {
        "content": "<p>I think it's just std thing that require const unstable to be used by const unstable only.</p>",
        "id": 260585663,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636305726
    },
    {
        "content": "<p>Maybe we need to slap const stable attributes to some of these panic functions?</p>",
        "id": 260585744,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636305836
    },
    {
        "content": "<p><code>Arguments::new_v1</code> can be made const and is internal, so that's a non-issue to do. <code>fn panic</code> is not and calls <code>panic_fmt</code>, hence my hesitancy. I <em>think</em> const eval will hook into the latter's call from <code>panic</code> due to the changes you made, but I wasn't confident enough to mark that \"do not check\" as well.</p>",
        "id": 260587789,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636308233
    },
    {
        "content": "<p>I had a look at the const checking code and I don't think <code>rustc_do_not_const_check</code> have any implication  on const stability.</p>",
        "id": 260609546,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636338901
    },
    {
        "content": "<p>It's just <code>begin_panic_fn</code> and <code>panic_display</code> are hooked and cause early return so the const stability checking is skipped.</p>",
        "id": 260609571,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636338948
    },
    {
        "content": "<p>Apply this patch and it should build fine:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/library/core/src/lib.rs b/library/core/src/lib.rs</span>\n<span class=\"gh\">index 5f44087cabb..4b279377b30 100644</span>\n<span class=\"gd\">--- a/library/core/src/lib.rs</span>\n<span class=\"gi\">+++ b/library/core/src/lib.rs</span>\n<span class=\"gu\">@@ -158,6 +158,7 @@</span>\n #![feature(const_precise_live_drops)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_refs_to_cell)]\n<span class=\"gi\">+#![feature(core_panic)]</span>\n #![feature(decl_macro)]\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n<span class=\"gh\">diff --git a/library/core/src/panicking.rs b/library/core/src/panicking.rs</span>\n<span class=\"gh\">index 29124c87e1b..682a85ef828 100644</span>\n<span class=\"gd\">--- a/library/core/src/panicking.rs</span>\n<span class=\"gi\">+++ b/library/core/src/panicking.rs</span>\n<span class=\"gu\">@@ -36,6 +36,7 @@</span>\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]\n<span class=\"gi\">+#[rustc_const_unstable(feature = \"core_panic\", issue = \"none\")]</span>\n #[lang = \"panic\"] // needed by codegen for panic on overflow and other `Assert` MIR terminators\n pub const fn panic(expr: &amp;'static str) -&gt; ! {\n     // Use Arguments::new_v1 instead of format_args!(\"{}\", expr) to potentially\n<span class=\"gu\">@@ -50,6 +51,7 @@ pub const fn panic(expr: &amp;'static str) -&gt; ! {</span>\n #[inline]\n #[track_caller]\n #[lang = \"panic_str\"] // needed for `non-fmt-panics` lint\n<span class=\"gi\">+#[rustc_const_unstable(feature = \"core_panic\", issue = \"none\")]</span>\n pub const fn panic_str(expr: &amp;str) -&gt; ! {\n     panic_display(&amp;expr);\n }\n</code></pre></div>",
        "id": 260610322,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636339966
    },
    {
        "content": "<p>Alright. I'll give that a shot tonight and send a PR if it works. Thanks for investigating.</p>",
        "id": 260610796,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636340639
    },
    {
        "content": "<p>Was there a specific case you found the attribute on <code>panic_str</code> was necessary? I tested a patch with only the addition of the feature gate and unstable attribute on <code>panic</code> and all UI tests pass (including a new one testing this specific behavior)</p>",
        "id": 260616776,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636349397
    },
    {
        "content": "<p>Created <a href=\"https://github.com/rust-lang/rust/issues/90687\">#90687</a> to fix this.</p>",
        "id": 260618907,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636352443
    },
    {
        "content": "<p><code>panic!({\"str\"})</code></p>",
        "id": 260669567,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636384230
    },
    {
        "content": "<p>We don't do that in std, so it shouldn't really matter; I add it for symmetry only.</p>",
        "id": 260669682,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636384284
    },
    {
        "content": "<p>Meh, I'll add it in later today just in case. That said, why don't you think this should be backported?</p>",
        "id": 260695622,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636394668
    },
    {
        "content": "<p>Why should it be?</p>",
        "id": 260715656,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636403976
    },
    {
        "content": "<p>You don't need to backport to use it.</p>",
        "id": 260715668,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636403984
    },
    {
        "content": "<p>Maybe I should've checked that haha. It makes sense. If so I'll remove the backport request from the PR message.</p>",
        "id": 260716600,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636404461
    },
    {
        "content": "<p>Turns out that unstable attribute isn't necessary, even for stdlib. Ironically adding it <em>introduces</em> an error. Either way I've added it as an explicit test</p>",
        "id": 260725883,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1636409255
    },
    {
        "content": "<p>Oh you are right, it isn't currently needed.</p>",
        "id": 260741350,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636419509
    },
    {
        "content": "<p>I only need it locally because I am basing on my PR which removes special treatment of panic_str.</p>",
        "id": 260741365,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636419536
    }
]