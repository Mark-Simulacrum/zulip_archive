[
    {
        "content": "<p>We sometimes eval a query twice, because the param env contains a constness flag, even though that is irrelevant for the specific query. We do have ParamEnvAnd for a similar situation with bounds. I think we could make ParamEnvAnd throw away the constness if the value contains no const Trait bounds. I think this can be checked cheaply with TypeFlags by adding the appropriate logic to the TraitPredicate visitor. We'll have to re-const the ParamEnvAnd of the CTFE queries, as they'll lose their constness that way</p>",
        "id": 263477812,
        "sender_full_name": "oli",
        "timestamp": 1638468473
    },
    {
        "content": "<p>or can we add another query modifier which when applied to a query it unconditionally changes the ParamEnv's constness before interacting with the cache?</p>",
        "id": 263778893,
        "sender_full_name": "fee1-dead",
        "timestamp": 1638724914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361356\">fee1-dead</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/ParamEnv.20and.20constness/near/263778893\">said</a>:</p>\n<blockquote>\n<p>or can we add another query modifier which when applied to a query it unconditionally changes the ParamEnv's constness before interacting with the cache?</p>\n</blockquote>\n<p>This approach seems more complicated. I am working with TypeFlags right now.</p>",
        "id": 263779593,
        "sender_full_name": "fee1-dead",
        "timestamp": 1638725768
    }
]