[
    {
        "content": "<p>So, lately I've been running into some problems because of the different integer types used in several shims inside miri. The most prominent one has been <a href=\"https://github.com/rust-lang/miri/pull/975\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/975\"><code>clock_gettime</code></a> because the sizes of <code>long</code> and <code>time_t</code> change with the processor architecture and miri crashes when running the tests in CI for 32 bits linux.</p>\n<p>Is it there any way to know which is the target platform when interpreting a program?</p>",
        "id": 177560609,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570482229
    },
    {
        "content": "<p>you can ask for the type from libc I think</p>",
        "id": 177595078,
        "sender_full_name": "oli",
        "timestamp": 1570525127
    },
    {
        "content": "<p>basically like we resolve constants</p>",
        "id": 177595088,
        "sender_full_name": "oli",
        "timestamp": 1570525138
    },
    {
        "content": "<p>whaAaaAaAaat?</p>",
        "id": 177612510,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570540792
    },
    {
        "content": "<p>what do you mean by asking for the type?</p>",
        "id": 177612573,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570540812
    },
    {
        "content": "<p>are you telling me that if I do <code>ecx.resolve_path(&amp;[\"libc\", \"long\"])?.ty(tcx)</code> that would give me the actual <code>ty::Ty</code>?</p>",
        "id": 177618702,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570543969
    },
    {
        "content": "<p>oh sorry, I got lost in my tabs and forgot about this one</p>",
        "id": 177619107,
        "sender_full_name": "oli",
        "timestamp": 1570544179
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-clippy/blob/df80193bda8ae3a5e720612fe24fa313af098812/clippy_lints/src/utils/mod.rs#L240\" target=\"_blank\" title=\"https://github.com/rust-lang/rust-clippy/blob/df80193bda8ae3a5e720612fe24fa313af098812/clippy_lints/src/utils/mod.rs#L240\">https://github.com/rust-lang/rust-clippy/blob/df80193bda8ae3a5e720612fe24fa313af098812/clippy_lints/src/utils/mod.rs#L240</a></p>",
        "id": 177619109,
        "sender_full_name": "oli",
        "timestamp": 1570544180
    },
    {
        "content": "<p>is what we use in clippy</p>",
        "id": 177619120,
        "sender_full_name": "oli",
        "timestamp": 1570544185
    },
    {
        "content": "<p>Ohhh ok, I'll check it out</p>",
        "id": 177620439,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570544798
    },
    {
        "content": "<p>What happens with <code>Scalar::from_int(t, Size::from_bits(n))</code> when the size of the type of <code>t</code> is larger/smaller than <code>n</code>?</p>",
        "id": 177620570,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570544867
    },
    {
        "content": "<p>idk ^^</p>",
        "id": 177621562,
        "sender_full_name": "oli",
        "timestamp": 1570545297
    },
    {
        "content": "<p>Hahahaha</p>",
        "id": 177625267,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570547370
    },
    {
        "content": "<p>For the future generations: It truncates <code>t</code> removing the most significant bytes.</p>",
        "id": 177626930,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570548297
    },
    {
        "content": "<p>actually it should ICE if <code>t</code> is too big for the given size</p>",
        "id": 177714079,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628318
    },
    {
        "content": "<p>But it does not</p>",
        "id": 177714143,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570628359
    },
    {
        "content": "<p>but we have an assert right here:<br>\n<a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc/mir/interpret/value.rs.html#269-276\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc/mir/interpret/value.rs.html#269-276\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc/mir/interpret/value.rs.html#269-276</a></p>",
        "id": 177714238,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> what exactly did you test? I have seen that ICE several times, and was glad for it each time as it caught critical bugs.</p>",
        "id": 177714327,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628465
    },
    {
        "content": "<p>oh wait <span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> what exactly do you mean by \"the size of the type of <code>t</code>\"?</p>",
        "id": 177714351,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628491
    },
    {
        "content": "<p>the type of <code>t</code> does not matter</p>",
        "id": 177714358,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628497
    },
    {
        "content": "<p>is that the size of t given by its type or just how many bits/bytes t uses?</p>",
        "id": 177714363,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570628500
    },
    {
        "content": "<p>it is always cast to <code>i128</code> first</p>",
        "id": 177714369,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628503
    },
    {
        "content": "<p>hahahaha</p>",
        "id": 177714370,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570628503
    },
    {
        "content": "<p>it will never truncate but if you have an <code>i64</code> that can be loslessly turned into an <code>i32</code> you are good</p>",
        "id": 177714387,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628518
    },
    {
        "content": "<p>yeah that's the confusion</p>",
        "id": 177714388,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570628520
    },
    {
        "content": "<p>here we think of <code>t</code> as an abstract integer, not a machine-integer with some bitwidth</p>",
        "id": 177714465,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628551
    },
    {
        "content": "<p>yes got it</p>",
        "id": 177714473,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570628558
    },
    {
        "content": "<p>and we check if that abstract integer fits into the given size</p>",
        "id": 177714475,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628559
    },
    {
        "content": "<p>it seems like a code smell though if you have a \"too big\" type there</p>",
        "id": 177714506,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628586
    },
    {
        "content": "<p>as it might mean that ICE is reachable, which it never should be</p>",
        "id": 177714514,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628592
    },
    {
        "content": "<p>yes so, for the particular case I'm using it, that would mean that this might blow up if the host platform returns Integers that are too large for the target platform</p>",
        "id": 177714648,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570628701
    },
    {
        "content": "<p>so do we want an ice happening there? because the other option would be to let those Integers overflow which might produce undesired results without erroring anywhere</p>",
        "id": 177715030,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570628932
    },
    {
        "content": "<p><code>throw_unsup</code> sounds like the best reaction for that case</p>",
        "id": 177717561,
        "sender_full_name": "RalfJ",
        "timestamp": 1570630488
    },
    {
        "content": "<p>Ok then, I added the same check that <code>Scalar::from_int</code> has but it errors instead.</p>",
        "id": 177728299,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570636674
    },
    {
        "content": "<p>sounds reasonable</p>",
        "id": 177728829,
        "sender_full_name": "RalfJ",
        "timestamp": 1570636962
    },
    {
        "content": "<p>I wanted to get the target's type max and min values and compare but I think it's not worth the trouble</p>",
        "id": 177728874,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570636994
    },
    {
        "content": "<p>In particular because that would need to cast the values again to i128 to compare in the first place</p>",
        "id": 177729384,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1570637305
    },
    {
        "content": "<p>yeah</p>",
        "id": 177731832,
        "sender_full_name": "RalfJ",
        "timestamp": 1570639019
    }
]