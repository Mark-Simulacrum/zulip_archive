[
    {
        "content": "<p>Is there any technical reason we should not go ahead with stabilizing const mut refs (<a href=\"https://github.com/rust-lang/rust/issues/57349\">#57349</a>)? The most recent status update is <a href=\"https://github.com/rust-lang/rust/issues/57349#issuecomment-881432337\">here</a>. It seems like we should have no issue stabilizing it in <code>const fn</code> (but not <code>static</code>/<code>const</code> for reasons stated). This is exactly what was proposed <a href=\"https://github.com/rust-lang/rust/issues/57349#issuecomment-666348647\">last July</a>, with the requested checks apparently being implemented in the meantime.</p>",
        "id": 261603271,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637044974
    },
    {
        "content": "<p>well... we are very hesitant to add more const/constfn differences, so preferrably we'd fix the static/const situation and then just stabilize it everywhere</p>",
        "id": 261636640,
        "sender_full_name": "oli",
        "timestamp": 1637067706
    },
    {
        "content": "<p>Any idea how difficult that might be?</p>",
        "id": 261667865,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637080259
    },
    {
        "content": "<p>What's the issue of having it in <code>static/const</code>? The example given in the comments</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>doesn't compile today (gives E0764, mutable references are not allowed in the final value of statics)</p>",
        "id": 261668468,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637080556
    },
    {
        "content": "<p>From the <a href=\"https://doc.rust-lang.org/error-index.html#E0764\">error index</a>:</p>\n<blockquote>\n<p>While there could be a more fine-grained scheme in the future that allows mutable references if they are not “leaked” to the final value, a more conservative approach was chosen for now. <code>const fn</code> do not have this problem, as the borrow checker will prevent the <code>const fn</code> from returning new mutable references.</p>\n</blockquote>\n<p>It's more that we <em>could</em> permit more in the future. Personally I don't think it should be a blocker due to the amount this would permit, but that's up for debate.</p>",
        "id": 261731890,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1637111363
    },
    {
        "content": "<p>Yeah, as a user I don't mind const/const_fn differences if it means that my const fn can do <em>more</em> than a basic const block.</p>\n<p>If it's expected to take more than another release or two for the non-fn situation to be fixed, and the fn situation is ready now, please just stabilize for const fn only.</p>",
        "id": 261805862,
        "sender_full_name": "Lokathor",
        "timestamp": 1637165177
    },
    {
        "content": "<p>What would allowing mutable references in <code>const fn</code> mean for heap-allocation? With heap-allocation, you would be able to return a legal reference from a <code>const fn</code> that allows mutation, which breaks the assumption I used to justify its legality.</p>\n<p>I'm also a little worried about the correctness of existing code when mutable references are allowed. <span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> just found a silly bug in const qualification with <code>&amp;mut</code> (my fault). We've also allowed more raw pointer stuff since I went dormant. Are the existing justifications still valid once we have to consider raw pointers?</p>",
        "id": 261831298,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637175394
    },
    {
        "content": "<p>Is your concern that you'd allocate on the const heap and then leak that into a static mutable reference which returns out of the function?</p>",
        "id": 261836001,
        "sender_full_name": "Lokathor",
        "timestamp": 1637177658
    },
    {
        "content": "<p>That's the first-order problem, yes. What if you cast that mutable reference to a <code>usize</code> or a raw pointer, then cast it back in a const initializer or another <code>const fn</code> or during runtime after accessing the final value of the <code>const</code>?</p>",
        "id": 261837083,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637178131
    },
    {
        "content": "<p>well ptr to usize is currently disallowed, and unlikely to ever be allowed</p>",
        "id": 261838701,
        "sender_full_name": "Lokathor",
        "timestamp": 1637178761
    },
    {
        "content": "<p>However, to side step too many more specific cases, I think that what people want to be able to do is just have functions that take mutable references (particularly &amp;mut self) and use them, possibly returning a mutable reference based on an input (eg: subslice).</p>",
        "id": 261838967,
        "sender_full_name": "Lokathor",
        "timestamp": 1637178875
    },
    {
        "content": "<p>so even if the limit was that you can't fabricate a lifetime for a mutable reference return value, people would be quite happy to have &amp;mut self support in const fn for example.</p>",
        "id": 261839113,
        "sender_full_name": "Lokathor",
        "timestamp": 1637178930
    },
    {
        "content": "<p>Yes, I agree that the status quo sucks. That was what motivated the initial suggestion to allow them in <code>const fn</code> and rely on the borrow checker to prevent them from escaping into the final value of a <code>const</code>. I just don't want us to commit to a relaxed system without considering how it might constrain heap allocations in constants down the line.</p>",
        "id": 261842024,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637180063
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span>, this came up in the Rust-for-Linux CTCFT again, so I think I owe it to the community to actually try to resolve my concerns instead of just spreading FUD.</p>\n<p>The reason that this is a problem in<code>const</code>s is that  the final value of a <code>const</code> is bitwise copied whenever it is accessed, <em>even when its type is not <code>Copy</code></em>. This is what allows <code>Vec::new()</code> to be stored to a  <code>const</code>. This is sound for now because we forbid any operations that would actually cause a problem if their result is copied. However, <code>&amp;mut</code> and owned pointers (e.g. <code>Box</code>) break that assumption. Luckily, we will always have Miri as a backstop, which can detect problematic <code>const</code>s but I think we should fix the underlying issue, or at least try to.</p>\n<p>You could add a type-based check that rejects constants whose type contains <code>&amp;mut</code>, but I don't think that it would be sufficient. If we have a type like <code>UniquePtr</code>, we cannot give it a <code>const fn</code> constructor and still assume that it is unique.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">UniquePtr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// Doesn't impl `Copy` or `Clone`.</span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Needs `PhantomData` for variance too</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">UniquePtr</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">// Any `UniquePtr` in the final value of a const can be copied anyways!</span>\n<span class=\"o\">|</span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>You can argue that, with only <code>const_mut_refs</code>, it's difficult (maybe impossible) to get a mutable reference to something that lives until the end of a <code>const</code> initializer. However, that will cease to be true once heap allocation is allowed (consider <code>Box::leak</code> for example).</p>",
        "id": 262627578,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637779953
    },
    {
        "content": "<p>I think I've brought all this up in 2020, and we didn't reach any conclusions. Perhaps the thinking has changed in the meantime? My first thought was to apply the Qualif system (value-based reasoning with a type-based fallback) to things that can be copied (<code>MayCopy</code>?), and to forbid non-Copy values from the final value of constants. I don't particularly like that system, but at least there's a precedent.</p>\n<p>This would also be backwards incompatible, though I have some thoughts on what a migration system might look like. You would need to allow annotating some const fn (e.g., <code>Vec::new</code>) with a guarantee that their return value is safe to copy. This is similar to the <code>const(heap)</code> proposals. Unfortunately, extending this to trait methods would require yet another ad-hoc effect-system (on top of <code>const</code> and <code>unsafe</code>). I doubt there's any appetite for this, but maybe the simple system would be enough?</p>",
        "id": 262630193,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637781365
    },
    {
        "content": "<p>oh no XD I've been avoiding thinking about this. I am not yet done with my type alias impl trait refactor, so this is still low priority rn.</p>",
        "id": 262637188,
        "sender_full_name": "oli",
        "timestamp": 1637785822
    },
    {
        "content": "<p>imo we can just ignore heap in any design decisions, as users can always create a struct MutRef(*mut i32) with their own API that behaves like &amp;mut i32 and we won't ever be able to do anything about that beyond detecting it during interning. This is like post monomorphization errors. Let's keep avoiding most, but not go overboard and restrict users to an unusable subset of code</p>",
        "id": 262637351,
        "sender_full_name": "oli",
        "timestamp": 1637785939
    },
    {
        "content": "<blockquote>\n<p>users can always create a struct MutRef(*mut i32) with their own API that behaves like &amp;mut i32 and we won't ever be able to do anything about that</p>\n</blockquote>\n<p>My point was that users might reasonably assume that they could wrap a pointer with both a <code>DerefMut</code> impl and a const fn constructor, so long as the wrapper type didn't implement <code>Clone</code> or <code>Copy</code> and its fields were private. However, that's not sound today because we always bitwise copy consts.</p>\n<p>I'd like to experiment with value-based reasoning for <code>Copy</code> like I mentioned above. It's possible that the fallout will be too big, in which case I don't know what else to do besides rely on Miri (post-monomorphization) and the lack of heap allocation (since the targets of any mutable references can't outlive the initializer AFAIK)</p>",
        "id": 262638094,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637786508
    },
    {
        "content": "<p>the issue of a &amp;mut in a const seems separate from &amp;mut in a const fn. If the final value of a const expression comes out to be i32 or whatever, but uses &amp;mut internally, there's no problems there?</p>",
        "id": 262642535,
        "sender_full_name": "Lokathor",
        "timestamp": 1637789507
    },
    {
        "content": "<p>The same is true for const items. If we consider heap things, then const fn have no avantage over const items anymore in terms of borrowck helping us out</p>",
        "id": 262646964,
        "sender_full_name": "oli",
        "timestamp": 1637792692
    }
]