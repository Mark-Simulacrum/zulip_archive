[
    {
        "content": "<p>Oh god what have we done... <code>find_mir</code> in CTFE fails to actually check if the function is const, and if I fix that I get two test failures...</p>",
        "id": 147823456,
        "sender_full_name": "RalfJ",
        "timestamp": 1542382158
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>failures:\n    [ui] ui/consts/const-call.rs\n    [ui] ui/consts/const-eval/strlen.rs\n</pre></div>\n\n\n<p>still investigating the details</p>",
        "id": 147823467,
        "sender_full_name": "RalfJ",
        "timestamp": 1542382172
    },
    {
        "content": "<p>I remember doing that change</p>",
        "id": 147824198,
        "sender_full_name": "oli",
        "timestamp": 1542382726
    },
    {
        "content": "<p>the test failures are just changing diagnostics I think</p>",
        "id": 147824251,
        "sender_full_name": "oli",
        "timestamp": 1542382774
    },
    {
        "content": "<blockquote>\n<p>I remember doing that change</p>\n</blockquote>\n<p>doing what? I remember introducing <code>hook_fn</code></p>",
        "id": 147825007,
        "sender_full_name": "RalfJ",
        "timestamp": 1542383426
    },
    {
        "content": "<p>ah but then you removed the <code>NonConst</code> error? oO</p>",
        "id": 147825076,
        "sender_full_name": "RalfJ",
        "timestamp": 1542383493
    },
    {
        "content": "<p>I thought I had stated on multiple occasions that we should really error in this case, because otherwise we expose all sorts of stuff in the miri engine that we don't want exposed^^</p>",
        "id": 147825159,
        "sender_full_name": "RalfJ",
        "timestamp": 1542383534
    },
    {
        "content": "<p>we fixed those ;)</p>",
        "id": 147825295,
        "sender_full_name": "oli",
        "timestamp": 1542383646
    },
    {
        "content": "<p>that was mainly miri running on mir that has typeck errors</p>",
        "id": 147825304,
        "sender_full_name": "oli",
        "timestamp": 1542383666
    },
    {
        "content": "<p>the miri engine still can do way more than was have stabilized</p>",
        "id": 147825439,
        "sender_full_name": "RalfJ",
        "timestamp": 1542383791
    },
    {
        "content": "<p>and without this check, the moment we allow calling <code>const fn()</code> pointers, the entire engine becomes stabilized without any const qualification protecting us</p>",
        "id": 147825475,
        "sender_full_name": "RalfJ",
        "timestamp": 1542383833
    },
    {
        "content": "<p>I do not think we want that</p>",
        "id": 147825477,
        "sender_full_name": "RalfJ",
        "timestamp": 1542383838
    },
    {
        "content": "<p>hm, it considers <code>len()</code> non-const even though there is <code>#![feature(const_str_len, const_str_as_bytes)]</code>. any idea what might be causing this <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> ?</p>",
        "id": 147825955,
        "sender_full_name": "RalfJ",
        "timestamp": 1542384187
    },
    {
        "content": "<p>Yea, that's why I removed it, our const check is broken</p>",
        "id": 147825986,
        "sender_full_name": "oli",
        "timestamp": 1542384214
    },
    {
        "content": "<p>cross crate evaluation with stability is really weird</p>",
        "id": 147826053,
        "sender_full_name": "oli",
        "timestamp": 1542384255
    },
    {
        "content": "<p>I mean, we already proved that something is const fn in the other crate</p>",
        "id": 147826073,
        "sender_full_name": "oli",
        "timestamp": 1542384268
    },
    {
        "content": "<p>we could do <code>is_const_fn_raw</code></p>",
        "id": 147826095,
        "sender_full_name": "oli",
        "timestamp": 1542384288
    },
    {
        "content": "<p>but then again, with function pointers you could escape the whole stability thing</p>",
        "id": 147826128,
        "sender_full_name": "oli",
        "timestamp": 1542384307
    },
    {
        "content": "<blockquote>\n<p>I mean, we already proved that something is const fn in the other crate</p>\n</blockquote>\n<p>no we didn't. someone could have transmuted a function ptr.</p>",
        "id": 147826272,
        "sender_full_name": "RalfJ",
        "timestamp": 1542384404
    },
    {
        "content": "<p>we just have to do the same check as const qualification, don't we?</p>",
        "id": 147826290,
        "sender_full_name": "RalfJ",
        "timestamp": 1542384427
    },
    {
        "content": "<p>that somehow takes into account whether we have the necessary features enabled</p>",
        "id": 147826299,
        "sender_full_name": "RalfJ",
        "timestamp": 1542384438
    },
    {
        "content": "<p>I'd have thought that's what <code>is_const_fn</code> is for?</p>",
        "id": 147826316,
        "sender_full_name": "RalfJ",
        "timestamp": 1542384453
    },
    {
        "content": "<blockquote>\n<p>I mean, we already proved that something is const fn in the other crate</p>\n</blockquote>\n<p>uh wait... this is not checking the <em>body</em>, is it? We want to check the <em>signature</em>, potentially with <code>rustc_const_unstable</code></p>",
        "id": 147826383,
        "sender_full_name": "RalfJ",
        "timestamp": 1542384503
    },
    {
        "content": "<p>that is not something the other crate can have checked, so I do not understand your statement</p>",
        "id": 147826394,
        "sender_full_name": "RalfJ",
        "timestamp": 1542384519
    },
    {
        "content": "<p>we assume that <em>if</em> the function is marked const in the other crate, the body got checked; that is fair. now we have to check if it is indeed marked as such.</p>",
        "id": 147826406,
        "sender_full_name": "RalfJ",
        "timestamp": 1542384540
    },
    {
        "content": "<p>If we don't care about stability, <code>is_const_fn_raw</code> is what you want. It just checks for the keyword</p>",
        "id": 147827830,
        "sender_full_name": "oli",
        "timestamp": 1542385661
    },
    {
        "content": "<p><code>is_const _fn</code> also checks for stability things, but can't do so cross crate</p>",
        "id": 147827890,
        "sender_full_name": "oli",
        "timestamp": 1542385696
    },
    {
        "content": "<p>Const qualification is a static check</p>",
        "id": 147827931,
        "sender_full_name": "oli",
        "timestamp": 1542385746
    },
    {
        "content": "<p>You want a dynamic check, which isn't possible</p>",
        "id": 147827945,
        "sender_full_name": "oli",
        "timestamp": 1542385759
    },
    {
        "content": "<p>At least I don't see how to do that</p>",
        "id": 147827962,
        "sender_full_name": "oli",
        "timestamp": 1542385785
    },
    {
        "content": "<p>Or we could, but the code for stability is fragile enough</p>",
        "id": 147828027,
        "sender_full_name": "oli",
        "timestamp": 1542385815
    },
    {
        "content": "<p>I can look into it again if you want</p>",
        "id": 147828048,
        "sender_full_name": "oli",
        "timestamp": 1542385835
    },
    {
        "content": "<p>It's the same problem that macros have</p>",
        "id": 147828210,
        "sender_full_name": "oli",
        "timestamp": 1542385975
    },
    {
        "content": "<p>Except that you can't transmute macros</p>",
        "id": 147828241,
        "sender_full_name": "oli",
        "timestamp": 1542386029
    },
    {
        "content": "<p>We don't guarantee stability of transmuting things in horrible ways already</p>",
        "id": 147828291,
        "sender_full_name": "oli",
        "timestamp": 1542386060
    },
    {
        "content": "<p>Why should we do so here?</p>",
        "id": 147828301,
        "sender_full_name": "oli",
        "timestamp": 1542386068
    },
    {
        "content": "<blockquote>\n<p>You want a dynamic check, which isn't possible</p>\n</blockquote>\n<p>I want a check whether the current crate would consider that fn <code>const</code></p>",
        "id": 147829920,
        "sender_full_name": "RalfJ",
        "timestamp": 1542387565
    },
    {
        "content": "<p>or, well, I thought I would. but of course execution goes into other crates, and if libstd calls some things that only it may consider <code>const</code>... I see what you mean</p>",
        "id": 147829944,
        "sender_full_name": "RalfJ",
        "timestamp": 1542387593
    },
    {
        "content": "<p>I still do not understand why <code>len</code> fails thought, because it should be const everywhere (current crate has the feature enabled)</p>",
        "id": 147830013,
        "sender_full_name": "RalfJ",
        "timestamp": 1542387612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> do you have an explanation for why these test cases change in <a href=\"https://github.com/rust-lang/rust/issues/56007\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/56007\">#56007</a>? We shouldn't even start executing that code, right?</p>",
        "id": 147871218,
        "sender_full_name": "RalfJ",
        "timestamp": 1542446815
    },
    {
        "content": "<p>Currently we have things like <a href=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2015&amp;gist=ae04a67a3aee6e747b924223b3b37867\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2015&amp;gist=ae04a67a3aee6e747b924223b3b37867\">https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2015&amp;gist=ae04a67a3aee6e747b924223b3b37867</a> which are really scary IMO</p>",
        "id": 147871265,
        "sender_full_name": "RalfJ",
        "timestamp": 1542446914
    },
    {
        "content": "<p>The problem is that we have no way of knowing whether const qualif succeeded. We should make that query return a Result</p>",
        "id": 147875152,
        "sender_full_name": "oli",
        "timestamp": 1542455427
    },
    {
        "content": "<p>And then make const eval abort with <code>AlreadyReported</code></p>",
        "id": 147875154,
        "sender_full_name": "oli",
        "timestamp": 1542455447
    },
    {
        "content": "<p>wait, you are saying the error comes from inside the <code>is_const_fn_raw</code>?</p>",
        "id": 147875352,
        "sender_full_name": "RalfJ",
        "timestamp": 1542455940
    },
    {
        "content": "<p>I thought we are doing const qualification first, and then later we start executing this code. We shouldn't even do the latter if the former failed.</p>",
        "id": 147875360,
        "sender_full_name": "RalfJ",
        "timestamp": 1542455968
    },
    {
        "content": "<p>we don't want to abort the entire compilation because of one failed item</p>",
        "id": 147875628,
        "sender_full_name": "oli",
        "timestamp": 1542456557
    },
    {
        "content": "<p>we just need to teach const eval to also run the const qualif query</p>",
        "id": 147875629,
        "sender_full_name": "oli",
        "timestamp": 1542456568
    },
    {
        "content": "<p>okay. no idea how that'd work, I will leave the gluing to you :D</p>",
        "id": 147875725,
        "sender_full_name": "RalfJ",
        "timestamp": 1542456769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> would it make sense to bubble up errors in e.g. <code>mir_validated</code> (by making it return a <code>Result&lt;&amp;Steal&lt;Mir&gt;, ErrorReported&gt;</code>)? <a href=\"https://github.com/rust-lang/rust/blob/87a3c1ee7016bbfb782f2fd8adc75b46687ef929/src/librustc_mir/transform/mod.rs#L224\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/87a3c1ee7016bbfb782f2fd8adc75b46687ef929/src/librustc_mir/transform/mod.rs#L224\">https://github.com/rust-lang/rust/blob/87a3c1ee7016bbfb782f2fd8adc75b46687ef929/src/librustc_mir/transform/mod.rs#L224</a> to prevent erroneous <code>Mir</code> from being processed downstream?</p>",
        "id": 147876030,
        "sender_full_name": "oli",
        "timestamp": 1542457508
    },
    {
        "content": "<p>What the query returns when MIR for given DefId does not exist?</p>",
        "id": 147878105,
        "sender_full_name": "nagisa",
        "timestamp": 1542461970
    },
    {
        "content": "<p>whatever it returns there is already a perfectly fine way to prevent downstream from processing data further</p>",
        "id": 147878106,
        "sender_full_name": "nagisa",
        "timestamp": 1542461986
    },
    {
        "content": "<p>I don't think <code>bug!</code> makes much sense: <a href=\"https://github.com/rust-lang/rust/blob/9649c1f70fddd01843024932df97fb5a2b10bfe8/src/librustc_mir/build/mod.rs#L82\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9649c1f70fddd01843024932df97fb5a2b10bfe8/src/librustc_mir/build/mod.rs#L82\">https://github.com/rust-lang/rust/blob/9649c1f70fddd01843024932df97fb5a2b10bfe8/src/librustc_mir/build/mod.rs#L82</a></p>",
        "id": 147878694,
        "sender_full_name": "oli",
        "timestamp": 1542463230
    },
    {
        "content": "<p>well yeah, so queries don’t have a built-in method for reporting impossiblity to resolve the query, then?</p>",
        "id": 147878751,
        "sender_full_name": "nagisa",
        "timestamp": 1542463340
    },
    {
        "content": "<p>nope</p>",
        "id": 147878752,
        "sender_full_name": "oli",
        "timestamp": 1542463351
    },
    {
        "content": "<p>which means that our end goal will end up making us making <em>all</em> queries return some sort of a Result anyway.</p>",
        "id": 147878754,
        "sender_full_name": "nagisa",
        "timestamp": 1542463367
    },
    {
        "content": "<p><span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 147878755,
        "sender_full_name": "nagisa",
        "timestamp": 1542463369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> would it make sense in general to make queries support failing?</p>",
        "id": 147878763,
        "sender_full_name": "oli",
        "timestamp": 1542463388
    },
    {
        "content": "<p>Not having queries require returning a Result is strictly more general… although with <code>Result&lt;T, !&gt;</code> that argument is somewhat moot as well.</p>",
        "id": 147878864,
        "sender_full_name": "nagisa",
        "timestamp": 1542463583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I don't know how I feel about that. how erroneous are we talking?</p>",
        "id": 147880063,
        "sender_full_name": "eddyb",
        "timestamp": 1542466044
    },
    {
        "content": "<p>like failed const qualification</p>",
        "id": 147880066,
        "sender_full_name": "oli",
        "timestamp": 1542466063
    },
    {
        "content": "<p>but I can imagine other things</p>",
        "id": 147880069,
        "sender_full_name": "oli",
        "timestamp": 1542466078
    },
    {
        "content": "<p>what are you thinking of preventing?</p>",
        "id": 147880108,
        "sender_full_name": "eddyb",
        "timestamp": 1542466085
    },
    {
        "content": "<p>concretely: const eval trying to evaluate non-const MIR</p>",
        "id": 147880112,
        "sender_full_name": "oli",
        "timestamp": 1542466099
    },
    {
        "content": "<p>I'd rather have a flag on the <code>Mir</code> than just throw it away entirely</p>",
        "id": 147880113,
        "sender_full_name": "eddyb",
        "timestamp": 1542466105
    },
    {
        "content": "<p><code>Result&lt;Mir, ErrorMir&gt;</code> where the latter is a struct containing an error and the erroneous MIR?</p>",
        "id": 147880117,
        "sender_full_name": "oli",
        "timestamp": 1542466136
    },
    {
        "content": "<p>I don't like that tbh</p>",
        "id": 147880124,
        "sender_full_name": "eddyb",
        "timestamp": 1542466149
    },
    {
        "content": "<p>I guess you don't want to report duplicate errors, even if miri might not ICE</p>",
        "id": 147880128,
        "sender_full_name": "eddyb",
        "timestamp": 1542466162
    },
    {
        "content": "<p>yea, there's places we'd rather ICE about than report an error, because they make no sense</p>",
        "id": 147880185,
        "sender_full_name": "oli",
        "timestamp": 1542466209
    },
    {
        "content": "<p>I'll not do this for now and just make <code>mir_const_qualif</code> also return a flag saying that stuff broke</p>",
        "id": 147880200,
        "sender_full_name": "oli",
        "timestamp": 1542466282
    },
    {
        "content": "<p>what we're missing, really, is a way to avoid error cascades</p>",
        "id": 147880206,
        "sender_full_name": "eddyb",
        "timestamp": 1542466307
    },
    {
        "content": "<p>there's no reason we couldn't const-eval MIR that didn't pass the static checks</p>",
        "id": 147880248,
        "sender_full_name": "eddyb",
        "timestamp": 1542466333
    },
    {
        "content": "<p>\"keep going at any cost (as long as <em>someone</em> reports an error)\" is my preferred philosophy</p>",
        "id": 147880256,
        "sender_full_name": "eddyb",
        "timestamp": 1542466357
    },
    {
        "content": "<p>this could mean replacing <code>span_bug!</code>s in miri with <code>delay_span_bug</code></p>",
        "id": 147880263,
        "sender_full_name": "eddyb",
        "timestamp": 1542466375
    },
    {
        "content": "<p>we are actually evaluating non-const-fns if const qualification fails</p>",
        "id": 147880334,
        "sender_full_name": "oli",
        "timestamp": 1542466478
    },
    {
        "content": "<p>are you sure we want to go there?</p>",
        "id": 147880335,
        "sender_full_name": "oli",
        "timestamp": 1542466484
    },
    {
        "content": "<p>yupp!</p>",
        "id": 147880336,
        "sender_full_name": "eddyb",
        "timestamp": 1542466489
    },
    {
        "content": "<p>as long as someone reported an error, why not?</p>",
        "id": 147880337,
        "sender_full_name": "eddyb",
        "timestamp": 1542466495
    },
    {
        "content": "<p>well... we can't prevent the error cascade in that case</p>",
        "id": 147880345,
        "sender_full_name": "oli",
        "timestamp": 1542466511
    },
    {
        "content": "<p>I don't think we want to -- miri should be allowed to make some basic assumptions about the MIR, and <code>bug!</code> otherwise</p>",
        "id": 147880419,
        "sender_full_name": "RalfJ",
        "timestamp": 1542466667
    },
    {
        "content": "<p>we have <code>delay_span_bug</code> for a reason</p>",
        "id": 147880457,
        "sender_full_name": "eddyb",
        "timestamp": 1542466683
    },
    {
        "content": "<p>(though it cannot <code>bug!</code> for calling non-const-fns because of transmute, but there might be other cases)</p>",
        "id": 147880462,
        "sender_full_name": "RalfJ",
        "timestamp": 1542466690
    },
    {
        "content": "<p>that doesn't help, it doesn't abort computation</p>",
        "id": 147880464,
        "sender_full_name": "RalfJ",
        "timestamp": 1542466702
    },
    {
        "content": "<p>miri then still has to do <em>something</em></p>",
        "id": 147880466,
        "sender_full_name": "RalfJ",
        "timestamp": 1542466709
    },
    {
        "content": "<p>I also dont see the point, TBH. we'd certainly want to suppress any errors that show up in such a computation, so why even perform it? just a waste of time.</p>",
        "id": 147880480,
        "sender_full_name": "RalfJ",
        "timestamp": 1542466764
    },
    {
        "content": "<p>ignore the <code>delay_span_bug</code> thing for now... I'm talking about running into code like dereferencing raw pointers, which now can suddenly happen and spit out a bunch of diagnostics that will likely not be helpful to the user</p>",
        "id": 147880491,
        "sender_full_name": "oli",
        "timestamp": 1542466800
    },
    {
        "content": "<p>\"because it could succeed\" was part of my reasoning</p>",
        "id": 147880492,
        "sender_full_name": "eddyb",
        "timestamp": 1542466800
    },
    {
        "content": "<p>but, sure, as long as it doesn't stop the compilation, or non-miri things from using the MIR, I'm probably fine with most solutions</p>",
        "id": 147880548,
        "sender_full_name": "eddyb",
        "timestamp": 1542466839
    },
    {
        "content": "<blockquote>\n<p>\"because it could succeed\" was part of my reasoning</p>\n</blockquote>\n<p>and then what?</p>",
        "id": 147880549,
        "sender_full_name": "RalfJ",
        "timestamp": 1542466851
    },
    {
        "content": "<p>we abort compilation anyway. the user won't even know it succeeded.</p>",
        "id": 147880557,
        "sender_full_name": "RalfJ",
        "timestamp": 1542466866
    },
    {
        "content": "<p>the computation could be an array length</p>",
        "id": 147880560,
        "sender_full_name": "eddyb",
        "timestamp": 1542466884
    },
    {
        "content": "<p>which would wrong very often, leading to downstream type mismatches</p>",
        "id": 147880563,
        "sender_full_name": "oli",
        "timestamp": 1542466921
    },
    {
        "content": "<p>I dont think we should do anything based on an array length that calls a non-const-fn...</p>",
        "id": 147880604,
        "sender_full_name": "RalfJ",
        "timestamp": 1542466925
    },
    {
        "content": "<p>(which are just noise in my book, we used to have them with old ctfe)</p>",
        "id": 147880607,
        "sender_full_name": "oli",
        "timestamp": 1542466936
    },
    {
        "content": "<p>but I guess if nothing bails out completely when const-eval errors, it's probably fine</p>",
        "id": 147880608,
        "sender_full_name": "eddyb",
        "timestamp": 1542466938
    },
    {
        "content": "<p>Basically <a href=\"https://github.com/rust-lang/rust/pull/56007\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56007\">https://github.com/rust-lang/rust/pull/56007</a> is trying to make sure we do not accidentally expose \"stuff\" on stable</p>",
        "id": 147880609,
        "sender_full_name": "RalfJ",
        "timestamp": 1542466943
    },
    {
        "content": "<p>yea, we'd just get an <code>TyKind::Err</code> instead of a <code>TyKind::Array</code> in that case</p>",
        "id": 147880611,
        "sender_full_name": "oli",
        "timestamp": 1542466967
    },
    {
        "content": "<p>but in doing so we get annoying duplicate errors</p>",
        "id": 147880612,
        "sender_full_name": "RalfJ",
        "timestamp": 1542466971
    },
    {
        "content": "<p>I have ideas, I'll cook up a PR and we can see if everyone likes it</p>",
        "id": 147880670,
        "sender_full_name": "oli",
        "timestamp": 1542467071
    },
    {
        "content": "<p>okay, I am curious what you are cooking :)</p>",
        "id": 147880683,
        "sender_full_name": "RalfJ",
        "timestamp": 1542467132
    },
    {
        "content": "<p>yeah, ping me on it :D</p>",
        "id": 147880743,
        "sender_full_name": "eddyb",
        "timestamp": 1542467249
    }
]