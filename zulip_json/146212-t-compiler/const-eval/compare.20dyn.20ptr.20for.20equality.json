[
    {
        "content": "<p>I have 2 <code>Const { ty: &amp;dyn A, val: Value(ByRef { alloc: Allocation { bytes: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], relocations: Relocations(SortedMap { data: [(Size { raw: 0 }, ((), alloc2)), (Size { raw: 8 }, ((), alloc4))] })</code> and want to check if they are equal. for arrays I can use <code>destructure_const</code> but that is wrong here afaict.</p>",
        "id": 193662240,
        "sender_full_name": "lcnr",
        "timestamp": 1586614090
    },
    {
        "content": "<p>*two <code>&amp;dyn A</code> with a value of the above</p>",
        "id": 193662562,
        "sender_full_name": "lcnr",
        "timestamp": 1586614577
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263033\">@Banga Bangassou</span> <code>dyn Trait</code> shouldn't be considered to have \"structural match\"</p>",
        "id": 193663438,
        "sender_full_name": "eddyb",
        "timestamp": 1586615969
    },
    {
        "content": "<p>we can't allow it</p>",
        "id": 193663442,
        "sender_full_name": "eddyb",
        "timestamp": 1586615981
    },
    {
        "content": "<p>if it ICEs right now, that's perfect, unless you want to change the structural match conditions</p>",
        "id": 193663491,
        "sender_full_name": "eddyb",
        "timestamp": 1586616005
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <code>dyn Trait</code> is actually unimplementable unlike raw/fn pointers</p>",
        "id": 193663511,
        "sender_full_name": "eddyb",
        "timestamp": 1586616049
    },
    {
        "content": "<p>oh <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> completely forgot about that.</p>\n<blockquote>\n<p>if it ICEs right now, that's perfect, unless you want to change the structural match conditions</p>\n</blockquote>\n<p>wouldn't it be better if we emit an error instead of an ICE though</p>",
        "id": 193663612,
        "sender_full_name": "lcnr",
        "timestamp": 1586616229
    },
    {
        "content": "<p>no, unless that error is the right one</p>",
        "id": 193663654,
        "sender_full_name": "eddyb",
        "timestamp": 1586616247
    },
    {
        "content": "<p>hence \"unless you want to change the structural match conditions\"</p>",
        "id": 193663659,
        "sender_full_name": "eddyb",
        "timestamp": 1586616258
    },
    {
        "content": "<p>I mean something like \"<code>&amp;dyn A</code>  cannot be used a const parameter\"</p>",
        "id": 193663748,
        "sender_full_name": "lcnr",
        "timestamp": 1586616371
    },
    {
        "content": "<p>unless it's done in the right place, it's better to ICE IMO</p>",
        "id": 193663830,
        "sender_full_name": "eddyb",
        "timestamp": 1586616530
    },
    {
        "content": "<p>but this is specifically because it's an unstable feature</p>",
        "id": 193663838,
        "sender_full_name": "eddyb",
        "timestamp": 1586616544
    },
    {
        "content": "<p>where we <em>want</em> the compiler to crash if something isn't implemented yet</p>",
        "id": 193663844,
        "sender_full_name": "eddyb",
        "timestamp": 1586616558
    },
    {
        "content": "<p>oh dear can we pattern-match on closures?!</p>",
        "id": 193663900,
        "sender_full_name": "eddyb",
        "timestamp": 1586616616
    },
    {
        "content": "<p>oh but you can't create them without loops, heh</p>",
        "id": 193663921,
        "sender_full_name": "eddyb",
        "timestamp": 1586616666
    },
    {
        "content": "<p>wait you can't have them in the type of constants at all</p>",
        "id": 193664099,
        "sender_full_name": "eddyb",
        "timestamp": 1586616959
    },
    {
        "content": "<p>okay so we're fine pattern-matching-wise</p>",
        "id": 193664142,
        "sender_full_name": "eddyb",
        "timestamp": 1586616972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  you can with <code>const X: impl Fn() = || {};</code></p>",
        "id": 193678820,
        "sender_full_name": "centril",
        "timestamp": 1586638126
    },
    {
        "content": "<p>(which is unstable)</p>",
        "id": 193678825,
        "sender_full_name": "centril",
        "timestamp": 1586638140
    },
    {
        "content": "<p>yeah but <code>ty::Closure</code> isn't in the typeck type</p>",
        "id": 193678828,
        "sender_full_name": "eddyb",
        "timestamp": 1586638142
    },
    {
        "content": "<p>ah, you mean like that</p>",
        "id": 193678834,
        "sender_full_name": "centril",
        "timestamp": 1586638156
    },
    {
        "content": "<p>match checking should see <code>ty::Opaque</code> there</p>",
        "id": 193678838,
        "sender_full_name": "eddyb",
        "timestamp": 1586638162
    },
    {
        "content": "<p>yep, true</p>",
        "id": 193678840,
        "sender_full_name": "centril",
        "timestamp": 1586638168
    },
    {
        "content": "<p>which.... ugh</p>",
        "id": 193678843,
        "sender_full_name": "eddyb",
        "timestamp": 1586638174
    },
    {
        "content": "<p>is not allowed...?</p>",
        "id": 193678848,
        "sender_full_name": "centril",
        "timestamp": 1586638184
    },
    {
        "content": "<p>(I hope)</p>",
        "id": 193678850,
        "sender_full_name": "centril",
        "timestamp": 1586638187
    },
    {
        "content": "<p>I'm not sure we account for <code>ty::Opaque</code>s in match checking</p>",
        "id": 193678851,
        "sender_full_name": "eddyb",
        "timestamp": 1586638187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> the code barely has a blacklist or two</p>",
        "id": 193678854,
        "sender_full_name": "eddyb",
        "timestamp": 1586638197
    },
    {
        "content": "<p>it's not very defensively written :(</p>",
        "id": 193678899,
        "sender_full_name": "eddyb",
        "timestamp": 1586638208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yea; <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 193678923,
        "sender_full_name": "centril",
        "timestamp": 1586638237
    }
]