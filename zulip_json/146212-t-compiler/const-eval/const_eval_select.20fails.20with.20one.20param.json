[
    {
        "content": "<p>Encountered a bizarre bound compilation error when testing out const_eval_select . </p>\n<p>Minimal repro: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7525470219bd8ed5406c4f198d347d2d\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7525470219bd8ed5406c4f198d347d2d</a></p>\n<p>This seems to happen only when function takes one argument.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">const_eval_select</span><span class=\"p\">((</span><span class=\"n\">byte</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">fn_const</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn_not_const</span><span class=\"p\">)}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">intrinsics</span>::<span class=\"n\">const_eval_select</span><span class=\"p\">(</span><span class=\"n\">byte</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn_const</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn_not_const</span><span class=\"p\">)}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Workaround: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7628d9285dbb9273f7abdb9416c44033\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7628d9285dbb9273f7abdb9416c44033</a></p>",
        "id": 258530197,
        "sender_full_name": "Bot+",
        "timestamp": 1634816861
    },
    {
        "content": "<p>You need to tuple the argument: <code>unsafe { core::intrinsics::const_eval_select((byte,), fn_const, fn_not_const)}</code></p>",
        "id": 258546542,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634823542
    },
    {
        "content": "<p>Huh<br>\nToday I learned <code>let x = (0);</code> gets normalized to <code>let x = 0;</code> but <code>let x = (0,);</code> remains a tuple.</p>",
        "id": 258548355,
        "sender_full_name": "Bot+",
        "timestamp": 1634824200
    },
    {
        "content": "<p>This seems like weird special case that would benefit from having a lint and documentation explicitly mentioning it.</p>",
        "id": 258548432,
        "sender_full_name": "Bot+",
        "timestamp": 1634824214
    },
    {
        "content": "<p>FWIW, that's not just a Rust-ism, e.g. Python does that too, since parentheses are used both for tuples and for grouping expressions</p>",
        "id": 258555790,
        "sender_full_name": "cuviper",
        "timestamp": 1634826690
    }
]