[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/55260\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55260\">https://github.com/rust-lang/rust/pull/55260</a></p>\n<p>I don't think this should affect miri, since it's all const eval stuff, but I'll test locally just to be sure</p>",
        "id": 136260227,
        "sender_full_name": "oli",
        "timestamp": 1540206827
    },
    {
        "content": "<p>Most importantly we need a perf run. I'm sure this can improve perf, but I might need to fix those <code>FIXME</code>s that I added</p>",
        "id": 136260302,
        "sender_full_name": "oli",
        "timestamp": 1540206903
    },
    {
        "content": "<p>oh and I suggest very much to review per commit</p>",
        "id": 136260323,
        "sender_full_name": "oli",
        "timestamp": 1540206931
    },
    {
        "content": "<blockquote>\n<p>I'm still not fully done, but I don't want to grow this PR any further. </p>\n</blockquote>\n<p>for example?</p>",
        "id": 136265478,
        "sender_full_name": "RalfJ",
        "timestamp": 1540213321
    },
    {
        "content": "<p>I want to</p>\n<ul>\n<li>change the <code>const_eval</code> query to yield the fields of <code>ByRef</code> directly</li>\n<li>before that change <code>ByRef</code> to contain a struct with its fields</li>\n<li>then add fields for size and align, so we can stop cloning allocations and just point into other allocations if they are immutable</li>\n</ul>",
        "id": 136265718,
        "sender_full_name": "oli",
        "timestamp": 1540213578
    },
    {
        "content": "<p>I agree with 1+2, and do not understand what you mean by 3</p>",
        "id": 136265753,
        "sender_full_name": "RalfJ",
        "timestamp": 1540213644
    },
    {
        "content": "<p>Oh. right now <code>const_field</code> clones the allocation it is given and then points into that, because we need to adjust alignment</p>",
        "id": 136265813,
        "sender_full_name": "oli",
        "timestamp": 1540213695
    },
    {
        "content": "<p>I... dont even. it cares about alignment why? what is that horrible operation used for anyway?^^</p>",
        "id": 136266271,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214183
    },
    {
        "content": "<p>because we might access a <code>u64</code> field of a packed struct</p>",
        "id": 136266413,
        "sender_full_name": "oli",
        "timestamp": 1540214320
    },
    {
        "content": "<p>oh it's used for matches</p>",
        "id": 136266420,
        "sender_full_name": "oli",
        "timestamp": 1540214327
    },
    {
        "content": "<p>we can do better, but we need my proposed refactorings</p>",
        "id": 136266434,
        "sender_full_name": "oli",
        "timestamp": 1540214348
    },
    {
        "content": "<p>at the end of those, that function doesn't do any interning or other weird stuff anymore</p>",
        "id": 136266438,
        "sender_full_name": "oli",
        "timestamp": 1540214361
    },
    {
        "content": "<p>it'll just call downcast -&gt; field -&gt; done</p>",
        "id": 136266452,
        "sender_full_name": "oli",
        "timestamp": 1540214381
    },
    {
        "content": "<p>yeah that seems nice</p>",
        "id": 136267220,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215037
    },
    {
        "content": "<p>so we'll have a <code>ConstPlace</code> or so</p>",
        "id": 136267224,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215047
    },
    {
        "content": "<p>oh yes</p>",
        "id": 136267236,
        "sender_full_name": "oli",
        "timestamp": 1540215064
    },
    {
        "content": "<p>which is alloc_id + offset, and whatever else you need to put in there</p>",
        "id": 136267242,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215074
    },
    {
        "content": "<p>jup, it's the content of <code>ByRef</code> :D</p>",
        "id": 136267253,
        "sender_full_name": "oli",
        "timestamp": 1540215091
    },
    {
        "content": "<blockquote>\n<p>oh and I suggest very much to review per commit</p>\n</blockquote>\n<p>There are 24 commits oO</p>",
        "id": 136330594,
        "sender_full_name": "RalfJ",
        "timestamp": 1540293401
    },
    {
        "content": "<p>well... the first 5 or so are not nice if bundled</p>",
        "id": 136331464,
        "sender_full_name": "oli",
        "timestamp": 1540294806
    },
    {
        "content": "<p>is it possible to review a commit range maybe?</p>",
        "id": 136331473,
        "sender_full_name": "oli",
        "timestamp": 1540294818
    },
    {
        "content": "<p>not sure. I now have about 18 tabs left to review...^^</p>",
        "id": 136331960,
        "sender_full_name": "RalfJ",
        "timestamp": 1540295547
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> </p>\n<blockquote>\n<p>Oh god this uncovered so many bugs and bugs-just-waiting-to-happen. </p>\n</blockquote>\n<p>for example? can we have testcases?</p>",
        "id": 136333847,
        "sender_full_name": "RalfJ",
        "timestamp": 1540298039
    },
    {
        "content": "<p>If all match arms only have constants as patterns and these constants are tuples of some sort, exhaustiveness will bail out and require a <code>_</code> arm. I'll create a repro when i'm back on a pc</p>",
        "id": 136343152,
        "sender_full_name": "oli",
        "timestamp": 1540307702
    },
    {
        "content": "<p>The rest is probably just weird/wrong diagnostics</p>",
        "id": 136343183,
        "sender_full_name": "oli",
        "timestamp": 1540307746
    },
    {
        "content": "<p>ah that's the equality stuff I was complaining about ;)</p>",
        "id": 136344018,
        "sender_full_name": "RalfJ",
        "timestamp": 1540308411
    },
    {
        "content": "<p>yes, I'm fixing that. your suggestion makes absolute sense</p>",
        "id": 136344914,
        "sender_full_name": "oli",
        "timestamp": 1540309071
    },
    {
        "content": "<p>just specializing <code>ConstValue</code> that is</p>",
        "id": 136344964,
        "sender_full_name": "oli",
        "timestamp": 1540309084
    },
    {
        "content": "<p>okay ;)</p>",
        "id": 136346208,
        "sender_full_name": "RalfJ",
        "timestamp": 1540310094
    },
    {
        "content": "<p>I'm gonna make a separate PR for moving stuff from <a href=\"http://memory.rs\" target=\"_blank\" title=\"http://memory.rs\">memory.rs</a> to <code>Allocation</code> that we're going to merge <em>before</em> this PR</p>",
        "id": 136346341,
        "sender_full_name": "oli",
        "timestamp": 1540310187
    },
    {
        "content": "<p>it seems like an independent change</p>",
        "id": 136346355,
        "sender_full_name": "oli",
        "timestamp": 1540310194
    },
    {
        "content": "<blockquote>\n<p>avg: 33219.2% | min: 22801.4% | max: 62508.3%</p>\n</blockquote>\n<p>Talk about bad perf regressions... must be a new record ;)</p>",
        "id": 136398660,
        "sender_full_name": "RalfJ",
        "timestamp": 1540375135
    }
]