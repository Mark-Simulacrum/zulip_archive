[
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 160567247,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552395470
    },
    {
        "content": "<p>I wanted to double check something with you about this PR</p>",
        "id": 160567259,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552395481
    },
    {
        "content": "<p>namely I wanted to understand the purpose of making the so-called \"precomputed cache\" <a href=\"https://github.com/rust-lang/rust/pull/58556/files#diff-303d6ab00ef20008541e8be51d727234R794\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58556/files#diff-303d6ab00ef20008541e8be51d727234R794\">here</a></p>",
        "id": 160567325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552395516
    },
    {
        "content": "<p>which I <em>think</em> is an attempt to make a compressed form of the input bitvector</p>",
        "id": 160567340,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552395533
    },
    {
        "content": "<p>and then, if the result of the compression is actually trivial (i.e. we found out it was all zeros or all one bits), we sidestep the copy entirely</p>",
        "id": 160567368,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552395564
    },
    {
        "content": "<p>and otherwise, I <em>think</em> we subsequently \"decompress\" the compressed form into the target buffer</p>",
        "id": 160567381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552395584
    },
    {
        "content": "<p>If the above interpretation is correct, then the main (and only?) benefit I can imagine is that you can fit more of the input buffer into your processor cache during the reading, and likewise during the subsequent writing</p>",
        "id": 160567497,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552395686
    },
    {
        "content": "<p>rather than trying to dedicate half of your cache and the other half of the cache to the other if you were to do a more direct copy</p>",
        "id": 160567515,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552395708
    },
    {
        "content": "<p>(this is all assuming that one <em>could</em> just have added a prepass to the original code just look if its all zeros or all ones, and skip the copy if that is the case.)</p>",
        "id": 160567573,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552395739
    },
    {
        "content": "<p>(of course the cost/benefit of such a second pass is hard for me to determine)</p>",
        "id": 160567590,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552395760
    },
    {
        "content": "<p>It's both a processor cache thing, and a way to get around the problem, that iterating over bits and setting them one by one in a big integer is super slow</p>",
        "id": 160570028,
        "sender_full_name": "oli",
        "timestamp": 1552397737
    },
    {
        "content": "<p>the <code>set_range_inbounds</code> method is optimized to do two bitshifts and a bitmask instead of iterating over all the bits</p>",
        "id": 160570108,
        "sender_full_name": "oli",
        "timestamp": 1552397775
    },
    {
        "content": "<p>So the reason I am not just computing this while copying is that we are copying a single value <code>repeat</code> times. This means that we'd be recomputing them <code>repeat</code> times if we just did it while copying</p>",
        "id": 160571234,
        "sender_full_name": "oli",
        "timestamp": 1552398566
    },
    {
        "content": "<p>The cache only computes the set once and then reuses it for all duplicates (or if the entire thing is homogenous, just does a single operation).</p>",
        "id": 160571279,
        "sender_full_name": "oli",
        "timestamp": 1552398601
    },
    {
        "content": "<p>We could even go as far as figuring out that as long as the sequence length is a divisor of 64, we can just fill in a <code>u64</code> once and copy that one</p>",
        "id": 160571395,
        "sender_full_name": "oli",
        "timestamp": 1552398659
    },
    {
        "content": "<p>I guess my point is, I can imagine some input buffers where the \"compressed form\" is not efficient at all</p>",
        "id": 160574761,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552400960
    },
    {
        "content": "<p>i.e. if you had an input buffer 01010101... then you almost certainly would have been better off with the original code (right?)</p>",
        "id": 160574864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552401008
    },
    {
        "content": "<p>oh yea</p>",
        "id": 160574980,
        "sender_full_name": "oli",
        "timestamp": 1552401101
    },
    {
        "content": "<p>hmm</p>",
        "id": 160574982,
        "sender_full_name": "oli",
        "timestamp": 1552401102
    },
    {
        "content": "<p>but I'm also willing to believe that in practice, you <strong>are</strong> seeing long ranges with the same value (0 or 1) repeated, and thus the run-length encoded <code>ranges</code> will be very compact and very fast to decompress into each of the <code>dest_allocation</code>s</p>",
        "id": 160574983,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552401103
    },
    {
        "content": "<p>we could detect such cases and just resort to the original code?</p>",
        "id": 160575026,
        "sender_full_name": "oli",
        "timestamp": 1552401122
    },
    {
        "content": "<p>or at least, I am assuming that you saw long ranges with the same value arise  in practice, right?</p>",
        "id": 160575058,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552401133
    },
    {
        "content": "<p>oh yea, mostly it's all bits defined</p>",
        "id": 160575071,
        "sender_full_name": "oli",
        "timestamp": 1552401146
    },
    {
        "content": "<p>okay. Then I'll just r+ this. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 160575080,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552401156
    },
    {
        "content": "<p>hehe ok</p>",
        "id": 160575097,
        "sender_full_name": "oli",
        "timestamp": 1552401170
    },
    {
        "content": "<p>I can revisit for more perf improvements if new cases come up</p>",
        "id": 160575120,
        "sender_full_name": "oli",
        "timestamp": 1552401185
    },
    {
        "content": "<p>I will admit that I overlooked the fact that you are repetitively writing the output <code>repeat</code> times</p>",
        "id": 160575162,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552401210
    },
    {
        "content": "<p>I only noticed a single copy and so was not convinced it was worth making the run-length encoded form. But if you are generating multiple copies,  I can believe it ends up paying off.</p>",
        "id": 160575241,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552401257
    },
    {
        "content": "<p>(Actually, it would probably be really easy to add logic saying \"if <code>ranges</code> is larger than <code>undef_mask</code>, then just use <code>undef_mask</code> as the source rather than spending time decompressing <code>ranges</code>, right?)</p>",
        "id": 160575662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552401541
    },
    {
        "content": "<p>Just something to consider. It doesn't need to be part of this PR</p>",
        "id": 160575681,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552401551
    },
    {
        "content": "<p>(I'm basically just repeating what you said above when you said \"we could detect such cases and just resort to the original code\"; i just hadn't realized how trivially we might detect such cases.)</p>",
        "id": 160575761,
        "sender_full_name": "pnkfelix",
        "timestamp": 1552401604
    },
    {
        "content": "<blockquote>\n<p>oh yea, mostly it's all bits defined</p>\n</blockquote>\n<p>well, except for padding</p>",
        "id": 160604862,
        "sender_full_name": "RalfJ",
        "timestamp": 1552420958
    },
    {
        "content": "<p>What's a little padding between friends?</p>",
        "id": 160605667,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1552421584
    }
]