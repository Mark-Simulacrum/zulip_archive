[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> what kind of error should we be reporting for <a href=\"https://github.com/rust-lang/rust/issues/55223#issuecomment-431811751\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55223#issuecomment-431811751\">https://github.com/rust-lang/rust/issues/55223#issuecomment-431811751</a> ?</p>",
        "id": 136262162,
        "sender_full_name": "oli",
        "timestamp": 1540209175
    },
    {
        "content": "<p>Dangling pointer deref?</p>",
        "id": 136262169,
        "sender_full_name": "oli",
        "timestamp": 1540209193
    },
    {
        "content": "<p>or should we just error out even earlier by checking whether all <code>AllocId</code>s are global?</p>",
        "id": 136262253,
        "sender_full_name": "oli",
        "timestamp": 1540209277
    },
    {
        "content": "<p>how is it even managing to violate this invariant?</p>",
        "id": 136265557,
        "sender_full_name": "RalfJ",
        "timestamp": 1540213391
    },
    {
        "content": "<p>we should usually have an alignment+size for all allocations, or sth went really wrong</p>",
        "id": 136265570,
        "sender_full_name": "RalfJ",
        "timestamp": 1540213418
    },
    {
        "content": "<p>Not if these allocations were created in a different <code>EvalContext</code> ;)</p>",
        "id": 136265730,
        "sender_full_name": "oli",
        "timestamp": 1540213608
    },
    {
        "content": "<p>uh... what. if they are still around they must have been interned, right?</p>",
        "id": 136265763,
        "sender_full_name": "RalfJ",
        "timestamp": 1540213670
    },
    {
        "content": "<p>eh, interned isnt even the most relevant part; moved to <code>tcx.alloc_map</code> is</p>",
        "id": 136265809,
        "sender_full_name": "RalfJ",
        "timestamp": 1540213686
    },
    {
        "content": "<p>we can't intern a deallocated allocation</p>",
        "id": 136265821,
        "sender_full_name": "oli",
        "timestamp": 1540213706
    },
    {
        "content": "<p>well we could</p>",
        "id": 136265831,
        "sender_full_name": "oli",
        "timestamp": 1540213729
    },
    {
        "content": "<p>do you want me to implement that rather than what I did in the PR?</p>",
        "id": 136265835,
        "sender_full_name": "oli",
        "timestamp": 1540213738
    },
    {
        "content": "<p>I dont follow</p>",
        "id": 136266057,
        "sender_full_name": "RalfJ",
        "timestamp": 1540213988
    },
    {
        "content": "<p>also I dont know what you implemented, GH says the PR doesnt exist^^</p>",
        "id": 136266064,
        "sender_full_name": "RalfJ",
        "timestamp": 1540213998
    },
    {
        "content": "<p>AFAIK we walk the relocations and globalize all things that this refers to, don't we?</p>",
        "id": 136266140,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214066
    },
    {
        "content": "<p>lol. I implemented a check during validation that errors out if <code>const_mode == true</code> and the <code>AllocId</code> is not in <code>tcx.alloc_map.lock()</code></p>",
        "id": 136266161,
        "sender_full_name": "oli",
        "timestamp": 1540214096
    },
    {
        "content": "<p>(interning = putting into the arena, that just gives us a <code>&amp;'tcx Allocation</code>; globalizing = putting into the global <code>alloc_map</code> which is a separate step. it took me quite a while to figure that out.)</p>",
        "id": 136266165,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214099
    },
    {
        "content": "<p>yes but we only do that if there's an <code>Allocation</code></p>",
        "id": 136266180,
        "sender_full_name": "oli",
        "timestamp": 1540214111
    },
    {
        "content": "<p>and why wouldnt there be? we error out if there isnt, dont we?</p>",
        "id": 136266193,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214130
    },
    {
        "content": "<p>if the <code>AllocId</code>'s memory has been deallocated, then we don't intern anything</p>",
        "id": 136266198,
        "sender_full_name": "oli",
        "timestamp": 1540214138
    },
    {
        "content": "<p>nope, apparently not XD</p>",
        "id": 136266203,
        "sender_full_name": "oli",
        "timestamp": 1540214143
    },
    {
        "content": "<p>lemme check what happens there</p>",
        "id": 136266204,
        "sender_full_name": "oli",
        "timestamp": 1540214146
    },
    {
        "content": "<p>ah, we assume that it it doesnt exist it has already been interned</p>",
        "id": 136266883,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214763
    },
    {
        "content": "<p>oh right</p>",
        "id": 136266913,
        "sender_full_name": "oli",
        "timestamp": 1540214784
    },
    {
        "content": "<blockquote>\n<p>lol. I implemented a check during validation that errors out if <code>const_mode == true</code> and the <code>AllocId</code> is not in <code>tcx.alloc_map.lock()</code></p>\n</blockquote>\n<p>I dont think that is enough, there are other operations that query size/alignment of an allocation</p>",
        "id": 136266933,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214810
    },
    {
        "content": "<p>so... we add another variant to <code>AllocType</code>: <code>Deallocated(Size, Align)</code> ?</p>",
        "id": 136266934,
        "sender_full_name": "oli",
        "timestamp": 1540214811
    },
    {
        "content": "<p>what is <code>AllocType</code> again?</p>",
        "id": 136266954,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214829
    },
    {
        "content": "<p>it's not the same as <code>MemoryKind</code>, that much I remember^^</p>",
        "id": 136266977,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214858
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/66910ba686e1e89ff6cfbb46b3e5394bedbe5564/src/librustc/mir/interpret/mod.rs#L431\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/66910ba686e1e89ff6cfbb46b3e5394bedbe5564/src/librustc/mir/interpret/mod.rs#L431\">https://github.com/rust-lang/rust/blob/66910ba686e1e89ff6cfbb46b3e5394bedbe5564/src/librustc/mir/interpret/mod.rs#L431</a></p>",
        "id": 136266979,
        "sender_full_name": "oli",
        "timestamp": 1540214859
    },
    {
        "content": "<p>I have PR cleaning that up, too, but that's a different story</p>",
        "id": 136266991,
        "sender_full_name": "oli",
        "timestamp": 1540214879
    },
    {
        "content": "<p>oh. so it is actually an <code>Alloc</code>, not just its type</p>",
        "id": 136267031,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214884
    },
    {
        "content": "<p>yes</p>",
        "id": 136267040,
        "sender_full_name": "oli",
        "timestamp": 1540214890
    },
    {
        "content": "<p>how would we even determine its size/alloc though during interning?</p>",
        "id": 136267052,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214906
    },
    {
        "content": "<p>it is already gone</p>",
        "id": 136267053,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214909
    },
    {
        "content": "<p>ah we could look at the dealloc_map I guess</p>",
        "id": 136267069,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214937
    },
    {
        "content": "<p>(or whatever I called it)</p>",
        "id": 136267083,
        "sender_full_name": "RalfJ",
        "timestamp": 1540214945
    },
    {
        "content": "<p>yes</p>",
        "id": 136267099,
        "sender_full_name": "oli",
        "timestamp": 1540214961
    },
    {
        "content": "<p>I'll implement that</p>",
        "id": 136267118,
        "sender_full_name": "oli",
        "timestamp": 1540214971
    },
    {
        "content": "<blockquote>\n<p>I dont think that is enough, there are other operations that query size/alignment of an allocation</p>\n</blockquote>\n<p>it is, because we error out before anyone can see these values again</p>",
        "id": 136267141,
        "sender_full_name": "oli",
        "timestamp": 1540215000
    },
    {
        "content": "<p>okay. that would maintain the invariant that we know size+alloc of every <code>AllocId</code>. might be too much complexity though?</p>",
        "id": 136267199,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215009
    },
    {
        "content": "<p>also what is that message?^^</p>",
        "id": 136267207,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215019
    },
    {
        "content": "<p>pressed return too early</p>",
        "id": 136267225,
        "sender_full_name": "oli",
        "timestamp": 1540215047
    },
    {
        "content": "<blockquote>\n<p>it is, because we error out before anyone can see these values again</p>\n</blockquote>\n<p>hm... that could work</p>",
        "id": 136267333,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215164
    },
    {
        "content": "<p>but if that's true we can do something even simpler, maybe?</p>",
        "id": 136267343,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215171
    },
    {
        "content": "<p>cannot we just error out during interning if we see sth that is in the <code>dead_map</code>?</p>",
        "id": 136267353,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215182
    },
    {
        "content": "<p>no extra state in <code>tcx</code> should be needed</p>",
        "id": 136267362,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215187
    },
    {
        "content": "<p>heh</p>",
        "id": 136267367,
        "sender_full_name": "oli",
        "timestamp": 1540215201
    },
    {
        "content": "<p>jap</p>",
        "id": 136267371,
        "sender_full_name": "oli",
        "timestamp": 1540215204
    },
    {
        "content": "<p>or rather, something that is neither in the local nor the global map</p>",
        "id": 136267373,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215209
    },
    {
        "content": "<p><em>editing PR</em></p>",
        "id": 136267375,
        "sender_full_name": "oli",
        "timestamp": 1540215210
    },
    {
        "content": "<p>so we have an invariant: all relocations in the global map, refer to <code>AllocId</code> also in the global map</p>",
        "id": 136267383,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215223
    },
    {
        "content": "<p>(might be temporarily violated during interning because cycles, but well)</p>",
        "id": 136267404,
        "sender_full_name": "RalfJ",
        "timestamp": 1540215243
    },
    {
        "content": "<p>done, and github is even showing stuff atm <a href=\"https://github.com/rust-lang/rust/pull/55262\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55262\">https://github.com/rust-lang/rust/pull/55262</a></p>",
        "id": 136271524,
        "sender_full_name": "oli",
        "timestamp": 1540219015
    },
    {
        "content": "<p>and not anymore -.-</p>",
        "id": 136271543,
        "sender_full_name": "oli",
        "timestamp": 1540219049
    },
    {
        "content": "<p>;)</p>",
        "id": 136271741,
        "sender_full_name": "RalfJ",
        "timestamp": 1540219261
    }
]