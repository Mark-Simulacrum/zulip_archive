[
    {
        "content": "<p>Hello everyone, so I've resumed my work on <a href=\"https://github.com/rust-lang/miri/issues/999\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/999\">https://github.com/rust-lang/miri/issues/999</a>. First I wanted to be sure that I got the API right (<a href=\"http://man7.org/linux/man-pages/man2/statx.2.html\" target=\"_blank\" title=\"http://man7.org/linux/man-pages/man2/statx.2.html\">http://man7.org/linux/man-pages/man2/statx.2.html</a>) so I'm trying to grab <code>struct statx *statxbuf</code> and write a bunch of zeroes to it in the same way is done in <a href=\"https://github.com/rust-lang/miri/blob/master/src/shims/time.rs#L53\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/blob/master/src/shims/time.rs#L53\"><code>shims/time.rs</code></a>. However I'm not able to deref the operand because the operand does not have a memory location, it is just an integer:</p>\n<div class=\"codehilite\"><pre><span></span>OpTy { op: Immediate(Scalar(0x0000000000020150)), layout: TyLayout { ty: i64, details: LayoutDetails { variants: Single { index: 0 }, fields: Union(0), abi: Scalar(Scalar { value: Int(I64, true), valid_range: 0..=18446744073709551615 }), largest_niche: None, align: AbiAndPrefAlign { abi: Align { pow2: 3 }, pref: Align { pow2: 3 } }, size: Size { raw: 8 } } } }\n</pre></div>\n\n\n<p>In contrast with the operand used in time:</p>\n<div class=\"codehilite\"><pre><span></span>OpTy { op: Immediate(Scalar(AllocId(596).0x0[&lt;untagged&gt;])), layout: TyLayout { ty: *mut libc::unix::timespec, details: LayoutDetails { variants: Single { index: 0 }, fields: Union(0), abi: Scalar(Scalar { value: Pointer, valid_range: 0..=18446744073709551615 }), largest_niche: None, align: AbiAndPrefAlign { abi: Align { pow2: 3 }, pref: Align { pow2: 3 } }, size: Size { raw: 8 } } } }\n</pre></div>\n\n\n<p>So what should I try here? Maybe to <code>force_ptr</code> it and then build a <code>MPlaceTy</code> with that?</p>",
        "id": 182269668,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575177048
    },
    {
        "content": "<p>Yea, always use force_ptr if you expect to deref</p>",
        "id": 182282942,
        "sender_full_name": "oli",
        "timestamp": 1575202726
    },
    {
        "content": "<p>uhhh i think I'm almost there... but I'm having trouble getting the correct layout</p>",
        "id": 182286828,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575210326
    },
    {
        "content": "<p>the problem is that when  I try to get the layout from libc i get <a href=\"https://docs.rs/libc/0.2.63/libc/fn.statx.html\" target=\"_blank\" title=\"https://docs.rs/libc/0.2.63/libc/fn.statx.html\">https://docs.rs/libc/0.2.63/libc/fn.statx.html</a> instead of <a href=\"https://docs.rs/libc/0.2.63/libc/struct.statx.html\" target=\"_blank\" title=\"https://docs.rs/libc/0.2.63/libc/struct.statx.html\">https://docs.rs/libc/0.2.63/libc/struct.statx.html</a> because they both are <code>libc::statx</code></p>",
        "id": 182286871,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575210377
    },
    {
        "content": "<p>I have a horrible idea: grab the type from the function argument.</p>",
        "id": 182287418,
        "sender_full_name": "oli",
        "timestamp": 1575211385
    },
    {
        "content": "<p>I solved it grabbing it from another unambiguous path:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">statx_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">resolve_path</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"s\">&quot;libc&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;unix&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;linux_like&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;linux&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;gnu&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">&quot;statx&quot;</span><span class=\"p\">])</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 182287815,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575212044
    },
    {
        "content": "<blockquote>\n<p>I have a horrible idea: grab the type from the function argument.</p>\n</blockquote>\n<p>but that would be awesome</p>",
        "id": 182287816,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575212053
    },
    {
        "content": "<p>Does that path exist on all platforms?</p>",
        "id": 182287883,
        "sender_full_name": "oli",
        "timestamp": 1575212218
    },
    {
        "content": "<blockquote>\n<p>Does that path exist on all platforms?</p>\n</blockquote>\n<p>probably not... but <code>statx</code> only exists in linux for certain kernel versions</p>",
        "id": 182287943,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575212291
    },
    {
        "content": "<p>Oh, right, carry on</p>",
        "id": 182288101,
        "sender_full_name": "oli",
        "timestamp": 1575212564
    },
    {
        "content": "<p>well now it runs :P</p>",
        "id": 182288107,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575212578
    },
    {
        "content": "<p>I mean it no longer crashes because of the terminfo error :P</p>",
        "id": 182288116,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575212597
    },
    {
        "content": "<p>now that you mention it <code>InterpCx::resolve_path</code> at what level is working? host or target?</p>",
        "id": 182288185,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575212691
    },
    {
        "content": "<p>Target</p>",
        "id": 182288345,
        "sender_full_name": "oli",
        "timestamp": 1575212964
    },
    {
        "content": "<p>great</p>",
        "id": 182289454,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575214875
    },
    {
        "content": "<p>do you know why</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">int_to_immty_checked</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">int</span>: <span class=\"kt\">i128</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">layout</span>: <span class=\"nc\">TyLayout</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">InterpResult</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ImmTy</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Tag</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// If `int` does not fit in `size` bits, we error instead of letting</span>\n<span class=\"w\">    </span><span class=\"c1\">// `ImmTy::from_int` panic.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">truncate</span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u128</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">sign_extend</span><span class=\"p\">(</span><span class=\"n\">truncated</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">throw_unsup_format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">&quot;Signed value {:#x} does not fit in {} bits&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">int</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">size</span><span class=\"p\">.</span><span class=\"n\">bits</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ImmTy</span>::<span class=\"n\">from_int</span><span class=\"p\">(</span><span class=\"n\">int</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>fails to fit <code>0x8000</code> in 16 bits?</p>",
        "id": 182499719,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575409368
    },
    {
        "content": "<p>it is because its trying to fit it as signed?</p>",
        "id": 182499962,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575409514
    },
    {
        "content": "<p>have you tried printing the result of <code>sign_extend</code>?</p>",
        "id": 182509021,
        "sender_full_name": "oli",
        "timestamp": 1575415783
    },
    {
        "content": "<p>I think it creates a 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_8000</p>",
        "id": 182509090,
        "sender_full_name": "oli",
        "timestamp": 1575415813
    },
    {
        "content": "<p>it is the correct number but with negative sign</p>",
        "id": 182509114,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575415832
    },
    {
        "content": "<p>?</p>",
        "id": 182509201,
        "sender_full_name": "oli",
        "timestamp": 1575415916
    },
    {
        "content": "<p>oh right, that's what you are trying to check</p>",
        "id": 182509286,
        "sender_full_name": "oli",
        "timestamp": 1575415965
    },
    {
        "content": "<p>what was the value before truncation? <code>0x8000</code> should totally not error in this function</p>",
        "id": 182509331,
        "sender_full_name": "oli",
        "timestamp": 1575416015
    },
    {
        "content": "<p>oh</p>",
        "id": 182509343,
        "sender_full_name": "oli",
        "timestamp": 1575416025
    },
    {
        "content": "<p>wait it should</p>",
        "id": 182509347,
        "sender_full_name": "oli",
        "timestamp": 1575416028
    },
    {
        "content": "<p>because as a i128 that's not a negative number</p>",
        "id": 182509368,
        "sender_full_name": "oli",
        "timestamp": 1575416042
    },
    {
        "content": "<p>so yes, that is supposed to fail</p>",
        "id": 182509421,
        "sender_full_name": "oli",
        "timestamp": 1575416067
    },
    {
        "content": "<p>is it there an ImmTy::from_uint or something?</p>",
        "id": 182509425,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575416072
    },
    {
        "content": "<p>probably if that's what you want :D</p>",
        "id": 182509435,
        "sender_full_name": "oli",
        "timestamp": 1575416088
    },
    {
        "content": "<p>(I'm not sure what your actual use case is, so this is getting XY-problemy)</p>",
        "id": 182509470,
        "sender_full_name": "oli",
        "timestamp": 1575416115
    },
    {
        "content": "<p>Kein problem</p>",
        "id": 182509482,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575416132
    },
    {
        "content": "<p>with that is enough, I can fix everything with that</p>",
        "id": 182509493,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575416144
    },
    {
        "content": "<p>I'll add a new method for unsigned ints</p>",
        "id": 182509554,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575416168
    },
    {
        "content": "<blockquote>\n<p>(I'm not sure what your actual use case is, so this is getting XY-problemy)</p>\n</blockquote>\n<p>So the problem was that some the values provided by <code>statx</code> are unsigned, and we didn't have a way to provide Immediates that were uints</p>",
        "id": 182551592,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575463414
    }
]