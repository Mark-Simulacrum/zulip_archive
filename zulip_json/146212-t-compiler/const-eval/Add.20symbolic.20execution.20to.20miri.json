[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>,  <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>. I'd like to start checking which parts of <a href=\"https://github.com/christianpoveda/sire\" target=\"_blank\" title=\"https://github.com/christianpoveda/sire\">https://github.com/christianpoveda/sire</a> can be properly integrated into miri. An small abstract of Oliver's first thoughts on the matter is here <a href=\"https://github.com/christianpoveda/sire/issues/1\" target=\"_blank\" title=\"https://github.com/christianpoveda/sire/issues/1\">https://github.com/christianpoveda/sire/issues/1</a></p>",
        "id": 168997614,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561521113
    },
    {
        "content": "<p>Interesting project!</p>",
        "id": 169005801,
        "sender_full_name": "RalfJ",
        "timestamp": 1561533589
    },
    {
        "content": "<p>I think at some point we have to decide how much extra \"messiness\" we are willing to tolerate in CTFE/Miri for a case like this. Extra code complexity means higher maintanance cost and, worse, more bugs, so that's something I am quite concerned about.</p>",
        "id": 169005860,
        "sender_full_name": "RalfJ",
        "timestamp": 1561533627
    },
    {
        "content": "<p>There's a reason I keep refactoring things in the Miri engine ;)</p>",
        "id": 169005866,
        "sender_full_name": "RalfJ",
        "timestamp": 1561533637
    },
    {
        "content": "<blockquote>\n<p>Interesting project!</p>\n</blockquote>\n<p>Thank you :)</p>\n<blockquote>\n<p>I think at some point we have to decide how much extra \"messiness\" we are willing to tolerate in CTFE/Miri for a case like this. Extra code complexity means higher maintanance cost and, worse, more bugs, so that's something I am quite concerned about.</p>\n</blockquote>\n<p>Well If i understand correctly, other than an additional associated type inside <code>Machine</code>, none of this wouldn't affect the <code>rustc</code>or <code>miri</code> repositories</p>",
        "id": 169032534,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561557570
    },
    {
        "content": "<p>there'll probably be some additional hooks that we'll need to add to the <code>Machine</code></p>",
        "id": 169032889,
        "sender_full_name": "oli",
        "timestamp": 1561557749
    },
    {
        "content": "<p>in miri and const eval these would be nops because their argument would be <code>!</code></p>",
        "id": 169032918,
        "sender_full_name": "oli",
        "timestamp": 1561557759
    },
    {
        "content": "<blockquote>\n<p>there'll probably be some additional hooks that we'll need to add to the <code>Machine</code></p>\n</blockquote>\n<p>Why?</p>",
        "id": 169033181,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561557885
    },
    {
        "content": "<p>the logic for running operators on symbols needs to live somewhere</p>",
        "id": 169033239,
        "sender_full_name": "oli",
        "timestamp": 1561557922
    },
    {
        "content": "<blockquote>\n<p>the logic for running operators on symbols needs to live somewhere</p>\n</blockquote>\n<p>Well we could let that in other repo until this is actually used for something</p>",
        "id": 169033404,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561558010
    },
    {
        "content": "<p>Shouldn't the current methods of  <code>Machine</code> be enough?</p>",
        "id": 169033993,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561558339
    },
    {
        "content": "<p>not sure :D</p>",
        "id": 169034022,
        "sender_full_name": "oli",
        "timestamp": 1561558361
    },
    {
        "content": "<p>they have reached a point of complexity where I don't remember what's in there</p>",
        "id": 169034041,
        "sender_full_name": "oli",
        "timestamp": 1561558377
    },
    {
        "content": "<p>Hahaha, I'm going to check the trait</p>",
        "id": 169034059,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561558389
    },
    {
        "content": "<p>Well it has more than we need. I did the first interpreter by immitating how miri executed code.</p>",
        "id": 169034962,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561558967
    },
    {
        "content": "<p>I guess we will discover what else <code>Machine</code> needs on the way</p>",
        "id": 169035438,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561559267
    },
    {
        "content": "<blockquote>\n<p>they have reached a point of complexity where I don't remember what's in there</p>\n</blockquote>\n<p>:(</p>",
        "id": 169076421,
        "sender_full_name": "RalfJ",
        "timestamp": 1561580476
    },
    {
        "content": "<p>I'm going to start working on this on local to see what else do we need</p>",
        "id": 169077022,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561580951
    },
    {
        "content": "<p>there's also still some work left for intptrcast :D</p>",
        "id": 169077131,
        "sender_full_name": "RalfJ",
        "timestamp": 1561581006
    },
    {
        "content": "<p>like, making sure that <code>&amp;x as *const _ as usize</code> actually does a cast</p>",
        "id": 169077158,
        "sender_full_name": "RalfJ",
        "timestamp": 1561581025
    },
    {
        "content": "<p>or what about a test that tries to print the address of a pointer?</p>",
        "id": 169077174,
        "sender_full_name": "RalfJ",
        "timestamp": 1561581042
    },
    {
        "content": "<p>Well, what about this. I'll work on intptrcast while you are awake and on this when you are not</p>",
        "id": 169077216,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561581077
    },
    {
        "content": "<p>;)</p>",
        "id": 169077290,
        "sender_full_name": "RalfJ",
        "timestamp": 1561581126
    },
    {
        "content": "<p>if you add \"while I am awake and have time\" there's not much time left :(</p>",
        "id": 169077300,
        "sender_full_name": "RalfJ",
        "timestamp": 1561581140
    },
    {
        "content": "<p>important paper deadline coming up</p>",
        "id": 169077308,
        "sender_full_name": "RalfJ",
        "timestamp": 1561581150
    },
    {
        "content": "<p>oh cool, where are you sending it?</p>",
        "id": 169077320,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561581168
    },
    {
        "content": "<p>but as long as we keep the intptrcast issue open so that this is still tracked, the current WIP implementation is a good start</p>",
        "id": 169077329,
        "sender_full_name": "RalfJ",
        "timestamp": 1561581180
    },
    {
        "content": "<blockquote>\n<p>oh cool, where are you sending it?</p>\n</blockquote>\n<p><a href=\"https://popl20.sigplan.org/\" target=\"_blank\" title=\"https://popl20.sigplan.org/\">https://popl20.sigplan.org/</a></p>",
        "id": 169077350,
        "sender_full_name": "RalfJ",
        "timestamp": 1561581203
    },
    {
        "content": "<p>I had a lot of fun reading the last one</p>",
        "id": 169077373,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561581235
    },
    {
        "content": "<p>had fun = learned something</p>",
        "id": 169077465,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561581304
    },
    {
        "content": "<p>:)</p>",
        "id": 169078391,
        "sender_full_name": "RalfJ",
        "timestamp": 1561582004
    },
    {
        "content": "<blockquote>\n<p>like, making sure that <code>&amp;x as *const _ as usize</code> actually does a cast</p>\n</blockquote>\n<p>How are <code>X as Y</code> casts handled inside miri?</p>",
        "id": 169078462,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561582075
    },
    {
        "content": "<p>they are in <code>librustc_mir/interpret/cast.rs</code></p>",
        "id": 169078704,
        "sender_full_name": "RalfJ",
        "timestamp": 1561582253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> there is a problem with adding the generic parameter to <code>Operand</code></p>",
        "id": 169148348,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561651423
    },
    {
        "content": "<p><code>!</code> does not implement the serialize traits :P</p>",
        "id": 169148360,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561651433
    },
    {
        "content": "<p>hmm... implement it? :D</p>",
        "id": 169148443,
        "sender_full_name": "oli",
        "timestamp": 1561651489
    },
    {
        "content": "<p>for real?</p>",
        "id": 169148460,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561651504
    },
    {
        "content": "<p>I mean the serialization part is just <code>match self {}</code></p>",
        "id": 169148486,
        "sender_full_name": "oli",
        "timestamp": 1561651529
    },
    {
        "content": "<p>and the deserialization is <code>bug!()</code></p>",
        "id": 169148497,
        "sender_full_name": "oli",
        "timestamp": 1561651537
    },
    {
        "content": "<p>I suppose that trying to serialize <code>!</code> should fail</p>",
        "id": 169148511,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561651549
    },
    {
        "content": "<p>nope</p>",
        "id": 169148515,
        "sender_full_name": "oli",
        "timestamp": 1561651555
    },
    {
        "content": "<p>that's dead code</p>",
        "id": 169148519,
        "sender_full_name": "oli",
        "timestamp": 1561651558
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 169148567,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561651568
    },
    {
        "content": "<p>you can't serialize a <code>!</code> because there are no values of that type</p>",
        "id": 169148568,
        "sender_full_name": "oli",
        "timestamp": 1561651569
    },
    {
        "content": "<p>yeah but what should the implementation do?</p>",
        "id": 169148581,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561651580
    },
    {
        "content": "<p><code>match self {}</code></p>",
        "id": 169148586,
        "sender_full_name": "oli",
        "timestamp": 1561651586
    },
    {
        "content": "<p>oh</p>",
        "id": 169148589,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561651591
    },
    {
        "content": "<p>duh</p>",
        "id": 169148593,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561651592
    },
    {
        "content": "<p>:D</p>",
        "id": 169148595,
        "sender_full_name": "oli",
        "timestamp": 1561651593
    },
    {
        "content": "<p>didn't get it the first time sorry</p>",
        "id": 169148598,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561651597
    },
    {
        "content": "<p>it's a weird thing, because <code>!</code> is essentially <code>enum Void {}</code></p>",
        "id": 169148639,
        "sender_full_name": "oli",
        "timestamp": 1561651634
    },
    {
        "content": "<p><code>bug!</code> is not available inside <code>serialize</code> should i add rustc as a dependency? or use something else?</p>",
        "id": 169149068,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561651925
    },
    {
        "content": "<p>just do <code>unreachable!()</code> then</p>",
        "id": 169150569,
        "sender_full_name": "oli",
        "timestamp": 1561653036
    },
    {
        "content": "<p>great</p>",
        "id": 169150578,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653043
    },
    {
        "content": "<p>did that  :P</p>",
        "id": 169150583,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653049
    },
    {
        "content": "<p>heh</p>",
        "id": 169150591,
        "sender_full_name": "oli",
        "timestamp": 1561653055
    },
    {
        "content": "<p>I'm having some trouble with the trait bounds</p>",
        "id": 169150596,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653058
    },
    {
        "content": "<p>When trying to implement <code>Debug</code> for <code>Operand&lt;'tcx, T&gt;</code> where <code>T</code> is bounded to implement all the required traits (including <code>Debug</code>), compilation fails telling me that none of the traits are implemented for <code>T</code></p>",
        "id": 169150752,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653176
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0277]: can&#39;t compare `T` with `T`\n    --&gt; src/librustc/mir/mod.rs:2325:15\n     |\n2325 | impl&lt;&#39;tcx, T&gt; Debug for Operand&lt;&#39;tcx, T&gt; {\n     |               ^^^^^ no implementation for `T == T`\n     |\n     = help: the trait `std::cmp::PartialEq` is not implemented for `T`\n     = help: consider adding a `where T: std::cmp::PartialEq` bound\nnote: required by `mir::Operand`\n    --&gt; src/librustc/mir/mod.rs:2304:1\n     |\n2304 | pub enum Operand&lt;&#39;tcx, T = ()&gt; where T: Clone + PartialEq + serialize::Encodable + serialize::Decodable {\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</pre></div>",
        "id": 169150785,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653204
    },
    {
        "content": "<p>use <code>impl&lt;'tcx, T: Debug&gt;</code> I think?</p>",
        "id": 169150867,
        "sender_full_name": "oli",
        "timestamp": 1561653278
    },
    {
        "content": "<p>wait huh? <code>PartialEq</code>?</p>",
        "id": 169150882,
        "sender_full_name": "oli",
        "timestamp": 1561653294
    },
    {
        "content": "<p>oh</p>",
        "id": 169150887,
        "sender_full_name": "oli",
        "timestamp": 1561653301
    },
    {
        "content": "<blockquote>\n<p>use <code>impl&lt;'tcx, T: Debug&gt;</code> I think?</p>\n</blockquote>\n<p>Yeah but why the compiler complains on the type definition and not in the <code>impl</code> block?</p>",
        "id": 169150894,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653306
    },
    {
        "content": "<p>you may have to repeat all bounds on the type</p>",
        "id": 169150898,
        "sender_full_name": "oli",
        "timestamp": 1561653308
    },
    {
        "content": "<p>it tells you it's required by the definition</p>",
        "id": 169150902,
        "sender_full_name": "oli",
        "timestamp": 1561653320
    },
    {
        "content": "<p>not erroring on the definition</p>",
        "id": 169150905,
        "sender_full_name": "oli",
        "timestamp": 1561653325
    },
    {
        "content": "<blockquote>\n<p>you may have to repeat all bounds on the type</p>\n</blockquote>\n<p>Oohhhhhh</p>",
        "id": 169150909,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653333
    },
    {
        "content": "<p>got it</p>",
        "id": 169150910,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653334
    },
    {
        "content": "<p>my bad</p>",
        "id": 169150911,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653335
    },
    {
        "content": "<p>repeat all bounds from the type on the impl</p>",
        "id": 169150928,
        "sender_full_name": "oli",
        "timestamp": 1561653351
    },
    {
        "content": "<p>the former statement may have been ambiguous</p>",
        "id": 169150983,
        "sender_full_name": "oli",
        "timestamp": 1561653365
    },
    {
        "content": "<p>yeah yeah got it</p>",
        "id": 169151004,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653380
    },
    {
        "content": "<p>I don't know why I was expecting that the compiler would infer that <code>T</code> has the bounds that are imposed in the <code>Operand</code> definition.</p>",
        "id": 169151049,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653423
    },
    {
        "content": "<p>well... you're not wrong in that assumption, there's a bunch of talk about that topic</p>",
        "id": 169151187,
        "sender_full_name": "oli",
        "timestamp": 1561653505
    },
    {
        "content": "<p>that sounds  like a nasty discussion TBH</p>",
        "id": 169151215,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653531
    },
    {
        "content": "<p>sometimes implicitness produces misunderstandings, I understand why this does not happen.</p>",
        "id": 169151275,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653586
    },
    {
        "content": "<p>carrying all that trait bounds around the implementation seems cumbersome</p>",
        "id": 169151644,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653896
    },
    {
        "content": "<p>I mean, I know why those are there, but It might look confusing to other people</p>",
        "id": 169151668,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561653919
    },
    {
        "content": "<p>Maybe there should be a supertrait for this?</p>",
        "id": 169151785,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561654013
    },
    {
        "content": "<p>trait alias if anything</p>",
        "id": 169153061,
        "sender_full_name": "oli",
        "timestamp": 1561654913
    },
    {
        "content": "<p>but I also don't know why the type has those bounds</p>",
        "id": 169153119,
        "sender_full_name": "oli",
        "timestamp": 1561654923
    },
    {
        "content": "<p>instead of just the appropriate impls</p>",
        "id": 169153140,
        "sender_full_name": "oli",
        "timestamp": 1561654936
    },
    {
        "content": "<p>maybe fallout from some bound inference issues we used to have</p>",
        "id": 169153150,
        "sender_full_name": "oli",
        "timestamp": 1561654948
    },
    {
        "content": "<p>maybe open an issue?</p>",
        "id": 169153157,
        "sender_full_name": "oli",
        "timestamp": 1561654954
    },
    {
        "content": "<p>(sorry, \"open an issue\" is my go-to thing right now since there's no point in me looking at anything for the next weeks)</p>",
        "id": 169153180,
        "sender_full_name": "oli",
        "timestamp": 1561654979
    },
    {
        "content": "<p>Sure no prob</p>",
        "id": 169160245,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561659356
    },
    {
        "content": "<p>This is just my side project while Ralf is busy/sleeping</p>",
        "id": 169160303,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561659370
    },
    {
        "content": "<p>more like melting, and hallucinating due to sleep deprivation^^</p>",
        "id": 169160516,
        "sender_full_name": "RalfJ",
        "timestamp": 1561659534
    },
    {
        "content": "<p>Anyway, I think I'll do an small list of what to do with the traits implemented  by Operand in this case</p>",
        "id": 169160524,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561659539
    },
    {
        "content": "<blockquote>\n<p>more like melting, and hallucinating due to sleep deprivation^^</p>\n</blockquote>\n<p>Nice way of making me to think twice about getting a PhD :P</p>",
        "id": 169160580,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561659579
    },
    {
        "content": "<blockquote>\n<p>Anyway, I think I'll do an small list of what to do with the traits implemented  by Operand in this case</p>\n</blockquote>\n<p>I don't know what is the proper place to do this, tecnically this is compiler code but is more related to miri, opening in the sire repo won't get enough visibility though.</p>",
        "id": 169160715,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561659644
    },
    {
        "content": "<blockquote>\n<p>Nice way of making me to think twice about getting a PhD :P</p>\n</blockquote>\n<p>it's mostly unrelated to my PhD and mostly related to it being &gt;35°C for the 4th day in a row, and my apartment being below the roof, so I have interior temperatures of &gt;30°C, which is too hot to sleep...</p>",
        "id": 169160902,
        "sender_full_name": "RalfJ",
        "timestamp": 1561659771
    },
    {
        "content": "<p>(and I'm also not really hallucinating. but I am sleep deprived.)</p>",
        "id": 169160978,
        "sender_full_name": "RalfJ",
        "timestamp": 1561659821
    },
    {
        "content": "<p>Oh I was thinking about this in a more abstract sense heheh</p>",
        "id": 169160984,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561659826
    },
    {
        "content": "<p>I have an irrelevant but relevant question, which one is better? <code>Operand::Atom</code> or <code>Operand::Symbol</code>? <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> has strong opinions on names so I'd like his opinion on this one</p>",
        "id": 169175526,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561669649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> some context would be nice :D what are the origins of these names?</p>",
        "id": 169177771,
        "sender_full_name": "RalfJ",
        "timestamp": 1561671433
    },
    {
        "content": "<p>and what about <code>Operand::Symbolic</code>?</p>",
        "id": 169177778,
        "sender_full_name": "RalfJ",
        "timestamp": 1561671439
    },
    {
        "content": "<p>So basically we want an operand variant to store symbols during symbolic execution</p>",
        "id": 169178084,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561671694
    },
    {
        "content": "<p>the idea is to use the MIR of a function as the instructions to propagate symbols representing the functions argument</p>",
        "id": 169178185,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561671771
    },
    {
        "content": "<p>and this <code>Operand::FancySymbolName</code> is the representation of such symbols</p>",
        "id": 169178355,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561671891
    },
    {
        "content": "<p>but won't this, in general, also be something like <code>x + 2</code>? Why should it always be an \"atom\"?</p>",
        "id": 169178505,
        "sender_full_name": "RalfJ",
        "timestamp": 1561671984
    },
    {
        "content": "<p>like, after <code>fn foo(x: i32) { let y = x+2; ... }</code></p>",
        "id": 169178579,
        "sender_full_name": "RalfJ",
        "timestamp": 1561672000
    },
    {
        "content": "<p>yes that is true</p>",
        "id": 169178637,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561672049
    },
    {
        "content": "<p>it was just because <code>Symbol</code> is already used inside <code>rustc</code> for something else, so the next word that came to my head was <code>Atom</code></p>",
        "id": 169178664,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561672075
    },
    {
        "content": "<p>so <code>Operand::Symbolic</code> it is?</p>",
        "id": 169178795,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561672149
    },
    {
        "content": "<blockquote>\n<p>so <code>Operand::Symbolic</code> it is?</p>\n</blockquote>\n<p>seems good to me</p>",
        "id": 169180780,
        "sender_full_name": "RalfJ",
        "timestamp": 1561673555
    },
    {
        "content": "<p>ok it seems I did not broke miri nor the compiler :D</p>",
        "id": 169180835,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561673638
    },
    {
        "content": "<p>always a good start :D</p>",
        "id": 169180917,
        "sender_full_name": "RalfJ",
        "timestamp": 1561673706
    },
    {
        "content": "<p>I did a PR with the new variant, it shouldn't be groundbreaking but I'll help me to get started working independently</p>",
        "id": 169188365,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561682275
    },
    {
        "content": "<p>Oh no <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> you picked the wrong Operand type</p>",
        "id": 169202306,
        "sender_full_name": "oli",
        "timestamp": 1561704448
    },
    {
        "content": "<blockquote>\n<p>Oh no <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> you picked the wrong Operand typr</p>\n</blockquote>\n<p>Was?</p>",
        "id": 169202311,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561704460
    },
    {
        "content": "<p>Es gibt andere Operand?</p>",
        "id": 169202315,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561704472
    },
    {
        "content": "<p>Jop</p>",
        "id": 169202316,
        "sender_full_name": "oli",
        "timestamp": 1561704477
    },
    {
        "content": "<p>ELI5 please</p>",
        "id": 169202362,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561704499
    },
    {
        "content": "<p>The miri engine has one</p>",
        "id": 169202363,
        "sender_full_name": "oli",
        "timestamp": 1561704501
    },
    {
        "content": "<p>In <a href=\"http://operand.rs\" target=\"_blank\" title=\"http://operand.rs\">operand.rs</a></p>",
        "id": 169202371,
        "sender_full_name": "oli",
        "timestamp": 1561704514
    },
    {
        "content": "<p>Ohhh the one with the <code>Immediates</code></p>",
        "id": 169202396,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561704569
    },
    {
        "content": "<p>The MIR one doesn't need to know about symbolic</p>",
        "id": 169202398,
        "sender_full_name": "oli",
        "timestamp": 1561704573
    },
    {
        "content": "<p>got it</p>",
        "id": 169202399,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561704573
    },
    {
        "content": "<p>Oops, sorry I should have checked when you first linked me to stuff</p>",
        "id": 169202417,
        "sender_full_name": "oli",
        "timestamp": 1561704600
    },
    {
        "content": "<p>In order to be able to use it in sire you'll need to also add the generic parameter to OpTy and as an associated type to the machine I believe</p>",
        "id": 169202509,
        "sender_full_name": "oli",
        "timestamp": 1561704689
    },
    {
        "content": "<p>ok let me \"undo\" this</p>",
        "id": 169202520,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561704708
    },
    {
        "content": "<p>Hehe what would we do without git</p>",
        "id": 169202575,
        "sender_full_name": "oli",
        "timestamp": 1561704732
    },
    {
        "content": "<p>How do ppl still use svn or dated folder copies... oh off topic rant</p>",
        "id": 169202610,
        "sender_full_name": "oli",
        "timestamp": 1561704775
    },
    {
        "content": "<p>I knew of a company that used DROPBOX!</p>",
        "id": 169202622,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561704797
    },
    {
        "content": "<p>And they probably thought they were modern because cloud and stuff</p>",
        "id": 169202639,
        "sender_full_name": "oli",
        "timestamp": 1561704826
    },
    {
        "content": "<p>well they did web applications so they used everything that had hype, could you imagine dropbox syncing the node_modules folder?</p>",
        "id": 169202706,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561704899
    },
    {
        "content": "<p>I think if you make the Frame's locals array use of OpTy generic over the Machine associated type for the symbols, the compiler should tell you all the other places that need changing</p>",
        "id": 169202723,
        "sender_full_name": "oli",
        "timestamp": 1561704930
    },
    {
        "content": "<p>I'm not sure I want to know more, I have a nightmare free sleep and want to keep it</p>",
        "id": 169202732,
        "sender_full_name": "oli",
        "timestamp": 1561704957
    },
    {
        "content": "<blockquote>\n<p>I'm not sure I want to know more, I have a nightmare free sleep and want to keep it</p>\n</blockquote>\n<p>Sorry for ruining your holiday</p>",
        "id": 169202775,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561704977
    },
    {
        "content": "<p>I'm going to add the parameter to the Operand type first and see what's up there</p>",
        "id": 169202789,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561705021
    },
    {
        "content": "<p>Still working today</p>",
        "id": 169202803,
        "sender_full_name": "oli",
        "timestamp": 1561705071
    },
    {
        "content": "<p>I don't want to check my work email, there is stuff in that inbox that makes the dropbox think look ok in comparison</p>",
        "id": 169202879,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561705174
    },
    {
        "content": "<p>Ohh, it is ok to default the associated type inside Machine to never also?</p>",
        "id": 169202942,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561705235
    },
    {
        "content": "<p>Because default assoc types are unstable IIRC</p>",
        "id": 169202951,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561705249
    },
    {
        "content": "<p>Yes</p>",
        "id": 169202952,
        "sender_full_name": "oli",
        "timestamp": 1561705250
    },
    {
        "content": "<p>Oh</p>",
        "id": 169202954,
        "sender_full_name": "oli",
        "timestamp": 1561705255
    },
    {
        "content": "<p>Maybe don't do it then</p>",
        "id": 169202966,
        "sender_full_name": "oli",
        "timestamp": 1561705269
    },
    {
        "content": "<p>Just make miri and const eval use <code>!</code></p>",
        "id": 169202972,
        "sender_full_name": "oli",
        "timestamp": 1561705287
    },
    {
        "content": "<p>Will do</p>",
        "id": 169202975,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561705294
    },
    {
        "content": "<p>Defaulted assoc types are problematic</p>",
        "id": 169202980,
        "sender_full_name": "oli",
        "timestamp": 1561705302
    },
    {
        "content": "<p>I keep forgetting</p>",
        "id": 169202983,
        "sender_full_name": "oli",
        "timestamp": 1561705310
    },
    {
        "content": "<p>how so?</p>",
        "id": 169202984,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561705312
    },
    {
        "content": "<p>Iirc they cause defaulted method bodies to disappear if you have a custom type for the defaulted assoc type</p>",
        "id": 169203047,
        "sender_full_name": "oli",
        "timestamp": 1561705377
    },
    {
        "content": "<p>So sire would have to impl all machine methods</p>",
        "id": 169203055,
        "sender_full_name": "oli",
        "timestamp": 1561705391
    },
    {
        "content": "<p>Oh tbh it probably has to do that anyway</p>",
        "id": 169203068,
        "sender_full_name": "oli",
        "timestamp": 1561705415
    },
    {
        "content": "<p>But it's not the end of the world to have miri break and make it add an assoc type</p>",
        "id": 169203126,
        "sender_full_name": "oli",
        "timestamp": 1561705448
    },
    {
        "content": "<p>:P</p>",
        "id": 169203206,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561705565
    },
    {
        "content": "<p>do you have any kewl names for the assoc type inside machine?</p>",
        "id": 169203215,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561705576
    },
    {
        "content": "<p>SymbolicSymbol?</p>",
        "id": 169203218,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561705583
    },
    {
        "content": "<p>XD why not just <code>Symbolic</code>?</p>",
        "id": 169203400,
        "sender_full_name": "oli",
        "timestamp": 1561705848
    },
    {
        "content": "<p>/me invokes <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> for naming conventions</p>",
        "id": 169203465,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561705934
    },
    {
        "content": "<p>Maybe will do the assoc type in Machine in a different PR, because that one is going to break miri for sure :P</p>",
        "id": 169204036,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561706722
    },
    {
        "content": "<p><code>SymbolicValue</code>? <code>SymbolicOperand</code>? <code>Symbol</code>? Not sure^^</p>",
        "id": 169205407,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708487
    },
    {
        "content": "<p>Ok the PR for Operand is ready, it does not break any tests (including miri)</p>",
        "id": 169205485,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561708602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> oh you want to just do the <code>OpTy</code> and <code>Operand</code> changes and start using these in sire?</p>",
        "id": 169209882,
        "sender_full_name": "oli",
        "timestamp": 1561713419
    },
    {
        "content": "<p>without resorting to using an <code>InterpCx</code> yet</p>",
        "id": 169209892,
        "sender_full_name": "oli",
        "timestamp": 1561713428
    },
    {
        "content": "<p>Yeah I still need to start migrating the machine methods</p>",
        "id": 169220338,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561725121
    },
    {
        "content": "<p>I think I can tape up everything Else if I need to</p>",
        "id": 169220385,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561725150
    },
    {
        "content": "<p>patch with tape*</p>",
        "id": 169226933,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561730501
    },
    {
        "content": "<p>Should I continue this or should we let this for lateR?</p>",
        "id": 171443558,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563811449
    },
    {
        "content": "<p>I tried to access the PR on github but the site is returning a 500 error :P</p>",
        "id": 171443588,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563811467
    }
]