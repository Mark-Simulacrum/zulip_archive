[
    {
        "content": "<p>As noted by <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> in <a href=\"https://github.com/rust-lang/rust/issues/79597\">#79597</a> if we allow <code>const fn</code> to perform heap allocations, we can have a const fn that, even if it has no arguments, will return a new value (pointer to new heap allocation) with every invocation. Right now, there is no difference between a <code>const FOO: T = ...;</code>and a <code>const fn foo() -&gt; T { ... }</code> in terms of how it is evaluated.</p>",
        "id": 218429881,
        "sender_full_name": "oli",
        "timestamp": 1606833567
    },
    {
        "content": "<p>One way to solve this problem is to not allow <code>const fn</code> to use <code>GlobalAlloc</code> directly. The only way this type may occur is via generics. This means that <em>all</em> <code>const fn</code> that transitively do any kind of heap stuff need to have a generic parameter for the allocator. <code>const</code>/<code>static</code> items will then be able to invoke <code>const fn</code> and pass the <code>Global</code> allocator argument to them</p>",
        "id": 218430255,
        "sender_full_name": "oli",
        "timestamp": 1606833747
    },
    {
        "content": "<p>I don't see how that helps</p>",
        "id": 218430432,
        "sender_full_name": "RalfJ",
        "timestamp": 1606833844
    },
    {
        "content": "<p>We can then make const functions that have a generic parameter for the allocator type impure. This would make <code>AllocRef</code> a lang item</p>",
        "id": 218430479,
        "sender_full_name": "oli",
        "timestamp": 1606833863
    },
    {
        "content": "<p>we still end up with a function that has signature <code>const fn() -&gt; T</code> (after instantiating the generic parameter) that is not pure</p>",
        "id": 218430483,
        "sender_full_name": "RalfJ",
        "timestamp": 1606833865
    },
    {
        "content": "<p>this is a syntactic hack that falls short once you go higher-order</p>",
        "id": 218430527,
        "sender_full_name": "RalfJ",
        "timestamp": 1606833888
    },
    {
        "content": "<p>you mean when you put it in a function pointer?</p>",
        "id": 218430574,
        "sender_full_name": "oli",
        "timestamp": 1606833906
    },
    {
        "content": "<p>yes, or a trait object</p>",
        "id": 218430621,
        "sender_full_name": "RalfJ",
        "timestamp": 1606833943
    },
    {
        "content": "<p>we'll always know whether the function pointer had a generic heap argument when looking at the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/interpret/enum.GlobalAlloc.html\"><code>GlobalAlloc::Function</code></a></p>",
        "id": 218430782,
        "sender_full_name": "oli",
        "timestamp": 1606834012
    },
    {
        "content": "<p>or are you talking about runtime?</p>",
        "id": 218430798,
        "sender_full_name": "oli",
        "timestamp": 1606834019
    },
    {
        "content": "<p>I am talking about statically in the type system</p>",
        "id": 218431808,
        "sender_full_name": "RalfJ",
        "timestamp": 1606834454
    },
    {
        "content": "<p>one point of <code>const fn</code> being pure is that unsafe code can use the type<code>const fn()</code> and then rely, for safety, on the fact that this function is pure</p>",
        "id": 218431868,
        "sender_full_name": "RalfJ",
        "timestamp": 1606834487
    },
    {
        "content": "<p>So... I have one more card in my sleeve that I hoped I wouldn't have to use. It's probably not feasible, but here we go:</p>\n<p>Just like <code>alloc_in</code> is what actually allows arbitrary allocators and not just those with <code>Default</code> bounds like <code>Global</code>, we can make <code>ConstGlobal</code> not be <code>ZST</code> and thus require that all function pass this value down. We then ensure that you can only create values of type <code>ConstGlobal</code> within <code>const</code>/<code>static</code> items, but not within <code>const fn</code>. We'll just need to figure out how to prevent you from returning values of type <code>ConstGlobal</code> in the final value of a <code>const</code> item, otherwise a <code>const fn</code> can just use a <code>const</code> item that gives you a <code>ConstGlobal</code> value</p>",
        "id": 218432782,
        "sender_full_name": "oli",
        "timestamp": 1606834880
    },
    {
        "content": "<p>hm... interesting. I think you just described a lightweight effect system :D</p>",
        "id": 218444625,
        "sender_full_name": "RalfJ",
        "timestamp": 1606839496
    }
]