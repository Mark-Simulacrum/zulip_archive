[
    {
        "content": "<p>What would be the blockers for using <a href=\"https://crates.io/crates/bitflags\">bitflags</a> as the value of a <code>const</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">MY_FLAGS</span>: <span class=\"nc\">SomeFlags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SomeFlags</span>::<span class=\"n\">A</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">SomeFlags</span>::<span class=\"n\">B</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205067602,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595797922
    },
    {
        "content": "<p>Unless we special case it somehow, const traits or their equivalent, I think.</p>\n<p>But you should be able to do something like <code>const MY_FLAGS: SomeFlags = SomeFlags::new(SomeFlags::A.bits | SomeFlags::B.bits);</code> today perhaps?</p>",
        "id": 205067845,
        "sender_full_name": "simulacrum",
        "timestamp": 1595798292
    },
    {
        "content": "<p>I guess it'd be <code>SomeFlags::from_bits_truncate(SomeFlags::A.bits() | SomeFlags::B.bits());</code></p>",
        "id": 205067854,
        "sender_full_name": "simulacrum",
        "timestamp": 1595798358
    },
    {
        "content": "<p>Ah, interesting. I don't think I care strongly enough about working around it to make a constant that I'd want to dig into <code>.bits</code> like that, but nonetheless that's good to know.</p>",
        "id": 205072332,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595807344
    },
    {
        "content": "<p>Though, hmmm, I could wrap that in a macro.</p>",
        "id": 205072765,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595808136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Thanks!</p>",
        "id": 205072766,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595808143
    }
]