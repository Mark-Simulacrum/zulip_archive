[
    {
        "content": "<p>What's the reason I can't make use of <code>async {}</code> expressions to initialize a static? That seems like something that should work, as long as I'm not trying to actually <code>.await</code> during CTFE, no?</p>",
        "id": 238847961,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621039438
    },
    {
        "content": "<p>How can you possibly use it? You can't name the type - the only thing I can imagine is <code>drop(async {})</code></p>",
        "id": 238848296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621039707
    },
    {
        "content": "<p><code>impl_trait_in_bindings</code> and <code>static MY_FUTURE: impl Future = async {};</code></p>",
        "id": 238848326,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621039746
    },
    {
        "content": "<p>&amp; pin &amp; interior mutability to actually poll it at runtime, but that's details</p>",
        "id": 238848353,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621039790
    },
    {
        "content": "<p>Oddly, <code>static FOO: impl Fn() = || drop(async {});</code> actually works</p>",
        "id": 238854196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621041412
    },
    {
        "content": "<p>That doesn't evaluate the <code>async {}</code> block in constexpr, though.</p>",
        "id": 238854562,
        "sender_full_name": "Connor Horman",
        "timestamp": 1621041497
    },
    {
        "content": "<p>constexpr is apparently smarter than I thought</p>",
        "id": 238854718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1621041544
    },
    {
        "content": "<p>We don't allow capturing closures in const contexts either. There's no real problem with allowing them as far as I can remember, so maybe we just need to add a feature gate for them</p>",
        "id": 238878795,
        "sender_full_name": "oli",
        "timestamp": 1621065730
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.60async.60.20blocks.20in.20statics/near/238878795\">said</a>:</p>\n<blockquote>\n<p>We don't allow capturing closures in const contexts either.</p>\n</blockquote>\n<p>Hmm, but this code builds on nightly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(impl_trait_in_bindings)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">future</span>::<span class=\"n\">Future</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">PROTOTHREAD</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 238901688,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621088763
    },
    {
        "content": "<p>oh wow, that all went just by me. But it does make sense from our impl side</p>",
        "id": 238902985,
        "sender_full_name": "oli",
        "timestamp": 1621090077
    },
    {
        "content": "<p>heh, yeah, allowing this seems relatively harmless</p>",
        "id": 238903070,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621090111
    },
    {
        "content": "<p>I might work on a feature gate for <code>async</code> block then</p>",
        "id": 238903076,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621090120
    },
    {
        "content": "<p>yea, with a feature for that, <code>static MY_FUTURE: &amp;(dyn Future&lt;Output = ()&gt; + Sync) = &amp;async {};</code> should work without additional features</p>",
        "id": 238903258,
        "sender_full_name": "oli",
        "timestamp": 1621090300
    },
    {
        "content": "<p>and since closures are already out of the bag... we have to figure out how to potentially allow calling them in the future anyway. Right now I don't think a closure's body needs to be const fn</p>",
        "id": 238903370,
        "sender_full_name": "oli",
        "timestamp": 1621090397
    },
    {
        "content": "<p>presumably that would tie in with <code>impl const Fn</code> then?</p>",
        "id": 238903507,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621090555
    },
    {
        "content": "<p>maybe we could combine this with <code>const {}</code> expressions â€“ using that as the closure body could give you an <code>impl const Fn for [closure]</code> and makes it callable in const contexts</p>",
        "id": 238903837,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621090839
    },
    {
        "content": "<p><code>const |x| y</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 238906318,
        "sender_full_name": "oli",
        "timestamp": 1621093249
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/pull/85353\">https://github.com/rust-lang/rust/pull/85353</a> to allow async blocks :)</p>",
        "id": 238934989,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621123662
    }
]