[
    {
        "content": "<p>Even when const <code>if</code> is implemented, we don't want to promote code like <code>&amp;(if true { 5 } else { 6 })</code>. However, we may want to do promotion when that <code>if</code> statement appears in the definition of a <code>const</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BRANCHY</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">BRANCHY</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176501820,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569356390
    },
    {
        "content": "<p>If we do not want to promote <code>BRANCHY</code> in the previous code, we have a bit of a problem with backwards compatibility because of the way we lower <code>&amp;&amp;</code> and <code>||</code> to allow them in <code>const</code>s.</p>",
        "id": 176501999,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569356490
    },
    {
        "content": "<p>Namely, <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ece0858d50bc2fc32d534b2eaec53634\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ece0858d50bc2fc32d534b2eaec53634\">this code</a> compiles on stable but would stop compiling if we removed the destroy control flow hack that allows short circuiting logic in consts.</p>",
        "id": 176502160,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569356572
    },
    {
        "content": "<p>I think that we're happy to promote such <code>const</code>s. We don't promote most <code>const fn</code>, but do promote <code>const</code>s that use them.</p>",
        "id": 176502161,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569356572
    },
    {
        "content": "<p>You've not linked to you're actual example there.</p>",
        "id": 176502259,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569356634
    },
    {
        "content": "<p>Does \"this code\" not have a hyperlink?</p>",
        "id": 176502342,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569356661
    },
    {
        "content": "<p>It's linking to <code>https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018</code></p>",
        "id": 176502361,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569356683
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BOO</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">BOO</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176502382,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569356701
    },
    {
        "content": "<p>oh duh sorry</p>",
        "id": 176502405,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569356709
    },
    {
        "content": "<p>yea, we promote constants by looking at their type, nothing else</p>",
        "id": 176502460,
        "sender_full_name": "oli",
        "timestamp": 1569356761
    },
    {
        "content": "<p>(I think?)</p>",
        "id": 176502510,
        "sender_full_name": "oli",
        "timestamp": 1569356768
    },
    {
        "content": "<p>I guess the question is: is there any time where we don't want to promote <code>&amp;CONST</code>?</p>",
        "id": 176502523,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569356775
    },
    {
        "content": "<p>So part of the result of the <code>mir_const_qualif</code> query is the qualifications of the return place of that <code>const</code></p>",
        "id": 176502565,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569356811
    },
    {
        "content": "<p>so even <code>const FOO: Option&lt;Cell&lt;u32&gt;&gt; = None;</code> should not get promoted</p>",
        "id": 176502570,
        "sender_full_name": "oli",
        "timestamp": 1569356813
    },
    {
        "content": "<p>I'm wrong</p>",
        "id": 176502630,
        "sender_full_name": "oli",
        "timestamp": 1569356861
    },
    {
        "content": "<p>obviously</p>",
        "id": 176502654,
        "sender_full_name": "oli",
        "timestamp": 1569356865
    },
    {
        "content": "<p>uh</p>",
        "id": 176502658,
        "sender_full_name": "oli",
        "timestamp": 1569356866
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/6ef275e6c3cb1384ec78128eceeb4963ff788dca/src/librustc_mir/transform/qualify_consts.rs#L1012\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6ef275e6c3cb1384ec78128eceeb4963ff788dca/src/librustc_mir/transform/qualify_consts.rs#L1012\">https://github.com/rust-lang/rust/blob/6ef275e6c3cb1384ec78128eceeb4963ff788dca/src/librustc_mir/transform/qualify_consts.rs#L1012</a></p>",
        "id": 176502720,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569356891
    },
    {
        "content": "<p>yea</p>",
        "id": 176502739,
        "sender_full_name": "oli",
        "timestamp": 1569356904
    },
    {
        "content": "<p>but that should still work out correctly in your scheme, right?</p>",
        "id": 176502754,
        "sender_full_name": "oli",
        "timestamp": 1569356918
    },
    {
        "content": "<p>we'd get the worst qualifs of both arms</p>",
        "id": 176502778,
        "sender_full_name": "oli",
        "timestamp": 1569356931
    },
    {
        "content": "<p><code>const FOO: Option&lt;Cell&lt;u32&gt;&gt; = if false { Some(Cell::new(42)) } else {None};</code> will prevent <code>FOO</code> from getting promoted</p>",
        "id": 176502859,
        "sender_full_name": "oli",
        "timestamp": 1569356984
    },
    {
        "content": "<p>Yes, this is only tangentially related to dataflow-based qualification</p>",
        "id": 176502956,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569357020
    },
    {
        "content": "<p>At the moment, <code>const BRANCHY: i32 = if true { 5 } else { 6 };</code> will also (I believe) be marked as unpromotable, because the return place is assigned to more than once.</p>",
        "id": 176503028,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569357069
    },
    {
        "content": "<p>The question is whether we want that behavior or if we want to mark <code>BRANCHY</code> as promotable</p>",
        "id": 176503275,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569357225
    },
    {
        "content": "<p>so this is a fun topic, because I've repeatedly tried to make the promotability depend on the <em>value</em> of the constant, so we could just eval it instead of looking at it</p>",
        "id": 176503476,
        "sender_full_name": "oli",
        "timestamp": 1569357340
    },
    {
        "content": "<p>then we'd only have to keep looking at associated constants</p>",
        "id": 176503540,
        "sender_full_name": "oli",
        "timestamp": 1569357365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> hates me a bit more every time I bring it up, so obviously I'm gonna ping them</p>",
        "id": 176503575,
        "sender_full_name": "oli",
        "timestamp": 1569357402
    },
    {
        "content": "<p>anyway</p>",
        "id": 176503577,
        "sender_full_name": "oli",
        "timestamp": 1569357406
    },
    {
        "content": "<p>Doesn't <code>qualifs = self.qualifs_in_any_value_of_ty(body.return_ty());</code> ensure that integer constants are always promotable.</p>",
        "id": 176503595,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1569357421
    },
    {
        "content": "<p>Do you know if there's anything that could someday appear in a <code>const</code> body that would make us not want to promote <code>&amp;CONST</code> (stuff that's not covered by <code>HasMutInterior</code> and <code>NeedsDrop</code>? Maybe <code>!Sync</code> stuff?</p>",
        "id": 176503754,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569357519
    },
    {
        "content": "<p>Ah yes, that's correct</p>",
        "id": 176503767,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569357526
    },
    {
        "content": "<p>btw, that line will <em>always</em> clear <code>IsNotPromotable</code> for every type, but sometimes not <code>IsNotImplicitlyPromotable</code> due to the <code>Option&lt;bool&gt;</code> returned by <code>Qualif::in_any_value_of_ty</code></p>",
        "id": 176504006,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1569357657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is probably very interested in the <code>!Sync</code> question</p>",
        "id": 176504157,
        "sender_full_name": "oli",
        "timestamp": 1569357753
    },
    {
        "content": "<p>but I think the <code>Sync</code> thing is not something we can actually fix, I think it was cratered and bascially unfixable</p>",
        "id": 176504207,
        "sender_full_name": "oli",
        "timestamp": 1569357793
    },
    {
        "content": "<p>we could start linting it though</p>",
        "id": 176504250,
        "sender_full_name": "oli",
        "timestamp": 1569357821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> my understanding is that the Sync stuff is a soundness hole?... so then we must fix it</p>",
        "id": 176510338,
        "sender_full_name": "centril",
        "timestamp": 1569362084
    },
    {
        "content": "<blockquote>\n<p>I'm wrong</p>\n</blockquote>\n<p>What exactly were you wrong about?</p>",
        "id": 176510352,
        "sender_full_name": "centril",
        "timestamp": 1569362103
    },
    {
        "content": "<p><code>const FOO: Option&lt;Cell&lt;u32&gt;&gt; = None;</code> gets promoted</p>",
        "id": 176510373,
        "sender_full_name": "oli",
        "timestamp": 1569362124
    },
    {
        "content": "<p>so <code>&amp;FOO</code> is <code>&amp;'static Option&lt;Cell&lt;u32&gt;&gt;</code></p>",
        "id": 176510385,
        "sender_full_name": "oli",
        "timestamp": 1569362141
    },
    {
        "content": "<p>right; so we don't just look at the type</p>",
        "id": 176510449,
        "sender_full_name": "centril",
        "timestamp": 1569362170
    },
    {
        "content": "<p>well, we could start with a future incompat lint based on <a href=\"https://github.com/rust-lang/rust/pull/54424\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54424\">https://github.com/rust-lang/rust/pull/54424</a></p>",
        "id": 176510501,
        "sender_full_name": "oli",
        "timestamp": 1569362217
    },
    {
        "content": "<blockquote>\n<p>right; so we don't just look at the type</p>\n</blockquote>\n<p>that's what I meant with \"I'm wrong\" :D</p>",
        "id": 176510521,
        "sender_full_name": "oli",
        "timestamp": 1569362238
    },
    {
        "content": "<p>and we're using zulip the wrong way</p>",
        "id": 176510527,
        "sender_full_name": "oli",
        "timestamp": 1569362243
    },
    {
        "content": "<p>having two conversations in one topic</p>",
        "id": 176510535,
        "sender_full_name": "oli",
        "timestamp": 1569362259
    },
    {
        "content": "<blockquote>\n<p>so even <code>const FOO: Option&lt;Cell&lt;u32&gt;&gt; = None;</code> should not get promoted</p>\n</blockquote>\n<p>this is promotion looking into the initializer of a const, right? dang I almost forgot about that.<br>\nwe should re-fomulate this check as just looking at the final <em>value</em>, not the code computing it.</p>",
        "id": 177710707,
        "sender_full_name": "RalfJ",
        "timestamp": 1570625947
    },
    {
        "content": "<p>oh lol <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> already said that :)</p>",
        "id": 177710744,
        "sender_full_name": "RalfJ",
        "timestamp": 1570625978
    },
    {
        "content": "<blockquote>\n<p>but I think the <code>Sync</code> thing is not something we can actually fix, I think it was cratered and bascially unfixable</p>\n</blockquote>\n<p>yeah I want to come back to this eventually and see what we can do, but it's a sad mess</p>",
        "id": 177710848,
        "sender_full_name": "RalfJ",
        "timestamp": 1570626025
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> my understanding is that the Sync stuff is a soundness hole?... so then we must fix it</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  well I think it is but our spec isn't detailed enough to give a definite answer ;)</p>",
        "id": 177710880,
        "sender_full_name": "RalfJ",
        "timestamp": 1570626061
    },
    {
        "content": "<p>FTR, the issue for that is <a href=\"https://github.com/rust-lang/rust/issues/49206\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49206\">https://github.com/rust-lang/rust/issues/49206</a></p>",
        "id": 177710905,
        "sender_full_name": "RalfJ",
        "timestamp": 1570626074
    },
    {
        "content": "<p>yeah that's fair</p>",
        "id": 177711000,
        "sender_full_name": "centril",
        "timestamp": 1570626124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> back from vacation btw?</p>",
        "id": 177711015,
        "sender_full_name": "centril",
        "timestamp": 1570626131
    },
    {
        "content": "<p>I am, yes (the last 2 weeks was travelling for work, not vacation)</p>",
        "id": 177711036,
        "sender_full_name": "RalfJ",
        "timestamp": 1570626147
    },
    {
        "content": "<p>just 606 emails to go in my Rust folder :P</p>",
        "id": 177711045,
        "sender_full_name": "RalfJ",
        "timestamp": 1570626153
    },
    {
        "content": "<p>oh, and two POPL papers to revise, and a talk to prepare, and a thesis to write...</p>",
        "id": 177711068,
        "sender_full_name": "RalfJ",
        "timestamp": 1570626171
    },
    {
        "content": "<p>Jesus mother of...</p>",
        "id": 177711087,
        "sender_full_name": "centril",
        "timestamp": 1570626183
    },
    {
        "content": "<p>so coming back to value-based promotion, my hope was that <a href=\"https://github.com/rust-rfcs/const-eval/pull/27\" target=\"_blank\" title=\"https://github.com/rust-rfcs/const-eval/pull/27\">https://github.com/rust-rfcs/const-eval/pull/27</a> could help move in that direction by getting a better understanding of what it even is that we need</p>",
        "id": 177719070,
        "sender_full_name": "RalfJ",
        "timestamp": 1570631424
    },
    {
        "content": "<p>and these days we have the value visitor which could be used to give more precise answers  to questions like \"will dropping this value do anything\"</p>",
        "id": 177719091,
        "sender_full_name": "RalfJ",
        "timestamp": 1570631446
    },
    {
        "content": "<p><code>Option&lt;Cell&lt;u32&gt;&gt;</code> is particularly interesting though because I just recently changed Stacked Borrows to no longer be \"value-based\" here and instead treat this like a union... because otherwise things just become crazy complicated</p>",
        "id": 177719165,
        "sender_full_name": "RalfJ",
        "timestamp": 1570631496
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/204\" target=\"_blank\" title=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/204\">https://github.com/rust-lang/unsafe-code-guidelines/issues/204</a></p>",
        "id": 177719195,
        "sender_full_name": "RalfJ",
        "timestamp": 1570631519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> ^</p>",
        "id": 177719251,
        "sender_full_name": "RalfJ",
        "timestamp": 1570631534
    }
]