[
    {
        "content": "<p>To expand on my previous question, I'm sure this something yous are thinking about too, but what do yous see as the limits to constness, for example in a hypothetical future would be possible to write the following example or is that too far?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">JSON</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">&quot;./file.json&quot;</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 202359547,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1593460179
    },
    {
        "content": "<p>I don't think that will happen. The soundness of the type system depends on const-eval being deterministic. Reading a file from the disk is not.</p>",
        "id": 202359722,
        "sender_full_name": "bjorn3",
        "timestamp": 1593460273
    },
    {
        "content": "<p>Relevant: <a href=\"https://github.com/rust-lang/const-eval/issues/44\">https://github.com/rust-lang/const-eval/issues/44</a></p>",
        "id": 202359778,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593460313
    },
    {
        "content": "<p>I've seen people talk about <em>writing</em> to files even</p>",
        "id": 202361499,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593461213
    },
    {
        "content": "<blockquote>\n<p>writing to files</p>\n</blockquote>\n<p>Just pull a page from Miri's book and make all these functions return an acceptable-but-not-what-you-expect value, like always <code>Err</code> ;-)</p>",
        "id": 202362265,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593461689
    },
    {
        "content": "<p>or maybe use the proposed <code>unconst</code> to be able to do it, as if it were some sort of unsafe for const?</p>",
        "id": 202364546,
        "sender_full_name": "pachi",
        "timestamp": 1593462926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Limits.20of.20constness/near/202361499\">said</a>:</p>\n<blockquote>\n<p>I've seen people talk about <em>writing</em> to files even</p>\n</blockquote>\n<p>We can't have allow writing and reading to the same during const-eval. Otherwise you would be able to observe the order in which constants are evaluated.</p>",
        "id": 202366575,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1593463985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219696\">XAMPPRocky</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Limits.20of.20constness/near/202359547\">said</a>:</p>\n<blockquote>\n<p>To expand on my previous question, I'm sure this something yous are thinking about too, but what do yous see as the limits to constness, for example in a hypothetical future would be possible to write the following example or is that too far?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">JSON</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"s\">&quot;./file.json&quot;</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n</blockquote>\n<p>I assume the real use-case is more complex, but it's worth noting that this is just <code>include_str</code>.</p>",
        "id": 202366861,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1593464156
    },
    {
        "content": "<p>Yeah this came up in another thread here on the weekend.</p>\n<p>For almost all common cases like this you can <code>include[_str|_bytes]!</code> your file data and then const process that into whatever.</p>",
        "id": 202381101,
        "sender_full_name": "Lokathor",
        "timestamp": 1593474490
    },
    {
        "content": "<p>How important is the use-case of being able to read a file during compilation?</p>",
        "id": 202386881,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593480882
    },
    {
        "content": "<p>Because you could think of... maybe a binary that you could compile with a set configuration</p>",
        "id": 202386892,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593480910
    },
    {
        "content": "<p>So that it didn't have to do it on startup otherwise</p>",
        "id": 202386896,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593480934
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Limits.20of.20constness/near/202381101\">said</a>:</p>\n<blockquote>\n<p>For almost all common cases like this you can <code>include[_str|_bytes]!</code> your file data and then const process that into whatever.</p>\n</blockquote>\n<p>That. The only use case for reading files during const eval instead of during parsing is to be able to compute which files to import. So if you want to import all of <code>foo*.txt</code> where <code>*</code> is <code>0..100</code>, then doing that with <code>include_*!</code> is a pain</p>",
        "id": 202398438,
        "sender_full_name": "oli",
        "timestamp": 1593497365
    },
    {
        "content": "<p>Yeah to be clear I just was using that as simple example of \"something that touches the filesystem\". I'm more interested in knowing how much subset of Rust do people see const-eval being and where will I still have to resort to a procedural macro?</p>",
        "id": 202415160,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1593510914
    },
    {
        "content": "<p>Do you really want to have a look at the horrors I have in mind?</p>",
        "id": 202426840,
        "sender_full_name": "oli",
        "timestamp": 1593519546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Limits.20of.20constness/near/202426840\">said</a>:</p>\n<blockquote>\n<p>Do you really want to have a look at the horrors I have in mind?</p>\n</blockquote>\n<p>by default the answer to this is yes</p>",
        "id": 202426866,
        "sender_full_name": "mental",
        "timestamp": 1593519574
    },
    {
        "content": "<p>So... I'll post some random things that come to mind, not sure if I've written them down anywhere in a coherent fashion</p>",
        "id": 202426958,
        "sender_full_name": "oli",
        "timestamp": 1593519619
    },
    {
        "content": "<p>My favorite \"you currently need a proc macro and crazy trait bounds for this\" feature that const eval could support is <em>declaring types</em>. So basically I want to be able to programattically place fields at any point and invent new enum optimizations. I want const eval to be able to emit a struct describing types and use <code>type Foo = const { ... };</code> syntax for it.</p>",
        "id": 202427192,
        "sender_full_name": "oli",
        "timestamp": 1593519795
    },
    {
        "content": "<p>In its simplest form this will allow you to create <code>NonZeroU8</code> in user code without it being a newtype tuple struct around <code>u8</code>.</p>",
        "id": 202427294,
        "sender_full_name": "oli",
        "timestamp": 1593519855
    },
    {
        "content": "<p>because... \"obviously\" I'll want to be able to specify valid ranges of values that values of the resulting type can use</p>",
        "id": 202427324,
        "sender_full_name": "oli",
        "timestamp": 1593519883
    },
    {
        "content": "<p>The one thing that I don't see happening is the creation of traits or trait impls (or impls in general). I'm not sure what const eval could ever bring to the table there that proc macros don't already support nicely.</p>",
        "id": 202427402,
        "sender_full_name": "oli",
        "timestamp": 1593519954
    },
    {
        "content": "<p>side note: about any of these, if you're interested in more discussion about it in detail, open a new topic in this stream</p>",
        "id": 202427574,
        "sender_full_name": "oli",
        "timestamp": 1593520067
    },
    {
        "content": "<p>I'd be happy to answer any questions and brainstorm these things</p>",
        "id": 202427640,
        "sender_full_name": "oli",
        "timestamp": 1593520087
    },
    {
        "content": "<p>A thing that's less const eval and more sandboxing of proc macros would be to run proc macros via miri, but that use case may be better covered by using wasm, as that is faster.</p>",
        "id": 202427699,
        "sender_full_name": "oli",
        "timestamp": 1593520144
    },
    {
        "content": "<p>Not sure if this counts as CTFE, but it's related: You can use macros to create pattern aliases that still allow you to destructure the internal values. So <code>foo!(x @ bar!(42))</code> can be  a valid pattern and e.g. destructure to <code>Meh::Foo(x @ Bek::Bar(42, \"true\"))</code> or whatever. The diagnostics around that are a bit wanky and i'm not sure how easily these macros can be reused to <em>create</em> values, so <code>let x = bar!(42)</code> expanding to <code>let x = Bek::Bar(42, \"true\");</code> being valid for the same macro. Pattern aliases are essentially super restricted <code>const fn</code> that must satisfy the invariant that you can evaluate them backwards and forwards losslessly. So you can't have <code>pattern fn foo(x: u32, y: u32) -&gt; Foo { Foo(x + y) }</code> as you can't go from a <code>Foo</code> to <code>x</code> and <code>y</code>, but <code>pattern fn foo(x: u16, y: u16) -&gt; Foo { Foo(x as u32 + (y as u32 &lt;&lt; 16)) }</code> could get accepted.</p>",
        "id": 202428265,
        "sender_full_name": "oli",
        "timestamp": 1593520497
    },
    {
        "content": "<p>Where is :eldritch-horror: when you need it...</p>",
        "id": 202438566,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593525347
    },
    {
        "content": "<p>Pattern aliases (\"active patterns\" in F# parlance) are really nice and something I've missed occasionally when working in Rust.</p>",
        "id": 202439041,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593525558
    },
    {
        "content": "<p>This sounds like it's getting awfully close cost evaluation of data type generics (GHC.Generics).</p>\n<p>Am I missing something?</p>",
        "id": 202464095,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1593535904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209924\">@Avi Dessauer</span> do you mean like generics where one of the type parameters is a const value?</p>",
        "id": 202518230,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593563379
    },
    {
        "content": "<p>If that's what you mean, that's being worked on at the moment ^^ look up the RFC number 2000</p>",
        "id": 202518295,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593563412
    },
    {
        "content": "<p>It's unstable and not feature-complete yet as far as I know, but some things in the stdlib have been using it for a while now (like arrays!)</p>",
        "id": 202518347,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1593563468
    },
    {
        "content": "<p>No, data type generic programing is a way of encoding arbitrary types in a uniform manner.</p>\n<p>While there are various encodings the key insight is all safe (not unions) types can be represented by a composition of a single sum type <code>A | B</code> and a product type  <code>(A, B)</code>.</p>\n<p>Rust enums are sums types. To encode a enum with 3+ variants as a composition of <code>A | B</code> the first variant becomes <code>A</code> while <code>B</code> is a nested sum of where a is the second variant. </p>\n<p>Product types with arbitrarily many fields (rust structs and tuples) are encoded using the same nesting trick.</p>\n<p>Meta data may be attached to the encoding denoting type names and other information.<br>\nWhile this encoding is useful onto it's self for implementing data type generic functions and impls (much nicer than, template Haskell the equivalent of proc macros), an equivalent non nested encoding is more intuitive. In Haskell the equivalent encoding comes at a cost.</p>\n<p>With const generics it would be fully evaluated at compile time.</p>\n<p>Nested fast representation<br>\n<a href=\"https://markkarpov.com/tutorial/generics.html\">https://markkarpov.com/tutorial/generics.html</a></p>\n<p>Nicer representation<br>\n<a href=\"https://hackage.haskell.org/package/generics-sop-0.5.1.0/docs/Generics-SOP.html\">https://hackage.haskell.org/package/generics-sop-0.5.1.0/docs/Generics-SOP.html</a></p>\n<p>The only attempt at data generics in rust<br>\n<a href=\"https://github.com/lloydmeta/frunk#generic\">https://github.com/lloydmeta/frunk#generic</a></p>",
        "id": 202521295,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1593566370
    }
]