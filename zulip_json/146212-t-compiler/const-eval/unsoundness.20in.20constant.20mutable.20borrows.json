[
    {
        "content": "<p>I'm opening this to discuss the existing unsoundness bugs for the <code>const_mut_refs</code> feature</p>",
        "id": 183594829,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576533081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> has pointed out this one: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4371a0cf7245a7d235cb2b8809b0bb10\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4371a0cf7245a7d235cb2b8809b0bb10\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4371a0cf7245a7d235cb2b8809b0bb10</a></p>",
        "id": 183594862,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576533104
    },
    {
        "content": "<p>I'm working under the assumption that we don't want to expose mutable references as return values for any constant. So that one must definitively be fixed</p>",
        "id": 183594955,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576533161
    },
    {
        "content": "<p>However, I was thinking about a case like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt;  <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Is <code>foo</code> disallowed even if it is not used anywhere outside a constant?</p>",
        "id": 183595050,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576533231
    },
    {
        "content": "<p>There's also this one which needs to be fixed: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=eb1b6c9bb69dfd8ff18d3c2f50fd66cd\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=eb1b6c9bb69dfd8ff18d3c2f50fd66cd\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=eb1b6c9bb69dfd8ff18d3c2f50fd66cd</a></p>",
        "id": 183595156,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576533287
    },
    {
        "content": "<p>First, I want to ask if it's feasible to forbid creating <em>new</em> mutable references in a const-context for now. Instead only allowing them to be passed in as parameters</p>",
        "id": 183595366,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576533413
    },
    {
        "content": "<p>That would mean that e.g. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">demux</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sel</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">sel</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>is allowed as well as the case you mentioned above, but that it can't really be used in a const context. So maybe this is a no-go?</p>",
        "id": 183595520,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576533518
    },
    {
        "content": "<p>(I say it can't be used since there would be no way to create <code>a</code> and <code>b</code>)</p>",
        "id": 183595734,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576533654
    },
    {
        "content": "<p>My thought is that we want to do a local analysis that prevents a new <code>&amp;mut</code> from \"escaping\" a function, so you could do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 183596063,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576533878
    },
    {
        "content": "<p>but not </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 183596120,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576533921
    },
    {
        "content": "<p>Oh well I guess <code>&amp;mut 4</code> won't get promoted, so this is impossible</p>",
        "id": 183596214,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576533968
    },
    {
        "content": "<p>In that case, the problem is only with <code>const</code> and <code>static</code> initializers, right?</p>",
        "id": 183596273,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576534018
    },
    {
        "content": "<p>Shifting gears, we probably want to allow code like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 183596688,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576534393
    },
    {
        "content": "<p>This suggests that we want an <code>HasMutPtr</code> qualification (that is related to but distinct from the existing <code>HasInteriorMut</code> qualif).</p>",
        "id": 183596893,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576534538
    },
    {
        "content": "<p>We would <em>not</em> need to check for this in the return value of <code>const fn</code>s, since the borrow checker already prevents us from returning a reference to local memory, mutable or otherwise.</p>",
        "id": 183597017,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576534634
    },
    {
        "content": "<blockquote>\n<p>My thought is that we want to do a local analysis that prevents a new <code>&amp;mut</code> from \"escaping\" a function</p>\n</blockquote>\n<p>shouldn't we want to  prevent <code>&amp;mut</code>s to just escape constant contexts?</p>",
        "id": 183599542,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576536570
    },
    {
        "content": "<p>A <code>const fn</code> is a const context. The issue will only be with \"top-level\" const contexts (<code>const</code> and <code>static</code>).</p>",
        "id": 183599663,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576536654
    },
    {
        "content": "<p>Since <code>&amp;mut</code>s created in a top-level context are <code>'static</code> and can escape outside of the block.</p>",
        "id": 183599985,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576536927
    },
    {
        "content": "<p>so basically we allow returning mutable references unless we are in a <code>const</code> or <code>static</code>.</p>",
        "id": 183600706,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576537556
    },
    {
        "content": "<p>Yes. There should be no issues with <code>const fn</code>s. Remember that structs containing mutable references also must be forbidden.</p>",
        "id": 183601377,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576538164
    },
    {
        "content": "<blockquote>\n<p>Yes. There should be no issues with <code>const fn</code>s. Remember that structs containing mutable references also must be forbidden.</p>\n</blockquote>\n<p>just to clarify, any type containing a mutable reference must not be exposed via <code>const</code> nor <code>static</code></p>",
        "id": 183601442,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576538224
    },
    {
        "content": "<p>Yes.</p>",
        "id": 183601458,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576538252
    },
    {
        "content": "<blockquote>\n<p>Shifting gears, we probably want to allow code like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>This remembers me the problem with making <code>Vec::new()</code> const safe.</p>",
        "id": 183601466,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576538263
    },
    {
        "content": "<p>The problem there was that values of non-<code>Copy</code> types can already appear at the top-level of a <code>const</code>, and they will be bitwise copied anyway with no safe code.</p>",
        "id": 183601652,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576538418
    },
    {
        "content": "<p><code>&amp;mut T</code> is also a non-<code>Copy</code> type, but we would have to forbid it anyways, even if we did not copy the final value of a const wherever it gets used.</p>",
        "id": 183601764,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576538525
    },
    {
        "content": "<p>This is (I think) what <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> was referring to when they mentioned that we might need <code>ConstSafe</code> for <code>&amp;mut</code>, not just const heap allocations.</p>",
        "id": 183601789,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576538568
    },
    {
        "content": "<p>However, as soon as a <code>&amp;mut</code> appears in the final value of a <code>const</code>, the battle is already lost. You can use it to mutate CTFE allocations even if the reference is never copied.</p>",
        "id": 183601819,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576538604
    },
    {
        "content": "<p>So, I think a good start would be to implement a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/fold/trait.TypeVisitor.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/fold/trait.TypeVisitor.html\"><code>TypeVisitor</code></a> that can find types with a <code>&amp;mut</code>, and use it to forbid certain types from being the final value of a constant.</p>",
        "id": 183602018,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576538771
    },
    {
        "content": "<p>(if one does not already exist)</p>",
        "id": 183602022,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576538780
    },
    {
        "content": "<p>And separately to fix whatever code allows you to do <code>&amp;mut Cell::new(4)</code>.</p>",
        "id": 183602047,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576538808
    },
    {
        "content": "<p>And we can worry about the <code>Qualif</code> part of this later</p>",
        "id": 183602064,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576538832
    },
    {
        "content": "<p>Ok I'll start working on this tomorrow :)</p>",
        "id": 183602464,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576539190
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> Thank you! Might wanna check in with <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> if they're available in case I missed something.</p>",
        "id": 183602496,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576539240
    },
    {
        "content": "<blockquote>\n<p>This is (I think) what <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> was referring to when they mentioned that we might need <code>ConstSafe</code> for <code>&amp;mut</code>, not just const heap allocations.</p>\n</blockquote>\n<p>No, what I mean is that we want to allow some constant values of a type while disallowing other</p>",
        "id": 183602535,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576539243
    },
    {
        "content": "<blockquote>\n<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> Thank you! Might wanna check in with <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> if they're available in case I missed something.</p>\n</blockquote>\n<p>Heh yeah that's my main reason for waiting :P</p>",
        "id": 183602543,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576539259
    },
    {
        "content": "<p>Yeah, you'll need to implement <code>Qualif</code> to get those semantics.</p>",
        "id": 183602565,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576539290
    },
    {
        "content": "<p>Which is not too hard, but also not necessary to fix the soundness issue.</p>",
        "id": 183602583,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576539311
    },
    {
        "content": "<blockquote>\n<p>Which is not too hard, but also not necessary to fix the soundness issue.</p>\n</blockquote>\n<p>Well even if it's not neccessary I'd like to come back to it later</p>",
        "id": 183602598,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576539332
    },
    {
        "content": "<p><code>static FOO: &amp;mut u32 = &amp;mut 9;</code> is actually fine</p>",
        "id": 183625164,
        "sender_full_name": "oli",
        "timestamp": 1576568922
    },
    {
        "content": "<p>It's only constants that are problematic, because they are copied implicitly</p>",
        "id": 183625176,
        "sender_full_name": "oli",
        "timestamp": 1576568953
    },
    {
        "content": "<p>The reason I mentioned <code>ConstSafe</code> is that <code>&amp;&amp;mut u32</code> is fine, but <code>(&amp;str, &amp;mut u32)</code> is not, which is the same as if it were Box</p>",
        "id": 183625308,
        "sender_full_name": "oli",
        "timestamp": 1576569102
    },
    {
        "content": "<p><code>static FOO: Box&lt;u32&gt;</code> is fine, too</p>",
        "id": 183625381,
        "sender_full_name": "oli",
        "timestamp": 1576569196
    },
    {
        "content": "<p>You can't deallocate or mutate a static</p>",
        "id": 183625564,
        "sender_full_name": "oli",
        "timestamp": 1576569413
    },
    {
        "content": "<p><code>static FOO: AtomicBox&lt;u32&gt;</code> is not fine though</p>",
        "id": 183625582,
        "sender_full_name": "oli",
        "timestamp": 1576569456
    },
    {
        "content": "<p>Even though <code>static FOO: AtomicMutRef&lt;u32&gt;</code> could be fine</p>",
        "id": 183625653,
        "sender_full_name": "oli",
        "timestamp": 1576569509
    },
    {
        "content": "<p>Ugh</p>",
        "id": 183625657,
        "sender_full_name": "oli",
        "timestamp": 1576569515
    },
    {
        "content": "<p>So let's start with everything is not fine and grow the set slowly</p>",
        "id": 183625669,
        "sender_full_name": "oli",
        "timestamp": 1576569537
    },
    {
        "content": "<p>I think a marker type will be simpler than a type visitor?</p>",
        "id": 183625796,
        "sender_full_name": "oli",
        "timestamp": 1576569658
    },
    {
        "content": "<p>We should also forbid raw pointers via that marker type, so noone goes around doing <code>const FOO: *mut u32 = &amp;mut 7;</code></p>",
        "id": 183625974,
        "sender_full_name": "oli",
        "timestamp": 1576569838
    },
    {
        "content": "<p>Which... would break <code>Vec::new()</code>, so we need the \"no actual pointers\" cop out where the marker trait is not checked</p>",
        "id": 183626050,
        "sender_full_name": "oli",
        "timestamp": 1576569925
    },
    {
        "content": "<p>Oh or we figure out a validation based system</p>",
        "id": 183626056,
        "sender_full_name": "oli",
        "timestamp": 1576569939
    },
    {
        "content": "<p>Ha we already have that type visitor <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span></p>",
        "id": 183626067,
        "sender_full_name": "oli",
        "timestamp": 1576569961
    },
    {
        "content": "<p>But it also walks the value at the same time</p>",
        "id": 183626115,
        "sender_full_name": "oli",
        "timestamp": 1576569975
    },
    {
        "content": "<p>Hmm.. we should ask <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> if that is an abuse of validation and whether this deserves its own system</p>",
        "id": 183626154,
        "sender_full_name": "oli",
        "timestamp": 1576570021
    },
    {
        "content": "<p>Ah,  we forbid <code>*STATIC = x</code> already.</p>",
        "id": 183693395,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576617853
    },
    {
        "content": "<p>Yeah, a marker trait would be better, I wasn't sure if we're still adding new OIBITs</p>",
        "id": 183693618,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576618018
    },
    {
        "content": "<p>I think as soon as you allow a mutable reference to be taken during const-eval, you need to forbid ptr-to-int conversions forever. Otherwise there's no way to stop a user from \"laundering\" the pointer out of const-eval through an integer type. This may already be the plan.</p>",
        "id": 183693855,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576618202
    },
    {
        "content": "<p>That's if you want to try to forbid even <code>*mut</code> in the final value, which may not be feasible as you've explained.</p>",
        "id": 183693950,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576618254
    },
    {
        "content": "<blockquote>\n<p><code>static FOO: AtomicBox&lt;u32&gt;</code> is not fine though</p>\n</blockquote>\n<p>I think we are already catching interior mutability so that shouldn't be a problem</p>",
        "id": 183701112,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576623570
    },
    {
        "content": "<blockquote>\n<p>I think as soon as you allow a mutable reference to be taken during const-eval, you need to forbid ptr-to-int conversions forever. Otherwise there's no way to stop a user from \"laundering\" the pointer out of const-eval through an integer type. This may already be the plan.</p>\n</blockquote>\n<p>But even then, you can leak a immutable pointer out of const-eval, right?</p>",
        "id": 183701372,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576623774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> yes but it's UB to write to them unless you got them from a <code>&amp;mut</code></p>",
        "id": 183701435,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576623815
    },
    {
        "content": "<p>So we don't have this problem today</p>",
        "id": 183701463,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576623841
    },
    {
        "content": "<p>Ohh so the problem here is UB not unsafety</p>",
        "id": 183701503,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576623843
    },
    {
        "content": "<p>and it is not UB to produce a mutable reference from an integer</p>",
        "id": 183701892,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576624117
    },
    {
        "content": "<p>It depends on the provenance of the value in the integer.</p>",
        "id": 183701995,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576624197
    },
    {
        "content": "<p>oh so if it's an integer from an actual reference it is not UB even though it is wrong here</p>",
        "id": 183702078,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576624237
    },
    {
        "content": "<p>These rules haven't been formalized yet, but that's the idea yes.</p>",
        "id": 183702122,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576624283
    },
    {
        "content": "<p>hmmm interesting</p>",
        "id": 183702140,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576624307
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><code>static FOO: AtomicBox&lt;u32&gt;</code> is not fine though</p>\n</blockquote>\n<p>I think we are already catching interior mutability so that shouldn't be a problem</p>\n</blockquote>\n<p>statics may have interior mutability. so <code>static FOO: AtomicUsize</code> works on stable</p>",
        "id": 183730370,
        "sender_full_name": "oli",
        "timestamp": 1576658958
    },
    {
        "content": "<p>ouch, this looks nasty</p>",
        "id": 184059031,
        "sender_full_name": "RalfJ",
        "timestamp": 1577029350
    },
    {
        "content": "<blockquote>\n<p>It depends on the provenance of the value in the integer.</p>\n</blockquote>\n<p>integers don't actually have provenance though, not if we fully support int-ptr-casts.<br>\nI guess we could make them have provenance for CTFE (that's what currently unleash-miri basically does) but I am not sure of that is a good idea.</p>",
        "id": 184059090,
        "sender_full_name": "RalfJ",
        "timestamp": 1577029461
    },
    {
        "content": "<p>I agree this feels very similar to <code>Box</code>/heap-alloc in const -- we can allow anything to happen during the computation, we just have to be careful in what we allow in the final return value.</p>",
        "id": 184059102,
        "sender_full_name": "RalfJ",
        "timestamp": 1577029508
    },
    {
        "content": "<p>So after hearing from <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I'll start working on this :P</p>",
        "id": 184072767,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577055195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> there is no way to expose the information from int-to-ptr casts to the compiler so we can check if an integer comes from a pointer?</p>",
        "id": 184072833,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577055336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> an integer cannot come from a pointer in const eval</p>",
        "id": 184072835,
        "sender_full_name": "oli",
        "timestamp": 1577055357
    },
    {
        "content": "<p>oh that's great D:</p>",
        "id": 184072877,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577055376
    },
    {
        "content": "<p>:D</p>",
        "id": 184072879,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577055381
    },
    {
        "content": "<p>Though you can have integers as addresses of ZSTs</p>",
        "id": 184072881,
        "sender_full_name": "oli",
        "timestamp": 1577055395
    },
    {
        "content": "<p>wait, why?</p>",
        "id": 184072884,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577055415
    },
    {
        "content": "<p><code>&amp;*(1 as *const ())</code> is sound</p>",
        "id": 184072898,
        "sender_full_name": "oli",
        "timestamp": 1577055442
    },
    {
        "content": "<p>it's a valid address for a <code>()</code></p>",
        "id": 184072900,
        "sender_full_name": "oli",
        "timestamp": 1577055455
    },
    {
        "content": "<p>you can get this on stable by using a union to transmute <code>1usize</code> to <code>&amp;'static ()</code></p>",
        "id": 184072944,
        "sender_full_name": "oli",
        "timestamp": 1577055484
    },
    {
        "content": "<p>I think I'm not seeing the whole picture</p>",
        "id": 184073025,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577055620
    },
    {
        "content": "<p>I mean, if any integer can be a valid address for a ZST, how does that affect exposing pointers as integers?</p>",
        "id": 184073086,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577055741
    },
    {
        "content": "<p>it doesn't. I don't know why we are talking about exposing pointers as integers.</p>",
        "id": 184073087,
        "sender_full_name": "oli",
        "timestamp": 1577055761
    },
    {
        "content": "<p>Side note: I don't know what <code>provenance</code> means</p>",
        "id": 184073103,
        "sender_full_name": "oli",
        "timestamp": 1577055817
    },
    {
        "content": "<p>Ok, wikipedia cleared this up</p>",
        "id": 184073111,
        "sender_full_name": "oli",
        "timestamp": 1577055841
    },
    {
        "content": "<blockquote>\n<p>Side note: I don't know what <code>provenance</code> means</p>\n</blockquote>\n<p>Oxford: ​the place that something originally came from</p>",
        "id": 184073152,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577055851
    },
    {
        "content": "<p>:P</p>",
        "id": 184073153,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577055853
    },
    {
        "content": "<blockquote>\n<p>and it is not UB to produce a mutable reference from an integer</p>\n</blockquote>\n<p>I thought we were discussing how to avoid leaking mutable references as integers</p>",
        "id": 184073158,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577055901
    },
    {
        "content": "<p>aaah</p>",
        "id": 184073167,
        "sender_full_name": "oli",
        "timestamp": 1577055918
    },
    {
        "content": "<p>or am I getting ahead of it?</p>",
        "id": 184073171,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577055944
    },
    {
        "content": "<p>so... this feels unrelated, because we have the same \"problem\" for immutable references</p>",
        "id": 184073205,
        "sender_full_name": "oli",
        "timestamp": 1577055963
    },
    {
        "content": "<p>sec, grabbing the issue id</p>",
        "id": 184073214,
        "sender_full_name": "oli",
        "timestamp": 1577055969
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/63197\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63197\">https://github.com/rust-lang/rust/issues/63197</a></p>",
        "id": 184073231,
        "sender_full_name": "oli",
        "timestamp": 1577056018
    },
    {
        "content": "<p>yea, so this is entirely orthogonal to the problem at hand <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 184073491,
        "sender_full_name": "oli",
        "timestamp": 1577056476
    },
    {
        "content": "<blockquote>\n<p>I think as soon as you allow a mutable reference to be taken during const-eval, you need to forbid ptr-to-int conversions forever. Otherwise there's no way to stop a user from \"laundering\" the pointer out of const-eval through an integer type. This may already be the plan.</p>\n</blockquote>\n<p>we need to forbid this forever anyway, because a) you'd be able to create a pseudorandom number generator that may change its value arbitrarily between compiler runs and b) you'd get different addresses at compile-time than at runtime for the same thing</p>",
        "id": 184073565,
        "sender_full_name": "oli",
        "timestamp": 1577056621
    },
    {
        "content": "<p>I don't see any way that would make it possible for us to have ptr-to-int conversions in const eval without causing a whole lot of (to the best of my knowledge unfixable) problems</p>",
        "id": 184073575,
        "sender_full_name": "oli",
        "timestamp": 1577056657
    },
    {
        "content": "<p>damn... so the plan is just forbid mutable references (or types containing mutable references) in <code>const</code> or <code>static</code>s</p>",
        "id": 184075468,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1577060387
    },
    {
        "content": "<p>just in <code>const</code>s I think</p>",
        "id": 184075577,
        "sender_full_name": "oli",
        "timestamp": 1577060552
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132916\">Christian Poveda</span> an integer cannot come from a pointer in const eval</p>\n</blockquote>\n<p>Hu? We have unions in const-eval...</p>",
        "id": 184091639,
        "sender_full_name": "RalfJ",
        "timestamp": 1577091805
    },
    {
        "content": "<p>or do you mean an integer <em>value</em> cannot come from a ptr? True, but that is a difference in semantics between const and real Rust. I'd rather avoid having to spec <em>two</em> languages.</p>",
        "id": 184091654,
        "sender_full_name": "RalfJ",
        "timestamp": 1577091834
    },
    {
        "content": "<p>FWIW, if we properly forced constants to be <code>Sync</code>, that would already exclude raw pointers and we'd have much fewer problems I think...</p>",
        "id": 184092169,
        "sender_full_name": "RalfJ",
        "timestamp": 1577092521
    },
    {
        "content": "<p>if we need some new type-based scheme for <code>const</code>s anyway, maybe that is also a good opportunity to fix the <code>Sync</code> thing</p>",
        "id": 184092445,
        "sender_full_name": "RalfJ",
        "timestamp": 1577092844
    },
    {
        "content": "<p>I don't see how we can ever make an int-to-ptr conversion (<code>force_bits</code>) legal in const eval without bricking everything. So we have <code>static A: i32 = 42;</code> and <code>static B: usize = (&amp;A as *const i32 as usize) / 2 * 2;</code>. If we compute this integer address at const eval time, it is essentially guaranteed, that llvm will produce a different value. I don't see any way to get this to work. So if you then do <code>*(B as *const i32)</code> at runtime, you'll get a segfault or at least a different value than what is stored in <code>A</code></p>",
        "id": 184093697,
        "sender_full_name": "oli",
        "timestamp": 1577094489
    },
    {
        "content": "<p>Also it's not much of a semantics difference. Compile time evaluation will always abort $somewhere where runtime can go on just fine</p>",
        "id": 184093810,
        "sender_full_name": "oli",
        "timestamp": 1577094630
    },
    {
        "content": "<p>it's not like behaviour changes between runtime and compile time</p>",
        "id": 184093819,
        "sender_full_name": "oli",
        "timestamp": 1577094646
    },
    {
        "content": "<p>it's just that some things abort compilation at compile time</p>",
        "id": 184093824,
        "sender_full_name": "oli",
        "timestamp": 1577094655
    },
    {
        "content": "<p>Just like you'll never be able to do <code>*(1234 as *const i32)</code> at compile-time, even if that address is totally sane at runtime on your target</p>",
        "id": 184093846,
        "sender_full_name": "oli",
        "timestamp": 1577094701
    },
    {
        "content": "<p>or how you'll always be able to take an address of an <code>extern static</code> but never deref that pointer because it points nowhere at compile time</p>",
        "id": 184093897,
        "sender_full_name": "oli",
        "timestamp": 1577094735
    },
    {
        "content": "<blockquote>\n<p>I don't see how we can ever make an int-to-ptr conversion (force_bits) legal in const eval without bricking everything. </p>\n</blockquote>\n<p>ah no, that's not at all what I meant</p>",
        "id": 184098641,
        "sender_full_name": "RalfJ",
        "timestamp": 1577100691
    },
    {
        "content": "<p>but we also shouldnt rely on being able to trace the provenance of an integer IMO</p>",
        "id": 184098647,
        "sender_full_name": "RalfJ",
        "timestamp": 1577100715
    },
    {
        "content": "<p>like, if we ever decide that transmuting ptrs to ints is UB, we should do this consistently between runtime and CTFE</p>",
        "id": 184098696,
        "sender_full_name": "RalfJ",
        "timestamp": 1577100743
    },
    {
        "content": "<p>a CTFE that goes on in \"best effort\" with pointer values at integer type might well be incompatible with the runtime model we end up with</p>",
        "id": 184098712,
        "sender_full_name": "RalfJ",
        "timestamp": 1577100779
    }
]