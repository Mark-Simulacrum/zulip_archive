[
    {
        "content": "<p>Hello! There is a <a href=\"https://github.com/rust-lang/rfcs/pull/2948\">\"so, SIMD in core?\" proposal</a> that has bumped up against \"so, we using const generics for this?\" for some particular functions, namely to represent SIMD shuffles. There are macro-based SIMD shuffles that are functional but a hoped-for const generic form is considered more elegant and would probably err properly at compile-time. That started <a href=\"#narrow/stream/219381-t-libs/topic/.60packed_simd.60.20crate.20status.2Fmaintenance.3F/near/207815297\">here in t-libs</a> and has <a href=\"#narrow/stream/219381-t-libs/topic/.60packed_simd.60.20crate.20status.2Fmaintenance.3F/near/207874587\">reached a question as to what is const-evaluable within <code>min_const_generics</code> and <code>const fn</code></a>. It would be lovely if const-eval could weigh in!</p>",
        "id": 207918829,
        "sender_full_name": "Jubilee",
        "timestamp": 1598321631
    },
    {
        "content": "<p>It looks to me like this needs <a href=\"https://github.com/rust-lang/compiler-team/issues/340\">https://github.com/rust-lang/compiler-team/issues/340</a>, which I will hopefully implement in the next month(s).</p>",
        "id": 207927873,
        "sender_full_name": "lcnr",
        "timestamp": 1598335993
    },
    {
        "content": "<p>you can then write <code>fn simd_stuff&lt;const N: usize&gt;() where [u8;  BOUND - N]</code> which fails to compile if <code>N</code> is greater than <code>BOUND</code></p>",
        "id": 207927943,
        "sender_full_name": "lcnr",
        "timestamp": 1598336069
    },
    {
        "content": "<p>oh nice! That would be _lovely_ to see, yes!</p>",
        "id": 207937646,
        "sender_full_name": "Jubilee",
        "timestamp": 1598345218
    },
    {
        "content": "<p>one note is that while these bounds will most probably be implemented before <code>min_const_generics</code> is stable, they will not be stabilized with <code>min_const_generics</code>.</p>",
        "id": 207939015,
        "sender_full_name": "lcnr",
        "timestamp": 1598346283
    },
    {
        "content": "<p>I personally expect us to still be able to add these bounds to methods we want to stabilize even if they can only be satisfied by using concrete values. That would forbid users on stable from writing <code>simd_stuff::&lt;CONST_PARAM&gt;</code> at the start</p>",
        "id": 207939173,
        "sender_full_name": "lcnr",
        "timestamp": 1598346422
    },
    {
        "content": "<p>I mean, the entire thing (core::simd) would go in as unstable in the first place anyways, right?</p>",
        "id": 207939292,
        "sender_full_name": "Jubilee",
        "timestamp": 1598346505
    },
    {
        "content": "<p>I would expect this to be the case</p>",
        "id": 207939329,
        "sender_full_name": "lcnr",
        "timestamp": 1598346538
    },
    {
        "content": "<p>so this would only be relevant if you want to stabilize <code>core::simd</code> before we stabilize const wf bounds</p>",
        "id": 207939350,
        "sender_full_name": "lcnr",
        "timestamp": 1598346561
    },
    {
        "content": "<p>can't really say how much longer it will take to go from <code>min_const_generics</code> to full <code>const_generics</code> stabilization</p>",
        "id": 207939456,
        "sender_full_name": "lcnr",
        "timestamp": 1598346624
    },
    {
        "content": "<p>There would be several SIMD-related functions and types that could be stabilized first without requiring shuffles except on nightly, so this would be a good move forward, and it would invite a lot of testing of const generics anyways.</p>",
        "id": 207939495,
        "sender_full_name": "Jubilee",
        "timestamp": 1598346664
    },
    {
        "content": "<p>yeah, what I wanted to say is that I expect it to be fine to even stabilize shuffles, even if they use const wf bounds</p>",
        "id": 207939530,
        "sender_full_name": "lcnr",
        "timestamp": 1598346715
    },
    {
        "content": "<p>Ahhh, yeah. That would be more than fine!</p>",
        "id": 207939630,
        "sender_full_name": "Jubilee",
        "timestamp": 1598346794
    },
    {
        "content": "<p>can't tell if this is sarcasm <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 207939784,
        "sender_full_name": "lcnr",
        "timestamp": 1598346890
    },
    {
        "content": "<p>No, seriously! Either I'm completely missing something or basically there won't be any real problems~</p>",
        "id": 207940001,
        "sender_full_name": "Jubilee",
        "timestamp": 1598347092
    }
]