[
    {
        "content": "<p>So, now that <a href=\"https://github.com/rust-lang/rfcs/pull/3016\">https://github.com/rust-lang/rfcs/pull/3016</a> is merged (const-UB RFC)... what is blocking allowing unions and transmute in <code>const fn</code>? (We probably should allow both of them at the same time to avoid people hackily encoding one via the other.)</p>",
        "id": 240153145,
        "sender_full_name": "RalfJ",
        "timestamp": 1621928794
    },
    {
        "content": "<p>(FWIW, using <code>transmute</code> one can also deref raw ptrs by transmuting them to a reference, so I am not sure if it makes much sense to keep rejecting those)</p>",
        "id": 240153397,
        "sender_full_name": "RalfJ",
        "timestamp": 1621928984
    },
    {
        "content": "<p>the main question here seems to be one of documentation... basically we need to make sure everyone understands that transmuting or otherwise converting a ptr to an int is UB during CTFE</p>",
        "id": 240153480,
        "sender_full_name": "RalfJ",
        "timestamp": 1621929017
    },
    {
        "content": "<p>can we make that a compile-time error? it seems easy to have something do that accidentally</p>",
        "id": 240154202,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621929538
    },
    {
        "content": "<p>in particular, there are a lot of valid reasons people might want to do that at compile-time -- offset_of style stuff for example.</p>",
        "id": 240154254,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621929569
    },
    {
        "content": "<p>i think if its not a compile error, people will definitely do ptr-to-int</p>",
        "id": 240154269,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1621929585
    },
    {
        "content": "<p>It <em>could</em> be a compile error, but it's not guaranteed.</p>",
        "id": 240154464,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1621929686
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/unions.2C.20transmute.2C.20raw.20ptr.20in.20const.20fn/near/240154202\">said</a>:</p>\n<blockquote>\n<p>can we make that a compile-time error? it seems easy to have something do that accidentally</p>\n</blockquote>\n<p>yeah we'll usually detect when you do the wrong thing with a ptr-turned-integer during CTFE</p>",
        "id": 240156211,
        "sender_full_name": "RalfJ",
        "timestamp": 1621930922
    },
    {
        "content": "<p>my main motivation for stabilizing unions and transmute is that they are already allowed in <code>const</code> but not in <code>const fn</code>, which is strange. I think we should keep these differences to a minimum. remaining differences (annoying promotion stuff aside) are around function pointers, which I am not touching until we make some progress on the entire \"trait bounds for const fn\" story.</p>",
        "id": 240156314,
        "sender_full_name": "RalfJ",
        "timestamp": 1621930985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/unions.2C.20transmute.2C.20raw.20ptr.20in.20const.20fn/near/240154254\">said</a>:</p>\n<blockquote>\n<p>in particular, there are a lot of valid reasons people might want to do that at compile-time -- offset_of style stuff for example.</p>\n</blockquote>\n<p>FWIW, <a href=\"https://github.com/Gilnaa/memoffset/\">https://github.com/Gilnaa/memoffset/</a> does compile-time offset_of without ptr-int-casts</p>",
        "id": 240156427,
        "sender_full_name": "RalfJ",
        "timestamp": 1621931049
    },
    {
        "content": "<p>but that needs a bunch of other unstable features</p>",
        "id": 240156467,
        "sender_full_name": "RalfJ",
        "timestamp": 1621931079
    },
    {
        "content": "<p><code>#![feature(const_ptr_offset_from, const_maybe_uninit_as_ptr, const_raw_ptr_deref, const_refs_to_cell)]</code></p>",
        "id": 240156508,
        "sender_full_name": "RalfJ",
        "timestamp": 1621931111
    },
    {
        "content": "<p>uh wtf, that code box shows up empty here... using inline instead of block code formatting now...</p>",
        "id": 240156531,
        "sender_full_name": "RalfJ",
        "timestamp": 1621931131
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/unions.2C.20transmute.2C.20raw.20ptr.20in.20const.20fn/near/240156531\">said</a>:</p>\n<blockquote>\n<p>uh wtf, that code box shows up empty here...</p>\n</blockquote>\n<p>I think it's because the line starts with a <code>#</code>. Try doubling it up or some other escape mechanism?</p>",
        "id": 240156685,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1621931236
    },
    {
        "content": "<p>isn't this supposed to be verbatim blocks? why would <code>#</code> make any difference? anyway, I reproted a bug and used a hack here, lets go back on topic :)</p>",
        "id": 240156773,
        "sender_full_name": "RalfJ",
        "timestamp": 1621931290
    },
    {
        "content": "<p>But yeah, imo given the RFC was accepted knowing that the compiler doesn't have to guarantee a compile error, I don't see any problem doing just that. It was accepted for a reason, after all.</p>",
        "id": 240156996,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1621931454
    },
    {
        "content": "<p>We should do transmute, unions, cast and deref at the same time to reduce the hackery that ppl have to resort to</p>",
        "id": 240166377,
        "sender_full_name": "oli",
        "timestamp": 1621937573
    },
    {
        "content": "<p>Would someone mind pointing me to the code referenced <a href=\"https://github.com/rust-lang/rust/blob/47a90f452050d4ea484206447babb07dd33c21d5/library/core/src/intrinsics.rs#L1080-L1081\">in this comment</a>? I'm pretty sure it's what's causing my local changes to fail to compile the tests.</p>",
        "id": 240280196,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1622005511
    },
    {
        "content": "<p>Also while going through code, I think it makes sense to stabilize all of the following at the same time:</p>\n<ul>\n<li><code>const_fn_transmute</code></li>\n<li><code>const_fn_union</code></li>\n<li><code>const_raw_ptr_deref</code></li>\n<li><code>const_raw_ptr_to_usize_cast</code></li>\n<li><code>const_ptr_offset</code></li>\n<li><code>const_ptr_offset_from</code></li>\n</ul>\n<p>The first two are complementary, functionally doing the same thing. <code>const_raw_ptr_deref</code> and <code>const_raw_ptr_to_usize_cast</code> could be accomplished via a transmute. <code>const_ptr_offset</code> and <code>const_ptr_offset_from</code> could be accomplished by a transmute, arithmetic, and another transmute. To avoid writing needlessly verbose code, I think it's best to do it all at once.</p>",
        "id": 240280303,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1622005663
    },
    {
        "content": "<p><code>const_raw_ptr_to_usize_cast</code> is unlikely to be stabilized soon or ever IMO; ptr-to-int casts in CTFE are \"strange\"</p>",
        "id": 240429594,
        "sender_full_name": "RalfJ",
        "timestamp": 1622100864
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/unions.2C.20transmute.2C.20raw.20ptr.20in.20const.20fn/near/240166377\">said</a>:</p>\n<blockquote>\n<p>We should do transmute, unions, cast and deref at the same time to reduce the hackery that ppl have to resort to</p>\n</blockquote>\n<p>hm, I feel we might separate the raw ptr stuff from the rest -- we already have that sitaution in <code>const</code>  items (transmute allowed, raw ptr deref not)</p>",
        "id": 240429665,
        "sender_full_name": "RalfJ",
        "timestamp": 1622100920
    },
    {
        "content": "<p>so I don't think we make things worse here by stabilizing only transmute and union</p>",
        "id": 240429689,
        "sender_full_name": "RalfJ",
        "timestamp": 1622100937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/unions.2C.20transmute.2C.20raw.20ptr.20in.20const.20fn/near/240280196\">said</a>:</p>\n<blockquote>\n<p>Would someone mind pointing me to the code referenced <a href=\"https://github.com/rust-lang/rust/blob/47a90f452050d4ea484206447babb07dd33c21d5/library/core/src/intrinsics.rs#L1080-L1081\">in this comment</a>? I'm pretty sure it's what's causing my local changes to fail to compile the tests.</p>\n</blockquote>\n<p>that's <a href=\"https://github.com/rust-lang/rust/blob/47a90f452050d4ea484206447babb07dd33c21d5/compiler/rustc_mir/src/transform/check_consts/validation.rs#L891\">this code</a></p>",
        "id": 240429783,
        "sender_full_name": "RalfJ",
        "timestamp": 1622100986
    },
    {
        "content": "<p>Won't people inevitable end up relying on the transmute-arithmetic-transmute \"flow\" if the pointer ops aren't stabilized?</p>",
        "id": 240534664,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1622151043
    },
    {
        "content": "<p>And that chunk of code would just need to be removed, correct?</p>",
        "id": 240534673,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1622151053
    },
    {
        "content": "<p>well... any attempt to do pointer ops just errors out <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 240536007,
        "sender_full_name": "oli",
        "timestamp": 1622151818
    },
    {
        "content": "<p>try it out with the feature gate</p>",
        "id": 240536016,
        "sender_full_name": "oli",
        "timestamp": 1622151825
    },
    {
        "content": "<blockquote>\n<p>cannot cast pointer to integer because it was not created by cast from integer</p>\n</blockquote>\n<p>Well I'll be damned <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I was <em>not</em> expecting that! Kudos to whoever implemented that loveliness.</p>",
        "id": 240539969,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1622154389
    },
    {
        "content": "<p>In that case I agree, there's no reason to do that at the same time. transmute and union would be the minimum reasonable amount</p>",
        "id": 240540007,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1622154429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/unions.2C.20transmute.2C.20raw.20ptr.20in.20const.20fn/near/240539969\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>cannot cast pointer to integer because it was not created by cast from integer</p>\n</blockquote>\n<p>Well I'll be damned <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I was <em>not</em> expecting that! Kudos to whoever implemented that loveliness.</p>\n</blockquote>\n<p>actually, it would be <em>extra</em> work to make this code work. making integer ops on pointers fail is the easy way.^^</p>",
        "id": 240695359,
        "sender_full_name": "RalfJ",
        "timestamp": 1622284153
    },
    {
        "content": "<p>(and FWIW, code doing transmute-arith-transmute might actually be or become UB in LLVM, but that is a separate story)</p>",
        "id": 240695367,
        "sender_full_name": "RalfJ",
        "timestamp": 1622284185
    },
    {
        "content": "<p>see <a href=\"https://rustc-dev-guide.rust-lang.org/miri.html#memory\">https://rustc-dev-guide.rust-lang.org/miri.html#memory</a> for details</p>",
        "id": 240695427,
        "sender_full_name": "RalfJ",
        "timestamp": 1622284230
    },
    {
        "content": "<p>so, is anyone up for preparing the PR that stabilizes transmute and union accesses in <code>const fn</code>? I'd happily hep with reviews and stuff. :D</p>",
        "id": 240697894,
        "sender_full_name": "RalfJ",
        "timestamp": 1622288387
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/85769\">https://github.com/rust-lang/rust/pull/85769</a></p>",
        "id": 240698155,
        "sender_full_name": "oli",
        "timestamp": 1622288854
    },
    {
        "content": "<p>ah, you're faster than light, impressive :)</p>",
        "id": 240698745,
        "sender_full_name": "RalfJ",
        "timestamp": 1622289742
    },
    {
        "content": "<p>Yeah I'm working on it slowly. Just minor things here and there that cause issues, really.</p>",
        "id": 240720891,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1622322071
    }
]