[
    {
        "content": "<p>We currently allow the following code:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// std::mem::size_of::&lt;T&gt;();</span>\n<span class=\"w\">    </span><span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204125452,
        "sender_full_name": "lcnr",
        "timestamp": 1594925102
    },
    {
        "content": "<p>Uncommenting <code>std::mem::size_of::&lt;T&gt;()</code> makes <code>foo</code> depend on its type parameter <code>T</code> and causes the following error (as expected):</p>\n<div class=\"codehilite\"><pre><span></span><code>error: constant expression depends on a generic parameter\n --&gt; src/lib.rs:7:17\n  |\n7 |     let _ = [0; foo::&lt;T&gt;()];\n  |                 ^^^^^^^^^^\n  |\n  = note: this may fail depending on what value the parameter takes\n</code></pre></div>",
        "id": 204125563,
        "sender_full_name": "lcnr",
        "timestamp": 1594925152
    },
    {
        "content": "<p>While this case is fairly artificial, something like this might be more relevant:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204125854,
        "sender_full_name": "lcnr",
        "timestamp": 1594925280
    },
    {
        "content": "<p>This suddenly breaks on 32 bit systems</p>",
        "id": 204125946,
        "sender_full_name": "lcnr",
        "timestamp": 1594925316
    },
    {
        "content": "<p>I personally would therefore like to prevent <code>PredicateKind::ConstEvaluatable</code> from looking into functions with generic parameters which are not concrete</p>",
        "id": 204126106,
        "sender_full_name": "lcnr",
        "timestamp": 1594925390
    },
    {
        "content": "<p>Thereby forbidding all of the above uses of <code>foo</code>.</p>",
        "id": 204126187,
        "sender_full_name": "lcnr",
        "timestamp": 1594925407
    },
    {
        "content": "<p>(this probably needs a future compat warning, as some of these examples already compile on stable)</p>",
        "id": 204126255,
        "sender_full_name": "lcnr",
        "timestamp": 1594925449
    },
    {
        "content": "<p>Does this seem sensible to all of you? cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 204126553,
        "sender_full_name": "lcnr",
        "timestamp": 1594925580
    },
    {
        "content": "<p>Depending on how we implement const wf this might become moot in a year or two</p>",
        "id": 204132625,
        "sender_full_name": "lcnr",
        "timestamp": 1594928316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.60ConstEvaluatable.60.20generic.20functions/near/204132625\">said</a>:</p>\n<blockquote>\n<p>Depending on how we implement const wf this might become moot in a year or two</p>\n</blockquote>\n<p>as in we'll allow it again in a year or two anyway?</p>",
        "id": 204180936,
        "sender_full_name": "oli",
        "timestamp": 1594973556
    },
    {
        "content": "<p>hmm, not completely sure, I expect we somehow allow this. This depends on how <a href=\"https://github.com/rust-lang/rust/issues/68436\">#68436</a> (which sadly ended up being the most requested const generics issue after <a href=\"https://github.com/rust-lang/rust/issues/74113\">#74113</a> is now working <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>) pans out I guess</p>",
        "id": 204195954,
        "sender_full_name": "lcnr",
        "timestamp": 1594985962
    },
    {
        "content": "<p>We want to allow calling <code>foo::&lt;T&gt;</code> independently of if it actually uses <code>T</code>(potentially requiring a where bound).</p>",
        "id": 204196205,
        "sender_full_name": "lcnr",
        "timestamp": 1594986202
    },
    {
        "content": "<p>We currently look inside of <code>foo</code> to decide if it may be used, which I would like to prevent</p>",
        "id": 204196245,
        "sender_full_name": "lcnr",
        "timestamp": 1594986241
    },
    {
        "content": "<p>well, it's not that we look, but rather that miri will just succeed if it's not <em>dynamically</em> used</p>",
        "id": 204196870,
        "sender_full_name": "eddyb",
        "timestamp": 1594986786
    },
    {
        "content": "<p>since, well, miri doesn't execute all paths :P</p>",
        "id": 204196881,
        "sender_full_name": "eddyb",
        "timestamp": 1594986798
    },
    {
        "content": "<p>I think I said already but what we could do is just stop at calls of <code>const fn</code>s and require that all of their parameters are known</p>",
        "id": 204196908,
        "sender_full_name": "eddyb",
        "timestamp": 1594986831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.60ConstEvaluatable.60.20generic.20functions/near/204196908\">said</a>:</p>\n<blockquote>\n<p>I think I said already but what we could do is just stop at calls of <code>const fn</code>s and require that all of their parameters are known</p>\n</blockquote>\n<p>which  is what I am proposing here, isn't it <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 204196969,
        "sender_full_name": "lcnr",
        "timestamp": 1594986860
    },
    {
        "content": "<p>well, specifically have miri stop</p>",
        "id": 204196988,
        "sender_full_name": "eddyb",
        "timestamp": 1594986886
    },
    {
        "content": "<p>nothing else in the compiler would care/know about this</p>",
        "id": 204197001,
        "sender_full_name": "eddyb",
        "timestamp": 1594986897
    },
    {
        "content": "<p>this is similar to miri hitting a <code>&lt;T as Trait&gt;::method</code> call - if it doesn't know <code>T</code>, it can't resolve what function will actually get called</p>",
        "id": 204197024,
        "sender_full_name": "eddyb",
        "timestamp": 1594986925
    },
    {
        "content": "<p>so we can pretend it's like that</p>",
        "id": 204197032,
        "sender_full_name": "eddyb",
        "timestamp": 1594986933
    },
    {
        "content": "<p>Isn't it weird to forbid something now, which will break stable code, just to allow it again later?</p>",
        "id": 204211430,
        "sender_full_name": "oli",
        "timestamp": 1594995718
    },
    {
        "content": "<p>I am not sure if we will allow it this way later</p>",
        "id": 204211571,
        "sender_full_name": "lcnr",
        "timestamp": 1594995793
    },
    {
        "content": "<p>I.e. if we add required <code>where</code> bounds here</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">42</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204211789,
        "sender_full_name": "lcnr",
        "timestamp": 1594995883
    },
    {
        "content": "<p>so by not forbidding this now, we might get driven into a corner when implementing const wf</p>",
        "id": 204211887,
        "sender_full_name": "lcnr",
        "timestamp": 1594995934
    },
    {
        "content": "<p>we put a lot of effort into making miri able to evaluate polymorphic functions, could we just make where bounds do this instead of forbidding it in general? Right now you can only use the generic parameters in runtime positions I think</p>",
        "id": 204212091,
        "sender_full_name": "oli",
        "timestamp": 1594996025
    },
    {
        "content": "<ul>\n<li>we currently supply the parent generics to repeat expressions on stable (preventing an ice on <code>[0u64; std::mem::size_of::&lt;T&gt;()]</code></li>\n</ul>",
        "id": 204212399,
        "sender_full_name": "lcnr",
        "timestamp": 1594996172
    },
    {
        "content": "<ul>\n<li>we do add a <code>PredicateKind::ConstEvaluatable</code> for every anon const (repeat expression length), requiring that the given rep expr length does not actually depend on any generic parameters until we figure out const wf</li>\n</ul>",
        "id": 204212558,
        "sender_full_name": "lcnr",
        "timestamp": 1594996242
    },
    {
        "content": "<ul>\n<li>while checking this, we look into functions (as we just run miri and test if it succeeds)</li>\n</ul>",
        "id": 204212652,
        "sender_full_name": "lcnr",
        "timestamp": 1594996295
    },
    {
        "content": "<p>So only stop miri from doing this while checking <code>ConstEvaluatable</code></p>",
        "id": 204212769,
        "sender_full_name": "lcnr",
        "timestamp": 1594996331
    },
    {
        "content": "<p>I think we can get away with that... I don't think any reasonable/useful code will actually break from this</p>",
        "id": 204212963,
        "sender_full_name": "oli",
        "timestamp": 1594996423
    },
    {
        "content": "<blockquote>\n<p>with that</p>\n</blockquote>\n<p>whats \"that\" here?</p>",
        "id": 204213081,
        "sender_full_name": "lcnr",
        "timestamp": 1594996468
    },
    {
        "content": "<p>preventing the invocation of generic functions during CTFE if the CTFE was triggered from <code>ConstEvaluable</code></p>",
        "id": 204213125,
        "sender_full_name": "oli",
        "timestamp": 1594996493
    },
    {
        "content": "<p>So without a future compat period?</p>",
        "id": 204213156,
        "sender_full_name": "lcnr",
        "timestamp": 1594996509
    },
    {
        "content": "<p>I'd say we see what happens on crater. The only case that I can think of that users may depend on is <code>std::ptr::null</code></p>",
        "id": 204213213,
        "sender_full_name": "oli",
        "timestamp": 1594996539
    },
    {
        "content": "<p>My main concern is that <code>let _ = [0; std::mem::size_of::&lt;*mut T&gt;()]</code> and friends currently work, which might sometimes get used</p>",
        "id": 204213236,
        "sender_full_name": "lcnr",
        "timestamp": 1594996550
    },
    {
        "content": "<blockquote>\n<p>what happens on crater</p>\n</blockquote>\n<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span>  if no one else wants to open a PR here I will try and get to this next week</p>",
        "id": 204213606,
        "sender_full_name": "lcnr",
        "timestamp": 1594996737
    },
    {
        "content": "<p>bringing me back to my original question: why do repeat expr lengths need this? Can we just keep them being special and allowing them having generic parameters?</p>",
        "id": 204213700,
        "sender_full_name": "oli",
        "timestamp": 1594996794
    },
    {
        "content": "<p>Don't they have the same problems as all other const generic parameters?</p>",
        "id": 204213760,
        "sender_full_name": "lcnr",
        "timestamp": 1594996815
    },
    {
        "content": "<p>i.e. what happens for <code>let _ = [0; std::mem::size_of::&lt;T&gt;() - 4]</code></p>",
        "id": 204213795,
        "sender_full_name": "lcnr",
        "timestamp": 1594996834
    },
    {
        "content": "<p>post monorphization errors happen, but that's not really part of the type system</p>",
        "id": 204213922,
        "sender_full_name": "oli",
        "timestamp": 1594996904
    },
    {
        "content": "<p>it's only during codegen (or <code>collect</code>)</p>",
        "id": 204213936,
        "sender_full_name": "oli",
        "timestamp": 1594996916
    },
    {
        "content": "<p>can we just make it a future incompat lint the moment we start implementing wf?</p>",
        "id": 204214200,
        "sender_full_name": "oli",
        "timestamp": 1594997034
    },
    {
        "content": "<p>basically make it a future incompat lint when there's an opt-out?</p>",
        "id": 204214254,
        "sender_full_name": "oli",
        "timestamp": 1594997045
    },
    {
        "content": "<p>because right now we wouldn't be giving users any way out</p>",
        "id": 204214287,
        "sender_full_name": "oli",
        "timestamp": 1594997060
    },
    {
        "content": "<p>What's the difference between this and <a href=\"https://github.com/rust-lang/rust/issues/68436\">https://github.com/rust-lang/rust/issues/68436</a>? I am getting somewhat confused here</p>",
        "id": 204214294,
        "sender_full_name": "lcnr",
        "timestamp": 1594997062
    },
    {
        "content": "<p>yea... I don't think you're the confused one</p>",
        "id": 204214373,
        "sender_full_name": "oli",
        "timestamp": 1594997104
    },
    {
        "content": "<p>it's me not having internalized all this stuff fully yet, I'll have that done soon</p>",
        "id": 204214399,
        "sender_full_name": "oli",
        "timestamp": 1594997121
    },
    {
        "content": "<p>I was literally reading that issue (again, to refresh my mind) when you commented with the link</p>",
        "id": 204214424,
        "sender_full_name": "oli",
        "timestamp": 1594997142
    },
    {
        "content": "<p>Ok, sorry about the mess above.</p>",
        "id": 204214761,
        "sender_full_name": "oli",
        "timestamp": 1594997306
    },
    {
        "content": "<p>So what about <br>\n<span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.60ConstEvaluatable.60.20generic.20functions/near/204214200\">said</a>:</p>\n<blockquote>\n<p>can we just make it a future incompat lint the moment we start implementing wf?<br>\nbasically make it a future incompat lint when there's an opt-out?<br>\nbecause right now we wouldn't be giving users any way out</p>\n</blockquote>",
        "id": 204214789,
        "sender_full_name": "oli",
        "timestamp": 1594997331
    },
    {
        "content": "<p>I personally feel like we haven't been able to formulate the exact goals and requirements here yet,<br>\nwhich makes the discussions in that issue quite draining for me <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 204214822,
        "sender_full_name": "lcnr",
        "timestamp": 1594997353
    },
    {
        "content": "<p>well, a future incompat lint is always opt-out, isn't it? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 204214881,
        "sender_full_name": "lcnr",
        "timestamp": 1594997387
    },
    {
        "content": "<p>oh? I'll write a summary and mark the discussion as resolved</p>",
        "id": 204214952,
        "sender_full_name": "oli",
        "timestamp": 1594997404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.60ConstEvaluatable.60.20generic.20functions/near/204214881\">said</a>:</p>\n<blockquote>\n<p>well, a future incompat lint is always opt-out, isn't it? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>hehe, that's not the solution I like, because if ppl turn them off (can they?) it'll mean when there's an actual fix they can apply, they won't see anything (and until then, they just got a useless warning)</p>",
        "id": 204215030,
        "sender_full_name": "oli",
        "timestamp": 1594997446
    },
    {
        "content": "<p>\"the discussion\" you mean <a href=\"https://github.com/rust-lang/rust/issues/68436\">#68436</a>? I haven't even fully understood the problem, how can this already be resolved</p>",
        "id": 204215142,
        "sender_full_name": "lcnr",
        "timestamp": 1594997514
    },
    {
        "content": "<blockquote>\n<p>actual fix</p>\n</blockquote>\n<p>We currently only allow functions which actually do not depend on any params, so you can just use any type you want for these functions</p>",
        "id": 204215341,
        "sender_full_name": "lcnr",
        "timestamp": 1594997604
    },
    {
        "content": "<p>so <code>[0; std::mem::size_of::&lt;*mut T&gt;()]</code> can always be replaced with <code>[0; std::mem::size_of::&lt;*mut ()&gt;()]</code></p>",
        "id": 204215395,
        "sender_full_name": "lcnr",
        "timestamp": 1594997632
    },
    {
        "content": "<p>Which admittedly does not communicate the intent as well as the original version</p>",
        "id": 204215464,
        "sender_full_name": "lcnr",
        "timestamp": 1594997649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.60ConstEvaluatable.60.20generic.20functions/near/204215142\">said</a>:</p>\n<blockquote>\n<p>\"the discussion\" you mean <a href=\"https://github.com/rust-lang/rust/issues/68436\">#68436</a>? I haven't even fully understood the problem, how can this already be resolved</p>\n</blockquote>\n<p>if we repeat the array length expression in the where bounds in some way (e.g. <code>where {std::mem::size_of::&lt;*mut T&gt;()}</code>) (ignore syntax bikeshed, let's just go with anything that works first) and fo reach <code>AnonConst</code> in the function body we require that either there's an exactly equal constant in the where bounds, or in case of <code>Unevaluated</code> we compare the MIR in a lossy way</p>",
        "id": 204216354,
        "sender_full_name": "oli",
        "timestamp": 1594998063
    },
    {
        "content": "<p>the where bounds are never evaluated unless they are <code>!needs_subst</code></p>",
        "id": 204216410,
        "sender_full_name": "oli",
        "timestamp": 1594998088
    },
    {
        "content": "<p>but instead where bounds on items used in a function are treated the same way as <code>AnonConst</code></p>",
        "id": 204216464,
        "sender_full_name": "oli",
        "timestamp": 1594998113
    },
    {
        "content": "<p>(there must be a where bound for the constant on the surrounding item)</p>",
        "id": 204216567,
        "sender_full_name": "oli",
        "timestamp": 1594998148
    },
    {
        "content": "<p>okay, so that's a solution, which makes sense, even if it's somewhat unwieldy for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204218207,
        "sender_full_name": "lcnr",
        "timestamp": 1594998904
    },
    {
        "content": "<p>we can't really solve this without adding some kind of logic system into mir, which doesn't really seem feasable, afaict</p>",
        "id": 204218307,
        "sender_full_name": "lcnr",
        "timestamp": 1594998958
    },
    {
        "content": "<p>So now that I have a solution which seems fine, I am only missing the problem which requires this solution <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n<p>Will just wait for your summary here</p>",
        "id": 204218488,
        "sender_full_name": "lcnr",
        "timestamp": 1594999030
    },
    {
        "content": "<p>yea sorry <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> I'm focussing on the mir-opt talk I'm holding tomorrow</p>",
        "id": 204223037,
        "sender_full_name": "oli",
        "timestamp": 1595001074
    },
    {
        "content": "<p>oooh, nice <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> will it get uploaded afterwards?</p>",
        "id": 204223648,
        "sender_full_name": "lcnr",
        "timestamp": 1595001301
    },
    {
        "content": "<p>definitely</p>",
        "id": 204224246,
        "sender_full_name": "oli",
        "timestamp": 1595001525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> hmm for some reason I thought the <code>size_of</code> example wouldn't break but I guess that's only because it's an intrinsic, a normal <code>const fn</code>would have problems still :/</p>",
        "id": 204227433,
        "sender_full_name": "eddyb",
        "timestamp": 1595002971
    },
    {
        "content": "<p><em>sigh</em></p>",
        "id": 204227439,
        "sender_full_name": "eddyb",
        "timestamp": 1595002975
    },
    {
        "content": "<p>allowing <code>size_of</code> would be quite a big bodge imo</p>",
        "id": 204227499,
        "sender_full_name": "lcnr",
        "timestamp": 1595003014
    },
    {
        "content": "<p><code>size_of</code> also is not an intrinsic. It calls an intrinsic which does not look into <code>ty::Ptr</code> so it doesn't care about <code>T</code></p>",
        "id": 204227640,
        "sender_full_name": "lcnr",
        "timestamp": 1595003082
    },
    {
        "content": "<p>if we do it would be because it's an intrinsic, not because it's <code>size_of</code></p>",
        "id": 204227644,
        "sender_full_name": "eddyb",
        "timestamp": 1595003085
    },
    {
        "content": "<p>ah if it's wrapped then it doesn't matter</p>",
        "id": 204227663,
        "sender_full_name": "eddyb",
        "timestamp": 1595003099
    },
    {
        "content": "<p>Also see</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(variant_count)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">variant_count</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204228220,
        "sender_full_name": "lcnr",
        "timestamp": 1595003396
    },
    {
        "content": "<p>heh</p>",
        "id": 204228781,
        "sender_full_name": "eddyb",
        "timestamp": 1595003696
    },
    {
        "content": "<p>/me realizes this means changing the way intrinsics are implemented can very easily cause accidental breakage rn</p>",
        "id": 204228954,
        "sender_full_name": "lcnr",
        "timestamp": 1595003791
    },
    {
        "content": "<p>let's say we only return a value if <code>!ty.needs_substs</code></p>",
        "id": 204229013,
        "sender_full_name": "lcnr",
        "timestamp": 1595003824
    },
    {
        "content": "<p>sudden breakage</p>",
        "id": 204229021,
        "sender_full_name": "lcnr",
        "timestamp": 1595003828
    },
    {
        "content": "<p>Luckily <code>type_id</code> is still const unstable</p>",
        "id": 204390171,
        "sender_full_name": "lcnr",
        "timestamp": 1595226580
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/74538\">https://github.com/rust-lang/rust/pull/74538</a></p>",
        "id": 204390172,
        "sender_full_name": "lcnr",
        "timestamp": 1595226581
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_type_id)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">any</span>::<span class=\"n\">TypeId</span>::<span class=\"n\">of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204390176,
        "sender_full_name": "lcnr",
        "timestamp": 1595226588
    },
    {
        "content": "<p>hah, yea, but that would've been a soundness fix, so...</p>",
        "id": 204392340,
        "sender_full_name": "oli",
        "timestamp": 1595229211
    },
    {
        "content": "<p>Thanks for pinging me here <a href=\"https://github.com/rust-lang/rust/pull/74491#issuecomment-661846982\">https://github.com/rust-lang/rust/pull/74491#issuecomment-661846982</a> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> </p>\n<p>That's pretty concerning <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 204546065,
        "sender_full_name": "lcnr",
        "timestamp": 1595337564
    },
    {
        "content": "<p>yea, but there's an easy fix, because we already created infrastructure for it</p>",
        "id": 204546124,
        "sender_full_name": "oli",
        "timestamp": 1595337600
    },
    {
        "content": "<blockquote>\n<p>We may should probably just move your optimization under mir-opt-level 3</p>\n</blockquote>\n<p>?</p>",
        "id": 204546221,
        "sender_full_name": "lcnr",
        "timestamp": 1595337639
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Body.html#structfield.required_consts\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/struct.Body.html#structfield.required_consts</a></p>",
        "id": 204546231,
        "sender_full_name": "oli",
        "timestamp": 1595337647
    },
    {
        "content": "<p>well, if we move the optimization to mir-opt-level 3, which still is the \"contains broken optimizations\" list, we don't expose this to nightly or stable users</p>",
        "id": 204546283,
        "sender_full_name": "oli",
        "timestamp": 1595337674
    },
    {
        "content": "<p>yeah, but that doesn't really seem desirable if this opt otherwise improves perf</p>",
        "id": 204546332,
        "sender_full_name": "lcnr",
        "timestamp": 1595337707
    },
    {
        "content": "<p>I just mean it as a temporary measure</p>",
        "id": 204546491,
        "sender_full_name": "oli",
        "timestamp": 1595337794
    },
    {
        "content": "<p>so the code is merged and tested</p>",
        "id": 204546509,
        "sender_full_name": "oli",
        "timestamp": 1595337803
    },
    {
        "content": "<p>I like small PRs <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 204546529,
        "sender_full_name": "oli",
        "timestamp": 1595337816
    },
    {
        "content": "<p>anyway, about your suggestion. It's to do <code>body.is_polymorphic = body.needs_subst();</code> right after mir building and then make the future incompat lint use that flag if a function with that flag is interpreted while still polymorphic?</p>",
        "id": 204546877,
        "sender_full_name": "oli",
        "timestamp": 1595338011
    },
    {
        "content": "<p>something like that</p>",
        "id": 204547818,
        "sender_full_name": "lcnr",
        "timestamp": 1595338581
    },
    {
        "content": "<p>yeah, don't quite know how to implement this myself</p>",
        "id": 204547836,
        "sender_full_name": "lcnr",
        "timestamp": 1595338595
    },
    {
        "content": "<p>not really too familiar with mir <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 204547849,
        "sender_full_name": "lcnr",
        "timestamp": 1595338608
    },
    {
        "content": "<p>should I try and implement this myself?</p>",
        "id": 204547910,
        "sender_full_name": "lcnr",
        "timestamp": 1595338642
    },
    {
        "content": "<p>have the time for this rn</p>",
        "id": 204547960,
        "sender_full_name": "lcnr",
        "timestamp": 1595338678
    },
    {
        "content": "<p>I'm still worried we'll break valid code</p>",
        "id": 204548703,
        "sender_full_name": "oli",
        "timestamp": 1595339088
    },
    {
        "content": "<p>so I want to somewhat quickly get const wf bounds working</p>",
        "id": 204548813,
        "sender_full_name": "lcnr",
        "timestamp": 1595339150
    },
    {
        "content": "<p>step 0: add the ability to add bounds? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 204548902,
        "sender_full_name": "oli",
        "timestamp": 1595339185
    },
    {
        "content": "<p>step 0: add future compat warning<br>\nstep 1: add bounds</p>",
        "id": 204548946,
        "sender_full_name": "lcnr",
        "timestamp": 1595339205
    },
    {
        "content": "<p>I'd feel much better about adding constraints if there's an \"escape\" hatch</p>",
        "id": 204548948,
        "sender_full_name": "oli",
        "timestamp": 1595339207
    },
    {
        "content": "<p>I'd be fine with doing both in one PR, but I'd wager that adding bounds is hard</p>",
        "id": 204549054,
        "sender_full_name": "oli",
        "timestamp": 1595339258
    },
    {
        "content": "<p>mixing that with the future compat warning seems fragile/bitrotty</p>",
        "id": 204549232,
        "sender_full_name": "oli",
        "timestamp": 1595339341
    },
    {
        "content": "<p>but I may be overreacting here</p>",
        "id": 204549275,
        "sender_full_name": "oli",
        "timestamp": 1595339359
    },
    {
        "content": "<p>My main concern is that it will take a while for const wf bounds to hit stable</p>",
        "id": 204549342,
        "sender_full_name": "lcnr",
        "timestamp": 1595339398
    },
    {
        "content": "<p>so we can't really just impl both at the same time (or we can, but it won't help people on stable)</p>",
        "id": 204549403,
        "sender_full_name": "lcnr",
        "timestamp": 1595339408
    },
    {
        "content": "<p>ah</p>",
        "id": 204549432,
        "sender_full_name": "oli",
        "timestamp": 1595339421
    },
    {
        "content": "<p>but we can turn on the future incompat lint together with the feature gate</p>",
        "id": 204549459,
        "sender_full_name": "oli",
        "timestamp": 1595339433
    },
    {
        "content": "<p>aaaaaaaaaa</p>",
        "id": 204549691,
        "sender_full_name": "lcnr",
        "timestamp": 1595339545
    },
    {
        "content": "<p>I would turn this into a hard error together with the feature gate tbh <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 204549713,
        "sender_full_name": "lcnr",
        "timestamp": 1595339558
    },
    {
        "content": "<p>ok... how about we stop dodging around hypotheticals and you do the future compat warning as a hard error for crater and see how bad it is</p>",
        "id": 204549826,
        "sender_full_name": "oli",
        "timestamp": 1595339614
    },
    {
        "content": "<p>then we can turn it into a future incompat lint</p>",
        "id": 204549857,
        "sender_full_name": "oli",
        "timestamp": 1595339630
    },
    {
        "content": "<p>I think a compat lint which says \"hey, what you are doing is dangerous and will stop compiling in the future, consider replacing the contained type variables with dummy values for now, see issue #XXXXX for more details\" should always be on</p>",
        "id": 204549974,
        "sender_full_name": "lcnr",
        "timestamp": 1595339680
    },
    {
        "content": "<p>Will do so, I don't think we encounter this too frequently</p>",
        "id": 204550023,
        "sender_full_name": "lcnr",
        "timestamp": 1595339701
    },
    {
        "content": "<p>jup, but it's good to have numbers</p>",
        "id": 204550047,
        "sender_full_name": "oli",
        "timestamp": 1595339711
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span>::<span class=\"n\">VALUE</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204554918,
        "sender_full_name": "lcnr",
        "timestamp": 1595342162
    },
    {
        "content": "<p>I think this fails with that check, let me quickly add this as a test</p>",
        "id": 204555000,
        "sender_full_name": "lcnr",
        "timestamp": 1595342199
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">LENGTH</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"bp\">Self</span>::<span class=\"n\">LENGTH</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204555382,
        "sender_full_name": "lcnr",
        "timestamp": 1595342384
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">marker</span>::<span class=\"n\">PhantomData</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">m1</span>: <span class=\"nc\">PhantomData</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">m2</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">S</span>::<span class=\"n\">size</span><span class=\"p\">()],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">size</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204555728,
        "sender_full_name": "lcnr",
        "timestamp": 1595342524
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">VALUE</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204555925,
        "sender_full_name": "lcnr",
        "timestamp": 1595342614
    },
    {
        "content": "<p>^ the last one is interesting... do we want to allow that?</p>",
        "id": 204555957,
        "sender_full_name": "lcnr",
        "timestamp": 1595342630
    },
    {
        "content": "<p>Aaaaaaaaaaah, the horror</p>",
        "id": 204556118,
        "sender_full_name": "lcnr",
        "timestamp": 1595342698
    },
    {
        "content": "<p>We can't just use <code>unused_generic_params</code> here, because afaik that works on optimized mir</p>",
        "id": 204556955,
        "sender_full_name": "lcnr",
        "timestamp": 1595343063
    },
    {
        "content": "<p>so we pretty much need to run something similar to <code>unused_generic_params</code> directly after <code>mir_built</code> and then check that all used generic params are concrete in the substs of the given unevaluated const</p>",
        "id": 204557536,
        "sender_full_name": "lcnr",
        "timestamp": 1595343299
    },
    {
        "content": "<p>As this is also user facing behavior we can't really use a shortcut and only consider the first<code>n</code>(64 for polymorphization) generic parameters, so that may end up costing some perf</p>",
        "id": 204557989,
        "sender_full_name": "lcnr",
        "timestamp": 1595343466
    },
    {
        "content": "<p>what's the problem with moving it to using <code>mir_built</code>?</p>",
        "id": 204559338,
        "sender_full_name": "oli",
        "timestamp": 1595344015
    },
    {
        "content": "<p>That we want <code>unused_generic_params</code> to run on optimized mir, as we want as many unused params as possible</p>",
        "id": 204559424,
        "sender_full_name": "lcnr",
        "timestamp": 1595344060
    },
    {
        "content": "<p>so this check and polymorphization have somewhat contradictory goals</p>",
        "id": 204559527,
        "sender_full_name": "lcnr",
        "timestamp": 1595344088
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> both how expensive is <code>unused_generic_params</code> and using dynamic allocation instead of <code>Bitset&lt;u64&gt;</code> and did you try using it on <code>mir_built</code> instead of <code>optimized_mir</code>?</p>",
        "id": 204559654,
        "sender_full_name": "lcnr",
        "timestamp": 1595344148
    },
    {
        "content": "<p>ooh</p>",
        "id": 204559683,
        "sender_full_name": "oli",
        "timestamp": 1595344162
    },
    {
        "content": "<p>wait, but why do you care about unsued generic params? I thought you just wanted to plainly forbid all generic params used in constants?</p>",
        "id": 204559868,
        "sender_full_name": "oli",
        "timestamp": 1595344227
    },
    {
        "content": "<p>It used a normal <code>BitSet</code> originally which didn’t have that limitation - eddy suggested changing it but it wasn’t that expensive IIRC.</p>",
        "id": 204559872,
        "sender_full_name": "davidtwco",
        "timestamp": 1595344229
    },
    {
        "content": "<p>I haven’t tried using <code>mir_built</code> - that might be more expensive if it’s traversing a lot more MIR; I assume it’d still work though.</p>",
        "id": 204559970,
        "sender_full_name": "davidtwco",
        "timestamp": 1595344279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.60ConstEvaluatable.60.20generic.20functions/near/204559868\">said</a>:</p>\n<blockquote>\n<p>wait, but why do you care about unsued generic params? I thought you just wanted to plainly forbid all generic params used in constants?</p>\n</blockquote>\n<p>Because I want to allow</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204560162,
        "sender_full_name": "lcnr",
        "timestamp": 1595344367
    },
    {
        "content": "<p>Let me think about this a bit more</p>",
        "id": 204560346,
        "sender_full_name": "lcnr",
        "timestamp": 1595344448
    },
    {
        "content": "<p>right. Can you get that by checking if <code>tcx.optimized_mir(def_id_of_anon_const).needs_subst()</code>?</p>",
        "id": 204560353,
        "sender_full_name": "oli",
        "timestamp": 1595344452
    },
    {
        "content": "<p><code>tcx.mir_built(def_id_of_anon_const).needs_subst()</code> may work, or just checking if type/const params exist, we don't care about lifetimes</p>",
        "id": 204560484,
        "sender_full_name": "lcnr",
        "timestamp": 1595344521
    },
    {
        "content": "<p>That would mean that we deal with \"local\" anon consts differently to other consts though, does it?</p>",
        "id": 204560520,
        "sender_full_name": "lcnr",
        "timestamp": 1595344541
    },
    {
        "content": "<p>not sure I understand</p>",
        "id": 204560665,
        "sender_full_name": "oli",
        "timestamp": 1595344596
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span>::<span class=\"n\">VALUE</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204560685,
        "sender_full_name": "lcnr",
        "timestamp": 1595344608
    },
    {
        "content": "<p>the mir of <code>Foo::&lt;u8&gt;::VALUE</code> still needs substs</p>",
        "id": 204560709,
        "sender_full_name": "lcnr",
        "timestamp": 1595344624
    },
    {
        "content": "<p>so <code>tcx.mir_built(def_id_of_anon_const).needs_subst()</code> would fail here</p>",
        "id": 204560735,
        "sender_full_name": "lcnr",
        "timestamp": 1595344640
    },
    {
        "content": "<p>hmm</p>",
        "id": 204560765,
        "sender_full_name": "oli",
        "timestamp": 1595344655
    },
    {
        "content": "<p>so we should check for this const if the substs of the unevaluated consts are all fully concrete (ignoring lifetimes)</p>",
        "id": 204560785,
        "sender_full_name": "lcnr",
        "timestamp": 1595344672
    },
    {
        "content": "<p>so... we have the situation where we have an <code>Unevaluated</code> pointing to an associated generic const, there we just need to check whether the substs are concrete, yes, but if you have an anon-const, that anon const will have the substs of the surrounding function in scope no matter if it uses them</p>",
        "id": 204561041,
        "sender_full_name": "oli",
        "timestamp": 1595344785
    },
    {
        "content": "<p>so there you'd need to look at the MIR</p>",
        "id": 204561053,
        "sender_full_name": "oli",
        "timestamp": 1595344792
    },
    {
        "content": "<p>that might work <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 204561193,
        "sender_full_name": "lcnr",
        "timestamp": 1595344851
    },
    {
        "content": "<p>at least it's worth trying</p>",
        "id": 204561203,
        "sender_full_name": "lcnr",
        "timestamp": 1595344859
    },
    {
        "content": "<p>oh and you need to compute this on the mir_built, so at the same time that <code>required_consts</code> is computed</p>",
        "id": 204561391,
        "sender_full_name": "oli",
        "timestamp": 1595344901
    },
    {
        "content": "<p>you can't query the <code>mir_built</code> except in the <code>mir_const</code> query</p>",
        "id": 204561451,
        "sender_full_name": "oli",
        "timestamp": 1595344916
    },
    {
        "content": "<p>added a <code>bool</code> to <code>mir::Body</code> for now</p>",
        "id": 204561598,
        "sender_full_name": "lcnr",
        "timestamp": 1595344949
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 204561609,
        "sender_full_name": "oli",
        "timestamp": 1595344954
    },
    {
        "content": "<p>we can always turn it into a query later</p>",
        "id": 204561626,
        "sender_full_name": "oli",
        "timestamp": 1595344960
    },
    {
        "content": "<p>looks good! thanks for helping me figuring this out <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> time to start a crater run for now</p>",
        "id": 204563223,
        "sender_full_name": "lcnr",
        "timestamp": 1595345639
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/issues/74595\">#74595</a></p>",
        "id": 204567272,
        "sender_full_name": "lcnr",
        "timestamp": 1595347496
    },
    {
        "content": "<p>concerning const wf bounds, we need some syntax for them if we don't just want to use <code>[u8; expression]:,</code> for this</p>",
        "id": 204718848,
        "sender_full_name": "lcnr",
        "timestamp": 1595449822
    },
    {
        "content": "<p>I personally quite like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204718996,
        "sender_full_name": "lcnr",
        "timestamp": 1595449911
    },
    {
        "content": "<p>Wait, do we want to automatically consider mentions of <code>[T; expr]</code> in where bounds as a const wf bound on expr?</p>",
        "id": 204719498,
        "sender_full_name": "lcnr",
        "timestamp": 1595450186
    },
    {
        "content": "<p>That would allow us to get the implementation done without having to worry about syntax and design stuff</p>",
        "id": 204719540,
        "sender_full_name": "lcnr",
        "timestamp": 1595450225
    },
    {
        "content": "<p>which is quite nice™</p>",
        "id": 204719565,
        "sender_full_name": "lcnr",
        "timestamp": 1595450241
    },
    {
        "content": "<p>I think we need to require wf on array length consts</p>",
        "id": 204771221,
        "sender_full_name": "oli",
        "timestamp": 1595492503
    },
    {
        "content": "<p>So what I am thinking about:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span>: <span class=\"nc\">Trait</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204771319,
        "sender_full_name": "lcnr",
        "timestamp": 1595492582
    },
    {
        "content": "<p>does this imply that <code>std::mem::size_of::&lt;T&gt;()</code> computes successfully inside of <code>foo</code></p>",
        "id": 204771338,
        "sender_full_name": "lcnr",
        "timestamp": 1595492599
    },
    {
        "content": "<p>I think it should</p>",
        "id": 204771353,
        "sender_full_name": "lcnr",
        "timestamp": 1595492614
    },
    {
        "content": "<p>I agree</p>",
        "id": 204771419,
        "sender_full_name": "oli",
        "timestamp": 1595492647
    },
    {
        "content": "<p>So about the design here. We probably want to relate the hir/mir of consts in the body with the hir/mir of the where bounds.</p>",
        "id": 204771835,
        "sender_full_name": "lcnr",
        "timestamp": 1595492964
    },
    {
        "content": "<p>Similar to how we relate types in <code>TypeRelation</code></p>",
        "id": 204771859,
        "sender_full_name": "lcnr",
        "timestamp": 1595492984
    },
    {
        "content": "<p>So it would probably be \"cleaner\" to do this on <code>optimized_mir</code>, but I am kind of afraid of strange optimization stuff happening and having to deal with promoteds and stuff</p>",
        "id": 204771969,
        "sender_full_name": "lcnr",
        "timestamp": 1595493056
    },
    {
        "content": "<p>while working on hir probably just requires walking the ast tree</p>",
        "id": 204771988,
        "sender_full_name": "lcnr",
        "timestamp": 1595493072
    },
    {
        "content": "<p>with a very liberal usage of \"just\"</p>",
        "id": 204772106,
        "sender_full_name": "lcnr",
        "timestamp": 1595493154
    },
    {
        "content": "<p>Also, should we allow</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204776968,
        "sender_full_name": "lcnr",
        "timestamp": 1595496953
    },
    {
        "content": "<p>considering that the return type of a function is also part of the public api this makes sense to me</p>",
        "id": 204777025,
        "sender_full_name": "lcnr",
        "timestamp": 1595496979
    },
    {
        "content": "<p>without needing a where bound here</p>",
        "id": 204777027,
        "sender_full_name": "lcnr",
        "timestamp": 1595496985
    },
    {
        "content": "<p>uh</p>",
        "id": 204777044,
        "sender_full_name": "oli",
        "timestamp": 1595497004
    },
    {
        "content": "<p>we can start out with the simple variant</p>",
        "id": 204777072,
        "sender_full_name": "oli",
        "timestamp": 1595497035
    },
    {
        "content": "<p>and figure out improvements later</p>",
        "id": 204777082,
        "sender_full_name": "oli",
        "timestamp": 1595497043
    },
    {
        "content": "<p>I don't think also inferring const wf from the function API will be a big effort, but yeah, the main priority is probably just get where bounds working here</p>",
        "id": 204777184,
        "sender_full_name": "lcnr",
        "timestamp": 1595497101
    },
    {
        "content": "<p>you can implement the <code>required_const_bounds</code> by creating a query that runs on <code>mir_const</code> or <code>mir_validated</code></p>",
        "id": 204777187,
        "sender_full_name": "oli",
        "timestamp": 1595497103
    },
    {
        "content": "<p>you just need to run it wherever the query that you depend on is stolen</p>",
        "id": 204777211,
        "sender_full_name": "oli",
        "timestamp": 1595497123
    },
    {
        "content": "<p>(before the stealing of course ^^)</p>",
        "id": 204777216,
        "sender_full_name": "oli",
        "timestamp": 1595497131
    },
    {
        "content": "<p>I've only skimmed this discussion, but my impression is there's consensus this shouldn't be allowed for now regardless of whether or not you use the type parameter in the body of the fn?</p>",
        "id": 204781542,
        "sender_full_name": "boats",
        "timestamp": 1595500569
    },
    {
        "content": "<p>From a lang perspective, we try not to have the bodies of functions leak information like this does</p>",
        "id": 204781560,
        "sender_full_name": "boats",
        "timestamp": 1595500596
    },
    {
        "content": "<p>I think so.</p>\n<p>One concern brought up by <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> is that by forbidding this, we have a breaking change which can't really be circumvented before const wf bounds are on stable (which we will hopefully be able to get to nightly in the next few weeks).</p>",
        "id": 204782340,
        "sender_full_name": "lcnr",
        "timestamp": 1595501363
    },
    {
        "content": "<p>So for example <code>let _ = [0; std::mem::size_of::&lt;*mut T&gt;()]</code> is a lot more expressive than <code>let _ = [0; std::mem::size_of::&lt;*mut ConcreteDummy&gt;()]</code></p>",
        "id": 204782417,
        "sender_full_name": "lcnr",
        "timestamp": 1595501410
    },
    {
        "content": "<p>Yea we'll see how crater turns out and decide what to do</p>",
        "id": 204783007,
        "sender_full_name": "boats",
        "timestamp": 1595501996
    }
]