[
    {
        "content": "<p>Can someone tell me why on this line: <a href=\"https://github.com/rust-lang/rust/blob/718d53b0cb7dde93499cb92950d60b412f5a3d05/compiler/rustc_trait_selection/src/traits/fulfill.rs#L355\">https://github.com/rust-lang/rust/blob/718d53b0cb7dde93499cb92950d60b412f5a3d05/compiler/rustc_trait_selection/src/traits/fulfill.rs#L355</a> the constness of the predicate is ignored? Why does this work for generic bounds on const fns?</p>\n<p>Background: I am trying to come up with a fix for assoc types in const impls not bounded as const.</p>",
        "id": 246584644,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626788213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> in <a href=\"https://github.com/rust-lang/rust/pull/79287/files\">https://github.com/rust-lang/rust/pull/79287/files</a> you said:</p>\n<blockquote>\n<p>We should have a proper check, and I think the only way to do that is to do it via well-formedness checks, though I'm not sure if we need a new one. Basically we need to add that additional wf-check only from within const contexts.</p>\n<p>The alternative (which you are suggesting I think?) is to encode in the existing wf-checks (that check whether a trait bound exists) that we are looking for a const Trait impl and not just a Trait impl when coming from a const context.</p>\n</blockquote>\n<p>Can you elaborate further on what should be done to fix this? (what should be changed in wf-check?)</p>",
        "id": 246685769,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626850838
    },
    {
        "content": "<p>I don't remember. Looking into it I found out that <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs\">https://github.com/rust-lang/rust/blob/master/src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs</a> is actually not testing th eright thing anymore</p>",
        "id": 246832737,
        "sender_full_name": "oli",
        "timestamp": 1626951682
    },
    {
        "content": "<p>As you can see <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7cccf58a7256b8d0df492eaeb191fb44\">on the playground</a>, it needs a <code>#![feature(const_fn_trait_bound)]</code></p>",
        "id": 246832822,
        "sender_full_name": "oli",
        "timestamp": 1626951731
    },
    {
        "content": "<p>we should probably unignore that test so we have a canary</p>",
        "id": 246832832,
        "sender_full_name": "oli",
        "timestamp": 1626951742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/rustc_trait_selection.20ignoring.20const.20trait.20predicate.3F/near/246832822\">said</a>:</p>\n<blockquote>\n<p>As you can see <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7cccf58a7256b8d0df492eaeb191fb44\">on the playground</a>, it needs a <code>#![feature(const_fn_trait_bound)]</code></p>\n</blockquote>\n<p>But the test is still not fixed, because we require a <code>const impl</code> but <code>S</code> is not.</p>",
        "id": 246839018,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626956571
    },
    {
        "content": "<p>yea, it isn't fixed, but it also doesn't reproduce the problem as written</p>",
        "id": 246840599,
        "sender_full_name": "oli",
        "timestamp": 1626957558
    },
    {
        "content": "<p>I got distracted mid-searching for more info XD</p>",
        "id": 246840616,
        "sender_full_name": "oli",
        "timestamp": 1626957571
    },
    {
        "content": "<p>I guess we can't add requirements to const/static initializers after the fact. If we required all trait usage to be const impls, we'd break things like <code>const FOO: () { &lt;Type as Trait&gt;::SOME_CONST; }</code></p>",
        "id": 246840787,
        "sender_full_name": "oli",
        "timestamp": 1626957682
    },
    {
        "content": "<p>where <code>impl Trait for Type</code> without <code>const</code></p>",
        "id": 246840797,
        "sender_full_name": "oli",
        "timestamp": 1626957691
    },
    {
        "content": "<p>so I guess we do need to just look at function calls</p>",
        "id": 246840803,
        "sender_full_name": "oli",
        "timestamp": 1626957701
    },
    {
        "content": "<p>We can either implement it in const checking or in wf-checking</p>",
        "id": 246840882,
        "sender_full_name": "oli",
        "timestamp": 1626957737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/rustc_trait_selection.20ignoring.20const.20trait.20predicate.3F/near/246840803\">said</a>:</p>\n<blockquote>\n<p>so I guess we do need to just look at function calls</p>\n</blockquote>\n<p>I'm confused. The real problem is that <code>PredicateKind::Trait(_, Constness::Const)</code> is ignored. The only thing that we changed in the trait selection AFAIK, was to drop non-const <code>impl</code>s in favor of const <code>impl</code>s. So in the case that a non-const <code>impl</code> is selected (no const <code>impl</code> found), we don't error, <strong>until</strong> we use it (call some function on the type)</p>",
        "id": 246851092,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626962651
    },
    {
        "content": "<p>oh</p>",
        "id": 246851710,
        "sender_full_name": "oli",
        "timestamp": 1626962917
    },
    {
        "content": "<p>I'm worried that not ignoring it will break existing code, but maybe we don't actually use such predicates there</p>",
        "id": 246851783,
        "sender_full_name": "oli",
        "timestamp": 1626962951
    },
    {
        "content": "<p>it is definitely worth a try. It was probably an oversight or a \"don't touch too much\" when that code was added</p>",
        "id": 246851825,
        "sender_full_name": "oli",
        "timestamp": 1626962973
    },
    {
        "content": "<p>also i think it was weird to have constness inside the variant instead of <code>TraitPredicate</code> i will open a pr for that in a sec</p>",
        "id": 246851975,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626963026
    },
    {
        "content": "<p>please sync with <span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> on that, she is also modifying <code>TraitPredicate</code> to contain a negation flag</p>",
        "id": 246852105,
        "sender_full_name": "oli",
        "timestamp": 1626963095
    },
    {
        "content": "<p>looks like <code>filter_negative_and_reservation_impls</code> is also the function that I want to modify. I will filter out non-const candidates when the obligation is <code>const</code>.</p>",
        "id": 246855891,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626964682
    },
    {
        "content": "<p>It actually caused breakage in libstd just as you thought, there are some const-unstable functions with bounds that will be unusable because my current change would always reject selected implementations if they are not const.</p>",
        "id": 246863893,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626968131
    },
    {
        "content": "<p>The problem is, I don't know where the predicates/obligations come from. If I know that a predicate from a function call originates from a non-const context I can then transform the predicates to be non-const, i guess</p>",
        "id": 246866675,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626969351
    },
    {
        "content": "<p>or I can remove all the const bounds from generics of const fn</p>",
        "id": 246867022,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626969500
    },
    {
        "content": "<p>and attempt to prove them in check_consts?</p>",
        "id": 246867093,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626969544
    },
    {
        "content": "<p>I would prefer to keep them around, and instead ignore them outside of const contexts. Not sure if that is possible?</p>",
        "id": 246869439,
        "sender_full_name": "oli",
        "timestamp": 1626970646
    },
    {
        "content": "<p>me neither. the solution might be keeping the non-const impl and decide whether that is desirable up the call stack, or we don't, but instead pass down non-const predicate at one point when we know that we are in a non-const context. I have no idea where I should change for either of these solutions</p>",
        "id": 246870510,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626971153
    },
    {
        "content": "<p>how about:</p>\n<ul>\n<li>First we remove const bounds added in astconv when the item is <code>const fn</code>:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">constness</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">default_constness_for_trait_bounds</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>Then we make it so that <code>TraitPredicate</code> would only be const when we expect it to be</li>\n<li>This means assoc types on const impls will transform their predicates when typechecking</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// if the item is inside a const impl, we transform the predicates to be const.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pred_map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">impl_constness</span><span class=\"p\">(</span><span class=\"n\">impl_ty</span><span class=\"p\">.</span><span class=\"n\">container</span><span class=\"p\">.</span><span class=\"n\">assert_impl</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">hir</span>::<span class=\"n\">Constness</span>::<span class=\"n\">NotConst</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">hir</span>::<span class=\"n\">Constness</span>::<span class=\"n\">Const</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">p</span>: <span class=\"nc\">ty</span>::<span class=\"n\">Predicate</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">map_bound</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">kind</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKind</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">tp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">tp</span><span class=\"p\">.</span><span class=\"n\">constness</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">Constness</span>::<span class=\"n\">Const</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateKind</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">tp</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">.</span><span class=\"n\">to_predicate</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>When we know that we are in a const context we transform the predicates of callee and check if those are met (maybe in check_consts)</li>\n<li>This will work (solves both issues: assoc types not bounded &amp; not rejecting calling const fn with non-const impl as param) but might be bad for performance because we are not doing the predicates check in typeck</li>\n</ul>",
        "id": 246875329,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626973253
    },
    {
        "content": "<p>I don't think that will work. We need to be able to track the const/nonconst from the ast in order to know the difference between <code>?const Trait</code> and <code>Trait</code> bounds on <code>const fn</code>.</p>",
        "id": 246961519,
        "sender_full_name": "oli",
        "timestamp": 1627035910
    },
    {
        "content": "<p>So... maybe we have been doing this all wrongly</p>",
        "id": 246961807,
        "sender_full_name": "oli",
        "timestamp": 1627036116
    },
    {
        "content": "<p>like, not what you are doing, but how the thing is done to begin with</p>",
        "id": 246961818,
        "sender_full_name": "oli",
        "timestamp": 1627036128
    },
    {
        "content": "<p>In my RFC I talked about a hypothetical effect-system that represents what we want. I don't want an effect system, but we could do something almost like that. Basically we add a new kind of generic parameter that doesn't exist syntactically, but we fill it in correctly. So <code>const fn foo&lt;T: Trait&gt;()</code> becomes <code>fn foo&lt;constness C, T: Trait&lt;C&gt;&gt;()</code>. Then we fill in these constness parameters similarly to how we substitute generic parameters with concrete ones</p>",
        "id": 246962128,
        "sender_full_name": "oli",
        "timestamp": 1627036379
    },
    {
        "content": "<p>...and that can just be syntactic sugar for something like this, with \"const\" generics?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// trait Tr {}</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CONSTNESS</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// impl const Tr for u8 {}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// impl Tr for i8</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"kc\">false</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// const fn const_fn&lt;NonConst: ?const Tr, Const: Tr&gt;() {}</span>\n<span class=\"k\">fn</span> <span class=\"nf\">const_fn</span><span class=\"o\">&lt;</span><span class=\"n\">NonConst</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"kc\">false</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Const</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246965425,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627039250
    },
    {
        "content": "<p>then we will need to add a generic arg to every trait, which might have implications..</p>",
        "id": 246965946,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627039654
    },
    {
        "content": "<p>it might also affect performance since we complicate the trait selection process for every trait</p>",
        "id": 246966018,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627039696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361356\">fee1-dead</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/rustc_trait_selection.20ignoring.20const.20trait.20predicate.3F/near/246965425\">said</a>:</p>\n<blockquote>\n<p>...and that can just be syntactic sugar for something like this, with \"const\" generics?</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// trait Tr {}</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CONSTNESS</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// impl const Tr for u8 {}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// impl Tr for i8</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Tr</span><span class=\"o\">&lt;</span><span class=\"kc\">false</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// const fn const_fn&lt;NonConst: ?const Tr, Const: Tr&gt;() {}</span>\n<span class=\"k\">fn</span> <span class=\"nf\">const_fn</span><span class=\"o\">&lt;</span><span class=\"n\">NonConst</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"kc\">false</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Const</span>: <span class=\"nc\">Tr</span><span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Don't say out the quiet part loud <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span> yes, we could totally just encode this as magic const generic parameters</p>",
        "id": 246967832,
        "sender_full_name": "oli",
        "timestamp": 1627041235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361356\">fee1-dead</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/rustc_trait_selection.20ignoring.20const.20trait.20predicate.3F/near/246966018\">said</a>:</p>\n<blockquote>\n<p>it might also affect performance since we complicate the trait selection process for every trait</p>\n</blockquote>\n<p>yea, but, don't we already do this with the new field on <code>TraitPredicate</code>?</p>",
        "id": 246967898,
        "sender_full_name": "oli",
        "timestamp": 1627041268
    },
    {
        "content": "<p>We can almost keep the current system</p>",
        "id": 246967912,
        "sender_full_name": "oli",
        "timestamp": 1627041285
    },
    {
        "content": "<p>I guess we just need a third variant <code>ConstnessVar</code> that we ICE if encountered during actual trait comparisons, and thus require them to have already been substituted with a concrete one</p>",
        "id": 246967967,
        "sender_full_name": "oli",
        "timestamp": 1627041362
    },
    {
        "content": "<p>we only generate them for const impls and const fn</p>",
        "id": 246968011,
        "sender_full_name": "oli",
        "timestamp": 1627041375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/rustc_trait_selection.20ignoring.20const.20trait.20predicate.3F/near/246967898\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"361356\">fee1-dead</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/rustc_trait_selection.20ignoring.20const.20trait.20predicate.3F/near/246966018\">said</a>:</p>\n<blockquote>\n<p>it might also affect performance since we complicate the trait selection process for every trait</p>\n</blockquote>\n<p>yea, but, don't we already do this with the new field on <code>TraitPredicate</code>?</p>\n</blockquote>\n<p>no because it (interacting with the new field) only happens when we have one candidate left. I think I might be wrong because I am not familiar with the system...</p>",
        "id": 246987012,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627051816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/rustc_trait_selection.20ignoring.20const.20trait.20predicate.3F/near/246967967\">said</a>:</p>\n<blockquote>\n<p>I guess we just need a third variant <code>ConstnessVar</code> that we ICE if encountered during actual trait comparisons, and thus require them to have already been substituted with a concrete one</p>\n</blockquote>\n<p>Third variant of which enum?</p>",
        "id": 246987334,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627051992
    },
    {
        "content": "<p>The <code>Constness</code> enum could get an <code>Infer</code> variant, that explicitly differentiates from known <code>NotConst</code> or <code>Const</code>, meaning we will have to treat it as <code>Const</code> if we are in a const context and as <code>NotConst</code> otherwise. This will push the work all the way down to where the comparison is necessary, but it also means we need to carry the const-contextness along throughout trait resolution</p>",
        "id": 246988328,
        "sender_full_name": "oli",
        "timestamp": 1627052427
    },
    {
        "content": "<p>alternatively we can eagerly substitute it with the appropriate variant before feeding it to trait resolution, but as you said, that may be expensive</p>",
        "id": 246988799,
        "sender_full_name": "oli",
        "timestamp": 1627052569
    },
    {
        "content": "<p>I can't find where I can insert the const-context <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 246996968,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627056246
    },
    {
        "content": "<p>Is there some context object available? Something where we usually get the TyCtxt from? Maybe you can add a new field somewhere</p>",
        "id": 246998182,
        "sender_full_name": "oli",
        "timestamp": 1627056912
    },
    {
        "content": "<p>I am going into the weekend soonish, so I can't dig into it right now, maybe start out with an eager approach that substitutes early just to see if this works in general?</p>",
        "id": 246998365,
        "sender_full_name": "oli",
        "timestamp": 1627057006
    },
    {
        "content": "<p>I believe it is <code>FnCtxt</code>, I will try that tomorrow.</p>",
        "id": 247001947,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627058725
    },
    {
        "content": "<p>edit: deleted</p>",
        "id": 247082377,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627143341
    }
]