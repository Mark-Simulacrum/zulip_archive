[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> mentioned that he would like to see a <a href=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\" title=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\">skill tree</a> for const-eval features. I think I have enough information to get started, but would greatly benefit from your help and/or input.</p>",
        "id": 196242568,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588627907
    },
    {
        "content": "<p>Here's the old stream where I mentioned some future stuff that I was interested in. <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Project.20ideas/near/183590338\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Project.20ideas/near/183590338\">https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Project.20ideas/near/183590338</a></p>",
        "id": 196242695,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588627988
    },
    {
        "content": "<p>I really need to suck it up and finish  the initial implementation of <a href=\"https://github.com/rust-lang/rfcs/issues/2632\" title=\"https://github.com/rust-lang/rfcs/issues/2632\">rust-lang/rfcs#2632</a> XD</p>",
        "id": 196242754,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588628040
    },
    {
        "content": "<p>lol wow, that's a great idea to visualize features</p>",
        "id": 196301882,
        "sender_full_name": "oli",
        "timestamp": 1588682606
    },
    {
        "content": "<p>starting now: <a href=\"https://hackmd.io/@oli-obk/const_eval-skill_tree\" title=\"https://hackmd.io/@oli-obk/const_eval-skill_tree\">https://hackmd.io/@oli-obk/const_eval-skill_tree</a></p>",
        "id": 196302101,
        "sender_full_name": "oli",
        "timestamp": 1588682756
    },
    {
        "content": "<p>that looks pretty cool</p>",
        "id": 196315795,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1588689153
    },
    {
        "content": "<p>Awesome!!! Thanks <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span></p>",
        "id": 196354612,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588706860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> maybe once you feel good about the state of this, ping me? I'd like to read it over and throw questions your way</p>",
        "id": 196359129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588708776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I should have mentioned this earlier but <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span>  has a repo for generating these from TOML files: <a href=\"https://github.com/nikomatsakis/skill-tree\" title=\"https://github.com/nikomatsakis/skill-tree\">https://github.com/nikomatsakis/skill-tree</a></p>",
        "id": 196360756,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588709499
    },
    {
        "content": "<p>I believe that's how <a href=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\" title=\"https://rust-lang.github.io/wg-traits/roadmap/skill-tree.html\">this skill tree</a> was rendered.</p>",
        "id": 196360849,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1588709530
    },
    {
        "content": "<p>ah neat</p>",
        "id": 196594044,
        "sender_full_name": "oli",
        "timestamp": 1588748384
    },
    {
        "content": "<p>I'll move to the skill-tree crate then</p>",
        "id": 196594057,
        "sender_full_name": "oli",
        "timestamp": 1588748392
    },
    {
        "content": "<p>should \"figure out unconst story\" be a bubble somewhere in that skill tree? :D</p>",
        "id": 196691648,
        "sender_full_name": "RalfJ",
        "timestamp": 1588796487
    },
    {
        "content": "<p>it is!</p>",
        "id": 196737780,
        "sender_full_name": "oli",
        "timestamp": 1588838610
    },
    {
        "content": "<p>or are you asking whether it should not be in there?</p>",
        "id": 196737790,
        "sender_full_name": "oli",
        "timestamp": 1588838620
    },
    {
        "content": "<p>ah there it is, next to transmute. isn't there also a \"raw ptr in const\" feature?</p>",
        "id": 196746093,
        "sender_full_name": "RalfJ",
        "timestamp": 1588843755
    },
    {
        "content": "<p>also, union field accesses</p>",
        "id": 196746097,
        "sender_full_name": "RalfJ",
        "timestamp": 1588843761
    },
    {
        "content": "<p>and comparing raw ptrs maybe could have a bubble \"POINTER EQUALITY IS SCARY GO AWAY\" or so :D</p>",
        "id": 196746110,
        "sender_full_name": "RalfJ",
        "timestamp": 1588843784
    },
    {
        "content": "<p>I'd rather not allow that in CTFE until we figured out more how to handle raw ptrs in patterns / const generics</p>",
        "id": 196746204,
        "sender_full_name": "RalfJ",
        "timestamp": 1588843821
    },
    {
        "content": "<p>it's not finished yet!!</p>",
        "id": 196752229,
        "sender_full_name": "oli",
        "timestamp": 1588847593
    },
    {
        "content": "<p>yea, raw pointers are a pain</p>",
        "id": 196752255,
        "sender_full_name": "oli",
        "timestamp": 1588847628
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Skill.20tree/near/196752229\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Skill.20tree/near/196752229\">said</a>:</p>\n<blockquote>\n<p>it's not finished yet!!</p>\n</blockquote>\n<p>sure, just leaving notes for when you get back to it :)</p>",
        "id": 196867509,
        "sender_full_name": "RalfJ",
        "timestamp": 1588924756
    },
    {
        "content": "<p>Current status: <a href=\"https://github.com/rust-lang/const-eval/pull/43\">https://github.com/rust-lang/const-eval/pull/43</a></p>",
        "id": 197749792,
        "sender_full_name": "oli",
        "timestamp": 1589575224
    },
    {
        "content": "<p>As stuff is stabilized, does it change color or get removed or...?</p>",
        "id": 200439457,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591805924
    },
    {
        "content": "<p>I don't think the skill tree software has support for \"this is stabilized\", so imo we should just remove those nodes</p>",
        "id": 200439558,
        "sender_full_name": "oli",
        "timestamp": 1591805960
    },
    {
        "content": "<p>A reasonable compromise, but ultimately less impressive. Gotta see the hundreds of nodes you‚Äôve already done. üòè</p>",
        "id": 200440163,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1591806209
    },
    {
        "content": "<p>Hahahahaha ^^^</p>",
        "id": 200479368,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1591824537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> for the \"what would it take\" style questions, I've been pointed towards the skill tree in the past: <a href=\"https://static.turbo.fish/const-eval-skill-tree/skill-tree.html\">https://static.turbo.fish/const-eval-skill-tree/skill-tree.html</a></p>",
        "id": 205150231,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595873746
    },
    {
        "content": "<p>I was on the call where that was presented. :)</p>",
        "id": 205150358,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595873794
    },
    {
        "content": "<p>I guess it must not cover what you want then. Sorry, I'll try to stop repeating knowledge you already know.</p>",
        "id": 205150415,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595873832
    },
    {
        "content": "<p>No, I appreciate the reminder, and it was entirely appropriate. :)</p>",
        "id": 205151118,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595874195
    },
    {
        "content": "<p>It just didn't tell me whether, for instance, <code>&amp;'static str</code> needed all the same dependencies as \"String operations\".</p>",
        "id": 205151949,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595874623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Skill.20tree/near/200439558\">said</a>:</p>\n<blockquote>\n<p>I don't think the skill tree software has support for \"this is stabilized\", so imo we should just remove those nodes</p>\n</blockquote>\n<p>it does have a \"Status\"</p>",
        "id": 205366346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596034036
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Skill.20tree/near/205151949\">said</a>:</p>\n<blockquote>\n<p>It just didn't tell me whether, for instance, <code>&amp;'static str</code> needed all the same dependencies as \"String operations\".</p>\n</blockquote>\n<p>I guess the question is what you want to to with <code>&amp;'static str</code></p>",
        "id": 205574169,
        "sender_full_name": "RalfJ",
        "timestamp": 1596188594
    },
    {
        "content": "<p>I dont see any problems with string literals</p>",
        "id": 205574177,
        "sender_full_name": "RalfJ",
        "timestamp": 1596188599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Skill.20tree/near/205574169\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Skill.20tree/near/205151949\">said</a>:</p>\n<blockquote>\n<p>It just didn't tell me whether, for instance, <code>&amp;'static str</code> needed all the same dependencies as \"String operations\".</p>\n</blockquote>\n<p>I guess the question is what you want to to with <code>&amp;'static str</code></p>\n</blockquote>\n<p>I wanted to create a <code>const</code> <code>&amp;'static str</code> by concatenating other <code>const</code> <code>&amp;'static str</code>s, not just string literals.</p>",
        "id": 205654340,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596240761
    },
    {
        "content": "<p>I had two use cases for it. One was that I had several const strings, and needed to construct a string of the form <code>thing1={},thing2={},thing3={}</code> to pass to something else. I didn't mind turning that into a concatenation rather than a full format, but I did want the string to be constant. The other involved needing both a basename and a path, and wanting to have both of those as constants.</p>",
        "id": 205654456,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596240921
    },
    {
        "content": "<p>note that format strings need <em>syntactical</em> strings, no amount of const eval can ever teach format strings to be able to use constants. What would be needed for that feature would be querified name resolution, which idk if it's even possible.</p>",
        "id": 205664574,
        "sender_full_name": "oli",
        "timestamp": 1596257730
    },
    {
        "content": "<p>Wait, if I'm understanding this correctly, we're talking about the use case:<br>\n<code>const foo : &amp;'static str = format!(\"{}\", \"bar\");</code><br>\nRight?</p>",
        "id": 205739440,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596394805
    },
    {
        "content": "<p>Why can't this happen in const eval?</p>",
        "id": 205739465,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596394863
    },
    {
        "content": "<p>I'm guessing that maybe macros resolve after const eval?</p>",
        "id": 205739481,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596394916
    },
    {
        "content": "<p>Ah no wait</p>",
        "id": 205739526,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596394936
    },
    {
        "content": "<p>You need to resolve the format string <em>and then the macro</em></p>",
        "id": 205739535,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596394958
    },
    {
        "content": "<p>The format string is a constant</p>",
        "id": 205739553,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596394984
    },
    {
        "content": "<p>So you resolve it first and then go for the macro</p>",
        "id": 205739557,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596394996
    },
    {
        "content": "<p>And only <em>after all of that</em></p>",
        "id": 205739565,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395016
    },
    {
        "content": "<p>You can resolve the formatted string</p>",
        "id": 205739573,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395030
    },
    {
        "content": "<p>Which would mean that const eval would need to happen twice</p>",
        "id": 205739630,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395055
    },
    {
        "content": "<p>Or thrice, or any number of times, until a fixed point</p>",
        "id": 205739636,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395070
    },
    {
        "content": "<p>Is that the issue, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>?</p>",
        "id": 205739641,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395078
    },
    {
        "content": "<p>if const eval gets strong enough, can't we check the argument count during const eval?</p>",
        "id": 205739643,
        "sender_full_name": "lcnr",
        "timestamp": 1596395081
    },
    {
        "content": "<p>we will never support <code>format!(\"{name}\")</code> using const eval though</p>",
        "id": 205739664,
        "sender_full_name": "lcnr",
        "timestamp": 1596395113
    },
    {
        "content": "<p>at least I don't see how</p>",
        "id": 205739665,
        "sender_full_name": "lcnr",
        "timestamp": 1596395117
    },
    {
        "content": "<p>You mean like<br>\n<code>format!(\"{}\", name);</code>?</p>",
        "id": 205739794,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395289
    },
    {
        "content": "<p>(Or is <code>format!(\"{name}\")</code> legal? I'd never seen that syntax x3)</p>",
        "id": 205739806,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395335
    },
    {
        "content": "<p>no,I mean <a href=\"https://github.com/rust-lang/rust/issues/67984\">https://github.com/rust-lang/rust/issues/67984</a></p>",
        "id": 205739808,
        "sender_full_name": "lcnr",
        "timestamp": 1596395340
    },
    {
        "content": "<p>which is accepted, but not yet implemented afaik</p>",
        "id": 205739814,
        "sender_full_name": "lcnr",
        "timestamp": 1596395349
    },
    {
        "content": "<p>Holy fuck, that is some wizardry</p>",
        "id": 205739874,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395407
    },
    {
        "content": "<p>Can you do that with macros?</p>",
        "id": 205739880,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395415
    },
    {
        "content": "<p>You can't, right?</p>",
        "id": 205739884,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395421
    },
    {
        "content": "<p>Not with macro_rules</p>",
        "id": 205739890,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395429
    },
    {
        "content": "<p>yeah</p>",
        "id": 205739891,
        "sender_full_name": "lcnr",
        "timestamp": 1596395433
    },
    {
        "content": "<p>Kay</p>",
        "id": 205739896,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395446
    },
    {
        "content": "<p>you have to look into string literals here</p>",
        "id": 205739898,
        "sender_full_name": "lcnr",
        "timestamp": 1596395451
    },
    {
        "content": "<p>Yeah, that... that seems very magical, dunno how that would fit into const eval</p>",
        "id": 205739914,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395473
    },
    {
        "content": "<p>Like the current <code>format!</code> macro, I mean I can see how you'd implement it (it is definitely harder than how I am painting it because this is a big simplification): do const eval, do macro res, do const eval, macro res, etc up to a fixed point (probably with a repetition limit because it could be turing complete?) and then you're off to the races</p>",
        "id": 205739987,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395587
    },
    {
        "content": "<p>But this one? Ehh... it escapes me</p>",
        "id": 205739994,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395619
    },
    {
        "content": "<p>At least it escapes current me</p>",
        "id": 205739995,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596395637
    },
    {
        "content": "<p>I don't even think we need the macro res &lt;-&gt; const eval loop here</p>",
        "id": 205740202,
        "sender_full_name": "lcnr",
        "timestamp": 1596395892
    },
    {
        "content": "<p>we could use a type level list as an input and only check if the inputs line up with the fmt string</p>",
        "id": 205740238,
        "sender_full_name": "lcnr",
        "timestamp": 1596395982
    },
    {
        "content": "<p>i don't yet get why we would need another macro expansion afterwards</p>",
        "id": 205740280,
        "sender_full_name": "lcnr",
        "timestamp": 1596396007
    },
    {
        "content": "<p>Because you could make a format string that depended on a macro</p>",
        "id": 205740291,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396035
    },
    {
        "content": "<p>At least that's how I was thinking about it. No idea if the system bypasses that use case or plainly just rejects it</p>",
        "id": 205740300,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396058
    },
    {
        "content": "<p>do you have an example of what you mean here</p>",
        "id": 205740302,
        "sender_full_name": "lcnr",
        "timestamp": 1596396062
    },
    {
        "content": "<p>Yas</p>",
        "id": 205740306,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396067
    },
    {
        "content": "<p>One sec</p>",
        "id": 205740310,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396072
    },
    {
        "content": "<p><code>format!(format!(\"{}, {}\", foo(), bar()), baz())</code></p>",
        "id": 205740359,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396131
    },
    {
        "content": "<p>So with <code>foo</code> and <code>bar</code> you create the second format string</p>",
        "id": 205740362,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396155
    },
    {
        "content": "<p>They are const fns, of course</p>",
        "id": 205740365,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396163
    },
    {
        "content": "<p>yeah, I think that would work with what I have in mind</p>",
        "id": 205740367,
        "sender_full_name": "lcnr",
        "timestamp": 1596396180
    },
    {
        "content": "<p>Ohh, sweet :3</p>",
        "id": 205740370,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396191
    },
    {
        "content": "<p>Because the arguments to the outer format will always be just <code>baz()</code></p>",
        "id": 205740374,
        "sender_full_name": "lcnr",
        "timestamp": 1596396206
    },
    {
        "content": "<p>but yeah, I am not sure if we will ever do this <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 205740378,
        "sender_full_name": "lcnr",
        "timestamp": 1596396238
    },
    {
        "content": "<p>(Tangent: I am still thinking about that magic format macro. Naming variables in a string... doesn't that remind you of reflection? It reminds me of the times I'd encountered reflection in C#, where you looked and pointed at the program from the program itself...)</p>",
        "id": 205740448,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396334
    },
    {
        "content": "<p>we are only looking at variable names here, not types (so the format macro still works during macro expansion)</p>",
        "id": 205740500,
        "sender_full_name": "lcnr",
        "timestamp": 1596396392
    },
    {
        "content": "<p>Ohh</p>",
        "id": 205740503,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396404
    },
    {
        "content": "<p>It very clever magic :D</p>",
        "id": 205740505,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396413
    },
    {
        "content": "<p>Well, the thing that you mentioned, maybe we'll implement that in the far future</p>",
        "id": 205740539,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396482
    },
    {
        "content": "<p>Whenever Rust is settled-ish</p>",
        "id": 205740562,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396495
    },
    {
        "content": "<p>And we wanna go for fruits that are hanging way up above</p>",
        "id": 205740564,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396510
    },
    {
        "content": "<p>:3</p>",
        "id": 205740566,
        "sender_full_name": "F√©lix Fischer",
        "timestamp": 1596396513
    },
    {
        "content": "<p>I am now starting the blog post (as per <a href=\"https://github.com/nikomatsakis/lang-team/blob/master/design-meeting-minutes/2020-06-24-const-eval-unsafe-and-skill-tree.md\">https://github.com/nikomatsakis/lang-team/blob/master/design-meeting-minutes/2020-06-24-const-eval-unsafe-and-skill-tree.md</a>) in <a href=\"https://hackmd.io/7Rs5q0h4TImeOGbv9NYxcQ\">https://hackmd.io/7Rs5q0h4TImeOGbv9NYxcQ</a></p>",
        "id": 215080847,
        "sender_full_name": "oli",
        "timestamp": 1604056417
    },
    {
        "content": "<p>and a PR is up: <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/719\">https://github.com/rust-lang/blog.rust-lang.org/pull/719</a></p>",
        "id": 215084437,
        "sender_full_name": "oli",
        "timestamp": 1604058937
    },
    {
        "content": "<p>I think the blog expects to have the md file with a known header</p>",
        "id": 215084971,
        "sender_full_name": "lqd",
        "timestamp": 1604059337
    },
    {
        "content": "<p>like the first few lines of <a href=\"https://raw.githubusercontent.com/rust-lang/blog.rust-lang.org/master/posts/inside-rust/2020-10-23-Core-team-membership.md\">https://raw.githubusercontent.com/rust-lang/blog.rust-lang.org/master/posts/inside-rust/2020-10-23-Core-team-membership.md</a></p>",
        "id": 215085039,
        "sender_full_name": "lqd",
        "timestamp": 1604059400
    }
]