[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> any idea why \"const array repeat expressions\" don't work in liballoc even with the feature set? See <a href=\"https://github.com/rust-lang/rust/commit/4c2c7e0cc9b2b589fe2bab44173acc2170b20c09\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/4c2c7e0cc9b2b589fe2bab44173acc2170b20c09\">https://github.com/rust-lang/rust/commit/4c2c7e0cc9b2b589fe2bab44173acc2170b20c09</a> for the code, and <a href=\"https://github.com/rust-lang/rust/issues/53491#issuecomment-513147996\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53491#issuecomment-513147996\">https://github.com/rust-lang/rust/issues/53491#issuecomment-513147996</a> for the error. Inlining the macro makes no difference so that's not it.</p>",
        "id": 171248792,
        "sender_full_name": "RalfJ",
        "timestamp": 1563535020
    },
    {
        "content": "<p>maybe the problem is that he <code>const fn</code> being called is not in the same crate?</p>",
        "id": 171249021,
        "sender_full_name": "RalfJ",
        "timestamp": 1563535298
    },
    {
        "content": "<p>I seem to recall that being an issue for some stuff <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> did in the past. Seems like a bad footgun.</p>",
        "id": 171249030,
        "sender_full_name": "RalfJ",
        "timestamp": 1563535315
    },
    {
        "content": "<p>Did you enable the appropriate feature gate for the method to be const fn</p>",
        "id": 171250836,
        "sender_full_name": "oli",
        "timestamp": 1563537397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> are you trying to use it at stage0?</p>",
        "id": 171251538,
        "sender_full_name": "eddyb",
        "timestamp": 1563538131
    },
    {
        "content": "<p>hmm, looks like no</p>",
        "id": 171251560,
        "sender_full_name": "eddyb",
        "timestamp": 1563538155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ohhh you need to manually allow promotion on <code>MaybeUninit::uninit</code></p>",
        "id": 171251572,
        "sender_full_name": "eddyb",
        "timestamp": 1563538182
    },
    {
        "content": "<p>ugh this is annoying</p>",
        "id": 171251578,
        "sender_full_name": "eddyb",
        "timestamp": 1563538192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> can we special-case zero-arg const fn's as always promotable? they're effectively constants that you call like a function for no real reason other than aesthetics :P</p>",
        "id": 171251663,
        "sender_full_name": "eddyb",
        "timestamp": 1563538245
    },
    {
        "content": "<p>we should even intern their computation like constants</p>",
        "id": 171251677,
        "sender_full_name": "eddyb",
        "timestamp": 1563538271
    },
    {
        "content": "<p>not unlike the zero-arg intrinsics that are supported by CTFE, now that I think about it</p>",
        "id": 171251695,
        "sender_full_name": "eddyb",
        "timestamp": 1563538312
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> ohhh you need to manually allow promotion on <code>MaybeUninit::uninit</code></p>\n</blockquote>\n<p>promotion is involved, then? also why does it work in libcore?</p>",
        "id": 171252637,
        "sender_full_name": "RalfJ",
        "timestamp": 1563539210
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> can we special-case zero-arg const fn's as always promotable? they're effectively constants that you call like a function for no real reason other than aesthetics :P</p>\n</blockquote>\n<p>please no let's not make more things promotable^^</p>",
        "id": 171252656,
        "sender_full_name": "RalfJ",
        "timestamp": 1563539227
    },
    {
        "content": "<p>ugh</p>",
        "id": 171252680,
        "sender_full_name": "eddyb",
        "timestamp": 1563539256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is right though in the sense that adding <code>#[rustc_promotable]</code> to <code>MaybeUninit::uninit</code> fixes it</p>",
        "id": 171252792,
        "sender_full_name": "RalfJ",
        "timestamp": 1563539346
    },
    {
        "content": "<p>but why is that not needed within the same crate?</p>",
        "id": 171252800,
        "sender_full_name": "RalfJ",
        "timestamp": 1563539354
    },
    {
        "content": "<p>alternatively, we could move the <code>Copy</code> analysis involved here into the borrowck but id khow much I like that</p>",
        "id": 171252812,
        "sender_full_name": "eddyb",
        "timestamp": 1563539375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> that it works same-crate without promotable is <em>weird</em></p>",
        "id": 171252819,
        "sender_full_name": "eddyb",
        "timestamp": 1563539383
    },
    {
        "content": "<p>maybe report as a bug, especially if you can repro in a small standalone crate</p>",
        "id": 171252838,
        "sender_full_name": "eddyb",
        "timestamp": 1563539393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> so, some back story: this idea that <code>[expr; n]</code> could use promotion on <code>expr</code> to bypass the <code>Copy</code> requirement... predates the discovery of how annoying promoting const fn's is</p>",
        "id": 171252926,
        "sender_full_name": "eddyb",
        "timestamp": 1563539466
    },
    {
        "content": "<p>funny that I wrote a comment about promotion and array-repeat earlier today without having any idea^^</p>",
        "id": 171253029,
        "sender_full_name": "RalfJ",
        "timestamp": 1563539542
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/49147#issuecomment-513148454\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49147#issuecomment-513148454\">https://github.com/rust-lang/rust/issues/49147#issuecomment-513148454</a></p>",
        "id": 171253047,
        "sender_full_name": "RalfJ",
        "timestamp": 1563539556
    },
    {
        "content": "<p>and no I cannot repro... seems to be a libcore magic thing</p>",
        "id": 171253072,
        "sender_full_name": "RalfJ",
        "timestamp": 1563539586
    },
    {
        "content": "<p>oh</p>",
        "id": 171253410,
        "sender_full_name": "RalfJ",
        "timestamp": 1563539932
    },
    {
        "content": "<p>I think the uses in libcore just <em>are</em> <code>Copy</code>, actually^^</p>",
        "id": 171253420,
        "sender_full_name": "RalfJ",
        "timestamp": 1563539942
    },
    {
        "content": "<p>yeah. since introducing the macro we got <code>MaybeUninit&lt;T&gt;: Copy</code> if <code>T: Copy</code>, so it's not as needed any more as it was. but in liballoc it still truly is needed.</p>",
        "id": 171253635,
        "sender_full_name": "RalfJ",
        "timestamp": 1563540148
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/rust/pull/62799\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62799\">https://github.com/rust-lang/rust/pull/62799</a></p>",
        "id": 171254158,
        "sender_full_name": "RalfJ",
        "timestamp": 1563540612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> let's rather add AnonConst as something users can write via <code>const{}</code> blocks or sth</p>",
        "id": 171313919,
        "sender_full_name": "oli",
        "timestamp": 1563602908
    },
    {
        "content": "<p>We can even create diagnostics suggesting such blocks in case some code errors due to not getting promoted when it could have been const</p>",
        "id": 171313932,
        "sender_full_name": "oli",
        "timestamp": 1563602966
    },
    {
        "content": "<p>ugh</p>",
        "id": 171327622,
        "sender_full_name": "eddyb",
        "timestamp": 1563629495
    },
    {
        "content": "<p>I mean, feel free to RFC it</p>",
        "id": 171327664,
        "sender_full_name": "eddyb",
        "timestamp": 1563629530
    },
    {
        "content": "<p>but it will be a minor nightmare</p>",
        "id": 171327668,
        "sender_full_name": "eddyb",
        "timestamp": 1563629541
    },
    {
        "content": "<p>unlike consts of array lengths or const generic path args, for example, you'll need shared inference with the parent</p>",
        "id": 171327679,
        "sender_full_name": "eddyb",
        "timestamp": 1563629597
    },
    {
        "content": "<p>Hm</p>",
        "id": 171328956,
        "sender_full_name": "oli",
        "timestamp": 1563631882
    },
    {
        "content": "<p>a replacement for (complex) promotion would also need to share inference with the parent though I guess?</p>",
        "id": 171341994,
        "sender_full_name": "RalfJ",
        "timestamp": 1563655641
    }
]