[
    {
        "content": "<p>For a hacky workaround, this one is surprisingly nice.</p>\n<p>Main focuses were const, no macros, and no buildâ€‹.rs. <del>The unreachable_unchecked is more of a debug aid that can be commented out.</del> Use panic instead.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_panic)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">ConString</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"n\">N</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">len</span>: <span class=\"kt\">u8</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ConString</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"n\">N</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">len</span>: <span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">panic!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Display</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ConString</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fmt</span>::<span class=\"n\">Formatter</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">std</span>::<span class=\"n\">fmt</span>::<span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"o\">..</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// SAFETY: ascii only :)</span>\n<span class=\"w\">            </span><span class=\"n\">core</span>::<span class=\"kt\">str</span>::<span class=\"n\">from_utf8_unchecked</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">write_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Constr8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ConString</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Constr16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ConString</span><span class=\"o\">&lt;</span><span class=\"mi\">16</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Constr32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ConString</span><span class=\"o\">&lt;</span><span class=\"mi\">32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">type</span> <span class=\"nc\">Constr48</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ConString</span><span class=\"o\">&lt;</span><span class=\"mi\">48</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Instead of having to return <code>([u8;8], len)</code>, ConString allows to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">x_to_str</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">N</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Constr8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0_</span><span class=\"k\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1_</span><span class=\"k\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// do some cool bithacks to turn r into ascii</span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">to_le_bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Constr8</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">bytes</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 246393455,
        "sender_full_name": "Bot+",
        "timestamp": 1626635383
    },
    {
        "content": "<p>That use of <code>core::hint::unreachable_unchecked</code> is unsound, this non-<code>unsafe</code> function can be called at runtime, and then cause Undefined Behavior.</p>",
        "id": 246403992,
        "sender_full_name": "matt1992",
        "timestamp": 1626650032
    },
    {
        "content": "<p>also why do you need the <code>core_intrinsics</code> feature?</p>",
        "id": 246404112,
        "sender_full_name": "RalfJ",
        "timestamp": 1626650211
    },
    {
        "content": "<p>but this looks neat :)</p>",
        "id": 246404113,
        "sender_full_name": "RalfJ",
        "timestamp": 1626650216
    },
    {
        "content": "<blockquote>\n<p>That use of <code>core::hint::unreachable_unchecked</code> is unsound, this non-<code>unsafe</code> function can be called at runtime, and then cause Undefined Behavior.</p>\n</blockquote>\n<p>Even if called in const, it can still cause Undefined Behaviour.</p>",
        "id": 246409061,
        "sender_full_name": "Connor Horman",
        "timestamp": 1626658675
    },
    {
        "content": "<p>While technically true, I'm fairly certain any const call to that method is caught in const eval.</p>",
        "id": 246411718,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1626663419
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Const.20string-ish.2C.20usable.20today/near/246411718\">said</a>:</p>\n<blockquote>\n<p>While technically true, I'm fairly certain any const call to that method is caught in const eval.</p>\n</blockquote>\n<p>that alone is not enough -- we could also do optimizations that exploit <code>unreachable_unchecked</code>; if we did, then catching the calls during evaluation does not help. we currently dont do such optimizations but there is no guarantee for this.</p>",
        "id": 246426739,
        "sender_full_name": "RalfJ",
        "timestamp": 1626681917
    },
    {
        "content": "<p>Doesn't <a href=\"https://rust-lang.github.io/rfcs/3016-const-ub.html\">RFC 3016</a> specify that this is caught reliably?</p>",
        "id": 246436080,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626688692
    },
    {
        "content": "<p>I wanted it to say that, but the RFC was weakened to not guarantee anthing</p>",
        "id": 246436147,
        "sender_full_name": "RalfJ",
        "timestamp": 1626688761
    },
    {
        "content": "<p>From the RFC:</p>\n<blockquote>\n<p>For <code>rustc</code> specifically at the time the RFC is written, a lot of UB will actually be detected reliably:</p>\n</blockquote>\n<p>and</p>\n<blockquote>\n<p>However, this is just a snapshot of what <code>rustc</code> currently does. None of this is _guaranteed_, and <code>rustc</code> may relax or otherwise change its UB checking any time.</p>\n</blockquote>",
        "id": 246436150,
        "sender_full_name": "bjorn3",
        "timestamp": 1626688762
    },
    {
        "content": "<p>To be honest I originally had unreachable! there, but had to swap it to its unsafe counterpart because the former isn't const yet.</p>\n<p>Yes, at best it is an awful footgun but it does its job for now.</p>\n<p>In practice this instance of UB crashes my non-const test suite with illegal instruction, so only damage is loss of a nice backtrace. With extensive tracing/logging the backtrace is actually redundant.</p>",
        "id": 246623017,
        "sender_full_name": "Bot+",
        "timestamp": 1626802066
    },
    {
        "content": "<p>So turns out my abuse of UB was entirely pointless.</p>\n<p>I did spot <a href=\"https://github.com/rust-lang/rust/pull/86998\">#â€‹86998</a> earlier but I was unaware plain <code>panic!();</code> already works with <code>#![feature(const_panic)]</code>.</p>",
        "id": 246623722,
        "sender_full_name": "Bot+",
        "timestamp": 1626802405
    },
    {
        "content": "<blockquote>\n<p>In practice this instance of UB crashes my non-const test suite with illegal instruction,</p>\n</blockquote>\n<p>You might already know this, but the result might be very different when the code is called in a different context. UB is \"non-local\" in its effect; just because your code causes SIGILL here doesn't mean it'll do the same for other callers / compiler versions / compiler settings.</p>",
        "id": 246624494,
        "sender_full_name": "RalfJ",
        "timestamp": 1626802682
    }
]