[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> Just catching up on the const-generics RFC. One thing I am really confused about is your notion of \"const types\". You seem to take that for granted. I never considered it, and I think it is not necessary. Could you briefly explain what you mean by that? what distinguishes \"const\" from \"non-const\" types? (See <a href=\"https://www.ralfj.de/blog/2018/07/19/const.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2018/07/19/const.html\">https://www.ralfj.de/blog/2018/07/19/const.html</a> for my previous thoughts on const-ness.)</p>",
        "id": 156617339,
        "sender_full_name": "RalfJ",
        "timestamp": 1548174080
    },
    {
        "content": "<p>I don't think const types are necessary either</p>",
        "id": 156617576,
        "sender_full_name": "varkor",
        "timestamp": 1548174304
    },
    {
        "content": "<p>specifically, I see no good reason to make <code>const X: bool = true;</code> and <code>let x = true;</code> have a different type. that's just the same type used in two different contexts.</p>",
        "id": 156617588,
        "sender_full_name": "RalfJ",
        "timestamp": 1548174315
    },
    {
        "content": "<p>at one point, I was considering them, but later I removed them from my model</p>",
        "id": 156617594,
        "sender_full_name": "varkor",
        "timestamp": 1548174329
    },
    {
        "content": "<p>so the appendix of <a href=\"https://varkor.github.io/blog/2019/01/11/const-types-traits-and-implementations-in-Rust.html\" target=\"_blank\" title=\"https://varkor.github.io/blog/2019/01/11/const-types-traits-and-implementations-in-Rust.html\">https://varkor.github.io/blog/2019/01/11/const-types-traits-and-implementations-in-Rust.html</a> about the two versions of each type is outdated in that respect?</p>",
        "id": 156617629,
        "sender_full_name": "RalfJ",
        "timestamp": 1548174362
    },
    {
        "content": "<p>wait, I misinterpreted, sorry</p>",
        "id": 156617673,
        "sender_full_name": "varkor",
        "timestamp": 1548174397
    },
    {
        "content": "<p>hmm</p>",
        "id": 156617715,
        "sender_full_name": "varkor",
        "timestamp": 1548174443
    },
    {
        "content": "<p>I think we reached the point of \"the set of const types is equal to the set of types\" in <a href=\"https://github.com/rust-rfcs/const-eval/pull/8#issuecomment-452713799\" target=\"_blank\" title=\"https://github.com/rust-rfcs/const-eval/pull/8#issuecomment-452713799\">https://github.com/rust-rfcs/const-eval/pull/8#issuecomment-452713799</a></p>",
        "id": 156617747,
        "sender_full_name": "oli",
        "timestamp": 1548174474
    },
    {
        "content": "<p>I think my last view was that there's no need to talk about \"const types\" in the language itself</p>",
        "id": 156617824,
        "sender_full_name": "varkor",
        "timestamp": 1548174523
    },
    {
        "content": "<p>but it makes sense to consider them from the perspective of a type theoretic model</p>",
        "id": 156617844,
        "sender_full_name": "varkor",
        "timestamp": 1548174543
    },
    {
        "content": "<p>I disagree, but it may not be necessary for us to agree on the model as long as we agree on the lang design ;)</p>",
        "id": 156617884,
        "sender_full_name": "RalfJ",
        "timestamp": 1548174569
    },
    {
        "content": "<p>but I'm not claiming my model is canonical ‚Äî I'm sure there are other models that don't view types in that way</p>",
        "id": 156617900,
        "sender_full_name": "varkor",
        "timestamp": 1548174582
    },
    {
        "content": "<p>I'm happy as long as there is <em>some</em> model :P</p>",
        "id": 156617972,
        "sender_full_name": "varkor",
        "timestamp": 1548174612
    },
    {
        "content": "<p>that said, I would be interested in discussing inaccuracies/simplifications of my model, but if we agree on the design, then it's an unrelated issue, yeah</p>",
        "id": 156618030,
        "sender_full_name": "varkor",
        "timestamp": 1548174672
    },
    {
        "content": "<p>(you're right in that I'm writing as if it's \"taken for granted\" in that post ‚Äî that was more to attempt to not make the writing more confusing with lots of conditional phrasing, more than an assertion that I think this is the definitive model üòÅ)</p>",
        "id": 156618263,
        "sender_full_name": "varkor",
        "timestamp": 1548174849
    },
    {
        "content": "<p>so basically with the latest RFC and the <code>?const</code> in it, we got 3 levels for generic arguments:</p>\n<ul>\n<li>must always be const (<code>const Trait</code>)</li>\n<li>must be const when called in const context (<code>Trait</code>)</li>\n<li>never required to be const (<code>?const Trait</code>)</li>\n</ul>\n<p>unfortunately this is not in sync with <code>const fn</code> vs <code>fn</code>, the latter is really <code>?const fn</code>... :/</p>\n<p>what about trait objects? which kinds of bounds can occur there? is there <code>dyn ?const Trait</code>?</p>",
        "id": 156624184,
        "sender_full_name": "RalfJ",
        "timestamp": 1548179589
    },
    {
        "content": "<p>I'd assume it's like <code>fn</code> ptrs, but then <code>dyn Trait</code> and <code>Trait</code> are very different in const context</p>",
        "id": 156624206,
        "sender_full_name": "RalfJ",
        "timestamp": 1548179620
    },
    {
        "content": "<p>(with the methods of the former not callable)</p>",
        "id": 156624269,
        "sender_full_name": "RalfJ",
        "timestamp": 1548179646
    },
    {
        "content": "<blockquote>\n<p>that said, I would be interested in discussing inaccuracies/simplifications of my model, but if we agree on the design, then it's an unrelated issue, yeah</p>\n</blockquote>\n<p>Here's my biggest issue: the embedding of the const universe in the run-time universe is actually <em>not</em> universal. to use terminology from my blog post, a function being const-safe does <em>not</em> imply it being run-time-safe, because the quantification over the const-invariant of the type occurs both in positive and negative position. So this functor <code>U</code> you describe, I don't think it exists for the function type.</p>\n<p>Now I cannot even say if that's an inaccuracy, because your theory is all definitions and no (claimed) theorems -- so, I am not sure what to learn from it TBH. How does it relate to the notion I call \"const-safety\", which I think is the most important in this entire type system design endavor: Making sure that during const evalaution we don't run code that is unfit for const evaluation.</p>",
        "id": 156626230,
        "sender_full_name": "RalfJ",
        "timestamp": 1548181211
    },
    {
        "content": "<p>To give an example for my claim:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">const_safe_but_not_safe</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This is unreachable in const context, because `usize` must never be a pointer. Hence we can do whatever we want.</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"k\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This function, when called from a safe const context, can never cause an error. From a safe run-time context it can easily cause UB. And yet you claim every <code>const fn</code> can be mapped to a <code>fn</code>.</p>",
        "id": 156626486,
        "sender_full_name": "RalfJ",
        "timestamp": 1548181402
    },
    {
        "content": "<p>is this function callable at run-time though?</p>",
        "id": 156636314,
        "sender_full_name": "varkor",
        "timestamp": 1548188701
    },
    {
        "content": "<p>if you can call it, even if it's not safe, then I'm considering it a valid function</p>",
        "id": 156636452,
        "sender_full_name": "varkor",
        "timestamp": 1548188791
    },
    {
        "content": "<p>if there are some functions that may <em>only</em> be called at compile-time, then I agree that my model is inaccurate</p>",
        "id": 156636475,
        "sender_full_name": "varkor",
        "timestamp": 1548188815
    },
    {
        "content": "<p>if not, though, I'm more concerned about the type system than actual safety</p>",
        "id": 156636501,
        "sender_full_name": "varkor",
        "timestamp": 1548188839
    },
    {
        "content": "<p>(which is less important in practice, but still a valuable aspect to consider)</p>",
        "id": 156636522,
        "sender_full_name": "varkor",
        "timestamp": 1548188879
    },
    {
        "content": "<blockquote>\n<p>because your theory is all definitions and no (claimed) theorems</p>\n</blockquote>\n<p>mhm, unfortunately I have less time to spend playing around with this than I would like</p>",
        "id": 156636598,
        "sender_full_name": "varkor",
        "timestamp": 1548188926
    },
    {
        "content": "<blockquote>\n<p>if you can call it, even if it's not safe, then I'm considering it a valid function</p>\n</blockquote>\n<p>in that case your model does not properly reflect whether functions are safe to call, which is the prime purpose of a type system -- and it is a type (and effect) system we are designing here.</p>",
        "id": 156638835,
        "sender_full_name": "RalfJ",
        "timestamp": 1548190652
    },
    {
        "content": "<blockquote>\n<p>if not, though, I'm more concerned about the type system than actual safety</p>\n</blockquote>\n<p>I agree modelling a type system is valuable, but usually that comes with a claim of type safety. I am not asking for a proof of it, but in your definitions I do not see what the claim would even look like.</p>",
        "id": 156638843,
        "sender_full_name": "RalfJ",
        "timestamp": 1548190661
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 156643414,
        "sender_full_name": "varkor",
        "timestamp": 1548194127
    },
    {
        "content": "<p>regardless, how are you proposing the <code>const_safe_but_not_safe</code> function be uncallable at run-time?</p>",
        "id": 156643681,
        "sender_full_name": "varkor",
        "timestamp": 1548194300
    },
    {
        "content": "<p>at the moment, it's not represented in the type at all (without some ad hoc rule about <code>usize</code>, etc.)</p>",
        "id": 156643698,
        "sender_full_name": "varkor",
        "timestamp": 1548194319
    },
    {
        "content": "<p>so surely the current type system is failing in that regard</p>",
        "id": 156643704,
        "sender_full_name": "varkor",
        "timestamp": 1548194329
    },
    {
        "content": "<blockquote>\n<p>I agree modelling a type system is valuable, but usually that comes with a claim of type safety.</p>\n</blockquote>\n<p>Rust's type system is unsound as it stands, so I don't see that a reasonable claim at type safety can be made</p>",
        "id": 156643846,
        "sender_full_name": "varkor",
        "timestamp": 1548194407
    },
    {
        "content": "<p>proposing variations on the type system is a different matter</p>",
        "id": 156643865,
        "sender_full_name": "varkor",
        "timestamp": 1548194422
    },
    {
        "content": "<p>I wasn't intending to come up with a model suitable for formal verification, etc.</p>",
        "id": 156643933,
        "sender_full_name": "varkor",
        "timestamp": 1548194482
    },
    {
        "content": "<p>it's more idealised</p>",
        "id": 156643937,
        "sender_full_name": "varkor",
        "timestamp": 1548194487
    },
    {
        "content": "<p>maybe it's true that it's a valid model without <code>unsafe</code>?</p>",
        "id": 156644017,
        "sender_full_name": "varkor",
        "timestamp": 1548194534
    },
    {
        "content": "<blockquote>\n<p>Rust's type system is unsound as it stands, so I don't see that a reasonable claim at type safety can be made</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  uhm... elaborate?</p>",
        "id": 156644222,
        "sender_full_name": "centril",
        "timestamp": 1548194749
    },
    {
        "content": "<p>you can trivially cause UB</p>",
        "id": 156644439,
        "sender_full_name": "varkor",
        "timestamp": 1548194886
    },
    {
        "content": "<p>if you set out to do it</p>",
        "id": 156644446,
        "sender_full_name": "varkor",
        "timestamp": 1548194905
    },
    {
        "content": "<p>if you want to prove soundness, it has to be for a subset of the language</p>",
        "id": 156644464,
        "sender_full_name": "varkor",
        "timestamp": 1548194922
    },
    {
        "content": "<p>While it's technically correct that Rust's type system does not ensure the type safety of programs involving <code>unsafe</code>, it is also pretty clear that everyone here is deeply aware of it, so I don't see a reason to point it out like that.</p>",
        "id": 156644716,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548195150
    },
    {
        "content": "<p>my point is that you can only get so far modelling type safety in the presence of <code>unsafe</code>, so it's not entirely unreasonable to have a model of the type system that ignores it</p>",
        "id": 156645173,
        "sender_full_name": "varkor",
        "timestamp": 1548195549
    },
    {
        "content": "<p>more accurate models are more useful, but less accurate ones aren't necessarily not useful</p>",
        "id": 156645190,
        "sender_full_name": "varkor",
        "timestamp": 1548195575
    },
    {
        "content": "<p>What you <em>can</em> do with type safety, and with CTFE as well, is to lay out a complete but not-statically-checkable definition of what the desired safety property is (no runtime UB / no code that CTFE can't handle) and then see how well proposed static analyses approximate that end goal, and in particular whether they are sound.</p>",
        "id": 156645495,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548195810
    },
    {
        "content": "<p>sure, I don't dispute that</p>",
        "id": 156645807,
        "sender_full_name": "varkor",
        "timestamp": 1548196068
    },
    {
        "content": "<p>models that demonstrate soundness for subsets of the language can be useful too, though</p>",
        "id": 156645901,
        "sender_full_name": "varkor",
        "timestamp": 1548196130
    },
    {
        "content": "<p>so while a complete model would detail exactly when any behaviour is safe/unsafe/etc., that doesn't obviate other models</p>",
        "id": 156646014,
        "sender_full_name": "varkor",
        "timestamp": 1548196205
    },
    {
        "content": "<p>A model for a subset of the language should, however, come with a way to tell when that model applies.</p>",
        "id": 156646101,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548196285
    },
    {
        "content": "<p>agreed</p>",
        "id": 156646115,
        "sender_full_name": "varkor",
        "timestamp": 1548196297
    },
    {
        "content": "<p>in the model in question, my conjecture is that it could apply for a subset of the language where <code>unsafe</code> doesn't exist</p>",
        "id": 156646144,
        "sender_full_name": "varkor",
        "timestamp": 1548196318
    },
    {
        "content": "<p>(which is the context in which Ralf pointed out my draft model was oversimplified)</p>",
        "id": 156646253,
        "sender_full_name": "varkor",
        "timestamp": 1548196388
    },
    {
        "content": "<p>I know basically nothing about your model but in general I have a lot of reservation about models that completely ignore unsafe, because unsafe can add new capabilities to safe interfaces, so compositional reasoning is ham-strung</p>",
        "id": 156646258,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548196398
    },
    {
        "content": "<p>it's more like a first-pass litmus test</p>",
        "id": 156646348,
        "sender_full_name": "varkor",
        "timestamp": 1548196457
    },
    {
        "content": "<p>if a feature doesn't even fit into a model <em>without</em> <code>unsafe</code>, there's no way it's feasible with <code>unsafe</code> as well</p>",
        "id": 156646364,
        "sender_full_name": "varkor",
        "timestamp": 1548196476
    },
    {
        "content": "<p>but a feature should definitely be considered in light of <code>unsafe</code> if it seems all right without it</p>",
        "id": 156646389,
        "sender_full_name": "varkor",
        "timestamp": 1548196499
    },
    {
        "content": "<p>for a very particular interpretation of \"doesn't fit without <code>unsafe</code>\"</p>",
        "id": 156646395,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548196502
    },
    {
        "content": "<p>well, in any such model</p>",
        "id": 156646426,
        "sender_full_name": "varkor",
        "timestamp": 1548196529
    },
    {
        "content": "<p>as long as there exists <em>some</em> (reasonable) model, then it's fine</p>",
        "id": 156646445,
        "sender_full_name": "varkor",
        "timestamp": 1548196542
    },
    {
        "content": "<p>for example, a bunch of std APIs seem overly complicated or unnecessary or vacuous if one ignores unsafe</p>",
        "id": 156646448,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548196544
    },
    {
        "content": "<p>in <em>any</em> simplification of the language, some features/functions are going to seem unnecessary</p>",
        "id": 156646552,
        "sender_full_name": "varkor",
        "timestamp": 1548196603
    },
    {
        "content": "<p>I do think you want as precise a model as possible</p>",
        "id": 156646561,
        "sender_full_name": "varkor",
        "timestamp": 1548196616
    },
    {
        "content": "<p>which goes hand-in-hand with the sort of formal verification Ralf, etc. are doing</p>",
        "id": 156646579,
        "sender_full_name": "varkor",
        "timestamp": 1548196636
    },
    {
        "content": "<p>I'm really just having fun by trying to define a simplified model from a more type theoretic perspective</p>",
        "id": 156646604,
        "sender_full_name": "varkor",
        "timestamp": 1548196667
    },
    {
        "content": "<p>I don't really want anything specific in this discussion, I'm way too behind on all the const trait bounds discussion.</p>",
        "id": 156646605,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548196668
    },
    {
        "content": "<p>But ultimately I am curious whether this \"const types\" idea is giving any useful intuition for the real problem of handling the whole language, and the discussion so far doesn't give that impression</p>",
        "id": 156646682,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548196717
    },
    {
        "content": "<p>I think the essence of the discussion at this point is that, though we may have come to it by different reasoning, most people seem reasonably happy with the design of the const trait bounds RFC at the moment</p>",
        "id": 156646690,
        "sender_full_name": "varkor",
        "timestamp": 1548196727
    },
    {
        "content": "<p>hmm</p>",
        "id": 156646695,
        "sender_full_name": "varkor",
        "timestamp": 1548196734
    },
    {
        "content": "<p>Partly because it doesn't seem there is a precise connection to the more detailed/complete approaches like CTFE safety</p>",
        "id": 156646709,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548196749
    },
    {
        "content": "<p>or at least it's not clear to me (nor to Ralf IIUC) what it is</p>",
        "id": 156646741,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548196778
    },
    {
        "content": "<p>I kind of expect them to co√Øncide if it was pushed</p>",
        "id": 156646781,
        "sender_full_name": "varkor",
        "timestamp": 1548196794
    },
    {
        "content": "<p>but part of the problem is that it's not well-defined</p>",
        "id": 156646834,
        "sender_full_name": "varkor",
        "timestamp": 1548196805
    },
    {
        "content": "<p>(that is, my formulation)</p>",
        "id": 156646841,
        "sender_full_name": "varkor",
        "timestamp": 1548196810
    },
    {
        "content": "<p>so it's not easy to make concrete statements about</p>",
        "id": 156646850,
        "sender_full_name": "varkor",
        "timestamp": 1548196819
    },
    {
        "content": "<p>it was something to lend myself intuition, and I thought some people might find it more helpful</p>",
        "id": 156646873,
        "sender_full_name": "varkor",
        "timestamp": 1548196842
    },
    {
        "content": "<p>I think it very much depends on how you're thinking about it</p>",
        "id": 156646888,
        "sender_full_name": "varkor",
        "timestamp": 1548196856
    },
    {
        "content": "<p>if you're concerned with the precise details around CTFE and unsafe, etc., then you want a very accurate model, and having something vaguer and more loosely connected isn't helpful at all</p>",
        "id": 156646933,
        "sender_full_name": "varkor",
        "timestamp": 1548196896
    },
    {
        "content": "<p>but if you want to know what \"const\" means in terms of a programming language in general, I find it helpful to take a wider perspective, and brush over the details</p>",
        "id": 156646990,
        "sender_full_name": "varkor",
        "timestamp": 1548196931
    },
    {
        "content": "<p>I think you can get some way just by pretending a language is more \"nicely behaved\" (for some such definition) than it really is, to get an overall intuition</p>",
        "id": 156647050,
        "sender_full_name": "varkor",
        "timestamp": 1548197011
    },
    {
        "content": "<p>I agree that it's about how you're thinking about it, but not like that. The reason I have difficulties with what you're describing (in this channel) is that type systems mostly are an unfortunate approximation, an incomplete proof calculus, for what I <em>actually</em> care about (how programs behave when run) -- at least when talking about languages like Rust, where Curry-Howard is no good. One can then fruitfully restrict attention to subsets of programs or aspects of behavior (e.g., disregard divergence), but it's still very \"bottom up\".</p>",
        "id": 156647132,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1548197061
    },
    {
        "content": "<p>yeah, I find the actual run-time behaviour less interesting than the type system in and of itself</p>",
        "id": 156648534,
        "sender_full_name": "varkor",
        "timestamp": 1548198417
    },
    {
        "content": "<p>which I completely accept is less useful</p>",
        "id": 156648553,
        "sender_full_name": "varkor",
        "timestamp": 1548198431
    },
    {
        "content": "<p>but explains why I'm tending to think about it very differently</p>",
        "id": 156648567,
        "sender_full_name": "varkor",
        "timestamp": 1548198457
    },
    {
        "content": "<p>I suppose I'm interested in where the two intersect</p>",
        "id": 156648580,
        "sender_full_name": "varkor",
        "timestamp": 1548198478
    },
    {
        "content": "<p>but I can content myself with pretending it's closer to the pure mathematical perspective than it actually is in reality</p>",
        "id": 156648665,
        "sender_full_name": "varkor",
        "timestamp": 1548198546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  I thought it was generally accepted that <code>unsafe { .. }</code> is a \"believe me\" construct that you use to do manual \"proofs\" of type safety and that it is the users responsibility to restore type system invariants, progress &amp; preservation at the boundaries...</p>\n<p>Agda and Coq have \"believe me\" constructs as well; but usually this does not lead anyone to state that Agda is unsound...</p>",
        "id": 156648988,
        "sender_full_name": "centril",
        "timestamp": 1548198927
    },
    {
        "content": "<p>in that case, the fact that the CT model fails for Ralf's example is not important, no?</p>",
        "id": 156649057,
        "sender_full_name": "varkor",
        "timestamp": 1548198983
    },
    {
        "content": "<p>I didn't read all of the backlog so idk</p>",
        "id": 156649074,
        "sender_full_name": "centril",
        "timestamp": 1548199010
    },
    {
        "content": "<p>I know of few programming languages that don't have \"believe me\" constructs of some form</p>",
        "id": 156649081,
        "sender_full_name": "centril",
        "timestamp": 1548199023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> if we develop a denotational semantics of Rust, what would be the category? For Haskell this is a complete partial order iirc</p>",
        "id": 156649165,
        "sender_full_name": "centril",
        "timestamp": 1548199161
    },
    {
        "content": "<p>some sort of category of partial maps, I'm sure</p>",
        "id": 156649234,
        "sender_full_name": "varkor",
        "timestamp": 1548199211
    },
    {
        "content": "<p>though honestly, my interests are far more focused on the type system than the run-time behaviour</p>",
        "id": 156649242,
        "sender_full_name": "varkor",
        "timestamp": 1548199252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  that seems like a very proof irrelevant perspective =P</p>",
        "id": 156649312,
        "sender_full_name": "centril",
        "timestamp": 1548199330
    },
    {
        "content": "<p>it's distinguishing the type system from the programming language</p>",
        "id": 156649412,
        "sender_full_name": "varkor",
        "timestamp": 1548199458
    },
    {
        "content": "<p>you can have a type theory without a run-time semantics (operational or denotational)</p>",
        "id": 156649419,
        "sender_full_name": "varkor",
        "timestamp": 1548199472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  sure; but if your type theory is not in sync with the dynamic semantics, bad things happen...</p>\n<p>Moreover, in a less boring type system (e.g. dependently typed) dynamic semantics become part of the types (well... not really, but at that point you might as well use the normalization rules as the runtime semantics anyways</p>",
        "id": 156649754,
        "sender_full_name": "centril",
        "timestamp": 1548199866
    },
    {
        "content": "<p>LMK if you want to collaborate on a denotational semantics ;)</p>",
        "id": 156649853,
        "sender_full_name": "varkor",
        "timestamp": 1548199958
    },
    {
        "content": "<p>ehehe :P some day, some day ;)</p>",
        "id": 156651613,
        "sender_full_name": "centril",
        "timestamp": 1548201807
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">@varkor</span> if we develop a denotational semantics of Rust, what would be the category? For Haskell this is a complete partial order iirc</p>\n</blockquote>\n<p>AFAIK nobody has demonstrated categorical semantics for higher-order imperative (let alone concurrent) languages. one of many reasons why I have big reservations about categorical semantics.</p>",
        "id": 156677397,
        "sender_full_name": "RalfJ",
        "timestamp": 1548238315
    },
    {
        "content": "<p>also in terms of type systems, AFAIK a categorical treatment of dependent types is a mess at best. I like category theory for some things but I feel that in some PL circles it is awfully overrated.<br>\nAnyway, I'll stop ranting now^^</p>",
        "id": 156677510,
        "sender_full_name": "RalfJ",
        "timestamp": 1548238428
    }
]