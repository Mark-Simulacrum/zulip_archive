[
    {
        "content": "<p>What would it take to allow calling <code>[T]::join</code> in const eval? Specifically, I'd like to be able to take a const <code>&amp;[&amp;str]</code> and <code>join</code> it into a const <code>&amp;str</code>.</p>",
        "id": 235931375,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619228560
    },
    {
        "content": "<p>We'd need const heap and trait bounds on const fn</p>",
        "id": 235950707,
        "sender_full_name": "oli",
        "timestamp": 1619250456
    },
    {
        "content": "<p>Also there's the open question of transient heap allocations (since the return type of joining is <code>String</code>, we can't inject a const allocator)</p>",
        "id": 235950976,
        "sender_full_name": "oli",
        "timestamp": 1619250811
    },
    {
        "content": "<p>But the latter problem exists for everyone who wants to join into their own allocator instead of the global one</p>",
        "id": 235951029,
        "sender_full_name": "oli",
        "timestamp": 1619250844
    },
    {
        "content": "<p>Thanks for the explanation!</p>",
        "id": 236001066,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619294699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  worth noting you can basically get this with macros and const fn now: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=97483f3429f172945a451d4b4862cd9a\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=97483f3429f172945a451d4b4862cd9a</a></p>",
        "id": 236016372,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619305981
    },
    {
        "content": "<p>its just a bit of a hassle</p>",
        "id": 236016379,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619305991
    },
    {
        "content": "<p>you need a macro since we can't express the return type</p>",
        "id": 236016455,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306045
    },
    {
        "content": "<p>note that i've heard that at the moment moves of large arrays, like i do in the <code>concat_all</code> function (actually, in retrospect, there's no reason that function needs to move the array in too — oh well), aren't super well compile-time optimized yet, although they could be in the future</p>",
        "id": 236016567,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306151
    },
    {
        "content": "<p>i asked about it here <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Passing.20large.20arrays.20by.20move.20in.20const\">https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Passing.20large.20arrays.20by.20move.20in.20const</a></p>",
        "id": 236016618,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> That's really impressive, and also sufficiently complex and manual that I think I'll avoid it for now. :)</p>",
        "id": 236016926,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306434
    },
    {
        "content": "<p>yep, fair enough</p>",
        "id": 236016948,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306446
    },
    {
        "content": "<p>I tried tweaking it to support joining with a string in between, but ran into some unusual errors and gave up.</p>",
        "id": 236016949,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306450
    },
    {
        "content": "<p>Here's the attempt: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=91eef6acbbd79442236d41e76620a144\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=91eef6acbbd79442236d41e76620a144</a></p>",
        "id": 236017071,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306528
    },
    {
        "content": "<p>That results in multiple <code>any use of this value will cause an error</code> errors.</p>",
        "id": 236017084,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306541
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=816028219112aba26844b9cdc2477607\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=816028219112aba26844b9cdc2477607</a></p>",
        "id": 236017231,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306671
    },
    {
        "content": "<p>is my attempt</p>",
        "id": 236017235,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306679
    },
    {
        "content": "<p>which appears to work</p>",
        "id": 236017236,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306683
    },
    {
        "content": "<p>ah, yours is very similar</p>",
        "id": 236017264,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306708
    },
    {
        "content": "<p>Ah, right. I just had a logic error, and appended the separator in <em>every</em> case rather than just when i != 0.</p>",
        "id": 236017282,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306728
    },
    {
        "content": "<p>yeah</p>",
        "id": 236017283,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306733
    },
    {
        "content": "<p>And Rust caught that at compile time. Nice.</p>",
        "id": 236017302,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306739
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=047853e26d5944207320e9bf310bf193\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=047853e26d5944207320e9bf310bf193</a> works.</p>",
        "id": 236017382,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306785
    },
    {
        "content": "<p>yeah. const fn + const generics is pretty powerful already, but it takes some elbow grease, and is very much not batteries included</p>",
        "id": 236017412,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306821
    },
    {
        "content": "<p>So yeah, that's <em>really</em> impressive, and also not worth it just to avoid this duplication:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DEFAULT_PATH</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">DEFAULT_PATH_DIRS</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"/usr/local/sbin\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"/usr/local/bin\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"/usr/sbin\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"/usr/bin\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"/sbin\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"/bin\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 236017415,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306826
    },
    {
        "content": "<p>lmao no probably not</p>",
        "id": 236017427,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306838
    },
    {
        "content": "<p>I think if I <em>were</em> going to try to do something there, I'd use a macro to construct a call to <code>concat!</code>.</p>",
        "id": 236017450,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306880
    },
    {
        "content": "<p>right, yeah</p>",
        "id": 236017488,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306888
    },
    {
        "content": "<p>that said this is nice since concat cant take input from constants</p>",
        "id": 236017516,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306911
    },
    {
        "content": "<p>Right, if I wanted to do that I'd have to call a macro with those arguments that used the arguments to construct two different constants.</p>",
        "id": 236017523,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306937
    },
    {
        "content": "<p><code>make_path_consts!(DEFAULT_PATH, DEFAULT_PATH_DIRS, \"/usr/local/sbin\", \"/usr/local/bin\", ...)</code></p>",
        "id": 236017554,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306970
    },
    {
        "content": "<p>I don't think that's worth it either.</p>",
        "id": 236017558,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306975
    },
    {
        "content": "<p>yeah i agree.</p>",
        "id": 236017559,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306981
    },
    {
        "content": "<p>But thank you very much for the demonstration.</p>",
        "id": 236017577,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1619306993
    },
    {
        "content": "<p>no problem</p>",
        "id": 236017579,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1619306997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> FWIW with that example I think splitting in a <code>const fn</code> is more realistic than joining -- splitting doesnt require allocating any new strings!</p>",
        "id": 236138107,
        "sender_full_name": "RalfJ",
        "timestamp": 1619425891
    },
    {
        "content": "<p>we still need const heap allocations to build up a <code>Vec&lt;&amp;str&gt;</code>, but it is only exposed as a slice so this is the \"easier\" case of const heap allocs</p>",
        "id": 236138207,
        "sender_full_name": "RalfJ",
        "timestamp": 1619425939
    }
]