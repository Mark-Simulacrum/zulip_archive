[
    {
        "content": "<p>While working on <a href=\"https://github.com/rust-lang/rust/issues/36673\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/36673\">https://github.com/rust-lang/rust/issues/36673</a> I noticed that const_eval gets a lot slower when the storage liveness markers get removed. I suspect it's because without the liveness markers the push_stack_frame function has to eagerly \"initialize\" the local right away, instead of doing it lazily when (and if) it hits the StorageLive marker.</p>",
        "id": 154248297,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1546531512
    },
    {
        "content": "<p>that might be, though this should only make a difference when there are lots of unused local variables</p>",
        "id": 154248530,
        "sender_full_name": "RalfJ",
        "timestamp": 1546531709
    },
    {
        "content": "<p>with the example code from that issue, I'm seeing millions of extra queries to erase_regions_ty and layout_of. I'm pretty clueless about how const_eval works, so I'm not sure whether that's to be expected</p>",
        "id": 154248663,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1546531820
    },
    {
        "content": "<p>comparing the -Zself-profile output for a run that doesn't remove the markers and one that just removes the markers, but doesn't actually do any copy propagation</p>",
        "id": 154248695,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1546531879
    },
    {
        "content": "<p>allocating memory for a local calls <code>layout_of</code> to determine the size of the type of the local</p>",
        "id": 154248716,
        "sender_full_name": "RalfJ",
        "timestamp": 1546531919
    },
    {
        "content": "<p>it probably also calls <code>erase_regions_ty</code> because const eval does that all the time</p>",
        "id": 154248782,
        "sender_full_name": "RalfJ",
        "timestamp": 1546531948
    },
    {
        "content": "<p>erase_regions_ty  seems to come via  monomorphize()</p>",
        "id": 154248811,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1546531979
    },
    {
        "content": "<p>also called in layout_of_local</p>",
        "id": 154248826,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1546531994
    },
    {
        "content": "<p>yeah that makes sense</p>",
        "id": 154248932,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532081
    },
    {
        "content": "<p>not sure why there are so many unused locals though</p>",
        "id": 154248939,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532094
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span></p>",
        "id": 154248942,
        "sender_full_name": "RalfJ",
        "timestamp": 1546532099
    },
    {
        "content": "<p>looks like this is via validate_and_turn_into_const which, AFAICT, creates an eval context from the function's mir for every promoted mir, which probably(?) explains why the locals are unused</p>",
        "id": 154251131,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1546534397
    },
    {
        "content": "<p>oh yeah, we do funny things for promoteds</p>",
        "id": 154251371,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534664
    },
    {
        "content": "<p>I dont know which funny things though^^ but <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> does</p>",
        "id": 154251377,
        "sender_full_name": "RalfJ",
        "timestamp": 1546534672
    },
    {
        "content": "<p>I tried a while back to create a dummy mir that we can use in <code>mk_eval_cx</code> to work around doing any operations during the <code>push_stack_frame</code></p>",
        "id": 154253705,
        "sender_full_name": "oli",
        "timestamp": 1546537339
    },
    {
        "content": "<p>Should be fairly easy to do if you don't attempt to create a constant like I did :P</p>",
        "id": 154253944,
        "sender_full_name": "oli",
        "timestamp": 1546537647
    },
    {
        "content": "<p>@oli could we add an Undef variant in addition to the Dead variant? Seems that all code path ultimately simply ignore accesses to undef values atm anyway</p>",
        "id": 154255114,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1546538746
    },
    {
        "content": "<p>There's an <code>Undef</code> inside the initialized variant. But I'd rather use a dummy mir. If you want I can cook up a quick PR</p>",
        "id": 154255628,
        "sender_full_name": "oli",
        "timestamp": 1546539247
    },
    {
        "content": "<p>@Oli yeah, but that requires the layout computations which make things expensive, thus I was thinking of moving it to a higher level. PR sounds good to me</p>",
        "id": 154255697,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1546539341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"158223\">@Björn Steinbrink</span> your pings aren't highlighting me, I think you need to tab complete</p>",
        "id": 154256041,
        "sender_full_name": "oli",
        "timestamp": 1546539609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> better?</p>",
        "id": 154256110,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1546539702
    },
    {
        "content": "<p>initialized with <code>Undef</code> and uninitialized are not the same state</p>",
        "id": 154401984,
        "sender_full_name": "RalfJ",
        "timestamp": 1546599322
    },
    {
        "content": "<p>in the former case we do have backing memroy allocated but not initialized yet, in the latter case there is no memory yet</p>",
        "id": 154401989,
        "sender_full_name": "RalfJ",
        "timestamp": 1546599338
    },
    {
        "content": "<p>so it makes sense for these to be distinct states</p>",
        "id": 154401991,
        "sender_full_name": "RalfJ",
        "timestamp": 1546599346
    },
    {
        "content": "<p>and we may need that for unsized locals where we cannot pre-allocate because we don't know the size</p>",
        "id": 154401996,
        "sender_full_name": "RalfJ",
        "timestamp": 1546599359
    },
    {
        "content": "<p>one thing I am wondering about: for unsized locals, when exactly do we emit the <code>alloca</code> for LLVM? When is the size determined? That should be the place where miri allocates the backing memory. (CC <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> )</p>",
        "id": 154402046,
        "sender_full_name": "RalfJ",
        "timestamp": 1546599401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  what kind of unsized local are you referring to? Do we support C99 style  variable length arrays now or something like that?</p>",
        "id": 154416386,
        "sender_full_name": "Björn Steinbrink",
        "timestamp": 1546616393
    },
    {
        "content": "<p>much better than that: <a href=\"https://doc.rust-lang.org/unstable-book/language-features/unsized-locals.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/unstable-book/language-features/unsized-locals.html\">https://doc.rust-lang.org/unstable-book/language-features/unsized-locals.html</a></p>",
        "id": 154420005,
        "sender_full_name": "RalfJ",
        "timestamp": 1546619954
    },
    {
        "content": "<p>Huh. I missed that had been implemented at all</p>",
        "id": 154454958,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1546657797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"158223\">@Björn Steinbrink</span> one thing that I think we should probably do is to <em>not</em> run optimizations like inlining and copy propagation on constants and statics (associated constants might still make sense to get optimized though)</p>",
        "id": 154471135,
        "sender_full_name": "oli",
        "timestamp": 1546690070
    },
    {
        "content": "<p>also not on promoteds</p>",
        "id": 154471140,
        "sender_full_name": "oli",
        "timestamp": 1546690078
    }
]