[
    {
        "content": "<p>Is there any consensus on how <code>impl const Trait</code> will interact with default methods in traits? It seems to me that there should be some way of providing a <code>const</code> default method, because otherwise users will have to implement dozens of methods in <code>impl const Iterator</code></p>",
        "id": 239012135,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621205190
    },
    {
        "content": "<p>Currently we don't even require that, but that seems like the only acceptable behavior â€“ requiring the <code>const</code> implementor to provide all default methods again, since the existing defaults might not be const-evaluatable</p>",
        "id": 239012191,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621205254
    },
    {
        "content": "<p>yea, this is brought up in the RFC as an unresolved question</p>",
        "id": 239014368,
        "sender_full_name": "oli",
        "timestamp": 1621207515
    },
    {
        "content": "<p>since default methods are just a very limited form of specialization, we may be able to go the explicit route</p>",
        "id": 239014397,
        "sender_full_name": "oli",
        "timestamp": 1621207551
    },
    {
        "content": "<p>you'd have to write out your default bodies in a custom specialization impl, and then that can be automated with proc macro attributes</p>",
        "id": 239014470,
        "sender_full_name": "oli",
        "timestamp": 1621207609
    },
    {
        "content": "<p>I feel like some kind of attribute <code>#[rustc_guaranteed_const]</code> to annotate the fact that a default method is <code>const</code> when the required methods are all <code>const</code> would help.</p>\n<p>EDIT: just saw <a href=\"https://github.com/rust-lang/const-eval/pull/8#discussion_r247896847\">this</a></p>",
        "id": 244810628,
        "sender_full_name": "fee1-dead",
        "timestamp": 1625325195
    },
    {
        "content": "<p>this looks like something for me to work on after <a href=\"https://github.com/rust-lang/rust/issues/86571\">#86571</a>.</p>",
        "id": 244811011,
        "sender_full_name": "fee1-dead",
        "timestamp": 1625325735
    }
]