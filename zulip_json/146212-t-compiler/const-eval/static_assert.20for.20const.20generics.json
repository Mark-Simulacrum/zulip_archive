[
    {
        "content": "<p>In <code>stdarch</code> I need to place certain restrictions on const generics before passing them on to LLVM intrinsics otherwise LLVM will ICE. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">vsri_n_s8</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">n</span>: <span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">int8x8_t</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">int8x8_t</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">int8x8_t</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">static_assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">vsli_n_s8_</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228063709,
        "sender_full_name": "Amanieu",
        "timestamp": 1614438678
    },
    {
        "content": "<p>Using a normal <code>assert!</code> is not enough: the problem is that the intrinsic call still reaches LLVM codegen with an invalid immediate argument, even though it is unreachable. This causes an ICE.</p>",
        "id": 228063780,
        "sender_full_name": "Amanieu",
        "timestamp": 1614438725
    },
    {
        "content": "<p>I need some way of preventing invalid values from reaching LLVM codegen entirely.</p>",
        "id": 228063795,
        "sender_full_name": "Amanieu",
        "timestamp": 1614438741
    },
    {
        "content": "<p>this would have been slightly more fitting in <a class=\"stream\" data-stream-id=\"260443\" href=\"/#narrow/stream/260443-project-const-generics\">#project-const-generics</a> ^^</p>",
        "id": 228063798,
        "sender_full_name": "lcnr",
        "timestamp": 1614438745
    },
    {
        "content": "<p>but</p>",
        "id": 228063799,
        "sender_full_name": "lcnr",
        "timestamp": 1614438748
    },
    {
        "content": "<p>we're working on bounds for this with <code>feature(const_evaluatable_checked)</code></p>",
        "id": 228063806,
        "sender_full_name": "lcnr",
        "timestamp": 1614438767
    },
    {
        "content": "<p>that's still quite far from being stable though</p>",
        "id": 228063812,
        "sender_full_name": "lcnr",
        "timestamp": 1614438776
    },
    {
        "content": "<p>so i don't recommend using it in anything serious yet</p>",
        "id": 228063820,
        "sender_full_name": "lcnr",
        "timestamp": 1614438786
    },
    {
        "content": "<p>I'd be happy with any kind of post-monomorphization error here.</p>",
        "id": 228063849,
        "sender_full_name": "Amanieu",
        "timestamp": 1614438819
    },
    {
        "content": "<p>considering that the range is fairly small, you can use <code>LengthAtMost32</code>hack</p>",
        "id": 228063850,
        "sender_full_name": "lcnr",
        "timestamp": 1614438819
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics/near/228063849\">said</a>:</p>\n<blockquote>\n<p>I'd be happy with any kind of post-monomorphization error here.</p>\n</blockquote>\n<p>if you use a <code>const</code> in a fn that fails to evaluate, that will post-monomorphize-error and codegen will not happen</p>",
        "id": 228063918,
        "sender_full_name": "RalfJ",
        "timestamp": 1614438867
    },
    {
        "content": "<p>yeah, you could also use an assoc const in that fn</p>",
        "id": 228063926,
        "sender_full_name": "lcnr",
        "timestamp": 1614438892
    },
    {
        "content": "<p>because associated consts are the only constants which are allowed to use generic params</p>",
        "id": 228063947,
        "sender_full_name": "lcnr",
        "timestamp": 1614438910
    },
    {
        "content": "<p>yeah... this brings us back to the discussion about whether or not <code>const {...}</code> should be more like assoc consts or somehow prevent post-mono errors ;)</p>",
        "id": 228063971,
        "sender_full_name": "RalfJ",
        "timestamp": 1614438950
    },
    {
        "content": "<p>How would that code look like?</p>",
        "id": 228064038,
        "sender_full_name": "Amanieu",
        "timestamp": 1614438990
    },
    {
        "content": "<p>imo we should prevent post-mono errors for both <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 228064039,
        "sender_full_name": "lcnr",
        "timestamp": 1614438991
    },
    {
        "content": "<p>At this point I'm happy with a post-mono error, it's better than an LLVM assert.</p>",
        "id": 228064043,
        "sender_full_name": "Amanieu",
        "timestamp": 1614439010
    },
    {
        "content": "<p>Previously we were doing this with huge <code>match</code> statements, but it gets tricky where there are 64k possible values.</p>",
        "id": 228064067,
        "sender_full_name": "Amanieu",
        "timestamp": 1614439046
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Between1And7</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Between1And7</span><span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Between1And7</span><span class=\"o\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Between1And7</span><span class=\"o\">&lt;</span><span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Between1And7</span><span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Between1And7</span><span class=\"o\">&lt;</span><span class=\"mi\">5</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Between1And7</span><span class=\"o\">&lt;</span><span class=\"mi\">6</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">IsTrue</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Between1And7</span><span class=\"o\">&lt;</span><span class=\"mi\">7</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Between1And7</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span>: <span class=\"nc\">IsTrue</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// error</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228064140,
        "sender_full_name": "lcnr",
        "timestamp": 1614439114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics/near/228064039\">said</a>:</p>\n<blockquote>\n<p>imo we should prevent post-mono errors for both <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>\n</blockquote>\n<p>I agree that would be nice, but I expect the system required to achieve this to be so unwieldy that the cure is worse than the disease. ;) but time will tell I guess; we'll see what the system looks like when you got it figured out. I am jut worried about blocking <code>const</code> blocks that use generics on that...</p>",
        "id": 228064150,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> that's the pre-mono variant, right?</p>",
        "id": 228064289,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439273
    },
    {
        "content": "<p>(playing around with a post-mono version based on assoc consts that avoids having to list all the cases)</p>",
        "id": 228064293,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> why doesn't this error? <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Between1And7</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Between1And7</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CHECK</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Between1And7</span>::<span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span>::<span class=\"n\">CHECK</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// error</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228064295,
        "sender_full_name": "lcnr",
        "timestamp": 1614439293
    },
    {
        "content": "<p>wait, what am I missing here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 228064355,
        "sender_full_name": "lcnr",
        "timestamp": 1614439337
    },
    {
        "content": "<p>It gets turned into a runtime assert?</p>",
        "id": 228064362,
        "sender_full_name": "Amanieu",
        "timestamp": 1614439361
    },
    {
        "content": "<p>no, it just runs successfully</p>",
        "id": 228064364,
        "sender_full_name": "lcnr",
        "timestamp": 1614439371
    },
    {
        "content": "<p>oooo</p>",
        "id": 228064390,
        "sender_full_name": "lcnr",
        "timestamp": 1614439414
    },
    {
        "content": "<p>we're using <code>i32</code></p>",
        "id": 228064391,
        "sender_full_name": "lcnr",
        "timestamp": 1614439418
    },
    {
        "content": "<p>of course it doesn't cause an error</p>",
        "id": 228064393,
        "sender_full_name": "lcnr",
        "timestamp": 1614439423
    },
    {
        "content": "<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 228064394,
        "sender_full_name": "lcnr",
        "timestamp": 1614439427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics/near/228064293\">said</a>:</p>\n<blockquote>\n<p>(playing around with a post-mono version based on assoc consts that avoids having to list all the cases)</p>\n</blockquote>\n<p>this works</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_panic)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">ValidInt</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Valid</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALID</span>: <span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Valid</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ValidInt</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALID</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* valid */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">panic!</span><span class=\"p\">(</span><span class=\"s\">\"not valid\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ValidInt</span>::<span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span>::<span class=\"n\">VALID</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Make sure it is valid</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//foo::&lt;8&gt;(); // leads to error</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(there are stable alternatives to panicking, like <code>1/0</code>). the error msg is quite bad though -- it points to inside <code>foo</code>, not to its call site. (but fixing this could be hard I think.)</p>",
        "id": 228064529,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439528
    },
    {
        "content": "<p>oh you don't need a trait to use assoc consts? that helps^^</p>",
        "id": 228064549,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439563
    },
    {
        "content": "<p>yeah, i thought about using array indexing with <code>[(); 1][!check as usize]</code></p>",
        "id": 228064573,
        "sender_full_name": "lcnr",
        "timestamp": 1614439564
    },
    {
        "content": "<p>doesn't this only lint though?</p>",
        "id": 228064620,
        "sender_full_name": "lcnr",
        "timestamp": 1614439636
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">ValidInt</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ValidInt</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unconditional_panic)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALID</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* valid */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">/</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ValidInt</span>::<span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span>::<span class=\"n\">VALID</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Make sure it is valid</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228064623,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics/near/228064620\">said</a>:</p>\n<blockquote>\n<p>doesn't this only lint though?</p>\n</blockquote>\n<p>even if you allow the lint it should still hard-error during codegen</p>",
        "id": 228064629,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439657
    },
    {
        "content": "<p>yeah it does ^^</p>",
        "id": 228064630,
        "sender_full_name": "lcnr",
        "timestamp": 1614439668
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=3589a02bee03631632d49cd04df8d56d\">yeah it does</a></p>",
        "id": 228064634,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439680
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: erroneous constant encountered\n  --&gt; src/main.rs:12:13\n   |\n12 |     let _ = Between1And7::&lt;N&gt;::CHECK;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>\n<p>with the good error <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 228064639,
        "sender_full_name": "lcnr",
        "timestamp": 1614439682
    },
    {
        "content": "<p>well, not really</p>",
        "id": 228064684,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439690
    },
    {
        "content": "<p>(not like we can do much better here if they silence the lint)</p>",
        "id": 228064688,
        "sender_full_name": "lcnr",
        "timestamp": 1614439694
    },
    {
        "content": "<p>it doesnt show where <code>foo</code> gets called with the bad param^^</p>",
        "id": 228064697,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439702
    },
    {
        "content": "<p>Is the lint controlled from the caller side or callee side?</p>",
        "id": 228064721,
        "sender_full_name": "Amanieu",
        "timestamp": 1614439760
    },
    {
        "content": "<p>i think the crate currently getting compiled <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 228064730,
        "sender_full_name": "lcnr",
        "timestamp": 1614439780
    },
    {
        "content": "<p>don't know which hirId we use though</p>",
        "id": 228064732,
        "sender_full_name": "lcnr",
        "timestamp": 1614439788
    },
    {
        "content": "<p>as the lint source</p>",
        "id": 228064736,
        "sender_full_name": "lcnr",
        "timestamp": 1614439795
    },
    {
        "content": "<p>yeah OOB <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=77fb7553ce22574fefce546ab10964ef\">also works</a> and you can hack some more information into the error that way^^</p>",
        "id": 228064787,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439808
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics/near/228064736\">said</a>:</p>\n<blockquote>\n<p>as the lint source</p>\n</blockquote>\n<p>no idea, I never understood the CTFE error reporting code...</p>",
        "id": 228064845,
        "sender_full_name": "RalfJ",
        "timestamp": 1614439866
    },
    {
        "content": "<p>What are the chances <code>const_evaluatable_checked</code> breaks horribly if I just enable it for <code>stdarch</code>?</p>",
        "id": 228065052,
        "sender_full_name": "Amanieu",
        "timestamp": 1614440095
    },
    {
        "content": "<p>100%</p>",
        "id": 228065069,
        "sender_full_name": "lcnr",
        "timestamp": 1614440122
    },
    {
        "content": "<p>leaking const evaluatable predicates to other crates</p>",
        "id": 228065073,
        "sender_full_name": "lcnr",
        "timestamp": 1614440129
    },
    {
        "content": "<p>causes an ice rn</p>",
        "id": 228065076,
        "sender_full_name": "lcnr",
        "timestamp": 1614440133
    },
    {
        "content": "<p>activating the feature together with incremental compilation</p>",
        "id": 228065080,
        "sender_full_name": "lcnr",
        "timestamp": 1614440148
    },
    {
        "content": "<p>causes an ice rn</p>",
        "id": 228065085,
        "sender_full_name": "lcnr",
        "timestamp": 1614440153
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 228065087,
        "sender_full_name": "lcnr",
        "timestamp": 1614440157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics/near/228065073\">said</a>:</p>\n<blockquote>\n<p>leaking const evaluatable predicates to other crates</p>\n</blockquote>\n<p>if the other crate is not also using <code>const_evaluatable_checked</code></p>",
        "id": 228065281,
        "sender_full_name": "lcnr",
        "timestamp": 1614440382
    },
    {
        "content": "<p>Here's what I got so far:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">static_assert</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$imm</span>:<span class=\"nc\">ident</span><span class=\"w\"> </span>: <span class=\"cp\">$ty</span>:<span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">ValidInt</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"cp\">$imm</span>: <span class=\"cp\">$ty</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Valid</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALID</span>: <span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"cp\">$imm</span>: <span class=\"cp\">$ty</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Valid</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">ValidInt</span><span class=\"o\">&lt;</span><span class=\"cp\">$imm</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALID</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">$e</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ValidInt</span>::<span class=\"o\">&lt;</span><span class=\"cp\">$imm</span><span class=\"o\">&gt;</span>::<span class=\"n\">VALID</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228065467,
        "sender_full_name": "Amanieu",
        "timestamp": 1614440586
    },
    {
        "content": "<p>Seems to work! Thanks!</p>",
        "id": 228065663,
        "sender_full_name": "Amanieu",
        "timestamp": 1614440795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>  as <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> demonstrated you can just use <code>impl&lt;const $imm: $ty&gt; for ValidInt&lt;$imm&gt; {</code>, then you don't need the <code>trait</code></p>",
        "id": 228065746,
        "sender_full_name": "RalfJ",
        "timestamp": 1614440884
    },
    {
        "content": "<p>Indeed!</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">static_assert</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$imm</span>:<span class=\"nc\">ident</span><span class=\"w\"> </span>: <span class=\"cp\">$ty</span>:<span class=\"nc\">ty</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">Validate</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"cp\">$imm</span>: <span class=\"cp\">$ty</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"cp\">$imm</span>: <span class=\"cp\">$ty</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Validate</span><span class=\"o\">&lt;</span><span class=\"cp\">$imm</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALID</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">$e</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Validate</span>::<span class=\"o\">&lt;</span><span class=\"cp\">$imm</span><span class=\"o\">&gt;</span>::<span class=\"n\">VALID</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 228065881,
        "sender_full_name": "Amanieu",
        "timestamp": 1614441063
    },
    {
        "content": "<p>Wow I had not realized that <code>rustc_legacy_const_generics</code> is already implemented; thanks a ton <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> for pushing this forward. :)</p>",
        "id": 228067093,
        "sender_full_name": "RalfJ",
        "timestamp": 1614442356
    },
    {
        "content": "<p>At the moment only 2 functions in stdarch are actually using it though.</p>",
        "id": 228067462,
        "sender_full_name": "Amanieu",
        "timestamp": 1614442793
    },
    {
        "content": "<p>There's about 1200 functions using <code>rustc_args_required_const</code>.</p>",
        "id": 228067514,
        "sender_full_name": "Amanieu",
        "timestamp": 1614442819
    },
    {
        "content": "<p>sure, but still, baby steps :)</p>",
        "id": 228068302,
        "sender_full_name": "RalfJ",
        "timestamp": 1614443696
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics/near/228067093\">said</a>:</p>\n<blockquote>\n<p>Wow I had not realized that <code>rustc_legacy_const_generics</code> is already implemented; thanks a ton <span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> for pushing this forward. :)</p>\n</blockquote>\n<p>oh nice, that's awesome <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 228069020,
        "sender_full_name": "lcnr",
        "timestamp": 1614444451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics/near/228067462\">said</a>:</p>\n<blockquote>\n<p>At the moment only 2 functions in stdarch are actually using it though.</p>\n</blockquote>\n<p>Does that mean that stdarch is generally open for further conversion to <code>rustc_legacy_const_generics</code>?</p>",
        "id": 228069986,
        "sender_full_name": "tm",
        "timestamp": 1614445461
    },
    {
        "content": "<p>should be fine to make PRs</p>",
        "id": 228072194,
        "sender_full_name": "Lokathor",
        "timestamp": 1614447815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics/near/228069986\">said</a>:</p>\n<blockquote>\n<p>Does that mean that stdarch is generally open for further conversion to <code>rustc_legacy_const_generics</code>?</p>\n</blockquote>\n<p>Yep! PRs are welcome. I'm going to create a tracking issue with instructions for converting functions to the new style.</p>",
        "id": 228074643,
        "sender_full_name": "Amanieu",
        "timestamp": 1614450594
    },
    {
        "content": "<p>This is technically a breaking change, right? Generic parameters cannot be used, or can they?</p>",
        "id": 228074808,
        "sender_full_name": "RalfJ",
        "timestamp": 1614450740
    },
    {
        "content": "<p>yeah, this is a theoretically breaking change</p>",
        "id": 228074976,
        "sender_full_name": "lcnr",
        "timestamp": 1614450936
    },
    {
        "content": "<p>i don't expect it to actually break  anything though</p>",
        "id": 228074986,
        "sender_full_name": "lcnr",
        "timestamp": 1614450960
    },
    {
        "content": "<p>Yes it is technically breaking.</p>",
        "id": 228075523,
        "sender_full_name": "Amanieu",
        "timestamp": 1614451544
    },
    {
        "content": "<p>Unfortunately there's no way to know for sure until we run it past crater.</p>",
        "id": 228075572,
        "sender_full_name": "Amanieu",
        "timestamp": 1614451568
    },
    {
        "content": "<p>I thought that rustc would automatically \"rewrite\" the old style to the new style?</p>",
        "id": 228080643,
        "sender_full_name": "Lokathor",
        "timestamp": 1614457300
    },
    {
        "content": "<p>yeah it does, but consts in the body of a fn cannot refer to generic params of the fn</p>",
        "id": 228080877,
        "sender_full_name": "RalfJ",
        "timestamp": 1614457511
    },
    {
        "content": "<p>mmmm... but they will be able to some day right?</p>",
        "id": 228080960,
        "sender_full_name": "Lokathor",
        "timestamp": 1614457607
    },
    {
        "content": "<p>yeah I sure hope so. we talked about \"generic consts\" for forever... long enough that in the beginning I kept mixing that up with \"const generics\"^^</p>",
        "id": 228081346,
        "sender_full_name": "RalfJ",
        "timestamp": 1614458000
    },
    {
        "content": "<p>we actually kind of already have generic consts but not exposed in nice ways... promoteds can be generic. and associated consts.</p>",
        "id": 228081362,
        "sender_full_name": "RalfJ",
        "timestamp": 1614458022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"222471\">@BurntSushi</span></p>",
        "id": 228090261,
        "sender_full_name": "Lokathor",
        "timestamp": 1614468654
    },
    {
        "content": "<p>The assertion failure diagnostic are rather unhelpful in diagnosing the source of the error (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6dd3e7d02d995ab5aaa34af691e2eab7\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6dd3e7d02d995ab5aaa34af691e2eab7</a>). Is there something we can do to improve this now, or is it blocked on turning const_err into a hard error?</p>",
        "id": 228939902,
        "sender_full_name": "tm",
        "timestamp": 1614944870
    },
    {
        "content": "<p>Hmm, I wonder if we should put <code>#[allow(const_err)]</code> on the validation constant, then error message at least hints at <code>-Z macro-backtrace</code>, which can help pinpoint the issue.</p>",
        "id": 228948421,
        "sender_full_name": "tm",
        "timestamp": 1614949207
    },
    {
        "content": "<p><code>#[allow(const_err]</code> at least shows where the error happens so it would be useful for stdarch; however last time I tried with <code>-Z macro-backtrace</code> it didn't add much more information IIRC ?</p>",
        "id": 228949933,
        "sender_full_name": "lqd",
        "timestamp": 1614949843
    },
    {
        "content": "<p>Testing again, right macro-backtrace doesn't add much in this case. Which is even better since no nightly features are required!</p>",
        "id": 228952483,
        "sender_full_name": "tm",
        "timestamp": 1614950935
    },
    {
        "content": "<p>The <code>#[allow(const_err)]</code> doesn't help in cross-crate errors, so any suggestion would still be appreciated!</p>",
        "id": 228959924,
        "sender_full_name": "tm",
        "timestamp": 1614953672
    },
    {
        "content": "<p>Yeah the errors are bad and making <code>const_err</code> a hard error doesn't really help...</p>",
        "id": 228994535,
        "sender_full_name": "RalfJ",
        "timestamp": 1614966288
    },
    {
        "content": "<p>the problem is that the error is emitted by the CTFE query, which has no idea where that constant is being used, so it can't point to that span</p>",
        "id": 228994572,
        "sender_full_name": "RalfJ",
        "timestamp": 1614966307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ^</p>",
        "id": 228994590,
        "sender_full_name": "RalfJ",
        "timestamp": 1614966315
    },
    {
        "content": "<p>should we experiment with returning the actual error from the query and requiring it to be reported outside?</p>",
        "id": 228995189,
        "sender_full_name": "oli",
        "timestamp": 1614966578
    },
    {
        "content": "<p>but then how do we avoid duplicate errors?</p>",
        "id": 229002532,
        "sender_full_name": "RalfJ",
        "timestamp": 1614969320
    },
    {
        "content": "<p>well... we already avoid duplicate errors if they are exactly the same</p>",
        "id": 229004517,
        "sender_full_name": "oli",
        "timestamp": 1614970133
    },
    {
        "content": "<p>that is just a compiler thing</p>",
        "id": 229004526,
        "sender_full_name": "oli",
        "timestamp": 1614970137
    },
    {
        "content": "<p>and in the case we report them on different sites, then we do want them duplicated</p>",
        "id": 229004558,
        "sender_full_name": "oli",
        "timestamp": 1614970148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics/near/229004558\">said</a>:</p>\n<blockquote>\n<p>and in the case we report them on different sites, then we do want them duplicated</p>\n</blockquote>\n<p>do we? I imagine we're showing an error with a kind of stacktrace, i.e., several spans attached to the same error. the \"root frame\" will be different but all the rest will be the same when a failing const is used in multiple places.</p>",
        "id": 229087847,
        "sender_full_name": "RalfJ",
        "timestamp": 1615027650
    },
    {
        "content": "<p>well... we could achieve that by keeping the report at the site it is now, but also return the span. Then the caller, when emitting their own error, can at least add a note saying where the error came from.</p>",
        "id": 229095897,
        "sender_full_name": "oli",
        "timestamp": 1615035573
    },
    {
        "content": "<p>I dont think I understand what that would look like</p>",
        "id": 229097101,
        "sender_full_name": "RalfJ",
        "timestamp": 1615036466
    },
    {
        "content": "<p>Right now our errors look like</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: any use of this value will cause an error\n --&gt; src/main.rs:3:18\n  |\n3 | const FOO: i32 = 1/0;\n  | -----------------^^^-\n  |                  |\n  |                  attempt to divide `1_i32` by zero\n  |\nnote: the lint level is defined here\n --&gt; src/main.rs:1:8\n  |\n1 | #[warn(const_err)]\n  |        ^^^^^^^^^\n\nerror[E0080]: erroneous constant used\n --&gt; src/main.rs:6:13\n  |\n6 |     let x = FOO;\n  |             ^^^ referenced constant has errors\n</code></pre></div>\n<p>and I would expect that we don't change the first error, but change the second error to have an additional note</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0080]: erroneous constant used\n --&gt; src/main.rs:6:13\n  |\n6 |     let x = FOO;\n  |             ^^^ referenced constant has errors\nnote: constant defined here\n --&gt; src/main.rs:3:18\n  |\n3 | const FOO: i32 = 1/0;\n  |       ^^^\n</code></pre></div>",
        "id": 229097422,
        "sender_full_name": "oli",
        "timestamp": 1615036798
    },
    {
        "content": "<p>hm... but those two errors could be quite far apart from each other in the error log</p>",
        "id": 229102867,
        "sender_full_name": "RalfJ",
        "timestamp": 1615041573
    },
    {
        "content": "<p>I'm not sure what else to do. Either we repeat everything, or we don't. If you have any suggestions on how it should look I'm all ears</p>",
        "id": 229109681,
        "sender_full_name": "oli",
        "timestamp": 1615047569
    },
    {
        "content": "<p>well ideally there'd be a single error with a \"backtrace\" that contains both the const and where it is used (and, with const generics, perhaps even further up the causal chain of monomorphizations) -- but we only do that once per error, not for each use.</p>",
        "id": 229109938,
        "sender_full_name": "RalfJ",
        "timestamp": 1615047764
    },
    {
        "content": "<p>I have no idea how to achieve that, though.^^</p>",
        "id": 229109939,
        "sender_full_name": "RalfJ",
        "timestamp": 1615047771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> ??</p>",
        "id": 229120880,
        "sender_full_name": "oliver",
        "timestamp": 1615057558
    },
    {
        "content": "<p>so... the follow up uses of the error would just not emit an error at all? Or at least not one with the whole backtrace?</p>",
        "id": 229180443,
        "sender_full_name": "oli",
        "timestamp": 1615116767
    },
    {
        "content": "<p>I guess we could implement something similar to <code>Steal</code>, but only for diagnostics. Basically the first time you steal it, you get a full error, and then the error replaces itself with  a dummy error. We would make this kind of stealable diagnostic be completely transparent to the query system (hash/eq just always return the same value/true)</p>",
        "id": 229180707,
        "sender_full_name": "oli",
        "timestamp": 1615117009
    },
    {
        "content": "<p>I think that would be safe in the current query system</p>",
        "id": 229180713,
        "sender_full_name": "oli",
        "timestamp": 1615117022
    },
    {
        "content": "<p>we'd just need to MCP it</p>",
        "id": 229180730,
        "sender_full_name": "oli",
        "timestamp": 1615117038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/static_assert.20for.20const.20generics/near/229180443\">said</a>:</p>\n<blockquote>\n<p>so... the follow up uses of the error would just not emit an error at all? Or at least not one with the whole backtrace?</p>\n</blockquote>\n<p>yeah something like that</p>",
        "id": 229180893,
        "sender_full_name": "RalfJ",
        "timestamp": 1615117219
    },
    {
        "content": "<p>I cannot comment on the implementation details. ;) but this seems like something where we should get some consesus on the desired outcome before starting implementation work.</p>",
        "id": 229180939,
        "sender_full_name": "RalfJ",
        "timestamp": 1615117268
    },
    {
        "content": "<p>the implementation work was always what was blocking the possible nice diagnostics we could have</p>",
        "id": 229180963,
        "sender_full_name": "oli",
        "timestamp": 1615117317
    },
    {
        "content": "<p>I'll start a new topic in <a class=\"stream\" data-stream-id=\"147480\" href=\"/#narrow/stream/147480-t-compiler.2Fwg-diagnostics\">#t-compiler/wg-diagnostics</a></p>",
        "id": 229181024,
        "sender_full_name": "oli",
        "timestamp": 1615117339
    }
]