[
    {
        "content": "<p>The past few days I've been playing with what we talked about in <a href=\"https://github.com/rust-lang/const-eval/issues/11\" title=\"https://github.com/rust-lang/const-eval/issues/11\">https://github.com/rust-lang/const-eval/issues/11</a>. I've got something that kinda works now, so I have some questions. :)</p>",
        "id": 194557419,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587234158
    },
    {
        "content": "<p>First a simple one- should I put the changes to the dynamic check under the feature gate as well? Or is it okay to let it be more permissive unconditionally? AFAICT it just removes the errors from later in rustc, while leaving in the earlier ones.</p>",
        "id": 194557434,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587234236
    },
    {
        "content": "<p>Second, it looks like there are two places that the dynamic check handles this? There's the <code>before_access_global</code> check that also handles mutability, which happens during interpretation, and then there's the final validation check afterwards. Is that correct, and is there anything special I need to do there? (Currently I'm just duplicating the ConservativeTransitiveFreeze check <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> suggested for the static check.)</p>",
        "id": 194557728,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587234663
    },
    {
        "content": "<p>And finally, I'm hitting the <code>span_mirbug!</code> from <a href=\"https://github.com/rust-lang/rust/pull/69145\" title=\"https://github.com/rust-lang/rust/pull/69145\">https://github.com/rust-lang/rust/pull/69145</a> in some cases (e.g. a const containing a raw pointer to a field of a static) where it seems like that check is a little too broad, and I suspect I'm missing something about how it's supposed to work.</p>",
        "id": 194557790,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587234772
    },
    {
        "content": "<p>hmm I think I understand this last one now actually, after looking more closely at the tests in that PR and digging around the implementation</p>",
        "id": 194571803,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587257375
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194557434\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194557434\">said</a>:</p>\n<blockquote>\n<p>First a simple one- should I put the changes to the dynamic check under the feature gate as well? Or is it okay to let it be more permissive unconditionally? AFAICT it just removes the errors from later in rustc, while leaving in the earlier ones.</p>\n</blockquote>\n<p>I think we should change the dynamic check unconditionally. Maybe even in a separate PR, and definitely with a miri-unleash test.<br>\n<span class=\"user-mention\" data-user-id=\"124288\">@oli</span> might disagree though.</p>",
        "id": 194584343,
        "sender_full_name": "RalfJ",
        "timestamp": 1587281938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194557728\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194557728\">said</a>:</p>\n<blockquote>\n<p>Second, it looks like there are two places that the dynamic check handles this? There's the <code>before_access_global</code> check that also handles mutability, which happens during interpretation, and then there's the final validation check afterwards. Is that correct, and is there anything special I need to do there? (Currently I'm just duplicating the ConservativeTransitiveFreeze check <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> suggested for the static check.)</p>\n</blockquote>\n<p>I dont understand why the dynamic check would be conservative in any way? it should have 0 false positives.</p>",
        "id": 194584357,
        "sender_full_name": "RalfJ",
        "timestamp": 1587281992
    },
    {
        "content": "<p>IMO the check in validity should just go away. <em>referencing</em> a static was never a problem, it was just rejected by the static check due to imprecision. You mean <a href=\"https://github.com/rust-lang/rust/blob/a0e52b1e82472e4890202082a0482b178f9d6a16/src/librustc_mir/interpret/validity.rs#L414\" title=\"https://github.com/rust-lang/rust/blob/a0e52b1e82472e4890202082a0482b178f9d6a16/src/librustc_mir/interpret/validity.rs#L414\">this one</a>, right?</p>",
        "id": 194584411,
        "sender_full_name": "RalfJ",
        "timestamp": 1587282079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194557790\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194557790\">said</a>:</p>\n<blockquote>\n<p>And finally, I'm hitting the <code>span_mirbug!</code> from <a href=\"https://github.com/rust-lang/rust/pull/69145\" title=\"https://github.com/rust-lang/rust/pull/69145\">https://github.com/rust-lang/rust/pull/69145</a> in some cases (e.g. a const containing a raw pointer to a field of a static) where it seems like that check is a little too broad, and I suspect I'm missing something about how it's supposed to work.</p>\n</blockquote>\n<p>hm, I never even saw that <code>span_mirbug!</code> macro, now I wonder if we should use it for ICEing from Miri...</p>",
        "id": 194584462,
        "sender_full_name": "RalfJ",
        "timestamp": 1587282190
    },
    {
        "content": "<blockquote>\n<p>I dont understand why the dynamic check would be conservative in any way? it should have 0 false positives.</p>\n</blockquote>\n<p>I'm going based off of <a href=\"https://github.com/rust-lang/const-eval/issues/11#issuecomment-613545556\" title=\"https://github.com/rust-lang/const-eval/issues/11#issuecomment-613545556\">@**oli**'s comment</a> that mentioned query cycles. I guess that could have just been talking exclusively about the static check? If so I will think a bit more about what to check dynamically, exactly.</p>",
        "id": 194600802,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587307157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117495\">@rpjohnst</span> you just quoted me with no new text?^^</p>",
        "id": 194600893,
        "sender_full_name": "RalfJ",
        "timestamp": 1587307317
    },
    {
        "content": "<p>Whoops, still trying to figure out zulip's UI a little. :)</p>",
        "id": 194600944,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587307348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"117495\">@rpjohnst</span> Tip: if you click on the arrow down you see when hovering over a comment, there is a button \"quote and reply\".</p>",
        "id": 194600992,
        "sender_full_name": "bjorn3",
        "timestamp": 1587307435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194584411\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194584411\">said</a>:</p>\n<blockquote>\n<p>IMO the check in validity should just go away. <em>referencing</em> a static was never a problem, it was just rejected by the static check due to imprecision. You mean <a href=\"https://github.com/rust-lang/rust/blob/a0e52b1e82472e4890202082a0482b178f9d6a16/src/librustc_mir/interpret/validity.rs#L414\" title=\"https://github.com/rust-lang/rust/blob/a0e52b1e82472e4890202082a0482b178f9d6a16/src/librustc_mir/interpret/validity.rs#L414\">this one</a>, right?</p>\n</blockquote>\n<p>Yeah, if that check is redundant I'll just remove it. :)</p>",
        "id": 194600993,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587307435
    },
    {
        "content": "<p>You found it just before I commented :)</p>",
        "id": 194601047,
        "sender_full_name": "bjorn3",
        "timestamp": 1587307461
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194600992\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194600992\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"117495\">rpjohnst</span> Tip: if you click on the arrow down you see when hovering over a comment, there is a button \"quote and reply\".</p>\n</blockquote>\n<p>pro tip: the shortcut for that is to press the <code>&gt;</code> key when the comment is selected (with the blue border)</p>",
        "id": 194601302,
        "sender_full_name": "RalfJ",
        "timestamp": 1587307735
    },
    {
        "content": "<blockquote>\n<p>Yeah, if that check is redundant I'll just remove it. :)</p>\n</blockquote>\n<p>I think it is redundant and frankly confusing (as it's somehow blurring the line between our static and dynamic checking), but dont know <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> 's position on that</p>",
        "id": 194601334,
        "sender_full_name": "RalfJ",
        "timestamp": 1587307797
    },
    {
        "content": "<blockquote>\n<p>I'm going based off of <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>'s comment that mentioned query cycles. I guess that could have just been talking exclusively about the static check? If so I will think a bit more about what to check dynamically, exactly.</p>\n</blockquote>\n<p>I think in that comment oli was just referring to he new static check</p>",
        "id": 194601385,
        "sender_full_name": "RalfJ",
        "timestamp": 1587307831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194601334\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/consts.20referring.20to.20statics/near/194601334\">said</a>:</p>\n<blockquote>\n<p>I think it is redundant and frankly confusing (as it's somehow blurring the line between our static and dynamic checking), but dont know <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> 's position on that</p>\n</blockquote>\n<p>Hmm, I think it is currently the thing responsible for the error messages in the miri-unleashed tests- it was masking the actual errors from <code>CompileTimeInterpreter::before_access_global</code></p>",
        "id": 194605658,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587313268
    },
    {
        "content": "<p>But removing it, those errors just become ICEs because of <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/interpret/validity.rs#L841\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/interpret/validity.rs#L841\">this check</a></p>",
        "id": 194605744,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587313345
    },
    {
        "content": "<p>ah, interesting... and annoying :/</p>",
        "id": 194606132,
        "sender_full_name": "RalfJ",
        "timestamp": 1587313700
    },
    {
        "content": "<p>the \"reads\" during validation shouldn't really count</p>",
        "id": 194606135,
        "sender_full_name": "RalfJ",
        "timestamp": 1587313707
    },
    {
        "content": "<p>or maybe we should just not recurse into statics when validating a const</p>",
        "id": 194606144,
        "sender_full_name": "RalfJ",
        "timestamp": 1587313714
    },
    {
        "content": "<p>and instead assume the static has already been validated</p>",
        "id": 194606147,
        "sender_full_name": "RalfJ",
        "timestamp": 1587313720
    },
    {
        "content": "<p>(potentially at a different type, but that is a hole we are already willing to tolerate for statics/consts defined in other crates)</p>",
        "id": 194606157,
        "sender_full_name": "RalfJ",
        "timestamp": 1587313743
    },
    {
        "content": "<p>Ahh, are you saying the dynamic check should only actually fire when the constant is used?</p>",
        "id": 194606174,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587313789
    },
    {
        "content": "<p>I'm not sure of the layering here, but I guess we could change the <code>ConstEvalErrorKind</code>'s <code>Into&lt;InterpError&gt;</code> impl to produce an <code>UndefinedBehavior</code> variant instead of a <code>MachineStop</code> variant in this case, to preserve the existing errors</p>",
        "id": 194606264,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587313884
    },
    {
        "content": "<p>the issue you are having here is that validation should only raise validation errors</p>",
        "id": 194606436,
        "sender_full_name": "RalfJ",
        "timestamp": 1587314100
    },
    {
        "content": "<p>so, \"this thing has the wrong data there\"</p>",
        "id": 194606443,
        "sender_full_name": "RalfJ",
        "timestamp": 1587314114
    },
    {
        "content": "<p>\"you read from a static\" is just not an error that should ever come up from validation, it's not a validity property</p>",
        "id": 194606453,
        "sender_full_name": "RalfJ",
        "timestamp": 1587314132
    },
    {
        "content": "<p>we cannot tell from the final value of a const whether its computation read from a static</p>",
        "id": 194606457,
        "sender_full_name": "RalfJ",
        "timestamp": 1587314145
    },
    {
        "content": "<p>and the final value to a const that <em>points to</em> a static is entirely fine</p>",
        "id": 194606462,
        "sender_full_name": "RalfJ",
        "timestamp": 1587314154
    },
    {
        "content": "<p>but the thing is, validation is itself implemented inside the miri engine, so when validation reads values to check if they are valid, that read is checked to make sure we dont read from a static, and... boom</p>",
        "id": 194606516,
        "sender_full_name": "RalfJ",
        "timestamp": 1587314183
    },
    {
        "content": "<p>but that's just silly, this is not the program reading from a static, so the check shouldnt even fire</p>",
        "id": 194606542,
        "sender_full_name": "RalfJ",
        "timestamp": 1587314197
    },
    {
        "content": "<p>the easiest way to make that happen is to just stop the recursion at the boundary between the constant and the static</p>",
        "id": 194606549,
        "sender_full_name": "RalfJ",
        "timestamp": 1587314222
    },
    {
        "content": "<p>which would basically mean, <a href=\"https://github.com/rust-lang/rust/blob/36b1a9296cde2b773771710e9bbd608fd2eca35f/src/librustc_mir/interpret/validity.rs#L411\" title=\"https://github.com/rust-lang/rust/blob/36b1a9296cde2b773771710e9bbd608fd2eca35f/src/librustc_mir/interpret/validity.rs#L411\">here</a>, if <code>self.ecx.tcx.is_static(did)</code>, then do not recurse.</p>",
        "id": 194606589,
        "sender_full_name": "RalfJ",
        "timestamp": 1587314282
    },
    {
        "content": "<p>Ahh right, that makes sense</p>",
        "id": 194606639,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587314309
    },
    {
        "content": "<p>Alright, here's a PR for the dynamic check changes: <a href=\"https://github.com/rust-lang/rust/pull/71332\" title=\"https://github.com/rust-lang/rust/pull/71332\">https://github.com/rust-lang/rust/pull/71332</a></p>",
        "id": 194616294,
        "sender_full_name": "rpjohnst",
        "timestamp": 1587327650
    }
]