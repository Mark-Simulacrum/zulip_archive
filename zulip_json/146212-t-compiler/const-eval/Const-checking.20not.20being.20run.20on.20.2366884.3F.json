[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/66884\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66884\">#66884</a> changes a bunch of <code>std</code> functions to <code>const</code>, but that PR appears to pass CI even with operations that <a href=\"https://github.com/rust-lang/rust/pull/66884#discussion_r353498905\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66884#discussion_r353498905\">should be illegal in a const context</a>. </p>\n<p>The reason we're not at DEFCON 2 right now is that I can't reproduce this on the playground. I'm gonna try to reproduce this in-core. I'm wondering if the <code>const</code> versions in the PR are getting <code>cfg</code>-ed out?</p>",
        "id": 182581088,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575482225
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> lemme know if you have found anything else</p>",
        "id": 182581119,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575482252
    },
    {
        "content": "<p>does the <code>#[rustc_const_unstable(feature = \"const_option_match\")]</code> somehow interact with cfgs ? is this <code>const fn unwrap_or_else</code> cfg-ed out when <code>const_option_match</code> is not enabled ?</p>",
        "id": 182585732,
        "sender_full_name": "lqd",
        "timestamp": 1575484832
    },
    {
        "content": "<p>My understanding is that the string is just for documentation. I'll check to see if that's correct.</p>",
        "id": 182586274,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575485113
    },
    {
        "content": "<p>Well and also to enable the feature downstream, but it should never compile out the function</p>",
        "id": 182587457,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575485815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> So apparently <code>min_const_fn</code> is not enforced for <code>rustc_const_unstable</code> functions, but <code>qualify_min_const_fn</code> is AFAICT the only place where restrictions on generic parameters are checked.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"sd\">/// Returns `true` if this function must conform to `min_const_fn`</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">is_min_const_fn</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// Bail out if the signature doesn&#39;t contain `const`</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">is_const_fn_raw</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Abi</span>::<span class=\"n\">RustIntrinsic</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fn_sig</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">).</span><span class=\"n\">abi</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">is_intrinsic_min_const_fn</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">features</span><span class=\"p\">().</span><span class=\"n\">staged_api</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// in order for a libstd function to be considered min_const_fn</span>\n<span class=\"w\">            </span><span class=\"c1\">// it needs to be stable and have no `rustc_const_unstable` attribute</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">lookup_stability</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// stable functions with unstable const fn aren&#39;t `min_const_fn`</span>\n<span class=\"w\">                </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">attr</span>::<span class=\"n\">Stability</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">const_stability</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// unstable functions don&#39;t need to conform</span>\n<span class=\"w\">                </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">attr</span>::<span class=\"n\">Stability</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"p\">.</span><span class=\"n\">is_unstable</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// everything else needs to conform, because it would be callable from</span>\n<span class=\"w\">                </span><span class=\"c1\">// other `min_const_fn` functions</span>\n<span class=\"w\">                </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// users enabling the `const_fn` feature gate can do what they want</span>\n<span class=\"w\">            </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">features</span><span class=\"p\">().</span><span class=\"n\">const_fn</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 182588348,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575486392
    },
    {
        "content": "<p>I think that there's two concepts here: \"is callable as a min const fn in stable code\" and \"requires the min const fn checks\", but this function is responsible for both of them.</p>",
        "id": 182588502,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575486510
    },
    {
        "content": "<p>Ah, there's an <code>is_unstable_const_fn</code> that's used for the first during const-checking. I don't really have all the background here, but I think we should be running the min const fn checks on <code>rustc_const_unstable</code> functions?</p>",
        "id": 182589038,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575486875
    },
    {
        "content": "<p>ah, regular qualif used to have a call check, too afaik</p>",
        "id": 182591750,
        "sender_full_name": "oli",
        "timestamp": 1575488775
    },
    {
        "content": "<p>and that should fail for generic parameters</p>",
        "id": 182591758,
        "sender_full_name": "oli",
        "timestamp": 1575488782
    },
    {
        "content": "<p>having parameters with the <code>const_fn</code> feature gate has always been possible</p>",
        "id": 182591805,
        "sender_full_name": "oli",
        "timestamp": 1575488818
    },
    {
        "content": "<p>doing anything with them but accessing assoc constants has not</p>",
        "id": 182591829,
        "sender_full_name": "oli",
        "timestamp": 1575488830
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0f28739e52e2d74bdebaac4696cf87c8\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0f28739e52e2d74bdebaac4696cf87c8\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0f28739e52e2d74bdebaac4696cf87c8</a></p>",
        "id": 182607068,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575498659
    },
    {
        "content": "<p>I'm  at a loss.</p>",
        "id": 182607086,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575498671
    },
    {
        "content": "<p>Probably need to reduce this top-down rather than bottom up</p>",
        "id": 182607293,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575498823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> are you looking to repro on the playground ?</p>",
        "id": 182607890,
        "sender_full_name": "lqd",
        "timestamp": 1575499187
    },
    {
        "content": "<p>if so, something like <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=29afd185e26a0d92d8f05073cd596c9e\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=29afd185e26a0d92d8f05073cd596c9e\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=29afd185e26a0d92d8f05073cd596c9e</a> ?</p>",
        "id": 182608574,
        "sender_full_name": "lqd",
        "timestamp": 1575499616
    },
    {
        "content": "<p>We have a staged API check in the tcx.is_const_fn function, maybe I screwed that up?</p>",
        "id": 182641717,
        "sender_full_name": "oli",
        "timestamp": 1575538182
    },
    {
        "content": "<p>so it's apparently not the staged api check</p>",
        "id": 182645351,
        "sender_full_name": "lqd",
        "timestamp": 1575541353
    },
    {
        "content": "<p>IIUC, in the gist I posted, <code>unwrap_or_else</code> is not considered a \"const fn\" nor \"min const fn\" because the <code>rustc_const_unstable</code> feature mentioned is not enabled</p>",
        "id": 182645484,
        "sender_full_name": "lqd",
        "timestamp": 1575541444
    },
    {
        "content": "<p>it's trivially a \"const_fn_raw\", so it'll be considered a \"const fn\" only if the feature is enabled: <a href=\"https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc/ty/constness.rs#L18-L21\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc/ty/constness.rs#L18-L21\">https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc/ty/constness.rs#L18-L21</a></p>",
        "id": 182645577,
        "sender_full_name": "lqd",
        "timestamp": 1575541547
    },
    {
        "content": "<p>this is not the case in the gist or the PR (or at least the specific linked commit)</p>",
        "id": 182645630,
        "sender_full_name": "lqd",
        "timestamp": 1575541574
    },
    {
        "content": "<p>if you enable it: you'll get the expected \"calls in constant functions are limited to constant functions\" - <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=eb927d9c6c076271474b2270598340ec\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=eb927d9c6c076271474b2270598340ec\">playground</a></p>",
        "id": 182645710,
        "sender_full_name": "lqd",
        "timestamp": 1575541653
    },
    {
        "content": "<p>(and it's not considered a \"min const fn\" because it has a const stability attribute, <a href=\"https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc/ty/constness.rs#L90\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc/ty/constness.rs#L90\">https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc/ty/constness.rs#L90</a>)</p>",
        "id": 182645843,
        "sender_full_name": "lqd",
        "timestamp": 1575541783
    },
    {
        "content": "<p>I don't know if that helps ? maybe I should look at the check_consts validation / min const fn qualification</p>",
        "id": 182646100,
        "sender_full_name": "lqd",
        "timestamp": 1575541964
    },
    {
        "content": "<p>(we probably need more <code>debug!</code>s in both of those :)</p>",
        "id": 182647618,
        "sender_full_name": "lqd",
        "timestamp": 1575543178
    },
    {
        "content": "<p>(and since I was mentioning <code>mir_const_qualif</code>: it will not run the checks because the function is not considered a const fn, so it'll bail out here <a href=\"https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc_mir/transform/mod.rs#L192-L194\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc_mir/transform/mod.rs#L192-L194\">https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc_mir/transform/mod.rs#L192-L194</a>)</p>",
        "id": 182650794,
        "sender_full_name": "lqd",
        "timestamp": 1575545558
    },
    {
        "content": "<p>Oh the last part is the problem. Good find. <a href=\"https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc_mir/transform/check_consts/mod.rs#L80\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc_mir/transform/check_consts/mod.rs#L80\">https://github.com/rust-lang/rust/blob/7fa046534e944193cc47b795b9396a7fcf411d9f/src/librustc_mir/transform/check_consts/mod.rs#L80</a> should check min const fn</p>",
        "id": 182653617,
        "sender_full_name": "oli",
        "timestamp": 1575548398
    },
    {
        "content": "<p>Eh const fn raw</p>",
        "id": 182653663,
        "sender_full_name": "oli",
        "timestamp": 1575548414
    },
    {
        "content": "<p>Instead of const fn</p>",
        "id": 182653679,
        "sender_full_name": "oli",
        "timestamp": 1575548425
    },
    {
        "content": "<p>I'll get a PR ready</p>",
        "id": 182653925,
        "sender_full_name": "lqd",
        "timestamp": 1575548647
    },
    {
        "content": "<p>I was wondering whether just testing over ui/consts would be enough</p>",
        "id": 182654252,
        "sender_full_name": "lqd",
        "timestamp": 1575548908
    },
    {
        "content": "<p>but I'm not sure it'll bootstrap with the fix huhu</p>",
        "id": 182654270,
        "sender_full_name": "lqd",
        "timestamp": 1575548922
    },
    {
        "content": "<p>(nbd probably, probably just enabling more feature gates)</p>",
        "id": 182654324,
        "sender_full_name": "lqd",
        "timestamp": 1575548995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> for eg <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/ptr/mod.rs#L1308-L1318\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/libcore/ptr/mod.rs#L1308-L1318\">https://github.com/rust-lang/rust/blob/master/src/libcore/ptr/mod.rs#L1308-L1318</a> should I enable the <code>const_ptr_offset_from</code> feature only conditionally wrt bootstrap ? (I think I need to enable the feature, regardless of how and bootstrapping, it'll otherwise fail to compile with a \"constant function contains unimplemented expression type\")</p>",
        "id": 182656430,
        "sender_full_name": "lqd",
        "timestamp": 1575550771
    },
    {
        "content": "<p>(in my testing I did <code>#![cfg_attr(not(bootstrap)</code> it but I'm not sure if that's correct or matters ?)</p>",
        "id": 182657050,
        "sender_full_name": "lqd",
        "timestamp": 1575551206
    },
    {
        "content": "<p>the lack of a \"trait bounds other than <code>Sized</code> on const fn parameters are unstable\" error we'd expect somewhere makes me still a bit uneasy, but here it is <a href=\"https://github.com/rust-lang/rust/pull/67055\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67055\">https://github.com/rust-lang/rust/pull/67055</a></p>",
        "id": 182662636,
        "sender_full_name": "lqd",
        "timestamp": 1575555421
    },
    {
        "content": "<p>You need to enable it without a cfg. The function itself has no cfgs, so if you only enable it on bootstrap, stage 1 will fail</p>",
        "id": 182672199,
        "sender_full_name": "oli",
        "timestamp": 1575560974
    },
    {
        "content": "<p>Oh <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span>you're right</p>",
        "id": 182672370,
        "sender_full_name": "oli",
        "timestamp": 1575561040
    },
    {
        "content": "<p>Bootstrap doesn't need the feature gate</p>",
        "id": 182672397,
        "sender_full_name": "oli",
        "timestamp": 1575561052
    },
    {
        "content": "<p>Because the bootstrap compiler also has the problem</p>",
        "id": 182672438,
        "sender_full_name": "oli",
        "timestamp": 1575561076
    },
    {
        "content": "<p>yeah it will not bootstrap otherwise (I now realize)</p>",
        "id": 182673104,
        "sender_full_name": "lqd",
        "timestamp": 1575561398
    },
    {
        "content": "<p>I'll adjust the comment, thanks for the quick review @oli :)</p>",
        "id": 182673123,
        "sender_full_name": "lqd",
        "timestamp": 1575561412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> how about this ?</p>\n<div class=\"codehilite\"><pre><span></span>// Note: this is deliberately checking for `is_const_fn_raw`, as the `is_const_fn`\n// checks take into account the `rustc_const_unstable` attribute combined with enabled\n// feature gates. Otherwise, const qualification would _not check_ whether this\n// function body follows the `const fn` rules, as an unstable `const fn` would\n// be considered &quot;not const&quot;. More details are available in issue #67053.\n</pre></div>",
        "id": 182674326,
        "sender_full_name": "lqd",
        "timestamp": 1575562082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> perfect</p>",
        "id": 182675848,
        "sender_full_name": "oli",
        "timestamp": 1575563039
    },
    {
        "content": "<p>thanks</p>",
        "id": 182675924,
        "sender_full_name": "lqd",
        "timestamp": 1575563063
    },
    {
        "content": "<p>I'll push and r=you then</p>",
        "id": 182675955,
        "sender_full_name": "lqd",
        "timestamp": 1575563078
    },
    {
        "content": "<p>Yes</p>",
        "id": 182675976,
        "sender_full_name": "oli",
        "timestamp": 1575563089
    },
    {
        "content": "<p>done :)</p>",
        "id": 182678365,
        "sender_full_name": "lqd",
        "timestamp": 1575564437
    },
    {
        "content": "<p>now if you'll allow me: <a href=\"/user_uploads/4715/CGJj3XFFox6oasMJ0M3K3Age/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/CGJj3XFFox6oasMJ0M3K3Age/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/CGJj3XFFox6oasMJ0M3K3Age/pasted_image.png\"></a></div>",
        "id": 182678386,
        "sender_full_name": "lqd",
        "timestamp": 1575564450
    },
    {
        "content": "<blockquote>\n<p>I think that there's two concepts here: \"is callable as a min const fn in stable code\" and \"requires the min const fn checks\", but this function is responsible for both of them.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> yea; we should separate them I think; see also <a href=\"https://github.com/rust-lang/rust/issues/64285\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64285\">https://github.com/rust-lang/rust/issues/64285</a> (feel free to assign yourself and steal)</p>",
        "id": 182678827,
        "sender_full_name": "centril",
        "timestamp": 1575564679
    },
    {
        "content": "<blockquote>\n<p>now if you'll allow me: <a href=\"/user_uploads/4715/CGJj3XFFox6oasMJ0M3K3Age/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n</blockquote>\n<p>damn now I have to change my nickname...</p>",
        "id": 182678997,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1575564762
    },
    {
        "content": "<p>we're going to need bigger memes, of course you'll always be welcome christian :p</p>",
        "id": 182679239,
        "sender_full_name": "lqd",
        "timestamp": 1575564894
    },
    {
        "content": "<p>Nice work <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>!!</p>",
        "id": 182689392,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575571376
    },
    {
        "content": "<p>thank you :)</p>",
        "id": 182689564,
        "sender_full_name": "lqd",
        "timestamp": 1575571456
    },
    {
        "content": "<p>Sorry. I went offline right after you sent your message with the repro.</p>",
        "id": 182689630,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575571509
    },
    {
        "content": "<p>(it wasn't hard and oli told me the fix)</p>",
        "id": 182689637,
        "sender_full_name": "lqd",
        "timestamp": 1575571516
    },
    {
        "content": "<p>oh no worries at all</p>",
        "id": 182689710,
        "sender_full_name": "lqd",
        "timestamp": 1575571561
    }
]