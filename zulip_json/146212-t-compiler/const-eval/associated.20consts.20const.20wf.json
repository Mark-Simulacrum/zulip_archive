[
    {
        "content": "<p>.</p>",
        "id": 205278595,
        "sender_full_name": "lcnr",
        "timestamp": 1595963903
    },
    {
        "content": "<p>somewhat building on <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const.20wf.20bounds.20implementation\">https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const.20wf.20bounds.20implementation</a></p>",
        "id": 205278617,
        "sender_full_name": "lcnr",
        "timestamp": 1595963921
    },
    {
        "content": "<p>Associated const are currently not checked for const well formedness, so the following is allowed:</p>",
        "id": 205278655,
        "sender_full_name": "lcnr",
        "timestamp": 1595963949
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205278665,
        "sender_full_name": "lcnr",
        "timestamp": 1595963960
    },
    {
        "content": "<p>So <a href=\"https://github.com/rust-lang/rust/issues/74877\">#74877</a> implements <code>min_const_generics</code> and currently also restricts const generics from showing up in associated constants</p>",
        "id": 205278784,
        "sender_full_name": "lcnr",
        "timestamp": 1595964024
    },
    {
        "content": "<p>imo it is very desirable to force associated consts to be const wf</p>",
        "id": 205278866,
        "sender_full_name": "lcnr",
        "timestamp": 1595964072
    },
    {
        "content": "<p>The two questions are:</p>",
        "id": 205278965,
        "sender_full_name": "lcnr",
        "timestamp": 1595964122
    },
    {
        "content": "<p>Do we want to check const wf of associated consts? (imo yes)</p>",
        "id": 205278984,
        "sender_full_name": "lcnr",
        "timestamp": 1595964125
    },
    {
        "content": "<p>How do we implement this?</p>",
        "id": 205279002,
        "sender_full_name": "lcnr",
        "timestamp": 1595964141
    },
    {
        "content": "<p>Wait, we probably can just propagate these upwards, as the value of associated consts should be part of the public interface of an impl</p>",
        "id": 205279932,
        "sender_full_name": "lcnr",
        "timestamp": 1595964619
    },
    {
        "content": "<p>at this point we can't really force them be const wf though, as doing so would be a breaking change (i.e. <code>Foo</code> would suddenly stop being implemented for <code>()</code>)</p>",
        "id": 205280040,
        "sender_full_name": "lcnr",
        "timestamp": 1595964674
    },
    {
        "content": "<p>So we probably should restrict const wf to consts used as part of the type system</p>",
        "id": 205280091,
        "sender_full_name": "lcnr",
        "timestamp": 1595964702
    },
    {
        "content": "<p>at which point we will require a const wf bound on <code>Foo::ASSOC</code> anyways</p>",
        "id": 205280121,
        "sender_full_name": "lcnr",
        "timestamp": 1595964722
    },
    {
        "content": "<p>so... we don't have to do anything except require wf for all constants used in type systems?</p>",
        "id": 205280511,
        "sender_full_name": "oli",
        "timestamp": 1595964931
    },
    {
        "content": "<p>probably, it is unfortunate though :/</p>",
        "id": 205280542,
        "sender_full_name": "lcnr",
        "timestamp": 1595964946
    },
    {
        "content": "<p>it's not too bad, we can add warnings suggesting the addition of wf bounds on the impls which will then cause the breakage</p>",
        "id": 205280638,
        "sender_full_name": "oli",
        "timestamp": 1595964987
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ^ requires wf bound</span>\n\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ^ does not require wf bound, just breaks for `[u8; 0]`</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205280738,
        "sender_full_name": "lcnr",
        "timestamp": 1595965055
    },
    {
        "content": "<p>What I am now still unsure of is if we want to restrict associated consts to just <code>N</code> and <code>{ N }</code> for <code>min_const_generics</code></p>",
        "id": 205281033,
        "sender_full_name": "lcnr",
        "timestamp": 1595965202
    },
    {
        "content": "<p>That restriction doesn't really make sense if we ignore const wf for associated consts, so we could just not restrict them</p>",
        "id": 205281173,
        "sender_full_name": "lcnr",
        "timestamp": 1595965268
    },
    {
        "content": "<p>Hmm</p>",
        "id": 205290362,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970056
    },
    {
        "content": "<p>It might be technically breaking, but how likely it is that it is breaking some crate somewhere?</p>",
        "id": 205290412,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970085
    },
    {
        "content": "<p>(I ask unironically)</p>",
        "id": 205290429,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970098
    },
    {
        "content": "<p>So forbidding <code>std::mem::size_of::&lt;T&gt;()</code> is quite breaking</p>",
        "id": 205290440,
        "sender_full_name": "lcnr",
        "timestamp": 1595970108
    },
    {
        "content": "<p>Wait</p>",
        "id": 205290508,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970138
    },
    {
        "content": "<p>Why does that break?</p>",
        "id": 205290527,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970158
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205290538,
        "sender_full_name": "lcnr",
        "timestamp": 1595970170
    },
    {
        "content": "<p>So using const wf bounds here, <code>T</code> would only implement <code>Foo</code> if <code>ConstEvaluatable(std::mem::size_of::&lt;T&gt;())</code></p>",
        "id": 205290589,
        "sender_full_name": "lcnr",
        "timestamp": 1595970204
    },
    {
        "content": "<p>And that associated const is currently legal?</p>",
        "id": 205290598,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970206
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"212698\">Félix Fischer</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/associated.20consts.20const.20wf/near/205290598\">said</a>:</p>\n<blockquote>\n<p>And that associated const is currently legal?</p>\n</blockquote>\n<p>yeah</p>",
        "id": 205290615,
        "sender_full_name": "lcnr",
        "timestamp": 1595970214
    },
    {
        "content": "<p>Fuuuuck xD</p>",
        "id": 205290629,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970221
    },
    {
        "content": "<p>Okay</p>",
        "id": 205290636,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970224
    },
    {
        "content": "<p>I get it now</p>",
        "id": 205290643,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970230
    },
    {
        "content": "<p>Hm</p>",
        "id": 205290646,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970234
    },
    {
        "content": "<p>Could we add a lint asking for the bound?</p>",
        "id": 205290707,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970251
    },
    {
        "content": "<p>And deprecate it when the next Edition comes?</p>",
        "id": 205290727,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970264
    },
    {
        "content": "<p>(Deprecate the older way w/o wf bounds)</p>",
        "id": 205290753,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970281
    },
    {
        "content": "<p>lint seems like a good idea <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> Not sure how easy changing the behavior on an edition boundary will be</p>",
        "id": 205290850,
        "sender_full_name": "lcnr",
        "timestamp": 1595970352
    },
    {
        "content": "<p>but that would have to wait until at least 2024 anyways, so we'll see more then</p>",
        "id": 205290910,
        "sender_full_name": "lcnr",
        "timestamp": 1595970375
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>🏻👍🏻</p>",
        "id": 205290966,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970427
    },
    {
        "content": "<p>uuuuuuuuuu~~~~~~</p>",
        "id": 205291062,
        "sender_full_name": "lcnr",
        "timestamp": 1595970493
    },
    {
        "content": "<p>unicode support</p>",
        "id": 205291065,
        "sender_full_name": "lcnr",
        "timestamp": 1595970498
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/vGqdhp5dN0ySZQVDGGv28jdQ/Screenshot-from-2020-07-28-23-08-18.png\">Screenshot-from-2020-07-28-23-08-18.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/vGqdhp5dN0ySZQVDGGv28jdQ/Screenshot-from-2020-07-28-23-08-18.png\" title=\"Screenshot-from-2020-07-28-23-08-18.png\"><img src=\"/user_uploads/4715/vGqdhp5dN0ySZQVDGGv28jdQ/Screenshot-from-2020-07-28-23-08-18.png\"></a></div>",
        "id": 205291078,
        "sender_full_name": "lcnr",
        "timestamp": 1595970509
    },
    {
        "content": "<p>Hahahahaha</p>",
        "id": 205291122,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970551
    },
    {
        "content": "<p>It renders the first one like that for me, and the second one like the colored hand (I sent two, like so: <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>)</p>",
        "id": 205291171,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1595970594
    },
    {
        "content": "<p>For me it is thumbs up + colored block + colored thumbs up.</p>\n<p><a href=\"/user_uploads/4715/Swbcn18B0j1QCXBElar7FRsQ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Swbcn18B0j1QCXBElar7FRsQ/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/Swbcn18B0j1QCXBElar7FRsQ/image.png\"></a></div>",
        "id": 205361793,
        "sender_full_name": "bjorn3",
        "timestamp": 1596032002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  re assoc wf, this was the only discussion we had about that for now.</p>\n<p>I think the current summary is that we just allow arbitrary expressions using const parameters in associated consts as we already do so for type params.</p>\n<p>Meaning that the following code is valid</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TraitFoo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212044948,
        "sender_full_name": "lcnr",
        "timestamp": 1601626497
    },
    {
        "content": "<p>I guess that once <code>const_evaluatable_checked</code> is available on stable we can then add warnings here recommending to add the associated consts as a bound to the trait impl</p>",
        "id": 212045022,
        "sender_full_name": "lcnr",
        "timestamp": 1601626548
    },
    {
        "content": "<p>One of the big concerns here is that using associated consts which evaluate to an error is not allowed, even if they are used in dead code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"o\">&gt;</span>::<span class=\"n\">ASSOC</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212045201,
        "sender_full_name": "lcnr",
        "timestamp": 1601626654
    },
    {
        "content": "<p>so we have similar post monomorphization errorsv we would get for <code>[u8; 2 - N]</code>, except that these are already possible on stable</p>",
        "id": 212045284,
        "sender_full_name": "lcnr",
        "timestamp": 1601626693
    },
    {
        "content": "<p>and I am really not completely sold that there is a difference between associated consts and consts used in types in that regard, meaning that we would make this situation worse for the sake of consistency.</p>",
        "id": 212045346,
        "sender_full_name": "lcnr",
        "timestamp": 1601626749
    },
    {
        "content": "<p>I agree there ought not to be a distinction.</p>",
        "id": 212075196,
        "sender_full_name": "varkor",
        "timestamp": 1601645934
    },
    {
        "content": "<p>It's a bit of a mess regarding what's currently permitted.</p>",
        "id": 212075302,
        "sender_full_name": "varkor",
        "timestamp": 1601645994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/associated.20consts.20const.20wf/near/212045022\">said</a>:</p>\n<blockquote>\n<p>I guess that once <code>const_evaluatable_checked</code> is available on stable we can then add warnings here recommending to add the associated consts as a bound to the trait impl</p>\n</blockquote>\n<p>Doing this for all these sorts of cases seems the best way forwards, I agree.</p>",
        "id": 212075401,
        "sender_full_name": "varkor",
        "timestamp": 1601646021
    },
    {
        "content": "<p>As somebody who has used associated constants a ton since they were stabilized, I've <del>never seen post-monomorphization errors</del>(correction: I've seen them while developing features, but not when using them AFAIR), so requiring users to write bounds to avoid them seems like an extreme measure to me.</p>",
        "id": 212131877,
        "sender_full_name": "matt1992",
        "timestamp": 1601674619
    },
    {
        "content": "<p>i am currently thinking that it might be better to move the const wf checks to the usage site instead for associated consts and for generic constants if we ever add them</p>",
        "id": 223772496,
        "sender_full_name": "lcnr",
        "timestamp": 1611432209
    },
    {
        "content": "<p>i should take some time to write down the way i currently imagine const wf to work</p>",
        "id": 223772569,
        "sender_full_name": "lcnr",
        "timestamp": 1611432281
    },
    {
        "content": "<p>will try doing so once project cg has its own repo</p>",
        "id": 223772586,
        "sender_full_name": "lcnr",
        "timestamp": 1611432300
    }
]