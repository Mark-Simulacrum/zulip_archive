[
    {
        "content": "<p>How do we continue with unstable experiments wrt <code>unconst</code>?</p>",
        "id": 147954258,
        "sender_full_name": "oli",
        "timestamp": 1542619511
    },
    {
        "content": "<p>I think we have to decide which guarantees we expect to be upheld about <code>const fn</code> (on top the usual guarantee of being safe to call at runtime), and analyze what the failure modes are when the guarantees are violated (the biggest issue being promotion IMO, so completing the docs on what gets promoted and what does not should also help)</p>",
        "id": 147961807,
        "sender_full_name": "RalfJ",
        "timestamp": 1542629441
    },
    {
        "content": "<p>e.g. I wonder if we plan to ever promote calls to user-defined <code>const fn</code>? I would think so. Then what does that imply?</p>",
        "id": 147961828,
        "sender_full_name": "RalfJ",
        "timestamp": 1542629486
    },
    {
        "content": "<p>I don't think we should ever promote user-defined <code>const fn</code> without explicit requests for promotion</p>",
        "id": 147962474,
        "sender_full_name": "oli",
        "timestamp": 1542630288
    },
    {
        "content": "<p>so some sort of anonymous constants via <code>const { foo }</code> blocks or sth, but not automatic promotion</p>",
        "id": 147962484,
        "sender_full_name": "oli",
        "timestamp": 1542630306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> but that seems really arbitrary</p>",
        "id": 147964674,
        "sender_full_name": "RalfJ",
        "timestamp": 1542633134
    },
    {
        "content": "<p>I guess I could agree if we plan to <em>also</em> deprecate promoting <em>any</em> <code>const fn</code> automatically</p>",
        "id": 147964681,
        "sender_full_name": "RalfJ",
        "timestamp": 1542633152
    },
    {
        "content": "<p>like:<br>\n1. come up with some syntax for explicit promotion<br>\n2. make it a warning to not use that syntax when calling a <code>const fn</code> (<em>any</em> <code>const fn</code>, including the ones we currently promote) and relying on it being promoted<br>\n3. transition to an error with the next edition, or so</p>",
        "id": 147964701,
        "sender_full_name": "RalfJ",
        "timestamp": 1542633206
    },
    {
        "content": "<p>basically, I'd like to impose the constraint that in the \"final state\", all <code>const fn</code> are treated equal for promotion</p>",
        "id": 147964768,
        "sender_full_name": "RalfJ",
        "timestamp": 1542633249
    }
]