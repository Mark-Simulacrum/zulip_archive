[
    {
        "content": "<p>const checking starts looking more and more similar to things from wf-checking. We should evaluate whether it actually belongs into wf-check</p>",
        "id": 246840899,
        "sender_full_name": "oli",
        "timestamp": 1626957748
    },
    {
        "content": "<p>Any examples you are thinking of here?<br>\nhis could relate to a concern I shared a few months ago that const-checking does 2 jobs:</p>\n<ul>\n<li>for some unstable features, check the feature gate</li>\n<li>for some things that can never be allowed in <code>const</code> (or at least seems extremely unclear), reject them without offering a feature gate to suppress the check</li>\n</ul>",
        "id": 246953562,
        "sender_full_name": "RalfJ",
        "timestamp": 1627029823
    },
    {
        "content": "<p>also the code calls it \"const validation\", but I also prefer \"const checking\" so maybe we should finally rename the files? :D</p>",
        "id": 246953613,
        "sender_full_name": "RalfJ",
        "timestamp": 1627029844
    },
    {
        "content": "<p>The main thing I am thinking about is the check for calling functions. We need to know about the bounds in scope and check that they are <code>const</code> where the called function requires that</p>",
        "id": 246961702,
        "sender_full_name": "oli",
        "timestamp": 1627036038
    },
    {
        "content": "<p>we do some checks that check whether we only call <code>const fn</code> from const contexts, but that seems to me to be very similar to checking if calling a generic function from a generic function is possible with the trait bounds in scope</p>",
        "id": 246961797,
        "sender_full_name": "oli",
        "timestamp": 1627036100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Should.20various.20const.20checking.20things.20actually.20be.20in.20wf-ch.2E.2E.2E/near/246961797\">said</a>:</p>\n<blockquote>\n<p>we do some checks that check whether we only call <code>const fn</code> from const contexts, but that seems to me to be very similar to checking if calling a generic function from a generic function is possible with the trait bounds in scope</p>\n</blockquote>\n<p>ah I see. yes that makes sense.</p>",
        "id": 246964879,
        "sender_full_name": "RalfJ",
        "timestamp": 1627038793
    },
    {
        "content": "<p>independently of that, what do you think of renaming <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/transform/check_consts/validation.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_mir/src/transform/check_consts/validation.rs</a> to <code>check.rs</code> or so? then \"validation\" is less overloaded (with the value validation in <code>interpret</code>)</p>",
        "id": 246964963,
        "sender_full_name": "RalfJ",
        "timestamp": 1627038852
    },
    {
        "content": "<p>yes, that is a good renaming</p>",
        "id": 246967779,
        "sender_full_name": "oli",
        "timestamp": 1627041171
    }
]