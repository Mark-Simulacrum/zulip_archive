[
    {
        "content": "<p>I wrote about silent const eval errors during selection in the project const generics design docs: <a href=\"https://rust-lang.github.io/project-const-generics/design/eval-errors-during-selection.html\">https://rust-lang.github.io/project-const-generics/design/eval-errors-during-selection.html</a></p>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you both skim over that doc if it makes sense and whether there's anything you want to add? I also want a <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span> signoff that silent ctfe errors can't be avoided for const generics.</p>",
        "id": 276244436,
        "sender_full_name": "lcnr",
        "timestamp": 1647978253
    },
    {
        "content": "<p>we had a brief discussion on this a while ago didnt we? on some PR?</p>",
        "id": 276248041,
        "sender_full_name": "RalfJ",
        "timestamp": 1647980019
    },
    {
        "content": "<p>my first reaction is \"I am very concerned\" since const_err being just a lint has caused so many problems. but maybe this is a rather different situation...</p>",
        "id": 276248207,
        "sender_full_name": "RalfJ",
        "timestamp": 1647980095
    },
    {
        "content": "<p>That text reads like \"there are many ways to avoid silent CTFE errors, but all of them require new language features\", even though the preamble says \"can't avoid them\"</p>",
        "id": 276266367,
        "sender_full_name": "oli",
        "timestamp": 1647990282
    },
    {
        "content": "<p>what bits are you thinking of for \"require new langauge features\"</p>",
        "id": 276266577,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990433
    },
    {
        "content": "<p>Well, a way to state preconditions to be checked before considering an impl</p>",
        "id": 276266631,
        "sender_full_name": "oli",
        "timestamp": 1647990481
    },
    {
        "content": "<p>where clauses?</p>",
        "id": 276266701,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990518
    },
    {
        "content": "<p>im not following exactly what you mean</p>",
        "id": 276266708,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990525
    },
    {
        "content": "<p>Yes, the text mentions multiple times that we could have conditional where clauses that are prioritzed over the const eval ones</p>",
        "id": 276266746,
        "sender_full_name": "oli",
        "timestamp": 1647990561
    },
    {
        "content": "<p>I think the doc needs a summary for the reasons to have silent errors. This is basically C++ SFINAE, right? Are there posts on sfinae saying what alternatives there are?</p>",
        "id": 276266830,
        "sender_full_name": "oli",
        "timestamp": 1647990614
    },
    {
        "content": "<p>there's no post mono errors here</p>",
        "id": 276266849,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990629
    },
    {
        "content": "<p>this stuff is in the context of coherence where we want to know if <code>impl Trait&lt;{ N - 1 }&gt; for ()</code> and <code>impl Trait&lt;0&gt; for ()</code> overlap</p>",
        "id": 276266887,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990657
    },
    {
        "content": "<p>Oh, I though it was for finding impls, too?</p>",
        "id": 276266936,
        "sender_full_name": "oli",
        "timestamp": 1647990702
    },
    {
        "content": "<p>oh right i think that too</p>",
        "id": 276267009,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990739
    },
    {
        "content": "<p>i was just thinking of coherence my bad <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 276267048,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990776
    },
    {
        "content": "<p>same is true of selection though is my understanding</p>",
        "id": 276267057,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990781
    },
    {
        "content": "<p>For coherence, in a perfect world we'd solve 0 = N - 1 for N</p>",
        "id": 276267137,
        "sender_full_name": "oli",
        "timestamp": 1647990842
    },
    {
        "content": "<p>To check for overlap</p>",
        "id": 276267196,
        "sender_full_name": "oli",
        "timestamp": 1647990858
    },
    {
        "content": "<p>well actually each impl needs to constrain <code>N</code> in some way so I feel like we could just check that instead of evaluating</p>",
        "id": 276267217,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990879
    },
    {
        "content": "<p>i.e. that <code>impl&lt;const N: usize&gt; Trait&lt;{ N - 1 }&gt; for ()</code> is not allowed because <code>N</code>is not constrained</p>",
        "id": 276267234,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990896
    },
    {
        "content": "<p>and you'd ahve to do <code>impl&lt;const N: usize&gt; Trait&lt;{ N - 1 }, N&gt; for ()</code> or smth</p>",
        "id": 276267249,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990909
    },
    {
        "content": "<p>conversation about all this was too long ago I cant remember stuff <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 276267288,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990936
    },
    {
        "content": "<p>Hmm... what is the type equivalent of that?</p>",
        "id": 276267308,
        "sender_full_name": "oli",
        "timestamp": 1647990954
    },
    {
        "content": "<p><code>impl&lt;T&gt; Trait&lt;&lt;T as Other&gt;::Assoc, T&gt; for ()</code></p>",
        "id": 276267365,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647990967
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 276267392,
        "sender_full_name": "oli",
        "timestamp": 1647990983
    },
    {
        "content": "<p>Constants are a bit special because they can be exhaustively used, so maybe that's enough argument for allowing to diverge from types.</p>",
        "id": 276267584,
        "sender_full_name": "oli",
        "timestamp": 1647991107
    },
    {
        "content": "<p>diverge in what way</p>",
        "id": 276267613,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647991134
    },
    {
        "content": "<p>Making expressions count as constraints</p>",
        "id": 276267719,
        "sender_full_name": "oli",
        "timestamp": 1647991204
    },
    {
        "content": "<p>in the general case its not possible</p>",
        "id": 276267730,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647991212
    },
    {
        "content": "<p>i.e. <code>impl&lt;A: usize, B: usize&gt; Trait&lt;{ A + B }&gt; for ()</code></p>",
        "id": 276267746,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647991227
    },
    {
        "content": "<p>Hmmm</p>",
        "id": 276267748,
        "sender_full_name": "oli",
        "timestamp": 1647991229
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/project-const-generics/design/constraining-generic-parameters.html\">https://rust-lang.github.io/project-const-generics/design/constraining-generic-parameters.html</a></p>",
        "id": 276267768,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647991243
    },
    {
        "content": "<p>to be clear i brought this up not because i think that <code>impl&lt;N: usize&gt; Trait&lt;{ N - 1 }&gt; for ()</code> should compile, but because actual legal code would have a constraining expr somewhere that we could probably use for selection stuff maybe instead of evaluating?</p>",
        "id": 276267873,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647991313
    },
    {
        "content": "<p>I think i mentioned this to lcnr before but I cant remember waht the respones is and its not mentioned in the doc <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 276267931,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647991328
    },
    {
        "content": "<p>One thing: when talking about exhaustiveness, we usually have patterns, not expressions, should probably brain storm about patterns in where bounds?</p>",
        "id": 276268007,
        "sender_full_name": "oli",
        "timestamp": 1647991391
    },
    {
        "content": "<p>uhh</p>",
        "id": 276268030,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647991407
    },
    {
        "content": "<p>ðŸ§ ðŸ’¤ will ponder tomorrow</p>",
        "id": 276268037,
        "sender_full_name": "oli",
        "timestamp": 1647991411
    },
    {
        "content": "<p>im not sure how patterns relate to this tbh</p>",
        "id": 276268045,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647991415
    },
    {
        "content": "<p>exhaustiveness in the doc refers to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">ForBool</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ForBool</span><span class=\"o\">&lt;</span><span class=\"kc\">true</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ForBool</span><span class=\"o\">&lt;</span><span class=\"kc\">false</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">// Does `for&lt;const B: bool&gt; u8: ForBool&lt;B&gt;` hold?</span>\n</code></pre></div>",
        "id": 276268068,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1647991433
    },
    {
        "content": "<p>We have exhaustive patterns for integers now too, though.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"o\">..=</span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"sc\">'a'</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">101</span><span class=\"o\">..=</span><span class=\"mi\">255</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"sc\">'b'</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>^ since that compiles, it would make sense to be able to do the moral equivalent in <code>impl</code>s too</p>",
        "id": 276286977,
        "sender_full_name": "scottmcm",
        "timestamp": 1648009372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/silent.20ctfe.20errors/near/276266367\">said</a>:</p>\n<blockquote>\n<p>That text reads like \"there are many ways to avoid silent CTFE errors, but all of them require new language features\", even though the preamble says \"can't avoid them\"</p>\n</blockquote>\n<p>so that doc might not be as clear as I want it</p>",
        "id": 276294282,
        "sender_full_name": "lcnr",
        "timestamp": 1648018281
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/project-const-generics/design/eval-errors-during-selection.html#can-we-avoid-silent-ctfe-errors\">https://rust-lang.github.io/project-const-generics/design/eval-errors-during-selection.html#can-we-avoid-silent-ctfe-errors</a> goes into whether we need support of silent CTFE errors in the compiler: We do need these and can't avoid them</p>",
        "id": 276294294,
        "sender_full_name": "lcnr",
        "timestamp": 1648018308
    },
    {
        "content": "<p>all the possible designs rely on silent CTFE errors, what these change is whether silent CTFE errors by themselves can influence candidate selection</p>",
        "id": 276294360,
        "sender_full_name": "lcnr",
        "timestamp": 1648018360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/silent.20ctfe.20errors/near/276248041\">said</a>:</p>\n<blockquote>\n<p>we had a brief discussion on this a while ago didnt we? on some PR?</p>\n</blockquote>\n<p>jup, in some <a class=\"stream\" data-stream-id=\"260443\" href=\"/#narrow/stream/260443-project-const-generics\">#project-const-generics</a> thread starting here: <a href=\"#narrow/stream/260443-project-const-generics/topic/valtrees/near/269796978\">https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/valtrees/near/269796978</a></p>",
        "id": 276294387,
        "sender_full_name": "lcnr",
        "timestamp": 1648018407
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/silent.20ctfe.20errors/near/276266746\">said</a>:</p>\n<blockquote>\n<p>Yes, the text mentions multiple times that we could have conditional where clauses that are prioritzed over the const eval ones</p>\n</blockquote>\n<p>I did, that's still not enough to avoid ctfe errors because of</p>\n<blockquote>\n<p>While we could add some special predicate kind for \"this has to evaluate to <code>true</code>\", we still have the same issue in case we have multiple such bounds which some dependencies between them.</p>\n</blockquote>",
        "id": 276295419,
        "sender_full_name": "lcnr",
        "timestamp": 1648019562
    },
    {
        "content": "<p>only mentioning that in one sentence in the middle of a paragraph might not be enough, would an example help here?</p>",
        "id": 276295472,
        "sender_full_name": "lcnr",
        "timestamp": 1648019618
    },
    {
        "content": "<blockquote>\n<p>I think the doc needs a summary for the reasons to have silent errors. This is basically C++ SFINAE, right? Are there posts on sfinae saying what alternatives there are?</p>\n</blockquote>\n<p><a href=\"https://rust-lang.github.io/project-const-generics/design/eval-errors-during-selection.html#can-we-avoid-silent-ctfe-errors\">https://rust-lang.github.io/project-const-generics/design/eval-errors-during-selection.html#can-we-avoid-silent-ctfe-errors</a> goes into ways we avoid silent CTFE errors, the only alternative to sfinae in general is to just not allow the following no matter what where clauses we use for the first impl</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">whatever</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276296030,
        "sender_full_name": "lcnr",
        "timestamp": 1648020225
    },
    {
        "content": "<p>and that is definitely not an alternative i would seriously consider</p>",
        "id": 276296080,
        "sender_full_name": "lcnr",
        "timestamp": 1648020246
    },
    {
        "content": "<p>OK thanks, that clears up a few things. Now I'm wondering again if we can avoid them <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> i'll get around to a real review of the doc, but opening a thread now for my idea that I though about for an entire 3 seconds</p>",
        "id": 276302376,
        "sender_full_name": "oli",
        "timestamp": 1648025184
    },
    {
        "content": "<p>Something I'm not seeing discussed here is, given the code in the example...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>... should this even compile?</p>",
        "id": 276315922,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648033023
    },
    {
        "content": "<p>It's really not clear to me that it should.</p>",
        "id": 276315946,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648033045
    },
    {
        "content": "<p>i am not saying that this should</p>",
        "id": 276315959,
        "sender_full_name": "lcnr",
        "timestamp": 1648033057
    },
    {
        "content": "<p>or well, I don't want to say that it should <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 276315979,
        "sender_full_name": "lcnr",
        "timestamp": 1648033072
    },
    {
        "content": "<p>I want \"the idea behind this to work\"</p>",
        "id": 276316039,
        "sender_full_name": "lcnr",
        "timestamp": 1648033085
    },
    {
        "content": "<p>i.e. these two impls can be written in some form</p>",
        "id": 276316049,
        "sender_full_name": "lcnr",
        "timestamp": 1648033091
    },
    {
        "content": "<p>potentially by adding a <code>where Condition&lt;{ N &gt; 0 }&gt;: IsTrue</code> bound to the <code>N - 1</code> impl</p>",
        "id": 276316085,
        "sender_full_name": "lcnr",
        "timestamp": 1648033116
    },
    {
        "content": "<p>I understand that, but I'm saying \"I'm not sure the idea behind this should\"</p>",
        "id": 276316106,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648033132
    },
    {
        "content": "<p>but having impls using generic const exprs be distinct is something I definitely want</p>",
        "id": 276316109,
        "sender_full_name": "lcnr",
        "timestamp": 1648033134
    },
    {
        "content": "<p>alright, yes I strongly believe we want this</p>",
        "id": 276316141,
        "sender_full_name": "lcnr",
        "timestamp": 1648033153
    },
    {
        "content": "<blockquote>\n<p>but having impls using generic const exprs be distinct is something I definitely want</p>\n</blockquote>\n<p>I'm not sure it's something we want, but that's tangential to my point</p>",
        "id": 276316165,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648033174
    },
    {
        "content": "<p>Let me give another example</p>",
        "id": 276316173,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648033179
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Should this compile?</p>",
        "id": 276316318,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648033228
    },
    {
        "content": "<p>in some form, yes, definitely</p>",
        "id": 276316394,
        "sender_full_name": "lcnr",
        "timestamp": 1648033275
    },
    {
        "content": "<p>why should it not?</p>",
        "id": 276316415,
        "sender_full_name": "lcnr",
        "timestamp": 1648033286
    },
    {
        "content": "<blockquote>\n<p>Should this compile?</p>\n</blockquote>\n<p>or wait, can you give the whole context, idk whether you assume the the above impls to also exist</p>",
        "id": 276316525,
        "sender_full_name": "lcnr",
        "timestamp": 1648033328
    },
    {
        "content": "<p>No, I was assuming this is the only impl</p>",
        "id": 276316560,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648033354
    },
    {
        "content": "<p>ok, then it should definitely compile</p>",
        "id": 276316580,
        "sender_full_name": "lcnr",
        "timestamp": 1648033370
    },
    {
        "content": "<p>Ok, but then how does the compiler handle this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">Assoc</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276316658,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648033421
    },
    {
        "content": "<p>There shouldn't be an impl, because there is no N for which <code>N % 4 == 5</code></p>",
        "id": 276316783,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648033485
    },
    {
        "content": "<p>But expressing that in the compiler is non-trivial</p>",
        "id": 276316796,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648033494
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Container</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HasAssoc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HasAssoc</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">yay</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">U</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">V</span>: <span class=\"nb\">Default</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">HasAssoc</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Container</span><span class=\"o\">&lt;&lt;</span><span class=\"n\">V</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">HasAssoc</span><span class=\"o\">&gt;</span>::<span class=\"n\">Assoc</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">yay</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">V</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Container</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"n\">yay</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276317021,
        "sender_full_name": "lcnr",
        "timestamp": 1648033615
    },
    {
        "content": "<p>in the same way we do it for projections</p>",
        "id": 276317026,
        "sender_full_name": "lcnr",
        "timestamp": 1648033621
    },
    {
        "content": "<p>a generic constant used in the type system is pretty much just a projection</p>",
        "id": 276317045,
        "sender_full_name": "lcnr",
        "timestamp": 1648033636
    },
    {
        "content": "<p>and we should treat them as similarly as possible</p>",
        "id": 276317064,
        "sender_full_name": "lcnr",
        "timestamp": 1648033651
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/silent.20ctfe.20errors/near/276316783\">said</a>:</p>\n<blockquote>\n<p>There shouldn't be an impl, because there is no N for which <code>N % 4 == 5</code></p>\n</blockquote>\n<p>jup, so that would end up as ambiguous</p>",
        "id": 276317119,
        "sender_full_name": "lcnr",
        "timestamp": 1648033682
    },
    {
        "content": "<p>unless you somehow manage to constrain <code>N</code> in some other way</p>",
        "id": 276317174,
        "sender_full_name": "lcnr",
        "timestamp": 1648033694
    },
    {
        "content": "<p>e.g. through the generic argument of <code>Trait</code></p>",
        "id": 276317190,
        "sender_full_name": "lcnr",
        "timestamp": 1648033707
    },
    {
        "content": "<p>I guess</p>",
        "id": 276317567,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648033925
    },
    {
        "content": "<blockquote>\n<p>jup, so that would end up as ambiguous</p>\n<p>unless you somehow manage to constrain N in some other way</p>\n</blockquote>\n<p>It would be ambiguous in any case, though.</p>",
        "id": 276317684,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648034013
    },
    {
        "content": "<p><code>&lt;[u8; 5] as Trait&lt;3&gt;&gt;::Assoc</code> wouldn't be ambig but just wouldn't hold <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 276317773,
        "sender_full_name": "lcnr",
        "timestamp": 1648034049
    },
    {
        "content": "<p>Eg <code>&lt;[u8; 3] as Trait&gt;::Assoc</code> would be ambiguous, because N could be 3, 7, 11, 15, etc...</p>",
        "id": 276317787,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648034060
    },
    {
        "content": "<p>exactly</p>",
        "id": 276317834,
        "sender_full_name": "lcnr",
        "timestamp": 1648034097
    },
    {
        "content": "<p><a href=\"https://rust-lang.github.io/project-const-generics/design/constraining-generic-parameters.html\">https://rust-lang.github.io/project-const-generics/design/constraining-generic-parameters.html</a></p>",
        "id": 276317865,
        "sender_full_name": "lcnr",
        "timestamp": 1648034113
    },
    {
        "content": "<blockquote>\n<p>When calling <code>Weird::&lt;3&gt;::returns_a()</code>, there is no way to restrict the generic parameters A or B so this has to error. If a generic parameter is used by an injective expression, then we should allow this. The most relevant case here are constructors:</p>\n</blockquote>\n<p>So in your example, would the compiler know that <code>N - 1</code> is injective?</p>",
        "id": 276318192,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648034293
    },
    {
        "content": "<p>changed it to \"then we could allow this\"</p>",
        "id": 276318211,
        "sender_full_name": "lcnr",
        "timestamp": 1648034310
    },
    {
        "content": "<p>theoretically we could implement it</p>",
        "id": 276318233,
        "sender_full_name": "lcnr",
        "timestamp": 1648034327
    },
    {
        "content": "<p>but I don't think we should should do that as part of the initial stabilization</p>",
        "id": 276318258,
        "sender_full_name": "lcnr",
        "timestamp": 1648034347
    },
    {
        "content": "<p>but only if there is ever a large enough demand with valid usecases</p>",
        "id": 276318278,
        "sender_full_name": "lcnr",
        "timestamp": 1648034362
    },
    {
        "content": "<p>I strongly believe we need this for constructors before stabilization of <code>generic_const_exprs</code></p>",
        "id": 276318496,
        "sender_full_name": "lcnr",
        "timestamp": 1648034454
    },
    {
        "content": "<p>potentially even before <code>adt_const_params</code> gets stabilized</p>",
        "id": 276318522,
        "sender_full_name": "lcnr",
        "timestamp": 1648034464
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/silent.20ctfe.20errors/near/276316394\">said</a>:</p>\n<blockquote>\n<p>in some form, yes, definitely</p>\n</blockquote>\n<p>FWIW that seems inconsistent since <code>N</code> is not uniquely determined, so it's akin to an \"unused generic parameter\" which we reject?</p>",
        "id": 276681221,
        "sender_full_name": "RalfJ",
        "timestamp": 1648243973
    },
    {
        "content": "<p>like, this is not all that different from</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">R</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">38</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276681280,
        "sender_full_name": "RalfJ",
        "timestamp": 1648244018
    },
    {
        "content": "<blockquote>\n<p>Always emitting an error when encountering UB seems desirable, even if it happens during selection.</p>\n</blockquote>\n<p>Sure it is <em>desirable</em> but it's also <em>super hard</em> (and slow!) so I don't think we should rely on it. That's very fragile. Like, not even Miri detects all UB, and it already does a lot more work than CTFE does.</p>",
        "id": 276681492,
        "sender_full_name": "RalfJ",
        "timestamp": 1648244144
    },
    {
        "content": "<p>so I think any proposal that relies on detecting all UB is not realistic</p>",
        "id": 276681565,
        "sender_full_name": "RalfJ",
        "timestamp": 1648244165
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/silent.20ctfe.20errors/near/276681221\">said</a>:</p>\n<blockquote>\n<p>FWIW that seems inconsistent since <code>N</code> is not uniquely determined, so it's akin to an \"unused generic parameter\" which we reject?</p>\n</blockquote>\n<p>I'm not sure. lcnr's example seems similar to this code, which currently compiles:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HasAssoc</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">HasAssoc</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyTrait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span>::<span class=\"n\">Assoc</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 276721414,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648294507
    },
    {
        "content": "<p>hm, I did not expect that to compile. how is that instance ever selected?</p>",
        "id": 276728410,
        "sender_full_name": "RalfJ",
        "timestamp": 1648304499
    },
    {
        "content": "<p>It gives you \"type annotation needed\" errors if you try to use it as-is.</p>",
        "id": 276729215,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648305668
    },
    {
        "content": "<p>Eg: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=91df088f8bbb879e89ee27a51fea8019\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=91df088f8bbb879e89ee27a51fea8019</a></p>",
        "id": 276729300,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1648305834
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/silent.20ctfe.20errors/near/276681492\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Always emitting an error when encountering UB seems desirable, even if it happens during selection.</p>\n</blockquote>\n<p>Sure it is <em>desirable</em> but it's also <em>super hard</em> (and slow!) so I don't think we should rely on it. That's very fragile. Like, not even Miri detects all UB, and it already does a lot more work than CTFE does.</p>\n</blockquote>\n<p>I know '^^ we've talked about that before. Replaced \"encountering\" with \"detect\". So if we detect UB we error, but if there's UB we miss nothing happens but it is not a breaking change to detect that UB in the future</p>",
        "id": 276831136,
        "sender_full_name": "lcnr",
        "timestamp": 1648447980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/silent.20ctfe.20errors/near/276728410\">said</a>:</p>\n<blockquote>\n<p>hm, I did not expect that to compile. how is that instance ever selected?</p>\n</blockquote>\n<p>generic parameters have to be constrained by the trait ref in some way, that's not just limited to the self type. As long as you can uniquely identify which impl - and with which generic arguments - is meant when using fully qualified paths <code>&lt;Type as Trait&lt;P0...PN&gt;::Assoc</code> the compiler is able to correctly deal with that impl</p>",
        "id": 276831247,
        "sender_full_name": "lcnr",
        "timestamp": 1648448125
    }
]