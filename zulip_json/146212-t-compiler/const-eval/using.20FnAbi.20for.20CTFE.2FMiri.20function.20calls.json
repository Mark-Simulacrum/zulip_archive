[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I am finally working on porting Miri to use <code>FnAbi</code> like <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has been suggesting for years. My current progress is at <a href=\"https://github.com/RalfJung/rust/tree/fni-abi\">https://github.com/RalfJung/rust/tree/fni-abi</a>. However, I ran into an ICE that I cannot make sense of:</p>\n<div class=\"codehilite\"><pre><span></span><code>---- [ui] ui/const-generics/issues/issue-67739.rs#min stdout ----\n\nerror in revision `min`: Error: expected failure status (Some(1)) but received status Some(101).\nstatus: exit status: 101\ncommand: &quot;/home/r/src/rust/rustc.2/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot; &quot;/home/r/src/rust/rustc.2/src/test/ui/const-generics/issues/issue-67739.rs&quot; &quot;-Zthreads=1&quot; &quot;--target=x86_64-unknown-linux-gnu&quot; &quot;--cfg&quot; &quot;min&quot; &quot;--error-format&quot; &quot;json&quot; &quot;-Ccodegen-units=1&quot; &quot;-Zui-testing&quot; &quot;-Zdeduplicate-diagnostics=no&quot; &quot;-Zemit-future-incompat-report&quot; &quot;--emit&quot; &quot;metadata&quot; &quot;-C&quot; &quot;prefer-dynamic&quot; &quot;--out-dir&quot; &quot;/home/r/src/rust/rustc.2/build/x86_64-unknown-linux-gnu/test/ui/const-generics/issues/issue-67739.min&quot; &quot;-A&quot; &quot;unused&quot; &quot;-Crpath&quot; &quot;-O&quot; &quot;-Cdebuginfo=0&quot; &quot;-Lnative=/home/r/src/rust/rustc.2/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-L&quot; &quot;/home/r/src/rust/rustc.2/build/x86_64-unknown-linux-gnu/test/ui/const-generics/issues/issue-67739.min/auxiliary&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\nerror: internal compiler error: compiler/rustc_traits/src/normalize_erasing_regions.rs:54:32: could not fully normalize `fn() -&gt; usize {std::mem::size_of::&lt;&lt;Self as Trait&gt;::Associated&gt;}`\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;dyn Any&gt;&#39;, compiler/rustc_errors/src/lib.rs:1169:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.59.0-dev running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z threads=1 -Z ui-testing -Z deduplicate-diagnostics=no -Z emit-future-incompat-report -C codegen-units=1 -C prefer-dynamic -C rpath -C debuginfo=0\n\nquery stack during panic:\n#0 [normalize_generic_arg_after_erasing_regions] normalizing `fn() -&gt; usize {core::mem::size_of::&lt;&lt;Self as Trait&gt;::Associated&gt;}`\n#1 [fn_abi_of_instance] computing call ABI of `core::mem::size_of::&lt;&lt;Self as Trait&gt;::Associated&gt;`\nend of query stack\n</code></pre></div>\n<p>The ICE originates in <a href=\"https://github.com/RalfJung/rust/blob/faf552d62c5518c6f3f2f9384549626daa913ce5/compiler/rustc_const_eval/src/interpret/terminator.rs#L95\">this line</a>, which looks very much like the corresponding code in codegen... so I am not sure what I have to do differently here. (Handling intrinsics differently was meant to fix this but didn't, if I get everything else to work I will likely take that back again.)</p>",
        "id": 262934570,
        "sender_full_name": "RalfJ",
        "timestamp": 1638113717
    },
    {
        "content": "<p>Here's the full backtrace: <a href=\"https://pastebin.com/H7Ce6Rdh\">https://pastebin.com/H7Ce6Rdh</a></p>",
        "id": 262934643,
        "sender_full_name": "RalfJ",
        "timestamp": 1638113805
    },
    {
        "content": "<p>also Cc <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> since this involves const generics</p>",
        "id": 262934678,
        "sender_full_name": "RalfJ",
        "timestamp": 1638113873
    },
    {
        "content": "<p>can't look into this until wednesday, but to me this looks like you either have to substitute the generic arguments or you're missing the right param env if you want <code>Self</code> to be generic</p>",
        "id": 262935260,
        "sender_full_name": "lcnr",
        "timestamp": 1638114657
    },
    {
        "content": "<p>you need a bound <code>Self: Trait</code> in the param env in this case</p>",
        "id": 262935267,
        "sender_full_name": "lcnr",
        "timestamp": 1638114671
    },
    {
        "content": "<p>feel free to remind me at the end of this week if you still need help i and forget this</p>",
        "id": 262935288,
        "sender_full_name": "lcnr",
        "timestamp": 1638114702
    },
    {
        "content": "<p>hm, it should be using the param_env from the InterpCx via the <code>HasParamEnv</code> impl.<br>\npossibly <a href=\"https://github.com/RalfJung/rust/blob/faf552d62c5518c6f3f2f9384549626daa913ce5/compiler/rustc_const_eval/src/interpret/terminator.rs#L70-L72\">this code</a> is wrong (I had some trouble there dealing with the <code>Binder</code>) -- though the exact same code already exists in <code>traits.rs</code> so I hoped it would be correct.^^</p>",
        "id": 262937452,
        "sender_full_name": "RalfJ",
        "timestamp": 1638118050
    },
    {
        "content": "<p>it could also be that some of that FnAbi code just is not ready to be called in TooGeneric situations -- situations that <em>do</em> come up in CTFE</p>",
        "id": 262937576,
        "sender_full_name": "RalfJ",
        "timestamp": 1638118235
    },
    {
        "content": "<p>PR is up at <a href=\"https://github.com/rust-lang/rust/pull/91342\">https://github.com/rust-lang/rust/pull/91342</a></p>",
        "id": 262957527,
        "sender_full_name": "RalfJ",
        "timestamp": 1638146929
    }
]