[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span> Which CTFE-related features would you like to see worked on going forward? Here are a few off the top of my head.</p>\n<ul>\n<li><code>const</code> trait methods</li>\n<li>anonymous <code>const</code> blocks</li>\n<li><code>&amp;mut</code> in constants</li>\n<li>heap allocation in constants</li>\n<li>More precise analysis of<code>Drop</code>types in constants (<a href=\"https://github.com/rust-lang/rust/issues/66753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66753\">#66753</a>)</li>\n<li>Formal rules for promotion</li>\n</ul>\n<p>There's also some tasks that don't involve design work like:</p>\n<ul>\n<li>Addressing <a href=\"https://github.com/rust-lang/rust/issues/67191\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67191\">#67191</a></li>\n<li>Improving Miri/CTFE performance</li>\n</ul>\n<p>It would be cool to know what people want to prioritize next year.</p>",
        "id": 183590338,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576530259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> is looking at mut references I believe</p>",
        "id": 183590406,
        "sender_full_name": "oli",
        "timestamp": 1576530324
    },
    {
        "content": "<p>I don't think we can even start on heap without at least an e-RFC</p>",
        "id": 183590439,
        "sender_full_name": "oli",
        "timestamp": 1576530355
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132916\">Christian Poveda</span> is looking at mut references I believe</p>\n</blockquote>\n<p>yes we have a feature gate for that now</p>",
        "id": 183590507,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576530391
    },
    {
        "content": "<p>True, <code>&amp;mut</code> is pretty close, although this is a bit concerning:</p>",
        "id": 183590525,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576530411
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4371a0cf7245a7d235cb2b8809b0bb10\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4371a0cf7245a7d235cb2b8809b0bb10\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4371a0cf7245a7d235cb2b8809b0bb10</a></p>",
        "id": 183590532,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576530420
    },
    {
        "content": "<p>It's probably unsound, so I presume that's what <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> means</p>",
        "id": 183590543,
        "sender_full_name": "oli",
        "timestamp": 1576530430
    },
    {
        "content": "<p>ROFL yea, constants are bad</p>",
        "id": 183590619,
        "sender_full_name": "oli",
        "timestamp": 1576530472
    },
    {
        "content": "<p>The others would all require RFCs, depending on how narrowly we want to address <a href=\"https://github.com/rust-lang/rust/issues/66753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66753\">#66753</a></p>",
        "id": 183590646,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576530480
    },
    {
        "content": "<p>Maybe we need <code>ConstSafe</code> even before heap</p>",
        "id": 183590709,
        "sender_full_name": "oli",
        "timestamp": 1576530485
    },
    {
        "content": "<p>But I recall that <code>const</code> trait methods have had a lot of design work and are  (maybe?) pretty close</p>",
        "id": 183590863,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576530525
    },
    {
        "content": "<p>If I could pick one feature from the list above, it would probably be that one. Even though it's a ton of work and a pretty profound change to the language</p>",
        "id": 183591042,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576530636
    },
    {
        "content": "<p>Yes, I have an RFC and the status is that T-lang discussed it and is basically fine with it being an experimental feature, but I'm waiting for public confirmation of this before doing any work on it. Otherwise an open PR would put pressure on the RFC being handled faster</p>",
        "id": 183591074,
        "sender_full_name": "oli",
        "timestamp": 1576530663
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4371a0cf7245a7d235cb2b8809b0bb10\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4371a0cf7245a7d235cb2b8809b0bb10\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4371a0cf7245a7d235cb2b8809b0bb10</a></p>\n</blockquote>\n<p>I'll take a look at this</p>",
        "id": 183591131,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576530706
    },
    {
        "content": "<p>Maybe we could implement <code>?const Trait</code> first, because that is the behaviour of current trait bounds with <code>const_fn</code> enabled</p>",
        "id": 183591205,
        "sender_full_name": "oli",
        "timestamp": 1576530741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> read the const heap tracking issue</p>",
        "id": 183591251,
        "sender_full_name": "oli",
        "timestamp": 1576530778
    },
    {
        "content": "<p>It has similar problems</p>",
        "id": 183591263,
        "sender_full_name": "oli",
        "timestamp": 1576530785
    },
    {
        "content": "<p>that's funny, I wanted to get involved with const heap :P</p>",
        "id": 183591315,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576530833
    },
    {
        "content": "<p>There's no real difference between <code>Box&lt;T&gt;</code> and <code>&amp;mut T</code> if it's in a global thing</p>",
        "id": 183591495,
        "sender_full_name": "oli",
        "timestamp": 1576530911
    },
    {
        "content": "<p>I think the current RFC process is lacking when it comes to really big changes like <code>const</code> trait methods. It's better for small changes that don't need a lot of experimentation. The process laid out in <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span>' <a href=\"http://smallcultfollowing.com/babysteps/blog/2019/12/03/aic-improving-the-pre-rfc-process/\" target=\"_blank\" title=\"http://smallcultfollowing.com/babysteps/blog/2019/12/03/aic-improving-the-pre-rfc-process/\">blog post</a> would be a much better fit.</p>",
        "id": 183591524,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576530930
    },
    {
        "content": "<p>Ooh new RFC process blog posts. It's been a while</p>",
        "id": 183591627,
        "sender_full_name": "oli",
        "timestamp": 1576530975
    },
    {
        "content": "<p>Can anyone think of an obvious feature/work-item that I've missed?</p>",
        "id": 183591865,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576531126
    },
    {
        "content": "<p>I guess there's always \"pay down technical debt\", which I've been doing a bit of in the const-checking arena.</p>",
        "id": 183591922,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576531169
    },
    {
        "content": "<p>But that isn't very inspiring XD</p>",
        "id": 183592007,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576531207
    },
    {
        "content": "<p>A bit is a bit of an understatement. That's some amazing cleanup duty you've taken up</p>",
        "id": 183592016,
        "sender_full_name": "oli",
        "timestamp": 1576531215
    },
    {
        "content": "<p>yeah code janitoring is underrated</p>",
        "id": 183592035,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576531238
    },
    {
        "content": "<p>I'll think about what cool features are still missing in const eval. I think you covered the big ones. For now I'm going to bed. Oh one thought that I just had was side effects like emitting warnings on purpose or emitting artifacts.</p>",
        "id": 183592129,
        "sender_full_name": "oli",
        "timestamp": 1576531315
    },
    {
        "content": "<p>Also type declarations by const eval emitting a TyLayout equivalent</p>",
        "id": 183592223,
        "sender_full_name": "oli",
        "timestamp": 1576531356
    },
    {
        "content": "<p>So what proc macros did for codegen, const eval could do for type declarations</p>",
        "id": 183592248,
        "sender_full_name": "oli",
        "timestamp": 1576531376
    },
    {
        "content": "<p>Procedural types</p>",
        "id": 183592253,
        "sender_full_name": "oli",
        "timestamp": 1576531380
    },
    {
        "content": "<p>(Including their layout \"obviously\")</p>",
        "id": 183592271,
        "sender_full_name": "oli",
        "timestamp": 1576531396
    },
    {
        "content": "<p>Ok</p>",
        "id": 183592279,
        "sender_full_name": "oli",
        "timestamp": 1576531400
    },
    {
        "content": "<p>Bed</p>",
        "id": 183592282,
        "sender_full_name": "oli",
        "timestamp": 1576531402
    },
    {
        "content": "<p>Really this time</p>",
        "id": 183592284,
        "sender_full_name": "oli",
        "timestamp": 1576531406
    },
    {
        "content": "<p><span aria-label=\"sleeping\" class=\"emoji emoji-1f634\" role=\"img\" title=\"sleeping\">:sleeping:</span></p>",
        "id": 183592299,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1576531421
    },
    {
        "content": "<p>Yeah artifacts would be very cool. Perfect hash functions with no build script. Goodnight! Sorry for nerd sniping.</p>",
        "id": 183592306,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576531425
    },
    {
        "content": "<p>Why do perfect hash functions need artifacts? I thought they were for use inside a program, so all you'd need to do is compute the hash table... oh and the hash function parameters. Or do we need to generate an entire function for performance reasons?</p>",
        "id": 183639430,
        "sender_full_name": "oli",
        "timestamp": 1576582129
    },
    {
        "content": "<p>Maybe we can just fill in associated constants and make a single generic function that is then optimized to the perfect hash function</p>",
        "id": 183639466,
        "sender_full_name": "oli",
        "timestamp": 1576582161
    },
    {
        "content": "<p>/me knows nothing about PHF</p>",
        "id": 183639474,
        "sender_full_name": "oli",
        "timestamp": 1576582169
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 183690418,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576616051
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 183690498,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576616105
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 183690653,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576616203
    },
    {
        "content": "<p>Whoops wrong thread</p>",
        "id": 183691042,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576616442
    },
    {
        "content": "<p>There's some more advanced perfect hash function generators that vary the class of hash function based on the input. You're right that the vast majority wouldn't require artifacts. It was the first thing that popped into my head XD.</p>",
        "id": 183701144,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576623602
    },
    {
        "content": "<p>I might actually try to implement a non-proc-macro PHF generator. Seems kind of fun!</p>",
        "id": 183701224,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576623652
    },
    {
        "content": "<p>You can vary the hash function class by \"indexing\". Implement the different classes by making them traits on arrays. Each class is a different array length. Choose the algorithm via the index</p>",
        "id": 183750758,
        "sender_full_name": "oli",
        "timestamp": 1576676682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> we have a yellow light on implementing the const trait bounds RFC</p>",
        "id": 183884850,
        "sender_full_name": "oli",
        "timestamp": 1576789313
    },
    {
        "content": "<p>Even with the RFC still open, an unstable experiment is now permitted</p>",
        "id": 183884913,
        "sender_full_name": "oli",
        "timestamp": 1576789339
    },
    {
        "content": "<p>Cool! I'm happy to help implement, although it will not touch any code that I'm familiar with. Also I won't have much time until after the holidays. I'm mobile  only for the next few days XD. I'll reread the draft RFC</p>",
        "id": 183885083,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576789501
    },
    {
        "content": "<p>yea no rush, if you want we can make an impl brainstorm meeting</p>",
        "id": 183912698,
        "sender_full_name": "oli",
        "timestamp": 1576823854
    },
    {
        "content": "<p>I have ideas how to get there in small steps, which should also help not requiring you to modify the entire compiler everyhwere</p>",
        "id": 183912705,
        "sender_full_name": "oli",
        "timestamp": 1576823875
    },
    {
        "content": "<p>Sounds good. I'll be back at full availability after Christmas on the 30th. Anytime after that would be fine for a meeting.</p>",
        "id": 183913746,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576825739
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> ok, I'm not sure how available I am between 30th and 7th</p>",
        "id": 183913949,
        "sender_full_name": "oli",
        "timestamp": 1576826129
    },
    {
        "content": "<p>we'll find sth</p>",
        "id": 183913950,
        "sender_full_name": "oli",
        "timestamp": 1576826134
    },
    {
        "content": "<p>I'm happy to review the parser changes <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 184200028,
        "sender_full_name": "centril",
        "timestamp": 1577244122
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I  implemented a <a href=\"https://github.com/ecstatic-morse/const-phf/blob/1a8768ea97d297b47873b8e753779e521df21356/src/lib.rs#L311\" target=\"_blank\" title=\"https://github.com/ecstatic-morse/const-phf/blob/1a8768ea97d297b47873b8e753779e521df21356/src/lib.rs#L311\">perfect hash function generator</a> that runs entirely during const-eval. It's not very robust (it's a heuristically guided random search loosely based on gperf), but my intention was to get an idea of the most painful parts of writing complex code in a const context.</p>",
        "id": 184700516,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578017449
    },
    {
        "content": "<p>(computing a PHF for the set of rust keywords takes around a second and completes just after the loop detector is triggered)</p>",
        "id": 184700569,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578017538
    },
    {
        "content": "<p>The experience reaffirmed my belief that calling trait methods in const contexts is the next major roadblock. Writing code without for-loops or range-based/custom indexing is not fun.</p>",
        "id": 184700633,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578017651
    },
    {
        "content": "<p>I ended up using a stack-only dynamic array a lot.  Constification of <code>ptr::write</code> and <code>MaybeUninit</code> would allow pretty much all of <a href=\"https://docs.rs/staticvec/0.7.7/staticvec/\" target=\"_blank\" title=\"https://docs.rs/staticvec/0.7.7/staticvec/\">staticvec</a> to be <code>const</code> if const trait impls were implemented. I ended up rolling my own version that required <code>T: Copy</code>, needed an initial value and still had UB during initialization.</p>",
        "id": 184700864,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578018098
    },
    {
        "content": "<p>The other concern I have is the lack of <code>unwrap</code>/<code>expect</code>. I think it is likely that library authors will resort to extensions like <code>fn unwrap&lt;T: Copy&gt;(x: Option&lt;T&gt;) -&gt; T</code>. As you pointed out on <a href=\"https://github.com/rust-lang/rust/issues/66753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66753\">#66753</a>, I doubt there will ever be a way to implement <code>const Option::&lt;T&gt;::unwrap</code>  for all <code>T</code>without awful hacks.</p>",
        "id": 184701005,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578018301
    },
    {
        "content": "<p>In fact, the need for these two methods was so acute that I am now in favor of doing a <code>mem::forget</code>-style hack to make them <code>const fn</code>  on  <code>Option</code> and <code>Result</code>. Others will no doubt disagree.</p>",
        "id": 184701146,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578018510
    },
    {
        "content": "<p>The <code>?</code> operator would also be desirable, although I did not run into this quite as much, and it would require the same hacks as for <code>unwrap</code> as well as const trait impls.</p>",
        "id": 184701517,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578019143
    }
]