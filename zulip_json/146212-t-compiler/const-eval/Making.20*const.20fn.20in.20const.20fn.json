[
    {
        "content": "<p>This particularly <code>mem::transmute(&amp;T::evacuate)</code> and friends feels horribly wrong.<br>\nI imagine it's undefined?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">GcTypeInfo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">evacuate_fn</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Handlers</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">transitive_gc_types_fn</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Tti</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// `direct_gc_types(&amp;mut HashMap&lt;GcTypeInfo, ([offset: u8], bits: u8)&gt;, starting_offset: u8 = 0)`</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">direct_gc_types_fn</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">HashMap</span><span class=\"o\">&lt;</span><span class=\"n\">GcTypeInfo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">TypeRow</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">needs_drop</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">size</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">align</span>: <span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">GcTypeInfo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Condemned</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">evacuate_fn</span>: <span class=\"nc\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">T</span>::<span class=\"n\">evacuate</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">transitive_gc_types_fn</span>: <span class=\"nc\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">T</span>::<span class=\"n\">transitive_gc_types</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">direct_gc_types_fn</span>: <span class=\"nc\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">T</span>::<span class=\"n\">direct_gc_types</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">needs_drop</span>: <span class=\"nc\">mem</span>::<span class=\"n\">needs_drop</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">size</span>: <span class=\"nc\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">align</span>: <span class=\"nc\">mem</span>::<span class=\"n\">align_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 201558533,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1592783759
    },
    {
        "content": "<p>I don't think so -- not until you actually try calling a non-const fn during CTFE, at which point you will get an error.</p>",
        "id": 201574391,
        "sender_full_name": "RalfJ",
        "timestamp": 1592810700
    },
    {
        "content": "<p>oh wait</p>",
        "id": 201574407,
        "sender_full_name": "RalfJ",
        "timestamp": 1592810717
    },
    {
        "content": "<p>I think I misread</p>",
        "id": 201574411,
        "sender_full_name": "RalfJ",
        "timestamp": 1592810721
    },
    {
        "content": "<p>this is a  const raw pointer to a fn pointer</p>",
        "id": 201574419,
        "sender_full_name": "RalfJ",
        "timestamp": 1592810728
    },
    {
        "content": "<p>so there is a double indirection.<br>\nI mean, creating such a thing is not undefined, but what do you want to <em>do</em> with it?</p>",
        "id": 201574448,
        "sender_full_name": "RalfJ",
        "timestamp": 1592810749
    },
    {
        "content": "<p>and why dont you just <code>&amp;T::evacuate as *const _</code>?</p>",
        "id": 201574513,
        "sender_full_name": "RalfJ",
        "timestamp": 1592810777
    },
    {
        "content": "<p>The function pointers are only called at run time. I use transmute as a convenience to turn <code>&amp;T</code> arguments into <code>*const u8</code></p>",
        "id": 201611814,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1592835907
    },
    {
        "content": "<p>oh. you likely want <code>T::evacuate as fn() as *const u8</code>, because that gives you a pointer to the function, instead of a pointer to the ZST of the function, which idk what it actually is</p>",
        "id": 201619937,
        "sender_full_name": "oli",
        "timestamp": 1592839532
    },
    {
        "content": "<p>oh yea, <code>&amp;some_fn</code> gives you a pointer to the ZST, so that's some global anonymous static XD: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2cf8304753334f7678b46dd5c3719b21\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=2cf8304753334f7678b46dd5c3719b21</a></p>",
        "id": 201620263,
        "sender_full_name": "oli",
        "timestamp": 1592839668
    },
    {
        "content": "<p>Thanks, I don't know why, but I could have sworn <code>fn(&amp;u8, u8, u8, Range&lt;usize&gt;, &amp;mut Handlers)</code> gave an error.</p>",
        "id": 201635409,
        "sender_full_name": "Avi Dessauer",
        "timestamp": 1592846591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209924\">Avi Dessauer</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Making.20*const.20fn.20in.20const.20fn/near/201611814\">said</a>:</p>\n<blockquote>\n<p>The function pointers are only called at run time. I use transmute as a convenience to turn <code>&amp;T</code> arguments into <code>*const u8</code></p>\n</blockquote>\n<p>you have a <em>pointer to</em> a function pointer though. (EDIT: or to something even stranger, like the ZST type associated with each function... \"function handle\"? I dint think we have a good name for it)</p>",
        "id": 201696234,
        "sender_full_name": "RalfJ",
        "timestamp": 1592898513
    },
    {
        "content": "<p>you may actually get a pointer to the local on the stack I think</p>",
        "id": 201697784,
        "sender_full_name": "oli",
        "timestamp": 1592899717
    },
    {
        "content": "<blockquote>\n<p>we have a good name for it</p>\n</blockquote>\n<p>function pointer pointer (repeat as needed)</p>",
        "id": 201778758,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592944335
    },
    {
        "content": "<p>function pointer^2</p>",
        "id": 201778839,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592944381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I dont meen ptrs to fn ptrs though</p>",
        "id": 201828067,
        "sender_full_name": "RalfJ",
        "timestamp": 1592991460
    },
    {
        "content": "<p>I mean the type of <code>let f = function;</code> in Rust</p>",
        "id": 201828082,
        "sender_full_name": "RalfJ",
        "timestamp": 1592991472
    },
    {
        "content": "<p>which is a ZST that uniquenely identifies the function</p>",
        "id": 201828132,
        "sender_full_name": "RalfJ",
        "timestamp": 1592991484
    },
    {
        "content": "<p>in type theory we'd call it a singleton type</p>",
        "id": 201828140,
        "sender_full_name": "RalfJ",
        "timestamp": 1592991493
    }
]