[
    {
        "content": "<p>I was wondering if anyone has discussed the notion of annotating trait methods (on a trait definition or implementation) so that we can run them at compile-time. I often just want to use <code>Default::default()</code> instead of a specially-named constant, but also eventually the <code>std::convert::*</code> traits, <code>Iterator</code>,  and other often-used traits could support <code>const</code>.</p>\n<p>If this is the wrong place to post, please let me know where I should direct my question. Thanks.</p>",
        "id": 247005158,
        "sender_full_name": "Brandon H. Gomes",
        "timestamp": 1627060175
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/67792\">https://github.com/rust-lang/rust/issues/67792</a> is the issue for the <em>not yet accepted</em> RFC related to having a const version of a trait impl.</p>",
        "id": 247023477,
        "sender_full_name": "Lokathor",
        "timestamp": 1627069687
    },
    {
        "content": "<p>ok, great thanks</p>",
        "id": 247023708,
        "sender_full_name": "Brandon H. Gomes",
        "timestamp": 1627069820
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"407224\">Brandon H. Gomes</span> has marked this topic as resolved.</p>",
        "id": 247023757,
        "sender_full_name": "Notification Bot",
        "timestamp": 1627069854
    }
]