[
    {
        "content": "<p>While workin on <a href=\"https://github.com/rust-lang/nomicon/pull/221\">https://github.com/rust-lang/nomicon/pull/221</a> and discussion in <a href=\"https://github.com/rust-lang/rust/issues/51909\">https://github.com/rust-lang/rust/issues/51909</a> I've reached the point where I don't know anymore what const safety even is. As far as I can tell we have literally just the situation where some safe code can cause a non-panic CTFE abort, which is nearly indistinguishable from a panic CTFE abort. Ever since we resolved to not add more features to implicit promotion, I don't see why anything here would ever be a problem</p>",
        "id": 201481835,
        "sender_full_name": "oli",
        "timestamp": 1592666169
    },
    {
        "content": "<p>Like... I realize it's not great if we have more post-monomorphization errors, but it's not unsound to have them</p>",
        "id": 201481918,
        "sender_full_name": "oli",
        "timestamp": 1592666327
    },
    {
        "content": "<p>For constant items we check the final values, for const generics we have even more restrictive plans</p>",
        "id": 201481928,
        "sender_full_name": "oli",
        "timestamp": 1592666354
    },
    {
        "content": "<p>one concern here is defining what one can in general expect from a safe const fn</p>",
        "id": 201483265,
        "sender_full_name": "RalfJ",
        "timestamp": 1592668347
    },
    {
        "content": "<p>from a safe fn we all agree you can expect \"no UB\". from a safe const fn I think we should be able to expect additionally \"no CTFE-unsupported operations\".</p>",
        "id": 201483278,
        "sender_full_name": "RalfJ",
        "timestamp": 1592668369
    },
    {
        "content": "<p>it's a nice feature to have, but how does it relate to soundness? I always consider <code>const fn</code> to be a convenient way to write the same things that you could have written with a bunch of generic traits and associated constants. And whatever you muck up there will just cause post-monomorphization errors. Uncool, but not inherently problematic. So if we mirror this to <code>const fn</code>. Sure, there'll be errors at compile-time that have nothing to do with the logic written in the program, but with (inherent) limitations of CTFE.</p>",
        "id": 201483799,
        "sender_full_name": "oli",
        "timestamp": 1592668933
    },
    {
        "content": "<p>I guess if we generally lifted const-specific restrictions within <code>unsafe</code>, this discussion makes more sense. It's not just going to hit CTFE limits to do pointers comparisons, but also if you call non-const fn, call function pointers that point to anything but <code>const fn</code>s, write to a <code>static</code>, read from a <code>static</code>s mutable part, ...</p>",
        "id": 201484081,
        "sender_full_name": "oli",
        "timestamp": 1592669241
    },
    {
        "content": "<p>I'm not saying we should lift those, but any of these would require the same discussion</p>",
        "id": 201484099,
        "sender_full_name": "oli",
        "timestamp": 1592669265
    },
    {
        "content": "<p>just like dereferencing a raw pointer is unsafe at runtime because the pointer could point anywhere, calling a function pointer in const eval is unsafe, because it could point anywhere</p>",
        "id": 201484191,
        "sender_full_name": "oli",
        "timestamp": 1592669345
    },
    {
        "content": "<p>it's <em>not defined</em> (even if the impl does something specific, like error) what happens when you multiply two <code>usize</code> that were derived from pointers, and not defined is like the definition of UB</p>",
        "id": 201484288,
        "sender_full_name": "oli",
        "timestamp": 1592669441
    },
    {
        "content": "<p>or am I going off in the wrong direction again?</p>",
        "id": 201484300,
        "sender_full_name": "oli",
        "timestamp": 1592669459
    },
    {
        "content": "<p>(I'm going to use this discussion here to write up something in <a href=\"https://github.com/rust-lang/rust/issues/51909\">#51909</a> )</p>",
        "id": 201484312,
        "sender_full_name": "oli",
        "timestamp": 1592669476
    },
    {
        "content": "<p>Isn't a compile time evaluation error <em>sometimes</em> undetectable UB and <em>sometimes</em> a detectable but impossible operation? The latter seems more like a panic, and it's safe to panic.</p>",
        "id": 201491458,
        "sender_full_name": "Lokathor",
        "timestamp": 1592679124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const.20safety/near/201484288\">said</a>:</p>\n<blockquote>\n<p>it's <em>not defined</em> (even if the impl does something specific, like error) what happens when you multiply two <code>usize</code> that were derived from pointers, and not defined is like the definition of UB</p>\n</blockquote>\n<p>Undefined Behavior is, confusingly, not about being \"not defined\". See <a href=\"https://rust-lang.github.io/unsafe-code-guidelines/glossary.html#undefined-behavior\">e.g. this definition</a>.</p>",
        "id": 201526486,
        "sender_full_name": "RalfJ",
        "timestamp": 1592732035
    },
    {
        "content": "<p>(It used to be about that back in the 80s or so, but C compiler devs have evolved the term to mean something else entirely.)</p>",
        "id": 201526534,
        "sender_full_name": "RalfJ",
        "timestamp": 1592732058
    },
    {
        "content": "<p>CTFE will never cause \"UB\" in the sense that the host compiler has UB and deletes your source files or so... and it is not compiled to anything so there's no UB due to that either. I guess one question here is whether want to leave room for optimizing MIR before CTFE, or compiling it to a JITable bytecode, or so?</p>",
        "id": 201526561,
        "sender_full_name": "RalfJ",
        "timestamp": 1592732137
    },
    {
        "content": "<p>we could make CTFE misbehavior \"unspecified behavior\". that means we should list what the possible behaviors are, which I guess is \"const-eval will return some arbitrary thing and leave arbitrary stuff in the memory that gets interned\". but the compiler won't crash or eat your kittens.</p>",
        "id": 201526622,
        "sender_full_name": "RalfJ",
        "timestamp": 1592732226
    },
    {
        "content": "<p>(this means that if we JIT it needs to sandbox or boundscheck or so)</p>",
        "id": 201526629,
        "sender_full_name": "RalfJ",
        "timestamp": 1592732256
    },
    {
        "content": "<p>I wrote something: <a href=\"https://github.com/rust-lang/rust/issues/51909#issuecomment-647643036\">https://github.com/rust-lang/rust/issues/51909#issuecomment-647643036</a></p>",
        "id": 201631458,
        "sender_full_name": "oli",
        "timestamp": 1592844665
    }
]