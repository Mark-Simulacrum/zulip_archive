[
    {
        "content": "<p>While reading <a href=\"https://github.com/rust-lang/rust/issues/49146#issuecomment-616301045\">https://github.com/rust-lang/rust/issues/49146#issuecomment-616301045</a> and issues like <a href=\"https://github.com/rust-lang/rust/issues/66753\">https://github.com/rust-lang/rust/issues/66753</a> it occurred to me that <code>const fn</code> requires some very nontrivial static analysis, and because the properties in question are in general undecidable we will never be entirely happy with what is accepted and what isn't. But the story of the borrow checker is basically the same, and there we have an alternative: <code>unsafe</code>. So where is <code>unsafe const fn</code>? That is, it should be possible to assert that a function is valid in const context and will not trip up CTFE after monomorphization, even though the current incarnation of the static analysis cannot prove this.</p>",
        "id": 212386087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601961790
    },
    {
        "content": "<p>(The terminology <code>unsafe const fn</code> is not the best here, as that already means something, namely a function which is unsafe and a <code>const fn</code>. I really mean <code>(unsafe const) fn</code>, i.e. the fact that this fn is const is asserted by the programmer.)</p>",
        "id": 212386213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601961987
    },
    {
        "content": "<p>It's also arguably not even unsafe, since any errors will still be caught at compile time, but it might be only after compiling a downstream crate.</p>",
        "id": 212386317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601962137
    },
    {
        "content": "<p>We've discussed this before, and I think we should be able to do everything with my proposal in <a href=\"https://github.com/rust-lang/const-eval/issues/7#issuecomment-576243335\">https://github.com/rust-lang/const-eval/issues/7#issuecomment-576243335</a></p>",
        "id": 212388487,
        "sender_full_name": "oli",
        "timestamp": 1601965020
    },
    {
        "content": "<p>Thanks for the pointer, that's an interesting primitive. (It's not clear to me if you are asserting this, but:) I don't think it's complete for all the things that <code>unsafe const</code> could do. For example you could have a function which is <em>in fact</em> const under all possible ways to call it, even though it contains non-const-safe code in it, maybe because of language rules (e.g. drop calls), which will not be executed.</p>",
        "id": 212390747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601967514
    },
    {
        "content": "<p>I suppose your claim is that if we are in a const-only context (as we would be if you are writing the const part of a selection) then it's always possible to write the code such that any const-unsafe code path is replaced with <code>unreachable!()</code>? (Then again perhaps even <code>unreachable!()</code> is const unsafe.)</p>",
        "id": 212391552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601968252
    },
    {
        "content": "<p><code>unreachable!()</code> is not const unsafe, in fact, it works with just a single feature gate whose sole blocking issue is that we haven't finished the discussion on the diagnostic message <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 212397329,
        "sender_full_name": "oli",
        "timestamp": 1601972463
    },
    {
        "content": "<p>Yes, my assertion is that if the code is unreachable, then it should be marked as such. Also you can always work around drop impls missing by invoking <code>mem::forget</code></p>",
        "id": 212397369,
        "sender_full_name": "oli",
        "timestamp": 1601972507
    },
    {
        "content": "<p>Basically the reason I don't want a feature like you're describing it (essentially C++'s <code>constexpr</code>) is that the implementation of  the static analysis permitting such a feature is inherently incompatible with the static checks that we have for <code>const fn</code>, because our checks are not happening on a syntactical basis, but on the MIR, which is a control flow graph disconnected from the original syntax. unsafety checks do the same thing, but it works for them, because there's a whole system built around unsafety that handles this. I don't think the small wins in expressiveness are worth another (orthogonal) safety analysis, if there is a trivial alternative like the one I proposed</p>",
        "id": 212397691,
        "sender_full_name": "oli",
        "timestamp": 1601972727
    },
    {
        "content": "<p>That said, we have the feature you are asking for under the perma-forever-unstable feature gate <code>-Zunleash-the-miri-inside-of-you</code></p>",
        "id": 212397813,
        "sender_full_name": "oli",
        "timestamp": 1601972798
    },
    {
        "content": "<p>But that enables this for all constants and <code>const fn</code> within the crate being compiled and will absolutely void your warranty <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span></p>",
        "id": 212397882,
        "sender_full_name": "oli",
        "timestamp": 1601972852
    }
]