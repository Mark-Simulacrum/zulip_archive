[
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang/rust/issues/70899\">#70899</a> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <a href=\"https://github.com/rust-lang/rust/issues/70889#issuecomment-611074561\">said</a></p>\n<blockquote>\n<p>Also, why is sharing unobservable, assuming CTFE allows raw ptr comparisons eventually?</p>\n</blockquote>",
        "id": 277128429,
        "sender_full_name": "lcnr",
        "timestamp": 1648639515
    },
    {
        "content": "<p>to my knowledge we don't intend to ever allow CTFE to make raw ptr comparisions</p>",
        "id": 277128579,
        "sender_full_name": "lcnr",
        "timestamp": 1648639594
    },
    {
        "content": "<p>is that correct?</p>",
        "id": 277128584,
        "sender_full_name": "lcnr",
        "timestamp": 1648639597
    },
    {
        "content": "<p>comparing references during CTFE  - which I assume would be possible if we can compare raw pointers -  will prevent const generics from ever using them in const parameter types</p>",
        "id": 277128704,
        "sender_full_name": "lcnr",
        "timestamp": 1648639671
    },
    {
        "content": "<p>from <a href=\"https://github.com/rust-lang/project-const-generics/issues/29\">https://github.com/rust-lang/project-const-generics/issues/29</a></p>\n<blockquote>\n<p>Structural equality describes what is necessary for two constants to be considered equal.<br>\nThe lower bound is that we at least consider constants equal to itself, while we must not consider two constants to be equal if their differences can be observed in any way during CTFE. Types for which this cannot be guaranteed must not be used as const parameter types.</p>\n</blockquote>\n<p>which is my current perspective on structural equality when it comes to const generics.</p>",
        "id": 277128801,
        "sender_full_name": "lcnr",
        "timestamp": 1648639708
    },
    {
        "content": "<p>The issue number this thread references is wrong</p>",
        "id": 277128992,
        "sender_full_name": "oli",
        "timestamp": 1648639812
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/Le--WnCDpGW4K2sykkNx0Q62/Screenshot-from-2022-03-30-13-30-48.png\">Screenshot-from-2022-03-30-13-30-48.png</a> no</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/Le--WnCDpGW4K2sykkNx0Q62/Screenshot-from-2022-03-30-13-30-48.png\" title=\"Screenshot-from-2022-03-30-13-30-48.png\"><img src=\"/user_uploads/4715/Le--WnCDpGW4K2sykkNx0Q62/Screenshot-from-2022-03-30-13-30-48.png\"></a></div>",
        "id": 277129046,
        "sender_full_name": "lcnr",
        "timestamp": 1648639859
    },
    {
        "content": "<p>ah</p>",
        "id": 277129069,
        "sender_full_name": "lcnr",
        "timestamp": 1648639872
    },
    {
        "content": "<p>reading is hard :(</p>",
        "id": 277129108,
        "sender_full_name": "lcnr",
        "timestamp": 1648639903
    },
    {
        "content": "<p>though that there were both a pr and an issue with the same id</p>",
        "id": 277129186,
        "sender_full_name": "lcnr",
        "timestamp": 1648639932
    },
    {
        "content": "<p>which was really surprising (and luckily not the case) ^^</p>",
        "id": 277129198,
        "sender_full_name": "lcnr",
        "timestamp": 1648639944
    },
    {
        "content": "<p>why would CTFE allowing raw pointer comparisons affect const generics?</p>",
        "id": 277131179,
        "sender_full_name": "oli",
        "timestamp": 1648641096
    },
    {
        "content": "<p>if you have <code>&amp;str</code> as a const parameter type</p>",
        "id": 277131261,
        "sender_full_name": "lcnr",
        "timestamp": 1648641125
    },
    {
        "content": "<p>and ctfe can compare the pointer address for values of type <code>&amp;str</code></p>",
        "id": 277131313,
        "sender_full_name": "lcnr",
        "timestamp": 1648641160
    },
    {
        "content": "<p>then we can go:</p>",
        "id": 277131332,
        "sender_full_name": "lcnr",
        "timestamp": 1648641175
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">STR</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">STR</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">WOW</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">STR</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277131399,
        "sender_full_name": "lcnr",
        "timestamp": 1648641212
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.2370889.20raw.20ptrs.20CTFE/near/277131399\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">STR</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">MyType</span><span class=\"o\">&lt;</span><span class=\"n\">STR</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">WOW</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">STR</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">str</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>if <code>WOW</code> flows back into the type system this is wrong if you consider 2 <code>MyType</code> equal even though their <code>STR</code> has a different address</p>",
        "id": 277131583,
        "sender_full_name": "lcnr",
        "timestamp": 1648641296
    },
    {
        "content": "<p>or stuff like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">VALUE</span>: <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">VALUE</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ASSOC</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">VALUE</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">VALUE</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 277131858,
        "sender_full_name": "lcnr",
        "timestamp": 1648641443
    },
    {
        "content": "<p>I guess that it's fine as long as all points where the type system could observe constants we convert them to valtrees and when going back to ctfe we make each reference a new unique allocation</p>",
        "id": 277132002,
        "sender_full_name": "lcnr",
        "timestamp": 1648641519
    },
    {
        "content": "<p>but ideally i would want to avoid that</p>",
        "id": 277132013,
        "sender_full_name": "lcnr",
        "timestamp": 1648641525
    },
    {
        "content": "<p>side note: conversion to usize will never be possible, but your argument still applies for <code>*const str</code></p>",
        "id": 277137209,
        "sender_full_name": "oli",
        "timestamp": 1648643883
    },
    {
        "content": "<p>We have <code>guaranteed_eq</code> and <code>guaranteed_ne</code> which are the only ways that you can compare pointers in CTFE, and these are very limited by nature</p>",
        "id": 277137281,
        "sender_full_name": "oli",
        "timestamp": 1648643918
    },
    {
        "content": "<p>basically they are the same trickery we have for <code>align_to</code>: we could choose a default, and your logic must still be correct</p>",
        "id": 277137325,
        "sender_full_name": "oli",
        "timestamp": 1648643946
    },
    {
        "content": "<p>technically both <code>guaranteed_*</code> could return <code>false</code> in CTFE without looking at the pointers</p>",
        "id": 277137363,
        "sender_full_name": "oli",
        "timestamp": 1648643971
    },
    {
        "content": "<p>any more precise ways of comparisons are... broken/impossible I believe</p>",
        "id": 277137468,
        "sender_full_name": "oli",
        "timestamp": 1648644012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.2370889.20raw.20ptrs.20CTFE/near/277128579\">said</a>:</p>\n<blockquote>\n<p>to my knowledge we don't intend to ever allow CTFE to make raw ptr comparisions</p>\n</blockquote>\n<p>we already have <code>ptr_guaranteed_{eq,ne}</code> so we already (unstably) allow some of this<br>\nEDIT: Ah oli wrote this. :D</p>",
        "id": 277316782,
        "sender_full_name": "RalfJ",
        "timestamp": 1648748909
    },
    {
        "content": "<p>also note that CTFE can 'tell the difference' between <code>transmute(0u32): (u16, u8)</code> and <code>(0u16, 0u8)</code>, at least in the sense of having code that is UB for one of them but fine for the other. (this came up in some prior discussion.)</p>",
        "id": 277317107,
        "sender_full_name": "RalfJ",
        "timestamp": 1648749059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/.2370889.20raw.20ptrs.20CTFE/near/277317107\">said</a>:</p>\n<blockquote>\n<p>also note that CTFE can 'tell the difference' between <code>transmute(0u32): (u16, u8)</code> and <code>(0u16, 0u8)</code>, at least in the sense of having code that is UB for one of them but fine for the other. (this came up in some prior discussion.)</p>\n</blockquote>\n<p>jup, also in <a href=\"https://github.com/rust-lang/project-const-generics/issues/20\">project-const-generics#20</a></p>",
        "id": 277376233,
        "sender_full_name": "lcnr",
        "timestamp": 1648795360
    },
    {
        "content": "<p>though for that we can actually sensibly stop people from doing unsound things by erasing these padding bytes in the valtrees</p>",
        "id": 277376249,
        "sender_full_name": "lcnr",
        "timestamp": 1648795399
    }
]