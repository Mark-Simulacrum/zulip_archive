[
    {
        "content": "<p><code>core::hint::unreachable_unchecked()</code> is detected by MIRI if actually hit, correct? If so, is there any reason this can't be stabilized as <code>const fn</code>? Just asking to make sure I don't submit a PR when there's something obvious.</p>",
        "id": 238085685,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1620620946
    },
    {
        "content": "<p>Probably would be a good idea to wait until <code>panic!</code> is const-usable on stable before const-stabilizing <code>unreachable_unchecked</code></p>",
        "id": 238089141,
        "sender_full_name": "matt1992",
        "timestamp": 1620624585
    },
    {
        "content": "<p>Why's that?</p>",
        "id": 238089199,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1620624618
    },
    {
        "content": "<p>I guess so that ppl don't abuse it as a panic function without a message?</p>",
        "id": 238109590,
        "sender_full_name": "oli",
        "timestamp": 1620638061
    },
    {
        "content": "<blockquote>\n<p>as a panic function without a message?</p>\n</blockquote>\n<p>And with UB if called at runtime.</p>",
        "id": 238109716,
        "sender_full_name": "bjorn3",
        "timestamp": 1620638147
    },
    {
        "content": "<p><code>std::hint::unreachable_unchecked()</code> does not panic I believe (only its counterpart <code>std::unreachable!()</code> panics).</p>",
        "id": 238112075,
        "sender_full_name": "Pointerbender",
        "timestamp": 1620639362
    },
    {
        "content": "<p>Yeah, I suppose avoiding a possible footgun is a good idea. Thankfully const panic seems close.</p>",
        "id": 238112787,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1620639717
    },
    {
        "content": "<p>And <span class=\"user-mention\" data-user-id=\"400735\">@Pointerbender</span> this is for CTFE, where MIRI can detect UB and error out</p>",
        "id": 238112872,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1620639745
    },
    {
        "content": "<p>Ah <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 238115503,
        "sender_full_name": "Pointerbender",
        "timestamp": 1620641130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245610\">Jacob Pratt</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/unreachable_unchecked/near/238085685\">said</a>:</p>\n<blockquote>\n<p><code>core::hint::unreachable_unchecked()</code> is detected by MIRI if actually hit, correct? If so, is there any reason this can't be stabilized as <code>const fn</code>? Just asking to make sure I don't submit a PR when there's something obvious.</p>\n</blockquote>\n<p>you seem to be confusing <a href=\"https://github.com/rust-lang/miri/\">Miri-the-tool</a> with the CTFE engine. :) They share a lot of code but they are not one-and-the-same.</p>",
        "id": 238140827,
        "sender_full_name": "RalfJ",
        "timestamp": 1620653001
    },
    {
        "content": "<p>CTFE detects some UB but less than Miri, for various reasons.</p>",
        "id": 238140842,
        "sender_full_name": "RalfJ",
        "timestamp": 1620653013
    },
    {
        "content": "<p>Now that <a href=\"https://github.com/rust-lang/rfcs/pull/3016\">https://github.com/rust-lang/rfcs/pull/3016</a> landed I agree we could const-stabilize <code>unreachable_unchecked</code>, but I also agree it seems wise to const-stabilize panics first.</p>",
        "id": 238141309,
        "sender_full_name": "RalfJ",
        "timestamp": 1620653211
    },
    {
        "content": "<p>Huh, did not know they were slightly different. Doesn't affect my question but nice to know regardless!</p>\n<p>I guess I'll hold off on a stabilization PR for that until const panics is stabilized on nightly (hopefully soon!). Thanks for the info <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 238198410,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1620674913
    }
]