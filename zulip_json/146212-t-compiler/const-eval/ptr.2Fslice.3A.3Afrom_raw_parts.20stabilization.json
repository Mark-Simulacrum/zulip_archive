[
    {
        "content": "<p>hey y'all.  I'm an interested party with regards to const-ifying <code>std::ptr/core::from_raw_parts[_mut]</code>.  I posted on <a href=\"https://github.com/rust-lang/rust/issues/67456\">https://github.com/rust-lang/rust/issues/67456</a> to understand if there was anything meaningful left to do in order to push these to stabilization, as they've been available as <code>const</code> behind feature flags for a while now... and a user suggested that the non-mut versions were probably ready for stabilization, modulo an FCP from the const eval WG.</p>\n<p>since I'm not actually familiar with the procedural steps, does this sound right? it's not clear if the act of stabilizing itself would fall under the major change process and thus need all of the related procedural steps to occur first.</p>",
        "id": 275233196,
        "sender_full_name": "Toby Lawrence",
        "timestamp": 1647263559
    },
    {
        "content": "<p>The procedure here is to open a stabilization PR, and then we mark the PR so that the libs-API team picks it up and starts an FCP. This seems like a rather uncontroversial change</p>",
        "id": 275238026,
        "sender_full_name": "oli",
        "timestamp": 1647265958
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> sounds good, thanks for pointing me in the right direction <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 275240089,
        "sender_full_name": "Toby Lawrence",
        "timestamp": 1647266765
    },
    {
        "content": "<p>yeah stabilizing the non-mut version seems fine :)</p>",
        "id": 275535574,
        "sender_full_name": "RalfJ",
        "timestamp": 1647447257
    }
]