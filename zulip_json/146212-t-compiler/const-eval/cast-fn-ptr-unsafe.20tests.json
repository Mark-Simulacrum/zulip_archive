[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I don' get <a href=\"https://github.com/solson/miri/blob/master/tests/compile-fail/cast_fn_ptr_unsafe.rs\" target=\"_blank\" title=\"https://github.com/solson/miri/blob/master/tests/compile-fail/cast_fn_ptr_unsafe.rs\">https://github.com/solson/miri/blob/master/tests/compile-fail/cast_fn_ptr_unsafe.rs</a> and <a href=\"https://github.com/solson/miri/blob/master/tests/compile-fail/cast_fn_ptr_unsafe2.rs\" target=\"_blank\" title=\"https://github.com/solson/miri/blob/master/tests/compile-fail/cast_fn_ptr_unsafe2.rs\">https://github.com/solson/miri/blob/master/tests/compile-fail/cast_fn_ptr_unsafe2.rs</a></p>",
        "id": 147758530,
        "sender_full_name": "RalfJ",
        "timestamp": 1542303127
    },
    {
        "content": "<p>the comment doesn't even match what the test does</p>",
        "id": 147758534,
        "sender_full_name": "RalfJ",
        "timestamp": 1542303134
    },
    {
        "content": "<p>rustc <em>does</em> allow casting <code>fn()</code> to <code>unsafe fn()</code></p>",
        "id": 147758544,
        "sender_full_name": "RalfJ",
        "timestamp": 1542303147
    },
    {
        "content": "<p>and indeed why wouldn't it?</p>",
        "id": 147758549,
        "sender_full_name": "RalfJ",
        "timestamp": 1542303152
    },
    {
        "content": "<p>my inclination is to just remove these two tests. we got tons of tests for what happens when you transmute a fn ptr and call a fn with the wrong signature. I do not know what these two add.</p>",
        "id": 147759497,
        "sender_full_name": "RalfJ",
        "timestamp": 1542304162
    },
    {
        "content": "<p>Seems you added them with <a href=\"https://github.com/solson/miri/commit/00eb198a82376eeb608c32e6d4252743f6dcfc87\" target=\"_blank\" title=\"https://github.com/solson/miri/commit/00eb198a82376eeb608c32e6d4252743f6dcfc87\">https://github.com/solson/miri/commit/00eb198a82376eeb608c32e6d4252743f6dcfc87</a> though sh probably there was a reason</p>",
        "id": 147759588,
        "sender_full_name": "RalfJ",
        "timestamp": 1542304215
    },
    {
        "content": "<p>we want to prevent calling an <code>unsafe fn</code> via a <code>fn</code> pointer</p>",
        "id": 147800596,
        "sender_full_name": "oli",
        "timestamp": 1542352356
    },
    {
        "content": "<p>feel free to remove them, we do need to trust the type system</p>",
        "id": 147800618,
        "sender_full_name": "oli",
        "timestamp": 1542352419
    },
    {
        "content": "<blockquote>\n<p>we want to prevent calling an <code>unsafe fn</code> via a <code>fn</code> pointer</p>\n</blockquote>\n<p>Do we? I can transmute one to the other and then call it. And I do not see a good way -- nor a good reason -- to disallow this.</p>",
        "id": 147801880,
        "sender_full_name": "RalfJ",
        "timestamp": 1542354560
    },
    {
        "content": "<p>Or do you mean \"in safe code\"? That is a type system matter, miri shouldn't (and in many cases can't) care.</p>",
        "id": 147801886,
        "sender_full_name": "RalfJ",
        "timestamp": 1542354597
    },
    {
        "content": "<p>I agree fully with the two things you said and have come to the same conclusion. Back then I think I added this just to be very sure</p>",
        "id": 147801967,
        "sender_full_name": "oli",
        "timestamp": 1542354706
    },
    {
        "content": "<p>unsafe code may convert an unsafe fn pointer to a safe one. That might actually be totally safe if e.g. the arguments change, too. If the arg was <code>*const T</code> that was dereferenced inside the function and we converted the function pointer to something taking a <code>&amp;T</code>, then that seems like a valid operation</p>",
        "id": 147802040,
        "sender_full_name": "oli",
        "timestamp": 1542354791
    },
    {
        "content": "<p>ack</p>",
        "id": 147802167,
        "sender_full_name": "RalfJ",
        "timestamp": 1542354967
    },
    {
        "content": "<p>PR submitted</p>",
        "id": 147802168,
        "sender_full_name": "RalfJ",
        "timestamp": 1542354970
    }
]