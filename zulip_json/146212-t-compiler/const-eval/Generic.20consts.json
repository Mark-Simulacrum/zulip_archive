[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I didn't know that we \"basically\" already have generic consts... look at this:<br>\n<a href=\"https://doc.rust-lang.org/nightly/std/mem/union.MaybeUninit.html#associatedconstant.UNINIT\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/mem/union.MaybeUninit.html#associatedconstant.UNINIT\">https://doc.rust-lang.org/nightly/std/mem/union.MaybeUninit.html#associatedconstant.UNINIT</a></p>",
        "id": 177992695,
        "sender_full_name": "RalfJ",
        "timestamp": 1570892704
    },
    {
        "content": "<p>doesn't this throw a wrench into our validation story? We usually validate all <code>const</code> items, but we obviously cannot validate this one</p>",
        "id": 177992704,
        "sender_full_name": "RalfJ",
        "timestamp": 1570892723
    },
    {
        "content": "<p>and yet it is promoted etc the same way as all the constants that we <em>did</em> properly check</p>",
        "id": 177992710,
        "sender_full_name": "RalfJ",
        "timestamp": 1570892743
    },
    {
        "content": "<p>Yeah associated consts totally entail generic consts with weirder syntax</p>",
        "id": 177993898,
        "sender_full_name": "centril",
        "timestamp": 1570894508
    },
    {
        "content": "<p><span aria-label=\"explosion\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"explosion\">:explosion:</span></p>",
        "id": 177994043,
        "sender_full_name": "RalfJ",
        "timestamp": 1570894769
    },
    {
        "content": "<p>those were our plans for const soundness, I think^^</p>",
        "id": 177994047,
        "sender_full_name": "RalfJ",
        "timestamp": 1570894782
    },
    {
        "content": "<p>or at least for <em>first</em> looking at soundness and <em>then</em> adding features that make it harder</p>",
        "id": 177994099,
        "sender_full_name": "RalfJ",
        "timestamp": 1570894816
    },
    {
        "content": "<p>fwiw we don't have generic statics at least but I'm not sure that helps ^^</p>",
        "id": 177994121,
        "sender_full_name": "centril",
        "timestamp": 1570894886
    },
    {
        "content": "<p>lol</p>",
        "id": 177994127,
        "sender_full_name": "RalfJ",
        "timestamp": 1570894909
    },
    {
        "content": "<p>what would those even mean</p>",
        "id": 177994131,
        "sender_full_name": "RalfJ",
        "timestamp": 1570894915
    },
    {
        "content": "<p>re: having unique but fixed addresses and things</p>",
        "id": 177994170,
        "sender_full_name": "RalfJ",
        "timestamp": 1570894924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I think it means unique address per instantiation of parameters (modulo lifetimes cause erasure)</p>",
        "id": 177994197,
        "sender_full_name": "centril",
        "timestamp": 1570895010
    },
    {
        "content": "<p>across all translation units? what about the usual diamond problem?</p>",
        "id": 177994612,
        "sender_full_name": "RalfJ",
        "timestamp": 1570895531
    },
    {
        "content": "<p>Well if there were no problems then it would already be a thing. ^^</p>\n<p>I believe it wouldn't be unique across cdylibs which afaik holds for normal statics as well. dylib's do throw a wrench into the issue tho (which <span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span>  is more familiar with)</p>",
        "id": 177995268,
        "sender_full_name": "centril",
        "timestamp": 1570896539
    },
    {
        "content": "<p>Yeah dylibs are a dealbreaker for generic statics</p>",
        "id": 177995344,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1570896632
    },
    {
        "content": "<p>I was thinking of the good ol' \"crate A defines the static, crate B1 and B2 independently make an instance of it with the same generic param, crate C depends on B1+B2\"</p>",
        "id": 177995573,
        "sender_full_name": "RalfJ",
        "timestamp": 1570896993
    },
    {
        "content": "<p>Oh that's solvable</p>",
        "id": 177995576,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1570897004
    },
    {
        "content": "<p>looks like each of B1's and B2's LLVM IR would then have the static in it, leading to...</p>",
        "id": 177995577,
        "sender_full_name": "RalfJ",
        "timestamp": 1570897008
    },
    {
        "content": "<p>okay? good :D</p>",
        "id": 177995581,
        "sender_full_name": "RalfJ",
        "timestamp": 1570897010
    },
    {
        "content": "<p>All non-leaf crates just make a note that they reference that instantiation, compute the symbol name, and leave actually defining it to the leaf crate</p>",
        "id": 177995593,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1570897039
    },
    {
        "content": "<p>The dylib problem is that you can't defer to the leaf crate that way with dylibs</p>",
        "id": 177995599,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1570897061
    },
    {
        "content": "<p>Or should it be root crate? Whatever, the bin/staticlib/cdylib</p>",
        "id": 177995677,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1570897147
    },
    {
        "content": "<p>iirc <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> had plans to kill dylibs or something</p>",
        "id": 177995689,
        "sender_full_name": "centril",
        "timestamp": 1570897183
    },
    {
        "content": "<p>Several people (including me) have been loudly wishing for their death for years</p>",
        "id": 177995740,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1570897210
    },
    {
        "content": "<p>yeah but I mean actual plans ^^</p>",
        "id": 177995745,
        "sender_full_name": "centril",
        "timestamp": 1570897223
    },
    {
        "content": "<p>or like a roadmap goal</p>",
        "id": 177995747,
        "sender_full_name": "centril",
        "timestamp": 1570897227
    },
    {
        "content": "<p>(but I think we digress from the const validation stuff this topic was really about... woops, my bad... Zulip is hard!)</p>",
        "id": 177995760,
        "sender_full_name": "centril",
        "timestamp": 1570897262
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 178072772,
        "sender_full_name": "centril",
        "timestamp": 1571028319
    },
    {
        "content": "<p>I have read this thread, but I don't <em>really</em> understand all the background here <span aria-label=\"half frown\" class=\"emoji emoji-1f615\" role=\"img\" title=\"half frown\">:half_frown:</span>. Most of my knowledge is about the static side of const validation, but this seems more about the dynamic part? I suppose if <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> needs more feedback he could try to explain it to me, but probably someone else is more capable.</p>",
        "id": 178072986,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571028544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> for <code>const</code> and <code>static</code>, we actually iterate all of these in the crate you are compiling to test their sanity, even if they are not used</p>",
        "id": 178136584,
        "sender_full_name": "RalfJ",
        "timestamp": 1571085267
    },
    {
        "content": "<p>e.g. when you have a lib crate, you may have many consts that only your clients will use; this makes sure we check them</p>",
        "id": 178136608,
        "sender_full_name": "RalfJ",
        "timestamp": 1571085283
    },
    {
        "content": "<p>but when they are generic, we can't... we'd have to check <em>every possible</em> instance, with all possible types, and that's infinitely many...</p>",
        "id": 178136632,
        "sender_full_name": "RalfJ",
        "timestamp": 1571085304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Is sanity used to mean \"const-safety\" here? On the static side, we assume the worst about <code>T</code> w.r.t. its qualifications. This doesn't really apply to MIRI though. Can you give an example where this would be a problem?</p>",
        "id": 178138304,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571086493
    },
    {
        "content": "<p>yeah it's basically const-safety</p>",
        "id": 178139016,
        "sender_full_name": "RalfJ",
        "timestamp": 1571086947
    },
    {
        "content": "<p>it's the <code>validity.rs</code> thing</p>",
        "id": 178139024,
        "sender_full_name": "RalfJ",
        "timestamp": 1571086951
    },
    {
        "content": "<p>the biggie in terms of problems is promotion</p>",
        "id": 178139041,
        "sender_full_name": "RalfJ",
        "timestamp": 1571086966
    },
    {
        "content": "<p>if we promote <code>STATIC * 2</code> and the static (type <code>u32</code>) is actually the result of a ptr-to-int cast, we have to abort compilation</p>",
        "id": 178139067,
        "sender_full_name": "RalfJ",
        "timestamp": 1571086993
    },
    {
        "content": "<p>Ugh sorry. I'm so easily distracted. I still don't understand why this falls down around <strong>generic</strong> consts specifically. Are we worried about the body of a const being const-unsafe for some <code>T</code> but not others? On the static analysis side, we reason about const bodies pre-monomorphization, so it's not quite <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span> I think? A specific example would help me here.</p>",
        "id": 178229349,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571169476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 178229805,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571169767
    },
    {
        "content": "<blockquote>\n<p>why this falls down around generic consts specifically</p>\n</blockquote>\n<p>consider</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{...}</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BAR</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Trait</span><span class=\"o\">&gt;</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{...}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>if we want to check that <code>FOO</code> is a proper <code>bool</code> that's easy: just run the code, and check if the result is 0x00 or 0x01.<br>\nif we want to check that <code>BAR</code> is a proper <code>bool</code>... we can't as we'll have to try <em>every possible type <code>T</code></em>.</p>",
        "id": 178310204,
        "sender_full_name": "RalfJ",
        "timestamp": 1571246997
    },
    {
        "content": "<p>Right, but the issue is that we are unable to do dynamic checks in this case for libraries correct? Not that static validation allows you to write a const-unsafe generic initializer today?</p>",
        "id": 178310575,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571247229
    },
    {
        "content": "<p>with unsafe code, static checks will never be <em>guaranteeing</em> anything</p>",
        "id": 178310713,
        "sender_full_name": "RalfJ",
        "timestamp": 1571247304
    },
    {
        "content": "<p>and const allowing unsafe is not a bug, IMO</p>",
        "id": 178310740,
        "sender_full_name": "RalfJ",
        "timestamp": 1571247326
    },
    {
        "content": "<p>I'm just trying to establish whether there's currently a soundness bug, since AFAICT all unsafe operations are forbidden in const contexts. I understand that future plans for allowing unsafe code are greatly complicated by this.</p>",
        "id": 178311319,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571247714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> unconst operations are forbidden but not unsafe ones</p>",
        "id": 178311616,
        "sender_full_name": "centril",
        "timestamp": 1571247877
    },
    {
        "content": "<p>e.g. <a href=\"https://doc.rust-lang.org/nightly/std/ptr/struct.NonNull.html#method.new_unchecked\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/std/ptr/struct.NonNull.html#method.new_unchecked\">https://doc.rust-lang.org/nightly/std/ptr/struct.NonNull.html#method.new_unchecked</a></p>",
        "id": 178311658,
        "sender_full_name": "centril",
        "timestamp": 1571247908
    },
    {
        "content": "<p>Ah okay.</p>",
        "id": 178311823,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571248031
    },
    {
        "content": "<p>I mean the safety of that particular example doesn't depend on <code>T</code>, but it shouldn't be too hard to come up with an example where it does.</p>",
        "id": 178311987,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571248153
    },
    {
        "content": "<p>in any case it doesn't execute until it gets monomorphized downstream</p>",
        "id": 178312124,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571248239
    },
    {
        "content": "<p>I dont know of a soundness bug. but there could be promotion issues.</p>",
        "id": 178312929,
        "sender_full_name": "RalfJ",
        "timestamp": 1571248732
    },
    {
        "content": "<p>I should probably try to construct an example... so how does that assoc const stuff work?^^</p>",
        "id": 178312966,
        "sender_full_name": "RalfJ",
        "timestamp": 1571248751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Crate 1</span>\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// The crate with this code has no warning.</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">bool</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">union</span> <span class=\"nc\">Transmute</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">o</span>: <span class=\"kt\">bool</span> <span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Transmute</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">i</span>: <span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Crate 2</span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_x</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">S</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span>::<span class=\"n\">C</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178313256,
        "sender_full_name": "RalfJ",
        "timestamp": 1571248901
    },
    {
        "content": "<p>so this doesnt actually end up quite as bad as I thought; even if we didnt promote this code would still error</p>",
        "id": 178313278,
        "sender_full_name": "RalfJ",
        "timestamp": 1571248914
    },
    {
        "content": "<p>because <em>then</em> we do the validity check</p>",
        "id": 178313309,
        "sender_full_name": "RalfJ",
        "timestamp": 1571248924
    },
    {
        "content": "<p>so in some sense the behavior is consistent by aggressively failing early... not sure if that's the best strategy^^</p>",
        "id": 178313379,
        "sender_full_name": "RalfJ",
        "timestamp": 1571248954
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// crate 1</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Generic</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">union</span> <span class=\"nc\">Transmuter</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">byte</span>: <span class=\"kt\">u8</span> <span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Generic</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FIVE</span>: <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Transmuter</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">byte</span>: <span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// crate 2</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">promote_unconst</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">Generic</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">FIVE</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 178314240,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571249426
    },
    {
        "content": "<p>Is this any worse? It's really just another layer of monomorphization.</p>",
        "id": 178314320,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571249481
    },
    {
        "content": "<p>mostly it's another layer of \"thunking\"</p>",
        "id": 178314704,
        "sender_full_name": "RalfJ",
        "timestamp": 1571249677
    },
    {
        "content": "<p>or laziness</p>",
        "id": 178314710,
        "sender_full_name": "RalfJ",
        "timestamp": 1571249680
    },
    {
        "content": "<p>normal <code>const</code> we check eagerly: all const ever defined are checked</p>",
        "id": 178314726,
        "sender_full_name": "RalfJ",
        "timestamp": 1571249691
    },
    {
        "content": "<p>generic const we can only check lazily: only when a const gets used, we check it</p>",
        "id": 178314743,
        "sender_full_name": "RalfJ",
        "timestamp": 1571249701
    },
    {
        "content": "<p>these are the kind of post monomorphization errors we can't really eliminate</p>",
        "id": 178377222,
        "sender_full_name": "oli",
        "timestamp": 1571316476
    },
    {
        "content": "<p>similar ones have been around since 1.0</p>",
        "id": 178377285,
        "sender_full_name": "oli",
        "timestamp": 1571316501
    }
]