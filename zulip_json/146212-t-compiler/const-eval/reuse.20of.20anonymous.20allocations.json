[
    {
        "content": "<p>Is it ok to assume that anonymous allocations are not referenced by multiple statics or functions? For reference I want to treat each function and static together with all their anonymous allocations as a single unit that can be replaced in an atomic way when the respective static of function changes due to source changes. This would make implementing hot code swapping for the jit mode of cg_clif much easier.</p>",
        "id": 218742883,
        "sender_full_name": "bjorn3",
        "timestamp": 1607023818
    },
    {
        "content": "<p>You can have situations like <code>static A: &amp;i32 = &amp;42; static B: &amp;i32 = A;</code>, where both point to the same memory containing <code>42</code></p>",
        "id": 218800007,
        "sender_full_name": "oli",
        "timestamp": 1607066012
    },
    {
        "content": "<p>but I don't think we're guaranteeing this</p>",
        "id": 218800023,
        "sender_full_name": "oli",
        "timestamp": 1607066028
    },
    {
        "content": "<p>If both <code>A</code> and <code>B</code> are in a different codegen unit, they the anonymous allocation containing <code>42</code> gets duplicated:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">                                                                                                                   </span><span class=\"n\">bjorn</span><span class=\"o\">@</span><span class=\"n\">laptopbjorn</span><span class=\"o\">-</span><span class=\"n\">lenovo</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">b</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">BAR</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">a</span>::<span class=\"n\">FOO</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>$ ar x librust_out.rlib\n$ objdump -s rust_out.rust_out.3a1fbbbh-cgu.*\n\nrust_out.rust_out.3a1fbbbh-cgu.0.rcgu.o:     file format elf64-x86-64\n\nContents of section .rodata.cst4:\n 0000 2a000000                             *...\nContents of section .data.rel.ro.FOO:\n 0000 00000000 00000000                    ........\n\nrust_out.rust_out.3a1fbbbh-cgu.1.rcgu.o:     file format elf64-x86-64\n\nContents of section .rodata.cst4:\n 0000 2a000000                             *...\nContents of section .data.rel.ro.BAR:\n 0000 00000000 00000000                    ........\n</code></pre></div>",
        "id": 218805097,
        "sender_full_name": "bjorn3",
        "timestamp": 1607070916
    },
    {
        "content": "<p>So I think there shouldn't be any problems caused by always duplicating them.</p>",
        "id": 218805124,
        "sender_full_name": "bjorn3",
        "timestamp": 1607070945
    },
    {
        "content": "<p>oh</p>",
        "id": 218805279,
        "sender_full_name": "oli",
        "timestamp": 1607071075
    },
    {
        "content": "<p>since you already got the setup, can you do a quick check and see what happens for mutable statics with mutable references?</p>",
        "id": 218805341,
        "sender_full_name": "oli",
        "timestamp": 1607071094
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0764]: mutable references are not allowed in statics\n --&gt; &lt;anon&gt;:3:36\n  |\n3 |     pub static mut FOO: &amp;mut i32 = &amp;mut 42;\n  |                                    ^^^^^^^ `&amp;mut` is only allowed in `const fn`\n</code></pre></div>",
        "id": 218805415,
        "sender_full_name": "bjorn3",
        "timestamp": 1607071152
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>pub mod a {\n    #[no_mangle]\n    pub static mut FOO: &amp;mut [i32] = &amp;mut [42];\n}\n\npub mod b {\n    #[no_mangle]\n    pub static mut BAR: &amp;[i32] = unsafe { &amp;*crate::a::FOO };\n}\n</code></pre></div>\n<p>compiles, and I'm not sure of the use case for it, but...</p>",
        "id": 218805522,
        "sender_full_name": "oli",
        "timestamp": 1607071224
    },
    {
        "content": "<p>technically this should point to the same allocation I think?</p>",
        "id": 218805545,
        "sender_full_name": "oli",
        "timestamp": 1607071242
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>rust_out.rust_out.3a1fbbbh-cgu.0.rcgu.o:     file format elf64-x86-64\n\nContents of section .data..L__unnamed_1:\n 0000 2a000000                             *...\nContents of section .data.FOO:\n 0000 00000000 00000000 01000000 00000000  ................\n\nrust_out.rust_out.3a1fbbbh-cgu.1.rcgu.o:     file format elf64-x86-64\n\nContents of section .data..L__unnamed_1:\n 0000 2a000000                             *...\nContents of section .data.BAR:\n 0000 00000000 00000000 01000000 00000000  ................\n</code></pre></div>\n<p>The allocation is duplicated.</p>",
        "id": 218805639,
        "sender_full_name": "bjorn3",
        "timestamp": 1607071316
    },
    {
        "content": "<p>Same for <code>BAR: &amp;mut [i32]</code>.</p>",
        "id": 218805734,
        "sender_full_name": "bjorn3",
        "timestamp": 1607071367
    },
    {
        "content": "<p>huh... how did you get <code>BAR: &amp;mut [i32]</code> to compile?</p>",
        "id": 218807468,
        "sender_full_name": "oli",
        "timestamp": 1607072630
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$ <span class=\"nb\">echo</span> <span class=\"s2\">\"#![feature(const_mut_refs)]</span>\n<span class=\"s2\">pub mod a {</span>\n<span class=\"s2\">    #[no_mangle]</span>\n<span class=\"s2\">    pub static mut FOO: &amp;mut [i32] = &amp;mut [42];</span>\n<span class=\"s2\">}</span>\n\n<span class=\"s2\">pub mod b {</span>\n<span class=\"s2\">    #[no_mangle]</span>\n<span class=\"s2\">    pub static mut BAR: &amp;mut [i32] = unsafe { &amp;mut *crate::a::FOO };</span>\n<span class=\"s2\">}\"</span> <span class=\"p\">|</span> rustc +nightly --crate-type lib -Cembed-bitcode<span class=\"o\">=</span>no -\n</code></pre></div>",
        "id": 218807576,
        "sender_full_name": "bjorn3",
        "timestamp": 1607072676
    },
    {
        "content": "<p>oh haha, I guess another way in which <code>const_mut_refs</code> causes problems!</p>",
        "id": 218807864,
        "sender_full_name": "oli",
        "timestamp": 1607072861
    },
    {
        "content": "<p>thanks</p>",
        "id": 218807866,
        "sender_full_name": "oli",
        "timestamp": 1607072862
    },
    {
        "content": "<p>anyway, yea, deduplicate at your heart's desire, as long as it's not a pointer into another static's root allocation</p>",
        "id": 218807946,
        "sender_full_name": "oli",
        "timestamp": 1607072892
    },
    {
        "content": "<p>How does this behavior make any sense from the user perspective? If you say <code>static B: &amp;i32 = A</code> shouldn't the nonexistent spec say that <code>B</code> will be assigned the value of <code>A</code>?</p>",
        "id": 218823654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607083251
    },
    {
        "content": "<p>the original question is written in a confusing way, I first thought you asked if <em>code</em> may assume this. but if this is a backend thing then it's less about <em>assuming</em> allocations are separate and more about <em>making them separate</em>?</p>",
        "id": 218935300,
        "sender_full_name": "RalfJ",
        "timestamp": 1607175048
    },
    {
        "content": "<p>this part of Rust is basically entirely undocumented/unspecified right now, unfortunately. <br>\nbut to me something seems very wrong when <code>static A: &amp;i32 = &amp;42; static B: &amp;i32 = A;</code> leads to there being multiple <code>42</code> in memory.</p>",
        "id": 218935329,
        "sender_full_name": "RalfJ",
        "timestamp": 1607175100
    },
    {
        "content": "<p>and for the mutable case it seems outright <em>wrong</em> since by mutating that data I can directly observe the duplication, which should not happen</p>",
        "id": 218935382,
        "sender_full_name": "RalfJ",
        "timestamp": 1607175155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> </p>\n<blockquote>\n<p>If both A and B are in a different codegen unit, they the anonymous allocation containing 42 gets duplicated:</p>\n</blockquote>\n<p>I tried to reproduce this on the playground in the style of <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=baf2a1bbbf7ba1b5a1c9d7015c2d5b2c\">this example by Oli</a>, but <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2c2b31d59b50ae1eae0a42eb30eaec70\">my example fails to show duplication</a>. Any idea what is going on?</p>",
        "id": 218936024,
        "sender_full_name": "RalfJ",
        "timestamp": 1607176254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/reuse.20of.20anonymous.20allocations/near/218935300\">said</a>:</p>\n<blockquote>\n<p>but if this is a backend thing then it's less about <em>assuming</em> allocations are separate and more about <em>making them separate</em>?</p>\n</blockquote>\n<p>yeah</p>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/reuse.20of.20anonymous.20allocations/near/218936024\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> </p>\n<blockquote>\n<p>If both A and B are in a different codegen unit, they the anonymous allocation containing 42 gets duplicated:</p>\n</blockquote>\n<p>I tried to reproduce this on the playground in the style of <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=baf2a1bbbf7ba1b5a1c9d7015c2d5b2c\">this example by Oli</a>, but <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2c2b31d59b50ae1eae0a42eb30eaec70\">my example fails to show duplication</a>. Any idea what is going on?</p>\n</blockquote>\n<p><code>--emit llvm-ir</code> and <code>--emit asm</code> force a single codegen unit. You have to compile normally and then disassemble the individual object files in an <code>.rlib</code> to see this.</p>",
        "id": 218939201,
        "sender_full_name": "bjorn3",
        "timestamp": 1607181618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> ^</p>",
        "id": 218939203,
        "sender_full_name": "bjorn3",
        "timestamp": 1607181626
    },
    {
        "content": "<p>Any idea why Oli's <code>mut</code> example shows inequal pointers without such extra steps?</p>",
        "id": 218939226,
        "sender_full_name": "RalfJ",
        "timestamp": 1607181693
    },
    {
        "content": "<p>Also I didn't pass any <code>--emit</code>, I just ran the example</p>",
        "id": 218939231,
        "sender_full_name": "RalfJ",
        "timestamp": 1607181718
    },
    {
        "content": "<p>the shared ref assertion still passes even when I build it locally with <code>rustc test.rs -Ccodegen-units=16</code></p>",
        "id": 218939288,
        "sender_full_name": "RalfJ",
        "timestamp": 1607181771
    },
    {
        "content": "<p>FWIW, my answer to \"is it okay to make anonymous allocations per-static\" is \"definitely not\". When one static creates an anon allocation and another static copies its value, <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2c2b31d59b50ae1eae0a42eb30eaec70\">like here</a>, they must point to the same allocation. I see no reasonable spec for Rust that would permit the 2nd static to duplicate the allocation. The code quite explicitly says that <code>BAR</code> points to the same thing that <code>FOO</code> points to.</p>\n<p>The only thing we permit AFAIK is <em>deduplication</em>, where if several immutable anon allocations (this includes <code>const</code>) have the same content, they may be deduplicated.</p>",
        "id": 218939448,
        "sender_full_name": "RalfJ",
        "timestamp": 1607182003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/reuse.20of.20anonymous.20allocations/near/218939288\">said</a>:</p>\n<blockquote>\n<p>the shared ref assertion still passes even when I build it locally with <code>rustc test.rs -Ccodegen-units=16</code></p>\n</blockquote>\n<p>This is probably because of the <code>MERGE</code> flag on <code>.rodata</code> sections. Using <code>-Csave-temps</code> I did see a duplicate <code>.rodata.cst4</code>, but the final <code>.rodata</code> section was only 4 bytes when using <code>-Cprefer-dynamic</code> to keep libstd out of the executable itself.</p>",
        "id": 218939852,
        "sender_full_name": "bjorn3",
        "timestamp": 1607182579
    },
    {
        "content": "<p>oh so it first gets duplicated and then deduplicated again? funny</p>",
        "id": 218940284,
        "sender_full_name": "RalfJ",
        "timestamp": 1607183322
    },
    {
        "content": "<p>Yes. There are likely some linkers which will not deduplicate it.</p>",
        "id": 218940341,
        "sender_full_name": "bjorn3",
        "timestamp": 1607183418
    },
    {
        "content": "<p>I think I found the bug</p>",
        "id": 219115243,
        "sender_full_name": "oli",
        "timestamp": 1607364306
    },
    {
        "content": "<p>we tell LLVM that all promoteds are <code>constant</code> instead of <code>global</code></p>",
        "id": 219115265,
        "sender_full_name": "oli",
        "timestamp": 1607364317
    },
    {
        "content": "<p>ah... nevermind... that is <em>another</em> problem, in this case LLVM duplicates the constant:</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"vg\">@alloc2</span> <span class=\"p\">=</span> <span class=\"k\">private</span> <span class=\"k\">unnamed_addr</span> <span class=\"k\">global</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"k\">c</span><span class=\"s\">\"*\\00\\00\\00\"</span> <span class=\"p\">}&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">4</span>\n<span class=\"vg\">@FOO</span> <span class=\"p\">=</span> <span class=\"k\">global</span> <span class=\"p\">&lt;{</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"p\">[</span><span class=\"m\">8</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;</span> <span class=\"p\">&lt;{</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">(&lt;{</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;,</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@alloc2</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"m\">8</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"k\">c</span><span class=\"s\">\"\\01\\00\\00\\00\\00\\00\\00\\00\"</span> <span class=\"p\">}&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!0</span>\n<span class=\"vg\">@alloc2.1</span> <span class=\"p\">=</span> <span class=\"k\">private</span> <span class=\"k\">unnamed_addr</span> <span class=\"k\">global</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"k\">c</span><span class=\"s\">\"*\\00\\00\\00\"</span> <span class=\"p\">}&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">4</span>\n<span class=\"vg\">@BAR</span> <span class=\"p\">=</span> <span class=\"k\">global</span> <span class=\"p\">&lt;{</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"p\">[</span><span class=\"m\">8</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;</span> <span class=\"p\">&lt;{</span> <span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"p\">(&lt;{</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;,</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@alloc2.1</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"m\">8</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"k\">c</span><span class=\"s\">\"\\01\\00\\00\\00\\00\\00\\00\\00\"</span> <span class=\"p\">}&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">8</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!14</span>\n</code></pre></div>",
        "id": 219115502,
        "sender_full_name": "oli",
        "timestamp": 1607364433
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/75f1db1102076e416e1154b241b4fc95c01c0d7b/compiler/rustc_codegen_llvm/src/common.rs#L249\">https://github.com/rust-lang/rust/blob/75f1db1102076e416e1154b241b4fc95c01c0d7b/compiler/rustc_codegen_llvm/src/common.rs#L249</a></p>\n<p>Every time we find a pointer, if the target is a <code>GlobalAlloc::Memory</code>, we create a brand new allocation. To fix this bug, we would need to somehow assign a name to each anonymous allocation that is stable across source changes (so no <code>format!(\"{}\", alloc_id)</code>. otherwise incr comp breaks)</p>",
        "id": 219116131,
        "sender_full_name": "bjorn3",
        "timestamp": 1607364728
    },
    {
        "content": "<p>we could serialize the content and base 64 encode it ^^</p>",
        "id": 219117096,
        "sender_full_name": "oli",
        "timestamp": 1607365191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Or blake3 it.</p>",
        "id": 219695355,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1607757746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/reuse.20of.20anonymous.20allocations/near/219117096\">said</a>:</p>\n<blockquote>\n<p>we could serialize the content and base 64 encode it ^^</p>\n</blockquote>\n<p>that could deduplicate identical-but-distinct allocations though which would also be wrong</p>",
        "id": 219772800,
        "sender_full_name": "RalfJ",
        "timestamp": 1607883445
    },
    {
        "content": "<p>there needs to be a 1:1 mapping between <code>AllocId</code> and actual allocations</p>",
        "id": 219772802,
        "sender_full_name": "RalfJ",
        "timestamp": 1607883458
    }
]