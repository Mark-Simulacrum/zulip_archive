[
    {
        "content": "<p>I'm poking at <a href=\"https://github.com/rust-lang/rust/issues/62614\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62614\">#62614</a> (just because I'm looking at other code related to structural_match)</p>",
        "id": 177650635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570563237
    },
    {
        "content": "<p>and I have to admit that I'm sort of flummoxed by something that I thought would be a relatively simple task</p>",
        "id": 177651089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570563517
    },
    {
        "content": "<p>My goal: I want to traverse the right-hand side of the const item, and check that any struct/enum I find there is <code>structural_match</code>. (I specifically <em>don't</em> want to walk the type, as discussed on <a href=\"https://github.com/rust-lang/rust/issues/62614\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62614\">#62614</a>)</p>",
        "id": 177651498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570563805
    },
    {
        "content": "<p>(actually maybe my problem is that  I'm trying to walk the const-expression structure based on a <code>ty::Const</code>/<code>mir::interpret::ConstValue</code>, when what I should be doing is starting from the <code>def_id</code> there ...)</p>",
        "id": 177651503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570563809
    },
    {
        "content": "<p>nonetheless I was wondering if there is anyway to traverse the implicit tree structure of a <code>mir::interpret::ConstValue</code> like that, or if it has all been totally boiled away into <code>Scalar</code>s and <code>ByRef</code>s that no longer carry type info...</p>",
        "id": 177652410,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570564416
    },
    {
        "content": "<p>okay yes I think I figured out what to do. (There remain interesting questions; e.g. we may want to adopt different rules for consts from the current crate versus extern crates. But that can be resolved later.)</p>",
        "id": 177706827,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570623026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> which tree structure are you talking about? we have a \"value visitor\" which might be want you want -- but that is type-guided; there is no tree structure to values in rust if you discard the types.</p>",
        "id": 177713988,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628253
    },
    {
        "content": "<p>Rust only has raw uninterpreted bytes in memory, and you can turn them into a tree by picking a type at which to interpret the bytes.</p>",
        "id": 177714003,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628270
    },
    {
        "content": "<p>yeah, the tree I was thinking of was the HIR for the const definition</p>",
        "id": 177714226,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570628403
    },
    {
        "content": "<p>which I eventually did find</p>",
        "id": 177714236,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570628406
    },
    {
        "content": "<p>and then reflecting on that has made me realize that, in the most general case, we cannot assume we have that available</p>",
        "id": 177714271,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570628435
    },
    {
        "content": "<p>oh, you mean the AST, pre MIR-generation. yeah sorry I couldn't help much there. glad you found the answer somewhere :D</p>",
        "id": 177714273,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628438
    },
    {
        "content": "<p>this const pattern stuff is a pretty amazing rabbit hole.</p>",
        "id": 177714334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570628469
    },
    {
        "content": "<p>I can only guess.</p>",
        "id": 177714525,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628607
    },
    {
        "content": "<p>I have avoided pattern matching code like the plague myself ;)</p>",
        "id": 177714530,
        "sender_full_name": "RalfJ",
        "timestamp": 1570628617
    },
    {
        "content": "<p>Oh yea, the only reasonable way to get at parts of a constant is via the value visitors, they implement all the logic for getting the types of fields and so on</p>",
        "id": 177787633,
        "sender_full_name": "oli",
        "timestamp": 1570694414
    },
    {
        "content": "<p>hmm. Okay maybe I will try to use a value visitor. (I do have a type in hand, so the fact that they are type-guided should not be a problem.)</p>",
        "id": 177794512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570701010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you point me at the specific trait definition(s)? And/or example usage of value visitor? I specifically want/need to traverse a value to identify all of the struct/variant constructors that would have been used to create that value.</p>",
        "id": 177794555,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570701063
    },
    {
        "content": "<p>or maybe that's not what I actually need, if the visitor handles type lookup and field enumeration...</p>",
        "id": 177794588,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570701102
    },
    {
        "content": "<p>(really I just want to traverse a view of the value that exposes its types, so that I can ask each ADT if it implements <code>Structural</code>)</p>",
        "id": 177795268,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570701759
    },
    {
        "content": "<p>(and this way you would be allowed to have an <code>enum</code> with some variants that are <em>not</em> <code>Structural</code>, just as long as no pattern uses a const that uses such a variant.)</p>",
        "id": 177795301,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570701820
    },
    {
        "content": "<p>Oh, I think I need to provide still more context: I'm trying to incorporate this into code that <em>is</em> currently using <code>tcx.const_eval</code> to evaluate constants, so I end up with <code>ty::Const</code> as my results to inspect. Do the visitors defined in <code>rustc_mir::interpret::visitor</code> handle  that? My cursory inspection indicates that it may want operands that have a bit more structure ...?</p>",
        "id": 177802442,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570709161
    },
    {
        "content": "<p>lets see, who implements the <code>rustc::interpret::visitor::Value</code> trait ...</p>",
        "id": 177802507,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570709193
    },
    {
        "content": "<p><code>OpTy</code> and <code>MPlaceTy</code> ...</p>",
        "id": 177802533,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570709223
    },
    {
        "content": "<p>ah it looks like I may be able to feed the <code>ty::Const</code> into <code>eval_const_to_op</code> to get an <code>OpTy</code> I could then visit...</p>",
        "id": 177802625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570709318
    },
    {
        "content": "<p>Yes, converting to an <code>OpTy</code> first should be the right way ^TM This is done frequently for match checking in <a href=\"https://github.com/rust-lang/rust/blob/9c588c1e2391c20c156814f7ae118f62e96a3976/src/librustc_mir/const_eval.rs#L517\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9c588c1e2391c20c156814f7ae118f62e96a3976/src/librustc_mir/const_eval.rs#L517\">https://github.com/rust-lang/rust/blob/9c588c1e2391c20c156814f7ae118f62e96a3976/src/librustc_mir/const_eval.rs#L517</a></p>",
        "id": 177833900,
        "sender_full_name": "oli",
        "timestamp": 1570729119
    }
]