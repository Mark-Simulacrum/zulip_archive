[
    {
        "content": "<p>I spent some time trying to resolve long-standing issues with our <code>#[structural_match]</code> system that tries to restrict the set of consts that are allowed to be used in a pattern context.</p>",
        "id": 181121625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574177222
    },
    {
        "content": "<p>see also <a href=\"https://github.com/rust-lang/rfcs/issues/1445\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/issues/1445\">rfc#1445</a></p>",
        "id": 181121791,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574177301
    },
    {
        "content": "<p>anyway, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> pointed out in a review of my PR <a href=\"https://github.com/rust-lang/rust/issues/66120\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66120\">#66120</a> that it might be best to scrap my proposed approach and instead use something based on const-qualification</p>",
        "id": 181121850,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574177340
    },
    {
        "content": "<p>specifically see the discussion <a href=\"https://github.com/rust-lang/rust/pull/66120#discussion_r343227532\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66120#discussion_r343227532\">here</a></p>",
        "id": 181121906,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574177383
    },
    {
        "content": "<p>And so I wanted to try to get feedback here on the matter, about whether it makes more sense to try to apply <code>mir_const_qualif</code> here</p>",
        "id": 181121998,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574177418
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> looking at the actual code this seems pretty easy (compared to analyzing HIR)</p>",
        "id": 181122342,
        "sender_full_name": "eddyb",
        "timestamp": 1574177627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I just looked at the issue referenced by your PR and <code>check_consts::Qualif</code> seems like the right tool for this. We'd have to do this in <code>mir_const_qualif</code> for <em>all</em> <code>const</code>s since we want to get this cross crate right?</p>",
        "id": 181139175,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574187519
    },
    {
        "content": "<p>as opposed to doing it lazily for consts that appear in a pattern?</p>",
        "id": 181139538,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574187772
    },
    {
        "content": "<p>Strategy of current PR is to handle cross-crates by falling back on a conservative type-based analysis</p>",
        "id": 181143965,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574190485
    },
    {
        "content": "<p>So it doesnâ€™t <em>have</em> to be done there. But it probably is something to consider</p>",
        "id": 181144003,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574190511
    },
    {
        "content": "<p>type-based analysis will anyway be needed for associated consts</p>",
        "id": 181144035,
        "sender_full_name": "RalfJ",
        "timestamp": 1574190542
    },
    {
        "content": "<p>Okay, we can it either way. It just affects whether the code goes in <code>mir_const_qualif</code> or you use the API directly.</p>",
        "id": 181144202,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574190638
    },
    {
        "content": "<p>Also, the churn that <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> mentioned in their comment has abated somewhat, so this shouldn't be too hard.</p>",
        "id": 181144298,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574190705
    },
    {
        "content": "<p>Basically, you'll add an implementer of the <a href=\"https://github.com/rust-lang/rust/blob/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8/src/librustc_mir/transform/check_consts/qualifs.rs#L22\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8/src/librustc_mir/transform/check_consts/qualifs.rs#L22\"><code>Qualif</code></a> trait for structural matching, probably very similar to the existing one for <a href=\"https://github.com/rust-lang/rust/blob/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8/src/librustc_mir/transform/check_consts/qualifs.rs#L277\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8/src/librustc_mir/transform/check_consts/qualifs.rs#L277\"><code>Drop</code></a>.</p>",
        "id": 181144525,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574190865
    },
    {
        "content": "<p>Then use it for a dataflow analysis as is done in the <a href=\"https://github.com/rust-lang/rust/blob/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8/src/librustc_mir/transform/check_consts/validation.rs#L185\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8/src/librustc_mir/transform/check_consts/validation.rs#L185\">MIR const-checker</a></p>",
        "id": 181144694,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574190980
    },
    {
        "content": "<p>currently those other qualifs look to see if there was a mutable borrow of that local (that's what <code>IndirectlyMutableLocals</code> is for). You probably want to do this, even though we don't allow mutable references in <code>const</code>s at the moment.</p>",
        "id": 181144959,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574191148
    },
    {
        "content": "<p>If you want to make this part of <code>mir_const_qualif</code> (and thus allow it to work cross-crate at the cost of running another dataflow pass on every const), you would just have to add the new <code>Qualif</code> to <code>ConstQualifs</code> in <code>rustc::mir</code> and modify <a href=\"https://github.com/rust-lang/rust/blob/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8/src/librustc_mir/transform/check_consts/validation.rs#L116\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8/src/librustc_mir/transform/check_consts/validation.rs#L116\"><code>Qualifs::in_return_place</code></a> to extract it.</p>",
        "id": 181145188,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574191269
    },
    {
        "content": "<p>Otherwise you can roll your own code using <a href=\"https://github.com/rust-lang/rust/blob/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8/src/librustc_mir/transform/check_consts/validation.rs#L47\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/618b01f9fa0a6b4e7e2ce5b3409abe104b80c4a8/src/librustc_mir/transform/check_consts/validation.rs#L47\"><code>FlowSensitiveAnalysis</code></a></p>",
        "id": 181145368,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574191401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> are you opposed to me landing the PR <a href=\"https://github.com/rust-lang/rust/issues/66120\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66120\">#66120</a> as is (or with slight tweaks), and filing an issue for the mir_const_qualif-based approach?</p>",
        "id": 181186330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574236590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> well, other than HIR code that doesn't need to exist and is a dozen times larger than the equivalent Qualif logic,,, (no, I'm not opposed if you don't mind the code being around for a while)</p>",
        "id": 181216523,
        "sender_full_name": "eddyb",
        "timestamp": 1574263185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> would be good to have some write-up in the rustc guide for the new semantics</p>",
        "id": 181216609,
        "sender_full_name": "centril",
        "timestamp": 1574263225
    },
    {
        "content": "<p>maybe an RFC as well if you change the approach so that we don't start accepting a bunch more code without some design input</p>",
        "id": 181216822,
        "sender_full_name": "centril",
        "timestamp": 1574263250
    },
    {
        "content": "<p>I'm not happy about the cross-crate distinction, it reminds me of how <code>Enum::Variant as uN</code> in a constant would only work same-crate :P</p>",
        "id": 181217010,
        "sender_full_name": "eddyb",
        "timestamp": 1574263274
    },
    {
        "content": "<p>but conservative type-based reasoning that <em>still works</em> is better than nothing</p>",
        "id": 181217036,
        "sender_full_name": "eddyb",
        "timestamp": 1574263293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'm happy to work on the <code>mir_const_qualif</code> part of this if you can point me towards an equivalent to <a href=\"https://github.com/rust-lang/rust/blob/f11759d38c70d3df67135f88a682701c1cf9762a/src/librustc/ty/mod.rs#L2270\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f11759d38c70d3df67135f88a682701c1cf9762a/src/librustc/ty/mod.rs#L2270\">this</a> but for <code>structural_match</code>.</p>",
        "id": 181855022,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574710307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> I think you are asking for the <a href=\"https://github.com/rust-lang/rust/blob/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src/librustc/ty/structural_match.rs#L65\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0f6f66fcdc4abf110171ee06b1a72bdd2883b74f/src/librustc/ty/structural_match.rs#L65\"><code>type_marked_structural</code> function</a></p>",
        "id": 181907516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574763680
    },
    {
        "content": "<p>(which this PR refactors but I think its effect is unchanged.)</p>",
        "id": 181907625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1574763752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>. Yeah that's the basic idea. We would have to store a few more things in <a href=\"https://github.com/rust-lang/rust/blob/797fd92628842c1f5face9fb93b0fe4f1f9d297f/src/librustc_mir/transform/check_consts/mod.rs#L22\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/797fd92628842c1f5face9fb93b0fe4f1f9d297f/src/librustc_mir/transform/check_consts/mod.rs#L22\"><code>check_consts::Item</code></a> to call that directly.</p>\n<p>I have zero experience working with an <code>InferCtxt</code>; do we still have access to one in <code>librustc_mir</code>? Ideally <code>TyCtxt</code> would expose a similar method that takes a <code>DefId</code>, but I don't know if that can be efficient.</p>",
        "id": 181962335,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574801343
    },
    {
        "content": "<p><code>tcx.infer_ctxt().enter(|infcx| { /* your code here */ )</code></p>",
        "id": 181963008,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574801810
    },
    {
        "content": "<p>There are queries that should allow you to do this as well.</p>",
        "id": 181963063,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574801855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Is it expensive to create a new inference context? It seems like we should have a <code>is_structural_match</code> query for a <code>Ty</code>.</p>",
        "id": 181963150,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574801890
    },
    {
        "content": "<p>It's not that expensive since the <code>'tcx</code>/<code>'gcx</code> unification (there is still currently an unnecessary TLS access on enter and exit)</p>",
        "id": 181963291,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574801972
    },
    {
        "content": "<p>But back to the queries...</p>",
        "id": 181963306,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574801985
    },
    {
        "content": "<p><code>type_op_prove_predicate</code> is the one you want I think...</p>",
        "id": 181963497,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574802099
    },
    {
        "content": "<p>The docs for that query say \"Do not call this query directly: part of the <code>ProvePredicate</code> type-op\". Would this guidance apply here?</p>",
        "id": 181963716,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574802258
    },
    {
        "content": "<p>Actually that still needs an Infcx</p>",
        "id": 181963735,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574802273
    },
    {
        "content": "<p>Yes that</p>",
        "id": 181963748,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574802279
    },
    {
        "content": "<p>Okay, I think <code>ProvePredicate</code> and <code>InferCtxt</code> will be enough to get a prototype built. I can get help with performance later.</p>",
        "id": 181964182,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574802557
    },
    {
        "content": "<p>There's an example on how to use these here: <a href=\"https://github.com/rust-lang/rust/blob/9abc34ed9d34873066a186ac5551d5aad9e783b6/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L2723\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9abc34ed9d34873066a186ac5551d5aad9e783b6/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L2723\">https://github.com/rust-lang/rust/blob/9abc34ed9d34873066a186ac5551d5aad9e783b6/src/librustc_mir/borrow_check/nll/type_check/mod.rs#L2723</a></p>",
        "id": 181964302,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574802631
    },
    {
        "content": "<p>There also needs to be some care that regions are erased when we check this.</p>",
        "id": 181964362,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574802687
    },
    {
        "content": "<p>Which honestly, they should always be in MIR (except for the borrow checker's copy). But that's a future PR.</p>",
        "id": 181964430,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574802723
    },
    {
        "content": "<p>Are we okay using <code>ProvePredicate</code> outside the <code>nll</code> module for things unrelated to lifetimes? Even if regions are erased?</p>",
        "id": 181964594,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574802816
    },
    {
        "content": "<p>It should be fine, just don't copy NLL and unwrap the error. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 181964725,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574802888
    },
    {
        "content": "<p>(that is don't unwrap, even though NLL does)</p>",
        "id": 181964759,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574802916
    },
    {
        "content": "<p><code>unreachable_unchecked</code> it is!</p>",
        "id": 181964772,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574802924
    },
    {
        "content": "<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 181964784,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574802934
    },
    {
        "content": "<p>I'll give this a try this evening.</p>",
        "id": 181964861,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574802965
    },
    {
        "content": "<p>And <code>push_region_constraints</code> should be be replaced with an assertion of <code>data.is_empty()</code></p>",
        "id": 181964992,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574803023
    },
    {
        "content": "<p>Maybe...</p>",
        "id": 181965096,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574803057
    },
    {
        "content": "<p>Actually, yes, do that and when it ICEs ask for help.</p>",
        "id": 181965168,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574803086
    },
    {
        "content": "<p>In other words whether a type implements <code>StructuralPartialEq</code> should not be dependent on lifetimes since they should all be erased by the time we call this?</p>",
        "id": 181965242,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574803128
    },
    {
        "content": "<p>They should all be erased. There might be some issues with late-bound regions and universes, but I'm hoping that it works for now.</p>",
        "id": 181965713,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574803485
    },
    {
        "content": "<p>And in the final value they're all <code>'static</code></p>",
        "id": 181965729,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574803504
    },
    {
        "content": "<p>or late-bound</p>",
        "id": 181965736,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574803513
    },
    {
        "content": "<p>I guess not in associated constants, sigh...</p>",
        "id": 181965770,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574803561
    },
    {
        "content": "<p>Hmm, well I can always use the same approach as <span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> and start caching it later.</p>",
        "id": 181966229,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574803809
    },
    {
        "content": "<p>Presumably I can do no worse than their PR?</p>",
        "id": 181966313,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1574803889
    },
    {
        "content": "<p>I guess</p>",
        "id": 181966904,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1574804293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I implemented a barebones structural match <code>Qualif</code> in a <a href=\"https://github.com/rust-lang/rust/compare/master...ecstatic-morse:qualif-structural-match\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...ecstatic-morse:qualif-structural-match\">WIP branch</a>. The next step would be to check the results of <code>mir_const_qualif</code> in <a href=\"https://github.com/rust-lang/rust/compare/master...ecstatic-morse:qualif-structural-match#diff-e826542d6f24137d5b0b5ae333230529R856\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...ecstatic-morse:qualif-structural-match#diff-e826542d6f24137d5b0b5ae333230529R856\"><code>hair/pattern/mod.rs</code></a>. Do you have any opinions on the best way to do this?</p>",
        "id": 182392241,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575322256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> I was assuming that you'd have to put the check somewhere else; doesn't <code>mir_const_qualif</code>operate on MIR? the code in <code>hair/pattern/mod.rs</code> is transforming HIR to HAIR, so its running too early to apply something that operates on MIR.</p>",
        "id": 182429350,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575365510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Is it not possible for HIR -&gt; HAIR lowering of one item to depend on HIR -&gt; HAIR -&gt; MIR being completed for another? I'm not very familiar with the constraints of the query system.</p>",
        "id": 182579991,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575481553
    },
    {
        "content": "<p>Hmm maybe that is fine ....</p>",
        "id": 182580140,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575481627
    },
    {
        "content": "<p>Perhaps a better time for this check would be HAIR -&gt; MIR lowering?</p>",
        "id": 182580217,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575481676
    },
    {
        "content": "<p>Although it looks like we would have to keep a <code>DefId</code> in <code>hair::PatKind</code></p>",
        "id": 182580396,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575481773
    },
    {
        "content": "<p>I'll try to work on my branch some more I guess</p>",
        "id": 182580553,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575481877
    },
    {
        "content": "<p>I'll try to look at your branch now</p>",
        "id": 182747979,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575628783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> what is the <code>self.indirectly_mutable(..)</code> check doing here? is that a cut-and-paste typo? <a href=\"https://github.com/rust-lang/rust/compare/master...ecstatic-morse:qualif-structural-match#diff-b0c62fbcd3affaac3e5bfcef42f9d4b0R116\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...ecstatic-morse:qualif-structural-match#diff-b0c62fbcd3affaac3e5bfcef42f9d4b0R116\">https://github.com/rust-lang/rust/compare/master...ecstatic-morse:qualif-structural-match#diff-b0c62fbcd3affaac3e5bfcef42f9d4b0R116</a></p>",
        "id": 182753006,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575633225
    },
    {
        "content": "<p>also, I am trying to understand the <code>Qualif</code> trait's API. I can see that the methods return booleans to signal whether they've seen \"something bad\" or not. But is there some way to record <em>what</em> the \"something bad\" was?</p>",
        "id": 182754498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575634681
    },
    {
        "content": "<p>By <em>what</em> do you mean the exact location of the bad thing? Or the kind of bad thing? Becaues the kind is the type implementing the trait</p>",
        "id": 182754954,
        "sender_full_name": "oli",
        "timestamp": 1575635082
    },
    {
        "content": "<p>the kind of the bad thing... or at least some specific info about it other than its existence</p>",
        "id": 182756378,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575636182
    },
    {
        "content": "<p>I thought part of what happens here is you do a traversal of the MIR</p>",
        "id": 182756388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575636192
    },
    {
        "content": "<p>like, the whole const is \"bad\"</p>",
        "id": 182756403,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575636206
    },
    {
        "content": "<p>but its bad because of something we encountered while traversing it</p>",
        "id": 182756418,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575636221
    },
    {
        "content": "<p>but maybe I simply misinterpreted the Qualif trait itself.</p>",
        "id": 182756516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575636297
    },
    {
        "content": "<p>concrete example, for structural_match: Say we're analyzing <code>const FOO: (u32, Inner) = (0, Inner::new());</code>, where <code>Inner</code> does not derive PartialEq+Eq. So we do <code>tcx.at(span).mir_const_qualif(foo_def_id)</code>. But I want the diagnostic to report the problem is with the use of <code>Inner</code>.</p>",
        "id": 182757280,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575636950
    },
    {
        "content": "<p>Hmm... I don't think there's a scheme for pointing to the source of the failure</p>",
        "id": 182758654,
        "sender_full_name": "oli",
        "timestamp": 1575637960
    },
    {
        "content": "<p>Maybe qualifs should have <code>Result&lt;(), SomeInfo&gt;</code> instead of just <code>bool</code></p>",
        "id": 182758674,
        "sender_full_name": "oli",
        "timestamp": 1575637988
    },
    {
        "content": "<p>yeah; though I suspect <code>SomeInfo</code> might need to be customized per-analysis (so that's yet another associated type on <code>trait Qualif</code>)</p>",
        "id": 182758956,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575638203
    },
    {
        "content": "<p><code>Qualif</code> is basically a MIR Visitor that can return a boolean, with <code>*_structurally</code> in place of <code>super_*</code>. However, <code>Qualif</code> is fine-grained; it only visits things <code>Rvalue</code>s and things that can appear in <code>Rvalue</code>s, not entire <code>Statement</code>s or <code>Body</code>s.</p>\n<p>The return value of the <code>in_*</code> methods is used to set/clear bits during dataflow analysis, so there's no way to find which <code>Rvalue</code> caused a qualif to appear in a final value at present. It's possible for a qualif to come from multiple places. We would need to construct an actual data dependency graph (a use-def chain) for this. This would also benefit other implementers of the <code>Qualif</code> trait.</p>\n<p><code>indirectly_mutable</code> is a safety measure for when <code>&amp;mut</code> is allowed in constants. If a reference that would allow mutation is created to any local, we fall back to conservative, type-based qualification (<code>in_any_value_of_ty</code>), since we can no longer use dataflow to reason about the value in a local.</p>",
        "id": 182786295,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575655001
    },
    {
        "content": "<p>I worked on my branch a bit more. Looks like we need a <code>is_definitely_not_structural_match</code> that, e.g., returns <code>true</code> for <code>NoDerive</code> but <code>false</code> for <code>Option&lt;NoDerive&gt;</code>. This is the equivalent of <code>has_dtor</code> used for the <code>NeedsDrop</code> qualif, which is powered by the <a href=\"https://github.com/rust-lang/rust/blob/41601a8c95240cada94c13466a1fea02e5fe87ed/src/librustc_typeck/check/mod.rs#L804\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/41601a8c95240cada94c13466a1fea02e5fe87ed/src/librustc_typeck/check/mod.rs#L804\"><code>adt_destructor</code> query</a></p>",
        "id": 182919921,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575858827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I don't think this is as simple as \"does this type implement <code>{Partial,}Eq</code> but not <code>Structural{Partial,}Eq</code>\", since  the impl for e.g. <code>Option&lt;T&gt;</code> looks like <code>impl&lt;T: StructuralEq&gt; StructuralEq for Option&lt;T&gt; {}</code>. Is this right?</p>",
        "id": 182920207,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575859393
    },
    {
        "content": "<p>I suppose we could look for <em>any</em> impl of <code>StructuralEq</code> for the type in question, even if it's not applicable to the fully substituted type.</p>",
        "id": 182920267,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575859509
    },
    {
        "content": "<p>Ah, I just saw <a href=\"https://github.com/rust-lang/rust/blob/b7176b44a203322c834302f3b515f8c10a54f2c1/src/libsyntax_ext/deriving/mod.rs#L79-L81\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/b7176b44a203322c834302f3b515f8c10a54f2c1/src/libsyntax_ext/deriving/mod.rs#L79-L81\">this comment</a>, which suggests that there are no where clauses on the <code>StructuralEq</code> impl for <code>Option</code>.</p>",
        "id": 182921562,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575861839
    },
    {
        "content": "<p>If that's the case I'm doing something wrong <span aria-label=\"half frown\" class=\"emoji emoji-1f615\" role=\"img\" title=\"half frown\">:half_frown:</span></p>",
        "id": 182922630,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575863834
    },
    {
        "content": "<p>Specifically, <code>NotStructuralMatch::in_rvalue</code> is returning <code>true</code> for <code>Option::&lt;NoDerive&gt;::None</code>, but <code>Option&lt;NoDerive</code> should implement <code>StructuralEq</code> no?</p>",
        "id": 182923111,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575864695
    },
    {
        "content": "<p>Correct. It indeed sounds like your code does something wrong. (When I was skimming it, I think I had vague worries that it would fall into the conservative type-structure traversal. Not sure.)</p>",
        "id": 182926970,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575871532
    },
    {
        "content": "<p>I'm getting:</p>\n<div class=\"codehilite\"><pre><span></span> FulfillmentError(Obligation(predicate=Binder(TraitPredicate(&lt;T as std::marker::Sized&gt;)), depth=1),Unimplemented),\n</pre></div>\n\n\n<p>as the reason <code>StructuralEq</code> cannot be fulfilled for <code>Option&lt;NoDerive&gt;</code>. Does this mean I'm not passing  the right <code>ParamEnv</code> or something? Also, shouldn't the generated impl have<code>?Sized</code> anyways?</p>\n<p>Also, it seems that <code>StructuralEq</code> is not implemented for tuples, so I needed to special case those as well.</p>",
        "id": 182995892,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575923046
    },
    {
        "content": "<p>Same thing for references. Is this intended?</p>",
        "id": 182997332,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575923992
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ^</p>",
        "id": 183012085,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575934270
    },
    {
        "content": "<p>Hmm. That is not intended</p>",
        "id": 183012271,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575934442
    },
    {
        "content": "<p>Oh of course</p>",
        "id": 183012371,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575934508
    },
    {
        "content": "<p>The current checker is based on the one that used attributes on ADTs</p>",
        "id": 183012395,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575934538
    },
    {
        "content": "<p>So it handles the traversal of non-ADT types itself</p>",
        "id": 183012461,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575934564
    },
    {
        "content": "<p>But i donâ€™t object to adding blanket impls of StructuralTraits for those types</p>",
        "id": 183012501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575934618
    },
    {
        "content": "<p>I'm guessing you've handled this on your branch. I'm working off master but using your tests</p>",
        "id": 183012506,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575934620
    },
    {
        "content": "<p>Regarding ?Sized: can an unsized type ever be used in a pattern?</p>",
        "id": 183012599,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575934700
    },
    {
        "content": "<p>I guess slices and str, of course</p>",
        "id": 183012635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575934730
    },
    {
        "content": "<p>But those both feel like special cased instances, not examples of a more general form ...?</p>",
        "id": 183012662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575934763
    },
    {
        "content": "<p>The version of <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/structural_match.rs#L65\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/structural_match.rs#L65\"><code>type_marked_structural</code></a> from <code>master</code> is returning <code>false</code> for <code>Option</code> at the moment, even though the <code>NoDerive</code> struct from your tests is <code>Sized</code> (obvs).</p>",
        "id": 183012666,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575934768
    },
    {
        "content": "<p>Anyway I need to go to bed now, itâ€™s well past my bedtime and Iâ€™m unwell</p>",
        "id": 183012696,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575934804
    },
    {
        "content": "<p>I don't know enough about patterns, but at least for <code>Option</code> it seems like the <code>Sized</code> bound is needed.</p>",
        "id": 183012743,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575934815
    },
    {
        "content": "<p>No problem! Get better.</p>",
        "id": 183012752,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1575934824
    },
    {
        "content": "<p>I'm gonna hit pause on this until I can land a refactoring of the <code>Qualif</code> trait. My hope is that people who know more about the <code>#[structural_match]</code>/<code>StructuralPartialEq</code> system will be empowered to switch to a MIR-based approach if the intended use of the <code>Qualif</code> trait is clearer.</p>",
        "id": 183110520,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576017812
    },
    {
        "content": "<p>I've been making a lot of dumb mistakes in this branch <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span>, and the refactoring will help me feel more productive as well.</p>",
        "id": 183110600,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576017864
    },
    {
        "content": "<p>I did a refactoring of the <code>Qualif</code> trait's API in <a href=\"https://github.com/rust-lang/rust/issues/67335\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67335\">#67335</a>, and a made a proof-of-concept for structural match qualification in <a href=\"https://github.com/rust-lang/rust/issues/67343\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67343\">#67343</a>. It's hard to implement <code>in_any_value_of_ty</code> precisely, since there's no trivial way to differentiate between a <code>struct</code> that implements <code>StructuralPartialEq</code> (which is always <code>structural_match</code>) and <code>Option&lt;T&gt;</code>(which is only sometimes <code>structural_match</code>).</p>",
        "id": 183520133,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576472826
    }
]