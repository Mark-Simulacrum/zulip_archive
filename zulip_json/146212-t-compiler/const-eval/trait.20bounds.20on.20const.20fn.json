[
    {
        "content": "<p>We can start experimenting with <code>const fn</code> that have trait bounds on their generic parameters</p>",
        "id": 183921727,
        "sender_full_name": "oli",
        "timestamp": 1576835455
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/rfcs/pull/2632#issuecomment-567699174\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2632#issuecomment-567699174\">https://github.com/rust-lang/rfcs/pull/2632#issuecomment-567699174</a> for the T-lang post</p>",
        "id": 183921744,
        "sender_full_name": "oli",
        "timestamp": 1576835476
    },
    {
        "content": "<p>This does not mean the current design is endorsed or can be stabilized without the RFC actually finishing, but it allows gated experimentation so we can hammer out the last kinks in the RFC</p>",
        "id": 183921795,
        "sender_full_name": "oli",
        "timestamp": 1576835522
    },
    {
        "content": "<p>I propse that <code>?const Trait</code> bounds are the first component of the RFC to get implemented</p>",
        "id": 183921848,
        "sender_full_name": "oli",
        "timestamp": 1576835584
    },
    {
        "content": "<p>I believe this would allow us to retire the <code>const_fn</code> feature gate once and for all, because there are no more features gated under it without the feature also having its own feature gate</p>",
        "id": 183921896,
        "sender_full_name": "oli",
        "timestamp": 1576835630
    },
    {
        "content": "<p>So basically on nightly, if you enable <code>const_fn</code>, you can declare trait bounds <code>T: Trait</code> on const fns, but you can't use them for anything but static dispatch to get associated constants and types (or methods, but not call said methods)</p>",
        "id": 183921973,
        "sender_full_name": "oli",
        "timestamp": 1576835686
    },
    {
        "content": "<p>This is exactly what <code>?const Trait</code> bounds do as per the RFC: <a href=\"https://github.com/oli-obk/rfcs/blob/const_generic_const_fn_bounds/text/0000-const-generic-const-fn-bounds.md#const-opt-out\" target=\"_blank\" title=\"https://github.com/oli-obk/rfcs/blob/const_generic_const_fn_bounds/text/0000-const-generic-const-fn-bounds.md#const-opt-out\">https://github.com/oli-obk/rfcs/blob/const_generic_const_fn_bounds/text/0000-const-generic-const-fn-bounds.md#const-opt-out</a></p>",
        "id": 183922019,
        "sender_full_name": "oli",
        "timestamp": 1576835728
    },
    {
        "content": "<p>After this change, using plain <code>T: Trait</code> bounds (other than <code>Sized</code>, which is stable) on const fns will become a hard error.</p>",
        "id": 183922110,
        "sender_full_name": "oli",
        "timestamp": 1576835808
    },
    {
        "content": "<p>As a parallel step, we can implement <code>impl const Trait</code>, requiring const fn checks for all methods on the impl.</p>",
        "id": 183922167,
        "sender_full_name": "oli",
        "timestamp": 1576835878
    },
    {
        "content": "<p>Following that we can implement logic to allow actually calling e.g. <code>i32::add</code> at compile-time</p>",
        "id": 183922243,
        "sender_full_name": "oli",
        "timestamp": 1576835921
    },
    {
        "content": "<p>and then as a final step we implement calling methods on generic parametes in const fns</p>",
        "id": 183922267,
        "sender_full_name": "oli",
        "timestamp": 1576835944
    },
    {
        "content": "<p>These four steps should be separate PRs and may even be split up further to separate the parser changes from the logic changes</p>",
        "id": 183922293,
        "sender_full_name": "oli",
        "timestamp": 1576835971
    },
    {
        "content": "<p>I have started a hack.md at <a href=\"https://hackmd.io/@oli-obk/generic_trait_bounds_on_const_fn\" target=\"_blank\" title=\"https://hackmd.io/@oli-obk/generic_trait_bounds_on_const_fn\">https://hackmd.io/@oli-obk/generic_trait_bounds_on_const_fn</a></p>",
        "id": 183922833,
        "sender_full_name": "oli",
        "timestamp": 1576836469
    },
    {
        "content": "<p>Lets do an experiment and try to keep this document up to date with our plan</p>",
        "id": 183922903,
        "sender_full_name": "oli",
        "timestamp": 1576836509
    },
    {
        "content": "<p>so we can always discuss here or on the hackmd comments, but then lift the result of these discussions back to the hackmd content</p>",
        "id": 183922942,
        "sender_full_name": "oli",
        "timestamp": 1576836543
    },
    {
        "content": "<p>do you want to start with <code>T: ?const Trait</code> because it's \"not yet universally clear if it's a good idea\" and validate/reject that hypothesis quickly ?</p>",
        "id": 183923176,
        "sender_full_name": "lqd",
        "timestamp": 1576836766
    },
    {
        "content": "<p>no, because we want <em>some</em> scheme like that, and we already do have that scheme on nightly essentially</p>",
        "id": 183923429,
        "sender_full_name": "oli",
        "timestamp": 1576837061
    },
    {
        "content": "<p>If we take away this scheme without a replacement, that will cause lots of churn (likely we can't boostrap anymore)</p>",
        "id": 183923480,
        "sender_full_name": "oli",
        "timestamp": 1576837099
    },
    {
        "content": "<p>hum ok, interesting, thanks oli</p>",
        "id": 183923625,
        "sender_full_name": "lqd",
        "timestamp": 1576837238
    },
    {
        "content": "<p>It's the only proposed syntax that I know of, so we may as well use it even if it's a controversial feature</p>",
        "id": 183923635,
        "sender_full_name": "oli",
        "timestamp": 1576837255
    },
    {
        "content": "<p>the feature is already implemented, we just need to change its syntax. We could use an attribute for it, but that seems not strictly better</p>",
        "id": 183923669,
        "sender_full_name": "oli",
        "timestamp": 1576837293
    },
    {
        "content": "<p>This gave me an idea. I updated the hackmd to reflect that we should just add this syntax and wait for a boostrap bump. That way we can change the syntax with zero churn</p>",
        "id": 183923738,
        "sender_full_name": "oli",
        "timestamp": 1576837329
    },
    {
        "content": "<p>we could even add a lint to give users the time between the syntax addition and the boostrap bump to migrate</p>",
        "id": 183923772,
        "sender_full_name": "oli",
        "timestamp": 1576837356
    },
    {
        "content": "<p>I don't think lints for nightly migration is necessary</p>",
        "id": 184199888,
        "sender_full_name": "centril",
        "timestamp": 1577243898
    },
    {
        "content": "<p>and I'd rather avoid the technical debt it comes with</p>",
        "id": 184199895,
        "sender_full_name": "centril",
        "timestamp": 1577243935
    },
    {
        "content": "<p>Also, I'd like to see <code>allow_internal_unstable(...)</code> not work for this</p>",
        "id": 184199986,
        "sender_full_name": "centril",
        "timestamp": 1577244003
    },
    {
        "content": "<p>(and it should not be possible to smuggle generics in even via intermediary associated constants)</p>",
        "id": 184200002,
        "sender_full_name": "centril",
        "timestamp": 1577244053
    },
    {
        "content": "<p>Also, any syntax we add should be pre-expansion gated</p>",
        "id": 184200009,
        "sender_full_name": "centril",
        "timestamp": 1577244073
    },
    {
        "content": "<p>I implemented the syntax in <a href=\"https://github.com/rust-lang/rust/issues/67820\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67820\">#67820</a>. I think I got the pre-expansion gating right. This PR has both the <code>?const</code> syntax and the <code>impl const Trait</code>, since they both end up in a single field in<code>TraitRef</code>. I could split them up without too much effort, but I didn't see the comment above about separating the two syntax PRs before it was too late.</p>",
        "id": 184697940,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578013615
    },
    {
        "content": "<p>Still coming out of a holiday-induced torpor.</p>",
        "id": 184697952,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578013635
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Adding a field to <code>Predicate::Trait</code> doesn't increase its size, and doing that feels better than adding a field for all <code>TraitRef</code>s. By the time something appears in a <code>Predicate</code>, we need to know if the trait impl is <code>const</code> or not, not just if <code>?const</code> appears on  the bounds (I think you were alluding to this in your GH comment). Changing how <code>?const</code> is stored in the AST/HIR could make this easier.</p>\n<p>Specifically, I want <code>?const</code> to be a <a href=\"https://github.com/rust-lang/rust/blob/0b6c116a84fb1dbb60b5870291f5d7df808c280d/src/libsyntax/ast.rs#L272\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0b6c116a84fb1dbb60b5870291f5d7df808c280d/src/libsyntax/ast.rs#L272\"><code>TraitBoundModifier</code></a> variant and <code>impl const</code> to be a field on <a href=\"https://github.com/rust-lang/rust/blob/0b6c116a84fb1dbb60b5870291f5d7df808c280d/src/libsyntax/ast.rs#L2617\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0b6c116a84fb1dbb60b5870291f5d7df808c280d/src/libsyntax/ast.rs#L2617\"><code>ItemKind::Impl</code></a>. I didn't do this in <a href=\"https://github.com/rust-lang/rust/issues/67820\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67820\">#67820</a> since <code>ItemKind::Impl</code> is matched exhaustively in a lot of places, which makes changing it a pain.</p>",
        "id": 185432522,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578832063
    },
    {
        "content": "<p>Also, I was thinking that trait bounds on <code>const fn</code> should only become<code>const</code> if <code>#![feature(const_trait_impl)]</code> is enabled. This would preserve the meaning of <code>const fn foo&lt;T: TraitWithAssocConst&gt;() {}</code> in code using <code>#![feature(const_fn)]</code> today. I think it's premature to break such code since RFC 2632 hasn't been accepted yet, but maybe you disagree.</p>",
        "id": 185432727,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578832443
    },
    {
        "content": "<p>I don't have as much time to work on rustc as I did last year, but I'll keep moving in this direction. I'll try to coordinate with you a bit better in the future.</p>",
        "id": 185432927,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1578832823
    },
    {
        "content": "<p>We are allowed to break the <code>const_fn</code> feature. In fact I hope we can eliminate it entirely after <code>?const</code> is implemented</p>",
        "id": 185471053,
        "sender_full_name": "oli",
        "timestamp": 1578901514
    },
    {
        "content": "<p>You can make it a TraitBoundModifier variant if you explicitly make <code>?const ?Trait</code> a hard error (and <code>??const Trait</code> as well)</p>",
        "id": 185471166,
        "sender_full_name": "oli",
        "timestamp": 1578901663
    },
    {
        "content": "<p>That's OK to do because opt outs are unstable except for <code>Sized</code></p>",
        "id": 185471206,
        "sender_full_name": "oli",
        "timestamp": 1578901682
    },
    {
        "content": "<p>And all <code>Sized</code> impls are <code>const</code></p>",
        "id": 185471214,
        "sender_full_name": "oli",
        "timestamp": 1578901705
    },
    {
        "content": "<p>Wrt ItemKind, seems unfortunate to add another field to this insanely big variant, but i don't see a better way, too</p>",
        "id": 185471251,
        "sender_full_name": "oli",
        "timestamp": 1578901781
    },
    {
        "content": "<p>If you want the breaking change to be less painful for nightly users you can keep allowing it under <code>const_fn</code> and we'll deprecate the feature in a separate PR</p>",
        "id": 185474210,
        "sender_full_name": "oli",
        "timestamp": 1578905023
    },
    {
        "content": "<p>Wrt time to work on it. Take all the time you need, there's no pressure. It's awesome that you are moving this forward!</p>",
        "id": 185474275,
        "sender_full_name": "oli",
        "timestamp": 1578905069
    },
    {
        "content": "<p>I would say the \"easy\" part is now implemented (parsing and lowering). I was wondering if <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> had any advice for the trait solving aspect. My conception was the following: use the trait solver to solve for the impl or bound that provides each method call during const-checking, then see if that impl is a <code>impl const Trait</code> or if the bound which provides is a <code>const</code> one (i.e. doesn't have the opt-out). As you can probably intuit, I don't have a great idea for what stage we associate method calls with inherent impls/generic bounds, so any pointers to code where similar things are done would be great.</p>",
        "id": 186333701,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1579729116
    },
    {
        "content": "<p>There's also the task of deprecating the current semantics for unadorned bounds in <code>const fn</code> and directing people to use <code>?const</code>. I had mentioned that it would be possible to have <code>#![feature(const_fn)]</code> preserve the existing semantics for trait bounds at the cost of slightly increased complexity in the const checker. I would have liked to have removed <code>qualify_min_const_fn</code> entirely by this point; it would have made the back-compat idea easier since <code>#![feature(const_fn)]</code> wouldn't serve double duty. Since that pass still exists, I think we should not try to do the back-compat thing.</p>",
        "id": 186334348,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1579729592
    },
    {
        "content": "<p>I think as  a first step we're going to need a query <code>is_const_impl</code> because otherwise we lose this information cross crate</p>",
        "id": 186397436,
        "sender_full_name": "oli",
        "timestamp": 1579792113
    },
    {
        "content": "<p>As a second step I'd recommend to implement a check that enforces that all functions inside an <code>impl const Trait</code> adhere to <code>const fn</code></p>",
        "id": 186397532,
        "sender_full_name": "oli",
        "timestamp": 1579792170
    },
    {
        "content": "<p>and only then do the trait solving (which as you correctly inferred is the hardest part here)</p>",
        "id": 186397715,
        "sender_full_name": "oli",
        "timestamp": 1579792260
    },
    {
        "content": "<p>you can still split this step into two</p>",
        "id": 186397776,
        "sender_full_name": "oli",
        "timestamp": 1579792289
    },
    {
        "content": "<p>actually... maybe even into three</p>",
        "id": 186397923,
        "sender_full_name": "oli",
        "timestamp": 1579792374
    },
    {
        "content": "<p>so the first substep could be to permit monomorphic calls to trait methods. So <code>const FOO: u32 = 1u32.add(2u32);</code></p>",
        "id": 186397999,
        "sender_full_name": "oli",
        "timestamp": 1579792436
    },
    {
        "content": "<p>and here's the point where I also don't know what parts of the compiler you need to touch</p>",
        "id": 186398084,
        "sender_full_name": "oli",
        "timestamp": 1579792470
    },
    {
        "content": "<p>the second substep would be to allow having trait bounds on generics of const fn and calling them inside the const fn</p>",
        "id": 186398148,
        "sender_full_name": "oli",
        "timestamp": 1579792509
    },
    {
        "content": "<p>the fourth substep would be to permit calls to generic const fn by doing the trait solving that you hinted at in your message</p>",
        "id": 186398190,
        "sender_full_name": "oli",
        "timestamp": 1579792545
    },
    {
        "content": "<blockquote>\n<p>so the first substep could be to permit monomorphic calls to trait methods. So <code>const FOO: u32 = 1u32.add(2u32);</code></p>\n</blockquote>\n<p>Note: do not change libcore/libstd yet, we first need a <code>rustc_const_unstable</code> scheme for that</p>",
        "id": 186398508,
        "sender_full_name": "oli",
        "timestamp": 1579792768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Sounds like a good plan. I'll work on the first two when I have time and try and find someone who's familiar with the trait solver API to point me in the right direction.</p>",
        "id": 186442447,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1579817837
    },
    {
        "content": "<p>The first two are done in <a href=\"https://github.com/rust-lang/rust/issues/68847\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68847\">#68847</a>. It's nice and small for now, although the test suite isn't complete and I haven't dealt with <code>rustc_const_unstable</code>. I've also looked into the type param part a bit more. My tentative plan is to make the trait solver/method prober return the \"root predicate\" where it found a trait method. Still not sure how easy/hard this will be. An alternative is to have the trait solver actually consider the constness of impls/bounds when solving, and have type checking run in the current, const-unaware mode and const-checking ran in the const-aware mode.</p>",
        "id": 187426581,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1580880260
    }
]