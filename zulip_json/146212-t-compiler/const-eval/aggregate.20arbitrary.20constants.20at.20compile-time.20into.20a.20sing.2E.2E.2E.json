[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Filter.20out.20query.20machinery.20from.20compiler.20.E2.80.A6.20compiler-team.23410/near/228753293\">said</a>:</p>\n<blockquote>\n<p>it's pretty much exactly that, except imo it's less hacky than the <code>linkme</code> crate, as it does not rely on linker functionality. It's the MVP needed for <a href=\"https://github.com/rust-lang/const-eval/issues/25#issuecomment-533840428\">https://github.com/rust-lang/const-eval/issues/25#issuecomment-533840428</a> (which itself is desirable for custom test harnesses, tracing metadata and custom const-evaluated artifacts).</p>\n</blockquote>\n<p>I'm just saying that feels like a major language (CTFE) feature on its own right that requires an RFC. There's a large design space here. I was very surprised to see this \"en passant\" in what is superficially an unrelated proposal.^^</p>",
        "id": 228918016,
        "sender_full_name": "RalfJ",
        "timestamp": 1614934429
    },
    {
        "content": "<p>well... it's going to be a really unstable rustc attribute with no intention of getting stabilized. I thought this a situation like <code>rustc_scalar_range_start</code> which is the attribute that gives us the <code>NonZero</code> types</p>",
        "id": 228921712,
        "sender_full_name": "oli",
        "timestamp": 1614935636
    },
    {
        "content": "<p>that attribute is a very thin layer on top of an already existing rustc feature</p>",
        "id": 228922220,
        "sender_full_name": "RalfJ",
        "timestamp": 1614935900
    },
    {
        "content": "<p>this here, OTOH, will require some major infrastructure</p>",
        "id": 228922230,
        "sender_full_name": "RalfJ",
        "timestamp": 1614935908
    },
    {
        "content": "<p>the \"only\" new thing is the generation of the constant in the end. We already have such \"attribute collection queries\" (<code>rustc_diagnostic_item</code> works pretty much the same way). I agree that the nice way would be to first RFC a proper feature here, but it also feels like a feature I don't really want to RFC in the next year or so as wg-const-eval has enough unfinished features on its plate</p>",
        "id": 228923032,
        "sender_full_name": "oli",
        "timestamp": 1614936307
    },
    {
        "content": "<p>I'm not sure if this is related, but I really would love to see \"a built-in version of <code>linkme</code>\": <a href=\"https://github.com/rust-lang/rust/issues/82371#issuecomment-784421726\">https://github.com/rust-lang/rust/issues/82371#issuecomment-784421726</a></p>",
        "id": 228928834,
        "sender_full_name": "hyd-dev",
        "timestamp": 1614939114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Filter.20out.20query.20machinery.20from.20compiler.20.E2.80.A6.20compiler-team.23410/near/228922220\">said</a>:</p>\n<blockquote>\n<p>that attribute is a very thin layer on top of an already existing rustc feature</p>\n</blockquote>\n<p>also remember that this feature was unsound for quite some time until we fixed the unsafety checker. So it's not a great example for \"ad-hoc language extension gone well\".^^</p>",
        "id": 228931856,
        "sender_full_name": "RalfJ",
        "timestamp": 1614940590
    },
    {
        "content": "<blockquote>\n<p>the \"only\" new thing is the generation of the constant in the end.</p>\n</blockquote>\n<p>We need at least two mechanisms that work together: to \"register\" an element to be part of this slice (const-eval with side-effects, that sounds tricky), and then at link time something to collect all pieces of the slice and put them into the original slice variable. We need to ensure that CTFE doesn't read from these slices as that would create funny cycles. I think there are quite a few subtleties here.</p>",
        "id": 228932084,
        "sender_full_name": "RalfJ",
        "timestamp": 1614940740
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Filter.20out.20query.20machinery.20from.20compiler.20.E2.80.A6.20compiler-team.23410\">#t-compiler/major changes &gt; Filter out query machinery from compiler â€¦ compiler-team#410</a> by <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span></p>",
        "id": 228935069,
        "sender_full_name": "Notification Bot",
        "timestamp": 1614942370
    },
    {
        "content": "<p>Well... for this initial impl I wasn't actually going to have constants being registered, but instead collected the functions' <code>ty::Instance</code> directly (at monomorphization time). The only interaction with CTFE would have been a forever unstable intrinsic that returns a slice of <code>*const ()</code>. In <code>rustc_driver</code> I would have then done something like <code>static FOO: &amp;[*const ()] = that_intrinsic();</code></p>",
        "id": 228935363,
        "sender_full_name": "oli",
        "timestamp": 1614942540
    },
    {
        "content": "<p>so there's no way to create a cycle, as you only get that one static in the end, and it doesn't actually refer to other statics</p>",
        "id": 228935423,
        "sender_full_name": "oli",
        "timestamp": 1614942576
    },
    {
        "content": "<p>you can't mark that static in a way that would get it collected for itself</p>",
        "id": 228935491,
        "sender_full_name": "oli",
        "timestamp": 1614942602
    },
    {
        "content": "<p>of course the real feature we want here is to have an attribute that can be applied to constants, and that collects the result of those constants and allows another constant to be created from those collected results</p>",
        "id": 228935652,
        "sender_full_name": "oli",
        "timestamp": 1614942658
    },
    {
        "content": "<p>but as you noted, that has lots of pitfalls that need to be considered</p>",
        "id": 228935718,
        "sender_full_name": "oli",
        "timestamp": 1614942680
    },
    {
        "content": "<blockquote>\n<p>also remember that this feature was unsound for quite some time until we fixed the unsafety checker. So it's not a great example for \"ad-hoc language extension gone well\".^^</p>\n</blockquote>\n<p>well... in this case the worst case outcome is badly printed backtraces when using <code>RUST_BACKTRACE=1</code> instead of <code>RUST_BACKTRACE=full</code>... and only the backtraces of compiler ICEs are changed at all</p>",
        "id": 228936587,
        "sender_full_name": "oli",
        "timestamp": 1614943095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/aggregate.20arbitrary.20constants.20at.20compile-time.20into.20a.20sing.2E.2E.2E/near/228935363\">said</a>:</p>\n<blockquote>\n<p>Well... for this initial impl I wasn't actually going to have constants being registered, but instead collected the functions' <code>ty::Instance</code> directly (at monomorphization time). The only interaction with CTFE would have been a forever unstable intrinsic that returns a slice of <code>*const ()</code>. In <code>rustc_driver</code> I would have then done something like <code>static FOO: &amp;[*const ()] = that_intrinsic();</code></p>\n</blockquote>\n<p>I see, and the intrinsic would walk the crate tree and gather that list of functions?</p>",
        "id": 228994759,
        "sender_full_name": "RalfJ",
        "timestamp": 1614966387
    },
    {
        "content": "<p>oh no... \"at monomorphization time\", how is that supposed to work? can CTFE be delayed until all monomorphization is done?</p>",
        "id": 228994831,
        "sender_full_name": "RalfJ",
        "timestamp": 1614966426
    },
    {
        "content": "<p>well... yea, that is a problem. It won't work for the current crate ^^ you can only collect things from other crates</p>",
        "id": 228995438,
        "sender_full_name": "oli",
        "timestamp": 1614966668
    },
    {
        "content": "<p>but, that is fine for the rustc_driver case</p>",
        "id": 228995476,
        "sender_full_name": "oli",
        "timestamp": 1614966678
    },
    {
        "content": "<p>I dont see how \"its in other crates\" helps; rustc_driver might well be monomorphizing rustc_mir things</p>",
        "id": 229002655,
        "sender_full_name": "RalfJ",
        "timestamp": 1614969365
    },
    {
        "content": "<p>hmm that is true</p>",
        "id": 229004607,
        "sender_full_name": "oli",
        "timestamp": 1614970166
    },
    {
        "content": "<p>I guess for the local crate we'd have to do something hacky like create an <code>AllocId</code> but not actually back it with data and then fill it in after collection</p>",
        "id": 229004742,
        "sender_full_name": "oli",
        "timestamp": 1614970215
    },
    {
        "content": "<p>Just pass by to say i'm a fan of this feature. Currently i'm using <code>linkme</code> in my own crates, which triggers some seemingly hard-to-fix bugs of the LLVM interaction, and i have to use workarounds. I really wish this is part of the language.</p>",
        "id": 230130025,
        "sender_full_name": "Charles Lew",
        "timestamp": 1615604637
    }
]