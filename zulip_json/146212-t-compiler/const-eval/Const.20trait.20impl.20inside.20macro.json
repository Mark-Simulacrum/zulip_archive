[
    {
        "content": "<p>Hello. I was wondering if someone could help me figure out why the following does not compile: </p>\n<div class=\"codehilite\"><pre><span></span><code>#![feature(const_mut_refs)]\n#![feature(const_fn_trait_bound)]\n#![feature(const_trait_impl)]\n\npub struct Test&lt;T&gt;(T);\n\n// This does not work:\nmacro_rules! impl_copy_clone {\n    () =&gt; (\n        impl&lt;T: Copy&gt; const Copy for Test&lt;T&gt; {}\n\n        impl&lt;T: Copy + Clone&gt; const Clone for Test&lt;T&gt; {\n            fn clone(&amp;self) -&gt; Self {\n                Self(self.0)\n            }\n\n            fn clone_from(&amp;mut self, source: &amp;Self) {\n                *self = source.clone()\n            }\n        }\n    )\n}\n\nimpl_copy_clone!();\n\n// This works:\n\nimpl&lt;T: Copy&gt; const Copy for Test&lt;T&gt; {}\n\nimpl&lt;T: Copy + Clone&gt; const Clone for Test&lt;T&gt; {\n    fn clone(&amp;self) -&gt; Self {\n        Self(self.0)\n    }\n\n    fn clone_from(&amp;mut self, source: &amp;Self) {\n        *self = source.clone()\n    }\n}\n</code></pre></div>\n<p>It gives the following error:</p>\n<div class=\"codehilite\"><pre><span></span><code>   |\n12 | /         impl&lt;T: Copy + Clone&gt; const Clone for Test&lt;T&gt; {\n13 | |             fn clone(&amp;self) -&gt; Self {\n14 | |                 Self(self.0)\n15 | |             }\n...  |\n19 | |             }\n20 | |         }\n   | |_________^\n...\n24 |   impl_copy_clone!();\n   |   ------------------- in this macro invocation\n   |\n   = note: `clone_from` not implemented\n</code></pre></div>\n<p>Link to Rust playground: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0b1e69165fc36765d4063b0edca2adae\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0b1e69165fc36765d4063b0edca2adae</a></p>",
        "id": 255880115,
        "sender_full_name": "chocolate",
        "timestamp": 1633190358
    },
    {
        "content": "<p>We don't support default implementations of trait methods properly. You need to implement all methods, even ones with a default body</p>",
        "id": 255882470,
        "sender_full_name": "oli",
        "timestamp": 1633192760
    },
    {
        "content": "<p>No, this is related to Ident being used instead of Symbol to compare method names.</p>",
        "id": 255882554,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633192823
    },
    {
        "content": "<p>Working on a fix now</p>",
        "id": 255882559,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633192826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Const.20trait.20impl.20inside.20macro/near/255882470\">said</a>:</p>\n<blockquote>\n<p>We don't support default implementations of trait methods properly. You need to implement all methods, even ones with a default body</p>\n</blockquote>\n<p>That's what I am doing. I am implementing the default method also.</p>",
        "id": 255882580,
        "sender_full_name": "chocolate",
        "timestamp": 1633192847
    },
    {
        "content": "<p>Oh, yea sorry, didn't read the code properly.</p>",
        "id": 255882605,
        "sender_full_name": "oli",
        "timestamp": 1633192882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Const.20trait.20impl.20inside.20macro/near/255882559\">said</a>:</p>\n<blockquote>\n<p>Working on a fix now</p>\n</blockquote>\n<p>Great! Is there a git issue I can follow?</p>",
        "id": 255882942,
        "sender_full_name": "chocolate",
        "timestamp": 1633193196
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/89471\">#89471</a></p>",
        "id": 255887478,
        "sender_full_name": "Gary Guo",
        "timestamp": 1633197840
    }
]