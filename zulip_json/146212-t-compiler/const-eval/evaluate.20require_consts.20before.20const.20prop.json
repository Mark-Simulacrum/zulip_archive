[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you told me to move evaluation of required_consts before const prop</p>",
        "id": 239674049,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621552778
    },
    {
        "content": "<p>we've talked about doing so right before <a href=\"https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/transform/const_prop.rs#L151\">https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/transform/const_prop.rs#L151</a></p>",
        "id": 239674116,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621552807
    },
    {
        "content": "<p>right before that there's a call to <code>ConstPropagator::new</code></p>",
        "id": 239674159,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621552843
    },
    {
        "content": "<p>inside <code>ConstPropagator::new</code> we do <a href=\"https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/transform/const_prop.rs#L397-L402\">https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/transform/const_prop.rs#L397-L402</a></p>",
        "id": 239674233,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621552892
    },
    {
        "content": "<p>which does <a href=\"https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/interpret/eval_context.rs#L691-L702\">https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/interpret/eval_context.rs#L691-L702</a></p>",
        "id": 239674290,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621552927
    },
    {
        "content": "<p>so we are already evaluating things</p>",
        "id": 239674310,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621552940
    },
    {
        "content": "<p>so ... does that mean that we should already be able to just remove <code>Span</code> from <code>Constant</code> and shouldn't have any issue or am I missing something?</p>",
        "id": 239674367,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621553026
    },
    {
        "content": "<p>well ... I think the problem is that we are throwing away the result of the evaluation <a href=\"https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/interpret/eval_context.rs#L701\">https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/interpret/eval_context.rs#L701</a>, right?</p>",
        "id": 239674462,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621553106
    },
    {
        "content": "<p>I guess we should place that back into MIR's body?</p>",
        "id": 239674573,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621553181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/evaluate.20require_consts.20before.20const.20prop/near/239674233\">said</a>:</p>\n<blockquote>\n<p>inside <code>ConstPropagator::new</code> we do <a href=\"https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/transform/const_prop.rs#L397-L402\">https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/transform/const_prop.rs#L397-L402</a></p>\n</blockquote>\n<p>that pushes a dummy body</p>",
        "id": 239679675,
        "sender_full_name": "oli",
        "timestamp": 1621557049
    },
    {
        "content": "<p>not the one being optimized</p>",
        "id": 239679687,
        "sender_full_name": "oli",
        "timestamp": 1621557056
    },
    {
        "content": "<p>and the dummy has no required_consts</p>",
        "id": 239679699,
        "sender_full_name": "oli",
        "timestamp": 1621557067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/evaluate.20require_consts.20before.20const.20prop/near/239674462\">said</a>:</p>\n<blockquote>\n<p>well ... I think the problem is that we are throwing away the result of the evaluation <a href=\"https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/interpret/eval_context.rs#L701\">https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/interpret/eval_context.rs#L701</a>, right?</p>\n</blockquote>\n<p>the const evaluator is the wrong place. it cannot modify MIR</p>",
        "id": 239679727,
        "sender_full_name": "oli",
        "timestamp": 1621557097
    },
    {
        "content": "<p>it only has read access</p>",
        "id": 239679731,
        "sender_full_name": "oli",
        "timestamp": 1621557101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/evaluate.20require_consts.20before.20const.20prop/near/239679699\">said</a>:</p>\n<blockquote>\n<p>and the dummy has no required_consts</p>\n</blockquote>\n<p>ok, I'm not sure what's the purpose of this but I guess I'd need to do something similar to what <code>push_stack_frame</code> does but for the optimized body</p>",
        "id": 239771520,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621611925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/evaluate.20require_consts.20before.20const.20prop/near/239679727\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/evaluate.20require_consts.20before.20const.20prop/near/239674462\">said</a>:</p>\n<blockquote>\n<p>well ... I think the problem is that we are throwing away the result of the evaluation <a href=\"https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/interpret/eval_context.rs#L701\">https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/interpret/eval_context.rs#L701</a>, right?</p>\n</blockquote>\n<p>the const evaluator is the wrong place. it cannot modify MIR</p>\n</blockquote>\n<p>got it so will do right before <a href=\"https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/transform/const_prop.rs#L151\">https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_mir/src/transform/const_prop.rs#L151</a> as you've said</p>",
        "id": 239771884,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1621612076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/evaluate.20require_consts.20before.20const.20prop/near/239674049\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> you told me to move evaluation of required_consts before const prop</p>\n</blockquote>\n<p>could you give some context? what do you mean by this, and why do you want to do this?</p>",
        "id": 239867895,
        "sender_full_name": "RalfJ",
        "timestamp": 1621684578
    },
    {
        "content": "<p>note that this is not possible in general since evaluating the const might require monomorphization</p>",
        "id": 239867902,
        "sender_full_name": "RalfJ",
        "timestamp": 1621684592
    },
    {
        "content": "<p>so there can't be any \"moving\" this earlier</p>",
        "id": 239867907,
        "sender_full_name": "RalfJ",
        "timestamp": 1621684602
    },
    {
        "content": "<p>but what we could do (and what it sounds like you want to do) is to eagerly evaluate the consts that we can pre-monomorphization and put their result into the MIR.</p>",
        "id": 239867927,
        "sender_full_name": "RalfJ",
        "timestamp": 1621684640
    },
    {
        "content": "<p>That's what we're trying to do here. This will cover a lot of cases already and then we can remove the spans from mir::Constant as we don't need the precise spans anymore. The spans and errors are handled on required consts from then on, allowing you to know that any evaluation will succeed and thus we can ICE if it doesn't</p>",
        "id": 239868189,
        "sender_full_name": "oli",
        "timestamp": 1621684875
    },
    {
        "content": "<p>CTFE will still have to do some fancy dancing with promoteds, as these can't all be pre evaluated, but we can still pick up the span from the required const list instead of having a bad span at the operand level</p>",
        "id": 239868254,
        "sender_full_name": "oli",
        "timestamp": 1621684940
    },
    {
        "content": "<blockquote>\n<p>allowing you to know that any evaluation will succeed</p>\n</blockquote>\n<p>you have no way to know that</p>",
        "id": 239868399,
        "sender_full_name": "RalfJ",
        "timestamp": 1621685065
    },
    {
        "content": "<p>since you can only evaluate some of the required_consts early (pre-monomorph)</p>",
        "id": 239868411,
        "sender_full_name": "RalfJ",
        "timestamp": 1621685088
    },
    {
        "content": "<p>those that you cannot (because they depend on generic params, e.g. associated consts), you have to still fully support to fail later along the chain (i.e., during monomorphization)</p>",
        "id": 239868426,
        "sender_full_name": "RalfJ",
        "timestamp": 1621685105
    },
    {
        "content": "<p>(and yes, on top of that promoteds in const/static bodies -- and only there -- can fail to evaluate)</p>",
        "id": 239868503,
        "sender_full_name": "RalfJ",
        "timestamp": 1621685169
    },
    {
        "content": "<blockquote>\n<p>since you can only evaluate some of the required_consts early (pre-monomorph)</p>\n</blockquote>\n<p>By fail, I mean to have an actual error, not simply be <code>TooGeneric</code></p>",
        "id": 239873329,
        "sender_full_name": "oli",
        "timestamp": 1621690540
    },
    {
        "content": "<p>All of this work here is just about precise spans. We're not changing any behaviour wrt what compiles and what not</p>",
        "id": 239873397,
        "sender_full_name": "oli",
        "timestamp": 1621690579
    },
    {
        "content": "<p>But during codegen, we know for a fact that no evaluation of constants in operands can fail, as all required const already got evaluated successfully</p>",
        "id": 239873434,
        "sender_full_name": "oli",
        "timestamp": 1621690652
    },
    {
        "content": "<p>So we do not need good spans in operands</p>",
        "id": 239873443,
        "sender_full_name": "oli",
        "timestamp": 1621690664
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/evaluate.20require_consts.20before.20const.20prop/near/239873434\">said</a>:</p>\n<blockquote>\n<p>But during codegen, we know for a fact that no evaluation of constants in operands can fail, as all required const already got evaluated successfully</p>\n</blockquote>\n<p>define \"during codegen\". we don't know it in <a href=\"https://github.com/rust-lang/rust/blob/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473/compiler/rustc_codegen_ssa/src/mir/mod.rs#L192\">this loop</a>. we only know it <em>after</em> that loop. but I don't see how that helps wrt preserving spans.</p>",
        "id": 239873498,
        "sender_full_name": "RalfJ",
        "timestamp": 1621690705
    },
    {
        "content": "<blockquote>\n<p>The spans and errors are handled on required consts from then on</p>\n</blockquote>\n<p>I am trying to read between your words here, are you saying <code>required_consts</code> becomes something like <code>Vec&lt;(Const, Span)&gt;</code>?<br>\n(it'd help if the complete proposal was explained in slightly more concrete terms.^^)</p>",
        "id": 239873548,
        "sender_full_name": "RalfJ",
        "timestamp": 1621690803
    },
    {
        "content": "<p>Yes that's what it becomes and is already in <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> 's PR</p>",
        "id": 239873620,
        "sender_full_name": "oli",
        "timestamp": 1621690846
    },
    {
        "content": "<p>okay. so in that loop you are fine then.</p>",
        "id": 239873653,
        "sender_full_name": "RalfJ",
        "timestamp": 1621690891
    },
    {
        "content": "<p>Sorry about the confusion, this is all spread discussion across 3 places</p>",
        "id": 239873656,
        "sender_full_name": "oli",
        "timestamp": 1621690896
    },
    {
        "content": "<p>which I guess finally gets us back to the question you raised earlier -- what about promoteds in const/static bodies? those are not required and they can fail.</p>",
        "id": 239873667,
        "sender_full_name": "RalfJ",
        "timestamp": 1621690918
    },
    {
        "content": "<p>We can walk the required const list and search it for the right span</p>",
        "id": 239874052,
        "sender_full_name": "oli",
        "timestamp": 1621691309
    },
    {
        "content": "<p>promoteds are not in that list though</p>",
        "id": 239880227,
        "sender_full_name": "RalfJ",
        "timestamp": 1621696917
    },
    {
        "content": "<p>(and they shouldnt be, they are not required)</p>",
        "id": 239880266,
        "sender_full_name": "RalfJ",
        "timestamp": 1621696926
    },
    {
        "content": "<p>that's the entire problem^^</p>",
        "id": 239880269,
        "sender_full_name": "RalfJ",
        "timestamp": 1621696929
    },
    {
        "content": "<p>Ah right</p>",
        "id": 239880330,
        "sender_full_name": "oli",
        "timestamp": 1621696998
    },
    {
        "content": "<p>Ah, but promoteds are not a problem, as we already report anything directly where it happens inside the promoted's body</p>",
        "id": 239880470,
        "sender_full_name": "oli",
        "timestamp": 1621697149
    },
    {
        "content": "<p>All we care about is named constants I guess</p>",
        "id": 239880531,
        "sender_full_name": "oli",
        "timestamp": 1621697195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/evaluate.20require_consts.20before.20const.20prop/near/239880470\">said</a>:</p>\n<blockquote>\n<p>Ah, but promoteds are not a problem, as we already report anything directly where it happens inside the promoted's body</p>\n</blockquote>\n<p>ah and those spans are actually inside the relevant constant... yeah that should work</p>",
        "id": 239884568,
        "sender_full_name": "RalfJ",
        "timestamp": 1621701272
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/evaluate.20require_consts.20before.20const.20prop/near/239873620\">said</a>:</p>\n<blockquote>\n<p>Yes that's what it becomes and is already in <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> 's PR</p>\n</blockquote>\n<p>do you have a link to that PR?</p>",
        "id": 239884613,
        "sender_full_name": "RalfJ",
        "timestamp": 1621701306
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/85208\">https://github.com/rust-lang/rust/pull/85208</a> but maybe I saw commits on other branches instead of on that PR</p>",
        "id": 239889886,
        "sender_full_name": "oli",
        "timestamp": 1621706845
    }
]