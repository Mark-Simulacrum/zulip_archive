[
    {
        "content": "<p>I am currently looking into using ptr equality when comparing <code>ty::Const</code>.</p>\n<p>As this would break interning afaict, I added a new struct <code>InternedConst</code> for which I derived all of <code>Hash</code>, <code>Eq</code> and <code>HashStable</code>. I use this as a <code>value</code> in <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/sharded/type.ShardedHashMap.html#method.intern\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/sharded/type.ShardedHashMap.html#method.intern</a></p>",
        "id": 199212569,
        "sender_full_name": "lcnr",
        "timestamp": 1590786679
    },
    {
        "content": "<p>This leads to the following errors however:</p>\n<div class=\"codehilite\"><pre><span></span><code>forcing query with already existing `DepNode`\n- query-key: Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [Binder(TraitPredicate(&lt;[T; N] as array::LengthAtMost32&gt;)), Binder(TraitPredicate(&lt;T as marker::Sized&gt;))], reveal: UserFacing, def_id: None }, value: array::iter::IntoIter&lt;T, N&gt; } }\n- dep-node: implied_outlives_bounds(4f246e06f2621b4f-6e0eacf16f43cb9)\n</code></pre></div>",
        "id": 199212621,
        "sender_full_name": "lcnr",
        "timestamp": 1590786712
    },
    {
        "content": "<p>I probably have a fundamental misunderstanding here and need some pointers to make progress.</p>",
        "id": 199212905,
        "sender_full_name": "lcnr",
        "timestamp": 1590786807
    },
    {
        "content": "<p><code>ty::Const</code> is inherently broken for basically anything but integer constants and <code>&amp;str</code> and <code>&amp;[u8]</code></p>",
        "id": 199247203,
        "sender_full_name": "oli",
        "timestamp": 1590830183
    },
    {
        "content": "<p>I'm not sure how you're intending to use <code>InternedConst</code> and what criteria something needs to fulfil to be a legal <code>InternedConst</code></p>",
        "id": 199247265,
        "sender_full_name": "oli",
        "timestamp": 1590830311
    },
    {
        "content": "<p>can you elaborate on how you're planning to use it?</p>",
        "id": 199247266,
        "sender_full_name": "oli",
        "timestamp": 1590830318
    },
    {
        "content": "<blockquote>\n<p>ty::Const is inherently broken for basically anything but integer constants and &amp;str and &amp;[u8]</p>\n</blockquote>\n<p>can you elaborate here?</p>",
        "id": 199247376,
        "sender_full_name": "lcnr",
        "timestamp": 1590830520
    },
    {
        "content": "<p>There are a few things happening here: two constants of type <code>&amp;i32</code> do not necessarily compare equal (and I mean the <code>PartialEq</code> impl on <code>ty::Const</code>)</p>",
        "id": 199247438,
        "sender_full_name": "oli",
        "timestamp": 1590830593
    },
    {
        "content": "<p>An <code>Unevaluated</code> <code>ty::Const</code> is not equal to any other unevaluated const</p>",
        "id": 199247439,
        "sender_full_name": "oli",
        "timestamp": 1590830612
    },
    {
        "content": "<p>or even an evaluated const</p>",
        "id": 199247441,
        "sender_full_name": "oli",
        "timestamp": 1590830616
    },
    {
        "content": "<p>even if evaluation were possible and yielded the same result</p>",
        "id": 199247443,
        "sender_full_name": "oli",
        "timestamp": 1590830623
    },
    {
        "content": "<p>A static's <code>ty::Const</code> is never equal to any other <code>ty::Const</code></p>",
        "id": 199247486,
        "sender_full_name": "oli",
        "timestamp": 1590830657
    },
    {
        "content": "<p>I probably forgot some others</p>",
        "id": 199247489,
        "sender_full_name": "oli",
        "timestamp": 1590830668
    },
    {
        "content": "<p>we want to move to a scheme where we have something like <code>ty::Const</code> and <code>mir::Const</code>, where the latter works like today's <code>ty::Const</code> and the former is an integer value tree that is guaranteed normalized and where if <code>PartialEq</code> compares equal, the pointer address of the <code>&amp;'tcx ty::Const</code> compares equal, too</p>",
        "id": 199247513,
        "sender_full_name": "oli",
        "timestamp": 1590830741
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> openend an issue recently about this</p>",
        "id": 199247555,
        "sender_full_name": "oli",
        "timestamp": 1590830790
    },
    {
        "content": "<p>let's move this discussion to <a class=\"stream\" data-stream-id=\"146212\" href=\"/#narrow/stream/146212-t-compiler.2Fconst-eval\">#t-compiler/const-eval</a></p>",
        "id": 199247560,
        "sender_full_name": "oli",
        "timestamp": 1590830810
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"182449\" href=\"/#narrow/stream/182449-t-compiler.2Fhelp/topic/.2372675.3A.20Eq.20using.20ptr.20equality.20for.20Consts\">#t-compiler/help &gt; #72675: Eq using ptr equality for Consts</a> by <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span></p>",
        "id": 199247572,
        "sender_full_name": "Notification Bot",
        "timestamp": 1590830839
    },
    {
        "content": "<blockquote>\n<p>can you elaborate on how you're planning to use it?</p>\n</blockquote>\n<p>similar to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/mod.rs.html#631-636\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_middle/ty/mod.rs.html#631-636</a></p>",
        "id": 199247645,
        "sender_full_name": "lcnr",
        "timestamp": 1590830967
    },
    {
        "content": "<p>Looking at your above explanation, it might be better to instead stop implementing <code>PartialEq</code> for <code>Const</code> entirely <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\nNot sure if we dedup consts somewhere, which would require <code>PartialEq</code> and would actually gain something from this change</p>",
        "id": 199247739,
        "sender_full_name": "lcnr",
        "timestamp": 1590831106
    },
    {
        "content": "<blockquote>\n<p>I'm not sure how you're intending to use InternedConst and what criteria something needs to fulfil to be a legal InternedConst </p>\n</blockquote>\n<p>We intern <code>TyS</code> by comparing <code>TyKind</code> which has an actual <code>PartialEq</code> implementation.<br>\nSo if we change <code>Const</code> to use pointer equality, we have to change the way we check for equality when interning a new consts,<br>\nas using the <code>ptr</code> there would always return <code>false</code>.</p>",
        "id": 199247863,
        "sender_full_name": "lcnr",
        "timestamp": 1590831318
    },
    {
        "content": "<p>This is what I am trying to do by using <code>InternedConst</code>.</p>",
        "id": 199247868,
        "sender_full_name": "lcnr",
        "timestamp": 1590831349
    },
    {
        "content": "<p>That's why we want to replace <code>ty::Const</code> with a sound alternative</p>",
        "id": 199248291,
        "sender_full_name": "oli",
        "timestamp": 1590831953
    },
    {
        "content": "<p>it's not sound right now, but it's not too much of a problem because that only would be a problem for <code>usize</code> (array lengths), where it is actually working as expected</p>",
        "id": 199248337,
        "sender_full_name": "oli",
        "timestamp": 1590831996
    },
    {
        "content": "<p>also see <a href=\"https://github.com/rust-lang/rust/issues/70889\">https://github.com/rust-lang/rust/issues/70889</a></p>",
        "id": 199248603,
        "sender_full_name": "RalfJ",
        "timestamp": 1590832389
    }
]