[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> -- I'm trying to dig more into the lazy normalization situation. I've asked before but I'm looking for a simple example of the sort of thing that causes a problem today (I'm trying to prep a plan as part of Traits WG, and having concrete example to work from would be great). Skimming github issue threads etc I didn't find what I was looking for.</p>\n<p>I do have this example (<a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=76bc33f1650f6cb373608e9b5e28c35f\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=76bc33f1650f6cb373608e9b5e28c35f\">playground</a>):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bytes</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>but right now it errors out because it can't prove <code>T: Sized</code>. I have some vague memory that maybe we don't use the true parameter environment (because of cycles, perhaps?) and hence this is why we have this problem?</p>",
        "id": 159361424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551120562
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> are you familiar with this question as well?</p>",
        "id": 159445659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551205978
    },
    {
        "content": "<p>So... the array length constant is essentially a new (but anonymous) item. Unlike associated constants they do not look into their parents for generics.  I wonder if it would be enough to just treat them like impl trait (anonymous existential types) and give them access to their parent's scope. I mean this would be easy to feature gate, so we can experiment. I don't see anything immediately problematic.</p>",
        "id": 159445946,
        "sender_full_name": "oli",
        "timestamp": 1551206235
    },
    {
        "content": "<p>Hmm.</p>",
        "id": 159445979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206272
    },
    {
        "content": "<p>Cycles already exist if we try to use anything interesting from <code>Foo</code> during the computation of the array length:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">bytes</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 159446026,
        "sender_full_name": "oli",
        "timestamp": 1551206283
    },
    {
        "content": "<p>That's a different cycle</p>",
        "id": 159446040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206292
    },
    {
        "content": "<p>That is, it seems like a kind of \"legit\" cycle</p>",
        "id": 159446058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206310
    },
    {
        "content": "<p>it is, but I don't see how going directly through <code>T</code> could be worse</p>",
        "id": 159446059,
        "sender_full_name": "oli",
        "timestamp": 1551206311
    },
    {
        "content": "<p>Oh, I would expect the code above to work</p>",
        "id": 159446069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206323
    },
    {
        "content": "<p>so would I. I understood your question as \"is there code that would fail even though we'd think it was sane\"</p>",
        "id": 159446113,
        "sender_full_name": "oli",
        "timestamp": 1551206361
    },
    {
        "content": "<p>but I'm trying to get at the problem that <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is talking about where const generics are blocked on lazy norm. I think a better example is :</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>where here the problem would be that to \"normalize\" the <code>22</code> expression (compute its value), we would need to know the predicates from the surrounding fn, but of course to get those we have to normalize.</p>\n<p>We solve this for associated types with a rather special purpose evaluation.</p>",
        "id": 159446126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206378
    },
    {
        "content": "<p>I've asked them for examples before and I can't seem to find those messages in my chat history</p>",
        "id": 159446197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206412
    },
    {
        "content": "<p>normalizing the <code>22</code> would probably not immediately cause cycles. Only if the value actually tried to use <code>T</code> in an interesting manner</p>",
        "id": 159446256,
        "sender_full_name": "oli",
        "timestamp": 1551206471
    },
    {
        "content": "<p>we're probably going to have some degenerate cases, but these are errors where we want to allow something and not the inverse</p>",
        "id": 159446366,
        "sender_full_name": "oli",
        "timestamp": 1551206526
    },
    {
        "content": "<p>I don't think that's true</p>",
        "id": 159446433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206559
    },
    {
        "content": "<p>That is, I think that -- if we use a naive impl -- any normalization would trigger a cycle</p>",
        "id": 159446454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206572
    },
    {
        "content": "<p>because of the <code>ParamEnv</code> computation?</p>",
        "id": 159446506,
        "sender_full_name": "oli",
        "timestamp": 1551206604
    },
    {
        "content": "<p>( just because we are invoking <code>predicates_of</code> )</p>",
        "id": 159446510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206606
    },
    {
        "content": "<p>let me go review how the code is setup here I guess</p>",
        "id": 159446552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206639
    },
    {
        "content": "<p>I'm kind of just guessing</p>",
        "id": 159446556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206643
    },
    {
        "content": "<p>not any of the const eval code (I just checked to be sure)</p>",
        "id": 159446654,
        "sender_full_name": "oli",
        "timestamp": 1551206680
    },
    {
        "content": "<p>so it could be the normalization around it</p>",
        "id": 159446665,
        "sender_full_name": "oli",
        "timestamp": 1551206691
    },
    {
        "content": "<p>so there's this <a href=\"https://github.com/rust-lang/rust/blob/ea43c3c688980edd6f09a4cb632c9eb996c4f2af/src/librustc/traits/project.rs#L399-L432\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/ea43c3c688980edd6f09a4cb632c9eb996c4f2af/src/librustc/traits/project.rs#L399-L432\">kind of complex logic around normalizing constants</a></p>",
        "id": 159446820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206789
    },
    {
        "content": "<p>jup, looking through that right now. We do have the call to <code>Instance::resolve</code> that might be problematic</p>",
        "id": 159446871,
        "sender_full_name": "oli",
        "timestamp": 1551206829
    },
    {
        "content": "<p>I'm trying to reconstruct in my mind the reasoning behind this :)</p>",
        "id": 159446874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551206831
    },
    {
        "content": "<p>I wish we had a callgraph of rustc XD the rabbit hole is pretty deep</p>",
        "id": 159447381,
        "sender_full_name": "oli",
        "timestamp": 1551207165
    },
    {
        "content": "<p>it feels to me like the logic in <code>Instance::resolve</code> and the logic in <a href=\"http://project.rs\" target=\"_blank\" title=\"http://project.rs\">project.rs</a> is duplicated, and that's part of the problem</p>",
        "id": 159447543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551207266
    },
    {
        "content": "<p>i.e., I'd expect normalizing constants to work more like associated types</p>",
        "id": 159447555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551207276
    },
    {
        "content": "<p>but I'm trying to remember why .. I should actually check the PR where this was added, I have a memory of chatting a bit with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> about it</p>",
        "id": 159447570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1551207292
    },
    {
        "content": "<p>I know <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> gave me an example of where this is would be an issue with const generics, but I can't remember off the top of my head</p>",
        "id": 159453496,
        "sender_full_name": "varkor",
        "timestamp": 1551211472
    },
    {
        "content": "<blockquote>\n<p>Oh, I would expect the code above to work</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just to be clear, by \"above\", you are referring to <code>[u8; std::mem::size_of::&lt;T&gt;()]</code> or also <code>[u8; std::mem::size_of::&lt;Foo&lt;u32&gt;&gt;()]</code>?</p>\n<p>The latter requires knowing the layout of <code>struct Foo_u32 { bytes: [u8; size_of::&lt;Foo_u32&gt;()], data: u32 }</code> which should produce a cycle...?</p>",
        "id": 159463811,
        "sender_full_name": "centril",
        "timestamp": 1551219430
    },
    {
        "content": "<blockquote>\n<p>So... the array length constant is essentially a new (but anonymous) item. Unlike associated constants they do not look into their parents for generics. I wonder if it would be enough to just treat them like impl trait (anonymous existential types) and give them access to their parent's scope. I mean this would be easy to feature gate, so we can experiment. I don't see anything immediately problematic.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>   A more principled treatment of this might be to introduce <a href=\"https://www.microsoft.com/en-us/research/publication/lexically-scoped-type-variables/\" target=\"_blank\" title=\"https://www.microsoft.com/en-us/research/publication/lexically-scoped-type-variables/\">ScopedTypeVariables</a> at large; would be useful in general; but I'm not opposed to experimentation with a subset <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 159463963,
        "sender_full_name": "centril",
        "timestamp": 1551219524
    }
]