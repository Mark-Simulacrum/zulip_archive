[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> about my proposal to basically implement const-checking as \"qualif everything and make sure nothing complains\", to hopefully reduce duplication:</p>\n<blockquote>\n<p>there are side-effects that don't produce a value</p>\n</blockquote>\n<p>well but \"qualif\" also checks whether functions are <code>const fn</code>, even if they return <code>()</code>. so clearly they already are about side-effects, not just about the value produced.</p>",
        "id": 167209823,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581164
    },
    {
        "content": "<p>yes because it doesn't know it can synthesize a <code>()</code> out of thin air</p>",
        "id": 167209926,
        "sender_full_name": "eddyb",
        "timestamp": 1559581210
    },
    {
        "content": "<p>eventually we might do just that :P</p>",
        "id": 167209955,
        "sender_full_name": "eddyb",
        "timestamp": 1559581228
    },
    {
        "content": "<p>in fact, the old AST-based promoter had some special-cases for various \"obviously ZST constructor\"s</p>",
        "id": 167209978,
        "sender_full_name": "eddyb",
        "timestamp": 1559581254
    },
    {
        "content": "<p>wait so <code>&amp;foo()</code> should just become <code>&amp;()</code> during <em>implicit promotion</em>??</p>",
        "id": 167209981,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581259
    },
    {
        "content": "<p>no</p>",
        "id": 167209991,
        "sender_full_name": "eddyb",
        "timestamp": 1559581265
    },
    {
        "content": "<p>the call isn't promoted away</p>",
        "id": 167209997,
        "sender_full_name": "eddyb",
        "timestamp": 1559581270
    },
    {
        "content": "<p>it'd become <code>{ foo(); &amp;() }</code></p>",
        "id": 167210007,
        "sender_full_name": "eddyb",
        "timestamp": 1559581282
    },
    {
        "content": "<p>but that's what I am saying -- promotion is not just about values, it's also about effects... wait what?^^</p>",
        "id": 167210020,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581296
    },
    {
        "content": "<p>no! it's about, <em>at most</em>, the effects <em>needed</em> to obtain that value!</p>",
        "id": 167210042,
        "sender_full_name": "eddyb",
        "timestamp": 1559581314
    },
    {
        "content": "<p>\"the effects needed to run that computation\"</p>",
        "id": 167210098,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581333
    },
    {
        "content": "<p>it's about the computational needs</p>",
        "id": 167210102,
        "sender_full_name": "eddyb",
        "timestamp": 1559581337
    },
    {
        "content": "<p>the same value, <code>42</code>, can be obtained without effects</p>",
        "id": 167210109,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581340
    },
    {
        "content": "<p>yes but how do you know it's 42?</p>",
        "id": 167210117,
        "sender_full_name": "eddyb",
        "timestamp": 1559581353
    },
    {
        "content": "<p>at compile-time</p>",
        "id": 167210122,
        "sender_full_name": "eddyb",
        "timestamp": 1559581358
    },
    {
        "content": "<p>(replace <code>()</code> by <code>i32</code> in my example above, my argument stands and now you cannot synthesize)</p>",
        "id": 167210124,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581360
    },
    {
        "content": "<p>all I am saying is we are not talking about properties of a value here, but abourt properties of a computation</p>",
        "id": 167210144,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581381
    },
    {
        "content": "<p>yes, computation <em>for</em> the \"future runtime value\"</p>",
        "id": 167210170,
        "sender_full_name": "eddyb",
        "timestamp": 1559581399
    },
    {
        "content": "<p>and so I dont see why we cannot cast the question \"may this <code>const</code> body computation occur at compile-time\" in the same framework as the question \"may this temporary be promoted implicitly\"</p>",
        "id": 167210183,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581416
    },
    {
        "content": "<p>the final value may not depend on the side-effects</p>",
        "id": 167210253,
        "sender_full_name": "eddyb",
        "timestamp": 1559581455
    },
    {
        "content": "<p>where currently we have qualifs for the latter but a visitor for the former</p>",
        "id": 167210265,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581462
    },
    {
        "content": "<blockquote>\n<p>the final value may not depend on the side-effects</p>\n</blockquote>\n<p>so? that's the case either way?</p>",
        "id": 167210274,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581475
    },
    {
        "content": "<p>heck, I think we promote <code>&amp;{ println!(\"foo\"); 5 }</code> today, let me check</p>",
        "id": 167210279,
        "sender_full_name": "eddyb",
        "timestamp": 1559581477
    },
    {
        "content": "<p>even if we do, not sure how that changes anything. that's just a weird notion of \"subterm\".</p>",
        "id": 167210335,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581508
    },
    {
        "content": "<p>I'm saying that checking whether the computation that ends up in the return slot is promotable, doesn't tell you whether you can execute <em>the entire body</em></p>",
        "id": 167210352,
        "sender_full_name": "eddyb",
        "timestamp": 1559581528
    },
    {
        "content": "<p>because there is no reification of the \"worldstate\" on exit</p>",
        "id": 167210429,
        "sender_full_name": "eddyb",
        "timestamp": 1559581565
    },
    {
        "content": "<p>if we had VSDG, this would be a much more different discussion</p>",
        "id": 167210447,
        "sender_full_name": "eddyb",
        "timestamp": 1559581576
    },
    {
        "content": "<p>then, yes, you could qualify everything with dataflow</p>",
        "id": 167210453,
        "sender_full_name": "eddyb",
        "timestamp": 1559581586
    },
    {
        "content": "<p>same thing for lambda calculus</p>",
        "id": 167210457,
        "sender_full_name": "eddyb",
        "timestamp": 1559581594
    },
    {
        "content": "<p>still, the checker has very fine-grained messages. qualification loses that detail</p>",
        "id": 167210471,
        "sender_full_name": "eddyb",
        "timestamp": 1559581618
    },
    {
        "content": "<blockquote>\n<p>same thing for lambda calculus</p>\n</blockquote>\n<p>now you lost me entirely^^</p>",
        "id": 167210480,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581624
    },
    {
        "content": "<p>I meant pure functional code</p>",
        "id": 167210489,
        "sender_full_name": "eddyb",
        "timestamp": 1559581632
    },
    {
        "content": "<p>side-effects are encoded in dataflow</p>",
        "id": 167210494,
        "sender_full_name": "eddyb",
        "timestamp": 1559581642
    },
    {
        "content": "<blockquote>\n<p>still, the checker has very fine-grained messages. qualification loses that detail</p>\n</blockquote>\n<p>right I understand that. I hate it when diagnostics makes the important code more ugly :(</p>",
        "id": 167210502,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581655
    },
    {
        "content": "<p>VSDG is just first-order functional calculus w/ linear types</p>",
        "id": 167210504,
        "sender_full_name": "eddyb",
        "timestamp": 1559581656
    },
    {
        "content": "<p>but I wanted to understand if diagnostics is the <em>only</em> reason</p>",
        "id": 167210511,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581665
    },
    {
        "content": "<p>diagnostics are <em>the main</em> reason</p>",
        "id": 167210526,
        "sender_full_name": "eddyb",
        "timestamp": 1559581680
    },
    {
        "content": "<p>you'd still need a visitor for side-effects that don't (always) affect values</p>",
        "id": 167210573,
        "sender_full_name": "eddyb",
        "timestamp": 1559581697
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=50042f128ce6e1d1be43b495e5f1ef1e\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=50042f128ce6e1d1be43b495e5f1ef1e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=50042f128ce6e1d1be43b495e5f1ef1e</a></p>",
        "id": 167210615,
        "sender_full_name": "eddyb",
        "timestamp": 1559581741
    },
    {
        "content": "<blockquote>\n<p>I'm saying that checking whether the computation that ends up in the return slot is promotable, doesn't tell you whether you can execute <em>the entire body</em></p>\n</blockquote>\n<p>sure, that has no bearing on my question though I don't think. once we cannot \"peak\" the computation any more because it's a <code>const fn</code> we still fall back to checking computation, and more importantly, <em>relying only on the type here would be unsound</em> -- which demonstrates that this is <em>not</em> an analysis of the value <code>V</code>, but of the computation <code>M V</code> living in some monad and eventually producing the value.</p>",
        "id": 167210655,
        "sender_full_name": "RalfJ",
        "timestamp": 1559581769
    }
]