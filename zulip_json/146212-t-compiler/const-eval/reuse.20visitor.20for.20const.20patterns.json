[
    {
        "content": "<p>We convert <code>const</code> items used in patterns into full patterns by expanding e.g. a use of <code>const FOO: (u32, u32) = (5, 6);</code> as a <code>FOO</code> pattern into a tuple pattern of constants like <code>(5, 6)</code>. This is main user of <code>const_field</code> and <code>const_downcast</code>. I have started looking into cleaning this up. There's significant overlap with <code>Visitor</code>, but I don't really know how to use the <code>Visitor</code>s for that use case. What I basically want is to not mutate a value in place by visiting it, I want to convert it to a completely different type</p>",
        "id": 147656973,
        "sender_full_name": "oli",
        "timestamp": 1542188510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> do you think these use cases are different enough to warrant a parallel but similar setup? Or should I try to make the Visitors support my use case?</p>",
        "id": 147657052,
        "sender_full_name": "oli",
        "timestamp": 1542188611
    },
    {
        "content": "<blockquote>\n<p>main user of const_field and const_downcast</p>\n</blockquote>\n<p>main or only? :D</p>",
        "id": 147657172,
        "sender_full_name": "RalfJ",
        "timestamp": 1542188749
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> do you think these use cases are different enough to warrant a parallel but similar setup? Or should I try to make the Visitors support my use case?</p>\n</blockquote>\n<p>I suppose this depends on how much of a change this would require to the visitor, how big the complexity cost is there. I suppose what you want is a thing where the <code>visit</code> methods actually <em>return</em> something? Turning them from <code>visit</code> more into a <code>map_and_fold</code>? I feel this should be possible to add without too much additional complexity, where the default visitor uses <code>()</code> as return type.</p>",
        "id": 147657308,
        "sender_full_name": "RalfJ",
        "timestamp": 1542188916
    },
    {
        "content": "<p>main user, but the other one can be solved, too I think. The other user is some simd stuff during mir construction</p>",
        "id": 147657344,
        "sender_full_name": "oli",
        "timestamp": 1542188967
    },
    {
        "content": "<p>Yea, I think the return value change should totally suffice and not affect the regular visitor uses at all.</p>",
        "id": 147657415,
        "sender_full_name": "oli",
        "timestamp": 1542189027
    },
    {
        "content": "<p>well there will likely have to be a folding method somewhere for which we cannot have a default impl. but the visitor implementation would trivially return <code>()</code>. or maybe I am wrong and we have enough wrappers for that already.</p>",
        "id": 147658105,
        "sender_full_name": "RalfJ",
        "timestamp": 1542189905
    },
    {
        "content": "<p>So yeah, generalizing from a visitor to a map-fold is fine for me</p>",
        "id": 147658111,
        "sender_full_name": "RalfJ",
        "timestamp": 1542189918
    }
]