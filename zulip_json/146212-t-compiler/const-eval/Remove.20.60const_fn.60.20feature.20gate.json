[
    {
        "content": "<blockquote>\n<p>There's also the task of deprecating the current semantics for unadorned bounds in <code>const fn</code> and directing people to use <code>?const</code>. I had mentioned that it would be possible to have <code>#![feature(const_fn)]</code> preserve the existing semantics for trait bounds at the cost of slightly increased complexity in the const checker. I would have liked to have removed <code>qualify_min_const_fn</code> entirely by this point; it would have made the back-compat idea easier since <code>#![feature(const_fn)]</code> wouldn't serve double duty. Since that pass still exists, I think we should not try to do the back-compat thing.</p>\n</blockquote>",
        "id": 186396679,
        "sender_full_name": "oli",
        "timestamp": 1579791705
    },
    {
        "content": "<p>Yea that's an annoying situation</p>",
        "id": 186396702,
        "sender_full_name": "oli",
        "timestamp": 1579791716
    },
    {
        "content": "<p>Could we do an intermediate step and keep <code>qualify_min_const_fn</code> but just run it on <em>all</em> const fn now</p>",
        "id": 186396819,
        "sender_full_name": "oli",
        "timestamp": 1579791757
    },
    {
        "content": "<p>Then you could make the <code>if feature_gate(const_trait_bound_opt_out)</code> check be <code>if feature_gate(const_trait_bound_opt_out) || feature_gate(const_fn)</code> and remove all other uses of the <code>const fn</code> feature gate in rustc</p>",
        "id": 186397005,
        "sender_full_name": "oli",
        "timestamp": 1579791870
    },
    {
        "content": "<p>I don't remember if we got rid of the <code>const_fn</code> check in <code>constness.rs</code> yet</p>",
        "id": 186397108,
        "sender_full_name": "oli",
        "timestamp": 1579791930
    }
]