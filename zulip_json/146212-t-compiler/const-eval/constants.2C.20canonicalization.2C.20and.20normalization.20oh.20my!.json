[
    {
        "content": "<p>So I have been looking into what exactly goes wrong when we try to have constant evaluation done \"correctly\". After discussing with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, I modified the \"parent\" of inline constants so that they inherit from their environment. I immediately started hitting problems with <a href=\"https://github.com/rust-lang/rust/blob/c6ac57564852cb6e2d0db60f7b46d9eb98d4b449/src/librustc/traits/project.rs#L404-L419\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c6ac57564852cb6e2d0db60f7b46d9eb98d4b449/src/librustc/traits/project.rs#L404-L419\">this code</a> in <code>project.rs</code>. Specifically it fails on this line:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">lift_to_global</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">substs</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>because the lift fails. I've then been skimming <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s PR <a href=\"https://github.com/rust-lang/rust/issues/59369\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59369\">#59369</a>, which I don't really follow in its entirety, but I see talks about canonicalization.</p>\n<p>I wanted to try and help out in figuring out what the right thing to do is here. =)</p>",
        "id": 165086106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557245698
    },
    {
        "content": "<p>Presumably constant evaluation doesn't really care about lifetimes</p>",
        "id": 165087527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557246636
    },
    {
        "content": "<p>But what would happen if it encountered an \"inference variable\" -- is it prepared for that? I guess this could happen if you had generic constants, at least in some circumstances.</p>",
        "id": 165087573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557246674
    },
    {
        "content": "<p>(This reminds me that I also wanted to talk over the const generics strategy with <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>; I guess I don't have a tight mental model for what the \"distinct pieces\" are here)</p>",
        "id": 165087607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557246712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I was hoping we could give miri the canonical form</p>",
        "id": 165089020,
        "sender_full_name": "eddyb",
        "timestamp": 1557247706
    },
    {
        "content": "<p><em>not</em> run miri inside an inference context</p>",
        "id": 165089025,
        "sender_full_name": "eddyb",
        "timestamp": 1557247710
    },
    {
        "content": "<p>but as if the inference variables were parameters in scope</p>",
        "id": 165089041,
        "sender_full_name": "eddyb",
        "timestamp": 1557247728
    },
    {
        "content": "<p>it can't advance inference, but it can \"polymorphically evaluate\" in some cases</p>",
        "id": 165089078,
        "sender_full_name": "eddyb",
        "timestamp": 1557247751
    },
    {
        "content": "<blockquote>\n<p>I was hoping we could give miri the canonical form</p>\n</blockquote>\n<p>this is exactly what I had in mind, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 165089749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557248259
    },
    {
        "content": "<p>I mean this should basically \"just work\", presuming miri can cope with the presence of canonical vars</p>",
        "id": 165089814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557248284
    },
    {
        "content": "<p>miri doesn't <em>really</em> look at types ;)</p>",
        "id": 165089950,
        "sender_full_name": "eddyb",
        "timestamp": 1557248403
    },
    {
        "content": "<p>with minor exceptions</p>",
        "id": 165089970,
        "sender_full_name": "eddyb",
        "timestamp": 1557248410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it's likely that the only thing you need to do is move whatever category of type in question to this match arm: <a href=\"https://github.com/rust-lang/rust/blob/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src/librustc/ty/layout.rs#L1229\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src/librustc/ty/layout.rs#L1229\">https://github.com/rust-lang/rust/blob/f5371a5ac7a9ef4446d46e7c8a2523e56f7a7900/src/librustc/ty/layout.rs#L1229</a></p>",
        "id": 165090035,
        "sender_full_name": "eddyb",
        "timestamp": 1557248475
    },
    {
        "content": "<p>OK. I am right now doing a quick hack to try and unblock my investigations -- namely, erasing the regions before invoking <code>lift</code></p>",
        "id": 165090075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557248521
    },
    {
        "content": "<p>but I could take a look at introducing the canonicalizations, or point <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> in the right direction</p>",
        "id": 165090123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557248530
    },
    {
        "content": "<p>oh, regions, lol</p>",
        "id": 165090129,
        "sender_full_name": "eddyb",
        "timestamp": 1557248537
    },
    {
        "content": "<p>we should always erase regions and recover them in the type</p>",
        "id": 165090149,
        "sender_full_name": "eddyb",
        "timestamp": 1557248562
    },
    {
        "content": "<p>Something still feels \"funny\" to me about how we are doing normalization here</p>",
        "id": 165090152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557248564
    },
    {
        "content": "<p>did I not do that already?</p>",
        "id": 165090155,
        "sender_full_name": "eddyb",
        "timestamp": 1557248567
    },
    {
        "content": "<p>miri shouldn't see unerased regions, they should only exist on the \"user side\" of const-eval, not inside the query</p>",
        "id": 165090209,
        "sender_full_name": "eddyb",
        "timestamp": 1557248614
    },
    {
        "content": "<p>You did not, but that quick hack doesn't get me that far</p>",
        "id": 165090214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557248620
    },
    {
        "content": "<p>error: internal compiler error: src/librustc/traits/project.rs:415: failed to lift [ReErased, ReErased, _, _] to global</p>",
        "id": 165090227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557248628
    },
    {
        "content": "<p>but I may have been overly cautious</p>",
        "id": 165090229,
        "sender_full_name": "eddyb",
        "timestamp": 1557248629
    },
    {
        "content": "<p>when I was talking about canonicalization, I've been referring to const/type inference variables all along, not lifetimes</p>",
        "id": 165090285,
        "sender_full_name": "eddyb",
        "timestamp": 1557248657
    },
    {
        "content": "<p>yes, that's what you need to canonicalize</p>",
        "id": 165090299,
        "sender_full_name": "eddyb",
        "timestamp": 1557248676
    },
    {
        "content": "<p>btw, having non-<code>ty::Param</code> \"type variables\" in codegen, which <code>ty::layout</code> treats the same as type parameters, is the way I think we should do both <code>DispatchFromDyn</code> (although there you arguably can have a <code>ty::Param</code>?) and \"polymorphization\"</p>",
        "id": 165090434,
        "sender_full_name": "eddyb",
        "timestamp": 1557248783
    },
    {
        "content": "<p>re: polymorphization, I sort of forgot that <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> and I were doing investigations there, trying to get a figure on what kind of improvements we could expect. Our prelim results were \"not much\" but we didn't really get that far.</p>",
        "id": 165090483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557248826
    },
    {
        "content": "<p>anyway, that's off topic :)</p>",
        "id": 165090488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557248833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> btw, you need to be very careful if you've erased lifetimes</p>",
        "id": 165090495,
        "sender_full_name": "eddyb",
        "timestamp": 1557248843
    },
    {
        "content": "<p>ugh, I've been meaning to get back to that.</p>",
        "id": 165090499,
        "sender_full_name": "davidtwco",
        "timestamp": 1557248850
    },
    {
        "content": "<p>to make sure there are no lifetimes in the value itself, and to use the old type</p>",
        "id": 165090554,
        "sender_full_name": "eddyb",
        "timestamp": 1557248883
    },
    {
        "content": "<p>so none of the erasure leaks back into whatever wanted to normalize the const</p>",
        "id": 165091157,
        "sender_full_name": "eddyb",
        "timestamp": 1557249361
    },
    {
        "content": "<p>yeah -- so -- actually I think there is a simpler hack to get me past my <em>immediate</em> problems, but it may fail down the line</p>",
        "id": 165092296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557250148
    }
]