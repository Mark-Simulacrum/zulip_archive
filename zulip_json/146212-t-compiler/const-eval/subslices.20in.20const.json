[
    {
        "content": "<p>Hey, is it currently possible in any way to create a subslice of a <code>&amp;'static [T]</code> at <code>const</code> time? Currently I get an error.</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n  --&gt; src/types/tag.rs:26:45\n   |\n26 |                     if Self::contains(tag, &amp;tags[index+1..tags.len()]) {\n   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 247814432,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1627750938
    },
    {
        "content": "<p>I thought maybe <code>from_raw_parts</code>, but even that is not <code>const</code></p>",
        "id": 247818109,
        "sender_full_name": "cuviper",
        "timestamp": 1627756153
    },
    {
        "content": "<p><code>ptr::slice_from_raw_parts</code> is <code>const</code>, at least</p>",
        "id": 247818234,
        "sender_full_name": "cuviper",
        "timestamp": 1627756311
    },
    {
        "content": "<p>But not stable <code>const</code> yet</p>",
        "id": 247818390,
        "sender_full_name": "cuviper",
        "timestamp": 1627756527
    },
    {
        "content": "<p>It's possible but hacky. You can use a <code>match</code> pattern to keep removing parts from the beginning and end until you have the right slice.</p>",
        "id": 247818772,
        "sender_full_name": "Chris Denton",
        "timestamp": 1627757076
    },
    {
        "content": "<p>The <code>konst</code> crate has a function for it: <a href=\"https://docs.rs/konst/0.2.5/konst/slice/fn.slice_range.html\">https://docs.rs/konst/0.2.5/konst/slice/fn.slice_range.html</a></p>",
        "id": 247818864,
        "sender_full_name": "Chris Denton",
        "timestamp": 1627757198
    },
    {
        "content": "<p>Oh wow, I didn't think of using slice patterns for that</p>",
        "id": 247818884,
        "sender_full_name": "cuviper",
        "timestamp": 1627757242
    },
    {
        "content": "<p>You can wait for the const_trait_impl feature so you can use the index syntax in a const context.</p>",
        "id": 247838308,
        "sender_full_name": "fee1-dead",
        "timestamp": 1627789569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260325\">@Chris Denton</span> Thank you so much for that! That was the final piece in the puzzle for me of validating ASN.1 tags entirely at <strong>compile-time</strong> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>. For anyone interested here is the commit. If you're not familiar with ASN.1, it essentially has an extra ID on types and some types contain sets of IDs and this recurses which essentially forms a tree, and with <code>slice_range</code> I'm now able to recursively traverse a tree of these tags at <code>const</code> time, and check that every entry is unique. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>  <a href=\"https://github.com/XAMPPRocky/rasn/commit/b2f0220d0f99b9187a3ad0aba0916b61236281d8#diff-1bb2a920eac967029f441f50ce32909b053d62dc865ca63adadf767699980d33\">https://github.com/XAMPPRocky/rasn/commit/b2f0220d0f99b9187a3ad0aba0916b61236281d8#diff-1bb2a920eac967029f441f50ce32909b053d62dc865ca63adadf767699980d33</a></p>",
        "id": 247871834,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1627843891
    }
]