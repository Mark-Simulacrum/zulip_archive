[
    {
        "content": "<p>using const generics broke miri for some array stuff, we likely need to do <em>something</em> to monomorphize them or so? No idea what and how though. See <a href=\"https://github.com/rust-lang/rust/pull/62435#issuecomment-511100890\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62435#issuecomment-511100890\">https://github.com/rust-lang/rust/pull/62435#issuecomment-511100890</a>.<br>\n<span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I think I need your help for this.</p>",
        "id": 170780423,
        "sender_full_name": "RalfJ",
        "timestamp": 1563005409
    },
    {
        "content": "<p>Uh. I was hoping that would be transparent for us. I thought these were fixes in the engine.</p>",
        "id": 170780444,
        "sender_full_name": "oli",
        "timestamp": 1563005474
    },
    {
        "content": "<p>Are you by any chance getting an ICE?</p>",
        "id": 170780446,
        "sender_full_name": "oli",
        "timestamp": 1563005485
    },
    {
        "content": "<p>Ah no</p>",
        "id": 170780489,
        "sender_full_name": "oli",
        "timestamp": 1563005528
    },
    {
        "content": "<p>They are just bailing outnow</p>",
        "id": 170780490,
        "sender_full_name": "oli",
        "timestamp": 1563005536
    },
    {
        "content": "<p>I thought i left some comments to not just bail out</p>",
        "id": 170780504,
        "sender_full_name": "oli",
        "timestamp": 1563005584
    },
    {
        "content": "<p>Oh well</p>",
        "id": 170780510,
        "sender_full_name": "oli",
        "timestamp": 1563005591
    },
    {
        "content": "<p>I wonder why monomorphization doesn't catch this</p>",
        "id": 170780561,
        "sender_full_name": "oli",
        "timestamp": 1563005664
    },
    {
        "content": "<p>We may nees to replicate some codegen changes from that PR in the engine</p>",
        "id": 170780565,
        "sender_full_name": "oli",
        "timestamp": 1563005686
    },
    {
        "content": "<p>I'll try to find some time next week</p>",
        "id": 170780573,
        "sender_full_name": "oli",
        "timestamp": 1563005715
    },
    {
        "content": "<p>the error is</p>\n<div class=\"codehilite\"><pre><span></span>error[E0080]: Miri evaluation error: encountered overly generic constant\n   --&gt; /home/r/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/array.rs:337:16\n    |\n337 |             if slice.len() == N {\n    |                ^^^^^^^^^^^^^^^^ Miri evaluation error: encountered overly generic constant\n    |\nnote: inside call to `std::array::impls_using_const_generics::&lt;impl std::convert::TryFrom&lt;&amp;[u8]&gt; for &amp;[u8; 0]&gt;::try_from` at core_miri_test/../libcore/tests/array.rs:31:30\n   --&gt; core_miri_test/../libcore/tests/array.rs:31:30\n    |\n31  |                   let result = &lt;&amp;Array&gt;::try_from(slice);\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n36  | /     test! {\n37  | |          0  1  2  3  4  5  6  7  8  9\n38  | |         10 11 12 13 14 15 16 17 18 19\n39  | |         20 21 22 23 24 25 26 27 28 29\n40  | |         30 31 32\n41  | |     }\n    | |_____- in this macro invocation\nnote: inside call to `array::array_try_from` at core_miri_test/../libcore/tests/array.rs:23:1\n   --&gt; core_miri_test/../libcore/tests/array.rs:23:1\n    |\n23  | / fn array_try_from() {\n24  | |     macro_rules! test {\n25  | |         ($($N:expr)+) =&gt; {\n26  | |             $({\n...   |\n41  | |     }\n42  | | }\n    | |_^\n    = note: inside call to closure at /home/r/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/libcore/ops/function.rs:231:5\n</pre></div>",
        "id": 170780632,
        "sender_full_name": "RalfJ",
        "timestamp": 1563005819
    },
    {
        "content": "<blockquote>\n<p>We may nees to replicate some codegen changes from that PR in the engine</p>\n</blockquote>\n<p>hm ideally we'd share that code?^^</p>",
        "id": 170780645,
        "sender_full_name": "RalfJ",
        "timestamp": 1563005840
    },
    {
        "content": "<blockquote>\n<p>I'll try to find some time next week</p>\n</blockquote>\n<p>great! it seems to only concern try_from so far so it's not high priority</p>",
        "id": 170780647,
        "sender_full_name": "RalfJ",
        "timestamp": 1563005857
    },
    {
        "content": "<p>hm no there are also other methods</p>",
        "id": 170780690,
        "sender_full_name": "RalfJ",
        "timestamp": 1563005894
    },
    {
        "content": "<p>but none of them are used by the libcore test suite :D</p>",
        "id": 170780694,
        "sender_full_name": "RalfJ",
        "timestamp": 1563005902
    },
    {
        "content": "<p>or maybe they do... but interestingly, other methods seem to work fine</p>",
        "id": 170780842,
        "sender_full_name": "RalfJ",
        "timestamp": 1563006203
    },
    {
        "content": "<p>It may becalling generic methods from generic methods</p>",
        "id": 170781276,
        "sender_full_name": "oli",
        "timestamp": 1563007009
    },
    {
        "content": "<p>what sets it apart from the others is that it <em>uses</em> the const generic <code>N</code> in the body of the code</p>",
        "id": 170781730,
        "sender_full_name": "RalfJ",
        "timestamp": 1563007988
    },
    {
        "content": "<p>Heh, that would make a difference</p>",
        "id": 170782118,
        "sender_full_name": "oli",
        "timestamp": 1563008743
    },
    {
        "content": "<p>Where does the const generic come from</p>",
        "id": 170782353,
        "sender_full_name": "oli",
        "timestamp": 1563009195
    },
    {
        "content": "<p>A local variable's type?</p>",
        "id": 170782354,
        "sender_full_name": "oli",
        "timestamp": 1563009202
    },
    {
        "content": "<p>Ah no, it's using it literally</p>",
        "id": 170782652,
        "sender_full_name": "oli",
        "timestamp": 1563009901
    },
    {
        "content": "<p>Yea we aren't monomorphizing constants yet</p>",
        "id": 170782658,
        "sender_full_name": "oli",
        "timestamp": 1563009916
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TryFrom</span><span class=\"o\">&lt;&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span>: <span class=\"nc\">LengthAtMost32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">type</span> <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TryFromSliceError</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">try_from</span><span class=\"p\">(</span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">TryFromSliceError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// &lt;-- const generic used HERE</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">TryFromSliceError</span><span class=\"p\">(()))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 170782659,
        "sender_full_name": "RalfJ",
        "timestamp": 1563009921
    },
    {
        "content": "<p>Wherever we get a ty::Const out of the MIR we need to feed it through self.monomorphize</p>",
        "id": 170782701,
        "sender_full_name": "oli",
        "timestamp": 1563009966
    },
    {
        "content": "<p>That should be all that is needed</p>",
        "id": 170782704,
        "sender_full_name": "oli",
        "timestamp": 1563009985
    },
    {
        "content": "<p>really? I can try that or are you on it?</p>",
        "id": 170782705,
        "sender_full_name": "RalfJ",
        "timestamp": 1563009995
    },
    {
        "content": "<p>I am in an airport, so not on it ^^</p>",
        "id": 170782914,
        "sender_full_name": "oli",
        "timestamp": 1563010462
    },
    {
        "content": "<p>May be more efficient to just do it on the ConstValue in the very end</p>",
        "id": 170782970,
        "sender_full_name": "oli",
        "timestamp": 1563010591
    },
    {
        "content": "<p>So we don't intern the monomorphization result</p>",
        "id": 170782971,
        "sender_full_name": "oli",
        "timestamp": 1563010608
    },
    {
        "content": "<p>not sure what you mean, this errors out very early</p>",
        "id": 170783387,
        "sender_full_name": "RalfJ",
        "timestamp": 1563011580
    },
    {
        "content": "<p>so we kind of have to monomorphize early</p>",
        "id": 170783393,
        "sender_full_name": "RalfJ",
        "timestamp": 1563011593
    },
    {
        "content": "<p>We could monomorphize right before that match that errors out</p>",
        "id": 170783638,
        "sender_full_name": "oli",
        "timestamp": 1563012096
    },
    {
        "content": "<p>And match on the result of the monomorphization</p>",
        "id": 170783685,
        "sender_full_name": "oli",
        "timestamp": 1563012130
    },
    {
        "content": "<p>yes that's what I am doing</p>",
        "id": 170783689,
        "sender_full_name": "RalfJ",
        "timestamp": 1563012157
    },
    {
        "content": "<p>I only have a vague memory of the relevant code</p>",
        "id": 170783691,
        "sender_full_name": "oli",
        "timestamp": 1563012159
    },
    {
        "content": "<p>not sure what other option you had in mind</p>",
        "id": 170783692,
        "sender_full_name": "RalfJ",
        "timestamp": 1563012163
    },
    {
        "content": "<p>okay :)</p>",
        "id": 170783693,
        "sender_full_name": "RalfJ",
        "timestamp": 1563012165
    },
    {
        "content": "<p>Oh xD</p>",
        "id": 170783694,
        "sender_full_name": "oli",
        "timestamp": 1563012170
    },
    {
        "content": "<p>Perfect then</p>",
        "id": 170783698,
        "sender_full_name": "oli",
        "timestamp": 1563012175
    },
    {
        "content": "<p>You should be able to write const eval regression tests (if your changes don't cause existing tests to pass)</p>",
        "id": 170783707,
        "sender_full_name": "oli",
        "timestamp": 1563012227
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span></p>",
        "id": 170783754,
        "sender_full_name": "oli",
        "timestamp": 1563012277
    },
    {
        "content": "<p>ah, I added a test to Miri but I never know how to fit those into the CTFE restrictions^^</p>",
        "id": 170783872,
        "sender_full_name": "RalfJ",
        "timestamp": 1563012507
    },
    {
        "content": "<p>worst case you can use the <code>const_fn</code> feature gate</p>",
        "id": 170783944,
        "sender_full_name": "oli",
        "timestamp": 1563012701
    },
    {
        "content": "<p>a generic const function that returns its generic parameter as a runtime value should be enough</p>",
        "id": 170783987,
        "sender_full_name": "oli",
        "timestamp": 1563012727
    },
    {
        "content": "<p>(well, and calling it in a const context)</p>",
        "id": 170783989,
        "sender_full_name": "oli",
        "timestamp": 1563012750
    },
    {
        "content": "<p>okay</p>",
        "id": 170783992,
        "sender_full_name": "RalfJ",
        "timestamp": 1563012760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> uh, that <code>monomorphize</code> leads to ICEs...</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: src/librustc/ty/subst.rs:557: type parameter `Self/#0` (Self/0) out of range when substituting (root type=Some(&lt;Self as float::Float&gt;::Int)) substs=[]\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, src/librustc_errors/lib.rs:584:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\nerror: aborting due to previous error\n</pre></div>",
        "id": 170785310,
        "sender_full_name": "RalfJ",
        "timestamp": 1563015577
    },
    {
        "content": "<p>Hmm i've seen that before</p>",
        "id": 170785364,
        "sender_full_name": "oli",
        "timestamp": 1563015629
    },
    {
        "content": "<p>I have a PR working on it</p>",
        "id": 170785368,
        "sender_full_name": "oli",
        "timestamp": 1563015639
    },
    {
        "content": "<p>We are doing monomorphizations the wrong way iirc</p>",
        "id": 170785371,
        "sender_full_name": "oli",
        "timestamp": 1563015655
    },
    {
        "content": "<p>Like we take the wrong substs</p>",
        "id": 170785382,
        "sender_full_name": "oli",
        "timestamp": 1563015707
    },
    {
        "content": "<p>is that <a href=\"https://github.com/rust-lang/rust/pull/61041\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61041\">https://github.com/rust-lang/rust/pull/61041</a>?</p>",
        "id": 170785433,
        "sender_full_name": "RalfJ",
        "timestamp": 1563015784
    },
    {
        "content": "<p>Jop</p>",
        "id": 170791750,
        "sender_full_name": "oli",
        "timestamp": 1563027758
    }
]