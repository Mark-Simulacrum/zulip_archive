[
    {
        "content": "<p>Hi, I'm watching <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s talk in RustConf and I just wanted to comment about determinism, I do think that non determinism can be a wanted feature specifically the one you mentioned generating randomness,<br>\nRight now there are crates like <a href=\"https://github.com/tkaitchuck/constrandom\" target=\"_blank\" title=\"https://github.com/tkaitchuck/constrandom\">https://github.com/tkaitchuck/constrandom</a> for providing something that could've easily happened in a const fn</p>",
        "id": 189533440,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1583181386
    },
    {
        "content": "<p>True randomness in const eval would break our type system. You could end up with a situation where two arrays of different lengths are considered equal types. Also the query system likely would break in horrible ways</p>",
        "id": 189611485,
        "sender_full_name": "oli",
        "timestamp": 1583254397
    },
    {
        "content": "<p>also that kind of crate is just terrible for deterministic builds</p>",
        "id": 191492374,
        "sender_full_name": "eddyb",
        "timestamp": 1584978243
    },
    {
        "content": "<p>oh it's <em>the same one</em></p>",
        "id": 191492462,
        "sender_full_name": "eddyb",
        "timestamp": 1584978291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> that crate broke determinism for all users of <code>hashbrown</code>, by default</p>",
        "id": 191492510,
        "sender_full_name": "eddyb",
        "timestamp": 1584978307
    },
    {
        "content": "<p>I hit this while investigating non-deterministic build causes for a client</p>",
        "id": 191492557,
        "sender_full_name": "eddyb",
        "timestamp": 1584978324
    },
    {
        "content": "<p>How are <code>static</code> differentiated from <code>const</code> in the compiler? Maybe it could be somehow allowed to have random statics but not random constants, as the former can't be used in types.</p>",
        "id": 191493011,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1584978507
    },
    {
        "content": "<p>what, link-time RNG?</p>",
        "id": 191493115,
        "sender_full_name": "eddyb",
        "timestamp": 1584978557
    },
    {
        "content": "<p>it's still a terrible idea because non-deterministic builds</p>",
        "id": 191493149,
        "sender_full_name": "eddyb",
        "timestamp": 1584978571
    },
    {
        "content": "<p>just load randomness at runtime</p>",
        "id": 191493193,
        "sender_full_name": "eddyb",
        "timestamp": 1584978591
    },
    {
        "content": "<p>computing non-determinism during the build process is the worst of all worlds</p>",
        "id": 191493373,
        "sender_full_name": "eddyb",
        "timestamp": 1584978648
    },
    {
        "content": "<p>if you want to inject a seed into your builds, use an env variable (or a build script that extracts it from somewhere controllable), at least then you can reproduce the same build (this could be e.g. a <code>git</code> hash)</p>",
        "id": 191493591,
        "sender_full_name": "eddyb",
        "timestamp": 1584978734
    },
    {
        "content": "<p>if you just want RNG at runtime, do it right</p>",
        "id": 191493686,
        "sender_full_name": "eddyb",
        "timestamp": 1584978769
    },
    {
        "content": "<p>agreed with @eddyb -- it is crucial to be able to exactly re-construct a bianary. that is pretty much the only technique we have to prove that a given binary actually comes from a given sourcecode.</p>",
        "id": 191501486,
        "sender_full_name": "RalfJ",
        "timestamp": 1584981789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is there an issue for the hashbrown nondet?</p>",
        "id": 191501537,
        "sender_full_name": "RalfJ",
        "timestamp": 1584981806
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <a href=\"https://github.com/rust-lang/hashbrown/pull/125\" target=\"_blank\" title=\"https://github.com/rust-lang/hashbrown/pull/125\">https://github.com/rust-lang/hashbrown/pull/125</a></p>",
        "id": 191507655,
        "sender_full_name": "eddyb",
        "timestamp": 1584984359
    },
    {
        "content": "<p>but that doesnt sound like anyone was concerned with reproducible builds? (which is itself quite concerning)</p>",
        "id": 191509084,
        "sender_full_name": "RalfJ",
        "timestamp": 1584984882
    },
    {
        "content": "<p>You're right.<br>\nI didn't think it through, non determinism in the binary is a bad idea.</p>",
        "id": 191509926,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1584985251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> there's this I guess <a href=\"https://github.com/paritytech/trie/pull/36\" target=\"_blank\" title=\"https://github.com/paritytech/trie/pull/36\">https://github.com/paritytech/trie/pull/36</a></p>",
        "id": 191512099,
        "sender_full_name": "eddyb",
        "timestamp": 1584986213
    },
    {
        "content": "<p>it links everything I could find on the subject at the time</p>",
        "id": 191512167,
        "sender_full_name": "eddyb",
        "timestamp": 1584986243
    },
    {
        "content": "<p>Arghh I wouldn't switch to ahash that easily :/.<br>\nIt's not peer reviewed, there's not even a paper analyzing it or proving that the hash function construction is as secure as the aes function.<br>\nBut it's off topic so sorry.</p>",
        "id": 191513046,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1584986595
    },
    {
        "content": "<p>I've heard similar things, don't worry</p>",
        "id": 191513339,
        "sender_full_name": "eddyb",
        "timestamp": 1584986693
    },
    {
        "content": "<p>it couldn't be as secure as AES, it's presumably DoS-protection-only (but I doubt it's as good as, idk, SipHash)</p>",
        "id": 191513422,
        "sender_full_name": "eddyb",
        "timestamp": 1584986726
    },
    {
        "content": "<p>not to mention its not reproducible across architectures...</p>",
        "id": 191559832,
        "sender_full_name": "nagisa",
        "timestamp": 1585014679
    },
    {
        "content": "<p><a href=\"https://github.com/tkaitchuck/constrandom/pull/13\" title=\"https://github.com/tkaitchuck/constrandom/pull/13\">https://github.com/tkaitchuck/constrandom/pull/13</a> :)</p>",
        "id": 192177840,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1585493147
    },
    {
        "content": "<p>cc-ing <span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> on this thread, I guess (the env var thing should already suffice to make this reasonable, IMO)</p>",
        "id": 192178354,
        "sender_full_name": "eddyb",
        "timestamp": 1585493851
    },
    {
        "content": "<p>although the default \"every build gets randomness\" still seems potentially misguided, it's good to have workarounds</p>",
        "id": 192178408,
        "sender_full_name": "eddyb",
        "timestamp": 1585493912
    },
    {
        "content": "<p>oh yeah screw that crate</p>",
        "id": 192178544,
        "sender_full_name": "David Tolnay",
        "timestamp": 1585494105
    },
    {
        "content": "<p>lol</p>",
        "id": 192178601,
        "sender_full_name": "eddyb",
        "timestamp": 1585494164
    },
    {
        "content": "<p>:(</p>",
        "id": 192178609,
        "sender_full_name": "Amanieu",
        "timestamp": 1585494184
    },
    {
        "content": "<p>AFAIK hashbrown is the only real user of constrandom.</p>",
        "id": 192178615,
        "sender_full_name": "Amanieu",
        "timestamp": 1585494199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> I found out about it while trying to get a combined host + wasm build deterministic, late last year, and I'm glad I started with same-directory builds before going to different-directory</p>",
        "id": 192178623,
        "sender_full_name": "eddyb",
        "timestamp": 1585494225
    },
    {
        "content": "<p>Actually no, it seems a lot of crates are using <code>ahash</code>.</p>",
        "id": 192178682,
        "sender_full_name": "Amanieu",
        "timestamp": 1585494253
    },
    {
        "content": "<p>there was this and there was a bug in wasm debuginfo generation (UB in C++, reading from uninitialized variables), IIRC</p>",
        "id": 192178684,
        "sender_full_name": "eddyb",
        "timestamp": 1585494258
    },
    {
        "content": "<p>/me is considering just disabling the \"ahash-compile-time-rng\" feature by default since so many people are complaining about it...</p>",
        "id": 192178710,
        "sender_full_name": "Amanieu",
        "timestamp": 1585494336
    },
    {
        "content": "<p>i hit it because our codebase needs a concurrent hashmap</p>",
        "id": 192178775,
        "sender_full_name": "David Tolnay",
        "timestamp": 1585494399
    },
    {
        "content": "<p>chashmap is unusable due to race conditions</p>",
        "id": 192178779,
        "sender_full_name": "David Tolnay",
        "timestamp": 1585494405
    },
    {
        "content": "<p>dashmap is unusable due to const_random</p>",
        "id": 192178780,
        "sender_full_name": "David Tolnay",
        "timestamp": 1585494408
    },
    {
        "content": "<p>we've ended up using a deterministic fork of dashmap</p>",
        "id": 192178793,
        "sender_full_name": "David Tolnay",
        "timestamp": 1585494442
    },
    {
        "content": "<p>ddashmap? :P</p>",
        "id": 192178946,
        "sender_full_name": "eddyb",
        "timestamp": 1585494654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Determinism.20in.20const.20eval/near/192178408\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Determinism.20in.20const.20eval/near/192178408\">said</a>:</p>\n<blockquote>\n<p>although the default \"every build gets randomness\" still seems potentially misguided, it's good to have workarounds</p>\n</blockquote>\n<p>yeah, I feel the default should be reproducible. I am also not convinced build-time randomness is sufficient defense against hashDoS attacks. it feels more like papering over the issue...</p>",
        "id": 192179009,
        "sender_full_name": "RalfJ",
        "timestamp": 1585494728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Determinism.20in.20const.20eval/near/192178682\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Determinism.20in.20const.20eval/near/192178682\">said</a>:</p>\n<blockquote>\n<p>Actually no, it seems a lot of crates are using <code>ahash</code>.</p>\n</blockquote>\n<p>I wonder how many of those went \"ah it's used by hashbrown, so it must be high quality\"...</p>",
        "id": 192179016,
        "sender_full_name": "RalfJ",
        "timestamp": 1585494759
    },
    {
        "content": "<p>haha Q_Q</p>",
        "id": 192179203,
        "sender_full_name": "eddyb",
        "timestamp": 1585495018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Determinism.20in.20const.20eval/near/192179009\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Determinism.20in.20const.20eval/near/192179009\">said</a>:</p>\n<blockquote>\n<p>yeah, I feel the default should be reproducible. I am also not convinced build-time randomness is sufficient defense against hashDoS attacks. it feels more like papering over the issue...</p>\n</blockquote>\n<p>I'm not even convinced aHash is sufficient to defend against hashDoS attack anyway.<br>\nI think Abseil's hashmap uses CityHash, which AFAICT isn't secure against hashDoS either, so i'm not sure if the default should be secure or not</p>",
        "id": 192391239,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1585662313
    }
]