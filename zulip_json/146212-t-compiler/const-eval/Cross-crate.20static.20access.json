[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> is it possible that accessing the memory backing a static in another crate does not work? I found a (miri-unleash) soundness issue related to <a href=\"https://github.com/rust-lang/const-eval/issues/42\" title=\"https://github.com/rust-lang/const-eval/issues/42\">https://github.com/rust-lang/const-eval/issues/42</a>, and in exploring that also ran into an ICE where <code>unwrap_memory</code> fails (\"expected allocation ID alloc0 to point to memory\") -- which is <em>not</em> the failure mode I expected.</p>",
        "id": 195628665,
        "sender_full_name": "RalfJ",
        "timestamp": 1588108858
    },
    {
        "content": "<p>just replacing a static by a const makes that ICE go away</p>",
        "id": 195628725,
        "sender_full_name": "RalfJ",
        "timestamp": 1588108896
    },
    {
        "content": "<p>but an <em>immutable</em> static still ICEs</p>",
        "id": 195628808,
        "sender_full_name": "RalfJ",
        "timestamp": 1588108930
    },
    {
        "content": "<p>so I am wondering if rlib encoding/decoding somehow treats statics and consts differently</p>",
        "id": 195628913,
        "sender_full_name": "RalfJ",
        "timestamp": 1588108991
    },
    {
        "content": "<p>I hit that error on local statics as well, they're represented differently regardless of rlib encoding</p>",
        "id": 195632489,
        "sender_full_name": "rpjohnst",
        "timestamp": 1588110938
    },
    {
        "content": "<p>hm, on the one hand I guess it's good that it's not some cross-crate magic</p>",
        "id": 195632638,
        "sender_full_name": "RalfJ",
        "timestamp": 1588110998
    },
    {
        "content": "<p>but I still wonder what the difference is, then. maybe something about const normalization...</p>",
        "id": 195632684,
        "sender_full_name": "RalfJ",
        "timestamp": 1588111012
    },
    {
        "content": "<p>there are so many fragile moving pieces here, I'd love to find some way to make this all nice and clean and \"obviously correct\" but I don't know how :/</p>",
        "id": 195632735,
        "sender_full_name": "RalfJ",
        "timestamp": 1588111041
    },
    {
        "content": "<p>right- from what I gathered, there are two allocation IDs floating around for statics. one is opaque and the other is the \"real\" one but it's only used in limited circumstances (that <code>try_unwrap_memory</code> change I tried is because of this)</p>",
        "id": 195632932,
        "sender_full_name": "rpjohnst",
        "timestamp": 1588111108
    },
    {
        "content": "<p>ah... good point</p>",
        "id": 195633949,
        "sender_full_name": "RalfJ",
        "timestamp": 1588111601
    },
    {
        "content": "<p>so pattern matching is missing the logic to follow the \"lazy\" allocid (the ones that map to <code>GlobalAlloc::Static</code>)</p>",
        "id": 195634008,
        "sender_full_name": "RalfJ",
        "timestamp": 1588111625
    },
    {
        "content": "<p>which makes sense, it should never encounter any statics</p>",
        "id": 195634028,
        "sender_full_name": "RalfJ",
        "timestamp": 1588111636
    },
    {
        "content": "<p>this basically accidentally served as a third line of defense after static const checks and dynamic const checks, thus preventing the unsoundness with an ICE</p>",
        "id": 195634090,
        "sender_full_name": "RalfJ",
        "timestamp": 1588111666
    }
]