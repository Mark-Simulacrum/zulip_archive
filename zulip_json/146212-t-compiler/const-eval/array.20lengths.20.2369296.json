[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span> ! I had a question that originated from my looking at ways to address issue <a href=\"https://github.com/rust-lang/rust/issues/69296\" title=\"https://github.com/rust-lang/rust/issues/69296\">#69296</a></p>",
        "id": 191928311,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585246887
    },
    {
        "content": "<p>my basic question is: are the rules governing the static+dynamic semantics of the length (const) expression in an array type meant to be the same as the rules governing the right hand side of <code>const</code> items?</p>",
        "id": 191928472,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585246958
    },
    {
        "content": "<p>or is that not at all our intention?</p>",
        "id": 191928498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585246971
    },
    {
        "content": "<p>for some reason, when I first looked at <a href=\"https://github.com/rust-lang/rust/issues/69296\" title=\"https://github.com/rust-lang/rust/issues/69296\">#69296</a>, I had assumed that an array length expression should be subject to the same static restrictions as an expression in a <code>const</code> item. But after thinking further on the matter, I'm not sure where I got that impression. So I figured it would be best to check with you all about it.</p>",
        "id": 191928666,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585247045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ugh that's just a duplicate</p>",
        "id": 191938290,
        "sender_full_name": "eddyb",
        "timestamp": 1585251595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> the main issue is <a href=\"https://github.com/rust-lang/rust/issues/43408\" title=\"https://github.com/rust-lang/rust/issues/43408\">#43408</a></p>",
        "id": 191938401,
        "sender_full_name": "eddyb",
        "timestamp": 1585251639
    },
    {
        "content": "<p><code>#![feature(const_generics)]</code> currently acts as a toggle for the correct behavior (that without lazy normalization will cause cycle errors in some cases)</p>",
        "id": 191938440,
        "sender_full_name": "eddyb",
        "timestamp": 1585251676
    },
    {
        "content": "<p>but also, I've suggested recently that for array lengths <em>inside</em> bodies (as opposed to in signatures or <code>where</code> clauses), we could just apply the fix on stable (cc <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>)</p>",
        "id": 191938543,
        "sender_full_name": "eddyb",
        "timestamp": 1585251725
    },
    {
        "content": "<p>I should just go do that before I forget tbh</p>",
        "id": 191938764,
        "sender_full_name": "eddyb",
        "timestamp": 1585251878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> taadaa <a href=\"https://github.com/rust-lang/rust/issues/70452\" title=\"https://github.com/rust-lang/rust/issues/70452\">#70452</a></p>",
        "id": 191967372,
        "sender_full_name": "eddyb",
        "timestamp": 1585270635
    },
    {
        "content": "<p>note that this won't handle <code>let _: [_; size_of::&lt;T&gt;()];</code>, only creating an array with a repeat expression</p>",
        "id": 191967393,
        "sender_full_name": "eddyb",
        "timestamp": 1585270672
    },
    {
        "content": "<p>we should be able to handle array types too but it's more effort to check correctly that they are indeed inside a body</p>",
        "id": 191967448,
        "sender_full_name": "eddyb",
        "timestamp": 1585270704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> so I probably would want to just go to sleep now, but here's a conundrum: can <code>enum</code> discriminants depend on generics in scope</p>",
        "id": 191967504,
        "sender_full_name": "eddyb",
        "timestamp": 1585270785
    },
    {
        "content": "<p>this <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=60015133bd8af96b5ed850e05d04d7ee\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=60015133bd8af96b5ed850e05d04d7ee\">is still unstable</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">MyWeirdOption</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">33</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">77</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191967583,
        "sender_full_name": "eddyb",
        "timestamp": 1585270843
    },
    {
        "content": "<p>and without <code>(T)</code> you get \"parameter <code>T</code> is never used\"</p>",
        "id": 191967603,
        "sender_full_name": "eddyb",
        "timestamp": 1585270861
    },
    {
        "content": "<p>nice, it ICEs: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4da467fd4fe048d25c42f37853bd9c78\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4da467fd4fe048d25c42f37853bd9c78\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=4da467fd4fe048d25c42f37853bd9c78</a></p>",
        "id": 191967684,
        "sender_full_name": "eddyb",
        "timestamp": 1585270925
    },
    {
        "content": "<blockquote>\n<p>can enum discriminants depend on generics in scope</p>\n</blockquote>\n<p>you don't mean giving an enum variant a discriminant whose value is a const generic parameter, do you? <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 191968340,
        "sender_full_name": "varkor",
        "timestamp": 1585271676
    },
    {
        "content": "<p>you did mean thatâ€¦</p>",
        "id": 191968355,
        "sender_full_name": "varkor",
        "timestamp": 1585271706
    },
    {
        "content": "<p>do we <em>want</em> that to be supported?</p>",
        "id": 191968480,
        "sender_full_name": "varkor",
        "timestamp": 1585271880
    },
    {
        "content": "<p>I'm going to assume not, and that we should give it a proper error message</p>",
        "id": 191968532,
        "sender_full_name": "varkor",
        "timestamp": 1585271912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> btw check this out <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ba0ae8e0eb712b342a61a776ac52c62f\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ba0ae8e0eb712b342a61a776ac52c62f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ba0ae8e0eb712b342a61a776ac52c62f</a></p>",
        "id": 191968553,
        "sender_full_name": "eddyb",
        "timestamp": 1585271967
    },
    {
        "content": "<p>polymorphic evaluation ftw :D</p>",
        "id": 191968558,
        "sender_full_name": "eddyb",
        "timestamp": 1585271975
    },
    {
        "content": "<p>I'm quite surprised that actually works</p>",
        "id": 191968612,
        "sender_full_name": "varkor",
        "timestamp": 1585272018
    },
    {
        "content": "<p>anyway I just opened <a href=\"https://github.com/rust-lang/rust/issues/70453\" title=\"https://github.com/rust-lang/rust/issues/70453\">#70453</a> for the <code>enum</code> discriminant case</p>",
        "id": 191968614,
        "sender_full_name": "eddyb",
        "timestamp": 1585272040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> I'm not, given how many miri bugs had to be fixed for it to work :P</p>",
        "id": 191968627,
        "sender_full_name": "eddyb",
        "timestamp": 1585272103
    },
    {
        "content": "<p>although I'm not sure we even have that as a testcase</p>",
        "id": 191968631,
        "sender_full_name": "eddyb",
        "timestamp": 1585272111
    },
    {
        "content": "<p>haha</p>",
        "id": 191968633,
        "sender_full_name": "varkor",
        "timestamp": 1585272114
    },
    {
        "content": "<p>we should just stabilise it there</p>",
        "id": 191968691,
        "sender_full_name": "varkor",
        "timestamp": 1585272143
    },
    {
        "content": "<p>note that it doesn't work without <code>#![feature(const_generics)]</code> because w/o it the generics are bugged</p>",
        "id": 191968695,
        "sender_full_name": "eddyb",
        "timestamp": 1585272148
    },
    {
        "content": "<p>I mean, what other parts of const generics were people really waiting for?</p>",
        "id": 191968696,
        "sender_full_name": "varkor",
        "timestamp": 1585272152
    },
    {
        "content": "<p>this is the big one</p>",
        "id": 191968697,
        "sender_full_name": "varkor",
        "timestamp": 1585272154
    },
    {
        "content": "<p>oh, I guess we just need lazy normalisation for this, not const generics</p>",
        "id": 191968724,
        "sender_full_name": "varkor",
        "timestamp": 1585272186
    },
    {
        "content": "<p>yeah</p>",
        "id": 191968751,
        "sender_full_name": "eddyb",
        "timestamp": 1585272222
    },
    {
        "content": "<p>I wonder if we can whitelist function signatures</p>",
        "id": 191968753,
        "sender_full_name": "eddyb",
        "timestamp": 1585272229
    },
    {
        "content": "<p>I was hoping <a href=\"https://github.com/rust-lang/rust/issues/67890\" title=\"https://github.com/rust-lang/rust/issues/67890\">#67890</a> would be merged soon regardless, but it seems <span class=\"user-mention\" data-user-id=\"224180\">@Ben Lewis</span> is busy at the moment</p>",
        "id": 191968840,
        "sender_full_name": "varkor",
        "timestamp": 1585272342
    },
    {
        "content": "<p>uh oh what is this failure, I don't see a diff &lt;<a href=\"https://github.com/rust-lang/rust/pull/70452/checks?check_run_id=538187978\" title=\"https://github.com/rust-lang/rust/pull/70452/checks?check_run_id=538187978\">https://github.com/rust-lang/rust/pull/70452/checks?check_run_id=538187978</a>&gt;</p>",
        "id": 191968909,
        "sender_full_name": "eddyb",
        "timestamp": 1585272430
    },
    {
        "content": "<p>also 21 minutes to that failure? damn GHA is fast</p>",
        "id": 191968960,
        "sender_full_name": "eddyb",
        "timestamp": 1585272482
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> also, this <code>*mut T</code> where <code>T: Sized</code> having fixed layout is kind of crucial for polymorphization, although not <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>'s initial work</p>",
        "id": 191968999,
        "sender_full_name": "eddyb",
        "timestamp": 1585272548
    },
    {
        "content": "<blockquote>\n<p>uh oh what is this failure, I don't see a diff</p>\n</blockquote>\n<p>that is strange</p>",
        "id": 191969089,
        "sender_full_name": "varkor",
        "timestamp": 1585272718
    },
    {
        "content": "<p>I'm sure I've encountered this before</p>",
        "id": 191969107,
        "sender_full_name": "varkor",
        "timestamp": 1585272722
    },
    {
        "content": "<p>but it's too late for me to be able to recall simple things like that</p>",
        "id": 191969133,
        "sender_full_name": "varkor",
        "timestamp": 1585272736
    },
    {
        "content": "<blockquote>\n<p>also, this *mut T where T: Sized having fixed layout is kind of crucial for polymorphization</p>\n</blockquote>\n<p>ahh, okay</p>",
        "id": 191969169,
        "sender_full_name": "varkor",
        "timestamp": 1585272799
    },
    {
        "content": "<p>I'm falling asleep, so I'm going to head off â€”Â good luck fixing those two tests!</p>",
        "id": 191969317,
        "sender_full_name": "varkor",
        "timestamp": 1585272983
    },
    {
        "content": "<p>well I don't think there's anything wrong with the tests :P</p>",
        "id": 191969468,
        "sender_full_name": "eddyb",
        "timestamp": 1585273262
    },
    {
        "content": "<p>unless they were added in between me branching off master and opening the PR</p>",
        "id": 191969471,
        "sender_full_name": "eddyb",
        "timestamp": 1585273272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> lmao <a href=\"https://github.com/rust-lang/rust/pull/70452#issuecomment-604860039\" title=\"https://github.com/rust-lang/rust/pull/70452#issuecomment-604860039\">https://github.com/rust-lang/rust/pull/70452#issuecomment-604860039</a></p>",
        "id": 191991119,
        "sender_full_name": "eddyb",
        "timestamp": 1585300206
    },
    {
        "content": "<p>haha</p>",
        "id": 192008711,
        "sender_full_name": "varkor",
        "timestamp": 1585311479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> should we at least signal a proper error here rather than ICE'ing?</p>",
        "id": 192023312,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585318730
    },
    {
        "content": "<p>I guess its not worth the effort to fix it</p>",
        "id": 192023407,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585318771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> if it were easy (without accidentally changing the semantics irreversibly) we would've done it years ago</p>",
        "id": 192023464,
        "sender_full_name": "eddyb",
        "timestamp": 1585318800
    },
    {
        "content": "<p>I guess the one thing I regret is not doing a whitelisting approach and just let the weirder situations continue to ICE or w/e</p>",
        "id": 192023561,
        "sender_full_name": "eddyb",
        "timestamp": 1585318828
    },
    {
        "content": "<p>yeah. I was thinking of something along the lines of adding a rib</p>",
        "id": 192023563,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585318829
    },
    {
        "content": "<p>yeah that's the one thing we don't want to do, because the generics <em>are</em> in scope</p>",
        "id": 192023608,
        "sender_full_name": "eddyb",
        "timestamp": 1585318846
    },
    {
        "content": "<p>it's typeck who has to hide them because w/o lazy normalization several situations turn into cycle errors</p>",
        "id": 192023683,
        "sender_full_name": "eddyb",
        "timestamp": 1585318879
    },
    {
        "content": "<p>okay. thanks for feedback.</p>",
        "id": 192023913,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585318957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> also, funnily enough, <a href=\"https://github.com/rust-lang/rust/issues/70452\" title=\"https://github.com/rust-lang/rust/issues/70452\">#70452</a> breaks <code>git2</code>, so there's at least one failure mode I haven't considered (it's not a query cycle though, but rather a \"broken MIR\" ICE)</p>",
        "id": 192024195,
        "sender_full_name": "eddyb",
        "timestamp": 1585319052
    },
    {
        "content": "<p>is MIR supposed to be fully normalized or is that only for performance reasons? (and coercion during typeck I suppose)</p>",
        "id": 192024308,
        "sender_full_name": "eddyb",
        "timestamp": 1585319097
    },
    {
        "content": "<p>I'm starting to remember the bugs from MIR typeck missing normalization calls</p>",
        "id": 192024348,
        "sender_full_name": "eddyb",
        "timestamp": 1585319113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/array.20lengths.20.2369296/near/192024308\" title=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/array.20lengths.20.2369296/near/192024308\">said</a>:</p>\n<blockquote>\n<p>is MIR supposed to be fully normalized or is that only for performance reasons? (and coercion during typeck I suppose)</p>\n</blockquote>\n<p>this is a great question</p>",
        "id": 192024389,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585319129
    },
    {
        "content": "<p>oh wait even if we normalized during typeck, <code>Expr::Repeat</code> goes through <code>ty::Const::from_anon_const</code> again during MIR building</p>",
        "id": 192024547,
        "sender_full_name": "eddyb",
        "timestamp": 1585319185
    },
    {
        "content": "<p>so it would have to be normalized during MIR building or during MIR typeck</p>",
        "id": 192024581,
        "sender_full_name": "eddyb",
        "timestamp": 1585319204
    }
]