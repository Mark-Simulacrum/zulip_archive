[
    {
        "content": "<p>The feature is currently marked as incomplete, and I would like to work on it more so what are the next steps for this?</p>\n<p>Can we change it from <code>incomplete</code> to <code>active</code> now? Then we might be able to start adding <code>const impl</code>s as well as <code>#[default_method_body_is_const]</code> attributes.</p>",
        "id": 245816590,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626179356
    },
    {
        "content": "<p>it does not work for generic impls with bounds (well, using the bounds does not work)</p>",
        "id": 245817611,
        "sender_full_name": "oli",
        "timestamp": 1626179862
    },
    {
        "content": "<p>I think we should fix that before removing the incomplete setting</p>",
        "id": 245817641,
        "sender_full_name": "oli",
        "timestamp": 1626179878
    },
    {
        "content": "<p>I think we need to look up the type of the trait being called and check if it is a generic param of a const impl (the ?const opt-out check also happens), I can't find a query that does that.</p>",
        "id": 245825994,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626183700
    },
    {
        "content": "<p>I was hoping we could re-use the trait system. We differentiate between const trait bounds and non-const trait bounds already</p>",
        "id": 245836012,
        "sender_full_name": "oli",
        "timestamp": 1626187853
    },
    {
        "content": "<p>I don't want to make const trait stuff spaghetti code within the trait system, but I don't know how to do it all correctly yet. I haven't had time to look at it recently</p>",
        "id": 245836088,
        "sender_full_name": "oli",
        "timestamp": 1626187889
    },
    {
        "content": "<p>making <code>impl&lt;T: Trait&gt;</code> treat the bound as a const trait bound in <code>const fn</code>s probably requires changes to astconv</p>",
        "id": 245837073,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626188246
    },
    {
        "content": "<p>it handles generics on <code>const fn</code>s already, but impl generics are only lowered once (for non-const-fns), I believe</p>",
        "id": 245837141,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1626188274
    },
    {
        "content": "<p>yea, but I think we already have some logic that rewrites them for functions inside const impls</p>",
        "id": 245841870,
        "sender_full_name": "oli",
        "timestamp": 1626189938
    },
    {
        "content": "<p>To me, I'm fine with making it not <code>incomplete</code>, as <code>imcomplete</code> usually suggests that the feature has soundness issues. But for const trait impls, AFAIK there aren't any soundness issues yet,  we only have <em>correctness</em> issues. The libs team was conflicted to merge my PR introducing the feature to the standard library because it was marked as incomplete, and I think it is fine to have it as <code>active</code> now.</p>",
        "id": 245844757,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626191176
    },
    {
        "content": "<p>I'd be fine removing the incomplete marking after a review of our tests. Not sure we have enough test coverage for comfort</p>",
        "id": 245847554,
        "sender_full_name": "oli",
        "timestamp": 1626192370
    },
    {
        "content": "<p>does being marked \"incomplete\" also show the feature's experimental status wrt t-lang ? e.g. if some questions are still unanswered, or if syntax or semantics aren't finalized/validated, etc ?</p>",
        "id": 245848834,
        "sender_full_name": "lqd",
        "timestamp": 1626192956
    },
    {
        "content": "<p>no, incomplete is mostly \"will ICE and/or eat your hard disk\"</p>",
        "id": 245849691,
        "sender_full_name": "oli",
        "timestamp": 1626193331
    },
    {
        "content": "<p>and/or <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span></p>",
        "id": 245849730,
        "sender_full_name": "lqd",
        "timestamp": 1626193351
    },
    {
        "content": "<p>I forget how we track experimental features/RFCs, until their respective RFCs are accepted, or if we do ?</p>",
        "id": 245849961,
        "sender_full_name": "lqd",
        "timestamp": 1626193447
    },
    {
        "content": "<p>(I think maybe const generics defaults are in a similar situation ? and not marked incomplete anymore)</p>",
        "id": 245850155,
        "sender_full_name": "lqd",
        "timestamp": 1626193537
    },
    {
        "content": "<p>(with way smaller scope + implications there of course :)</p>",
        "id": 245850263,
        "sender_full_name": "lqd",
        "timestamp": 1626193575
    },
    {
        "content": "<p>Tests directory: src/test/ui/rfc-2632-const-trait-impl</p>\n<ul>\n<li>Basic Syntax, Feature Gate: <code>syntax</code>, <code>feature-gate</code>, <code>const-impl-*</code></li>\n<li>Cannot have both <code>impl const Tr</code> and <code>impl Tr</code>: <code>const-and-nonconst-impl</code></li>\n<li>Calling impl const methods in const context: <code>call-const-trait-method*</code></li>\n<li>Calling methods on generic parameters with trait bounds: <code>call-generic-method*</code></li>\n<li>Inferred <code>const</code> bounds on generic params: <br>\n      - Assoc type bounds require const impls: <code>assoc-type</code>(<strong>test is currently ignored</strong>)<br>\n      - Generic param bounds on trait methods require const impls: <strong>no test</strong><br>\n      - Generic param bounds on const impls require const impl of bounds: <strong>no test</strong><br>\n         - When the <code>const impl</code> is used at runtime (not in const context), its bounds do not need to be <code>const</code>: <strong>no test</strong></li>\n<li>Const <code>Drop</code>s: no test, <strong>not implemented AFAIK</strong></li>\n<li><code>const</code> default method bodies: <code>impl-with-default-fn</code>, <code>attr-misuse</code></li>\n<li>Cross Crate Usage and Staged API: <code>cross-crate</code>, <code>stability</code>, <code>staged-api</code></li>\n</ul>",
        "id": 245981195,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626278674
    },
    {
        "content": "<p>nice! thanks for this analysis. it's probably safe to avoid const drop for now, and that probably deserves its own folder and feature gate and all. Considering that we do have good stability tests, I think it would be ok to start experimenting in libstd with non-generic impls</p>",
        "id": 246078177,
        "sender_full_name": "oli",
        "timestamp": 1626346497
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/implementation.20path.20for.20const.20trait.20impls/near/245836012\">said</a>:</p>\n<blockquote>\n<p>I was hoping we could re-use the trait system. We differentiate between const trait bounds and non-const trait bounds already</p>\n</blockquote>\n<p>Does that mean I should look up the predicates of callee, and permit the call if it has a const bound on the trait?</p>",
        "id": 246363760,
        "sender_full_name": "fee1-dead",
        "timestamp": 1626591560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"361356\">fee1-dead</span> has marked this topic as resolved.</p>",
        "id": 246446310,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626696526
    }
]