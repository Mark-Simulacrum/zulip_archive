[
    {
        "content": "<p>When mutating a const</p>\n<div class=\"codehilite\"><pre><span></span><code>fn main() {\n    const B: String = String::new(); // Not OK\n    B.push_str(&quot;asdf asdf asdf&quot;);\n    println!(&quot;here {}&quot;, B);\n}\n</code></pre></div>\n<p>the compiler only raises a warning, that mutating consts creates temporaries. I would expect it to fail. Why does this compile at all?</p>",
        "id": 216723574,
        "sender_full_name": "vn-ki",
        "timestamp": 1605353526
    },
    {
        "content": "<p>The warning was introduced in <a href=\"https://github.com/rust-lang/rust/pull/75573\">https://github.com/rust-lang/rust/pull/75573</a>. It works because <code>B</code> is assigned to a temporary. The <code>push_str</code> is then called on this temporary.</p>",
        "id": 216725808,
        "sender_full_name": "bjorn3",
        "timestamp": 1605356053
    },
    {
        "content": "<p>yea, basically <code>B.push_str(\"asdf\");</code> is <code>let mut tmp = B; tmp.push_str(\"asdf\");</code>, which copies <code>B</code> and then mutates the copy, and then throws away the copy</p>",
        "id": 216726265,
        "sender_full_name": "oli",
        "timestamp": 1605356878
    },
    {
        "content": "<p>Does <code>const</code> in rust mean something else? Isn't constant synonymous with immutable?</p>",
        "id": 216727322,
        "sender_full_name": "vn-ki",
        "timestamp": 1605357948
    },
    {
        "content": "<p>I get that the original value didn't change. But isn't it simply better to raise a compiler error when you are mutating a <code>const</code>ant?</p>",
        "id": 216727389,
        "sender_full_name": "vn-ki",
        "timestamp": 1605357996
    },
    {
        "content": "<p>well const has multiple meanings</p>",
        "id": 216727502,
        "sender_full_name": "lcnr",
        "timestamp": 1605358112
    },
    {
        "content": "<p>the issue here is, as <span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> and <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> have said, that  you are mutating a temporary which is assigned a copy of the constant, not the constant itself</p>",
        "id": 216727544,
        "sender_full_name": "lcnr",
        "timestamp": 1605358184
    },
    {
        "content": "<p>yes. i get that. But when I first did this (and ignored the compiler warning thinking it was another unused variable lint), i was super confused by the outcome</p>",
        "id": 216727617,
        "sender_full_name": "vn-ki",
        "timestamp": 1605358247
    },
    {
        "content": "<p>I did not expect it to be compilable (as I was mutating a constatnt), but the compiler didn't complain</p>",
        "id": 216727634,
        "sender_full_name": "vn-ki",
        "timestamp": 1605358270
    },
    {
        "content": "<p>yeah, iirc there are actually some valid uses for this. I do think it would make sense to increase that lint be deny by default though</p>",
        "id": 216727653,
        "sender_full_name": "lcnr",
        "timestamp": 1605358300
    },
    {
        "content": "<p>the lint is mostly just quite new, so starting out as <code>deny</code> would probably a bit too invasive <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> maybe with the release of the 2021 edition</p>",
        "id": 216727723,
        "sender_full_name": "lcnr",
        "timestamp": 1605358355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"355545\">Vishnunarayan K. I.</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/why.20does.20mutating.20const.20only.20raise.20a.20warning.3F/near/216727322\">said</a>:</p>\n<blockquote>\n<p>Does <code>const</code> in rust mean something else? Isn't constant synonymous with immutable?</p>\n</blockquote>\n<p><code>const</code> is a form of \"inline\", really -- it means \"behave as if the bod of the const initializer is copy-pasted to all use sites\"</p>",
        "id": 216729047,
        "sender_full_name": "RalfJ",
        "timestamp": 1605360513
    },
    {
        "content": "<p>note that <code>let x = String::new()</code> already creates an immutable binder, but <code>const</code> is very different from <code>let</code></p>",
        "id": 216729056,
        "sender_full_name": "RalfJ",
        "timestamp": 1605360548
    },
    {
        "content": "<p>yeah, i'm re-reading const-eval#20 and this seems to be discussed there. quite a different meaning of <code>const</code>.</p>",
        "id": 216729152,
        "sender_full_name": "vn-ki",
        "timestamp": 1605360691
    },
    {
        "content": "<p><code>const B: String = String::new();</code> is essentially <code>const fn B() -&gt; String { String::new() }</code>, just in a way that it gets auto-called.</p>\n<p>Basically, <code>B</code> creates a new temporary, and there are actually useful cases for mutating temporaries, so this is just an unfortunate confluence of features, thus the new warning.</p>",
        "id": 216824424,
        "sender_full_name": "scottmcm",
        "timestamp": 1605489259
    }
]