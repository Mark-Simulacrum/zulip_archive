[
    {
        "content": "<p>I want that same thing, but for <code>asm!</code> and <code>global_asm!</code>. That is, declaring whole new compilation units in <code>const-eval</code> with proper support for lto flags and everything else that rustc already supports.</p>",
        "id": 202428288,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593520513
    },
    {
        "content": "<p>Or for declaring functions bodies, it wouldn't be much different.</p>",
        "id": 202428349,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593520558
    },
    {
        "content": "<p>so you basically want to create the binary code for a function via CTFE and have the compiler emit that into the final binary?</p>",
        "id": 202428418,
        "sender_full_name": "oli",
        "timestamp": 1593520583
    },
    {
        "content": "<p>I think you can already do that by using a <code>static foo: [u8; N] = ...;</code> and creating an <code>extern { fn foo(); }</code> and invoking that</p>",
        "id": 202428491,
        "sender_full_name": "oli",
        "timestamp": 1593520653
    },
    {
        "content": "<p>but yea, having first class support for that could be neat</p>",
        "id": 202428517,
        "sender_full_name": "oli",
        "timestamp": 1593520674
    },
    {
        "content": "<p>I can do that, if I assemble it all the way myself. Which means such a proc-macro that assembles it can not benefit from the compiler infrastructure that already exists. (I've tested that and lto didn't appear to work). It also means that target architecture is finicky and using the values of other constants is incredibly hard to do properly.</p>",
        "id": 202428798,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593520834
    },
    {
        "content": "<p>The static's initializer has access to everything in the compiler that CTFE normally has access to, so if you do your machine code generation in CTFE instead of in a proc macro, then that should work, right?</p>",
        "id": 202429027,
        "sender_full_name": "oli",
        "timestamp": 1593521002
    },
    {
        "content": "<p>Of course with the limited state of CTFE right now that's likely unfeasible, but I don't see anything in the \"set of things that we all agree on shoudl be in CTFE in some form\" that would be missing for that</p>",
        "id": 202429125,
        "sender_full_name": "oli",
        "timestamp": 1593521047
    },
    {
        "content": "<p>Exactly, mapping the <code>asm!</code> text input into code that correctly evaluates to your byte-encoded machine code is quite hard to do if some bit fields insaid byte code are supposed to be constructed during CTFE.</p>",
        "id": 202429168,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593521087
    },
    {
        "content": "<p>And it doesn't solve the relocation problem. I simply _can not_ use a function address if it's not a constant.</p>",
        "id": 202429223,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593521126
    },
    {
        "content": "<p>I'd like to tell the compiler: 'Hey, these 4 bytes here are going to be a relocation and you need to resolve it against something that gets linked later on'.</p>",
        "id": 202429333,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593521179
    },
    {
        "content": "<p>yea, that's how CTFE pointers work :D</p>",
        "id": 202429356,
        "sender_full_name": "oli",
        "timestamp": 1593521193
    },
    {
        "content": "<p>we delay the actual resolving all the way to llvm</p>",
        "id": 202429398,
        "sender_full_name": "oli",
        "timestamp": 1593521216
    },
    {
        "content": "<p>You're not allowed to embed the bytes of the pointers individually, afai,.</p>",
        "id": 202429423,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593521230
    },
    {
        "content": "<p>you can already do all this with enough feature gates and lots of unsafe</p>",
        "id": 202429447,
        "sender_full_name": "oli",
        "timestamp": 1593521245
    },
    {
        "content": "<p>sure, but just write all of them in one go</p>",
        "id": 202429465,
        "sender_full_name": "oli",
        "timestamp": 1593521252
    },
    {
        "content": "<p>but that's not an inherent blocker either, we just don't have the impl for it</p>",
        "id": 202429488,
        "sender_full_name": "oli",
        "timestamp": 1593521269
    },
    {
        "content": "<p>.. Sounds nice. Best solution i've found until now would be to generate a struct, not <code>[u8; N]</code>  so that everything I want to embed from the environment during CTFE stays in its respective type and is 'nicely' evaluated.</p>",
        "id": 202429574,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593521298
    },
    {
        "content": "<p>Mark it repr(C) and it's as good a bytecode body as any other byte array.</p>",
        "id": 202429611,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593521325
    },
    {
        "content": "<p>Yea, you're likely gonna need a union or something else that allows you to store pointers in integers</p>",
        "id": 202429635,
        "sender_full_name": "oli",
        "timestamp": 1593521339
    },
    {
        "content": "<p>you can't have a <code>u8</code> that is actually a relocation</p>",
        "id": 202429654,
        "sender_full_name": "oli",
        "timestamp": 1593521348
    },
    {
        "content": "<p>but you can have a <code>MaybeInitialized&lt;[u8; N]&gt;</code> and write your pointer by getting a pointer to the destination and casting that pointer liberally to whatever works</p>",
        "id": 202429731,
        "sender_full_name": "oli",
        "timestamp": 1593521397
    },
    {
        "content": "<p>Which means no short jumps to other symbols generated via that technique.</p>",
        "id": 202429784,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593521404
    },
    {
        "content": "<p>uh</p>",
        "id": 202429813,
        "sender_full_name": "oli",
        "timestamp": 1593521421
    },
    {
        "content": "<p>Now that's a different issue entirely ;)</p>",
        "id": 202429826,
        "sender_full_name": "oli",
        "timestamp": 1593521430
    },
    {
        "content": "<p>you are machinegunning out advanced feature requests here at quite  a rate (this is not a complaint, just mentioning that we're talking about many different features here)</p>",
        "id": 202429882,
        "sender_full_name": "oli",
        "timestamp": 1593521465
    },
    {
        "content": "<p>I'm not sure if llvm can do symbol subtraction in order to create relative jumps</p>",
        "id": 202429932,
        "sender_full_name": "oli",
        "timestamp": 1593521506
    },
    {
        "content": "<p>Oh right, well simpler example would be that I can't change the byte order of a function pointer during CTFE with purpose of embedding it</p>",
        "id": 202429935,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593521508
    },
    {
        "content": "<p>The symbol subtraction would need to happen after the symbols are one linked TU. Maybe ctfe all the way through llvm? Maybe they can offer us a neat wasm vm in the linker?</p>",
        "id": 202430099,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593521605
    },
    {
        "content": "<p>yea, but as mentioned above, this is actually a feature we're thinking about adding to the engine. Kinda related to <a href=\"https://github.com/rust-lang/rust/issues/69488\">https://github.com/rust-lang/rust/issues/69488</a></p>",
        "id": 202430225,
        "sender_full_name": "oli",
        "timestamp": 1593521666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"229913\">HeroicKatora</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/generate.20function.20machine.20code/near/202430099\">said</a>:</p>\n<blockquote>\n<p>The symbol subtraction would need to happen after the symbols are one linked TU. Maybe ctfe all the way through llvm? Maybe they can offer us a neat wasm vm in the linker?</p>\n</blockquote>\n<p>No, CTFE can't run anymore that late. Basically it needs first class llvm support</p>",
        "id": 202430306,
        "sender_full_name": "oli",
        "timestamp": 1593521709
    },
    {
        "content": "<p>Hm, maybe linker scripts are powerful enough?</p>",
        "id": 202430373,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1593521746
    },
    {
        "content": "<p>possible</p>",
        "id": 202430393,
        "sender_full_name": "oli",
        "timestamp": 1593521760
    }
]