[
    {
        "content": "<p>I am worried that const drop may accidentally allow drops to happen in promoteds that would otherwise have happened at runtime. This does seem like a problem that we should definitely guard against by adding some tests.</p>",
        "id": 257932598,
        "sender_full_name": "oli",
        "timestamp": 1634489827
    },
    {
        "content": "<p>I was going to ask about this. I don't really see the difference between const and non-const Drop from the point of view of promoteds.</p>",
        "id": 257934047,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634491095
    },
    {
        "content": "<p>What happens to the <code>drop</code> terminator in promotion?</p>",
        "id": 257934117,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634491175
    },
    {
        "content": "<p>well, there can't be any <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 257940104,
        "sender_full_name": "oli",
        "timestamp": 1634496955
    },
    {
        "content": "<p>but I worry that the recent changes would allow for them to appear once we have const drop</p>",
        "id": 257940154,
        "sender_full_name": "oli",
        "timestamp": 1634496973
    },
    {
        "content": "<p>if there are reachable drop terminators in some code, it doesn't get promoted</p>",
        "id": 257940168,
        "sender_full_name": "oli",
        "timestamp": 1634496993
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for a test that checks that</p>",
        "id": 257940206,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634497041
    },
    {
        "content": "<p>Allowing const drop for promoted seems surprising, since it can substantially change the semantics of the program.</p>",
        "id": 257941114,
        "sender_full_name": "tm",
        "timestamp": 1634497886
    },
    {
        "content": "<p>For example with a panic in drop, which would no longer happen.</p>",
        "id": 257941170,
        "sender_full_name": "tm",
        "timestamp": 1634497929
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=55a73f799e89b6de867472be84440f33\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=55a73f799e89b6de867472be84440f33</a></p>",
        "id": 257942580,
        "sender_full_name": "tm",
        "timestamp": 1634499270
    },
    {
        "content": "<p>That's definitely wrong</p>",
        "id": 257943322,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1634499963
    },
    {
        "content": "<p>Ok, I will bring back the old NeedsDrop qualif back to life.</p>",
        "id": 257944289,
        "sender_full_name": "tm",
        "timestamp": 1634500851
    },
    {
        "content": "<p>In const / static initializers promotions is quite happy about promoting expression that contains temporaries that need to be dropped. Is this intentional behaviour? The compilation in that case usually fails due to check for live drops, but checking for live drops can be delayed until after promotion, where there will be no drop terminators left.</p>",
        "id": 261818729,
        "sender_full_name": "tm",
        "timestamp": 1637170346
    },
    {
        "content": "<p>Essentially, when checking for needs drop, the structural recursion stops at function call boundary, so it is possible to promote things like <code>&amp;f(&amp;String::new())</code>.</p>",
        "id": 261819897,
        "sender_full_name": "tm",
        "timestamp": 1637170808
    },
    {
        "content": "<p>uh... it should check the arguments as well, doesnt it?</p>",
        "id": 261821227,
        "sender_full_name": "RalfJ",
        "timestamp": 1637171333
    },
    {
        "content": "<p>Validation doesn't check the arguments (for drop).</p>",
        "id": 261821483,
        "sender_full_name": "tm",
        "timestamp": 1637171432
    },
    {
        "content": "<p>hm, that seems like a bug :(</p>",
        "id": 261822495,
        "sender_full_name": "RalfJ",
        "timestamp": 1637171862
    },
    {
        "content": "<p>wait, validation? thats separate from promotion right?</p>",
        "id": 261822547,
        "sender_full_name": "RalfJ",
        "timestamp": 1637171881
    },
    {
        "content": "<p>Validation as in part of promotion that validates candidates before promoting them.</p>",
        "id": 261822713,
        "sender_full_name": "tm",
        "timestamp": 1637171932
    },
    {
        "content": "<p>ah okay</p>",
        "id": 261822746,
        "sender_full_name": "RalfJ",
        "timestamp": 1637171947
    },
    {
        "content": "<p>hm, do you have a self-contained example? this fails to build here</p>\n<div class=\"codehilite\"><pre><span></span><code>const C: () = {\n    &amp;id(&amp;String::new());\n};\n</code></pre></div>",
        "id": 261823179,
        "sender_full_name": "RalfJ",
        "timestamp": 1637172066
    },
    {
        "content": "<p>If you take a look at mir dump, you will see that promotion succeeds, and the check for live drops can be delayed until after the promotion with <code>#![feature(const_precise_live_drops)]</code>.</p>",
        "id": 261823468,
        "sender_full_name": "tm",
        "timestamp": 1637172180
    },
    {
        "content": "<p>Maybe there was an implicit contract that const checking was responsible for stopping the compilation here?</p>",
        "id": 261823683,
        "sender_full_name": "tm",
        "timestamp": 1637172270
    },
    {
        "content": "<p>ah so this builds but shouldnt:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(const_precise_live_drops)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">id</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">id</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261826693,
        "sender_full_name": "RalfJ",
        "timestamp": 1637173536
    },
    {
        "content": "<p>we should certainly add it as a testcase... <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"118594\">@Dylan MacKenzie (ecstatic-morse)</span> is this a new bug or should it be added to an existing issue?</p>",
        "id": 261826746,
        "sender_full_name": "RalfJ",
        "timestamp": 1637173556
    },
    {
        "content": "<p>I am would be also curious to know what do you think about case below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"nc\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">forget</span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261828097,
        "sender_full_name": "tm",
        "timestamp": 1637174109
    },
    {
        "content": "<p>Seems like the fix is to stop promoting functions that return types with drop glue. That would happen as part of \"infallible promotion\", right? We want to stop promoting arbitrary const fn calls in <code>const</code>/<code>static</code> initializers. I have to re-implement <code>const_precise_live_drops</code> anyways, so I'll make it run before promotion, but I don't know that we'd need to preserve that ordering once we do infallible promotion.</p>\n<p>It probably deserves its own issue so we don't lose track.</p>",
        "id": 261829868,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637174776
    },
    {
        "content": "<blockquote>\n<p>We want to stop promoting arbitrary const fn calls in const/static initializers</p>\n</blockquote>\n<p>I gave up on that, I dont think it is possible at this point</p>",
        "id": 261851912,
        "sender_full_name": "RalfJ",
        "timestamp": 1637184465
    },
    {
        "content": "<p>this is just too widely used</p>",
        "id": 261851934,
        "sender_full_name": "RalfJ",
        "timestamp": 1637184475
    },
    {
        "content": "<p>so we'll need to figure out how to make this sound even when const fn calls are promoted -- it looks like we currently somehow skip the arguments of functions, we 'just' need to not skip them?</p>",
        "id": 261852038,
        "sender_full_name": "RalfJ",
        "timestamp": 1637184519
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/const.20drop.20and.20promoteds/near/261851912\">said</a>:</p>\n<blockquote>\n<p>I gave up on that, I dont think it is possible at this point</p>\n</blockquote>\n<p>(maybe something for the 2024 edition)</p>",
        "id": 261863584,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637190347
    },
    {
        "content": "<p>Maybe -- it would require an auto-fix that translates things into inline anon consts.</p>",
        "id": 261949103,
        "sender_full_name": "RalfJ",
        "timestamp": 1637251869
    },
    {
        "content": "<p>For now, instead we make sure to never attempt to evaluate promoteds inside const/static initializers unless we really need their value -- so we can still hard error whenever evaluating a promoted fails.</p>",
        "id": 261949177,
        "sender_full_name": "RalfJ",
        "timestamp": 1637251904
    },
    {
        "content": "<p>Reported as <a href=\"https://github.com/rust-lang/rust/issues/91009\">#91009</a>.</p>",
        "id": 261972386,
        "sender_full_name": "tm",
        "timestamp": 1637261579
    }
]