[
    {
        "content": "<p>I am feeling the itch for a new RFC again, this time for const heap or const pointer comparisons... But my previous (arguably large) const RFC is only in provisional status and most of my RFCs from last year aren't even on a stabilization path yet. With this zulip thread I'm hoping to get some opinions from affected parties (<span class=\"user-group-mention\" data-user-group-id=\"1977\">@T-lang</span> <span class=\"user-group-mention\" data-user-group-id=\"1916\">@WG-const-eval</span> ). Do you feel like we have too much stuff going on around const eval right now? Basically just ask yourself the question whether this ping did or a hypothetical ping on the RFC repo would give you any feeling of annoyedness or exhaustion. If you don't want to write here, feel free to just drop me a private message. Please don't let this put any additional pressure on you, a \"no more const\" totally suffices.</p>",
        "id": 197578723,
        "sender_full_name": "oli",
        "timestamp": 1589472701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I've been wanting to sync up with you on that</p>",
        "id": 197578916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589472773
    },
    {
        "content": "<p>I don't feel \"too much\" but I'd like to discuss how to make a better interaction with lang team</p>",
        "id": 197578972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589472799
    },
    {
        "content": "<p>I have to review your skill tree, actually, I'm very excited about that</p>",
        "id": 197579019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589472818
    },
    {
        "content": "<p>it's not finished yet <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 197579038,
        "sender_full_name": "oli",
        "timestamp": 1589472826
    },
    {
        "content": "<p>I think there is definitely a need (at least for me <em>personally</em>) to kind of \"back up\" and set the broader frame, but I think that partly this conversation involves const generics (I know const eval / const gen are separable, it just seems to me like the two are also at least somewhat intertwined)</p>",
        "id": 197579517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589473002
    },
    {
        "content": "<p>the skill tree is definitely one way to communicate that tho</p>",
        "id": 197579555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589473016
    },
    {
        "content": "<p>I think I would feel a lot happier if we had more consensus around the \"end vision\"</p>",
        "id": 197579602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589473039
    },
    {
        "content": "<p>(even if that end vision evolves)</p>",
        "id": 197579617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589473046
    },
    {
        "content": "<p>I think my ideal would be that we have some shared idea of the end vision, along with some of the uncertainties and concerns to be careful of, and delegate the details to you to push along, syncing up every once in a while</p>",
        "id": 197579714,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589473079
    },
    {
        "content": "<p>\"you\" here being not necessarily you <em>personally</em> but a project group</p>",
        "id": 197579790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589473094
    },
    {
        "content": "<p>yea, a comprehensible plan is probably much better than the tangle of issues we have now</p>",
        "id": 197580151,
        "sender_full_name": "oli",
        "timestamp": 1589473246
    },
    {
        "content": "<p>I also would find it useful to get a sense what people outside <code>const-eval</code> think are the most needed features. I also think it's worth investigating possible use-cases internally, since we have a better idea of what various features would enable. For example, the fact that you can do string concatenation at compile-time with <em>only</em> <code>#![feature(const_if_match)]</code> was a surprise to me. Thanks <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>!</p>",
        "id": 197582463,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589474231
    },
    {
        "content": "<p>One thing that's clear to me is that, without heap allocation in constants, people will resort to fixed-capacity, stack-allocated dynamic arrays like the one in <a href=\"https://docs.rs/staticvec/0.9.2/staticvec/struct.StaticVec.html\">https://docs.rs/staticvec/0.9.2/staticvec/struct.StaticVec.html</a>. I wonder what it would take to make a usable subset of the API for such a data structure stably <code>const</code>? I think we would have to resolve some \"unconst\" questions at the very least.</p>",
        "id": 197583354,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589474583
    },
    {
        "content": "<p>const trait methods (for <code>Index</code>) and mutable references (for <code>IndexMut</code>) would also be pretty essential.</p>",
        "id": 197583675,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589474713
    },
    {
        "content": "<p>I think the lack of progress has to do with the lack of capacity the lang team has <em>in general</em> and not something specific to const stuff our your work in particular. And we need to implement a process here that can better handle the lang teams lower capacity, and prioritize this work over other work if necessary.</p>",
        "id": 197593543,
        "sender_full_name": "boats",
        "timestamp": 1589479020
    },
    {
        "content": "<p>I think I agree with Niko that working out a consensus together on the end vision is probably the next step, at least for the RFC that's pending</p>",
        "id": 197593748,
        "sender_full_name": "boats",
        "timestamp": 1589479096
    },
    {
        "content": "<p>I do feel like there's too much const stuff \"in flight\"... in particular the huge calling-trait-methods RFC, which has yet unresolved interaction questions (at least on the syntactic level) with fn ptrs and trait objects IIRC. my personal feeling is that it's worth \"finishing\" basic CTFE (covering all language primitives, in particular loops, mutable references and trait calls) before moving to more advanced stuff like heap allocations.</p>",
        "id": 197593860,
        "sender_full_name": "RalfJ",
        "timestamp": 1589479162
    },
    {
        "content": "<p>As an outside user: I'd personally be a lot happier to see the \"const fn with/in traits\" RFC resolved than to see another RFC opened. Traits are a huge part of Rust, to the point where heap and pointer comparisons _almost don't matter_ if you can't also use traits.</p>",
        "id": 197619035,
        "sender_full_name": "Lokathor",
        "timestamp": 1589490835
    },
    {
        "content": "<p>As another outside user: I'd personally love to see some case analysis: e.g. From library user side: What are some typical potential usage of const eval? From library author side: Is some existing crates like <a href=\"https://docs.rs/phf\">https://docs.rs/phf</a> able to migrate to const-eval-based eventually? What's blocking the migration at this time? And things like these.</p>",
        "id": 197721935,
        "sender_full_name": "Charles Lew",
        "timestamp": 1589562233
    },
    {
        "content": "<p>As yet another outside user: imo rust const is very limiting compared to, say constexpr in C++. The main thing is that Rust has rules about what const can do, whereas with C++, there are rules about what constexpr cannot do (see the cppreference page on core constant expressions for an exhaustive list)</p>",
        "id": 197882712,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589768658
    },
    {
        "content": "<p>But isn't that basically the same?</p>",
        "id": 197888307,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589776381
    },
    {
        "content": "<p>I mean, in the end, the list of \"allowed things\" should he exhaustive. The main reason you don't see that one or another thing in const yet is because the feature is being grown organically; it comes piece by piece. It's a growing experiment.</p>",
        "id": 197888377,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589776517
    },
    {
        "content": "<p>Its more limiting, imo. There is so much constexpr can do because it doesn't evaluate any of the things a core constant expression isn't allowed to.<br>\nIt also makes it easier to define certain things. For example, a core constant expression cannot evaluate an expression that has any form of core language undefined behavior. A definition like that would make defining, say transmute, easier, as you don't need to deal with the edge cases. If an invalid value would be produced, it simply isn't a constant expression.</p>",
        "id": 197953213,
        "sender_full_name": "Connor Horman",
        "timestamp": 1589816521
    },
    {
        "content": "<p>the main difference between const in Rust and in C++ is similar to non-const: in Rust, we want to ensure that when you only write safe code, you cannot cause UB. that's what makes our job much harder than C++ constexpr.</p>",
        "id": 197960824,
        "sender_full_name": "RalfJ",
        "timestamp": 1589819589
    },
    {
        "content": "<p>From my user-of-stable POV, stabilizing some control flow would be a very big deal for const fn, even if it only worked on primitives. Adding in loop would be the icing on the cake. These would make const fn vastly more useful and get rid of hacky macros/proc-macros that I currently use. Having traits et al would be very nice but (to me personally) are more of a luxury than a necessity.</p>",
        "id": 198178738,
        "sender_full_name": "Chris Denton",
        "timestamp": 1589970342
    }
]