[
    {
        "content": "<p>I am current working on a more powerful const panic, and I am happy to report that I have a working prototype!<br>\n<a href=\"/user_uploads/4715/9coii37aSrFeY1NnzjP5gaE2/image.png\">image.png</a> <br>\nAn unfortunate news is that the approach that I am taking supports limited amount of types (currently just i32 and str, could be extended to more std types but probably not user-defined ones).</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/9coii37aSrFeY1NnzjP5gaE2/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/9coii37aSrFeY1NnzjP5gaE2/image.png\"></a></div>",
        "id": 257867767,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634424474
    },
    {
        "content": "<p>Do I understand correctly that panicking with formatting of those types requires stabilizing the unstable features in the image (mutable references in const and function pointers in const)?</p>",
        "id": 257894250,
        "sender_full_name": "matt1992",
        "timestamp": 1634452880
    },
    {
        "content": "<p>No really, this is really just how format_args macro is currently expanded to.</p>",
        "id": 257896586,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634455259
    },
    {
        "content": "<p>i.e. <code>ArgumentV1::new(&amp;value, Display::fmt)</code>, so this needs a function pointer and the function pointer's signature contains mutable referene.</p>",
        "id": 257896656,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634455323
    },
    {
        "content": "<p>(actually I don't think const_mut_refs should be needed if only the signature contains mutable references, but anyway)</p>",
        "id": 257896695,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634455357
    },
    {
        "content": "<p>I'm kind of scared of the impl ;D , but <span aria-label=\"cool\" class=\"emoji emoji-1f192\" role=\"img\" title=\"cool\">:cool:</span></p>",
        "id": 257898189,
        "sender_full_name": "oli",
        "timestamp": 1634456988
    },
    {
        "content": "<p>One thing worth discussion: shall we allow anything to be included in <code>panic!()</code>'s format_args, and try to format these args in best effort (but there is no requirement that the formatted result needs to be precise); or shall we only allow those that we know could be precisely formatted to be used in <code>panic!</code>'s format args?</p>",
        "id": 258113090,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634597016
    },
    {
        "content": "<p>E.g. we can either reject <code>Err(ComplexFmtType).unwrap()</code> in const eval (second option), or panic with <code>called `Result::unwrap()` on an `Err` value: &lt;failed to format ComplexFmtType&gt;</code> (first option).</p>",
        "id": 258113698,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634597310
    },
    {
        "content": "<p>I personally tend towards the first option</p>",
        "id": 258113737,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634597337
    },
    {
        "content": "<p>Depends on the complexity of the impl of your change. Ideally we'd just allow formatting properly with const trait bounds</p>",
        "id": 258151870,
        "sender_full_name": "oli",
        "timestamp": 1634627814
    },
    {
        "content": "<p>Okay, I'll polish up my prototype and submit it.</p>",
        "id": 258190262,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634648602
    }
]