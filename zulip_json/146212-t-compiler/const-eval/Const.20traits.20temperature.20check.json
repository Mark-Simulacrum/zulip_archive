[
    {
        "content": "<p>My impression is that const traits are... quite a ways off from stabilizing (and that the feature may even need further design work). Is this correct?</p>\n<p>(I'm not looking for any sort of promise, I'm just trying to evaluate whether or not I should hold off on a library feature that would be made somewhat redundant by const traits)</p>",
        "id": 242139692,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1623278139
    },
    {
        "content": "<p>Specifically, i mean the ability to do stuff like <code>const BLAH: Thing = foo() &amp; bar();</code>, which would requireÂ invoking ops::And in a const context (and for the implementation of that types <code>ops::And</code> to be <code>const fn</code></p>",
        "id": 242140817,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1623278985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"209168\">Thom Chiovoloni</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Const.20traits.20temperature.20check/near/242139692\">said</a>:</p>\n<blockquote>\n<p>My impression is that const traits are... quite a ways off from stabilizing (and that the feature may even need further design work). Is this correct?</p>\n</blockquote>\n<p>that is correct, yes</p>",
        "id": 242140888,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1623279030
    },
    {
        "content": "<p>yea, don't hold your breath. We're out of const eval feature impl resources presently</p>",
        "id": 242177008,
        "sender_full_name": "oli",
        "timestamp": 1623315456
    }
]