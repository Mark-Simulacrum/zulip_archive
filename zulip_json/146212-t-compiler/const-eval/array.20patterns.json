[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> and I were chatting about sublice patterns and future-proofing for array patterns</p>",
        "id": 154693178,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546998752
    },
    {
        "content": "<p>dear lord there are so many streams.. Zulip is <span class=\"emoji emoji-1f641\" title=\"frown\">:frown:</span></p>",
        "id": 154693192,
        "sender_full_name": "centril",
        "timestamp": 1546998778
    },
    {
        "content": "<p>(I'm also not sure this is the right one- \"const eval\" is more \"evaluating consts\" than \"typechecking constants\"  Ithink, but seems a reasonable place)</p>",
        "id": 154693210,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546998809
    },
    {
        "content": "<p>anyways the question was how hard it would be to support e.g. <code>let [x, y, z @ ..] = [1, 2, 3, 4];</code> which would result in <code>z: [i32; 2]</code></p>",
        "id": 154693233,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546998842
    },
    {
        "content": "<p>My intuition was that it would be quite difficult, as you'd have to do subtraction from the const in <code>[i32; 4]</code> based on the # of other elements bound in the pattern</p>",
        "id": 154693282,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546998922
    },
    {
        "content": "<p>It's not a simple syntactic element count like array length inference is today</p>",
        "id": 154693290,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546998959
    },
    {
        "content": "<p>I'm not sure how the compiler is architechted around this.. but ostensibly we already know the type of <code>RHS = [1, 2, 3, 4]</code> so we know the type of the pattern; once we know the type of the pattern <code>xs = [x, y, z, @ ..]</code> we can infer the type of <code>z</code> using the known type of the pattern and the number of elements not in <code>z</code></p>",
        "id": 154693364,
        "sender_full_name": "centril",
        "timestamp": 1546999070
    },
    {
        "content": "<p>and <code>let [a, b, c, d] = [1, 2, 3, 4]</code> already works but <code>let [a, b, d, e] = [1,2,3,4]</code> does not so unification of the pattern type and the expression already happens here</p>",
        "id": 154693430,
        "sender_full_name": "centril",
        "timestamp": 1546999150
    },
    {
        "content": "<p>typing <code>[a, b, c @ ..]</code> cannot be done without knowing <code>[1, 2, 3, 4]</code> tho</p>",
        "id": 154693499,
        "sender_full_name": "centril",
        "timestamp": 1546999231
    },
    {
        "content": "<p>I'd think doing this properly would require const unification</p>",
        "id": 154693592,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546999435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> something like this:</p>\n<div class=\"codehilite\"><pre><span></span>Γ ⊢tm   N : usize\nΓ ⊢tm   M : usize\nΓ ⊢size N &lt; M\nΓ ⊢ty   σ type\nΓ ⊢tm   arr: [σ; N]\n---------------------------------------\nΓ ⊢pat  [elt_0, .., elt_M, tail] : [σ; N]\nΓ ⊢pat  tail : [σ; N - M]\n∀ i ∈ M. Γ ⊢ elt_i : σ\n</pre></div>",
        "id": 154693952,
        "sender_full_name": "centril",
        "timestamp": 1546999941
    },
    {
        "content": "<p>probably requires const unification yeah</p>",
        "id": 154693969,
        "sender_full_name": "centril",
        "timestamp": 1547000015
    },
    {
        "content": "<blockquote>\n<p>anyways the question was how hard it would be to support e.g. <code>let [x, y, z @ ..] = [1, 2, 3, 4];</code> which would result in <code>z: [i32; 2]</code></p>\n</blockquote>\n<p>We already support that using <code>z..</code>, so not very.</p>",
        "id": 154706408,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1547020197
    },
    {
        "content": "<p>oh well don't i feel foolish</p>",
        "id": 154735627,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547050471
    },
    {
        "content": "<p>Here was me thinking that <code>#![feature(slice_patterns)]</code> was just for slices</p>",
        "id": 154735655,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547050501
    },
    {
        "content": "<p>that certainly makes things simpler</p>",
        "id": 154735681,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547050518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span>  I was trying to say it wasn't before on Discord :P -- I think we miscommunicated a lot ^.^</p>",
        "id": 154735762,
        "sender_full_name": "centril",
        "timestamp": 1547050569
    },
    {
        "content": "<p>In my defense, there were no examples of this in the RFC</p>",
        "id": 154735800,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1547050614
    },
    {
        "content": "<p>very true</p>",
        "id": 154735817,
        "sender_full_name": "centril",
        "timestamp": 1547050629
    }
]