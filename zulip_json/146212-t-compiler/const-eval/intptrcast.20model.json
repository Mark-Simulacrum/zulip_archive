[
    {
        "content": "<p>This is just for disccussing <a href=\"https://github.com/rust-lang/miri/issues/224\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/224\">https://github.com/rust-lang/miri/issues/224</a></p>",
        "id": 167432194,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559770347
    },
    {
        "content": "<p>So based on <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> instructions, the <code>int_to_ptr</code> method in <code>Machine</code> should be something like this:</p>",
        "id": 167433096,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559771279
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">int_to_ptr</span><span class=\"p\">(</span><span class=\"n\">scalar</span>: <span class=\"nc\">Scalar</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"n\">PointerTag</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">extra</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span>::<span class=\"n\">MemoryExtra</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">EvalResult</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Pointer</span><span class=\"o\">&lt;</span><span class=\"n\">Self</span>::<span class=\"n\">PointerTag</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">scalar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Scalar</span>::<span class=\"n\">Ptr</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">EvalError</span>::<span class=\"n\">from</span><span class=\"p\">(</span><span class=\"n\">InterpError</span>::<span class=\"n\">ReadBytesAsPointer</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 167433143,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559771286
    },
    {
        "content": "<p>But then, based on my recent discussion with <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> , this  method should take an <code>u64</code>. So what should happen here? Because following the same logic would always return an error, i.e., if i use <code>Scalar::from_uint</code> to generate a scalar, it will be a <code>Scalar::Raw</code>.</p>",
        "id": 167433267,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559771415
    },
    {
        "content": "<p>and then, what should happen with <code>ptr_to_int</code>, should it return a <code>Scalar</code> or an <code>u64</code>?</p>",
        "id": 167433319,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559771482
    },
    {
        "content": "<p>I can't find the discussion on <code>int_to_ptr</code> taking <code>u64</code>. I would have thought the above to be the correct way for const eval to implement <code>int_to_ptr</code> and I don't see how we could do this otherwise without duplicating the above <code>match</code> in a lot of places</p>",
        "id": 167456587,
        "sender_full_name": "oli",
        "timestamp": 1559803640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  so my plan was to have operations <code>force_bits</code> and <code>force_ptr</code> in the <code>InterpCtx</code> that have type <code>Scalar -&gt; u128</code> and <code>Scalar -&gt; Pointer</code>, respectively. They would be used instead of <code>to_bits</code> and <code>to_ptr</code></p>",
        "id": 167460005,
        "sender_full_name": "RalfJ",
        "timestamp": 1559807803
    },
    {
        "content": "<p>and those are implemented using new machine hooks <code>int_to_ptr</code> and <code>ptr_to_int</code> with types <code>u64 -&gt; Pointer</code> and <code>Pointer -&gt; u64</code></p>",
        "id": 167460027,
        "sender_full_name": "RalfJ",
        "timestamp": 1559807835
    },
    {
        "content": "<p>an operation called <code>int_to_ptr</code> IMO should have type int-to-ptr, or else something is off ;)</p>",
        "id": 167460032,
        "sender_full_name": "RalfJ",
        "timestamp": 1559807858
    },
    {
        "content": "<p>and your suggested <code>ptr_to_int</code> had return type <code>Scalar</code> which is annoying because it means every caller still needs to do <code>to_bits</code></p>",
        "id": 167460086,
        "sender_full_name": "RalfJ",
        "timestamp": 1559807891
    },
    {
        "content": "<p>and moreover every caller would have to duplicate the match because really the operation we want is <code>Scalar -&gt; u128</code></p>",
        "id": 167460100,
        "sender_full_name": "RalfJ",
        "timestamp": 1559807911
    },
    {
        "content": "<p>Right, that makes sense. So the machine hook for const eval would just ignore all its arguments and return the error</p>",
        "id": 167469574,
        "sender_full_name": "oli",
        "timestamp": 1559816955
    },
    {
        "content": "<p>both of them, yes</p>",
        "id": 167470987,
        "sender_full_name": "RalfJ",
        "timestamp": 1559818509
    },
    {
        "content": "<p>Ohh OK, I'll do that then</p>",
        "id": 167483180,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559829128
    },
    {
        "content": "<p>I'll try to do the same replacements I had before and I'll write you if I get stuck</p>",
        "id": 167484096,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559829809
    },
    {
        "content": "<p>as a first step you could just move the <code>to_bits</code> and <code>to_ptr</code> functions to <code>InterpCx</code> without touching <code>Machine</code> at all</p>",
        "id": 167484205,
        "sender_full_name": "oli",
        "timestamp": 1559829868
    },
    {
        "content": "<p>the diffs should get much simpler afterwards ^^</p>",
        "id": 167484221,
        "sender_full_name": "oli",
        "timestamp": 1559829884
    },
    {
        "content": "<p>I decided to reset the branch :P</p>",
        "id": 167487459,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559831940
    },
    {
        "content": "<p>i decided to reset the branch (I opened a new topic by accident)</p>",
        "id": 167487515,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559831978
    },
    {
        "content": "<p>wow that seems drastic^^</p>",
        "id": 167488913,
        "sender_full_name": "RalfJ",
        "timestamp": 1559832928
    },
    {
        "content": "<p>hahaha maybe it is</p>",
        "id": 167489058,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559833004
    },
    {
        "content": "<p>So, <code>force_bits</code> would take a <code>Scalar</code>, how can I get an <code>u128</code> from it using the new methods from <code>Machine</code>?, just call <code>int_to_ptr</code> and then <code>ptr_to_int</code>?</p>",
        "id": 167489961,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559833551
    },
    {
        "content": "<p>I am confused</p>",
        "id": 167490638,
        "sender_full_name": "RalfJ",
        "timestamp": 1559833967
    },
    {
        "content": "<p><code>int_to_ptr</code> should <em>take</em> a <code>u64</code> or <code>u128</code> so that won't help^^</p>",
        "id": 167490656,
        "sender_full_name": "RalfJ",
        "timestamp": 1559833982
    },
    {
        "content": "<p>so. We have <code>int_to_ptr</code> and <code>ptr_to_int</code></p>",
        "id": 167490695,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559834012
    },
    {
        "content": "<p>those are in <code>Machine</code></p>",
        "id": 167490703,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559834020
    },
    {
        "content": "<p>you have this: <a href=\"https://github.com/rust-lang/rust/blob/8b36867093fb774bcbd9f787cbc470a5f44c1310/src/librustc/mir/interpret/value.rs#L305\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/8b36867093fb774bcbd9f787cbc470a5f44c1310/src/librustc/mir/interpret/value.rs#L305\">https://github.com/rust-lang/rust/blob/8b36867093fb774bcbd9f787cbc470a5f44c1310/src/librustc/mir/interpret/value.rs#L305</a></p>",
        "id": 167490705,
        "sender_full_name": "RalfJ",
        "timestamp": 1559834023
    },
    {
        "content": "<p>then you can <code>match</code> on the result and either you already got a <code>u128</code> or you call <code>ptr_to_int</code></p>",
        "id": 167490724,
        "sender_full_name": "RalfJ",
        "timestamp": 1559834041
    },
    {
        "content": "<p>ohhh</p>",
        "id": 167490772,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559834047
    },
    {
        "content": "<p>thats evil</p>",
        "id": 167490775,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559834050
    },
    {
        "content": "<p>ok</p>",
        "id": 167490779,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559834054
    },
    {
        "content": "<p><code>force_bits</code> calling <code>int_to_ptr</code> makes no sense, does it?</p>",
        "id": 167490786,
        "sender_full_name": "RalfJ",
        "timestamp": 1559834059
    },
    {
        "content": "<p>why evil?^^</p>",
        "id": 167490792,
        "sender_full_name": "RalfJ",
        "timestamp": 1559834060
    },
    {
        "content": "<p>and i guess i should cast the <code>u64</code> to <code>u128</code></p>",
        "id": 167490807,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559834067
    },
    {
        "content": "<blockquote>\n<p>why evil?^^</p>\n</blockquote>\n<p>I was biased to not use the methods from <code>Scalar</code> directly for some reason :P</p>",
        "id": 167490838,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559834101
    },
    {
        "content": "<blockquote>\n<p>and i guess i should cast the <code>u64</code> to <code>u128</code></p>\n</blockquote>\n<p>yes</p>",
        "id": 167491115,
        "sender_full_name": "RalfJ",
        "timestamp": 1559834282
    },
    {
        "content": "<p>hm actually there is a good question here</p>",
        "id": 167491163,
        "sender_full_name": "RalfJ",
        "timestamp": 1559834304
    },
    {
        "content": "<p>one testcase should do something like <code>... as *const i32 as usize as u8 as usize</code> and make sure the value got truncated</p>",
        "id": 167491183,
        "sender_full_name": "RalfJ",
        "timestamp": 1559834326
    },
    {
        "content": "<p>I haven't looked at the cast code yet so I am not sure if it does the right thing there</p>",
        "id": 167491230,
        "sender_full_name": "RalfJ",
        "timestamp": 1559834351
    },
    {
        "content": "<p>we currently error in a cast of a pointer value to <code>u8</code>, so that's good</p>",
        "id": 167491840,
        "sender_full_name": "RalfJ",
        "timestamp": 1559834750
    },
    {
        "content": "<p>but <code>*const i32 as usize</code> shouldn't truncate anything i guess, just the <code>as u8</code> should</p>",
        "id": 167492740,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559835312
    },
    {
        "content": "<p>ok it is done</p>",
        "id": 167493555,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559835724
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/compare/master...christianpoveda:intptrcast-model\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...christianpoveda:intptrcast-model\">https://github.com/rust-lang/rust/compare/master...christianpoveda:intptrcast-model</a></p>",
        "id": 167493558,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559835725
    },
    {
        "content": "<p>what do you think?</p>",
        "id": 167493575,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559835737
    },
    {
        "content": "<p>I moved the  <code>force</code> methods to <code>Memory</code> but added hooks in <code>InterpretCx</code></p>",
        "id": 167496046,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559837411
    },
    {
        "content": "<p>I've been replacing <code>to_ptr</code> by <code>force_ptr</code> and most of the time it causes UB or ends up with the following error when compiling <code>rustc</code>:</p>\n<div class=\"codehilite\"><pre><span></span> a raw memory access tried to access part of a pointer value as raw bytes\n</pre></div>",
        "id": 167517637,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559851580
    },
    {
        "content": "<p>please leave a comment on GH asking for review, I cant look at it right now and Zulip notifications are to ephemeral</p>",
        "id": 167557541,
        "sender_full_name": "RalfJ",
        "timestamp": 1559895764
    },
    {
        "content": "<p>emails are much better, I can actually organize them in a way that I can remember to get back to you ;)</p>",
        "id": 167557551,
        "sender_full_name": "RalfJ",
        "timestamp": 1559895780
    },
    {
        "content": "<p>Sure!</p>",
        "id": 167571180,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559909964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> I apologize in advance for the conflicts <a href=\"https://github.com/rust-lang/rust/pull/61625\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61625\">https://github.com/rust-lang/rust/pull/61625</a> is going to cause you :(</p>",
        "id": 167594402,
        "sender_full_name": "RalfJ",
        "timestamp": 1559927350
    },
    {
        "content": "<p>Don't worry, I knew I had to resolve merge conflicts on this one eventually :P</p>",
        "id": 167598506,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1559930299
    },
    {
        "content": "<p>Just passing through, but I recently ran into some issues casting pointers (<a href=\"#narrow/stream/131828-t-compiler/topic/function.20pointers.20and.20address.20spaces\" title=\"#narrow/stream/131828-t-compiler/topic/function.20pointers.20and.20address.20spaces\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/function.20pointers.20and.20address.20spaces</a>) which may or may not be interesting to y'all</p>",
        "id": 167726158,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560130450
    },
    {
        "content": "<p>Should I start working on the miri changes?</p>",
        "id": 167950500,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560348625
    },
    {
        "content": "<p>as commented on the PR I do not believe that miri will be able to pass its test suite after the current state of your PR</p>",
        "id": 167950834,
        "sender_full_name": "oli",
        "timestamp": 1560348892
    },
    {
        "content": "<p>I just got your review</p>",
        "id": 167951168,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560349128
    },
    {
        "content": "<p>I'm gonna undo the operator changes and fix the size problem</p>",
        "id": 167951226,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560349165
    },
    {
        "content": "<p>compiling <span aria-label=\"counterclockwise\" class=\"emoji emoji-1f504\" role=\"img\" title=\"counterclockwise\">:counterclockwise:</span></p>",
        "id": 167951994,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560349609
    },
    {
        "content": "<p>man i gotta get one of those ryzen cpus, this is taking ages D:</p>",
        "id": 167952575,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560349961
    },
    {
        "content": "<p>where can I get the context for the <code>to_usize</code> call?</p>",
        "id": 167953994,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560350886
    },
    {
        "content": "<p>it is inside <code>Memory</code></p>",
        "id": 167954005,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560350896
    },
    {
        "content": "<p>ohhh memory implements hasDataLayout</p>",
        "id": 167954082,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560350968
    },
    {
        "content": "<p>great</p>",
        "id": 167954085,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560350969
    },
    {
        "content": "<p>xD</p>",
        "id": 167954086,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560350970
    },
    {
        "content": "<p>yea, just pass <code>self</code> :D</p>",
        "id": 167954181,
        "sender_full_name": "oli",
        "timestamp": 1560351020
    },
    {
        "content": "<p>hahahaha yep i'm running tests after the rebase <span aria-label=\"clock\" class=\"emoji emoji-1f557\" role=\"img\" title=\"clock\">:clock:</span></p>",
        "id": 167954362,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560351165
    },
    {
        "content": "<p>i hope that git will believe me that this can be merged</p>",
        "id": 167959383,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560354013
    },
    {
        "content": "<p>I'll have a look tomorrow, going offline for the day</p>",
        "id": 167959430,
        "sender_full_name": "oli",
        "timestamp": 1560354045
    },
    {
        "content": "<p>sure, guten Abend :D (goddamn Tz)</p>",
        "id": 167959469,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560354066
    },
    {
        "content": "<p>I'm going to need a lecture about that last comment</p>",
        "id": 168062495,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560444245
    },
    {
        "content": "<p>i assume pointer sized types should have the same size as <code>usize</code>, right?</p>",
        "id": 168062529,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560444301
    },
    {
        "content": "<p>which comment?</p>",
        "id": 168062983,
        "sender_full_name": "RalfJ",
        "timestamp": 1560444667
    },
    {
        "content": "<blockquote>\n<p>IOW, the run-tme dispatch on the value here is just as ugly as the similar one in binops. We should dispatch only based on types, not on values... but we cannot yet due to pointers at integer types.</p>\n<p>But what we can do is first dispatch based on whether the type is ptr-sized, and if yes proceed like now, and if not do basically self.cast_from_int(self.force_bits(data)).</p>\n</blockquote>",
        "id": 168063108,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560444756
    },
    {
        "content": "<p>that's for later, let's not do these casts now</p>",
        "id": 168063449,
        "sender_full_name": "RalfJ",
        "timestamp": 1560444972
    },
    {
        "content": "<p>yep i'm just gonna move the ptr size as a parameter in <code>force_bits</code> and replace <code>to_bits</code> in the places you mentioned</p>",
        "id": 168063654,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560445129
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 168063717,
        "sender_full_name": "RalfJ",
        "timestamp": 1560445178
    },
    {
        "content": "<p>what's this quote-only comment?^^ <a href=\"https://github.com/rust-lang/rust/pull/61781#discussion_r293481602\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61781#discussion_r293481602\">https://github.com/rust-lang/rust/pull/61781#discussion_r293481602</a></p>",
        "id": 168063805,
        "sender_full_name": "RalfJ",
        "timestamp": 1560445210
    },
    {
        "content": "<p>hahaha, my comment mixed with the quote, fixed it</p>",
        "id": 168063919,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560445288
    },
    {
        "content": "<p>this shouldnt take a lot of time brb</p>",
        "id": 168063945,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560445302
    },
    {
        "content": "<p>I added the ptr_size as an argument inside ecx also</p>",
        "id": 168064493,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560445633
    },
    {
        "content": "<p>yes</p>",
        "id": 168064727,
        "sender_full_name": "RalfJ",
        "timestamp": 1560445783
    },
    {
        "content": "<p>also the argument is the size, not the ptr size -- the entire point is that it might not be the ptr size ;)</p>",
        "id": 168064743,
        "sender_full_name": "RalfJ",
        "timestamp": 1560445797
    },
    {
        "content": "<p>the ptr size is always fixed for every execution, it's either 4 or 8 bytes (currently); the size is the size of <em>this particular value</em></p>",
        "id": 168064822,
        "sender_full_name": "RalfJ",
        "timestamp": 1560445818
    },
    {
        "content": "<p>lol</p>",
        "id": 168064928,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560445911
    },
    {
        "content": "<p>if it compiles ill change the name before doing the commit</p>",
        "id": 168064934,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560445920
    },
    {
        "content": "<p>looks great :)</p>",
        "id": 168066727,
        "sender_full_name": "RalfJ",
        "timestamp": 1560447164
    },
    {
        "content": "<p>yay</p>",
        "id": 168072712,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560450843
    },
    {
        "content": "<p>tests are running <span aria-label=\"dancing\" class=\"emoji emoji-1f57a\" role=\"img\" title=\"dancing\">:dancing:</span></p>",
        "id": 168075180,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560452431
    },
    {
        "content": "<p>time to write some testcases and then do the \"real\" work on the Miri side? :D</p>",
        "id": 168075752,
        "sender_full_name": "RalfJ",
        "timestamp": 1560452798
    },
    {
        "content": "<p>we'll see</p>",
        "id": 168076806,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560453582
    },
    {
        "content": "<p>where do we start?</p>",
        "id": 168076810,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560453585
    },
    {
        "content": "<blockquote>\n<p>time to write some testcases and then do the \"real\" work on the Miri side? :D</p>\n</blockquote>\n<p>Should I follow <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> steps for the miri side?</p>",
        "id": 168140506,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560523179
    },
    {
        "content": "<p>/me made steps?</p>",
        "id": 168140606,
        "sender_full_name": "oli",
        "timestamp": 1560523210
    },
    {
        "content": "<p>oh, right, I remember now</p>",
        "id": 168140645,
        "sender_full_name": "oli",
        "timestamp": 1560523241
    },
    {
        "content": "<p>I think Ralf wants to see tests first and implementation later</p>",
        "id": 168140667,
        "sender_full_name": "oli",
        "timestamp": 1560523259
    },
    {
        "content": "<blockquote>\n<p>/me made steps?</p>\n</blockquote>\n<p>maybe it was your inner Mr. Robot or something</p>",
        "id": 168140815,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560523352
    },
    {
        "content": "<p>ok so tests</p>",
        "id": 168140831,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560523364
    },
    {
        "content": "<p>I suck at writing tests</p>",
        "id": 168140853,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560523382
    },
    {
        "content": "<p>Like <code>let x: usize = &amp;42 as *const i32; let y = x &amp; 1; let z = x &gt;&gt; 1; let a = (z &lt;&lt; 1) + y; let b = a as *const i32; let c = unsafe { *b }; assert_eq!(c, 42);</code></p>",
        "id": 168140864,
        "sender_full_name": "oli",
        "timestamp": 1560523389
    },
    {
        "content": "<p>I mean the extreme test case would be <code>println!(\"{:p}\", &amp;42);</code></p>",
        "id": 168140894,
        "sender_full_name": "oli",
        "timestamp": 1560523417
    },
    {
        "content": "<p>where do miri tests go?</p>",
        "id": 168140906,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560523423
    },
    {
        "content": "<p>in the miri repo</p>",
        "id": 168140921,
        "sender_full_name": "oli",
        "timestamp": 1560523433
    },
    {
        "content": "<p>oh the test directory structure is plain, great</p>",
        "id": 168141047,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560523495
    },
    {
        "content": "<p>I'm going to fork the repo and start playing with it a little bit</p>",
        "id": 168141106,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560523523
    },
    {
        "content": "<p>ah</p>",
        "id": 168141319,
        "sender_full_name": "oli",
        "timestamp": 1560523673
    },
    {
        "content": "<p>you can do that inside your rustc checkout</p>",
        "id": 168141327,
        "sender_full_name": "oli",
        "timestamp": 1560523677
    },
    {
        "content": "<p><code>./x.py test src/tools/miri</code></p>",
        "id": 168141378,
        "sender_full_name": "oli",
        "timestamp": 1560523689
    },
    {
        "content": "<p>there's a full miri checkout in there</p>",
        "id": 168141388,
        "sender_full_name": "oli",
        "timestamp": 1560523698
    },
    {
        "content": "<p>or maybe use your custom checkout and follow the instructions in the miri repo</p>",
        "id": 168141415,
        "sender_full_name": "oli",
        "timestamp": 1560523730
    },
    {
        "content": "<p>you can create a <code>rustup toolchain</code> for your locally built rustc</p>",
        "id": 168141431,
        "sender_full_name": "oli",
        "timestamp": 1560523741
    },
    {
        "content": "<p>ok this is new ground</p>",
        "id": 168141584,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560523826
    },
    {
        "content": "<p>mmm... So i can run the miri tests from <code>x.py</code></p>",
        "id": 168141669,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560523896
    },
    {
        "content": "<p>but my changes to the miri repo shouldnt be in my fork and then do a PR against the <code>rust-lang/miri</code> repo?</p>",
        "id": 168141748,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560523938
    },
    {
        "content": "<p>no</p>",
        "id": 168141853,
        "sender_full_name": "oli",
        "timestamp": 1560524040
    },
    {
        "content": "<p>in your fork against the miri repo</p>",
        "id": 168141899,
        "sender_full_name": "oli",
        "timestamp": 1560524049
    },
    {
        "content": "<blockquote>\n<p>in your fork against the miri repo</p>\n</blockquote>\n<p>oh yeah sorry i meant <code>rust-lang/miri</code> repo</p>",
        "id": 168141939,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560524083
    },
    {
        "content": "<p>right, a branch in your fork, and PR against <code>rust-lang/miri</code></p>",
        "id": 168141977,
        "sender_full_name": "oli",
        "timestamp": 1560524117
    },
    {
        "content": "<p>but then how can I replace the <code>miri</code> repo inside the <code>rustc</code> repo by my fork?</p>",
        "id": 168141996,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560524142
    },
    {
        "content": "<p>aaah</p>",
        "id": 168142009,
        "sender_full_name": "oli",
        "timestamp": 1560524158
    },
    {
        "content": "<p>heh, no need, just <code>git remote add mine your_addr_here</code></p>",
        "id": 168142070,
        "sender_full_name": "oli",
        "timestamp": 1560524181
    },
    {
        "content": "<p>and then <code>git push mine branch_name</code></p>",
        "id": 168142080,
        "sender_full_name": "oli",
        "timestamp": 1560524188
    },
    {
        "content": "<p>ohh of course</p>",
        "id": 168142092,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560524201
    },
    {
        "content": "<p>I'm gonna do that, but as you can see my git-fu is not great: <a href=\"https://github.com/rust-lang/rust/pull/61668\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61668\">https://github.com/rust-lang/rust/pull/61668</a></p>",
        "id": 168142231,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560524293
    },
    {
        "content": "<p>heh, just ask when you screw up, it's how I learned</p>",
        "id": 168142478,
        "sender_full_name": "oli",
        "timestamp": 1560524469
    },
    {
        "content": "<p>usually everything is salvageable</p>",
        "id": 168142494,
        "sender_full_name": "oli",
        "timestamp": 1560524482
    },
    {
        "content": "<p>alternatively you can clone miri and work there locally, the miri README has instructions for that. which style you prefer is a matter of taste I guess^^</p>",
        "id": 168149168,
        "sender_full_name": "RalfJ",
        "timestamp": 1560528951
    },
    {
        "content": "<p>Ok I added the remotes and nothing blew up</p>",
        "id": 168149338,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560529080
    },
    {
        "content": "<p>:)</p>",
        "id": 168149390,
        "sender_full_name": "RalfJ",
        "timestamp": 1560529090
    },
    {
        "content": "<p>:D</p>",
        "id": 168149396,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560529095
    },
    {
        "content": "<p>So, rustc is compiling and its going to take a while. Tomorrow I'll tell you what happened to decide which should be good tests</p>",
        "id": 168153491,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560532133
    },
    {
        "content": "<p>It seems like miri is broken due to the Eval -&gt; Interp changes, I'll try to pull when that gets fixed</p>",
        "id": 168157742,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560535424
    },
    {
        "content": "<p>uh, that got fixed long ago...</p>",
        "id": 168158039,
        "sender_full_name": "RalfJ",
        "timestamp": 1560535649
    },
    {
        "content": "<p>miri builds fine with current rustc master</p>",
        "id": 168158052,
        "sender_full_name": "RalfJ",
        "timestamp": 1560535668
    },
    {
        "content": "<p>just the miri in rustc hasnt received those updates yet, which might be your problem</p>",
        "id": 168158111,
        "sender_full_name": "RalfJ",
        "timestamp": 1560535700
    },
    {
        "content": "<p>ohh damn</p>",
        "id": 168158127,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560535717
    },
    {
        "content": "<p>TBH I feel it will be easier to work in a separate clone^^</p>",
        "id": 168158136,
        "sender_full_name": "RalfJ",
        "timestamp": 1560535729
    },
    {
        "content": "<p>submodules are annoying as hell to deal with</p>",
        "id": 168158146,
        "sender_full_name": "RalfJ",
        "timestamp": 1560535743
    },
    {
        "content": "<p>yeah I'll try to follow the instructions then</p>",
        "id": 168158258,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560535826
    },
    {
        "content": "<p>I tried to build miri with my locally built rustc and got an error:</p>",
        "id": 168159076,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536476
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0107]: wrong number of lifetime arguments: expected 3, found 2\n  --&gt; src/lib.rs:78:25\n   |\n78 | ) -&gt; InterpResult&lt;&#39;tcx, InterpretCx&lt;&#39;mir, &#39;tcx, Evaluator&lt;&#39;tcx&gt;&gt;&gt; {\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 3 lifetime arguments\n</pre></div>",
        "id": 168159087,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536483
    },
    {
        "content": "<p>well... a bunch of them tbh</p>",
        "id": 168159101,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536496
    },
    {
        "content": "<p>maybe should I wait for my rustc changes to get merged and then try to build it</p>",
        "id": 168159173,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536545
    },
    {
        "content": "<p>what does <code>rustc --version</code> say?</p>",
        "id": 168159202,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536570
    },
    {
        "content": "<p>doesnt look like you are actually using latest master</p>",
        "id": 168159207,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536577
    },
    {
        "content": "<p><code>rustc 1.37.0-dev</code></p>",
        "id": 168159223,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536587
    },
    {
        "content": "<p>which commit</p>",
        "id": 168159229,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536591
    },
    {
        "content": "<p>please dont cut off the most important part of the version number :)</p>",
        "id": 168159248,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536607
    },
    {
        "content": "<p>there is no other part</p>",
        "id": 168159264,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536620
    },
    {
        "content": "<p>oh dang it doesnt show that</p>",
        "id": 168159275,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536630
    },
    {
        "content": "<p>I thought it would, sorry</p>",
        "id": 168159282,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536634
    },
    {
        "content": "<p>so which commit did you build then?</p>",
        "id": 168159331,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536644
    },
    {
        "content": "<p>on the last commit in my forked rustc</p>",
        "id": 168159366,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536668
    },
    {
        "content": "<p>well then I can only guess^^</p>",
        "id": 168159412,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536702
    },
    {
        "content": "<p>try <code>git reset --hard 118274f300d60d8a450cdbc16a72101efde23b12</code> in your miri clone</p>",
        "id": 168159471,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536735
    },
    {
        "content": "<p>no the horror</p>",
        "id": 168159482,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536743
    },
    {
        "content": "<p>well welcome to the world of closely interlinked projects with unstable APIs ;)</p>",
        "id": 168159561,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536772
    },
    {
        "content": "<p>but TBH I am wodnering why your PR didnt need rebasing for this...?</p>",
        "id": 168159606,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536811
    },
    {
        "content": "<p>I'm not sure to be honest</p>",
        "id": 168159626,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536824
    },
    {
        "content": "<p>well can you please at least tell me the exact git commit on which you are building rustc?^^</p>",
        "id": 168159647,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536840
    },
    {
        "content": "<p>maybe it was because I synced my fork with master after my last fiasco</p>",
        "id": 168159655,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536845
    },
    {
        "content": "<p>I am not clairvoyant^^</p>",
        "id": 168159665,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536851
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/212f233b7d548c54ddec73142dfce1ee96a0c5c9\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/212f233b7d548c54ddec73142dfce1ee96a0c5c9\">212f233b7d548c54ddec73142dfce1ee96a0c5c9</a></p>",
        "id": 168159683,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536869
    },
    {
        "content": "<p>okay so its your PR. interesting that that did not need a rebase.</p>",
        "id": 168159759,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536908
    },
    {
        "content": "<p>the issue is if you start working with that old miri you are going to get more conflicts</p>",
        "id": 168159785,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536925
    },
    {
        "content": "<p>yeah I haven't done anything yet, I wanted to be sure that the build was successful</p>",
        "id": 168159833,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560536965
    },
    {
        "content": "<p>so you can either rebase your branch now (you dont have to push that, just do it locally), and then rebuild rustc; or you can move to an older miri like I suggested above but then you'll need more rebasing when you update your miri</p>",
        "id": 168159838,
        "sender_full_name": "RalfJ",
        "timestamp": 1560536968
    },
    {
        "content": "<p>I think I'm going to wait a little bit, right now I'm on my work machine and it is slow as hell, when I get home I'll try to rebase my branch or something</p>",
        "id": 168159975,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560537045
    },
    {
        "content": "<p>We'll have to step back a bit. For some reason the PR is not passing the tests when being rolled up. I rebased on local and runned the tests</p>",
        "id": 168239892,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560668085
    },
    {
        "content": "<p>got the following error </p>\n<div class=\"codehilite\"><pre><span></span>---- [run-make] run-make-fulldeps/linker-output-non-utf8 stdout ----\n\nerror: make failed\nstatus: exit code: 2\ncommand: &quot;make&quot;\nstdout:\n------------------------------------------\nLD_LIBRARY_PATH=&quot;/home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/linker-output-non-utf8/linker-output-non-utf8:/home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/stage2/lib:/home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/stage0-bootstrap-tools/x86_64-unknown-linux-gnu/release/deps:/home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/stage0/lib&quot; &#39;/home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/stage2/bin/rustc&#39; --out-dir /home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/linker-output-non-utf8/linker-output-non-utf8 -L /home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/linker-output-non-utf8/linker-output-non-utf8  library.rs\nmkdir /home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/linker-output-non-utf8/linker-output-non-utf8/zzz$&#39;\\xff&#39;\nmv /home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/linker-output-non-utf8/linker-output-non-utf8/liblibrary.a /home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/linker-output-non-utf8/linker-output-non-utf8/zzz$&#39;\\xff&#39;\nLD_LIBRARY_PATH=&quot;/home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/linker-output-non-utf8/linker-output-non-utf8:/home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/stage2/lib:/home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/stage0-bootstrap-tools/x86_64-unknown-linux-gnu/release/deps:/home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/stage0/lib&quot; &#39;/home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/stage2/bin/rustc&#39; --out-dir /home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/linker-output-non-utf8/linker-output-non-utf8 -L /home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/linker-output-non-utf8/linker-output-non-utf8  -L /home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/linker-output-non-utf8/linker-output-non-utf8/zzz$&#39;\\xff&#39; exec.rs 2&gt;&amp;1 | &quot;/home/christian/Workspace/contrib/rust/src/etc/cat-and-grep.sh&quot; this_symbol_not_defined\n[[[ begin stdout ]]]\nerror: Argument 6 is not valid Unicode: &quot;/home/christian/Workspace/contrib/rust/build/x86_64-unknown-linux-gnu/test/run-make-fulldeps/linker-output-non-utf8/linker-output-non-utf8/zzz\\xFF&quot;\n\n\n[[[ end stdout ]]]\nError: cannot match: this_symbol_not_defined\n</pre></div>",
        "id": 168239900,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560668099
    },
    {
        "content": "<p>I'm not sure how my changes are affecting this</p>",
        "id": 168239981,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560668216
    },
    {
        "content": "<p>that looks spurious or like a platform-dependent thing</p>",
        "id": 168241921,
        "sender_full_name": "RalfJ",
        "timestamp": 1560672047
    },
    {
        "content": "<p>TBH I never run the fulldepds tests^^</p>",
        "id": 168241924,
        "sender_full_name": "RalfJ",
        "timestamp": 1560672052
    },
    {
        "content": "<p>if I want to be really thorough I do <code>./x.py test --stage 1 src/test/{run-pass,ui}</code></p>",
        "id": 168241936,
        "sender_full_name": "RalfJ",
        "timestamp": 1560672081
    },
    {
        "content": "<p>but also, CI in your branch passed</p>",
        "id": 168241978,
        "sender_full_name": "RalfJ",
        "timestamp": 1560672127
    },
    {
        "content": "<p>so why do you think it is your PR causing the failure in the tollrup?</p>",
        "id": 168241981,
        "sender_full_name": "RalfJ",
        "timestamp": 1560672138
    },
    {
        "content": "<p>one thing you could do is rebase and push that, to make sure CI in your branch actually runs against latest master</p>",
        "id": 168241987,
        "sender_full_name": "RalfJ",
        "timestamp": 1560672160
    },
    {
        "content": "<p>ah, I see... yeah <a href=\"https://github.com/rust-lang/rust/pull/61880#issuecomment-502417943\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61880#issuecomment-502417943\">https://github.com/rust-lang/rust/pull/61880#issuecomment-502417943</a> looks a lot like it might be your fault. but that's in Miri's test suite.</p>",
        "id": 168242004,
        "sender_full_name": "RalfJ",
        "timestamp": 1560672211
    },
    {
        "content": "<p>so what you could do is first rebase to get a working Miri again (that finally landed :D ), and then <code>./x.py test src/tools/miri</code></p>",
        "id": 168242009,
        "sender_full_name": "RalfJ",
        "timestamp": 1560672233
    },
    {
        "content": "<p>I rebased but I havent pushed it</p>",
        "id": 168242049,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560672243
    },
    {
        "content": "<p>going to run miri tests then</p>",
        "id": 168242069,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560672269
    },
    {
        "content": "<p>make sure you rebase to something that includes <a href=\"https://github.com/rust-lang/rust/pull/61832\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61832\">https://github.com/rust-lang/rust/pull/61832</a></p>",
        "id": 168242149,
        "sender_full_name": "RalfJ",
        "timestamp": 1560672344
    },
    {
        "content": "<p>which landed just 30min ago</p>",
        "id": 168242153,
        "sender_full_name": "RalfJ",
        "timestamp": 1560672348
    },
    {
        "content": "<p>yep I rebased like 5 mins ago</p>",
        "id": 168242204,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560672386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> I think I found the bug: <a href=\"https://github.com/rust-lang/rust/pull/61781/files#r294072800\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61781/files#r294072800\">https://github.com/rust-lang/rust/pull/61781/files#r294072800</a></p>",
        "id": 168242281,
        "sender_full_name": "RalfJ",
        "timestamp": 1560672518
    },
    {
        "content": "<p>yay</p>",
        "id": 168242354,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560672623
    },
    {
        "content": "<p>I did the change but I'll run tests before pushing</p>",
        "id": 168242485,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560672842
    },
    {
        "content": "<p>I pushed my changes, got some trouble with the compilation pipeline but I think they'll be fine</p>",
        "id": 168243520,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560674690
    },
    {
        "content": "<p>So did <code>./x.py test src/tools/miri</code> pass?</p>",
        "id": 168243797,
        "sender_full_name": "RalfJ",
        "timestamp": 1560675182
    },
    {
        "content": "<p>nope, apparently my <code>rustc_llvm</code> version is too old so I'll have to recompile to be able to build it</p>\n<p>Edit: I'm building it on local but it will take a while</p>",
        "id": 168243848,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560675253
    },
    {
        "content": "<p>should I always test miri in this kind of changes?</p>",
        "id": 168243853,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560675285
    },
    {
        "content": "<p>well if you dont you might break miri which would make me sad ;)</p>",
        "id": 168244429,
        "sender_full_name": "RalfJ",
        "timestamp": 1560676407
    },
    {
        "content": "<p>Oh well, sure you can handle it</p>",
        "id": 168244431,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560676423
    },
    {
        "content": "<p>:P</p>",
        "id": 168244432,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560676427
    },
    {
        "content": "<p>;)</p>",
        "id": 168244434,
        "sender_full_name": "RalfJ",
        "timestamp": 1560676430
    },
    {
        "content": "<p>I usually test them with my separate miri clone, but that does not make much of a difference</p>",
        "id": 168244474,
        "sender_full_name": "RalfJ",
        "timestamp": 1560676444
    },
    {
        "content": "<p>you <em>do</em> have <code>test-miri = true</code> set in your <code>config.toml</code>, right?</p>",
        "id": 168244478,
        "sender_full_name": "RalfJ",
        "timestamp": 1560676456
    },
    {
        "content": "<p>ummm</p>",
        "id": 168244480,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560676463
    },
    {
        "content": "<p>well, given that this happened you already know the answer</p>",
        "id": 168244482,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560676478
    },
    {
        "content": "<p>ah no that doesnt mean miri gets automatically tested or something</p>",
        "id": 168244487,
        "sender_full_name": "RalfJ",
        "timestamp": 1560676502
    },
    {
        "content": "<p>that's just needed or else <code>test src/tools/miri</code> will fail</p>",
        "id": 168244493,
        "sender_full_name": "RalfJ",
        "timestamp": 1560676509
    },
    {
        "content": "<p>oh no I don't</p>",
        "id": 168244499,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560676523
    },
    {
        "content": "<p>I believe I have that on my other machine</p>",
        "id": 168244502,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560676532
    },
    {
        "content": "<p>but I'll change that here</p>",
        "id": 168244510,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560676549
    },
    {
        "content": "<p>Well LLVM is compiling but it will take a while</p>",
        "id": 168244568,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560676656
    },
    {
        "content": "<p>yeah those builds are sooooo slooooooooooo....</p>",
        "id": 168244705,
        "sender_full_name": "RalfJ",
        "timestamp": 1560676847
    },
    {
        "content": "<p>Well, I'll have breakfast and sleep a little, its like 4 am here</p>",
        "id": 168244731,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560676920
    },
    {
        "content": "<blockquote>\n<p>yeah those builds are sooooo slooooooooooo....</p>\n</blockquote>\n<p>I know, I'm thinking on saving money for a Ryzen just to compile rustc faster</p>",
        "id": 168244794,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560677018
    },
    {
        "content": "<p>hmmm</p>",
        "id": 168246069,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560679380
    },
    {
        "content": "<p>Got a different error on <code>rustc-llvm</code></p>\n<div class=\"codehilite\"><pre><span></span>error[E0523]: found two different crates with name `rustc_demangle` that are not distinguished by differing `-C metadata`. This will result in symbol conflicts between the two.\n</pre></div>",
        "id": 168246084,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560679398
    },
    {
        "content": "<p>:(</p>",
        "id": 168246382,
        "sender_full_name": "RalfJ",
        "timestamp": 1560679935
    },
    {
        "content": "<p>my best bet is to randomly delete files called <code>librustc_demangle*</code> in <code>build/</code></p>",
        "id": 168246384,
        "sender_full_name": "RalfJ",
        "timestamp": 1560679952
    },
    {
        "content": "<p>or do <code>./x.py clean</code> (which will <em>not</em> delete your LLVM build) and then <code>./x.py test src/tools/miri</code> and then go to sleep ;)</p>",
        "id": 168246401,
        "sender_full_name": "RalfJ",
        "timestamp": 1560680037
    },
    {
        "content": "<p>The thing is that I deleted the whole build directory for that build</p>",
        "id": 168253322,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560692729
    },
    {
        "content": "<p>Ok I don't know why or how but the rebuild worked :P all tests passed</p>",
        "id": 168257675,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560700494
    },
    {
        "content": "<p>nice!</p>",
        "id": 168267497,
        "sender_full_name": "RalfJ",
        "timestamp": 1560718591
    },
    {
        "content": "<p>Im building rustc to start doing the miri changes</p>",
        "id": 168320502,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560785473
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0107]: wrong number of lifetime arguments: expected 3, found 2\n  --&gt; src/lib.rs:78:25\n   |\n78 | ) -&gt; InterpResult&lt;&#39;tcx, InterpretCx&lt;&#39;mir, &#39;tcx, Evaluator&lt;&#39;tcx&gt;&gt;&gt; {\n   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected 3 lifetime arguments\n</pre></div>\n\n\n<p>After rebasing my rustc this keeps happening</p>",
        "id": 168322492,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560786840
    },
    {
        "content": "<p>what's your build invocation?</p>",
        "id": 168326228,
        "sender_full_name": "RalfJ",
        "timestamp": 1560789482
    },
    {
        "content": "<p>miri master works with rustc master as of right now</p>",
        "id": 168326256,
        "sender_full_name": "RalfJ",
        "timestamp": 1560789490
    },
    {
        "content": "<p>this looks like you are using a too-old-miri (again)</p>",
        "id": 168326269,
        "sender_full_name": "RalfJ",
        "timestamp": 1560789501
    },
    {
        "content": "<p>ah no. you are using a too-old-rustc.</p>",
        "id": 168326295,
        "sender_full_name": "RalfJ",
        "timestamp": 1560789523
    },
    {
        "content": "<p>cargo build</p>",
        "id": 168326354,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560789597
    },
    {
        "content": "<p>but it has the override to run my rustc</p>",
        "id": 168326423,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560789612
    },
    {
        "content": "<p>well it's not using a new enough one I'm afraid</p>",
        "id": 168326579,
        "sender_full_name": "RalfJ",
        "timestamp": 1560789774
    },
    {
        "content": "<p>did you build all the way to stage 2?  is <code>rustc --version</code> plausible?</p>",
        "id": 168326690,
        "sender_full_name": "RalfJ",
        "timestamp": 1560789850
    },
    {
        "content": "<p>yes i followed the miri README instructions</p>",
        "id": 168327527,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560790575
    },
    {
        "content": "<p>well what can I say, the rustc you compiled/use is clearly not the one you think it should be, and without SSH access to your system I'm afraid I can't help you more than write instructions that, to the best of my knowledge, work when followed exactly.</p>",
        "id": 168327607,
        "sender_full_name": "RalfJ",
        "timestamp": 1560790663
    },
    {
        "content": "<p>looks like you built a too-old-rustc then. or didn't rebuild after updating it. or you are using the wrong linked toolchain.</p>",
        "id": 168327682,
        "sender_full_name": "RalfJ",
        "timestamp": 1560790710
    },
    {
        "content": "<p>I'm going to redo it and see what happens</p>",
        "id": 168331656,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560793772
    },
    {
        "content": "<p>nope, still ran <code>./miri test</code> and it returned the same error</p>",
        "id": 168337435,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560798047
    },
    {
        "content": "<p>I deleted my local branch and pulled from my fork to see what happens</p>",
        "id": 168339980,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560799564
    },
    {
        "content": "<p>is <a href=\"https://github.com/rust-lang/rust/commit/1e388703c07c6f693d5974b9f8520403a4fc57c0\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/1e388703c07c6f693d5974b9f8520403a4fc57c0\">1e388703c07c6f693d5974b9f8520403a4fc57c0</a> recent enough?</p>",
        "id": 168340287,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560799861
    },
    {
        "content": "<p>does it include <a href=\"https://github.com/rust-lang/rust/commit/24ddd1615419be89828fb5628e3c14af86c08b01\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/24ddd1615419be89828fb5628e3c14af86c08b01\">24ddd1615419be89828fb5628e3c14af86c08b01</a> ?</p>",
        "id": 168340977,
        "sender_full_name": "RalfJ",
        "timestamp": 1560800466
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/commit/9606f6fa64926a84d82e3c62dbdc57f5c10f756d\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/9606f6fa64926a84d82e3c62dbdc57f5c10f756d\">9606f6fa64926a84d82e3c62dbdc57f5c10f756d</a> ?</p>",
        "id": 168341010,
        "sender_full_name": "RalfJ",
        "timestamp": 1560800505
    },
    {
        "content": "<p>well, <code>git show</code> shows both of them</p>",
        "id": 168341279,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560800758
    },
    {
        "content": "<p>but I'm not sure which one happened before</p>",
        "id": 168342918,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560801915
    },
    {
        "content": "<p>I rebased and I'm building again</p>",
        "id": 168343252,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560802199
    },
    {
        "content": "<p><code>git show $SHA</code> showing them just means that they are somewhere in your local clone, but does not say anything about them being in your branch</p>",
        "id": 168346163,
        "sender_full_name": "RalfJ",
        "timestamp": 1560804583
    },
    {
        "content": "<p><code>git log</code> without extra arguments would have to show them</p>",
        "id": 168346220,
        "sender_full_name": "RalfJ",
        "timestamp": 1560804604
    },
    {
        "content": "<p>(that's pager output, so you can search it by typing <code>/</code> and then what you are searching for)</p>",
        "id": 168346259,
        "sender_full_name": "RalfJ",
        "timestamp": 1560804626
    },
    {
        "content": "<p>i found the first but not the second</p>",
        "id": 168346267,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560804638
    },
    {
        "content": "<p>after rebasing both are there</p>",
        "id": 168346340,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560804692
    },
    {
        "content": "<p>yay I'ts merged: <a href=\"https://github.com/rust-lang/rust/pull/61781\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61781\">https://github.com/rust-lang/rust/pull/61781</a></p>",
        "id": 168346725,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560805001
    },
    {
        "content": "<p>ok after all of this I think I was able to make this work</p>",
        "id": 168353003,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560810293
    },
    {
        "content": "<p>so... tests</p>",
        "id": 168353008,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560810295
    },
    {
        "content": "<blockquote>\n<p>one testcase should do something like <code>... as *const i32 as usize as u8 as usize</code> and make sure the value got truncated</p>\n</blockquote>\n<p>I did this in a test but its still failing when doing the <code>as u8</code> cast, is that ok?</p>",
        "id": 168358849,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560816783
    },
    {
        "content": "<p>Given that there is no implementation inside mir for the new <code>Machine</code> methods i suppose the behaviour should be the same, right?</p>",
        "id": 168362067,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560821840
    },
    {
        "content": "<p>mir -&gt; miri*</p>",
        "id": 168369477,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560833131
    },
    {
        "content": "<p>yes, that is expected</p>",
        "id": 168387226,
        "sender_full_name": "oli",
        "timestamp": 1560853265
    },
    {
        "content": "<p>So what's the next step?</p>",
        "id": 168396577,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560861965
    },
    {
        "content": "<p>overwrite the <code>force*</code> methods on the machine and start experimenting with converting pointers to ints and back in the way I described on the issue</p>",
        "id": 168397044,
        "sender_full_name": "oli",
        "timestamp": 1560862300
    },
    {
        "content": "<p>Though the conversion should be skipped if we don't have a random seed</p>",
        "id": 168397060,
        "sender_full_name": "oli",
        "timestamp": 1560862318
    },
    {
        "content": "<p>without a random seed, we are in deterministic mode and should just bail out like we do right now</p>",
        "id": 168397122,
        "sender_full_name": "oli",
        "timestamp": 1560862338
    },
    {
        "content": "<p>How does the miri project handle tests that should fail in deterministic mode only?</p>",
        "id": 168397484,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560862610
    },
    {
        "content": "<p>I think we have an example test using <code>rand</code></p>",
        "id": 168397614,
        "sender_full_name": "oli",
        "timestamp": 1560862691
    },
    {
        "content": "<p>it should have a flag specified somewhere</p>",
        "id": 168397621,
        "sender_full_name": "oli",
        "timestamp": 1560862699
    },
    {
        "content": "<p>Ok I'll look it up</p>",
        "id": 168397629,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560862712
    },
    {
        "content": "<p>if there are no tests, we should create some XD</p>",
        "id": 168398035,
        "sender_full_name": "oli",
        "timestamp": 1560863008
    },
    {
        "content": "<p>I'll check those in an hour, gotta get ready for work :P</p>",
        "id": 168399044,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560863611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> the new tests should have <code>// compile-flags: -Zmiri-seed=4242</code></p>",
        "id": 168399051,
        "sender_full_name": "RalfJ",
        "timestamp": 1560863618
    },
    {
        "content": "<p>that will enable nondeterministic mode</p>",
        "id": 168399066,
        "sender_full_name": "RalfJ",
        "timestamp": 1560863627
    },
    {
        "content": "<p>the existing tests dont have that flag and hence will still fail</p>",
        "id": 168399082,
        "sender_full_name": "RalfJ",
        "timestamp": 1560863637
    },
    {
        "content": "<p>Heh, deterministic nondeterminism</p>",
        "id": 168403500,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560866421
    },
    {
        "content": "<p>the best kind :)</p>",
        "id": 168403574,
        "sender_full_name": "RalfJ",
        "timestamp": 1560866466
    },
    {
        "content": "<p>the best kind of nondeterminism</p>",
        "id": 168403579,
        "sender_full_name": "oli",
        "timestamp": 1560866468
    },
    {
        "content": "<p>lol</p>",
        "id": 168403583,
        "sender_full_name": "oli",
        "timestamp": 1560866471
    },
    {
        "content": "<p>Edward Lorenz kind of determinism.</p>",
        "id": 168404693,
        "sender_full_name": "vertexclique",
        "timestamp": 1560867215
    },
    {
        "content": "<p>I'm doing <code>ptr_to_int</code></p>",
        "id": 168418001,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560875638
    },
    {
        "content": "<p>when there is no entry in the hashmap for the ptr, what u64 should I use? in other words, what is <code>name_of_the_u64</code>  in <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  instructions?</p>",
        "id": 168418139,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560875711
    },
    {
        "content": "<p>also in <code>memory.get(id).bytes.len()</code>,  do you mean <code>memory: Memory</code> or the hashmap? because <code>memory: Memory</code> is not accesible from  <code>ptr_to_int</code>, just <code>MemoryExtra</code>.</p>",
        "id": 168418896,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560876229
    },
    {
        "content": "<blockquote>\n<p>when there is no entry in the hashmap for the ptr, what u64 should I use? in other words, what is <code>name_of_the_u64</code>  in <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>  instructions?</p>\n</blockquote>\n<p>should It be the <code>u64</code> inside <code>AllocId</code>?</p>",
        "id": 168443360,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560883429
    },
    {
        "content": "<p>just saw this and I have to say, <code>ptr_to_int</code> and <code>int_to_ptr</code> seem quite confusing :P</p>",
        "id": 168443661,
        "sender_full_name": "eddyb",
        "timestamp": 1560883606
    },
    {
        "content": "<p>but then again I'm not sure I have any better suggestions :(</p>",
        "id": 168443902,
        "sender_full_name": "eddyb",
        "timestamp": 1560883750
    },
    {
        "content": "<p>(but they seem ambiguous with language-level <code>usize</code> &lt;-&gt; <code>*mut T</code> casts)</p>",
        "id": 168443932,
        "sender_full_name": "eddyb",
        "timestamp": 1560883771
    },
    {
        "content": "<blockquote>\n<p>just saw this and I have to say, <code>ptr_to_int</code> and <code>int_to_ptr</code> seem quite confusing :P</p>\n</blockquote>\n<p>I believe <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> has stronger naming opinions than me. I'm happy with whatever name you want to use :P</p>",
        "id": 168444748,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560884284
    },
    {
        "content": "<blockquote>\n<p>an operation called <code>int_to_ptr</code> IMO should have type int-to-ptr, or else something is off ;)</p>\n</blockquote>\n<p>This :P</p>",
        "id": 168444783,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560884318
    },
    {
        "content": "<p>well it has type <code>u128 -&gt; Pointer</code>, does it not?</p>",
        "id": 168447404,
        "sender_full_name": "RalfJ",
        "timestamp": 1560886206
    },
    {
        "content": "<p>oh you were quoting me?^^</p>",
        "id": 168447438,
        "sender_full_name": "RalfJ",
        "timestamp": 1560886230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> well in some sense this is about the casts</p>",
        "id": 168447458,
        "sender_full_name": "RalfJ",
        "timestamp": 1560886246
    },
    {
        "content": "<p>right but \"int\" in the sense of \"raw bits\" not \"surface language integer types\"</p>",
        "id": 168447488,
        "sender_full_name": "eddyb",
        "timestamp": 1560886277
    },
    {
        "content": "<p>similar with \"ptr\" - miri's <code>Pointer</code>, not merely a pointer type</p>",
        "id": 168447499,
        "sender_full_name": "eddyb",
        "timestamp": 1560886291
    },
    {
        "content": "<p>if you want to discuss the implementation also I`ll be happy to join that discussion :P</p>",
        "id": 168447753,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560886457
    },
    {
        "content": "<p>well the part about int/ptr values vs type is confusing everywhere. not sure what to do about it.</p>",
        "id": 168447860,
        "sender_full_name": "RalfJ",
        "timestamp": 1560886560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> I think essentially we're going to need a <code>Vec&lt;(u64, AllocId)&gt;</code> for the int -&gt; ptr direction. What that <code>Vec</code> would contain would be the base addresses of the <code>AllocId</code> that went through a ptr -&gt; int transformation. You'll need to do a binary search on that for finding the <code>u64</code> in the <code>Vec</code> that is the largest one that is smaller or equal to the <code>u64</code> that you are searching for</p>",
        "id": 168481055,
        "sender_full_name": "oli",
        "timestamp": 1560926318
    },
    {
        "content": "<p>the problem is that e.g. a user could do a ptr -&gt; int transformation for a pointer to the 5th element of an array</p>",
        "id": 168481070,
        "sender_full_name": "oli",
        "timestamp": 1560926350
    },
    {
        "content": "<p>yeah I got that part</p>",
        "id": 168481075,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560926357
    },
    {
        "content": "<p>oh</p>",
        "id": 168481081,
        "sender_full_name": "oli",
        "timestamp": 1560926373
    },
    {
        "content": "<p>you mean ptr to int</p>",
        "id": 168481089,
        "sender_full_name": "oli",
        "timestamp": 1560926378
    },
    {
        "content": "<p>the real question is what <code>u64</code> should be</p>",
        "id": 168481090,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560926378
    },
    {
        "content": "<p>sorry</p>",
        "id": 168481091,
        "sender_full_name": "oli",
        "timestamp": 1560926379
    },
    {
        "content": "<p>so as a start, create a <code>u64</code> field in the <code>ExtraData</code> of the <code>InterpCx</code> that denotes how many bytes have ever been part of an ptr -&gt; int transformation</p>",
        "id": 168481153,
        "sender_full_name": "oli",
        "timestamp": 1560926437
    },
    {
        "content": "<p>so the first time anything is transformed, that value is 2^16 or sth (don't start with <code>0</code>) and thus the <code>u64</code> is 2^16. Then you add the <code>Allocation</code>'s byte size to the <code>ExtraData</code> field</p>",
        "id": 168481188,
        "sender_full_name": "oli",
        "timestamp": 1560926505
    },
    {
        "content": "<blockquote>\n<p>so as a start, create a <code>u64</code> field in the <code>ExtraData</code> of the <code>InterpCx</code> that denotes how many bytes have ever been part of an ptr -&gt; int transformation</p>\n</blockquote>\n<p>I think that should go in <code>MemoryExtra</code>, given that none of the methods can access <code>InterpCx</code> directrly</p>",
        "id": 168481201,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560926515
    },
    {
        "content": "<p>the next transformation will thus have its allocation directly next to it</p>",
        "id": 168481202,
        "sender_full_name": "oli",
        "timestamp": 1560926517
    },
    {
        "content": "<p>right</p>",
        "id": 168481206,
        "sender_full_name": "oli",
        "timestamp": 1560926521
    },
    {
        "content": "<p><code>MemoryExtra</code> is the right thing</p>",
        "id": 168481252,
        "sender_full_name": "oli",
        "timestamp": 1560926529
    },
    {
        "content": "<p>ohhh now I get it</p>",
        "id": 168481257,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560926548
    },
    {
        "content": "<p>so this <code>u64</code> just keeps growing simulating the effect of allocating more and more stuff in memory</p>",
        "id": 168481271,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560926576
    },
    {
        "content": "<p>jop</p>",
        "id": 168481285,
        "sender_full_name": "oli",
        "timestamp": 1560926597
    },
    {
        "content": "<p>in the future we can handle deallocations, but for now, let's do the easy thing</p>",
        "id": 168481292,
        "sender_full_name": "oli",
        "timestamp": 1560926610
    },
    {
        "content": "<p>maybe this is a little too far, but what should happen when the <code>u64</code> overflows?</p>",
        "id": 168481294,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560926627
    },
    {
        "content": "<p>use <code>checked_add</code> and report an <code>Unimplemented</code> error xD</p>",
        "id": 168481347,
        "sender_full_name": "oli",
        "timestamp": 1560926662
    },
    {
        "content": "<p>hahaha</p>",
        "id": 168481355,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560926684
    },
    {
        "content": "<p>well I believe that's enough to get me started tomorrow (now + 8h)</p>",
        "id": 168481368,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560926712
    },
    {
        "content": "<p>cool!</p>",
        "id": 168481378,
        "sender_full_name": "oli",
        "timestamp": 1560926722
    },
    {
        "content": "<p>see you at 17:00 then :P</p>",
        "id": 168481385,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560926735
    },
    {
        "content": "<p>jup :D</p>",
        "id": 168481393,
        "sender_full_name": "oli",
        "timestamp": 1560926759
    },
    {
        "content": "<blockquote>\n<p>so the first time anything is transformed, that value is 2^16 or sth (don't start with <code>0</code>) and thus the <code>u64</code> is 2^16. Then you add the <code>Allocation</code>'s byte size to the <code>ExtraData</code> field</p>\n</blockquote>\n<p>I don't get the point of this?</p>",
        "id": 168493410,
        "sender_full_name": "RalfJ",
        "timestamp": 1560938819
    },
    {
        "content": "<p>is this for picking a base address? those should be non-deterministic, that's why this depends on the seed</p>",
        "id": 168493438,
        "sender_full_name": "RalfJ",
        "timestamp": 1560938856
    },
    {
        "content": "<p>so IMO you should ask the RNG for a random base address until you find one that works</p>",
        "id": 168493447,
        "sender_full_name": "RalfJ",
        "timestamp": 1560938867
    },
    {
        "content": "<p>and give up after 100 attempts or so^^</p>",
        "id": 168493454,
        "sender_full_name": "RalfJ",
        "timestamp": 1560938877
    },
    {
        "content": "<p>if we pick a fixed base address like 2^16, we might as well do this in all executions as everything is deterministic^^</p>",
        "id": 168493521,
        "sender_full_name": "RalfJ",
        "timestamp": 1560938932
    },
    {
        "content": "<p>we can improve this algorithm at any time, I just chose the simplest one to start with</p>",
        "id": 168495991,
        "sender_full_name": "oli",
        "timestamp": 1560941962
    },
    {
        "content": "<p>We need to do something like you suggested anyway in order to be able to handle deallocations</p>",
        "id": 168496081,
        "sender_full_name": "oli",
        "timestamp": 1560942021
    },
    {
        "content": "<p>but for now we can skip any complex logic and just count up deterministically</p>",
        "id": 168496096,
        "sender_full_name": "oli",
        "timestamp": 1560942037
    },
    {
        "content": "<p>seems funny that we make a deterministic part of the execution depend on the \"nondeterminism\" flag, but whatever ;)</p>",
        "id": 168497239,
        "sender_full_name": "RalfJ",
        "timestamp": 1560943236
    },
    {
        "content": "<p>fine for me</p>",
        "id": 168497242,
        "sender_full_name": "RalfJ",
        "timestamp": 1560943243
    },
    {
        "content": "<p>hmm</p>",
        "id": 168498140,
        "sender_full_name": "oli",
        "timestamp": 1560944189
    },
    {
        "content": "<p>like we could also choose a random default for the nondeterminism flag and thus be deterministic</p>",
        "id": 168498149,
        "sender_full_name": "oli",
        "timestamp": 1560944210
    },
    {
        "content": "<p>I thought that the nondeterminsm flag is for things that aren't deterministic on hardware</p>",
        "id": 168498168,
        "sender_full_name": "oli",
        "timestamp": 1560944232
    },
    {
        "content": "<p>miri has nothing to do with hardware :P</p>",
        "id": 168500605,
        "sender_full_name": "RalfJ",
        "timestamp": 1560946632
    },
    {
        "content": "<p>the goal is to implement the MIR spec. there is no MIR spec but most of the time we can imagine what it would be. and for allocation it'd certainly be non-deterministic.</p>",
        "id": 168500612,
        "sender_full_name": "RalfJ",
        "timestamp": 1560946653
    },
    {
        "content": "<p>exactly, and that's why I'd want it behind the flag even if the actual implementation isn't non-deterministic yet</p>",
        "id": 168501996,
        "sender_full_name": "oli",
        "timestamp": 1560947829
    },
    {
        "content": "<p>oh absolutely. my surprise it not about the flag but about the lack of actual non-determinism. ;)</p>",
        "id": 168502261,
        "sender_full_name": "RalfJ",
        "timestamp": 1560948025
    },
    {
        "content": "<p>yea, I should have communicated better that this is the first step implementation. I just didn't want the PR to get bigger than it will already get</p>",
        "id": 168502452,
        "sender_full_name": "oli",
        "timestamp": 1560948227
    },
    {
        "content": "<p>I'll leave a comment stating the fact that we need to pick the starting address randomly in the future.</p>",
        "id": 168519718,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560959920
    },
    {
        "content": "<p>I have an small issue, in order to shift the <code>u64</code>, I need to get the size of the allocation, however I'm not sure how to do it because inside <code>int_to_ptr</code> and <code>ptr_to_int</code> I have no access to <code>Memory</code> itself, just to <code>MemoryExtra</code></p>",
        "id": 168535698,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560970664
    },
    {
        "content": "<blockquote>\n<p>I have an small issue, in order to shift the <code>u64</code>, I need to get the size of the allocation, however I'm not sure how to do it because inside <code>int_to_ptr</code> and <code>ptr_to_int</code> I have no access to <code>Memory</code> itself, just to <code>MemoryExtra</code></p>\n</blockquote>\n<p>Should I change the machine trait to take <code>Memory</code> or perhaps <code>InterpCx</code> instead of <code>MemoryExtra</code>?</p>",
        "id": 168541258,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560974890
    },
    {
        "content": "<p><code>InterpCx</code> won't be possible because you need to call this in <code>Memory</code> methods... but you can change it to <code>Memory</code></p>",
        "id": 168544100,
        "sender_full_name": "RalfJ",
        "timestamp": 1560977130
    },
    {
        "content": "<p>then please also change the other machine hooks that take <code>MemoryExtra</code>, for consisteny</p>",
        "id": 168544115,
        "sender_full_name": "RalfJ",
        "timestamp": 1560977143
    },
    {
        "content": "<blockquote>\n<p><code>InterpCx</code> won't be possible because you need to call this in <code>Memory</code> methods... but you can change it to <code>Memory</code></p>\n</blockquote>\n<p>oh of course, i forget about the <code>Memory</code> ones. I'm going to do the changes in my local <code>rustc</code> to see if my <code>miri</code> changes work. I assume I should wrap the new <code>MemoryExtra</code> in miri like the <code>stacked_borrows</code>:  <code>Rc&lt;RefCell&lt;_&gt;&gt;</code></p>",
        "id": 168546451,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560978777
    },
    {
        "content": "<p>well see if you can pass <code>&amp;mut Memory</code> to <code>int_to_ptr</code>/<code>ptr_to_int</code></p>",
        "id": 168546551,
        "sender_full_name": "RalfJ",
        "timestamp": 1560978844
    },
    {
        "content": "<p>if yes you need no interior mutability</p>",
        "id": 168546559,
        "sender_full_name": "RalfJ",
        "timestamp": 1560978851
    },
    {
        "content": "<p>I need that for Stacked Borrows because some of the relevant machine hooks can only get <code>&amp;Memory</code>/<code>&amp;MemoryExtra</code></p>",
        "id": 168546570,
        "sender_full_name": "RalfJ",
        "timestamp": 1560978877
    },
    {
        "content": "<p>but the thing is that would force the usages of  <code>force_*</code> to have a mutable pointer of <code>Memory</code></p>",
        "id": 168546591,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560978895
    },
    {
        "content": "<p>yes</p>",
        "id": 168546606,
        "sender_full_name": "RalfJ",
        "timestamp": 1560978904
    },
    {
        "content": "<p>so if they dont have a mutable memory you cant do that</p>",
        "id": 168546619,
        "sender_full_name": "RalfJ",
        "timestamp": 1560978923
    },
    {
        "content": "<p>thats why I said see if you can do it :)</p>",
        "id": 168546624,
        "sender_full_name": "RalfJ",
        "timestamp": 1560978928
    },
    {
        "content": "<p>yeah I tried and saw that, but I think I'll go for the <code>Rc</code></p>",
        "id": 168546695,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560978984
    },
    {
        "content": "<p>you should need <code>Rc</code> even then</p>",
        "id": 168546752,
        "sender_full_name": "RalfJ",
        "timestamp": 1560979049
    },
    {
        "content": "<p>just <code>RefCell</code></p>",
        "id": 168546754,
        "sender_full_name": "RalfJ",
        "timestamp": 1560979050
    },
    {
        "content": "<p>I need <code>Rc</code> because I also need all allocations to share this pointer</p>",
        "id": 168546762,
        "sender_full_name": "RalfJ",
        "timestamp": 1560979058
    },
    {
        "content": "<p>but you wont need that</p>",
        "id": 168546768,
        "sender_full_name": "RalfJ",
        "timestamp": 1560979063
    },
    {
        "content": "<p>Ohh ok</p>",
        "id": 168546781,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560979076
    },
    {
        "content": "<p>I believe <code>ptr_to_int</code> is working, I'm going to do <code>int_to_ptr</code> now</p>",
        "id": 168549238,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560981430
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"132916\">Christian Poveda</span> I think essentially we're going to need a <code>Vec&lt;(u64, AllocId)&gt;</code> for the int -&gt; ptr direction. What that <code>Vec</code> would contain would be the base addresses of the <code>AllocId</code> that went through a ptr -&gt; int transformation. You'll need to do a binary search on that for finding the <code>u64</code> in the <code>Vec</code> that is the largest one that is smaller or equal to the <code>u64</code> that you are searching for</p>\n</blockquote>\n<p>So this means that the binary search would give me the \"greater lower bound\" for the one I'm searching for, right?. What should be the  <code>offset</code> for the pointer here? And what should happen when the greater lower bound is not equal to the <code>u64</code> I'm looking for? What should be the <code>AllocId</code> in this case?</p>",
        "id": 168550787,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1560982981
    },
    {
        "content": "<p>if you get the <code>int</code> 64 and find a \"greatest lower bound\" of 60, then you create a pointer with offset 4</p>",
        "id": 168572275,
        "sender_full_name": "RalfJ",
        "timestamp": 1561015081
    },
    {
        "content": "<p>except you should make sure that this is still \"inbounds\" the allocation</p>",
        "id": 168572322,
        "sender_full_name": "RalfJ",
        "timestamp": 1561015110
    },
    {
        "content": "<p>I suppose that means to check that the Int is smaller than the latest address used</p>",
        "id": 168591936,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561035104
    },
    {
        "content": "<p>well once you got the base address you compute the offset</p>",
        "id": 168594640,
        "sender_full_name": "RalfJ",
        "timestamp": 1561037098
    },
    {
        "content": "<p>and then you check <code>offset &lt;= alloc.size</code></p>",
        "id": 168594653,
        "sender_full_name": "RalfJ",
        "timestamp": 1561037103
    },
    {
        "content": "<p>note the <code>=</code>! this is the \"one-past-the-end\" rule.</p>",
        "id": 168594660,
        "sender_full_name": "RalfJ",
        "timestamp": 1561037106
    },
    {
        "content": "<p>At least in our current state of affairs</p>",
        "id": 168596535,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561038359
    },
    {
        "content": "<p>no that should be the final state, this is how int-ptr-casts work</p>",
        "id": 168597704,
        "sender_full_name": "RalfJ",
        "timestamp": 1561039054
    },
    {
        "content": "<p>which part of this <code>int_to_ptr</code> do you think is temporary?</p>",
        "id": 168597727,
        "sender_full_name": "RalfJ",
        "timestamp": 1561039065
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 168598009,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561039208
    },
    {
        "content": "<p>you said \"At least in our current state of affairs\". what did you refer to and what did you mean?</p>",
        "id": 168598513,
        "sender_full_name": "RalfJ",
        "timestamp": 1561039528
    },
    {
        "content": "<blockquote>\n<p>we can improve this algorithm at any time, I just chose the simplest one to start with</p>\n</blockquote>\n<p>Well I assume that simulating the memory allocations could eventually have a more sophisticated model</p>",
        "id": 168598951,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561039808
    },
    {
        "content": "<blockquote>\n<p>and then you check <code>offset &lt;= alloc.size</code></p>\n</blockquote>\n<p>So basically its a: \"This thing fits here\"</p>",
        "id": 168599182,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561039993
    },
    {
        "content": "<blockquote>\n<p>no that should be the final state, this is how int-ptr-casts work</p>\n</blockquote>\n<p>I shouldn't have skimmed the paper</p>",
        "id": 168599354,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561040114
    },
    {
        "content": "<blockquote>\n<p>Well I assume that simulating the memory allocations could eventually have a more sophisticated model</p>\n</blockquote>\n<p>I think the <code>u64-AllocId</code> mapping, plus a <code>base_address</code> field in <code>AllocationExtra</code> for the other direction, (do you have that yet?)  is a reasonable representation. and on the int-to-ptr side, there is not much choice, so whatever you are doing now (and what I described above) is the final version.</p>",
        "id": 168599649,
        "sender_full_name": "RalfJ",
        "timestamp": 1561040298
    },
    {
        "content": "<p>the one place where we are choosing a preliminary option now is for how to allocate the offsets in ptr-to-int.</p>",
        "id": 168599668,
        "sender_full_name": "RalfJ",
        "timestamp": 1561040316
    },
    {
        "content": "<blockquote>\n<p>I think the <code>u64-AllocId</code> mapping, plus a <code>base_address</code> field in <code>AllocationExtra</code> for the other direction, (do you have that yet?)  is a reasonable representation.</p>\n</blockquote>\n<p>Yes I wanted to do a single commit with both sides, I added the <code>base_address</code> as a field in <code>MemoryExtra</code>, should I move it to <code>AllocationExtra</code>?</p>",
        "id": 168600168,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561040709
    },
    {
        "content": "<blockquote>\n<p>so whatever you are doing now (and what I described above) is the final version.</p>\n</blockquote>\n<p>Damn, there is no salvation from the <code>git blame</code>, this time</p>",
        "id": 168600208,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561040739
    },
    {
        "content": "<p>yea, git should totally mention the reviewer in <code>git blame</code>, too ;)</p>",
        "id": 168600322,
        "sender_full_name": "oli",
        "timestamp": 1561040812
    },
    {
        "content": "<p>well you have a per-allocation base_address, so <code>AllocExtra</code> makes more sense IMO</p>",
        "id": 168600351,
        "sender_full_name": "RalfJ",
        "timestamp": 1561040840
    },
    {
        "content": "<p>just to be sure, the <code>base_address</code> is the integer that gets modified when doing <code>ptr_to_int</code>, i.e. Oliver's 2^16, right?</p>",
        "id": 168600819,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561041129
    },
    {
        "content": "<p>no</p>",
        "id": 168600916,
        "sender_full_name": "oli",
        "timestamp": 1561041215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> wants to move the ptr -&gt; int mapping into the <code>Allocation</code></p>",
        "id": 168600936,
        "sender_full_name": "oli",
        "timestamp": 1561041234
    },
    {
        "content": "<p>which I support</p>",
        "id": 168600940,
        "sender_full_name": "oli",
        "timestamp": 1561041237
    },
    {
        "content": "<p>so we have one <code>HashMap</code> less</p>",
        "id": 168600984,
        "sender_full_name": "oli",
        "timestamp": 1561041244
    },
    {
        "content": "<p>Wow wow, wait</p>",
        "id": 168601020,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561041274
    },
    {
        "content": "<p>if you want to map <code>Pointer</code> -&gt; int, you fetch the int via <code>memory.get(ptr.alloc_id)?.base_address + ptr.offset</code></p>",
        "id": 168601022,
        "sender_full_name": "oli",
        "timestamp": 1561041278
    },
    {
        "content": "<p>At least that's what I understood?</p>",
        "id": 168601061,
        "sender_full_name": "oli",
        "timestamp": 1561041305
    },
    {
        "content": "<blockquote>\n<p>if you want to map <code>Pointer</code> -&gt; int, you fetch the int via <code>memory.get(ptr.alloc_id)?.base_address + ptr.offset</code></p>\n</blockquote>\n<p>then wouldnt we need the <code>Vec</code> for the <code>int_to_ptr</code> only and forget the <code>HashMap</code>? Is that what you mean  by having one HashMap less?</p>",
        "id": 168601252,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561041442
    },
    {
        "content": "<p>yes</p>",
        "id": 168601452,
        "sender_full_name": "oli",
        "timestamp": 1561041581
    },
    {
        "content": "<p>Well If <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> agrees I'll do the change to <code>ptr_to_int</code> after fixing <code>int_to_ptr</code></p>",
        "id": 168601584,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561041675
    },
    {
        "content": "<p>yes  think we'll end up with a (sorted!) <code>Vec</code>, and an entry in <code>AllocExtra</code>, and no <code>HashMap</code></p>",
        "id": 168601705,
        "sender_full_name": "RalfJ",
        "timestamp": 1561041756
    },
    {
        "content": "<p>the <code>Vec</code> is only queried in int-to-ptr, but of course ptr-to-int has to fill the <code>Vec</code> with the right information to make it match the base address stored in <code>AllocExtra</code></p>",
        "id": 168601758,
        "sender_full_name": "RalfJ",
        "timestamp": 1561041798
    },
    {
        "content": "<p>yep, understood. I'll come back in a few minutes with a bunch of errors</p>",
        "id": 168602186,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561042088
    },
    {
        "content": "<p>Taking a few steps back</p>\n<blockquote>\n<p>if you get the <code>int</code> 64 and find a \"greatest lower bound\" of 60, then you create a pointer with offset 4</p>\n</blockquote>\n<p>If we had a perfect match the offset would be zero following this idea. am I correctly assuming that this is the case when we have ZSTs?</p>",
        "id": 168602630,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561042366
    },
    {
        "content": "<p>pointer offset is unrelated to the actual types that are pointed at</p>",
        "id": 168602761,
        "sender_full_name": "oli",
        "timestamp": 1561042450
    },
    {
        "content": "<p>basically a perfect match means your pointer points into the beginning of an <code>Allocation</code></p>",
        "id": 168602782,
        "sender_full_name": "oli",
        "timestamp": 1561042463
    },
    {
        "content": "<p>oh so the offset is just the offset from inside the pointed value</p>",
        "id": 168602810,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561042490
    },
    {
        "content": "<p>if you get <code>64</code> from <code>Pointer(AllocId(something), 4)</code>, then <code>Pointer(AllocId(something), 0)</code> gives you <code>60</code></p>",
        "id": 168602830,
        "sender_full_name": "oli",
        "timestamp": 1561042501
    },
    {
        "content": "<p>yes</p>",
        "id": 168602842,
        "sender_full_name": "oli",
        "timestamp": 1561042505
    },
    {
        "content": "<p>which would be zero for  most basic types, just contiguous stuff like arrays, structs, tuples and so on would actually require to offset to access them</p>",
        "id": 168602888,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561042545
    },
    {
        "content": "<p>yes, but you may have a pointer to a basic type, and that pointer may be into a field of a struct</p>",
        "id": 168602972,
        "sender_full_name": "oli",
        "timestamp": 1561042601
    },
    {
        "content": "<p>or the user may have allocated random bytes on the heap and placed the value somewhere in there</p>",
        "id": 168602997,
        "sender_full_name": "oli",
        "timestamp": 1561042626
    },
    {
        "content": "<p>e.g. <code>Rc&lt;u32&gt;</code> would never give you a zero offset to the <code>u32</code></p>",
        "id": 168603011,
        "sender_full_name": "oli",
        "timestamp": 1561042646
    },
    {
        "content": "<p>because of the leading reference count</p>",
        "id": 168603019,
        "sender_full_name": "oli",
        "timestamp": 1561042657
    },
    {
        "content": "<p>I'm slowly understanding whats going on, thank you</p>",
        "id": 168603109,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561042707
    },
    {
        "content": "<p>it's a confusing system to get into. I remember the madness at the beginning. We even had special ZST allocations and some other tricks like that</p>",
        "id": 168603312,
        "sender_full_name": "oli",
        "timestamp": 1561042820
    },
    {
        "content": "<p>heheh</p>",
        "id": 168603336,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561042833
    },
    {
        "content": "<p>but it's very consistent now, just not obvious from the start I guess</p>",
        "id": 168603353,
        "sender_full_name": "oli",
        "timestamp": 1561042842
    },
    {
        "content": "<p>ok now I'm in the part where there is no perfect match after doing a binary search. Checking the docs, I have the position (lets call it <code>pos</code>) where the integer would be inserted into the <code>Vec</code> to keep it sorted. If i understand correctly,  <code>vec[pos - 1]</code> would be our greatest lower bound, but what should happen when the <code>Vec</code> is empty? Should this be an error given that we are trying to transform an integer to a pointer that doesn't even exists?</p>",
        "id": 168603635,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561043034
    },
    {
        "content": "<p>yea, that sounds reasonable</p>",
        "id": 168603747,
        "sender_full_name": "oli",
        "timestamp": 1561043076
    },
    {
        "content": "<p>alternatively we could make the <code>Vec</code> never empty</p>",
        "id": 168604016,
        "sender_full_name": "RalfJ",
        "timestamp": 1561043238
    },
    {
        "content": "<p>if we fill it initially with <code>2^16</code> we'd fall back to that</p>",
        "id": 168604051,
        "sender_full_name": "RalfJ",
        "timestamp": 1561043266
    },
    {
        "content": "<p>but, hm, we'd have to map it to an <code>AllocId</code>...</p>",
        "id": 168604059,
        "sender_full_name": "RalfJ",
        "timestamp": 1561043273
    },
    {
        "content": "<p>also you'll have to handle <code>pos == 0</code> anyway</p>",
        "id": 168604077,
        "sender_full_name": "RalfJ",
        "timestamp": 1561043280
    },
    {
        "content": "<p>what about the tag? I assume these pointers should be untagged given that we are doing crazy raw pointer shenaningans anyway</p>",
        "id": 168604762,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561043738
    },
    {
        "content": "<p>yes. in fact int-to-ptr-tags is <em>exactly</em> what <code>Untagged</code> exists for :)</p>",
        "id": 168604904,
        "sender_full_name": "RalfJ",
        "timestamp": 1561043822
    },
    {
        "content": "<p>Man, two hits in a row, I'm on fire this morning</p>",
        "id": 168604930,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561043842
    },
    {
        "content": "<p><span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span></p>",
        "id": 168604944,
        "sender_full_name": "RalfJ",
        "timestamp": 1561043860
    },
    {
        "content": "<p>or more like <span aria-label=\"fireworks\" class=\"emoji emoji-1f386\" role=\"img\" title=\"fireworks\">:fireworks:</span> ?</p>",
        "id": 168604952,
        "sender_full_name": "RalfJ",
        "timestamp": 1561043865
    },
    {
        "content": "<p>we'll see, if travis doesn't get caught in the fire we'll decide</p>",
        "id": 168605365,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561044126
    },
    {
        "content": "<p>ok time to fix the other way</p>",
        "id": 168605476,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561044233
    },
    {
        "content": "<blockquote>\n<p>and then you check <code>offset &lt;= alloc.size</code></p>\n</blockquote>\n<p>does this  <code>alloc</code> come from <code>Memory</code>?</p>",
        "id": 168606288,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561044737
    },
    {
        "content": "<p>yeah that#s where we typically have our allocations :)</p>",
        "id": 168606623,
        "sender_full_name": "RalfJ",
        "timestamp": 1561044934
    },
    {
        "content": "<p>3 in a row, this is going to fail in CI</p>",
        "id": 168606681,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561044963
    },
    {
        "content": "<p>ok now it is time to ditch the HashMap</p>",
        "id": 168606709,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561044991
    },
    {
        "content": "<blockquote>\n<p>I think the u64-AllocId mapping, plus a base_address field in AllocationExtra for the other direction, (do you have that yet?) is a reasonable representation. and on the int-to-ptr side, there is not much choice, so whatever you are doing now (and what I described above) is the final version.</p>\n</blockquote>\n<p>So the <code>AllocationExtra</code> here is <code>stacked_borrows::Stacks</code>, should I put it there?</p>",
        "id": 168607291,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561045427
    },
    {
        "content": "<p>or given that <code>Stacks</code> has the <code>GlobalState</code>, should I I put it there instead? <br>\nEdit: This doesn't make sense, <code>GlobalState</code> is global after all</p>",
        "id": 168607605,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561045629
    },
    {
        "content": "<p>Ok the fire is over.</p>",
        "id": 168609141,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561046671
    },
    {
        "content": "<p>When does the <code>base_address</code> field acquires its value?</p>",
        "id": 168609345,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561046808
    },
    {
        "content": "<blockquote>\n<p>When does the <code>base_address</code> field acquires its value?</p>\n</blockquote>\n<p>Moreover, this means that not only the HashMap gets removed, the <code>u64</code> inside <code>MemoryExtra</code> (the one with the initial 2^16 value) should be removed too.</p>",
        "id": 168609978,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561047343
    },
    {
        "content": "<p>Ohhhh I think I got it. So when <code>Stacks</code> is created, we get the <code>base_address</code> using the <code>u64</code> inside <code>MemoryExtra</code> with all the acrobatics of adding the size and stuff. Then inside <code>ptr_to_int</code> we just recover it</p>",
        "id": 168612538,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561049188
    },
    {
        "content": "<blockquote>\n<p>Ohhhh I think I got it. So when <code>Stacks</code> is created, we get the <code>base_address</code> using the <code>u64</code> inside <code>MemoryExtra</code> with all the acrobatics of adding the size and stuff. Then inside <code>ptr_to_int</code> we just recover it</p>\n</blockquote>\n<p>If this is right I believe I'm done with the implementation inside miri</p>",
        "id": 168617620,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561052913
    },
    {
        "content": "<p>Probably is not because the <code>*std::ptr::null()</code>test is behaving unexpectedly<br>\nEdit: Ok, the problem is that the tests are returning a different error, I can fix that later</p>",
        "id": 168617784,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561053009
    },
    {
        "content": "<p>Ok none of the tests broke (after fixing the null ptr ones). So, now what about new tests?</p>",
        "id": 168618622,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561053482
    },
    {
        "content": "<p>I believe there are some cases that I'm handling wrong because <code>&amp;42 as *const i32 as usize as u8 as usize;</code> still fails</p>",
        "id": 168619984,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561054368
    },
    {
        "content": "<p>At least in our current state of affairs</p>",
        "id": 168633162,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561063655
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> I'm not sure if you are still unsure about anything :D (except that tests are still failing)</p>",
        "id": 168661309,
        "sender_full_name": "oli",
        "timestamp": 1561101593
    },
    {
        "content": "<p>you can try <code>MIRI_BACKTRACE=1</code> to see where the error is reported from in the code</p>",
        "id": 168661367,
        "sender_full_name": "oli",
        "timestamp": 1561101656
    },
    {
        "content": "<p>At least in our current state of affairs</p>",
        "id": 168677217,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561120475
    },
    {
        "content": "<p>Well I have to land the other PRs before submitting this one but I'll check it</p>",
        "id": 168677244,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561120511
    },
    {
        "content": "<p>we landed a bunch of your stuff a few hours ago</p>",
        "id": 168677336,
        "sender_full_name": "oli",
        "timestamp": 1561120580
    },
    {
        "content": "<p>I just saw it hehehe</p>",
        "id": 168678497,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561121629
    },
    {
        "content": "<p>Is everything OK with the python scripts?</p>",
        "id": 168678556,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561121648
    },
    {
        "content": "<p>just some issues not opening autmatically</p>",
        "id": 168678571,
        "sender_full_name": "oli",
        "timestamp": 1561121665
    },
    {
        "content": "<p>I think I saw a PR where <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> was on it</p>",
        "id": 168678577,
        "sender_full_name": "oli",
        "timestamp": 1561121676
    },
    {
        "content": "<p>well, kindof. I found the error message. but I still have no idea why it is failing.</p>",
        "id": 168678656,
        "sender_full_name": "RalfJ",
        "timestamp": 1561121751
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> you don't have to worry about this though, that's me screwing up an unrelated PR. ;)</p>",
        "id": 168678709,
        "sender_full_name": "RalfJ",
        "timestamp": 1561121775
    },
    {
        "content": "<p>Mama, just lost a branch. Did git rebase against its head. I pressed enter, now it’s dead</p>",
        "id": 168678881,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561121987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> need any help recovering it?</p>",
        "id": 168679153,
        "sender_full_name": "oli",
        "timestamp": 1561122213
    },
    {
        "content": "<p>Nah no problems I was remembering the first \"preparing for intptrcast\" PR</p>",
        "id": 168680505,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561123260
    },
    {
        "content": "<p>heh</p>",
        "id": 168680613,
        "sender_full_name": "oli",
        "timestamp": 1561123341
    },
    {
        "content": "<p>ususally you can recover everything</p>",
        "id": 168680622,
        "sender_full_name": "oli",
        "timestamp": 1561123350
    },
    {
        "content": "<p>if the rebase is still ongoing, do <code>git rebase --abort</code></p>",
        "id": 168684487,
        "sender_full_name": "RalfJ",
        "timestamp": 1561126050
    },
    {
        "content": "<p>else <code>git reflog</code> should at least show every commit you ever created with <code>git commit</code>, and then you can use the SHA1 you get there to recover</p>",
        "id": 168684502,
        "sender_full_name": "RalfJ",
        "timestamp": 1561126067
    },
    {
        "content": "<p><code>git rebase</code> is very easy to get wrong, I've been there several times as well :/</p>",
        "id": 168684559,
        "sender_full_name": "RalfJ",
        "timestamp": 1561126100
    },
    {
        "content": "<p>the most common failure I've seen is to choose the wrong thing to rebase over XD So often it's that one rebases over the own fork's <code>master</code> instead of the upstream <code>master</code></p>",
        "id": 168684738,
        "sender_full_name": "oli",
        "timestamp": 1561126304
    },
    {
        "content": "<p>my usual problem is that i squash the wrong commits D:</p>",
        "id": 168685545,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561126940
    },
    {
        "content": "<p>my usual problem is that I do <code>git commit --amend</code> when I should have done <code>git add . &amp;&amp; git rebase --continue</code></p>",
        "id": 168685635,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127027
    },
    {
        "content": "<p>as in, I accidentally amend the previous commit after fixing conflicts during a rebase</p>",
        "id": 168685713,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127050
    },
    {
        "content": "<p>Bad git practices: The const-eval definitive guide</p>",
        "id": 168685721,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561127058
    },
    {
        "content": "<p>I'm amazed how easily things can go wrong with git</p>",
        "id": 168685733,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561127081
    },
    {
        "content": "<p>it doesn't help that when doing rebase with some commtis marked to <code>edit</code>, you have to kind of remember if you are currently in \"conflict resolution\" or \"editing\" state, and hence have to use <code>git add . &amp;&amp; git rebase --coninue</code> or <code>git commit -a --amend</code> :/</p>",
        "id": 168685771,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127110
    },
    {
        "content": "<p>I don't know, maybe one can change the $PS1 to reflect that state or something</p>",
        "id": 168685807,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561127137
    },
    {
        "content": "<p>I love the git data model. but much of its UI... ugh</p>",
        "id": 168685808,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127137
    },
    {
        "content": "<p>hehehe</p>",
        "id": 168685928,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561127229
    },
    {
        "content": "<p>Well I'd like to discuss some errors with you</p>",
        "id": 168685937,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561127241
    },
    {
        "content": "<p>do you remember that we are checking if <code>offset &lt;= alloc_size</code> during <code>int_to_ptr</code>?</p>",
        "id": 168685973,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561127275
    },
    {
        "content": "<p>What should be the appropriate error when the offset is larger than the size of the allocation?</p>",
        "id": 168686114,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561127365
    },
    {
        "content": "<p>that can't happen unless it's the last allocation</p>",
        "id": 168686296,
        "sender_full_name": "oli",
        "timestamp": 1561127515
    },
    {
        "content": "<p>and in that case it doesn't matter, because you'll just have an invalid pointer into that allocation and thus will get an OOB error when you try to access it</p>",
        "id": 168686387,
        "sender_full_name": "oli",
        "timestamp": 1561127550
    },
    {
        "content": "<p>oh</p>",
        "id": 168686424,
        "sender_full_name": "oli",
        "timestamp": 1561127573
    },
    {
        "content": "<p>but that would be problematic if someone comes along later and creates a <code>ptr_to_int</code> that actually overlaps that region</p>",
        "id": 168686470,
        "sender_full_name": "oli",
        "timestamp": 1561127608
    },
    {
        "content": "<p>so the pointer would suddenly be legal</p>",
        "id": 168686481,
        "sender_full_name": "oli",
        "timestamp": 1561127615
    },
    {
        "content": "<p>I was thinking something like <code>PointerOutOfBounds</code> or <code>InvalidMemoryAccess</code></p>",
        "id": 168686655,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561127737
    },
    {
        "content": "<p>maybe just <code>Unimplemented</code> for now, I'm not sure about the expected semantics</p>",
        "id": 168686773,
        "sender_full_name": "oli",
        "timestamp": 1561127804
    },
    {
        "content": "<p>sounds like a new error to me</p>",
        "id": 168686813,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127828
    },
    {
        "content": "<p>invalid int-to-ptr-cast</p>",
        "id": 168686823,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127836
    },
    {
        "content": "<p>the question is whether it should be an error?</p>",
        "id": 168686834,
        "sender_full_name": "oli",
        "timestamp": 1561127843
    },
    {
        "content": "<p>for an address that was never returned by a ptr-to-int-cast</p>",
        "id": 168686835,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127844
    },
    {
        "content": "<p>yes!</p>",
        "id": 168686839,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127847
    },
    {
        "content": "<p>hm</p>",
        "id": 168686842,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127849
    },
    {
        "content": "<p>ah :D</p>",
        "id": 168686843,
        "sender_full_name": "oli",
        "timestamp": 1561127849
    },
    {
        "content": "<p>yes</p>",
        "id": 168686851,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127855
    },
    {
        "content": "<p>ok, well then, new error it is</p>",
        "id": 168686862,
        "sender_full_name": "oli",
        "timestamp": 1561127862
    },
    {
        "content": "<p>we only do <code>force_ptr</code> if we really need a ptr</p>",
        "id": 168686863,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127863
    },
    {
        "content": "<p>so if we cant do the conversion, we have a dangling pointer</p>",
        "id": 168686879,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127877
    },
    {
        "content": "<p>right</p>",
        "id": 168686880,
        "sender_full_name": "oli",
        "timestamp": 1561127877
    },
    {
        "content": "<p>and it should be errored as such</p>",
        "id": 168686896,
        "sender_full_name": "RalfJ",
        "timestamp": 1561127882
    },
    {
        "content": "<p>That would apply for every error in both methods?</p>",
        "id": 168687089,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561128008
    },
    {
        "content": "<p>because in <code>int_to_ptr</code> there is also the problem when the index returned by  the binary search is zero. Meaning that there is no address smaller than the current integer</p>",
        "id": 168687181,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561128102
    },
    {
        "content": "<p>what other errors do you have?</p>",
        "id": 168687183,
        "sender_full_name": "oli",
        "timestamp": 1561128103
    },
    {
        "content": "<p>yes, that's the same error as being OOB of the last allocation</p>",
        "id": 168687200,
        "sender_full_name": "oli",
        "timestamp": 1561128121
    },
    {
        "content": "<p>the last error is in <code>ptr_to_int</code> when adding the <code>alloc_id</code> to our <code>vec</code> if there is a <code>base_address</code> with the same <code>alloc_id</code> already stored</p>",
        "id": 168687330,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561128216
    },
    {
        "content": "<p>I believe that one is not an error, because it would happen everytime you call <code>ptr_to_int</code> with the same int I think</p>",
        "id": 168687411,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561128286
    },
    {
        "content": "<p>you should only do the allocation thing in <code>ptr_to_int</code> if there is no base address stored in the <code>AllocExtra</code> yet</p>",
        "id": 168687443,
        "sender_full_name": "RalfJ",
        "timestamp": 1561128322
    },
    {
        "content": "<p>otherwise just re-use what is already in the table(s)</p>",
        "id": 168687458,
        "sender_full_name": "RalfJ",
        "timestamp": 1561128332
    },
    {
        "content": "<blockquote>\n<p>you should only do the allocation thing in <code>ptr_to_int</code> if there is no base address stored in the <code>AllocExtra</code> yet</p>\n</blockquote>\n<p>That could happen? I'm initializing the <code>AllocExtra</code> with a base address</p>",
        "id": 168687563,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561128410
    },
    {
        "content": "<p>hold on</p>",
        "id": 168687589,
        "sender_full_name": "oli",
        "timestamp": 1561128428
    },
    {
        "content": "<p>o.o</p>",
        "id": 168687599,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561128439
    },
    {
        "content": "<p>can you push your PR :D I think we're diverging our mental models</p>",
        "id": 168687609,
        "sender_full_name": "oli",
        "timestamp": 1561128448
    },
    {
        "content": "<p>not by much, but by a relevant point</p>",
        "id": 168687615,
        "sender_full_name": "oli",
        "timestamp": 1561128457
    },
    {
        "content": "<p>we probably are, I'm going to let the errors as unimplemented and PR then</p>",
        "id": 168687688,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561128500
    },
    {
        "content": "<p>I assumed there was an <code>Cell&lt;Option&lt;u64&gt;&gt;</code> in the <code>AllocExtra</code></p>",
        "id": 168687694,
        "sender_full_name": "oli",
        "timestamp": 1561128507
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/miri/pull/779\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/779\">https://github.com/rust-lang/miri/pull/779</a></p>",
        "id": 168688067,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561128819
    },
    {
        "content": "<blockquote>\n<p>I assumed there was an <code>Cell&lt;Option&lt;u64&gt;&gt;</code> in the <code>AllocExtra</code></p>\n</blockquote>\n<p>I thought about <code>Option&lt;u64&gt;</code> but then believed it was better to set the value during <code>Stacks::new</code></p>",
        "id": 168688260,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561128940
    },
    {
        "content": "<p>What should be the difference here?</p>",
        "id": 168688541,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561129184
    },
    {
        "content": "<p>it should not be done eagerly</p>",
        "id": 168688620,
        "sender_full_name": "oli",
        "timestamp": 1561129209
    },
    {
        "content": "<p>you are doing it eagerly now</p>",
        "id": 168688640,
        "sender_full_name": "oli",
        "timestamp": 1561129222
    },
    {
        "content": "<p>The idea was to do it in <code>ptr_to_int</code></p>",
        "id": 168688667,
        "sender_full_name": "oli",
        "timestamp": 1561129239
    },
    {
        "content": "<p>Oh of course, I remember <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> 's insistence on the lazy part</p>",
        "id": 168688671,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561129241
    },
    {
        "content": "<p>going to fix it</p>",
        "id": 168688680,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561129246
    },
    {
        "content": "<p>hehe</p>",
        "id": 168688681,
        "sender_full_name": "oli",
        "timestamp": 1561129246
    },
    {
        "content": "<p>wait a sec</p>",
        "id": 168688683,
        "sender_full_name": "oli",
        "timestamp": 1561129250
    },
    {
        "content": "<p>you also kinda infected stacked borrows</p>",
        "id": 168688692,
        "sender_full_name": "oli",
        "timestamp": 1561129258
    },
    {
        "content": "<p>I have to read the source for a sec</p>",
        "id": 168688702,
        "sender_full_name": "oli",
        "timestamp": 1561129265
    },
    {
        "content": "<p>I haven't touched miri in too long</p>",
        "id": 168688708,
        "sender_full_name": "oli",
        "timestamp": 1561129270
    },
    {
        "content": "<p>well I had to, but after removing the initalization of the base address that should be reverted</p>",
        "id": 168688725,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561129281
    },
    {
        "content": "<p>I think you should do what you did for the <code>MemoryState</code> and create a new struct that holds what you need and whatever stacked borrows need</p>",
        "id": 168688827,
        "sender_full_name": "oli",
        "timestamp": 1561129354
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 168688850,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561129379
    },
    {
        "content": "<p>you can make <a href=\"https://github.com/rust-lang/miri/blob/285e9a65cd61520a4da1f912d1b41e523cd3a5e4/src/lib.rs#L390\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/blob/285e9a65cd61520a4da1f912d1b41e523cd3a5e4/src/lib.rs#L390\">https://github.com/rust-lang/miri/blob/285e9a65cd61520a4da1f912d1b41e523cd3a5e4/src/lib.rs#L390</a> point to other types</p>",
        "id": 168688872,
        "sender_full_name": "oli",
        "timestamp": 1561129396
    },
    {
        "content": "<p>like adding an struct that contains <code>Stacks</code> and the <code>base_addr</code>?</p>",
        "id": 168688882,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561129403
    },
    {
        "content": "<p>yes</p>",
        "id": 168688887,
        "sender_full_name": "oli",
        "timestamp": 1561129408
    },
    {
        "content": "<p>Will do it then</p>",
        "id": 168688895,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561129418
    },
    {
        "content": "<p>Did you see the <code>Default</code> implementation inside <code>intptrcast.rs</code>?</p>",
        "id": 168689376,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561129787
    },
    {
        "content": "<p>I'm forcing the <code>u64</code> to be <code>2.pow(16)</code> there, should I also use <code>Option&lt;u64&gt;</code> and do that somewhere else?</p>",
        "id": 168689461,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561129834
    },
    {
        "content": "<p>no that's perfectly alright</p>",
        "id": 168689507,
        "sender_full_name": "oli",
        "timestamp": 1561129900
    },
    {
        "content": "<p>that's the starting value</p>",
        "id": 168689509,
        "sender_full_name": "oli",
        "timestamp": 1561129904
    },
    {
        "content": "<p>ok</p>",
        "id": 168689515,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561129912
    },
    {
        "content": "<p>the reason I wanted <code>Cell&lt;Option&lt;u64&gt;&gt;</code> inside <code>Allocation</code>s is that we can start with <code>None</code> and only fill it in in <code>ptr_to_int</code></p>",
        "id": 168689572,
        "sender_full_name": "oli",
        "timestamp": 1561129927
    },
    {
        "content": "<p>so when you <code>ptr_to_int</code> an <code>Allocation</code> with <code>None</code> in its <code>base_address</code> field, you do the logic you did eagerly in <code>Stacks</code></p>",
        "id": 168689595,
        "sender_full_name": "oli",
        "timestamp": 1561129965
    },
    {
        "content": "<p>Ja, but I was thinking about <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> 's comments about changing the starting value randomly</p>",
        "id": 168689640,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561130014
    },
    {
        "content": "<p>oh I remembered something else</p>",
        "id": 168689655,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561130033
    },
    {
        "content": "<p>how can I access the random seed from <code>Memory</code>? because <code>int_to_ptr</code> and <code>ptr_to_int</code> are not instance methods</p>",
        "id": 168689718,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561130066
    },
    {
        "content": "<p>oh, the starting value won't randomly change, it will be initialized with a random value once when <code>ptr_to_int</code> needs to set that value</p>",
        "id": 168689851,
        "sender_full_name": "oli",
        "timestamp": 1561130168
    },
    {
        "content": "<p>oh, we may have to move the random seed to the <code>MemoryExtra</code> struct that already contains <code>Stacks</code> and <code>base_addr</code></p>",
        "id": 168689885,
        "sender_full_name": "oli",
        "timestamp": 1561130207
    },
    {
        "content": "<p>(also maybe name <code>base_addr</code> as <code>next_base_addr</code> to reduce confusion with the <code>base_addr</code> field in <code>AllocExtra</code>)</p>",
        "id": 168689910,
        "sender_full_name": "oli",
        "timestamp": 1561130234
    },
    {
        "content": "<p>maybe i should <code>derive</code> the <code>Default</code> and just set the <code>2.pow(16)</code> value inside the <code>intptrcast</code> methods when needed?<br>\nEdit: nah forget it</p>",
        "id": 168689918,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561130243
    },
    {
        "content": "<p>no, the custom <code>Default</code> impl is a good idea</p>",
        "id": 168689938,
        "sender_full_name": "oli",
        "timestamp": 1561130267
    },
    {
        "content": "<p>well going to do all these small changes</p>",
        "id": 168689999,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561130289
    },
    {
        "content": "<p>yea sorry about not being really available the last few days</p>",
        "id": 168690030,
        "sender_full_name": "oli",
        "timestamp": 1561130319
    },
    {
        "content": "<blockquote>\n<p>oh, we may have to move the random seed to the <code>MemoryExtra</code> struct that already contains <code>Stacks</code> and <code>base_addr</code></p>\n</blockquote>\n<p>wait wait</p>",
        "id": 168690039,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561130332
    },
    {
        "content": "<p><code>Stacks</code> and <code>base_addr</code> would be in the new <code>AllocExtra</code> and those are allocation specific, do you mean <code>MemoryState</code> in <code>intptrcast.rs</code>?</p>",
        "id": 168690086,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561130388
    },
    {
        "content": "<p>oh</p>",
        "id": 168690092,
        "sender_full_name": "oli",
        "timestamp": 1561130394
    },
    {
        "content": "<p>wait</p>",
        "id": 168690094,
        "sender_full_name": "oli",
        "timestamp": 1561130396
    },
    {
        "content": "<p>sorry yes, <code>MemoryState</code></p>",
        "id": 168690144,
        "sender_full_name": "oli",
        "timestamp": 1561130403
    },
    {
        "content": "<p>I'm happy to see that small details :D</p>",
        "id": 168690170,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561130421
    },
    {
        "content": "<p>yes, four eyes are great</p>",
        "id": 168690219,
        "sender_full_name": "oli",
        "timestamp": 1561130483
    },
    {
        "content": "<p>Well it means that I'm starting to understand some parts better</p>",
        "id": 168690287,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561130526
    },
    {
        "content": "<p>I finished disinfencting <code>stacked_borrows.rs</code> :P</p>",
        "id": 168692193,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561132016
    },
    {
        "content": "<blockquote>\n<p>I finished disinfencting <code>stacked_borrows.rs</code> :P</p>\n</blockquote>\n<p>Thanks :D</p>",
        "id": 168698594,
        "sender_full_name": "RalfJ",
        "timestamp": 1561136964
    },
    {
        "content": "<p>But now we have to move the AllocationExtra implementation outside <a href=\"http://stacked_borrows.rs\" target=\"_blank\" title=\"http://stacked_borrows.rs\">stacked_borrows.rs</a></p>",
        "id": 168699311,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561137674
    },
    {
        "content": "<p>yes, both <code>MemoryExtra</code> and <code>AllocationExtra</code> should be structs with two fields -- one from stacked_borrows and one from intptrcast.</p>",
        "id": 168699574,
        "sender_full_name": "RalfJ",
        "timestamp": 1561137902
    },
    {
        "content": "<p>Yep will do that</p>",
        "id": 168699957,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561138238
    },
    {
        "content": "<p>Ok I did the changes</p>",
        "id": 168707602,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561143972
    },
    {
        "content": "<p>I'm not completely sold on the idea of using the Dangling Pointer error but  I changed the tests accordingly</p>",
        "id": 168707643,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561144010
    },
    {
        "content": "<p>what error would you have used?</p>",
        "id": 168707669,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144032
    },
    {
        "content": "<p>and do you know what kind of code can trigger this error?</p>",
        "id": 168707685,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144044
    },
    {
        "content": "<p>there are several cases</p>",
        "id": 168707729,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561144070
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">null</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR dangling pointer was dereferenced</span>\n</pre></div>",
        "id": 168707801,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561144095
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">g</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR dangling pointer was dereferenced</span>\n</pre></div>",
        "id": 168707811,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561144104
    },
    {
        "content": "<p>I mean probably for the first we could add an special case when the ptr is zero as in the default machine impl</p>",
        "id": 168707861,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561144129
    },
    {
        "content": "<p>but the second one, i don't know, that is not even a proper dangling pointer, it was created by doing an \"invalid\" cast</p>",
        "id": 168707877,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561144144
    },
    {
        "content": "<p>But yeah those are rough edges at the end, we can fix that next week</p>",
        "id": 168708002,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561144244
    },
    {
        "content": "<p>I'm more interested in knowing why </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">&amp;</span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>fails</p>",
        "id": 168708122,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561144335
    },
    {
        "content": "<p>shouldn't that be accepted by <code>miri</code> now?</p>",
        "id": 168708150,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561144356
    },
    {
        "content": "<blockquote>\n<p>but the second one, i don't know, that is not even a proper dangling pointer, it was created by doing an \"invalid\" cast</p>\n</blockquote>\n<p>\"proper dangling pointer\"? you mean it's too dangling to be put into one category with the other dangling pointers? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 168708526,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144617
    },
    {
        "content": "<p>a pointer is dangling if it doesnt point to valid memory. whether it was obtained by casting from a pad int, out-of-bounds arithmetic or use-after-free doesn't matter.</p>",
        "id": 168708564,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144647
    },
    {
        "content": "<blockquote>\n<p>shouldn't that be accepted by <code>miri</code> now?</p>\n</blockquote>\n<p>no, we specifically did not use <code>force_bits</code> for the casting stuff</p>",
        "id": 168708579,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144665
    },
    {
        "content": "<p>because that code is messy</p>",
        "id": 168708583,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144670
    },
    {
        "content": "<blockquote>\n<p>\"proper dangling pointer\"? you mean it's too dangling to be put into one category with the other dangling pointers? <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n</blockquote>\n<p>Well meine Wenigkeit believes that dangling pointers are created when you free memory and leave pointers to that memory segment.</p>\n<p>So when I saw the \"dangling pointer\" error it was more like: I'm actually creating a wild pointer than a dangling one</p>",
        "id": 168708714,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561144746
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>shouldn't that be accepted by <code>miri</code> now?</p>\n</blockquote>\n<p>no, we specifically did not use <code>force_bits</code> for the casting stuff</p>\n</blockquote>\n<p>Should we add anymore tests to check that the <code>force_*</code> methods are working as expected?</p>",
        "id": 168708756,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561144796
    },
    {
        "content": "<p>so something like <code>Box::into_raw(Box::new(0u32)).wrapping_offset(8)</code> is also not \"dangling\"?</p>",
        "id": 168708894,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144893
    },
    {
        "content": "<blockquote>\n<p>Should we add anymore tests to check that the force_* methods are working as expected?</p>\n</blockquote>\n<p>well you added <code>force_bits</code> to slice indexing</p>",
        "id": 168708977,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144935
    },
    {
        "content": "<p>so a weird thing you could so is to cast a ptr to an int and use that as a slice index</p>",
        "id": 168709001,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144954
    },
    {
        "content": "<p>but uh there'll be a bounds check first</p>",
        "id": 168709010,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144963
    },
    {
        "content": "<p>ah but you could make it a huge ZST slice :D</p>",
        "id": 168709041,
        "sender_full_name": "RalfJ",
        "timestamp": 1561144991
    },
    {
        "content": "<p>also you could add in miri some <code>force_bits</code> to <code>ptr_op</code>, then stuff like <code>(&amp;mut 4 as *mut _ as usize) * 2</code> should work</p>",
        "id": 168709098,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145035
    },
    {
        "content": "<blockquote>\n<p>so something like <code>Box::into_raw(Box::new(0u32)).wrapping_offset(8)</code> is also not \"dangling\"?</p>\n</blockquote>\n<p>Well I would say that it isn't, because it was not a valid pointer that didn't get invalidated after freeing memory, just an invalid pointer created from a valid one. But again I don't have any proper arguments to say that something is or it is not dangling</p>",
        "id": 168709144,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145044
    },
    {
        "content": "<p>you are just using a different definition for the same term, it's okay</p>",
        "id": 168709186,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145081
    },
    {
        "content": "<p>I can't say you are wrong</p>",
        "id": 168709191,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145085
    },
    {
        "content": "<p>but in Miri we have used \"dangling\" to mean \"pointer that cannot be dereferenced\"</p>",
        "id": 168709201,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145096
    },
    {
        "content": "<p>so 42 is certainly dangling</p>",
        "id": 168709204,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145100
    },
    {
        "content": "<p>oh great</p>",
        "id": 168709210,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145104
    },
    {
        "content": "<p>and null is dangling too i suppose</p>",
        "id": 168709213,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145112
    },
    {
        "content": "<p>NULL always got a special error</p>",
        "id": 168709220,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145119
    },
    {
        "content": "<p>don't ask me why^^</p>",
        "id": 168709222,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145121
    },
    {
        "content": "<p>Should we keep that special error?</p>",
        "id": 168709237,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145133
    },
    {
        "content": "<p>maybe keep that for now</p>",
        "id": 168709242,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145136
    },
    {
        "content": "<p>I have an error refactoring on my todo list anyway</p>",
        "id": 168709249,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145143
    },
    {
        "content": "<p>then it'll go :P</p>",
        "id": 168709256,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145146
    },
    {
        "content": "<p>ok I'll change the method to return the NullPtr error instead when the int is zero</p>",
        "id": 168709306,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145164
    },
    {
        "content": "<p>i'm still a little bit confused about what should be a good test here</p>",
        "id": 168709365,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145218
    },
    {
        "content": "<p>I think we already have some dangling ptr tests, including casting a random integer to a ptr and using it</p>",
        "id": 168709428,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145275
    },
    {
        "content": "<p>you could duplicate those to make sure they still error with <code>-Zmiri-seed=...</code> (i.e., with intrptrcast enabled)</p>",
        "id": 168709506,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145304
    },
    {
        "content": "<p>oh I forgot about the seed, I have to fix that</p>",
        "id": 168709534,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145330
    },
    {
        "content": "<p>:D</p>",
        "id": 168709565,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145359
    },
    {
        "content": "<p>now I'm just letting intptrcast enabled by default hahaha</p>",
        "id": 168709579,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145376
    },
    {
        "content": "<p>not sure if there is much to do in terms of compile-fail tests otherwise TBH</p>",
        "id": 168709587,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145387
    },
    {
        "content": "<p>where are the non-determinist tests in miri?</p>",
        "id": 168709666,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145432
    },
    {
        "content": "<p>well I think we might even want to do that at some point, both to kill some awful code and to avoid having to duplicate our entire test suite... but not yet</p>",
        "id": 168709672,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145437
    },
    {
        "content": "<p>there aren't many^^</p>",
        "id": 168709681,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145444
    },
    {
        "content": "<p>or how do you handle that?</p>",
        "id": 168709684,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145446
    },
    {
        "content": "<p>handle?</p>",
        "id": 168709691,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145451
    },
    {
        "content": "<p><code>// compile-flags: -Zmiri-seed=4242</code></p>",
        "id": 168709710,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145468
    },
    {
        "content": "<p>ohhh ok</p>",
        "id": 168709715,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145477
    },
    {
        "content": "<p>didn't I already tell you that? anyway^^</p>",
        "id": 168709724,
        "sender_full_name": "RalfJ",
        "timestamp": 1561145486
    },
    {
        "content": "<p>maybe, I have the memory of a fly</p>",
        "id": 168709741,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561145501
    },
    {
        "content": "<p>How can I make the <code>seed</code> to get all the way down to <code>MemoryExtra</code>?</p>",
        "id": 168710577,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561146210
    },
    {
        "content": "<p>oh i know how :P</p>",
        "id": 168710652,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561146251
    },
    {
        "content": "<p>nvm</p>",
        "id": 168710653,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561146254
    },
    {
        "content": "<blockquote>\n<p>I think we already have some dangling ptr tests, including casting a random integer to a ptr and using it<br>\nyou could duplicate those to make sure they still error with -Zmiri-seed=... (i.e., with intrptrcast enabled)</p>\n</blockquote>\n<p>what about:<br>\n- <code>cast_int_to_fn_ptr.rs</code><br>\n-  <code>dangling_pointer_deref.rs</code><br>\n- <code>null_pointer_deref.rs</code><br>\nare they good candidates?</p>",
        "id": 168711874,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561147338
    },
    {
        "content": "<p>the fn ptr thing is weird, but sure^^ reminds me that we should have run-pass tests that roudntrip a fn ptr through an int</p>",
        "id": 168713898,
        "sender_full_name": "RalfJ",
        "timestamp": 1561148990
    },
    {
        "content": "<p>Should I add other similar tests? like the null pointer write? or just those are fine?</p>",
        "id": 168713988,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561149020
    },
    {
        "content": "<p>dangling_pointer_deref looks good, though you'll have to extend it such that <code>ptr_to_int</code> even gets called</p>",
        "id": 168713994,
        "sender_full_name": "RalfJ",
        "timestamp": 1561149025
    },
    {
        "content": "<p><code>wild_pointer_deref.rs</code> was the one I originally thought of</p>",
        "id": 168714071,
        "sender_full_name": "RalfJ",
        "timestamp": 1561149092
    },
    {
        "content": "<p>oh ok I'll do wild pointer then</p>",
        "id": 168714172,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561149170
    },
    {
        "content": "<p>other than that, I think we are ready to go</p>",
        "id": 168714178,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561149178
    },
    {
        "content": "<p>You can do the as usize test by using transmute instead</p>",
        "id": 168715637,
        "sender_full_name": "oli",
        "timestamp": 1561150320
    },
    {
        "content": "<p>That way you can even assert a specific int address for an address of a local</p>",
        "id": 168715723,
        "sender_full_name": "oli",
        "timestamp": 1561150361
    },
    {
        "content": "<p>this one <code>&amp;42 as *const i32 as usize as u8 as usize;</code>?</p>",
        "id": 168715733,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561150379
    },
    {
        "content": "<p>or which one do you mean?</p>",
        "id": 168715837,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561150455
    },
    {
        "content": "<p>I guess the first cast to usize</p>",
        "id": 168716577,
        "sender_full_name": "oli",
        "timestamp": 1561151109
    },
    {
        "content": "<p>I think that would require some more patches in <code>allocation.rs</code></p>",
        "id": 168716593,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151137
    },
    {
        "content": "<p>Then maybe do *2 or sth yo trigger the transform</p>",
        "id": 168716599,
        "sender_full_name": "oli",
        "timestamp": 1561151147
    },
    {
        "content": "<p>to allow reading parts of the bytes of an allocation</p>",
        "id": 168716605,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151154
    },
    {
        "content": "<p>yeah <code>* 2</code> should work. but not transmute.</p>",
        "id": 168716648,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151168
    },
    {
        "content": "<blockquote>\n<p>yeah <code>* 2</code> should work. but not transmute.</p>\n</blockquote>\n<p>I'm confused, where is the <code>*2</code> supposed to go?</p>",
        "id": 168716690,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151225
    },
    {
        "content": "<p><code>(&amp;32 as *const _ as usize) * 2</code></p>",
        "id": 168716881,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151392
    },
    {
        "content": "<p>do you understand why that is needed?</p>",
        "id": 168716886,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151397
    },
    {
        "content": "<p>not really</p>",
        "id": 168716962,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151427
    },
    {
        "content": "<p>remember the thing about int/ptr <em>values</em> vs <em>types</em></p>",
        "id": 168716967,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151441
    },
    {
        "content": "<p>yep</p>",
        "id": 168716971,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151448
    },
    {
        "content": "<p><code>(&amp;32 as *const _ as usize)</code> is a pointer value at int type</p>",
        "id": 168716979,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151459
    },
    {
        "content": "<p>the casting code doesn't to <code>ptr_to_int</code></p>",
        "id": 168716991,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151471
    },
    {
        "content": "<p>whether it should I am not sure</p>",
        "id": 168716998,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151487
    },
    {
        "content": "<p>but even if it did, <code>mem::transmute::&lt;usize, _&gt;(&amp;32)</code> would certainly not call it</p>",
        "id": 168717021,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151511
    },
    {
        "content": "<p>and thus we anyway have to be able to handle ptr values at int type</p>",
        "id": 168717067,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151523
    },
    {
        "content": "<p>so by doing <code>* 2</code> we end up in the <code>bin_op</code> code in <code>operand.rs</code>, and because one argument has ptr value, we dispatch to <code>ptr_op</code> in the machine</p>",
        "id": 168717089,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151554
    },
    {
        "content": "<p>and that's a good place for Miri to do <code>force_bits</code></p>",
        "id": 168717100,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151562
    },
    {
        "content": "<p>ohhh</p>",
        "id": 168717115,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151578
    },
    {
        "content": "<p>and <em>then</em> we finally run <code>ptr_to_int</code></p>",
        "id": 168717122,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151583
    },
    {
        "content": "<p>ok I understand</p>",
        "id": 168717128,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151587
    },
    {
        "content": "<p>buuuut even then</p>",
        "id": 168717137,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151593
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>fails with: attempted to do invalid arithmetic on pointers that would leak base addresses,</p>",
        "id": 168717175,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151641
    },
    {
        "content": "<p>probably because you didn't add the <code>force_bits</code> in Miri's implementation of <code>ptr_op</code>?</p>",
        "id": 168717228,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151663
    },
    {
        "content": "<p>should I??</p>",
        "id": 168717243,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151675
    },
    {
        "content": "<p>yes :)</p>",
        "id": 168717251,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151682
    },
    {
        "content": "<p>oh ok thats a new one</p>",
        "id": 168717259,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151689
    },
    {
        "content": "<p>basically right here: <a href=\"https://github.com/rust-lang/miri/blob/beba8c4d8a100824867c1ec36dbaa817056e5547/src/operator.rs#L45\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/blob/beba8c4d8a100824867c1ec36dbaa817056e5547/src/operator.rs#L45\">https://github.com/rust-lang/miri/blob/beba8c4d8a100824867c1ec36dbaa817056e5547/src/operator.rs#L45</a></p>",
        "id": 168717275,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151702
    },
    {
        "content": "<p>we talked about this a while ago on he rustc side, and then agreed to do this on the miri side</p>",
        "id": 168717296,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151715
    },
    {
        "content": "<p>ohhh yeah now I remember the conversation</p>",
        "id": 168717314,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151735
    },
    {
        "content": "<p>what that code should do is, check if we run with intrptrcast, and if yes, <em>if the operator is not <code>Offset</code></em>, call <code>force_bits</code> on both operands and dispatch back to rustc</p>",
        "id": 168717322,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151746
    },
    {
        "content": "<p>all operators except for <code>Offset</code> should be implemented by looking at the integer values.<br>\nat least that's my position. this includes pointer comparisons so <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> might disagree. ;)</p>",
        "id": 168717422,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151822
    },
    {
        "content": "<p>it's certainly a reasonable start though, we can always tweak later</p>",
        "id": 168717472,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151871
    },
    {
        "content": "<p>anyway it's getting late here, I'm out. good night!</p>",
        "id": 168717554,
        "sender_full_name": "RalfJ",
        "timestamp": 1561151904
    },
    {
        "content": "<p>Ok Ralf, thanks for the explanation</p>",
        "id": 168717571,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151935
    },
    {
        "content": "<p>it is clear for me except on the \"dispatch back to rustc\", to which method?</p>",
        "id": 168717600,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561151966
    },
    {
        "content": "<p><code>binop</code>-something</p>",
        "id": 168717702,
        "sender_full_name": "RalfJ",
        "timestamp": 1561152082
    },
    {
        "content": "<p>ok</p>",
        "id": 168717705,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561152089
    },
    {
        "content": "<p>they are all in <code>operand.rs</code></p>",
        "id": 168717707,
        "sender_full_name": "RalfJ",
        "timestamp": 1561152090
    },
    {
        "content": "<p>eh</p>",
        "id": 168717708,
        "sender_full_name": "RalfJ",
        "timestamp": 1561152094
    },
    {
        "content": "<p><code>operator.rs</code></p>",
        "id": 168717709,
        "sender_full_name": "RalfJ",
        "timestamp": 1561152096
    },
    {
        "content": "<p>I tried to dispatch to <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_mir/interpret/operator.rs.html#108\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_mir/interpret/operator.rs.html#108\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_mir/interpret/operator.rs.html#108</a></p>",
        "id": 168718217,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561152600
    },
    {
        "content": "<p>but it is private D:</p>",
        "id": 168718338,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561152708
    },
    {
        "content": "<p>try <code>binary_op</code></p>",
        "id": 168742902,
        "sender_full_name": "RalfJ",
        "timestamp": 1561192977
    },
    {
        "content": "<p>or should we make it public? not sure what I prefer</p>",
        "id": 168742910,
        "sender_full_name": "RalfJ",
        "timestamp": 1561193010
    },
    {
        "content": "<p>What layout should I use to build the ImmTy?</p>",
        "id": 168750508,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561208489
    },
    {
        "content": "<blockquote>\n<p>What layout should I use to build the ImmTy?</p>\n</blockquote>\n<p>Solved :P</p>",
        "id": 168753013,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561213460
    },
    {
        "content": "<p>I broke the hashmap test, I'm trying to see why</p>",
        "id": 168753151,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561213764
    },
    {
        "content": "<p>Apparently it only happens in local, CI is fine</p>",
        "id": 168763225,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561233472
    },
    {
        "content": "<p>Hi Oliver, Ralf</p>",
        "id": 168850299,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561383771
    },
    {
        "content": "<p>aloha</p>",
        "id": 168850325,
        "sender_full_name": "oli",
        "timestamp": 1561383791
    },
    {
        "content": "<p>I'm going to do the corrections Oliver stated on GH</p>",
        "id": 168850329,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561383792
    },
    {
        "content": "<p>After that is there something else to be done?</p>",
        "id": 168850344,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561383805
    },
    {
        "content": "<p>I think it's ready implementation wise, so we can merge after that</p>",
        "id": 168850420,
        "sender_full_name": "oli",
        "timestamp": 1561383843
    },
    {
        "content": "<p>Great!</p>",
        "id": 168850467,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561383878
    },
    {
        "content": "<p>You can notice that something is ready if the reviewer only has naming and other convention complaints left to give off ;)</p>",
        "id": 168850473,
        "sender_full_name": "oli",
        "timestamp": 1561383881
    },
    {
        "content": "<p>:P</p>",
        "id": 168850500,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561383893
    },
    {
        "content": "<p>I was thinking about the <code>push</code> vs <code>binary_search</code>. On one had it is nice to be completely sure that elements would be added in order and avoid the overhead of searching. On the other hand, modifications in the future could break this (although Ralf suggested that this is unlikely to change in the future)</p>",
        "id": 168850793,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561384121
    },
    {
        "content": "<p>I just think it's a lot of effort</p>",
        "id": 168854603,
        "sender_full_name": "oli",
        "timestamp": 1561386807
    },
    {
        "content": "<p>especially if the list grows</p>",
        "id": 168854620,
        "sender_full_name": "oli",
        "timestamp": 1561386825
    },
    {
        "content": "<p>I'll use <code>push</code> and do a comment</p>",
        "id": 168854715,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561386891
    },
    {
        "content": "<p>could you explain the page size <code>FIXME</code>?</p>",
        "id": 168854728,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561386903
    },
    {
        "content": "<p>the 2^16 is an arbitrary pick by me</p>",
        "id": 168854828,
        "sender_full_name": "oli",
        "timestamp": 1561386965
    },
    {
        "content": "<p>I think most operating systems use a single memory page</p>",
        "id": 168854845,
        "sender_full_name": "oli",
        "timestamp": 1561386980
    },
    {
        "content": "<p>So you want to initialize the <code>base_addr</code> in exactly the page size?</p>",
        "id": 168854862,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561387003
    },
    {
        "content": "<p>yea</p>",
        "id": 168854921,
        "sender_full_name": "oli",
        "timestamp": 1561387057
    },
    {
        "content": "<p>Why is that important?</p>",
        "id": 168854997,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561387102
    },
    {
        "content": "<p>I mean</p>",
        "id": 168855002,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561387108
    },
    {
        "content": "<p>oh it isn't very important, just represents the OS behaviour better</p>",
        "id": 168855021,
        "sender_full_name": "oli",
        "timestamp": 1561387126
    },
    {
        "content": "<p>I understand it is important to start with an address that in fact exists</p>",
        "id": 168855033,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561387133
    },
    {
        "content": "<p>oh ok</p>",
        "id": 168855035,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561387134
    },
    {
        "content": "<p>we're good to go</p>",
        "id": 168857277,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561388598
    },
    {
        "content": "<p>I just left you a bunch of comments :)</p>",
        "id": 168879166,
        "sender_full_name": "RalfJ",
        "timestamp": 1561405522
    },
    {
        "content": "<p>Yayyy</p>",
        "id": 168879325,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561405681
    },
    {
        "content": "<p>thank you Ralf</p>",
        "id": 168879371,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561405689
    },
    {
        "content": "<p>sorry it took me so long. wanted to do it yesterday but then I did a bike trip instead.^^</p>",
        "id": 168879389,
        "sender_full_name": "RalfJ",
        "timestamp": 1561405705
    },
    {
        "content": "<p>Don't worry, bike riding is rad :P</p>",
        "id": 168879410,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561405738
    },
    {
        "content": "<p>completely understandable</p>",
        "id": 168879421,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561405745
    },
    {
        "content": "<p>To initialize <code>MemoryExtra</code> with the <code>rng</code>, we would need to modify <code>InterpretCx</code> and <code>Memory</code> constructors to receive the <code>rng</code>. That seems to be to specific to be done there. Do you have any other route in mind?</p>",
        "id": 168879933,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561406142
    },
    {
        "content": "<p>seems like a TODO for later... what I think should happen is that the <code>InterpretCx</code> constructor takes the initial <code>MemoryExtra</code> as argument</p>",
        "id": 168880383,
        "sender_full_name": "RalfJ",
        "timestamp": 1561406424
    },
    {
        "content": "<p>sounds good, I'll do it later this week</p>",
        "id": 168880413,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561406450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  what kind of bounds do you mean? <a href=\"https://github.com/rust-lang/miri/pull/779/files/2861ceb2fa1acc2c642abd4f2efb96c713a47e29#r296879361\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/779/files/2861ceb2fa1acc2c642abd4f2efb96c713a47e29#r296879361\">https://github.com/rust-lang/miri/pull/779/files/2861ceb2fa1acc2c642abd4f2efb96c713a47e29#r296879361</a></p>",
        "id": 168881212,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561407117
    },
    {
        "content": "<p>oh this is the case where we have an exact hit so the offset is 0?</p>",
        "id": 168881288,
        "sender_full_name": "RalfJ",
        "timestamp": 1561407161
    },
    {
        "content": "<p>that <code>pos</code> is smaller than  the size of the array?</p>",
        "id": 168881290,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561407163
    },
    {
        "content": "<blockquote>\n<p>oh this is the case where we have an exact hit so the offset is 0?</p>\n</blockquote>\n<p>yes</p>",
        "id": 168881295,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561407170
    },
    {
        "content": "<p>then please add a comment saying so :)</p>",
        "id": 168881305,
        "sender_full_name": "RalfJ",
        "timestamp": 1561407173
    },
    {
        "content": "<blockquote>\n<p>we'll need to compute the next address here that is divisble by the alignment, but not by the next higher alignment.</p>\n</blockquote>\n<p>is the alignment <code>std::mem::align_of::&lt;usize&gt;()</code>?</p>",
        "id": 168933158,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561465615
    },
    {
        "content": "<p>The next immediate address that is aligned with <code>alignment</code> should be something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">global_state</span><span class=\"p\">.</span><span class=\"n\">next_base_addr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">global_state</span><span class=\"p\">.</span><span class=\"n\">next_base_addr</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">alignment</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>this should be exactly divisible by <code>alignment</code>. Is that enough?</p>",
        "id": 168934122,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561466422
    },
    {
        "content": "<p>Also, shouldn't be better to keep <code>next_base_addr</code> always aligned? I mean, instead of aligning when needed, shouldn't be better to align beforehand to keep <code>next_base_addr</code> alignment as an invariant?</p>",
        "id": 168934992,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561467128
    },
    {
        "content": "<p>isn't it <code>global_state.next_base_addr + alignment - global_state.next_base_addr % alignment</code> assuming <code>global_state.next_base_addr % alignment</code> isn't <code>0</code>?</p>",
        "id": 168936278,
        "sender_full_name": "oli",
        "timestamp": 1561468061
    },
    {
        "content": "<p>Oh yeah it is, my bad. Are my other assumptions correct?</p>",
        "id": 168938074,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561469353
    },
    {
        "content": "<p>Also I tried to reproduce your misalignment  but it fails at the assertion. I understood the assert should succeed</p>",
        "id": 168945596,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561474321
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"k\">u8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">6</span><span class=\"k\">u16</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>this one</p>",
        "id": 168945958,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561474545
    },
    {
        "content": "<blockquote>\n<p>Also, shouldn't be better to keep <code>next_base_addr</code> always aligned? I mean, instead of aligning when needed, shouldn't be better to align beforehand to keep <code>next_base_addr</code> alignment as an invariant?</p>\n</blockquote>\n<p>dis doesnt make sense, i just understood</p>",
        "id": 168949234,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561477007
    },
    {
        "content": "<blockquote>\n<p>is the alignment <code>std::mem::align_of::&lt;usize&gt;()</code>?</p>\n</blockquote>\n<p>i just discovered <code>alloc.align</code></p>",
        "id": 168949496,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561477219
    },
    {
        "content": "<p>The assert should fail, buy I think it's succeeding atm?</p>",
        "id": 168949947,
        "sender_full_name": "oli",
        "timestamp": 1561477593
    },
    {
        "content": "<p>it is failing at the moment</p>",
        "id": 168951026,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561478481
    },
    {
        "content": "<p>and after doing the alignment tweaks it also fails</p>",
        "id": 168951105,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561478523
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">align</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">base_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">global_state</span><span class=\"p\">.</span><span class=\"n\">next_base_addr</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// Align the address with the allocation</span>\n<span class=\"w\">                </span><span class=\"n\">base_addr</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">base_addr</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">global_state</span><span class=\"p\">.</span><span class=\"n\">next_base_addr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">base_addr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">alloc</span><span class=\"p\">.</span><span class=\"n\">extra</span><span class=\"p\">.</span><span class=\"n\">intptrcast</span><span class=\"p\">.</span><span class=\"n\">base_addr</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">base_addr</span><span class=\"p\">));</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">elem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">base_addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">alloc_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"c1\">// Given that `next_base_addr` increases in each allocation, pushing the</span>\n<span class=\"w\">                </span><span class=\"c1\">// corresponding tuple keeps `int_to_ptr_map` sorted</span>\n<span class=\"w\">                </span><span class=\"n\">global_state</span><span class=\"p\">.</span><span class=\"n\">int_to_ptr_map</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"n\">base_addr</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>these are the changes</p>",
        "id": 168951135,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561478554
    },
    {
        "content": "<p>I'd like to have a test to avoid breaking the alignment like the one you suggested but i'm not sure why it does not break without fixing the alignment.</p>",
        "id": 168951292,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561478674
    },
    {
        "content": "<p>please factor that \"rounding up the integer to the next multiple\" into a separate method, for readability</p>",
        "id": 168952021,
        "sender_full_name": "RalfJ",
        "timestamp": 1561479186
    },
    {
        "content": "<p>I'm surprised libcore doesn't already have that?</p>",
        "id": 168952026,
        "sender_full_name": "RalfJ",
        "timestamp": 1561479193
    },
    {
        "content": "<p>maybe it does and I haven't discovered it yet :P</p>",
        "id": 168952034,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561479209
    },
    {
        "content": "<p>can't find one either though^^</p>",
        "id": 168952151,
        "sender_full_name": "RalfJ",
        "timestamp": 1561479288
    },
    {
        "content": "<p>Yea, there's only <code>next_power_of_2</code> or sth like that</p>",
        "id": 168952204,
        "sender_full_name": "oli",
        "timestamp": 1561479334
    },
    {
        "content": "<p>Why is it failing atm. ..</p>",
        "id": 168952283,
        "sender_full_name": "oli",
        "timestamp": 1561479374
    },
    {
        "content": "<p>Oh maybe there are preceding allocations that do ptr to iny</p>",
        "id": 168952305,
        "sender_full_name": "oli",
        "timestamp": 1561479401
    },
    {
        "content": "<p>Did you run with the seed flag? And it's the assert that fails?</p>",
        "id": 168952340,
        "sender_full_name": "oli",
        "timestamp": 1561479432
    },
    {
        "content": "<p>Try doing the same assert for the first pointer</p>",
        "id": 168952375,
        "sender_full_name": "oli",
        "timestamp": 1561479462
    },
    {
        "content": "<p>So on <code>x</code></p>",
        "id": 168952386,
        "sender_full_name": "oli",
        "timestamp": 1561479475
    },
    {
        "content": "<blockquote>\n<p>Did you run with the seed flag? And it's the assert that fails?</p>\n</blockquote>\n<p>yes</p>",
        "id": 168952643,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561479643
    },
    {
        "content": "<blockquote>\n<p>Try doing the same assert for the first pointer</p>\n</blockquote>\n<p>Loading <span aria-label=\"clock\" class=\"emoji emoji-1f557\" role=\"img\" title=\"clock\">:clock:</span></p>",
        "id": 168952716,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561479707
    },
    {
        "content": "<blockquote>\n<p>please factor that \"rounding up the integer to the next multiple\" into a separate method, for readability</p>\n</blockquote>\n<p>Done :D</p>",
        "id": 168952822,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561479791
    },
    {
        "content": "<p><code>assert!(x % 2 == 1);</code> also fails with and without doing the alignment</p>",
        "id": 168953120,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561480016
    },
    {
        "content": "<p>Other than deciding what to do with the alignment tests we are ready to go</p>",
        "id": 168972744,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561493532
    },
    {
        "content": "<p>I have no clue what's going on</p>",
        "id": 168973151,
        "sender_full_name": "oli",
        "timestamp": 1561493861
    },
    {
        "content": "<p>Oh well</p>",
        "id": 168973163,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561493878
    },
    {
        "content": "<p><code>// FIXME: Here be misaligned dragons</code></p>",
        "id": 168973268,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561493935
    },
    {
        "content": "<p>Heh</p>",
        "id": 168973312,
        "sender_full_name": "oli",
        "timestamp": 1561493961
    },
    {
        "content": "<p>Open an issue pls</p>",
        "id": 168973324,
        "sender_full_name": "oli",
        "timestamp": 1561493970
    },
    {
        "content": "<p>Then r=me</p>",
        "id": 168973335,
        "sender_full_name": "oli",
        "timestamp": 1561493982
    },
    {
        "content": "<p>what does r= does?</p>",
        "id": 168973356,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561493997
    },
    {
        "content": "<p>Oh that just means I'll merge or someone can merge in my name</p>",
        "id": 168978602,
        "sender_full_name": "oli",
        "timestamp": 1561497640
    },
    {
        "content": "<p>I opened the ticket and did the corrections that  <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  suggested</p>",
        "id": 168980403,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561499134
    },
    {
        "content": "<p>I made a fool of myself by doing r=oli-obk. Bors slapped me with a nice  \"This incident will be reported\" :P</p>",
        "id": 168980641,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561499310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> <a href=\"https://xkcd.com/838/\" target=\"_blank\" title=\"https://xkcd.com/838/\">https://xkcd.com/838/</a> ;)</p>",
        "id": 169005887,
        "sender_full_name": "RalfJ",
        "timestamp": 1561533680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> <code>addr + align - addr % align</code> will return <code>addr + align</code> if <code>addr</code> is divisible by <code>align</code>. How is that \"rounding up to the next multiple (that's &gt;= addr)\"?</p>",
        "id": 169006124,
        "sender_full_name": "RalfJ",
        "timestamp": 1561533970
    },
    {
        "content": "<p>Oh damn, it's just strictly larger</p>",
        "id": 169031117,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561556843
    },
    {
        "content": "<p>Sorry yesterday I had trouble sleeping and I was more clumsy than usual</p>",
        "id": 169031210,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561556884
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, is there anything else after fixing that?</p>",
        "id": 169032303,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561557447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> let's continue here, this is off-topic in the other topic ;)</p>",
        "id": 169078744,
        "sender_full_name": "RalfJ",
        "timestamp": 1561582292
    },
    {
        "content": "<p>casts are in <code>librustc_mir/interpret/cast.rs</code></p>",
        "id": 169078753,
        "sender_full_name": "RalfJ",
        "timestamp": 1561582305
    },
    {
        "content": "<p>yep sorry haha</p>",
        "id": 169078757,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561582318
    },
    {
        "content": "<p>for ptr-to-int casts (of any size) you'll have to do something like \"try <code>force_bits</code> but if that fails continue with the existing code path\"</p>",
        "id": 169078808,
        "sender_full_name": "RalfJ",
        "timestamp": 1561582333
    },
    {
        "content": "<p>like, <code>match force_bits(...) { Ok(...) =&gt; ..., Err(...) =&gt; ... }</code></p>",
        "id": 169078829,
        "sender_full_name": "RalfJ",
        "timestamp": 1561582356
    },
    {
        "content": "<p>ok</p>",
        "id": 169078834,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561582364
    },
    {
        "content": "<p>I'm inside <code>cast.rs</code>, I suppose that the <code>cast</code>method is the entrypoint here. Should we use <code>force_bits</code> in for every <code>PointerCast</code> variant?</p>",
        "id": 169080937,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561583830
    },
    {
        "content": "<p>your entry point is <code>cast_scalar</code></p>",
        "id": 169081406,
        "sender_full_name": "RalfJ",
        "timestamp": 1561584132
    },
    {
        "content": "<p>(I'd like to clean up <code>cast</code> at some point but not now^^)</p>",
        "id": 169081421,
        "sender_full_name": "RalfJ",
        "timestamp": 1561584144
    },
    {
        "content": "<p>in <code>cast_from_int</code>, there's a case where we cast <em>to</em> <code>RawPtr</code>, that's... interesting but I am not sure what we want to do there so let's ignore it for now</p>",
        "id": 169081513,
        "sender_full_name": "RalfJ",
        "timestamp": 1561584225
    },
    {
        "content": "<p>so <code>cast_from_ptr</code> is where you want to do your thing</p>",
        "id": 169081570,
        "sender_full_name": "RalfJ",
        "timestamp": 1561584244
    },
    {
        "content": "<p>Oh ok that seems pretty straightforward.</p>",
        "id": 169082009,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561584528
    },
    {
        "content": "<p>How should I get the size of the target type? I thought I could use <code>tcx</code> to get the layout but it seems a little complicated</p>",
        "id": 169083640,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561585683
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/enum.IntTy.html#method.bit_width\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/enum.IntTy.html#method.bit_width\">https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/enum.IntTy.html#method.bit_width</a></p>",
        "id": 169083957,
        "sender_full_name": "RalfJ",
        "timestamp": 1561585991
    },
    {
        "content": "<p>and <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/enum.UintTy.html#method.bit_width\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/enum.UintTy.html#method.bit_width\">https://doc.rust-lang.org/nightly/nightly-rustc/syntax/ast/enum.UintTy.html#method.bit_width</a></p>",
        "id": 169083969,
        "sender_full_name": "RalfJ",
        "timestamp": 1561585998
    },
    {
        "content": "<p>oh great</p>",
        "id": 169083982,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561586011
    },
    {
        "content": "<p>which are methods on the <code>i</code> in <code>Int(i)</code> and <code>Uint(i)</code></p>",
        "id": 169083992,
        "sender_full_name": "RalfJ",
        "timestamp": 1561586023
    },
    {
        "content": "<p>(where we have <code>_</code> or <code>Isize</code>/<code>Usize</code> so far)</p>",
        "id": 169084002,
        "sender_full_name": "RalfJ",
        "timestamp": 1561586039
    },
    {
        "content": "<p>yeah ok</p>",
        "id": 169084309,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561586302
    },
    {
        "content": "<p>I think bors needs a little bit of rest: <a href=\"https://github.com/rust-lang/rust/pull/62158\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62158\">https://github.com/rust-lang/rust/pull/62158</a></p>",
        "id": 169084406,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561586394
    },
    {
        "content": "<blockquote>\n<p>which are methods on the <code>i</code> in <code>Int(i)</code> and <code>Uint(i)</code></p>\n</blockquote>\n<p>and what about <code>isize</code> and <code>usize</code>, should I use 64?</p>",
        "id": 169084677,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561586627
    },
    {
        "content": "<p>no you should use <code>self.memory.pointer_size()</code></p>",
        "id": 169084758,
        "sender_full_name": "RalfJ",
        "timestamp": 1561586671
    },
    {
        "content": "<p>Hahhahaha</p>",
        "id": 169085466,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561587262
    },
    {
        "content": "<p>santa is not comming here this year <a href=\"https://github.com/rust-lang/rust/pull/62158#issuecomment-506064431\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62158#issuecomment-506064431\">https://github.com/rust-lang/rust/pull/62158#issuecomment-506064431</a></p>",
        "id": 169085475,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561587268
    },
    {
        "content": "<p>bors is very over-eager and any time you mention his name he thinks it's a command, even in <code>code blocks</code> or quotes. ;)</p>",
        "id": 169085757,
        "sender_full_name": "RalfJ",
        "timestamp": 1561587535
    },
    {
        "content": "<p>yeah.. \"Today I learned\"</p>",
        "id": 169085781,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561587553
    },
    {
        "content": "<p>however, it seems my \"delegate\" failed because it was in a review approval, not a comment...</p>",
        "id": 169085783,
        "sender_full_name": "RalfJ",
        "timestamp": 1561587554
    },
    {
        "content": "<p>great, now you owe me a christmas gift</p>",
        "id": 169085792,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561587571
    },
    {
        "content": "<p><span aria-label=\"gift\" class=\"emoji emoji-1f381\" role=\"img\" title=\"gift\">:gift:</span></p>",
        "id": 169086535,
        "sender_full_name": "RalfJ",
        "timestamp": 1561588253
    },
    {
        "content": "<p>I did the change to <code>cast_from_ptr</code>. I'm running tests to check if something broke</p>",
        "id": 169086587,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561588317
    },
    {
        "content": "<p>So the following tests broke: </p>\n<div class=\"codehilite\"><pre><span></span>    [ui] ui/consts/const-eval/const_raw_ptr_ops.rs\n    [ui] ui/consts/const-eval/issue-52442.rs\n    [ui] ui/consts/const-eval/match-test-ptr-null.rs\n    [ui] ui/issues/issue-52023-array-size-pointer-cast.rs\n</pre></div>\n\n\n<p>I think most of them are ok because the errors when doing  <code>ptr as usize</code> changed to <code>PointerAsBytes</code>. However,  the error when doing <code>&amp;loop { break }</code> changed from <code>it is undefined behavior to use this value</code> to <code>evaluation of constant value failed</code> inside <code>issue-52442.rs</code></p>",
        "id": 169087602,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561589171
    },
    {
        "content": "<p>remember that Miri might run with or without ptr-to-int support</p>",
        "id": 169087647,
        "sender_full_name": "RalfJ",
        "timestamp": 1561589248
    },
    {
        "content": "<p>that's why I said you need to catch the <code>Err</code></p>",
        "id": 169087653,
        "sender_full_name": "RalfJ",
        "timestamp": 1561589257
    },
    {
        "content": "<p>which it seems you did not?</p>",
        "id": 169087656,
        "sender_full_name": "RalfJ",
        "timestamp": 1561589262
    },
    {
        "content": "<p>let me find a way of doing it without being redundant</p>",
        "id": 169088098,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561589734
    },
    {
        "content": "<p>so basically <code>ptr as usize</code> and <code>ptr as isize</code> will try to use <code>force_bits</code> and if it fails, then they will return <code>ptr.into()</code></p>",
        "id": 169089446,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561591010
    },
    {
        "content": "<p>to keep the old behaviour</p>",
        "id": 169089457,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561591023
    },
    {
        "content": "<p>ok now <code>to_bits_or_ptr</code> inside <code>librustc\\mir\\interpret\\value.rs</code> panicked when running <code>run-pass/cast-rfc0401.rs</code>. I'm going to push this code so you can see what's going on</p>",
        "id": 169090984,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561592745
    },
    {
        "content": "<p><a href=\"https://github.com/christianpoveda/rust/commit/e1e95a83861271e144f65903c652ab9fa9bd64b8\" target=\"_blank\" title=\"https://github.com/christianpoveda/rust/commit/e1e95a83861271e144f65903c652ab9fa9bd64b8\">https://github.com/christianpoveda/rust/commit/e1e95a83861271e144f65903c652ab9fa9bd64b8</a></p>",
        "id": 169091222,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561593047
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> wait in <a href=\"https://github.com/rust-lang/rust/pull/62158#issuecomment-506620125\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62158#issuecomment-506620125\">https://github.com/rust-lang/rust/pull/62158#issuecomment-506620125</a> you linked to the PR itself?</p>",
        "id": 169201956,
        "sender_full_name": "RalfJ",
        "timestamp": 1561703845
    },
    {
        "content": "<p>did you mean the corresponding Miri PR?</p>",
        "id": 169201960,
        "sender_full_name": "RalfJ",
        "timestamp": 1561703854
    },
    {
        "content": "<p>Oh lol</p>",
        "id": 169201961,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561703863
    },
    {
        "content": "<p>I fixed the comment, dont tell anyone</p>",
        "id": 169202007,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561703918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  <a href=\"https://github.com/rust-lang/miri/issues/224#issuecomment-506631948\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/224#issuecomment-506631948\">https://github.com/rust-lang/miri/issues/224#issuecomment-506631948</a> you mean like being able to just enable intptrcast in one direction?</p>",
        "id": 169204238,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561706918
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/christianpoveda/rust/commit/e1e95a83861271e144f65903c652ab9fa9bd64b8\" target=\"_blank\" title=\"https://github.com/christianpoveda/rust/commit/e1e95a83861271e144f65903c652ab9fa9bd64b8\">https://github.com/christianpoveda/rust/commit/e1e95a83861271e144f65903c652ab9fa9bd64b8</a></p>\n</blockquote>\n<p>I think this does what we want but we can make it a bit less messy but better preserving the original structure of the <code>match</code></p>",
        "id": 169204951,
        "sender_full_name": "RalfJ",
        "timestamp": 1561707920
    },
    {
        "content": "<p>It does not, when the size of the types is different it fails</p>",
        "id": 169205004,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561707965
    },
    {
        "content": "<p>please define a helper method that does something like</p>\n<div class=\"codehilite\"><pre><span></span>fn int_size(ty) -&gt; Option&lt;...&gt; {\nmatch ty {  Int(i) =&gt; i.bit_width(),\n            Uint(i) =&gt; i.bit_width(),\n_ =&gt; bug!(&quot;This is not an int&quot;),\n}\n</pre></div>",
        "id": 169205008,
        "sender_full_name": "RalfJ",
        "timestamp": 1561707969
    },
    {
        "content": "<p>then you can, I think, stick to an outermost <code>match</code> and only have code inside the branches, instead of after the match</p>",
        "id": 169205017,
        "sender_full_name": "RalfJ",
        "timestamp": 1561707988
    },
    {
        "content": "<p>I though about that but didn't feel that comfortable creating new methods here and there, I'm still shy on that. Will do :)</p>",
        "id": 169205023,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561708007
    },
    {
        "content": "<p>you can just do that locally</p>",
        "id": 169205033,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708023
    },
    {
        "content": "<p>make it a helper method defined <em>inside</em> <code>cast_from_ptr</code></p>",
        "id": 169205040,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708042
    },
    {
        "content": "<p>Ok I will fix that, however I'm still worried about the test that this broke</p>",
        "id": 169205049,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561708079
    },
    {
        "content": "<p>it's a trade-off between matching twice and overall code structure, and I agree it's not clear-cut. I think matching twice, if once is done ina  helper method, is nicer though.</p>",
        "id": 169205086,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708083
    },
    {
        "content": "<p>this broke a test?</p>",
        "id": 169205091,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708089
    },
    {
        "content": "<p>yep</p>",
        "id": 169205093,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561708093
    },
    {
        "content": "<blockquote>\n<p>ok now <code>to_bits_or_ptr</code> inside <code>librustc\\mir\\interpret\\value.rs</code> panicked when running <code>run-pass/cast-rfc0401.rs</code>. I'm going to push this code so you can see what's going on</p>\n</blockquote>\n<p>here</p>",
        "id": 169205106,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561708125
    },
    {
        "content": "<p>the thing is that <code>cast-rfc0401</code> has a lot of casts :P so I was not sure about which one panicked. IIRC the problem was that the sizes did not match, one was 2 and the other one 4, so probably something from u16 to u32</p>",
        "id": 169205182,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561708209
    },
    {
        "content": "<p>I'll do the change to make the code more readable for the moment</p>",
        "id": 169205477,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561708580
    },
    {
        "content": "<p>do you have panic message + stacktrace?</p>",
        "id": 169205756,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708899
    },
    {
        "content": "<p>Not right now, let me reproduce it</p>",
        "id": 169205774,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561708919
    },
    {
        "content": "<p>also if you run rustc with <code>RUSTC_LOG=rustc_mir::interpret=info</code> you should get a better clue of where in the interpreted program it failed</p>",
        "id": 169205823,
        "sender_full_name": "RalfJ",
        "timestamp": 1561708930
    },
    {
        "content": "<p>ohhh nice trick</p>",
        "id": 169205839,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561708944
    },
    {
        "content": "<p>didn't know that</p>",
        "id": 169205840,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561708948
    },
    {
        "content": "<p>Ok, found the error, time to get the traces</p>",
        "id": 169207789,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561711278
    },
    {
        "content": "<p>I'm overwhelmed by the ammount of lines in this :P. I have the gut feeling that this:</p>\n<div class=\"codehilite\"><pre><span></span> INFO 2019-06-28T08:41:50Z: rustc_mir::interpret::step: _1 = (const &quot;/home/christian/Workspace/contrib/rust/src/test/run-pass/cast-rfc0401.rs&quot;, const 147u32, const 5u32)\n</pre></div>\n\n\n<p>Is telling me the line that is being executed but I'm not sure why</p>",
        "id": 169208130,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561711678
    },
    {
        "content": "<p>Ok yep, here is the problem (or at least that's what my nonexistent experience reading this tells me)</p>",
        "id": 169208507,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561712028
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169208511,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561712039
    },
    {
        "content": "<p>And the actual error is:</p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;assertion failed: `(left == right)`\n  left: `Size { raw: 2 }`,\n right: `Size { raw: 8 }`&#39;, src/librustc/mir/interpret/value.rs:367:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n</pre></div>",
        "id": 169208679,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561712204
    },
    {
        "content": "<p>Probably I'm wrong and the error is not there because the sizes do not make sense to me</p>",
        "id": 169227072,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561730603
    },
    {
        "content": "<p>that looks like you are asking for a ptr-sized value and got one of size 2</p>",
        "id": 169239773,
        "sender_full_name": "RalfJ",
        "timestamp": 1561739096
    },
    {
        "content": "<p>a rustc stacktrace would still be useful</p>",
        "id": 169239802,
        "sender_full_name": "RalfJ",
        "timestamp": 1561739114
    },
    {
        "content": "<p>let met get it</p>",
        "id": 169239811,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561739120
    },
    {
        "content": "<p>the <code>RUST_BACKTRACE=1</code> thing</p>",
        "id": 169239812,
        "sender_full_name": "RalfJ",
        "timestamp": 1561739121
    },
    {
        "content": "<p>as for the long log, yes it's huge ;)</p>",
        "id": 169239866,
        "sender_full_name": "RalfJ",
        "timestamp": 1561739149
    },
    {
        "content": "<p>can you take the last 50 lines or so and paste them in a gist or so?</p>",
        "id": 169239871,
        "sender_full_name": "RalfJ",
        "timestamp": 1561739158
    },
    {
        "content": "<p>Sorry, I'm in other machine ATM</p>",
        "id": 169239924,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561739173
    },
    {
        "content": "<p>so I'll have to compile/run tests and so on so it will take a while</p>",
        "id": 169239931,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561739188
    },
    {
        "content": "<p>dont worry, I need to have dinner first anyway ;)</p>",
        "id": 169242172,
        "sender_full_name": "RalfJ",
        "timestamp": 1561740993
    },
    {
        "content": "<p>and then move my stuff down to the basement where temperatures are survivable</p>",
        "id": 169242185,
        "sender_full_name": "RalfJ",
        "timestamp": 1561741002
    },
    {
        "content": "<p>Lecker! :)</p>",
        "id": 169242192,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561741008
    },
    {
        "content": "<blockquote>\n<p>and then move my stuff down to the basement where temperatures are survivable</p>\n</blockquote>\n<p>I got a mail at work telling me that one of the clusters in spain went down because the oil refrigeration is failing because of the heat wave</p>",
        "id": 169242223,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561741043
    },
    {
        "content": "<p>oO</p>",
        "id": 169242639,
        "sender_full_name": "RalfJ",
        "timestamp": 1561741367
    },
    {
        "content": "<p>on Sunday there's some chance we might see a new all-time-ever record for the highest temperature in Germany</p>",
        "id": 169242661,
        "sender_full_name": "RalfJ",
        "timestamp": 1561741385
    },
    {
        "content": "<p>(well, ever = for the last 100-150 years or so, where we have records)</p>",
        "id": 169242677,
        "sender_full_name": "RalfJ",
        "timestamp": 1561741406
    },
    {
        "content": "<p>I think is safe to assume that even without data, there is no way such high temperatures could be reached since a long time ago</p>",
        "id": 169242855,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561741525
    },
    {
        "content": "<p>as usual, up to a small probability. ;)</p>",
        "id": 169242886,
        "sender_full_name": "RalfJ",
        "timestamp": 1561741553
    },
    {
        "content": "<p>statistics and probability distributions are great</p>",
        "id": 169242932,
        "sender_full_name": "RalfJ",
        "timestamp": 1561741563
    },
    {
        "content": "<p>but I agree. it's a <em>very</em> small probability.</p>",
        "id": 169242961,
        "sender_full_name": "RalfJ",
        "timestamp": 1561741576
    },
    {
        "content": "<p>Ok I have the logs now</p>",
        "id": 169248324,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561745336
    },
    {
        "content": "<p>here is the rustc backtrace</p>",
        "id": 169248435,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561745421
    },
    {
        "content": "<p><a href=\"https://gist.github.com/christianpoveda/4287862a77a35bf8ca84a6c7129d6295\" target=\"_blank\" title=\"https://gist.github.com/christianpoveda/4287862a77a35bf8ca84a6c7129d6295\">https://gist.github.com/christianpoveda/4287862a77a35bf8ca84a6c7129d6295</a></p>",
        "id": 169248438,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561745422
    },
    {
        "content": "<p>and here the miri logs<br>\n<a href=\"https://gist.github.com/christianpoveda/815b11e267d1b705e52d4ee3a1ad8b12\" target=\"_blank\" title=\"https://gist.github.com/christianpoveda/815b11e267d1b705e52d4ee3a1ad8b12\">https://gist.github.com/christianpoveda/815b11e267d1b705e52d4ee3a1ad8b12</a></p>",
        "id": 169248503,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561745504
    },
    {
        "content": "<p>oh it's in <code>const_prop</code> :(</p>",
        "id": 169250333,
        "sender_full_name": "RalfJ",
        "timestamp": 1561746774
    },
    {
        "content": "<p>that's always bad news, that pass is a mess</p>",
        "id": 169250335,
        "sender_full_name": "RalfJ",
        "timestamp": 1561746780
    },
    {
        "content": "<p>btw you seem to be building without debug info so there are no line numbers in that backtrace</p>",
        "id": 169250367,
        "sender_full_name": "RalfJ",
        "timestamp": 1561746812
    },
    {
        "content": "<p>how should I enable debug info?</p>",
        "id": 169250395,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561746838
    },
    {
        "content": "<p><code>debuginfo-level = 1</code> is a good thing to have in your <code>config.toml</code></p>",
        "id": 169250396,
        "sender_full_name": "RalfJ",
        "timestamp": 1561746839
    },
    {
        "content": "<p>ok nice</p>",
        "id": 169250438,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561746843
    },
    {
        "content": "<p>let me do it</p>",
        "id": 169250442,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561746847
    },
    {
        "content": "<p>btw, just added the most amazing intrpcast test so far :D <a href=\"https://github.com/rust-lang/miri/pull/798\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/798\">https://github.com/rust-lang/miri/pull/798</a></p>",
        "id": 169251148,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747366
    },
    {
        "content": "<p>this is something people have been running into all the time</p>",
        "id": 169251158,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747373
    },
    {
        "content": "<p>so it's great that soon this will work in Miri out-of-the-box :)</p>",
        "id": 169251167,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747383
    },
    {
        "content": "<p><span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span></p>",
        "id": 169251227,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561747438
    },
    {
        "content": "<blockquote>\n<p><code>debuginfo-level = 1</code> is a good thing to have in your <code>config.toml</code></p>\n</blockquote>\n<p>I did this but I dont see a difference</p>",
        "id": 169251387,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561747554
    },
    {
        "content": "<blockquote>\n<p>so it's great that soon this will work in Miri out-of-the-box :)</p>\n</blockquote>\n<p>So, now miri can execute the code needed to print a pointer, right?</p>",
        "id": 169251460,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561747581
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><code>debuginfo-level = 1</code> is a good thing to have in your <code>config.toml</code></p>\n</blockquote>\n<p>I did this but I dont see a difference</p>\n</blockquote>\n<p>don't worry about it, the stacktrace is good enough for us for now</p>",
        "id": 169251541,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747644
    },
    {
        "content": "<p>ok</p>",
        "id": 169251552,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561747651
    },
    {
        "content": "<p>you'll have to rebuild <em>everything</em> to see a difference</p>",
        "id": 169251553,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747652
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>so it's great that soon this will work in Miri out-of-the-box :)</p>\n</blockquote>\n<p>So, now miri can execute the code needed to print a pointer, right?</p>\n</blockquote>\n<p>yes :D</p>",
        "id": 169251566,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747656
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p><code>debuginfo-level = 1</code> is a good thing to have in your <code>config.toml</code></p>\n</blockquote>\n<p>I did this but I dont see a difference</p>\n</blockquote>\n<p>don't worry about it, the stacktrace is good enough for us for now</p>\n</blockquote>\n<p>ok not today</p>",
        "id": 169251579,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561747664
    },
    {
        "content": "<p>did you run the miri test suite with your cast-patched compiler?</p>",
        "id": 169251676,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747713
    },
    {
        "content": "<p>i did not, let me try</p>",
        "id": 169251701,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561747730
    },
    {
        "content": "<p>oh d'oh I see the problem</p>",
        "id": 169251740,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747761
    },
    {
        "content": "<p>you are using the size of the <em>target</em> type to extract the <em>source</em> value</p>",
        "id": 169251768,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747788
    },
    {
        "content": "<p>tell me</p>",
        "id": 169251769,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561747788
    },
    {
        "content": "<blockquote>\n<p>you are using the size of the <em>target</em> type to extract the <em>source</em> value</p>\n</blockquote>\n<p>Loading...</p>",
        "id": 169251782,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561747800
    },
    {
        "content": "<p>Oh crap</p>",
        "id": 169251830,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561747805
    },
    {
        "content": "<p>so first of all try to unify the <code>Isize</code>/<code>Usize</code> branch with the other one</p>",
        "id": 169251880,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747845
    },
    {
        "content": "<p>I think we talked about that, with thr helper function</p>",
        "id": 169251883,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747850
    },
    {
        "content": "<p>then, in that branch, you need always do <code>self.force_bits(Scalar::Ptr(ptr), self.memory.pointer_size())</code></p>",
        "id": 169251924,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747878
    },
    {
        "content": "<p>if that gives <code>Err</code>, old stuff happens</p>",
        "id": 169251959,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747904
    },
    {
        "content": "<p>but if that gives <code>Ok</code>... I think the best bet is to forward to <code>cast_from_int</code></p>",
        "id": 169252034,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747935
    },
    {
        "content": "<p>then you dont even need to do all the size matching, I think that function already does ot</p>",
        "id": 169252044,
        "sender_full_name": "RalfJ",
        "timestamp": 1561747945
    },
    {
        "content": "<p>Ok let me try</p>",
        "id": 169252063,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561747967
    },
    {
        "content": "<p>though you'll have to get rid of the <code>src_layout</code> parameter</p>",
        "id": 169252105,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748003
    },
    {
        "content": "<p>replace it by a <code>src_signed: bool</code> and <code>src_size: Size</code> or so</p>",
        "id": 169252119,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748016
    },
    {
        "content": "<p>There is no way to build the layout to avoid doing that?</p>",
        "id": 169252467,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561748256
    },
    {
        "content": "<p>you dont want to build a new layout</p>",
        "id": 169252508,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748280
    },
    {
        "content": "<p>ok I don't</p>",
        "id": 169252554,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561748290
    },
    {
        "content": "<p><em>maybe</em> we can use the ptr layout</p>",
        "id": 169252556,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748291
    },
    {
        "content": "<p>can you check what <code>abi.is_signed()</code> does for pointers?</p>",
        "id": 169252575,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748314
    },
    {
        "content": "<p>you are making the <code>&amp;T</code> directly from the <code>*mut T</code>?</p>",
        "id": 169252607,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748342
    },
    {
        "content": "<p>argh sry wrong thread</p>",
        "id": 169252622,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748351
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    pub fn is_signed(&amp;self) -&gt; bool {\n        match *self {\n            Abi::Scalar(ref scal) =&gt; match scal.value {\n                Primitive::Int(_, signed) =&gt; signed,\n                _ =&gt; false,\n            },\n            _ =&gt; false,\n        }\n    }\n</pre></div>",
        "id": 169252670,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561748396
    },
    {
        "content": "<p>so, it probably says unsigned</p>",
        "id": 169252762,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748443
    },
    {
        "content": "<p>well that's great news, then I think you can just add a <code>src_layout</code> parameter to <code>cast_from_ptr</code></p>",
        "id": 169252779,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748460
    },
    {
        "content": "<p>and forward that</p>",
        "id": 169252783,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748462
    },
    {
        "content": "<p>also rename <code>ty</code> to <code>dst_ty</code></p>",
        "id": 169252788,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748466
    },
    {
        "content": "<p>shouldn't be better to use the whole <code>dest_layout</code> instead of <code>dest_ty</code>  for the sake of symmetry?</p>",
        "id": 169252995,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561748616
    },
    {
        "content": "<p>sure why not</p>",
        "id": 169253326,
        "sender_full_name": "RalfJ",
        "timestamp": 1561748843
    },
    {
        "content": "<p>It's compiling (<a href=\"https://xkcd.com/303/\" target=\"_blank\" title=\"https://xkcd.com/303/\">https://xkcd.com/303/</a>) but it seems it worked</p>",
        "id": 169253922,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561749255
    },
    {
        "content": "<p>Argh... my build failed and I have to recompile it from scratch</p>",
        "id": 169254736,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561749945
    },
    {
        "content": "<p>ouch</p>",
        "id": 169257950,
        "sender_full_name": "RalfJ",
        "timestamp": 1561752293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> are you ready for some git foo? :D<br>\n<a href=\"https://github.com/rust-lang/rust/pull/62158#issuecomment-506942578\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62158#issuecomment-506942578\">https://github.com/rust-lang/rust/pull/62158#issuecomment-506942578</a></p>",
        "id": 169289813,
        "sender_full_name": "RalfJ",
        "timestamp": 1561799923
    },
    {
        "content": "<p>The horror</p>",
        "id": 169294347,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561809483
    },
    {
        "content": "<p>(please wait a bit before doing that, I am doing stuff TM)</p>",
        "id": 169294357,
        "sender_full_name": "RalfJ",
        "timestamp": 1561809513
    },
    {
        "content": "<p>also isn't it like the middle of the night in your timezone right now? I thought I had some time for the stuff TM before you came back^^</p>",
        "id": 169294368,
        "sender_full_name": "RalfJ",
        "timestamp": 1561809539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> okay done with my stuff</p>",
        "id": 169295127,
        "sender_full_name": "RalfJ",
        "timestamp": 1561810857
    },
    {
        "content": "<p>now the instructions I posted there should work :)</p>",
        "id": 169295131,
        "sender_full_name": "RalfJ",
        "timestamp": 1561810864
    },
    {
        "content": "<p>It's 7 24</p>",
        "id": 169295906,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561812311
    },
    {
        "content": "<p>It's 7 24</p>",
        "id": 169295907,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561812311
    },
    {
        "content": "<p>Ill get out of bed at 7 30</p>",
        "id": 169295908,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561812311
    },
    {
        "content": "<p>that is the middle of the night if you ask me, at least for a weekend :P</p>",
        "id": 169295976,
        "sender_full_name": "RalfJ",
        "timestamp": 1561812479
    },
    {
        "content": "<p>also does that mean you are 7:30h behind me? interesting 0.5h offset</p>",
        "id": 169296024,
        "sender_full_name": "RalfJ",
        "timestamp": 1561812505
    },
    {
        "content": "<p>Hahaha</p>",
        "id": 169296044,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561812563
    },
    {
        "content": "<p>Hallo</p>",
        "id": 169296045,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561812567
    },
    {
        "content": "<p>No, the thing is that zulip broke on my phone and didn't send the message, its 7 50 now</p>",
        "id": 169296053,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561812587
    },
    {
        "content": "<blockquote>\n<p>that is the middle of the night if you ask me, at least for a weekend :P</p>\n</blockquote>\n<p>I used to think like that but I try to keep my schedule consistent the whole week</p>",
        "id": 169296098,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561812615
    },
    {
        "content": "<p>lol^^ 7h then, okay. not 9h as I thought it would be. ;)</p>",
        "id": 169296119,
        "sender_full_name": "RalfJ",
        "timestamp": 1561812692
    },
    {
        "content": "<p>hehehe</p>",
        "id": 169296121,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561812703
    },
    {
        "content": "<p>In fact it is pretty handy. My work is done with some people at CERN in Switzerland so we have a clock with the central european time in the office, so I use it secretly to also check what hour is over there to work on Rusty stuff</p>",
        "id": 169296171,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561812785
    },
    {
        "content": "<p>hehe</p>",
        "id": 169296176,
        "sender_full_name": "RalfJ",
        "timestamp": 1561812800
    },
    {
        "content": "<p>and you have to tell me at some point what you are working on, working with CERN sounds awesome :D</p>",
        "id": 169296178,
        "sender_full_name": "RalfJ",
        "timestamp": 1561812812
    },
    {
        "content": "<p>I've visited there once. I like physics, so it was a blast :)</p>",
        "id": 169296184,
        "sender_full_name": "RalfJ",
        "timestamp": 1561812829
    },
    {
        "content": "<p>It sounds awesome, that's it :P</p>",
        "id": 169296186,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561812832
    },
    {
        "content": "<p>Well, i work at CMS (one of the LHC experiments). My job is to check all the nodes in the grid and report any problems that might come up</p>",
        "id": 169296299,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561813018
    },
    {
        "content": "<p>So if for example if the cluster that KIT has connected to the grid stops accepting job submissions I should check why, try to solve it from here and if it is a local problem, write to their sysadmin so they can fix it</p>",
        "id": 169296350,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561813096
    },
    {
        "content": "<p>I've seen the Atlas detector in Real Life but not CMS unfortunately^^</p>",
        "id": 169296418,
        "sender_full_name": "RalfJ",
        "timestamp": 1561813237
    },
    {
        "content": "<p>cool stuff :)</p>",
        "id": 169296431,
        "sender_full_name": "RalfJ",
        "timestamp": 1561813275
    },
    {
        "content": "<p>Oh the competition &gt;:P</p>",
        "id": 169296436,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561813286
    },
    {
        "content": "<p>I have a gift for you: <a href=\"https://github.com/rust-lang/rust/pull/62229\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62229\">https://github.com/rust-lang/rust/pull/62229</a></p>",
        "id": 169296487,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561813370
    },
    {
        "content": "<p>just saw it. ;)</p>",
        "id": 169296571,
        "sender_full_name": "RalfJ",
        "timestamp": 1561813505
    },
    {
        "content": "<p>I'll wait for your comments and then rebase it</p>",
        "id": 169296829,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561813956
    },
    {
        "content": "<p>No need to rebase if it doesnt conflict</p>",
        "id": 169296965,
        "sender_full_name": "RalfJ",
        "timestamp": 1561814273
    },
    {
        "content": "<p>in the mean time, I gave you something to do at <a href=\"https://github.com/rust-lang/rust/pull/62158#issuecomment-506942578\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62158#issuecomment-506942578\">https://github.com/rust-lang/rust/pull/62158#issuecomment-506942578</a> :)</p>",
        "id": 169296986,
        "sender_full_name": "RalfJ",
        "timestamp": 1561814282
    },
    {
        "content": "<blockquote>\n<p>No need to rebase if it doesnt conflict</p>\n</blockquote>\n<p>But I need to hide my embarassing intermediate commits</p>",
        "id": 169297077,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561814483
    },
    {
        "content": "<blockquote>\n<p>in the mean time, I gave you something to do at <a href=\"https://github.com/rust-lang/rust/pull/62158#issuecomment-506942578\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62158#issuecomment-506942578\">https://github.com/rust-lang/rust/pull/62158#issuecomment-506942578</a> :)</p>\n</blockquote>\n<p>Ok done it, should I force push this?</p>",
        "id": 169297081,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561814495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> please do :)</p>",
        "id": 169299292,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818105
    },
    {
        "content": "<p>Es ist fertig :P</p>",
        "id": 169299316,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818122
    },
    {
        "content": "<p>where's the miri submodule update?</p>",
        "id": 169299354,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818190
    },
    {
        "content": "<p>seems you skipped that part? :D</p>",
        "id": 169299356,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818194
    },
    {
        "content": "<p>no way Jose</p>",
        "id": 169299358,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818202
    },
    {
        "content": "<p>I did it, but the Cargo.lock did not change</p>",
        "id": 169299361,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818213
    },
    {
        "content": "<p>thats cool</p>",
        "id": 169299365,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818218
    },
    {
        "content": "<p>but then you didnt commit</p>",
        "id": 169299367,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818221
    },
    {
        "content": "<p>or didnt push</p>",
        "id": 169299370,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818223
    },
    {
        "content": "<p>i did</p>",
        "id": 169299371,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818225
    },
    {
        "content": "<p>/me searches his shell history</p>",
        "id": 169299378,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818239
    },
    {
        "content": "<p>look at <a href=\"https://github.com/rust-lang/rust/pull/62158/commits\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62158/commits\">https://github.com/rust-lang/rust/pull/62158/commits</a>. you didnt. ;)</p>",
        "id": 169299380,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818240
    },
    {
        "content": "<p>Well IDK but <code>nothing to commit, working tree clean\n</code></p>",
        "id": 169299427,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818272
    },
    {
        "content": "<p>oh dang sorry that's my fault... stupid <code>x.py</code> automatism that I turned off long ago and forgot about</p>",
        "id": 169299450,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818329
    },
    {
        "content": "<p>wait</p>",
        "id": 169299454,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818339
    },
    {
        "content": "<p>second part</p>",
        "id": 169299457,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818341
    },
    {
        "content": "<p>try again but without <code>x.py</code></p>\n<div class=\"codehilite\"><pre><span></span>cd src/tools/miri\ngit fetch origin\ngit reset --hard origin/rustup\ncd ../../..\ngit commit -am &quot;update miri&quot;\n</pre></div>",
        "id": 169299458,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818346
    },
    {
        "content": "<p>I'm working from my fork</p>",
        "id": 169299464,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818358
    },
    {
        "content": "<p>so <code>origin</code> is pointing to <code>christianpoveda/rust</code></p>",
        "id": 169299507,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818374
    },
    {
        "content": "<p>and <em>then</em> do <code>./x.py</code> and see if it changes anythng (<code>git status</code>) and if it did add that to the commit (<code>git commit -a --amend</code>)</p>",
        "id": 169299513,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818387
    },
    {
        "content": "<p>should i use the remote pointing to <code>rust-lang/rust</code>?</p>",
        "id": 169299515,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818391
    },
    {
        "content": "<p>wait what? <code>origin</code> <em>in <code>src/tools/miri</code></em>?!?</p>",
        "id": 169299520,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818403
    },
    {
        "content": "<blockquote>\n<p>wait what? <code>origin</code> <em>in <code>src/tools/miri</code></em>?!?</p>\n</blockquote>\n<p>Loading</p>",
        "id": 169299526,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818412
    },
    {
        "content": "<p>but why?^^</p>",
        "id": 169299527,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818414
    },
    {
        "content": "<p>Ohhh</p>",
        "id": 169299528,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818415
    },
    {
        "content": "<p>nevermind I forgot that's another repo</p>",
        "id": 169299538,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818426
    },
    {
        "content": "<p>good :)</p>",
        "id": 169299539,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818438
    },
    {
        "content": "<p>tada</p>",
        "id": 169299587,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818483
    },
    {
        "content": "<p>it worked</p>",
        "id": 169299596,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818486
    },
    {
        "content": "<p>there are conflicts in the PR though</p>",
        "id": 169299602,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818505
    },
    {
        "content": "<p>which means your rebase didnt do what you should</p>",
        "id": 169299604,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818511
    },
    {
        "content": "<p>did you make you you rebased onto the lastest upstream master?</p>",
        "id": 169299608,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818520
    },
    {
        "content": "<p>let me redo it</p>",
        "id": 169299611,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818529
    },
    {
        "content": "<p>your git setup is weird^^ for me <code>origin</code> is <em>always</em> upstream</p>",
        "id": 169299616,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818545
    },
    {
        "content": "<p>if thats not the case for you, I am afraid you'll have to figure things out on your own...</p>",
        "id": 169299621,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818558
    },
    {
        "content": "<p>yeah I know how to fix it</p>",
        "id": 169299625,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818566
    },
    {
        "content": "<p>gimme a second</p>",
        "id": 169299626,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818568
    },
    {
        "content": "<p>when I have a fork I usually do</p>\n<div class=\"codehilite\"><pre><span></span>git clone https://github.com/rust-lang/rust.git\ncd rust\ngit remote add ralf git@github.com:RalfJung/rust.git\n</pre></div>\n\n\n<p>and that way <code>origin</code> is upstream and <code>ralf</code> is my fork</p>",
        "id": 169299679,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818614
    },
    {
        "content": "<p>I do <code>origin -&gt; me</code>, <code>upstream -&gt; rust-lang</code></p>",
        "id": 169299691,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818652
    },
    {
        "content": "<p>ok now it should work</p>",
        "id": 169299693,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818658
    },
    {
        "content": "<blockquote>\n<p>I do <code>origin -&gt; me</code>, <code>upstream -&gt; rust-lang</code></p>\n</blockquote>\n<p>fair</p>",
        "id": 169299777,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818795
    },
    {
        "content": "<p>I'llt ry to remember that for my future instructions :D</p>",
        "id": 169299781,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818801
    },
    {
        "content": "<p>hm now there are two \"update miri\" commits?^^</p>",
        "id": 169299793,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818829
    },
    {
        "content": "<p>ah no taht was GH being silly</p>",
        "id": 169299833,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818844
    },
    {
        "content": "<p>because the night is dark and full of terrors</p>",
        "id": 169299837,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818848
    },
    {
        "content": "<p>oh no</p>",
        "id": 169299838,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818852
    },
    {
        "content": "<p>they were, i just squashed :P</p>",
        "id": 169299839,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818854
    },
    {
        "content": "<p>something went very wrong</p>",
        "id": 169299841,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818855
    },
    {
        "content": "<p>refresh</p>",
        "id": 169299842,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818856
    },
    {
        "content": "<p>look at this: <a href=\"https://github.com/rust-lang/rust/pull/62158/commits/47f80aed9d7854699a1bd1151f0cdad4667533a9\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62158/commits/47f80aed9d7854699a1bd1151f0cdad4667533a9\">https://github.com/rust-lang/rust/pull/62158/commits/47f80aed9d7854699a1bd1151f0cdad4667533a9</a></p>",
        "id": 169299845,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818862
    },
    {
        "content": "<p>you updated 7 submodules or so</p>",
        "id": 169299848,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818869
    },
    {
        "content": "<p>submodules are awful :/</p>",
        "id": 169299850,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818880
    },
    {
        "content": "<p>/me cries in spanish</p>",
        "id": 169299852,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818886
    },
    {
        "content": "<p>so let's try that again</p>",
        "id": 169299854,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818893
    },
    {
        "content": "<p>let me delete the commit and do it again</p>",
        "id": 169299857,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818897
    },
    {
        "content": "<p>step 1: cleanup. <code>git reset --hard HEAD^</code></p>",
        "id": 169299861,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818902
    },
    {
        "content": "<p>yes</p>",
        "id": 169299862,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818904
    },
    {
        "content": "<p>now, next thing, get submodules clean</p>",
        "id": 169299866,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818910
    },
    {
        "content": "<p>I have a <code>git subfix</code> command for that</p>",
        "id": 169299869,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818915
    },
    {
        "content": "<p>that's <code>git submodule update --init --recursive</code></p>",
        "id": 169299874,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818927
    },
    {
        "content": "<p>you can also do <code>./x.py</code>, it does that per default (which is why it killed your miri update the last time)</p>",
        "id": 169299878,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818947
    },
    {
        "content": "<p>after that, <code>git diff</code> should be clean</p>",
        "id": 169299923,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818966
    },
    {
        "content": "<p>it is</p>",
        "id": 169299926,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561818979
    },
    {
        "content": "<p><em>always</em> do <code>git diff</code> right before <code>git commit</code> to know what you are committing! that would have prevented this mistake</p>",
        "id": 169299928,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818982
    },
    {
        "content": "<p>now do the <code>cd src/tools/miri</code> etc part</p>",
        "id": 169299931,
        "sender_full_name": "RalfJ",
        "timestamp": 1561818989
    },
    {
        "content": "<p>It worked</p>",
        "id": 169299949,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561819053
    },
    {
        "content": "<p>yay, it did :D</p>",
        "id": 169300006,
        "sender_full_name": "RalfJ",
        "timestamp": 1561819163
    },
    {
        "content": "<p>congrats on your first miri submodule update :D</p>",
        "id": 169300009,
        "sender_full_name": "RalfJ",
        "timestamp": 1561819170
    },
    {
        "content": "<p>/me smiles</p>",
        "id": 169300092,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561819285
    },
    {
        "content": "<p>It's 7 24</p>",
        "id": 169300701,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561820198
    },
    {
        "content": "<p>Ill get out of bed at 7 30</p>",
        "id": 169300702,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561820198
    },
    {
        "content": "<p>lol</p>",
        "id": 169300704,
        "sender_full_name": "RalfJ",
        "timestamp": 1561820209
    },
    {
        "content": "<p>Ohh nice the zulip app finally worked</p>",
        "id": 169300712,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561820247
    },
    {
        "content": "<p>twice</p>",
        "id": 169300832,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561820420
    },
    {
        "content": "<p>Do you think that using  intptrcast during casting needs some tests?</p>",
        "id": 169301063,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561820811
    },
    {
        "content": "<p>on the Miri side? yes!</p>",
        "id": 169301218,
        "sender_full_name": "RalfJ",
        "timestamp": 1561821087
    },
    {
        "content": "<p><code>&amp;42 as usize as u8</code></p>",
        "id": 169301226,
        "sender_full_name": "RalfJ",
        "timestamp": 1561821116
    },
    {
        "content": "<p>Oh the famous one</p>",
        "id": 169301269,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561821125
    },
    {
        "content": "<p>and then something that transmutes...</p>\n<div class=\"codehilite\"><pre><span></span>fn transmute_ptr_to_int&lt;T&gt;(x: *const T) -&gt; usize { mem::transmute(x) }\n\ntransmute_ptr_to_int(&amp;42) as u8\n</pre></div>",
        "id": 169301275,
        "sender_full_name": "RalfJ",
        "timestamp": 1561821157
    },
    {
        "content": "<p>that's a slightly different code path</p>",
        "id": 169301277,
        "sender_full_name": "RalfJ",
        "timestamp": 1561821166
    },
    {
        "content": "<p>you can then even compare you get the same result both ways :D</p>",
        "id": 169301281,
        "sender_full_name": "RalfJ",
        "timestamp": 1561821181
    },
    {
        "content": "<p>Should I reuse the same <code>intptrcast.rs</code> test file?</p>",
        "id": 169301288,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561821190
    },
    {
        "content": "<p>yes please</p>",
        "id": 169301290,
        "sender_full_name": "RalfJ",
        "timestamp": 1561821198
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0606]: casting `&amp;i32` as `usize` is invalid\n  --&gt; $DIR/intptrcast.rs:14:13\n   |\n14 |     let b = &amp;42 as usize as u8;\n   |             ---^^^^^^^^^\n   |             |\n   |             cannot cast `&amp;i32` as `usize`\n   |             help: dereference the expression: `*&amp;42`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0606`.\n</pre></div>",
        "id": 169303584,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561825559
    },
    {
        "content": "<p>yeah I forgot the intermediate raw pointer</p>",
        "id": 169304256,
        "sender_full_name": "RalfJ",
        "timestamp": 1561826863
    },
    {
        "content": "<p>just adjust it to make it work ;)</p>",
        "id": 169304258,
        "sender_full_name": "RalfJ",
        "timestamp": 1561826877
    },
    {
        "content": "<p>it does not work either</p>",
        "id": 169304298,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561826888
    },
    {
        "content": "<p>which error?</p>",
        "id": 169304302,
        "sender_full_name": "RalfJ",
        "timestamp": 1561826916
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0080]: Miri evaluation error: a raw memory access tried to access part of a pointer value as raw bytes\n  --&gt; $DIR/intptrcast.rs:14:13\n   |\n14 |     let b = &amp;42 as *const i32 as usize as u8;\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Miri evaluation error: a raw memory access tried to access part of a pointer value as raw bytes\n   |\n   = note: inside call to `main` at /home/christian/Workspace/contrib/rust/src/libstd/rt.rs:64:34\n   = note: inside call to closure at /home/christian/Workspace/contrib/rust/src/libstd/rt.rs:49:73\n   = note: inside call to closure at /home/christian/Workspace/contrib/rust/src/libstd/sys_common/backtrace.rs:77:5\n   = note: inside call to `std::sys_common::backtrace::__rust_begin_short_backtrace::&lt;[closure@DefId(1:5944 ~ std[9246]::rt[0]::lang_start_internal[0]::{{closure}}[0]::{{closure}}[0]) 0:&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32&gt;` at /home/christian/Workspace/contrib/rust/src/libstd/rt.rs:49:13\n   = note: inside call to closure at /home/christian/Workspace/contrib/rust/src/libstd/panicking.rs:294:40\n   = note: inside call to `std::panicking::try::do_call::&lt;[closure@DefId(1:5943 ~ std[9246]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32&gt;` at /home/christian/Workspace/contrib/rust/src/libstd/panicking.rs:290:5\n   = note: inside call to `std::panicking::try::&lt;i32, [closure@DefId(1:5943 ~ std[9246]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe]&gt;` at /home/christian/Workspace/contrib/rust/src/libstd/panic.rs:388:9\n   = note: inside call to `std::panic::catch_unwind::&lt;[closure@DefId(1:5943 ~ std[9246]::rt[0]::lang_start_internal[0]::{{closure}}[0]) 0:&amp;&amp;dyn std::ops::Fn() -&gt; i32 + std::marker::Sync + std::panic::RefUnwindSafe], i32&gt;` at /home/christian/Workspace/contrib/rust/src/libstd/rt.rs:48:25\n   = note: inside call to `std::rt::lang_start_internal` at /home/christian/Workspace/contrib/rust/src/libstd/rt.rs:64:5\n   = note: inside call to `std::rt::lang_start::&lt;()&gt;`\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0080`.\n</pre></div>",
        "id": 169304310,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561826958
    },
    {
        "content": "<p>does adding <code>-Zmiri-disable-validation</code> to the flags help?</p>",
        "id": 169304358,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827008
    },
    {
        "content": "<p>Im a complete idiot</p>",
        "id": 169304361,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561827020
    },
    {
        "content": "<p>Oh wait, having the flag in the file enables it?</p>",
        "id": 169304363,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561827037
    },
    {
        "content": "<p>of course it does nvm</p>",
        "id": 169304364,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561827051
    },
    {
        "content": "<p>let me disable validation</p>",
        "id": 169304365,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561827057
    },
    {
        "content": "<p>only when you run it in the test suite</p>",
        "id": 169304366,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827059
    },
    {
        "content": "<p>or just do <code>./miri run tests/run-pass/intptrcast -Zmiri-seed=42 -Zmiri-disable-validation</code></p>",
        "id": 169304373,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827082
    },
    {
        "content": "<p>that's probably easier anyway while you are still debugging, to run the test directly</p>",
        "id": 169304377,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827096
    },
    {
        "content": "<p>same error</p>",
        "id": 169304379,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561827112
    },
    {
        "content": "<p>then it looks like your patch doesn't do what it should</p>",
        "id": 169304421,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827126
    },
    {
        "content": "<p>oh well...</p>",
        "id": 169304426,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561827150
    },
    {
        "content": "<p>(I didnt look at it yet.)</p>",
        "id": 169304439,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827155
    },
    {
        "content": "<p>probably <code>force_bits</code> always fails and it's just executing the old behaviour</p>",
        "id": 169304532,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561827330
    },
    {
        "content": "<p>well you need to set <code>-Zmiri-seed</code> to make that not fail</p>",
        "id": 169304720,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827611
    },
    {
        "content": "<p>but you can check that easily by making this not the <em>first</em> thing that intrptrcast tests</p>",
        "id": 169304748,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827626
    },
    {
        "content": "<p>so you can tell if your prior tests still pass</p>",
        "id": 169304751,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827632
    },
    {
        "content": "<p>well thats the thing</p>",
        "id": 169304759,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561827646
    },
    {
        "content": "<p>all the intptrcasts tests pass, including the <code>intptrcast.rs</code> original test</p>",
        "id": 169304777,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561827672
    },
    {
        "content": "<p>so, it is enabled</p>",
        "id": 169304782,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561827682
    },
    {
        "content": "<p>how exactly are you running the test?</p>",
        "id": 169304787,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827709
    },
    {
        "content": "<p>./miri test intptrcast</p>",
        "id": 169304826,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561827723
    },
    {
        "content": "<p>that will take the flag into account, yeah</p>",
        "id": 169304895,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827859
    },
    {
        "content": "<p>I usually prefer to test via <code>./miri run</code> when working on a particular test case</p>",
        "id": 169304897,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827885
    },
    {
        "content": "<p>avoids all the compiletest junk around it</p>",
        "id": 169304918,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827893
    },
    {
        "content": "<p>but then you need to remember to pass the flags</p>",
        "id": 169304920,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827899
    },
    {
        "content": "<p>either way, let's see where the error comes from: do <code>MIRI_BACKTRACE=1 ./miri ...</code></p>",
        "id": 169304929,
        "sender_full_name": "RalfJ",
        "timestamp": 1561827920
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>stack backtrace:\n   0: &lt;rustc::mir::interpret::error::InterpErrorInfo as core::convert::From&lt;rustc::mir::interpret::error::InterpError&lt;u64&gt;&gt;&gt;::from::h82824632c52c5588 (0x7f7418faf77d)\n   1: &lt;T as core::convert::Into&lt;U&gt;&gt;::into::h20a9a7d5cf115f97 (0x55a20c2a306c)\n             at /home/christian/Workspace/contrib/rust/src/libcore/convert.rs:540\n      rustc_mir::interpret::cast::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::cast_from_ptr::hfcd977be000db5ce\n             at /home/christian/Workspace/contrib/miri/&lt;::rustc::mir::interpret::err macros&gt;:2\n      rustc_mir::interpret::cast::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::cast_scalar::h670bd5c154169f8c\n             at /home/christian/Workspace/contrib/rust/src/librustc_mir/interpret/cast.rs:154\n      rustc_mir::interpret::cast::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::cast::h557da123a3f5f2b8\n             at /home/christian/Workspace/contrib/rust/src/librustc_mir/interpret/cast.rs:71\n      rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::eval_rvalue_into_place::h9a9fd2a982f648ae\n             at /home/christian/Workspace/contrib/rust/src/librustc_mir/interpret/step.rs:264\n   2: rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::statement::h850ab37b10a6d2a9 (0x55a20c2a7b1f)\n             at /home/christian/Workspace/contrib/rust/src/librustc_mir/interpret/step.rs:85\n      rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::step::ha5c6b83338e2c707\n             at /home/christian/Workspace/contrib/rust/src/librustc_mir/interpret/step.rs:61\n      rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::run::h57378d0f609d97a3\n             at /home/christian/Workspace/contrib/rust/src/librustc_mir/interpret/step.rs:40\n   3: miri::eval_main::{{closure}}::h89905980517900df (0x55a20c1f0c10)\n             at src/lib.rs:233\n      miri::eval_main::h552c5f486ccc6954\n             at src/lib.rs:232\n   4: &lt;miri::MiriCompilerCalls as rustc_driver::Callbacks&gt;::after_analysis::{{closure}}::h3d330d8e2971815c (0x55a20c1dc85d)\n             at src/bin/miri.rs:50\n      rustc_interface::passes::BoxedGlobalCtxt::enter::{{closure}}::{{closure}}::h6f9191972b894d3d\n             at /home/christian/Workspace/contrib/rust/src/librustc_interface/passes.rs:803\n      rustc::ty::context::tls::enter_global::{{closure}}::hfd01637ff81ead61\n             at /home/christian/Workspace/contrib/rust/src/librustc/ty/context.rs:1963\n      rustc::ty::context::tls::enter_context::{{closure}}::hd577f6dac22a3083\n             at /home/christian/Workspace/contrib/rust/src/librustc/ty/context.rs:1929\n      rustc::ty::context::tls::set_tlv::h5a7b061128e7af69\n             at /home/christian/Workspace/contrib/rust/src/librustc/ty/context.rs:1862\n      rustc::ty::context::tls::enter_context::h0b2e865728aa47f6\n             at /home/christian/Workspace/contrib/rust/src/librustc/ty/context.rs:1928\n      rustc::ty::context::tls::enter_global::h467844306770a71d\n             at /home/christian/Workspace/contrib/rust/src/librustc/ty/context.rs:1962\n      rustc_interface::passes::BoxedGlobalCtxt::enter::{{closure}}::h2960106158652d01\n             at /home/christian/Workspace/contrib/rust/src/librustc_interface/passes.rs:803\n      rustc_interface::passes::BoxedGlobalCtxt::access::{{closure}}::h8c4d575a5dad4633\n             at /home/christian/Workspace/contrib/miri/&lt;::rustc_data_structures::box_region::declare_box_region_type macros&gt;:17\n   5: rustc_interface::passes::create_global_ctxt::{{closure}}::h3ff26032759f5a9e (0x7f7419b6f02a)\n   6: alloc::boxed::&lt;impl core::ops::generator::Generator for core::pin::Pin&lt;alloc::boxed::Box&lt;G&gt;&gt;&gt;::resume::hd76abb37f74b0a9c (0x55a20c1d4dd8)\n             at /home/christian/Workspace/contrib/rust/src/liballoc/boxed.rs:897\n      rustc_data_structures::box_region::PinnedGenerator&lt;I,A,R&gt;::access::hbeeff207cbbdc75b\n             at /home/christian/Workspace/contrib/rust/src/librustc_data_structures/box_region.rs:52\n      rustc_interface::passes::BoxedGlobalCtxt::access::h9b1575dd5e5b40d6\n             at /home/christian/Workspace/contrib/miri/&lt;::rustc_data_structures::box_region::declare_box_region_type macros&gt;:19\n      rustc_interface::passes::BoxedGlobalCtxt::enter::h7a7f03749629a8b5\n             at /home/christian/Workspace/contrib/rust/src/librustc_interface/passes.rs:803\n      &lt;miri::MiriCompilerCalls as rustc_driver::Callbacks&gt;::after_analysis::hb6707e96b5844de3\n             at src/bin/miri.rs:43\n   7: rustc_interface::interface::run_compiler_in_existing_thread_pool::h6e338a04d6764d6d (0x7f7419d2f7ce)\n   8: std::thread::local::LocalKey&lt;T&gt;::with::h4a03cecefd8dd030 (0x7f7419d37222)\n   9: scoped_tls::ScopedKey&lt;T&gt;::set::h549ab693e1140564 (0x7f7419d3cab1)\n  10: std::sys_common::backtrace::__rust_begin_short_backtrace::hb167da37f98141ab (0x7f7419d66428)\n  11: __rust_maybe_catch_panic (0x7f7418384dfa)\n  12: core::ops::function::FnOnce::call_once{{vtable.shim}}::h4d9f25aca7afcc7b (0x7f7419d31a99)\n  13: &lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once::hb025baad84174e4e (0x7f741837088f)\n  14: std::sys_common::thread::start_thread::h31fed19fe88dea46 (0x7f741834e9a0)\n  15: std::sys::unix::thread::Thread::new::thread_start::h1d763bf49ef30be4 (0x7f741837bd76)\n  16: start_thread (0x7f74182c157f)\n  17: __clone (0x7f74181d70e3)\n  18: &lt;unknown&gt; (0x0)\n</pre></div>",
        "id": 169304995,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828061
    },
    {
        "content": "<p>so <code>cast_from_ptr</code>, right?</p>",
        "id": 169305058,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828150
    },
    {
        "content": "<p>How can we be sure that the error came from the actual <code>err!(..)</code> inside it and not from <code>force_ptr</code>?</p>",
        "id": 169305118,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828228
    },
    {
        "content": "<p>oh</p>",
        "id": 169305141,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828296
    },
    {
        "content": "<p>forget it</p>",
        "id": 169305142,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828298
    },
    {
        "content": "<p>it's my fault I'm on the \"initialize ecx with 'MemoryExtra'\" branch</p>",
        "id": 169305145,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828320
    },
    {
        "content": "<p>plop!</p>",
        "id": 169305184,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828325
    },
    {
        "content": "<p>aha ;)</p>",
        "id": 169305185,
        "sender_full_name": "RalfJ",
        "timestamp": 1561828335
    },
    {
        "content": "<p>Hahahaha, I should have a \"jackass\" version for compile coding</p>",
        "id": 169305189,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828353
    },
    {
        "content": "<blockquote>\n<p>How can we be sure that the error came from the actual <code>err!(..)</code> inside it and not from <code>force_ptr</code>?</p>\n</blockquote>\n<p>check the line numbers</p>",
        "id": 169305191,
        "sender_full_name": "RalfJ",
        "timestamp": 1561828354
    },
    {
        "content": "<p>ok</p>",
        "id": 169305201,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828396
    },
    {
        "content": "<p>will recompile and see whats up</p>",
        "id": 169305202,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828404
    },
    {
        "content": "<blockquote>\n<p>Hahahaha, I should have a \"jackass\" version for compile coding</p>\n</blockquote>\n<p>Hello! I'm Christian and this is Jackass! On today's episode we'll se how to test a feature that is not implemented in the branch you're in</p>",
        "id": 169305254,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828454
    },
    {
        "content": "<p>as someone not watching much TV while growing up (is that a TV thing?)... this went over my head^^</p>",
        "id": 169305419,
        "sender_full_name": "RalfJ",
        "timestamp": 1561828738
    },
    {
        "content": "<p>you can apply my review feedback while you are at it ;)</p>",
        "id": 169305420,
        "sender_full_name": "RalfJ",
        "timestamp": 1561828738
    },
    {
        "content": "<p>but I can guess some of it from context :D</p>",
        "id": 169305421,
        "sender_full_name": "RalfJ",
        "timestamp": 1561828738
    },
    {
        "content": "<p>I was not a TV kid either</p>",
        "id": 169305486,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828884
    },
    {
        "content": "<p>but all my school buddies did watch it so I watch an episode or two. The show is a bunch of stupid guys doing crazy and dangerous stunts</p>",
        "id": 169305487,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828884
    },
    {
        "content": "<blockquote>\n<p>you can apply my review feedback while you are at it ;)</p>\n</blockquote>\n<p>I already did! In fact, I realized because I was going to do the change and then didn't found my code in the file...</p>",
        "id": 169305490,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561828911
    },
    {
        "content": "<p>^^</p>",
        "id": 169305536,
        "sender_full_name": "RalfJ",
        "timestamp": 1561828967
    },
    {
        "content": "<p>It worked</p>",
        "id": 169307004,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561831926
    },
    {
        "content": "<p>/me dances</p>",
        "id": 169307005,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561831929
    },
    {
        "content": "<p>I'm going to do a PR in miri with the new test</p>",
        "id": 169307114,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561832185
    },
    {
        "content": "<p>awesome!</p>",
        "id": 169307189,
        "sender_full_name": "RalfJ",
        "timestamp": 1561832353
    },
    {
        "content": "<p>just pushed the changes to the rustc PR branch</p>",
        "id": 169307192,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561832375
    },
    {
        "content": "<p>just r+'ed them :)</p>",
        "id": 169307356,
        "sender_full_name": "RalfJ",
        "timestamp": 1561832662
    },
    {
        "content": "<p>Hallo!</p>",
        "id": 169333125,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561887851
    },
    {
        "content": "<p>I removed the trailing whitespaces</p>",
        "id": 169333236,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561888085
    },
    {
        "content": "<p>I used to have that on my vim configuration but then I started using LSP for everything and I ended up removing the plugin I used to fix that kind of stuff</p>",
        "id": 169333243,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561888132
    },
    {
        "content": "<p><a href=\"https://github.com/christianpoveda/dotfiles/commit/643eb93f372d7d941d51f73f308a70aa7cd6e49e\" target=\"_blank\" title=\"https://github.com/christianpoveda/dotfiles/commit/643eb93f372d7d941d51f73f308a70aa7cd6e49e\">https://github.com/christianpoveda/dotfiles/commit/643eb93f372d7d941d51f73f308a70aa7cd6e49e</a> :P</p>",
        "id": 169333895,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561889433
    },
    {
        "content": "<p>@RalfJ should I continue with the next item in the intptrcast issue?</p>",
        "id": 169342559,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561906136
    },
    {
        "content": "<p>sure :D</p>",
        "id": 169342886,
        "sender_full_name": "RalfJ",
        "timestamp": 1561906768
    },
    {
        "content": "<p>\"partial reads from pointers\" is an interesting one, you'll see some new parts of rustc</p>",
        "id": 169342890,
        "sender_full_name": "RalfJ",
        "timestamp": 1561906783
    },
    {
        "content": "<p>however I dont have that much time for mentoring until July 11th... :/</p>",
        "id": 169342896,
        "sender_full_name": "RalfJ",
        "timestamp": 1561906801
    },
    {
        "content": "<p>also have you seen <a href=\"https://github.com/rust-lang/miri/pull/809\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/809\">https://github.com/rust-lang/miri/pull/809</a> ? :D</p>",
        "id": 169342934,
        "sender_full_name": "RalfJ",
        "timestamp": 1561906803
    },
    {
        "content": "<p>let's see if that works...</p>",
        "id": 169342946,
        "sender_full_name": "RalfJ",
        "timestamp": 1561906824
    },
    {
        "content": "<p>it actually might not because of my strict(er) alignment checks. well we'll see.</p>",
        "id": 169342952,
        "sender_full_name": "RalfJ",
        "timestamp": 1561906842
    },
    {
        "content": "<blockquote>\n<p>also have you seen <a href=\"https://github.com/rust-lang/miri/pull/809\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/809\">https://github.com/rust-lang/miri/pull/809</a> ? :D</p>\n</blockquote>\n<p>Ohh fancy</p>",
        "id": 169344145,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561909001
    },
    {
        "content": "<blockquote>\n<p>however I dont have that much time for mentoring until July 11th... :/</p>\n</blockquote>\n<p>That would be a nice exercise for my independence :P</p>",
        "id": 169344153,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561909032
    },
    {
        "content": "<blockquote>\n<p>\"partial reads from pointers\" is an interesting one, you'll see some new parts of rustc</p>\n</blockquote>\n<p>What does \"partial\" means in this context?</p>",
        "id": 169344211,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561909154
    },
    {
        "content": "<p>here's a piece of code for you, a test case for \"partially loading a pointer\":</p>\n<div class=\"codehilite\"><pre><span></span>let some_ptr = &amp;42;\nlet ptr_to_ptr = &amp;some_ptr as *const _ as *const u8;\nlet _val = *ptr_to_ptr;\n</pre></div>\n\n\n<p>this will currently fail to execute I think, even with all your stuff landed. it should work though.<br>\nthis is \"easy mode\", once that works you can come back and ask for \"hard mode\". ;)</p>\n<p>the key method that needs changing is <code>read_scalar</code> at <a href=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L313\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L313\">https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L313</a>.</p>",
        "id": 169344214,
        "sender_full_name": "RalfJ",
        "timestamp": 1561909170
    },
    {
        "content": "<p>what makes that test case nasty is that we are reading just one byte from a pointer... combined with how we store pointers in memory, that's a nasty special case.</p>",
        "id": 169344261,
        "sender_full_name": "RalfJ",
        "timestamp": 1561909215
    },
    {
        "content": "<p>in particular you can see the special case for <code>size == cx.data_layout().pointer_size</code> in the code I linked</p>",
        "id": 169344265,
        "sender_full_name": "RalfJ",
        "timestamp": 1561909237
    },
    {
        "content": "<p>Ohh so you have a pointer to N bytes and you cast to a pointer to M bytes with M &lt; N and then dereference it</p>",
        "id": 169344278,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561909269
    },
    {
        "content": "<p>the key part is that it's a pointer <em>to a pointer</em></p>",
        "id": 169344672,
        "sender_full_name": "RalfJ",
        "timestamp": 1561910001
    },
    {
        "content": "<p>that you cast to a pointer to <code>u8</code></p>",
        "id": 169344675,
        "sender_full_name": "RalfJ",
        "timestamp": 1561910009
    },
    {
        "content": "<p>and then dereferencing it reads only the first byte of the pointer that the pointer points to</p>",
        "id": 169344679,
        "sender_full_name": "RalfJ",
        "timestamp": 1561910026
    },
    {
        "content": "<p>so that should be <code>force_bits</code> and then <code>force_ptr</code> I suppose?</p>",
        "id": 169344682,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561910030
    },
    {
        "content": "<p>well the first thing is, how are pointers even stored in memory in Miri</p>",
        "id": 169344725,
        "sender_full_name": "RalfJ",
        "timestamp": 1561910050
    },
    {
        "content": "<p>take a look at <a href=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L17\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L17\">https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L17</a></p>",
        "id": 169344729,
        "sender_full_name": "RalfJ",
        "timestamp": 1561910081
    },
    {
        "content": "<p>you can see that we store a bunch of <code>u8</code> in <code>bytes</code></p>",
        "id": 169344732,
        "sender_full_name": "RalfJ",
        "timestamp": 1561910092
    },
    {
        "content": "<p>yes</p>",
        "id": 169344739,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561910111
    },
    {
        "content": "<p>but a <code>Pointer</code> consists of an <code>offset</code> and an <code>alloc_id</code> and more, that's at least 16 bytes of data and yet it only takes up 8 bytes of space (assuming 64bit)</p>",
        "id": 169344744,
        "sender_full_name": "RalfJ",
        "timestamp": 1561910128
    },
    {
        "content": "<p>so, where's the rest of the information of the Pointer?</p>",
        "id": 169344785,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561910196
    },
    {
        "content": "<p>or what is your point?</p>",
        "id": 169344843,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561910309
    },
    {
        "content": "<p>the rest is in the <code>relocations</code></p>",
        "id": 169344850,
        "sender_full_name": "RalfJ",
        "timestamp": 1561910335
    },
    {
        "content": "<p>so say we have an allocation (of size 8) that stores a pointer</p>",
        "id": 169344866,
        "sender_full_name": "RalfJ",
        "timestamp": 1561910374
    },
    {
        "content": "<p>that allocation is going to look as follows:<br>\n<code>bytes</code>, has size 8, stores the <code>offset</code> part of the pointer (using the target's endianess)<br>\n<code>relocations</code> (the type is <a href=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L541\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L541\">defined here</a>) is basically a hash map, and it stores <code>0: (alloc_id, tag)</code></p>",
        "id": 169344942,
        "sender_full_name": "RalfJ",
        "timestamp": 1561910470
    },
    {
        "content": "<p>this thing in relocations means \"at offset 0, we are storing a pointer; the next N bytes in <code>bytes</code> are the offset and here is the missing information\"</p>",
        "id": 169344945,
        "sender_full_name": "RalfJ",
        "timestamp": 1561910495
    },
    {
        "content": "<blockquote>\n<p>the next N bytes in <code>bytes</code> are the offset and here is the missing information\"</p>\n</blockquote>\n<p>that offset is the <code>offset</code> of the allocated pointer, right?</p>",
        "id": 169345118,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561910791
    },
    {
        "content": "<p>they are the <code>offset</code> field of the <code>Pointer</code></p>",
        "id": 169345453,
        "sender_full_name": "RalfJ",
        "timestamp": 1561911424
    },
    {
        "content": "<p>see <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/interpret/struct.Pointer.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/interpret/struct.Pointer.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/interpret/struct.Pointer.html</a></p>",
        "id": 169345458,
        "sender_full_name": "RalfJ",
        "timestamp": 1561911443
    },
    {
        "content": "<p>yep, that's what I meant :P</p>",
        "id": 169345460,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561911451
    },
    {
        "content": "<p>And the AllocId and the Tag are the missing information that <code>relocations</code> stores in this particular case</p>",
        "id": 169345502,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561911494
    },
    {
        "content": "<p>yes</p>",
        "id": 169346012,
        "sender_full_name": "RalfJ",
        "timestamp": 1561912579
    },
    {
        "content": "<p>(there is no other case^^)</p>",
        "id": 169346013,
        "sender_full_name": "RalfJ",
        "timestamp": 1561912587
    },
    {
        "content": "<p>Ok</p>",
        "id": 169346023,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561912636
    },
    {
        "content": "<p>in general of course an allocation can store pointers and \"raw\" data, so an allocation of size 40 might have an entry like <code>8: (alloc_id, tag)</code> in the relocations, indicating that the bytes <code>8..16</code> are actually a pointer (and the remaining bytes are \"normal\" bytes)</p>",
        "id": 169346024,
        "sender_full_name": "RalfJ",
        "timestamp": 1561912639
    },
    {
        "content": "<blockquote>\n<p>in general of course an allocation can store pointers and \"raw\" data, so an allocation of size 40 might have an entry like <code>8: (alloc_id, tag)</code> in the relocations, indicating that the bytes <code>8..16</code> are actually a pointer (and the remaining bytes are \"normal\" bytes)</p>\n</blockquote>\n<p>yeah that's what I thought when I said \"in this particular case\"</p>",
        "id": 169346080,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561912682
    },
    {
        "content": "<p>okay :)</p>",
        "id": 169346097,
        "sender_full_name": "RalfJ",
        "timestamp": 1561912753
    },
    {
        "content": "<p>So, when we do the ptr to ptr cast, what happens with the pointer's allocation?</p>",
        "id": 169346274,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561913049
    },
    {
        "content": "<p>nothing</p>",
        "id": 169346552,
        "sender_full_name": "RalfJ",
        "timestamp": 1561913606
    },
    {
        "content": "<p>a ptr to ptr cast just changes the type, and leaves the value and everything else unchanged</p>",
        "id": 169346555,
        "sender_full_name": "RalfJ",
        "timestamp": 1561913619
    },
    {
        "content": "<p>it's a NOP, really</p>",
        "id": 169346557,
        "sender_full_name": "RalfJ",
        "timestamp": 1561913622
    },
    {
        "content": "<p>So when you try to derefernce you're still getting the same address at the end but you end up reading less bytes</p>",
        "id": 169346599,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561913653
    },
    {
        "content": "<p>yes</p>",
        "id": 169346600,
        "sender_full_name": "RalfJ",
        "timestamp": 1561913679
    },
    {
        "content": "<p>and then, what is the real problem?</p>",
        "id": 169346671,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561913845
    },
    {
        "content": "<p>it means that when reading memory you cant just look at the <code>bytes</code>, you have to consider the <code>relocations</code> as well</p>",
        "id": 169347001,
        "sender_full_name": "RalfJ",
        "timestamp": 1561914371
    },
    {
        "content": "<p>and currently the only way we support to do that is when the read starts exactly where the relocation starts and has size 8</p>",
        "id": 169347006,
        "sender_full_name": "RalfJ",
        "timestamp": 1561914396
    },
    {
        "content": "<p>because then we can just make it a <code>Pointer</code></p>",
        "id": 169347007,
        "sender_full_name": "RalfJ",
        "timestamp": 1561914406
    },
    {
        "content": "<p>in any other case, you are reading one byte of the <em>offset</em> of the pointer, and that's the wrong thing to return, so we error instead</p>",
        "id": 169347015,
        "sender_full_name": "RalfJ",
        "timestamp": 1561914428
    },
    {
        "content": "<blockquote>\n<p>and currently the only way we support to do that is when the read starts exactly where the relocation starts and has size 8</p>\n</blockquote>\n<p>this is what <code>read_scalar</code> does, right?</p>",
        "id": 169347321,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561915042
    },
    {
        "content": "<p>I assume that's what <code>check_relocations</code> used for</p>",
        "id": 169347368,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561915094
    },
    {
        "content": "<p>exactly</p>",
        "id": 169347437,
        "sender_full_name": "RalfJ",
        "timestamp": 1561915244
    },
    {
        "content": "<p>So let me see If i understand</p>",
        "id": 169347559,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561915513
    },
    {
        "content": "<p>if we try to do a partial read</p>",
        "id": 169347560,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561915518
    },
    {
        "content": "<p>The size of what we are reading will be different from the original size of the pointer, so when we <code>check_relocations</code>is going to fail because the pointer in fact has rellocations with its tag and allocation id</p>",
        "id": 169347610,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561915600
    },
    {
        "content": "<p>I'm still confused with the sizes between the size of the pointers and the size of the pointees</p>",
        "id": 169347729,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1561915846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> , hey hi! I saw the perf regression when I changed mem_extra to mem in the tag methods, should I do the inlining change?</p>",
        "id": 169418115,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562004901
    },
    {
        "content": "<p>you can but it doesnt help</p>",
        "id": 169418316,
        "sender_full_name": "RalfJ",
        "timestamp": 1562004992
    },
    {
        "content": "<p>I already tried that in <a href=\"https://github.com/rust-lang/rust/pull/62264\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62264\">https://github.com/rust-lang/rust/pull/62264</a></p>",
        "id": 169418321,
        "sender_full_name": "RalfJ",
        "timestamp": 1562004995
    },
    {
        "content": "<p>Oh damn</p>",
        "id": 169418325,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562005000
    },
    {
        "content": "<p>What is the course of action there? revert the change?</p>",
        "id": 169418335,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562005016
    },
    {
        "content": "<p>I'm currently benchmarking that</p>",
        "id": 169418509,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005178
    },
    {
        "content": "<p>because I cant really believe this caused a regression^^</p>",
        "id": 169418518,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005190
    },
    {
        "content": "<p>hehehe</p>",
        "id": 169418569,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562005203
    },
    {
        "content": "<p>but if the revert confirms this (by being an improvement), I'll try only reverting the parts of the change that we did \"for consistency\"</p>",
        "id": 169418581,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005209
    },
    {
        "content": "<p>yeah that would be the tag methods only</p>",
        "id": 169418592,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562005222
    },
    {
        "content": "<p>if that fixes the problem, good for us. though I'd also really like to understand <em>why</em>.</p>",
        "id": 169418594,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005224
    },
    {
        "content": "<p>these perf things are the worst :/</p>",
        "id": 169418599,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005233
    },
    {
        "content": "<p>I spent <em>so much</em> time debugging perf issues in PRs that really shouldnt have any, its no fun. and takes a <em>lot</em> of time. and I dont really know what I am doing.</p>",
        "id": 169418618,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005260
    },
    {
        "content": "<p>I'm going to take some notes about the ptr to ptr cast to understand it better and I'll be back with questions</p>",
        "id": 169418673,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562005310
    },
    {
        "content": "<p>kk</p>",
        "id": 169418796,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005429
    },
    {
        "content": "<p>you can also first do the \"force_ptr when creating a non-ZST reference.\" thing if you want, that's easier. ;)</p>",
        "id": 169418891,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005471
    },
    {
        "content": "<p>Hehehe, no I want to tackle this. Thinking in a selfish way, my only benefit of this is learning how it works.</p>",
        "id": 169418957,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562005512
    },
    {
        "content": "<p>fair :D</p>",
        "id": 169419100,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005601
    },
    {
        "content": "<p>it's also not on the critical path to anything so you can have as much time as you want :)</p>",
        "id": 169419130,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005623
    },
    {
        "content": "<p>some of the other things I might do at some point to push ahead <a href=\"https://github.com/rust-lang/miri/issues/785\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/785\">https://github.com/rust-lang/miri/issues/785</a></p>",
        "id": 169419150,
        "sender_full_name": "RalfJ",
        "timestamp": 1562005638
    },
    {
        "content": "<p>this started when intptrcast landed</p>",
        "id": 169459078,
        "sender_full_name": "RalfJ",
        "timestamp": 1562052415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> hm... <a href=\"https://travis-ci.org/RalfJung/miri-test-libstd/builds/553141007?utm_medium=notification&amp;utm_source=email\" target=\"_blank\" title=\"https://travis-ci.org/RalfJung/miri-test-libstd/builds/553141007?utm_medium=notification&amp;utm_source=email\">https://travis-ci.org/RalfJung/miri-test-libstd/builds/553141007?utm_medium=notification&amp;utm_source=email</a></p>",
        "id": 169459079,
        "sender_full_name": "RalfJ",
        "timestamp": 1562052415
    },
    {
        "content": "<p>I'll investigate tonight ;)</p>",
        "id": 169459090,
        "sender_full_name": "RalfJ",
        "timestamp": 1562052426
    },
    {
        "content": "<p>I started looking at this and here is the trace </p>\n<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, src/librustc_errors/lib.rs:650:9\nstack backtrace:\n   0: &lt;unknown&gt;\n   1: &lt;unknown&gt;\n   2: &lt;unknown&gt;\n   3: &lt;unknown&gt;\n   4: &lt;unknown&gt;\n   5: &lt;unknown&gt;\n   6: &lt;unknown&gt;\n   7: &lt;unknown&gt;\n   8: &lt;unknown&gt;\n   9: &lt;unknown&gt;\n  10: &lt;unknown&gt;\n  11: &lt;unknown&gt;\n  12: &lt;unknown&gt;\n  13: &lt;rustc_mir::interpret::eval_context::InterpretCx&lt;miri::machine::Evaluator&gt; as miri::operator::EvalContextExt&gt;::ptr_op\n             at src/operator.rs:0\n  14: &lt;miri::machine::Evaluator as rustc_mir::interpret::machine::Machine&gt;::ptr_op\n             at src/machine.rs:170\n  15: rustc_mir::interpret::operator::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::binary_op\n             at /Users/christian/Workspace/contrib/rust/src/librustc_mir/interpret/operator.rs:309\n  16: rustc_mir::interpret::operator::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::binop_ignore_overflow\n             at /Users/christian/Workspace/contrib/rust/src/librustc_mir/interpret/operator.rs:34\n  17: rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::eval_rvalue_into_place\n             at /Users/christian/Workspace/contrib/rust/src/librustc_mir/interpret/step.rs:155\n  18: rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::statement\n             at /Users/christian/Workspace/contrib/rust/src/librustc_mir/interpret/step.rs:85\n  19: rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::step\n             at /Users/christian/Workspace/contrib/rust/src/librustc_mir/interpret/step.rs:61\n  20: rustc_mir::interpret::step::&lt;impl rustc_mir::interpret::eval_context::InterpretCx&lt;M&gt;&gt;::run\n             at /Users/christian/Workspace/contrib/rust/src/librustc_mir/interpret/step.rs:40\n  21: miri::eval::eval_main::{{closure}}\n             at src/eval.rs:185\n  22: miri::eval::eval_main\n             at src/eval.rs:184\n  23: &lt;miri::MiriCompilerCalls as rustc_driver::Callbacks&gt;::after_analysis::{{closure}}\n             at src/bin/miri.rs:50\n  24: rustc_interface::passes::BoxedGlobalCtxt::enter::{{closure}}::{{closure}}\n             at /Users/christian/Workspace/contrib/rust/src/librustc_interface/passes.rs:803\n  25: rustc::ty::context::tls::enter_global::{{closure}}\n             at /Users/christian/Workspace/contrib/rust/src/librustc/ty/context.rs:1963\n  26: rustc::ty::context::tls::enter_context::{{closure}}\n             at /Users/christian/Workspace/contrib/rust/src/librustc/ty/context.rs:1929\n  27: rustc::ty::context::tls::set_tlv\n             at /Users/christian/Workspace/contrib/rust/src/librustc/ty/context.rs:1862\n  28: rustc::ty::context::tls::enter_context\n             at /Users/christian/Workspace/contrib/rust/src/librustc/ty/context.rs:1928\n  29: rustc::ty::context::tls::enter_global\n             at /Users/christian/Workspace/contrib/rust/src/librustc/ty/context.rs:1962\n  30: rustc_interface::passes::BoxedGlobalCtxt::enter::{{closure}}\n             at /Users/christian/Workspace/contrib/rust/src/librustc_interface/passes.rs:803\n  31: rustc_interface::passes::BoxedGlobalCtxt::access::{{closure}}\n             at ./&lt;::rustc_data_structures::box_region::declare_box_region_type macros&gt;:17\n  32: &lt;unknown&gt;\n  33: alloc::boxed::&lt;impl core::ops::generator::Generator for core::pin::Pin&lt;alloc::boxed::Box&lt;G&gt;&gt;&gt;::resume\n             at /Users/christian/Workspace/contrib/rust/src/liballoc/boxed.rs:976\n  34: rustc_data_structures::box_region::PinnedGenerator&lt;I,A,R&gt;::access\n             at /Users/christian/Workspace/contrib/rust/src/librustc_data_structures/box_region.rs:52\n  35: rustc_interface::passes::BoxedGlobalCtxt::access\n             at ./&lt;::rustc_data_structures::box_region::declare_box_region_type macros&gt;:19\n  36: rustc_interface::passes::BoxedGlobalCtxt::enter\n             at /Users/christian/Workspace/contrib/rust/src/librustc_interface/passes.rs:803\n  37: &lt;miri::MiriCompilerCalls as rustc_driver::Callbacks&gt;::after_analysis\n             at src/bin/miri.rs:43\n  38: &lt;unknown&gt;\n  39: &lt;unknown&gt;\n  40: &lt;unknown&gt;\n  41: &lt;unknown&gt;\n  42: &lt;unknown&gt;\n  43: &lt;unknown&gt;\n  44: &lt;unknown&gt;\n  45: &lt;unknown&gt;\n  46: &lt;unknown&gt;\n  47: &lt;unknown&gt;\n  48: &lt;unknown&gt;\n  49: &lt;unknown&gt;\nquery stack during panic:\nend of query stack\nerror: aborting due to previous error\n</pre></div>",
        "id": 169511456,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562095521
    },
    {
        "content": "<p>So, it seems this is happening because <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/interpret/operator.rs#L309\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/interpret/operator.rs#L309\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/interpret/operator.rs#L309</a></p>",
        "id": 169511538,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562095567
    },
    {
        "content": "<p>Was not that the change that we decided to not make at the end?</p>",
        "id": 169511559,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562095590
    },
    {
        "content": "<p>theres some crucial debug info missing from that trace</p>",
        "id": 169512368,
        "sender_full_name": "RalfJ",
        "timestamp": 1562096230
    },
    {
        "content": "<p>like where in Miri this goes on^^</p>",
        "id": 169512375,
        "sender_full_name": "RalfJ",
        "timestamp": 1562096237
    },
    {
        "content": "<p>I can get you the miri log</p>",
        "id": 169512384,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562096247
    },
    {
        "content": "<p><code>src/operator.rs:0</code> :/</p>",
        "id": 169512386,
        "sender_full_name": "RalfJ",
        "timestamp": 1562096248
    },
    {
        "content": "<p><em>oh</em> I know whats going on</p>",
        "id": 169521557,
        "sender_full_name": "RalfJ",
        "timestamp": 1562103598
    },
    {
        "content": "<p>its fat ptr comparison</p>",
        "id": 169521567,
        "sender_full_name": "RalfJ",
        "timestamp": 1562103602
    },
    {
        "content": "<p><em>again</em></p>",
        "id": 169521607,
        "sender_full_name": "RalfJ",
        "timestamp": 1562103609
    },
    {
        "content": "<p>we cant do <code>to_scalar</code> for <code>Eq</code> and friends</p>",
        "id": 169521635,
        "sender_full_name": "RalfJ",
        "timestamp": 1562103644
    },
    {
        "content": "<p>I'll think about a fix... tomorrow^^</p>",
        "id": 169521699,
        "sender_full_name": "RalfJ",
        "timestamp": 1562103710
    },
    {
        "content": "<p>The version is just the commit hash, right?</p>",
        "id": 169590711,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562178469
    },
    {
        "content": "<p>yes</p>",
        "id": 169591086,
        "sender_full_name": "RalfJ",
        "timestamp": 1562178753
    },
    {
        "content": "<p>How come <code>std::mem::transmute</code> is being affected by the changes on explicit casts?</p>",
        "id": 169591311,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562178959
    },
    {
        "content": "<p>I thought <code>transmute</code> was an intrinsic</p>",
        "id": 169592442,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562179680
    },
    {
        "content": "<p>I have no idea</p>",
        "id": 169599424,
        "sender_full_name": "RalfJ",
        "timestamp": 1562185514
    },
    {
        "content": "<p>its likely a change in program state earlier that only surfaces there</p>",
        "id": 169599443,
        "sender_full_name": "RalfJ",
        "timestamp": 1562185527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> found one more nit^^ can you accept the suggestion at <a href=\"https://github.com/rust-lang/miri/pull/803#discussion_r300141552\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/803#discussion_r300141552\">https://github.com/rust-lang/miri/pull/803#discussion_r300141552</a> ? Then I'll r+ for real.</p>",
        "id": 169601731,
        "sender_full_name": "RalfJ",
        "timestamp": 1562187520
    },
    {
        "content": "<p>it is done</p>",
        "id": 169601829,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562187605
    },
    {
        "content": "<p>thanks!</p>",
        "id": 169601868,
        "sender_full_name": "RalfJ",
        "timestamp": 1562187658
    },
    {
        "content": "<p>It is good to see all those PRs advancing :P However I'm really curious about the <code>transmute</code> issue</p>",
        "id": 169602125,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562187903
    },
    {
        "content": "<p>uh... looks like the issue also occurs in Miri itself: <a href=\"https://travis-ci.com/rust-lang/miri/jobs/213103563\" target=\"_blank\" title=\"https://travis-ci.com/rust-lang/miri/jobs/213103563\">https://travis-ci.com/rust-lang/miri/jobs/213103563</a></p>",
        "id": 169602709,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188430
    },
    {
        "content": "<p>Yep, I wrote that in the PR comment</p>",
        "id": 169602769,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562188457
    },
    {
        "content": "<p>so either something went wrong when you tested it, or something else changed, or you get caught up in the fact that we now are testing way more code with intrptrcast enabled</p>",
        "id": 169602770,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188460
    },
    {
        "content": "<p>(we are now running basically the entire miri test suite with and without intptrcast, to get better coverage. that uncovered some issues, most of which I fixed with <a href=\"https://github.com/rust-lang/miri/pull/820\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/820\">https://github.com/rust-lang/miri/pull/820</a>)</p>",
        "id": 169602792,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188500
    },
    {
        "content": "<p>I remember that the miri tests passed in local with a custom rustc build with intptrcast for casts enabled</p>",
        "id": 169602812,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562188532
    },
    {
        "content": "<p>Including the ones that are failing now</p>",
        "id": 169602825,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562188549
    },
    {
        "content": "<p>those probably only ran with intrptrcast disabled back then</p>",
        "id": 169602886,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188567
    },
    {
        "content": "<p>i.e., our test suite was not good for finding intptrcast issues</p>",
        "id": 169602898,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188577
    },
    {
        "content": "<p>now it is better at that :D</p>",
        "id": 169602900,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188580
    },
    {
        "content": "<p>:P</p>",
        "id": 169602902,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562188582
    },
    {
        "content": "<p>Well, how do we start looking into this one?</p>",
        "id": 169602910,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562188593
    },
    {
        "content": "<p>it's a validation failure, for function types</p>",
        "id": 169602938,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188628
    },
    {
        "content": "<p>the code for that is in rustc, <code>librustc_mit/interpret/validation.rs</code> or so</p>",
        "id": 169602952,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188643
    },
    {
        "content": "<p>oh actually this looks very familiar</p>",
        "id": 169603018,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188687
    },
    {
        "content": "<p>I think one of my in-flight PRs fixes this</p>",
        "id": 169603020,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188693
    },
    {
        "content": "<p>namely, <a href=\"https://github.com/rust-lang/rust/pull/62245\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62245\">https://github.com/rust-lang/rust/pull/62245</a></p>",
        "id": 169603048,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188716
    },
    {
        "content": "<p>concretely, <a href=\"https://github.com/rust-lang/rust/pull/62245/files#diff-269a7510489262b796ff39a89b2dbdc2R459\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62245/files#diff-269a7510489262b796ff39a89b2dbdc2R459\">this change</a></p>",
        "id": 169603081,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188747
    },
    {
        "content": "<p>If you want I could fetch your changes and test what happens</p>",
        "id": 169603092,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562188760
    },
    {
        "content": "<p>it's basically a missing <code>force_ptr</code></p>",
        "id": 169603104,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188772
    },
    {
        "content": "<p>sure, why not</p>",
        "id": 169603105,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188774
    },
    {
        "content": "<p>I am going to go to sleep now ;)</p>",
        "id": 169603107,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188778
    },
    {
        "content": "<p>Sure, sleep tight :P</p>",
        "id": 169603112,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562188788
    },
    {
        "content": "<p>you could submit an emergency fix that replaces the <code>to_ptr</code> there with a <code>force_ptr</code>... but probably it makes more sense to wait for my thing to land, hoping review won't take too long</p>",
        "id": 169603175,
        "sender_full_name": "RalfJ",
        "timestamp": 1562188831
    },
    {
        "content": "<p>Hi @RalfJ, what changes does your PR has that fix the bug with transmute?</p>",
        "id": 169659823,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562258319
    },
    {
        "content": "<p>quoting myself:</p>\n<blockquote>\n<p>namely, <a href=\"https://github.com/rust-lang/rust/pull/62245/files#diff-269a7510489262b796ff39a89b2dbdc2R459\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62245/files#diff-269a7510489262b796ff39a89b2dbdc2R459\">this change</a></p>\n</blockquote>",
        "id": 169672273,
        "sender_full_name": "RalfJ",
        "timestamp": 1562276572
    },
    {
        "content": "<p>Should I continue with the partial reads? or should I wait for the current problems with casting to be solved?</p>",
        "id": 169711881,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1562336130
    },
    {
        "content": "<p>(sorry I'll be on low-communication mode for a week. important deadline coming up.)</p>",
        "id": 169725642,
        "sender_full_name": "RalfJ",
        "timestamp": 1562349430
    },
    {
        "content": "<p>I have a couple of questions</p>",
        "id": 170901111,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563202992
    },
    {
        "content": "<p>(when) should we revert the changes done by <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>  in <a href=\"https://github.com/rust-lang/miri/pull/803\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/803\">https://github.com/rust-lang/miri/pull/803</a>?</p>",
        "id": 170901273,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563203088
    },
    {
        "content": "<p>And the second one is about:</p>\n<blockquote>\n<p>it means that when reading memory you cant just look at the <code>bytes</code>, you have to consider the <code>relocations</code> as well</p>\n</blockquote>\n<p>this means that <a href=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L330\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L330\">https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L330</a> needs to be changed?</p>",
        "id": 170901916,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563203522
    },
    {
        "content": "<blockquote>\n<p>(when) should we revert the changes done by <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span>  in <a href=\"https://github.com/rust-lang/miri/pull/803\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/803\">https://github.com/rust-lang/miri/pull/803</a>?</p>\n</blockquote>\n<p>they have all been reverted already :)</p>",
        "id": 170980802,
        "sender_full_name": "RalfJ",
        "timestamp": 1563280354
    },
    {
        "content": "<blockquote>\n<p>And the second one is about:</p>\n<blockquote>\n<p>it means that when reading memory you cant just look at the <code>bytes</code>, you have to consider the <code>relocations</code> as well</p>\n</blockquote>\n<p>this means that <a href=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L330\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L330\">https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L330</a> needs to be changed?</p>\n</blockquote>\n<p>actually <code>get_bytes_with_undef_and_ptr</code> will likely already need changes. with size=1, that checks that no relocation overlaps with the \"edge\" of that access, but of course when accessing one byte of a pointer, there <em>will</em> be an overlap</p>",
        "id": 170980916,
        "sender_full_name": "RalfJ",
        "timestamp": 1563280444
    },
    {
        "content": "<p>I'm not sure I'm following</p>",
        "id": 170997305,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563290847
    },
    {
        "content": "<p>I guess I am not sure what the question is^^</p>",
        "id": 171002187,
        "sender_full_name": "RalfJ",
        "timestamp": 1563293941
    },
    {
        "content": "<p>So the question is, what am I supposed to do? :P</p>",
        "id": 171002213,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563293975
    },
    {
        "content": "<p>I thought that <code>read_target_uint</code> did the reading, but the actual bytes are extracted using <code>get_bytes_with_undef_and_ptr</code>,  right?</p>",
        "id": 171002338,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563294048
    },
    {
        "content": "<p>I'd say have a good look at <a href=\"http://alloc.rs\" target=\"_blank\" title=\"http://alloc.rs\">alloc.rs</a> and read the doc comments on what you find there, that should help understand how things are organized</p>",
        "id": 171002525,
        "sender_full_name": "RalfJ",
        "timestamp": 1563294159
    },
    {
        "content": "<p><code>get_bytes_with_undef_and_ptr</code> does some \"preliminary checking\" and then returns a byte slice</p>",
        "id": 171002540,
        "sender_full_name": "RalfJ",
        "timestamp": 1563294172
    },
    {
        "content": "<p>it is an internal helper function</p>",
        "id": 171002548,
        "sender_full_name": "RalfJ",
        "timestamp": 1563294178
    },
    {
        "content": "<p>did we have a testcase already that this change is supposed to make work? IMO that's always a good way to start for a new feature :)</p>",
        "id": 171002580,
        "sender_full_name": "RalfJ",
        "timestamp": 1563294201
    },
    {
        "content": "<blockquote>\n<p><code>get_bytes_with_undef_and_ptr</code> does some \"preliminary checking\" and then returns a byte slice</p>\n</blockquote>\n<p>but that byte slice contains the actual bytes from the allocation?</p>",
        "id": 171002591,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563294213
    },
    {
        "content": "<blockquote>\n<p>did we have a testcase already that this change is supposed to make work? IMO that's always a good way to start for a new feature :)</p>\n</blockquote>\n<p>yes, your ptr to ptr cast example</p>",
        "id": 171002599,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563294221
    },
    {
        "content": "<blockquote>\n<p>but that byte slice contains the actual bytes from the allocation?</p>\n</blockquote>\n<p>right. it does <em>not</em> contain the relocations.</p>",
        "id": 171002684,
        "sender_full_name": "RalfJ",
        "timestamp": 1563294256
    },
    {
        "content": "<p>there is also <code>get_bytes</code>, try understanding the difference between that and <code>get_bytes_with_undef_and_ptr</code> (the latter does fewer checks, expects the caller to make them)</p>",
        "id": 171002719,
        "sender_full_name": "RalfJ",
        "timestamp": 1563294286
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>but that byte slice contains the actual bytes from the allocation?</p>\n</blockquote>\n<p>right. it does <em>not</em> contain the relocations.</p>\n</blockquote>\n<p>So in the case of a pointer allocation it just has the offset</p>",
        "id": 171002721,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563294287
    },
    {
        "content": "<p>yes</p>",
        "id": 171002726,
        "sender_full_name": "RalfJ",
        "timestamp": 1563294293
    },
    {
        "content": "<blockquote>\n<p>yes, your ptr to ptr cast example</p>\n</blockquote>\n<p>great! try to understand where exactly in <code>alloc.rs</code> the error is raised</p>",
        "id": 171002758,
        "sender_full_name": "RalfJ",
        "timestamp": 1563294308
    },
    {
        "content": "<p>clearly that's code that has to change :D</p>",
        "id": 171002767,
        "sender_full_name": "RalfJ",
        "timestamp": 1563294314
    },
    {
        "content": "<p>hahahahaha</p>",
        "id": 171002772,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563294320
    },
    {
        "content": "<p>Ok I'm going to sync my fork with master and compile rustc to start messing with it</p>",
        "id": 171002963,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563294434
    },
    {
        "content": "<p>ah that reminds me I should check why miri does not build on master</p>",
        "id": 171003124,
        "sender_full_name": "RalfJ",
        "timestamp": 1563294533
    },
    {
        "content": "<p>maybe better sync with the version in <a href=\"https://github.com/rust-lang/miri/blob/master/rust-version\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/blob/master/rust-version\">https://github.com/rust-lang/miri/blob/master/rust-version</a> :D</p>",
        "id": 171003150,
        "sender_full_name": "RalfJ",
        "timestamp": 1563294549
    },
    {
        "content": "<p>ah, it just affects 2 compile-fail tests. doesn't matter much.</p>",
        "id": 171004095,
        "sender_full_name": "RalfJ",
        "timestamp": 1563295187
    },
    {
        "content": "<p>oh</p>",
        "id": 171004202,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563295227
    },
    {
        "content": "<p>well anyway I had to do the changes over master eventually, so I believe i can live with those 2 tests failing</p>",
        "id": 171004237,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563295257
    },
    {
        "content": "<p>sure</p>",
        "id": 171005275,
        "sender_full_name": "RalfJ",
        "timestamp": 1563296034
    },
    {
        "content": "<p>I started looking how <code>Allocations</code> work. I believe the docs for <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/interpret/struct.UndefMask.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/interpret/struct.UndefMask.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/mir/interpret/struct.UndefMask.html</a> could use some love (I could do that as a side task)</p>",
        "id": 171082551,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563373283
    },
    {
        "content": "<p><span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span></p>",
        "id": 171085862,
        "sender_full_name": "oli",
        "timestamp": 1563375563
    },
    {
        "content": "<p>Or maybe it's not so useful IDK</p>",
        "id": 171085907,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563375594
    },
    {
        "content": "<p>UndefMask is magic</p>",
        "id": 171085914,
        "sender_full_name": "oli",
        "timestamp": 1563375596
    },
    {
        "content": "<p>It def needs some docs</p>",
        "id": 171085982,
        "sender_full_name": "oli",
        "timestamp": 1563375607
    },
    {
        "content": "<p>I've been studying how to handle bitvectors to learn about compression so I'm in the mood right now hahaha</p>",
        "id": 171086154,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563375697
    },
    {
        "content": "<p>Is there a reason to not use the <code>BitSet</code> from <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/bit_set/index.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_data_structures/bit_set/index.html\">data_structures::bit_set</a>? In any case, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> suggested changing the name to <code>init_mask</code> to remove unfortunate name collision with the meaning of <code>undef</code> (which is not <code>uninit()</code> at all) in llvm.</p>",
        "id": 171087017,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563376290
    },
    {
        "content": "<p>Idk if BitSet is as optimized as UndefMask</p>",
        "id": 171087383,
        "sender_full_name": "oli",
        "timestamp": 1563376472
    },
    {
        "content": "<p>I'll put in on my list anyway to do it later</p>",
        "id": 171095471,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563382322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@Andreas Molzer</span> no idea. <code>UndefMask</code> predates me.^^</p>",
        "id": 171096715,
        "sender_full_name": "RalfJ",
        "timestamp": 1563383357
    },
    {
        "content": "<p>SoOooOOoo, I started reading why the ptr to ptr cast fails</p>",
        "id": 171096887,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563383495
    },
    {
        "content": "<p>well not the cast per se, the example</p>",
        "id": 171096893,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563383502
    },
    {
        "content": "<p><code>read_scalar</code> fails because <code>get_bytes_with_undef_and_ptr</code> fails (just like <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> said)</p>",
        "id": 171096974,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563383548
    },
    {
        "content": "<p>but at the end <code>get_bytes_with_undef_and_ptr</code> is just calling <code>get_bytes_internal</code> deciding to not fail when reading undefined or pointer bytes</p>",
        "id": 171097152,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563383684
    },
    {
        "content": "<p>except when there are relocations on the <em>edges</em> (And now I'm going to check that)</p>",
        "id": 171097197,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563383722
    },
    {
        "content": "<p>is this failing because reading the whole pointer in this case reads the relocation that its on the edge ?(Given that the vec just has one <code>u64</code>)</p>",
        "id": 171097321,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563383780
    },
    {
        "content": "<blockquote>\n<p>except when there are relocations on the <em>edges</em> (And now I'm going to check that)</p>\n</blockquote>\n<p>yes</p>",
        "id": 171097526,
        "sender_full_name": "RalfJ",
        "timestamp": 1563383926
    },
    {
        "content": "<p>I suppose that the relocation for a ptr is indexed by <code>0</code>, so that's the edge we are concerned about. It is possible that we should omit the check for the other edge?</p>\n<p>EDIT: wait</p>",
        "id": 171097737,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563384102
    },
    {
        "content": "<p>what is <code>check_relocation_edges</code> doing here: </p>\n<div class=\"codehilite\"><pre><span></span>        self.check_relocations(cx, ptr.offset(size, cx)?, Size::ZERO)?;\n</pre></div>\n\n\n<p>why is offsetting <code>ptr</code> instead of changing the <code>Size::ZERO</code> to go to the other edge?</p>\n<p>is the last argument the offset relative to the second argument?</p>",
        "id": 171098159,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563384390
    },
    {
        "content": "<p>Why is this check needed? I mean, why is it important to not have relocations on the edges of <code>bytes</code>?</p>",
        "id": 171175661,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563460270
    },
    {
        "content": "<p>I removed the check just to see what would happen and the example still fails in the same way. However, I am not sure where it is failing, here is the relevant part of the stack backtrace:</p>\n<div class=\"codehilite\"><pre><span></span>   0: backtrace::backtrace::trace::h52c09578e3caae4d (0x10a97e0b0)\n             at /Users/christian/Workspace/contrib/rust/src/libcore/ptr/mod.rs:175\n   1: backtrace::capture::Backtrace::new_unresolved::h60dd95aa9bbe6e2e (0x10a97bae8)\n             at /Users/christian/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.29/src/capture.rs:176\n   2: &lt;rustc::mir::interpret::error::InterpErrorInfo as core::convert::From&lt;rustc::mir::interpret::error::InterpError&lt;u64&gt;&gt;&gt;::from::h24fa728fd84817af (0x10a76905d)\n             at /Users/christian/Workspace/contrib/rust/src/librustc/mir/interpret/error.rs:212\n   3: rustc::mir::interpret::allocation::Allocation&lt;Tag,Extra&gt;::get_bytes_with_undef_and_ptr::h798a0727dc8638da (0x1076f1552)\n             at /Users/christian/Workspace/contrib/rust/src/librustc/mir/interpret/mod.rs:5\n   4: rustc::mir::interpret::allocation::Allocation&lt;Tag,Extra&gt;::read_scalar::ha577046c19e8cf4e (0x1076ed7b2)\n             at /Users/christian/Workspace/contrib/rust/src/librustc/mir/interpret/allocation.rs:321\n   5: rustc_mir::interpret::operand::&lt;impl rustc_mir::interpret::eval_context::InterpCx&lt;M&gt;&gt;::try_read_immediate::hb3114fb259748d70 (0x1075e0694)\n</pre></div>\n\n\n<p>So, from <code>3</code> we know that <code>get_bytes_with_undef_and_ptr</code>is still failing but then the trace goes into the error handling.</p>",
        "id": 171176183,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563460565
    },
    {
        "content": "<p>if you just remove the check, programs will just do utter garbage^^</p>",
        "id": 171176613,
        "sender_full_name": "RalfJ",
        "timestamp": 1563460838
    },
    {
        "content": "<p>they would read (parts of) the offset of a pointer and interpret that as raw bytes</p>",
        "id": 171176662,
        "sender_full_name": "RalfJ",
        "timestamp": 1563460867
    },
    {
        "content": "<p>how does that make any sense?</p>",
        "id": 171176668,
        "sender_full_name": "RalfJ",
        "timestamp": 1563460870
    },
    {
        "content": "<blockquote>\n<p>if you just remove the check, programs will just do utter garbage^^</p>\n</blockquote>\n<p>I am just testing to see what happens</p>",
        "id": 171176671,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563460875
    },
    {
        "content": "<blockquote>\n<p>they would read (parts of) the offset of a pointer and interpret that as raw bytes</p>\n</blockquote>\n<p>Wait, so the only purpose of checking for relocation in the edges is to check if the edges are just ptr offsets?</p>",
        "id": 171176874,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563461005
    },
    {
        "content": "<p>remember: the data stored in <code>bytes</code> is <em>not</em> the actual content of memory when there is a relocation!</p>",
        "id": 171181623,
        "sender_full_name": "RalfJ",
        "timestamp": 1563463981
    },
    {
        "content": "<p>it's just the offset part of the pointer</p>",
        "id": 171181638,
        "sender_full_name": "RalfJ",
        "timestamp": 1563463992
    },
    {
        "content": "<p>so the code makes sure that we never ever read stuff from <code>bytes</code> that has a relocation</p>",
        "id": 171181656,
        "sender_full_name": "RalfJ",
        "timestamp": 1563464007
    },
    {
        "content": "<p>but the only stuff from <code>bytes</code> with relocations should be pointer offsets, right?</p>",
        "id": 171181682,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563464035
    },
    {
        "content": "<p>and if there is a relocation at index 4 in the allocation, reading the byte at index 6 <em>does</em> overlap</p>",
        "id": 171181683,
        "sender_full_name": "RalfJ",
        "timestamp": 1563464038
    },
    {
        "content": "<p>Oh wait so when we are talking about <em>edges</em>, we are talking about the edges of a concrete region in <code>bytes</code>, not the whole vector</p>",
        "id": 171181846,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563464128
    },
    {
        "content": "<p>yes</p>",
        "id": 171183139,
        "sender_full_name": "RalfJ",
        "timestamp": 1563464893
    },
    {
        "content": "<p>we need pictures :/</p>",
        "id": 171183144,
        "sender_full_name": "RalfJ",
        "timestamp": 1563464896
    },
    {
        "content": "<p>so if an access reads from bytes 4..8, then we have to make sure that none of the bytes in there \"have\" a relocation</p>",
        "id": 171183239,
        "sender_full_name": "RalfJ",
        "timestamp": 1563464943
    },
    {
        "content": "<p>to \"have\" a relocation means that this byte is part of the <code>offset</code> of some pointer. this means that there exists a relocation at index I such that this byte is at index I+N where N in <code>0..8</code>.</p>",
        "id": 171183292,
        "sender_full_name": "RalfJ",
        "timestamp": 1563464976
    },
    {
        "content": "<p>so e.g. if there is a relocation at index 4, the bytes 4..12 \"have\" a relocation</p>",
        "id": 171183325,
        "sender_full_name": "RalfJ",
        "timestamp": 1563464991
    },
    {
        "content": "<p>the way we check this is in two parts: think about each relocation being a \"range\", and the access being a \"range\"</p>",
        "id": 171183404,
        "sender_full_name": "RalfJ",
        "timestamp": 1563465013
    },
    {
        "content": "<p>we first check if the \"edges\" of the access are \"inside\" a relocation range</p>",
        "id": 171183421,
        "sender_full_name": "RalfJ",
        "timestamp": 1563465025
    },
    {
        "content": "<p>and then we check if there is a relocation entirely \"inside\" the \"access range\"</p>",
        "id": 171183439,
        "sender_full_name": "RalfJ",
        "timestamp": 1563465040
    },
    {
        "content": "<p>the reason that the latter case is different is that it actually is allowed when you read a pointer! the former case (at the edges) is never allowed <em>currently</em></p>",
        "id": 171183473,
        "sender_full_name": "RalfJ",
        "timestamp": 1563465063
    },
    {
        "content": "<p>does this make sense?</p>",
        "id": 171183479,
        "sender_full_name": "RalfJ",
        "timestamp": 1563465066
    },
    {
        "content": "<blockquote>\n<p>we need pictures :/</p>\n</blockquote>\n<p>Let me get my whiteboard</p>",
        "id": 171184080,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563465439
    },
    {
        "content": "<p>Oh ok</p>",
        "id": 171185021,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563466039
    },
    {
        "content": "<blockquote>\n<p>we first check if the \"edges\" of the access are \"inside\" a relocation range</p>\n</blockquote>\n<p>This is an illegal access because this would mean you are reading some (but not all) of the bytes from the pointer offset.</p>\n<blockquote>\n<p>and then we check if there is a relocation entirely \"inside\" the \"access range\"</p>\n</blockquote>\n<p>This is fine because you are actually reading the whole offset and not just some part of it</p>",
        "id": 171185263,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563466215
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>we first check if the \"edges\" of the access are \"inside\" a relocation range</p>\n</blockquote>\n<p>This is an illegal access because this would mean you are reading some (but not all) of the bytes from the pointer offset.</p>\n</blockquote>\n<p>correct</p>",
        "id": 171235751,
        "sender_full_name": "RalfJ",
        "timestamp": 1563520910
    },
    {
        "content": "<blockquote>\n<p>This is fine because you are actually reading the whole offset and not just some part of it</p>\n</blockquote>\n<p>This is fine only because <code>read_scalar</code> <a href=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L336\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L336\">contains special code to handle relocations</a>!</p>",
        "id": 171235792,
        "sender_full_name": "RalfJ",
        "timestamp": 1563520933
    },
    {
        "content": "<p>otherwise it would still return the offset as raw bytes, which is never correct</p>",
        "id": 171235793,
        "sender_full_name": "RalfJ",
        "timestamp": 1563520944
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>This is fine because you are actually reading the whole offset and not just some part of it</p>\n</blockquote>\n<p>This is fine only because <code>read_scalar</code> <a href=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L336\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c06f80a3c6988d28db43f0cff3f35d9a005c3ad5/src/librustc/mir/interpret/allocation.rs#L336\">contains special code to handle relocations</a>!</p>\n</blockquote>\n<p>So it creates an actual pointer from the bytes containing the offset</p>",
        "id": 171236269,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563521557
    },
    {
        "content": "<p>and the information in the relocations of course</p>",
        "id": 171236274,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563521566
    },
    {
        "content": "<p>So let me recapitulate a little</p>",
        "id": 171236947,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563522426
    },
    {
        "content": "<p>The ptr to ptr cast is a noop, actually the problem is the dereferencing of such pointer because that  calls <code>read_scalar</code>.</p>",
        "id": 171237150,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563522716
    },
    {
        "content": "<p><code>read_scalar</code> currently fails because <code>get_bytes_internal</code> fails and this last method checks that we access the bytes of a pointer in a proper way</p>",
        "id": 171237671,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563523264
    },
    {
        "content": "<p>not sure what you refer to with the \"ptr to ptr cast\" here, but otherwise -- yes</p>",
        "id": 171248711,
        "sender_full_name": "RalfJ",
        "timestamp": 1563534943
    },
    {
        "content": "<blockquote>\n<p>not sure what you refer to with the \"ptr to ptr cast\" here, but otherwise -- yes</p>\n</blockquote>\n<p>Oh I mean, in your example you are casting a pointer to a pointer.</p>",
        "id": 171260013,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563545176
    },
    {
        "content": "<p>I believe there is something else is failing because when I tried to disable the edges (<a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/interpret/allocation.rs#L166\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/interpret/allocation.rs#L166\">https://github.com/rust-lang/rust/blob/master/src/librustc/mir/interpret/allocation.rs#L166</a>) check just to see what would happen when I ran your example, I got an error in <code>get_bytes_with_undef_and_ptr</code> anyway</p>",
        "id": 171260771,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563545734
    },
    {
        "content": "<p>There is just one different check done and it is the <code>AllocationExtra</code> check, but that's just related to stacked borrows, right?</p>",
        "id": 171265159,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563548813
    },
    {
        "content": "<blockquote>\n<p>Oh I mean, in your example you are casting a pointer to a pointer.</p>\n</blockquote>\n<p>ah, but that's just to be able to do a 1-byte access that loads part of a pointer value</p>",
        "id": 171325454,
        "sender_full_name": "RalfJ",
        "timestamp": 1563625431
    },
    {
        "content": "<blockquote>\n<p>I believe there is something else is failing because when I tried to disable the edges (<a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/interpret/allocation.rs#L166\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/mir/interpret/allocation.rs#L166\">https://github.com/rust-lang/rust/blob/master/src/librustc/mir/interpret/allocation.rs#L166</a>) check just to see what would happen when I ran your example, I got an error in <code>get_bytes_with_undef_and_ptr</code> anyway</p>\n</blockquote>\n<p>probably the \"interior relocation\" check fired?</p>",
        "id": 171325500,
        "sender_full_name": "RalfJ",
        "timestamp": 1563625454
    },
    {
        "content": "<p>that one is at <a href=\"https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src/librustc/mir/interpret/allocation.rs#L334\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src/librustc/mir/interpret/allocation.rs#L334\">https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src/librustc/mir/interpret/allocation.rs#L334</a></p>",
        "id": 171325506,
        "sender_full_name": "RalfJ",
        "timestamp": 1563625472
    },
    {
        "content": "<blockquote>\n<p>that one is at <a href=\"https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src/librustc/mir/interpret/allocation.rs#L334\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src/librustc/mir/interpret/allocation.rs#L334\">https://github.com/rust-lang/rust/blob/f69b07144a151f46aaee1b6230ba4160e9394562/src/librustc/mir/interpret/allocation.rs#L334</a></p>\n</blockquote>\n<p>But the error is still inside <code>get_bytes_with_undef_and_ptr</code></p>",
        "id": 171335796,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563644216
    },
    {
        "content": "<p>In fact I don't know, let me retry</p>",
        "id": 171336000,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563644558
    },
    {
        "content": "<p>where exactly is it?</p>",
        "id": 171342001,
        "sender_full_name": "RalfJ",
        "timestamp": 1563655668
    },
    {
        "content": "<p>exactly where you said, It took a while to recompile</p>",
        "id": 171346322,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563664422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, I would like to ask you something. When we do the partial read, shouldn't we read the whole pointer and then do the proper handling of the partial read?</p>",
        "id": 171443763,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563811604
    },
    {
        "content": "<p>If I understood correctly, right now rust is trying to access partially the pointer and that is why the edges check is failing.</p>",
        "id": 171443797,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563811644
    },
    {
        "content": "<p>yeah, you will have to read the entire<code>offset</code> at least, cast it to int, and then extract the correct sub-range from that</p>",
        "id": 171501495,
        "sender_full_name": "RalfJ",
        "timestamp": 1563872881
    },
    {
        "content": "<p>so I need to change <code>get_bytes_with_undef_and_ptr</code>? or should I change the parameters for <code>read_scalar</code></p>",
        "id": 171524593,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563892680
    },
    {
        "content": "<p>TBH for this one I dont have a complete strategy in my mind, I thought I'd let you figure something out?<br>\nmy gut feeling is: make <code>get_bytes_with_undef_and_ptr</code> not check for edges, <em>carefully review all existing users and add the edge check there</em>, and then the rest can be done locally in <code>read_scalar</code></p>",
        "id": 171559759,
        "sender_full_name": "RalfJ",
        "timestamp": 1563917503
    },
    {
        "content": "<p>I could modify <code>get_bytes_with_undef_and_ptr</code> to have a parameter to decide if <em>edges</em> should be checked or not</p>",
        "id": 171610509,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563978411
    },
    {
        "content": "<p>what other places call that method? maybe they should just do the edge check themselves</p>",
        "id": 171624167,
        "sender_full_name": "RalfJ",
        "timestamp": 1563988253
    },
    {
        "content": "<p>maybe the entire edge-vs-interior distinction just does not make sense any more</p>",
        "id": 171624182,
        "sender_full_name": "RalfJ",
        "timestamp": 1563988265
    },
    {
        "content": "<blockquote>\n<p>what other places call that method? maybe they should just do the edge check themselves</p>\n</blockquote>\n<p>I'm going to check this in a moment</p>",
        "id": 171632254,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563994036
    },
    {
        "content": "<p>We have two other places calling that method, so probably doing the check inside each caller is a better idea:<br>\n- <a href=\"https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src/librustc_mir/interpret/memory.rs#L811\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src/librustc_mir/interpret/memory.rs#L811\">https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src/librustc_mir/interpret/memory.rs#L811</a><br>\n-  <a href=\"https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src/librustc/mir/interpret/allocation.rs#L263\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src/librustc/mir/interpret/allocation.rs#L263\">https://github.com/rust-lang/rust/blob/27a6a304e2baaabca88059753f020377f2476978/src/librustc/mir/interpret/allocation.rs#L263</a></p>",
        "id": 171635430,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563996499
    },
    {
        "content": "<p>hm... in principle at least <code>copy</code> should probably also support copying parts of a pointer. but the challenge will be to find a nice interface that makes all of that possible and not messy.</p>",
        "id": 171635603,
        "sender_full_name": "RalfJ",
        "timestamp": 1563996653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  eventually we probably want a type like <code>Byte</code> in <a href=\"https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html\">https://www.ralfj.de/blog/2018/07/24/pointers-and-bytes.html</a> ^^</p>",
        "id": 171635637,
        "sender_full_name": "RalfJ",
        "timestamp": 1563996686
    },
    {
        "content": "<p>I'm going to start by migrating the check outside the method and check that nothing blews up.</p>",
        "id": 171635728,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563996754
    },
    {
        "content": "<p>Does that sounds good to you?</p>",
        "id": 171635736,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563996770
    },
    {
        "content": "<p>sounds good, yes!</p>",
        "id": 171635846,
        "sender_full_name": "RalfJ",
        "timestamp": 1563996855
    },
    {
        "content": "<p>Ok great! I just did the changes and I'm running the tests</p>",
        "id": 171636609,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1563997452
    },
    {
        "content": "<p>Can't we just ptr to int and grab the bytes we need?</p>",
        "id": 171641683,
        "sender_full_name": "oli",
        "timestamp": 1564001089
    },
    {
        "content": "<p>we dont have a <code>Memory</code> :/</p>",
        "id": 171644676,
        "sender_full_name": "RalfJ",
        "timestamp": 1564003615
    },
    {
        "content": "<p>Oh, this is in <code>Allocation</code>?</p>",
        "id": 171644700,
        "sender_full_name": "oli",
        "timestamp": 1564003647
    },
    {
        "content": "<p>Hmm, yea any API that supports it would be a mess or inefficient in the \"everything is defined bytes\" situation, which is the commkn situation</p>",
        "id": 171644831,
        "sender_full_name": "oli",
        "timestamp": 1564003770
    },
    {
        "content": "<blockquote>\n<p>Oh, this is in <code>Allocation</code>?</p>\n</blockquote>\n<p>yeah, it's in <code>read_scalar</code></p>",
        "id": 171670604,
        "sender_full_name": "RalfJ",
        "timestamp": 1564040826
    },
    {
        "content": "<p>I think for a non-hacky solution we probably first need an \"intermediate representation\" that can actually represent any single byte of memory. That's not how we <em>store</em> memory, but it can be how we <em>access</em> it. So <code>get_bytes</code> would yield an iterator (or take a closure that takes an iterator) of things that are either a <code>u8</code>, or <code>Undef</code>, or \"byte n of a <code>Pointer</code>\".<br>\nor is that overkill?</p>",
        "id": 171670706,
        "sender_full_name": "RalfJ",
        "timestamp": 1564040992
    },
    {
        "content": "<p>Need some similar thing in llvm codegen as well when <code>bytes</code> etc are to become private. It currently iterates over the relocations and all bytes on its own.</p>",
        "id": 171673036,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1564043666
    },
    {
        "content": "<p>it can use <code>get_bytes_with_undef_and_ptr</code> for the bytes</p>",
        "id": 171673781,
        "sender_full_name": "RalfJ",
        "timestamp": 1564044555
    },
    {
        "content": "<p>and maybe we can open read-only access to the relocations</p>",
        "id": 171673787,
        "sender_full_name": "RalfJ",
        "timestamp": 1564044571
    },
    {
        "content": "<p>I don't think it needs the \"abstract byte\" stuff</p>",
        "id": 171673792,
        "sender_full_name": "RalfJ",
        "timestamp": 1564044579
    },
    {
        "content": "<p>I was able to move the edges check outside <code>get_bytes_with_bla_bla</code>  without blowing up the compiler to smithereens:<br>\n<a href=\"https://github.com/rust-lang/rust/compare/master...christianpoveda:partial-reads?expand=1\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/compare/master...christianpoveda:partial-reads?expand=1\">https://github.com/rust-lang/rust/compare/master...christianpoveda:partial-reads?expand=1</a></p>",
        "id": 171702334,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564069424
    },
    {
        "content": "<p>Now I am going to start changing <code>read_scalar</code></p>",
        "id": 171703416,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564070286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, the <code>size</code> received in <code>read_scalar</code> is the number of bytes we want to read from the pointer?  or the number of bytes we want to read from the  pointee?</p>",
        "id": 171952464,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564412068
    },
    {
        "content": "<p>also I just saw <a href=\"https://github.com/rust-lang/miri/issues/841\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/841\">https://github.com/rust-lang/miri/issues/841</a>, should I freeze partial reads then?</p>",
        "id": 171954138,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564413088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> I am confused by that question. it's the number of bytes to be read from memory.</p>",
        "id": 171956771,
        "sender_full_name": "RalfJ",
        "timestamp": 1564414841
    },
    {
        "content": "<blockquote>\n<p>also I just saw <a href=\"https://github.com/rust-lang/miri/issues/841\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/841\">https://github.com/rust-lang/miri/issues/841</a>, should I freeze partial reads then?</p>\n</blockquote>\n<p>not sure, do you have a concrete plan to proceed? I am not sure yet how feasible my plan in that issue is</p>",
        "id": 171956800,
        "sender_full_name": "RalfJ",
        "timestamp": 1564414861
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>also I just saw <a href=\"https://github.com/rust-lang/miri/issues/841\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/841\">https://github.com/rust-lang/miri/issues/841</a>, should I freeze partial reads then?</p>\n</blockquote>\n<p>not sure, do you have a concrete plan to proceed? I am not sure yet how feasible my plan in that issue is</p>\n</blockquote>\n<p>Not yet, I am trying to see what happens if I disable the checks inside <code>read_scalar</code></p>",
        "id": 171956960,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564414954
    },
    {
        "content": "<p>I think partial reads might be more than I am able to understand and fix right now.</p>",
        "id": 172047945,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564500203
    },
    {
        "content": "<p>I see. That's okay. You already did a lot for intptrcast :)</p>",
        "id": 172063058,
        "sender_full_name": "RalfJ",
        "timestamp": 1564510991
    },
    {
        "content": "<p>Is it there anything else that needs to be done?</p>",
        "id": 172074289,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564519105
    },
    {
        "content": "<p>Rust has almost 5k open issues, there's lots to be done. ;) There are <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AE-mentor\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AE-mentor\">\"E-mentor\"</a> and \"E-easy\"/\"E-medium\" labels to find issues where people can guide you.</p>",
        "id": 172076709,
        "sender_full_name": "RalfJ",
        "timestamp": 1564520959
    },
    {
        "content": "<p>On the Miri side you could scroll through <a href=\"https://github.com/rust-lang/miri/issues\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues\">https://github.com/rust-lang/miri/issues</a> and see if anything peeks your interest.<br>\nGood issues can probably be found in the A-shims category (<a href=\"https://github.com/rust-lang/miri/issues?q=is%3Aissue+is%3Aopen+label%3AA-shims\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues?q=is%3Aissue+is%3Aopen+label%3AA-shims\">https://github.com/rust-lang/miri/issues?q=is%3Aissue+is%3Aopen+label%3AA-shims</a>); those tend to be fairly local and not interact with tons of stuff. Depend on what kind of experience you have elsehwere in the Rust ecosystem, you might like <a href=\"https://github.com/rust-lang/miri/issues/546\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/546\">https://github.com/rust-lang/miri/issues/546</a>. If you want something more open-ended where you will have to do your own research and there's nobody to tell you all the answers, maybe you'll like <a href=\"https://github.com/rust-lang/miri/issues/739\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/739\">https://github.com/rust-lang/miri/issues/739</a>.</p>",
        "id": 172076848,
        "sender_full_name": "RalfJ",
        "timestamp": 1564521071
    },
    {
        "content": "<p>I meant, is there anything else to do in intptrcast? What about those bullet points: <a href=\"https://github.com/rust-lang/miri/issues/224#issue-239164007\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/224#issue-239164007\">https://github.com/rust-lang/miri/issues/224#issue-239164007</a> ?</p>",
        "id": 172133358,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564584038
    },
    {
        "content": "<p>I suppose \" Exploit \"real\" pointer alignment for alignment checks, but warn when we do.<br>\n\" is checked by your last comment. What about checking where else to use <code>force_ptr</code>/<code>force_bits</code>?</p>",
        "id": 172133496,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564584137
    },
    {
        "content": "<blockquote>\n<p>I suppose \" Exploit real pointer alignment for alignment checks, but warn when we do. \" is checked by your last comment.</p>\n</blockquote>\n<p>no it's not. but this first requires coming up with a plan for <a href=\"https://github.com/rust-lang/miri/issues/797\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/797\">https://github.com/rust-lang/miri/issues/797</a>. (or just implementing some hacky first version that can later be rewritten when we have a plan.^^)</p>",
        "id": 172134929,
        "sender_full_name": "RalfJ",
        "timestamp": 1564585145
    },
    {
        "content": "<p>Ha, ok I would wait</p>",
        "id": 172134974,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564585179
    },
    {
        "content": "<blockquote>\n<p>What about checking where else to use force_ptr/force_bits?</p>\n</blockquote>\n<p>That still needs to be done, but I think it needs someone who has enough experience to look at each and every use site of these methods and figure out which is the right method.</p>",
        "id": 172134984,
        "sender_full_name": "RalfJ",
        "timestamp": 1564585192
    },
    {
        "content": "<p>ok</p>",
        "id": 172135002,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564585201
    },
    {
        "content": "<p>if I end up having to tell you the answer for every call site, it's not really saving any time compared to me doing it myself, I am afraid. ;)</p>",
        "id": 172135075,
        "sender_full_name": "RalfJ",
        "timestamp": 1564585218
    },
    {
        "content": "<p>sure</p>",
        "id": 172135098,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564585236
    },
    {
        "content": "<p>also the way this looks will change with <a href=\"https://github.com/rust-lang/miri/issues/841\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/841\">https://github.com/rust-lang/miri/issues/841</a></p>",
        "id": 172135107,
        "sender_full_name": "RalfJ",
        "timestamp": 1564585243
    },
    {
        "content": "<p>Well it seems it is time for me to move on :P</p>",
        "id": 172135340,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564585410
    },
    {
        "content": "<blockquote>\n<p>On the Miri side you could scroll through <a href=\"https://github.com/rust-lang/miri/issues\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues\">https://github.com/rust-lang/miri/issues</a> and see if anything peeks your interest.<br>\nGood issues can probably be found in the A-shims category (<a href=\"https://github.com/rust-lang/miri/issues?q=is%3Aissue+is%3Aopen+label%3AA-shims\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues?q=is%3Aissue+is%3Aopen+label%3AA-shims\">https://github.com/rust-lang/miri/issues?q=is%3Aissue+is%3Aopen+label%3AA-shims</a>); those tend to be fairly local and not interact with tons of stuff. Depend on what kind of experience you have elsehwere in the Rust ecosystem, you might like <a href=\"https://github.com/rust-lang/miri/issues/546\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/546\">https://github.com/rust-lang/miri/issues/546</a>. If you want something more open-ended where you will have to do your own research and there's nobody to tell you all the answers, maybe you'll like <a href=\"https://github.com/rust-lang/miri/issues/739\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/issues/739\">https://github.com/rust-lang/miri/issues/739</a>.</p>\n</blockquote>\n<p>I'll check something here later</p>",
        "id": 172135411,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564585446
    },
    {
        "content": "<blockquote>\n<p>Well it seems it is time for me to move on :P</p>\n</blockquote>\n<p>thanks a lot for your help with intptrcast, this helped move Miri to a whole new level :)</p>",
        "id": 172145323,
        "sender_full_name": "RalfJ",
        "timestamp": 1564593120
    },
    {
        "content": "<p>Keep me informed if some new developments happen for intptrcast, I'll be more than happy to help :)</p>",
        "id": 172159603,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1564602785
    },
    {
        "content": "<p>will do :)</p>",
        "id": 172166410,
        "sender_full_name": "RalfJ",
        "timestamp": 1564607555
    }
]