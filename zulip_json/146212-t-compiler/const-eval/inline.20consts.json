[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <a href=\"https://github.com/rust-lang/rust/issues/76001#issuecomment-753371660\">https://github.com/rust-lang/rust/issues/76001#issuecomment-753371660</a></p>",
        "id": 221366798,
        "sender_full_name": "lcnr",
        "timestamp": 1609531956
    },
    {
        "content": "<p>i feel like there are two incompatible ideas for const blocks here which I would like to <del>unify</del><em>discuss</em></p>",
        "id": 221366876,
        "sender_full_name": "lcnr",
        "timestamp": 1609532045
    },
    {
        "content": "<p>the current implementation treats inline consts like other anonymous constants, e.g. array lengths, with some smaller differences</p>",
        "id": 221366911,
        "sender_full_name": "lcnr",
        "timestamp": 1609532116
    },
    {
        "content": "<p>this means that we currently require them to be const evaluatable during typeck</p>",
        "id": 221366955,
        "sender_full_name": "lcnr",
        "timestamp": 1609532162
    },
    {
        "content": "<p>an example here is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=edcc772fcb11a5f4e26a1cc66320c161\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=edcc772fcb11a5f4e26a1cc66320c161</a></p>",
        "id": 221366979,
        "sender_full_name": "lcnr",
        "timestamp": 1609532181
    },
    {
        "content": "<p>once <code>feature(const_evaluatable_checked)</code> gets stabilized, we pretty much get complex expressions in inline consts for free</p>",
        "id": 221366994,
        "sender_full_name": "lcnr",
        "timestamp": 1609532225
    },
    {
        "content": "<p>but just as we were able to stabilize <code>min_const_generics</code> without <code>const_evaluatable_checked</code>, we can stabilize inline consts in the same way</p>",
        "id": 221367004,
        "sender_full_name": "lcnr",
        "timestamp": 1609532261
    },
    {
        "content": "<p>this is the idea that I had in mind. This is fundamentally incompatible with treating inline consts like promoteds as we have to be able to access their mir during typeck for this. That isn't possible if we typeck them as ordinary exprs in their surrounding context</p>",
        "id": 221367074,
        "sender_full_name": "lcnr",
        "timestamp": 1609532379
    },
    {
        "content": "<p>now implementing the remaining issues here isn't too much effort except for one small(ish) annoyance</p>",
        "id": 221367142,
        "sender_full_name": "lcnr",
        "timestamp": 1609532453
    },
    {
        "content": "<p>we cannot have the content of const blocks influence the type inference of the containing body</p>",
        "id": 221367157,
        "sender_full_name": "lcnr",
        "timestamp": 1609532496
    },
    {
        "content": "<p>so the following would fail to compile</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">ty_eq</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"k\">u32</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">ty_eq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221367224,
        "sender_full_name": "lcnr",
        "timestamp": 1609532636
    },
    {
        "content": "<p>because we can't look into the const block while typechecking main and therefore assume <code>x</code> to be of type <code>i32</code> here.</p>",
        "id": 221367271,
        "sender_full_name": "lcnr",
        "timestamp": 1609532680
    },
    {
        "content": "<p>using your approach based on promotion would allow this however</p>",
        "id": 221367278,
        "sender_full_name": "lcnr",
        "timestamp": 1609532703
    },
    {
        "content": "<p>/me reading the RFC again to check if anyone thought of this before or if those two concepts were thrown together</p>",
        "id": 221367413,
        "sender_full_name": "lcnr",
        "timestamp": 1609532953
    },
    {
        "content": "<p>so the rfc expects us to use generic params in inline consts in the future and doesn't go into any details regarding type inference</p>",
        "id": 221367487,
        "sender_full_name": "lcnr",
        "timestamp": 1609533113
    },
    {
        "content": "<blockquote>\n<p>AnonConst are used to represent constant expressions, so they are used for array lengths and associated constants.</p>\n</blockquote>\n<p>Those are two very different beasts from my perspective, so I am not sure how to make sense of this. associated consts are items; array lengths are not. or so I thought.</p>",
        "id": 221367763,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533507
    },
    {
        "content": "<p><code>const ASSOC: ty = expr;</code> is <del>internally represented</del><em>can be thought of</em> as <code>const ASSOC: ty = &lt;anon const&gt;;</code></p>",
        "id": 221367788,
        "sender_full_name": "lcnr",
        "timestamp": 1609533546
    },
    {
        "content": "<p>so the anon const is the actual expression of an associated const, does that make more sense?</p>",
        "id": 221367802,
        "sender_full_name": "lcnr",
        "timestamp": 1609533574
    },
    {
        "content": "<p>hm... not sure what exactly this means. but it doesn't matter all that much to me I guess as I am working on the MIR level.</p>",
        "id": 221367858,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533619
    },
    {
        "content": "<p>I care very little for the layers that come before that ;)</p>",
        "id": 221367864,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533627
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 221367869,
        "sender_full_name": "lcnr",
        "timestamp": 1609533633
    },
    {
        "content": "<p>hm, so to sum up the above rambling, I do not think using your idea and employing promotion for this is the right choice</p>",
        "id": 221367907,
        "sender_full_name": "lcnr",
        "timestamp": 1609533698
    },
    {
        "content": "<p>hm... I think requiring up-front proof that all inline consts will succeed to evaluate is waaay overdoing it^^</p>",
        "id": 221367956,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533747
    },
    {
        "content": "<p>there is a trade-off here as \"my\" approach restricts type inference which might be annoying in - i expect rare - cases</p>",
        "id": 221367960,
        "sender_full_name": "lcnr",
        "timestamp": 1609533758
    },
    {
        "content": "<p>yeah but I am not very concerned about that</p>",
        "id": 221367968,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533770
    },
    {
        "content": "<p>my concern is more around all the other things people want to do with consts, and it being utterly infeasible to prove upfront that there wont be a panic</p>",
        "id": 221367978,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533791
    },
    {
        "content": "<p>yeah, but the same issue is also true for array lengths and stuff</p>",
        "id": 221367980,
        "sender_full_name": "lcnr",
        "timestamp": 1609533811
    },
    {
        "content": "<p>so i want to be consistent here</p>",
        "id": 221367983,
        "sender_full_name": "lcnr",
        "timestamp": 1609533817
    },
    {
        "content": "<p>we might not end up requiring const wf bounds everywhere</p>",
        "id": 221367985,
        "sender_full_name": "lcnr",
        "timestamp": 1609533827
    },
    {
        "content": "<p>in particular I want <code>const</code> blocks to cover this usecase: <a href=\"https://github.com/rodrimati1992/abi_stable_crates/issues/46\">https://github.com/rodrimati1992/abi_stable_crates/issues/46</a></p>",
        "id": 221367987,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533839
    },
    {
        "content": "<p>and I very much doubt that that is possible with \"your\" approach</p>",
        "id": 221368026,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533848
    },
    {
        "content": "<p>but also, covering that usecase somehow is pretty much a must if we want to ever stop promoting <code>const fn</code> calls in <code>const</code>/<code>static</code> initializers</p>",
        "id": 221368035,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/inline.20consts/near/221367980\">said</a>:</p>\n<blockquote>\n<p>yeah, but the same issue is also true for array lengths and stuff</p>\n</blockquote>\n<p>dunno, array lengths \"feel\" different for me because they are \"type system level stuff\". which promtoeds and (in my head) inline consts are not. so I can see some justification to treating them differently.</p>",
        "id": 221368050,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533905
    },
    {
        "content": "<p>this feels similar to dependent type theories that do permit diverging expressions, but ensure they do not arise in the type level</p>",
        "id": 221368066,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533938
    },
    {
        "content": "<p>(I'm just doing some brain dumping here; I haven't though much about <code>const_evaluatable_checked</code> before so I am certainly not familiar with the fine points)</p>",
        "id": 221368114,
        "sender_full_name": "RalfJ",
        "timestamp": 1609533999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/inline.20consts/near/221368050\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/inline.20consts/near/221367980\">said</a>:</p>\n<blockquote>\n<p>yeah, but the same issue is also true for array lengths and stuff</p>\n</blockquote>\n<p>dunno, array lengths \"feel\" different for me because they are \"type system level stuff\". which promtoeds and (in my head) inline consts are not. so I can see some justification to treating them differently.</p>\n</blockquote>\n<p>so can I <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 221368285,
        "sender_full_name": "lcnr",
        "timestamp": 1609534230
    },
    {
        "content": "<p>we can ofc use the current approach and just not emit a <code>ConstEvalutable</code> predicate for inline consts</p>",
        "id": 221368546,
        "sender_full_name": "lcnr",
        "timestamp": 1609534630
    },
    {
        "content": "<p>which would probably be fine for me though I do feel kind of uncomfortable about this</p>",
        "id": 221368555,
        "sender_full_name": "lcnr",
        "timestamp": 1609534662
    },
    {
        "content": "<p>or even just make const evaluatable checked a lint for inline and assoc consts</p>",
        "id": 221368607,
        "sender_full_name": "lcnr",
        "timestamp": 1609534735
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 221368664,
        "sender_full_name": "lcnr",
        "timestamp": 1609534812
    },
    {
        "content": "<p>ah well, will go ahead and fix the remaining bugs for ìnline consts in the next few weeks and then we can decide where to go [while using <code>AnonConst</code>s]</p>",
        "id": 221368701,
        "sender_full_name": "lcnr",
        "timestamp": 1609534908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/inline.20consts/near/221367224\">said</a>:</p>\n<blockquote>\n<p>so the following would fail to compile</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">ty_eq</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"k\">u32</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">ty_eq</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>as long as no one thinks that this restriction is a big issue</p>",
        "id": 221368745,
        "sender_full_name": "lcnr",
        "timestamp": 1609534957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/inline.20consts/near/221367987\">said</a>:</p>\n<blockquote>\n<p>in particular I want <code>const</code> blocks to cover this usecase: <a href=\"https://github.com/rodrimati1992/abi_stable_crates/issues/46\">https://github.com/rodrimati1992/abi_stable_crates/issues/46</a></p>\n</blockquote>\n<p>I don't see how that is problematic, considering that all these promotions are in constant items and not in <code>const fn</code>, so there is no <code>const_evaluatable_checked</code> necessary.</p>",
        "id": 221372061,
        "sender_full_name": "oli",
        "timestamp": 1609539993
    },
    {
        "content": "<p>Here's the relevant tracking issue: <a href=\"https://github.com/rust-lang/rust/issues/76560\">https://github.com/rust-lang/rust/issues/76560</a></p>",
        "id": 221372078,
        "sender_full_name": "oli",
        "timestamp": 1609540050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> i originally wanted to require inline consts to also have const evaluatable bounds, which would mean that <a href=\"https://github.com/rodrimati1992/abi_stable_crates/issues/46\">https://github.com/rodrimati1992/abi_stable_crates/issues/46</a> won't be easily fixable by using inline consts</p>",
        "id": 221372658,
        "sender_full_name": "lcnr",
        "timestamp": 1609540943
    },
    {
        "content": "<p>I thought these hypothetical inline const usages are themselves within const items</p>",
        "id": 221372679,
        "sender_full_name": "oli",
        "timestamp": 1609541001
    },
    {
        "content": "<p>brb reading more source code</p>",
        "id": 221372683,
        "sender_full_name": "oli",
        "timestamp": 1609541011
    },
    {
        "content": "<p>yeah they are, but they would still require const wf bounds. we check const wf for arrays used in associated consts</p>",
        "id": 221372748,
        "sender_full_name": "lcnr",
        "timestamp": 1609541090
    },
    {
        "content": "<p>oh... are we talking about associated consts?</p>",
        "id": 221372762,
        "sender_full_name": "oli",
        "timestamp": 1609541119
    },
    {
        "content": "<p><a href=\"https://github.com/rodrimati1992/abi_stable_crates/issues/46\">https://github.com/rodrimati1992/abi_stable_crates/issues/46</a> promotes a generic const fn inside of an associated const</p>",
        "id": 221372780,
        "sender_full_name": "lcnr",
        "timestamp": 1609541144
    },
    {
        "content": "<p>(inside of a macro, but that doesn't matter <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> )</p>",
        "id": 221372788,
        "sender_full_name": "lcnr",
        "timestamp": 1609541157
    },
    {
        "content": "<p>and we want to replace that generic const fn call with <code>const { const_fn_call() }</code></p>",
        "id": 221372836,
        "sender_full_name": "lcnr",
        "timestamp": 1609541183
    },
    {
        "content": "<p>i initially wanted to require <code>WF(const_fn_call())</code> for this</p>",
        "id": 221372850,
        "sender_full_name": "lcnr",
        "timestamp": 1609541206
    },
    {
        "content": "<p>but is it in a <em>generic</em> impl of an associated const?</p>",
        "id": 221372857,
        "sender_full_name": "oli",
        "timestamp": 1609541215
    },
    {
        "content": "<p>I see things like <a href=\"https://github.com/rodrimati1992/abi_stable_crates/blob/6375dd95e0df0808b0eedf2aaa2ecb7f971875fd/examples/0_modules_and_interface_types/impl/src/lib.rs#L90\">https://github.com/rodrimati1992/abi_stable_crates/blob/6375dd95e0df0808b0eedf2aaa2ecb7f971875fd/examples/0_modules_and_interface_types/impl/src/lib.rs#L90</a></p>",
        "id": 221372858,
        "sender_full_name": "oli",
        "timestamp": 1609541218
    },
    {
        "content": "<p>i think so. If the type deriving <code>StableAbi</code> is generic</p>",
        "id": 221372871,
        "sender_full_name": "lcnr",
        "timestamp": 1609541253
    },
    {
        "content": "<p>ah, I found <a href=\"https://github.com/rodrimati1992/abi_stable_crates/blob/6375dd95e0df0808b0eedf2aaa2ecb7f971875fd/abi_stable/src/erased_types/dyn_trait/tests.rs#L59\">https://github.com/rodrimati1992/abi_stable_crates/blob/6375dd95e0df0808b0eedf2aaa2ecb7f971875fd/abi_stable/src/erased_types/dyn_trait/tests.rs#L59</a></p>",
        "id": 221372876,
        "sender_full_name": "oli",
        "timestamp": 1609541271
    },
    {
        "content": "<p>yea ok, ignore my comments above then... this is indeed incompatible</p>",
        "id": 221372930,
        "sender_full_name": "oli",
        "timestamp": 1609541328
    },
    {
        "content": "<p>well... let's explore some more what other things beyond a breaking change are possible here: <a href=\"#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221372470\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/Promotion.20of.20const.20fn.20calls.20in.20const.2Fstatic.20initializers/near/221372470</a></p>",
        "id": 221372942,
        "sender_full_name": "oli",
        "timestamp": 1609541359
    },
    {
        "content": "<p>regardless of the outcome of that thread, there is still the question of if <code>const { expr() }</code> should require <code>ConstEvaluatable(expr())</code> or not <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 221373063,
        "sender_full_name": "lcnr",
        "timestamp": 1609541524
    },
    {
        "content": "<p>well... we could <em>definitely</em> skip it if implicit promotion accepts the entire body of the <code>AnonConst</code></p>",
        "id": 221373819,
        "sender_full_name": "oli",
        "timestamp": 1609542826
    },
    {
        "content": "<p>we'll still end up with post monomorphization errors if the constant doesn't eval</p>",
        "id": 221373890,
        "sender_full_name": "oli",
        "timestamp": 1609542916
    },
    {
        "content": "<p>I get that the constants in array lengths are a bit different wrt evaluatability, but that fundamental point still stands</p>",
        "id": 221373947,
        "sender_full_name": "oli",
        "timestamp": 1609542967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/inline.20consts/near/221373819\">said</a>:</p>\n<blockquote>\n<p>well... we could <em>definitely</em> skip it if implicit promotion accepts the entire body of the <code>AnonConst</code></p>\n</blockquote>\n<p>it won't though. the entire point is to not implicitly promote function calls ever since they can fail.</p>",
        "id": 221398199,
        "sender_full_name": "RalfJ",
        "timestamp": 1609590952
    },
    {
        "content": "<p>i think the idea would be to allow generic anonymous constants if they would be accepted by promotion</p>",
        "id": 221398249,
        "sender_full_name": "lcnr",
        "timestamp": 1609591019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/inline.20consts/near/221373890\">said</a>:</p>\n<blockquote>\n<p>we'll still end up with post monomorphization errors if the constant doesn't eval</p>\n</blockquote>\n<p>yeah, just like we already have post-mono errors now with associated consts.<br>\nit may just be the case that preventing post-mono errors at all cost is more painful than the errors. I'm not saying it is -- I haven't dug into the issue -- but I sometimes get that feeling.</p>",
        "id": 221398252,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591024
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/inline.20consts/near/221398249\">said</a>:</p>\n<blockquote>\n<p>i think the idea would be to allow generic anonymous constants if they would be accepted by promotion</p>\n</blockquote>\n<p>yeah but what I am saying is, the ones in AbiStable will <em>not</em> be accepted by promotion any more. that's the entire point, to stop promoting these things.</p>",
        "id": 221398269,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591073
    },
    {
        "content": "<p>hmm, so my understanding was that we would have a check similar to the old(current) promotion rules</p>",
        "id": 221398322,
        "sender_full_name": "lcnr",
        "timestamp": 1609591127
    },
    {
        "content": "<p>but that seems far to lenient to me now that i think about it</p>",
        "id": 221398328,
        "sender_full_name": "lcnr",
        "timestamp": 1609591138
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/inline.20consts/near/221398322\">said</a>:</p>\n<blockquote>\n<p>hmm, so my understanding was that we would have a check similar to the old(current) promotion rules</p>\n</blockquote>\n<p>which of them?^^ they keep changing, and we have implicit and explicit rules and then some special exceptions in const/static initializers</p>",
        "id": 221398476,
        "sender_full_name": "RalfJ",
        "timestamp": 1609591344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/inline.20consts/near/221367074\">said</a>:</p>\n<blockquote>\n<p>this is the idea that I had in mind. This is fundamentally incompatible with treating inline consts like promoteds as we have to be able to access their mir during typeck for this. That isn't possible if we typeck them as ordinary exprs in their surrounding context</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> regarding <a href=\"https://github.com/rust-lang/rust/issues/76001#issuecomment-753497465\">https://github.com/rust-lang/rust/issues/76001#issuecomment-753497465</a> and building mir for consts together with their containing body. For anything we want to look at during typeck, e.g. for <code>ConstEvaluatable</code> bounds or anything inside of types that isn't possible</p>",
        "id": 221407633,
        "sender_full_name": "lcnr",
        "timestamp": 1609607043
    },
    {
        "content": "<p><em>the length of repeat expressions does end up in its type</em></p>",
        "id": 221407652,
        "sender_full_name": "lcnr",
        "timestamp": 1609607101
    },
    {
        "content": "<p>oh right... we still have some typeck stuff on HIR</p>",
        "id": 221407676,
        "sender_full_name": "oli",
        "timestamp": 1609607143
    },
    {
        "content": "<p>why do we even typecheck mir again?</p>",
        "id": 221407744,
        "sender_full_name": "lcnr",
        "timestamp": 1609607210
    },
    {
        "content": "<p>I forget</p>",
        "id": 221407746,
        "sender_full_name": "oli",
        "timestamp": 1609607215
    },
    {
        "content": "<p>is that only a safety net or am i missing somethign</p>",
        "id": 221407747,
        "sender_full_name": "lcnr",
        "timestamp": 1609607221
    },
    {
        "content": "<p>some checks are easier?</p>",
        "id": 221407749,
        "sender_full_name": "oli",
        "timestamp": 1609607223
    },
    {
        "content": "<p>like purely failing checks, none that affect resolution or inference</p>",
        "id": 221407755,
        "sender_full_name": "oli",
        "timestamp": 1609607241
    },
    {
        "content": "<p>maybe <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> i guess i will make a note to look into that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 221407789,
        "sender_full_name": "lcnr",
        "timestamp": 1609607282
    },
    {
        "content": "<p>I'm not sure if we could have a typeck fully in MIR, I haven't really looked into the topic in the last year</p>",
        "id": 221407797,
        "sender_full_name": "oli",
        "timestamp": 1609607282
    },
    {
        "content": "<p>me neither, i only know that we do have some kind of typeck using mir</p>",
        "id": 221407812,
        "sender_full_name": "lcnr",
        "timestamp": 1609607303
    },
    {
        "content": "<p>I thought mir typeck collects constraints for mir borrowck to resolve.</p>",
        "id": 221407829,
        "sender_full_name": "bjorn3",
        "timestamp": 1609607342
    },
    {
        "content": "<p>hold up... we only need the body of inline consts for <code>const_evaluatable_checked</code> in order to <em>error</em> if it's not in the signature. This can be done <em>after</em> building the MIR, there is no need to error before building the MIR, right?</p>",
        "id": 221590916,
        "sender_full_name": "oli",
        "timestamp": 1609799868
    },
    {
        "content": "<p>Inline consts do not actually affect typeck beyond causing errors if there's no entry for them in the where bounds</p>",
        "id": 221591039,
        "sender_full_name": "oli",
        "timestamp": 1609799929
    },
    {
        "content": "<p>If that were possible, we could avoid the entire situation, keep the inline consts as part of the HIR body and autogenerate promoteds for them during mir building.</p>",
        "id": 221591096,
        "sender_full_name": "oli",
        "timestamp": 1609799979
    },
    {
        "content": "<p>then mir typeck (or whatever) can check all these inline-const-promoteds against the signature of the owning body</p>",
        "id": 221591202,
        "sender_full_name": "oli",
        "timestamp": 1609800031
    },
    {
        "content": "<p>^ still thinking about this</p>",
        "id": 223039204,
        "sender_full_name": "lcnr",
        "timestamp": 1610884320
    },
    {
        "content": "<p>i am kinda uncomfortable with your idea but not sure whether it would work</p>",
        "id": 223039246,
        "sender_full_name": "lcnr",
        "timestamp": 1610884336
    },
    {
        "content": "<p>alternatively... could we handle inline const bodies like we handle closure bodies?</p>",
        "id": 223043087,
        "sender_full_name": "oli",
        "timestamp": 1610890611
    },
    {
        "content": "<p>I am not too happy with my idea either for the record</p>",
        "id": 223043095,
        "sender_full_name": "oli",
        "timestamp": 1610890627
    },
    {
        "content": "<p>not if we want to check <code>ConstEvaluatable</code> for them during typeck</p>",
        "id": 223043280,
        "sender_full_name": "lcnr",
        "timestamp": 1610890940
    },
    {
        "content": "<p>that was my original idea as well</p>",
        "id": 223043284,
        "sender_full_name": "lcnr",
        "timestamp": 1610890949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/inline.20consts/near/223043087\">said</a>:</p>\n<blockquote>\n<p>alternatively... could we handle inline const bodies like we handle closure bodies?</p>\n</blockquote>\n<p>that sounds good, though I don't know the consequences. I assume <code>async</code> blocks also use that machinery?</p>",
        "id": 223043285,
        "sender_full_name": "RalfJ",
        "timestamp": 1610890955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> i am currently writing down my knowledge about the big const generics issues we want to solve in <a href=\"https://hackmd.io/9LIywezOQj-h5HX8vvEnSw\">https://hackmd.io/9LIywezOQj-h5HX8vvEnSw</a></p>\n<p>Taking oli's approach should work. checking that they are const evaluatable doesn't actually have to happen during typeck so we can move that into a separate query.</p>",
        "id": 223772888,
        "sender_full_name": "lcnr",
        "timestamp": 1611432673
    },
    {
        "content": "<p>I'm currently on vacations but will be back in 1 week</p>",
        "id": 223831099,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1611516998
    }
]