[
    {
        "content": "<p>Was reading the stabilization discussion in <a href=\"https://github.com/rust-lang/rust/issues/49146\">https://github.com/rust-lang/rust/issues/49146</a>, and came across this:</p>\n<blockquote>\n<p>In my view, the \"original sin\" here was not falling back to type-based qualification for const and statics defined in external crates. However, I believe that this has been the case since 1.0, and I suspect that quite a lot of code depends on it. As soon as you allow const initializers for which static analysis cannot be perfectly precise, it becomes possible to modify those initializers in such a way that they will produce the same value without static analysis being able to prove it.</p>\n</blockquote>\n<p>Would it be possible to fix this in a lint, which could maybe become <code>#[deny]</code> by default in a future version/edition, which would forbid public consts which are value qualified, as a way to avoid accidentally breaking backwards compatibility with downstream crates? Or are there too many actual use cases for this?</p>\n<p>Also, on the general topic, is there any semver policy for changing the value of a publicly exported const? Obviously, it's possible for that to break downstream crates, but we allow that for things like type inference ambiguities or adding new names to a module even if that could break a glob import, with the general policy that these kind of breakages can be cleaned up just by resolving an ambiguity.</p>\n<p>Is there some subset of value changes that could be reasonably allowed by semver policy? After thinking about it a bit, with full Turing-complete const eval, probably not, since you can't tell how someone would depend on the value of an exported const; so it's probably the case that any change to the value would have to be semver incompatible.</p>",
        "id": 202471002,
        "sender_full_name": "Brian Campbell",
        "timestamp": 1593539140
    },
    {
        "content": "<blockquote>\n<p>Would it be possible to fix this in a lint, which could maybe become #[deny] by default in a future version/edition, which would forbid public consts which are value qualified, as a way to avoid accidentally breaking backwards compatibility with downstream crates? Or are there too many actual use cases for this?</p>\n</blockquote>\n<p>There would have to be some sort of alternative for people whose code violates the new semantics, and I don't see a feasible one. I suppose I don't have proof that real code would break, only suspicions. A crater run would help to clarify this. I think it will be hard to put this particular genie back in the bottle.</p>\n<blockquote>\n<p>Also, on the general topic, is there any semver policy for changing the value of a publicly exported const? Obviously, it's possible for that to break downstream crates, but we allow that for things like type inference ambiguities or adding new names to a module even if that could break a glob import, with the general policy that these kind of breakages can be cleaned up just by resolving an ambiguity.</p>\n</blockquote>\n<p>The canonical example is <code>arr[other_crate::SOME_CONST]</code>, but there will always be some way for downstream crates to depend on the exact value of a <code>const</code> so long as it is observable. It's up to library authors to document the guarantees they provide.</p>",
        "id": 202478432,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1593542799
    },
    {
        "content": "<blockquote>\n<p>There would have to be some sort of alternative for people whose code violates the new semantics, and I don't see a feasible one. I suppose I don't have proof that real code would break, only suspicions. A crater run would help to clarify this. I think it will be hard to put this particular genie back in the bottle.</p>\n</blockquote>\n<p>That's why it would have to be a lint, not mandatory. I think introducing a lint at <code>#[allow]</code>, switching it to <code>#[warn]</code> in a later release, and then in an edition to <code>#[deny]</code> would give the opt-out of switching back to <code>#[allow]</code> if you still need that behavior after the edition switch.</p>\n<blockquote>\n<p>The canonical example is <code>arr[other_crate::SOME_CONST]</code>, but there will always be some way for downstream crates to depend on the exact value of a const so long as it is observable. It's up to library authors to document the guarantees they provide.</p>\n</blockquote>\n<p>With const generics, could you have that fail typechecking unless <code>arr</code> is <code>[_; other_crate::SOME_CONST + delta]</code>?</p>\n<p>But yeah, that kind of typechecking would probably hit the halting problem pretty quickly, so you can't in general.</p>",
        "id": 202482688,
        "sender_full_name": "Brian Campbell",
        "timestamp": 1593544956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> ^</p>",
        "id": 202483922,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1593545636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> why is any of this considered a problem? my reasoning ages ago was that <code>const</code> initializers were part of semver</p>",
        "id": 202527344,
        "sender_full_name": "eddyb",
        "timestamp": 1593573888
    },
    {
        "content": "<p>and one idea for avoiding a complex system with <code>const Trait</code> and <code>?const Trait</code> bounds etc. was to just have an attribute or something that opts into that \"body is exposed publicly\" behavior, with analyses being able to infer complex-to-express requirements from said body</p>",
        "id": 202527368,
        "sender_full_name": "eddyb",
        "timestamp": 1593573929
    },
    {
        "content": "<p>oh I see what the intent is</p>",
        "id": 202527523,
        "sender_full_name": "eddyb",
        "timestamp": 1593574085
    },
    {
        "content": "<p>presumably we could try to be even more precise and just evaluate the const but that can't always work for associated consts hmpf</p>",
        "id": 202527536,
        "sender_full_name": "eddyb",
        "timestamp": 1593574118
    },
    {
        "content": "<p>I wonder in which cases you really want to refactor <code>const</code> initializers, like an example in the wild</p>",
        "id": 202527613,
        "sender_full_name": "eddyb",
        "timestamp": 1593574207
    },
    {
        "content": "<p>(also, I'm not sure using <code>drop(...)</code> in the examples works. since it doesn't compile to a MIR <code>Drop</code>)</p>",
        "id": 202527619,
        "sender_full_name": "eddyb",
        "timestamp": 1593574218
    },
    {
        "content": "<p>ftr the comment in question is <a href=\"https://github.com/rust-lang/rust/issues/49146#issuecomment-617995319\">https://github.com/rust-lang/rust/issues/49146#issuecomment-617995319</a></p>",
        "id": 202527625,
        "sender_full_name": "eddyb",
        "timestamp": 1593574225
    },
    {
        "content": "<p>Presently, refactoring a const initializer into a <code>const fn</code> turns off the (local) value-based static analysis. I can imagine people wanting to do this as we add more features. As I mentioned above though,  I don't know how common it is for people to depend on the value-based analysis for the final value of a const.</p>",
        "id": 202528137,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1593574981
    },
    {
        "content": "<p>I suspect not very.</p>",
        "id": 202528148,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1593574998
    }
]