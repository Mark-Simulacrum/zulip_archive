[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Do you think you can explain <a href=\"https://github.com/rust-lang/rust/issues/67251\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67251\">#67251</a> a bit? My understanding is that we want to disallow <code>#[rustc_const_stable]</code> functions in the standard library from using nightly-only features without <code>#[allow_internal_unstable]</code>. Otherwise we would have no recourse if that feature was found to be unsound.</p>\n<p>However, I don't understand why <code>#![feature(const_fn)]</code> is involved? Is this just about the standard library or about user code as well?</p>",
        "id": 183293253,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576179239
    },
    {
        "content": "<p>Well, the thing was that if users used the feature gate, their functions got marked as <code>min_const_fn</code>, now, without <code>allow_internal_unstable</code> these functions are no longer <code>min_const_fn</code>, thus requiring the <code>const_fn</code> feature gate. We could probably come up with a scheme that \"just allows\" this without the <code>const_fn</code> feature gate, but let's do that after the beta cutoff without any hurry</p>",
        "id": 183342795,
        "sender_full_name": "oli",
        "timestamp": 1576230538
    },
    {
        "content": "<p>Ah okay. I'm trying to understand what exactly to do for loops, since it seems like a loop with an unconditional break will still be a min const fn unless it also has a false unwind. Maybe this is fine?</p>",
        "id": 183402566,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576272571
    },
    {
        "content": "<p>Yea seems fine to me, although if we were really strict this would require some additional trickery to carry the info down from HIR</p>",
        "id": 183405490,
        "sender_full_name": "oli",
        "timestamp": 1576274572
    },
    {
        "content": "<p>But this is only a problem for libstd anyway, and who would use a loop with an unconditional break there</p>",
        "id": 183405547,
        "sender_full_name": "oli",
        "timestamp": 1576274612
    },
    {
        "content": "<p>I'll stop fussing then <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 183405588,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576274640
    },
    {
        "content": "<p>In that case, <a href=\"https://github.com/rust-lang/rust/issues/67216\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67216\">#67216</a> should be good to go</p>",
        "id": 183405715,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1576274695
    },
    {
        "content": "<p><span aria-label=\"ship\" class=\"emoji emoji-1f6a2\" role=\"img\" title=\"ship\">:ship:</span> it</p>",
        "id": 183408534,
        "sender_full_name": "oli",
        "timestamp": 1576277007
    }
]