[
    {
        "content": "<p>Hi! <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> is there something else we can do about <a href=\"https://github.com/rust-lang/rust/issues/71212\">https://github.com/rust-lang/rust/issues/71212</a>?</p>",
        "id": 202430368,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1593521742
    },
    {
        "content": "<p>uh</p>",
        "id": 202430454,
        "sender_full_name": "oli",
        "timestamp": 1593521777
    },
    {
        "content": "<p>what's the current state? I forget</p>",
        "id": 202430466,
        "sender_full_name": "oli",
        "timestamp": 1593521783
    },
    {
        "content": "<p>ah, just in const fn, forbidden outside</p>",
        "id": 202430517,
        "sender_full_name": "oli",
        "timestamp": 1593521805
    },
    {
        "content": "<p>yep</p>",
        "id": 202430527,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1593521810
    },
    {
        "content": "<p>Are you asking what to do about stabilizing <code>&amp;mut</code> in <code>const fn</code> or about what the next steps are for figuring out <code>&amp;mut</code> in const items?</p>",
        "id": 202430571,
        "sender_full_name": "oli",
        "timestamp": 1593521839
    },
    {
        "content": "<p>I'm more interested in the second one but working on stabilizing it would be nice</p>",
        "id": 202430623,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1593521867
    },
    {
        "content": "<p>I think a first step would be to do <a href=\"https://github.com/rust-lang/rust/issues/72396\">https://github.com/rust-lang/rust/issues/72396</a></p>",
        "id": 202430795,
        "sender_full_name": "oli",
        "timestamp": 1593521956
    },
    {
        "content": "<p>so that we can implement <a href=\"https://github.com/rust-lang/rust/issues/71212#issuecomment-629793176\">https://github.com/rust-lang/rust/issues/71212#issuecomment-629793176</a></p>",
        "id": 202430826,
        "sender_full_name": "oli",
        "timestamp": 1593521974
    },
    {
        "content": "<p>TLDR:</p>",
        "id": 202430980,
        "sender_full_name": "oli",
        "timestamp": 1593522045
    },
    {
        "content": "<blockquote>\n<p>We can achieve that by stopping validation when we hit a GlobalAlloc::Static(DefId) allocation. I think that is reasonable -- we already stop there if the DefId is in a different crate, so we cannot rely on this for soundness anyway.</p>\n</blockquote>",
        "id": 202430983,
        "sender_full_name": "oli",
        "timestamp": 1593522046
    },
    {
        "content": "<p>a PR that does just that change would be fine by me</p>",
        "id": 202431026,
        "sender_full_name": "oli",
        "timestamp": 1593522069
    },
    {
        "content": "<p>OK I think that I get the idea</p>",
        "id": 202431368,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1593522248
    },
    {
        "content": "<p>more or less</p>",
        "id": 202431372,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1593522251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so without looking at previous discussion: what about MIR const checking telling apart borrows on \"leaked to <code>'static</code>\"-scoped \"locals\" and regular locals?</p>",
        "id": 203683209,
        "sender_full_name": "eddyb",
        "timestamp": 1594623609
    },
    {
        "content": "<p>because borrows on regular locals should be fine, borrowck would prevent them being treated as <code>&amp;'static T</code> / <code>&amp;'static mut T</code></p>",
        "id": 203683230,
        "sender_full_name": "eddyb",
        "timestamp": 1594623641
    },
    {
        "content": "<p>(I hit this in <a href=\"https://github.com/rust-lang/rust/issues/74283\">#74283</a> and ended up making a <code>const fn</code> with no inputs just to compute a value using mutable local state)</p>",
        "id": 203683272,
        "sender_full_name": "eddyb",
        "timestamp": 1594623716
    },
    {
        "content": "<p>maybe we should mark the weirder \"locals\" like I thought we would a long time ago, instead of having just <code>Storage{Live,Dead}</code> to indicate it</p>",
        "id": 203683323,
        "sender_full_name": "eddyb",
        "timestamp": 1594623748
    },
    {
        "content": "<p>or we can just index the <code>Storage{Live,Dead}</code> for all locals just before const-checking and that'd be that</p>",
        "id": 203683329,
        "sender_full_name": "eddyb",
        "timestamp": 1594623763
    },
    {
        "content": "<p>either way, the information should be there IMO</p>",
        "id": 203683331,
        "sender_full_name": "eddyb",
        "timestamp": 1594623768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> furthermore, we can pretty much just say that if a local has <code>StorageDead</code>, it can be borrowed in a <code>const</code></p>",
        "id": 203683361,
        "sender_full_name": "eddyb",
        "timestamp": 1594623800
    },
    {
        "content": "<p><code>&amp;mut</code> or <code>&amp;</code>+interior mutability</p>",
        "id": 203683378,
        "sender_full_name": "eddyb",
        "timestamp": 1594623827
    },
    {
        "content": "<p>but not if it's missing <code>StorageDead</code> (which may be more conservative than necessary if we have temporaries with no <code>Storage{Live,Dead}</code> but it should still be more useful than the current blanket ban)</p>",
        "id": 203683465,
        "sender_full_name": "eddyb",
        "timestamp": 1594623907
    },
    {
        "content": "<p>what does \"has <code>StorageDead</code>\" mean? ideally it would mean \"a <code>StorageDead</code> is guaranteed to be executed after the borrow on any path from the borrow to a <code>Return</code>\"</p>",
        "id": 203683991,
        "sender_full_name": "RalfJ",
        "timestamp": 1594624488
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I mean, if it isn't, it's kind of broken. although I agree the current semantics are a bit iffy. in any case, yeah if we can check that more specific predicate, I wouldn't mind it</p>",
        "id": 203684581,
        "sender_full_name": "eddyb",
        "timestamp": 1594625010
    },
    {
        "content": "<p>(I just don't know what it would take, compared to just checking that there is <em>any</em> <code>StorageDead</code> at all)</p>",
        "id": 203684592,
        "sender_full_name": "eddyb",
        "timestamp": 1594625028
    },
    {
        "content": "<p>I was just saying that \"there exists a StorageDead for this local somewhere in this <del>function</del> MIR body (but we may not ever reach it)\" is insufficient</p>",
        "id": 203684640,
        "sender_full_name": "RalfJ",
        "timestamp": 1594625048
    },
    {
        "content": "<p>(since the weird escaping \"locals\" really could just as well have a flag in their <code>LocalDecl</code>)</p>",
        "id": 203684651,
        "sender_full_name": "eddyb",
        "timestamp": 1594625055
    },
    {
        "content": "<p>well, not function, but <code>const</code>/<code>static</code></p>",
        "id": 203684662,
        "sender_full_name": "eddyb",
        "timestamp": 1594625069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Next.20steps.20for.20mutable.20references.20in.20constants/near/203683209\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> so without looking at previous discussion: what about MIR const checking telling apart borrows on \"leaked to <code>'static</code>\"-scoped \"locals\" and regular locals?</p>\n</blockquote>\n<p>This would be ideal, but I wasn't sure where I should be looking for this information. If the borrow-checker uses the absence of <code>StorageDead</code> within a <code>const</code>/<code>static</code> initializer to indicate that a borrow of that local can be coerced to <code>'static</code>, It should be fine for const-checking to do the same. I think we don't emit <code>StorageLive</code>/<code>StorageDead</code> for some locals within function bodies (arguments obviously but maybe more?), so I wasn't entirely clear on the semantics.</p>",
        "id": 203763154,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1594670269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> the leaked one specifically have <code>StorageLive</code> and no <code>StorageDead</code>, so you can tell them apart from those that don't have any</p>",
        "id": 203779941,
        "sender_full_name": "eddyb",
        "timestamp": 1594679768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> however if you want to add a flag to <code>LocalDecl</code>, that should be easy, there is exactly one place where that behavior is triggered, in the building code</p>",
        "id": 203779982,
        "sender_full_name": "eddyb",
        "timestamp": 1594679795
    },
    {
        "content": "<p>(it is intentional, otherwise you wouldn't end up with the asymmetry of <code>StorageLive</code> w/o a <code>StorageDead</code> in the first place)</p>",
        "id": 203780044,
        "sender_full_name": "eddyb",
        "timestamp": 1594679835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> in case you've never seen this big comment: this is what triggers everything: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir_build/build/expr/as_temp.rs#L93-L108\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir_build/build/expr/as_temp.rs#L93-L108</a></p>",
        "id": 203780133,
        "sender_full_name": "eddyb",
        "timestamp": 1594679904
    },
    {
        "content": "<p>so you could just as well add this to that:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">local_decls</span><span class=\"p\">[</span><span class=\"n\">temp</span><span class=\"p\">].</span><span class=\"n\">leak_to_static</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203780202,
        "sender_full_name": "eddyb",
        "timestamp": 1594680000
    },
    {
        "content": "<p>Sounds good. <span class=\"user-mention\" data-user-id=\"132916\">@Christian Poveda</span> ^</p>",
        "id": 203781989,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1594681383
    },
    {
        "content": "<p>and then we can apply the const-checking borrow restrictions only to those, I doubt there are any restrictions necessary for regular short-lived borrows</p>",
        "id": 203783256,
        "sender_full_name": "eddyb",
        "timestamp": 1594682529
    },
    {
        "content": "<p>and miri can assert that whatever behavior it applies right now only happens on a <code>leak_to_static</code> local</p>",
        "id": 203783282,
        "sender_full_name": "eddyb",
        "timestamp": 1594682571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/146212-t-compiler.2Fconst-eval/topic/Next.20steps.20for.20mutable.20references.20in.20constants/near/203783282\">said</a>:</p>\n<blockquote>\n<p>and miri can assert that whatever behavior it applies right now only happens on a <code>leak_to_static</code> local</p>\n</blockquote>\n<p>basically we should only be interning leak_to_static locals at the end, is that right?</p>",
        "id": 203805437,
        "sender_full_name": "RalfJ",
        "timestamp": 1594711467
    },
    {
        "content": "<p>that might require tracking some extra metadata somewhere, but yes it sounds good</p>",
        "id": 203805444,
        "sender_full_name": "RalfJ",
        "timestamp": 1594711477
    },
    {
        "content": "<p>presumably the borrow checker should be made to also use that information, just to make sure everything relies on the same flag</p>",
        "id": 203805456,
        "sender_full_name": "RalfJ",
        "timestamp": 1594711492
    },
    {
        "content": "<p>I would use it in combination with what we have today, to catch any assumptions being broken</p>",
        "id": 203805541,
        "sender_full_name": "eddyb",
        "timestamp": 1594711607
    },
    {
        "content": "<p>to be clear, this is <a href=\"https://github.com/rust-lang/rust/issues/40036\">https://github.com/rust-lang/rust/issues/40036</a></p>",
        "id": 203805555,
        "sender_full_name": "eddyb",
        "timestamp": 1594711637
    },
    {
        "content": "<p>we just don't have to differentiate more than \"just a flag on <code>LocalDecl</code>\"</p>",
        "id": 203805591,
        "sender_full_name": "eddyb",
        "timestamp": 1594711673
    },
    {
        "content": "<p>After our recent cleanups around const validation and interning, none of the more complex schemes are necessary. I made a PR (<a href=\"https://github.com/rust-lang/rust/issues/78578\">#78578</a>) that just allows mutable references in all const contexts, and all the static checks trigger where we'd like them to trigger (I also added new tests).</p>",
        "id": 215115572,
        "sender_full_name": "oli",
        "timestamp": 1604074064
    },
    {
        "content": "<p>most of these are dynamic checks though, aren't they? validation and interning certainly are...</p>",
        "id": 215189749,
        "sender_full_name": "RalfJ",
        "timestamp": 1604147794
    },
    {
        "content": "<p>yea, dynamic indeed</p>",
        "id": 215244791,
        "sender_full_name": "oli",
        "timestamp": 1604238175
    },
    {
        "content": "<p>not static. I keep thinking validation is a static thing for some reason</p>",
        "id": 215244795,
        "sender_full_name": "oli",
        "timestamp": 1604238191
    },
    {
        "content": "<p>that seems like a big departure from the previous strategy of ensuring everything statically (pre-monomorphization)</p>",
        "id": 215260926,
        "sender_full_name": "RalfJ",
        "timestamp": 1604262652
    }
]