[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>: I think I'm misunderstanding something about <code>x.py check</code>, so maybe we could continue the conversation from <a href=\"https://github.com/rust-lang/rust/issues/78466\">#78466</a> here.</p>",
        "id": 221362891,
        "sender_full_name": "varkor",
        "timestamp": 1609525969
    },
    {
        "content": "<p>My understanding is that <code>x.py check</code> doesn't have to build the compiler at all at the moment, is that correct?</p>",
        "id": 221362910,
        "sender_full_name": "varkor",
        "timestamp": 1609526001
    },
    {
        "content": "<p>(i.e. without an explicit path)</p>",
        "id": 221362913,
        "sender_full_name": "varkor",
        "timestamp": 1609526011
    },
    {
        "content": "<p>it doesn't build the compiler, correct. It just checks the compiler, it never goes through LLVM.</p>",
        "id": 221362916,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609526020
    },
    {
        "content": "<p><code>x.py check</code> catches the error I'm interested in. Therefore, I would expect <code>x.py check library/std</code> to also catch the same error, without building the compiler.</p>",
        "id": 221362965,
        "sender_full_name": "varkor",
        "timestamp": 1609526053
    },
    {
        "content": "<p>I don't see why we would need to build the compiler at all to make the behaviour the same.</p>",
        "id": 221362972,
        "sender_full_name": "varkor",
        "timestamp": 1609526071
    },
    {
        "content": "<p>I presume the way <code>x.py check</code> is working is it's going: \"check rustc\", \"check libcore\", \"check libstd\", etc. And <code>x.py check library/std</code> is going... \"check libstd\"?</p>",
        "id": 221362988,
        "sender_full_name": "varkor",
        "timestamp": 1609526120
    },
    {
        "content": "<p>No - it's going \"check libcore\", \"check libstd\", \"check rustc\", \"check tools\"</p>",
        "id": 221363006,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609526157
    },
    {
        "content": "<p>this is the weird thing about the current setup, it uses the <em>master</em> libstd with the <em>beta</em> compiler to build rustc</p>",
        "id": 221363047,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609526176
    },
    {
        "content": "<p>so x.py build library/std builds the standard library <em>twice</em>, once with the beta compiler and once with stage1</p>",
        "id": 221363054,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609526203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/x.2Epy.20check.20stage.200/near/221363047\">said</a>:</p>\n<blockquote>\n<p>this is the weird thing about the current setup, it uses the <em>master</em> libstd with the <em>beta</em> compiler to build rustc</p>\n</blockquote>\n<p>Oh, huh, I didn't realise that.</p>",
        "id": 221363064,
        "sender_full_name": "varkor",
        "timestamp": 1609526214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> this is what I meant a while ago about a leaky abstraction by the way, you don't need to know about these details until you do</p>",
        "id": 221363072,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609526243
    },
    {
        "content": "<p>So <code>x.py build library/std</code> has fundamentally different behaviour from <code>x.py check library/std</code>.</p>",
        "id": 221363122,
        "sender_full_name": "varkor",
        "timestamp": 1609526292
    },
    {
        "content": "<p>Okay, that was my confusion, thanks.</p>",
        "id": 221363125,
        "sender_full_name": "varkor",
        "timestamp": 1609526304
    },
    {
        "content": "<p>Well has same behavior, just ends later in some sense</p>",
        "id": 221363134,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526326
    },
    {
        "content": "<p>I would still describe it as fundamentally different because <code>cfg(not(bootstrap))</code> means you're really compiling two different versions of the same library</p>",
        "id": 221363149,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609526361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/x.2Epy.20check.20stage.200/near/221363134\">said</a>:</p>\n<blockquote>\n<p>Well has same behavior, just ends later in some sense</p>\n</blockquote>\n<p>Oh, but doesn't the former involves type checking rustc, but the latter doesn't?</p>",
        "id": 221363154,
        "sender_full_name": "varkor",
        "timestamp": 1609526374
    },
    {
        "content": "<p>i.e. it's possible to have errors that only appear with <code>build --stage 1 library/std</code>, not with stage 0</p>",
        "id": 221363155,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609526376
    },
    {
        "content": "<p>Both build and check have a cfg bootstrap compile for the first (std, rustc) pair</p>",
        "id": 221363206,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526405
    },
    {
        "content": "<p>Just build <em>also</em> compiles a stage 1 libstd</p>",
        "id": 221363211,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526420
    },
    {
        "content": "<p>Yeah, that's definitely possible - prime example being you broke the compiler</p>",
        "id": 221363217,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526439
    },
    {
        "content": "<p>I just think that if <code>x.py check library/std</code> succeeds, then <code>x.py build library/std</code> shouldn't have type-checking errors, which it currently can. If the behaviour can be changed so that's true, I'm happy :)</p>",
        "id": 221363234,
        "sender_full_name": "varkor",
        "timestamp": 1609526467
    },
    {
        "content": "<p>(or modifying stage dependent or at least unstable feature dependent code)</p>",
        "id": 221363240,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526477
    },
    {
        "content": "<p>What kind of type error are you seeing?</p>",
        "id": 221363243,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> this was an error in rustc_middle</p>",
        "id": 221363251,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609526503
    },
    {
        "content": "<p>If it's because of changes to the compiler I don't think we can do anything?</p>",
        "id": 221363255,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526509
    },
    {
        "content": "<p>Build and check should behave the same for stage0 artifacts modulo llvm/monomorphization errors</p>",
        "id": 221363303,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526546
    },
    {
        "content": "<p>It was an error in the compiler that could be caught by compiling rustc once (using the beta compiler), as far as I remember.</p>",
        "id": 221363305,
        "sender_full_name": "varkor",
        "timestamp": 1609526549
    },
    {
        "content": "<p>If they don't that's a compiler bug, most likely</p>",
        "id": 221363317,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526568
    },
    {
        "content": "<p>Right, the issue is that build defaults to stage 1</p>",
        "id": 221363320,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609526574
    },
    {
        "content": "<p>No that's irrelevant from what you're saying</p>",
        "id": 221363329,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526589
    },
    {
        "content": "<p>So it builds the compiler, so you see strictly more errors</p>",
        "id": 221363330,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609526590
    },
    {
        "content": "<p>Stage 0 artifacts are compiled exactly the same between check and build, modulo monomorphization errors, which shouldn't be type errors</p>",
        "id": 221363346,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526638
    },
    {
        "content": "<p>And an error in rustc_middle would be in stage0 artifacts, I presume.</p>",
        "id": 221363389,
        "sender_full_name": "simulacrum",
        "timestamp": 1609526666
    },
    {
        "content": "<p>I'm confused why you think stages are irrelevant. This was an error in rustc_middle, which isn't built at all with <code>x.py check library/std</code> (because that only checks the standard library). The reason <code>build</code> caught it is because it defaults to stage 1, which builds library/std, then compiler/rustc, then library/std again.</p>",
        "id": 221363540,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609526947
    },
    {
        "content": "<p>(which is the reason there's no simple solution for this, and I think the best we can do is tell people to run <code>x.py check</code> without arguments or add a <code>--stage 1</code> flag to check)</p>",
        "id": 221363621,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609527071
    },
    {
        "content": "<p>I suppose now that I understand what's going wrong here, I know how to avoid this confusion in the future.</p>",
        "id": 221363678,
        "sender_full_name": "varkor",
        "timestamp": 1609527135
    },
    {
        "content": "<p>But probably <code>x.py check &lt;path&gt;</code> in general is confusing.</p>",
        "id": 221363682,
        "sender_full_name": "varkor",
        "timestamp": 1609527152
    },
    {
        "content": "<p>Maybe there should just always be a warning message saying the user probably wants to run <code>x.py check</code> without a path.</p>",
        "id": 221363684,
        "sender_full_name": "varkor",
        "timestamp": 1609527167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/x.2Epy.20check.20stage.200/near/221363684\">said</a>:</p>\n<blockquote>\n<p>Maybe there should just always be a warning message saying to use <code>x.py check</code> without a path.</p>\n</blockquote>\n<p>well the problem is that there are two different users of x.py :/ one is people working on the compiler and the other is people working on the standard library</p>",
        "id": 221363696,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609527201
    },
    {
        "content": "<p>and if you're working on the standard library <code>x.py check library/std</code> really does make sense</p>",
        "id": 221363714,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609527214
    },
    {
        "content": "<p>Ah, that's true.</p>",
        "id": 221363715,
        "sender_full_name": "varkor",
        "timestamp": 1609527215
    },
    {
        "content": "<p>(this is one of the reasons I keep telling people cargo is insufficient to replace x.py)</p>",
        "id": 221363769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609527246
    },
    {
        "content": "<p>Maybe a preceding message saying: \"To also check the compiler, use <code>x.py check</code> instead.\"</p>",
        "id": 221363777,
        "sender_full_name": "varkor",
        "timestamp": 1609527258
    },
    {
        "content": "<p>we could check if <code>profile = \"compiler\"</code> is set maybe, and warn in that case</p>",
        "id": 221363790,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609527284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> are you interested in making a PR for that? ;)</p>",
        "id": 221363860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609527369
    },
    {
        "content": "<p>it would be somewhere in <code>src/bootstrap/check.rs</code></p>",
        "id": 221363867,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609527384
    },
    {
        "content": "<p>I guess I find that explanation a little less confusing</p>",
        "id": 221363868,
        "sender_full_name": "simulacrum",
        "timestamp": 1609527387
    },
    {
        "content": "<p>But it seems like just a matter of defaults</p>",
        "id": 221363871,
        "sender_full_name": "simulacrum",
        "timestamp": 1609527398
    },
    {
        "content": "<p>I can do, but I'm not going to be able to get to it for a little while. It's not urgent either, though.</p>",
        "id": 221363879,
        "sender_full_name": "varkor",
        "timestamp": 1609527422
    },
    {
        "content": "<p>Which is I guess always the problem : x.py tries to understand what you want and pick the best option and (usually) fails.</p>",
        "id": 221363891,
        "sender_full_name": "simulacrum",
        "timestamp": 1609527449
    },
    {
        "content": "<p>I think the most succinct way of explaining my confusion (as <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> was pointing out) is that <code>x.py check</code> means \"check with the stage0 compiler\" and <code>x.py build</code> means \"build with the stage1 compiler\", if I understand correctly now — and this makes quite a difference if you're working on the compiler.</p>",
        "id": 221363947,
        "sender_full_name": "varkor",
        "timestamp": 1609527527
    },
    {
        "content": "<p>Which is confusing if you're expecting them to behave like <code>cargo build</code>/<code>cargo check</code>, which behave identically to one another.</p>",
        "id": 221363969,
        "sender_full_name": "varkor",
        "timestamp": 1609527565
    },
    {
        "content": "<p>yeah :/ I'm not sure how to make that any simpler though</p>",
        "id": 221363981,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609527601
    },
    {
        "content": "<p>other than telling everyone to read the bootstrapping chapter <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 221364029,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609527618
    },
    {
        "content": "<p>Maybe the bootstrapping chapter could contain a sentence about <code>check</code> vs <code>build</code> to be explicit (unless it's written somewhere already I just didn't spot).</p>",
        "id": 221364123,
        "sender_full_name": "varkor",
        "timestamp": 1609527775
    },
    {
        "content": "<p>I could add in <a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#default-stages\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#default-stages</a> that <code>check</code> is hardcoded to --stage 0 maybe</p>",
        "id": 221364142,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609527801
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/999\">https://github.com/rust-lang/rustc-dev-guide/pull/999</a></p>",
        "id": 221364541,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609528364
    },
    {
        "content": "<p>That chapter is too long as it is</p>",
        "id": 221364551,
        "sender_full_name": "simulacrum",
        "timestamp": 1609528398
    },
    {
        "content": "<p>(later conversation moved to <a href=\"#narrow/stream/131828-t-compiler/topic/different.20entry.20points.20for.20x.2Epy\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/different.20entry.20points.20for.20x.2Epy</a>)</p>",
        "id": 221365334,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609529730
    }
]