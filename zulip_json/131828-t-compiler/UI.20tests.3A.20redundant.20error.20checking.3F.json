[
    {
        "content": "<p>Hey, I'm trying to update some UI tests with new output after a PR of mine changed it -- and I'm running into some usability trouble. In particular I'm trying to update <a href=\"https://github.com/rust-lang/rust/blob/b81f5811f96fe750ab28c15219d1b0dba6b1dc90/src/test/ui/symbol-names/issue-75326.rs\">https://github.com/rust-lang/rust/blob/b81f5811f96fe750ab28c15219d1b0dba6b1dc90/src/test/ui/symbol-names/issue-75326.rs</a>, because some of the meaningless hash values in symbol names have changed. Handling such values seems to be solved for <code>.stderr</code> files by normalizing them via a regex, e.g.:</p>\n<div class=\"codehilite\"><pre><span></span><code>//[legacy]normalize-stderr-32bit: &quot;h[\\d\\w]+&quot; -&gt; &quot;SYMBOL_HASH&quot;\n</code></pre></div>\n<p>This is a good solution. However, there are also error message annotations in the source file itself, like:</p>\n<div class=\"codehilite\"><pre><span></span><code>//[v0]~^^^^  ERROR symbol-name(_RNvXINICs4fqI2P2rA04_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n</code></pre></div>\n<p>They do <em>not</em> seem to be normalized -- which means I have to hardcode symbol hashes again.</p>\n<p>My question is: why are these annotations there in the first place? All of their output seems to also be checked in the <code>.stderr</code> file. Is this just a historical leftover?</p>\n<p>If yes, that would be great. I can just remove them and make the <code>.stderr</code> files via normalization rules.</p>",
        "id": 224915097,
        "sender_full_name": "mw",
        "timestamp": 1612290662
    },
    {
        "content": "<p>Not really answer to the why question, but the annotation itself can use an arbitrary substring of the message.</p>",
        "id": 224915680,
        "sender_full_name": "tm",
        "timestamp": 1612290908
    },
    {
        "content": "<p><code>//~ ERROR string</code> will work even if <code>string</code> is a subset of the error message, so volatile things like hashes can be omitted.</p>",
        "id": 224915692,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1612290913
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>//[v0]~^^^^  ERROR symbol-name(_RNvXINICs4fqI2P2rA04_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n</code></pre></div>\n<p>If I'm not mistaken, this doesn't contain a hash to be normalized, this is just the v0 mangling of the symbol (which is typically what's being tested in this part of the test suite, right?).</p>",
        "id": 224915907,
        "sender_full_name": "davidtwco",
        "timestamp": 1612291030
    },
    {
        "content": "<p>Yes, I just discovered that removing the annotations in the source files make <code>compiletest</code> complain that there are unexpected errors. I'm not sure if that makes sense since comparing the <code>.stderr</code> files will also catch unexpected errors.</p>",
        "id": 224915914,
        "sender_full_name": "mw",
        "timestamp": 1612291036
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> The <code>Cs4fqI2P2rA04_</code> part contains a \"disambiguator\" that has changed. It is as opaque as a hash.</p>",
        "id": 224916055,
        "sender_full_name": "mw",
        "timestamp": 1612291108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/131828-t-compiler/topic/UI.20tests.3A.20redundant.20error.20checking.3F/near/224916055\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> The <code>Cs4fqI2P2rA04_</code> part contains a \"disambiguator\" that has changed. It is as opaque as a hash.</p>\n</blockquote>\n<p>Fair enough</p>",
        "id": 224916087,
        "sender_full_name": "davidtwco",
        "timestamp": 1612291125
    },
    {
        "content": "<p>It <em>is</em> more stable than legacy <del>crate</del> symbol hashes, but it's still an implementation detail</p>",
        "id": 224916154,
        "sender_full_name": "mw",
        "timestamp": 1612291158
    },
    {
        "content": "<blockquote>\n<p>My question is: why are these annotations there in the first place? All of their output seems to also be checked in the .stderr file. Is this just a historical leftover?</p>\n</blockquote>\n<p>It's not a leftover, it's a redundancy to avoid mistakes.<br>\nIt's hard to match lines in <code>.stderr</code> files with lines in the source code + since <code>.stderr</code> files are generated automatically it's very easy to generate them and forget to review whether that wall of text matches the intent or not, but manual review is necessary for reliable testing.<br>\n<code>//~ ERROR</code> annotations ensure that expected lines produce errors and unexpected lines do not produce errors.</p>",
        "id": 224916282,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1612291210
    },
    {
        "content": "<p>But, yes, I'll follow <span class=\"user-mention\" data-user-id=\"352985\">@tm</span> and <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> suggestion and make the annotations more generic. Thanks!</p>",
        "id": 224916361,
        "sender_full_name": "mw",
        "timestamp": 1612291259
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Yes, I can see that it would be easy to accidentally <code>--bless</code> something that's actually wrong</p>",
        "id": 224916442,
        "sender_full_name": "mw",
        "timestamp": 1612291294
    },
    {
        "content": "<p>I just remembered that we allow the string <code>[...]</code> to act as a wildcard in debuginfo tests. Something simple like that would already help quite a bit.</p>",
        "id": 224916958,
        "sender_full_name": "mw",
        "timestamp": 1612291500
    }
]