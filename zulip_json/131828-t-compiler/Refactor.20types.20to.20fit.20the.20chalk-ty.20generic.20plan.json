[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've done a litte bit of experimentation to try to understand how interning works today in rustc and what the refractoring would look like. I have written this (without checking it compiles, just to get a sense of how everything should come together):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">// Types are still interned in a `ShardedHashMap&lt;Interned&lt;&#39;tcx, TyS&gt;, ()&gt;`,</span>\n<span class=\"c1\">// where `TyKind&lt;TyCtxt&lt;&#39;tcx&gt;&gt;: Borrow&lt;Interned&lt;&#39;tcx, TyS&gt;&gt;`</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">CtxtInterners</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">intern_ty</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">TyKind</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">interned</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">type_</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// This is unchanged...</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">intern</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">kind</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">flags</span>::<span class=\"n\">FlagComputation</span>::<span class=\"n\">for_kind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">kind</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty_struct</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TyS</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">flags</span>: <span class=\"nc\">flags</span><span class=\"p\">.</span><span class=\"n\">flags</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">outer_exclusive_binder</span>: <span class=\"nc\">flags</span><span class=\"p\">.</span><span class=\"n\">outer_exclusive_binder</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"n\">Interned</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">arena</span><span class=\"p\">.</span><span class=\"n\">alloc</span><span class=\"p\">(</span><span class=\"n\">ty_struct</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">kind</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...the only difference is that we wrap the result in a `Ty&lt;TyCtxt&lt;&#39;tcx&gt;&gt;`</span>\n<span class=\"w\">        </span><span class=\"n\">Ty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">interned</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">TypeInterner</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">InternedType</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">intern_ty</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">TyKind</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_flags</span>: <span class=\"nc\">TyFlags</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mk_ty</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">lookup_ty_kind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">interners</span><span class=\"p\">.</span><span class=\"n\">type_</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">kind</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">lookup_ty_flags</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TypeFlags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">interners</span><span class=\"p\">.</span><span class=\"n\">type_</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">flags</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">TypeInterner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">interned</span>: <span class=\"nc\">I</span>::<span class=\"n\">InternedType</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">TypeInterner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">kind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">interner</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">I</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">TyKind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">interner</span><span class=\"p\">.</span><span class=\"n\">lookup_ty_kind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">interned</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">flags</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">interner</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">I</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TyFlags</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">interner</span><span class=\"p\">.</span><span class=\"n\">lookup_ty_flags</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">interned</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Does it look like what you'd expect? Did I understand the design correctly?<br>\nIn particular, what I wrote would mean that in rustc, <code>Ty&lt;TyCtxt&gt;</code> contains an interned <code>&amp;'tcx TyKind&lt;_&gt;</code>, but we would still need to look it up in the interner to get a <code>TyKind</code>? Or should I return the parameter directly:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">lookup_ty_kind</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">TyKind</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>(Also I hope I don't bother you too much <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span>)</p>",
        "id": 206283495,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1596820257
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> You probably have more important stuff to do, but I just wanted to be sure you saw my message <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 207024284,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597501887
    },
    {
        "content": "<p>Being able to just return the parameter directly looks suspicious</p>",
        "id": 207040126,
        "sender_full_name": "detrumi",
        "timestamp": 1597526857
    },
    {
        "content": "<p>Like, that would work regardless of the TypeInterner impl, right? Then <code>lookup_ty_kind</code> wouldn't even be needed</p>",
        "id": 207040202,
        "sender_full_name": "detrumi",
        "timestamp": 1597526949
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> man i'm glad you've been pushing on this and I apologize for being so afk</p>",
        "id": 207508542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597919551
    },
    {
        "content": "<p>slowly, <em>slowly</em> catching back up</p>",
        "id": 207508547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597919556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Refactor.20types.20to.20fit.20the.20chalk-ty.20generic.20plan/near/207508542\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"255061\">LeSeulArtichaut</span> man i'm glad you've been pushing on this and I apologize for being so afk</p>\n</blockquote>\n<p>Sorry for pinging you twice, I didn't know if you didn't have time or if you missed my message for whatever reason</p>",
        "id": 207508781,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597919769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@LeSeulArtichaut</span> well I think that in the compiler <em>today</em> we have <code>Ty&lt;'tcx&gt;</code> which is (iirc) a <code>&amp;'tcx TyS&lt;'tcx&gt;</code> or something like that, right?</p>",
        "id": 207508797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597919781
    },
    {
        "content": "<p>yeah, no worries</p>",
        "id": 207508808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597919792
    },
    {
        "content": "<p>Opening the docs <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 207508824,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597919806
    },
    {
        "content": "<p>it's always very busy and this week and last a bit more so than most :)</p>",
        "id": 207508828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597919810
    },
    {
        "content": "<p>(plus other things)</p>",
        "id": 207508833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597919817
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">type</span> <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">TyS</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 207508839,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597919829
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 207508872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597919879
    },
    {
        "content": "<p>I'm trying to remember what I expected but one thing I might imagine is that <code>InternedTy</code> becomes <code>TyS&lt;'tcx&gt;</code></p>",
        "id": 207508992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597919986
    },
    {
        "content": "<p>ah right and I think <code>Ty&lt;'tcx&gt;</code> was going to be an alias for <code>chalk_ty::Ty&lt;TyCtxt&lt;'tcx&gt;&gt;</code> or something like that</p>",
        "id": 207509071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920033
    },
    {
        "content": "<p>anyway I don't know what the best step-by-step items are in the list</p>",
        "id": 207509079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920044
    },
    {
        "content": "<p>I have to catch up with whatever MCP discussion has (or hasn't) taken place</p>",
        "id": 207509083,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1597920051
    },
    {
        "content": "<p>I think there was a parallel thread in <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a> (<a href=\"#narrow/stream/144729-wg-traits/topic/Type.20library\">here</a>)</p>",
        "id": 207509105,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597920087
    },
    {
        "content": "<blockquote>\n<p>I'm trying to remember what I expected but one thing I might imagine is that <code>InternedTy</code> becomes <code>TyS&lt;'tcx&gt;</code></p>\n</blockquote>\n<p>What I’m still failing to understand is, if the interned type is <code>TyS</code>, why do we need <code>ty.kind()</code> to take the <code>TyCtxt</code> as a parameter? Is it just to allow for generic interning strategies?</p>",
        "id": 207550148,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1597944469
    }
]