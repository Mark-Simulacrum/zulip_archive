[
    {
        "content": "<p>I'm unclear about the exact relationship between Cranelift and wasmtime, but does shipping Cranelift by default also mean shipping a wasm interpreter by default? If so, then it would be interesting to investigate built-in functionality like watt (<a href=\"https://docs.rs/watt/0.4.0/watt/\">https://docs.rs/watt/0.4.0/watt/</a>) where proc macros are compiled to wasm and run in a sandbox</p>",
        "id": 249650897,
        "sender_full_name": "bstrie",
        "timestamp": 1629149703
    },
    {
        "content": "<p>No, cranelift itself doesn't really know anything about wasm. You need a wasm runtime like wasmtime (which uses cranelift to compile clif ir generated from wasm using the cranelift_wasm crate) to run wasm.</p>",
        "id": 249651171,
        "sender_full_name": "bjorn3",
        "timestamp": 1629149857
    },
    {
        "content": "<p>Cranelift does have features useful for wasm runtimes, but it doesn't know about wasm itself.</p>",
        "id": 249651372,
        "sender_full_name": "bjorn3",
        "timestamp": 1629149939
    },
    {
        "content": "<p>good to know, just an idle thought :)</p>",
        "id": 249652614,
        "sender_full_name": "bstrie",
        "timestamp": 1629150560
    },
    {
        "content": "<p>Embedding wasmtime wouldn't be hard; the main issue would be defining an appropriate sandbox.</p>",
        "id": 249681824,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1629180342
    },
    {
        "content": "<p>Embedding wasmtime will have to wait until it has an interpreter in addition to the jit I think. Cranelift can currently only compile for x86_64, aarch64 and s390x. Rustc supports many more host platforms.</p>",
        "id": 249683808,
        "sender_full_name": "bjorn3",
        "timestamp": 1629182617
    },
    {
        "content": "<p>it could start as a best-effort thing and fall back to native execution where it's not available</p>",
        "id": 249691850,
        "sender_full_name": "The 8472",
        "timestamp": 1629189722
    },
    {
        "content": "<p>That won't easily be possible. Dependencies would have to be compiled by cargo (or any other build system) for a different target depending on if wasm or native execution should be used. This build system can't easily tell which target it should choose as rustc decides it.</p>",
        "id": 249731107,
        "sender_full_name": "bjorn3",
        "timestamp": 1629212265
    },
    {
        "content": "<p>I dont see why falling back to an interpreter is not good enough for procmacros.</p>",
        "id": 249732675,
        "sender_full_name": "nagisa",
        "timestamp": 1629212919
    }
]