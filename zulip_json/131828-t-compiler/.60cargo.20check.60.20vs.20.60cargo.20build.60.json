[
    {
        "content": "<p>I'm trying to understand the difference between <code>cargo check</code> and <code>cargo build</code>. I've been using <a href=\"https://github.com/dtolnay/cargo-llvm-lines/\">https://github.com/dtolnay/cargo-llvm-lines/</a> as a test program.</p>",
        "id": 204633690,
        "sender_full_name": "njn",
        "timestamp": 1595398803
    },
    {
        "content": "<p>When I build it with <code>cargo +nightly build</code>, there are 24 <code>*.rlib</code> files produced in <code>target/debug/deps/</code>.</p>",
        "id": 204633708,
        "sender_full_name": "njn",
        "timestamp": 1595398830
    },
    {
        "content": "<p>When I built it with <code>cargo +nightly check</code>, there are 9 <code>*.rlib</code> files produced in <code>target/debug/deps</code>.</p>",
        "id": 204633712,
        "sender_full_name": "njn",
        "timestamp": 1595398846
    },
    {
        "content": "<p>I would like to know why some rlibs are produced for the <code>check</code> case.</p>",
        "id": 204633727,
        "sender_full_name": "njn",
        "timestamp": 1595398876
    },
    {
        "content": "<p>Also, do the command line options affect the hash in these filenames? For many of the files that are produced in both cases (<code>.d</code> and <code>.rmeta</code> files) the hash is different for <code>check</code> vs <code>build</code>. E.g. <code>librand-dde4c0b71da01567.rmeta</code> vs <code>librand-a6e0e642bfb2d31e.rmeta</code>. But for rlibs produced in both cases, the hash is the same, e.g. <code>libheck-9972fd3d677c832a.rlib</code>. So that is puzzling.</p>",
        "id": 204633855,
        "sender_full_name": "njn",
        "timestamp": 1595399059
    },
    {
        "content": "<p>Aren't these proc macro deps? Altough librand as a proc macro dep seems  fishy</p>",
        "id": 204637432,
        "sender_full_name": "panstromek",
        "timestamp": 1595403231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"208862\">@panstromek</span> some probably are: libproc_macro2, libsyn, libquote. But libversion_check sure doesn't seem like one</p>",
        "id": 204637858,
        "sender_full_name": "njn",
        "timestamp": 1595403701
    },
    {
        "content": "<p>nor libheck</p>",
        "id": 204637926,
        "sender_full_name": "njn",
        "timestamp": 1595403746
    },
    {
        "content": "<p><code>libversion_check</code> is probably a build script dependency.</p>",
        "id": 204639583,
        "sender_full_name": "bjorn3",
        "timestamp": 1595405284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> easy way to split them up: pass <code>--target $HOST_TRIPLE</code> to Cargo</p>",
        "id": 204639875,
        "sender_full_name": "eddyb",
        "timestamp": 1595405580
    },
    {
        "content": "<p>well, first remove your <code>target</code> dir, then do that</p>",
        "id": 204639904,
        "sender_full_name": "eddyb",
        "timestamp": 1595405608
    },
    {
        "content": "<p>you'll get <code>target/debug</code> for host (build/proc macro) dependencies and <code>target/$HOST_TRIPLE/debug</code> for \"target\" (in this case also the host) dependencies</p>",
        "id": 204639976,
        "sender_full_name": "eddyb",
        "timestamp": 1595405645
    },
    {
        "content": "<p>this is what rustbuild does, and why e.g. <code>stageN-std</code> has the substructure it does</p>",
        "id": 204640000,
        "sender_full_name": "eddyb",
        "timestamp": 1595405673
    },
    {
        "content": "<p>all the outputs and their normal dependencies are in the longer path with the triple in it, the shorter path only has build deps and proc macros (and their deps)</p>",
        "id": 204640056,
        "sender_full_name": "eddyb",
        "timestamp": 1595405723
    },
    {
        "content": "<p>@eddyb, @bjorn3: thanks for the info. The <code>--target</code> trick shows that they are all host dependencies</p>",
        "id": 204644980,
        "sender_full_name": "njn",
        "timestamp": 1595409415
    },
    {
        "content": "<p>I had a feeling that if you alternated between <code>cargo check</code> and <code>cargo build</code> there were some inefficiencies, but on investigation I can't find any, it seems all to work sensibly</p>",
        "id": 204645153,
        "sender_full_name": "njn",
        "timestamp": 1595409581
    },
    {
        "content": "<p>I think we even tried to improve that reuse recently. cc <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span></p>",
        "id": 204645454,
        "sender_full_name": "eddyb",
        "timestamp": 1595409815
    },
    {
        "content": "<p>eddyb is correct, proc-macros and build scripts are shared between the two commands. There haven't been any changes to that.  The <code>.rmeta</code> files  can't currently be shared because rustc generates them differently if it is not doing a full build.  That's why the hashes are different, Cargo includes the \"mode\" in the hash to differentiate the files.</p>",
        "id": 204665120,
        "sender_full_name": "Eric Huss",
        "timestamp": 1595424746
    },
    {
        "content": "<p>I saw the the sizes of the <code>.d</code> and <code>.rmeta</code> files are different for <code>check</code> vs <code>build</code></p>",
        "id": 204731721,
        "sender_full_name": "njn",
        "timestamp": 1595458090
    },
    {
        "content": "<p>maybe we could store the extra information separately?</p>",
        "id": 204755869,
        "sender_full_name": "eddyb",
        "timestamp": 1595472493
    },
    {
        "content": "<p>it has to do with codegen/linking, right?</p>",
        "id": 204755876,
        "sender_full_name": "eddyb",
        "timestamp": 1595472518
    },
    {
        "content": "<p>but it can't be only in the <code>rlib</code> because I believe pipelining wants to start <em>after</em> that information is available</p>",
        "id": 204755885,
        "sender_full_name": "eddyb",
        "timestamp": 1595472543
    },
    {
        "content": "<p>pipelining starts after metadata is available</p>",
        "id": 204758262,
        "sender_full_name": "njn",
        "timestamp": 1595476454
    },
    {
        "content": "<p>and metadata is done as early as reasonably possible, because of that</p>",
        "id": 204758271,
        "sender_full_name": "njn",
        "timestamp": 1595476474
    },
    {
        "content": "<p>yes, and it requires information that's not available in check-only <code>rmeta</code> outputs</p>",
        "id": 204758287,
        "sender_full_name": "eddyb",
        "timestamp": 1595476485
    },
    {
        "content": "<p>I'm not sure what it is but it might the collection of monomorphized instances (just their IDs and parameters, before any codegen starts)</p>",
        "id": 204758327,
        "sender_full_name": "eddyb",
        "timestamp": 1595476546
    },
    {
        "content": "<p>mmm, I see</p>",
        "id": 204758450,
        "sender_full_name": "njn",
        "timestamp": 1595476681
    },
    {
        "content": "<p>separate storage sounds reasonable</p>",
        "id": 204758496,
        "sender_full_name": "njn",
        "timestamp": 1595476703
    },
    {
        "content": "<p>it would only benefit people who switch between <code>cargo check</code> and <code>cargo build</code> (debug), right? Though that's probably a common pattern</p>",
        "id": 204758510,
        "sender_full_name": "njn",
        "timestamp": 1595476746
    },
    {
        "content": "<p>it would be nice if <code>./x.py check</code> and <code>./x.py build --stage 1 src/libstd</code> could reuse work tbh</p>",
        "id": 204758533,
        "sender_full_name": "eddyb",
        "timestamp": 1595476802
    },
    {
        "content": "<p>but that's even harder as the build is release mode</p>",
        "id": 204758588,
        "sender_full_name": "eddyb",
        "timestamp": 1595476812
    },
    {
        "content": "<p>I would <em>love</em> not to have to recompile between build and check</p>",
        "id": 204759951,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595478843
    },
    {
        "content": "<p>For both x.py and regular builds</p>",
        "id": 204759955,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595478851
    },
    {
        "content": "<p>Indeed <a href=\"https://github.com/rust-lang/cargo/issues/3501\">https://github.com/rust-lang/cargo/issues/3501</a></p>",
        "id": 204791795,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595508582
    }
]