[
    {
        "content": "<p>Skimming the meeting notes from weekly meeting 2019-04-04 <a href=\"https://github.com/rust-lang/rust/issues/54818\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54818\">#54818</a> I saw this:</p>\n<blockquote>\n<p>The actual name resolution is waiting for <span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> and <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> though: hopefully we create a plan of attack next week?</p>\n</blockquote>\n<p>hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> and <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> -- say more about this? =)</p>",
        "id": 163038361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554925105
    },
    {
        "content": "<p>We need to plan nameresolution librarification basically. Currently at least I don’t have any clear idea of how it should look like. This week turned out pretty busy for me,though :(</p>",
        "id": 163041158,
        "sender_full_name": "matklad",
        "timestamp": 1554927135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> any change that tomorrow might work for you (<a href=\"https://doodle.com/poll/dps6yqmwmzpwr2x6\" target=\"_blank\" title=\"https://doodle.com/poll/dps6yqmwmzpwr2x6\">https://doodle.com/poll/dps6yqmwmzpwr2x6</a>)? </p>\n<p>I feel like we should get this going already :)</p>",
        "id": 163042945,
        "sender_full_name": "matklad",
        "timestamp": 1554928429
    },
    {
        "content": "<p>I filled that in with my availability</p>",
        "id": 163050744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554934046
    },
    {
        "content": "<p>looks like there's no time that fits everyone :(</p>",
        "id": 163077321,
        "sender_full_name": "matklad",
        "timestamp": 1554968285
    },
    {
        "content": "<p>I'm happy to be excluded</p>",
        "id": 163103727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554992444
    },
    {
        "content": "<p>:)</p>",
        "id": 163103729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554992444
    },
    {
        "content": "<p>Can you resolve a crate independent of its dependencies?</p>",
        "id": 219385968,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607542222
    },
    {
        "content": "<p>no, because it can refer to dependent crates</p>",
        "id": 219386168,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607542315
    },
    {
        "content": "<p>I’m still learning so I will attempt to answer my own question and if possible please correct my erroneous thinking.</p>\n<p>use foo::bar</p>\n<p>let x = bar.get()</p>\n<p>If resolution stores the ‘bar’ symbol without knowing whether it is a method or not, we can resolve the above</p>",
        "id": 219386176,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607542319
    },
    {
        "content": "<p>like <code>use serde::Deserialize</code></p>",
        "id": 219386179,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607542320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"364259\">Joe Seriah</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Name.20Resolution/near/219386176\">said</a>:</p>\n<blockquote>\n<p>I’m still learning so I will attempt to answer my own question and if possible please correct my erroneous thinking.</p>\n<p>use foo::bar</p>\n<p>let x = bar.get()</p>\n<p>If resolution stores the ‘bar’ symbol without knowing whether it is a method or not, we can resolve the above</p>\n</blockquote>\n<p>there are different namespaces, so that doesn't work</p>",
        "id": 219386264,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607542341
    },
    {
        "content": "<p>you need to know which namespace the item is in to know if the name overlaps</p>",
        "id": 219386275,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607542347
    },
    {
        "content": "<p>Can you give an example of overlapping?</p>",
        "id": 219386404,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607542395
    },
    {
        "content": "<p>My thinking is that to resolve you just need to know that the expression was made from previously declared symbols?</p>",
        "id": 219386639,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607542476
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">S</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219386697,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607542496
    },
    {
        "content": "<p>Hmm there are no use statements here?</p>",
        "id": 219386816,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607542560
    },
    {
        "content": "<p>right, yes, but they are all in the same module</p>",
        "id": 219386882,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607542575
    },
    {
        "content": "<p>you don't know what <code>module::S</code> refers to</p>",
        "id": 219386897,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607542582
    },
    {
        "content": "<p>Oh right, yeah on the same page, so my thought was that you don’t need to know, in order to name resolve another crate</p>",
        "id": 219386983,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607542622
    },
    {
        "content": "<p>use foo::S</p>\n<p>let x = S</p>",
        "id": 219387025,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607542639
    },
    {
        "content": "<p>This would pass because S is from the foo crate, whatever item it is</p>",
        "id": 219387055,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607542658
    },
    {
        "content": "<p>To nit: <code>fn S()</code> and <code>struct S</code> will actually overlap (and conflict) on the value namespace (<code>struct S;</code> is <code>struct S {}</code> <em>and</em> <code>const S: S = S {};</code>)</p>",
        "id": 219387073,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607542669
    },
    {
        "content": "<p>oh thanks, yeah I meant <code>struct S {}</code></p>",
        "id": 219387182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607542699
    },
    {
        "content": "<p>(Full details for Daniel's point: <a href=\"https://rust-lang.github.io/rfcs/1506-adt-kinds.html#tuple-structs\">https://rust-lang.github.io/rfcs/1506-adt-kinds.html#tuple-structs</a>)</p>",
        "id": 219387329,
        "sender_full_name": "scottmcm",
        "timestamp": 1607542767
    },
    {
        "content": "<p>use foo::bar</p>\n<p>let j = bar::hello2::call()</p>\n<p>So this would pass too for example, there might not be a hello2 module that exists. But for name resolution I think thats fine? As long as Mamés are resolved to something</p>",
        "id": 219387561,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607542859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I ask because it seems that rustc is doing something similar. Macros and imports seem to not be resolved immediately from a doc comment I read</p>",
        "id": 219387859,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607543000
    },
    {
        "content": "<p>———————<br>\nStill wondering if I am understanding what is happening correctly though?</p>",
        "id": 219388036,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607543072
    },
    {
        "content": "<p>macro expansion happens interleaved with name resolution (because macro expansion can create new names), and you obviously need the dependency crates to expand macros from them</p>",
        "id": 219388442,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1607543279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> oh I see, can you explain what happens during late resolution?</p>",
        "id": 219388738,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607543420
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"364259\">@Joe Seriah</span> have you read through the guide? <a href=\"https://rustc-dev-guide.rust-lang.org/name-resolution.html?highlight=resolve#name-resolution\">https://rustc-dev-guide.rust-lang.org/name-resolution.html?highlight=resolve#name-resolution</a></p>",
        "id": 219388804,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607543464
    },
    {
        "content": "<p>Yep, I just re-read it and corrected myself as it says the macros are already expanded. It does say that imports are resolved, it’s still a bit unclear as to why you need to resolve imports to me though</p>",
        "id": 219390062,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607544120
    },
    {
        "content": "<p>I also saw this which made me think that imports are not fully resolved: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_hir/def.rs.html#247\">https://doc.rust-lang.org/nightly/nightly-rustc/src/rustc_hir/def.rs.html#247</a></p>",
        "id": 219390163,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607544164
    },
    {
        "content": "<p>Or at least not fully</p>",
        "id": 219390237,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607544197
    },
    {
        "content": "<p>A path may be partially resolved if some of the contained items are produced by macros</p>",
        "id": 219391028,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607544605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span>  That makes sense. My last confusion is, if we don’t use macros, then during name resolution, why do we need to resolve the path?</p>\n<p>Maybe there’s a reason the following cannot/should not be resolved without resolving imports first? </p>\n<p>use baz::foo;</p>\n<p>Let bar = foo;<br>\nLet x = foo + bar;</p>",
        "id": 219391544,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607544936
    },
    {
        "content": "<p>How would you know what <code>foo</code> means without some amount of path resolution?</p>",
        "id": 219391639,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607544974
    },
    {
        "content": "<p>Assuming no macros this time; trying to get an understanding</p>",
        "id": 219391645,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607544976
    },
    {
        "content": "<p>We only need to know that foo resolved to a symbol?</p>",
        "id": 219391688,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607545005
    },
    {
        "content": "<p>Sorry, that foo is a symbol</p>",
        "id": 219391705,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607545017
    },
    {
        "content": "<p>that's not what name resolution does though</p>",
        "id": 219391709,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545019
    },
    {
        "content": "<p>it resolves to a DefId, not to a symbol</p>",
        "id": 219391722,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545028
    },
    {
        "content": "<p>The compiler needs to know which item <code>foo</code> resolves to so it can typecheck</p>",
        "id": 219391738,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607545041
    },
    {
        "content": "<p>(well, technically a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/def/enum.Res.html\"><code>Res</code></a>)</p>",
        "id": 219391764,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545059
    },
    {
        "content": "<p>Oh, why do we need to type check in the name resolution?</p>",
        "id": 219391765,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607545060
    },
    {
        "content": "<p>no no other way</p>",
        "id": 219391778,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545066
    },
    {
        "content": "<p>type checking needs name resolution</p>",
        "id": 219391785,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545071
    },
    {
        "content": "<p>otherwise it doesn't have any information to work with</p>",
        "id": 219391798,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545078
    },
    {
        "content": "<p>For example, how would you know what code to generate for this <code>main</code> function if you don't know what <code>foo</code> resolves to?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bar</span>::<span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219391896,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607545121
    },
    {
        "content": "<p>So it would not be possible to resolve it as a symbol first and then resolve the import path in a path resolution phase?</p>",
        "id": 219391901,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607545123
    },
    {
        "content": "<p>Rust has no concept of symbols</p>",
        "id": 219391951,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607545147
    },
    {
        "content": "<p>what does 'resolve it as a symbol' mean?</p>",
        "id": 219391954,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545148
    },
    {
        "content": "<p>At least not of symbols like that</p>",
        "id": 219391967,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607545154
    },
    {
        "content": "<p>What exactly do you mean by \"symbol\" here?</p>",
        "id": 219392008,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607545176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> the example you made would pass name resolution, but it may not pass path resolution if there is no function foo under the path</p>",
        "id": 219392088,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607545206
    },
    {
        "content": "<p>you've made up your own vocabulary without explaining it</p>",
        "id": 219392141,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545234
    },
    {
        "content": "<p>what is a symbol? what are the outputs from 'name resolution'?</p>",
        "id": 219392159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> good point, by symbol I mean it’s a string which identifies a node</p>",
        "id": 219392344,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607545331
    },
    {
        "content": "<p>Well, we have several structures that can identify nodes, like <code>NodeId</code> and <code>DefId</code></p>",
        "id": 219392392,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607545363
    },
    {
        "content": "<p>Why use a string, specifically?</p>",
        "id": 219392419,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607545377
    },
    {
        "content": "<p>I mentioned string specifically because for example in;</p>\n<p>use bar::foo</p>\n<p>let x = 1 + foo</p>\n<p>We would store foo as a String, and then when we see the add expr we just lookup the ‘foo’ mentioned in the expression with the foo from the import we stored</p>",
        "id": 219392661,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607545502
    },
    {
        "content": "<p>that's not actually doing any work though? that says take \"foo\" as a string and output \"foo\" as a string</p>",
        "id": 219392713,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545527
    },
    {
        "content": "<p>I think it looks up foo in the expression to see if we have foo in a map?</p>",
        "id": 219392814,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607545565
    },
    {
        "content": "<p>but you can't without resolving imports :/</p>",
        "id": 219392840,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545578
    },
    {
        "content": "<p>like glob imports are completely unknown if you dont' compile dependencies</p>",
        "id": 219392859,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545590
    },
    {
        "content": "<p>also this breaks shadowing, now you need to do that later too</p>",
        "id": 219392908,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607545616
    },
    {
        "content": "<p>It might be worthwhile to look at rust-analyzer's code instead of rustc's, since rust-analyzer's code tends to be more readable and do more fine-grained work to improve incremental computation</p>",
        "id": 219393081,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607545692
    },
    {
        "content": "<p>Alright will do, thank you again for the help and discussion</p>",
        "id": 219393216,
        "sender_full_name": "Joe Seriah",
        "timestamp": 1607545772
    }
]