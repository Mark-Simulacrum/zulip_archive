[
    {
        "content": "<p>Currently, it can be fairly difficult to debug a <code>Borrow</code>/<code>BorrowMut</code> panic from a <code>RefCell</code>. In a larger codebase, there may be lots of places where <code>.borrow()</code> and <code>.borrow_mut()</code> are called, so just seeing one backtrace may not be enough.</p>\n<p>There are crates like <code>debug-cell</code> and <code>accountable-refcell</code>, which are <em>mostly</em> drop-in replacements for <code>RefCell</code> that track the backtraces of outstanding borrows. However, any such crate needs to provide its own <code>Ref</code> and <code>RefMut</code> types. If a crate uses any of the <code>Ref</code>/<code>RefMut</code> API functions explicitly (e.g <code>std::cell::RefMut::map(my_ref, |a| b)</code>), then it can be quite difficult to use one of those crates for debugging purposes.</p>\n<p>Now that we have <code>Backtrace</code> in <code>libstd</code> and <code>cargo -Z build-std</code>, I think there's a possible solution. We can add an off-by-default feature <code>debug-refcell</code> to <code>libstd</code>. When enabled, it enables backtrace capturing for outstanding <code>Ref</code>/<code>RefMut</code> borrows, which get included in the panic message. When disabled, all of the extra fields and implementation get compiled out, so there's no additional overhead by default.</p>\n<p>Actually using this feature will require using <code>cargo -Z build-std</code>. If it proves to be useful, we could try adding a nicer interface for users to enable it when debugging.</p>\n<p>AFAIK, there's no precedent for this kind of feature in libstd. However, I think it could greatly improve the debugging experience without impacting normal users.</p>",
        "id": 226273614,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613257031
    },
    {
        "content": "<p>This would be a very heavy hammer (backtraces will get captured for every crate in the dependency graph that uses <code>RefCell</code>, regardless if they ever panic). However, it will be off by default, so users can just choose not to use it if it's not feasible for a particular project</p>",
        "id": 226273690,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613257132
    },
    {
        "content": "<p>I like this :) would you also turn it on when <code>debug = true</code> is set in config.toml?</p>",
        "id": 226273771,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613257234
    },
    {
        "content": "<p>uh, maybe</p>",
        "id": 226273846,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613257334
    },
    {
        "content": "<p>I think that could be decided later</p>",
        "id": 226273847,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613257339
    },
    {
        "content": "<p>This feels like a T-libs question to me, personally, as it largely is about public API here (the implementation does not seem particularly challenging in an obvious way)</p>",
        "id": 226282045,
        "sender_full_name": "simulacrum",
        "timestamp": 1613271010
    },
    {
        "content": "<p>I wasn't sure if cargo features for libstd actually counted as public API</p>",
        "id": 226282521,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613271897
    },
    {
        "content": "<p>since the libstd crate itself requires nightly to build, and<code>cargo -Z build-std</code> is unstable</p>",
        "id": 226282532,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613271930
    },
    {
        "content": "<p>Sure, but libs team currently evaluates unstable std additions</p>",
        "id": 226282592,
        "sender_full_name": "simulacrum",
        "timestamp": 1613272065
    },
    {
        "content": "<p><code>Backtrace</code> would need to be part of libcore, right? That is where <code>RefCell</code> lives.</p>",
        "id": 226293544,
        "sender_full_name": "bjorn3",
        "timestamp": 1613292202
    },
    {
        "content": "<p>Right - there's an open PR for that, I think</p>",
        "id": 226313176,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613320286
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/77384\">https://github.com/rust-lang/rust/pull/77384</a></p>",
        "id": 226326667,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613339470
    },
    {
        "content": "<p>Just one bit of info: I've seen in the past (which might no longer be true) backtrace being <strong>super</strong> slow when called. If every borrow can potentially invoke it, performance _could_ suffer dramatically.</p>",
        "id": 226332208,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1613345757
    },
    {
        "content": "<p>Please have some benchmark ready to measure before merging any PR</p>",
        "id": 226332261,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1613345797
    },
    {
        "content": "<p>Well, it will be off by default</p>",
        "id": 226335435,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613350220
    },
    {
        "content": "<p>So it doesn't really have to be optimized when it's on - it just needs to be useable</p>",
        "id": 226335448,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613350266
    },
    {
        "content": "<p>Capturing the addresses of the stack should be feasible and fast; I don't think it's a public API yet but we can use it if desired in std. Resolving those can be done just on failure. In practice though I'd start with track caller and storing a finite amount of currently held borrows - I imagine it would be enough in 99% of cases. But maybe more work.</p>",
        "id": 226336220,
        "sender_full_name": "simulacrum",
        "timestamp": 1613351515
    },
    {
        "content": "<p>IIRC, the issue was that symbol resolution was single-threaded or something like that, so just storing the addresses might indeed be fast enough for the critical path.</p>",
        "id": 226552731,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1613499170
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/pull/82271\">https://github.com/rust-lang/rust/pull/82271</a></p>",
        "id": 226873173,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1613679346
    }
]