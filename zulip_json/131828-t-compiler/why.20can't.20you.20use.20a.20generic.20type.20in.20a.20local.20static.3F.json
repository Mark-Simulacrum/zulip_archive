[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">EXAMPLE</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0401]: can&#39;t use type parameters from outer function\n --&gt; src/lib.rs:2:28\n  |\n1 | fn example&lt;T&gt;() {\n  |    ------- - type variable from outer function\n  |    |\n  |    try adding a local type parameter in this method instead\n2 |     static EXAMPLE: Option&lt;T&gt; = None;\n  |                            ^ use of type variable from outer function\n</pre></div>\n\n\n<p>Ignoring the poor suggestion in the error message, what's the real reason preventing this?</p>",
        "id": 134781323,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538092100
    },
    {
        "content": "<p>Is it that the compiler doesn't want to (can't?) create N instances of <code>EXAMPLE</code>, one for each concrete instance of <code>T</code> that's used at final compile time?</p>",
        "id": 134781349,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538092168
    },
    {
        "content": "<blockquote>\n<p>Is it that the compiler doesn't want to (can't?) create N instances of <code>EXAMPLE</code>, one for each concrete instance of <code>T</code> that's used at final compile time?</p>\n</blockquote>\n<p>My suspicion is that the concrete reason what you describe is unsupported is just the more general \"we don't let you inherit generics in nested items.\" I.e. there's no <em>reason</em> per se that we couldn't allow nesting of <code>fn foo&lt;T&gt;(...) { fn bar(x: T) { ... } ... }</code>. But we don't , and <em>that</em> is more of an opinionated design decision...</p>",
        "id": 134810661,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538125014
    },
    {
        "content": "<p>having said that, the hypothesis you put forward is a pretty good description of why the lang team might <em>balk</em> at adding support for allowing local statics in a generic function...</p>",
        "id": 134810690,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538125059
    },
    {
        "content": "<p>(i.e., I'd summarize it as \"people expect there to be a single instance of a given static. A generic static inherently breaks that.\")</p>",
        "id": 134810758,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538125130
    },
    {
        "content": "<p>also, I don't know if the language itself <em>guarantees</em> that it will always use a monomorphization strategy for implementing all generics...</p>",
        "id": 134810790,
        "sender_full_name": "pnkfelix",
        "timestamp": 1538125174
    }
]