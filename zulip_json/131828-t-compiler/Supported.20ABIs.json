[
    {
        "content": "<p>In <a href=\"https://github.com/rust-lang/reference/issues/975\">https://github.com/rust-lang/reference/issues/975</a> it is noted that we don't document which ABIs are supported by the compiler in the rustc book nor in the reference. As far as I'm aware, the supported ABIs is a compiler decision, not a language decision, so should we be documenting them in the rustc book?</p>\n<p>Also, I assume some of them should be defined in all Rust implementations, but I'm not sure which ones those would be.</p>",
        "id": 229583892,
        "sender_full_name": "isHavvy",
        "timestamp": 1615337649
    },
    {
        "content": "<p>To clarify, the ABIs are documented at <a href=\"https://doc.rust-lang.org/nightly/reference/items/external-blocks.html#abi\">https://doc.rust-lang.org/nightly/reference/items/external-blocks.html#abi</a></p>\n<blockquote>\n<p>the supported ABIs is a compiler decision, not a language decision</p>\n</blockquote>\n<p>Can you say more why you think that should be?  I can only think of lint names as a language-exposed concept that are marked as compiler-specific.  I think there is value in avoiding compiler-specific things as much as possible.</p>",
        "id": 229591493,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615342978
    },
    {
        "content": "<p>As in, if there is a second Rust compiler, it should not have to support every single ABI that rustc does. Although without a second compiler, it's all theoretical.</p>",
        "id": 229594235,
        "sender_full_name": "isHavvy",
        "timestamp": 1615344943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"296643\">isHavvy</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Supported.20ABIs/near/229594235\">said</a>:</p>\n<blockquote>\n<p>As in, if there is a second Rust compiler, it should not have to support every single ABI that rustc does. Although without a second compiler, it's all theoretical.</p>\n</blockquote>\n<p>Indeed.<br>\nThough even on rustc, it's already implementation-specific, if you consider the different platforms to be distinct \"implementations\".  <code>extern\"fastcall\"</code> makes little sense on x86_64-pc-linux-gnu, after all, and rustc does reflect this.</p>",
        "id": 229597162,
        "sender_full_name": "Connor Horman",
        "timestamp": 1615347259
    },
    {
        "content": "<p>There is also distinctions between rustc and rustc-with-<code>feature(unboxed_closures)</code> in that the latter also supports <code>extern\"rust-call\"</code> on function definitions.</p>",
        "id": 229597390,
        "sender_full_name": "Connor Horman",
        "timestamp": 1615347429
    },
    {
        "content": "<p>Why not, though?  What's special about ABIs that they shouldn't be stabilized in the language? I think it is desirable to maximize how much Rust code works on all Rust compilers.</p>\n<p>(I would say that an implementation that doesn't support a particular target doesn't need to support ABIs specific to that target.)</p>\n<p>If there are implementation-defined extensions, I think it would be good for there to be some way to distinguish those.  I personally wouldn't be comfortable saying the ABI string is a free-for-all unregulated namespace.</p>",
        "id": 229597409,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615347446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Supported.20ABIs/near/229597409\">said</a>:</p>\n<blockquote>\n<p>Why not, though?  What's special about ABIs that they shouldn't be stabilized in the language? I think it is desirable to maximize how much Rust code works on all Rust compilers.</p>\n<p>(I would say that an implementation that doesn't support a particular target doesn't need to support ABIs specific to that target.)</p>\n<p>If there are implementation-defined extensions, I think it would be good for there to be some way to distinguish those.  I personally wouldn't be comfortable saying the ABI string is a free-for-all unregulated namespace.</p>\n</blockquote>\n<p>What if an implementation wants to provide aditional abis, such as linking to or defining C++ functions with properly mangled names?  Or allowing FFI to swift, because it also supports compiling and linking swift? <br>\nAlso, the abi string already is an unregulated namespace. There are 3 rustc unstable features that define compiler-specific extension abis, the abis being <code>\"rust-call\"</code>, <code>\"rust-intrinsic\"</code>, and <code>\"platform-intrinsic\"</code>.  An implementation may choose to support these abis, but, given that they are unstable, they are not required to at all.</p>",
        "id": 229597716,
        "sender_full_name": "Connor Horman",
        "timestamp": 1615347622
    },
    {
        "content": "<p>It also means that supporting a new ABI for some specialized embedded platform would require going through T-lang, getting them to approve something that doesn't  have a lot of value for the rest of the language or ecosystem, which could be left behind for a good while.</p>",
        "id": 229597941,
        "sender_full_name": "Connor Horman",
        "timestamp": 1615347753
    },
    {
        "content": "<p>That's why I mention it would be good to have some way to signify that an ABI is implementation-specific.  Like MSVC uses double leading underscores, something like that.</p>\n<p><code>rustc</code> is somewhat special in that it is the primary implementation, it drives the definition of the language. Also, it can do whatever it wants with unstable features.  Unstable things are not in the language reference, and from that perspective they don't exist.</p>",
        "id": 229598351,
        "sender_full_name": "Eric Huss",
        "timestamp": 1615347978
    }
]