[
    {
        "content": "<p>Hey folks, I am working on a proc macro that stores some state about previous macro invocations.  Following this post <a href=\"https://stackoverflow.com/questions/52910783/is-it-possible-to-store-state-within-rusts-procedural-macros\">https://stackoverflow.com/questions/52910783/is-it-possible-to-store-state-within-rusts-procedural-macros</a> and reading this <a href=\"https://rustc-dev-guide.rust-lang.org/parallel-rustc.html\">https://rustc-dev-guide.rust-lang.org/parallel-rustc.html</a> I am left wondering if I could end up in the situation where macros are expanded in parallel and I miss tracking an invocation in the shared state.  </p>\n<p>My question is basically is macro expansion part of codegen as mentioned in the second link and is it likely I will have the problem I described.</p>",
        "id": 265955242,
        "sender_full_name": "technetos",
        "timestamp": 1640295242
    },
    {
        "content": "<p>Yes, proc macros are allowed to be expanded in parallel. Rustc currently doesn't do this, but it may in the future. In fact it may run every expansion in it's own process, thus clearing any state you try to keep. Also rust-analyzer doesn't reload the proc macro server every time you change the code so old state will be left around. It also caches the results of previous macro invocations. <strong>Don't use any state in proc macros.</strong> Keep them pure functions from input tokenstream to output tokenstream.</p>",
        "id": 265955577,
        "sender_full_name": "bjorn3",
        "timestamp": 1640295560
    },
    {
        "content": "<p>Good to know.  Thanks for taking the time to answer my question.</p>",
        "id": 265955961,
        "sender_full_name": "technetos",
        "timestamp": 1640295956
    }
]