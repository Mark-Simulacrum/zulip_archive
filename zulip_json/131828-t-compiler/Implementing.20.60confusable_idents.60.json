[
    {
        "content": "<p>So i'll start looking into how to implement <code>confusable_idents</code> and <code>mixed_script_confusables</code>, whichever is easier to implement.</p>",
        "id": 184802753,
        "sender_full_name": "Charles Lew",
        "timestamp": 1578142191
    },
    {
        "content": "<p>One immediate question i come up with, is that these two lints are kind of \"accumulative\", where each identifiers it meets is compared with everything it has seen before.</p>",
        "id": 184802815,
        "sender_full_name": "Charles Lew",
        "timestamp": 1578142260
    },
    {
        "content": "<p>Since there's ongoing \"parallel rustc\" efforts going on, this makes me wonder how would i store the previous states.</p>",
        "id": 184802880,
        "sender_full_name": "Charles Lew",
        "timestamp": 1578142347
    },
    {
        "content": "<p>I think i needs some instructions here again...  <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> <br>\n<a href=\"https://github.com/rust-lang/rust/issues/55467\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55467\">https://github.com/rust-lang/rust/issues/55467</a></p>",
        "id": 184802945,
        "sender_full_name": "Charles Lew",
        "timestamp": 1578142509
    },
    {
        "content": "<p>Yeah no I wouldn't touch those yet</p>",
        "id": 184802953,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1578142539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> said he had a wip branch for some of this</p>",
        "id": 184802997,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1578142568
    },
    {
        "content": "<p>Mixed script confusables is one you might want to try, the rfc suggests a way to make it super efficient</p>",
        "id": 184803001,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1578142585
    },
    {
        "content": "<p>I'd just leave the confusables lint for now</p>",
        "id": 184803006,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1578142602
    },
    {
        "content": "<p>Ok. I think i'll just find something else to play with for now. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 184803073,
        "sender_full_name": "Charles Lew",
        "timestamp": 1578142713
    },
    {
        "content": "<p>I have also read some code about \"Adjustments to \"bad style\" lints\" item</p>",
        "id": 184803088,
        "sender_full_name": "Charles Lew",
        "timestamp": 1578142770
    },
    {
        "content": "<p>i think there's nothing that needs to be changed, if i've read it correctly.</p>",
        "id": 184803096,
        "sender_full_name": "Charles Lew",
        "timestamp": 1578142792
    },
    {
        "content": "<p>Maybe we need to review the progress and tick some checkboxes in the tracking issue at some point.</p>",
        "id": 184803158,
        "sender_full_name": "Charles Lew",
        "timestamp": 1578142861
    },
    {
        "content": "<blockquote>\n<p>A fast way to implement this is to compute skeleton for each identifier once and place the result in a hashmap as a key. If one tries to insert a key that already exists check if the two identifiers differ from each other. If so report the two confusable identifiers.</p>\n</blockquote>",
        "id": 184803174,
        "sender_full_name": "Charles Lew",
        "timestamp": 1578142906
    },
    {
        "content": "<p>So it's based on a hashmap, and it still has parallelism issues. Maybe i'll wait for <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> at this point.</p>",
        "id": 184803226,
        "sender_full_name": "Charles Lew",
        "timestamp": 1578142994
    },
    {
        "content": "<p>I don't think the parser is in the critical path for compilation speed in any existing non heavily nested project, I have a few with generated code that go in the hundreds of thousands of lines and the problem there is after the ast is created</p>",
        "id": 184807436,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1578150229
    },
    {
        "content": "<p>Can't this just walk the entire crate at a later point and look at all  identifiers instead of carrying state around?</p>",
        "id": 184807484,
        "sender_full_name": "Zoxc",
        "timestamp": 1578150289
    },
    {
        "content": "<p>And for heavy meeting the problem is blowing the stack on heavy recurtion</p>",
        "id": 184807485,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1578150291
    },
    {
        "content": "<p>We can but we'd also want to use this for ident not found suggestions</p>",
        "id": 184807497,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1578150324
    },
    {
        "content": "<p>We do have some big rwlocks already, right?</p>",
        "id": 184807621,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1578150535
    },
    {
        "content": "<p>That might not go away anytime soon</p>",
        "id": 184807630,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1578150547
    },
    {
        "content": "<p>When do <code>ident not found suggestions</code> happen? I assume we can collect all idents after macro expansion.</p>",
        "id": 184807704,
        "sender_full_name": "Zoxc",
        "timestamp": 1578150648
    },
    {
        "content": "<p>You can't really use locks for this kind of state since it would be non-deterministic and also not tracked by incremental compilation.</p>",
        "id": 184807716,
        "sender_full_name": "Zoxc",
        "timestamp": 1578150701
    },
    {
        "content": "<blockquote>\n<p>When do <code>ident not found suggestions</code> happen? I assume we can collect all idents after macro expansion.</p>\n</blockquote>\n<p>Then you will miss the identifiers of expanded macros.</p>",
        "id": 184815680,
        "sender_full_name": "bjorn3",
        "timestamp": 1578164892
    },
    {
        "content": "<p>Feel free to ping me if there's any actionable item on my side. I'm happy to help push this implementation work forward.</p>",
        "id": 184854551,
        "sender_full_name": "Charles Lew",
        "timestamp": 1578241163
    }
]