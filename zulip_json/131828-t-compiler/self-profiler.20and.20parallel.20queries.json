[
    {
        "content": "<p>I'm looking at changing how the self-profiler records query execution time to be per-query instead of per-category to allow us to show more detailed profiling data at the query level. As part of this, I think it would be great to also support the parallel queries option (currently, using both <code>-Z self-profile</code> and <code>-Z query-threads=n</code> results in an <a href=\"https://github.com/rust-lang/rust/issues/54141\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54141\">ICE</a>). One obvious option would be to make the storage use atomics. Another option might be to have some kind of TLS/task context which would record the data without using atomics. Perhaps there's a third option?</p>\n<p>Does anyone have an opinion on which would be the better path to go down? cc <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span></p>",
        "id": 156789346,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548350375
    },
    {
        "content": "<p>You could use a per thread list of events. I think the more important question is how to visualize things (and what to record).</p>",
        "id": 156789626,
        "sender_full_name": "Zoxc",
        "timestamp": 1548350635
    },
    {
        "content": "<p>I'd like to remove query cache hits from the results without <code>debug_assertions</code>, mostly because that is in the query hot path and isn't affected by the time things take (so enabling <code>debug_assertions</code> doesn't affect the results, assuming we don't run different queries with <code>debug_assertions</code>...)</p>",
        "id": 156789739,
        "sender_full_name": "Zoxc",
        "timestamp": 1548350741
    },
    {
        "content": "<blockquote>\n<p>You could use a per thread list of events.</p>\n</blockquote>\n<p>Is there an api or something I should use? Or can I just use regular TLS stuff?</p>",
        "id": 156789857,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548350820
    },
    {
        "content": "<p>(I've never used Rayon before so I don't know if there's a better way of doing this in that library)</p>",
        "id": 156789874,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548350837
    },
    {
        "content": "<p>I was expecting per-thread-lists of events</p>",
        "id": 156789924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548350881
    },
    {
        "content": "<p>I would probably just use regular TLS</p>",
        "id": 156789990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548350909
    },
    {
        "content": "<p>though how to \"sweep all the threads\"...? I can't remember but I think we make a separate \"tcx\" per thread or something?</p>",
        "id": 156790010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548350934
    },
    {
        "content": "<p>(mm perhaps not?)</p>",
        "id": 156790026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548350946
    },
    {
        "content": "<p>but basically I wonder if there is some per-thread state we can already build on (and if not, I suspect we may want it)</p>",
        "id": 156790038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548350960
    },
    {
        "content": "<p>Does Rayon send a shutdown message to each thread to get them to terminate or does it just <code>kill</code> them from the outside or something?</p>",
        "id": 156790135,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548351014
    },
    {
        "content": "<p>it cerainly doesn't kill them</p>",
        "id": 156790157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548351028
    },
    {
        "content": "<p>Maybe there's a way to send a message to each thread to get them to consolidate the data</p>",
        "id": 156790164,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548351035
    },
    {
        "content": "<p>I don't remember exactly what hooks there are</p>",
        "id": 156790168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548351039
    },
    {
        "content": "<p>Ok. I guess I should research Rayon more then :)</p>",
        "id": 156790180,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548351056
    },
    {
        "content": "<p>that said</p>",
        "id": 156790183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548351059
    },
    {
        "content": "<p>I feel like it'd be nice if we could make this distinct from rayon</p>",
        "id": 156790207,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548351068
    },
    {
        "content": "<p>i'm imagining something like this</p>",
        "id": 156790212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548351073
    },
    {
        "content": "<p>you have some thread-local state</p>",
        "id": 156790218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548351078
    },
    {
        "content": "<p>if it is not initialized for a given thread, you create a <code>Arc&lt;ThreadLocalState&gt;</code> and store it in the compiler</p>",
        "id": 156790232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548351099
    },
    {
        "content": "<p>you also keep one handle for your current thread</p>",
        "id": 156790240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548351109
    },
    {
        "content": "<p>I guess that would still have to use atomics</p>",
        "id": 156790245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548351114
    },
    {
        "content": "<p>but they would be uncontended operations</p>",
        "id": 156790250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548351122
    },
    {
        "content": "<p>I have a <code>WorkerLocal</code> type, which allows you to have thread local state and collect it up after</p>",
        "id": 156790301,
        "sender_full_name": "Zoxc",
        "timestamp": 1548351141
    },
    {
        "content": "<p>You need ownership to do so though. So you can't do that in <code>GlobalCtxt</code> with safe code (since I removed the <code>'a</code> lifetime).</p>",
        "id": 156790459,
        "sender_full_name": "Zoxc",
        "timestamp": 1548351299
    },
    {
        "content": "<p>I also want to add a <code>SharedWorkerLocal</code> which would allow you to iterate over everything without ownership</p>",
        "id": 156790503,
        "sender_full_name": "Zoxc",
        "timestamp": 1548351361
    },
    {
        "content": "<p>I wouldn't worry too much about this though. Just a single global list with a mutex should be fine</p>",
        "id": 156790676,
        "sender_full_name": "Zoxc",
        "timestamp": 1548351483
    },
    {
        "content": "<p>Ok. I'll start with that and then we can optimize later.</p>",
        "id": 156790700,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548351510
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 156790701,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548351517
    },
    {
        "content": "<p>Maybe use <code>HashMap&lt;ThreadId, ProfilingState&gt;</code> so making it thread local later will be easy</p>",
        "id": 156790764,
        "sender_full_name": "Zoxc",
        "timestamp": 1548351602
    },
    {
        "content": "<p>Will do</p>",
        "id": 156790808,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548351624
    },
    {
        "content": "<p>BTW, are there any docs describing how parallel queries works? Or the vision for how they're supposed to work?</p>",
        "id": 156790820,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548351647
    },
    {
        "content": "<p>/me notes the topic about design docs in all hands discussion :)</p>",
        "id": 156790948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548351774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> That's about writing more docs right? I'm not missing some already existing docs? :)</p>",
        "id": 156790984,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548351832
    },
    {
        "content": "<p>Last I checked there wasn't anything about parallel queries in the rustc guide.</p>",
        "id": 156791084,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548351905
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> correct =)</p>",
        "id": 156799311,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548358328
    },
    {
        "content": "<p>I'm basically saying \"I want to try and do more design docs so that the answer is 'yes' and not 'no'\"</p>",
        "id": 156799330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548358357
    },
    {
        "content": "<p>that said, there were some internals threads that may be helpful</p>",
        "id": 156799339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548358366
    },
    {
        "content": "<p>this is probably the main one: <a href=\"https://internals.rust-lang.org/t/parallelizing-rustc-using-rayon/6606\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/parallelizing-rustc-using-rayon/6606\">https://internals.rust-lang.org/t/parallelizing-rustc-using-rayon/6606</a></p>",
        "id": 156799365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548358388
    },
    {
        "content": "<p>Thanks for the pointer! There's a lot of good info in that thread</p>",
        "id": 156801025,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548359614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>  I have a PR to the rustc-guide that will add a little bit about parallel queries: <a href=\"https://github.com/rust-lang/rustc-guide/pull/270/files#diff-7b2b8e856b6cf936c97794a1cc7ec846R212\" target=\"_blank\" title=\"https://github.com/rust-lang/rustc-guide/pull/270/files#diff-7b2b8e856b6cf936c97794a1cc7ec846R212\">https://github.com/rust-lang/rustc-guide/pull/270/files#diff-7b2b8e856b6cf936c97794a1cc7ec846R212</a></p>",
        "id": 156837350,
        "sender_full_name": "mw",
        "timestamp": 1548405002
    },
    {
        "content": "<p>that does not go into how it's concretely implemented though</p>",
        "id": 156837393,
        "sender_full_name": "mw",
        "timestamp": 1548405027
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>!! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 156855649,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548426282
    }
]