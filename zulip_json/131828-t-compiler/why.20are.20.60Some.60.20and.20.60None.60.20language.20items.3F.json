[
    {
        "content": "<p>Why are <code>Some</code> and <code>None</code> language items? For reference, <code>Option</code> is not (though it is a diagnostics item, which makes sense).</p>",
        "id": 219275374,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607468592
    },
    {
        "content": "<p>You can check where they're used, which should explain it</p>",
        "id": 219279993,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607471186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> <code>for</code> turns into <code>while let Some(x)</code>, which is probably why <code>Some</code>, at least.</p>",
        "id": 219280615,
        "sender_full_name": "scottmcm",
        "timestamp": 1607471659
    },
    {
        "content": "<p>Ah, that makes sense.</p>",
        "id": 219285957,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607475776
    },
    {
        "content": "<p>Wait: actually I read recently (in a rustc-dev-guide PR) that some things, e.g. <code>Iterator</code>, have hardcoded paths by the compiler since they are used in desugaring, before lang items are resolved. So if that's correct, it doesn't seem like your example would explain it.</p>",
        "id": 219286075,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607475855
    },
    {
        "content": "<p>Nope, I guess I'm wrong :)</p>\n<p>This:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Desugars into this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[prelude_import]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">std</span>::<span class=\"n\">prelude</span>::<span class=\"n\">v1</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"cp\">#[macro_use]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                      </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"cp\">#[lang = </span><span class=\"s\">\"into_iter\"</span><span class=\"cp\">]</span><span class=\"p\">(</span><span class=\"cp\">#[lang = </span><span class=\"s\">\"Range\"</span><span class=\"cp\">]</span><span class=\"p\">{</span><span class=\"n\">start</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                                                    </span><span class=\"n\">end</span>: <span class=\"mi\">5</span><span class=\"p\">,})</span><span class=\"w\"></span>\n<span class=\"w\">                          </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                          </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                          </span><span class=\"k\">loop</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">__next</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                              </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"cp\">#[lang = </span><span class=\"s\">\"next\"</span><span class=\"cp\">]</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                                  </span><span class=\"cp\">#[lang = </span><span class=\"s\">\"Some\"</span><span class=\"cp\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">val</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">__next</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                                  </span><span class=\"cp\">#[lang = </span><span class=\"s\">\"None\"</span><span class=\"cp\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                              </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                              </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">__next</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                              </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                          </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">                      </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                  </span><span class=\"n\">_t</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so you're right after all.</p>",
        "id": 219286210,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607475971
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20are.20.60Some.60.20and.20.60None.60.20language.20items.3F/near/219286075\">said</a>:</p>\n<blockquote>\n<p>Wait: actually I read recently (in a rustc-dev-guide PR) that some things, e.g. <code>Iterator</code>, have hardcoded paths by the compiler since they are used in desugaring, before lang items are resolved. So if that's correct, it doesn't seem like your example would explain it.</p>\n</blockquote>\n<p>I think that PR might be out of date</p>",
        "id": 219288438,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607477964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20are.20.60Some.60.20and.20.60None.60.20language.20items.3F/near/219286075\">said</a>:</p>\n<blockquote>\n<p>Wait: actually I read recently (in a rustc-dev-guide PR) that some things, e.g. <code>Iterator</code>, have hardcoded paths by the compiler since they are used in desugaring, before lang items are resolved. So if that's correct, it doesn't seem like your example would explain it.</p>\n</blockquote>\n<p>That definitely used to be the case, but the example I knew of looks like it's been updated to use lang items (&lt;<a href=\"https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler/rustc_ast_lowering/src/expr.rs#L453-L505\">https://github.com/rust-lang/rust/blob/bda05cc471f8cf4a3c45f587f87d7b01a8343c3c/compiler/rustc_ast_lowering/src/expr.rs#L453-L505</a>&gt;), so maybe that doesn't happen any more.</p>",
        "id": 219289765,
        "sender_full_name": "scottmcm",
        "timestamp": 1607479326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20are.20.60Some.60.20and.20.60None.60.20language.20items.3F/near/219288438\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20are.20.60Some.60.20and.20.60None.60.20language.20items.3F/near/219286075\">said</a>:</p>\n<blockquote>\n<p>Wait: actually I read recently (in a rustc-dev-guide PR) that some things, e.g. <code>Iterator</code>, have hardcoded paths by the compiler since they are used in desugaring, before lang items are resolved. So if that's correct, it doesn't seem like your example would explain it.</p>\n</blockquote>\n<p>I think that PR might be out of date</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I left a comment on that PR (<a href=\"https://github.com/rust-lang/rustc-dev-guide/issues/978\">rustc-dev-guide#978</a>)</p>",
        "id": 219297731,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607489401
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 219325751,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607514481
    }
]