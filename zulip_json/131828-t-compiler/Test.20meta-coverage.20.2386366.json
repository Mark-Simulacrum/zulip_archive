[
    {
        "content": "<p>Do we have some way that we are tracking tests that are not exercised by the CI?</p>",
        "id": 242884986,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852241
    },
    {
        "content": "<p>Not that I'm aware of. Some tests have a comment explaining why they are disabled but I don't think that's been rigorously enforced.</p>",
        "id": 242885249,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1623852316
    },
    {
        "content": "<p>Currently I’m grepping for <code>x.py .* test</code> in <code>src/ci</code> and skimming the results. (And also taking the opposite direction of looking for the directory of interest there)</p>",
        "id": 242885270,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852324
    },
    {
        "content": "<p>specifically, I’m curious as to whether <code>src/test/rustdoc-ui</code> is tested in CI, since I’m currently seeing it fail on my local build</p>",
        "id": 242885308,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852340
    },
    {
        "content": "<p>Oh, you're talking about suites of tests not individual ones.</p>",
        "id": 242885348,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1623852355
    },
    {
        "content": "<p>Really, I mean whole test suites that are not exercised by the CI. :)</p>",
        "id": 242885356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852356
    },
    {
        "content": "<p>Yeah exactly</p>",
        "id": 242885366,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852360
    },
    {
        "content": "<p>though tracking individual tests would be good too</p>",
        "id": 242885431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852369
    },
    {
        "content": "<p>but the suites are in some ways more troubling</p>",
        "id": 242885445,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852375
    },
    {
        "content": "<p>I'm not aware of any tracking for that either.</p>",
        "id": 242885492,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1623852392
    },
    {
        "content": "<p>I mean, I understand the idea of saying “we want to archive these tests because they are useful for developers of those tools\"</p>",
        "id": 242885503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852396
    },
    {
        "content": "<p>but at the same time, its pretty frustrating to not know which test suites I should be expected to exercise locally</p>",
        "id": 242885545,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852412
    },
    {
        "content": "<p>in order to emulate the expectations of the CI</p>",
        "id": 242885572,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852424
    },
    {
        "content": "<p>(I suppose the “right answer” here is to run the same thing the CI does locally, via docker or whatever. But I’ve managed to get this far without doing that…)</p>",
        "id": 242885626,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852448
    },
    {
        "content": "<p>I don't personally have a good workflow for running our CI docker images so I've only reached for that when all else fails.</p>",
        "id": 242885752,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1623852489
    },
    {
        "content": "<p>and now that I'm mostly using Windows ... Docker is kind of a mess there</p>",
        "id": 242885820,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1623852527
    },
    {
        "content": "<p>okay well at least now I don’t feel like I’m alone in my lack of a docker-oriented workflow</p>",
        "id": 242885888,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623852564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Chalk up another non-docker person here. <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 242886053,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1623852633
    },
    {
        "content": "<p>(The <a href=\"https://rustc-dev-guide.rust-lang.org/tests/intro.html#testing-with-docker-images\">rustc dev guide</a> certainly makes it <em>sound</em> like docker is easy-peezy…)</p>",
        "id": 242887734,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623853319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> rustdoc-ui is definitely run on PR CI (even before bors CI). Is there a reason you think it doesn't?</p>",
        "id": 242889567,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623854061
    },
    {
        "content": "<p>Because I’m seeing a local failure when I run it, against an unchanged build of the compiler</p>",
        "id": 242889619,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623854089
    },
    {
        "content": "<p>What is the failure?</p>",
        "id": 242889679,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623854113
    },
    {
        "content": "<p>and my attempts to grep for <code>rustdoc-ui</code> in <code>src/ci</code> met with no hits</p>",
        "id": 242889684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623854114
    },
    {
        "content": "<p>Right, it's run by default as part of x.py test</p>",
        "id": 242889715,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623854131
    },
    {
        "content": "<p>where do we run <code>x.py test</code> with no arguments in the CI?</p>",
        "id": 242889733,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623854143
    },
    {
        "content": "<p>I don't have time to look right now but search for <code>--exclude tidy</code></p>",
        "id": 242889826,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623854169
    },
    {
        "content": "<p>Okay. I cannot recover the rustdoc-ui failure immediately because I started bisecting over our history to see where the failure was injected</p>",
        "id": 242889893,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623854202
    },
    {
        "content": "<p>but I’ll report it somewhere when I see it again</p>",
        "id": 242889921,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623854213
    },
    {
        "content": "<p>Many of the \"test\" builders just use the default <code>x.py test</code>.  <a href=\"https://github.com/rust-lang/rust/blob/8daad743c4bb941536860b4df20111cb71b8c777/src/ci/docker/host-x86_64/x86_64-gnu/Dockerfile#L28\">Here</a> is an example of the basic linux builder.  <a href=\"https://github.com/rust-lang/rust/blob/8daad743c4bb941536860b4df20111cb71b8c777/.github/workflows/ci.yml#L308\">Here</a> is macos.  <a href=\"https://github.com/rust-lang/rust/blob/8daad743c4bb941536860b4df20111cb71b8c777/.github/workflows/ci.yml#L330-L338\">Windows</a> essentially does <code>x.py test</code>, but it is split across two jobs due to it being slow.</p>",
        "id": 242894331,
        "sender_full_name": "Eric Huss",
        "timestamp": 1623856036
    },
    {
        "content": "<p>Hm, now that Windows is nowhere near the slowest (looking at you dist-aarch64-apple), I wonder if it would make sense to merge the windows jobs back together.  They duplicate all the work of building the compiler and tools twice.</p>",
        "id": 242894726,
        "sender_full_name": "Eric Huss",
        "timestamp": 1623856207
    },
    {
        "content": "<p>Yes, I now understand/remember that my local pattern of running <code>x.py</code> with explicit arguments is to workaround <a href=\"https://github.com/rust-lang/rust/issues/47163\">#47163</a>: \"Debuginfo tests are not running\"</p>",
        "id": 242895675,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623856603
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Test.20meta-coverage/near/242889921\">said</a>:</p>\n<blockquote>\n<p>but I’ll report it somewhere when I see it again</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> here is gist with failures:<br>\n<a href=\"https://gist.github.com/pnkfelix/99e0203960c48994c2bf93064b0344c2\">https://gist.github.com/pnkfelix/99e0203960c48994c2bf93064b0344c2</a></p>\n<p>(I’m still bisecting but that was my latest “bad” run)</p>",
        "id": 242905683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623860814
    },
    {
        "content": "<p>Hmm I remember someone posting a similar issue on M1 recently</p>",
        "id": 242905753,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623860862
    },
    {
        "content": "<p>It seems very strange that it only fails for some people</p>",
        "id": 242905770,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623860871
    },
    {
        "content": "<p>I wonder if it's related to the default rustdoc toolchain somehow? Maybe the test suite is buggy and uses that instead of the in tree rustdoc?</p>",
        "id": 242905871,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623860914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> also I don't think bisecting will get you far, it will lead to the change that added the \"compile fail\" string</p>",
        "id": 242906441,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623861163
    },
    {
        "content": "<p>Which isn't where the bug is, this must be a pre-existing bug in compile test for it to be inconsistent like this</p>",
        "id": 242906477,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623861183
    },
    {
        "content": "<p>(alternatively, you can bisect only changes to rustdoc-ui and that should go a lot quicker)</p>",
        "id": 242906561,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623861236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Test.20meta-coverage/near/242905871\">said</a>:</p>\n<blockquote>\n<p>I wonder if it's related to the default rustdoc toolchain somehow? Maybe the test suite is buggy and uses that instead of the in tree rustdoc?</p>\n</blockquote>\n<p>This sounds like a promising line of inquiry</p>",
        "id": 242906929,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623861392
    },
    {
        "content": "<p><del>hmm. Super-weird: As <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> predicted, bisection ended up putting blame on PR <a href=\"https://github.com/rust-lang/rust/issues/84863\">#84863</a>. But the <em>weird</em> part is that after bisection signalled that PR as “bad”, subsequent rebuilds atop that commit (after building with earlier commits as part of bisection process) have had no problems with compiletest output in the rustdoc-ui suite.</del> update: user fail. git bisect, upon finishing, put itself back onto the commit where I had initiated <code>git bisect</code></p>",
        "id": 242938060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623875183
    },
    {
        "content": "<p><del>I wonder if there’s something going on with cached state. I already did <code>rm -rf build/x86_64-unknown-linux-gnu/test/rustdoc-ui/</code> to try to account for any test artifacts being carried over from a “working” build, but I’m going to try again with a totally clean rebuild.</del></p>",
        "id": 242938145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623875223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> try removing your default rustup toolchain so it's not possible for compiletest to use it by accident</p>",
        "id": 242941736,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623876828
    },
    {
        "content": "<p>I don't think bisecting is going to help much</p>",
        "id": 242941832,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623876848
    },
    {
        "content": "<p>I know, I just wanted to confirm</p>",
        "id": 242941898,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623876879
    },
    {
        "content": "<p>and I didn’t know the PR offhand</p>",
        "id": 242941924,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623876892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> ah, your insight here is key: The default for <code>x.py test</code> is implicitly <code>—stage 1</code>. But: the CI appears to explicitly pass <code>—stage 2</code> on all of its invocations of <code>x.py test</code></p>",
        "id": 243020424,
        "sender_full_name": "pnkfelix",
        "timestamp": 1623937970
    },
    {
        "content": "<p>Is that equivalent to saying \"we expect <code>rustc</code> to build on beta, but the testsuite only to pass on it built with itself on the current commit\"?</p>",
        "id": 243233030,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1624084888
    },
    {
        "content": "<p>Yes.</p>",
        "id": 243244865,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624101867
    },
    {
        "content": "<p>Well, that's what's tested currently. Clearly people expect it to pass with --stage 1.</p>",
        "id": 243244878,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1624101902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Test.20meta-coverage.20.2386366/near/243020424\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> ah, your insight here is key: The default for <code>x.py test</code> is implicitly <code>—stage 1</code>. But: the CI appears to explicitly pass <code>—stage 2</code> on all of its invocations of <code>x.py test</code></p>\n</blockquote>\n<p>I’ve filed an MCP, <a href=\"https://github.com/rust-lang/compiler-team/issues/439\">compiler-team#439</a>, to try to address this problem.</p>",
        "id": 243393557,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624286978
    },
    {
        "content": "<p>(with associated zulip stream in <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/CI.20should.20exercise.20.28subset.20of.29.20tests.20unde.E2.80.A6.20compiler-team.23439\">#t-compiler/major changes &gt; CI should exercise (subset of) tests unde… compiler-team#439</a> )</p>",
        "id": 243393652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1624287012
    }
]