[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> , there's this bug where layout code ICE's because, I think, there's an unresolved variable in last field of an ADT (which is unsized),   we are trying to get layout of <code>&amp;ADT</code>.</p>",
        "id": 170609566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562830725
    },
    {
        "content": "<p>The <code>LayoutCx&lt;'tcx&gt;</code> does not have access to an <code>InferCtxt&lt;'a, 'tcx&gt;</code>, so I cannot call <code>resolve_vars_if_possible</code> to attempt to address this in a lazy fashon</p>",
        "id": 170609598,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562830783
    },
    {
        "content": "<p>My question to you, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> , is whether it is meant to be an invariant that all types that are fed to the layout code should always have all variables resolved (at least when we are doing layout from say <code>rustc_codegen_llvm</code>)? and if that is meant to be an invariant, is it one we might consider asserting up front in the code?</p>",
        "id": 170609682,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562830866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> we don't have a good place to put it, but it's never correct for a query to have inference variables in its input</p>",
        "id": 170609761,
        "sender_full_name": "eddyb",
        "timestamp": 1562830956
    },
    {
        "content": "<p>this used to be prevented through lifetimes alone, FWIW</p>",
        "id": 170609765,
        "sender_full_name": "eddyb",
        "timestamp": 1562830968
    },
    {
        "content": "<p>but now that we removed the <code>'gcx</code>/<code>'tcx</code> distinction, the query system has no automated protection against getting random inference variables into queries</p>",
        "id": 170609790,
        "sender_full_name": "eddyb",
        "timestamp": 1562831009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> if you're querying for layout from something that uses an inference context, you need to use canonicalization (which idk if anyone other than <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> understands... we also need to add that to the <code>const_eval</code> query so we call it from unification during inference)</p>",
        "id": 170609907,
        "sender_full_name": "eddyb",
        "timestamp": 1562831119
    },
    {
        "content": "<p>well I personally don't mind trying to enforce such a rule via a dynamic check</p>",
        "id": 170609910,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831125
    },
    {
        "content": "<p>is \"canonicalization\" meant to mean something different from \"normalization\" there?</p>",
        "id": 170609927,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831159
    },
    {
        "content": "<p>the other thing you could do is <code>resolve_vars_if_possible</code> + avoiding calling <code>layout_of</code> unless there are no infer vars in the resolved type</p>",
        "id": 170609943,
        "sender_full_name": "eddyb",
        "timestamp": 1562831162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yes, it's the replacement of inference variables with... effectively parameters</p>",
        "id": 170609990,
        "sender_full_name": "eddyb",
        "timestamp": 1562831188
    },
    {
        "content": "<p>??</p>",
        "id": 170609992,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831189
    },
    {
        "content": "<p>(My \"??\" was in response to the idea of avoiding calling <code>layout_of</code>  ...)</p>",
        "id": 170610020,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831230
    },
    {
        "content": "<p>well, yeah, you can just assume it returned an error if you have inference variables</p>",
        "id": 170610027,
        "sender_full_name": "eddyb",
        "timestamp": 1562831243
    },
    {
        "content": "<p>It sounds to me like I need to trace further back in the control flow to see where someone is missing a call to <code>resolve_vars_if_possible</code></p>",
        "id": 170610035,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831254
    },
    {
        "content": "<p>whatever is calling <code>layout_of</code> probably shouldn't. I can't for the life of me imagine where this might happen</p>",
        "id": 170610048,
        "sender_full_name": "eddyb",
        "timestamp": 1562831275
    },
    {
        "content": "<p>The linked issue from this topic shows an example</p>",
        "id": 170610098,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831289
    },
    {
        "content": "<p>you should just make sure you have <code>debuginfo-level = 1</code> in <code>config.toml</code> and just get a backtrace</p>",
        "id": 170610101,
        "sender_full_name": "eddyb",
        "timestamp": 1562831291
    },
    {
        "content": "<p>I guess I can do it if it's a simple repro</p>",
        "id": 170610107,
        "sender_full_name": "eddyb",
        "timestamp": 1562831301
    },
    {
        "content": "<p>I can show you a back trace if you want to see one;</p>",
        "id": 170610110,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831304
    },
    {
        "content": "<p>I wasn't sure if you were on a mobile device and weren't able to look at a backtrace easily</p>",
        "id": 170610117,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831318
    },
    {
        "content": "<p>canonicalization is what used to be called \"freshening\" (I just remembered) - the difference is \"canonicalization\" is much more principled and it allows queries to reify their effects on inference, so that they're cached - basically it lets you go between two inference contexts and preserve everything</p>",
        "id": 170610122,
        "sender_full_name": "eddyb",
        "timestamp": 1562831324
    },
    {
        "content": "<p>oh okay</p>",
        "id": 170610134,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831335
    },
    {
        "content": "<p>at the office now. I tend to not touch Zulip on my phone because the app drains the battery like crazy</p>",
        "id": 170610143,
        "sender_full_name": "eddyb",
        "timestamp": 1562831341
    },
    {
        "content": "<p>there, hopefully that's a half-decent explanation :P</p>",
        "id": 170610248,
        "sender_full_name": "eddyb",
        "timestamp": 1562831412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> there's nothing about inference variables in the issue though?</p>",
        "id": 170610431,
        "sender_full_name": "eddyb",
        "timestamp": 1562831596
    },
    {
        "content": "<p><a href=\"https://gist.github.com/pnkfelix/ee7813784d3002db14ba2ad59418b30a\" target=\"_blank\" title=\"https://gist.github.com/pnkfelix/ee7813784d3002db14ba2ad59418b30a\">https://gist.github.com/pnkfelix/ee7813784d3002db14ba2ad59418b30a</a></p>",
        "id": 170610435,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831599
    },
    {
        "content": "<p>the inference variables arise, I believe, due to the projection?</p>",
        "id": 170610447,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831612
    },
    {
        "content": "<p>it's a proper layout error that <code>rustc_codegen_llvm</code> turns into an ICE</p>",
        "id": 170610462,
        "sender_full_name": "eddyb",
        "timestamp": 1562831636
    },
    {
        "content": "<p>You're saying layout is <em>supposed</em> to error here?</p>",
        "id": 170610516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831655
    },
    {
        "content": "<p>'sec</p>",
        "id": 170610525,
        "sender_full_name": "eddyb",
        "timestamp": 1562831667
    },
    {
        "content": "<p>I was assuming it was legal to have a DST there</p>",
        "id": 170610527,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831668
    },
    {
        "content": "<p>I thought you were talking about <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L1198\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L1198\">https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L1198</a></p>",
        "id": 170610569,
        "sender_full_name": "eddyb",
        "timestamp": 1562831714
    },
    {
        "content": "<p>whereas what happens is <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L1188\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L1188\">https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L1188</a></p>",
        "id": 170610592,
        "sender_full_name": "eddyb",
        "timestamp": 1562831741
    },
    {
        "content": "<p>yes that looks right</p>",
        "id": 170610647,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831767
    },
    {
        "content": "<p>in terms of what is currently happening</p>",
        "id": 170610652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831772
    },
    {
        "content": "<p>normalization fails but I don't think this is a layout-specific bug, layout just happens to be the first thing it hits</p>",
        "id": 170610660,
        "sender_full_name": "eddyb",
        "timestamp": 1562831789
    },
    {
        "content": "<p>or wait</p>",
        "id": 170610673,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831807
    },
    {
        "content": "<p>let me check atgain</p>",
        "id": 170610676,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831811
    },
    {
        "content": "<p>I see</p>",
        "id": 170610693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831835
    },
    {
        "content": "<p>why on earth would normalization fail though :|</p>",
        "id": 170610704,
        "sender_full_name": "eddyb",
        "timestamp": 1562831851
    },
    {
        "content": "<p>I misinterpreted what was happening, hmm.</p>",
        "id": 170610705,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562831854
    },
    {
        "content": "<p>this looks quite trivial</p>",
        "id": 170610711,
        "sender_full_name": "eddyb",
        "timestamp": 1562831866
    },
    {
        "content": "<p>oh nvm I'm wrong about where it's emitted from</p>",
        "id": 170610792,
        "sender_full_name": "eddyb",
        "timestamp": 1562831925
    },
    {
        "content": "<p>this is messed up <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L541-L546\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L541-L546\">https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L541-L546</a></p>",
        "id": 170610803,
        "sender_full_name": "eddyb",
        "timestamp": 1562831940
    },
    {
        "content": "<p>it needs to actually normalize and call <code>struct_tail</code> in a loop</p>",
        "id": 170610817,
        "sender_full_name": "eddyb",
        "timestamp": 1562831957
    },
    {
        "content": "<p>might be a good idea to change <code>struct_tail</code> to take a <code>param_env</code> and normalize itself or something</p>",
        "id": 170610832,
        "sender_full_name": "eddyb",
        "timestamp": 1562831976
    },
    {
        "content": "<p><code>struct_lockstep_tails</code> probably has the same problem...</p>",
        "id": 170611008,
        "sender_full_name": "eddyb",
        "timestamp": 1562832107
    },
    {
        "content": "<p>Okay I will look into that</p>",
        "id": 170611126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562832182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> hmm I think I know why this is a rare bug: it won't trigger if a pointee is <code>Sized</code> (<em>after</em> deep normalization), which <code>Ty::is_sized</code> checks</p>",
        "id": 170611155,
        "sender_full_name": "eddyb",
        "timestamp": 1562832218
    },
    {
        "content": "<p>it's the \"tails\" functionality that's problematic</p>",
        "id": 170611213,
        "sender_full_name": "eddyb",
        "timestamp": 1562832245
    },
    {
        "content": "<p>might be a good idea to move it to <code>LayoutCx</code> or something</p>",
        "id": 170611243,
        "sender_full_name": "eddyb",
        "timestamp": 1562832267
    },
    {
        "content": "<p>typeck only uses it 2 times, and the use in <code>wfcheck</code> should be layout-driven anyway</p>",
        "id": 170611456,
        "sender_full_name": "eddyb",
        "timestamp": 1562832423
    },
    {
        "content": "<p>move <code>fn struct_lockstep_tails</code> to <code>LayoutCx</code>, you mean, right?</p>",
        "id": 170611558,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562832513
    },
    {
        "content": "<p>oh I guess <code>fn struct_tail</code> too</p>",
        "id": 170611584,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562832548
    },
    {
        "content": "<p>yeah, both of them</p>",
        "id": 170611701,
        "sender_full_name": "eddyb",
        "timestamp": 1562832631
    },
    {
        "content": "<p>it's one of those things where it needs normalization after substituting generic args into a field type</p>",
        "id": 170611823,
        "sender_full_name": "eddyb",
        "timestamp": 1562832751
    },
    {
        "content": "<p>and what kind of normalization is to be done depends on the user of the resulting type...</p>",
        "id": 170611832,
        "sender_full_name": "eddyb",
        "timestamp": 1562832766
    },
    {
        "content": "<p>and the loop can probably be written to just keep going until <code>struct_tail(pointee) == pointee</code>, right?</p>",
        "id": 170611837,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562832779
    },
    {
        "content": "<p>No need to try to be cleverer than that?</p>",
        "id": 170611851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562832785
    },
    {
        "content": "<p>if you make <code>struct_tail</code> do the normalization itself, you don't need loops in callers</p>",
        "id": 170611871,
        "sender_full_name": "eddyb",
        "timestamp": 1562832809
    },
    {
        "content": "<p>right, I'm just checking about what the condition inside <code>struct_tail</code> would be</p>",
        "id": 170611882,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562832827
    },
    {
        "content": "<p>not having loops in several places is pretty much the only reason <code>struct_tail</code> exists</p>",
        "id": 170611883,
        "sender_full_name": "eddyb",
        "timestamp": 1562832827
    },
    {
        "content": "<p>I guess I shuod look at the actual code for <code>fn struct_tail</code> before trying to guess what the condition would look like</p>",
        "id": 170611936,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562832858
    },
    {
        "content": "<p>sorry, github was being slow</p>",
        "id": 170612098,
        "sender_full_name": "eddyb",
        "timestamp": 1562833036
    },
    {
        "content": "<p>you'd pretty much want this <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L1185-L1191\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L1185-L1191\">https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L1185-L1191</a></p>",
        "id": 170612104,
        "sender_full_name": "eddyb",
        "timestamp": 1562833046
    },
    {
        "content": "<p>since you're in a loop, returning the error is replaced with returning  the type as-is and the success case is keeping the loop going</p>",
        "id": 170612245,
        "sender_full_name": "eddyb",
        "timestamp": 1562833202
    },
    {
        "content": "<p>okay. I'll look into that then</p>",
        "id": 170612272,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562833215
    },
    {
        "content": "<p>Not sure how much time I want to spend trying to figure out the test cases to exercise the various calls to <code>struct_tail</code></p>",
        "id": 170612296,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562833244
    },
    {
        "content": "<p>but maybe it will become obvious</p>",
        "id": 170612300,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562833250
    },
    {
        "content": "<p>pretty much layout and unsizing casts</p>",
        "id": 170612347,
        "sender_full_name": "eddyb",
        "timestamp": 1562833315
    },
    {
        "content": "<p>you might even get away with <code>&lt;Foo as Trait&gt;::Bar</code> in a field type, with no parameters involved, if there's no early normalization happening there (but for good measure you should probably use parameters to block normalization from happening before the last moment)</p>",
        "id": 170612454,
        "sender_full_name": "eddyb",
        "timestamp": 1562833408
    },
    {
        "content": "<p>Should the loop now also be incrementing some recursion counter, at least in the projection/opaque case?</p>",
        "id": 170612797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562833687
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 170612815,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562833723
    },
    {
        "content": "<p>it's not recursing though, unless you think someone could make an infinite loop</p>",
        "id": 170612847,
        "sender_full_name": "eddyb",
        "timestamp": 1562833765
    },
    {
        "content": "<p>that's what I was worried about, something ike</p>",
        "id": 170612856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562833775
    },
    {
        "content": "<p>I'd suggest trying it and seeing if there are other parts of the compiler catching it</p>",
        "id": 170612912,
        "sender_full_name": "eddyb",
        "timestamp": 1562833808
    },
    {
        "content": "<p>worst case we can make it a query in which case cycles would be detected automatically</p>",
        "id": 170612923,
        "sender_full_name": "eddyb",
        "timestamp": 1562833822
    },
    {
        "content": "<p><code>struct Inf { last: Foo::Assoc, }</code> where <code>impl Trait for Foo { Assoc = Inf; }</code>, or some such garbage</p>",
        "id": 170612927,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562833827
    },
    {
        "content": "<p>you'd need a type parameter, pretty sure that's just banned as-is</p>",
        "id": 170612952,
        "sender_full_name": "eddyb",
        "timestamp": 1562833860
    },
    {
        "content": "<p>okay, we'll see.</p>",
        "id": 170612966,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562833869
    },
    {
        "content": "<p>I guess the answer is that it (the example I'm worried about) ICE's elsewhere: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f0829f8745f6af3f9283fb13bfc4164d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f0829f8745f6af3f9283fb13bfc4164d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f0829f8745f6af3f9283fb13bfc4164d</a></p>",
        "id": 170613323,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562834178
    },
    {
        "content": "<p>Other examples give me more confidence, though; We do detect the cycle nicely here: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2ccb4c4d56ef21595a5d5c52223ba3ac\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2ccb4c4d56ef21595a5d5c52223ba3ac\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=2ccb4c4d56ef21595a5d5c52223ba3ac</a></p>",
        "id": 170613521,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562834399
    },
    {
        "content": "<p>lol, some <code>const_eval</code> ICEs are way off</p>",
        "id": 170613600,
        "sender_full_name": "eddyb",
        "timestamp": 1562834446
    },
    {
        "content": "<p>probably because they assume too much</p>",
        "id": 170613608,
        "sender_full_name": "eddyb",
        "timestamp": 1562834456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <code>dbg!</code> doesn't borrow the value like <code>println!</code> does <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=96f0c2536d87b5e9a5b85c9f5b66a5b5\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=96f0c2536d87b5e9a5b85c9f5b66a5b5\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=96f0c2536d87b5e9a5b85c9f5b66a5b5</a></p>",
        "id": 170613649,
        "sender_full_name": "eddyb",
        "timestamp": 1562834498
    },
    {
        "content": "<p>ah nice</p>",
        "id": 170613662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562834512
    },
    {
        "content": "<p>what these cycle errors from layout tell me is that <code>struct_tail</code> needs to be a query like <code>raw_layout</code> :(</p>",
        "id": 170613718,
        "sender_full_name": "eddyb",
        "timestamp": 1562834543
    },
    {
        "content": "<p>at least then it's gonna be cached :P</p>",
        "id": 170613754,
        "sender_full_name": "eddyb",
        "timestamp": 1562834588
    },
    {
        "content": "<p>Sigh: trying to normalize projections for all current calls to <code>struct_tail</code> and <code>struct_lockstep_tails</code> causes compiler to ICE on three ui tests.</p>",
        "id": 170616773,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562837400
    },
    {
        "content": "<p>ah, I need to be careful about whether I call <code>normalize_erasing_regions</code>, which is only for use after type-check. Hmm.</p>",
        "id": 170617568,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562838031
    },
    {
        "content": "<p>Hmm; The comment above <a href=\"https://github.com/rust-lang/rust/blob/69070058cd2fdb57ebbbbef94892cfb5688ce27f/src/librustc/traits/query/normalize.rs#L31\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/69070058cd2fdb57ebbbbef94892cfb5688ce27f/src/librustc/traits/query/normalize.rs#L31\">fn normalize</a> implies that even though it returns <code>Result</code>, you really aren't supposed to use it if you don't expect <code>Ok</code> ?</p>",
        "id": 170617716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562838184
    },
    {
        "content": "<p>ugh :/</p>",
        "id": 170617747,
        "sender_full_name": "eddyb",
        "timestamp": 1562838224
    },
    {
        "content": "<p>I wonder if that comment is out-of-date...</p>",
        "id": 170617817,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562838261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> the <code>wfcheck</code> case should be fine to use the layout region-erasing thing, since it doesn't use the resulting type, just checks if it's <code>extern type</code></p>",
        "id": 170617824,
        "sender_full_name": "eddyb",
        "timestamp": 1562838266
    },
    {
        "content": "<p>and the <code>librustc_typeck/check/mod.rs</code> use of <code>struct_tail</code> should probably just inline the non-normalizing loop</p>",
        "id": 170617853,
        "sender_full_name": "eddyb",
        "timestamp": 1562838295
    },
    {
        "content": "<p><em>or</em> use the normalization facilities it has itself</p>",
        "id": 170617874,
        "sender_full_name": "eddyb",
        "timestamp": 1562838309
    },
    {
        "content": "<p>(but not call the layout <code>struct_tail</code>)</p>",
        "id": 170617881,
        "sender_full_name": "eddyb",
        "timestamp": 1562838321
    },
    {
        "content": "<p>I'm currently seeing an ICE from this use of struct_tail in <a href=\"https://github.com/rust-lang/rust/blob/69070058cd2fdb57ebbbbef94892cfb5688ce27f/src/librustc_typeck/check/mod.rs#L318\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/69070058cd2fdb57ebbbbef94892cfb5688ce27f/src/librustc_typeck/check/mod.rs#L318\">fn rvalue_hint</a></p>",
        "id": 170617898,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562838335
    },
    {
        "content": "<p>ah okay you just addressed that</p>",
        "id": 170617913,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562838356
    },
    {
        "content": "<p>I was considering making the <code>struct_tail</code> method take a parameter indicting whether to normalize or not (or even have it be parameterized over <em>how</em> normalization should be done...)</p>",
        "id": 170618018,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562838423
    },
    {
        "content": "<p>not sure it's worth it</p>",
        "id": 170618055,
        "sender_full_name": "eddyb",
        "timestamp": 1562838446
    },
    {
        "content": "<p>unless you take a closure and typeck can do whatever it wants, even resolve inference vars</p>",
        "id": 170618083,
        "sender_full_name": "eddyb",
        "timestamp": 1562838475
    },
    {
        "content": "<p>(but it'd be tedium for all the other call sites)</p>",
        "id": 170618156,
        "sender_full_name": "eddyb",
        "timestamp": 1562838526
    },
    {
        "content": "<p>well there could be two methods</p>",
        "id": 170618173,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562838543
    },
    {
        "content": "<p>that call a common helper</p>",
        "id": 170618181,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562838551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> hmm what about <code>struct_tails_with_normalize</code> for the  generic version and <code>struct_tails_erasing_lifetimes</code> for the one that almost everything should use?</p>",
        "id": 170618195,
        "sender_full_name": "eddyb",
        "timestamp": 1562838568
    },
    {
        "content": "<p>yeah maybe</p>",
        "id": 170618202,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562838575
    },
    {
        "content": "<p>(<code>impl Fn(Ty&lt;'tcx&gt;) -&gt; Ty&lt;'tcx&gt;</code> should be enough I'm guessing)</p>",
        "id": 170618275,
        "sender_full_name": "eddyb",
        "timestamp": 1562838610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> not trying to waste of your time, I think we can get away without rephrasing <a href=\"https://github.com/rust-lang/rust/pull/62585#discussion_r302905131\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62585#discussion_r302905131\">https://github.com/rust-lang/rust/pull/62585#discussion_r302905131</a></p>",
        "id": 170708118,
        "sender_full_name": "eddyb",
        "timestamp": 1562924133
    },
    {
        "content": "<p>just changing \"checking\" to \"inference\"</p>",
        "id": 170708123,
        "sender_full_name": "eddyb",
        "timestamp": 1562924141
    },
    {
        "content": "<p>heh I just finished making a change there</p>",
        "id": 170708133,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924156
    },
    {
        "content": "<p>push and I'll look</p>",
        "id": 170708177,
        "sender_full_name": "eddyb",
        "timestamp": 1562924171
    },
    {
        "content": "<p>I actually went with \"for example, during codegen\"</p>",
        "id": 170708178,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924174
    },
    {
        "content": "<p>i'll show you</p>",
        "id": 170708180,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924177
    },
    {
        "content": "<p>(I don't like to name codegen in particular because it's <em>just part of the majority</em>)</p>",
        "id": 170708203,
        "sender_full_name": "eddyb",
        "timestamp": 1562924219
    },
    {
        "content": "<p>it seemed like the vast majority of usage. :)</p>",
        "id": 170708220,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924240
    },
    {
        "content": "<p>miri and lints also use layout</p>",
        "id": 170708237,
        "sender_full_name": "eddyb",
        "timestamp": 1562924272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ah whatever it's fine</p>",
        "id": 170708292,
        "sender_full_name": "eddyb",
        "timestamp": 1562924301
    },
    {
        "content": "<p>miri == interpreter  ... arguably just another kind of codegen. :)</p>",
        "id": 170708302,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924309
    },
    {
        "content": "<p>this sort of thing is searcheable for anyway</p>",
        "id": 170708305,
        "sender_full_name": "eddyb",
        "timestamp": 1562924317
    },
    {
        "content": "<p>anyway I was trying to take care not to saay that it was <em>only</em> usable in codegen</p>",
        "id": 170708307,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924319
    },
    {
        "content": "<p>yeah it makes sense</p>",
        "id": 170708324,
        "sender_full_name": "eddyb",
        "timestamp": 1562924329
    },
    {
        "content": "<p>(particularly that codegen doesn't care about lifetimes, that's specific enough that I don't mind)</p>",
        "id": 170708341,
        "sender_full_name": "eddyb",
        "timestamp": 1562924348
    },
    {
        "content": "<p>remove the <code>}</code> indent fix and r=me</p>",
        "id": 170708350,
        "sender_full_name": "eddyb",
        "timestamp": 1562924358
    },
    {
        "content": "<p>and enjoy your time off :P</p>",
        "id": 170708375,
        "sender_full_name": "eddyb",
        "timestamp": 1562924398
    },
    {
        "content": "<p>yeah I wanted to double check about that indent fix</p>",
        "id": 170708426,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924419
    },
    {
        "content": "<p>I want to see what rustfmt does there</p>",
        "id": 170708431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924425
    },
    {
        "content": "<p>its something with the match guard up above it</p>",
        "id": 170708434,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924436
    },
    {
        "content": "<p>are using \"only reformat those lines\"?</p>",
        "id": 170708439,
        "sender_full_name": "eddyb",
        "timestamp": 1562924442
    },
    {
        "content": "<p>oh I see, yeah that's what happened</p>",
        "id": 170708453,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924459
    },
    {
        "content": "<p>ugh</p>",
        "id": 170708454,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924461
    },
    {
        "content": "<p>because I picked up a script from someone else that does it off of git diffs and ran into this sort of nonsense all over the place</p>",
        "id": 170708465,
        "sender_full_name": "eddyb",
        "timestamp": 1562924472
    },
    {
        "content": "<p>I dont want to cause that much rightward drift, let me see</p>",
        "id": 170708468,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924475
    },
    {
        "content": "<p>so I had to manually look at every single change</p>",
        "id": 170708473,
        "sender_full_name": "eddyb",
        "timestamp": 1562924484
    },
    {
        "content": "<p>hmm okay I didn't even touch the match guard, did I</p>",
        "id": 170708537,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924529
    },
    {
        "content": "<p>so I really should put it back the way it was before. Will do.</p>",
        "id": 170708540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562924537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> (just checking in, it seems like canonicalization is not relevant here?)</p>",
        "id": 170711826,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562928041
    },
    {
        "content": "<p>it wasn't, no</p>",
        "id": 170711839,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562928064
    },
    {
        "content": "<p>I completely misdiagnosed the bug when I was first looking at it</p>",
        "id": 170711849,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562928079
    }
]