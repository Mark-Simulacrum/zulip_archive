[
    {
        "content": "<p>While working on a very simple program for my study I found a miscompilation. LLVM turned a function into an <code>ud2</code> instruction. I think this is LLVM finding an infinite loop without side-effects. I am not sure if I can share the program right now, but how can I check if it is indeed caused by an infinite loop turned into <code>unreachable</code> by LLVM?</p>",
        "id": 211356016,
        "sender_full_name": "bjorn3",
        "timestamp": 1601120021
    },
    {
        "content": "<p>Nope, the loop does actually finish.</p>",
        "id": 211356124,
        "sender_full_name": "bjorn3",
        "timestamp": 1601120211
    },
    {
        "content": "<p>Apart from <code>assert_eq!</code>, <code>#[test]</code> and the <code>Range</code>/<code>RangeFrom</code> types the standard library is not used at all. It is just an incorrect fibonacci implementation and another function that uses that fibonacci implementation.</p>",
        "id": 211356322,
        "sender_full_name": "bjorn3",
        "timestamp": 1601120582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/function.20being.20turned.20into.20unreachable.20by.20LLVM/near/211356124\">said</a>:</p>\n<blockquote>\n<p>Nope, the loop does actually finish.</p>\n</blockquote>\n<p>Wait, that is only the test for the broken fibonacci implementation. The test for the other function does indeed go into an infinite loop.</p>",
        "id": 211356382,
        "sender_full_name": "bjorn3",
        "timestamp": 1601120699
    },
    {
        "content": "<p>easiest way to manually add side effects to a loop as a programmer is to add a volatile read:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0_</span><span class=\"k\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">).</span><span class=\"n\">read_volatile</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211363400,
        "sender_full_name": "Lokathor",
        "timestamp": 1601131706
    },
    {
        "content": "<p>Fixing the fibonacci implementation was enough to prevent the miscompilation.</p>",
        "id": 211363420,
        "sender_full_name": "bjorn3",
        "timestamp": 1601131731
    },
    {
        "content": "<p>FWIW there is a non-zero chance that this issue will be fixed in LLVM 12.</p>",
        "id": 211383640,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1601155984
    },
    {
        "content": "<p>Is there any discussion to read on this?</p>",
        "id": 211388590,
        "sender_full_name": "nagisa",
        "timestamp": 1601164841
    },
    {
        "content": "<p>Must have missed it.</p>",
        "id": 211388594,
        "sender_full_name": "nagisa",
        "timestamp": 1601164846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> perhaps starting at <a href=\"https://github.com/rust-lang/rust/issues/28728#issuecomment-669799725\">https://github.com/rust-lang/rust/issues/28728#issuecomment-669799725</a> ?</p>",
        "id": 211391711,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601170485
    },
    {
        "content": "<p>I think this thread on <code>maynotprogress</code>:<br>\n<a href=\"http://lists.llvm.org/pipermail/llvm-dev/2020-September/thread.html#144865\">http://lists.llvm.org/pipermail/llvm-dev/2020-September/thread.html#144865</a></p>",
        "id": 211397513,
        "sender_full_name": "cuviper",
        "timestamp": 1601180191
    },
    {
        "content": "<p>Though IIRC the consensus was heading toward flipping that to an opt-in <code>mustprogress</code></p>",
        "id": 211397526,
        "sender_full_name": "cuviper",
        "timestamp": 1601180280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116155\">Jake Goulding</span> <a href=\"#narrow/stream/131828-t-compiler/topic/function.20being.20turned.20into.20unreachable.20by.20LLVM/near/211391711\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> perhaps starting at <a href=\"https://github.com/rust-lang/rust/issues/28728#issuecomment-669799725\">https://github.com/rust-lang/rust/issues/28728#issuecomment-669799725</a> ?</p>\n</blockquote>\n<p>Changesets adding alpha-equivalent attributes have been popping up for the past 5 years. None of them landed so far, so I donâ€™t have many hopes for this specific one either.</p>",
        "id": 211415258,
        "sender_full_name": "nagisa",
        "timestamp": 1601211128
    },
    {
        "content": "<p>without a proper consensus from many people, that is.</p>",
        "id": 211415349,
        "sender_full_name": "nagisa",
        "timestamp": 1601211315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <a href=\"https://reviews.llvm.org/D86233\">https://reviews.llvm.org/D86233</a></p>",
        "id": 211429521,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1601233457
    },
    {
        "content": "<p>The spec change towards not requiring forward progress by default is already approved, the rest is just a matter of time now...</p>",
        "id": 211429596,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1601233572
    },
    {
        "content": "<p>cool, lovely</p>",
        "id": 211437521,
        "sender_full_name": "nagisa",
        "timestamp": 1601245647
    }
]