[
    {
        "content": "<p>I was assigned to review <a href=\"https://github.com/rust-lang/rust/issues/88272\">#88272</a>. The author, who is working on a <a href=\"https://github.com/willcrichton/flowistry\">program slicing analysis for Rust</a>, wanted to make a private method of <code>SparseBitMatrix</code> into a public one. That method shouldn't really be part of the public API, especially if the intent is to <em>remove</em> bits from the matrix, but the alternative is implementing intersection, etc. for <code>SparseBitSet</code>, which is kind of a pain. The fact that we don't have those methods on <code>HybridBitSet</code> leads us to use dense <code>BitSet</code>s in more places than necessary, but it's probably not too big a deal.</p>\n<p>What would y'all (compiler contributors/team members) recommend if you were the reviewer? I'm tempted to just let them make the method public with a warning in the documentation, but IDK.</p>",
        "id": 250532946,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629832014
    },
    {
        "content": "<p>I feel like the immediate step of making it public seems OK, presuming it's not possible to break any (even implicit) invariants of the type -- not necessarily memory safety to be clear.</p>",
        "id": 250533625,
        "sender_full_name": "simulacrum",
        "timestamp": 1629832317
    },
    {
        "content": "<p>But expanding the API for the various bitsets to be more complete seems like a good idea in general.</p>",
        "id": 250533731,
        "sender_full_name": "simulacrum",
        "timestamp": 1629832345
    },
    {
        "content": "<p>As far as I can tell it's perfectly safe for users to manipulate the <code>HybridBitSet</code> directly once space for it has been reserved. Empty ones are fine, for example. The only real downside is that <code>ensure_row</code> makes the matrix more \"dense\" than necessary if you're just clearing a row, but this is pretty minor.</p>\n<p>I'll take their temperature re: <code>HybridBitSet</code> extensions. It seemed like they mostly just wanted to get their project off the ground. There's a few helper traits (e.g. <code>SubtractFromBitSet</code>) that would have to get changed as well, so it's not a trivial undertaking.</p>",
        "id": 250534698,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629832785
    },
    {
        "content": "<p>Yeah. Generally I definitely think exposing the method seems \"just useful\" because predicting full API surface is always hard, and ad-hoc extensions are often convenient, and generally it seems like it doesn't cost much.</p>",
        "id": 250535243,
        "sender_full_name": "simulacrum",
        "timestamp": 1629833010
    },
    {
        "content": "<p>Thanks Mark.</p>",
        "id": 250536003,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1629833382
    }
]