[
    {
        "content": "<p>Anyone know why <code>anonymize_late_bound_regions</code> assigns starting at 1?</p>",
        "id": 215007110,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603995301
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/blob/a53fb30e3bf2655b0563da6d561c23cda5f3ec11/compiler/rustc_symbol_mangling/src/v0.rs#L207\">comment</a></p>",
        "id": 215007349,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603995402
    },
    {
        "content": "<p>And <a href=\"https://github.com/rust-lang/rust/blob/a53fb30e3bf2655b0563da6d561c23cda5f3ec11/compiler/rustc_symbol_mangling/src/v0.rs#L330\">comment</a></p>",
        "id": 215007411,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603995432
    },
    {
        "content": "<p>yeah, that seems interesting to me, cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> probably <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 215009070,
        "sender_full_name": "lcnr",
        "timestamp": 1603996190
    },
    {
        "content": "<p>probably because it is easier to implement <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 215009092,
        "sender_full_name": "lcnr",
        "timestamp": 1603996202
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">replace_late_bound_regions</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mk_region</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">ReLateBound</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">INNERMOST</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">BrAnon</span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215009157,
        "sender_full_name": "lcnr",
        "timestamp": 1603996223
    },
    {
        "content": "<p>vs</p>",
        "id": 215009159,
        "sender_full_name": "lcnr",
        "timestamp": 1603996224
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">replace_late_bound_regions</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mk_region</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">ReLateBound</span><span class=\"p\">(</span><span class=\"n\">ty</span>::<span class=\"n\">INNERMOST</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">BrAnon</span><span class=\"p\">(</span><span class=\"n\">counter</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">reg</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215009244,
        "sender_full_name": "lcnr",
        "timestamp": 1603996275
    },
    {
        "content": "<p>I ran into this in my binders-refactor branch. Gonna try to switch it to start at 0</p>",
        "id": 215010696,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603997053
    },
    {
        "content": "<p>Though, I also realized: <code>erase_late_bound_regions</code> should be returning <code>Binder&lt;T&gt;</code> too since it can still have late-bound types or consts</p>",
        "id": 215010820,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603997144
    },
    {
        "content": "<p>uh...</p>",
        "id": 215012867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603998105
    },
    {
        "content": "<p>we used to always start from 1 I think maybe :)</p>",
        "id": 215012880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603998114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/131828-t-compiler/topic/anonymize_late_bound_regions/near/215010820\">said</a>:</p>\n<blockquote>\n<p>Though, I also realized: <code>erase_late_bound_regions</code> should be returning <code>Binder&lt;T&gt;</code> too since it can still have late-bound types or consts</p>\n</blockquote>\n<p>i think it would make more sense to panic on latebound types and consts here</p>",
        "id": 215012948,
        "sender_full_name": "lcnr",
        "timestamp": 1603998129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/131828-t-compiler/topic/anonymize_late_bound_regions/near/215010696\">said</a>:</p>\n<blockquote>\n<p>I ran into this in my binders-refactor branch. Gonna try to switch it to start at 0</p>\n</blockquote>\n<p>wait, why?</p>",
        "id": 215013042,
        "sender_full_name": "pnkfelix",
        "timestamp": 1603998194
    },
    {
        "content": "<p>hmm, or maybe not <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I can't think of where we may want to erase latebound lt but are fine with late bound types and consts</p>",
        "id": 215013062,
        "sender_full_name": "lcnr",
        "timestamp": 1603998200
    },
    {
        "content": "<p>I mean, not that I'm intending to try to make it make use of <code>NonZero</code> for niches or whatnot; I'm just curious why changing this is a priority.</p>",
        "id": 215013132,
        "sender_full_name": "pnkfelix",
        "timestamp": 1603998225
    },
    {
        "content": "<blockquote>\n<p>I'm just curious why changing this is a priority.</p>\n</blockquote>\n<p>at least for me this is mostly just a weird quick one has to remember so I think it would make sense to remove it if it isn't too much work</p>",
        "id": 215013406,
        "sender_full_name": "lcnr",
        "timestamp": 1603998335
    },
    {
        "content": "<p>So, an eventual goal (currently experimenting) with the chalk integration is that <code>Binder</code> will track the bound vars, rather than just being essentially a newtype. But if anonymizing late bound regions leaves the <code>0</code> index empty, then what do we put there?</p>",
        "id": 215013503,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603998371
    },
    {
        "content": "<p>But yeah, unless there's a <em>reason</em> for it, it just seems weird</p>",
        "id": 215013588,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603998417
    },
    {
        "content": "<p>okay. I can easily imagine putting some dummy instance at index 0. Or subtracting 1 from the value to do the indexing</p>",
        "id": 215013660,
        "sender_full_name": "pnkfelix",
        "timestamp": 1603998449
    },
    {
        "content": "<p>but if people want it to start at 0, I don't have any objections.</p>",
        "id": 215013681,
        "sender_full_name": "pnkfelix",
        "timestamp": 1603998460
    },
    {
        "content": "<p>So, so far when experimenting I've at an <code>Unknown</code> BoundVariableKind for cases where we've skipped some</p>",
        "id": 215013815,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603998511
    },
    {
        "content": "<p>but that seems less than ideal in the long run</p>",
        "id": 215013834,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603998520
    },
    {
        "content": "<p>like I said, seems just a bit weird to keep around if there's no specific reason</p>",
        "id": 215013945,
        "sender_full_name": "Jack Huey",
        "timestamp": 1603998577
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/78545\">#78545</a></p>",
        "id": 215038373,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604011696
    },
    {
        "content": "<p>(wasn't sure who best to r? so just left it to random)</p>",
        "id": 215038425,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604011751
    },
    {
        "content": "<p>I also realized that there's perhaps a little bit of a discrepancy between the number of how <code>BrAnon</code>s are numbered: Are they numbered where there can/should be both a <code>^0</code> for regions AND types/consts? Or are they numbered where a <code>^0</code> region means there shouldn't also be a <code>^0</code> type or const?</p>",
        "id": 215038752,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604012017
    },
    {
        "content": "<p>I would assume the latter (and indeed that's what I would expect we want as we move towards Chalk integration), but <code>anonymize_late_bound_regions</code> won't respect type bound vars</p>",
        "id": 215038881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604012116
    },
    {
        "content": "<p>Most of this predates bound types/constants. I would expect <code>anonymize_late_bound_regions</code> to become <code>anonymize_bound_vars</code> eventually. I don't think that we create bound types/constants outside of the chalk lowering and canonicalization, both of which assign distinct numbers.</p>",
        "id": 215041667,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1604014046
    },
    {
        "content": "<p>oh</p>",
        "id": 215041920,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604014310
    },
    {
        "content": "<p>hmm</p>",
        "id": 215041922,
        "sender_full_name": "Jack Huey",
        "timestamp": 1604014311
    }
]