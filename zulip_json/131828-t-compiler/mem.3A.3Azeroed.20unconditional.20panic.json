[
    {
        "content": "<p>Maybe I'm missing something, but why do we have intrinsics that statically either unconditionally panic or noop (<a href=\"https://github.com/rust-lang/rust/issues/66059\">#66059</a>)? Why not just emit a compiler error?</p>",
        "id": 231254494,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616377289
    },
    {
        "content": "<p>it broke too much of the ecosystem I think <a href=\"https://github.com/rust-lang/rust/pull/66059#issuecomment-586734747\">https://github.com/rust-lang/rust/pull/66059#issuecomment-586734747</a></p>",
        "id": 231254563,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616377397
    },
    {
        "content": "<p>What would the difference in breakage be between a compiler error and an unconditional runtime panic?</p>",
        "id": 231254922,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616377857
    },
    {
        "content": "<p>the runtime panic only breaks code if it's actually executed</p>",
        "id": 231254935,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616377890
    },
    {
        "content": "<p>Hmm</p>",
        "id": 231254947,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616377920
    },
    {
        "content": "<p>Where is the rationale explained? I didn't see anything about why a panic instead of a compiler error in that comment.</p>",
        "id": 231254993,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616377943
    },
    {
        "content": "<p>not sure, sorry</p>",
        "id": 231255007,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1616377978
    },
    {
        "content": "<p>I think what confuses me is it says:</p>\n<blockquote>\n<p>We already have a lint warning against this where statically possible; I think it is time to also add some run-time checking to cover the cases the lint cannot find.</p>\n<p>On the technical side, the UB check is implemented through an intrinsic that either compiles to an unconditional panic (if UB was detected) or a NOP (otherwise). </p>\n</blockquote>\n<p>It seems to say that the static lint can't always detect it, but that this PR was implemented via a static check...?</p>",
        "id": 231255016,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616377990
    },
    {
        "content": "<p>It is not undefined behavior to <em>have</em> code that does this; it is only UB if that code is reached at execution time. For example, if the program conditionally does so, it may still be unsound (e.g., if the condition is insufficient to prevent UB from happening), but it may also be sound (if the condition is sufficient to not do so). So making a call to mem::zeroed unconditionally a compile error if it is used with a type that means executing that code would be UB would be wrong.</p>",
        "id": 231255789,
        "sender_full_name": "simulacrum",
        "timestamp": 1616378787
    },
    {
        "content": "<p>Hmm, but what's the purpose of conditionally using <code>mem::zeroed</code> in an invalid way if when the condition is reached it will be UB? Are you saying that sometimes you can make it not UB?</p>",
        "id": 231255894,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616378907
    },
    {
        "content": "<p>Sure, for example if the condition is only true for some safe types (e.g. imagine an  Any-based guard for integer types, and a more general code path for other types, or just a panic).</p>",
        "id": 231258856,
        "sender_full_name": "simulacrum",
        "timestamp": 1616382500
    },
    {
        "content": "<p>Ah, I think I understand better. I always forget about <code>Any</code> <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 231258916,
        "sender_full_name": "Noah Lev",
        "timestamp": 1616382576
    }
]