[
    {
        "content": "<p><code>BitSet&lt;T&gt;</code> is defined <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_index/src/bit_set.rs#L91-L95\">here</a>. The <code>T</code> must impl <code>Idx</code> and in practice it's always a <code>newtype_index</code>.</p>\n<p>My question: does this kind of type cause <code>BitSet</code>'s methods to be monomorphized for every different <code>BitSet&lt;T&gt;</code>? Because they're all going to be identical...</p>",
        "id": 272222100,
        "sender_full_name": "nnethercote",
        "timestamp": 1645082712
    },
    {
        "content": "<p>yes, it does. even with the current impl of polymorphization this would still happen</p>",
        "id": 272222213,
        "sender_full_name": "lcnr",
        "timestamp": 1645082814
    },
    {
        "content": "<p>is the impact big enough that it would make sense to add a non generic bitset version?</p>",
        "id": 272222249,
        "sender_full_name": "lcnr",
        "timestamp": 1645082849
    },
    {
        "content": "<p>(which is then used by the generic bitsets)</p>",
        "id": 272222262,
        "sender_full_name": "lcnr",
        "timestamp": 1645082866
    },
    {
        "content": "<p>Not sure, I haven't measured it</p>",
        "id": 272250756,
        "sender_full_name": "nnethercote",
        "timestamp": 1645100360
    },
    {
        "content": "<p>It's unfortunate. I guess <code>IndexVec</code> will have the same problem.</p>",
        "id": 272250808,
        "sender_full_name": "nnethercote",
        "timestamp": 1645100399
    },
    {
        "content": "<p>\"newtypes are great, they promote type safety and they're zero cost\"... <br>\n\"well, not quite...\"</p>",
        "id": 272250896,
        "sender_full_name": "nnethercote",
        "timestamp": 1645100441
    },
    {
        "content": "<p>Is it possible that LLVM (or the linker? I forget what's responsible for this) is de-duplicating the functions?</p>",
        "id": 272251512,
        "sender_full_name": "Jake",
        "timestamp": 1645100785
    },
    {
        "content": "<p>Quite possible, but even if that's the case it'll still be slowing down compilation</p>",
        "id": 272252353,
        "sender_full_name": "nnethercote",
        "timestamp": 1645101338
    },
    {
        "content": "<p>How hard would it be to make some intrinsic or type magic that could give a type-erased version of a type?  I've been looking at things like <code>reverse</code> and <code>swap_with_slice</code> too, where it's a real waste to emit them for <code>u32</code>+<code>i32</code>+<code>f32</code>+...</p>\n<p>(Of course the nicest version would be a compiler feature to just automatically do that if it can tell there's no bound in use other than <code>Sized</code>, but that's probably hard.)</p>",
        "id": 272262883,
        "sender_full_name": "scottmcm",
        "timestamp": 1645106466
    },
    {
        "content": "<p>that kinda sounds like polymorphization ? (david and lcnr are working on it; it has a lot of potential :)</p>",
        "id": 272266496,
        "sender_full_name": "lqd",
        "timestamp": 1645108054
    },
    {
        "content": "<p>LLVM opaque pointers may eventually make it more likely for this kind of duplication to be merged</p>",
        "id": 272281845,
        "sender_full_name": "cuviper",
        "timestamp": 1645114078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Excessive.20monomorphization.20of.20.60BitSet.60.3F/near/272262883\">said</a>:</p>\n<blockquote>\n<p>(Of course the nicest version would be a compiler feature to just automatically do that if it can tell there's no bound in use other than <code>Sized</code>, but that's probably hard.)</p>\n</blockquote>\n<p>Why would it be hard?</p>",
        "id": 272350537,
        "sender_full_name": "Gary Guo",
        "timestamp": 1645149541
    },
    {
        "content": "<p>If ABI matches and <code>Sized</code> is the only bound then the compiler should be have enough info to dedup..</p>",
        "id": 272350766,
        "sender_full_name": "Gary Guo",
        "timestamp": 1645149689
    }
]