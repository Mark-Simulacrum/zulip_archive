[
    {
        "content": "<p>I'm going to try <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>'s <a href=\"https://github.com/rust-lang/rust/pull/74130#issuecomment-712462155\">approach</a> for this issue</p>",
        "id": 215018538,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604000901
    },
    {
        "content": "<p>we were talking and come with the idea of passing <code>assoc_name</code> down to <a href=\"https://github.com/rust-lang/rust/blob/2a71e45411881dda12a704d7491428d8a23347c0/compiler/rustc_typeck/src/astconv/mod.rs#L63\">https://github.com/rust-lang/rust/blob/2a71e45411881dda12a704d7491428d8a23347c0/compiler/rustc_typeck/src/astconv/mod.rs#L63</a></p>",
        "id": 215018610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604000938
    },
    {
        "content": "<p>so we can filter beforehand and avoid cycling</p>",
        "id": 215018645,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604000958
    },
    {
        "content": "<p>the question I have is what should be done with <code>assoc_name</code> in this case <a href=\"https://github.com/rust-lang/rust/blob/2a71e45411881dda12a704d7491428d8a23347c0/compiler/rustc_typeck/src/collect.rs#L311\">https://github.com/rust-lang/rust/blob/2a71e45411881dda12a704d7491428d8a23347c0/compiler/rustc_typeck/src/collect.rs#L311</a> ?</p>",
        "id": 215018794,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604001029
    },
    {
        "content": "<p>I'm not sure if we want to filter there and I was contemplating passing handling this with an <code>Option&lt;Ident&gt;</code> and pass <code>None</code> in that case</p>",
        "id": 215019126,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604001207
    },
    {
        "content": "<p>so that would help with the case that I mentioned where you have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">A</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215035290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604009643
    },
    {
        "content": "<p>I kind of think it's worth doing both but admittedly this case is much more niche</p>",
        "id": 215035340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604009655
    },
    {
        "content": "<p>still I was suggesting that you might want to start with the <code>where A: Foo, A: Bar&lt;A::Item&gt;</code> case instead because it'll be a bit more \"contained\" (although it's ultimately fairly orthogonal)</p>",
        "id": 215035364,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604009679
    },
    {
        "content": "<p>you're going to have to add a <code>super_traits_that_define_assoc_item</code> query similar to <code>get_type_parameter_bounds</code></p>",
        "id": 215035419,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604009720
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you remember that you told me to filter this <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/astconv/mod.rs#L1305\">https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/astconv/mod.rs#L1305</a> before so we can reduce the code in the elaboration</p>",
        "id": 215372632,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604348313
    },
    {
        "content": "<p>like</p>",
        "id": 215372639,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604348315
    },
    {
        "content": "<p>we could just stick to this <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_infer/src/traits/util.rs#L131-L152\">https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_infer/src/traits/util.rs#L131-L152</a> part</p>",
        "id": 215372664,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604348332
    },
    {
        "content": "<p>but</p>",
        "id": 215372667,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604348333
    },
    {
        "content": "<p>we also have <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_infer/src/traits/util.rs#L182-L244\">https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_infer/src/traits/util.rs#L182-L244</a></p>",
        "id": 215372704,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604348348
    },
    {
        "content": "<p>so I'm not sure if I got you right or if it was that you thought that in the match the only useful thing we were doing was about <code>ty::PredicateAtom::Trait</code></p>",
        "id": 215372750,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604348382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/215372632\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> do you remember that you told me to filter this...</p>\n</blockquote>\n<p>I did but I think that won't work</p>",
        "id": 215381571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604352577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/215372704\">said</a>:</p>\n<blockquote>\n<p>we also have <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_infer/src/traits/util.rs#L182-L244\">https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_infer/src/traits/util.rs#L182-L244</a></p>\n</blockquote>\n<p>this logic is not needed for this particular caller</p>",
        "id": 215381659,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604352607
    },
    {
        "content": "<p>so actually <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> maybe step one, if you wanted, to fixing this bug would be to make a specialized version of \"elaborate predicates\" that <em>just</em> handles <code>TraitRef</code> (not arbitrary predicates) and <em>just</em> does super-trait expansion</p>",
        "id": 215381703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604352641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/215381659\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/215372704\">said</a>:</p>\n<blockquote>\n<p>we also have <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_infer/src/traits/util.rs#L182-L244\">https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_infer/src/traits/util.rs#L182-L244</a></p>\n</blockquote>\n<p>this logic is not needed for this particular caller</p>\n</blockquote>\n<p>yeah I know that is not needed, I guess I got what you proposed me in a wrong way :)</p>",
        "id": 215382197,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604352886
    },
    {
        "content": "<p>my understanding was that you wanted me to refactor the code so elaborates takes only <code>ty::PredicateAtom::Trait</code></p>",
        "id": 215382240,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604352915
    },
    {
        "content": "<p>but now I guess that you didn't meant that</p>",
        "id": 215382275,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604352929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/215381703\">said</a>:</p>\n<blockquote>\n<p>so actually <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> maybe step one, if you wanted, to fixing this bug would be to make a specialized version of \"elaborate predicates\" that <em>just</em> handles <code>TraitRef</code> (not arbitrary predicates) and <em>just</em> does super-trait expansion</p>\n</blockquote>\n<p>right, so we can do a elaborate predicates for <code>TraitRef</code> and in our case call that thing</p>",
        "id": 215382390,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604352982
    },
    {
        "content": "<p>yeah, I think that's a good idea</p>",
        "id": 215382401,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604352989
    },
    {
        "content": "<p>and I guess you meant to leave the current elaborate predicates as is</p>",
        "id": 215382446,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604353020
    },
    {
        "content": "<p>just make a new one for this case that takes <code>TraitRef</code></p>",
        "id": 215382457,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604353031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/215382275\">said</a>:</p>\n<blockquote>\n<p>but now I guess that you didn't meant that</p>\n</blockquote>\n<p>no, I did not mean that</p>",
        "id": 215382497,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604353057
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/215382457\">said</a>:</p>\n<blockquote>\n<p>just make a new one for this case that takes <code>TraitRef</code></p>\n</blockquote>\n<p>right, basically inline that logic into a special-cased function</p>",
        "id": 215382525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604353074
    },
    {
        "content": "<p>and then the function will grow to take the associated item name</p>",
        "id": 215382585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604353086
    },
    {
        "content": "<p>and to use a distinct query</p>",
        "id": 215382587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604353088
    },
    {
        "content": "<p>so as to avoid cycles</p>",
        "id": 215382590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604353091
    },
    {
        "content": "<p>I'm having troubles to pass the assoc_name (<code>Ident</code>) down</p>",
        "id": 215483219,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604423528
    },
    {
        "content": "<p>we've said we should pass it here <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/astconv/mod.rs#L1295\">https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/astconv/mod.rs#L1295</a></p>",
        "id": 215483271,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604423556
    },
    {
        "content": "<p>and here <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/astconv/mod.rs#L1305\">https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/astconv/mod.rs#L1305</a></p>",
        "id": 215483298,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604423570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/215483271\">said</a>:</p>\n<blockquote>\n<p>we've said we should pass it here <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/astconv/mod.rs#L1295\">https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/astconv/mod.rs#L1295</a></p>\n</blockquote>\n<p>if I pass the thing down here, <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/collect.rs#L314\">https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/collect.rs#L314</a> too</p>",
        "id": 215483445,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604423644
    },
    {
        "content": "<p>and that's a Query</p>",
        "id": 215483507,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604423675
    },
    {
        "content": "<p>so I need to pass <code>Indent</code> as part of the key</p>",
        "id": 215483531,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604423684
    },
    {
        "content": "<p>at that point I get</p>",
        "id": 215483575,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604423713
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>|| 346  | |          $(impl&lt;$tcx&gt; QueryConfig for queries::$name&lt;$tcx&gt; {\n||      | |                       ^^^^^^^^^^^ the trait `keys::Key` is not implemented for `(rustc_hir::def_id::DefId, rustc_hir::def_id::LocalDefId, rustc_span::symbol::Ident)`\n</code></pre></div>",
        "id": 215483578,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604423714
    },
    {
        "content": "<p>I'm not sure if I should follow this path</p>",
        "id": 215483610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604423735
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 215484207,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604424015
    },
    {
        "content": "<p>For the <code>keys::Key</code> trait is implemented in <code>rustc_middle::ty::query::keys</code>. New impls are okay AFAIK.</p>",
        "id": 215485227,
        "sender_full_name": "cjgillot",
        "timestamp": 1604424467
    },
    {
        "content": "<p>yeah, saw that anyway good to know, was mainly wondering if the path I was taking was ok</p>",
        "id": 215489202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604426252
    },
    {
        "content": "<p>now I was considering how to filter based on the associated type name</p>",
        "id": 215498854,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604431147
    },
    {
        "content": "<p>I guess I need something like</p>",
        "id": 215498886,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604431168
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">associated_items</span><span class=\"p\">(</span><span class=\"n\">trait_did</span><span class=\"p\">).</span><span class=\"n\">filter_by_name</span><span class=\"p\">(</span><span class=\"n\">ident</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215499012,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604431211
    },
    {
        "content": "<p>ended filtering like</p>",
        "id": 215503759,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604433917
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>                 self.param_env.caller_bounds().iter().filter_map(|predicate| {\n                     match predicate.skip_binders() {\n                         ty::PredicateAtom::Trait(data, _) if data.self_ty().is_param(index) =&gt; {\n<span class=\"gd\">-                            // HACK(eddyb) should get the original `Span`.</span>\n<span class=\"gd\">-                            let span = tcx.def_span(def_id);</span>\n<span class=\"gd\">-                            Some((predicate, span))</span>\n<span class=\"gi\">+                            let trait_did = data.def_id();</span>\n<span class=\"gi\">+                            if tcx</span>\n<span class=\"gi\">+                                .associated_items(trait_did)</span>\n<span class=\"gi\">+                                .filter_by_name_unhygienic(assoc_name.name)</span>\n<span class=\"gi\">+                                .next()</span>\n<span class=\"gi\">+                                .is_some()</span>\n<span class=\"gi\">+                            {</span>\n<span class=\"gi\">+                                // HACK(eddyb) should get the original `Span`.</span>\n<span class=\"gi\">+                                let span = tcx.def_span(def_id);</span>\n<span class=\"gi\">+                                Some((predicate, span))</span>\n<span class=\"gi\">+                            } else {</span>\n<span class=\"gi\">+                                None</span>\n<span class=\"gi\">+                            }</span>\n                         }\n                         _ =&gt; None,\n                     }\n</code></pre></div>",
        "id": 215503762,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604433920
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 215503766,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604433923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you will have to add it to the query key, for better or worse</p>",
        "id": 215503884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604433981
    },
    {
        "content": "<p>howevr</p>",
        "id": 215503917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604433996
    },
    {
        "content": "<p>let me push because I already did that</p>",
        "id": 215503929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604434002
    },
    {
        "content": "<p>couple of things</p>",
        "id": 215503930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604434002
    },
    {
        "content": "<p>first, there are kind of three changes we've discussed</p>",
        "id": 215503950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604434014
    },
    {
        "content": "<ul>\n<li>a pure refactoring to make a specialized version of \"elaborate predicates\" for use in <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/astconv/mod.rs#L1301-L1307\">this code</a></li>\n</ul>",
        "id": 215503979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604434030
    },
    {
        "content": "<ul>\n<li>extending that specialized \"elaborate\" code to take the associated item name and making a modified <code>supertraits_of</code> query that takes the associated item name, and only returns supertraits that may potentially define that associated item</li>\n</ul>",
        "id": 215504032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604434071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self\">https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self</a></p>",
        "id": 215504034,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604434072
    },
    {
        "content": "<ul>\n<li>modifying the <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/astconv/mod.rs#L1295\">get_type_parameter_bounds call</a> to also track the associated item name; this isn't really relevant to the original bug, more to a related bug with where clauses that generate unnecessary ambiguity</li>\n</ul>",
        "id": 215504113,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604434100
    },
    {
        "content": "<p>yeah I'm still tackling not the <code>Self</code> problem but the one where <code>Self</code> was not used</p>",
        "id": 215504138,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604434123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/215504113\">said</a>:</p>\n<blockquote>\n<ul>\n<li>modifying the <a href=\"https://github.com/rust-lang/rust/blob/499ebcfdf3b09a646154f321b7c28f5105e4dbf7/compiler/rustc_typeck/src/astconv/mod.rs#L1295\">get_type_parameter_bounds call</a> to also track the associated item name; this isn't really relevant to the original bug, more to a related bug with where clauses that generate unnecessary ambiguity</li>\n</ul>\n</blockquote>\n<p>this part is what I'm currently trying to do</p>",
        "id": 215504163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604434141
    },
    {
        "content": "<p>so I'm still not adding a new query or anything like that</p>",
        "id": 215504182,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604434157
    },
    {
        "content": "<p>I guess in my code this is not the way to filter <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self#diff-0b3760aae48c64fee635939113df3d4440ea809c6a44f9d3a7bf108626c9c8e9R205-R210\">https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self#diff-0b3760aae48c64fee635939113df3d4440ea809c6a44f9d3a7bf108626c9c8e9R205-R210</a></p>",
        "id": 215504213,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604434179
    },
    {
        "content": "<p>but I'm not sure need to investigate a bit more what <code>associated_items</code> return given a <code>trait_did</code></p>",
        "id": 215504296,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604434215
    },
    {
        "content": "<p>well what I'm doing is actually what <code>trait_defines_associated_type_named</code> does</p>",
        "id": 215505586,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604434966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> this looks like a plausible fix for that problem, at least in some instances</p>",
        "id": 215509452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604437269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when you say <code>this</code> what did you meant?</p>",
        "id": 215509580,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604437328
    },
    {
        "content": "<p>what I've done doesn't work</p>",
        "id": 215509610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604437347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I meant your PR</p>",
        "id": 215512443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438954
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> well, that diff. In what way does it not work?</p>",
        "id": 215512455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438965
    },
    {
        "content": "<p>I didn't dig too closely into it, I just meant that it's a kind of \"sketch in the right direction\"</p>",
        "id": 215512466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438974
    },
    {
        "content": "<p>does it still get a cycle error?</p>",
        "id": 215512474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604438979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/215512474\">said</a>:</p>\n<blockquote>\n<p>does it still get a cycle error?</p>\n</blockquote>\n<p>yes I did :)</p>",
        "id": 215522698,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604445089
    },
    {
        "content": "<p>Hmm <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> maybe the best next step is for me to check it out</p>",
        "id": 215584421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498816
    },
    {
        "content": "<p>I guess I didn't look that closely at the diff so there might be some tweak required to evade the cycle error</p>",
        "id": 215584458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498832
    },
    {
        "content": "<p>but it'd also be useful to see the backtrace</p>",
        "id": 215584471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604498838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> let me create a gist</p>",
        "id": 215584673,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604498926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://gist.github.com/spastorino/f23b54d995507b854370ecf9013f66c9\">https://gist.github.com/spastorino/f23b54d995507b854370ecf9013f66c9</a></p>",
        "id": 215584722,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604498949
    },
    {
        "content": "<p>the example being compiled is</p>",
        "id": 215584791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604498978
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"c1\">//trait Baz: Foo + Bar&lt;Self::Item&gt; {}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">baz</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">Item</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215584793,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604498981
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> well from looking at the code</p>",
        "id": 215585990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499460
    },
    {
        "content": "<p>I believe the problem is that you didn't finish modifying <code>type_param_predicates</code></p>",
        "id": 215586031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499481
    },
    {
        "content": "<p>you have given it an <code>assoc_name</code></p>",
        "id": 215586080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499487
    },
    {
        "content": "<p>but you're not really <em>using</em> it anywhere</p>",
        "id": 215586089,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499491
    },
    {
        "content": "<p>in particular:</p>",
        "id": 215586097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/215504213\">said</a>:</p>\n<blockquote>\n<p>I guess in my code this is not the way to filter <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self#diff-0b3760aae48c64fee635939113df3d4440ea809c6a44f9d3a7bf108626c9c8e9R205-R210\">https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self#diff-0b3760aae48c64fee635939113df3d4440ea809c6a44f9d3a7bf108626c9c8e9R205-R210</a></p>\n</blockquote>\n<p>this function is not relevant, this is the implementation in the <code>FnCtxt</code> and that comes too late</p>",
        "id": 215586164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499526
    },
    {
        "content": "<p>what you are interested in is this implementation from <code>collect.rs</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_type_parameter_bounds</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">def_id</span>: <span class=\"nc\">DefId</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assoc_name</span>: <span class=\"nc\">Ident</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ty</span>::<span class=\"n\">GenericPredicates</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">).</span><span class=\"n\">type_param_predicates</span><span class=\"p\">((</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">item_def_id</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">def_id</span><span class=\"p\">.</span><span class=\"n\">expect_local</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">assoc_name</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215586216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499551
    },
    {
        "content": "<p>and you can see that it invokes the <code>type_param_predicates</code> query</p>",
        "id": 215586253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499567
    },
    {
        "content": "<p><a href=\"https://github.com/spastorino/rust/blob/0e0c50e05144df920560a7146a591a22245d66d9/compiler/rustc_typeck/src/collect.rs#L500-L505\">definition here</a></p>",
        "id": 215586370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499606
    },
    {
        "content": "<p><a href=\"https://github.com/spastorino/rust/blob/0e0c50e05144df920560a7146a591a22245d66d9/compiler/rustc_typeck/src/collect.rs#L570-L578\">this loop I think is where the cycle arises</a></p>",
        "id": 215586408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499620
    },
    {
        "content": "<p><a href=\"https://github.com/spastorino/rust/blob/0e0c50e05144df920560a7146a591a22245d66d9/compiler/rustc_typeck/src/collect.rs#L585-L595\">this function</a> probably needs to take <code>assoc_name</code> and it needs to be modified so that</p>",
        "id": 215586524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499665
    },
    {
        "content": "<p>given a HIR predicate <code>T: Foo</code>, it only tries to convert that into a <code>ty</code> predicate <em>if</em> the trait <code>Foo</code> defines <code>assoc_name</code></p>",
        "id": 215586580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499694
    },
    {
        "content": "<p>it is that conversion that creates the cycle</p>",
        "id": 215586602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 215586613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604499708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> facepalm, yeah I see :)</p>",
        "id": 215642110,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604524441
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self\">https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self</a></p>",
        "id": 215882764,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604686092
    },
    {
        "content": "<p>still is not working but was just wondering if that's what more or less you wanted to do</p>",
        "id": 215882792,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604686110
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> that does look like the general idea, though I think this is wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">trait_did</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">local_def_id</span><span class=\"p\">(</span><span class=\"n\">param_id</span><span class=\"p\">).</span><span class=\"n\">to_def_id</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215883130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604686311
    },
    {
        "content": "<p>I think that is the id of the type parameter, not the trait?</p>",
        "id": 215883141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604686319
    },
    {
        "content": "<p>that's probably right :)</p>",
        "id": 215883193,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604686334
    },
    {
        "content": "<p>I'm pretty sure I'm using a wrong id somewhere</p>",
        "id": 215883202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604686344
    },
    {
        "content": "<p>probably that one :)</p>",
        "id": 215883208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604686348
    },
    {
        "content": "<p>checking ...</p>",
        "id": 215883213,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604686350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah, that's right</p>",
        "id": 215884846,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604687114
    },
    {
        "content": "<p>this is not the id I'm looking for</p>",
        "id": 215884867,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604687122
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://i.kym-cdn.com/entries/icons/mobile/000/018/682/obi-wan.jpg\"><img src=\"https://i.kym-cdn.com/entries/icons/mobile/000/018/682/obi-wan.jpg\"></a></div>",
        "id": 215885005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604687169
    },
    {
        "content": "<p>hehehe, don't remember what happens in that scene :)</p>",
        "id": 215885100,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604687221
    },
    {
        "content": "<p>\"not the droids you're looking for\"</p>",
        "id": 215885120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604687229
    },
    {
        "content": "<p>:)</p>",
        "id": 215885134,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604687236
    },
    {
        "content": "<p>I guess that comes on <code>generics</code> arg</p>",
        "id": 215885153,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604687246
    },
    {
        "content": "<p>the id you want is going to come from the <em>name</em> of the trait I think</p>",
        "id": 215885211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604687268
    },
    {
        "content": "<p>it might be a bit tricky to find :/</p>",
        "id": 215885217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604687272
    },
    {
        "content": "<p>have to look at the HIR structures</p>",
        "id": 215885246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604687281
    },
    {
        "content": "<p>yeah isn't the parent of what comes in generics?</p>",
        "id": 215885326,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604687300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it seems that <code>ItemCtxt</code> holds a reference to the trait</p>",
        "id": 215890263,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604689670
    },
    {
        "content": "<p>was trying ...</p>",
        "id": 215890331,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604689688
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gu\">@@ -635,16 +634,15 @@ impl ItemCtxt&lt;'tcx&gt; {</span>\n             .iter()\n             .filter_map(|wp| match *wp {\n                 hir::WherePredicate::BoundPredicate(ref bp) =&gt; {\n<span class=\"gd\">-                    let trait_did = self.tcx.hir().local_def_id(param_id).to_def_id();</span>\n                     if assoc_name.is_none()\n                         || self\n                             .tcx\n<span class=\"gd\">-                            .associated_items(trait_did)</span>\n<span class=\"gi\">+                            .associated_items(self.item_def_id)</span>\n                             .find_by_name_and_kind(\n                                 self.tcx,\n                                 assoc_name.unwrap(),\n                                 ty::AssocKind::Type,\n<span class=\"gd\">-                                trait_did,</span>\n<span class=\"gi\">+                                self.item_def_id,</span>\n                             )\n                             .is_some()\n                     {\n</code></pre></div>",
        "id": 215890332,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604689691
    },
    {
        "content": "<p>doesn't work either :/</p>",
        "id": 215890345,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604689700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so the <code>bp</code> variable there...</p>",
        "id": 215895935,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692485
    },
    {
        "content": "<p>this represents \"some where clause\", basically</p>",
        "id": 215895950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692492
    },
    {
        "content": "<p>the <code>bp</code> is a <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/struct.WhereBoundPredicate.html\"><code>WhereBoundPredicate</code></a>, I guess</p>",
        "id": 215895977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692509
    },
    {
        "content": "<p>oh this is annoying</p>",
        "id": 215896050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692550
    },
    {
        "content": "<p>so actually <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I think you're filtering at the wrong spot :)</p>",
        "id": 215896120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692568
    },
    {
        "content": "<p>hmm :)</p>",
        "id": 215896166,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604692590
    },
    {
        "content": "<p><em>almost</em> right</p>",
        "id": 215896173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692595
    },
    {
        "content": "<p>in which of the many filters I'm doing? :P</p>",
        "id": 215896202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604692606
    },
    {
        "content": "<p>lol I meant the one <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self#diff-ac1e6e554bac799e1e2d3886bea8fdc0d0bf04b20d33df59f5a8e92c41987ac6R656\">here</a>, line 656 of <code>collect.rs</code></p>",
        "id": 215896350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692657
    },
    {
        "content": "<p>basically the \"bound predicate\" is a series of bounds like <code>Foo + Bar</code></p>",
        "id": 215896401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692682
    },
    {
        "content": "<p>i.e., if you have <code>trait Foo: Bar + Baz</code>, it would be the <code>Bar + Baz</code></p>",
        "id": 215896458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692691
    },
    {
        "content": "<p>so we need to filter <em>from within those bounds</em></p>",
        "id": 215896474,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692698
    },
    {
        "content": "<p>and this one <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self#diff-ac1e6e554bac799e1e2d3886bea8fdc0d0bf04b20d33df59f5a8e92c41987ac6R608\">https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self#diff-ac1e6e554bac799e1e2d3886bea8fdc0d0bf04b20d33df59f5a8e92c41987ac6R608</a> is correct?</p>",
        "id": 215896506,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604692718
    },
    {
        "content": "<p>the code is kind of annoying but</p>",
        "id": 215896623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692771
    },
    {
        "content": "<p>probably the right spot is actually <em>in</em> the <code>predicates_from_bound</code> function</p>",
        "id": 215896666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692794
    },
    {
        "content": "<p>i.e., you could pass <code>assoc_name</code> to that function</p>",
        "id": 215896718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692804
    },
    {
        "content": "<p>wait</p>",
        "id": 215896773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692831
    },
    {
        "content": "<p>sorry, no</p>",
        "id": 215896775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692832
    },
    {
        "content": "<p>I mean you <em>could</em></p>",
        "id": 215896782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692836
    },
    {
        "content": "<p>but also before you call that function, you could filter</p>",
        "id": 215896789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692841
    },
    {
        "content": "<p>I thought about doing that too</p>",
        "id": 215896791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604692843
    },
    {
        "content": "<p>but the point is that this function is processing a single bound</p>",
        "id": 215896800,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692848
    },
    {
        "content": "<p>if it represents a TraitBound, you would check if the trait has an assoc item with that name</p>",
        "id": 215896830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692862
    },
    {
        "content": "<p>if not, you would return empty vector</p>",
        "id": 215896848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692865
    },
    {
        "content": "<p>but it might be nicer to pull the filter into a separate function</p>",
        "id": 215896870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692876
    },
    {
        "content": "<p>because I imagine there are more callers of <code>predicates_from_bound</code> and only <em>some</em> want to filter</p>",
        "id": 215896900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692890
    },
    {
        "content": "<p>yeah</p>",
        "id": 215896907,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604692892
    },
    {
        "content": "<p>but you meant to filter on <code>predicates_from_bound</code> or before?</p>",
        "id": 215896940,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604692914
    },
    {
        "content": "<p>I guess you're saying to filter before on a separate function to avoid the repetition you see in the code I've pushed</p>",
        "id": 215897059,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604692959
    },
    {
        "content": "<p>I think you could change it to something like</p>",
        "id": 215897063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692962
    },
    {
        "content": "<p>before</p>",
        "id": 215897099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692977
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">bt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">predicates_from_bound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215897105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692981
    },
    {
        "content": "<p>after</p>",
        "id": 215897111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692982
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">bound_defines_assoc_item</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">assoc_name</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">flat_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">bt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">predicates_from_bound</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bt</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constness</span><span class=\"p\">));</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 215897169,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604692999
    },
    {
        "content": "<p>I am a <em>bit</em> hesitant before because the <code>bt</code> type is produced by calling <code>self.to_ty</code> and <em>that</em> can also cause cycles, but it's a good start</p>",
        "id": 215897221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604693025
    },
    {
        "content": "<p>(also that is dependent on a flag and I haven't looked to see what value that flag would have)</p>",
        "id": 215897304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604693049
    },
    {
        "content": "<p>ok, going to check this</p>",
        "id": 215898766,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604693868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just in case</p>",
        "id": 215904864,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604697216
    },
    {
        "content": "<p>do we want to do this for both, params and where_clases, right?</p>",
        "id": 215904883,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604697227
    },
    {
        "content": "<p>nevermind I see</p>",
        "id": 215907099,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604698586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> gave another quick pass <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self\">https://github.com/rust-lang/rust/compare/master...spastorino:trait-inheritance-self</a></p>",
        "id": 215922104,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604709917
    },
    {
        "content": "<p>but it doesn't compile :/</p>",
        "id": 215922106,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604709924
    },
    {
        "content": "<p>I'm probably doing a mess in <code>bound_defines_assoc_item</code> with the ids</p>",
        "id": 215923299,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1604711210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> the problem I think</p>",
        "id": 215959396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604762252
    },
    {
        "content": "<p>is that <code>bound_defines_assoc_item</code> doesn't consider supertraits</p>",
        "id": 215959397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604762259
    },
    {
        "content": "<p>this is gonna be just a <em>touch</em> tricky</p>",
        "id": 215959403,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604762282
    },
    {
        "content": "<p>we need something that enumerates supertraits just by def-ids</p>",
        "id": 215959444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604762289
    },
    {
        "content": "<p>without converting all the types within</p>",
        "id": 215959445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1604762293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ok so the supertrait problem ...</p>",
        "id": 216405576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605133189
    },
    {
        "content": "<p>so if you have <code>trait Foo: Bar&lt;Self::X&gt; + Baz</code>, we want (when evaluating <code>Self::X</code>...) to be able to ignore <code>Bar</code>. The problem is that <code>elaborate_predicates</code> is going to invoke <code>superpredicates_of</code> or something, which will not ignore the <code>Bar</code> bound.</p>",
        "id": 216405648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605133226
    },
    {
        "content": "<p>so we need a variant of <code>superprediates_of</code> that takes the associated item name</p>",
        "id": 216405660,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605133240
    },
    {
        "content": "<p>e.g. <code>superpredicates_that_define_assoc_type</code></p>",
        "id": 216405669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605133251
    },
    {
        "content": "<p>and then we need a variation of <code>elaborate_predicates</code> that uses this</p>",
        "id": 216405691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605133261
    },
    {
        "content": "<p>I imagine something like this</p>",
        "id": 216405696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605133263
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">elaborate_trait_ref_that_define_assoc_type</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span>: <span class=\"nc\">TraitRef</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">type_name</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// specialize to trait ref</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">super_predicates_that_define_assoc_type</span><span class=\"p\">(</span><span class=\"n\">trait_Ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">type_name</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216405849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605133358
    },
    {
        "content": "<p>my point was that because, for our purposes, we only care about a limited subset of predicates</p>",
        "id": 216405865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605133373
    },
    {
        "content": "<p>we can ignore most of the cases and write more specialized code</p>",
        "id": 216405877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605133379
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <a href=\"https://hackmd.io/6zYx-fjzRbiLFue68Xrv7A\">hackmd for notes</a></p>",
        "id": 216508464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605205740
    },
    {
        "content": "<p>[oops, wrong stream]</p>",
        "id": 216630097,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605282773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> btw have you pushed your latest changes?</p>",
        "id": 216725506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605355582
    },
    {
        "content": "<p>yes</p>",
        "id": 216725510,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355589
    },
    {
        "content": "<p>well I have a local change</p>",
        "id": 216725514,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355602
    },
    {
        "content": "<p>let me push that too</p>",
        "id": 216725516,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> done</p>",
        "id": 216725532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355630
    },
    {
        "content": "<p>using a particular example, one of the things that are failing</p>",
        "id": 216725545,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355661
    },
    {
        "content": "<p>let me pull</p>",
        "id": 216725546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605355662
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/3461325d239ac7804ee6249ffa7d9dccae70c298/library/core/src/iter/adapters/flatten.rs#L80-L84\">https://github.com/rust-lang/rust/blob/3461325d239ac7804ee6249ffa7d9dccae70c298/library/core/src/iter/adapters/flatten.rs#L80-L84</a></p>",
        "id": 216725551,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355673
    },
    {
        "content": "<p>it's failing for this case <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 216725595,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355702
    },
    {
        "content": "<p>with ...</p>",
        "id": 216725596,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355706
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0221]: ambiguous associated type `Item` in bounds of `I`\n   --&gt; library/core/src/iter/adapters/flatten.rs:82:14\n    |\n82  |     F: FnMut(I::Item) -&gt; U,\n    |              ^^^^^^^ ambiguous associated type `Item`\n    |\n   ::: library/core/src/iter/traits/iterator.rs:100:5\n    |\n100 |     type Item;\n    |     ----------\n    |     |\n    |     ambiguous `Item` from `Iterator`\n    |     ambiguous `Item` from `Iterator`\n    |\nhelp: use fully qualified syntax to disambiguate\n    |\n82  |     F: FnMut(&lt;I as Iterator&gt;::Item) -&gt; U,\n    |              ^^^^^^^^^^^^^^^^^^^^^\nhelp: use fully qualified syntax to disambiguate\n    |\n82  |     F: FnMut(&lt;I as Iterator&gt;::Item) -&gt; U,\n    |              ^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 216725603,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355722
    },
    {
        "content": "<p>ah</p>",
        "id": 216725604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605355724
    },
    {
        "content": "<p>that's not the case I thought it was failing with</p>",
        "id": 216725613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605355729
    },
    {
        "content": "<p>from my debug prints I see ...</p>",
        "id": 216725619,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355743
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>2:rustc\u001b[1;34mDEBUG\u001b[0m \u001b[2mrustc_infer::traits::util\u001b[0m super_predicates: data=TraitPredicate(&lt;I as iter::traits::double_ended::DoubleEndedIterator&gt;)\n2:rustc\u001b[1;34mDEBUG\u001b[0m \u001b[2mrustc_infer::traits::util\u001b[0m super_predicates: data=TraitPredicate(&lt;I as iter::traits::iterator::Iterator&gt;)\n</code></pre></div>",
        "id": 216725622,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355747
    },
    {
        "content": "<p>so I was saying that we should just consider <code>DoubleEndedIterator</code> and not both of them</p>",
        "id": 216725632,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605355765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> sorry had to step away</p>",
        "id": 216725965,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356377
    },
    {
        "content": "<p>mmm</p>",
        "id": 216725967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356386
    },
    {
        "content": "<p>so the thing is that <code>DoubleEndedIterator</code> <em>extends</em> <code>Iterator</code></p>",
        "id": 216726011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356410
    },
    {
        "content": "<p>I guess that I can stop here <a href=\"https://github.com/rust-lang/rust/blob/3461325d239ac7804ee6249ffa7d9dccae70c298/compiler/rustc_infer/src/traits/util.rs#L104\">https://github.com/rust-lang/rust/blob/3461325d239ac7804ee6249ffa7d9dccae70c298/compiler/rustc_infer/src/traits/util.rs#L104</a></p>",
        "id": 216726016,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605356430
    },
    {
        "content": "<p>I don't think that considering both of them is a problem, but somewhere there should be a de-duplication that occurs</p>",
        "id": 216726019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/216726016\">said</a>:</p>\n<blockquote>\n<p>I guess that I can stop here <a href=\"https://github.com/rust-lang/rust/blob/3461325d239ac7804ee6249ffa7d9dccae70c298/compiler/rustc_infer/src/traits/util.rs#L104\">https://github.com/rust-lang/rust/blob/3461325d239ac7804ee6249ffa7d9dccae70c298/compiler/rustc_infer/src/traits/util.rs#L104</a></p>\n</blockquote>\n<p>I meant, not call super if this particular trait defines assoc_name</p>",
        "id": 216726027,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605356468
    },
    {
        "content": "<p>let me look a bit more clsoely at what your dif is</p>",
        "id": 216726032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356484
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/216726027\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/216726016\">said</a>:</p>\n<blockquote>\n<p>I guess that I can stop here <a href=\"https://github.com/rust-lang/rust/blob/3461325d239ac7804ee6249ffa7d9dccae70c298/compiler/rustc_infer/src/traits/util.rs#L104\">https://github.com/rust-lang/rust/blob/3461325d239ac7804ee6249ffa7d9dccae70c298/compiler/rustc_infer/src/traits/util.rs#L104</a></p>\n</blockquote>\n<p>I meant, not call super if this particular trait defines assoc_name</p>\n</blockquote>\n<p>going to check this</p>",
        "id": 216726038,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605356494
    },
    {
        "content": "<p>ok so</p>",
        "id": 216726092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356565
    },
    {
        "content": "<p>one thing is that <code>elaborate_predicates</code>, I believe, removes duplicates</p>",
        "id": 216726093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356577
    },
    {
        "content": "<p>oh wait</p>",
        "id": 216726101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356590
    },
    {
        "content": "<p>there's another thing :)</p>",
        "id": 216726102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356594
    },
    {
        "content": "<p>so yeah <a href=\"https://github.com/rust-lang/rust/blob/3461325d239ac7804ee6249ffa7d9dccae70c298/compiler/rustc_infer/src/traits/util.rs#L93-L111\"><code>elaborate_trait_refs_that_define_assoc_type</code></a> is not quite right</p>",
        "id": 216726111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356631
    },
    {
        "content": "<p>it shouldn't return <code>Elaborator</code> or invoke <code>elaborate_predicates</code></p>",
        "id": 216726152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356646
    },
    {
        "content": "<p>it is an <em>alternative</em> to <code>elaborate_predicates</code></p>",
        "id": 216726156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356655
    },
    {
        "content": "<p>I think it should return a <code>Vec&lt;PolyTraitRef&lt;'tcx&gt;&gt;</code></p>",
        "id": 216726163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356683
    },
    {
        "content": "<p>or maybe a <code>FxHashSet&lt;PolyTraitRef&lt;'tcx&gt;&gt;</code></p>",
        "id": 216726165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356692
    },
    {
        "content": "<p>(the latter has the advantage of removing duplicates)</p>",
        "id": 216726168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356703
    },
    {
        "content": "<p>(which would probably fix your bug)</p>",
        "id": 216726175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356709
    },
    {
        "content": "<p>we <em>could</em> make it return a <code>impl Iterator&lt;Item = PolyTraitRef&lt;'tcx&gt;&gt;</code></p>",
        "id": 216726179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356726
    },
    {
        "content": "<p>but I'm not sure it's worth the trouble</p>",
        "id": 216726181,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356732
    },
    {
        "content": "<p>duplicates how?</p>",
        "id": 216726183,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605356734
    },
    {
        "content": "<p>I meant, isn't <code>Iterator</code> and <code>DoubleEndedIterator</code>?</p>",
        "id": 216726196,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605356743
    },
    {
        "content": "<p>basically it should return <a href=\"https://github.com/rust-lang/rust/blob/3461325d239ac7804ee6249ffa7d9dccae70c298/compiler/rustc_infer/src/traits/util.rs#L99\">the vector <code>predicates</code></a></p>",
        "id": 216726197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356750
    },
    {
        "content": "<p>so the problem is that you have a kind of \"graph\"</p>",
        "id": 216726214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356763
    },
    {
        "content": "<p>where each trait-ref is a node</p>",
        "id": 216726237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356771
    },
    {
        "content": "<p>and there is an edge between two nodes if there is a \"super-predicate\" relationship</p>",
        "id": 216726239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356777
    },
    {
        "content": "<p>so in this case the \"graph\" would be:</p>\n<ul>\n<li>DoubleEndedIterator -&gt; Iterator</li>\n</ul>",
        "id": 216726241,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356787
    },
    {
        "content": "<p>we are basically doing a DFS of sorts on this graph, right?</p>",
        "id": 216726244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356796
    },
    {
        "content": "<p>the duplicates I mean are when you reach the same node via two different paths</p>",
        "id": 216726246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356803
    },
    {
        "content": "<p>in this case, if you started out with an input list like [Iterator, DoubleEndedIterator]</p>",
        "id": 216726248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356815
    },
    {
        "content": "<p>then you would reach Iterator both directly <em>and</em> as the super-trait of <code>DoubleEndedIterator</code></p>",
        "id": 216726255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356831
    },
    {
        "content": "<p>using a <code>FxHashSet</code> instead of a <code>Vec</code> would make that irrelevant</p>",
        "id": 216726257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356843
    },
    {
        "content": "<p>I'm not sure though if I'm explaining the high-level purpose here very well</p>",
        "id": 216726263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356872
    },
    {
        "content": "<p>the idea is that we have a list of traits that you know are true</p>",
        "id": 216726277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356883
    },
    {
        "content": "<p>so e.g. <code>Iterator</code>, <code>DoubleEndedIterator</code>, etc</p>",
        "id": 216726304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356891
    },
    {
        "content": "<p>and we want to elaborate out all the <em>implications</em>, kind of get to a <em>flat list</em> of all the traits</p>",
        "id": 216726308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356902
    },
    {
        "content": "<p>we know that everything which is a <code>DoubleEndedIterator</code> is also a <code>Iterator</code></p>",
        "id": 216726309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356912
    },
    {
        "content": "<p>so that is why we would add <code>Iterator</code> to the final result -- but it turns out it was there already, so it doesn't matter</p>",
        "id": 216726313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356930
    },
    {
        "content": "<p>/me waits</p>",
        "id": 216726316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605356944
    },
    {
        "content": "<p>right</p>",
        "id": 216726385,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605357029
    },
    {
        "content": "<p>the reason that calling <code>elaborate_predicates</code> at the end is wrong is that you've <em>already done the elaboration</em></p>",
        "id": 216726404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357073
    },
    {
        "content": "<p>(i.e., that's what the while loop is doing)</p>",
        "id": 216726414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357082
    },
    {
        "content": "<p>also--</p>",
        "id": 216726430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357098
    },
    {
        "content": "<p>on <a href=\"https://github.com/rust-lang/rust/blob/3461325d239ac7804ee6249ffa7d9dccae70c298/compiler/rustc_infer/src/traits/util.rs#L98\">line 98</a> you upcast from <code>PolyTraitRef</code> to <code>Predicate</code></p>",
        "id": 216726437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357118
    },
    {
        "content": "<p>I wouldn't do that; instead, I would filter the results of <code>super_predicates_that_define_assoc_type</code> and only keep the predicates that are trait-refs</p>",
        "id": 216726496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357141
    },
    {
        "content": "<p>ok, let me see then ...</p>",
        "id": 216726516,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605357186
    },
    {
        "content": "<p>i.e., call <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.Predicate.html#method.to_opt_poly_trait_ref\"><code>to_opt_poly_trait_ref</code></a></p>",
        "id": 216726528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357195
    },
    {
        "content": "<p>this is because, for the purposes of resolving <code>Foo::Item</code>, we only care about trait ref predicates</p>",
        "id": 216726544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357207
    },
    {
        "content": "<p>(but this is kind of a minor point ultimately)</p>",
        "id": 216726555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357232
    },
    {
        "content": "<p>(don't worry about it to start, I just think we can tweak things to make the code a bit tighter/cleaner later on)</p>",
        "id": 216726609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357252
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 216726639,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605357289
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stack</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">trait_refs</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">trait_refs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">trait_refs</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">super_predicates</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">super_predicates_that_define_assoc_type</span><span class=\"p\">((</span><span class=\"n\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">assoc_name</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">predicate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">super_predicates</span><span class=\"p\">.</span><span class=\"n\">predicates</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateAtom</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">skip_binders</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">trait_refs</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216727072,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605357710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I guess you want something more like <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 216727081,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605357719
    },
    {
        "content": "<p>kinda</p>",
        "id": 216727156,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357770
    },
    {
        "content": "<p>first, I think we want a <code>FxHashSet</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stack</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">trait_refs</span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">trait_refs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FxHashSet</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">trait_refs</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">super_predicates</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">super_predicates_that_define_assoc_type</span><span class=\"p\">((</span><span class=\"n\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">assoc_name</span><span class=\"p\">)));</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">predicate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">super_predicates</span><span class=\"p\">.</span><span class=\"n\">predicates</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateAtom</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">skip_binders</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">trait_refs</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216727188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357826
    },
    {
        "content": "<p>so something like that</p>",
        "id": 216727196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357835
    },
    {
        "content": "<p>right</p>",
        "id": 216727251,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605357857
    },
    {
        "content": "<p>(that's not the most efficient formulation, since we still push duplicates onto the stack, we just don't explore their super predicates twice)</p>",
        "id": 216727254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357857
    },
    {
        "content": "<p>second, I think you can replace</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateAtom</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">skip_binders</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with <code>predicate.to_opt_poly_trait_ref()</code></p>",
        "id": 216727275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357883
    },
    {
        "content": "<p>I was seeing that elaborates calls to <code>filter_to_traits</code> which returns a <code>FilterToTrait</code> type</p>",
        "id": 216727276,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605357886
    },
    {
        "content": "<p>the difference is that it doesn't skip the <code>Binder</code></p>",
        "id": 216727286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/216727276\">said</a>:</p>\n<blockquote>\n<p>I was seeing that elaborates calls to <code>filter_to_traits</code> which returns a <code>FilterToTrait</code> type</p>\n</blockquote>\n<p>ohh I see, I think you want to skip all this and resolve that from the function we are creating</p>",
        "id": 216727332,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605357959
    },
    {
        "content": "<p>yes</p>",
        "id": 216727377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357977
    },
    {
        "content": "<p>FilterToTraits it's an iterator that yields up trait references</p>",
        "id": 216727380,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605357981
    },
    {
        "content": "<p>right</p>",
        "id": 216727386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605357985
    },
    {
        "content": "<p>so we want to return a <code>Vec&lt;ty::PolyTraitRef&lt;'tcx&gt;&gt;</code></p>",
        "id": 216727403,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605358011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> or a <code>FxHashSet&lt;ty::PolyTraitRef&lt;'tcx&gt;&gt;</code></p>",
        "id": 216727627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605358263
    },
    {
        "content": "<p>right</p>",
        "id": 216727637,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605358273
    },
    {
        "content": "<p>what is the binder?</p>",
        "id": 216727643,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605358285
    },
    {
        "content": "<p>that wraps <code>TraitRef</code></p>",
        "id": 216727649,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605358297
    },
    {
        "content": "<p>the <code>Binder</code> represents the possibility of a <code>for</code></p>",
        "id": 216727720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605358347
    },
    {
        "content": "<p>e.g., if you have <code>for&lt;'a&gt; u32: Bar&lt;'a&gt;</code></p>",
        "id": 216727724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605358355
    },
    {
        "content": "<p>something like that</p>",
        "id": 216727729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605358359
    },
    {
        "content": "<p>the <code>TraitRef</code> is just the <code>u32: Bar&lt;'a&gt;</code> part</p>",
        "id": 216727736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605358366
    },
    {
        "content": "<p>the <code>Binder</code> is the <code>for&lt;'a&gt;</code> part</p>",
        "id": 216727738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605358371
    },
    {
        "content": "<p>you don't generally want to  <em>skip</em> the binder permanently</p>",
        "id": 216727748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605358382
    },
    {
        "content": "<p>if you do skip it, you have to kind of \"account\" for it</p>",
        "id": 216727753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605358394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> getting 4 errors, before there were 59 :)</p>",
        "id": 216728095,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605358832
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0221]: ambiguous associated type `Item` in bounds of `A`\n   --&gt; library/core/src/iter/adapters/zip.rs:132:48\n    |\n132 |     default fn next_back(&amp;mut self) -&gt; Option&lt;(A::Item, B::Item)&gt;\n    |                                                ^^^^^^^ ambiguous associated type `Item`\n    |\n   ::: library/core/src/iter/traits/iterator.rs:100:5\n    |\n100 |     type Item;\n    |     ----------\n    |     |\n    |     ambiguous `Item` from `Iterator`\n    |     ambiguous `Item` from `Iterator`\n    |\nhelp: use fully qualified syntax to disambiguate\n    |\n132 |     default fn next_back(&amp;mut self) -&gt; Option&lt;(&lt;A as Iterator&gt;::Item, B::Item)&gt;\n    |                                                ^^^^^^^^^^^^^^^^^^^^^\nhelp: use fully qualified syntax to disambiguate\n    |\n132 |     default fn next_back(&amp;mut self) -&gt; Option&lt;(&lt;A as Iterator&gt;::Item, B::Item)&gt;\n    |                                                ^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0221]: ambiguous associated type `Item` in bounds of `B`\n   --&gt; library/core/src/iter/adapters/zip.rs:132:57\n    |\n132 |     default fn next_back(&amp;mut self) -&gt; Option&lt;(A::Item, B::Item)&gt;\n    |                                                         ^^^^^^^ ambiguous associated type `Item`\n    |\n   ::: library/core/src/iter/traits/iterator.rs:100:5\n    |\n100 |     type Item;\n    |     ----------\n    |     |\n    |     ambiguous `Item` from `Iterator`\n    |     ambiguous `Item` from `Iterator`\n    |\nhelp: use fully qualified syntax to disambiguate\n    |\n</code></pre></div>",
        "id": 216728112,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605358862
    },
    {
        "content": "<p>hmmm</p>",
        "id": 216728114,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605358864
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>2:rustc\u001b[1;34mDEBUG\u001b[0m \u001b[2mrustc_infer::traits::util\u001b[0m trait_refs ... {Binder(&lt;A as iter::traits::exact_size::ExactSizeIterator&gt;), Binder(&lt;Self as iter::traits::iterator::Iterator&gt;), Binder(&lt;A as iter::traits::double_ended::DoubleEndedIterator&gt;), Binder(&lt;A as iter::traits::iterator::Iterator&gt;)}\n</code></pre></div>",
        "id": 216728527,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605359542
    },
    {
        "content": "<p>self and A as iterators, I guess that's what conflicts?</p>",
        "id": 216728538,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605359582
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>2:rustc\u001b[1;34mDEBUG\u001b[0m \u001b[2mrustc_infer::traits::util\u001b[0m processing ... trait_ref=Binder(&lt;A as iter::traits::exact_size::ExactSizeIterator&gt;)\n2:rustc\u001b[1;34mDEBUG\u001b[0m \u001b[2mrustc_infer::traits::util\u001b[0m super_predicates ... GenericPredicates { parent: None, predicates: [(TraitPredicate(&lt;Self as iter::traits::iterator::Iterator&gt;), library/core/src/iter/traits/exact_size.rs:68:30: 68:38 (#0))] }\n</code></pre></div>",
        "id": 216728597,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605359696
    },
    {
        "content": "<p>unsure why super predicates of <code>A as ExactSizeIterator</code> gives <code>Self as Iterator</code></p>",
        "id": 216728607,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605359724
    },
    {
        "content": "<p>instead of <code>A as Iterator</code></p>",
        "id": 216728611,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605359736
    },
    {
        "content": "<p>hmm</p>",
        "id": 216728818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605360120
    },
    {
        "content": "<p>oh</p>",
        "id": 216728832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605360123
    },
    {
        "content": "<p>you're forgetting a substitution I think</p>",
        "id": 216728858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605360131
    },
    {
        "content": "<p>have pushed the code</p>",
        "id": 216728862,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605360146
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you need to call <code>subst_supertrait</code>, kind of like what happens on line 161 of <a href=\"http://util.rs\">util.rs</a></p>",
        "id": 216728929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605360292
    },
    {
        "content": "<p>oh <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 216729003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605360456
    },
    {
        "content": "<p>the <code>supertraits_of</code> query returns things \"from the perspective\" of the trait definition</p>",
        "id": 216729048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605360525
    },
    {
        "content": "<p>so e.g. if you have <code>A: Foo</code> and <code>trait Foo: Bar</code>, then <code>superpredicates_of(Foo)</code> would return <code>Self: Bar</code>, and the substitution would replace <code>Self</code> with <code>A</code></p>",
        "id": 216729061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605360558
    },
    {
        "content": "<p>makes sense</p>",
        "id": 216729210,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605360727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm not sure what should I do with that</p>",
        "id": 216729267,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605360806
    },
    {
        "content": "<p>like subst_supertrait returns a new predicate</p>",
        "id": 216729271,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605360821
    },
    {
        "content": "<p>I guess I should get the trait_ref of that predicate?</p>",
        "id": 216729331,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605360857
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">predicate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">super_predicates</span><span class=\"p\">.</span><span class=\"n\">predicates</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">to_opt_poly_trait_ref</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">subst_supertrait</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">binder</span><span class=\"p\">.</span><span class=\"n\">rebind</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">.</span><span class=\"n\">skip_binder</span><span class=\"p\">()));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">to_opt_poly_trait_ref</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216729388,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605360933
    },
    {
        "content": "<p>looks a bit weird :P</p>",
        "id": 216729394,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605360941
    },
    {
        "content": "<p>that's correct I think</p>",
        "id": 216729825,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361416
    },
    {
        "content": "<p>well</p>",
        "id": 216729830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361422
    },
    {
        "content": "<p>ok no</p>",
        "id": 216729833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361425
    },
    {
        "content": "<p>xx</p>",
        "id": 216729853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361442
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">predicate</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">super_predicates</span><span class=\"p\">.</span><span class=\"n\">predicates</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bound_predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">bound_atom</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty</span>::<span class=\"n\">PredicateAtom</span>::<span class=\"n\">Trait</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bound_predicate</span><span class=\"p\">.</span><span class=\"n\">skip_binder</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">subst_supertrait</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bound_predicate</span><span class=\"p\">.</span><span class=\"n\">rebind</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">trait_ref</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">.</span><span class=\"n\">to_opt_poly_trait_ref</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">binder</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216729900,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605361469
    },
    {
        "content": "<p>something is wacky there :)</p>",
        "id": 216729901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361470
    },
    {
        "content": "<p>testing that</p>",
        "id": 216729906,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605361477
    },
    {
        "content": "<p>no</p>",
        "id": 216729930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361508
    },
    {
        "content": "<p>that's using the wrong substitutions</p>",
        "id": 216729932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361514
    },
    {
        "content": "<p>first off, you should rename <code>predicate</code> to <code>super_predicate</code></p>",
        "id": 216729944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361534
    },
    {
        "content": "<p>e.g., <code>for (super_predicate, _) in super_predicates.predicates</code></p>",
        "id": 216729952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361545
    },
    {
        "content": "<p>so the high-level bit of logic here is that we have</p>",
        "id": 216730004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361574
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">trait_refs</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cm\">/* push super predicates from `trait_ref` */</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216730043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361628
    },
    {
        "content": "<p>you want to be doing the substitution using <strong><code>trait_ref</code></strong></p>",
        "id": 216730049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361638
    },
    {
        "content": "<p>the code you have above is taking the substitution from the <em>super predicate</em></p>",
        "id": 216730076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361673
    },
    {
        "content": "<p>that's backwards</p>",
        "id": 216730078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605361675
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so the ICE that you mentioned on <a href=\"https://github.com/rust-lang/rust/blob/f9669d0b409a048b300dc88440c7c0656b75b11b/compiler/rustc_typeck/src/collect.rs#L1050\">this line</a> ...</p>",
        "id": 216730667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605362403
    },
    {
        "content": "<p>remember we talked about how the code you had was not accounting for predicates on \"external traits\"?</p>",
        "id": 216730709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605362419
    },
    {
        "content": "<p>I think you want some logic like:</p>",
        "id": 216730859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605362673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yeah</p>",
        "id": 216730861,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605362679
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"cm\">/* is not a local trait */</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">predicates_of</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"cm\">/* existing code */</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216730875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605362706
    },
    {
        "content": "<p>making French toast right now so I can't explain in more detail ;)</p>",
        "id": 216730885,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605362729
    },
    {
        "content": "<p>this may return \"too many\" predicates  for external traits, but it's ok, because it can't create a cycle</p>",
        "id": 216730887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605362740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/216730875\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"cm\">/* is not a local trait */</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">predicates_of</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"cm\">/* existing code */</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>\n<p>this where?</p>",
        "id": 216730894,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605362758
    },
    {
        "content": "<p>ohh I see what you meant</p>",
        "id": 216730946,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605362822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> it now compiles but the test doesn't pass</p>",
        "id": 216731336,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605363437
    },
    {
        "content": "<p>progress :)</p>",
        "id": 216731339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605363446
    },
    {
        "content": "<p>hehe :)</p>",
        "id": 216731344,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605363451
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// check-pass</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Qux</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Bar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo2</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Qux2</span>: <span class=\"nc\">Foo2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">AsRef</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span>::<span class=\"n\">Bar</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216731348,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605363460
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0391]: cycle detected when computing the supertraits of `Qux`\n --&gt; src/test/ui/associated-type-bounds/super-trait-referencing-self.rs:5:1\n  |\n5 | trait Qux: Foo + AsRef&lt;Self::Bar&gt; {}\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: ...which again requires computing the supertraits of `Qux`, completing the cycle\nnote: cycle used when computing the supertraits of `Qux`\n --&gt; src/test/ui/associated-type-bounds/super-trait-referencing-self.rs:5:1\n  |\n5 | trait Qux: Foo + AsRef&lt;Self::Bar&gt; {}\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0391`.\n</code></pre></div>",
        "id": 216731362,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605363482
    },
    {
        "content": "<p>RUST_BACKTRACE=1?</p>",
        "id": 216731404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605363537
    },
    {
        "content": "<p>somehow we are calling <code>super_predicates</code> I guess :)</p>",
        "id": 216731408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605363544
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0391]: cycle detected when computing the supertraits of `Qux`\n --&gt; src/test/ui/associated-type-bounds/super-trait-referencing-self.rs:5:1\n  |\n5 | trait Qux: Foo + AsRef&lt;Self::Bar&gt; {}\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: ...which again requires computing the supertraits of `Qux`, completing the cycle\nnote: cycle used when collecting item types in top-level module\n --&gt; src/test/ui/associated-type-bounds/super-trait-referencing-self.rs:5:1\n  |\n5 | trait Qux: Foo + AsRef&lt;Self::Bar&gt; {}\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nthread &#39;rustc&#39; panicked at &#39;aborting due to `-Z treat-err-as-bug=1`&#39;, compiler/rustc_errors/src/lib.rs:990:27\nstack backtrace:\n   0: std::panicking::begin_panic\n   1: rustc_errors::HandlerInner::emit_diagnostic\n   2: rustc_errors::diagnostic_builder::DiagnosticBuilder::emit\n   3: rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::predicates_of&gt;::handle_cycle_error\n   4: rustc_data_structures::cold_path\n   5: rustc_query_system::query::plumbing::get_query_impl\n   6: &lt;rustc_infer::traits::util::Elaborator as core::iter::traits::iterator::Iterator&gt;::next\n   7: &lt;rustc_infer::traits::util::FilterToTraits&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next\n   8: &lt;core::iter::adapters::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next\n   9: &lt;dyn rustc_typeck::astconv::AstConv&gt;::associated_path_to_ty\n  10: &lt;dyn rustc_typeck::astconv::AstConv&gt;::ast_ty_to_ty_inner\n  11: &lt;dyn rustc_typeck::astconv::AstConv&gt;::create_substs_for_ast_path\n  12: &lt;dyn rustc_typeck::astconv::AstConv&gt;::create_substs_for_ast_trait_ref\n  13: &lt;dyn rustc_typeck::astconv::AstConv&gt;::instantiate_poly_trait_ref_inner\n  14: &lt;dyn rustc_typeck::astconv::AstConv&gt;::add_bounds\n  15: &lt;dyn rustc_typeck::astconv::AstConv&gt;::compute_bounds\n  16: rustc_typeck::collect::super_predicates_of\n  17: rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::super_predicates_of&gt;::compute\n  18: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n  19: rustc_data_structures::stack::ensure_sufficient_stack\n  20: rustc_query_system::query::plumbing::get_query_impl\n  21: &lt;rustc_typeck::collect::CollectItemTypesVisitor as rustc_hir::intravisit::Visitor&gt;::visit_item\n  22: rustc_middle::hir::map::Map::visit_item_likes_in_module\n  23: rustc_typeck::collect::collect_mod_item_types\n  24: rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::collect_mod_item_types&gt;::compute\n  25: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n  26: rustc_data_structures::stack::ensure_sufficient_stack\n  27: rustc_query_system::query::plumbing::get_query_impl\n  28: rustc_query_system::query::plumbing::ensure_query_impl\n  29: rustc_session::session::Session::track_errors\n  30: rustc_typeck::check_crate\n  31: rustc_interface::passes::analysis\n  32: rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::analysis&gt;::compute\n  33: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n  34: rustc_data_structures::stack::ensure_sufficient_stack\n  35: rustc_query_system::query::plumbing::get_query_impl\n  36: rustc_interface::passes::QueryContext::enter\n  37: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter\n  38: rustc_span::with_source_map\n  39: rustc_interface::interface::create_compiler_and_run\n  40: rustc_span::with_session_globals\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.49.0-nightly (1773f60ea 2020-11-08) running on x86_64-unknown-linux-gnu\n\nnote: compiler flags: -Z treat-err-as-bug\n\nquery stack during panic:\n#0 [super_predicates_of] computing the supertraits of `Qux`\n#1 [collect_mod_item_types] collecting item types in top-level module\n#2 [analysis] running analysis passes on this crate\nend of query stack\n</code></pre></div>",
        "id": 216731474,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605363622
    },
    {
        "content": "<p>everything pushed?</p>",
        "id": 216731482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605363654
    },
    {
        "content": "<p>yes</p>",
        "id": 216731498,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605363693
    },
    {
        "content": "<p>we are calling <code>super_predicates_of</code> as you guessed :)</p>",
        "id": 216731503,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605363707
    },
    {
        "content": "<p>well I expect one call</p>",
        "id": 216731631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605363924
    },
    {
        "content": "<p>the question is why we get to the inner one</p>",
        "id": 216731635,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605363930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> you didn't push everything :)</p>",
        "id": 216731749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605364097
    },
    {
        "content": "<p>I am still getting the ICE</p>",
        "id": 216731753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605364119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> pushed</p>",
        "id": 216731757,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605364133
    },
    {
        "content": "<p>reading the code, I guess we need to see the logs</p>",
        "id": 216731884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605364300
    },
    {
        "content": "<p>yep</p>",
        "id": 216732163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605364591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/216731635\">said</a>:</p>\n<blockquote>\n<p>the question is why we get to the inner one</p>\n</blockquote>\n<p>by the inner one what did you mean?</p>",
        "id": 216732383,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605364834
    },
    {
        "content": "<p>ok, I've been reading the code a bit and I see a few things that look wrong</p>",
        "id": 216732501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605364953
    },
    {
        "content": "<p>I made some edits that i'm testing</p>",
        "id": 216732530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605364997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/216732383\">said</a>:</p>\n<blockquote>\n<p>by the inner one what did you mean?</p>\n</blockquote>\n<p>well -- to have a cycle, you have to have the query Q which then calls (transitively) itself again</p>",
        "id": 216732548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365019
    },
    {
        "content": "<p>by the \"inner one\" I meant that <em>second</em> call</p>",
        "id": 216732550,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365024
    },
    {
        "content": "<p>I'll push my changes, though they don't fix the problem, but they may help me to see what it is..</p>",
        "id": 216732628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365081
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 216732640,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605365100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'm not <em>100%</em> sure but I suspect the problem is this line:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">AstConv</span>::<span class=\"n\">compute_bounds</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">icx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_param_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SizedByDefault</span>::<span class=\"n\">No</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216732919,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365380
    },
    {
        "content": "<p>in <code>super_predicates_that_define_assoc_type</code></p>",
        "id": 216732927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365390
    },
    {
        "content": "<p>that is going to convert from HIR to ty</p>",
        "id": 216732930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365399
    },
    {
        "content": "<p>and it is not filtering by <code>assoc_name</code> at all</p>",
        "id": 216732975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365406
    },
    {
        "content": "<p>if you convert the test to use <code>where Self: Bar</code> etc, it passes</p>",
        "id": 216733032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365495
    },
    {
        "content": "<p>I'll push one more commit, it's a good variant of the test</p>",
        "id": 216733041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ok, pushed; the trick here is that the code has two distinct paths</p>",
        "id": 216733134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365598
    },
    {
        "content": "<p>one of them covers \"where clauses\" like <code>trait Foo where Self: Bar</code></p>",
        "id": 216733141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365602
    },
    {
        "content": "<p>(that one, you have working correctly)</p>",
        "id": 216733144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365606
    },
    {
        "content": "<p>the other covers the bound <code>Bar</code> in <code>trait Foo: Bar</code></p>",
        "id": 216733149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365616
    },
    {
        "content": "<p>that one is not converted</p>",
        "id": 216733151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605365619
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> back</p>",
        "id": 216734040,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605367000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> does what I wrote make sense?</p>",
        "id": 216734781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605368176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/216734781\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> does what I wrote make sense?</p>\n</blockquote>\n<p>yes</p>",
        "id": 216734937,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605368395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I think you can change the signature of</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">add_bounds</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">param_ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ast_bounds</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">hir</span>::<span class=\"n\">GenericBound</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">bounds</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Bounds</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216744592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605380747
    },
    {
        "content": "<p>to be something like <code>ast_bounds: impl IntoIterator&lt;Item = &amp;hir::GenericBond&lt;'_&gt;]</code></p>",
        "id": 216744638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605380769
    },
    {
        "content": "<p>then you could pass the <code>filter_map</code> to it</p>",
        "id": 216744650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605380797
    },
    {
        "content": "<p>i.e. ,and just return <code>Some(bound)</code>, not <code>Some(*bound)</code></p>",
        "id": 216744654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605380809
    },
    {
        "content": "<p>right</p>",
        "id": 216744659,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605380824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> there's also a problem doing exactly that</p>",
        "id": 216745041,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605381544
    },
    {
        "content": "<p>I'd need to pass it down to <code>add_bounds</code> and to <code>is_sized</code></p>",
        "id": 216745049,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605381579
    },
    {
        "content": "<p>would get a <code>use of moved value</code></p>",
        "id": 216745093,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605381615
    },
    {
        "content": "<p>thinking how to resolve this thing ...</p>",
        "id": 216745095,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605381629
    },
    {
        "content": "<p>the other option is to pass a <code>Vec&lt;GenericBound&gt;</code></p>",
        "id": 216745117,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605381690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> do you mean <code>is_unsized</code>?</p>",
        "id": 216745185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605381830
    },
    {
        "content": "<p>sorry, yes</p>",
        "id": 216745228,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605381846
    },
    {
        "content": "<p>yeah, annoying.</p>",
        "id": 216745249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605381923
    },
    {
        "content": "<p>hehe</p>",
        "id": 216745253,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605381937
    },
    {
        "content": "<p>you might be able to clone the iterator, or else yeah just make a vector</p>",
        "id": 216745256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605381948
    },
    {
        "content": "<p>probably a <code>Vec&lt;&amp;hir::GenericBound&gt;</code></p>",
        "id": 216745258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605381958
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 216745296,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605381965
    },
    {
        "content": "<p>question</p>",
        "id": 216745301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605381991
    },
    {
        "content": "<p>well, just as a refactoring note</p>",
        "id": 216745305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605382006
    },
    {
        "content": "<p>it feels like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">compute_bounds</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">param_ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ast_bounds</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">hir</span>::<span class=\"n\">GenericBound</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">sized_by_default</span>: <span class=\"nc\">SizedByDefault</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assoc_name</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Ident</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Bounds</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216745307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605382016
    },
    {
        "content": "<p>might be better as two functions</p>",
        "id": 216745308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605382020
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">compute_bounds</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">param_ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ast_bounds</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">hir</span>::<span class=\"n\">GenericBound</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">sized_by_default</span>: <span class=\"nc\">SizedByDefault</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Bounds</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216745313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605382033
    },
    {
        "content": "<p>(as before)</p>",
        "id": 216745315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605382037
    },
    {
        "content": "<p>and</p>",
        "id": 216745316,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605382038
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">compute_bounds_that_match_assoc_type</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">param_ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ast_bounds</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">hir</span>::<span class=\"n\">GenericBound</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">sized_by_default</span>: <span class=\"nc\">SizedByDefault</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">assoc_name</span>: <span class=\"nc\">Ident</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Bounds</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216745317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605382052
    },
    {
        "content": "<p>where the second one does some filtering and calls the first one</p>",
        "id": 216745321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605382060
    },
    {
        "content": "<p>@*<em>nikomatsakis</em> I'm going to start to go over the tests</p>",
        "id": 217062119,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605646879
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/8e65dc2aa2fcfa523040c72451e9d921e96a72b4/src/test/ui/cycle-projection-based-on-where-clause.rs\">https://github.com/rust-lang/rust/blob/8e65dc2aa2fcfa523040c72451e9d921e96a72b4/src/test/ui/cycle-projection-based-on-where-clause.rs</a></p>",
        "id": 217062126,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605646881
    },
    {
        "content": "<p>now should compile so I guess I'd remove the test</p>",
        "id": 217062138,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605646894
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/8e65dc2aa2fcfa523040c72451e9d921e96a72b4/src/test/ui/cycle-trait/cycle-trait-supertrait-indirect.rs\">https://github.com/rust-lang/rust/blob/8e65dc2aa2fcfa523040c72451e9d921e96a72b4/src/test/ui/cycle-trait/cycle-trait-supertrait-indirect.rs</a></p>",
        "id": 217062500,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605647075
    },
    {
        "content": "<p>that one probably needs a bless</p>",
        "id": 217062528,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605647093
    },
    {
        "content": "<p>same for ...</p>",
        "id": 217062535,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605647095
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/8e65dc2aa2fcfa523040c72451e9d921e96a72b4/src/test/ui/cycle-trait/cycle-trait-supertrait-direct.rs\">https://github.com/rust-lang/rust/blob/8e65dc2aa2fcfa523040c72451e9d921e96a72b4/src/test/ui/cycle-trait/cycle-trait-supertrait-direct.rs</a></p>",
        "id": 217062568,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605647115
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(unboxed_closures)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">F</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR E0059</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217062921,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605647295
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0059]: cannot use call notation; the first type parameter for the function trait is neither a tuple nor unit\n --&gt; src/test/ui/error-codes/E0059.rs:3:41\n  |\n3 | fn foo&lt;F: Fn&lt;i32&gt;&gt;(f: F) -&gt; F::Output { f(3) } //~ ERROR E0059\n  |                                         ^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0059`.\n[santiago@galago rust1 (trait-inheritance-self)]$ rustc +rust1-stage1 src/test/ui/error-codes/E0059.rs\nerror[E0220]: associated type `Output` not found for `F`\n --&gt; src/test/ui/error-codes/E0059.rs:3:32\n  |\n3 | fn foo&lt;F: Fn&lt;i32&gt;&gt;(f: F) -&gt; F::Output { f(3) } //~ ERROR E0059\n  |                                ^^^^^^ associated type `Output` not found\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0220`.\n</code></pre></div>",
        "id": 217062940,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605647304
    },
    {
        "content": "<p>new code can't find <code>F::Output</code> hmm</p>",
        "id": 217062980,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605647333
    },
    {
        "content": "<p>I guess everything is correct but that test</p>",
        "id": 217063540,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605647591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/217062921\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(unboxed_closures)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">F</span>: <span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">F</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">F</span>::<span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR E0059</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this one <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 217063562,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605647601
    },
    {
        "content": "<p>unsure why it can't find <code>F::Output</code></p>",
        "id": 217063585,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605647615
    },
    {
        "content": "<p>well, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, one thing that jumps to mind is that it requires \"two jumps\"</p>",
        "id": 217065427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648462
    },
    {
        "content": "<p>we have <code>Fn</code>, <code>FnMut</code>, and finally <code>FnOnce</code></p>",
        "id": 217065438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648469
    },
    {
        "content": "<p>could it be that there is some bug where it's not expanding <em>enough</em>?</p>",
        "id": 217065458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648476
    },
    {
        "content": "<p>seems like a good test where you dump the output very easily, at least</p>",
        "id": 217065501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605648485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Assoc.20items.20on.20.60Self.60.20cycle.20errors.20.2374130/near/217065427\">said</a>:</p>\n<blockquote>\n<p>well, <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span>, one thing that jumps to mind is that it requires \"two jumps\"</p>\n</blockquote>\n<p>yeah lol if that's the issue but yeah :)</p>",
        "id": 217065806,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605648648
    },
    {
        "content": "<p>going to investigate tomorrow</p>",
        "id": 217065823,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605648658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> meanwhile can you check if this is correct <a href=\"https://github.com/spastorino/rust/commit/9af840c0e59323e07aae0bdf1d842092729c8891\">https://github.com/spastorino/rust/commit/9af840c0e59323e07aae0bdf1d842092729c8891</a> ?</p>",
        "id": 217066066,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605648774
    },
    {
        "content": "<p>besides from src/test/ui/error-codes/E0059.stderr</p>",
        "id": 217066177,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605648828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so the loop I had in mind for <code>super_traits</code> would be something like</p>",
        "id": 217282544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605798834
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FxHashSet</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">trait_did</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">set</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">trait_did</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">continue</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">supertraits_of</span><span class=\"p\">(</span><span class=\"n\">trait_did</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217282696,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605798883
    },
    {
        "content": "<p>where <code>fn supertraits_of</code> either looks at HIR (if local) or uses the <code>super_predicates_of</code> query (if not local)</p>",
        "id": 217282740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605798898
    },
    {
        "content": "<p>to generate a <code>impl Iterator&lt;Item = DefId&gt;</code> or something</p>",
        "id": 217282762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605798906
    },
    {
        "content": "<p>I'm not sure I understand exactly</p>",
        "id": 217283640,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605799265
    },
    {
        "content": "<p>you meant to use that loop idea in the else part of <code>super_traits_of2</code>?</p>",
        "id": 217283729,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605799300
    },
    {
        "content": "<p>are you talking about a different part of the code?</p>",
        "id": 217283745,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605799308
    },
    {
        "content": "<p>or are you talking about using this loop as the top code of <code>super_traits_of2</code> and differentiate if the def_id is local or not inside the loop?</p>",
        "id": 217283894,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605799366
    },
    {
        "content": "<p>I'm not 100% sure what's the problem the code is having and not 100% sure what's your idea :)</p>",
        "id": 217284007,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605799419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 217285708,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605800078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I guess the loop could just be <code>super_traits_of</code>, i'm not sure you need a <code>super_traits_of2</code></p>",
        "id": 217286365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605800343
    },
    {
        "content": "<p>the structure I suggested uses a loop instead of recursing</p>",
        "id": 217286378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605800351
    },
    {
        "content": "<p>the <em>bug</em> you're seeing is that when you invoke <code>super_traits_of</code> on the <code>Fn</code> trait <em>and</em> you're in an external crate,</p>",
        "id": 217286429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605800370
    },
    {
        "content": "<p>the current code just pushes the results of <code>super_predicates_of</code>, which is just <code>FnMut</code></p>",
        "id": 217286453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605800378
    },
    {
        "content": "<p>it never recurses to see that <code>FnMut</code> itself has super-predicates</p>",
        "id": 217286475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605800387
    },
    {
        "content": "<p>right <code>super_predicates_of</code> doesn't return all the ancestors, just the parent one</p>",
        "id": 217286603,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605800427
    },
    {
        "content": "<p>ok</p>",
        "id": 217286610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605800429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> opened <a href=\"https://github.com/rust-lang/rust/issues/79209\">#79209</a></p>",
        "id": 217306646,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605808524
    },
    {
        "content": "<p>this still needs some polishing I think but seems to be working</p>",
        "id": 217306672,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605808539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> cool, gonna grab a bit of lunch but we can chat in a bit</p>",
        "id": 217306872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605808612
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> back</p>",
        "id": 217309145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605809678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 217309156,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605809690
    },
    {
        "content": "<p>I'm looking over the PR</p>",
        "id": 217309197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605809712
    },
    {
        "content": "<p>one thing is that I had some ideas for test cases</p>",
        "id": 217309203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605809717
    },
    {
        "content": "<p>also it looks like bors is unhappy</p>",
        "id": 217309219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605809729
    },
    {
        "content": "<p>and we're going to want some comments</p>",
        "id": 217309244,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605809747
    },
    {
        "content": "<p>yes</p>",
        "id": 217309283,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605809763
    },
    {
        "content": "<p>what is clearly missing are comments, turning <code>super_traits_of</code> to a query if it's possible</p>",
        "id": 217309326,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605809782
    },
    {
        "content": "<p>and probably a bunch of other things</p>",
        "id": 217309823,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605810025
    },
    {
        "content": "<p>I'm debating about code factoring</p>",
        "id": 217309856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605810045
    },
    {
        "content": "<p>in particular I originally thought that <code>elaborate_trait_refs_that_define_assoc_type</code> ought to live in <code>rustc_typeck</code></p>",
        "id": 217309909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605810073
    },
    {
        "content": "<p>because it's kind of specialized to that particular codepath</p>",
        "id": 217309928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605810086
    },
    {
        "content": "<p>it's annoying that <code>transitive_bounds</code> is still called</p>",
        "id": 217309964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605810108
    },
    {
        "content": "<p>yeah, I need to review everything, this PR is just the \"just works\" code</p>",
        "id": 217310068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605810144
    },
    {
        "content": "<p>and according to bors it doesn't even \"just works\"</p>",
        "id": 217310091,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605810157
    },
    {
        "content": "<p>which is weird because locally not only compiles everything fine but also all the tests pass</p>",
        "id": 217310109,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605810172
    },
    {
        "content": "<p>gonna try a clean and re-compile everything again just in case, I guess locally I may be reusing some pre built artifacts on some crate that is the one that is failing on ci</p>",
        "id": 217310298,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605810250
    },
    {
        "content": "<p>ok, i'm doing a first pass review</p>",
        "id": 217310513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605810356
    },
    {
        "content": "<p>and making a few minor suggestions</p>",
        "id": 217310524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605810359
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 217311412,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605810789
    },
    {
        "content": "<p>getting ...</p>",
        "id": 217319212,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605814422
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code> error[E0220]: associated type `Visitor` not found for `M`\n   --&gt; /cargo/registry/src/github.com-1ecc6299db9ec823/tracing-subscriber-0.2.13/src/fmt/format/mod.rs:527:8\n    |\n527 |     M::Visitor: VisitFmt + VisitOutput&lt;fmt::Result&gt;,\n    |        ^^^^^^^ associated type `Visitor` not found\n\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 217319219,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605814425
    },
    {
        "content": "<p>in the CI</p>",
        "id": 217319223,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605814427
    },
    {
        "content": "<p>but <code>tracing-subscriber</code> compiles correctly locally</p>",
        "id": 217319245,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605814441
    },
    {
        "content": "<p>investigating ...</p>",
        "id": 217319293,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605814448
    },
    {
        "content": "<p>ahh probably the CI is using some feature flag or something particular that I'm not</p>",
        "id": 217319633,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605814596
    },
    {
        "content": "<p>reproduced the issue</p>",
        "id": 217321518,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605815484
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Item</span>: <span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>: <span class=\"nc\">Foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">Self</span>::<span class=\"n\">Item</span>: <span class=\"nb\">Send</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[allow(dead_code)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">M</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_m</span>: <span class=\"nc\">M</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">M</span>: <span class=\"nc\">Bar</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">M</span>::<span class=\"n\">Item</span>: <span class=\"nb\">Send</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217323691,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605816508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> have reduced the problem to <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 217323728,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605816529
    },
    {
        "content": "<p>this compiles on nightly</p>",
        "id": 217323777,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605816550
    },
    {
        "content": "<p>and gives ...</p>",
        "id": 217323781,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605816552
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust1 (trait-inheritance-self)]$ rustc +rust1-stage1 test.rs\nerror[E0220]: associated type `Item` not found for `M`\n  --&gt; test.rs:16:8\n   |\n16 |     M::Item: Send,\n   |        ^^^^ associated type `Item` not found\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0220`.\n</code></pre></div>",
        "id": 217323803,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605816563
    },
    {
        "content": "<p>in my branch</p>",
        "id": 217323810,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605816565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so ... <code>super_traits_of</code> is not considering where clauses information</p>",
        "id": 217330493,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605820132
    },
    {
        "content": "<p>I guess I'm a bit confused about where certain things are located</p>",
        "id": 217330577,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605820190
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> do you need some tips :)</p>",
        "id": 217331444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605820626
    },
    {
        "content": "<p>let me just send you what I'm trying out</p>",
        "id": 217331475,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605820646
    },
    {
        "content": "<p>in just a second ...</p>",
        "id": 217331495,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605820657
    },
    {
        "content": "<p>ok</p>",
        "id": 217331978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605820905
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_typeck/src/collect.rs b/compiler/rustc_typeck/src/collect.rs</span>\n<span class=\"gh\">index 8b457c7ceec..e5903b84130 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_typeck/src/collect.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_typeck/src/collect.rs</span>\n<span class=\"gu\">@@ -1121,6 +1121,7 @@ pub fn super_traits_of(tcx: TyCtxt&lt;'_&gt;, trait_def_id: DefId) -&gt; impl Iterator&lt;It</span>\n     let mut set = FxHashSet::default();\n     let mut stack = vec![trait_def_id];\n     while let Some(trait_did) = stack.pop() {\n<span class=\"gi\">+        debug!(\"super_traits_of trait_did={:?}\", trait_did);</span>\n         if !set.insert(trait_did) {\n             continue;\n         }\n<span class=\"gu\">@@ -1133,18 +1134,42 @@ pub fn super_traits_of(tcx: TyCtxt&lt;'_&gt;, trait_def_id: DefId) -&gt; impl Iterator&lt;It</span>\n                 _ =&gt; bug!(\"super_trait_of {} is not an item\", trait_hir_id),\n             };\n\n<span class=\"gd\">-            let supertraits = match item.kind {</span>\n<span class=\"gd\">-                hir::ItemKind::Trait(.., ref supertraits, _) =&gt; supertraits,</span>\n<span class=\"gd\">-                hir::ItemKind::TraitAlias(_, ref supertraits) =&gt; supertraits,</span>\n<span class=\"gd\">-                _ =&gt; span_bug!(item.span, \"super_trait_of invoked on non-trait\"),</span>\n<span class=\"gi\">+            let (generics, supertraits) = match item.kind {</span>\n<span class=\"gi\">+                hir::ItemKind::Trait(.., ref generics, ref supertraits, _) =&gt; {</span>\n<span class=\"gi\">+                    (generics, supertraits)</span>\n<span class=\"gi\">+                }</span>\n<span class=\"gi\">+                hir::ItemKind::TraitAlias(ref generics, ref supertraits) =&gt; (generics, supertraits),</span>\n<span class=\"gi\">+                _ =&gt; span_bug!(item.span, \"super_predicates invoked on non-trait\"),</span>\n             };\n\n<span class=\"gi\">+            debug!(\"super_traits_of supertraits -&gt; {:?}\", supertraits);</span>\n<span class=\"gi\">+</span>\n             for supertrait in supertraits.iter() {\n                 let trait_ref = supertrait.trait_ref();\n                 if let Some(trait_did) = trait_ref.and_then(|trait_ref| trait_ref.trait_def_id()) {\n                     stack.push(trait_did);\n                 }\n             }\n<span class=\"gi\">+</span>\n<span class=\"gi\">+            let icx = ItemCtxt::new(tcx, trait_did);</span>\n<span class=\"gi\">+            // Convert any explicit superbounds in the where-clause,</span>\n<span class=\"gi\">+            // e.g., `trait Foo where Self: Bar`.</span>\n<span class=\"gi\">+            // In the case of trait aliases, however, we include all bounds in the where-clause,</span>\n<span class=\"gi\">+            // so e.g., `trait Foo = where u32: PartialEq&lt;Self&gt;` would include `u32: PartialEq&lt;Self&gt;`</span>\n<span class=\"gi\">+            // as one of its \"superpredicates\".</span>\n<span class=\"gi\">+            let is_trait_alias = tcx.is_trait_alias(trait_did);</span>\n<span class=\"gi\">+            let self_param_ty = tcx.types.self_param;</span>\n<span class=\"gi\">+            for (predicate, _) in icx.type_parameter_bounds_in_generics(</span>\n<span class=\"gi\">+                generics,</span>\n<span class=\"gi\">+                item.hir_id,</span>\n<span class=\"gi\">+                self_param_ty,</span>\n<span class=\"gi\">+                OnlySelfBounds(!is_trait_alias),</span>\n<span class=\"gi\">+                None,</span>\n<span class=\"gi\">+            ) {</span>\n<span class=\"gi\">+                if let ty::PredicateAtom::Trait(data, _) = predicate.skip_binders() {</span>\n<span class=\"gi\">+                    stack.push(data.def_id());</span>\n<span class=\"gi\">+                }</span>\n<span class=\"gi\">+            }</span>\n         } else {\n             let generic_predicates = tcx.super_predicates_of(trait_did);\n             for (predicate, _) in generic_predicates.predicates {\n<span class=\"gu\">@@ -1155,6 +1180,7 @@ pub fn super_traits_of(tcx: TyCtxt&lt;'_&gt;, trait_def_id: DefId) -&gt; impl Iterator&lt;It</span>\n         }\n     }\n\n<span class=\"gi\">+    debug!(\"super_traits_of -&gt; {:?}\", set);</span>\n     set.into_iter()\n }\n</code></pre></div>",
        "id": 217332195,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605820996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 217332206,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605821001
    },
    {
        "content": "<p>compiling and gonna test in a bit</p>",
        "id": 217332231,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605821011
    },
    {
        "content": "<p>unsure if I can get def_ids of things in where clauses in a different way or I need to go through predicates</p>",
        "id": 217332322,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605821043
    },
    {
        "content": "<p>unsure if going through predicates is expensive</p>",
        "id": 217332361,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605821055
    },
    {
        "content": "<p>ok, doing this the code now works</p>",
        "id": 217332634,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605821201
    },
    {
        "content": "<p>ok</p>",
        "id": 217333557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605821642
    },
    {
        "content": "<p>I have to check the other function but that looks \"roughly like\" the right thing</p>",
        "id": 217333606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605821653
    },
    {
        "content": "<p>have pushed</p>",
        "id": 217334006,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605821864
    },
    {
        "content": "<p>let's see if fixes CI issue, it should</p>",
        "id": 217334073,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605821887
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/79209/commits/b69bd6117da2eff614b495a55ae19d75dec685b9\">https://github.com/rust-lang/rust/pull/79209/commits/b69bd6117da2eff614b495a55ae19d75dec685b9</a></p>",
        "id": 217334088,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1605821899
    }
]