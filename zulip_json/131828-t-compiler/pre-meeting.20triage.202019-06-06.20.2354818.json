[
    {
        "content": "<p>I will be doing pre-triage in this channel</p>",
        "id": 167470290,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559817802
    },
    {
        "content": "<p>first up: <a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AT-compiler+-label%3AP-high++-label%3AP-medium+-label%3AP-low+label%3AI-nominated\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AT-compiler+-label%3AP-high++-label%3AP-medium+-label%3AP-low+label%3AI-nominated\">unprioritized nominated T-compiler issues</a></p>",
        "id": 167471394,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559819014
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AT-compiler+-label%3AP-high+-label%3AP-medium+-label%3AP-low+label%3AI-nominated+sort%3Acreated-asc\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AT-compiler+-label%3AP-high+-label%3AP-medium+-label%3AP-low+label%3AI-nominated+sort%3Acreated-asc\">oldest first</a></p>",
        "id": 167471447,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559819054
    },
    {
        "content": "<p>first up: \"ICE on generic impl trait convergence\" <a href=\"https://github.com/rust-lang/rust/issues/58344\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58344\">#58344</a></p>",
        "id": 167471484,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559819115
    },
    {
        "content": "<p>this has been nominated, but there is no comment directly stating <em>why</em>. I assume that the nomination is just trying to alert us to the comment that provided a more narrow test case for the second of the two ICE's that were being signalled before</p>",
        "id": 167471648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559819319
    },
    {
        "content": "<p>but overall I would categorize this as Yet Another Impl Trait Bug</p>",
        "id": 167471650,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559819329
    },
    {
        "content": "<p>and it doesn't strike me as something to treat with higher priority than any of the 21 <a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AA-impl-trait+label%3AI-ICE\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+label%3AA-impl-trait+label%3AI-ICE\">impl trait ICEs</a></p>",
        "id": 167471846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559819527
    },
    {
        "content": "<p>triage: P-medium. (But maybe we should have a WG-impl-trait to provide a structured effort for working through the bugs with impl trait?)</p>",
        "id": 167471935,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559819639
    },
    {
        "content": "<p>next: \"ICE when trying to match on non-PartialEq slice.\" <a href=\"https://github.com/rust-lang/rust/issues/61188\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61188\">#61188</a></p>",
        "id": 167472019,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559819700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> states that this arises during MIR construction. Do we apply A-MIR label to such cases? I'll put it on, seems better than nothing.</p>",
        "id": 167472140,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559819783
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban KÃ¼ber</span> linked the bug to <a href=\"https://github.com/rust-lang/rust/issues/53708\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53708\">#53708</a>, which has changed its behavior since it was filed</p>",
        "id": 167472482,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559820162
    },
    {
        "content": "<p>that is \"ICE: const reference to ADT in match pattern\" <a href=\"https://github.com/rust-lang/rust/issues/53708\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53708\">#53708</a></p>",
        "id": 167472487,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559820177
    },
    {
        "content": "<p>okay I investigated more.</p>",
        "id": 167472967,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559820696
    },
    {
        "content": "<p>Okay so lets triage both of these bugs</p>",
        "id": 167473028,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559820723
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/53708\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53708\">#53708</a> strikes me as P-medium</p>",
        "id": 167473047,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559820737
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/61188\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61188\">#61188</a> seems like something that might be interesting to look into, but I don't know if I'd call resolving it <em>high</em> priority...</p>",
        "id": 167473097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559820822
    },
    {
        "content": "<p>I would like to know why we don't catch the error here earlier</p>",
        "id": 167473305,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559820987
    },
    {
        "content": "<p>so I'm going to triage this as P-high for now.</p>",
        "id": 167473317,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559821015
    },
    {
        "content": "<p>next: \"'rustc' panicked at 'internal error: entered unreachable code', src/libsyntax/ast.rs:668:6 while bootstrapping\" <a href=\"https://github.com/rust-lang/rust/issues/61200\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61200\">#61200</a></p>",
        "id": 167473552,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559821285
    },
    {
        "content": "<p>the reporter says they retried their recipe with a clean build and did not reproduce. I'm no sure whether they tried their whole recipe, or just the last step</p>",
        "id": 167473642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559821371
    },
    {
        "content": "<p>I'm going to try to check that</p>",
        "id": 167473648,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559821383
    },
    {
        "content": "<p>but I'm not sure there's anything here for us to discuss. The bug reporter themself said that they could not reproduce via their own recipe.</p>",
        "id": 167474670,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559822405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> are you nominating <a href=\"https://github.com/rust-lang/rust/issues/61200\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61200\">#61200</a> just in the hopes that someone on the T-compiler may have some insight into what the problem might be?</p>",
        "id": 167474712,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559822442
    },
    {
        "content": "<p>in any case it seems like it might fall into a similar bucket as <a href=\"https://github.com/rust-lang/rust/issues/60228\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60228\">#60228</a></p>",
        "id": 167475005,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559822708
    },
    {
        "content": "<p>Can you paste the full link? Cannot seem to click it cause zulip has ui bugs</p>",
        "id": 167475019,
        "sender_full_name": "centril",
        "timestamp": 1559822720
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/61200\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61200\">#61200</a>: <a href=\"https://github.com/rust-lang/rust/issues/61200\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61200\">https://github.com/rust-lang/rust/issues/61200</a></p>",
        "id": 167475034,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559822737
    },
    {
        "content": "<p>Yes so the release team nominates all ices</p>",
        "id": 167475137,
        "sender_full_name": "centril",
        "timestamp": 1559822806
    },
    {
        "content": "<p>yeah okay</p>",
        "id": 167475172,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559822839
    },
    {
        "content": "<p>Except for cases we know are buggy incomplete features (const generics)</p>",
        "id": 167475206,
        "sender_full_name": "centril",
        "timestamp": 1559822871
    },
    {
        "content": "<p>I'm going to prioritize as P-medium and assign to self, with intent to close if I cannot reproduce over next week or so</p>",
        "id": 167475308,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559822923
    },
    {
        "content": "<p>Sgtm</p>",
        "id": 167475335,
        "sender_full_name": "centril",
        "timestamp": 1559822943
    },
    {
        "content": "<p>by the way, do you know off hand when rustbuild makes use of incremental compilation? There's a setting in the config.toml that says it is defaulted to false, and it controls \"Whether to always use incremental compilation when building rustc\"</p>",
        "id": 167475463,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559823020
    },
    {
        "content": "<p>but that leaves me wondering when we <em>do</em> use it. I would have thought we otherwise get the current defaults, which, if I understand correctly, are debug ==&gt; incremental build, release ==&gt; non-incremental</p>",
        "id": 167475505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559823068
    },
    {
        "content": "<p>However, there has been evidence that this is not the correct interpretation to apply to rustbuild</p>",
        "id": 167475528,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559823097
    },
    {
        "content": "<p>No I don't sorry</p>",
        "id": 167475583,
        "sender_full_name": "centril",
        "timestamp": 1559823124
    },
    {
        "content": "<p>You have to opt-in to incremental for rustbuild. Not sure about debug builds, but you have to opt-in to those too</p>",
        "id": 167475612,
        "sender_full_name": "Zoxc",
        "timestamp": 1559823154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> so you don't see anything in the config.toml at <a href=\"https://github.com/rust-lang/rust/issues/61200\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61200\">#61200</a> that would imply incremental would be turned on, right?</p>",
        "id": 167475780,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559823320
    },
    {
        "content": "<p>I suppose I could be conflating two separate things, as well</p>",
        "id": 167475847,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559823365
    },
    {
        "content": "<p>e.g. I've been thinking of some bugs like <a href=\"https://github.com/rust-lang/rust/issues/60228\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60228\">#60228</a> as being incremental compilation related, but they may just be \"we mishandle scenarios with old build artifacts lying around\" ...</p>",
        "id": 167475875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559823402
    },
    {
        "content": "<p>rustbuild definitely has bugs =P</p>",
        "id": 167476026,
        "sender_full_name": "Zoxc",
        "timestamp": 1559823527
    },
    {
        "content": "<p>I have a branch with another build system I should finish =P</p>",
        "id": 167476055,
        "sender_full_name": "Zoxc",
        "timestamp": 1559823567
    },
    {
        "content": "<p>uh maybe do an RFC first ... ?</p>",
        "id": 167476089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559823601
    },
    {
        "content": "<p>at least, I can imagine push back against changing the bootstrap's build systems <em>again</em></p>",
        "id": 167476140,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559823612
    },
    {
        "content": "<p>without some more formal design/requirements work done up front</p>",
        "id": 167476146,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559823624
    },
    {
        "content": "<p>I'm happy with just correct builds without manual cleaning =P</p>",
        "id": 167476196,
        "sender_full_name": "Zoxc",
        "timestamp": 1559823672
    },
    {
        "content": "<p>I wanted to make a PoC which statically links rustc before any RFC</p>",
        "id": 167476758,
        "sender_full_name": "Zoxc",
        "timestamp": 1559824201
    },
    {
        "content": "<p>okay, back at keyboard</p>",
        "id": 167480478,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559827131
    },
    {
        "content": "<p>next: \"<code>â¦</code> in comment cause unexpected rustc panic\" <a href=\"https://github.com/rust-lang/rust/issues/61226\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61226\">#61226</a></p>",
        "id": 167480530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559827180
    },
    {
        "content": "<p>there's been some investigation, reflected in the comments</p>",
        "id": 167480604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559827222
    },
    {
        "content": "<p>I'd say this is P-medium. The ICE itself spits out the text, including the character causing the ICE, so it seems easy enough for a user to work around.</p>",
        "id": 167480676,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559827294
    },
    {
        "content": "<p>next: \"Creating a recursive type with infinite size leads to internal compiler error\" <a href=\"https://github.com/rust-lang/rust/issues/61323\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61323\">#61323</a></p>",
        "id": 167480930,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559827447
    },
    {
        "content": "<p>looking at this (and <a href=\"https://github.com/rust-lang/rust/issues/57373\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57373\">#57373</a>, which seems a likely duplicate), I am inclined to classify as P-high.</p>",
        "id": 167481041,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559827557
    },
    {
        "content": "<p>the only reason I would lower to P-medium would be that, AFAICT, it is only signalled by code that would cause a compilation error anyway. But the diagnostic we are issuing here seems especially bad.</p>",
        "id": 167481143,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559827615
    },
    {
        "content": "<p>(a separate question is whether the fact that it is apparently only triggered by certain incremental compilation should be a potential justification for downgrading priority. But I personally don't subscribe to that notion; if we can reproduce it, then we should try our best to fix it, because incremental compilation bugs are really frustrating to deal with as a user.)</p>",
        "id": 167481288,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559827713
    },
    {
        "content": "<p>next: \"ICE when combining unsized locals and async\" <a href=\"https://github.com/rust-lang/rust/issues/61335\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61335\">#61335</a></p>",
        "id": 167481373,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559827794
    },
    {
        "content": "<p>this depends on an unstable feature. Marking P-medium.</p>",
        "id": 167481435,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559827817
    },
    {
        "content": "<p>next: \"error: internal compiler error: inference variables in nalgebra::base::matrix::Matrix&lt;f32, nalgebra::base::dimension::U3, nalgebra::base::dimension::U1, nalgebra::base::array_storage::ArrayStorage&lt;_, _, _&gt;&gt;\" <a href=\"https://github.com/rust-lang/rust/issues/61402\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61402\">#61402</a></p>",
        "id": 167481488,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559827880
    },
    {
        "content": "<p>I tried to reproduce locally by trying to transcribe a pidgen Vector3 from nalgebra, but I couldn't recreate the ICE</p>",
        "id": 167482451,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559828625
    },
    {
        "content": "<p>don't have more time to spend on it now (probably spent too much time already); triaging as P-high and assigning to self for further investigation.</p>",
        "id": 167482513,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559828651
    },
    {
        "content": "<p>next; \"Use const generics for array impls\" <a href=\"https://github.com/rust-lang/rust/issues/61415\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61415\">#61415</a></p>",
        "id": 167482586,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559828721
    },
    {
        "content": "<p>I think this was nominated for discussion at the T-lang and/or T-libs level, not for T-compiler.</p>",
        "id": 167482678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559828778
    },
    {
        "content": "<p>I'm not even sure it should be tagged T-compiler (and I left a comment saying so), so I'll leave it out of our triage.</p>",
        "id": 167482929,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559828971
    },
    {
        "content": "<p>next: \"<code>rls</code> no longer builds after <a href=\"https://github.com/rust-lang/rust/issues/61276\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61276\">rust-lang/rust#61276</a>\" <a href=\"https://github.com/rust-lang/rust/issues/61461\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61461\">#61461</a></p>",
        "id": 167482962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559828996
    },
    {
        "content": "<p>triage: P-medium</p>",
        "id": 167483101,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829087
    },
    {
        "content": "<p>next: \"ICE: index out of bounds\" <a href=\"https://github.com/rust-lang/rust/issues/61466\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61466\">#61466</a></p>",
        "id": 167483105,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829091
    },
    {
        "content": "<p>this is hypothesized to be an incremental compilation bug.</p>",
        "id": 167483216,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829182
    },
    {
        "content": "<p>(I think this is all leading to a crisis where we need to figure out some way to expose these incr-comp bugs in a reproducible fashion. Maybe some kind of fuzzing strategy could be employed here?)</p>",
        "id": 167483242,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829213
    },
    {
        "content": "<p>maybe I should propose that latter idea as a streering meeting topic idea</p>",
        "id": 167483330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829249
    },
    {
        "content": "<p>next: \"1.30 -&gt; 1.31 dylib late-binding regression with less recent Linux distro toolchains.\" <a href=\"https://github.com/rust-lang/rust/issues/61539\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61539\">#61539</a></p>",
        "id": 167483361,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829272
    },
    {
        "content": "<p>hi</p>",
        "id": 167483371,
        "sender_full_name": "eddyb",
        "timestamp": 1559829283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  is this just on NixOS ?</p>",
        "id": 167483389,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829295
    },
    {
        "content": "<p>I still haven't bisected the <code>ld</code> patch that (presumably) fixes this</p>",
        "id": 167483390,
        "sender_full_name": "eddyb",
        "timestamp": 1559829296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> no, that's just what I can use multiple versions of (since I can get the packages from those versions and run them on my newer system)</p>",
        "id": 167483421,
        "sender_full_name": "eddyb",
        "timestamp": 1559829319
    },
    {
        "content": "<p>any distro from before ~mid-2018 is pretty much guaranteed to hit this bug AFAIK</p>",
        "id": 167483442,
        "sender_full_name": "eddyb",
        "timestamp": 1559829345
    },
    {
        "content": "<p>interesting</p>",
        "id": 167483456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829353
    },
    {
        "content": "<p>I just don't know what change fixed it</p>",
        "id": 167483461,
        "sender_full_name": "eddyb",
        "timestamp": 1559829356
    },
    {
        "content": "<p>oh jeez, since it is spawned off of <a href=\"https://github.com/rust-lang/rust/issues/60593\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60593\">#60593</a>, I guess this is the sort of thing that can secretly infect any procedural macro?</p>",
        "id": 167483554,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829416
    },
    {
        "content": "<p>tbh even if NixOS makes it easy to test patched versions of packages and I have a build server, it's still annoying to bisect, maybe I should hook it up to <code>git bisect</code> somehow</p>",
        "id": 167483567,
        "sender_full_name": "eddyb",
        "timestamp": 1559829429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> only if you use the unstable <code>proc_macro::quote!</code> first :P</p>",
        "id": 167483576,
        "sender_full_name": "eddyb",
        "timestamp": 1559829444
    },
    {
        "content": "<p>I haven't bothered  to repro</p>",
        "id": 167483578,
        "sender_full_name": "eddyb",
        "timestamp": 1559829448
    },
    {
        "content": "<p>hmm</p>",
        "id": 167483583,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829458
    },
    {
        "content": "<p>... so, then, what priority should we assign this? I can leave it nominated if you want to discuss with group at large, regardless of priority</p>",
        "id": 167483649,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829485
    },
    {
        "content": "<p>the binary needs to call into <code>proc_macro</code> <em>then</em> load a proc macro dylib</p>",
        "id": 167483652,
        "sender_full_name": "eddyb",
        "timestamp": 1559829486
    },
    {
        "content": "<p>that binary is rustc in our case</p>",
        "id": 167483659,
        "sender_full_name": "eddyb",
        "timestamp": 1559829491
    },
    {
        "content": "<p>but do you have any idea of potential range of impact? Seems potentially large, depending on how many people are creating dylibs?</p>",
        "id": 167483680,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829511
    },
    {
        "content": "<p>yeah I want to discuss how much we care about this (it only affects <em>dynamic loading</em>, not <em>linking</em>) and if anyone wants to help track down what fixed it in the GNU toolchain</p>",
        "id": 167483722,
        "sender_full_name": "eddyb",
        "timestamp": 1559829545
    },
    {
        "content": "<p>okay, lets leave it unprioritized for now then.</p>",
        "id": 167483742,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829560
    },
    {
        "content": "<p>you could look at reverse dependencies of crates that wrap <code>dlopen</code>, I guess</p>",
        "id": 167483756,
        "sender_full_name": "eddyb",
        "timestamp": 1559829569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> might know more about that</p>",
        "id": 167483769,
        "sender_full_name": "eddyb",
        "timestamp": 1559829582
    },
    {
        "content": "<p>we'll talk about it at meeting. I want to get through rest of list ... oh crum, my time is almost up</p>",
        "id": 167483773,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829592
    },
    {
        "content": "<p>next: \"error updating smallvec in rustc\" <a href=\"https://github.com/rust-lang/rust/issues/61549\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61549\">#61549</a></p>",
        "id": 167483838,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829610
    },
    {
        "content": "<p>its hard to tell how bad this is. I'm going to triage as P-high and assign to self.</p>",
        "id": 167483898,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559829664
    }
]