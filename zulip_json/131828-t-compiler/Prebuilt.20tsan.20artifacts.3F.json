[
    {
        "content": "<p>(Not sure if right place to discuss this) I'm currently looking into having the rust stdlib properly instrumented for TSan in Firefox's CI. It appears that the current blessed way to do this is with <code>cargo -Zbuild-std</code>, but that doesn't appear to play well with --build-plan (and therefore sccache). AFAICT the only reason to use this is to rebuild std with <code>-Zsanitizer=thread</code>. I get that providing artifacts for every target would be a huge combinatoric explosion, but TSan is already only supported on linux. Would it be unreasonable to provide prebuilt tsan artifacts  for the standard linux64 server/desktop target?</p>",
        "id": 214966702,
        "sender_full_name": "Gankra",
        "timestamp": 1603978557
    },
    {
        "content": "<p>I thought sccache didn't use <code>--build-plan</code>, but instead <code>RUSTC_WRAPPER</code>.</p>",
        "id": 214966838,
        "sender_full_name": "bjorn3",
        "timestamp": 1603978628
    },
    {
        "content": "<p>I might be mistaken, just started looking into it this morning</p>",
        "id": 214966865,
        "sender_full_name": "Gankra",
        "timestamp": 1603978653
    },
    {
        "content": "<p>(possibly this is a firefox build quirk and not an sccache one)</p>",
        "id": 214967013,
        "sender_full_name": "Gankra",
        "timestamp": 1603978733
    },
    {
        "content": "<p>Hmm, ok our build-system isn't using build-plan explicitly. Maybe it's something else that's tripping me up. Still, needing to rebuild std a bunch in CI isn't ideal.</p>",
        "id": 214967260,
        "sender_full_name": "Gankra",
        "timestamp": 1603978861
    },
    {
        "content": "<p>I would be surprised if firefox is using -Z build-std, it's still experimental AFAIK and fairly recent</p>",
        "id": 214967392,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603978930
    },
    {
        "content": "<p>I am explicitly looking into using it for our TSan CI -- right now we have to supress all of libstd because Arc/Mutex and friends aren't instrumented</p>",
        "id": 214967476,
        "sender_full_name": "Gankra",
        "timestamp": 1603978986
    },
    {
        "content": "<p><a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1671691\">https://bugzilla.mozilla.org/show_bug.cgi?id=1671691</a></p>",
        "id": 214967521,
        "sender_full_name": "Gankra",
        "timestamp": 1603979018
    },
    {
        "content": "<p><a href=\"https://searchfox.org/mozilla-central/rev/a147181ece866c1ecd176ac49f112785f960aac0/mozglue/build/TsanOptions.cpp#176-190\">https://searchfox.org/mozilla-central/rev/a147181ece866c1ecd176ac49f112785f960aac0/mozglue/build/TsanOptions.cpp#176-190</a></p>",
        "id": 214967649,
        "sender_full_name": "Gankra",
        "timestamp": 1603979072
    },
    {
        "content": "<p>status update: ok just some Make weirdness after all. Now I get to try to figure out how to resolve std dependency issues inside of a vendored environment (yaaay)</p>",
        "id": 214997208,
        "sender_full_name": "Gankra",
        "timestamp": 1603991029
    },
    {
        "content": "<p>(prebuilt artifacts would still be ........ useful for not dealing with this :)</p>",
        "id": 214997311,
        "sender_full_name": "Gankra",
        "timestamp": 1603991053
    },
    {
        "content": "<p>this might be a good addition to <code>rust-dev</code> <a href=\"https://github.com/rust-lang/rust/pull/76332\">https://github.com/rust-lang/rust/pull/76332</a></p>",
        "id": 214997369,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603991084
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 214997381,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603991092
    },
    {
        "content": "<p>Definitely not, I think, but I would be happy to ship prebuilt sanitized stds for tier 1 targets at least, I think they can likely slot right into existing builders</p>",
        "id": 214997536,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991169
    },
    {
        "content": "<p>rust-dev is an internal component, no one outside rustbuild should use it</p>",
        "id": 214997609,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> anyway I can help with that?</p>",
        "id": 214997755,
        "sender_full_name": "Gankra",
        "timestamp": 1603991272
    },
    {
        "content": "<p>Hm so first I should check - we don't need rustc to be built sanitized, right? Just a std?</p>",
        "id": 214997867,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991311
    },
    {
        "content": "<p>I believe so, yes</p>",
        "id": 214997973,
        "sender_full_name": "Gankra",
        "timestamp": 1603991363
    },
    {
        "content": "<p>And IIRC we already ship the sanitizers in some way?</p>",
        "id": 214998011,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991386
    },
    {
        "content": "<p>I recall some logic around that</p>",
        "id": 214998028,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991395
    },
    {
        "content": "<p>yeah you can run -Zsanitizer = thread|address etc</p>",
        "id": 214998092,
        "sender_full_name": "Gankra",
        "timestamp": 1603991408
    },
    {
        "content": "<p>Do we need N stds then for each sanitizer?</p>",
        "id": 214998162,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991440
    },
    {
        "content": "<p>I seem to recall asan is \"fine\" with an uninstrumented build, only tsan has issues</p>",
        "id": 214998218,
        "sender_full_name": "Gankra",
        "timestamp": 1603991466
    },
    {
        "content": "<p>but presumably you'd not catch everything with a non-asan std?</p>",
        "id": 214998253,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991484
    },
    {
        "content": "<p>It would be necessary for msan and tsan, and useful but not required for asan.</p>",
        "id": 214998288,
        "sender_full_name": "tm",
        "timestamp": 1603991501
    },
    {
        "content": "<p>ok, so I think it should be fine to provide asan, msan, and tsan stds</p>",
        "id": 214998326,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991519
    },
    {
        "content": "<p>building std is really quite fast</p>",
        "id": 214998359,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991523
    },
    {
        "content": "<p>let me think of the best way to integrate that into rustbuild</p>",
        "id": 214998457,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991569
    },
    {
        "content": "<p>awesome! if you need any help, feel free to ping me. this is pretty valuable to firefox</p>",
        "id": 214998515,
        "sender_full_name": "Gankra",
        "timestamp": 1603991595
    },
    {
        "content": "<p>I guess firefox is using RUSTC_BOOTSTRAP or w/e to pass -Z flags?</p>",
        "id": 214998555,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991615
    },
    {
        "content": "<p>or how do you all manage this?</p>",
        "id": 214998579,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991622
    },
    {
        "content": "<p>I'm a bit concerned about sort of \"stabilizing\" these additional component(s)</p>",
        "id": 214998628,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991638
    },
    {
        "content": "<p>especially since in the future I expect we would not ship them ourselves, once -Zbuild-std is a thing</p>",
        "id": 214998774,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> tsan/asan is a CI thing so we just run nightly</p>",
        "id": 214998785,
        "sender_full_name": "Gankra",
        "timestamp": 1603991700
    },
    {
        "content": "<p>having them prebuilt is valuable even if -Zbuild-std is reliable, because CI probably can't cache whatever cargo is doing, and that's a lot of extra cycles rebuilding</p>",
        "id": 214999083,
        "sender_full_name": "Gankra",
        "timestamp": 1603991794
    },
    {
        "content": "<p>sure, just becomes a matter of tradeoffs to some extent -- we can't build all possible configurations. it's possible sanitizers should be part of the set of provided ones, but not 100% clear right now to me :)</p>",
        "id": 214999179,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991835
    },
    {
        "content": "<p>seems likely, even</p>",
        "id": 214999188,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991840
    },
    {
        "content": "<p>right, well tsan seems easier because it literally only works on linux</p>",
        "id": 214999217,
        "sender_full_name": "Gankra",
        "timestamp": 1603991855
    },
    {
        "content": "<p>no slippery slope :)</p>",
        "id": 214999244,
        "sender_full_name": "Gankra",
        "timestamp": 1603991874
    },
    {
        "content": "<p>TSAN works on Darwin and FreeBSD, possibly on other OSes, but not currently in rustc</p>",
        "id": 214999409,
        "sender_full_name": "tm",
        "timestamp": 1603991933
    },
    {
        "content": "<p>oh I didn't realize that was a rustc limitation</p>",
        "id": 214999505,
        "sender_full_name": "Gankra",
        "timestamp": 1603991969
    },
    {
        "content": "<p>I think it might not even be a limitation so much as iirc whoever added rustc support didn't have anything but linux to test on</p>",
        "id": 214999551,
        "sender_full_name": "simulacrum",
        "timestamp": 1603991993
    },
    {
        "content": "<p>i guess it makes sense that a clang thing would work on macos (modulo the fact that Google probably does most clang stuff these days)</p>",
        "id": 214999568,
        "sender_full_name": "Gankra",
        "timestamp": 1603991999
    },
    {
        "content": "<p>so it's just hardcoded</p>",
        "id": 214999570,
        "sender_full_name": "simulacrum",
        "timestamp": 1603992000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so just for planning my week, should I be assuming this is a thing that you'll probably do, or should I keep slapping our CI to try to get build-std-with-vendor working?</p>",
        "id": 215000235,
        "sender_full_name": "Gankra",
        "timestamp": 1603992247
    },
    {
        "content": "<p>(need me to file a bug for it?)</p>",
        "id": 215000271,
        "sender_full_name": "Gankra",
        "timestamp": 1603992265
    },
    {
        "content": "<p>hm, so I think it should be relatively easy to get a basic version at least going</p>",
        "id": 215000556,
        "sender_full_name": "simulacrum",
        "timestamp": 1603992376
    },
    {
        "content": "<p>I think a bug with the listing of what sanitizers and what platforms would be quite useful (even if it's \"just linux\"), maybe an \"almost required\" + \"helpful but not in immediate demand\" set :)</p>",
        "id": 215000657,
        "sender_full_name": "simulacrum",
        "timestamp": 1603992429
    },
    {
        "content": "<p>It'll likely be early next week that the patch gets reviewed at best though FWIW, perhaps longer</p>",
        "id": 215000833,
        "sender_full_name": "simulacrum",
        "timestamp": 1603992504
    },
    {
        "content": "<p>ok, cool, will do</p>",
        "id": 215000852,
        "sender_full_name": "Gankra",
        "timestamp": 1603992515
    },
    {
        "content": "<p>The tricky part is probably the fact that uninstrumented std is still necessary for build-scripts and proc-macros (presuming you don't want to instrument rustc itself).</p>",
        "id": 215002637,
        "sender_full_name": "tm",
        "timestamp": 1603993317
    },
    {
        "content": "<p>filed <a href=\"https://github.com/rust-lang/rust/issues/78533\">https://github.com/rust-lang/rust/issues/78533</a></p>",
        "id": 215003264,
        "sender_full_name": "Gankra",
        "timestamp": 1603993593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352985\">tm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Prebuilt.20tsan.20artifacts.3F/near/215002637\">said</a>:</p>\n<blockquote>\n<p>The tricky part is probably the fact that uninstrumented std is still necessary for build-scripts and proc-macros (presuming you don't want to instrument rustc itself).</p>\n</blockquote>\n<p>would it cause ABI issues, or just be slow?</p>",
        "id": 215003314,
        "sender_full_name": "Gankra",
        "timestamp": 1603993621
    },
    {
        "content": "<p>Build scripts it definitely shouldn't be necessary for?</p>",
        "id": 215003831,
        "sender_full_name": "simulacrum",
        "timestamp": 1603993826
    },
    {
        "content": "<p>proc macros also have a stable C ABI interface to rustc afaik</p>",
        "id": 215003867,
        "sender_full_name": "simulacrum",
        "timestamp": 1603993837
    },
    {
        "content": "<p>instrumented proc-macro + uninstrumented rustc wouldn't work (there is no TSAN runtime in either).</p>",
        "id": 215003917,
        "sender_full_name": "tm",
        "timestamp": 1603993854
    },
    {
        "content": "<p>when you say \"wouldn't work\" what do you mean by that? Wouldn't run tsan or wouldn't run at all?</p>",
        "id": 215003987,
        "sender_full_name": "simulacrum",
        "timestamp": 1603993883
    },
    {
        "content": "<p>I suspect firefox probably doesn't care about proc macros getting tsan'd</p>",
        "id": 215004020,
        "sender_full_name": "simulacrum",
        "timestamp": 1603993897
    },
    {
        "content": "<p>(is that right <span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span>?)</p>",
        "id": 215004281,
        "sender_full_name": "simulacrum",
        "timestamp": 1603993995
    },
    {
        "content": "<p>Generally proc-macros should be uninstrumented, hence the need for two different versions of the standard library.</p>",
        "id": 215004613,
        "sender_full_name": "tm",
        "timestamp": 1603994132
    },
    {
        "content": "<p>Don't proc macros link to the library <em>rustc</em> is linked to? As opposed to the one it built</p>",
        "id": 215004810,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603994215
    },
    {
        "content": "<p>If my intuition about how mixing non-instrumented and instrumented code is correct (i.e., you either get no results or partial results, but no errors) then there's no problem?</p>",
        "id": 215004815,
        "sender_full_name": "simulacrum",
        "timestamp": 1603994219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> pretty sure that's not the case; std is statically linked into rustc I would expect.</p>",
        "id": 215004883,
        "sender_full_name": "simulacrum",
        "timestamp": 1603994252
    },
    {
        "content": "<p>and I don't think we do anything special link-wise for proc macros</p>",
        "id": 215004919,
        "sender_full_name": "simulacrum",
        "timestamp": 1603994268
    },
    {
        "content": "<p>\"wouldn't work\" they will fail to load (unresolved symbols referencing TSAN runtime)</p>",
        "id": 215005391,
        "sender_full_name": "tm",
        "timestamp": 1603994498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Prebuilt.20tsan.20artifacts.3F/near/215004810\">said</a>:</p>\n<blockquote>\n<p>Don't proc macros link to the library <em>rustc</em> is linked to? As opposed to the one it built</p>\n</blockquote>\n<p>No, rustc can only link a proc macro to the version of libproc_macro that it built itself due to the rust abi not being stable. Instead libproc_macro uses the C ABI internally so that two versions of it built from the same source can be used. One for the compiler and one for the proc macro.</p>",
        "id": 215005743,
        "sender_full_name": "bjorn3",
        "timestamp": 1603994655
    },
    {
        "content": "<p>This has been the case since rustc started using proc macros.</p>",
        "id": 215005782,
        "sender_full_name": "bjorn3",
        "timestamp": 1603994674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> presuming <span class=\"user-mention\" data-user-id=\"352985\">@tm</span> is correct then you're going to need to do same hackery to get different stds for build deps and target deps; the easiest is likely a wrapper for rustc invocations that specifies different --sysroot args depending on presence of --target, which will always be set for non-build-deps by cargo with --target passed to cargo</p>",
        "id": 215006831,
        "sender_full_name": "simulacrum",
        "timestamp": 1603995187
    },
    {
        "content": "<p>hmm ok I'll need to think about that</p>",
        "id": 215007683,
        "sender_full_name": "Gankra",
        "timestamp": 1603995569
    },
    {
        "content": "<p>I think -Zbuild-std might not encounter this problem actually because it already links the newly built std only to target deps, but I might be wrong about that</p>",
        "id": 215007820,
        "sender_full_name": "simulacrum",
        "timestamp": 1603995623
    },
    {
        "content": "<p>the script should be ~10-20 lines though fwiw</p>",
        "id": 215007849,
        "sender_full_name": "simulacrum",
        "timestamp": 1603995636
    },
    {
        "content": "<p>Sounds reasonable</p>",
        "id": 215007958,
        "sender_full_name": "Gankra",
        "timestamp": 1603995688
    },
    {
        "content": "<p>The beauty of RUSTFLAGS=-Zsanitizer + -Zbuild-std + --target is that it does exactly the right thing from the perspective of sanitizer use-case.</p>",
        "id": 215008516,
        "sender_full_name": "tm",
        "timestamp": 1603995919
    },
    {
        "content": "<p>yep</p>",
        "id": 215008969,
        "sender_full_name": "Gankra",
        "timestamp": 1603996148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> yeah so looking at the impl it's going to be more painful than I expected, lots of pieces need to change and I'm not liking the approaches I come up with :/</p>",
        "id": 215020529,
        "sender_full_name": "simulacrum",
        "timestamp": 1604001868
    },
    {
        "content": "<p>and given the build/target dep incompatibility and need for a custom script, which means it wouldn't be seamless anyway it seems like, I'm leaning towards saying that build-std is the right approach after all</p>",
        "id": 215020831,
        "sender_full_name": "simulacrum",
        "timestamp": 1604002023
    },
    {
        "content": "<p>hmm, ok</p>",
        "id": 215021475,
        "sender_full_name": "Gankra",
        "timestamp": 1604002415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> it sounded like build-std was mostly a compile-time issue, right? I am rather surprised by that to be honest, because std is (at least on Rust CI) a small fraction of build times</p>",
        "id": 215021646,
        "sender_full_name": "simulacrum",
        "timestamp": 1604002537
    },
    {
        "content": "<p>I'm not going to close the issue because most of the refactoring necessary to make it easier is I think good anyway, but it's going to require quite a bit of work</p>",
        "id": 215021685,
        "sender_full_name": "simulacrum",
        "timestamp": 1604002561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> well a little bit times a lot of builds adds up. I'm mostly still stuck at \"oh no dependency management\". For whatever reason <code>backtrace</code> isn't available. Perhaps the rust-src artifact we download isn't what rustup uses? <a href=\"https://searchfox.org/mozilla-central/source/taskcluster/scripts/misc/repack_rust.py#371\">https://searchfox.org/mozilla-central/source/taskcluster/scripts/misc/repack_rust.py#371</a></p>",
        "id": 215022049,
        "sender_full_name": "Gankra",
        "timestamp": 1604002735
    },
    {
        "content": "<p>(or does rust-src not include deps?)</p>",
        "id": 215022083,
        "sender_full_name": "Gankra",
        "timestamp": 1604002751
    },
    {
        "content": "<p>hmm</p>",
        "id": 215022091,
        "sender_full_name": "simulacrum",
        "timestamp": 1604002759
    },
    {
        "content": "<p>are you on recent nightlies?</p>",
        "id": 215022103,
        "sender_full_name": "simulacrum",
        "timestamp": 1604002764
    },
    {
        "content": "<p>we had a bit were it was broken</p>",
        "id": 215022117,
        "sender_full_name": "simulacrum",
        "timestamp": 1604002768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> I am happy to help with getting build-std to work</p>",
        "id": 215022318,
        "sender_full_name": "simulacrum",
        "timestamp": 1604002852
    },
    {
        "content": "<p>there's two rust-src ish artifacts</p>",
        "id": 215022350,
        "sender_full_name": "simulacrum",
        "timestamp": 1604002868
    },
    {
        "content": "<p>let me check which one you're using</p>",
        "id": 215022357,
        "sender_full_name": "simulacrum",
        "timestamp": 1604002871
    },
    {
        "content": "<p><a href=\"https://searchfox.org/mozilla-central/source/taskcluster/ci/toolchain/rust.yml#49\">https://searchfox.org/mozilla-central/source/taskcluster/ci/toolchain/rust.yml#49</a> 2020-03-18</p>",
        "id": 215022494,
        "sender_full_name": "Gankra",
        "timestamp": 1604002930
    },
    {
        "content": "<p>hm, that feels like it might be in the unlucky range</p>",
        "id": 215022619,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003006
    },
    {
        "content": "<p>I'll ask if we're stuck on that one for a reason (been having issues with new llvm)</p>",
        "id": 215022677,
        "sender_full_name": "Gankra",
        "timestamp": 1604003033
    },
    {
        "content": "<p>you can likely bump by like 5 days and be fine to be clear</p>",
        "id": 215022735,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003046
    },
    {
        "content": "<p>let me confirm it's what I think it is though</p>",
        "id": 215022770,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003065
    },
    {
        "content": "<p><a href=\"https://firefoxci.taskcluster-artifacts.net/dleojbwaRryGAkVoUYZIZg/0/public/logs/live_backing.log\">https://firefoxci.taskcluster-artifacts.net/dleojbwaRryGAkVoUYZIZg/0/public/logs/live_backing.log</a></p>",
        "id": 215022860,
        "sender_full_name": "Gankra",
        "timestamp": 1604003114
    },
    {
        "content": "<p>^ failing build</p>",
        "id": 215022871,
        "sender_full_name": "Gankra",
        "timestamp": 1604003118
    },
    {
        "content": "<p>error: no matching package named <code>backtrace</code> found</p>",
        "id": 215022901,
        "sender_full_name": "Gankra",
        "timestamp": 1604003136
    },
    {
        "content": "<p>hm so the gimli stuff seems to have landed in july, which is way later</p>",
        "id": 215023428,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003424
    },
    {
        "content": "<p>thinking back I don't honestly recall any bugs with backtrace in march/april</p>",
        "id": 215023471,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003449
    },
    {
        "content": "<p>maybe it was broken though!</p>",
        "id": 215023485,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003457
    },
    {
        "content": "<p>does a rust-src artifact include all the deps vendored up?</p>",
        "id": 215023538,
        "sender_full_name": "Gankra",
        "timestamp": 1604003488
    },
    {
        "content": "<p>hm I don't think so</p>",
        "id": 215023563,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003505
    },
    {
        "content": "<p>otherwise we'd not see a crates.io-index dep</p>",
        "id": 215023586,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003514
    },
    {
        "content": "<p>well that'll cause a problem, because <a href=\"http://crates.io\">crates.io</a> is shadowed by our vendor</p>",
        "id": 215023645,
        "sender_full_name": "Gankra",
        "timestamp": 1604003530
    },
    {
        "content": "<p>but like this is not unique for backtrace?</p>",
        "id": 215023686,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003550
    },
    {
        "content": "<p>probably just the first one it couldn't find</p>",
        "id": 215023707,
        "sender_full_name": "Gankra",
        "timestamp": 1604003563
    },
    {
        "content": "<p>hm so do you vendor hashbrown yourself?</p>",
        "id": 215023737,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003581
    },
    {
        "content": "<p>or I guess that would've broken too</p>",
        "id": 215023768,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003594
    },
    {
        "content": "<p>there is a vendored tarball, but it's not a rustup component I believe</p>",
        "id": 215023807,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003614
    },
    {
        "content": "<p>yes we vendor hashbrown</p>",
        "id": 215023827,
        "sender_full_name": "Gankra",
        "timestamp": 1604003628
    },
    {
        "content": "<p>I mean like, rewriting the std cargo.toml to point at the vendored hashbrown?</p>",
        "id": 215023946,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003674
    },
    {
        "content": "<p>(or patch equivalent)</p>",
        "id": 215023972,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003691
    },
    {
        "content": "<p><a href=\"https://searchfox.org/mozilla-central/source/third_party/rust\">https://searchfox.org/mozilla-central/source/third_party/rust</a></p>",
        "id": 215023978,
        "sender_full_name": "Gankra",
        "timestamp": 1604003694
    },
    {
        "content": "<p>uh, not sure what you mean?</p>",
        "id": 215024011,
        "sender_full_name": "Gankra",
        "timestamp": 1604003716
    },
    {
        "content": "<p>maybe I misunderstand how your vendoring works</p>",
        "id": 215024026,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003729
    },
    {
        "content": "<p>but the Cargo.lock in the rust-src component points at <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 215024038,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003738
    },
    {
        "content": "<p>not a path dep to vendored sources</p>",
        "id": 215024056,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003746
    },
    {
        "content": "<p>I thought when you use cargo vendor <a href=\"http://crates.io\">crates.io</a> \"resolves\" to your vendor directory</p>",
        "id": 215024130,
        "sender_full_name": "Gankra",
        "timestamp": 1604003770
    },
    {
        "content": "<p>right, via patches or something like that</p>",
        "id": 215024144,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003781
    },
    {
        "content": "<p>something like that, yeah</p>",
        "id": 215024161,
        "sender_full_name": "Gankra",
        "timestamp": 1604003794
    },
    {
        "content": "<p>via <code>.cargo/config</code> source replacement</p>",
        "id": 215024164,
        "sender_full_name": "cuviper",
        "timestamp": 1604003795
    },
    {
        "content": "<p>so <em>maybe</em> the fix here is simple: vendor backtrace</p>",
        "id": 215024190,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003812
    },
    {
        "content": "<p>it doesn't appear to be in the list you linked</p>",
        "id": 215024203,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003819
    },
    {
        "content": "<p>(which is honestly surprising, it feels like it sneaks in quite quickly in my depgraphs)</p>",
        "id": 215024237,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003843
    },
    {
        "content": "<p>Yeah I'm just wondering if there's a way to make the \"stdlib\" vendors easy to update</p>",
        "id": 215024254,
        "sender_full_name": "Gankra",
        "timestamp": 1604003853
    },
    {
        "content": "<p>like a fake std crate we \"build\"</p>",
        "id": 215024284,
        "sender_full_name": "Gankra",
        "timestamp": 1604003876
    },
    {
        "content": "<p>we do have a vendored component of the whole compiler (including compiler deps and such) but I suspect you probably don't want that</p>",
        "id": 215024287,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003878
    },
    {
        "content": "<p>though you could use that to build a sanitized std, I guess</p>",
        "id": 215024366,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003905
    },
    {
        "content": "<p>(overriding rustc to point at yours and then installing the stage 0 std into your sysroot or something, but seems quite complicated)</p>",
        "id": 215024393,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003927
    },
    {
        "content": "<p>I was moreso thinking just copy-pasting the Cargo.toml for std, but I suppose that won't do transitive stuff like core and alloc</p>",
        "id": 215024448,
        "sender_full_name": "Gankra",
        "timestamp": 1604003962
    },
    {
        "content": "<p>cc <a href=\"https://github.com/rust-lang/rust/pull/76533#issuecomment-708563503\">https://github.com/rust-lang/rust/pull/76533#issuecomment-708563503</a></p>",
        "id": 215024450,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604003963
    },
    {
        "content": "<p>The separate workspace wouldn't help much unless we shipped a separate std-src-vendored or something</p>",
        "id": 215024488,
        "sender_full_name": "simulacrum",
        "timestamp": 1604003990
    },
    {
        "content": "<p>It makes it much easier to only vendor the stdlib dependencies.</p>",
        "id": 215024564,
        "sender_full_name": "bjorn3",
        "timestamp": 1604004017
    },
    {
        "content": "<p>Sure</p>",
        "id": 215024676,
        "sender_full_name": "simulacrum",
        "timestamp": 1604004081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> where's the vendored component for rustc?</p>",
        "id": 215025209,
        "sender_full_name": "Gankra",
        "timestamp": 1604004319
    },
    {
        "content": "<p>let me get you the url pattern</p>",
        "id": 215025260,
        "sender_full_name": "simulacrum",
        "timestamp": 1604004359
    },
    {
        "content": "<p>thx</p>",
        "id": 215025349,
        "sender_full_name": "Gankra",
        "timestamp": 1604004395
    },
    {
        "content": "<p><a href=\"https://static.rust-lang.org/dist/2020-03-25/rustc-nightly-src.tar.xz\">https://static.rust-lang.org/dist/2020-03-25/rustc-nightly-src.tar.xz</a></p>",
        "id": 215025440,
        "sender_full_name": "simulacrum",
        "timestamp": 1604004448
    },
    {
        "content": "<p>note that it is <em>not</em> a rustup component</p>",
        "id": 215025448,
        "sender_full_name": "simulacrum",
        "timestamp": 1604004454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137587\">@Gankra</span> and it contains e.g. llvm and such too</p>",
        "id": 215025468,
        "sender_full_name": "simulacrum",
        "timestamp": 1604004465
    },
    {
        "content": "<p>I think I need to sleep on this / wait for feedback from coworkers on how we'd like to address this conundrum</p>",
        "id": 215026681,
        "sender_full_name": "Gankra",
        "timestamp": 1604005019
    },
    {
        "content": "<p>(prebuilt std looking attractive to me again :p)</p>",
        "id": 215026706,
        "sender_full_name": "Gankra",
        "timestamp": 1604005033
    },
    {
        "content": "<p>But thanks a ton for all your help!!</p>",
        "id": 215026721,
        "sender_full_name": "Gankra",
        "timestamp": 1604005045
    },
    {
        "content": "<p>yeah let me know -- I think it is an important use case, and there are more strategies for implementation that I think could be viable</p>",
        "id": 215032546,
        "sender_full_name": "simulacrum",
        "timestamp": 1604007845
    },
    {
        "content": "<p>Now pursuing a solution in cargo vendor: <a href=\"#narrow/stream/246057-t-cargo/topic/cargo.20vendor.20-Zbuild-std\">https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/cargo.20vendor.20-Zbuild-std</a></p>",
        "id": 215093300,
        "sender_full_name": "Gankra",
        "timestamp": 1604064195
    }
]