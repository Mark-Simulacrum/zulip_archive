[
    {
        "content": "<p>Hello! First post here for me.<br>\nWhen digging a bit deeper into some bad codegen on arm, I started to wonder about the enum ordering and tag values in <code>Option</code> and <code>Result</code>.</p>\n<p><code>Result</code> is <code>enum {Ok(T), Err(E)}</code> and <code>Option</code> is <code>enum {None, Some(T)}</code>. Conversions between <code>Result</code> and <code>Option</code> are frequent, as are the methods in the API to do so. But they are much more likely to happen between <code>Ok(T)</code> and <code>Some(T)</code>. This is also supported by the lack of <code>Option::err_or()</code> as the symmetric counterpart to <code>Option::ok_or()</code>. Yet the enum tags of the most common pairing <code>Some(T)</code> and <code>Ok(T)</code> are mismatched and have been for many years (maybe since the beginning). I understand that this looks like an intuitive ordering, but is there a conscious decision behind that?<br>\nI know the compiler is free to choose whatever tags it wants, but it doesn't, and why would it ever?</p>\n<p>I'm asking specifically because it looks like a hypothetical <code>Option::err_or()</code> would be a bit faster than its counterpart. Or stated differently: Swapping the enum order of either <code>Option</code> or <code>Result</code> appears to be beneficial. This is pretty much universal across targets, optimization and T/E sizes/alignment.</p>\n<p><a href=\"https://godbolt.org/z/ajTdsP6os\">https://godbolt.org/z/ajTdsP6os</a></p>\n<p>I know it might be a bit pedantic and the benefit isn't gigantic. Still, if there is no technical reason to keep the ordering as it is, why not choose the best ordering?<br>\nDoes this merit an issue and/or PR on github?</p>",
        "id": 235682314,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619099999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263076\">@Robert Jördens</span> changing the order would change the <code>Ord</code> impl since it's derived</p>",
        "id": 235682547,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619100049
    },
    {
        "content": "<p>which is a very breaking change; insteadyou could implement <code>Ord</code> manually. I'm surprised that the order matters at all for performance though since the layout is unspecified</p>",
        "id": 235682691,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619100094
    },
    {
        "content": "<p>is there a stable way to get the discriminant of an enum?</p>",
        "id": 235682983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> <a href=\"https://doc.rust-lang.org/std/mem/fn.discriminant.html\">https://doc.rust-lang.org/std/mem/fn.discriminant.html</a></p>",
        "id": 235683052,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619100191
    },
    {
        "content": "<p>not as an integer though</p>",
        "id": 235683068,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619100194
    },
    {
        "content": "<p>I think that's to allow the size of the discriminant to be unspecified</p>",
        "id": 235683169,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619100230
    },
    {
        "content": "<p>ah, and it doesn't implement <code>Ord</code>, smart</p>",
        "id": 235683173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I see. But still, why is the ordering (e.g. <code>Err(0) &gt; Ok(99)</code>) as it is? Just coincidence?</p>",
        "id": 235683272,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619100251
    },
    {
        "content": "<p>It does implement <code>Hash</code> though, which might change</p>",
        "id": 235683323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263076\">@Robert Jördens</span> Even if it is entirely incidental, it's impossible to know if people are relying on it since that's a stable part of the API of the type</p>",
        "id": 235683600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619100369
    },
    {
        "content": "<p>So something for Rust 2.0 ;)</p>",
        "id": 235685919,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619101137
    },
    {
        "content": "<p>realistically rust 2.0 is not going to happen</p>\n<p><span class=\"user-mention\" data-user-id=\"263076\">@Robert Jördens</span> do you mind expanding on why changing the declaration order changes codegen? I wouldn't expect that.</p>",
        "id": 235686015,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619101173
    },
    {
        "content": "<p>See the godbolt MWE, compare <code>some_to_err</code> and <code>some_to_ok</code>. When converting <code>Some(T)</code> to <code>Err(T)</code>, it doesn't need to change the enum tag. For <code>some_to_ok</code> it does.</p>",
        "id": 235686341,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619101278
    },
    {
        "content": "<p>that seems like something we should fix in the compiler, not in libstd</p>",
        "id": 235687308,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619101589
    },
    {
        "content": "<p>The effect is most significant on arm/thumb and smaller on nightly/x86.</p>",
        "id": 235687402,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619101624
    },
    {
        "content": "<p>Then one take home message is that eagerly deriving traits \"where it makes sense\" (as recommended in best practices), can lead to somewhat \"accidental\" stabilization.</p>",
        "id": 235689186,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619102230
    },
    {
        "content": "<p>How is <code>Ord</code> derived/implemented if not through the <code>Discriminant</code>?</p>",
        "id": 235690038,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619102528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I don't feel qualified to push this further. I'm happy to leave it if the impact isn't deemed significant enough or if it's unlikely to go anywhere. What should I do?</p>",
        "id": 235690044,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619102532
    },
    {
        "content": "<p>I would look into why the compiler generates different code; is it making different layout decisions somewhere?</p>",
        "id": 235690150,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619102582
    },
    {
        "content": "<p>it seems weird for layout to depend on order but i'm not familiar with that part of the compiler</p>",
        "id": 235690186,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619102596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> may have ideas</p>",
        "id": 235690227,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619102609
    },
    {
        "content": "<p>also I would make sure this <em>is</em> actually affected by order - have you tried your godbolt example with a modified version of the standard library?</p>",
        "id": 235690706,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619102781
    },
    {
        "content": "<p>I think the effect comes about because <code>Some(T)</code> and <code>Err(T)</code> end up having the exact same representation including numerical value of the discriminant, making conversion easy.</p>",
        "id": 235690712,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619102782
    },
    {
        "content": "<p>I haven't but then I'd rather compare my own <code>SwappedResult</code> to a copy of stdlib's <code>Result</code>.</p>",
        "id": 235690901,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619102858
    },
    {
        "content": "<p>The source ordering matters because any given type doesn't magically look at the layout of other types when determining its own layout.</p>\n<p>So while it's better overall for Ok/Some and Err/None to be a match, the compiler <strong>doesn't know</strong> this, and just goes with the \"good enough by default\" ordering used for all enums of following the ordering written in the source (unless, of course, the monomorph causes a better layout to become obvious, eg: Option&lt;NonNull&gt; uses the niche, etc etc).</p>\n<p>And yes, the ordering is unspecified, but there is still <em>some ordering</em> that the compiler has to pick, and this is how the compiler currently picks it.</p>",
        "id": 235692317,
        "sender_full_name": "Lokathor",
        "timestamp": 1619103371
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/Yoe8vjqTx\">https://godbolt.org/z/Yoe8vjqTx</a> to show that this is source ordering.</p>",
        "id": 235694041,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619103790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> Then ordering is unspecified in the compiler but at the same time well-defined and stabilized by the library?</p>",
        "id": 235694643,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619103941
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"263076\">@Robert Jördens</span> the <em>layout</em> is not stabilized, the <code>Ord</code> impl is</p>",
        "id": 235694736,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619103962
    },
    {
        "content": "<p>they are different</p>",
        "id": 235694784,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619103964
    },
    {
        "content": "<p>like I said before, you can change the source order if you add a custom <code>Ord</code> impl</p>",
        "id": 235694852,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619103981
    },
    {
        "content": "<p>if the source was changed but the ord impl written by hand to ensure the old ordering that could be merged to stable, for example</p>",
        "id": 235694902,
        "sender_full_name": "Lokathor",
        "timestamp": 1619103995
    },
    {
        "content": "<p>yes what josh said</p>",
        "id": 235694937,
        "sender_full_name": "Lokathor",
        "timestamp": 1619104004
    },
    {
        "content": "<p>I see.</p>",
        "id": 235695029,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619104027
    },
    {
        "content": "<p>But the merit of that approach would then hinge on unspecified compiler behavior.</p>",
        "id": 235695775,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619104218
    },
    {
        "content": "<p>well yes, unless you hard-code Option in the compiler the layout will always be unspecified</p>",
        "id": 235695854,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1619104248
    },
    {
        "content": "<p>hash of discriminant is not guaranteed to be stable across compilations with different toolchain versions, its called out in the description of the <a href=\"https://doc.rust-lang.org/stable/std/mem/fn.discriminant.html\"><code>discriminant</code></a> function.</p>",
        "id": 235700849,
        "sender_full_name": "nagisa",
        "timestamp": 1619106217
    },
    {
        "content": "<p>Specifying more sensible discriminants for variants also makes sense to me, especially now that (IIRC) there's an ability to actually explicitly specify the discriminants of non-c-like enums.</p>",
        "id": 235700993,
        "sender_full_name": "nagisa",
        "timestamp": 1619106276
    },
    {
        "content": "<p>the only requirement here is that <code>None</code> stays <code>0</code>.</p>",
        "id": 235701020,
        "sender_full_name": "nagisa",
        "timestamp": 1619106287
    },
    {
        "content": "<p>why would <code>None</code> always be <code>0</code>? for <code>Option&lt;File&gt;</code> it should use the <code>-1</code> niche</p>",
        "id": 235705471,
        "sender_full_name": "cuviper",
        "timestamp": 1619108102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263076\">Robert Jördens</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Result.2FOption.20enum.20order/near/235682314\">said</a>:</p>\n<blockquote>\n<p>Still, if there is no technical reason to keep the ordering as it is, why not choose the best ordering?<br>\nDoes this merit an issue and/or PR on github?</p>\n</blockquote>\n<p>Here's a PR from 2018 that tried to do just that:<br>\n<a href=\"https://github.com/rust-lang/rust/pull/49499\">https://github.com/rust-lang/rust/pull/49499</a></p>\n<p>AFAIK the current explorations around this are trying to add MIR opts to fix some of these suboptimalities in rustc, since LLVM historically has been bad at doing it.  See the pass <a href=\"https://github.com/rust-lang/rust/blob/25c15cdbe070f49d708f34750df2632e38bd4846/compiler/rustc_mir/src/transform/simplify_try.rs#L1-L10\">https://github.com/rust-lang/rust/blob/25c15cdbe070f49d708f34750df2632e38bd4846/compiler/rustc_mir/src/transform/simplify_try.rs#L1-L10</a> for example.</p>",
        "id": 235707046,
        "sender_full_name": "scottmcm",
        "timestamp": 1619108767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Result.2FOption.20enum.20order/near/235705471\">said</a>:</p>\n<blockquote>\n<p>why would <code>None</code> always be <code>0</code>? for <code>Option&lt;File&gt;</code> it should use the <code>-1</code> niche</p>\n</blockquote>\n<p>I don't think that it's <em>always</em> zero, but that <code>[Option&lt;ThingWithoutNiche&gt;; N]</code> should always be readable from an all-zeroes page, rather than needing to embed extra constants for it.</p>",
        "id": 235707273,
        "sender_full_name": "scottmcm",
        "timestamp": 1619108882
    },
    {
        "content": "<p>I think I have to retract my claim that swapping the <code>Result</code> enum order is generally beneficial.<br>\nOn current nightly it looks like this only comes about in the hypothetical <code>Option&lt;E&gt;::err_or(T) -&gt; Result&lt;T, E&gt;</code> if that <code>T</code> value has certain structure. On 1.51.0 it is a significant difference.<br>\nOn the other hand the swapped <code>Result</code> is also never worse.<br>\nThank you all for the input!</p>\n<p>I still think <code>Option&lt;E&gt;::err_or(T) -&gt; Result&lt;T, E&gt;</code> would make the API more symmetric though.</p>",
        "id": 235707970,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619109150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Result.2FOption.20enum.20order/near/235707046\">said</a>:</p>\n<blockquote>\n<p>Here's a PR from 2018 that tried to do just that:<br>\n<a href=\"https://github.com/rust-lang/rust/pull/49499\">https://github.com/rust-lang/rust/pull/49499</a></p>\n</blockquote>\n<p>Ah. Yes! I had seen that a couple days ago but couldn't find it when looking for it. Looks like the <code>Result</code> swap PR never materialized.</p>",
        "id": 235708451,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619109334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Result.2FOption.20enum.20order/near/235705471\">said</a>:</p>\n<blockquote>\n<p>why would <code>None</code> always be <code>0</code>? for <code>Option&lt;File&gt;</code> it should use the <code>-1</code> niche</p>\n</blockquote>\n<p>Ah, well, so <code>None</code> has to retain unspecified discriminant, and <code>Some</code> can't have a specified one because it might end up inhabiting a specific niche of some type that could otherwise utilize the optimization (which we don't guarantee other than for <code>NonZero</code> IIRC?)</p>",
        "id": 235710177,
        "sender_full_name": "nagisa",
        "timestamp": 1619110036
    },
    {
        "content": "<p>In the presence of niche optimizations, I don't think discriminant numbers mean anything. The discriminant numbers only matter when using the \"standard\" tag + data layout for an enum</p>",
        "id": 235710902,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619110311
    },
    {
        "content": "<p>What's the difference between tag and discriminant?</p>",
        "id": 235712320,
        "sender_full_name": "Robert Jördens",
        "timestamp": 1619110836
    },
    {
        "content": "<p>I don't know how common the convention is, but I would say that the discriminant is the logical integer associated to the variants, i.e. the first variant has discriminant 0, the second 1 and so on, unless they are overridden with <code>= n</code>; while the tag is the portion of the concrete layout in a tag + union. The tag will always be the same as the discriminant if it exists, but if there is a niche optimization there might not be a tag field, but the discriminant still logically exists, encoded in some bit patterns</p>",
        "id": 235713938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619111397
    },
    {
        "content": "<p>but mind you I'm just making this up, they are largely interchangeable</p>",
        "id": 235714120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619111458
    }
]