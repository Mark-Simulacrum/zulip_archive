[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> , we'll be starting this week's design meeting in about 8 minutes</p>",
        "id": 182183477,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575039151
    },
    {
        "content": "<p>this week's topic is the REPL extensions, <a href=\"https://github.com/rust-lang/compiler-team/issues/213\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/213\">compiler-team#213</a></p>",
        "id": 182183486,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575039174
    },
    {
        "content": "<p>by the way, is <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> around?</p>",
        "id": 182183845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575039566
    },
    {
        "content": "<p>i ask because one of the items on the <a href=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw\" target=\"_blank\" title=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw\">repl design hackmd</a> is a Virtual File System (VFS), which is something that is also used in rust-analyzer. I would like to know if the two pieces of functionality can/should be merged, if only as part of eventually \"librarification\"</p>",
        "id": 182183930,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575039643
    },
    {
        "content": "<p>yeah, I guess I am around</p>",
        "id": 182183978,
        "sender_full_name": "matklad",
        "timestamp": 1575039702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> okay, just wanted to check. I can ping you again when we get around to talking about VFS stuffin that case, so that you don't have to be actively watching this topic?</p>",
        "id": 182184044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575039740
    },
    {
        "content": "<p>anyway, it is time to start the meeting, <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> ! (add yourself to the <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> to show you're here.)</p>",
        "id": 182184056,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575039758
    },
    {
        "content": "<p>lets open with five minutes for</p>",
        "id": 182184060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575039764
    },
    {
        "content": "<h2>Announcements</h2>",
        "id": 182184062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575039767
    },
    {
        "content": "<p>someone privately pointed out I should cc <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> to make sure they know this meeting has started</p>",
        "id": 182184223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575039918
    },
    {
        "content": "<p>/me relies that they have an errand to attend to</p>",
        "id": 182184333,
        "sender_full_name": "matklad",
        "timestamp": 1575040025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> okay, that's alright; we can discuss VFS stuff async if need be</p>",
        "id": 182184347,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040049
    },
    {
        "content": "<p>I'll catch up with VFS discussion later, but my main question is: \"why existing FileLoader interface is not enough for repl?\"</p>",
        "id": 182184354,
        "sender_full_name": "matklad",
        "timestamp": 1575040059
    },
    {
        "content": "<p>so at this point I have skimmed over the <a href=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw\" target=\"_blank\" title=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw\">design hackmd</a> but I have not reviewed the comments from <a href=\"https://github.com/rust-lang/compiler-team/issues/213\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/213\">compiler-team#213</a></p>",
        "id": 182184362,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040074
    },
    {
        "content": "<p>I'm not sure if <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> is absent; Zulip's UI claims they were active \"just now\"</p>",
        "id": 182184508,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040200
    },
    {
        "content": "<p>The <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/syntax/source_map/trait.FileLoader.html#tymethod.read_file\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/syntax/source_map/trait.FileLoader.html#tymethod.read_file\"><code>FileLoader::read_file</code></a> returns a string, while the incr cache is binary data.</p>",
        "id": 182184552,
        "sender_full_name": "bjorn3",
        "timestamp": 1575040204
    },
    {
        "content": "<p>So at least the current <code>FileLoader</code> interface is not enough for this usage.</p>",
        "id": 182184587,
        "sender_full_name": "bjorn3",
        "timestamp": 1575040247
    },
    {
        "content": "<p>A decent summary I think is that it's not entirely clear that everything is warranted - but it's also not clear that we should try to design perfectly here, or just accept the changes in a series of PRs with the thought being that ultimately it may not matter that much</p>",
        "id": 182184602,
        "sender_full_name": "simulacrum",
        "timestamp": 1575040273
    },
    {
        "content": "<p>lets maybe start by doing a big picture overview and some questions</p>",
        "id": 182184609,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> do you think you can represent <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> 's POV in their absence?</p>",
        "id": 182184621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040311
    },
    {
        "content": "<p>(by represent POV, I really just mean \"correct mistakes I make in my attempt to present things.\")</p>",
        "id": 182184702,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  All I know about the design come from the HackMD file.</p>",
        "id": 182184757,
        "sender_full_name": "bjorn3",
        "timestamp": 1575040420
    },
    {
        "content": "<p>oh okay. Well, I guess I will just have to press on ahead and hope I don't get too many details wrong</p>",
        "id": 182184824,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040448
    },
    {
        "content": "<p>I can maybe help correct mistakes</p>",
        "id": 182184828,
        "sender_full_name": "simulacrum",
        "timestamp": 1575040450
    },
    {
        "content": "<p><del>we can start with an easy thing: the miri engine memory and machine changes</del> nevermind, high level start is better</p>",
        "id": 182184853,
        "sender_full_name": "oli",
        "timestamp": 1575040477
    },
    {
        "content": "<p>So the <a href=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw\" target=\"_blank\" title=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw\">design doc</a> lays out the big level structure of a REPL</p>",
        "id": 182184860,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040484
    },
    {
        "content": "<p>Read (to an AST), Compile (AST to MIR), Eval (the MIR to a value), Print (the value). and Loop.</p>",
        "id": 182184896,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040524
    },
    {
        "content": "<p>before we get into too many low level details, I want to start with a really basic question: Is this going to be a tool analogous to Miri, where check-in's that break it may not break CI immediately, but rather will just file follow-up bugs?</p>",
        "id": 182184986,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040600
    },
    {
        "content": "<p>it has to be, as it depends on miri</p>",
        "id": 182185018,
        "sender_full_name": "bjorn3",
        "timestamp": 1575040634
    },
    {
        "content": "<p>or do we not know if it will even file follow-up bugs</p>",
        "id": 182185023,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040639
    },
    {
        "content": "<p>I think the initial intent is even less - it won't be a submodule at all</p>",
        "id": 182185028,
        "sender_full_name": "simulacrum",
        "timestamp": 1575040644
    },
    {
        "content": "<p>(note also that current architecture is not a dependency on miri, but rather a fork of miri)</p>",
        "id": 182185113,
        "sender_full_name": "simulacrum",
        "timestamp": 1575040687
    },
    {
        "content": "<p>so that means that if we (rustc developers) make breaking changes to the compiler, we won't necessarily know, right? Unless REPL developers add appropriate unit tests to rustc's test suite ?</p>",
        "id": 182185115,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040688
    },
    {
        "content": "<p>as it says in the design doc:</p>\n<blockquote>\n<p>but for now I shall take it upon myself to observe such breakages in a semi-automated (e.g., cronjob) or manual fashion, and update my REPL repository in accordance, thus offloading any significant maintenance burden from the compiler team.</p>\n</blockquote>",
        "id": 182185134,
        "sender_full_name": "oli",
        "timestamp": 1575040711
    },
    {
        "content": "<p>Correct. But I believe this is considered acceptable for now.</p>",
        "id": 182185140,
        "sender_full_name": "simulacrum",
        "timestamp": 1575040718
    },
    {
        "content": "<p>okay</p>",
        "id": 182185167,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040738
    },
    {
        "content": "<p>that's how miri and clippy started essentially. Now that we have a good tooling setup, we can move to a submodule faster though</p>",
        "id": 182185200,
        "sender_full_name": "oli",
        "timestamp": 1575040781
    },
    {
        "content": "<p>okay. I suppose I am willing to trust that the pieces added to the compiler will be sufficiently well-documented that we shouldn't be stressing too hard about trying to grep across github for how they are used.</p>",
        "id": 182185333,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040886
    },
    {
        "content": "<p>We could use <code>// REPL: foo</code> comments on all of them</p>",
        "id": 182185409,
        "sender_full_name": "oli",
        "timestamp": 1575040931
    },
    {
        "content": "<p>the <a href=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw#Modifications-to-rustc\" target=\"_blank\" title=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw#Modifications-to-rustc\">design doc</a> provides a specific list of proposed modifications. Some of them are labelled non-essential; the others are presumably essential for REPL support</p>",
        "id": 182185433,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040961
    },
    {
        "content": "<p>occasionally things have been made private or removed because ppl saw they were unsued in rustc, so adding annotations helps</p>",
        "id": 182185443,
        "sender_full_name": "oli",
        "timestamp": 1575040973
    },
    {
        "content": "<p>so one way we could run this meeting is to just walk through all of the proposed essential changes, and make sure we are comfortable with just that minimal list</p>",
        "id": 182185459,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575040991
    },
    {
        "content": "<p>(because if someone vetos an essential piece of this, then we really do need to make sure we loop <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span>  into the conversation)</p>",
        "id": 182185486,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041020
    },
    {
        "content": "<p>so lets see, lets follow the order given in the doc</p>",
        "id": 182185541,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041052
    },
    {
        "content": "<h3>Added an “interpreter mode” to the compiler interface.</h3>",
        "id": 182185545,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041054
    },
    {
        "content": "<p>At first I didn't understand why this needed to be used to \"prevent dead user variables from being optimised away.\" -- but I'm inferring that the problem there is when you do <code>let x = ...</code> in the repl, you want <code>x</code> to be kept around for the future repl inputs, right?</p>",
        "id": 182185589,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041116
    },
    {
        "content": "<p>yes</p>",
        "id": 182185600,
        "sender_full_name": "oli",
        "timestamp": 1575041127
    },
    {
        "content": "<p>otherwise the memory of the locals will have the wrong indices</p>",
        "id": 182185611,
        "sender_full_name": "oli",
        "timestamp": 1575041140
    },
    {
        "content": "<p>since the previous function's locals' memory is restored, if the MIR changes (except for adding more code), that's bad</p>",
        "id": 182185663,
        "sender_full_name": "oli",
        "timestamp": 1575041164
    },
    {
        "content": "<p>okay. Out of curiosity, are there other contexts where one would want that optimization to be disabled?</p>",
        "id": 182185674,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041180
    },
    {
        "content": "<p>probably not, this is  a very specific use case</p>",
        "id": 182185680,
        "sender_full_name": "oli",
        "timestamp": 1575041196
    },
    {
        "content": "<p>e.g. when you run under a debugger, for example? But I guess that's handled already for user-visible variables anyway?</p>",
        "id": 182185686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041206
    },
    {
        "content": "<p>any REPL design will need this, but I don't know of anything else that would want that</p>",
        "id": 182185689,
        "sender_full_name": "oli",
        "timestamp": 1575041208
    },
    {
        "content": "<p>I guess its a question only for when you need to support introspection</p>",
        "id": 182185719,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041226
    },
    {
        "content": "<p>Patching a running binary, perhaps</p>",
        "id": 182185720,
        "sender_full_name": "simulacrum",
        "timestamp": 1575041227
    },
    {
        "content": "<p>The reason I ask the question is to try to figure out if, in that case, there is a more general feature waiting to be exposed here.</p>",
        "id": 182185769,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041274
    },
    {
        "content": "<p>Not sure if <code>mir-opt-level=0</code> will leave in the variables</p>",
        "id": 182185814,
        "sender_full_name": "oli",
        "timestamp": 1575041287
    },
    {
        "content": "<p>but for now, I think its fine to have this functionality under an Interpreter boolean flag.</p>",
        "id": 182185816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041291
    },
    {
        "content": "<p>If you want to reintroduce a variable in the next eval, you would need to know which are being defined previously. You can then as well add something to keep the variables alive, like \"next_repl_round(&amp;[&amp;var1, &amp;var2])\"</p>",
        "id": 182185819,
        "sender_full_name": "bjorn3",
        "timestamp": 1575041292
    },
    {
        "content": "<p>that.... would work, too</p>",
        "id": 182185845,
        "sender_full_name": "oli",
        "timestamp": 1575041328
    },
    {
        "content": "<p>I suppose I should have asked this question up above: the design being propsed</p>",
        "id": 182185864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041347
    },
    {
        "content": "<p>says \"We then prepend local variables from previous evaluation sessions\"</p>",
        "id": 182185871,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041359
    },
    {
        "content": "<p>is that mean to be interpreted as \"we prepend <del>MIR</del> statements of the form <code>let FOO = EXPR</code>, N times\", where N is the number of previous repl invocations?</p>",
        "id": 182185894,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041393
    },
    {
        "content": "<p>I guess, but additionally some attributes are added</p>",
        "id": 182185967,
        "sender_full_name": "oli",
        "timestamp": 1575041435
    },
    {
        "content": "<p>I was personally wondering whether it would make more sense to have the generated closure take parameters</p>",
        "id": 182185978,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041451
    },
    {
        "content": "<p>and then you feed in the computed values</p>",
        "id": 182185984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041462
    },
    {
        "content": "<p>I think it is more like for each live variable add \"#[rustc_repl_alive] let var: type;\"</p>",
        "id": 182185995,
        "sender_full_name": "bjorn3",
        "timestamp": 1575041470
    },
    {
        "content": "<p>but this is just a design detail</p>",
        "id": 182186010,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041471
    },
    {
        "content": "<p>taking parameters would be problematic with stack pinning, i guess</p>",
        "id": 182186038,
        "sender_full_name": "bjorn3",
        "timestamp": 1575041512
    },
    {
        "content": "<p>whether you have arguments or locals makes little difference, in MIR everything is a local</p>",
        "id": 182186041,
        "sender_full_name": "oli",
        "timestamp": 1575041519
    },
    {
        "content": "<p>yea, also references to other locals would be a bit messy</p>",
        "id": 182186084,
        "sender_full_name": "oli",
        "timestamp": 1575041527
    },
    {
        "content": "<p>anyway, the design doc points out other things that are guarded by the Intepreter flag: \"a REPL-only intrinsic for casting a value to <code>dyn Debug</code>\", and a guard to ensure things meant to be interpreter-only stay interpreter-only.</p>",
        "id": 182186098,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041546
    },
    {
        "content": "<blockquote>\n<p>whether you have arguments or locals makes little difference, in MIR everything is a local</p>\n</blockquote>\n<p>well, the ancient REPL we had prior to Rust 1.0 did something pretty dumb where it really did prepend the entirety of all the previous REPL inputs to the curent input.</p>",
        "id": 182186154,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041610
    },
    {
        "content": "<p>so you did O(N) work on each repl invocation.</p>",
        "id": 182186168,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041622
    },
    {
        "content": "<p>I'm not quite sure why that intrinsic is needed. I believe we could generate a bit of MIR that does the downcasting directly, but I'm probably missing something</p>",
        "id": 182186180,
        "sender_full_name": "oli",
        "timestamp": 1575041640
    },
    {
        "content": "<p><a href=\"https://github.com/murarth/rusti\" target=\"_blank\" title=\"https://github.com/murarth/rusti\">https://github.com/murarth/rusti</a>?</p>",
        "id": 182186181,
        "sender_full_name": "bjorn3",
        "timestamp": 1575041641
    },
    {
        "content": "<blockquote>\n<p>so you did O(N) work on each repl invocation.</p>\n</blockquote>\n<p>that doesn't happen, computation starts at the new commands</p>",
        "id": 182186236,
        "sender_full_name": "oli",
        "timestamp": 1575041665
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/murarth/rusti\" target=\"_blank\" title=\"https://github.com/murarth/rusti\">https://github.com/murarth/rusti</a>?</p>\n</blockquote>\n<p>the one I'm thinking of ... used to be part of the project itself (I think).</p>",
        "id": 182186241,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041672
    },
    {
        "content": "<p>that's why the memory of the previous locals needs to be restored</p>",
        "id": 182186252,
        "sender_full_name": "oli",
        "timestamp": 1575041687
    },
    {
        "content": "<p>okay.</p>",
        "id": 182186258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041691
    },
    {
        "content": "<p>so far, it seems like no one (including me)  is saying that an Interpreter boolean flag is a terrible thing</p>",
        "id": 182186286,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041729
    },
    {
        "content": "<p>so I think we can safely move to the next essential addition.</p>",
        "id": 182186299,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041751
    },
    {
        "content": "<h3>built-in attribute for marking the “user fn” and a <code>TyCtxt</code> query for locating and caching it’s <code>DefId</code></h3>",
        "id": 182186353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041774
    },
    {
        "content": "<p>Apologies, all. I've been very unwell today, and my whole sense of time and schedule seems to have gone out the window!</p>",
        "id": 182186355,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575041777
    },
    {
        "content": "<p>although wait, both bullets under that are marked non-essential</p>",
        "id": 182186363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041786
    },
    {
        "content": "<p>I'm glad you've managed to proceed without me, it seems...</p>",
        "id": 182186368,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575041793
    },
    {
        "content": "<blockquote>\n<p>I'm not quite sure why that intrinsic is needed. I believe we could generate a bit of MIR that does the downcasting directly, but I'm probably missing something</p>\n</blockquote>\n<p>That is not possible at the syntax level when the closure is generated.</p>",
        "id": 182186376,
        "sender_full_name": "bjorn3",
        "timestamp": 1575041804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> we're currently walking through just the essential items</p>",
        "id": 182186381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041817
    },
    {
        "content": "<p>oh right, we don't generate MIR</p>",
        "id": 182186383,
        "sender_full_name": "oli",
        "timestamp": 1575041821
    },
    {
        "content": "<p>am I right in inferring that the attribute for marking the user fn is actually non-essential ?</p>",
        "id": 182186393,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041828
    },
    {
        "content": "<p>yeah, just looking through the backlog quickly now :-)</p>",
        "id": 182186396,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575041835
    },
    {
        "content": "<p>that's my impression, though it's certainly helpful</p>",
        "id": 182186402,
        "sender_full_name": "simulacrum",
        "timestamp": 1575041842
    },
    {
        "content": "<p>but at the syntax level you could just generate <code>let x: &amp;dyn Debug = &foo;</code> right?</p>",
        "id": 182186404,
        "sender_full_name": "oli",
        "timestamp": 1575041842
    },
    {
        "content": "<p>it's also a very minimal addition (i.e., basically just reserving the attribute or so)</p>",
        "id": 182186420,
        "sender_full_name": "simulacrum",
        "timestamp": 1575041869
    },
    {
        "content": "<p>okay</p>",
        "id": 182186469,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041884
    },
    {
        "content": "<p>about the attribute, why can't we reuse the <code>tcx.entry_fn(LOCAL_CRATE)</code> ?</p>",
        "id": 182186471,
        "sender_full_name": "oli",
        "timestamp": 1575041890
    },
    {
        "content": "<p>still lets move along just to make sure we get through the list of essential things</p>",
        "id": 182186476,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041898
    },
    {
        "content": "<p>is the closure inside main necessary or could the code also just be inside <code>main</code>?</p>",
        "id": 182186484,
        "sender_full_name": "oli",
        "timestamp": 1575041910
    },
    {
        "content": "<p>(because we are at the 38 minute mark, and I'd ideally like for us to at least ensure that we finish the Essentials list and then double-check if we're happy with the list of changes.)</p>",
        "id": 182186505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041932
    },
    {
        "content": "<p>so the next item is a set of Miri changes</p>",
        "id": 182186522,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041944
    },
    {
        "content": "<h3>Slightly expanded miri API</h3>",
        "id": 182186531,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041954
    },
    {
        "content": "<p>\"Added insert_alloc method to machine, used by REPL for restoring memory when deserialising previous evaluation session.\"</p>",
        "id": 182186546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041973
    },
    {
        "content": "<p>makes total sense, let's add it and leave a comment that it's for the REPL</p>",
        "id": 182186559,
        "sender_full_name": "oli",
        "timestamp": 1575041990
    },
    {
        "content": "<p>I take it this is what you were talking about <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-11-29/near/182186252\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-11-29/near/182186252\">above</a>, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  ?</p>",
        "id": 182186567,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575041999
    },
    {
        "content": "<p>I believe it's needed to restore a static's memory?</p>",
        "id": 182186608,
        "sender_full_name": "oli",
        "timestamp": 1575042003
    },
    {
        "content": "<p>Sure</p>",
        "id": 182186621,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042015
    },
    {
        "content": "<p>or is it for the incremental support, where the REPL wants its memory restored across distinct sessions of the REPL itself?</p>",
        "id": 182186654,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042053
    },
    {
        "content": "<p>well, the regular locals must be in InterpCx memory, otherwise you can't modify it</p>",
        "id": 182186672,
        "sender_full_name": "oli",
        "timestamp": 1575042075
    },
    {
        "content": "<p>Can <code>machine.alloc_map.insert</code> be used instead? Or is this about preserving the <code>AllocId</code>?</p>",
        "id": 182186686,
        "sender_full_name": "bjorn3",
        "timestamp": 1575042097
    },
    {
        "content": "<p>well, the <code>insert_alloc</code> is needed to restore Miri's dynamic memory, AFAIR</p>",
        "id": 182186687,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042100
    },
    {
        "content": "<p>huh?</p>",
        "id": 182186693,
        "sender_full_name": "oli",
        "timestamp": 1575042109
    },
    {
        "content": "<p>you can't mutate that memory</p>",
        "id": 182186696,
        "sender_full_name": "oli",
        "timestamp": 1575042113
    },
    {
        "content": "<p>everything inside <code>alloc_map</code> is forever frozen</p>",
        "id": 182186740,
        "sender_full_name": "oli",
        "timestamp": 1575042125
    },
    {
        "content": "<p>so in order to keep <code>AllocId</code>s to constants and statics working, this needs to be somewhere</p>",
        "id": 182186778,
        "sender_full_name": "oli",
        "timestamp": 1575042168
    },
    {
        "content": "<p>while it could be in InterpCx memory, that would just unnecessarily complicate things</p>",
        "id": 182186798,
        "sender_full_name": "oli",
        "timestamp": 1575042185
    },
    {
        "content": "<p>That's only the <code>tcx.alloc_map</code>, right? I meant the <code>alloc_map</code> of the machine.</p>",
        "id": 182186800,
        "sender_full_name": "bjorn3",
        "timestamp": 1575042190
    },
    {
        "content": "<p>yes, I'm talking of that too</p>",
        "id": 182186827,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042223
    },
    {
        "content": "<p>ah, so it's being pushed into the <code>Memory</code></p>",
        "id": 182186840,
        "sender_full_name": "oli",
        "timestamp": 1575042241
    },
    {
        "content": "<p>this</p>",
        "id": 182186880,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042244
    },
    {
        "content": "<p><code>pub type MiriMemory&lt;'mir, 'tcx&gt; = Memory&lt;'mir, 'tcx, Evaluator&lt;'tcx&gt;&gt;;</code></p>",
        "id": 182186882,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042245
    },
    {
        "content": "<p>can't you access the <code>Memory</code> directly?</p>",
        "id": 182186884,
        "sender_full_name": "oli",
        "timestamp": 1575042250
    },
    {
        "content": "<p>(in my fork of miri)</p>",
        "id": 182186886,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042255
    },
    {
        "content": "<p>why does it need a machine function?</p>",
        "id": 182186898,
        "sender_full_name": "oli",
        "timestamp": 1575042268
    },
    {
        "content": "<p>(also why is this restoring done per alloc instead of \"just\" implementing <code>RustcSerialize</code> and <code>RustcDeserialize</code> on <code>Memory</code>?</p>",
        "id": 182186942,
        "sender_full_name": "oli",
        "timestamp": 1575042314
    },
    {
        "content": "<p>btw everyone here's the <code>Memory</code> type we're talking about: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.Memory.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.Memory.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/struct.Memory.html</a></p>",
        "id": 182187007,
        "sender_full_name": "oli",
        "timestamp": 1575042370
    },
    {
        "content": "<p>the <code>alloc_map</code> field is <code>pub(super)</code></p>",
        "id": 182187017,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042382
    },
    {
        "content": "<p>so basically, yes</p>",
        "id": 182187024,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042387
    },
    {
        "content": "<p>so, re having <code>Memory</code> itself serialisable... there was a reason, let me recall</p>",
        "id": 182187067,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042435
    },
    {
        "content": "<p>ok, so it would need a public function on <code>Memory</code> to insert entries with specific ids</p>",
        "id": 182187068,
        "sender_full_name": "oli",
        "timestamp": 1575042435
    },
    {
        "content": "<p>makes sense</p>",
        "id": 182187076,
        "sender_full_name": "oli",
        "timestamp": 1575042444
    },
    {
        "content": "<p>right</p>",
        "id": 182187080,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042447
    },
    {
        "content": "<p>so we don't need to finalize the details here now</p>",
        "id": 182187085,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042457
    },
    {
        "content": "<p>possibly with some behaviour like <code>insert_same</code>. I wasn't sure.</p>",
        "id": 182187086,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042461
    },
    {
        "content": "<p>yes, good point <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>. let's not get bogged down in details..</p>",
        "id": 182187090,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042472
    },
    {
        "content": "<p>right</p>",
        "id": 182187092,
        "sender_full_name": "oli",
        "timestamp": 1575042475
    },
    {
        "content": "<p>the broader point is, it sounds like <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> agrees that some change is needed here to accomplish this</p>",
        "id": 182187097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042480
    },
    {
        "content": "<p>yes</p>",
        "id": 182187131,
        "sender_full_name": "oli",
        "timestamp": 1575042483
    },
    {
        "content": "<p>but it sounds like an appropriate change  can be worked out between you all</p>",
        "id": 182187155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042507
    },
    {
        "content": "<p>we can do the serialize vs manual discussion elsewhere</p>",
        "id": 182187156,
        "sender_full_name": "oli",
        "timestamp": 1575042507
    },
    {
        "content": "<p>likewise, there is a family of API changes described  as</p>",
        "id": 182187180,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042531
    },
    {
        "content": "<p>BTW, the closure in main is needed to have an type-inferred return value :-)</p>",
        "id": 182187185,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042535
    },
    {
        "content": "<h3>Added hooks before_statement, after_statement, before_stack_push (renamed existing method), after_stack_push, before_stack_pop, after_stack_pop (renamed existing method).</h3>",
        "id": 182187186,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042536
    },
    {
        "content": "<p>which for obvious reasons is desirable in a REPL</p>",
        "id": 182187196,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042542
    },
    {
        "content": "<p>yea these can just happen,</p>",
        "id": 182187200,
        "sender_full_name": "oli",
        "timestamp": 1575042544
    },
    {
        "content": "<p>I assume these hooks are fine</p>",
        "id": 182187207,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042547
    },
    {
        "content": "<p>and then there's this:</p>",
        "id": 182187213,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042554
    },
    {
        "content": "<p>they seem... consistent?</p>",
        "id": 182187216,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042555
    },
    {
        "content": "<h3>Made stack pop behaviour more flexible, so as to allow the cleanup flag to be independent of wherever the action is null or a “goto”.</h3>",
        "id": 182187217,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042556
    },
    {
        "content": "<p>hopefully @oli is okay with them</p>",
        "id": 182187230,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042569
    },
    {
        "content": "<p>I think there were recent changes about the cleanup that may make that obsolete</p>",
        "id": 182187236,
        "sender_full_name": "oli",
        "timestamp": 1575042574
    },
    {
        "content": "<p>the latter is \"even more\" necessary, yes</p>",
        "id": 182187237,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042575
    },
    {
        "content": "<p>Can you describe the stack pop changes, <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> ?</p>",
        "id": 182187240,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042577
    },
    {
        "content": "<p>oh right</p>",
        "id": 182187243,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042580
    },
    {
        "content": "<p>the the Machine changes are good</p>",
        "id": 182187244,
        "sender_full_name": "oli",
        "timestamp": 1575042581
    },
    {
        "content": "<blockquote>\n<p>BTW, the closure in main is needed to have an type-inferred return value :-)</p>\n</blockquote>\n<p>couldn't you also generate <code>let value = expr;</code> where the <code>expr</code> is the last statement by the user?</p>",
        "id": 182187316,
        "sender_full_name": "oli",
        "timestamp": 1575042620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> basically, it's important that we can exit a block / pop off the stack but still <em>not</em> perform cleanup (so as to be able to serialise the values of the locals when execution is done).</p>",
        "id": 182187352,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042664
    },
    {
        "content": "<p>/me idly wonders if <code>let value = expr;</code> gets into problems with r-value lifetime rules</p>",
        "id": 182187353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042664
    },
    {
        "content": "<p>that wasn't possible before.</p>",
        "id": 182187365,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042677
    },
    {
        "content": "<p>but perhaps it is now, even without my changes, if miri has been modified since.</p>",
        "id": 182187378,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042690
    },
    {
        "content": "<p>either way, something of that ilk is needed.</p>",
        "id": 182187384,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042697
    },
    {
        "content": "<p>ah I see, the cleanup here is the running of destructors and what not?</p>",
        "id": 182187398,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042708
    },
    {
        "content": "<p>probably not running destructors, but clearing the locals's memory</p>",
        "id": 182187458,
        "sender_full_name": "oli",
        "timestamp": 1575042728
    },
    {
        "content": "<p>makes sense that we need to do something there</p>",
        "id": 182187465,
        "sender_full_name": "oli",
        "timestamp": 1575042736
    },
    {
        "content": "<p>okay then. So it sounds like <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> is cool with that too</p>",
        "id": 182187490,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042754
    },
    {
        "content": "<p>the remaining bullet in the <a href=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw#Modifications-to-rustc\" target=\"_blank\" title=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw#Modifications-to-rustc\">design doc</a> is marked <strong>Non-Essential</strong></p>",
        "id": 182187510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042777
    },
    {
        "content": "<p>modulo details but we'll figure sth out that works</p>",
        "id": 182187513,
        "sender_full_name": "oli",
        "timestamp": 1575042780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> yes, that would be acceptable, I think, but would involve some more manipulation of the AST which seemed unnecessary. (that is, this seemed the simpler solution, at no noteworthy performance hit.)</p>",
        "id": 182187527,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042793
    },
    {
        "content": "<p>so maybe, given that we are at the 53 minute mark, it is a good time to take stock with what we've discussed so far</p>",
        "id": 182187535,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042802
    },
    {
        "content": "<p>it seems like these changes are indeed relatively non-invasive</p>",
        "id": 182187546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042815
    },
    {
        "content": "<p>cool</p>",
        "id": 182187550,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042819
    },
    {
        "content": "<p>and the main active stake-holder present (<span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ) is agreeable to them</p>",
        "id": 182187561,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042835
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> basically, it's important that we can exit a block / pop off the stack but still <em>not</em> perform cleanup (so as to be able to serialise the values of the locals when execution is done).</p>\n</blockquote>\n<p>Quoting myself</p>\n<blockquote>\n<p>If you want to reintroduce a variable in the next eval, you would need to know which are being defined previously. You can then as well add something to keep the variables alive, like \"next_repl_round(&amp;[&amp;var1, &amp;var2])\"</p>\n</blockquote>\n<p><code>next_repl_round</code> could just abort execution, so that the values can get saved without running the destructors.</p>",
        "id": 182187605,
        "sender_full_name": "bjorn3",
        "timestamp": 1575042843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> that's a bit awkward, because they can get destructed as soon as the block ends (not even the fn) which is before the \"user fn\" ends even</p>",
        "id": 182187654,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575042896
    },
    {
        "content": "<p>but I also know from the comment thread that <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> had some concerns, largely about wanting to be sure, before we commit, that this design was the one we want to commit to/</p>",
        "id": 182187677,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575042915
    },
    {
        "content": "<p>well some of the design points are universal</p>",
        "id": 182187725,
        "sender_full_name": "oli",
        "timestamp": 1575042958
    },
    {
        "content": "<p>any REPL would need them</p>",
        "id": 182187770,
        "sender_full_name": "oli",
        "timestamp": 1575042963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> When taking a reference to them as arguments, the variables must be kept alive.</p>",
        "id": 182187794,
        "sender_full_name": "bjorn3",
        "timestamp": 1575042987
    },
    {
        "content": "<p>yes. we ha a number of discussions before this meeting (a few weeks ago) and I even shared my prototype REPL repo with him. he basically said \"I understand why you took these design decisions, I'm not 100% convinced I agree with all of them, but equally I don't have major objections at this point in time\". that was a couple of weeks ago at least. I hope I'm not misrepresenting his view, and it hasn't changed much since then, but yeah...</p>",
        "id": 182187803,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043000
    },
    {
        "content": "<p>I think the main point was from  <a href=\"https://github.com/rust-lang/compiler-team/issues/213#issuecomment-550115205\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/213#issuecomment-550115205\">this comment</a>: </p>\n<blockquote>\n<p>it's a bit unusual for us to be accepting changes to make other projects viable into the tree proper</p>\n</blockquote>",
        "id": 182187809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043010
    },
    {
        "content": "<p>did Niko end up leaving notes on his thoughts about the design doc? I know he told me he would... but no worries if not.</p>",
        "id": 182187814,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043016
    },
    {
        "content": "<p>yes</p>",
        "id": 182187819,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043020
    },
    {
        "content": "<p>and we all agreed it's far from typical, but (I think) not unheard of, e.g. miri in its earlier days, priroda, clippy..</p>",
        "id": 182187839,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043043
    },
    {
        "content": "<p>right</p>",
        "id": 182187845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043049
    },
    {
        "content": "<p>and I think its fair to say that the changes, as described here, all sounds reasonable to the people present here</p>",
        "id": 182187855,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> oh right, I see now. well yes, that could work. I am personally of the opinion this is a cleaner solution though.</p>",
        "id": 182187889,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043083
    },
    {
        "content": "<blockquote>\n<p>did Niko end up leaving notes on his thoughts about the design doc? I know he told me he would... but no worries if not.</p>\n</blockquote>\n<p>I  don't know if they had time, to be honest</p>",
        "id": 182187921,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043099
    },
    {
        "content": "<p>yep, understandable <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 182187942,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043120
    },
    {
        "content": "<p>he can always leave post-hoc comments, no problem.</p>",
        "id": 182187951,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043134
    },
    {
        "content": "<p>Anyway, all of my comments at the end here are generally just to say that it seems like people are generally okay with moving forward with what you've laid out, at least the Essential portion</p>",
        "id": 182187983,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043167
    },
    {
        "content": "<p>(he'd done an initial review of the design doc some weeks ago, he told me, and we only discussed some very minor points. but obviously we can discuss any comments/concerns of his after he returns, if he has them.)</p>",
        "id": 182187996,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043179
    },
    {
        "content": "<p>I didn't allocate time to discuss the Non-Essentials.</p>",
        "id": 182188000,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043184
    },
    {
        "content": "<p>okay. there was some discussion of the intrinsic fn though... briefly?</p>",
        "id": 182188070,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043213
    },
    {
        "content": "<p>I opened <a href=\"#narrow/stream/131828-t-compiler/topic/REPL.3A.20dyn.20Debug.20intrinsic\" title=\"#narrow/stream/131828-t-compiler/topic/REPL.3A.20dyn.20Debug.20intrinsic\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/REPL.3A.20dyn.20Debug.20intrinsic</a> for that</p>",
        "id": 182188081,
        "sender_full_name": "oli",
        "timestamp": 1575043227
    },
    {
        "content": "<p>I replied to oli-obk's note on that on the design doc too.</p>",
        "id": 182188082,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043227
    },
    {
        "content": "<p>we can continue there</p>",
        "id": 182188087,
        "sender_full_name": "oli",
        "timestamp": 1575043230
    },
    {
        "content": "<p>I hope there's agreement that something of that sort is needed, roughly speaking</p>",
        "id": 182188092,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043238
    },
    {
        "content": "<p>Mostly it's me not getting it ^^</p>",
        "id": 182188093,
        "sender_full_name": "oli",
        "timestamp": 1575043239
    },
    {
        "content": "<p>ah okay</p>",
        "id": 182188095,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043239
    },
    {
        "content": "<p>that's fine</p>",
        "id": 182188100,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043244
    },
    {
        "content": "<p>the VFS thing can be discussed later. basically, it's an optimisation. something initially suggested by <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>, whom it might be good to get involved at some level.</p>",
        "id": 182188131,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043277
    },
    {
        "content": "<p>My main concern is one I alluded to at the beginning: Whether people trying to hack the compiler will encounter some piece of Interpreter-support functionality, and then get frustrated if they cannot find where it is used.</p>",
        "id": 182188138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043285
    },
    {
        "content": "<p>but the idea is of course to do PRs for the \"essential\" bits first.</p>",
        "id": 182188147,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043297
    },
    {
        "content": "<p>But we've already outlined ways to mitigate that</p>",
        "id": 182188149,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043302
    },
    {
        "content": "<p>and then more discussion on the non-essential parts can either be discussed in those PRs, special issues, or another design meeting.</p>",
        "id": 182188158,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043317
    },
    {
        "content": "<p>Sounds great</p>",
        "id": 182188197,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043323
    },
    {
        "content": "<p>okay, glad to hear <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 182188202,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043325
    },
    {
        "content": "<p>Does anyone have any questions?</p>",
        "id": 182188206,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043329
    },
    {
        "content": "<p>Doesn't look like it. I'm going to declare this meeting to be over, then.</p>",
        "id": 182188232,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I have some time free now after the meeting (if I can keep my focus!), so if you want to stay and discuss alternative Cranelift backend stuff, for a bit, that's cool with me.</p>",
        "id": 182188246,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043383
    },
    {
        "content": "<p>Thanks to <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> for attending. And thanks to <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> for all the work you've put into this</p>",
        "id": 182188251,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043391
    },
    {
        "content": "<p>Thanks for your time, everyone.</p>",
        "id": 182188252,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043392
    },
    {
        "content": "<p>(both in source code and in explanatory docs)</p>",
        "id": 182188267,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575043403
    },
    {
        "content": "<p>Great we could sort this out. :-)</p>",
        "id": 182188273,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043412
    },
    {
        "content": "<p>No problem <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 182188281,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> Can we talk in about an hour? It's time for diner.</p>",
        "id": 182188344,
        "sender_full_name": "bjorn3",
        "timestamp": 1575043473
    },
    {
        "content": "<p>Cheerio.</p>",
        "id": 182188349,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> that should work, I think. I'll create a separate topic for it. see you at 5:00 GMT?</p>",
        "id": 182188365,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043504
    },
    {
        "content": "<p>I also opened <a href=\"#narrow/stream/131828-t-compiler/topic/REPL.3A.20closure.20vs.20locals\" title=\"#narrow/stream/131828-t-compiler/topic/REPL.3A.20closure.20vs.20locals\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/REPL.3A.20closure.20vs.20locals</a> for the closure <code>user_fn</code> discussion</p>",
        "id": 182188398,
        "sender_full_name": "oli",
        "timestamp": 1575043528
    },
    {
        "content": "<p>okay, sounds fair</p>",
        "id": 182188465,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> BTW, would you mind leaving a brief comment on my design doc issue at some point, just so people can see that we've approved the non-essential points? Just as a sort of indication we're moving forward with PRs, and that non-essential points are also being discussed now, but won't have PRs in the immediate future. :-)</p>",
        "id": 182193581,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575048885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> even better: someone (maybe me) will be posting a summary of today's meeting on the compiler-team site.</p>",
        "id": 182201615,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575058254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> ah, super. cheers.</p>",
        "id": 182201706,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575058421
    }
]