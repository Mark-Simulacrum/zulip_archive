[
    {
        "content": "<p>As a new contributor to rustc, I got a bit confused about the MaybeResult trait. I have a variable where the only type bound is MaybeResult&lt;...&gt;, and I would like my function to return an Option&lt;..&gt; based on the value of the MaybeResult variable I have. I have not encountered this trait before so I am not sure how to work with it. </p>\n<p>Is possible to turn a MaybeResult&lt;T&gt; into an Option&lt;T&gt;? Or would I be better off changing the function signature to return a MaybeResult&lt;..&gt; as well? </p>\n<p>I am also kind of curious what the design rationale is behind the trait itself.</p>",
        "id": 152470033,
        "sender_full_name": "Daan de Graaf",
        "timestamp": 1545658513
    },
    {
        "content": "<p>You can find the rustdoc for <code>MaybeResult</code> <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/layout/trait.MaybeResult.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/layout/trait.MaybeResult.html\">here</a>. From the implementors it has it appears that this is either just <code>T</code> or <code>Result&lt;T, E&gt;</code>.</p>",
        "id": 152470725,
        "sender_full_name": "nagisa",
        "timestamp": 1545659919
    },
    {
        "content": "<p>So yes, you should be able to convert a <code>T: MaybeResult&lt;...&gt;</code> to an <code>Option</code> fairly easily.</p>",
        "id": 152470739,
        "sender_full_name": "nagisa",
        "timestamp": 1545659970
    },
    {
        "content": "<p>There two ways to approach this, actually</p>",
        "id": 152470808,
        "sender_full_name": "nagisa",
        "timestamp": 1545660098
    },
    {
        "content": "<p>one is to simply add a method to the trait that does exactly the conversion you want.</p>",
        "id": 152470810,
        "sender_full_name": "nagisa",
        "timestamp": 1545660117
    },
    {
        "content": "<p>the other would be something along the lines of</p>",
        "id": 152470848,
        "sender_full_name": "nagisa",
        "timestamp": 1545660124
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">MaybeResult</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">V</span><span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"p\">(...)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 152470867,
        "sender_full_name": "nagisa",
        "timestamp": 1545660240
    },
    {
        "content": "<p>changing <code>Into</code> into your trait in this case, because there is no such implementation like <code>Result&lt;T, E&gt;: Into&lt;Option&lt;T&gt;&gt;</code>.</p>",
        "id": 152470932,
        "sender_full_name": "nagisa",
        "timestamp": 1545660267
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>! I think I should be able to get both those options working, I'll try the second option for now just to not mess too much with the trait itself</p>",
        "id": 152471074,
        "sender_full_name": "Daan de Graaf",
        "timestamp": 1545660571
    },
    {
        "content": "<p>I think changing the trait itself is a better and cleaner option overall</p>",
        "id": 152471117,
        "sender_full_name": "nagisa",
        "timestamp": 1545660603
    },
    {
        "content": "<p>Yes that's true for sure, I just do not feel very confident in changing the trait without really knowing how it's normally used <span class=\"emoji emoji-1f605\" title=\"sweat smile\">:sweat_smile:</span>. For example, I have no idea how an implementation can pull a <code>T</code> from a <code>MaybeResult&lt;T&gt;</code> without a method like <code>into_option()</code> or <code>unwrap</code> available. Then again, maybe that should not stop me from experimenting</p>",
        "id": 152471344,
        "sender_full_name": "Daan de Graaf",
        "timestamp": 1545660995
    },
    {
        "content": "<p>I ended up just adding an <code>ok()</code> method to the trait, corresponding to the <code>ok()</code> on normal <code>Result&lt;T&gt;</code>. It is indeed a much cleaner solution, and I think it makes sense given that the trait is so closely related to <code>Result</code>. <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span></p>",
        "id": 152472053,
        "sender_full_name": "Daan de Graaf",
        "timestamp": 1545662234
    }
]