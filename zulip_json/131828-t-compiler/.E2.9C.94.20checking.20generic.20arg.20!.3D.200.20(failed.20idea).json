[
    {
        "content": "<p>at the type level we could do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">marker</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and then have <code>Foo&lt;C&gt;: Bar</code> bounds</p>",
        "id": 248468052,
        "sender_full_name": "oli",
        "timestamp": 1628165324
    },
    {
        "content": "<p>that doesn't work rn</p>",
        "id": 248479216,
        "sender_full_name": "lcnr",
        "timestamp": 1628171342
    },
    {
        "content": "<p>and I think it's close to impossible to implement soundly in the general case. Even without lifetimes we still have to be careful that <code>foo&lt;T: Bar&gt;(v: T)</code> sees the negative impl as well as the general one</p>",
        "id": 248479469,
        "sender_full_name": "lcnr",
        "timestamp": 1628171443
    },
    {
        "content": "<p>otherwise we end up with the auto trait unsoundness from <a href=\"https://github.com/rust-lang/rust/issues/84857\">#84857</a></p>",
        "id": 248479535,
        "sender_full_name": "lcnr",
        "timestamp": 1628171473
    },
    {
        "content": "<p>i don't think we want some sort of \"unless\" impls, i.e. implement trait unless the following condition holds</p>",
        "id": 248479611,
        "sender_full_name": "lcnr",
        "timestamp": 1628171511
    },
    {
        "content": "<p>right, that just pushes the problem elsewhere</p>",
        "id": 248479749,
        "sender_full_name": "oli",
        "timestamp": 1628171563
    },
    {
        "content": "<p>negative impls do (and afaik should) only convert \"might impl Trait\" to \"does not impl Trait\"</p>",
        "id": 248479800,
        "sender_full_name": "lcnr",
        "timestamp": 1628171586
    },
    {
        "content": "<p>not \"does impl Trait\" to \"does not impl Trait\"</p>",
        "id": 248479828,
        "sender_full_name": "lcnr",
        "timestamp": 1628171596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> has marked this topic as resolved.</p>",
        "id": 248498981,
        "sender_full_name": "Notification Bot",
        "timestamp": 1628179712
    }
]