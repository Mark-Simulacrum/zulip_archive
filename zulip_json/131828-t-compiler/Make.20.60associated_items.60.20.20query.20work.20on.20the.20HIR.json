[
    {
        "content": "<p>Currently, we have a query that returns a list of the <a href=\"https://github.com/rust-lang/rust/blob/5e7af4669f80e5f682141f050193ab679afdb4b1/src/librustc_ty/ty.rs#L192\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5e7af4669f80e5f682141f050193ab679afdb4b1/src/librustc_ty/ty.rs#L192\"><code>DefId</code>s for all associated items</a>, as well as a query that finds the <code>ty::AssocItem</code> for the <a href=\"https://github.com/rust-lang/rust/blob/5e7af4669f80e5f682141f050193ab679afdb4b1/src/librustc_ty/ty.rs#L130\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5e7af4669f80e5f682141f050193ab679afdb4b1/src/librustc_ty/ty.rs#L130\">associated item with the given <code>DefId</code></a> using a linear (<code>O(n)</code>) search.  Finally, we have an <code>associated_items</code> query which returns <a href=\"https://github.com/rust-lang/rust/blob/5e7af4669f80e5f682141f050193ab679afdb4b1/src/librustc_ty/ty.rs#L213\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/5e7af4669f80e5f682141f050193ab679afdb4b1/src/librustc_ty/ty.rs#L213\">a list of <code>ty::AssocItem</code></a>. This query is implemented by calling <code>associated_item</code> on each <code>DefId</code> returned by <code>associated_item_def_ids</code>, meaning it takes <code>O(nÂ²)</code> time where <code>n</code> is the number of associated items. It would be better if <code>associated_items</code> was saved cross crate and could inspect the HIR for the local crate like <code>associated_item_def_ids</code> does.</p>",
        "id": 188342932,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581894159
    },
    {
        "content": "<p>I want to do away with the <code>associated_item_def_ids</code> query and cache the results of <code>associated_items</code> cross-crate. <code>ty::AssocItem</code> is a small, <code>Copy</code> header that already contains the <code>DefId</code> for that item. This would avoid the quadratic behavior.</p>",
        "id": 188343046,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581894396
    },
    {
        "content": "<p>Does this sound reasonable? I'm still a little fuzzy about when query implementations are allowed to access the HIR and other info that is only available locally. I think I need to implement something in <code>rmeta</code> and ensure that <code>associated_items</code> gets called for each item before we finish compiling the local crate. Is this correct?</p>",
        "id": 188343153,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581894658
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> who has answered my questions about the query system in the past.</p>",
        "id": 188343173,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581894722
    },
    {
        "content": "<p>As an aside, I noticed this while inspecting perf results for the example in <a href=\"https://github.com/rust-lang/rust/issues/68957\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68957\">#68957</a>. After making name lookup, which used to take 60% of CPU time,  <code>O(log n)</code> in <a href=\"https://github.com/rust-lang/rust/issues/69072\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69072\">#69072</a>, <code>associated_item</code> became hot, accounting for 25% of CPU time.</p>",
        "id": 188343387,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581895145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> What do you think about adding a benchmark to rustc-perf that has a lot of associated items? I would understand if the answer is no considering the  current backlog on the perf server coupled with the time it took before someone realized this was slow.</p>",
        "id": 188343490,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581895341
    },
    {
        "content": "<p>Sounds like a good idea! I've added <code>associated_items</code> as a stopgap cache for some even more pathological behavior, but didn't realize that the work it was doing was still quadratic.</p>",
        "id": 188343493,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1581895354
    },
    {
        "content": "<p>FWIW I was looking into rustc performance on generated crates used in the embedded ecosystem and plan to add one to perf as well. That's what inspired the <code>associated_items</code> query addition and my coherence perf improvements.</p>",
        "id": 188343547,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1581895452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> I think it's a great idea! The benchmark should take no longer than 2 seconds, approximately, on current master.</p>",
        "id": 188343556,
        "sender_full_name": "simulacrum",
        "timestamp": 1581895491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> Did you do that relatively recently? Like the last month or so? If so, you probably fixed the majority of <a href=\"https://github.com/rust-lang/rust/issues/68957\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68957\">#68957</a>, which has  gotten a lot faster of late.</p>",
        "id": 188343563,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581895519
    },
    {
        "content": "<p>Yep, I think so too :)</p>",
        "id": 188343566,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1581895535
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Is that for a check build or an opt build?</p>",
        "id": 188343613,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581895585
    },
    {
        "content": "<p>I imagine it won't matter much as the benchmark should likely not generate that much LLVM IR</p>",
        "id": 188343616,
        "sender_full_name": "simulacrum",
        "timestamp": 1581895601
    },
    {
        "content": "<p>if any</p>",
        "id": 188343621,
        "sender_full_name": "simulacrum",
        "timestamp": 1581895616
    }
]