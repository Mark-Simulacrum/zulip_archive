[
    {
        "content": "<p>I'm wondering if bors should stop prioritizing old PRs over new PRs and instead just prioritize based on how long ago they were approved? I have a rollup=never PR that's been sitting in the queue without ever reaching the front for 4 days: <a href=\"https://github.com/rust-lang/rust/issues/92601\">#92601</a>. And even now it's 7 PRs from the front!</p>\n<p>I know there are advantages to having old PRs, regardless of approval time, getting priority, but it's really frustrating when your PR is sitting for so long. In my case, it's blocking several other PRs I'm working on, so it's especially frustrating.</p>",
        "id": 267468719,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641834489
    },
    {
        "content": "<p>IIRC, there was a discussion on internals about this a while back</p>",
        "id": 267468972,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641834605
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/homu-queue-woes-and-suggestions-on-how-to-fix-them/8954\">https://internals.rust-lang.org/t/homu-queue-woes-and-suggestions-on-how-to-fix-them/8954</a></p>",
        "id": 267469076,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641834650
    },
    {
        "content": "<p>I also think that the situation has been especially bad the last few weeks</p>",
        "id": 267469307,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641834749
    },
    {
        "content": "<p>So I don't have to read through the whole thread, what was the conclusion?</p>",
        "id": 267469317,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641834755
    },
    {
        "content": "<p>Was there opposition to the priority change?</p>",
        "id": 267469333,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641834765
    },
    {
        "content": "<p>We've hard a large number of rollup=never prs, and a large number of spurious failure/timeouts</p>",
        "id": 267469337,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641834771
    },
    {
        "content": "<p>ralfjung was strongly opposed, due to the fact that it would increase pressure on reviewers</p>",
        "id": 267469355,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641834785
    },
    {
        "content": "<p>since prs would effectively be 'penalized' for taking a long time to get the first r+</p>",
        "id": 267469373,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641834796
    },
    {
        "content": "<p>I mean, the sooner you approve, the sooner a PR will get merged anyway, no?</p>",
        "id": 267469409,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641834823
    },
    {
        "content": "<p>Usually</p>",
        "id": 267469439,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641834839
    },
    {
        "content": "<p>but if I had a really old pr, then an r+ might bring it to the front of the queue</p>",
        "id": 267469506,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641834852
    },
    {
        "content": "<p>that's happened to me several times</p>",
        "id": 267469515,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641834857
    },
    {
        "content": "<p>at the risk of sounding like a broken record, it's also unfortunate that some of our runners (particularly apple ones) take so long</p>",
        "id": 267469666,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641834936
    },
    {
        "content": "<p>Yeah, I've had that happen too... but I guess I'd rather sacrifice that than have the current situation</p>",
        "id": 267469675,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641834948
    },
    {
        "content": "<p>a shorter build time would put some pressure on the perf server, but would otherwise be great</p>",
        "id": 267469701,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1641834958
    },
    {
        "content": "<p>Yeah, but not sure how much we can do about that</p>",
        "id": 267469769,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641834980
    },
    {
        "content": "<p>Although at this point I think the biggest issue is the spurious failures and timeouts</p>",
        "id": 267469785,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641834991
    },
    {
        "content": "<p>I don't really understand why the early steps of the build spuriously fail so often (like the downloads fail)</p>",
        "id": 267469818,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641835011
    },
    {
        "content": "<p>Here's an idea: What if we kept the current sorting behavior, but added a special automatic priority bump to PRs that have been waiting in the queue longer than, say, 3 days?</p>",
        "id": 267470646,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641835466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> would that solve your concern?</p>",
        "id": 267470675,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641835488
    },
    {
        "content": "<blockquote>\n<p>Yeah, but not sure how much we can do about that</p>\n</blockquote>\n<p>Crossbuild apple? Hackintosh?</p>",
        "id": 267472749,
        "sender_full_name": "The 8472",
        "timestamp": 1641836392
    },
    {
        "content": "<p>Also, is waiting a few days all that bad in comparison waiting weeks or months for a review?</p>",
        "id": 267472830,
        "sender_full_name": "The 8472",
        "timestamp": 1641836412
    },
    {
        "content": "<p>If it absolutely must go in one can still bump priority</p>",
        "id": 267472952,
        "sender_full_name": "The 8472",
        "timestamp": 1641836465
    },
    {
        "content": "<p>I'm mostly just frustrated because I have another PR that's blocked on it, and then another PR that's blocked on <em>that one</em></p>",
        "id": 267473475,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641836692
    },
    {
        "content": "<p>that's annoying but is it common enough to build a policy around that?</p>",
        "id": 267473827,
        "sender_full_name": "The 8472",
        "timestamp": 1641836845
    },
    {
        "content": "<p>I wasn't really proposing to build a policy around <em>that</em>, just to add a mechanism to bors that would make sure PRs don't keep falling further and further behind in the queue</p>",
        "id": 267473955,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641836893
    },
    {
        "content": "<p>That way you'd know that it's very likely your PR will be merged within a few days</p>",
        "id": 267474043,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641836946
    },
    {
        "content": "<p>that feels like rearranging deck chairs on the titanic a bit. if the queue gets longer and longer then there's a bigger problem</p>",
        "id": 267474057,
        "sender_full_name": "The 8472",
        "timestamp": 1641836950
    },
    {
        "content": "<p>Well, yes, there is a bigger problem. I think this would just help a bit</p>",
        "id": 267474158,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bors.3A.20stop.20prioritizing.20old.20PRs.20over.20new.20PRs/near/267473475\">said</a>:</p>\n<blockquote>\n<p>I'm mostly just frustrated because I have another PR that's blocked on it, and then another PR that's blocked on <em>that one</em></p>\n</blockquote>\n<p>If you have a lot of other work blocked on that PR landing, I don't personally see an issue with asking the approver to <code>p=1</code> your PR. At the same time, we should be careful not to let every PR in the queue be marked <code>p=1</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 267474433,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1641837114
    },
    {
        "content": "<p>It's not clear to me that PRs <em>should</em> fall further behind in queue with current rules: the older the PR, the higher up it will be naturally, so as you wait you're naturally increasing in priority, right?</p>",
        "id": 267474725,
        "sender_full_name": "simulacrum",
        "timestamp": 1641837222
    },
    {
        "content": "<p>Except that all the time, other PRs are being approved, which may be older than mine</p>",
        "id": 267474764,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837241
    },
    {
        "content": "<p>Eventually, mine will get merged, but it's hard to know when that'll be.</p>",
        "id": 267474829,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837252
    },
    {
        "content": "<p>It could be tomorrow, it could be in several more days</p>",
        "id": 267474841,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837258
    },
    {
        "content": "<p>I can <code>p=1</code> it myself, I just wasn't sure of the etiquette :)</p>",
        "id": 267474888,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837277
    },
    {
        "content": "<p>Sure, but that seems true under any system? Other than \"this PR must be next\", it seems like there's always some uncertainty</p>",
        "id": 267474918,
        "sender_full_name": "simulacrum",
        "timestamp": 1641837288
    },
    {
        "content": "<p>(in general, everyone wants their PR to be next, most of the time :)</p>",
        "id": 267474944,
        "sender_full_name": "simulacrum",
        "timestamp": 1641837299
    },
    {
        "content": "<p>Yes, but I think this priority system has more uncertainty than others</p>",
        "id": 267475050,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837335
    },
    {
        "content": "<p>eh, not on things that have been sitting for months, they can wait a few more days.</p>",
        "id": 267475135,
        "sender_full_name": "The 8472",
        "timestamp": 1641837356
    },
    {
        "content": "<p>In this case, since most of the other rollup=never PRs don't seem to be blocking anything, I'll <code>p=1</code> mine</p>",
        "id": 267475292,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837387
    },
    {
        "content": "<p>In my recent experience, rollup=iffy are the \"worst\" ones. They get pushed behind everything else in the queue (never is higher, rollups skip to the front).</p>",
        "id": 267475383,
        "sender_full_name": "Chris Denton",
        "timestamp": 1641837410
    },
    {
        "content": "<p>Except that sometimes they are rolled-up, in which case they might be faster</p>",
        "id": 267475529,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837445
    },
    {
        "content": "<p>Part of the issue right now is just how many <code>rollup=never</code> PRs are in the queue. Perhaps when we have a certain number of <code>rollup=never</code> PRs in the queue, we should be less aggressive about how many rollups we do?</p>",
        "id": 267475765,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1641837518
    },
    {
        "content": "<p>(perhaps we already are, I'm unsure of the rules around rollups)</p>",
        "id": 267475890,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1641837563
    },
    {
        "content": "<p>Yeah, I was thinking the same thing</p>",
        "id": 267475900,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837569
    },
    {
        "content": "<p>Maybe it'd also be good to run perf before approving more often so you can remove <code>rollup=never</code> if there's no perf effect</p>",
        "id": 267476088,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837618
    },
    {
        "content": "<p>the rollup page says one should consider this case, but afaict there usually are rollups being made whenever there are enough PRs for it</p>",
        "id": 267476104,
        "sender_full_name": "The 8472",
        "timestamp": 1641837622
    },
    {
        "content": "<p>modulo humans being asleep</p>",
        "id": 267476242,
        "sender_full_name": "The 8472",
        "timestamp": 1641837681
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> could you maybe pause on rollups for a day or two to help the rollup=never backlog clear?</p>",
        "id": 267476280,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837696
    },
    {
        "content": "<p>Actually one day should probably be enough to trim it down significantly</p>",
        "id": 267476484,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bors.3A.20stop.20prioritizing.20old.20PRs.20over.20new.20PRs/near/267476088\">said</a>:</p>\n<blockquote>\n<p>Maybe it'd also be good to run perf before approving more often so you can remove <code>rollup=never</code> if there's no perf effect</p>\n</blockquote>\n<p>It'd also be nice if <code>@bors try</code> worked even when a PR was approved, for this use case</p>",
        "id": 267476753,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641837864
    },
    {
        "content": "<p>Yeah so rollup=iffy is kinda of useless in my opinion because to me it signals \"better not roll it up, it might prevent us from merging several others in one go\" while it always gets put below rollup=never...</p>\n<p>We had a bunch of CI troubles in the past week with only ~28 prs merged instead of the usual 40-50<br>\n<a href=\"https://rust-lang.github.io/rustc-pr-tracking/\">https://rust-lang.github.io/rustc-pr-tracking/</a></p>",
        "id": 267478772,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641838831
    },
    {
        "content": "<p>imo removing rollup=never from PRS that don't have any perf effect is definitely a good idea to improve rollupability</p>",
        "id": 267478878,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641838888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span>  mmh I'm kind of against that because it might just make queue longer and longer :/<br>\nIn the last 24 hours we had 27 new PRs while we can only merge perhaps 7 if we are lucky, that would be a surplus of 20 prs per day...</p>",
        "id": 267479230,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641839048
    },
    {
        "content": "<p>I know it's not ideal, but there are a bunch of rollup=never PRs that get stuck in the queue for days and have a much reduced chance to reach the front anytime soon because rollups get in the way</p>",
        "id": 267479399,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641839147
    },
    {
        "content": "<p>Well sure we can try it for today(tomorrow?) but we should also have some better long term solution</p>",
        "id": 267479717,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641839285
    },
    {
        "content": "<p>Agreed</p>",
        "id": 267479775,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641839310
    },
    {
        "content": "<p>like dropping apple support \\s</p>",
        "id": 267479951,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641839388
    },
    {
        "content": "<p>the queue has grown quite a bit in december<br>\n<a href=\"/user_uploads/4715/bvo6nD-WErtgv3AQGhsAZbpx/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/bvo6nD-WErtgv3AQGhsAZbpx/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/bvo6nD-WErtgv3AQGhsAZbpx/image.png\"></a></div>",
        "id": 267480426,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641839590
    },
    {
        "content": "<p>Yeah, it seems we had a sharp uptick in total PRs. Maybe more people contributing to Rust during the holidays?</p>",
        "id": 267480609,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641839683
    },
    {
        "content": "<p>Probably a combination of that and many reviewers taking time away from Rust for the holidays.</p>",
        "id": 267481536,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1641840120
    },
    {
        "content": "<p>Ah, good point</p>",
        "id": 267481601,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641840140
    },
    {
        "content": "<p>would it perhaps help to move rustdoc to a separate repo (like clippy/rustfmt/miri) so that not ever rustdoc PR would need 3.5 hours of CI time?<br>\nrustdoc would then be synced once a week or so like the other tools</p>",
        "id": 267483355,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641840998
    },
    {
        "content": "<p>I've thought about it, and I think Joshua was working towards it at some point, but I'm not sure it'd be worth it. Rustdoc is very tightly tied into rustc, so it'd make changes that affect both rustc and rustdoc more annoying</p>",
        "id": 267484384,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641841424
    },
    {
        "content": "<p>It seems like it'd be better to just make CI faster ;)</p>",
        "id": 267484487,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641841477
    },
    {
        "content": "<p>well ofc :D</p>",
        "id": 267484549,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641841502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> are there any stats as to how often bors fails?</p>",
        "id": 267486773,
        "sender_full_name": "Jack Huey",
        "timestamp": 1641842490
    },
    {
        "content": "<p>And to go along: any idea how often <em>rollups</em> fail?</p>",
        "id": 267486996,
        "sender_full_name": "Jack Huey",
        "timestamp": 1641842570
    },
    {
        "content": "<p>I've been wondering the same thing</p>",
        "id": 267488121,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641843052
    },
    {
        "content": "<p>not that I'm aware of</p>",
        "id": 267488172,
        "sender_full_name": "simulacrum",
        "timestamp": 1641843080
    },
    {
        "content": "<p>That would probably be useful data</p>",
        "id": 267488443,
        "sender_full_name": "Jack Huey",
        "timestamp": 1641843232
    },
    {
        "content": "<p>Could better tune rollup size, could maybe decide that adding some kind of check to the PR CI might decrease bors failures (maybe NLL tests, for example)</p>",
        "id": 267488580,
        "sender_full_name": "Jack Huey",
        "timestamp": 1641843301
    },
    {
        "content": "<p>Yeah, I'd really like it for NLL tests to be run on CI -- it's a common annoying source of bors failures</p>",
        "id": 267491002,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641844530
    },
    {
        "content": "<p>From a libs point of view, PRs which touch OS-specific code often fail on bors because non-Linux targets are not tested on CI. It would be useful to have a variant of bors try which tests a PR on all targets without blocking the bors queue.</p>",
        "id": 267493315,
        "sender_full_name": "Amanieu",
        "timestamp": 1641845553
    },
    {
        "content": "<p>AFAIK there is not enough CI capacity for that. Try builds used to run on all targets long ago.</p>",
        "id": 267494135,
        "sender_full_name": "bjorn3",
        "timestamp": 1641845982
    },
    {
        "content": "<p>Maybe bors try could get an extra argument specifying which target to use? That would be easier than editing the workflow file as is necessary right now.</p>",
        "id": 267494257,
        "sender_full_name": "bjorn3",
        "timestamp": 1641846036
    },
    {
        "content": "<p>I think most of the failures I am seeing are spurious timeouts,test failures / download 404s, stuff of architectures that the \"light\" ci does not run (what Amanieu said) on and sometimes interaction between 2 prs in the rollup or with pr that merged last with one of the rolled up ones like renamed functions, added arguments etc, stuff that is not detected by simple merge conflicts</p>",
        "id": 267497793,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641847910
    },
    {
        "content": "<p>when I have the time and capacity I sometimes <code>x.py test</code> the rollup-pr on my machine locally while its waiting in the queue to be picked up so I know if its going to fail beforehand and can cancel it but that's not really optimal <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 267498082,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641848050
    },
    {
        "content": "<p>I was suggesting a variant of try (<code>@bors try-all</code>) which would have to be specifically opted into. That was it would only be used on the few PRs that need it.</p>",
        "id": 267500327,
        "sender_full_name": "Amanieu",
        "timestamp": 1641849040
    },
    {
        "content": "<p>servo's CI has/had something like this (but IIRC uses a different bot, and mozilla's taskcluster) for <code>try</code> builds on different platforms <a href=\"https://github.com/servo/servo/blob/5df705a41f6c4c1f2ffeec257dfe0129ce5fa8e0/etc/taskcluster/decision_task.py#L45-L52\">https://github.com/servo/servo/blob/5df705a41f6c4c1f2ffeec257dfe0129ce5fa8e0/etc/taskcluster/decision_task.py#L45-L52</a></p>",
        "id": 267503125,
        "sender_full_name": "lqd",
        "timestamp": 1641850255
    },
    {
        "content": "<p>do we have a list of all the bors test failures, similar to the retry list?</p>",
        "id": 267509605,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641853116
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bors.3A.20stop.20prioritizing.20old.20PRs.20over.20new.20PRs/near/267486773\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> are there any stats as to how often bors fails?</p>\n</blockquote>\n<p>^</p>",
        "id": 267511829,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641854314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bors.3A.20stop.20prioritizing.20old.20PRs.20over.20new.20PRs/near/267468719\">said</a>:</p>\n<blockquote>\n<p>I'm wondering if bors should stop prioritizing old PRs over new PRs and instead just prioritize based on how long ago they were approved?</p>\n</blockquote>\n<p>I used to rage about this, but now I'm just numb to it</p>",
        "id": 267521239,
        "sender_full_name": "nnethercote",
        "timestamp": 1641860512
    },
    {
        "content": "<p>The current queue is the worst I've ever seen, though. 10 <code>always</code> PRs and 19 other PRs approved? yikes</p>",
        "id": 267521344,
        "sender_full_name": "nnethercote",
        "timestamp": 1641860580
    },
    {
        "content": "<p>Yeah, it's been pretty bad recently</p>",
        "id": 267521818,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641860985
    },
    {
        "content": "<p>It seems like it fails very often. Is there any mitigation strategies we could try? Like bigger rollups if a spurious failure happens?</p>",
        "id": 267522057,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1641861171
    },
    {
        "content": "<p>Do we cache any of the dependencies? That could be an option if they are unchanged and we're getting failures due to the fetching of modules</p>",
        "id": 267523695,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1641862643
    },
    {
        "content": "<p>Hmm, interesting idea. I'm curious what T-infra thinks.</p>",
        "id": 267524156,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641862958
    },
    {
        "content": "<p>I'm not sure what \"dependencies\" means in this context, but in general most builds should only be hitting our S3 buckets already (and most network requests have ~3 retries regardless to the extent we can) - in general, our builds don't have much in the way of avoidable network traffic. We in theory could push that out of internet and into local data centers - e.g. with GitHub actions caches and such - but those are typically likely to cause overhead and pain of their own kind.</p>",
        "id": 267526485,
        "sender_full_name": "simulacrum",
        "timestamp": 1641864982
    },
    {
        "content": "<p>Why <em>do</em> we have so many spurious network failures? Should the retry count be increased—would that help?</p>",
        "id": 267527160,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641865576
    },
    {
        "content": "<p>Networks are sufficiently unreliable at our scale? I don't know whether these particular machines are on some kind of faulty network or the faults are real in some way.</p>\n<p>My guess is that most network problems we see aren't fixable with extra retries (e.g., whole network card is down for some reason), but we've never put serious investigation to that question I think.</p>",
        "id": 267527424,
        "sender_full_name": "simulacrum",
        "timestamp": 1641865889
    },
    {
        "content": "<p>I'll try to go through the closed/merged prs of the last 7 days and see what most of the bors failures are...<br>\nit will not be 100% accurate since not everything that was tested in that time actually went in, but maybe it gets us some rough ideas</p>",
        "id": 267540111,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641881253
    },
    {
        "content": "<p>we're at 40 approved prs already, a single one was merged since i went to bed 🥲</p>",
        "id": 267540206,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641881367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bors.3A.20stop.20prioritizing.20old.20PRs.20over.20new.20PRs/near/267470646\">said</a>:</p>\n<blockquote>\n<p>Here's an idea: What if we kept the current sorting behavior, but added a special automatic priority bump to PRs that have been waiting in the queue longer than, say, 3 days?</p>\n</blockquote>\n<p>the PRs that are being overtaken this way have also been waiting though, just in a different state (e.g. waiting on review).<br>\nthe current system already does a kind of \"priority boost\" to PRs that have waited long by merging old PRs first. I think this is more fair than using \"time since first r+\". but I agree it is less predictable and that can be frustrating.<br>\nin your case, when one PR blocks the next, I agree with others that p=1 is totally appropriate.</p>\n<p>all that said I haven't landed that many PRs recently so I am not sure how much of a say I should have in this. ;) so if there is consensus that predictability is more important than e.g. accounting for waiting-for-review time, dont let me stop you from experimenting with that.</p>",
        "id": 267555908,
        "sender_full_name": "RalfJ",
        "timestamp": 1641893246
    },
    {
        "content": "<p>One thing I've always really appreciated is the simplicity of the system, in that you can work it out just by looking at the order of the bors queue in the UI and at least understand why your PR has the priority it does. It makes it very transparent. If it is changed to a hybrid system, it would be good if the PRs that were getting bumped got marked somehow, or failing that if the order was explained on the page.</p>",
        "id": 267560755,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1641896049
    },
    {
        "content": "<p>A pretty minor concern amidst all of this, but I thought it might be worth mentioning. <em>shrugs</em></p>",
        "id": 267560845,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1641896111
    },
    {
        "content": "<p>bumped prs show their prio in the queue <a href=\"https://bors.rust-lang.org/queue/rust\">https://bors.rust-lang.org/queue/rust</a></p>",
        "id": 267561568,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641896557
    },
    {
        "content": "<blockquote>\n<p>automatic priority bump to PRs that have been waiting in the queue longer than, say, 3 days</p>\n</blockquote>\n<p>Not sure if that would solve a lot of problems since it would apply to 50-70% of the approved queue...  :/</p>",
        "id": 267561944,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641896785
    },
    {
        "content": "<p>One down, 39 to go?</p>",
        "id": 267573688,
        "sender_full_name": "Laurențiu",
        "timestamp": 1641903945
    },
    {
        "content": "<p>apparently github will not display \"show me merged prs, sorted by last modification date\" <span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span>  <br>\n<a href=\"https://github.com/rust-lang/rust/issues?q=is%3Apr+is%3Aclosed+sort%3Aupdated-desc\">https://github.com/rust-lang/rust/issues?q=is%3Apr+is%3Aclosed+sort%3Aupdated-desc</a><br>\n<code>This page is taking too long to load.</code><br>\nbut ok we closing in on 50K prs...</p>",
        "id": 267587934,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641911111
    },
    {
        "content": "<p>checked 75 merged or closed PRs (most of these were merged by rollups):</p>\n<p>5 legit test failures<br>\n2 timeouts<br>\n1 connectivity issue (<a href=\"http://ci-mirrors.rust-lang.org\">ci-mirrors.rust-lang.org</a>)<br>\n1 dyld: Library not loaded: /usr/local/opt/libidn2/lib/libidn2.0.dylib + timeout<br>\n1 spurious x86_64-gnu-aux test_reverse::prop_reverse_no_headers + timeout</p>",
        "id": 267588550,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641911380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> <a href=\"https://github.com/rust-lang-ci/rust/actions?query=is%3Afailure\">https://github.com/rust-lang-ci/rust/actions?query=is%3Afailure</a> may be a better way to go</p>",
        "id": 267590332,
        "sender_full_name": "simulacrum",
        "timestamp": 1641912020
    },
    {
        "content": "<p>(potentially with a different filter)</p>",
        "id": 267590404,
        "sender_full_name": "simulacrum",
        "timestamp": 1641912054
    },
    {
        "content": "<p><a href=\"https://bors.rust-lang.org/retry_log/rust\">https://bors.rust-lang.org/retry_log/rust</a></p>",
        "id": 267594994,
        "sender_full_name": "The 8472",
        "timestamp": 1641913891
    },
    {
        "content": "<p>that doesn't cover all failures, e.g. rollups may get closed on failure rather than retrying, but it may be useful to crosscheck</p>",
        "id": 267595132,
        "sender_full_name": "The 8472",
        "timestamp": 1641913948
    },
    {
        "content": "<p>maybe we should force people to actually write the <code>@bors retry</code> reason and ignore the command if there are no further comments (to get a better overview of the problems of ci)</p>",
        "id": 267617921,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641922938
    },
    {
        "content": "<p><span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span> I already write reasons after the <code>retry</code> most of the time</p>",
        "id": 267622028,
        "sender_full_name": "oli",
        "timestamp": 1641924482
    },
    {
        "content": "<p>I also write reasons most of the time, except when it's obvious, like bors just said that tests timed-out, or when I don't think of it ;)</p>",
        "id": 267634554,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641930217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bors.3A.20stop.20prioritizing.20old.20PRs.20over.20new.20PRs/near/267634554\">said</a>:</p>\n<blockquote>\n<p>except when it's obvious</p>\n</blockquote>\n<p>It is not obvious when looking at <a href=\"https://bors.rust-lang.org/retry_log/rust\">https://bors.rust-lang.org/retry_log/rust</a></p>\n<p>It is helpful to always write a reason.</p>",
        "id": 267635051,
        "sender_full_name": "Eric Huss",
        "timestamp": 1641930466
    },
    {
        "content": "<p>Wow, I did not know the retry log showed the comments!</p>",
        "id": 267635125,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641930487
    },
    {
        "content": "<p>I will try to write reasons more often, thanks :)</p>",
        "id": 267635172,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641930515
    },
    {
        "content": "<p>would be useful if we could add some kind of <code>@bors retry</code>-log entry when closing a rollup indicating that there was an issue without having to re-run the pr (for example when bisecting through a set of PRs)</p>",
        "id": 267738011,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1642000539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bors.3A.20stop.20prioritizing.20old.20PRs.20over.20new.20PRs/near/267635125\">said</a>:</p>\n<blockquote>\n<p>Wow, I did not know the retry log showed the comments!</p>\n</blockquote>\n<p>neither did I, so same here :D</p>",
        "id": 267752303,
        "sender_full_name": "RalfJ",
        "timestamp": 1642006404
    },
    {
        "content": "<p>I've had a look at the log, and it seems that the msvc hangs are often in rustc_macros. Is this a known issue? If not I'll investigate</p>",
        "id": 268089927,
        "sender_full_name": "Patrick Poitras",
        "timestamp": 1642204587
    }
]