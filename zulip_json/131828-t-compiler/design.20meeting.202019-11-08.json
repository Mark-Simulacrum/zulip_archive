[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> -- design meeting in <strong>7 minutes</strong>. </p>\n<p>The topic for the day will be a <a href=\"https://hackmd.io/@39Qr_z9cQhasi25sGjmFnA/Skvd9rztS\" target=\"_blank\" title=\"https://hackmd.io/@39Qr_z9cQhasi25sGjmFnA/Skvd9rztS\">proposal for a unified dataflow framework</a>, and there is a <a href=\"https://paper.dropbox.com/doc/Unified-Dataflow-Framework-Meeting-Agenda--AoNcLajntWguYCtNX24foSRVAg-6pHEscQ9H696tawihH2nE\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Unified-Dataflow-Framework-Meeting-Agenda--AoNcLajntWguYCtNX24foSRVAg-6pHEscQ9H696tawihH2nE\">rough agenda</a> thoughtfully prepared by <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span>.</p>\n<p>This is <a href=\"https://github.com/rust-lang/compiler-team/issues/202\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/202\">compiler-team#202</a>.</p>",
        "id": 180236412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573224879
    },
    {
        "content": "<p>OK, 6 minutes now.</p>",
        "id": 180236424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573224887
    },
    {
        "content": "<p>Please <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> to show you're here =)</p>",
        "id": 180236432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573224892
    },
    {
        "content": "<p>In the meantime, feel free to post</p>\n<h1>Announcements</h1>",
        "id": 180236454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573224906
    },
    {
        "content": "<p>- Splitting libsyntax is nearly done, <a href=\"https://github.com/rust-lang/rust/pull/65324\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65324\">https://github.com/rust-lang/rust/pull/65324</a></p>",
        "id": 180236839,
        "sender_full_name": "centril",
        "timestamp": 1573225133
    },
    {
        "content": "<p>- Would like y'all's opinion on moving the error codes into a new crate <code>librustc_error_codes</code> (in a way that should improve incremental rather than pessimizing), and then perhaps moving things eventually into <code>.md</code> files or something (potentially for internationalization) -- <a href=\"https://github.com/rust-lang/rust/issues/66210\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66210\">https://github.com/rust-lang/rust/issues/66210</a></p>",
        "id": 180237026,
        "sender_full_name": "centril",
        "timestamp": 1573225252
    },
    {
        "content": "<p>OK, 5 minutes in -- do we expect <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> or <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> to make it?</p>",
        "id": 180237502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225551
    },
    {
        "content": "<p>Or <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span></p>",
        "id": 180237510,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225556
    },
    {
        "content": "<p>I think we could get started, in any case</p>",
        "id": 180237576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225568
    },
    {
        "content": "<p>all right, <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span>, do you want me to try and \"drive\" based on your agenda?</p>",
        "id": 180237652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225625
    },
    {
        "content": "<p>you can also drive if you like</p>",
        "id": 180237662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225634
    },
    {
        "content": "<p>er, wait, you're commenting in the wrong topic :)</p>",
        "id": 180237677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225650
    },
    {
        "content": "<p>Yes that'd be good. I'll just chime in. We should start with the background.</p>",
        "id": 180237681,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225652
    },
    {
        "content": "<p>You saw nothing!</p>",
        "id": 180237694,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225659
    },
    {
        "content": "<p>ok, let's do it</p>\n<h1>background :)</h1>",
        "id": 180237699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225663
    },
    {
        "content": "<p>/me drives <span aria-label=\"racecar\" class=\"emoji emoji-1f3ce\" role=\"img\" title=\"racecar\">:racecar:</span></p>",
        "id": 180237718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225677
    },
    {
        "content": "<p>For background, doing const-qualification on complex MIR bodies required a dataflow framework that was slightly more powerful than the current one, which only allowed gen/kill problems</p>",
        "id": 180237766,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225685
    },
    {
        "content": "<p>In particular, it is still moving sets around, but it sometimes has a transfer function that is more complex than can be captured in a gen/kill set structure?</p>",
        "id": 180237793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225722
    },
    {
        "content": "<p>Those can't handle assignments, so we couldn't propagate qualifs across them.</p>",
        "id": 180237798,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225732
    },
    {
        "content": "<p>Correct. So I implemented a new framework in <a href=\"https://github.com/rust-lang/rust/issues/64566\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64566\">#64566</a> that allowed for <code>Fn(&amp;mut State)</code> transfer functions</p>",
        "id": 180237828,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225763
    },
    {
        "content": "<p>It will converge slower, because you cannot coalesce transfer functions for a whole basic block as you can with a pure gen/kill transfer functions</p>",
        "id": 180237862,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225799
    },
    {
        "content": "<p>that is exactly what I was about to ask</p>",
        "id": 180237931,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573225815
    },
    {
        "content": "<p>is there some way to support both?</p>",
        "id": 180237960,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573225837
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/64470\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64470\">#64470</a> was then implemented, and the perf impacts are pretty negligible</p>",
        "id": 180237976,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225846
    },
    {
        "content": "<p>i.e. for an analysis that <em>is</em> a gen-kill analysis, support coalescing the transfer-function?</p>",
        "id": 180237983,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573225850
    },
    {
        "content": "<p>(I presume that's partly what the motivation for this meeting is about?)</p>",
        "id": 180237993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225856
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/issues/64470\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64470\">#64470</a> was then implemented, and the perf impacts are pretty negligible</p>\n</blockquote>\n<p>wait can you elaborate on this</p>",
        "id": 180238020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225873
    },
    {
        "content": "<p>Yes, the prototype accomplishes this using an adapter type</p>",
        "id": 180238026,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225877
    },
    {
        "content": "<p>perf impacts comparing what to what?</p>",
        "id": 180238030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225880
    },
    {
        "content": "<p>like, the older system was using the old dataflow system for const qualification specifically?</p>",
        "id": 180238044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225891
    },
    {
        "content": "<p>and the new system is using the newer framework</p>",
        "id": 180238060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225905
    },
    {
        "content": "<p>(right?)</p>",
        "id": 180238071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225916
    },
    {
        "content": "<p>No, the old system was using <em>no</em> dataflow (it didn't support branches)</p>",
        "id": 180238077,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225917
    },
    {
        "content": "<p>OK, good, I was a bit surprised to hear that it used the dataflow framework :)</p>",
        "id": 180238144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225937
    },
    {
        "content": "<p>I was like \"hmm I'm out of date, well, I better not admit I don't know how it works\" ;)</p>",
        "id": 180238158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225948
    },
    {
        "content": "<p>And compile times were not destroyed after we added the new dataflow-based one on top of the existing analysis</p>",
        "id": 180238170,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225954
    },
    {
        "content": "<p>ok, so the add'l cost of the new analysis was small</p>",
        "id": 180238191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225967
    },
    {
        "content": "<p>(we're now working to remove the old one)</p>",
        "id": 180238195,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225970
    },
    {
        "content": "<p>this analysis runs on all MIR...?</p>",
        "id": 180238230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573225989
    },
    {
        "content": "<p>Yes, but it's because it only ever runs on consts. We still need to coalesce block transfer functions. It's very important</p>",
        "id": 180238237,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573225995
    },
    {
        "content": "<p>ok</p>",
        "id": 180238245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226002
    },
    {
        "content": "<p>Am I correct in inferring that we do not yet have data on the time-overhead from switching any particular analysis from the old dataflow to the new dataflow ?</p>",
        "id": 180238276,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573226021
    },
    {
        "content": "<p>(Ah, right, this is const <em>validation</em>, not <em>qualification</em>)</p>",
        "id": 180238288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226029
    },
    {
        "content": "<blockquote>\n<p>Am I correct in inferring that we do not yet have data on the time-overhead from switching any particular analysis from the old dataflow to the new dataflow ?</p>\n</blockquote>\n<p>Correct</p>",
        "id": 180238343,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226043
    },
    {
        "content": "<p>i.e. the new dataflow was solely used for the new analysis; not for porting any of the old ones?</p>",
        "id": 180238344,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573226043
    },
    {
        "content": "<p>okay thanks</p>",
        "id": 180238360,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573226048
    },
    {
        "content": "<p>So the prototype framework handles this by having two constructors for a single <code>Engine</code> type. Each constructor creates an adapter, one of which holds cached block transfer functions, and each of the adapters implements the <code>BlockEffects</code> trait.</p>",
        "id": 180238471,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226142
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/65672/files#diff-3178a84d77e986f6ef17ef4ff334f111R358\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65672/files#diff-3178a84d77e986f6ef17ef4ff334f111R358\">https://github.com/rust-lang/rust/pull/65672/files#diff-3178a84d77e986f6ef17ef4ff334f111R358</a></p>",
        "id": 180238477,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226146
    },
    {
        "content": "<p>Actually, I'm sorry I'm getting ahead of myself</p>",
        "id": 180238494,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226155
    },
    {
        "content": "<p>Wait, one sec, so, back to the narative maybe? we had:</p>\n<ul>\n<li>created a new, more general but less optimized framework</li>\n<li>used it for const qualification and then validation, seems reasonably fast so far</li>\n</ul>",
        "id": 180238499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226158
    },
    {
        "content": "<p>This is correct. The downside is that there's now a bunch of code that could be shared, especially graphviz debugging, that is replicated</p>",
        "id": 180238598,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226213
    },
    {
        "content": "<p>So my immediate thought was to have a single \"dataflow engine\" that would coalesce transfer functions if possible, and replace <em>both</em> frameworks</p>",
        "id": 180238695,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226281
    },
    {
        "content": "<blockquote>\n<p>Yes, the prototype accomplishes this using an adapter type</p>\n</blockquote>\n<p>the \"adapter type\" you reference here: is that the sub-trait <code>pub trait GenKillAnalysis&lt;'tcx&gt;: Analysis&lt;'tcx&gt; { ... }</code> in your hackmd?</p>",
        "id": 180238755,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573226293
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Yes, the prototype accomplishes this using an adapter type</p>\n</blockquote>\n<p>the \"adapter type\" you reference here: is that the sub-trait <code>pub trait GenKillAnalysis&lt;'tcx&gt;: Analysis&lt;'tcx&gt; { ..&gt; }</code> in your hackmd?</p>\n</blockquote>\n<p>It's actually a struct that wraps a <code>GenKillAnalysis</code> and also stores an <code>IndexVec&lt;BasicBlock, GenKillSet&gt;</code></p>",
        "id": 180238838,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226345
    },
    {
        "content": "<p>this is a basic question, but what does const qualification do vs validation?</p>",
        "id": 180238841,
        "sender_full_name": "varkor",
        "timestamp": 1573226345
    },
    {
        "content": "<p>I didn't see qualification explicitly mentioned in the design doc</p>",
        "id": 180238860,
        "sender_full_name": "varkor",
        "timestamp": 1573226356
    },
    {
        "content": "<p>is this the best reference: <a href=\"https://github.com/rust-lang/rust/issues/53819\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53819\">https://github.com/rust-lang/rust/issues/53819</a> ?</p>",
        "id": 180238879,
        "sender_full_name": "varkor",
        "timestamp": 1573226367
    },
    {
        "content": "<blockquote>\n<p>this is a basic question, but what does const qualification do vs validation?</p>\n</blockquote>\n<p>No one knows XD. I call \"qualification\" the part that tracks <code>NeedsDrop</code> and <code>HasMutInterior</code> inside a const body</p>",
        "id": 180238912,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226387
    },
    {
        "content": "<p>While \"validation\" (which i now call const-checking to avoid conflict with MIRI's validation) checks for calls to non-const fn etc.</p>",
        "id": 180239008,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226425
    },
    {
        "content": "<p>in terms of the <strong>intention</strong>, the idea is this:</p>",
        "id": 180239044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226443
    },
    {
        "content": "<ul>\n<li>qualification: scrapes normal code looking for things to promote to constants</li>\n</ul>",
        "id": 180239057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226450
    },
    {
        "content": "<ul>\n<li>validation: looks at things declared as constant and makes sure they don't do anything constants shouldn't do</li>\n</ul>",
        "id": 180239076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226463
    },
    {
        "content": "<p>(I think?)</p>",
        "id": 180239095,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226472
    },
    {
        "content": "<p>maybe I'm confused too :)</p>",
        "id": 180239107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226476
    },
    {
        "content": "<p>okay, great <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 180239120,
        "sender_full_name": "varkor",
        "timestamp": 1573226485
    },
    {
        "content": "<p>in other words \"validation\" is ensuring \"const safety/soundness\" as in <a href=\"https://www.ralfj.de/blog/2018/07/19/const.html\" target=\"_blank\" title=\"https://www.ralfj.de/blog/2018/07/19/const.html\">https://www.ralfj.de/blog/2018/07/19/const.html</a> (?)</p>",
        "id": 180239124,
        "sender_full_name": "centril",
        "timestamp": 1573226487
    },
    {
        "content": "<p>(to the extent we've agreed on that approach, seems right)</p>",
        "id": 180239221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226535
    },
    {
        "content": "<p>My plan was to write this up for the rustc guide after I finish replacing the old qualification logic</p>",
        "id": 180239247,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226547
    },
    {
        "content": "<p>(time check, 22 minutes in)</p>",
        "id": 180239256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226551
    },
    {
        "content": "<p>But we're getting too far afield</p>",
        "id": 180239270,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226556
    },
    {
        "content": "<p>Next heading niko?</p>",
        "id": 180239284,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226565
    },
    {
        "content": "<p>/me takes wheel</p>",
        "id": 180239290,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226569
    },
    {
        "content": "<blockquote>\n<p>My plan was to write this up for the rustc guide after I finish replacing the old qualification logic</p>\n</blockquote>\n<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  -- if this could include \"dataflow for dummies\" for some toy problem that would be sweet</p>",
        "id": 180239305,
        "sender_full_name": "centril",
        "timestamp": 1573226581
    },
    {
        "content": "<p>heh, I was going to say that let's turn a bit to discuss the plan for merging</p>",
        "id": 180239334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226599
    },
    {
        "content": "<p>I think we all agree that:</p>",
        "id": 180239337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226601
    },
    {
        "content": "<ul>\n<li>DRY is better</li>\n</ul>",
        "id": 180239342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226606
    },
    {
        "content": "<ul>\n<li>but the optimizations from gen/kill are imp't</li>\n</ul>",
        "id": 180239354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226615
    },
    {
        "content": "<p>it might be worth explaining a bit more about those</p>",
        "id": 180239363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226619
    },
    {
        "content": "<p>I can take a stab</p>",
        "id": 180239367,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226622
    },
    {
        "content": "<p>in MIR, you have a basic block like</p>\n<div class=\"codehilite\"><pre><span></span>BB {\n   statement 1;\n   ...\n   statement N;\n}\n</pre></div>",
        "id": 180239441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226646
    },
    {
        "content": "<p>each one has some \"effect\" on the thing you are computing -- e.g., which variables are live</p>",
        "id": 180239452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226661
    },
    {
        "content": "<p>in a gen/kill set, you express that effect as \"things to add to the set\" (gen) and \"things to take away\" (kill)</p>",
        "id": 180239462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226671
    },
    {
        "content": "<p>the neat thing about this is that it's entirely independent of the old value of the set</p>",
        "id": 180239469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226679
    },
    {
        "content": "<p>so you can compute it once for each basic block and kind of \"coallesce\" this into a gen/kill set for the whole block</p>",
        "id": 180239488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226691
    },
    {
        "content": "<p>then to compute the final values, you can compute the set on entry to the block, apply the gen/kill set for the block as a whole to that set, and that gives you the result on exit from the block</p>",
        "id": 180239544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226717
    },
    {
        "content": "<p>then you propagate until a fixed point across all the basic block boundaries</p>",
        "id": 180239548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226723
    },
    {
        "content": "<p>now you know the values at the edges of each basic block, but you don't know the values for individual statements</p>",
        "id": 180239561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226736
    },
    {
        "content": "<p>for those you have to step in and \"re-apply\" the gen/kill set for each statement in turn</p>",
        "id": 180239566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226746
    },
    {
        "content": "<blockquote>\n<p>each one has some \"effect\" on the thing you are computing -- e.g., which variables are live</p>\n</blockquote>\n<p>maybe a bad example, as liveness is a backwards flow analysis and our framework doesn't support that yet...</p>",
        "id": 180239587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226762
    },
    {
        "content": "<p>anyway, the more general function approach isn't necessarily \"coallescable\" in this way,</p>",
        "id": 180239648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226779
    },
    {
        "content": "<p>so in that case if the set at the entry to a block changes,</p>",
        "id": 180239661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226792
    },
    {
        "content": "<p>you have to walk through each statement in turn</p>",
        "id": 180239681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226798
    },
    {
        "content": "<p>to get the result at the exit</p>",
        "id": 180239683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226802
    },
    {
        "content": "<p>that's obviously more work</p>",
        "id": 180239686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226804
    },
    {
        "content": "<p>(seems about right? anything I missed or got wrong?)</p>",
        "id": 180239720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226836
    },
    {
        "content": "<p>sounds right to me</p>",
        "id": 180239742,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573226842
    },
    {
        "content": "<p>All correct</p>",
        "id": 180239745,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226844
    },
    {
        "content": "<p>so the trick is</p>",
        "id": 180239749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226852
    },
    {
        "content": "<p>we want to permit the general functions</p>",
        "id": 180239751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226855
    },
    {
        "content": "<p>but recognize the special cases</p>",
        "id": 180239754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226858
    },
    {
        "content": "<p>I guess just the one special case</p>",
        "id": 180239763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226863
    },
    {
        "content": "<p>it's also just nicer if you have express your fn in terms of gen/kill to write it that way</p>",
        "id": 180239778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226873
    },
    {
        "content": "<p>(more DRY)</p>",
        "id": 180239781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226875
    },
    {
        "content": "<p>One thing I want to mention before we get into how we go about this.</p>",
        "id": 180239785,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226877
    },
    {
        "content": "<p>Right now there's exactly one consumer of the \"generic\" framework, which is const qualification</p>",
        "id": 180239856,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226909
    },
    {
        "content": "<p>(is there more?)</p>",
        "id": 180239937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573226979
    },
    {
        "content": "<p>So the second point on the agenda was: do we want to work on implementing a more powerful framework (datafrog, something with arbitrary dataflow lattices) which would unlock other optimizations</p>",
        "id": 180239942,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226981
    },
    {
        "content": "<p>(slow typer)</p>",
        "id": 180239954,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573226989
    },
    {
        "content": "<p>hmm</p>",
        "id": 180239959,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573226994
    },
    {
        "content": "<p>I have perhaps a slightly less grandiose question</p>",
        "id": 180240008,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227003
    },
    {
        "content": "<p>And port the const qualification to that?</p>",
        "id": 180240021,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227011
    },
    {
        "content": "<p>I did notice the new dataflow API still has the <code> fn apply_call_return_effect(</code> method</p>",
        "id": 180240035,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227023
    },
    {
        "content": "<p>rather than work on combining the two and having to split them up again when datafrog gets merged.</p>",
        "id": 180240063,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227045
    },
    {
        "content": "<p>back when we were designing the old dataflow, I think \"we\" (ariel, me, and probably nagisa and niko) all agreed that method was a nasty hack</p>",
        "id": 180240068,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227048
    },
    {
        "content": "<p>(a nasty hack I will take the blame for)</p>",
        "id": 180240083,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227060
    },
    {
        "content": "<p>my opinion is:</p>\n<ul>\n<li>I suspect datafrog would be awesome, but I think we should wait until polonius proves itself, and not let perfect be the enemy of the good</li>\n<li>I think we should discuss how to merge the gen/kill sets into this new framework first</li>\n</ul>",
        "id": 180240092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227063
    },
    {
        "content": "<blockquote>\n<p>I did notice the new dataflow API still has the <code> fn apply_call_return_effect(</code> method</p>\n</blockquote>\n<p>and yes that is a nasty hack :)</p>",
        "id": 180240120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227077
    },
    {
        "content": "<p>I was curious whether you had looked into options for ... um. .. getting rid of it?</p>",
        "id": 180240128,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> a better example for gen/kill is \"definitely initialized\" and/or \"maybe uninitialized\" (they're the same analysis, just one is a negation of the other)</p>",
        "id": 180240145,
        "sender_full_name": "eddyb",
        "timestamp": 1573227099
    },
    {
        "content": "<p>Some background again, function calls always need to be at the end of a basic block, because they take one path if they unwind, and another if they return normally</p>",
        "id": 180240225,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227142
    },
    {
        "content": "<p>consider </p>\n<div class=\"codehilite\"><pre><span></span>BB1 {\n    X = CALL(...) goto BB2 unwind BB3\n}\n</pre></div>",
        "id": 180240250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227169
    },
    {
        "content": "<p><code>apply_call_return_effect</code> is called only if  a function returns successfully, not if it panics</p>",
        "id": 180240262,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227178
    },
    {
        "content": "<p>Here, when you enter BB2 (no unwinding), X is initialized</p>",
        "id": 180240265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227182
    },
    {
        "content": "<p>but when you enter BB3, it is not</p>",
        "id": 180240278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227187
    },
    {
        "content": "<p>so you can't summarize the \"effect\" of that terminator in a uniform way</p>",
        "id": 180240289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227195
    },
    {
        "content": "<p>right, and the effect on the bitset can differ between the two branches, right?</p>",
        "id": 180240291,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227197
    },
    {
        "content": "<p>its effect varies per the edge</p>",
        "id": 180240295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227200
    },
    {
        "content": "<p>To answer your question <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, I didn't see a way to get rid of it.</p>",
        "id": 180240317,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227214
    },
    {
        "content": "<p>I did make it more uniform with the other <code>effect</code> methods</p>",
        "id": 180240340,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227230
    },
    {
        "content": "<p>ah well. sobeit</p>",
        "id": 180240355,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227238
    },
    {
        "content": "<p>i.e. it is also resricted to a gen/kill set in the new <code>GenKillAnalysis</code>, while it is not in the old <code>BitDenotation</code> one</p>",
        "id": 180240422,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227261
    },
    {
        "content": "<blockquote>\n<p>my opinion is:</p>\n<ul>\n<li>I suspect datafrog would be awesome, but I think we should wait until polonius proves itself, and not let perfect be the enemy of the good</li>\n<li>I think we should discuss how to merge the gen/kill sets into this new framework first</li>\n</ul>\n</blockquote>\n<p>I'm curious if others agree on this :) -- if so, maybe discuss that second bullet a bit?</p>",
        "id": 180240429,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227270
    },
    {
        "content": "<p>(this was fine because it always came at the end of a block)</p>",
        "id": 180240439,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> oh btw since the new framework is a more general fixpoint iteration, do you know how hard it would be to replace the bitsets with arbitrary data?</p>",
        "id": 180240484,
        "sender_full_name": "eddyb",
        "timestamp": 1573227311
    },
    {
        "content": "<p>to let e.g. constant folding use it? or do you think it's pointless to do that w/o switching to, say, datafrog?</p>",
        "id": 180240538,
        "sender_full_name": "eddyb",
        "timestamp": 1573227347
    },
    {
        "content": "<p>@eddyb I think not hard. There's some question about how to define  the supertraits<code>GenKillAnalysis</code>, since it only works on bit vectors, not arbitrary lattices</p>",
        "id": 180240615,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227381
    },
    {
        "content": "<p>actually, time check, we're at 30 minutes, I'm wondering what's most imporant things to cover. In particular, I remember there was also some discussion of a \"cursor-based\" accessing API, for example.</p>",
        "id": 180240616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227382
    },
    {
        "content": "<p>But I believe everything will work out.</p>",
        "id": 180240621,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227386
    },
    {
        "content": "<p>maybe we can summarize the things that remain and pick a direction?</p>",
        "id": 180240627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227392
    },
    {
        "content": "<blockquote>\n<p>i.e. it is also resricted to a gen/kill set in the new <code>GenKillAnalysis</code>, while it is not in the old <code>BitDenotation</code> one</p>\n</blockquote>\n<p>hmm. I just realized something, I think: So the more general analysis, the state <code>&amp;mut BitSet</code> it has access to ...</p>",
        "id": 180240638,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227400
    },
    {
        "content": "<p>in particular, I feel kind of like the gen/kill set thing is \"just\" a matter of programming -- the key thing is that we want to recover the optimization</p>",
        "id": 180240647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227405
    },
    {
        "content": "<p>... that state must summarize more than just the current point in the control flow, right?</p>",
        "id": 180240659,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227414
    },
    {
        "content": "<p>i.e. you must be able to mutate the state for the two different branches of control flow for a terminator  (specifically <code>call</code> ) ?</p>",
        "id": 180240694,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> I remember <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> and maybe someone else tried to get something like that merged a while back but it never landed, might be good to look into what that tried to achieve and the path it took</p>",
        "id": 180240699,
        "sender_full_name": "eddyb",
        "timestamp": 1573227442
    },
    {
        "content": "<p>and therefore it must have access to the state for multiple blocks?</p>",
        "id": 180240707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227451
    },
    {
        "content": "<p>(too many threads here:)</p>",
        "id": 180240784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227484
    },
    {
        "content": "<blockquote>\n<p>and therefore it must have access to the state for multiple blocks?</p>\n</blockquote>\n<p>let's start with this question that <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> raised</p>",
        "id": 180240793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> The effect ends up in the entry set for both successors?</p>",
        "id": 180240802,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227498
    },
    {
        "content": "<p>(the unwind one and the successful return one)</p>",
        "id": 180240821,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227517
    },
    {
        "content": "<p>/me is being overwhelmed</p>",
        "id": 180240830,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227528
    },
    {
        "content": "<p>I thought the whole point of <code>apply_call_return_effect</code> is that it covers those effects that are specific to the \"normal\" return path</p>",
        "id": 180240860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227552
    },
    {
        "content": "<p>Right, I'm starting with the assumption that it must be able to handle a non-uniform effect</p>",
        "id": 180240862,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227554
    },
    {
        "content": "<p>(and hence which do not apply to unwinding)</p>",
        "id": 180240873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227566
    },
    {
        "content": "<p>I'm sorry, the <em>block</em> effect ends up in the entry set for both successors</p>",
        "id": 180240895,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227589
    },
    {
        "content": "<blockquote>\n<p>i.e. it is also resricted to a gen/kill set in the new <code>GenKillAnalysis</code>, while it is not in the old <code>BitDenotation</code> one</p>\n</blockquote>\n<p>or no, hold on, I think I misunderstood the above comment</p>",
        "id": 180240906,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227598
    },
    {
        "content": "<p>While the success successor gets the block effect + call return effect</p>",
        "id": 180240969,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227620
    },
    {
        "content": "<p>I thought this meant that <code>apply_call_return_effect</code> was <em>only</em> present on the <code>GenKillAnalysis</code> trait</p>",
        "id": 180240976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227625
    },
    {
        "content": "<p>I think we need to address <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> bullet points real quck</p>",
        "id": 180241000,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227646
    },
    {
        "content": "<p>but re-reading the <a href=\"http://hackmd.io\" target=\"_blank\" title=\"http://hackmd.io\">hackmd.io</a> now, I see that even the general <code>Analysis</code> trait has that method. Sorry for the noise.</p>",
        "id": 180241007,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227656
    },
    {
        "content": "<p>Does anyone have thoughts on this?</p>",
        "id": 180241011,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227659
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>my opinion is:</p>\n<ul>\n<li>I suspect datafrog would be awesome, but I think we should wait until polonius proves itself, and not let perfect be the enemy of the good</li>\n<li>I think we should discuss how to merge the gen/kill sets into this new framework first</li>\n</ul>\n</blockquote>\n<p>I'm curious if others agree on this :) -- if so, maybe discuss that second bullet a bit?</p>\n</blockquote>",
        "id": 180241031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227667
    },
    {
        "content": "<p>that first bullet also applies to a more generalized, non-set-based analysis, imo</p>",
        "id": 180241049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227681
    },
    {
        "content": "<p>Because the next thing to discuss are the particulars of the prototype implementation</p>",
        "id": 180241091,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227712
    },
    {
        "content": "<p>I think the sketch(es) from the hackmd on how to merge the gen/kill sets into this framework sounds fine to me.</p>",
        "id": 180241097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227716
    },
    {
        "content": "<p>(there are slight variations on the idea, bu</p>",
        "id": 180241149,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227728
    },
    {
        "content": "<p>(I felt the same; it seemed like it would work)</p>",
        "id": 180241152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227729
    },
    {
        "content": "<p>but the point is: It seems to be able to recover coalescing across a block.</p>",
        "id": 180241180,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227751
    },
    {
        "content": "<p>Correct, the prototype is not fundamentally less fast than <code>BitDenotation</code> for gen/kill problems</p>",
        "id": 180241245,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227792
    },
    {
        "content": "<p>does anyone have any estimate of how much work it would take to trial a datafrog version to compare them?</p>",
        "id": 180241252,
        "sender_full_name": "varkor",
        "timestamp": 1573227799
    },
    {
        "content": "<p>without any data, it's hard to justify one approach over the other, apart from in ease of implementation</p>",
        "id": 180241271,
        "sender_full_name": "varkor",
        "timestamp": 1573227813
    },
    {
        "content": "<blockquote>\n<p>does anyone have any estimate of how much work it would take to trial a datafrog version to compare them?</p>\n</blockquote>\n<p>I'd have to think about it, it seems .. not entirely trivial to me</p>",
        "id": 180241287,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227829
    },
    {
        "content": "<p>well this seems close to being able to land. Datafrog would be a big leap I think.</p>",
        "id": 180241297,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227835
    },
    {
        "content": "<p>I definitely think datafrog should prove itself on polonius first</p>",
        "id": 180241387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227876
    },
    {
        "content": "<p>and I say this as a massive proponent</p>",
        "id": 180241396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227886
    },
    {
        "content": "<p>but e.g. right now polonius takes the CFG as a vector of tuples and so forth; we may find that is too slow, or needs to be refined, or there are OOM problems, etc</p>",
        "id": 180241439,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227916
    },
    {
        "content": "<p>In the interest of time, these are the list of small API decisions made by the prototype, phrased as questions<br>\n      - How do we feel about the <code>{before_,}*_effect</code> naming convention? It takes a bit of getting used to, and doesn’t extend nicely to backwards dataflow.<br>\n    - Should we be passing a <code>mir::Statement</code> to the <code>statement</code> effect methods? What about <code>mir::Body</code> to <code>bits_per_block</code>?<br>\n    - Should we use specialization to implement this?’<br>\n    - Should the <code>Analysis</code> methods take <code>&amp;self</code> or <code>&amp;mut self</code>?<br>\n    - Are we okay with a <code>ResultsCursor</code> becoming the common way to inspect results?<br>\n    - How do we implement a zipped <code>ResultsVisitor</code>?</p>",
        "id": 180241442,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227917
    },
    {
        "content": "<p>I'd rather we answer those in an experimental capacity</p>",
        "id": 180241453,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227920
    },
    {
        "content": "<p><a href=\"https://paper.dropbox.com/doc/Unified-Dataflow-Framework-Meeting-Agenda--AoNHyM8tWZVmfMj~Kkh0gZaTAg-6pHEscQ9H696tawihH2nE\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Unified-Dataflow-Framework-Meeting-Agenda--AoNHyM8tWZVmfMj~Kkh0gZaTAg-6pHEscQ9H696tawihH2nE\">https://paper.dropbox.com/doc/Unified-Dataflow-Framework-Meeting-Agenda--AoNHyM8tWZVmfMj~Kkh0gZaTAg-6pHEscQ9H696tawihH2nE</a></p>",
        "id": 180241466,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227929
    },
    {
        "content": "<p>nice, I was about to make such a list</p>",
        "id": 180241473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227935
    },
    {
        "content": "<p>(the third section)</p>",
        "id": 180241475,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227939
    },
    {
        "content": "<blockquote>\n<p>I'd rather we answer those in an experimental capacity</p>\n</blockquote>\n<p>sorry, is this referring to the API decisions, or the stuff with polonius/datafrog?</p>",
        "id": 180241501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573227960
    },
    {
        "content": "<p>(datafrog)</p>",
        "id": 180241554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227967
    },
    {
        "content": "<p>Is there anything that stands out to people? These could also be discussed on a PR, though. They're small.</p>",
        "id": 180241577,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573227982
    },
    {
        "content": "<p>most of those API questions, though, don't seem <em>that</em> important --</p>",
        "id": 180241579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573227984
    },
    {
        "content": "<p>I personally would prefer avoiding using specialization to implement this, if we can help it</p>",
        "id": 180241606,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228001
    },
    {
        "content": "<p>Yes, I agree, but I don't even see what we would need it for</p>",
        "id": 180241623,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228017
    },
    {
        "content": "<p>But let's not get into it :P</p>",
        "id": 180241650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228029
    },
    {
        "content": "<p>I think i'd like to briefly discuss the results cursor</p>",
        "id": 180241664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228043
    },
    {
        "content": "<p>Okay, if we don't wanna discuss the details now, can we discuss extensions in the next section?</p>",
        "id": 180241668,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228045
    },
    {
        "content": "<p>the older approach basically used calbacks, right?</p>",
        "id": 180241702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228068
    },
    {
        "content": "<p>i.e., you have some callback that gets invoked with the results at each point?</p>",
        "id": 180241721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228079
    },
    {
        "content": "<p>Yep, it used a <code>Visitor</code> pattern</p>",
        "id": 180241731,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228082
    },
    {
        "content": "<p>I'm trying to remember</p>",
        "id": 180241775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228089
    },
    {
        "content": "<p>Agreed re. specialization, except for perf, if hidden in a reasonable way (same policy as applies to standard library)</p>",
        "id": 180241784,
        "sender_full_name": "centril",
        "timestamp": 1573228096
    },
    {
        "content": "<p>I remember thinking that this cursor would be useful in borrow check</p>",
        "id": 180241795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228105
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src/librustc_mir/dataflow/mod.rs#L309\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src/librustc_mir/dataflow/mod.rs#L309\">https://github.com/rust-lang/rust/blob/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc/src/librustc_mir/dataflow/mod.rs#L309</a></p>",
        "id": 180241814,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228116
    },
    {
        "content": "<p>So I guess I mostly wanted to say that I'm a proponent of it -- I think it's useful primarily in error handling, where you might like to be able to jump back to a certain point to get results</p>",
        "id": 180241842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228133
    },
    {
        "content": "<p>I think the callback system was in part to work around lack of StreamingIterator? But I'm not 100% sure</p>",
        "id": 180241882,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228158
    },
    {
        "content": "<blockquote>\n<p>I remember thinking that this cursor would be useful in borrow check</p>\n</blockquote>\n<p>We have a cursor for <code>BitDenotation</code> as well, so we could talk more about improving this.</p>",
        "id": 180241892,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228163
    },
    {
        "content": "<p>Well, ok, so we're 50 minutes in -- my sense is that right now, there is a general consensus that we should do this, subject to experimental results?</p>",
        "id": 180241912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228178
    },
    {
        "content": "<p>(I thnk we can discuss extensions, too, but I'd like to establish this point first)</p>",
        "id": 180241934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228192
    },
    {
        "content": "<p>(further caveat, that we'll refine the details of the API in PRs)</p>",
        "id": 180242003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228212
    },
    {
        "content": "<blockquote>\n<p>there is a general consensus that we should do this, subject to experimental results?</p>\n</blockquote>\n<p>yeah, I think we should do this. But I would perhaps start by identifying the most expensive dataflow consumer,a nd porting them first</p>",
        "id": 180242021,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228224
    },
    {
        "content": "<p>expense here can be execution time or memory usage</p>",
        "id": 180242035,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228234
    },
    {
        "content": "<p>so... do both ...</p>",
        "id": 180242056,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228240
    },
    {
        "content": "<p>I think in particular we are also deciding that we should NOT try to port to some more general framework first</p>",
        "id": 180242063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> have any candidates in mind?</p>",
        "id": 180242067,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228246
    },
    {
        "content": "<p>I don't know offhand. I'm betting mir-borrowck</p>",
        "id": 180242080,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228259
    },
    {
        "content": "<p>(but not that we rule it out or anything of course)</p>",
        "id": 180242081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228261
    },
    {
        "content": "<p>I used to have a lot of stats on this from profiling</p>",
        "id": 180242112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228277
    },
    {
        "content": "<p>which of the borrowck analysis were most expensive</p>",
        "id": 180242122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228284
    },
    {
        "content": "<p>should be easy enough to gather with the self-profile data</p>",
        "id": 180242133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228295
    },
    {
        "content": "<p>ok, should we discuss extensions?</p>",
        "id": 180242285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228366
    },
    {
        "content": "<p>Is <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> around?</p>",
        "id": 180242325,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228388
    },
    {
        "content": "<blockquote>\n<p>For example, we could skip caching block transfer functions for dataflow analyses on acyclic MIR,</p>\n</blockquote>\n<p>Regarding extensions: I thought this (from the hackmd) was an interesting idea</p>",
        "id": 180242356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228406
    },
    {
        "content": "<p>I am</p>",
        "id": 180242369,
        "sender_full_name": "mw",
        "timestamp": 1573228414
    },
    {
        "content": "<p>Do you remember what problems arose around dataflow when you tried to do extended basic blocks?</p>",
        "id": 180242459,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228445
    },
    {
        "content": "<p>I think this was years ago, sorry. I should have pinged you earlier but I didn't think we'd get this far</p>",
        "id": 180242492,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228467
    },
    {
        "content": "<p>this <a href=\"https://github.com/rust-lang/rust/issues/39685\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/39685\">#39685</a> ?</p>",
        "id": 180242526,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228481
    },
    {
        "content": "<p>I'm pretty sure that was someone else</p>",
        "id": 180242535,
        "sender_full_name": "mw",
        "timestamp": 1573228483
    },
    {
        "content": "<p>I never did any major MIR work</p>",
        "id": 180242552,
        "sender_full_name": "mw",
        "timestamp": 1573228493
    },
    {
        "content": "<p>uhh, that's embarassing, sorry</p>",
        "id": 180242559,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228501
    },
    {
        "content": "<p>heh so</p>",
        "id": 180242578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228509
    },
    {
        "content": "<p>yes that</p>",
        "id": 180242581,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228512
    },
    {
        "content": "<p>it seems like something that would exacerbate the call_return hack situation ...</p>",
        "id": 180242587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228515
    },
    {
        "content": "<p>I think we're not going to do EBB</p>",
        "id": 180242590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228516
    },
    {
        "content": "<p>no worries :)</p>",
        "id": 180242593,
        "sender_full_name": "mw",
        "timestamp": 1573228518
    },
    {
        "content": "<p>I remember hearing that cranelift was backing away from EBB too? (cc <span class=\"user-mention\" data-user-id=\"130125\">@Dan Gohman</span>) but in any case seems far out</p>",
        "id": 180242651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228556
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>For example, we could skip caching block transfer functions for dataflow analyses on acyclic MIR,</p>\n</blockquote>\n<p>Regarding extensions: I thought this (from the hackmd) was an interesting idea</p>\n</blockquote>\n<p>Yeah, this is quite easy, although it just saves peak memory usage</p>",
        "id": 180242716,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228576
    },
    {
        "content": "<p>\"just\" saves</p>",
        "id": 180242743,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228591
    },
    {
        "content": "<p>It's all about that perf.rlo icount XD</p>",
        "id": 180242782,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228618
    },
    {
        "content": "<blockquote>\n<p>For example, we could skip caching block transfer functions for dataflow analyses on acyclic MIR,</p>\n</blockquote>\n<p>I agree this is interesting. There are also more general optimizations one can do -- e.g., recognizing patterns in the source (like loops, if/else-if branches) -- and optimizing around those. That's probably more complex than is worth it.</p>",
        "id": 180242798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228624
    },
    {
        "content": "<p>But I've always wanted to write them.</p>",
        "id": 180242822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228638
    },
    {
        "content": "<p>/me is a fan of looking at the perf.rlo max-rss</p>",
        "id": 180242826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228642
    },
    {
        "content": "<blockquote>\n<p>While results cursors are great for consumers of a dataflow analysis, they make some optimizations more difficult. To operate efficiently, they require that the full dataflow state at entry to each block is stored.</p>\n</blockquote>",
        "id": 180242969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228709
    },
    {
        "content": "<p>I was just noting that line from the doc</p>",
        "id": 180242970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228715
    },
    {
        "content": "<p>I guess it seems relevant to the acyclic optimization</p>",
        "id": 180243002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228730
    },
    {
        "content": "<p>Actually we would still have to store state at block entry for acyclic MIR in case there's branching</p>",
        "id": 180243056,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228765
    },
    {
        "content": "<p>That's more for EBB</p>",
        "id": 180243063,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228772
    },
    {
        "content": "<p>I was just going to ask where the reduction in peak-rss would come from</p>",
        "id": 180243073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228783
    },
    {
        "content": "<p>from not storing the bitsets for basic blocks that you're not going to iterate on</p>",
        "id": 180243155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228808
    },
    {
        "content": "<p>So normally for gen/kill problems, we build up the transfer functions ahead of time and store them separate from the entry sets</p>",
        "id": 180243183,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228826
    },
    {
        "content": "<p>but you still want them to read the results at the end?</p>",
        "id": 180243191,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228831
    },
    {
        "content": "<p>but ah yeah ok you don't have to store the gen/kill sets, sure</p>",
        "id": 180243205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228841
    },
    {
        "content": "<p>nah you recompute them</p>",
        "id": 180243208,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228843
    },
    {
        "content": "<p>that .. doesn't sound right</p>",
        "id": 180243226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228856
    },
    {
        "content": "<p>this is all based on an assumption that the fixed-point iteration is the big cost in time</p>",
        "id": 180243278,
        "sender_full_name": "pnkfelix",
        "timestamp": 1573228882
    },
    {
        "content": "<p>well anyway</p>",
        "id": 180243279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228882
    },
    {
        "content": "<p>But since you would only have to apply each block effect once for acyclic MIR, why store them?</p>",
        "id": 180243290,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573228887
    },
    {
        "content": "<p>OK, so, we're at 60 minutes :)</p>",
        "id": 180243299,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228892
    },
    {
        "content": "<p>I think it's fine to keep chatting, but I'd like to request two things:</p>",
        "id": 180243407,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228941
    },
    {
        "content": "<ul>\n<li><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> can you make a PR against the compiler-team repo (the <a href=\"https://github.com/rust-lang/compiler-team/tree/master/content/minutes/design-meeting\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/tree/master/content/minutes/design-meeting\">design-meetings minutes directory</a>) that adds your initial notes, along with a link to this zulip thread? I think we didn't really add that much to the notes you had prepared in advance? but feel free to edit/update</li>\n</ul>",
        "id": 180243479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573228994
    },
    {
        "content": "<ul>\n<li>uh that might be the only thing</li>\n</ul>",
        "id": 180243494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229000
    },
    {
        "content": "<p>I guess I'd be happy to see an inside rust blog post if you wanted to write one :)</p>",
        "id": 180243515,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229024
    },
    {
        "content": "<p>but I don't think it's required</p>",
        "id": 180243519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229027
    },
    {
        "content": "<p>this is interesting stuff though and people might like to hear about it, and you've got the raw material...</p>",
        "id": 180243574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229042
    },
    {
        "content": "<blockquote>\n<ul>\n<li><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> can you make a PR against the compiler-team repo (the <a href=\"https://github.com/rust-lang/compiler-team/tree/master/content/minutes/design-meeting\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/tree/master/content/minutes/design-meeting\">design-meetings minutes directory</a>) that adds your initial notes, along with a link to this zulip thread? I think we didn't really add that much to the notes you had prepared in advance? but feel free to edit/update</li>\n</ul>\n</blockquote>\n<p>Sounds good. It seems like we've decided to pursue this, so I'll add that to the summary.</p>",
        "id": 180243585,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573229044
    },
    {
        "content": "<p>OK, thanks all! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 180243618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573229072
    },
    {
        "content": "<p>Oh, and feel free to ask questions here or in another channel, but I'll be unavailable until later today.</p>",
        "id": 180243695,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573229115
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> EBBs was <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> if I'm not mistaken</p>",
        "id": 180247773,
        "sender_full_name": "eddyb",
        "timestamp": 1573231534
    },
    {
        "content": "<p>Indeed, yes</p>",
        "id": 180247793,
        "sender_full_name": "simulacrum",
        "timestamp": 1573231549
    },
    {
        "content": "<p>and the problem was that several things, including dataflow, have to work on BBs fundamentally</p>",
        "id": 180247808,
        "sender_full_name": "eddyb",
        "timestamp": 1573231560
    },
    {
        "content": "<p>or maybe they could handle EBBs by replacing per-BB data with per-edge data, but there are at least as many edges as there are BBs, so you're likely to lose perf some way or another</p>",
        "id": 180247982,
        "sender_full_name": "eddyb",
        "timestamp": 1573231647
    },
    {
        "content": "<p>and overall it's significant effort to make all of those things work</p>",
        "id": 180248083,
        "sender_full_name": "eddyb",
        "timestamp": 1573231691
    },
    {
        "content": "<p>dataflow can easily work with data that’s as fine as statements, the downside is not performance but memory</p>",
        "id": 180266126,
        "sender_full_name": "nagisa",
        "timestamp": 1573243334
    },
    {
        "content": "<p>BB makes it possible to remember less and recompute more as needed.</p>",
        "id": 180266147,
        "sender_full_name": "nagisa",
        "timestamp": 1573243355
    },
    {
        "content": "<p>so if anything tying dataflow with basic blocks will make things slower.</p>",
        "id": 180266162,
        "sender_full_name": "nagisa",
        "timestamp": 1573243375
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> I remember <span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> and maybe someone else tried to get something like that merged a while back but it never landed, might be good to look into what that tried to achieve and the path it took</p>\n</blockquote>\n<p>My original work did not land because I made a critical mistake of trying to land too many things in one go: a framework and a bunch of optimisations. Some of those optimisations ended up depending on stuff that didn’t exist and still does not exist to this day AFAIK (aliasing analysis)</p>",
        "id": 180266635,
        "sender_full_name": "nagisa",
        "timestamp": 1573243524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I don't see any fundamental issues with EBBs and dataflow. Like you said, we would keep a cached block transfer function per-edge rather than per-block. I don't think we'll end up using any more memory, since each extra block after a function call gets replaced by an unwind edge.</p>",
        "id": 180282136,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573254782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> The prototype we discussed at the meeting does not have that problem. If anything, it's the opposite: it doesn't enable anything new and interesting, just cleans up code a bit. I would like to look into supporting arbitrary lattices soonish. I'll probably want to ask you some questions before I start on that. I still need to really sit down with your PRs.</p>",
        "id": 180282353,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1573254941
    },
    {
        "content": "<p>cranelift did indeed move away from EBBs back to BBs, and their rationale was explained <a href=\"https://github.com/CraneStation/cranelift/issues/796\" target=\"_blank\" title=\"https://github.com/CraneStation/cranelift/issues/796\">in this issue</a> — some of those reasons can apply to our case (and, unfortunately, to (R)VSDGs)</p>",
        "id": 180412325,
        "sender_full_name": "lqd",
        "timestamp": 1573468338
    },
    {
        "content": "<p>Yeah, I think the main motivation was the \"unwind\" edge from calls. Doesn't seem worth it to me.</p>",
        "id": 180523070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573570002
    },
    {
        "content": "<p>At least the one that appealed to me the most :)</p>",
        "id": 180523085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573570012
    }
]