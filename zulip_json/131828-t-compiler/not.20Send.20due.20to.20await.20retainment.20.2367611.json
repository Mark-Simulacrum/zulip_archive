[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> are you around? I wanted to get your opinion on what steps we should take here</p>",
        "id": 184954386,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578343495
    },
    {
        "content": "<p>I am. I wondered if there was any code that would hit this...</p>",
        "id": 184954563,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1578343618
    },
    {
        "content": "<p>I'm pretty sure this should not be considered a compiler bug. The following patch fixes the crate: <a href=\"https://gist.github.com/pnkfelix/4bdef50d0538fee8f6e0cbc4379f6074\" target=\"_blank\" title=\"https://gist.github.com/pnkfelix/4bdef50d0538fee8f6e0cbc4379f6074\">https://gist.github.com/pnkfelix/4bdef50d0538fee8f6e0cbc4379f6074</a></p>",
        "id": 184954686,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578343692
    },
    {
        "content": "<p>I was a little surprised that my first attempt of using <code>unsafe { &amp;PROXY[..] }</code> (i.e. just adding <code>[..]</code>) did not work. I had to actually <em>call</em> <code>.as_slice()</code>.</p>",
        "id": 184954722,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578343728
    },
    {
        "content": "<p>is there anything analogous to <code>move ||</code>. but for generators? I.e. something that forces the generator to take a moved value rather than capturing a reference?</p>",
        "id": 184954857,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578343805
    },
    {
        "content": "<p>(and my other question is whether we should consider trying to improve the diagnostics here or not)</p>",
        "id": 184954890,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578343834
    },
    {
        "content": "<p>Hmm. So I think that there are some possible fixes for this issue by make how we determine what a generator is holding across a yield a bit smarter, or by adjusting MIR lowering so that we don't ever hold on to the temporary pointer across a yield.</p>",
        "id": 184955183,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1578344032
    },
    {
        "content": "<p><code>async move</code> should work</p>",
        "id": 184955191,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1578344039
    },
    {
        "content": "<p>so you can do <code>async move fn foo(..) { ... }</code> ?</p>",
        "id": 184955333,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578344112
    },
    {
        "content": "<p>No, but the function's parameters are always captured by <code>move</code>.</p>",
        "id": 184955384,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1578344156
    },
    {
        "content": "<p>But the statics aren't...</p>",
        "id": 184955452,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578344178
    },
    {
        "content": "<p>(that was the case I was thinking of)</p>",
        "id": 184955464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578344188
    },
    {
        "content": "<p><code>static</code>s aren't captured</p>",
        "id": 184955516,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1578344231
    },
    {
        "content": "<p>maybe I'm not using the right terminology</p>",
        "id": 184955710,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578344327
    },
    {
        "content": "<p>statics are handled by making unsafe  references to them, right?</p>",
        "id": 184955760,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578344361
    },
    {
        "content": "<p>that is at least how I interpreted what is happening here.</p>",
        "id": 184955781,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578344374
    },
    {
        "content": "<p>Yes</p>",
        "id": 184955791,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1578344384
    },
    {
        "content": "<p>lets go back to the ideas you had for solutions.</p>",
        "id": 184955946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578344470
    },
    {
        "content": "<blockquote>\n<p>I was a little surprised that my first attempt of using <code>unsafe { &amp;PROXY[..] }</code> (i.e. just adding <code>[..]</code>) did not work. I had to actually <em>call</em> <code>.as_slice()</code>.</p>\n</blockquote>\n<p><code>region_scope_tree</code> being inferred based on the untyped HIR...</p>",
        "id": 184955957,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1578344475
    },
    {
        "content": "<p>hmm okay</p>",
        "id": 184955978,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578344496
    },
    {
        "content": "<p>Anyway my instinct is that if we try to make the generator-transformation more complicated/subtle to handle cases like this, it could be frustrating for users trying to understand what their code is doing.</p>",
        "id": 184956179,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578344614
    },
    {
        "content": "<p>but maybe I'm being paranoid</p>",
        "id": 184956236,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578344644
    },
    {
        "content": "<p>So, the reason I think that we can fix this is that the pointer the we create is usually very short lived, it only rarely needs to be captured across a yield.</p>",
        "id": 184956273,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1578344686
    },
    {
        "content": "<p>But I don't think that HIR typeck really gives us a way to do anything other that what we currently have, or requiring that it's <em>never</em> live across a yield.</p>",
        "id": 184956475,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1578344819
    },
    {
        "content": "<p>Well, maybe the <code>&amp;PROXY[..]</code> vs. <code>PROXY.as_slice()</code> thing.</p>",
        "id": 184956937,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1578345086
    },
    {
        "content": "<p>I guess the right thing at this point is to let the Async-Await WG decide how to handle this?</p>",
        "id": 184960378,
        "sender_full_name": "pnkfelix",
        "timestamp": 1578347323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> do you plan to invest more time in near term investigating the solution here? I'm just trying to figure out whether I should post a PR to \"fix\" to the <code>updns</code> crate that was broken by this.</p>",
        "id": 185605827,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579015407
    },
    {
        "content": "<p>I'm waiting for feedback to the write up I did.</p>",
        "id": 185628211,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1579028703
    },
    {
        "content": "<p>...were there questions in that write up? It was an overview of a couple different trajectories we might take, right?</p>",
        "id": 185643947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579038457
    },
    {
        "content": "<p>Yes, the question is whether we think any of them are with working on.</p>",
        "id": 185644225,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1579038608
    },
    {
        "content": "<p>gotcha okay. I'll have to review more carefully. To be honest I wasn't clear about the drawbacks of the MIR internal local approach, but maybe that's because I wasn't clear about the details of that approach in general.</p>",
        "id": 185645432,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579039350
    }
]