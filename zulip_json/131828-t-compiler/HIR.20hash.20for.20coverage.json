[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span>. I saw that MIR coverage markers require hashing the HIR body. Could you explain the rationale behind this hashing? Why does it need to ignore spans? (I'm trying to find a way to get rid of this hashing by reusing a previously computed HIR hash.)</p>",
        "id": 257761402,
        "sender_full_name": "cjgillot",
        "timestamp": 1634330200
    },
    {
        "content": "<p>The spec for LLVM coverage requires some kind of hash to distinguish logic changes.</p>",
        "id": 257766639,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634332753
    },
    {
        "content": "<p>(off the top of my head I don't remember if LLVM docs explained how that hash is used, but I can imagine, for instance, diff'ing coverage between two versions of the same function. There could be optimization opportunities as well, perhaps, but diff'ing is probably the more useful reason.)</p>",
        "id": 257766836,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634332840
    },
    {
        "content": "<p>I don't think changing spacing or comments should matter</p>",
        "id": 257766879,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634332867
    },
    {
        "content": "<p>But, just thinking about this, maybe I had this wrong. Perhaps I need to change the hash even if only for spaces and comments.</p>",
        "id": 257774340,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634336633
    },
    {
        "content": "<p>Because the coverage results point to specific locations (line and column) in the code. If the locations change, the results would be wrong anyway, right?</p>",
        "id": 257774462,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634336683
    },
    {
        "content": "<p>I think so, yes. If you need to hash line &amp; columns, I will have to handle it properly in -Zincremental-relative-spans mode.</p>",
        "id": 257777145,
        "sender_full_name": "cjgillot",
        "timestamp": 1634338313
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"330205\">@Arpad Borsos</span> <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></p>",
        "id": 258221056,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634659135
    },
    {
        "content": "<p>I think a hash that changes on any source change to the function is probably OK and possibly better, since code coverage results assume the covered code does not change positions within the source file (line and column are stable for the start and end of the span). </p>\n<p>I'm not familiar with what <code>-Zincremental-relative-spans</code> will do, but I don't expect you to hash specific line &amp; column.</p>\n<p>As long as the hash changes if the source of the function changes (including adding or removing white space or comments), that's probably at least as good as what I'm doing now.</p>",
        "id": 258224070,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1634660065
    },
    {
        "content": "<p>I seem to remember thinking that coverage could be compared on two binaries with different spans, because the regions wouldn't have changed (only the source mapping)</p>",
        "id": 258264614,
        "sender_full_name": "tmandry",
        "timestamp": 1634674571
    },
    {
        "content": "<p>and this is on a per-function basis, so this is information that tooling could make frequent use of, in theory</p>",
        "id": 258264771,
        "sender_full_name": "tmandry",
        "timestamp": 1634674634
    },
    {
        "content": "<p>I don't know if any tooling actually does that or not</p>",
        "id": 258264802,
        "sender_full_name": "tmandry",
        "timestamp": 1634674651
    },
    {
        "content": "<p>changing the hash iff the source of that function changes is not going to regress any existing use case that I know of</p>",
        "id": 258265119,
        "sender_full_name": "tmandry",
        "timestamp": 1634674791
    },
    {
        "content": "<p>and would preserve at least some of the usefulness of being able to do comparisons of coverage between different binaries</p>",
        "id": 258265315,
        "sender_full_name": "tmandry",
        "timestamp": 1634674870
    },
    {
        "content": "<p>most of it, even. most people know that if they only changed comments they don't need to worry about code coverage changes, even if the tooling doesn't know that</p>",
        "id": 258265427,
        "sender_full_name": "tmandry",
        "timestamp": 1634674921
    }
]