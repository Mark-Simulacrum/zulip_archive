[
    {
        "content": "<p>Over in AVR-land, we recently hit <a href=\"https://github.com/avr-rust/rust/issues/143\" target=\"_blank\" title=\"https://github.com/avr-rust/rust/issues/143\">an issue</a> about casting function pointers. It immediately affected us for printing function pointers with <code>Debug</code>, but it also occurs with futures-related stuff, such as this simplified Rust code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">alpha</span><span class=\"p\">(</span><span class=\"n\">i</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">alpha</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This causes</p>\n<div class=\"codehilite\"><pre><span></span>Assertion failed: (CastInst::castIsValid(Instruction::BitCast, C, DstTy) &amp;&amp; &quot;Invalid constantexpr bitcast!&quot;), function getBitCast, file /Users/shep/Projects/avr-rust/src/llvm-project/llvm/lib/IR/Constants.cpp, line 1776.\n</pre></div>\n\n\n<p>Because the address spaces don't match:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">SrcPtrTy</span><span class=\"o\">-&gt;</span><span class=\"n\">getAddressSpace</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">DstPtrTy</span><span class=\"o\">-&gt;</span><span class=\"n\">getAddressSpace</span><span class=\"p\">())</span>\n</pre></div>",
        "id": 167708879,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560101155
    },
    {
        "content": "<p>This is the information we've gathered, but I'm not sure what to do next, or even what questions to ask next, so I figured I'd cast a wide net here and see if anyone had any suggestions.</p>",
        "id": 167708928,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560101205
    },
    {
        "content": "<p>wow, so on AVR the address space for fn ptrs is different that for normal ptrs?</p>",
        "id": 167744994,
        "sender_full_name": "RalfJ",
        "timestamp": 1560158586
    },
    {
        "content": "<p>embedded stuff is wild^^</p>",
        "id": 167744997,
        "sender_full_name": "RalfJ",
        "timestamp": 1560158594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> right, because AVR is Harvard architecture, not von Neumann (see also <a href=\"https://github.com/avr-rust/rust/issues/53\" target=\"_blank\" title=\"https://github.com/avr-rust/rust/issues/53\">https://github.com/avr-rust/rust/issues/53</a>)</p>",
        "id": 167767737,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560179762
    },
    {
        "content": "<p>So the code lives in a different address space \"PROGMEM\"</p>",
        "id": 167767801,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560179794
    },
    {
        "content": "<p>looks like first and foremost a compiler issue to me</p>",
        "id": 167770694,
        "sender_full_name": "RalfJ",
        "timestamp": 1560181878
    },
    {
        "content": "<p>but this also means you cannot cast fn ptrs to raw ptrs...</p>",
        "id": 167770702,
        "sender_full_name": "RalfJ",
        "timestamp": 1560181885
    },
    {
        "content": "<p>rustc would have to set the \"function\" address space for <code>fn</code> types, I guess</p>",
        "id": 167770726,
        "sender_full_name": "RalfJ",
        "timestamp": 1560181921
    },
    {
        "content": "<blockquote>\n<p>you cannot cast fn ptrs to raw ptrs</p>\n</blockquote>\n<p>Right, LLVM dies. We had to <a href=\"https://github.com/avr-rust/rust/commit/17839c7c3c40188a94fac6a3955d7dc8f093e37c\" target=\"_blank\" title=\"https://github.com/avr-rust/rust/commit/17839c7c3c40188a94fac6a3955d7dc8f093e37c\">add a hack for this</a> right now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">fmt</span>::<span class=\"n\">Pointer</span>::<span class=\"n\">fmt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"c1\">//                        ^^^^^^^^</span>\n</pre></div>\n\n\n<blockquote>\n<p>rustc would have to set the \"function\" address space for fn types</p>\n</blockquote>\n<p>I think it does <em>sometimes</em>, which is why this is causing a problem. I think we need to find the piece of code that is responsible for casting function pointers and enhance it to preserve the address space for the source on the destination (maybe?)</p>",
        "id": 167772885,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560183452
    },
    {
        "content": "<p>I'm not sure which compiler devs have experience in this area. I want to ping eddyb because I ping them for everything, but figured I'd wait a little while to see if anyone else has knowledge.</p>",
        "id": 167772958,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560183499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> might have an idea, or <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span></p>",
        "id": 167792168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1560197462
    },
    {
        "content": "<p>I have knowledge of address spaces but no idea why this specifically fails. it may be possible that all our statics assume data address space</p>",
        "id": 167809428,
        "sender_full_name": "nagisa",
        "timestamp": 1560214318
    },
    {
        "content": "<p>regardless of their type</p>",
        "id": 167809473,
        "sender_full_name": "nagisa",
        "timestamp": 1560214327
    },
    {
        "content": "<p>that being said I’m fairly confident our backend does not deal with address spaces at ALL</p>",
        "id": 167809478,
        "sender_full_name": "nagisa",
        "timestamp": 1560214346
    },
    {
        "content": "<p>I think I remember some murmur about somebody doing something in that direction but I haven’t heard anything about it since</p>",
        "id": 167809505,
        "sender_full_name": "nagisa",
        "timestamp": 1560214406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> do you think there's a \"small\" part of the compiler you could point us to that deals with the address spaces of such things?</p>",
        "id": 167842600,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560254133
    },
    {
        "content": "<p>From a quick search, we have <a href=\"https://github.com/rust-lang/rust/blob/49d139c64b69ec5289f9f81db885ecfc2c7a8366/src/librustc_codegen_llvm/abi.rs#L365\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/49d139c64b69ec5289f9f81db885ecfc2c7a8366/src/librustc_codegen_llvm/abi.rs#L365\">https://github.com/rust-lang/rust/blob/49d139c64b69ec5289f9f81db885ecfc2c7a8366/src/librustc_codegen_llvm/abi.rs#L365</a> and <a href=\"https://github.com/rust-lang/rust/blob/49d139c64b69ec5289f9f81db885ecfc2c7a8366/src/librustc_codegen_llvm/type_.rs#L308\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/49d139c64b69ec5289f9f81db885ecfc2c7a8366/src/librustc_codegen_llvm/type_.rs#L308\">https://github.com/rust-lang/rust/blob/49d139c64b69ec5289f9f81db885ecfc2c7a8366/src/librustc_codegen_llvm/type_.rs#L308</a>.</p>",
        "id": 167888598,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1560285802
    },
    {
        "content": "<p>Possibly the code in <a href=\"https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src/librustc_codegen_ssa/mir/rvalue.rs#L167\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src/librustc_codegen_ssa/mir/rvalue.rs#L167\">https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src/librustc_codegen_ssa/mir/rvalue.rs#L167</a> is relevant, it deals a lot with casting around function types.</p>",
        "id": 167889341,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1560286299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> saw my Discord ramblings:</p>\n<blockquote>\n<p>the i8* is coming from us lowering miri allocations to LLVM</p>\n<p>it wouldn't be that hard to change the addrspace when lowering a pointer to a function, as opposed to a data pointer (cc <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span>)<br>\n<a href=\"https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/common.rs#L322\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/common.rs#L322\">https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/common.rs#L322</a><br>\nso there's a cast here, where type_i8p shouldn't always be the same addrspace: <a href=\"https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/common.rs#L331\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/common.rs#L331\">https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/common.rs#L331</a></p>\n<p>and then here, either check self.tcx.alloc_map.lock().get(alloc_id) for GlobalAlloc::Function or avoid the cast in scalar_to_backend by not passing in a type to scalar_to_backend (and so move the cast at the end of scalar_to_backend to its other 2 callers) <a href=\"https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/consts.rs#L50\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/consts.rs#L50\">https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/consts.rs#L50</a></p>\n</blockquote>",
        "id": 167955972,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560352067
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"133224\">@Nikita Popov</span> ! Now I have to try and act on some of this <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 167956238,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560352235
    },
    {
        "content": "<p>ftr the hint was <code>i8*</code> in a <code>static</code></p>",
        "id": 167956504,
        "sender_full_name": "eddyb",
        "timestamp": 1560352384
    },
    {
        "content": "<p>yea, in <a href=\"https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/common.rs#L322\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/common.rs#L322\">https://github.com/rust-lang/rust/blob/c4797fa4f4a696b183b3aa1517ee22c78d0f5d7a/src/librustc_codegen_llvm/common.rs#L322</a> we could just return early instead of falling through to the cast</p>",
        "id": 167956704,
        "sender_full_name": "oli",
        "timestamp": 1560352495
    },
    {
        "content": "<p>Y'all are the best. I'm gonna give this a try this evening</p>",
        "id": 167958106,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560353312
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 167958114,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560353317
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you can't not obey the cast</p>",
        "id": 167963651,
        "sender_full_name": "eddyb",
        "timestamp": 1560356508
    },
    {
        "content": "<p>it's just that for one caller, no cast is actually needed</p>",
        "id": 167963735,
        "sender_full_name": "eddyb",
        "timestamp": 1560356549
    },
    {
        "content": "<blockquote>\n<p>either check <code>self.tcx.alloc_map.lock().get(alloc_id)</code> for <code>GlobalAlloc::Function</code></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  an what would I do when I know it's a function? You mentioned:</p>\n<blockquote>\n<p>no cast is actually needed</p>\n</blockquote>\n<p>but I still need to do <em>some</em> cast, you said?</p>",
        "id": 168002031,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560385959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> no cast is needed when putting the pointer into a new allocation. but is needed for the other calls of that method</p>",
        "id": 168075466,
        "sender_full_name": "eddyb",
        "timestamp": 1560452618
    },
    {
        "content": "<p>like, one <code>scalar_to_backend</code> call doesn't need to do the cast. the one that always passes <code>i8p</code></p>",
        "id": 168075505,
        "sender_full_name": "eddyb",
        "timestamp": 1560452643
    },
    {
        "content": "<p>could put <code>Option</code> around that <code>&amp;'ll Type</code> argument, that'd be the simplest change I think?</p>",
        "id": 168076144,
        "sender_full_name": "eddyb",
        "timestamp": 1560453076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> in <code>librustc_codegen_llvm</code> there's only one call to <code>scalar_to_backend</code> at all (there are other calls in <code>librustc_codegen_ssa</code> to a different function of the same name though)</p>",
        "id": 168077540,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560454124
    },
    {
        "content": "<p>Or am I getting confused by traits</p>",
        "id": 168077687,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560454156
    },
    {
        "content": "<p>Let's assume the latter. So the function is passed an <code>Option</code>; what do I do when it's <code>None</code>?</p>",
        "id": 168077922,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560454339
    },
    {
        "content": "<p>Ultimately, this code needs to have the <code>llty</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">llval</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMConstInBoundsGEP</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_bitcast</span><span class=\"p\">(</span><span class=\"n\">base_addr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">type_i8p</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_usize</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">.</span><span class=\"n\">bytes</span><span class=\"p\">()),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">layout</span>::<span class=\"n\">Pointer</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMConstPtrToInt</span><span class=\"p\">(</span><span class=\"n\">llval</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_bitcast</span><span class=\"p\">(</span><span class=\"n\">llval</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168078100,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560454470
    },
    {
        "content": "<p>For example, using your earlier comment about <code>GlobalAlloc::Function</code>, I <a href=\"https://github.com/shepmaster/rust/commit/2c9f43ac9aabfc565ce34e2b0ff1535a1f68a62d\" target=\"_blank\" title=\"https://github.com/shepmaster/rust/commit/2c9f43ac9aabfc565ce34e2b0ff1535a1f68a62d\">had this scaffolding</a></p>",
        "id": 168078880,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560455048
    },
    {
        "content": "<p>Do you mean it's literally just <code>self.const_bitcast(base_addr, self.type_i8p()),</code> that isn't needed?</p>",
        "id": 168079094,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560455215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> there is only one method with that name, and 3-4 calls to it</p>",
        "id": 168079119,
        "sender_full_name": "eddyb",
        "timestamp": 1560455239
    },
    {
        "content": "<p>it's a trait, yes, and <code>rustc_codegen_ssa</code> code calls it</p>",
        "id": 168079132,
        "sender_full_name": "eddyb",
        "timestamp": 1560455252
    },
    {
        "content": "<p>what I mean is literally just skip this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">layout</span>::<span class=\"n\">Pointer</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMConstPtrToInt</span><span class=\"p\">(</span><span class=\"n\">llval</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_bitcast</span><span class=\"p\">(</span><span class=\"n\">llval</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168079157,
        "sender_full_name": "eddyb",
        "timestamp": 1560455280
    },
    {
        "content": "<p>yeah, I got confused by ripgrepping for <code>fn whatever</code> and seeing two \"definitions\" and forgetting that traits existed at all</p>",
        "id": 168079213,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560455299
    },
    {
        "content": "<p>that's a flexible cast (because LLVM's constants cast constructors are broken)</p>",
        "id": 168079218,
        "sender_full_name": "eddyb",
        "timestamp": 1560455302
    },
    {
        "content": "<p>so instead of returning <code>cast(llval, llty)</code> you'd be returning just <code>llval</code></p>",
        "id": 168079245,
        "sender_full_name": "eddyb",
        "timestamp": 1560455326
    },
    {
        "content": "<p>But the LLVM assertion is coming from <code>self.const_bitcast(base_addr, self.type_i8p()),</code></p>",
        "id": 168079263,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560455340
    },
    {
        "content": "<p>the lines before that if/else</p>",
        "id": 168079278,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560455352
    },
    {
        "content": "<p>it's <em>an assertion</em>?!</p>",
        "id": 168079293,
        "sender_full_name": "eddyb",
        "timestamp": 1560455366
    },
    {
        "content": "<p>my bad</p>",
        "id": 168079299,
        "sender_full_name": "eddyb",
        "timestamp": 1560455370
    },
    {
        "content": "<p>okay I see, there are two casts you'd need to skip</p>",
        "id": 168079322,
        "sender_full_name": "eddyb",
        "timestamp": 1560455397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> for <em>that</em> side, skip the cast &amp; GEPi when <code>ptr.offset.bytes()</code> is <code>0</code></p>",
        "id": 168079382,
        "sender_full_name": "eddyb",
        "timestamp": 1560455414
    },
    {
        "content": "<p>since it's a noop then</p>",
        "id": 168079385,
        "sender_full_name": "eddyb",
        "timestamp": 1560455418
    },
    {
        "content": "<p>Sorry, I thought I had pasted the original issue</p>",
        "id": 168079388,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560455420
    },
    {
        "content": "<p>nah I just can't read even if you did :P</p>",
        "id": 168079426,
        "sender_full_name": "eddyb",
        "timestamp": 1560455435
    },
    {
        "content": "<p>anyway that will always be <code>0</code> for functions</p>",
        "id": 168079436,
        "sender_full_name": "eddyb",
        "timestamp": 1560455442
    },
    {
        "content": "<p>and you still need the <code>Option</code> thing to avoid the next cast, I just didn't have the whole solution :P</p>",
        "id": 168079491,
        "sender_full_name": "eddyb",
        "timestamp": 1560455480
    },
    {
        "content": "<p>And just return... <code>base_addr</code> ?</p>",
        "id": 168079640,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560455586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> yupp!</p>",
        "id": 168079834,
        "sender_full_name": "eddyb",
        "timestamp": 1560455763
    },
    {
        "content": "<p>that's the address of the function, in your case</p>",
        "id": 168079872,
        "sender_full_name": "eddyb",
        "timestamp": 1560455774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> it'd be easy to make it conditional changes of a <code>llval</code> variable, btw</p>",
        "id": 168079896,
        "sender_full_name": "eddyb",
        "timestamp": 1560455794
    },
    {
        "content": "<p>we do that in some places</p>",
        "id": 168079903,
        "sender_full_name": "eddyb",
        "timestamp": 1560455797
    },
    {
        "content": "<p>You mean like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">llvar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">condition</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">llvar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">thing</span><span class=\"p\">(</span><span class=\"n\">llvar</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 168080050,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560456043
    },
    {
        "content": "<p><code>llval</code> but yes :P</p>",
        "id": 168080124,
        "sender_full_name": "eddyb",
        "timestamp": 1560456130
    },
    {
        "content": "<p>Zulip is acting up wow</p>",
        "id": 168080132,
        "sender_full_name": "eddyb",
        "timestamp": 1560456141
    },
    {
        "content": "<p>Well I'll be. It compiled and my code compiled. Wonder if anything works.</p>",
        "id": 168099698,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560476314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> so, function pointers do appear to work on AVR, as to those stashed in a static; so thank you!</p>",
        "id": 168184289,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560561635
    },
    {
        "content": "<p>except that the optimizer might be ignoring all of the function pointers...</p>",
        "id": 168185205,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560563255
    },
    {
        "content": "<p>And it is.</p>",
        "id": 168185276,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560563377
    },
    {
        "content": "<p>Any idea how to prevent that optimization?</p>",
        "id": 168185280,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560563386
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"cp\">#[inline(never)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">gamma</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">SuperSerial</span><span class=\"p\">.</span><span class=\"n\">write_str</span><span class=\"p\">(</span><span class=\"s\">&quot;From gamma</span><span class=\"se\">\\r\\n</span><span class=\"s\">&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">MY_FN</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">beta</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">MY_FN</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">MY_FN</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">alpha</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Seems to do the trick.</p>",
        "id": 168185440,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560563639
    },
    {
        "content": "<p>OK, now the next step is to figure out why async is totally broken</p>",
        "id": 168185483,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560563663
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> is this relying on <code>#[inline(never)]</code>?</p>",
        "id": 168185484,
        "sender_full_name": "centril",
        "timestamp": 1560563669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> yes, it looks like at least one of the 3 is needed</p>",
        "id": 168185498,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560563712
    },
    {
        "content": "<p>To my knowledge, <code>#[inline(whatever)]</code> has no operational guarantees and is strictly a hint</p>",
        "id": 168185506,
        "sender_full_name": "centril",
        "timestamp": 1560563742
    },
    {
        "content": "<p>Oh, I don't actually care about if this uses a function pointer in the real code or not, just that it's possible for the compiler in the current state to actually correctly codegen function pointers and use them</p>",
        "id": 168185555,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560563823
    },
    {
        "content": "<p>I think that the inline helps because of the splitting of the <code>Some</code> and the <code>if let</code></p>",
        "id": 168185561,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560563845
    },
    {
        "content": "<p>ah</p>",
        "id": 168185564,
        "sender_full_name": "centril",
        "timestamp": 1560563860
    },
    {
        "content": "<p>So theoretically, I could do some strange thing like `write_volatile(...), if read_volatile(...) { val = Some(...) }</p>",
        "id": 168185606,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560563889
    },
    {
        "content": "<p>and assume that would be opaque enough for the optimizer</p>",
        "id": 168185608,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560563906
    },
    {
        "content": "<p>anyway, off to bed, I'll spend another 10 minutes on this tomorrow <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 168185624,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560563970
    },
    {
        "content": "<blockquote>\n<p>except that the optimizer might be ignoring all of the function pointers...</p>\n</blockquote>\n<p>hmm? I don't understand what that means or why your hack might work</p>",
        "id": 168259894,
        "sender_full_name": "eddyb",
        "timestamp": 1560704471
    },
    {
        "content": "<p>are you exporting that <code>static</code>?</p>",
        "id": 168259895,
        "sender_full_name": "eddyb",
        "timestamp": 1560704476
    },
    {
        "content": "<p>My test was basically (I forget exactly)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"k\">fn</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">whatever</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FOO</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>And the optimizer said \"nope, not actually an <code>Option</code> cause it's always there, nice try\"</p>",
        "id": 168260503,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560705583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> sorry but I don't know what you mean with regards to what the optimizer <em>did</em> :P</p>",
        "id": 168260554,
        "sender_full_name": "eddyb",
        "timestamp": 1560705647
    },
    {
        "content": "<p>It never created a function pointer, it inlined <code>whatever</code> and removed the conditional from the <code>if let</code></p>",
        "id": 168260565,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560705716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> also, yes, that <code>Option</code> is redundant, just like it would be in a <code>const</code></p>",
        "id": 168260566,
        "sender_full_name": "eddyb",
        "timestamp": 1560705718
    },
    {
        "content": "<p>thus my \"test\" for does this compiler  handle function pointers never actually generated a function pointer</p>",
        "id": 168260613,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560705778
    },
    {
        "content": "<p><code>if let Some(f) = *black_box(&amp;FOO) { f() }</code> should do</p>",
        "id": 168260623,
        "sender_full_name": "eddyb",
        "timestamp": 1560705803
    },
    {
        "content": "<p>(assuming you have access to that)</p>",
        "id": 168260666,
        "sender_full_name": "eddyb",
        "timestamp": 1560705864
    },
    {
        "content": "<p>As I mentioned in passing, I got it to generate a function pointer by splitting the setting of the static and using the static in different (non-inlined) functions.</p>",
        "id": 168260670,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560705877
    },
    {
        "content": "<p>if this is for a test in rust-lang/rust, I'd prefer the direct approach</p>",
        "id": 168260673,
        "sender_full_name": "eddyb",
        "timestamp": 1560705904
    },
    {
        "content": "<p>Test... hmm.</p>",
        "id": 168260682,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560705928
    },
    {
        "content": "<p>I thought this was a test?</p>",
        "id": 168260684,
        "sender_full_name": "eddyb",
        "timestamp": 1560705936
    },
    {
        "content": "<p>I mean, it's me generating code and looking at the results of objdump</p>",
        "id": 168260686,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560705954
    },
    {
        "content": "<p>keep in mind the original source of this is a manual vtable, so <code>static FOO: fn(...)</code> or even <code>const FOO: &amp;fn(...)</code> is the closest to the original problem</p>",
        "id": 168260726,
        "sender_full_name": "eddyb",
        "timestamp": 1560705972
    },
    {
        "content": "<p>I frankly have no idea how to actually write tests for this</p>",
        "id": 168260727,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560705973
    },
    {
        "content": "<p>I basically disassembled the function and looked for an <code>icall</code> instruction</p>",
        "id": 168260730,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560706005
    },
    {
        "content": "<p>yeah I guess run-pass is out of the question :/</p>",
        "id": 168260731,
        "sender_full_name": "eddyb",
        "timestamp": 1560706008
    },
    {
        "content": "<p>heh, the test suite is slow enough on those beefy computers. It would be \"omegalulz\" for AVR</p>",
        "id": 168260740,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560706061
    },
    {
        "content": "<p>I'd be happy to try and write some kind of rust-lang/rust test, but I don't know how to trigger an <code>addrspace(1)</code> function to start with...</p>",
        "id": 168260792,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560706157
    },
    {
        "content": "<p>you could, I suppose, make a codegen test that passes --target... idk</p>",
        "id": 168260795,
        "sender_full_name": "eddyb",
        "timestamp": 1560706195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> might</p>",
        "id": 168260798,
        "sender_full_name": "eddyb",
        "timestamp": 1560706197
    },
    {
        "content": "<p>yes you can write target-specific codegen tests now</p>",
        "id": 168263459,
        "sender_full_name": "nagisa",
        "timestamp": 1560711299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> could you help me verify that this LLVM IR for a simple generator looks right? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">; ModuleID = &#39;blink.bpf1ew8c-cgu.0&#39;</span>\n<span class=\"k\">source_filename</span> <span class=\"p\">=</span> <span class=\"s\">&quot;blink.bpf1ew8c-cgu.0&quot;</span>\n<span class=\"k\">target</span> <span class=\"k\">datalayout</span> <span class=\"p\">=</span> <span class=\"s\">&quot;e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8&quot;</span>\n<span class=\"k\">target</span> <span class=\"k\">triple</span> <span class=\"p\">=</span> <span class=\"s\">&quot;avr-unknown-unknown&quot;</span>\n\n<span class=\"nv\">%&quot;exercise_generator::{{closure}}&quot;</span> <span class=\"p\">=</span> <span class=\"k\">type</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">],</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"m\">3</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}</span>\n\n<span class=\"vg\">@0</span> <span class=\"p\">=</span> <span class=\"k\">private</span> <span class=\"k\">unnamed_addr</span> <span class=\"k\">constant</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">2</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">2</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"k\">c</span><span class=\"s\">&quot;on&quot;</span> <span class=\"p\">}&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n<span class=\"vg\">@1</span> <span class=\"p\">=</span> <span class=\"k\">private</span> <span class=\"k\">unnamed_addr</span> <span class=\"k\">constant</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">3</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">3</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"k\">c</span><span class=\"s\">&quot;off&quot;</span> <span class=\"p\">}&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n<span class=\"vg\">@2</span> <span class=\"p\">=</span> <span class=\"k\">private</span> <span class=\"k\">unnamed_addr</span> <span class=\"k\">constant</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">2</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;</span> <span class=\"p\">&lt;{</span> <span class=\"p\">[</span><span class=\"m\">2</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"k\">c</span><span class=\"s\">&quot;\\0D\\0A&quot;</span> <span class=\"p\">}&gt;,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n\n\n<span class=\"c\">; blink::exercise_generator</span>\n<span class=\"c\">; Function Attrs: minsize noinline noreturn nounwind optsize uwtable</span>\n<span class=\"k\">define</span> <span class=\"k\">internal</span> <span class=\"k\">fastcc</span> <span class=\"kt\">void</span> <span class=\"vg\">@_ZN5blink18exercise_generator17h7a2821046021edbfE</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"k\">addrspace</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"vg\">#5</span> <span class=\"k\">personality</span> <span class=\"kt\">void</span> <span class=\"p\">()</span> <span class=\"k\">addrspace</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)*</span> <span class=\"vg\">@rust_eh_personality</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1319</span> <span class=\"p\">{</span>\n<span class=\"nl\">bb2:</span>\n  <span class=\"nv\">%gen</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"nv\">%&quot;exercise_generator::{{closure}}&quot;</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"nv\">%&quot;exercise_generator::{{closure}}&quot;</span><span class=\"p\">,</span> <span class=\"nv\">%&quot;exercise_generator::{{closure}}&quot;</span><span class=\"p\">*</span> <span class=\"nv\">%gen</span><span class=\"p\">,</span> <span class=\"k\">i16</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i16</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1348</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"nv\">%&quot;exercise_generator::{{closure}}&quot;</span><span class=\"p\">*</span> <span class=\"nv\">%gen</span> <span class=\"k\">to</span> <span class=\"k\">i32</span><span class=\"p\">*,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1349</span>\n  <span class=\"k\">store</span> <span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i32</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1349</span>\n  <span class=\"nv\">%.phi.trans.insert.i</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"nv\">%&quot;exercise_generator::{{closure}}&quot;</span><span class=\"p\">,</span> <span class=\"nv\">%&quot;exercise_generator::{{closure}}&quot;</span><span class=\"p\">*</span> <span class=\"nv\">%gen</span><span class=\"p\">,</span> <span class=\"k\">i16</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i16</span> <span class=\"m\">5</span>\n  <span class=\"nv\">%.phi.trans.insert15.i</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%.phi.trans.insert.i</span> <span class=\"k\">to</span> <span class=\"k\">i8</span><span class=\"p\">**</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"k\">inbounds</span> <span class=\"nv\">%&quot;exercise_generator::{{closure}}&quot;</span><span class=\"p\">,</span> <span class=\"nv\">%&quot;exercise_generator::{{closure}}&quot;</span><span class=\"p\">*</span> <span class=\"nv\">%gen</span><span class=\"p\">,</span> <span class=\"k\">i16</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"k\">i16</span> <span class=\"m\">4</span>\n  <span class=\"k\">store</span> <span class=\"k\">i8</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1370</span>\n  <span class=\"k\">store</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">**</span> <span class=\"nv\">%.phi.trans.insert15.i</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1371</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb3.i</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1373</span>\n\n<span class=\"nl\">bb3.i:</span>                                            <span class=\"c\">; preds = %&quot;_ZN5blink18exercise_generator28_$u7b$$u7b$closure$u7d$$u7d$17hdda39e828092551eE.exit&quot;, %bb2</span>\n<span class=\"c\">; call blink::write_strln</span>\n  <span class=\"k\">call</span> <span class=\"k\">fastcc</span> <span class=\"k\">addrspace</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"kt\">void</span> <span class=\"vg\">@_ZN5blink11write_strln17h9d9f094c9a29470cE</span><span class=\"p\">([</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*</span> <span class=\"k\">noalias</span> <span class=\"k\">nonnull</span> <span class=\"k\">readonly</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">bitcast</span> <span class=\"p\">(&lt;{</span> <span class=\"p\">[</span><span class=\"m\">2</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@0</span> <span class=\"k\">to</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*),</span> <span class=\"k\">i16</span> <span class=\"m\">2</span><span class=\"p\">),</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1374</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%&quot;_ZN5blink18exercise_generator28_$u7b$$u7b$closure$u7d$$u7d$17hdda39e828092551eE.exit&quot;</span>\n\n<span class=\"nl\">bb7.i:</span>                                            <span class=\"c\">; preds = %&quot;_ZN5blink18exercise_generator28_$u7b$$u7b$closure$u7d$$u7d$17hdda39e828092551eE.exit&quot;</span>\n<span class=\"c\">; call blink::write_strln</span>\n  <span class=\"k\">call</span> <span class=\"k\">fastcc</span> <span class=\"k\">addrspace</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"kt\">void</span> <span class=\"vg\">@_ZN5blink11write_strln17h9d9f094c9a29470cE</span><span class=\"p\">([</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*</span> <span class=\"k\">noalias</span> <span class=\"k\">nonnull</span> <span class=\"k\">readonly</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">bitcast</span> <span class=\"p\">(&lt;{</span> <span class=\"p\">[</span><span class=\"m\">3</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@1</span> <span class=\"k\">to</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*),</span> <span class=\"k\">i16</span> <span class=\"m\">3</span><span class=\"p\">),</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1375</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%&quot;_ZN5blink18exercise_generator28_$u7b$$u7b$closure$u7d$$u7d$17hdda39e828092551eE.exit&quot;</span>\n\n<span class=\"nl\">&quot;_ZN5blink18exercise_generator28_$u7b$$u7b$closure$u7d$$u7d$17hdda39e828092551eE.exit&quot;:</span> <span class=\"c\">; preds = %bb3.i, %bb7.i</span>\n  <span class=\"nv nv-Anonymous\">%3</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"k\">i8</span><span class=\"p\">*,</span> <span class=\"k\">i8</span><span class=\"p\">**</span> <span class=\"nv\">%.phi.trans.insert15.i</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1376</span><span class=\"p\">,</span> <span class=\"nv\">!nonnull</span> <span class=\"nv nv-Anonymous\">!14</span>\n  <span class=\"nv nv-Anonymous\">%4</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"k\">i8</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1376</span><span class=\"p\">,</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!1377</span>\n  <span class=\"nv nv-Anonymous\">%5</span> <span class=\"p\">=</span> <span class=\"k\">xor</span> <span class=\"k\">i8</span> <span class=\"nv nv-Anonymous\">%4</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1378</span>\n  <span class=\"k\">store</span> <span class=\"k\">i8</span> <span class=\"nv nv-Anonymous\">%5</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1378</span>\n  <span class=\"k\">store</span> <span class=\"k\">i32</span> <span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"k\">i32</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1379</span>\n  <span class=\"nv\">%.pre.i</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"k\">i8</span><span class=\"p\">*,</span> <span class=\"k\">i8</span><span class=\"p\">**</span> <span class=\"nv\">%.phi.trans.insert15.i</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1380</span>\n  <span class=\"nv\">%.pre16.i</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"k\">i8</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%.pre.i</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1380</span><span class=\"p\">,</span> <span class=\"nv\">!range</span> <span class=\"nv nv-Anonymous\">!1377</span>\n  <span class=\"nv\">%phitmp.i</span> <span class=\"p\">=</span> <span class=\"k\">icmp</span> <span class=\"k\">eq</span> <span class=\"k\">i8</span> <span class=\"nv\">%.pre16.i</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1381</span>\n  <span class=\"k\">br</span> <span class=\"k\">i1</span> <span class=\"nv\">%phitmp.i</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb7.i</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb3.i</span><span class=\"p\">,</span> <span class=\"nv\">!dbg</span> <span class=\"nv nv-Anonymous\">!1373</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 168363448,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560823937
    },
    {
        "content": "<p>It comes from <a href=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ffa0fabc5bcbf2ab0f7a10e4e096ee2f\" target=\"_blank\" title=\"https://play.integer32.com/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ffa0fabc5bcbf2ab0f7a10e4e096ee2f\">this generator code</a>. I want to make sure that the <a href=\"https://github.com/avr-rust/rust/issues/143#issuecomment-501938644\" target=\"_blank\" title=\"https://github.com/avr-rust/rust/issues/143#issuecomment-501938644\">change about casting pointers</a> you helped me with is unlikely to have any effect to this type of code.</p>",
        "id": 168363482,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560824040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> generators don't need function pointers at all so none of this should've changed</p>",
        "id": 168403589,
        "sender_full_name": "eddyb",
        "timestamp": 1560866477
    },
    {
        "content": "<p>You checked my implementation of the hack to make sure it wasn't overly broad, yeah?</p>",
        "id": 168403625,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560866505
    },
    {
        "content": "<p>I was afraid you'd say that though.</p>",
        "id": 168403632,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560866512
    },
    {
        "content": "<p>line-by-line assembly and LLVM-IR de-/re-construction is so tiresome</p>",
        "id": 168403696,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560866545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> oh your change is not what I Was hoping for</p>",
        "id": 168403741,
        "sender_full_name": "eddyb",
        "timestamp": 1560866594
    },
    {
        "content": "<p>Right.</p>",
        "id": 168403748,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560866599
    },
    {
        "content": "<p>It was the first version you suggested</p>",
        "id": 168403756,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560866606
    },
    {
        "content": "<p>I expected something very different</p>",
        "id": 168403764,
        "sender_full_name": "eddyb",
        "timestamp": 1560866610
    },
    {
        "content": "<p>yeah okay</p>",
        "id": 168403767,
        "sender_full_name": "eddyb",
        "timestamp": 1560866612
    },
    {
        "content": "<p>but then you went on the Option route</p>",
        "id": 168403768,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560866615
    },
    {
        "content": "<p>this original thing <em>could</em> break stuff</p>",
        "id": 168403779,
        "sender_full_name": "eddyb",
        "timestamp": 1560866624
    },
    {
        "content": "<p>but I'm not sure</p>",
        "id": 168403789,
        "sender_full_name": "eddyb",
        "timestamp": 1560866634
    },
    {
        "content": "<p>OK, so I should switch to the Option and pass in the none from the const allocation area</p>",
        "id": 168403841,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560866646
    },
    {
        "content": "<p>yeah and <em>independently</em> of that, make the <code>ConstInBoundsGEP</code> stuff conditional on <code>ptr.offset.bytes() != 0</code> (or <code>ptr.offset != Size::ZERO</code>? not sure)</p>",
        "id": 168403909,
        "sender_full_name": "eddyb",
        "timestamp": 1560866707
    },
    {
        "content": "<p>Another roadblock I had was with this bit of code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"n\">Scalar</span>::<span class=\"n\">Raw</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">).</span><span class=\"n\">bytes</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">llval</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_uint_big</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">type_ix</span><span class=\"p\">(</span><span class=\"n\">bitsize</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">layout</span>::<span class=\"n\">Pointer</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">llvm</span>::<span class=\"n\">LLVMConstIntToPtr</span><span class=\"p\">(</span><span class=\"n\">llval</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">const_bitcast</span><span class=\"p\">(</span><span class=\"n\">llval</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">llty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>You suggested making <code>llty</code> the <code>Option</code>, so what should I do in that block?</p>",
        "id": 168404023,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560866774
    },
    {
        "content": "<p>you have a <code>llval</code> <em>prior</em> to the cast</p>",
        "id": 168404087,
        "sender_full_name": "eddyb",
        "timestamp": 1560866810
    },
    {
        "content": "<p>which means you can just return that</p>",
        "id": 168404101,
        "sender_full_name": "eddyb",
        "timestamp": 1560866819
    },
    {
        "content": "<p>the <code>if</code>-<code>else</code> in there is just a cast. but weird because LLVM doesn't have a simple \"cast this and figure out how\" function for constant vals, despite having one for runtime casts</p>",
        "id": 168404180,
        "sender_full_name": "eddyb",
        "timestamp": 1560866867
    },
    {
        "content": "<p>this would only be tricky if you needed <code>llty</code> to create a value <em>at all</em>. but it's only used for a \"type cast\" (the bitwidth doesn't change)</p>",
        "id": 168404289,
        "sender_full_name": "eddyb",
        "timestamp": 1560866913
    },
    {
        "content": "<p>Does <a href=\"https://gist.github.com/shepmaster/af41bfc01f9a1427e57a56198e93d529\" target=\"_blank\" title=\"https://gist.github.com/shepmaster/af41bfc01f9a1427e57a56198e93d529\">this diff</a> look closer to your intent?</p>",
        "id": 168406754,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560868525
    },
    {
        "content": "<p>it seemingly compiles that code (now building everything else...)</p>",
        "id": 168406773,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560868542
    },
    {
        "content": "<p>I would use <code>if let Some</code> and mutate inside, but this seems okay</p>",
        "id": 168409392,
        "sender_full_name": "eddyb",
        "timestamp": 1560870139
    },
    {
        "content": "<p>I can tweak that. This is a case where I really wish my RLS + emacs setup worked in the compiler tree. Figuring out what is what type is very slow.</p>",
        "id": 168409855,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560870412
    },
    {
        "content": "<p>yeaaaaaaaah sadly I think it will take the death of save-analysis to make RLS viable for the compiler source</p>",
        "id": 168409892,
        "sender_full_name": "eddyb",
        "timestamp": 1560870454
    },
    {
        "content": "<p>you <em>could</em> ask me but that doesn't work when I'm not around :P</p>",
        "id": 168409966,
        "sender_full_name": "eddyb",
        "timestamp": 1560870484
    },
    {
        "content": "<p>one trick I rely on is double-click names so I can see all the places they occur</p>",
        "id": 168410017,
        "sender_full_name": "eddyb",
        "timestamp": 1560870499
    },
    {
        "content": "<p>but that doesn't get you that far sometimes</p>",
        "id": 168410031,
        "sender_full_name": "eddyb",
        "timestamp": 1560870511
    },
    {
        "content": "<p>Sadly, this change doesn't seem to make my generator work correctly.</p>",
        "id": 168411832,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1560871535
    }
]