[
    {
        "content": "<p>I just got the following compile error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0401]: can&#39;t use generic parameters from outer function\n   --&gt; library/alloc/src/raw_vec.rs:409:49\n    |\n362 | impl&lt;T, A: Allocator&gt; RawVec&lt;T, A&gt; {\n    |      - type parameter from outer function\n...\n409 |         const elem_size: usize = mem::size_of::&lt;T&gt;();\n    |                                                 ^ use of generic parameter from outer function\n</code></pre></div>\n<p>Why is this a restriction? Changing <code>const</code> to <code>let</code> works fine.</p>",
        "id": 223469151,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611203640
    },
    {
        "content": "<p><code>size_of</code> is explicitly a <code>const fn</code> too</p>",
        "id": 223469225,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611203694
    },
    {
        "content": "<p>using associated constants also breaks:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0401]: can&#39;t use generic parameters from outer function\n   --&gt; library/alloc/src/raw_vec.rs:411:44\n    |\n364 | impl&lt;T, A: Allocator&gt; RawVec&lt;T, A&gt; {\n    | ---- `Self` type implicitly declared here, by this `impl`\n...\n411 |         const min_non_zero_cap: usize = if Self::elem_size == 1 {\n    |                                            ^^^^^^^^^^^^^^^\n    |                                            |\n    |                                            use of generic parameter from outer function\n    |                                            use a type here instead\n</code></pre></div>",
        "id": 223469317,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611203842
    },
    {
        "content": "<p>i think you just can't do generic associated consts yet, but they're planned to be in the language Some Day (tm)</p>",
        "id": 223469743,
        "sender_full_name": "Lokathor",
        "timestamp": 1611204323
    },
    {
        "content": "<p>the associated const is not generic. It only depends on a generic parameter.</p>",
        "id": 223469756,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611204347
    },
    {
        "content": "<p>it has a fixed type of <code>usize</code></p>",
        "id": 223469764,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611204357
    },
    {
        "content": "<p>it's been a restriction for a while. it's kind of annoying, since you'd often like to do something like have a <code>[u8; size_of::&lt;T&gt;()]</code>, however IIUC the limitation currently is the result of const eval isn't allowed to feed back into the type system, which is what this would allow.</p>",
        "id": 223469888,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1611204489
    },
    {
        "content": "<p>hmm, makes sense. that's unfortunate, I would like to statically guarentee <code>min_non_zero_cap</code> is computed at compile time</p>",
        "id": 223470054,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611204806
    },
    {
        "content": "<p>if you make <code>min_con_zero_cap</code> an associated constant of <code>RawVec</code> it should work</p>",
        "id": 223484186,
        "sender_full_name": "oli",
        "timestamp": 1611220521
    },
    {
        "content": "<p>but this may conflict with future planned changes that may end up requiring <code>const_evaluatable_checked</code>. cc <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span></p>",
        "id": 223484255,
        "sender_full_name": "oli",
        "timestamp": 1611220565
    },
    {
        "content": "<p>using generic associated consts seems fine to me. They are already used too much for us to forbid them outright so no matter what we do we will have to keep allowing them.</p>",
        "id": 223489411,
        "sender_full_name": "lcnr",
        "timestamp": 1611223946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> the associated constant thing is what I tried, it didn't work</p>",
        "id": 223530830,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611245597
    },
    {
        "content": "<p>oh, from the indentation level I was guessing it was inside a function... brb testing something</p>",
        "id": 223531343,
        "sender_full_name": "oli",
        "timestamp": 1611245800
    },
    {
        "content": "<p>idk, I can't reproduce. Do you have your code up somwhere?</p>",
        "id": 223531588,
        "sender_full_name": "oli",
        "timestamp": 1611245904
    },
    {
        "content": "<p>Here's my test: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d9dac0dbebe8f1ad38161efbf50a06bb\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d9dac0dbebe8f1ad38161efbf50a06bb</a></p>",
        "id": 223531594,
        "sender_full_name": "oli",
        "timestamp": 1611245907
    },
    {
        "content": "<p>oh huh, maybe I confused myself, this works fine:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/library/alloc/src/raw_vec.rs b/library/alloc/src/raw_vec.rs</span>\n<span class=\"gh\">index 36b7efc33a8..0b462e99065 100644</span>\n<span class=\"gd\">--- a/library/alloc/src/raw_vec.rs</span>\n<span class=\"gi\">+++ b/library/alloc/src/raw_vec.rs</span>\n<span class=\"gu\">@@ -114,6 +114,21 @@ pub unsafe fn from_raw_parts(ptr: *mut T, capacity: usize) -&gt; Self {</span>\n }\n\n impl&lt;T, A: Allocator&gt; RawVec&lt;T, A&gt; {\n<span class=\"gi\">+    // Tiny Vecs are dumb. Skip to:</span>\n<span class=\"gi\">+    // - 8 if the element size is 1, because any heap allocators is likely</span>\n<span class=\"gi\">+    //   to round up a request of less than 8 bytes to at least 8 bytes.</span>\n<span class=\"gi\">+    // - 4 if elements are moderate-sized (&lt;= 1 KiB).</span>\n<span class=\"gi\">+    // - 1 otherwise, to avoid wasting too much space for very short Vecs.</span>\n<span class=\"gi\">+    // Note that `min_non_zero_cap` is computed statically.</span>\n<span class=\"gi\">+    const elem_size: usize = mem::size_of::&lt;T&gt;();</span>\n<span class=\"gi\">+    const min_non_zero_cap: usize = if Self::elem_size == 1 {</span>\n<span class=\"gi\">+        8</span>\n<span class=\"gi\">+    } else if Self::elem_size &lt;= 1024 {</span>\n<span class=\"gi\">+        4</span>\n<span class=\"gi\">+    } else {</span>\n<span class=\"gi\">+        1</span>\n<span class=\"gi\">+    };</span>\n<span class=\"gi\">+</span>\n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n     #[rustc_allow_const_fn_unstable(const_fn)]\n</code></pre></div>",
        "id": 223537025,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611247928
    },
    {
        "content": "<p>opened <a href=\"https://github.com/rust-lang/rust/pull/81242\">https://github.com/rust-lang/rust/pull/81242</a></p>",
        "id": 223538044,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611248341
    },
    {
        "content": "<p>For what it's worth, the original issue is a limitation that is intended to be lifted: <a href=\"https://github.com/rust-lang/rust/issues/61414\">https://github.com/rust-lang/rust/issues/61414</a></p>",
        "id": 223697814,
        "sender_full_name": "varkor",
        "timestamp": 1611348506
    }
]