[
    {
        "content": "<p>I am looking into implementing <a href=\"https://github.com/rust-lang/rust/issues/46043#issuecomment-628932100\">this</a>. That lint pass basically has to be implemented on MIR, so it seems I cannot use the normal lint pass infrastructure. I figured I'd follow unsafety checking, which also is on the MIR, but I cannot even properly figure out how that is invoked... it's a query, so everything is very indirect. The only call to the query is in a function called <code>mir_const</code> which I assume is for consts only. I am a bit lost here. Also I am not sure if adding a new query for my lint is really appropriate, but I'd rather not make this part of unsafety checking which is critical code and already too complicated.</p>",
        "id": 197790453,
        "sender_full_name": "RalfJ",
        "timestamp": 1589627170
    },
    {
        "content": "<p>oh, found some docs which seems to indicate that <code>mir_const</code> is not just for consts. That's... a very confusingly chosen name.</p>",
        "id": 197790462,
        "sender_full_name": "RalfJ",
        "timestamp": 1589627220
    },
    {
        "content": "<p>so I could just call that lint directly from <code>mir_const</code> after unsafety checking, I guess?</p>",
        "id": 197790480,
        "sender_full_name": "RalfJ",
        "timestamp": 1589627272
    },
    {
        "content": "<p>clippy has MIR lints</p>",
        "id": 197801699,
        "sender_full_name": "oli",
        "timestamp": 1589644164
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-clippy/blob/0c9427309ce0c647ee32cd4c88ca5902b57fb7ee/clippy_lints/src/redundant_clone.rs#L80\">https://github.com/rust-lang/rust-clippy/blob/0c9427309ce0c647ee32cd4c88ca5902b57fb7ee/clippy_lints/src/redundant_clone.rs#L80</a> is where it gets the MIR</p>",
        "id": 197801749,
        "sender_full_name": "oli",
        "timestamp": 1589644209
    },
    {
        "content": "<p>basically a lint that is run on all functions and processes them</p>",
        "id": 197801755,
        "sender_full_name": "oli",
        "timestamp": 1589644220
    },
    {
        "content": "<p>but yea, in rustc we can just create a <code>MirPass</code> that doesn't modify anything</p>",
        "id": 197801859,
        "sender_full_name": "oli",
        "timestamp": 1589644416
    },
    {
        "content": "<p>There's also the <code>unconditional_recursion</code> lint, which is run <a href=\"https://github.com/rust-lang/rust/blob/31add7e60709445617ab54a69f6f21cfcb2e3122/src/librustc_mir_build/build/mod.rs#L184\">right after MIR building</a>. See <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir_build/lints.rs\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir_build/lints.rs</a></p>",
        "id": 197802293,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1589644916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/131828-t-compiler/topic/MIR.20lint.20pass/near/197802293\">said</a>:</p>\n<blockquote>\n<p>There's also the <code>unconditional_recursion</code> lint, which is run <a href=\"https://github.com/rust-lang/rust/blob/31add7e60709445617ab54a69f6f21cfcb2e3122/src/librustc_mir_build/build/mod.rs#L184\">right after MIR building</a>. See <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir_build/lints.rs\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir_build/lints.rs</a></p>\n</blockquote>\n<p>interesting. so we have unsafety checking, <code>unconditional_recursion</code> and now my proposed <a href=\"https://github.com/rust-lang/rust/pull/72270\">https://github.com/rust-lang/rust/pull/72270</a> basically all being MIR lint passes and using entirely different infrastructures...</p>",
        "id": 197805829,
        "sender_full_name": "RalfJ",
        "timestamp": 1589650060
    },
    {
        "content": "<p>I mean... it makes some sense, right?</p>",
        "id": 197825966,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589682271
    },
    {
        "content": "<p>At least having Clippy vs rustc to check for correctness, I think, makes sense for the sake of compile times</p>",
        "id": 197825968,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589682300
    },
    {
        "content": "<p>Like maybe you have a check in Clippy that is somewhat costly to run all the time</p>",
        "id": 197825973,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589682332
    },
    {
        "content": "<p>Now, with regards to mir lints existing at different stages of rustc... that's really intriguing. I'd guess it makes sense if we, say, can run a certain lint with less difficulty at the beginning of the MIR stage and can run another one with less difficulty at the end or middle of the MIR stage</p>",
        "id": 197826027,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589682427
    },
    {
        "content": "<p>Sometimes there are checks that are obvious once you look at the optimized MIR, like some code that's rejected because upon constant propagation + folding, the compiler realizes that a code assertion is being invalidated (like when dividing by 0)</p>",
        "id": 197826081,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589682505
    },
    {
        "content": "<p>I dunno. It's interesting tho :3</p>",
        "id": 197826087,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589682526
    },
    {
        "content": "<p>I didn't know there was more than one part inside the compiler where MIR lints were issued</p>",
        "id": 197826096,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1589682549
    },
    {
        "content": "<p>the three passes (unsafety checking is not a lint but a lot like it -- it doesnt modify MIR) run on basically the same MIR -- just before initial construction, just after initial construction, and just a bit after that. I don't immediately see any good reason for that. but then unsafety checking is a query and I do not understand why it should be, so there might be stuff I am missing.</p>",
        "id": 197838062,
        "sender_full_name": "RalfJ",
        "timestamp": 1589704983
    },
    {
        "content": "<p>I looked at unsafety checking today for <a href=\"https://github.com/rust-lang/rust/issues/72394\">#72394</a> and I don't see a good reason for it to be a query. The query is used to bundle up all the unsafety violations for closures and generators so that it can apply <code>unsafe</code> blocks from the parent item. However, I think we can assume that there is only one <code>AggregateKind::Closure</code> or <code>AggregateKind::Generator</code> per <code>DefId</code>. If that's true, we can simply recurse when we see it instead of storing the results in the query table. </p>\n<p>I suppose the downside is that unsafety checking would depend on <code>mir_built</code> for both the parent item and the closure, whereas it only depends on <code>unsafety_check_result</code> for the closure today.</p>",
        "id": 198254821,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1590007430
    }
]