[
    {
        "content": "<p>I used to be able to do <code>[rust] debug = true</code> in the <code>config.toml</code> file, and the resulting <code>rustc</code> binary would be debuggable on my Mac. At some point the issues with having to code-sign my own <code>gdb</code> (as well as wanting to use <code>rr</code>) led me to stop doing this on a Mac.</p>",
        "id": 219686477,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607743567
    },
    {
        "content": "<p>but recently someone at work asked me why this didn't work for them</p>",
        "id": 219686486,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607743591
    },
    {
        "content": "<p>and I tried it myself, and I couldn't get it to work either</p>",
        "id": 219686491,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607743598
    },
    {
        "content": "<p>furthermore, I couldn't even backtrack: Bootstrapping an older checkout of <code>rust.git</code> with <code>debug = true</code> did not resolve the problem. Which makes me think this is something related to changes to Mac OS X's lldb.</p>",
        "id": 219686503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607743647
    },
    {
        "content": "<p>Meanwhile I see evidence that we at some point were building our own fork of <code>lldb</code>, but then we ...s topped? Or put that support directly in our <code>llvm-project</code> fork? But then when I do <code>[rust] llvm-tools = true</code>, I don't get a build of <code>lldb</code> amongst the other tools that generates...</p>",
        "id": 219686561,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607743745
    },
    {
        "content": "<p>So: Do any Mac users here actually still debug their <code>rustc</code> builds via <code>lldb</code>? (or even a self codesigned <code>gdb</code>?)</p>",
        "id": 219686574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607743777
    },
    {
        "content": "<p>is <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/How.20to.20run.20debuginfo.20tests.3F/near/213777453\">this</a> the answer? If so, we should see if we can making building such an <code>lldb</code> easier ...</p>",
        "id": 219686813,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607744051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> ^ ?</p>",
        "id": 219686823,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607744072
    },
    {
        "content": "<p>That line is just to ensure that tests run with either the lldb we build ourself or a minimum lldb version as specified in the respective test.</p>",
        "id": 219693202,
        "sender_full_name": "bjorn3",
        "timestamp": 1607754116
    },
    {
        "content": "<p>I was trying to reference this statement: “They need an lldb version compiled together with rust's LLVM.”</p>",
        "id": 219713239,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607786668
    },
    {
        "content": "<p>With \"they\" is was refering to some (not all) of the debuginfo tests.</p>",
        "id": 219713335,
        "sender_full_name": "bjorn3",
        "timestamp": 1607786820
    },
    {
        "content": "<p>We stripped out support for building a custom fork of lldb</p>",
        "id": 219713793,
        "sender_full_name": "simulacrum",
        "timestamp": 1607787436
    },
    {
        "content": "<p>I would sort of expect the llvm-tools to include one? But I don't know that we enable it or if it needs more work</p>",
        "id": 219713798,
        "sender_full_name": "simulacrum",
        "timestamp": 1607787452
    },
    {
        "content": "<p>Its sounding like no one developing atop Mac is bothering with attaching lldb to rustc anymore <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 219714897,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607789162
    },
    {
        "content": "<p>FWIW, I've never tried to debug rustc - either the problem is fairly simple and I can solve it with printf debugging or it requires the standard library to reproduce and I haven't been able to replicate how bootstrap builds std</p>",
        "id": 219714953,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1607789263
    },
    {
        "content": "<p>I had a need for this at one point (segfaults from inside LLVM, but only during bootstrapping) and tried for a while and couldn't figure out how to do it.</p>",
        "id": 219722188,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1607799623
    },
    {
        "content": "<p>I used to be able to do it. So I just need to track down what’s changed. Either by inspecting an old MacBook, or trying to install older MacOS in a VM....</p>",
        "id": 219769553,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607878517
    },
    {
        "content": "<p>(I already tried older Rust checkouts, from at latest 2018; didn’t resolve things out of the box)</p>",
        "id": 219769571,
        "sender_full_name": "pnkfelix",
        "timestamp": 1607878558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I think I have some theories here... What command did you run to attach? Something like <code>lldb build/x86_64-apple-darwin/stage1/bin/rustc</code>?</p>",
        "id": 220482092,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1608403810
    },
    {
        "content": "<p>Yes I think so, that looks right</p>",
        "id": 220484956,
        "sender_full_name": "pnkfelix",
        "timestamp": 1608408063
    },
    {
        "content": "<p>I have heard anecdotally that doing rust-lldb works better, but I would like to know why what I’m doing is so poor. Is the dwarf debug info in an unexpected place?</p>",
        "id": 220485046,
        "sender_full_name": "pnkfelix",
        "timestamp": 1608408183
    },
    {
        "content": "<p>Okay, that's the first approach I would have tried as well, but it fails to find debug info for me too.</p>\n<p>By default, <code>rustc</code> calls <code>dsymutil</code> on macOS, which moves the debug info to separate .dSYM bundles. However, the .dSYM bundles are not copied around by subsequent bootstrap stages, so they get left behind wherever they first appeared. For example, there are some for <code>rustc-main</code> in <code>build/x86_64-apple-darwin/stage0-rustc/x86_64-apple-darwin/release</code>. To confirm this theory, I added a symlink next to <code>rustc</code> in <code>stage1</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>(in stage1/bin) $ ln -s ../../stage0-rustc/x86_64-apple-darwin/release/rustc-main.dSYM rustc.dSYM\n</code></pre></div>\n<p>...and <code>lldb</code> was able to find that part correctly, but then you'd still have to repeat that for <code>dylib</code>s as well.</p>",
        "id": 220488351,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1608413670
    },
    {
        "content": "<p>Do you happen to have Spotlight indexing disabled for your Rust checkout in System Preferences? (I do, as normally I don't want macOS wasting time indexing build directories.) One of the ways macOS locates debug info is by Spotlight indexing the debug UUID that's inside the .dSYM bundles, so it's possible it does work today for those who leave Spotlight indexing enabled.</p>",
        "id": 220488421,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1608413804
    },
    {
        "content": "<p>I am tempted to send a PR to make the bootstrap code place .dSYM bundles next to things they are for, so that it's more likely to work on macOS...</p>",
        "id": 220488505,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1608413920
    },
    {
        "content": "<p>(another option could be just asking lldb to load these dsyms separately via e.g. <code>--symfile</code> flag)</p>",
        "id": 220488605,
        "sender_full_name": "nagisa",
        "timestamp": 1608414082
    },
    {
        "content": "<p>Hmm, with <code>--symfile</code> though, wouldn't you need to find all the explicit paths to each of several .dSYMs...?</p>",
        "id": 220488989,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1608414655
    },
    {
        "content": "<p>I wonder if you could just pass in _all_ of them that exist under the <code>build/</code></p>",
        "id": 220494395,
        "sender_full_name": "nagisa",
        "timestamp": 1608423265
    },
    {
        "content": "<p>but its still manual intervention</p>",
        "id": 220494396,
        "sender_full_name": "nagisa",
        "timestamp": 1608423273
    },
    {
        "content": "<p>That said… <a href=\"https://github.com/rust-lang/rust/pull/79570\">https://github.com/rust-lang/rust/pull/79570</a></p>",
        "id": 220494406,
        "sender_full_name": "nagisa",
        "timestamp": 1608423302
    },
    {
        "content": "<p>might make sense to just expose that as a convenient rustbuild option</p>",
        "id": 220494415,
        "sender_full_name": "nagisa",
        "timestamp": 1608423316
    },
    {
        "content": "<p>Ah right, I've been following that stabilisation effort. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> Indeed, if you build <code>rustc</code> while forcing <code>-Z run-dsymutil=no</code>, you save time and debugging the compiler works as expected as well, so that seems like an even better plan.</p>",
        "id": 220497670,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1608429533
    },
    {
        "content": "<p>I think I'll send PR to expose that as build option as you suggested, thanks for the idea! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 220497677,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1608429575
    },
    {
        "content": "<p>Hopefully it would be deemed safe to even default the compiler build to <code>run-dsymutil=no</code> as part of this as well (so that everyone benefits without changing their <code>rustc</code> build config).</p>",
        "id": 220497749,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1608429673
    },
    {
        "content": "<p>Okay, <a href=\"https://github.com/rust-lang/rust/pull/80213\">https://github.com/rust-lang/rust/pull/80213</a> adds a build option to control <code>dsymutil</code> for compiler builds and defaults to false, which should fix the debugger situation as well. <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 220499579,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1608433299
    },
    {
        "content": "<blockquote>\n<p>the .dSYM bundles are not copied around by subsequent bootstrap stages</p>\n</blockquote>\n<p>while I have no problem with the approach in PR <a href=\"https://github.com/rust-lang/rust/issues/80213\">#80213</a>, wouldn't another option be to change the bootstrap so that it copies around the .dSYM bundles?</p>",
        "id": 220503891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1608441600
    },
    {
        "content": "<p>I guess we could file that as a separate work-item. (But the work-item is indeed likely to be pointless, unless we start trying to distribute <code>rustc</code> builds with separate debuginfo.)</p>",
        "id": 220503952,
        "sender_full_name": "pnkfelix",
        "timestamp": 1608441692
    },
    {
        "content": "<p>yeah, afaict for rustc kind of workflow just not running dsymutil in the first place is going to result in better experience overall.</p>",
        "id": 220517631,
        "sender_full_name": "nagisa",
        "timestamp": 1608466400
    },
    {
        "content": "<p>defaulting the compiler to <code>dsymutil=no</code> makes sense but only if debuginfo is enabled in the first place.</p>",
        "id": 220517665,
        "sender_full_name": "nagisa",
        "timestamp": 1608466442
    },
    {
        "content": "<p>otherwise there's no real difference.</p>",
        "id": 220517682,
        "sender_full_name": "nagisa",
        "timestamp": 1608466448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/does.20lldb.20(or.20gdb).20work.20on.20rustc.20on.20Mac.3F/near/220503891\">said</a>:</p>\n<blockquote>\n<p>while I have no problem with the approach in PR <a href=\"https://github.com/rust-lang/rust/issues/80213\">#80213</a>, wouldn't another option be to change the bootstrap so that it copies around the .dSYM bundles?</p>\n</blockquote>\n<p>Yeah, we could do that, and it was actually my first approach, so I have something close if we wanted that.</p>",
        "id": 220590411,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1608561877
    },
    {
        "content": "<p>Now that we're defaulting to <code>run-dsymutil=no</code> though, it would only be helpful for those that might change the default. Anyway, let me know if it would be good to have so that both paths are covered for debuggability.</p>",
        "id": 220590692,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1608562069
    },
    {
        "content": "<p>I think I am hitting something adjacent to this as well. I have <code>[rust] debug = true</code> in my <code>config.toml</code>, but breakpoints in VSCode did not work where I wanted them. Playing around with my <code>config.toml</code> I got to the following: my bracktraces seem to lose all file loc info after going through a query.<br>\nDoes anyone have any idea of what might be happening here?</p>",
        "id": 222808620,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610674036
    },
    {
        "content": "<p>Example backtrace:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;rustc&#39; panicked at &#39;aborting due to `-Z treat-err-as-bug=1`&#39;, compiler/rustc_errors/src/lib.rs:990:27\nstack backtrace:\n   0: std::panicking::begin_panic\n   1: rustc_errors::HandlerInner::emit_diagnostic\n   2: rustc_errors::Handler::emit_diagnostic\n   3: rustc_errors::diagnostic_builder::DiagnosticBuilder::emit\n   4: rustc_typeck::check::fn_ctxt::checks::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_argument_types::{{closure}}\n   5: rustc_typeck::check::fn_ctxt::checks::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_argument_types\n   6: rustc_typeck::check::callee::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::confirm_builtin_call\n   7: rustc_typeck::check::callee::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_call\n   8: rustc_typeck::check::expr::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_expr_kind\n   9: rustc_typeck::check::expr::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_expr_with_expectation\n  10: rustc_typeck::check::fn_ctxt::checks::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_stmt\n  11: rustc_typeck::check::fn_ctxt::_impl::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::with_breakable_ctxt\n  12: rustc_typeck::check::fn_ctxt::checks::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_block_with_expected\n  13: rustc_typeck::check::expr::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_expr_kind\n  14: rustc_typeck::check::expr::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_expr_with_expectation\n  15: rustc_typeck::check::expr::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_return_expr\n  16: rustc_typeck::check::check::check_fn\n  17: rustc_infer::infer::InferCtxtBuilder::enter\n  18: rustc_typeck::check::inherited::InheritedBuilder::enter\n  19: rustc_typeck::check::typeck_with_fallback\n  20: rustc_typeck::check::typeck\n  21: rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::typeck&gt;::compute\n  22: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n  23: rustc_data_structures::stack::ensure_sufficient_stack\n  24: rustc_query_system::query::plumbing::force_query_with_job\n  25: rustc_query_system::query::plumbing::get_query_impl\n  26: rustc_query_system::query::plumbing::ensure_query_impl\n  27: rustc_middle::ty::&lt;impl rustc_middle::ty::context::TyCtxt&gt;::par_body_owners\n  28: rustc_typeck::check::typeck_item_bodies\n  29: rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::typeck_item_bodies&gt;::compute\n  30: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n  31: rustc_data_structures::stack::ensure_sufficient_stack\n  32: rustc_query_system::query::plumbing::force_query_with_job\n  33: rustc_query_system::query::plumbing::get_query_impl\n  34: rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time\n  35: rustc_typeck::check_crate\n  36: rustc_interface::passes::analysis\n  37: rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::analysis&gt;::compute\n             at ./compiler/rustc_middle/src/ty/query/plumbing.rs:377:17\n  38: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n             at ./compiler/rustc_query_system/src/dep_graph/graph.rs:362:14\n  39: rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_eval_always_task\n             at ./compiler/rustc_query_system/src/dep_graph/graph.rs:418:9\n  40: rustc_query_system::query::plumbing::force_query_with_job::{{closure}}::{{closure}}\n             at ./compiler/rustc_query_system/src/query/plumbing.rs:599:17\n  41: rustc_middle::ty::query::plumbing::&lt;impl rustc_query_system::query::QueryContext for rustc_middle::ty::context::TyCtxt&gt;::start_query::{{closure}}::{{closure}}::{{closure}}\n             at ./compiler/rustc_middle/src/ty/query/plumbing.rs:73:74\n  42: stacker::maybe_grow\n             at /Users/ekuber/.cargo/registry/src/github.com-1ecc6299db9ec823/stacker-0.1.12/src/lib.rs:55:9\n  43: rustc_data_structures::stack::ensure_sufficient_stack\n             at ./compiler/rustc_data_structures/src/stack.rs:16:5\n  44: rustc_middle::ty::query::plumbing::&lt;impl rustc_query_system::query::QueryContext for rustc_middle::ty::context::TyCtxt&gt;::start_query::{{closure}}::{{closure}}\n             at ./compiler/rustc_middle/src/ty/query/plumbing.rs:73:17\n  45: rustc_middle::ty::context::tls::enter_context::{{closure}}\n             at ./compiler/rustc_middle/src/ty/context.rs:1732:50\n  46: rustc_middle::ty::context::tls::set_tlv\n             at ./compiler/rustc_middle/src/ty/context.rs:1716:9\n  47: rustc_middle::ty::context::tls::enter_context\n             at ./compiler/rustc_middle/src/ty/context.rs:1732:9\n  48: rustc_middle::ty::query::plumbing::&lt;impl rustc_query_system::query::QueryContext for rustc_middle::ty::context::TyCtxt&gt;::start_query::{{closure}}\n             at ./compiler/rustc_middle/src/ty/query/plumbing.rs:72:13\n  49: rustc_middle::ty::context::tls::with_related_context::{{closure}}\n             at ./compiler/rustc_middle/src/ty/context.rs:1776:13\n  50: rustc_middle::ty::context::tls::with_context::{{closure}}\n             at ./compiler/rustc_middle/src/ty/context.rs:1760:40\n  51: rustc_middle::ty::context::tls::with_context_opt\n             at ./compiler/rustc_middle/src/ty/context.rs:1749:22\n  52: rustc_middle::ty::context::tls::with_context\n             at ./compiler/rustc_middle/src/ty/context.rs:1760:9\n  53: rustc_middle::ty::context::tls::with_related_context\n             at ./compiler/rustc_middle/src/ty/context.rs:1773:9\n  54: rustc_middle::ty::query::plumbing::&lt;impl rustc_query_system::query::QueryContext for rustc_middle::ty::context::TyCtxt&gt;::start_query\n             at ./compiler/rustc_middle/src/ty/query/plumbing.rs:61:9\n  55: rustc_query_system::query::plumbing::force_query_with_job::{{closure}}\n             at ./compiler/rustc_query_system/src/query/plumbing.rs:597:9\n  56: rustc_query_system::query::plumbing::with_diagnostics\n             at ./compiler/rustc_query_system/src/query/plumbing.rs:302:18\n  57: rustc_query_system::query::plumbing::force_query_with_job\n             at ./compiler/rustc_query_system/src/query/plumbing.rs:596:51\n  58: rustc_query_system::query::plumbing::try_execute_query\n             at ./compiler/rustc_query_system/src/query/plumbing.rs:426:16\n  59: rustc_query_system::query::plumbing::get_query_impl::{{closure}}\n             at ./compiler/rustc_query_system/src/query/plumbing.rs:644:23\n  60: &lt;rustc_query_system::query::caches::DefaultCache&lt;K,V&gt; as rustc_query_system::query::caches::QueryCache&gt;::lookup\n             at ./compiler/rustc_query_system/src/query/caches.rs:114:79\n  61: rustc_query_system::query::plumbing::try_get_cached\n             at ./compiler/rustc_query_system/src/query/plumbing.rs:379:5\n  62: rustc_query_system::query::plumbing::get_query_impl\n             at ./compiler/rustc_query_system/src/query/plumbing.rs:636:5\n  63: rustc_query_system::query::plumbing::get_query\n             at ./compiler/rustc_query_system/src/query/plumbing.rs:738:5\n  64: rustc_middle::ty::query::TyCtxtAt::analysis\n             at ./compiler/rustc_middle/src/ty/query/plumbing.rs:487:17\n  65: rustc_middle::ty::query::&lt;impl rustc_middle::ty::context::TyCtxt&gt;::analysis\n             at ./compiler/rustc_middle/src/ty/query/plumbing.rs:448:17\n  66: rustc_driver::run_compiler::{{closure}}::{{closure}}::{{closure}}\n             at ./compiler/rustc_driver/src/lib.rs:440:59\n  67: rustc_interface::passes::QueryContext::enter::{{closure}}\n             at ./compiler/rustc_interface/src/passes.rs:742:42\n  68: rustc_middle::ty::context::tls::enter_context::{{closure}}\n             at ./compiler/rustc_middle/src/ty/context.rs:1732:50\n  69: rustc_middle::ty::context::tls::set_tlv\n             at ./compiler/rustc_middle/src/ty/context.rs:1716:9\n  70: rustc_middle::ty::context::tls::enter_context\n             at ./compiler/rustc_middle/src/ty/context.rs:1732:9\n  71: rustc_interface::passes::QueryContext::enter\n             at ./compiler/rustc_interface/src/passes.rs:742:9\n  72: rustc_driver::run_compiler::{{closure}}::{{closure}}\n             at ./compiler/rustc_driver/src/lib.rs:440:13\n  73: rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter\n             at ./compiler/rustc_interface/src/queries.rs:418:19\n  74: rustc_driver::run_compiler::{{closure}}\n             at ./compiler/rustc_driver/src/lib.rs:341:22\n  75: rustc_interface::interface::create_compiler_and_run::{{closure}}\n             at ./compiler/rustc_interface/src/interface.rs:197:13\n  76: rustc_span::with_source_map\n             at ./compiler/rustc_span/src/lib.rs:787:5\n  77: rustc_interface::interface::create_compiler_and_run\n             at ./compiler/rustc_interface/src/interface.rs:191:5\n  78: rustc_interface::interface::run_compiler::{{closure}}\n             at ./compiler/rustc_interface/src/interface.rs:213:12\n  79: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}::{{closure}}\n             at ./compiler/rustc_interface/src/util.rs:152:13\n  80: scoped_tls::ScopedKey&lt;T&gt;::set\n             at /Users/ekuber/.cargo/registry/src/github.com-1ecc6299db9ec823/scoped-tls-1.0.0/src/lib.rs:137:9\n  81: rustc_span::with_session_globals\n             at ./compiler/rustc_span/src/lib.rs:103:5\n  82: rustc_interface::util::setup_callbacks_and_run_in_thread_pool_with_globals::{{closure}}\n             at ./compiler/rustc_interface/src/util.rs:150:9\n  83: rustc_interface::util::scoped_thread::{{closure}}\n             at ./compiler/rustc_interface/src/util.rs:125:24\n</code></pre></div>",
        "id": 222808625,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610674047
    },
    {
        "content": "<p>my <code>config.toml</code> right now</p>\n<div class=\"codehilite\"><pre><span></span><code># Includes one of the default files in src/bootstrap/defaults\nprofile = &quot;compiler&quot;\nchangelog-seen = 2\n[rust]\ndebug = true\ndebug-assertions = true\ndebuginfo-level = 1\ndebuginfo-level-rustc = 1\ndebuginfo-level-std = 1\nincremental = true\nrun-dsymutil = false\n</code></pre></div>",
        "id": 222808644,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610674074
    },
    {
        "content": "<p>This is somewhat frustrating because I know that this used to work in a different similar laptop <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 222808734,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610674154
    },
    {
        "content": "<p>just modified <code>cargo.toml</code> to add the following, based on <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/More.20granular.20debug.20info.20generation\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/More.20granular.20debug.20info.20generation</a></p>\n<div class=\"codehilite\"><pre><span></span><code>[profile.release.package.rustc_typeck]\ndebug = 2\n[profile.release.package.rustc_mir]\ndebug = 2\n</code></pre></div>",
        "id": 222809245,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610674642
    },
    {
        "content": "<p>(That didn't seem to do the trick)</p>",
        "id": 222809788,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610675159
    },
    {
        "content": "<p>Hmm, I haven't seen that particular variant before... <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> I wonder why line info would stop at the query system...</p>",
        "id": 222863876,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1610720948
    },
    {
        "content": "<p>debuginfo level 1 should be always enough for file position debugging information, right?</p>",
        "id": 222880874,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610727342
    },
    {
        "content": "<p>I would expect it to be enough, yeah</p>",
        "id": 222889291,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610730220
    },
    {
        "content": "<p>I wonder if <a href=\"https://github.com/rust-lang/rust/pull/79237\">https://github.com/rust-lang/rust/pull/79237</a> might be related to this <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 222944672,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610756626
    },
    {
        "content": "<p>tried reverting that PR, didn't help</p>",
        "id": 222951342,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610762500
    },
    {
        "content": "<p>ok, I finally got it to work with <code>run-dsymbol = true</code> in my <code>config.toml</code></p>",
        "id": 222953225,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610764580
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>profile = &quot;compiler&quot;\nchangelog-seen = 2\n[rust]\ndebug = true\ndebug-assertions = false\ndebuginfo-level = 2\ndebuginfo-level-rustc = 2\ndebuginfo-level-std = 1\n#incremental = true\nrun-dsymutil = true\n</code></pre></div>",
        "id": 222953239,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610764606
    },
    {
        "content": "<p>need to verify whether it is the level 2 across the board, or dsymutil, but either way this likely needs to go in the dev guide for mac users :)</p>",
        "id": 222953323,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610764694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> <a href=\"#narrow/stream/131828-t-compiler/topic/does.20lldb.20(or.20gdb).20work.20on.20rustc.20on.20Mac.3F/near/222953323\">said</a>:</p>\n<blockquote>\n<p>need to verify whether it is the level 2 across the board, or dsymutil, but either way this likely needs to go in the dev guide for mac users :)</p>\n</blockquote>\n<p>do you mind adding it? :)</p>",
        "id": 222953342,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610764732
    },
    {
        "content": "<p>Will likely do it, just need to figure out what I did exactly to get it to work<br>\nnow my backtrace looks like this</p>\n<div class=\"codehilite\"><pre><span></span><code>stack backtrace:\n   0:        0x102556f29 - &lt;std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display&gt;::fmt::h5ff190e5d88ce54b\n   1:        0x1025c7575 - core::fmt::write::h59b2190bace346b8\n   2:        0x10254d7f4 - std::io::Write::write_fmt::h52cab6c4abaa671c\n   3:        0x102556d96 - std::sys_common::backtrace::print::h2bd1c5e437f882ee\n   4:        0x10254f464 - std::panicking::default_hook::{{closure}}::h587cadc63d7e957c\n   5:        0x10254f239 - std::panicking::default_hook::h6969025169c312a1\n   6:        0x10a5e11fe - rustc_driver::report_ice::h25bef86f77170999\n   7:        0x10254f8f1 - std::panicking::rust_panic_with_hook::h72655748142049c5\n   8:        0x10e9fa2fd - std::panicking::begin_panic::{{closure}}::h083f662f67288272\n   9:        0x10e9fa2b8 - std::sys_common::backtrace::__rust_end_short_backtrace::h3c04c4d0753c466b\n  10:        0x10eef91ae - std::panicking::begin_panic::hb49e5e2c23ee7646\n  11:        0x10e9fe81f - rustc_errors::HandlerInner::emit_diagnostic::hb910422be9a2d9ad\n  12:        0x10e9fdebd - rustc_errors::Handler::emit_diagnostic::h0369fdc3399bb4a4\n  13:        0x10ea23c68 - rustc_errors::diagnostic_builder::DiagnosticBuilder::emit::h0585b68df3ea398a\n  14:        0x10ce94516 - rustc_typeck::check::fn_ctxt::checks::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_argument_types::{{closure}}::h1dec928ad486ada4\n  15:        0x10ce92864 - rustc_typeck::check::fn_ctxt::checks::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_argument_types::hba82db4c390b5ef2\n  16:        0x10ce704fb - rustc_typeck::check::callee::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::confirm_builtin_call::h30715dbcfcefd986\n  17:        0x10ce6eeb0 - rustc_typeck::check::callee::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_call::hb1cb235f9f4e4870\n  18:        0x10ce7ec93 - rustc_typeck::check::expr::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_expr_kind::h3ff94a040334fdd8\n  19:        0x10ce7d949 - rustc_typeck::check::expr::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_expr_with_expectation::hc9337838408c6a72\n  20:        0x10ce954ca - rustc_typeck::check::fn_ctxt::checks::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_stmt::h2b9c52363cdb8150\n  21:        0x10cd9550c - rustc_typeck::check::fn_ctxt::_impl::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::with_breakable_ctxt::h25b294c8c10bdad7\n  22:        0x10ce957df - rustc_typeck::check::fn_ctxt::checks::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_block_with_expected::h098be6d3ee5dcbb9\n  23:        0x10ce7e2eb - rustc_typeck::check::expr::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_expr_kind::h3ff94a040334fdd8\n  24:        0x10ce7d949 - rustc_typeck::check::expr::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_expr_with_expectation::hc9337838408c6a72\n  25:        0x10ce873eb - rustc_typeck::check::expr::&lt;impl rustc_typeck::check::fn_ctxt::FnCtxt&gt;::check_return_expr::hcb5f98cff99588ad\n  26:        0x10cc948b0 - rustc_typeck::check::check::check_fn::hc718dd2135f630f0\n  27:        0x10ce39617 - rustc_infer::infer::InferCtxtBuilder::enter::hdb4be22173826fc2\n  28:        0x10cc4d9b6 - rustc_typeck::check::inherited::InheritedBuilder::enter::h7c98cd5e2b5b802a\n  29:        0x10cba9345 - rustc_typeck::check::typeck_with_fallback::he89477c9afe8d489\n  30:        0x10cc3c1d9 - rustc_typeck::check::typeck::he5e7910c122c3d69\n  31:        0x10cb98f9d - rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::typeck&gt;::compute::hc01860587bbe3666\n  32:        0x10ce00f0f - rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl::h9ee4590b0cea36d5\n  33:        0x10ccd1fd3 - rustc_data_structures::stack::ensure_sufficient_stack::h96ddabb43d0276b8\n  34:        0x10cd47cb9 - rustc_query_system::query::plumbing::force_query_with_job::h0647b8952a9d5078\n  35:        0x10cd45935 - rustc_query_system::query::plumbing::get_query_impl::hfb4ab0ec1646b587\n  36:        0x10cd46dfb - rustc_query_system::query::plumbing::ensure_query_impl::h12336ea1ef71071d\n  37:        0x10cb98e15 - rustc_middle::ty::&lt;impl rustc_middle::ty::context::TyCtxt&gt;::par_body_owners::hc892fe5f0f5635a4\n  38:        0x10cc400e5 - rustc_typeck::check::typeck_item_bodies::h2af9b90009509581\n  39:        0x10cd8cb2d - rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::typeck_item_bodies&gt;::compute::h9e2384cb7de7bdbf\n  40:        0x10cdff23a - rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl::h7d6ccf5c507bcc9c\n  41:        0x10ccd5ad3 - rustc_data_structures::stack::ensure_sufficient_stack::hef208c0f8f7ef126\n  42:        0x10cd55209 - rustc_query_system::query::plumbing::force_query_with_job::haecdba6de878dac5\n  43:        0x10cd18eeb - rustc_query_system::query::plumbing::get_query_impl::h0642623bdc6c60da\n  44:        0x10cd8d1e3 - rustc_session::utils::&lt;impl rustc_session::session::Session&gt;::time::h620fbd8d8763ecf8\n  45:        0x10ccfd1ea - rustc_typeck::check_crate::h339102958cbdf896\n  46:        0x10a7facb8 - rustc_interface::passes::analysis::h5dc1c3b8a43af9ea\n  47:        0x10a5cbe1a - rustc_middle::ty::query::&lt;impl rustc_query_system::query::config::QueryAccessors&lt;rustc_middle::ty::context::TyCtxt&gt; for rustc_middle::ty::query::queries::analysis&gt;::compute::hf8efb25027235670\n  48:        0x10a53b6ef - rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl::h9bdde538d797e303\n  49:        0x10a53c8c1 - rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_eval_always_task::h634353096d3107f2\n  50:        0x10a56ab8a - rustc_data_structures::stack::ensure_sufficient_stack::h3a7d1c4250235e67\n  51:        0x10a583479 - rustc_query_system::query::plumbing::force_query_with_job::h59f338f2d8e07aa1\n  52:        0x10a581c67 - rustc_query_system::query::plumbing::get_query_impl::hdcc800004702e895\n  53:        0x10a5cc0ca - rustc_interface::passes::QueryContext::enter::h1047cb6780fb6e37\n  54:        0x10a5e47ac - rustc_interface::queries::&lt;impl rustc_interface::interface::Compiler&gt;::enter::h94800eb4a628b8a0\n  55:        0x10a5898db - rustc_span::with_source_map::h357c6d334ea0774a\n  56:        0x10a5e5e4b - rustc_interface::interface::create_compiler_and_run::hfe7217287a655d09\n  57:        0x10a5cdec2 - scoped_tls::ScopedKey&lt;T&gt;::set::ha642e3b9833b01d4\n  58:        0x10a58a3ac - rustc_span::with_session_globals::ha5836fb96015d9f9\n  59:        0x10a561e1e - std::sys_common::backtrace::__rust_begin_short_backtrace::h85c61205b3ec828f\n  60:        0x10a5650a9 - std::panicking::try::hc5b6f4e999561d0e\n  61:        0x10a5d6bb9 - core::ops::function::FnOnce::call_once{{vtable.shim}}::h124b7bc797cf2da7\n  62:        0x1025291ab - &lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once::h6529e01455bff41b\n  63:        0x10256b3fa - std::sys::unix::thread::Thread::new::thread_start::h36dcb80336e89a79\n  64:     0x7fff6ac49109 - __pthread_start\n</code></pre></div>",
        "id": 222953371,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610764776
    },
    {
        "content": "<p>so I got debugging but lost info in my tracebacks <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 222953399,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610764803
    },
    {
        "content": "<p>Ok, partial win: I can set breakpoints on symbols, but not on file lines both in the VSCode UI and in the terminal. When I look at the terminal info what I get is </p>\n<div class=\"codehilite\"><pre><span></span><code>(lldb) br s -r .*check_argument_types.*                                                                                                                                                                                     r\nBreakpoint 1: 13 locations.\n(lldb) r\nProcess 75382 launched: &#39;/Users/ekuber/workspace/rust/build/x86_64-apple-darwin/stage1/bin/rustc&#39; (x86_64)\nlibrustc_driver-7b265b9d752f0948.dylib was compiled with optimization - stepping may behave oddly; variables may not be available.\nProcess 75382 stopped\n* thread #2, name = &#39;rustc&#39;, stop reason = breakpoint 1.6\n    frame #0: 0x0000000102a7126a librustc_driver-7b265b9d752f0948.dylib`rustc_typeck::check::fn_ctxt::checks::_$LT$impl$u20$rustc_typeck..check..fn_ctxt..FnCtxt$GT$::check_argument_types::hba82db4c390b5ef2 [inlined] _$LT$rustc_typeck..check..fn_ctxt..FnCtxt$u20$as$u20$core..ops..deref..Deref$GT$::deref::h2e72f3955f049a0d(self=0x000070000d178aa0) at mod.rs:163:9 [opt]\n   160  impl&lt;&#39;a, &#39;tcx&gt; Deref for FnCtxt&lt;&#39;a, &#39;tcx&gt; {\n   161      type Target = Inherited&lt;&#39;a, &#39;tcx&gt;;\n   162      fn deref(&amp;self) -&gt; &amp;Self::Target {\n-&gt; 163          &amp;self.inh\n   164      }\n   165  }\n   166\nTarget 0: (rustc) stopped.\n(lldb) n\nProcess 75382 stopped\n* thread #2, name = &#39;rustc&#39;, stop reason = step over\n    frame #0: 0x0000000102a71271 librustc_driver-7b265b9d752f0948.dylib`rustc_typeck::check::fn_ctxt::checks::_$LT$impl$u20$rustc_typeck..check..fn_ctxt..FnCtxt$GT$::check_argument_types::hba82db4c390b5ef2(self=0x000070000d178aa0, sp=Span @ scalar, expr=0x000000010c823a48, fn_inputs=size=1, expected_arg_tys=size=0, args=size=0, c_variadic=&lt;unavailable&gt;, tuple_arguments=&lt;unavailable&gt;, def_id=Option&lt;rustc_span::def_id::DefId&gt; @ 0x000070000d177238) at checks.rs:105:19 [opt]\n   102          tuple_arguments: TupleArgumentsFlag,\n   103          def_id: Option&lt;DefId&gt;,\n   104      ) {\n-&gt; 105          let tcx = self.tcx;\n   106          // Grab the argument types, supplying fresh type variables\n   107          // if the wrong number of arguments were supplied\n   108          let supplied_arg_count = if tuple_arguments == DontTupleArguments { args.len() } else { 1 };\nTarget 0: (rustc) stopped.\n(lldb) image lookup -r .*check_argument_types.*\nerror: invalid combination of options for the given command\n(lldb) image lookup -n check_argument_types\n1 match found in /Users/ekuber/workspace/rust/build/x86_64-apple-darwin/stage1/lib/librustc_driver-7b265b9d752f0948.dylib:\n        Address: librustc_driver-7b265b9d752f0948.dylib[0x000000000295c210] (librustc_driver-7b265b9d752f0948.dylib.__TEXT.__text + 43354960)\n        Summary: librustc_driver-7b265b9d752f0948.dylib`rustc_typeck::check::fn_ctxt::checks::_$LT$impl$u20$rustc_typeck..check..fn_ctxt..FnCtxt$GT$::check_argument_types::hba82db4c390b5ef2 at checks.rs:94\n</code></pre></div>",
        "id": 222954190,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610765666
    },
    {
        "content": "<p>it seems like boht tools are able to find the file, but somehow it doesn't have the full path, which I think is why the breakpoint on file line isn't working</p>",
        "id": 222954210,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610765700
    },
    {
        "content": "<p>oh, wait, if I do <code>-v</code> I see the whole path <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>(lldb) image lookup -n check_argument_types -v\n1 match found in /Users/ekuber/workspace/rust/build/x86_64-apple-darwin/stage1/lib/librustc_driver-7b265b9d752f0948.dylib:\n        Address: librustc_driver-7b265b9d752f0948.dylib[0x000000000295c210] (librustc_driver-7b265b9d752f0948.dylib.__TEXT.__text + 43354960)\n        Summary: librustc_driver-7b265b9d752f0948.dylib`rustc_typeck::check::fn_ctxt::checks::_$LT$impl$u20$rustc_typeck..check..fn_ctxt..FnCtxt$GT$::check_argument_types::hba82db4c390b5ef2 at checks.rs:94\n         Module: file = &quot;/Users/ekuber/workspace/rust/build/x86_64-apple-darwin/stage1/lib/librustc_driver-7b265b9d752f0948.dylib&quot;, arch = &quot;x86_64&quot;\n    CompileUnit: id = {0x00000688}, file = &quot;/Users/ekuber/workspace/rust/build/x86_64-apple-darwin/stage0-rustc/x86_64-apple-darwin/release/deps/compiler/rustc_typeck/src/lib.rs/@/zs9frsqlycpm18a&quot;, language = &quot;rust&quot;\n       Function: id = {0x7fffffff1666b203}, name = &quot;rustc_typeck::check::fn_ctxt::checks::_$LT$impl$u20$rustc_typeck..check..fn_ctxt..FnCtxt$GT$::check_argument_types::hba82db4c390b5ef2&quot;, mangled = &quot;_ZN12rustc_typeck5check7fn_ctxt6checks54_$LT$impl$u20$rustc_typeck..check..fn_ctxt..FnCtxt$GT$20check_argument_types17hba82db4c390b5ef2E&quot;, range = [0x0000000102a71210-0x0000000102a72585)\n       FuncType: id = {0x7fffffff1666b203}, byte-size = 0, decl = checks.rs:94, compiler_type = &quot;void (struct rustc_typeck::check::fn_ctxt::FnCtxt *, struct rustc_span::span_encoding::Span, struct rustc_hir::hir::Expr *, struct &amp;[&amp;rustc_middle::ty::TyS], struct &amp;[&amp;rustc_middle::ty::TyS], struct &amp;[rustc_hir::hir::Expr], _Bool, enum rustc_typeck::check::TupleArgumentsFlag, struct core::option::Option&lt;rustc_span::def_id::DefId&gt;)&quot;\n         Blocks: id = {0x7fffffff1666b203}, range = [0x102a71210-0x102a72585)\n      LineEntry: [0x0000000102a71210-0x0000000102a7126a): /Users/ekuber/workspace/rust/compiler/rustc_typeck/src/check/fn_ctxt/checks.rs:94\n         Symbol: id = {0x0007231a}, range = [0x0000000102a71210-0x0000000102a725c0), name=&quot;rustc_typeck::check::fn_ctxt::checks::_$LT$impl$u20$rustc_typeck..check..fn_ctxt..FnCtxt$GT$::check_argument_types::hba82db4c390b5ef2&quot;, mangled=&quot;_ZN12rustc_typeck5check7fn_ctxt6checks54_$LT$impl$u20$rustc_typeck..check..fn_ctxt..FnCtxt$GT$20check_argument_types17hba82db4c390b5ef2E&quot;\n       Variable: id = {0x7fffffff1666b221}, name = &quot;self&quot;, type = &quot;&amp;rustc_typeck::check::fn_ctxt::FnCtxt&quot;, location = DW_OP_reg5 RDI, decl = checks.rs:95\n       Variable: id = {0x7fffffff1666b230}, name = &quot;sp&quot;, type = &quot;Span&quot;, location = DW_OP_reg4 RSI, decl = checks.rs:96\n       Variable: id = {0x7fffffff1666b23f}, name = &quot;expr&quot;, type = &quot;&amp;rustc_hir::hir::Expr&quot;, location = DW_OP_reg1 RDX, decl = checks.rs:97\n       Variable: id = {0x7fffffff1666b24e}, name = &quot;fn_inputs&quot;, type = &quot;&amp;[&amp;rustc_middle::ty::TyS]&quot;, location = DW_OP_reg2 RCX, DW_OP_piece 0x8, DW_OP_reg8 R8, DW_OP_piece 0x8, decl = checks.rs:98\n       Variable: id = {0x7fffffff1666b25d}, name = &quot;expected_arg_tys&quot;, type = &quot;&amp;[&amp;rustc_middle::ty::TyS]&quot;, location = DW_OP_reg9 R9, DW_OP_piece 0x8, decl = checks.rs:99\n       Variable: id = {0x7fffffff1666b26c}, name = &quot;args&quot;, type = &quot;&amp;[rustc_hir::hir::Expr]&quot;, location = DW_OP_fbreg -288, decl = checks.rs:100\n       Variable: id = {0x7fffffff1666b27b}, name = &quot;c_variadic&quot;, type = &quot;bool&quot;, location = , decl = checks.rs:101\n       Variable: id = {0x7fffffff1666b286}, name = &quot;tuple_arguments&quot;, type = &quot;TupleArgumentsFlag&quot;, location = , decl = checks.rs:102\n       Variable: id = {0x7fffffff1666b291}, name = &quot;def_id&quot;, type = &quot;Option&lt;rustc_span::def_id::DefId&gt;&quot;, location = DW_OP_fbreg -440, decl = checks.rs:103\n</code></pre></div>",
        "id": 222954239,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610765760
    },
    {
        "content": "<p>now it might be that I need to sourceMap <code>/Users/ekuber/workspace/rust/build/x86_64-apple-darwin/stage0-rustc/x86_64-apple-darwin/release/deps/compiler/rustc_typeck/src/lib.rs/@/zs9frsqlycpm18a</code> to <code>/Users/ekuber/workspace/rust/compiler/rustc_typeck/src/lib.rs</code></p>",
        "id": 222954328,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610765867
    },
    {
        "content": "<p>That didn't work :(</p>",
        "id": 222955301,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610766930
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>            &quot;${workplaceFolder}/build/x86_64-apple-darwin/stage0-rustc/x86_64-apple-darwin/release/deps/&quot;:&quot;${workplaceFolder}/&quot;, seems to work\n</code></pre></div>",
        "id": 222955460,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1610767114
    },
    {
        "content": "<p>Wait a minute: Reading this thread, if I understand correctly, the solution to <em>my</em> problem was to <strong>stop</strong> running <code>dsymutil</code> on Mac. But the solution to <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> ’s problem is to start running it again? This … is not good at all, right?</p>",
        "id": 223396681,
        "sender_full_name": "pnkfelix",
        "timestamp": 1611159686
    },
    {
        "content": "<p>(Esteban and I just spoke 1:1 about this. They are going to look some more into fixing the backtrace issue <em>without</em> running <code>dsymutil</code> again.)</p>",
        "id": 223403756,
        "sender_full_name": "pnkfelix",
        "timestamp": 1611162550
    },
    {
        "content": "<p>((of course in an ideal world things would work great in with either setting.))</p>",
        "id": 223403817,
        "sender_full_name": "pnkfelix",
        "timestamp": 1611162576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/does.20lldb.20(or.20gdb).20work.20on.20rustc.20on.20Mac.3F/near/223396681\">said</a>:</p>\n<blockquote>\n<p>Wait a minute: Reading this thread, if I understand correctly, the solution to <em>my</em> problem was to <strong>stop</strong> running <code>dsymutil</code> on Mac. But the solution to <span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> ’s problem is to start running it again? This … is not good at all, right?</p>\n</blockquote>\n<p>Right, ideally we can have everything working for all use cases <em>without</em> running <code>dsymutil</code>. There should indeed be a path to fix this backtrace issues without needing <code>dsymutil</code>. After all, it only gathers the debug info together, so perhaps backtracing needs a tweak to find debug info in non-dsym mode.</p>",
        "id": 224261872,
        "sender_full_name": "J. Ryan Stinnett",
        "timestamp": 1611788766
    },
    {
        "content": "<p>Did anyone make any progress into investigating this?</p>\n<p>I've been doing a little digging, and it appears that the symbols are simply missing from the <code>.o</code> files that are kept on-disk.  I have a hypothesis that the <code>.o</code> files only include things directly included in <code>rustc_driver</code>, and nothing from its dependencies.</p>",
        "id": 232678598,
        "sender_full_name": "Eric Huss",
        "timestamp": 1617231587
    },
    {
        "content": "<p>I posted <a href=\"https://github.com/rust-lang/rust/issues/83730\">https://github.com/rust-lang/rust/issues/83730</a> with what I was able to learn. Seems to be an issue with split-debuginfo itself, not the gimli/backtrace code.</p>",
        "id": 232683433,
        "sender_full_name": "Eric Huss",
        "timestamp": 1617234744
    },
    {
        "content": "<p>Hm, maybe my previous comment was wrong.  I guess usually there are references to the <code>.rlib</code> files in an executable, so now I'm wondering if those are just missing from the <code>.dylib</code>?</p>",
        "id": 232684830,
        "sender_full_name": "Eric Huss",
        "timestamp": 1617235733
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> looked into it and had been saying to me that they knew what the special recipe was to get things working</p>",
        "id": 232757859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1617284487
    }
]