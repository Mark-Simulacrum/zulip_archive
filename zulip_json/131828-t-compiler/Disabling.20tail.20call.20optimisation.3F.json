[
    {
        "content": "<p>I've been looking into why the <code>__rust_begin_short_backtrace</code> frame was missing from some test runs, and have found that in the distributed <code>libtest.rlib</code> there appears to have been some tail-call optimisation where the preceding function jumps directly into <code>__rust_begin_short_backtrace</code> rather than calling it.  I didn't think rustc performed any TCO yet?  Is there any way to disable this behaviour?</p>",
        "id": 205698716,
        "sender_full_name": "eggyal",
        "timestamp": 1596316772
    },
    {
        "content": "<p>LLVM and rustc are free to perform TCO, it's just not guaranteed to happen</p>",
        "id": 205698764,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596316821
    },
    {
        "content": "<p>Can it be disabled?</p>",
        "id": 205698769,
        "sender_full_name": "eggyal",
        "timestamp": 1596316842
    },
    {
        "content": "<p>maybe by passing an LLVM argument</p>",
        "id": 205698834,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596316993
    },
    {
        "content": "<p>Okay thanks, I'll look into that.  I had gathered from <a href=\"https://seanchen1991.github.io/posts/tco-story/\">https://seanchen1991.github.io/posts/tco-story/</a> that none should be performed at all, but perhaps that article is outdated or incorrect.</p>",
        "id": 205698957,
        "sender_full_name": "eggyal",
        "timestamp": 1596317268
    },
    {
        "content": "<p>However, given that the <code>__rust_begin_short_backtrace</code> frame needs to be present for <code>RUST_BACKTRACE=1</code> to terminate correctly, perhaps this optimisation is a bug?  Should I file an issue?</p>",
        "id": 205699005,
        "sender_full_name": "eggyal",
        "timestamp": 1596317342
    },
    {
        "content": "<p>I don't think the <code>short_backtrace</code> has ever worked correctly, really. Maybe for a short while after the initial implementation.</p>",
        "id": 205699065,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596317434
    },
    {
        "content": "<p>Shouldn't unwind info help with reconstructing what's going on even with tail calls?</p>",
        "id": 205699077,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596317477
    },
    {
        "content": "<p>No unwind info can't reconstruct this. What if two functions tail called to the same function? There is no way to know which function was tail called to the current funtion.</p>",
        "id": 205699133,
        "sender_full_name": "bjorn3",
        "timestamp": 1596317584
    },
    {
        "content": "<p>You should be able to prevent the tail call by adding something like <code>read_volatile(&amp;0)</code> or <code>black_box(0)</code> after the call.</p>",
        "id": 205699189,
        "sender_full_name": "bjorn3",
        "timestamp": 1596317683
    },
    {
        "content": "<p>Great, that looks like it's done itâ€”thanks <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>.  If I submit a PR to fix <code>libtest</code>, who would be a suitable reviewer?</p>",
        "id": 205700031,
        "sender_full_name": "eggyal",
        "timestamp": 1596319337
    },
    {
        "content": "<p>you can let the highfive bot find a reviewer for you by not specifying one</p>",
        "id": 205714574,
        "sender_full_name": "oli",
        "timestamp": 1596349785
    }
]