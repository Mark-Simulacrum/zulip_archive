[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> </p>\n<p>The docs at <a href=\"https://doc.rust-lang.org/stable/proc_macro/enum.Delimiter.html#variant.None\">https://doc.rust-lang.org/stable/proc_macro/enum.Delimiter.html#variant.None</a> suggest that it can be used to preserve meta vars. However, looking at the parser's code, it seems that nones are mostly ignored and are just skipped over?</p>\n<p>The following test also shows that they can't actually do <code>$var * 3</code> thing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// proc macro</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">proc_macro</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[proc_macro]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">times_3</span><span class=\"p\">(</span><span class=\"n\">ts</span>: <span class=\"nc\">TokenStream</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">times_3</span>: <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"* 3\"</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span>: <span class=\"nc\">TokenStream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ts</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">().</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"n\">times_3</span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()).</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{:#?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">res</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// main</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">my_macro</span>::<span class=\"n\">times_3</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$e</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">times_3</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"cp\">$e</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// prints 7, that is, 1 + (2 * 3)</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The token stream produced looks like this: </p>\n<div class=\"codehilite\"><pre><span></span><code>TokenStream [\n    Group { // group is here, but it doesn&#39;t help\n        delimiter: None,\n        stream: TokenStream [\n            Literal { kind: Integer, symbol: &quot;1&quot;, suffix: None, span: #0 bytes(85..86), },\n            Punct { ch: &#39;+&#39;, spacing: Alone, span: #0 bytes(87..88), },\n            Literal { kind: Integer, symbol: &quot;2&quot;, suffix: None, span: #0 bytes(89..90), },\n        ],\n        span: #3 bytes(48..50),\n    },\n    Punct { ch: &#39;*&#39;, spacing: Alone, span: #5 bytes(36..51), },\n    Literal { kind: Integer, symbol: &quot;3&quot;, suffix: None, span: #5 bytes(36..51), },\n]\n</code></pre></div>",
        "id": 255967592,
        "sender_full_name": "matklad",
        "timestamp": 1633283562
    },
    {
        "content": "<p>So, is it the case of buggy docs?</p>",
        "id": 255967629,
        "sender_full_name": "matklad",
        "timestamp": 1633283617
    },
    {
        "content": "<p>That seems like a bug in rustc to me</p>",
        "id": 255970298,
        "sender_full_name": "bjorn3",
        "timestamp": 1633286253
    },
    {
        "content": "<p>And not a bug in the documentation.</p>",
        "id": 255970303,
        "sender_full_name": "bjorn3",
        "timestamp": 1633286262
    },
    {
        "content": "<p>This looks like <a href=\"https://github.com/rust-lang/rust/issues/67062\">https://github.com/rust-lang/rust/issues/67062</a></p>",
        "id": 255972574,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1633288308
    }
]