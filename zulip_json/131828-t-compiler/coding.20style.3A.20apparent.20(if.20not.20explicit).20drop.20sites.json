[
    {
        "content": "<p>I got into a little debate recently during a PR review, and I figured I might ask around for opinions here</p>",
        "id": 204246559,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595012958
    },
    {
        "content": "<p>The debate is/was <a href=\"https://github.com/rust-lang/rust/pull/72121#discussion_r451006771\">here</a> (cc'ing <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> ); the heart of it is as follows:</p>",
        "id": 204246803,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595013073
    },
    {
        "content": "<p>if you have a bit of code where the temporary rvalue lifetimes are semantically important (e.g. when a lock will get unlocked by its destructor)</p>",
        "id": 204246868,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595013118
    },
    {
        "content": "<p>the question is: Is it useful to surround the important boundary of the temporary lifetime (i.e. the temporary value's dynamic extent) with braces <code>{</code> ... <code>}</code></p>",
        "id": 204247033,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595013197
    },
    {
        "content": "<p>even if the temporary r-value lifetime rules we have place imply that those added braces have no effect?</p>",
        "id": 204247077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1595013240
    },
    {
        "content": "<p>I generally prefer just <code>drop(lock)</code> or similar, to avoid rightward drift.</p>",
        "id": 204278297,
        "sender_full_name": "nagisa",
        "timestamp": 1595037807
    },
    {
        "content": "<p>but yes I do tend to annotate things like locks where it matters, just so that its obvious on a quick read what's happening, even to people who donâ€™t necessarily know the rules by heart.</p>",
        "id": 204278392,
        "sender_full_name": "nagisa",
        "timestamp": 1595037959
    },
    {
        "content": "<p>that said, there's no way that I can tell, to see the code being referenced by that comment anymore</p>",
        "id": 204278452,
        "sender_full_name": "nagisa",
        "timestamp": 1595038010
    },
    {
        "content": "<p>but I suspect it was something like <code>{foo.lock().banana()}.peach()</code>?</p>",
        "id": 204278462,
        "sender_full_name": "nagisa",
        "timestamp": 1595038027
    },
    {
        "content": "<p>I think that might be actively misleading</p>",
        "id": 205291239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970623
    },
    {
        "content": "<p>at least unless we adjust the lifetime of temporaries in the tail expression of a block...</p>",
        "id": 205291245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970635
    },
    {
        "content": "<p>e.g., in nagisa's example, the lock will not be droppe until the end of the enclosing statement, despite the <code>{}</code></p>",
        "id": 205291261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970651
    },
    {
        "content": "<p>I tend to avoid explicit calls to <code>mem::drop</code>, as they introduce separate code-paths for happy path vs early-return/unwinding.</p>",
        "id": 205291892,
        "sender_full_name": "matklad",
        "timestamp": 1595970999
    },
    {
        "content": "<p>the early return is what makes the separate code path, not the call to drop</p>",
        "id": 205292005,
        "sender_full_name": "Lokathor",
        "timestamp": 1595971083
    },
    {
        "content": "<p>well it's the combination of the two :)</p>",
        "id": 205292023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971099
    },
    {
        "content": "<p>Yeah, to clarify, the code where this bit me hard was something like:</p>\n<div class=\"codehilite\"><pre><span></span><code>let sender = ...;\nlet worker = ....;\n\ndrop(sender); // make sure that worker can shut down\ndrop(worker); // join worker, can join now because the sender is closed\n</code></pre></div>\n\n\n<p>This worked well until one day rust-analyzer hanged after a panic;</p>\n<p>Changing that to</p>\n<div class=\"codehilite\"><pre><span></span><code>let worker;\nlet sender = ...;\nworker = ....;\n</code></pre></div>\n\n\n<p>fixed the issue In an automatic way.</p>",
        "id": 205333481,
        "sender_full_name": "matklad",
        "timestamp": 1596014177
    },
    {
        "content": "<p>interesting example</p>",
        "id": 205370295,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596035650
    },
    {
        "content": "<p>So this changed the drop order compared to when explicit drops were used?</p>",
        "id": 205421774,
        "sender_full_name": "Lokathor",
        "timestamp": 1596062078
    },
    {
        "content": "<p>Uhu. Or, rather, explicit drop changed drop order for happy path, and only for happy path</p>",
        "id": 205455085,
        "sender_full_name": "matklad",
        "timestamp": 1596099075
    }
]