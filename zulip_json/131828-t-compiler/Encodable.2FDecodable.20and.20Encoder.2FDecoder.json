[
    {
        "content": "<p>I'm looking at <code>Encodable</code>/<code>Decodable</code> and <code>Encoder</code>/<code>Decoder</code> because they're hot in incremental builds.</p>\n<p>There are two implementations of <code>Encoder</code>/<code>Decoder</code>. The <code>opaque</code> one is important because it is used in incremental builds. The <code>json</code> one is less important, being only used for (a) the <code>.rlink</code> file produced/consumed by <code>-Z no-link</code>/<code>-Z link-only</code> (and there's a <a href=\"https://github.com/rust-lang/rust/blob/195e931b02b69bbce1bcf4632f4e2d5603ef006b/compiler/rustc_interface/src/queries.rs#L370\"><code>FIXME</code></a> comment saying it should be changed to a binary format), and (b) in a handful of tests in non-fundamental ways.</p>\n<p>Also, the <code>opaque</code> implementation is mostly infallible, i.e. in most (though not all) places where something goes wrong it just panics, rather than returning an error. So I want to change <code>Decoder</code>/<code>Encoder</code> to actually be fallible, e.g. <code>decode()</code> would return <code>T</code> rather than <code>Result&lt;T, D::Error&gt;</code>. I have tried this locally with <code>Decoder</code>, but not yet with <code>Encoder</code>, and I get nice wins of up to 4%.</p>\n<p>So I'm contemplating several possibilities, in order of my most preferred to least preferred:</p>\n<ul>\n<li>Remove the <code>json</code> implementation, and make <code>opaque</code> infallible.</li>\n<li>Preserve <code>json</code>, and make both <code>json</code> and <code>opaque</code> infallible</li>\n<li>Preserve <code>json</code> and keep it fallible by introducing <code>FallibleDecoder</code>/<code>FallibleEncoder</code>, and make <code>opaque</code> infallible.</li>\n</ul>\n<p>Anyone have opinions about this?</p>",
        "id": 268355727,
        "sender_full_name": "nnethercote",
        "timestamp": 1642493463
    },
    {
        "content": "<p>I got an open PR to remove the json implementation. Need to update it someday and write an MCP (as it removes <code>-Zast-json</code>)</p>",
        "id": 268357669,
        "sender_full_name": "bjorn3",
        "timestamp": 1642494643
    },
    {
        "content": "<p>Looks like <code>-Zast-json</code> needs <code>Encoder</code> but not <code>Decoder</code>, which makes sense</p>",
        "id": 268369785,
        "sender_full_name": "nnethercote",
        "timestamp": 1642501048
    },
    {
        "content": "<p>FWIW it's probably fine to just panic rather than returning a result for JSON encoding - I'm not sure we ever do anything other than unwrap anyway.</p>",
        "id": 268394363,
        "sender_full_name": "simulacrum",
        "timestamp": 1642514480
    },
    {
        "content": "<p>I think I will take that route. For both <code>opaque</code> and <code>json</code> it's just a question of where the panic occurs -- deep within the decoding code, or at some slightly nicer top-level spot.</p>",
        "id": 268442341,
        "sender_full_name": "nnethercote",
        "timestamp": 1642533704
    },
    {
        "content": "<p>@bjorn3 I found  <a href=\"https://github.com/rust-lang/rust/issues/85993\">#85993</a>. Looks like a case where splitting it up into smaller PRs would be a way to make progress. Anyway, my change to make them infallible is orthogonal, so I'll keep working on it.</p>",
        "id": 268448494,
        "sender_full_name": "nnethercote",
        "timestamp": 1642536547
    },
    {
        "content": "<p>Hmm, making Encodable/Encoder infallible is harder than Decodable/Decoder. Because of <code>FileEncoder</code>, which can have IO-related errors occur while emitting, and the compiler currently handles these in a more complex fashion than just aborting.</p>",
        "id": 268465243,
        "sender_full_name": "nnethercote",
        "timestamp": 1642544900
    },
    {
        "content": "<p>On a semi-related note, I see <code>compiler/rustc_builtin_macros/src/deriving/decodable.rs</code> and <code>compiler/rustc_builtin_macros/src/deriving/encodable.rs</code>, which seems to be remnants of the deprecated <code>Rustc{De,En}codable</code> derivable trait.</p>",
        "id": 268486805,
        "sender_full_name": "nnethercote",
        "timestamp": 1642561606
    },
    {
        "content": "<p>And not just deprecated, but a hard error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0433]: failed to resolve: could not find `rustc_serialize` in the crate root\n --&gt; b.rs:1:10\n  |\n1 | #[derive(RustcDecodable)]\n  |          ^^^^^^^^^^^^^^ could not find `rustc_serialize` in the crate root\n  |\n</code></pre></div>",
        "id": 268486827,
        "sender_full_name": "nnethercote",
        "timestamp": 1642561639
    },
    {
        "content": "<p>Makes me wonder if those files are still necessary? Or perhaps they can be cut down to some stub contents?</p>",
        "id": 268486844,
        "sender_full_name": "nnethercote",
        "timestamp": 1642561660
    },
    {
        "content": "<p>Related: <a href=\"https://github.com/rust-lang/rust/pull/92594\">https://github.com/rust-lang/rust/pull/92594</a></p>",
        "id": 268487305,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642562089
    },
    {
        "content": "<p>That's not a hard error: the crate <em>could</em> be provided and it'll work just fine.</p>",
        "id": 268488092,
        "sender_full_name": "simulacrum",
        "timestamp": 1642562814
    }
]