[
    {
        "content": "<p>Hi all! I'm working on full support address-spaces now.<br>\nSo I'm stuck on limited size  of Ty. <strong>Why it's limited to 32bit?</strong><br>\nSee:  librustc/ty/mod.rs @ line 506 <code>static_assert_size!(TyS&lt;'_&gt;, 32);</code></p>\n<p>It's blocking me to add address_space field into RawPtr for example.<br>\n(And I can't use const-generics because it's really incomplete and unstable yet)</p>",
        "id": 179423652,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572436445
    },
    {
        "content": "<p>It's limited because the size of Ty should be kept small to decrease memory usage and increase speed</p>",
        "id": 179423817,
        "sender_full_name": "simulacrum",
        "timestamp": 1572436597
    },
    {
        "content": "<p>So now I have no idea how to impl it without extending that size. Any suggestions, ideas?</p>",
        "id": 179424011,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572436753
    },
    {
        "content": "<p>Can I increase size from 32 to 40? Is it will be ok?</p>",
        "id": 179424134,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572436805
    },
    {
        "content": "<p>Well, if it's required, obviously we _can_, it's just likely bad for perf</p>",
        "id": 179424167,
        "sender_full_name": "simulacrum",
        "timestamp": 1572436830
    },
    {
        "content": "<p>I think I've seen some other existing work in this area, maybe it's been by you, not sure</p>",
        "id": 179424330,
        "sender_full_name": "simulacrum",
        "timestamp": 1572437000
    },
    {
        "content": "<p>I would try and touch base with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> (though they can be hard to reach, super busy) on this before doing much</p>",
        "id": 179424347,
        "sender_full_name": "simulacrum",
        "timestamp": 1572437025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246528\">@Alex Koz.</span> I'm sorry, but it's unlikely that you could upstream such a change without an RFC</p>",
        "id": 179427017,
        "sender_full_name": "eddyb",
        "timestamp": 1572439350
    },
    {
        "content": "<p>and I'm against landing anything invasive - there's already been an attempt and they didn't want to shrink it down to the minimum necessary to function</p>",
        "id": 179427049,
        "sender_full_name": "eddyb",
        "timestamp": 1572439385
    },
    {
        "content": "<p>and that's all pretty much hidden from the user, it would be hard to convince people that make the typesystem more complex is worth it</p>",
        "id": 179427082,
        "sender_full_name": "eddyb",
        "timestamp": 1572439427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246528\">@Alex Koz.</span> you could, however, use <code>const</code> generics and a lang item, to experiment with some of this, and it would be less invasive</p>",
        "id": 179427141,
        "sender_full_name": "eddyb",
        "timestamp": 1572439463
    },
    {
        "content": "<p>maybe intrinsics to do the non-default-address-space operations</p>",
        "id": 179427163,
        "sender_full_name": "eddyb",
        "timestamp": 1572439480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  Thanks for answer. I cannot use intrinsics because there's should be fn-params initially. For example something like this:</p>\n<div class=\"codehilite\"><pre><span></span>const ADDR_SPACE_FOO = 2;\ntype Color = [u32; 4]\nextern &quot;some-abi&quot; fn my_compute_shader(buffer: Buf&lt;Color, ADDR_SPACE_FOO&gt;) { ... }\n</pre></div>",
        "id": 179436860,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572445499
    },
    {
        "content": "<blockquote>\n<p>I'm sorry, but it's unlikely that you could upstream such a change without an RFC</p>\n</blockquote>\n<p>Thanks, I know. Firstly I should try and off course I'll write an RFC :)</p>",
        "id": 179437544,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572445888
    },
    {
        "content": "<p>an intrinsic like that would work I think</p>",
        "id": 179441970,
        "sender_full_name": "eddyb",
        "timestamp": 1572448337
    },
    {
        "content": "<p>although I'm not sure what you mean</p>",
        "id": 179441990,
        "sender_full_name": "eddyb",
        "timestamp": 1572448348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ,</p>\n<p>I mean I need possibility  somehow describe address-space for input args of function. <br>\nE.g.: if I wanna addrspace=42 for <code>ptr</code> in <code>fn foo(ptr: *mut u128)</code>, so in llvm's IR <code>ptr</code> should be <code>u128 addrspace(42)*</code> .</p>\n<p>So I have following options how to impl this:<br>\n- wrap type of <code>ptr</code> into lang-item something like <code>AddressedPtr &lt;T, const ADDR_SPACE: u32&gt;</code> and later evaluate constant in codegen;<br>\n- param-attr like <code>fn foo(    #[addrspace(42)]    ptr: *mut u128)</code> and wrap type and eval (see previous option);<br>\n- hack syntax, add something terrible ptr-syntax extension like <code>*&lt;42&gt;mut u128</code> or <code>*.42 mut u128</code> (really bad option).</p>\n<p>What I have missed?</p>\n<p>P.S: Sorry, my English isn't so cool. It's not native for me (yet).</p>",
        "id": 179447481,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572451206
    },
    {
        "content": "<p>For better explanation,<br>\n- Address space is an attr of pointer<br>\n- In low-level and compile-time, address space for various targets have various usage. For example in the AMDGPU it used for mapping to various physical memory \"parts\", but in Apple's Metal also for indicate mutability.<br>\n- For GPU-target (as minimum) we should expose API for create addresspace-ed pointers to user. I think it should be type-wrapper with const-generic in the libcore as I told before.</p>",
        "id": 179449068,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572452054
    },
    {
        "content": "<blockquote>\n<p>- wrap type of <code>ptr</code> into lang-item something like <code>AddressedPtr &lt;T, const ADDR_SPACE: u32&gt;</code> and later evaluate constant in codegen;</p>\n</blockquote>\n<p>this is what I was suggesting btw</p>",
        "id": 179449210,
        "sender_full_name": "eddyb",
        "timestamp": 1572452137
    },
    {
        "content": "<p>it avoids needing to change the typesystem</p>",
        "id": 179449252,
        "sender_full_name": "eddyb",
        "timestamp": 1572452162
    },
    {
        "content": "<p>Thanks! I think so.</p>",
        "id": 179449569,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572452355
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> May you help me with a little stuck? I added lang item in <code>librustc/middle/lang_items.rs</code> : <code>language_item_table!</code></p>\n<p><code>AddrspaceLangItem,           \"addrspace\",          addrspace,               Target::Struct;</code></p>\n<p>but anyway always getting error when libcore compilation: <code>definition of an unknown language item: addrspace</code>.<br>\nWhat I missed?</p>",
        "id": 179528525,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572526854
    },
    {
        "content": "<p>you need to have <code>#[cfg(not(bootstrap))]</code> on it</p>",
        "id": 179528584,
        "sender_full_name": "eddyb",
        "timestamp": 1572526887
    },
    {
        "content": "<p>since the beta compiler doesn't know about it yet</p>",
        "id": 179528604,
        "sender_full_name": "eddyb",
        "timestamp": 1572526905
    },
    {
        "content": "<p>I agree with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> that this would require an RFC -- and in particular I'd like to understand better the motivation</p>",
        "id": 179528654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572526927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ignoring x86_16, which idk if anyone is working on, this tends to be limited to GPUs, which are designed to have N distinct memory spaces and I'm not even sure there's a way to have an unified pointer at all (like you can have a far pointer on x86_16)</p>",
        "id": 179528720,
        "sender_full_name": "eddyb",
        "timestamp": 1572527014
    },
    {
        "content": "<p>while compiling Rust to run on GPUs is cool, it's also... complicated</p>",
        "id": 179528782,
        "sender_full_name": "eddyb",
        "timestamp": 1572527046
    },
    {
        "content": "<p>I'd prefer us have the current typesystem and only add special types (or even just intrinsics in <code>{core,std}::arch</code>) for the \"non-default\" address spaces, but it may not be workable</p>",
        "id": 179528818,
        "sender_full_name": "eddyb",
        "timestamp": 1572527095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> note that this is not about Harvard architectures (like AVR, I think? or a different one we support), which we already support by always keeping data pointers and <code>fn</code> pointers distinct during codegen (this is not that hard since the typesystem already distinguishes between them)</p>",
        "id": 179528985,
        "sender_full_name": "eddyb",
        "timestamp": 1572527197
    },
    {
        "content": "<p>and besides, data pointers use <code>load</code>/<code>store</code>, <code>fn</code> pointers use <code>call</code>, they're disjoint in their uses and the difference can be handled there trivially</p>",
        "id": 179529056,
        "sender_full_name": "eddyb",
        "timestamp": 1572527253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> on top of that, all attempts I've seen at adding multiple data addrspaces to Rust (including from <span class=\"user-mention\" data-user-id=\"246528\">@Alex Koz.</span>) explicitly mention GPUs</p>",
        "id": 179529179,
        "sender_full_name": "eddyb",
        "timestamp": 1572527320
    },
    {
        "content": "<p>GPUs are the primary case where I'm familiar with address spaces. At $dayjob, we need to consider different address spaces in Clang for targeting GPUs (through OpenCL).</p>",
        "id": 179529347,
        "sender_full_name": "davidtwco",
        "timestamp": 1572527436
    },
    {
        "content": "<p>For the uses cases I'm familiar with specifically (and I'm by no means an expert in this stuff, but I do have some interest and would like to see Rust be usable in this space), address spaces of pointers are typically inferred during compilation.</p>",
        "id": 179529464,
        "sender_full_name": "davidtwco",
        "timestamp": 1572527534
    },
    {
        "content": "<p>Though some projects I'm aware of (that also target OpenCL) will use OpenCL 2.0's generic space (<a href=\"https://software.intel.com/en-us/articles/the-generic-address-space-in-opencl-20\" target=\"_blank\" title=\"https://software.intel.com/en-us/articles/the-generic-address-space-in-opencl-20\">https://software.intel.com/en-us/articles/the-generic-address-space-in-opencl-20</a>) exclusively and leave all inference to the OpenCL runtime.</p>",
        "id": 179529492,
        "sender_full_name": "davidtwco",
        "timestamp": 1572527567
    },
    {
        "content": "<p>ooooh I'd prefer that if it's possible for LLVM to do it</p>",
        "id": 179529552,
        "sender_full_name": "eddyb",
        "timestamp": 1572527629
    },
    {
        "content": "<p>(i.e. if we don't have to do it in rustc)</p>",
        "id": 179529561,
        "sender_full_name": "eddyb",
        "timestamp": 1572527636
    },
    {
        "content": "<p>That's not something that LLVM has currently, but I know people discussing the possibility (commercially, unlikely to ever be unstreamed).</p>",
        "id": 179529625,
        "sender_full_name": "davidtwco",
        "timestamp": 1572527667
    },
    {
        "content": "<p><span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 179529645,
        "sender_full_name": "eddyb",
        "timestamp": 1572527690
    },
    {
        "content": "<p>so who implements OpenCL 2 and how?!</p>",
        "id": 179529681,
        "sender_full_name": "eddyb",
        "timestamp": 1572527715
    },
    {
        "content": "<p>Sometimes you do need to specify it in user code though, I've seen attributes in Clang (something like <code>__attribute__((address_space(3))</code>) used or types that are constructed like <code>Option</code>, but you have some <code>GlobalAddrSpacePointer::new(/* some ptr type*/)</code> which is either <code>None</code> or <code>Some(/* ptr */)</code> if that pointer was in the global address space (obviously using some ugly non-algebraic-data-type in C++).</p>",
        "id": 179529701,
        "sender_full_name": "davidtwco",
        "timestamp": 1572527730
    },
    {
        "content": "<p>Intel's SYCL implementation (<a href=\"https://github.com/intel/llvm\" target=\"_blank\" title=\"https://github.com/intel/llvm\">https://github.com/intel/llvm</a>) uses the generic address space for everything and then their OpenCL runtime does the inference (so they are OpenCL 2.0 only).</p>",
        "id": 179529739,
        "sender_full_name": "davidtwco",
        "timestamp": 1572527761
    },
    {
        "content": "<p>My employer's SYCL implementation does the address space inference in Clang, and so supports OpenCL &lt;2.0 too.</p>",
        "id": 179529813,
        "sender_full_name": "davidtwco",
        "timestamp": 1572527802
    },
    {
        "content": "<p>(which is valuable, because some specialized hardware won't be able to support generic address spaces)</p>",
        "id": 179529824,
        "sender_full_name": "davidtwco",
        "timestamp": 1572527820
    },
    {
        "content": "<p>I don't know enough about this stuff from a end-user perspective (or implementer's perspective) to have a strong opinion on how much this type of detail should be surfaced to the user, or how possible it is to do it all without the user needing to care.</p>",
        "id": 179529907,
        "sender_full_name": "davidtwco",
        "timestamp": 1572527890
    },
    {
        "content": "<p>Intel's Compute Runtime (<a href=\"https://github.com/intel/compute-runtime\" target=\"_blank\" title=\"https://github.com/intel/compute-runtime\">https://github.com/intel/compute-runtime</a>) is an open-source implementation of OpenCL 2.1 for their integrated graphics hardware.</p>",
        "id": 179530306,
        "sender_full_name": "davidtwco",
        "timestamp": 1572528200
    },
    {
        "content": "<p>@eddyb:</p>\n<blockquote>\n<p>you need to have #[cfg(not(bootstrap))] on it</p>\n</blockquote>\n<p>Maybe I'm stupid more then I knew but it's not working. Also <code>#[cfg_attr(not(bootstrap), lang = \"addrspace\")]</code> too. Same error.<br>\nI added lang-item into the core lib, not in std.</p>",
        "id": 179530324,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572528224
    },
    {
        "content": "<p>I assume (again, I'm not <em>that</em> familiar with this stuff) that it does address space inference to support generic address spaces.</p>",
        "id": 179530330,
        "sender_full_name": "davidtwco",
        "timestamp": 1572528229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246528\">@Alex Koz.</span> can you search your copy of libcore for the word <code>bootstrap</code>?</p>",
        "id": 179530420,
        "sender_full_name": "eddyb",
        "timestamp": 1572528293
    },
    {
        "content": "<p>if you're not up to date it might be named something else, there were some issues for a bit</p>",
        "id": 179530445,
        "sender_full_name": "eddyb",
        "timestamp": 1572528315
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246528\">Alex Koz.</span> can you search libcore for the word <code>bootstrap</code>?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src/libcore/panic.rs#L170\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/9285d401a6070094747465962bc49969b93e14c5/src/libcore/panic.rs#L170\">Here's an example</a> on tip right now.</p>",
        "id": 179530469,
        "sender_full_name": "davidtwco",
        "timestamp": 1572528343
    },
    {
        "content": "<p>Another example of address-spaces - AMDGPU target. There is various distinctions and ptr-sizes for each space. Also see mem-spaces.<br>\n<a href=\"https://llvm.org/docs/AMDGPUUsage.html#amdgpu-address-space-mapping-table\" target=\"_blank\" title=\"https://llvm.org/docs/AMDGPUUsage.html#amdgpu-address-space-mapping-table\">https://llvm.org/docs/AMDGPUUsage.html#amdgpu-address-space-mapping-table</a></p>",
        "id": 179530626,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572528471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> it was named something else for a while, is why I'm asking</p>",
        "id": 179530758,
        "sender_full_name": "eddyb",
        "timestamp": 1572528550
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> it was named something else for a while, is why I'm asking</p>\n</blockquote>\n<p>Yeah, I remember.</p>",
        "id": 179530774,
        "sender_full_name": "davidtwco",
        "timestamp": 1572528563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246528\">@Alex Koz.</span> that's not a different example, that's the same example I gave: GPUs</p>",
        "id": 179530785,
        "sender_full_name": "eddyb",
        "timestamp": 1572528579
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/L-EAWFoYA2NkhZVV78ymmwLx/Screenshot-2019-10-31-at-16.32.01.png\" target=\"_blank\" title=\"Screenshot-2019-10-31-at-16.32.01.png\">Screenshot-2019-10-31-at-16.32.01.png</a>  :(</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/L-EAWFoYA2NkhZVV78ymmwLx/Screenshot-2019-10-31-at-16.32.01.png\" target=\"_blank\" title=\"Screenshot-2019-10-31-at-16.32.01.png\"><img src=\"/user_uploads/4715/L-EAWFoYA2NkhZVV78ymmwLx/Screenshot-2019-10-31-at-16.32.01.png\"></a></div>",
        "id": 179531041,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572528741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246528\">@Alex Koz.</span> did you set anything in <code>config.toml</code>?</p>",
        "id": 179531117,
        "sender_full_name": "eddyb",
        "timestamp": 1572528795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246528\">@Alex Koz.</span> also, can you grep <code>src/libcore</code> in your checkout for <code>bootstrap</code>?</p>",
        "id": 179531216,
        "sender_full_name": "eddyb",
        "timestamp": 1572528844
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>   Yes but there's nothing about lang-items.</p>",
        "id": 179531254,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572528869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246528\">@Alex Koz.</span> doesn't matter, for both of my questions</p>",
        "id": 179531312,
        "sender_full_name": "eddyb",
        "timestamp": 1572528908
    },
    {
        "content": "<p>for <code>config.toml</code>, it's possible you're not building stage0 with the beta compiler, and for the grep thing it's to confirm that the cfg flag is indeed named <code>bootstrap</code> for you</p>",
        "id": 179531369,
        "sender_full_name": "eddyb",
        "timestamp": 1572528962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> thanks -- I think this is a good and interesting case -- I'd like to enable <em>exploration</em> around GPUs (including tinkering with address spaces) but in a way where we give very low commitment</p>",
        "id": 179531411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572528964
    },
    {
        "content": "<p>(and I agree i'd prefer to avoid invasive changes)</p>",
        "id": 179531422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572528977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Found just my <code>#[cfg_attr(not(bootstrap), lang = \"addrspace\")]</code>. I'm on the not latest commit - mb. problem in it...</p>",
        "id": 179531479,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572529046
    },
    {
        "content": "<p>yeah, right now there are several uses of <code>bootstrap</code>, so if you don't see any others, you might be on one of the versions where it was named something hacky to bypass a bug</p>",
        "id": 179531609,
        "sender_full_name": "eddyb",
        "timestamp": 1572529115
    },
    {
        "content": "<p>O! I understood. Thanks a lot! :D</p>",
        "id": 179531668,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572529181
    },
    {
        "content": "<blockquote>\n<p>@nikomatsakis : (and I agree i'd prefer to avoid invasive changes)</p>\n</blockquote>\n<p>Sorry, I have no see any way to impl it without changes of RawPtr structure to store the specified  address space.</p>\n<p>But maybe I can create one more extra context where will be stored address space for each def?...</p>",
        "id": 179531997,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572529412
    },
    {
        "content": "<p>Also same for Ref but more complex.</p>",
        "id": 179532025,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572529442
    },
    {
        "content": "<p>It because I don't want to change the codegen_llvm impl &amp; api like <code>fn type_ptr_to(&amp;self, ty: &amp;'ll Type) -&gt; &amp;'ll Type</code>.</p>",
        "id": 179532289,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572529610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> also ARMs <a href=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dai0179b/CHDDBAEC.html\" target=\"_blank\" title=\"http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dai0179b/CHDDBAEC.html\">http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dai0179b/CHDDBAEC.html</a></p>",
        "id": 179639176,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572624599
    },
    {
        "content": "<p>that's a memory map of ono address space though?</p>",
        "id": 179641853,
        "sender_full_name": "eddyb",
        "timestamp": 1572626316
    },
    {
        "content": "<p>I’m not sure and should check this out tomorrow.</p>",
        "id": 179672085,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1572648295
    },
    {
        "content": "<p>Ok. That was mem-mapping.</p>",
        "id": 180046094,
        "sender_full_name": "Alex Koz.",
        "timestamp": 1573055778
    }
]