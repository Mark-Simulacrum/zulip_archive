[
    {
        "content": "<p>Does anyone have any tips or tricks for looking at HIR dumps? I have a 20 line test program and the HIR was over 2000 lines long, and the interesting parts are all really deeply indented. I was wondering if anyone knew of better ways to look at this.</p>",
        "id": 247243975,
        "sender_full_name": "eholk",
        "timestamp": 1627324753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421986\">@eholk</span> does <code>rustfmt</code> work on it? I forget if it follows Rust syntax</p>",
        "id": 247310396,
        "sender_full_name": "eddyb",
        "timestamp": 1627377296
    },
    {
        "content": "<p>Mostly, but for example async fn results in mangled syntax last time I tried it.</p>",
        "id": 247311004,
        "sender_full_name": "bjorn3",
        "timestamp": 1627377768
    },
    {
        "content": "<p>shouldn't it \"just\" be generators? I guess the <code>impl Trait</code> parts might be printed weird</p>",
        "id": 247311029,
        "sender_full_name": "eddyb",
        "timestamp": 1627377795
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>gives</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[prelude_import]</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">prelude</span>::<span class=\"n\">v1</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"cp\">#[macro_use]</span><span class=\"w\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\"> </span>-&gt;\n     <span class=\"cm\">/*impl Trait*/</span><span class=\"w\"> </span><span class=\"cp\">#[lang = </span><span class=\"s\">\"from_generator\"</span><span class=\"cp\">]</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_task_context</span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">                                                   </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"n\">_t</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 247311237,
        "sender_full_name": "bjorn3",
        "timestamp": 1627377959
    },
    {
        "content": "<p>oh god</p>",
        "id": 247311286,
        "sender_full_name": "eddyb",
        "timestamp": 1627377967
    },
    {
        "content": "<p>okay the <code>#[lang = \"...\"]</code> is a bug. printing the HIR should be done at a point where those can be looked up (and the proper path printed)</p>",
        "id": 247311321,
        "sender_full_name": "eddyb",
        "timestamp": 1627378006
    },
    {
        "content": "<p>but also there's a lot more issues I guess</p>",
        "id": 247311335,
        "sender_full_name": "eddyb",
        "timestamp": 1627378022
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/60661\">https://github.com/rust-lang/rust/issues/60661</a> (closed as not a bug)</p>",
        "id": 247311456,
        "sender_full_name": "bjorn3",
        "timestamp": 1627378095
    },
    {
        "content": "<p>Tje output was better at that time.</p>",
        "id": 247311476,
        "sender_full_name": "bjorn3",
        "timestamp": 1627378123
    },
    {
        "content": "<p>okay but, like,</p>",
        "id": 247311484,
        "sender_full_name": "eddyb",
        "timestamp": 1627378128
    },
    {
        "content": "<p>it's not a bug that it doesn't compile, but it is a bug that it's completely useless</p>",
        "id": 247311498,
        "sender_full_name": "eddyb",
        "timestamp": 1627378145
    },
    {
        "content": "<p>I agree</p>",
        "id": 247311506,
        "sender_full_name": "bjorn3",
        "timestamp": 1627378152
    },
    {
        "content": "<p>and doesn't even have any logic to it</p>",
        "id": 247311507,
        "sender_full_name": "eddyb",
        "timestamp": 1627378154
    },
    {
        "content": "<p>I also just had an idea, of using macro syntax to hide \"not expressible in normal Rust\" stuff from e.g. <code>rustfmt</code></p>",
        "id": 247311961,
        "sender_full_name": "eddyb",
        "timestamp": 1627378499
    },
    {
        "content": "<p>(and reopened the issue at the same time - <a href=\"https://github.com/rust-lang/rust/issues/60661#issuecomment-887363016\">https://github.com/rust-lang/rust/issues/60661#issuecomment-887363016</a>)</p>",
        "id": 247311979,
        "sender_full_name": "eddyb",
        "timestamp": 1627378517
    },
    {
        "content": "<p>Ah, so I was using <code>-Z unpretty=hir-tree</code> since that's what the rustc dev guide suggested, but <code>-Z unpretty=hir</code> gives something a lot more readable.</p>",
        "id": 247377576,
        "sender_full_name": "eholk",
        "timestamp": 1627413122
    },
    {
        "content": "<p>It might be worth mentioning both in the dev guide. <code>hir-tree</code> obviously gives a lot more precise information, but it feels like <code>hir</code> will be more useful most of the time, at least at first.</p>",
        "id": 247377655,
        "sender_full_name": "eholk",
        "timestamp": 1627413150
    },
    {
        "content": "<p>it is mentioned in the guide <a href=\"https://rustc-dev-guide.rust-lang.org/test-implementation.html?highlight=unpretty#inspecting-the-generated-code\">https://rustc-dev-guide.rust-lang.org/test-implementation.html?highlight=unpretty#inspecting-the-generated-code</a> but in a somewhat unexpected chapter indeed</p>",
        "id": 247380510,
        "sender_full_name": "lqd",
        "timestamp": 1627414604
    },
    {
        "content": "<p>Heh, I had the opposite problem the other day: I was using <code>-Zunpretty=hir</code> and wasn't getting enough info but I didn't know about <code>-Zunpretty=hir-tree</code>.</p>",
        "id": 247417297,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1627441910
    }
]