[
    {
        "content": "<p>Is anyone else getting issues with the following tests failing on their local machines: </p>\n<ul>\n<li><code>ui/run-pass/panic-runtime/abort-link-to-unwinding-crates.rs</code></li>\n<li><code>ui/run-pass/panic-runtime/abort.rs</code></li>\n<li><code>ui/run-pass/panic-runtime/link-to-abort.rs</code></li>\n<li><code>ui/run-pass/thinlto/all-crates.rs</code></li>\n<li><code>ui/run-pass/thinlto/thin-lto-inlines2.rs</code></li>\n</ul>\n<p>They pass on Travis so I've just been ignoring them locally.</p>",
        "id": 133739458,
        "sender_full_name": "davidtwco",
        "timestamp": 1536678832
    },
    {
        "content": "<p>I get problems in and around that area from time to time...</p>",
        "id": 133739636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536678987
    },
    {
        "content": "<p>not sure if I'm seeing those <em>specific</em> errors</p>",
        "id": 133739642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536678994
    },
    {
        "content": "<p>but it's the kind of test names I tend to ignore :P</p>",
        "id": 133739646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536679002
    },
    {
        "content": "<p>is this <code>--stage 1</code>?</p>",
        "id": 133739663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536679024
    },
    {
        "content": "<p>Yes, but with <code>--keep-stage 0</code>, not <code>--stage 1</code>.</p>",
        "id": 133739780,
        "sender_full_name": "davidtwco",
        "timestamp": 1536679145
    },
    {
        "content": "<p>i get those errors all the time</p>",
        "id": 133740642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536680030
    },
    {
        "content": "<p>I cannot remember if its only with <code>--incremental</code> or not</p>",
        "id": 133740695,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536680049
    },
    {
        "content": "<p>its very frustrating</p>",
        "id": 133740706,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536680062
    },
    {
        "content": "<p>I am using incremental in this case.</p>",
        "id": 133740707,
        "sender_full_name": "davidtwco",
        "timestamp": 1536680062
    },
    {
        "content": "<p>I have wondered if it is related to <a href=\"https://github.com/rust-lang/rust/issues/53929\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53929\">#53929</a></p>",
        "id": 133740836,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536680172
    },
    {
        "content": "<p>and I have also filed <a href=\"https://github.com/rust-lang/rust/issues/53761\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53761\">#53761</a></p>",
        "id": 133740913,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536680274
    },
    {
        "content": "<p>I am also using <code>codegen-units=N</code> for N != 1 in my Cargo.toml</p>",
        "id": 133740984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536680311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> are you doing that as well? Or do you leave that at the default setting?</p>",
        "id": 133740997,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536680325
    },
    {
        "content": "<p>I'm not on OS X so if your issue is specific to OS X then it's probably something else. Just the default <code>codegen-units</code>.</p>",
        "id": 133741023,
        "sender_full_name": "davidtwco",
        "timestamp": 1536680350
    },
    {
        "content": "<p>(I am just throwing in potential reasons why you or I may be seeing local issues that Travis does not observe. Though now that I say that, I hope that my codegen-units setting does not affect what we do on the test suite itself.....)</p>",
        "id": 133741042,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536680379
    },
    {
        "content": "<p>This is the full error that I get for one of the test cases: <a href=\"https://gist.github.com/davidtwco/76255039178e6a347706b47f5c4a9a7d\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/76255039178e6a347706b47f5c4a9a7d\">https://gist.github.com/davidtwco/76255039178e6a347706b47f5c4a9a7d</a></p>",
        "id": 133741144,
        "sender_full_name": "davidtwco",
        "timestamp": 1536680438
    },
    {
        "content": "<p>Felix's one looks like <a href=\"https://github.com/rust-lang/rust/issues/52528\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52528\">#52528</a> (in particular, varkor's comment)</p>",
        "id": 133741402,
        "sender_full_name": "lqd",
        "timestamp": 1536680644
    },
    {
        "content": "<p>on Linux, on my migrate run-pass to ui branch, I am seeing the same cases fail as <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></p>",
        "id": 133753465,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536693044
    },
    {
        "content": "<p>(I'm double-checking now whether taking out <code>--incremental</code> fixes it; I think it has in the past, but I'm not 100% certain)</p>",
        "id": 133753496,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536693080
    },
    {
        "content": "<p>(and yes, it looks like removing <code>--incremental</code> fixes the problem for me on Linux)</p>",
        "id": 133754630,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536694167
    },
    {
        "content": "<p>Is there an issue out there for this specific problem?</p>",
        "id": 133754697,
        "sender_full_name": "davidtwco",
        "timestamp": 1536694213
    },
    {
        "content": "<p>If there's an existing issue, I don't think its been diagnosed properly. The closest might be <a href=\"https://github.com/rust-lang/rust/issues/52528\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52528\">#52528</a></p>",
        "id": 133756305,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536695865
    },
    {
        "content": "<p>but even there that's just because <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> noted a connection</p>",
        "id": 133756365,
        "sender_full_name": "pnkfelix",
        "timestamp": 1536695889
    },
    {
        "content": "<p>I'm seeing these test failures too with --incremental.</p>",
        "id": 134128502,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537220673
    },
    {
        "content": "<p>Does setting --incremental in <code>x.py</code> make  tests be build incrementally too? That wouldn't make sense.</p>",
        "id": 134224504,
        "sender_full_name": "mw",
        "timestamp": 1537354297
    },
    {
        "content": "<p>Oh, the problem is (probably) that libstd was built incrementally ...</p>",
        "id": 134229363,
        "sender_full_name": "mw",
        "timestamp": 1537360699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and that somehow affected the codegen of the tests...?</p>",
        "id": 134231329,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537363059
    },
    {
        "content": "<p>or oh you mean the codegen of the libstd itself was broken in some way that the tests may be exposing...?</p>",
        "id": 134232277,
        "sender_full_name": "pnkfelix",
        "timestamp": 1537364152
    },
    {
        "content": "<p>yes, I think so</p>",
        "id": 134233576,
        "sender_full_name": "mw",
        "timestamp": 1537365553
    },
    {
        "content": "<p>I just tried with codegen-units=1000. that doesn't fail</p>",
        "id": 134233581,
        "sender_full_name": "mw",
        "timestamp": 1537365570
    },
    {
        "content": "<p>but incr. comp. does a slightly different partitioning, splitting generic and non-generic code into different obj files</p>",
        "id": 134233649,
        "sender_full_name": "mw",
        "timestamp": 1537365612
    },
    {
        "content": "<p>that might be part of the problem</p>",
        "id": 134233661,
        "sender_full_name": "mw",
        "timestamp": 1537365621
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    [ui] ui/coherence/coherence-inherited-assoc-ty-cycle-err.rs\n    [ui] ui/consts/const-size_of-cycle.rs\n    [ui] ui/cycle-projection-based-on-where-clause.rs\n    [ui] ui/cycle-trait/cycle-trait-default-type-trait.rs\n    [ui] ui/cycle-trait/cycle-trait-supertrait-direct.rs\n    [ui] ui/cycle-trait/cycle-trait-supertrait-indirect.rs\n    [ui] ui/existential_types/no_inferrable_concrete_type.rs\n    [ui] ui/impl-trait/auto-trait-leak.rs\n    [ui] ui/infinite/infinite-tag-type-recursion.rs\n    [ui] ui/infinite/infinite-vec-type-recursion.rs\n    [ui] ui/issues/issue-12511.rs\n    [ui] ui/issues/issue-17252.rs\n    [ui] ui/issues/issue-20772.rs\n    [ui] ui/issues/issue-21177.rs\n    [ui] ui/issues/issue-22673.rs\n    [ui] ui/issues/issue-23302-1.rs\n    [ui] ui/issues/issue-23302-2.rs\n    [ui] ui/issues/issue-23302-3.rs\n    [ui] ui/issues/issue-26548.rs\n    [ui] ui/issues/issue-3008-1.rs\n    [ui] ui/issues/issue-3008-2.rs\n    [ui] ui/issues/issue-32326.rs\n    [ui] ui/issues/issue-34373.rs\n    [ui] ui/issues/issue-36163.rs\n    [ui] ui/issues/issue-44415.rs\n    [ui] ui/no_owned_box_lang_item.rs\n    [ui] ui/recursion/recursive-enum.rs\n    [ui] ui/resolve/resolve-self-in-impl.rs\n    [ui] ui/run-pass/panic-runtime/abort-link-to-unwinding-crates.rs\n    [ui] ui/run-pass/panic-runtime/abort.rs\n    [ui] ui/run-pass/panic-runtime/link-to-abort.rs\n    [ui] ui/run-pass/thinlto/all-crates.rs\n    [ui] ui/run-pass/thinlto/thin-lto-inlines2.rs\n    [ui] ui/union/union-nonrepresentable.rs\n</pre></div>\n\n\n<p>are the tests that fialed for me today</p>",
        "id": 136602045,
        "sender_full_name": "nagisa",
        "timestamp": 1540637092
    },
    {
        "content": "<p>Interesting, I just rebased an hour ago and ran the full ui suite and had no strange failures.</p>",
        "id": 136602266,
        "sender_full_name": "davidtwco",
        "timestamp": 1540637573
    },
    {
        "content": "<p>Is my config diff from what is default</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gd\">--- config.toml.example 2018-10-27 13:47:09.761548565 +0300</span>\n<span class=\"gi\">+++ config.toml 2018-10-13 15:36:24.818581061 +0300</span>\n<span class=\"gu\">@@ -16,10 +16,10 @@</span>\n\n # Indicates whether rustc will support compilation with LLVM\n # note: rustc does not compile without LLVM at the moment\n<span class=\"gd\">-#enabled = true</span>\n<span class=\"gi\">+enabled = true</span>\n\n # Indicates whether the LLVM build is a Release or Debug build\n<span class=\"gd\">-#optimize = true</span>\n<span class=\"gi\">+optimize = true</span>\n\n # Indicates whether LLVM should be built with ThinLTO. Note that this will\n # only succeed if you use clang, lld, llvm-ar, and llvm-ranlib in your C/C++\n<span class=\"gu\">@@ -28,10 +28,10 @@</span>\n #thin-lto = false\n\n # Indicates whether an LLVM Release build should include debug info\n<span class=\"gd\">-#release-debuginfo = false</span>\n<span class=\"gi\">+release-debuginfo = false</span>\n\n # Indicates whether the LLVM assertions are enabled or not\n<span class=\"gd\">-#assertions = false</span>\n<span class=\"gi\">+assertions = true</span>\n\n # Indicates whether ccache is used when building LLVM\n #ccache = false\n<span class=\"gu\">@@ -50,7 +50,7 @@</span>\n # Tell the LLVM build system to use Ninja instead of the platform default for\n # the generated build system. This can sometimes be faster than make, for\n # example.\n<span class=\"gd\">-#ninja = false</span>\n<span class=\"gi\">+ninja = true</span>\n\n # LLVM targets to build support for.\n # Note: this is NOT related to Rust compilation targets. However, as Rust is\n<span class=\"gu\">@@ -61,14 +61,14 @@</span>\n # support. You&#39;ll need to write a target specification at least, and most\n # likely, teach rustc about the C ABI of the target. Get in touch with the\n # Rust team and file an issue if you need assistance in porting!\n<span class=\"gd\">-#targets = &quot;X86;ARM;AArch64;Mips;PowerPC;SystemZ;JSBackend;MSP430;Sparc;NVPTX;Hexagon&quot;</span>\n<span class=\"gi\">+targets = &quot;X86;ARM;AArch64&quot;</span>\n\n # LLVM experimental targets to build support for. These targets are specified in\n # the same format as above, but since these targets are experimental, they are\n # not built by default and the experimental Rust compilation targets that depend\n # on them will not work unless the user opts in to building them. By default the\n # `WebAssembly` and `RISCV` targets are enabled when compiling LLVM from scratch.\n<span class=\"gd\">-#experimental-targets = &quot;WebAssembly;RISCV&quot;</span>\n<span class=\"gi\">+experimental-targets = &quot;&quot;</span>\n\n # Cap the number of parallel linker invocations when compiling LLVM.\n # This can be useful when building LLVM with debug info, which significantly\n<span class=\"gu\">@@ -76,7 +76,7 @@</span>\n # each linker process.\n # If absent or 0, linker invocations are treated like any other job and\n # controlled by rustbuild&#39;s -j parameter.\n<span class=\"gd\">-#link-jobs = 0</span>\n<span class=\"gi\">+link-jobs = 1</span>\n\n # When invoking `llvm-config` this configures whether the `--shared` argument is\n # passed to prefer linking to shared libraries.\n<span class=\"gu\">@@ -130,7 +130,7 @@</span>\n #compiler-docs = false\n\n # Indicate whether submodules are managed and updated automatically.\n<span class=\"gd\">-#submodules = true</span>\n<span class=\"gi\">+submodules = false</span>\n\n # Update submodules only when the checked out commit in the submodules differs\n # from what is committed in the main rustc repo.\n<span class=\"gu\">@@ -161,13 +161,13 @@</span>\n # would rather to perform a full bootstrap, compiling the compiler three times,\n # then you can set this option to true. You shouldn&#39;t ever need to set this\n # option to true.\n<span class=\"gd\">-#full-bootstrap = false</span>\n<span class=\"gi\">+full-bootstrap = false</span>\n\n # Enable a build of the extended rust tool set which is not only the compiler\n # but also tools such as Cargo. This will also produce &quot;combined installers&quot;\n # which are used to install Rust and Cargo together. This is disabled by\n # default.\n<span class=\"gd\">-#extended = false</span>\n<span class=\"gi\">+extended = false</span>\n\n # Installs chosen set of extended tools if enables. By default builds all.\n # If chosen tool failed to build the installation fails.\n<span class=\"gu\">@@ -177,14 +177,15 @@</span>\n #verbose = 0\n\n # Build the sanitizer runtimes\n<span class=\"gd\">-#sanitizers = false</span>\n<span class=\"gi\">+sanitizers = false</span>\n\n # Build the profiler runtime\n #profiler = false\n\n<span class=\"gd\">-# Indicates whether the native libraries linked into Cargo will be statically</span>\n<span class=\"gd\">-# linked or not.</span>\n<span class=\"gd\">-#cargo-native-static = false</span>\n<span class=\"gi\">+# Indicates whether the OpenSSL linked into Cargo will be statically linked or</span>\n<span class=\"gi\">+# not. If static linkage is specified then the build system will download a</span>\n<span class=\"gi\">+# known-good version of OpenSSL, compile it, and link it to Cargo.</span>\n<span class=\"gi\">+#openssl-static = false</span>\n\n # Run the build with low priority, by setting the process group&#39;s &quot;nice&quot; value\n # to +10 on Unix platforms, and by using a &quot;low priority&quot; job object on Windows.\n<span class=\"gu\">@@ -197,11 +198,11 @@</span>\n\n # Indicates that a local rebuild is occurring instead of a full bootstrap,\n # essentially skipping stage0 as the local compiler is recompiling itself again.\n<span class=\"gd\">-#local-rebuild = false</span>\n<span class=\"gi\">+# local-rebuild = true</span>\n\n # Print out how long each rustbuild step took (mostly intended for CI and\n # tracking over time)\n<span class=\"gd\">-#print-step-timings = false</span>\n<span class=\"gi\">+# print-step-timings = true</span>\n\n # =============================================================================\n # General install configuration options\n<span class=\"gu\">@@ -242,48 +243,27 @@</span>\n # =============================================================================\n [rust]\n\n<span class=\"gd\">-# Whether or not to optimize the compiler and standard library.</span>\n<span class=\"gd\">-#</span>\n<span class=\"gi\">+# Indicates that the build should be optimized for debugging Rust. Note that</span>\n<span class=\"gi\">+# this is typically not what you want as it takes an incredibly large amount of</span>\n<span class=\"gi\">+# time to have a debug-mode rustc compile any code (notably libstd). If this</span>\n<span class=\"gi\">+# value is set to `true` it will affect a number of configuration options below</span>\n<span class=\"gi\">+# as well, if unconfigured.</span>\n<span class=\"gi\">+#debug = false</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+# Whether or not to optimize the compiler and standard library</span>\n # Note: the slowness of the non optimized compiler compiling itself usually\n #       outweighs the time gains in not doing optimizations, therefore a\n<span class=\"gd\">-#       full bootstrap takes much more time with `optimize` set to false.</span>\n<span class=\"gd\">-#optimize = true</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-# Indicates that the build should be configured for debugging Rust. A</span>\n<span class=\"gd\">-# `debug`-enabled compiler and standard library will be somewhat</span>\n<span class=\"gd\">-# slower (due to e.g. checking of debug assertions) but should remain</span>\n<span class=\"gd\">-# usable.</span>\n<span class=\"gd\">-#</span>\n<span class=\"gd\">-# Note: If this value is set to `true`, it will affect a number of</span>\n<span class=\"gd\">-#       configuration options below as well, if they have been left</span>\n<span class=\"gd\">-#       unconfigured in this file.</span>\n<span class=\"gd\">-#</span>\n<span class=\"gd\">-# Note: changes to the `debug` setting do *not* affect `optimize`</span>\n<span class=\"gd\">-#       above. In theory, a &quot;maximally debuggable&quot; environment would</span>\n<span class=\"gd\">-#       set `optimize` to `false` above to assist the introspection</span>\n<span class=\"gd\">-#       facilities of debuggers like lldb and gdb. To recreate such an</span>\n<span class=\"gd\">-#       environment, explicitly set `optimize` to `false` and `debug`</span>\n<span class=\"gd\">-#       to `true`. In practice, everyone leaves `optimize` set to</span>\n<span class=\"gd\">-#       `true`, because an unoptimized rustc with debugging</span>\n<span class=\"gd\">-#       enabled becomes *unusably slow* (e.g. rust-lang/rust#24840</span>\n<span class=\"gd\">-#       reported a 25x slowdown) and bootstrapping the supposed</span>\n<span class=\"gd\">-#       &quot;maximally debuggable&quot; environment (notably libstd) takes</span>\n<span class=\"gd\">-#       hours to build.</span>\n<span class=\"gd\">-#</span>\n<span class=\"gd\">-#debug = false</span>\n<span class=\"gi\">+#       full bootstrap takes much more time with optimize set to false.</span>\n<span class=\"gi\">+optimize = true</span>\n\n # Number of codegen units to use for each compiler invocation. A value of 0\n # means &quot;the number of cores on this machine&quot;, and 1+ is passed through to the\n # compiler.\n<span class=\"gd\">-#codegen-units = 1</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-# Sets the number of codegen units to build the standard library with,</span>\n<span class=\"gd\">-# regardless of what the codegen-unit setting for the rest of the compiler is.</span>\n<span class=\"gd\">-#codegen-units-std = 1</span>\n<span class=\"gi\">+codegen-units = 16</span>\n\n # Whether or not debug assertions are enabled for the compiler and standard\n # library. Also enables compilation of debug! and trace! logging macros.\n<span class=\"gd\">-#debug-assertions = false</span>\n<span class=\"gi\">+debug-assertions = true</span>\n\n # Whether or not debuginfo is emitted\n #debuginfo = false\n<span class=\"gu\">@@ -310,10 +290,10 @@</span>\n #backtrace = true\n\n # Whether to always use incremental compilation when building rustc\n<span class=\"gd\">-#incremental = false</span>\n<span class=\"gi\">+incremental = true</span>\n\n # Build rustc with experimental parallelization\n<span class=\"gd\">-#experimental-parallel-queries = false</span>\n<span class=\"gi\">+experimental-parallel-queries = true</span>\n\n # The default linker that will be hard-coded into the generated compiler for\n # targets that don&#39;t specify linker explicitly in their target specifications.\n<span class=\"gu\">@@ -413,24 +393,24 @@</span>\n # C compiler to be used to compiler C code. Note that the\n # default value is platform specific, and if not specified it may also depend on\n # what platform is crossing to what platform.\n<span class=\"gd\">-#cc = &quot;cc&quot;</span>\n<span class=\"gi\">+# cc = &quot;clang&quot;</span>\n\n # C++ compiler to be used to compiler C++ code (e.g. LLVM and our LLVM shims).\n # This is only used for host targets.\n<span class=\"gd\">-#cxx = &quot;c++&quot;</span>\n<span class=\"gi\">+# cxx = &quot;clang++&quot;</span>\n\n # Archiver to be used to assemble static libraries compiled from C/C++ code.\n # Note: an absolute path should be used, otherwise LLVM build will break.\n<span class=\"gd\">-#ar = &quot;ar&quot;</span>\n<span class=\"gi\">+# ar = &quot;llvm-ar&quot;</span>\n\n # Ranlib to be used to assemble static libraries compiled from C/C++ code.\n # Note: an absolute path should be used, otherwise LLVM build will break.\n<span class=\"gd\">-#ranlib = &quot;ranlib&quot;</span>\n<span class=\"gi\">+# ranlib = &quot;llvm-ranlib&quot;</span>\n\n # Linker to be used to link Rust code. Note that the\n # default value is platform specific, and if not specified it may also depend on\n # what platform is crossing to what platform.\n<span class=\"gd\">-#linker = &quot;cc&quot;</span>\n<span class=\"gi\">+# linker = &quot;clang -fuse-ld=lld&quot;</span>\n\n # Path to the `llvm-config` binary of the installation of a custom LLVM to link\n # against. Note that if this is specified we don&#39;t compile LLVM at all for this\n<span class=\"gu\">@@ -501,7 +481,3 @@</span>\n # as the one built on Windows will contain backslashes in paths causing problems\n # on linux\n #src-tarball = true\n<span class=\"gd\">-#</span>\n<span class=\"gd\">-</span>\n<span class=\"gd\">-# Whether to allow failures when building tools</span>\n<span class=\"gd\">-#missing-tools = false</span>\n</pre></div>",
        "id": 136602328,
        "sender_full_name": "nagisa",
        "timestamp": 1540637724
    },
    {
        "content": "<p><a href=\"https://gist.github.com/davidtwco/87af94434a64fee06a81a7c4a33f3808\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/87af94434a64fee06a81a7c4a33f3808\">My diff in a gist</a> - definitely less changed.</p>",
        "id": 136602380,
        "sender_full_name": "davidtwco",
        "timestamp": 1540637826
    },
    {
        "content": "<p>Well, this time I didn’t forget to update my submodules...</p>\n<div class=\"codehilite\"><pre><span></span>    [ui] ui/coherence/coherence-inherited-assoc-ty-cycle-err.rs\n    [ui] ui/consts/const-size_of-cycle.rs\n    [ui] ui/cycle-projection-based-on-where-clause.rs\n    [ui] ui/cycle-trait/cycle-trait-default-type-trait.rs\n    [ui] ui/cycle-trait/cycle-trait-supertrait-indirect.rs\n    [ui] ui/existential_types/no_inferrable_concrete_type.rs\n    [ui] ui/impl-trait/auto-trait-leak.rs\n    [ui] ui/infinite/infinite-tag-type-recursion.rs\n    [ui] ui/infinite/infinite-vec-type-recursion.rs\n    [ui] ui/issues/issue-12511.rs\n    [ui] ui/issues/issue-17252.rs\n    [ui] ui/issues/issue-20772.rs\n    [ui] ui/issues/issue-21177.rs\n    [ui] ui/issues/issue-23302-1.rs\n    [ui] ui/issues/issue-23302-2.rs\n    [ui] ui/issues/issue-23302-3.rs\n    [ui] ui/issues/issue-26548.rs\n    [ui] ui/issues/issue-32326.rs\n    [ui] ui/issues/issue-34373.rs\n    [ui] ui/issues/issue-36163.rs\n    [ui] ui/issues/issue-44415.rs\n    [ui] ui/recursion/recursive-static-definition.rs\n    [ui] ui/resolve/issue-23305.rs\n    [ui] ui/resolve/resolve-self-in-impl.rs\n    [ui] ui/span/recursive-type-field.rs\n    [ui] ui/variance/variance-regions-unused-indirect.rs\n</pre></div>",
        "id": 136602902,
        "sender_full_name": "nagisa",
        "timestamp": 1540638785
    },
    {
        "content": "<p>Still quite a few failures though</p>",
        "id": 136602906,
        "sender_full_name": "nagisa",
        "timestamp": 1540638794
    }
]