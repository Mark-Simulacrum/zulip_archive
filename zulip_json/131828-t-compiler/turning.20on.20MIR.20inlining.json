[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, per our conversation on Discord, I've been trying to resurrect PR <a href=\"https://github.com/rust-lang/rust/issues/48602\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/48602\">#48602</a>. It looks to me like <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> was trying to get the code to build \"enough\" to get a perf run and see what the potential performance improvements might be. I've worked around a few more issues but I'm still getting ICEs when trying to build rustdoc.</p>\n<p>Should I keep trying to just get a build out so we can measure the performance or should I try a more principled approach and try to actually fix the bugs rather than work around them? </p>\n<p>Also, what's the best way to troubleshoot a broken stage2 compiler that ICEs? The stage1 compiler seems to work fine and can build rustdoc but the stage2 compiler ICEs when building it.</p>",
        "id": 135549284,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539185593
    },
    {
        "content": "<p>I'd be inclined to fix the bugs first ;)</p>",
        "id": 135549304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539185621
    },
    {
        "content": "<p>though stage2 only bugs are definitely the worst kind</p>",
        "id": 135549317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539185639
    },
    {
        "content": "<p>what is the ICE? I don't really know a \"magic bullet\" to troubleshoot beyond trying to track down where it is failing; a stage2 error however could be the result of the stage1 compiler miscompiling the compiler itself, so the point where it fails might not itself be broken per se (e.g., maybe it is generating bad code due to inlining)</p>",
        "id": 135549416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539185705
    },
    {
        "content": "<p>given that hypothesis, one way to track down where the problem is would be to build on the \"optimization fuel\" stuff we have</p>",
        "id": 135549432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539185724
    },
    {
        "content": "<p>basically it would let you perform only the first N inlining attempts</p>",
        "id": 135549443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539185731
    },
    {
        "content": "<p>you can then bisect around with N to try and find <em>which</em> inlining goes wrong</p>",
        "id": 135549451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539185743
    },
    {
        "content": "<p>Uh, I don't have it handy unfortunately but it's a generic \"you called .unwrap() on a None\" type error.</p>",
        "id": 135549508,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539185793
    },
    {
        "content": "<p>I think I remember the call site... let me see if I can find it</p>",
        "id": 135549515,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539185805
    },
    {
        "content": "<p>sounds like the backtrace could be handy</p>",
        "id": 135549610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539185908
    },
    {
        "content": "<p>Hmm. I can't seem to find it offhand.</p>\n<p>I'll post it tonight when I get back to my pc</p>",
        "id": 135549853,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539186154
    },
    {
        "content": "<p>I <em>think</em> there's invalid inlining happening.</p>",
        "id": 135549911,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539186186
    },
    {
        "content": "<p>I worked around another ICE by adding a <code>#[inline(never)]</code> to a trait method with a default body.</p>",
        "id": 135549935,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539186216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> well that does give a pretty good clue then as to where the bugs are ;)</p>",
        "id": 135550051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186311
    },
    {
        "content": "<p>maybe worth trying to fix that one that you worked around first</p>",
        "id": 135550054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186316
    },
    {
        "content": "<p>in hopes that there is one underlying bug</p>",
        "id": 135550061,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186320
    },
    {
        "content": "<p>I guess I can dump the MIR by manually invoking the compiler for the appropriate crate and then passing <code>-Z dump-mir=</code> or whatever?</p>",
        "id": 135550167,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539186407
    },
    {
        "content": "<p>To validate that it is a bad optimization</p>",
        "id": 135550179,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539186426
    },
    {
        "content": "<p>yes, you can do that</p>",
        "id": 135550414,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186685
    },
    {
        "content": "<p>it is kind of a pain to invoke the compiler during the bootstrap cycle sometimes</p>",
        "id": 135550421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186697
    },
    {
        "content": "<p>due to the extensive (and, to me, irritating) use of env vars</p>",
        "id": 135550427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186704
    },
    {
        "content": "<p>I usually do <code>x.py build -vv</code></p>",
        "id": 135550473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186738
    },
    {
        "content": "<p>right before the failing compile there is something like <code>rustc command: ...</code> followed by a <strong>super long</strong> line</p>",
        "id": 135550485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186752
    },
    {
        "content": "<p>sometimes when you copy-and-paste that and run it from the <code>src</code> directory, it works</p>",
        "id": 135550492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186763
    },
    {
        "content": "<p>other times...it doesn't</p>",
        "id": 135550494,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186765
    },
    {
        "content": "<p>if there's a better way, I'd like to know it :)</p>",
        "id": 135550502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186775
    },
    {
        "content": "<p>but you can use <code>RUSTFLAGS=-Zdump-mir=...</code> etc and run <code>x.py</code>, too</p>",
        "id": 135550512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539186786
    },
    {
        "content": "<p>Ah, interesting. I always forget about that. Thanks!</p>",
        "id": 135550534,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539186835
    },
    {
        "content": "<p>I guess if it's the issue I think is, I could probably just write a test that repro's the issue.</p>",
        "id": 135550589,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539186858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> The stack trace is:</p>\n<div class=\"codehilite\"><pre><span></span>Copying stage2 rustc from stage1 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding rustdoc for stage2 (x86_64-unknown-linux-gnu)\n   Compiling libc v0.2.36\nthread &#39;rustc&#39; panicked at &#39;called `Option::unwrap()` on a `None` value&#39;, libcore/option.rs:335:21\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nstack backtrace:\n   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace\n             at libstd/sys/unix/backtrace/tracing/gcc_s.rs:49\n   1: std::sys_common::backtrace::print\n             at libstd/sys_common/backtrace.rs:71\n             at libstd/sys_common/backtrace.rs:59\n   2: std::panicking::default_hook::{{closure}}\n             at libstd/panicking.rs:206\n   3: std::panicking::default_hook\n             at libstd/panicking.rs:222\n   4: core::ops::function::Fn::call\n             at librustc/util/common.rs:50\n             at /home/wesley/code/rust/rust/src/libcore/ops/function.rs:73\n   5: std::panicking::rust_panic_with_hook\n             at libstd/panicking.rs:401\n   6: std::panicking::begin_panic_fmt\n             at libstd/panicking.rs:347\n   7: rust_begin_unwind\n             at libstd/panicking.rs:323\n   8: core::panicking::panic_fmt\n             at libcore/panicking.rs:71\n   9: core::panicking::panic\n             at libcore/panicking.rs:51\n  10: syntax::ext::expand::MacroExpander::expand\n             at /home/wesley/code/rust/rust/src/libcore/macros.rs:20\n             at libsyntax/ext/expand.rs:307\n  11: syntax::ext::expand::MacroExpander::expand_crate\n             at libsyntax/ext/expand.rs:245\n  12: rustc_driver::driver::phase_2_configure_and_expand_inner::{{closure}}\n             at librustc_driver/driver.rs:795\n  13: rustc::util::common::time\n             at /home/wesley/code/rust/rust/src/librustc/util/common.rs:141\n  14: rustc_driver::driver::phase_2_configure_and_expand\n             at librustc_driver/driver.rs:754\n             at librustc_driver/driver.rs:606\n  15: rustc_driver::driver::compile_input\n             at librustc_driver/driver.rs:129\n  16: rustc_driver::run_compiler\n             at librustc_driver/lib.rs:508\n\nerror: internal compiler error: unexpected panic\n</pre></div>",
        "id": 135575579,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539215315
    },
    {
        "content": "<p>There's definitely misoptimization going on. The following program prints <code>1</code> instead of <code>2</code> with MIR inlining turned on</p>\n<div class=\"codehilite\"><pre><span></span>fn main() {\n    println!(&quot;{}&quot;, test(&amp;()));\n}\n\nfn test(x: &amp;X) -&gt; u32 {\n    x.y()\n}\n\ntrait X {\n    fn y(&amp;self) -&gt; u32 {\n        1\n    }\n}\n\nimpl X for () {\n    fn y(&amp;self) -&gt; u32 {\n        2\n    }\n}\n</pre></div>\n\n\n<p>I'm working on a fix for that.</p>",
        "id": 135584105,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539229640
    },
    {
        "content": "<p>I do not remember being very pleased with the current state that our inliner is, even if I didn’t considered it to be buggy. It feels more like a PoC to me.</p>",
        "id": 135607589,
        "sender_full_name": "nagisa",
        "timestamp": 1539264221
    },
    {
        "content": "<p>Just to give a small status update: I'm still working on this. I pushed a fix for the virtual call inlining issue (<a href=\"https://github.com/rust-lang/rust/issues/55046\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55046\">#55046</a>) which has been merged. I'm now investigating another miscompilation which results in a very confounding backtrace:</p>\n<div class=\"codehilite\"><pre><span></span>[continues for another 209539 stack frames]\n#209540 0x0000555555563236 in core::ptr::&lt;impl core::cmp::PartialOrd for *const T&gt;::partial_cmp ()\n#209541 0x00005555555631a7 in core::ptr::&lt;impl core::cmp::Ord for *const T&gt;::cmp ()\n#209542 0x0000555555563236 in core::ptr::&lt;impl core::cmp::PartialOrd for *const T&gt;::partial_cmp ()\n#209543 0x00005555555631a7 in core::ptr::&lt;impl core::cmp::Ord for *const T&gt;::cmp ()\n#209544 0x0000555555563236 in core::ptr::&lt;impl core::cmp::PartialOrd for *const T&gt;::partial_cmp ()\n#209545 0x00005555555631a7 in core::ptr::&lt;impl core::cmp::Ord for *const T&gt;::cmp ()\n#209546 0x0000555555564b4b in &lt;[A] as core::slice::SliceOrd&lt;A&gt;&gt;::compare ()\n#209547 0x0000555555564a26 in core::slice::&lt;impl core::cmp::Ord for [T]&gt;::cmp ()\n#209548 0x00005555555620be in core::array::&lt;impl core::cmp::Ord for [T; &lt;unevaluated[]&gt;]&gt;::cmp ()\n#209549 0x0000555555561624 in raw_fat_ptr::main::{{closure}} ()\n#209550 0x000055555556051d in alloc::slice::&lt;impl [T]&gt;::sort_by::{{closure}} ()\n#209551 0x0000555555560028 in alloc::slice::insert_head ()\n#209552 0x000055555555f0dd in alloc::slice::merge_sort ()\n#209553 0x00005555555615b1 in raw_fat_ptr::main ()\n#209554 0x0000555555562123 in std::rt::lang_start::{{closure}} ()\n#209555 0x0000555555566168 in std::rt::lang_start_internal::{{closure}} () at libstd/rt.rs:59\n#209556 std::panicking::try::do_call (data=0x7fffffffdd48 &quot;\\240\\335\\377\\377\\377\\177\\000&quot;) at libstd/panicking.rs:305\n#209557 0x000055555557b59f in __rust_maybe_catch_panic (f=0x0, data=0x7fffffffd758 &quot;\\207\\334\\377\\377\\377\\177\\000&quot;, data_ptr=0x7fffffffdd58, vtable_ptr=0x7fffffffdd50) at libpanic_unwind/lib.rs:102\n#209558 0x000055555556605a in std::panicking::try (f=...) at libstd/panicking.rs:284\n#209559 0x000055555556efc0 in std::rt::lang_start_internal (main=..., argc=1, argv=0x7fffffffdf48) at libstd/panic.rs:361\n#209560 0x0000555555562107 in std::rt::lang_start ()\n#209561 0x000055555556165e in main ()\n</pre></div>",
        "id": 135909736,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539705701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> nice work on <a href=\"https://github.com/rust-lang/rust/issues/55046\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55046\">#55046</a>!</p>",
        "id": 135911481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539707406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Thanks!</p>",
        "id": 135912702,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539708605
    },
    {
        "content": "<p>BTW, are you going to be at RBR this week?</p>",
        "id": 135912716,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539708614
    },
    {
        "content": "<p>yes</p>",
        "id": 135912758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539708672
    },
    {
        "content": "<p>I arrive Thu night</p>",
        "id": 135912761,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539708676
    },
    {
        "content": "<p>Cool! Looking forward to meeting you :)</p>",
        "id": 135912796,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539708721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> might be worth also fixing <a href=\"https://github.com/rust-lang/rust/issues/50411\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/50411\">https://github.com/rust-lang/rust/issues/50411</a> before enabling more MIR optimziations per default</p>",
        "id": 135961318,
        "sender_full_name": "RalfJ",
        "timestamp": 1539769841
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/issues/52691\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52691\">https://github.com/rust-lang/rust/issues/52691</a> might also still be around</p>",
        "id": 135961324,
        "sender_full_name": "RalfJ",
        "timestamp": 1539769858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> Good idea! I'll definitely take a look into that. Right now I'm just trying to the compiler unbroken enough to see what the potential performance differences might be. I'm sure there's a lot of issues to solve before we can turn it on everywhere by default.</p>",
        "id": 135975239,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1539785687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> okay. :)  Great to see someone push this! miri has been sitting on these bugs since about forever.</p>",
        "id": 135975578,
        "sender_full_name": "RalfJ",
        "timestamp": 1539786022
    },
    {
        "content": "<p>Status update: Still working on this :) Since the last update, I implemented optimization fuel for the inliner (<a href=\"https://github.com/rust-lang/rust/issues/55739\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55739\">#55739</a> thanks for the idea <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>!), fixed the optimization fuel code so it doesn't break Rustbuild (<a href=\"https://github.com/rust-lang/rust/issues/55495\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55495\">#55495</a> thanks <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> for the assist with the test suite!), and found the other place we were inlining virtual function calls (<a href=\"https://github.com/rust-lang/rust/issues/55802\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55802\">#55802</a>). </p>\n<p>At this point, with a small patch to always run the MIR inliner, the compiler will bootstrap successfully to stage 2 but there's quite a few test failures. <br>\nIn just the <code>run-pass</code> suite there are these failures:</p>\n<div class=\"codehilite\"><pre><span></span>    [run-pass] run-pass/associated-consts/associated-const-cross-crate-defaults.rs\n    [run-pass] run-pass/associated-consts/associated-const-use-default.rs\n    [run-pass] run-pass/backtrace-debuginfo.rs\n    [run-pass] run-pass/cross-crate/xcrate_generic_fn_nested_return.rs\n    [run-pass] run-pass/debuginfo-lto.rs\n    [run-pass] run-pass/fat-lto.rs\n    [run-pass] run-pass/generator/smoke.rs\n    [run-pass] run-pass/issues/issue-11205.rs\n    [run-pass] run-pass/lto-many-codegen-units.rs\n    [run-pass] run-pass/lto-still-runs-thread-dtors.rs\n    [run-pass] run-pass/optimization-fuel-0.rs\n    [run-pass] run-pass/optimization-fuel-1.rs\n    [run-pass] run-pass/panic-runtime/lto-abort.rs\n    [run-pass] run-pass/panic-runtime/lto-unwind.rs\n    [run-pass] run-pass/rfcs/rfc-2005-default-binding-mode/constref.rs\n    [run-pass] run-pass/sepcomp/sepcomp-lib-lto.rs\n    [run-pass] run-pass/stack-probes-lto.rs\n    [run-pass] run-pass/ufcs-polymorphic-paths.rs\n</pre></div>\n\n\n<p>I'm currently trying to track down the next optimization issue (perhaps something to do with LTO?) by disabling inlining for a specific crate using the fuel flag (<code>RUSTFLAGS=\"-Z fuel={lib}=0\" ./x.py test --stage 1</code>) but so far I've been unable to find the issue. </p>\n<p>If anyone has any ideas, please feel free to leave a comment! Otherwise, I'll continue my search through the <code>rustc</code> crates looking for the culprit.</p>",
        "id": 147623365,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1542141339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> wow, nice</p>",
        "id": 147628572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146309
    },
    {
        "content": "<p>which test are you trying to fix?</p>",
        "id": 147628583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146321
    },
    {
        "content": "<p>those are all... interesting tests, they're the \"scary ones\" from my POV :)</p>",
        "id": 147628588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146330
    },
    {
        "content": "<p>scary ones being cross-crate etc</p>",
        "id": 147628622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146354
    },
    {
        "content": "<p>maybe run-pass/ufcs-polymorphic-paths.rs is not so bad</p>",
        "id": 147628626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146357
    },
    {
        "content": "<p>that's probably the one I would start with...</p>",
        "id": 147628653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542146392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Any of them <span class=\"emoji emoji-263a\" title=\"smile\">:smile:</span> I've tried turning fuel off for a bunch of different crates but the same tests keep failing. (I've been tracking some notes here <a href=\"https://github.com/wesleywiser/rust/issues/2\" target=\"_blank\" title=\"https://github.com/wesleywiser/rust/issues/2\">https://github.com/wesleywiser/rust/issues/2</a>)</p>",
        "id": 147629707,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1542147520
    }
]