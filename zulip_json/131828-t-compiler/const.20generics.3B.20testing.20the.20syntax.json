[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218608\">@yodal</span>  you could try some tests for the syntax alone using <code>macro_rules!</code></p>",
        "id": 163582578,
        "sender_full_name": "centril",
        "timestamp": 1555522171
    },
    {
        "content": "<p>i.e. make sure that it works syntactically but don't check semantics</p>",
        "id": 163582665,
        "sender_full_name": "centril",
        "timestamp": 1555522205
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218608\">@yodal</span>: do you remember how many of the tests you got passing on the main PR?<br>\nwas it all but one?</p>",
        "id": 163582730,
        "sender_full_name": "varkor",
        "timestamp": 1555522245
    },
    {
        "content": "<p>yes, all but one</p>",
        "id": 163582770,
        "sender_full_name": "yodal",
        "timestamp": 1555522267
    },
    {
        "content": "<p>e.g. <code>macro_rules! accept_item { ($i:item) =&gt; {} }</code> and then use <code>accept_item! { struct A&lt;const N: usize&gt;(); }</code></p>",
        "id": 163582783,
        "sender_full_name": "centril",
        "timestamp": 1555522272
    },
    {
        "content": "<p>also when writing tests, be sure to have some \"combinatorial\" aspects of them</p>",
        "id": 163582832,
        "sender_full_name": "centril",
        "timestamp": 1555522306
    },
    {
        "content": "<p>it has been a while since I last touched const generics so I don't remember what exactly was halting that one test, but I think it was something about normalization</p>",
        "id": 163582904,
        "sender_full_name": "yodal",
        "timestamp": 1555522332
    },
    {
        "content": "<p>The <code>macro_rules!</code> idea is definitely a good one. Being able to test the syntax alone has been difficult</p>",
        "id": 163583091,
        "sender_full_name": "yodal",
        "timestamp": 1555522449
    },
    {
        "content": "<p>It's something that is often forgotten: our syntax has stability independently of semantics (e.g. if semantic analysis produces an error, the syntax can still be valid and a matter of semver) due to macros.</p>",
        "id": 163583222,
        "sender_full_name": "centril",
        "timestamp": 1555522560
    },
    {
        "content": "<p><code>#[cfg(FALSE)]</code> is also a great way to test syntax alone.</p>",
        "id": 163595268,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1555530686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>  oh; clever!</p>",
        "id": 163599466,
        "sender_full_name": "centril",
        "timestamp": 1555534089
    }
]