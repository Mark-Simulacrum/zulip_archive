[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>  <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>  -- I thought I'd make a Zulip thread for the work</p>",
        "id": 178470613,
        "sender_full_name": "centril",
        "timestamp": 1571403424
    },
    {
        "content": "<p>Awesome</p>",
        "id": 178472168,
        "sender_full_name": "dlrobertson",
        "timestamp": 1571404503
    },
    {
        "content": "<p>I'm a little stuck on generating the correct slice or vector of <code>Candidate</code>s</p>",
        "id": 178472212,
        "sender_full_name": "dlrobertson",
        "timestamp": 1571404544
    },
    {
        "content": "<p>The problem boils down to the fact that the current algorithm assumes the number of patterns/match pairs is not growable, but we're obviously changing that</p>",
        "id": 178472379,
        "sender_full_name": "dlrobertson",
        "timestamp": 1571404626
    },
    {
        "content": "<p>The case <code>&lt;pat&gt;(&lt;pat&gt; | &lt;pat&gt;)</code> is super simple and is very easy to get working</p>",
        "id": 178473416,
        "sender_full_name": "dlrobertson",
        "timestamp": 1571405268
    },
    {
        "content": "<p>But when you have multiple match pairs that are or-patterns that's when things get way more complicated</p>",
        "id": 178473495,
        "sender_full_name": "dlrobertson",
        "timestamp": 1571405308
    },
    {
        "content": "<p>In every implementation I've tried so far I either don't generate the correct test or don't clear the candidates match pairs correctly, so I hit an assertion later</p>",
        "id": 178473589,
        "sender_full_name": "dlrobertson",
        "timestamp": 1571405385
    },
    {
        "content": "<p>Thoughts and feedback would be super helpful</p>",
        "id": 178473663,
        "sender_full_name": "dlrobertson",
        "timestamp": 1571405408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> Is there perhaps a more targeted PR that we can land first for the easy subset that doesn't create roadblocks for the more advanced case?</p>",
        "id": 178473686,
        "sender_full_name": "centril",
        "timestamp": 1571405426
    },
    {
        "content": "<p>Might be good purely for testing purposes</p>",
        "id": 178473706,
        "sender_full_name": "centril",
        "timestamp": 1571405441
    },
    {
        "content": "<p>Maybe the single or pattern?</p>",
        "id": 178473725,
        "sender_full_name": "dlrobertson",
        "timestamp": 1571405455
    },
    {
        "content": "<p>Yeah that's what I'm thinking</p>",
        "id": 178473746,
        "sender_full_name": "centril",
        "timestamp": 1571405471
    },
    {
        "content": "<p>E.g. <code>Foo(1 | 2, 3 | 4)</code>  throws a bug</p>",
        "id": 178473791,
        "sender_full_name": "dlrobertson",
        "timestamp": 1571405511
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 178473866,
        "sender_full_name": "centril",
        "timestamp": 1571405555
    },
    {
        "content": "<p>I can post an update to the PR that implements this in a Jacky manner and then maybe <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> or <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> will spot the reason why multiple or patterns fail</p>",
        "id": 178473941,
        "sender_full_name": "dlrobertson",
        "timestamp": 1571405631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> you could also file a smaller extraction-PR for the subset</p>",
        "id": 178474024,
        "sender_full_name": "centril",
        "timestamp": 1571405671
    },
    {
        "content": "<p>(I find that easier so I don't lose my original work)</p>",
        "id": 178474048,
        "sender_full_name": "centril",
        "timestamp": 1571405690
    },
    {
        "content": "<p>cc also <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 178474238,
        "sender_full_name": "centril",
        "timestamp": 1571405812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> been working on an update today... I'll post a PR shortly</p>",
        "id": 179190865,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572217162
    },
    {
        "content": "<p>Nice!</p>",
        "id": 179190867,
        "sender_full_name": "centril",
        "timestamp": 1572217171
    },
    {
        "content": "<p>Most everything is passing locally at the moment</p>",
        "id": 179190871,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572217185
    },
    {
        "content": "<p>I'm sure there are holes in it and it is <em>super</em> hacky</p>",
        "id": 179190948,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572217210
    },
    {
        "content": "<p>Glad to see progress nonetheless; soon we'll be able to announce to the world that they should try the implementation out</p>",
        "id": 179190965,
        "sender_full_name": "centril",
        "timestamp": 1572217243
    },
    {
        "content": "<p>as long as all bugs are attributed to work you did <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 179191034,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572217342
    },
    {
        "content": "<p>=P</p>",
        "id": 179191038,
        "sender_full_name": "centril",
        "timestamp": 1572217358
    },
    {
        "content": "<p>jk if anything the errors will surface in the lowering</p>",
        "id": 179191039,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572217361
    },
    {
        "content": "<p>I was curious how rustfmt works with the or-pattern?</p>",
        "id": 179191047,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572217383
    },
    {
        "content": "<p>I'd be very happy if bugs are found and reported; test cases for free! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 179191049,
        "sender_full_name": "centril",
        "timestamp": 1572217394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> no idea if it is implemented or not</p>",
        "id": 179191054,
        "sender_full_name": "centril",
        "timestamp": 1572217416
    },
    {
        "content": "<p>but it should probably be since we made AST level changes</p>",
        "id": 179191057,
        "sender_full_name": "centril",
        "timestamp": 1572217429
    },
    {
        "content": "<p>I know they have special rules for <code>|</code> at the end vs at the beginning</p>",
        "id": 179191059,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572217440
    },
    {
        "content": "<p>yeah I'd think it would _just work_ but</p>",
        "id": 179191100,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572217452
    },
    {
        "content": "<p>was curious</p>",
        "id": 179191101,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572217454
    },
    {
        "content": "<p>Seems like it is implemented:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">VeryLongThing</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">JesusHowLongThisIs</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">IMeanHaveYouSeenSomethingSoLong</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">AndItGetsEvenLonger</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179191166,
        "sender_full_name": "centril",
        "timestamp": 1572217575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> looks reasonable</p>",
        "id": 179191184,
        "sender_full_name": "centril",
        "timestamp": 1572217625
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> nice!</p>",
        "id": 179191185,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572217631
    },
    {
        "content": "<p>:/ need to do a rebase on upstream... will be a sec to rebuild and test</p>",
        "id": 179193652,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572222519
    },
    {
        "content": "<p>if I don't push the changes up tonight, I'll push them tomorrow</p>",
        "id": 179193657,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572222531
    },
    {
        "content": "<p>pushed the changes... its definitely still in the phase where it is largely a hack and less of a feature</p>",
        "id": 179198327,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572230736
    },
    {
        "content": "<p>did quite a bit of testing and a lot seems to work out of the box</p>",
        "id": 179198333,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572230756
    },
    {
        "content": "<p>largely due to the move from manually building the CFG -&gt; using the Candidate</p>",
        "id": 179198376,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572230773
    },
    {
        "content": "<p>but <code>@</code> currently causes an ICE and unreachability checks trigger some false warnings</p>",
        "id": 179198404,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572230882
    },
    {
        "content": "<p>I'm sure I'll find more as I go</p>",
        "id": 179198428,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572230894
    },
    {
        "content": "<p>Hopefully <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> will pitch in at some point <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 179198489,
        "sender_full_name": "centril",
        "timestamp": 1572231032
    },
    {
        "content": "<p>I'll have a look at this at the weekend. I'll need to experiment a bit to work out what the final version of the code should look like.</p>",
        "id": 179271543,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572294076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143663\">@dlrobertson</span> I've pulled your branch and experimented with it locally a bit. There seem to be some ICEs and unexpected errors from match checking which I don't know how to fix, I guess <span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> will be fixing them.</p>",
        "id": 179722216,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572734804
    },
    {
        "content": "<p>Depends on what the ICE is I guess?</p>",
        "id": 179722396,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572735157
    },
    {
        "content": "<p>I did hit ICEs when using <code>@</code></p>",
        "id": 179722403,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572735193
    },
    {
        "content": "<p>What were you hitting an ICE with?</p>",
        "id": 179722405,
        "sender_full_name": "dlrobertson",
        "timestamp": 1572735210
    },
    {
        "content": "<p>This assert is firing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">matches</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1215</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">rows</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">all</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">r</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()));</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>test code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,),);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">((</span><span class=\"n\">y</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,),)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179722451,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572735267
    },
    {
        "content": "<p>I've left a comment trying to explain what I was expecting the lowering code to look like.</p>",
        "id": 179722522,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572735403
    },
    {
        "content": "<p>Hello ! I've been working on the exhaustiveness side, and the basic impl is reasonably straightforward. However the tests I write trigger ICEs <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> . Example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">X</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR unreachable pattern</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I made sure there would be an error so that we don't get into code generation, but rustc does try to go further and hits me with \"simplifyable pattern found\".  Any idea how I could work around this ?</p>",
        "id": 181326902,
        "sender_full_name": "Nadrieril",
        "timestamp": 1574357185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> maybe insert something else below that would fail in match checking</p>",
        "id": 181327472,
        "sender_full_name": "centril",
        "timestamp": 1574357540
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"kt\">u8</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 181327481,
        "sender_full_name": "centril",
        "timestamp": 1574357552
    },
    {
        "content": "<p>hopefully this should allow you to write the tests exercising match checking but avoid reaching the borrow checker</p>",
        "id": 181327534,
        "sender_full_name": "centril",
        "timestamp": 1574357586
    },
    {
        "content": "<p>hmm; that doesn't seem to work... <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ad7f9b5d67afd59c24aa395ceda01fbd\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ad7f9b5d67afd59c24aa395ceda01fbd\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=ad7f9b5d67afd59c24aa395ceda01fbd</a></p>",
        "id": 181327699,
        "sender_full_name": "centril",
        "timestamp": 1574357693
    },
    {
        "content": "<p>maybe try inserting a fatal error in MIR building on encountering <code>PatKind::Or(...)</code> which isn't at the top level</p>",
        "id": 181327758,
        "sender_full_name": "centril",
        "timestamp": 1574357726
    },
    {
        "content": "<p>that way it won't ICE</p>",
        "id": 181327767,
        "sender_full_name": "centril",
        "timestamp": 1574357732
    },
    {
        "content": "<p>I believe you should also be able to have ICEs in tests if you prefer that strategy</p>",
        "id": 181327785,
        "sender_full_name": "centril",
        "timestamp": 1574357758
    },
    {
        "content": "<p>Oh indeed, I discovered <code>should-ice</code>, thanks !</p>",
        "id": 181571083,
        "sender_full_name": "Nadrieril",
        "timestamp": 1574361558
    },
    {
        "content": "<p>np; it was added pretty recently ^^</p>",
        "id": 181571298,
        "sender_full_name": "centril",
        "timestamp": 1574361717
    },
    {
        "content": "<p>Got <a href=\"https://github.com/rust-lang/rust/pull/66612\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66612\">https://github.com/rust-lang/rust/pull/66612</a> up ! It does almost everything I believe, there's just some more work to do to clean up the current ad-hocery used for top-level or-patterns</p>",
        "id": 181573483,
        "sender_full_name": "Nadrieril",
        "timestamp": 1574363158
    },
    {
        "content": "<p>that was quick :D</p>",
        "id": 181573613,
        "sender_full_name": "centril",
        "timestamp": 1574363272
    },
    {
        "content": "<p>I had been thinking about it for a while when writing my other PRs ^^</p>",
        "id": 181598525,
        "sender_full_name": "Nadrieril",
        "timestamp": 1574381561
    },
    {
        "content": "<p>hehe; left some review comments for you</p>",
        "id": 181600132,
        "sender_full_name": "centril",
        "timestamp": 1574383235
    },
    {
        "content": "<p>nice work</p>",
        "id": 181600133,
        "sender_full_name": "centril",
        "timestamp": 1574383237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> What is <code>abort_if_errors</code> that you mentioned in you PR comment ?</p>",
        "id": 181879982,
        "sender_full_name": "Nadrieril",
        "timestamp": 1574729629
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/session/struct.Session.html#method.abort_if_errors\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/session/struct.Session.html#method.abort_if_errors\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/session/struct.Session.html#method.abort_if_errors</a></p>",
        "id": 181880033,
        "sender_full_name": "centril",
        "timestamp": 1574729651
    },
    {
        "content": "<p>it aborts compilation, basically</p>",
        "id": 181880038,
        "sender_full_name": "centril",
        "timestamp": 1574729659
    },
    {
        "content": "<p>could use <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.FatalError.html#method.raise\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.FatalError.html#method.raise\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_errors/struct.FatalError.html#method.raise</a> also I think</p>",
        "id": 181880079,
        "sender_full_name": "centril",
        "timestamp": 1574729706
    },
    {
        "content": "<p>using <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/session/struct.Session.html#method.span_fatal\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/session/struct.Session.html#method.span_fatal\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/session/struct.Session.html#method.span_fatal</a> is probably most apprioriate as it has <code>-&gt; !</code></p>",
        "id": 181880192,
        "sender_full_name": "centril",
        "timestamp": 1574729787
    },
    {
        "content": "<p>I see, thanks</p>",
        "id": 181880970,
        "sender_full_name": "Nadrieril",
        "timestamp": 1574730557
    }
]