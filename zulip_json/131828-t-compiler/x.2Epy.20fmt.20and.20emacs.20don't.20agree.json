[
    {
        "content": "<p>So, I have my rust-mode in emacs setup to rustfmt-on-save. I have no real idea what this is invoking, but it doesn't seem to agree with what <code>x.py fmt</code> does. I often get errors like this:</p>\n<div class=\"codehilite\"><pre><span></span>Diff in /home/nmatsakis/versioned/rust-3/src/librustc_span/lib.rs at line 403:\n     pub fn source_callee(self) -&gt; Option&lt;ExpnData&gt; {\n         fn source_callee(expn_data: ExpnData) -&gt; ExpnData {\n             let next_expn_data = expn_data.call_site.ctxt().outer_expn_data();\n<span class=\"gd\">-            if !next_expn_data.is_root() {</span>\n<span class=\"gd\">-                source_callee(next_expn_data)</span>\n<span class=\"gd\">-            } else {</span>\n<span class=\"gd\">-                expn_data</span>\n<span class=\"gd\">-            }</span>\n<span class=\"gi\">+            if !next_expn_data.is_root() { source_callee(next_expn_data) } else { expn_data }</span>\n         }\n         let expn_data = self.ctxt().outer_expn_data();\n<span class=\"gd\">-        if !expn_data.is_root() {</span>\n<span class=\"gd\">-            Some(source_callee(expn_data))</span>\n<span class=\"gd\">-        } else {</span>\n<span class=\"gd\">-            None</span>\n<span class=\"gd\">-        }</span>\n<span class=\"gi\">+        if !expn_data.is_root() { Some(source_callee(expn_data)) } else { None }</span>\n     }\n\n     /// Checks if a span is &quot;internal&quot; to a macro in which `#[unstable]`\nDiff in /home/nmatsakis/versioned/rust-3/src/librustc_span/lib.rs at line 1234:\n\n         let line_index = lookup_line(&amp;self.lines[..], pos);\n         assert!(line_index &lt; self.lines.len() as isize);\n<span class=\"gd\">-        if line_index &gt;= 0 {</span>\n<span class=\"gd\">-            Some(line_index as usize)</span>\n<span class=\"gd\">-        } else {</span>\n<span class=\"gd\">-            None</span>\n<span class=\"gd\">-        }</span>\n<span class=\"gi\">+        if line_index &gt;= 0 { Some(line_index as usize) } else { None }</span>\n     }\n</pre></div>\n\n\n<p>Could this maybe be a result of some custom settings in our repo?</p>",
        "id": 191151428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584640523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> possible, but somewhat unlikely -- it's more likely that emacs and x.py fmt are using different rustfmts</p>",
        "id": 191153201,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641214
    },
    {
        "content": "<p>do you know what emacs is using? I guess you said no</p>",
        "id": 191153216,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641222
    },
    {
        "content": "<p>how often does rustfmt change?</p>",
        "id": 191153228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641225
    },
    {
        "content": "<p>I mean I can figure it out but it's surprising to me</p>",
        "id": 191153242,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641232
    },
    {
        "content": "<p>once every 6 weeks, roughly</p>",
        "id": 191153266,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641236
    },
    {
        "content": "<p>(in tree)</p>",
        "id": 191153273,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641240
    },
    {
        "content": "<p>right now we're using rustfmt from nightly-2020-01-31</p>",
        "id": 191153309,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641259
    },
    {
        "content": "<p>that's how often we cut a new release</p>",
        "id": 191153317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641262
    },
    {
        "content": "<p>but I guess what I meant is how often it changes behavior</p>",
        "id": 191153393,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641288
    },
    {
        "content": "<p>right, yes, we try to bump the rustfmt we use from x.py fmt roughly at the same rate, though there's no real reason to do so</p>",
        "id": 191153408,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641293
    },
    {
        "content": "<p>I know this difference has persisted for a while, but it's entirely possible that I've not updated the rustfmt I'm using in all that time :)</p>",
        "id": 191153437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641303
    },
    {
        "content": "<p>I'll dig a bit deeper</p>",
        "id": 191153448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641308
    },
    {
        "content": "<p>in theory it shouldn't change behavior I think -- not sure -- maybe just bugfixes?</p>",
        "id": 191153472,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641321
    },
    {
        "content": "<p>to be honest I don't really know what rustfmt maintenance looks like these days</p>",
        "id": 191153511,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641339
    },
    {
        "content": "<p>(in terms of rate of change etc)</p>",
        "id": 191153528,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641348
    },
    {
        "content": "<p>OK, I <em>think</em> emacs is running <code>~/.cargo/bin/rustfmt</code></p>",
        "id": 191153688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641425
    },
    {
        "content": "<p>I can configure this</p>",
        "id": 191153697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641429
    },
    {
        "content": "<p>I probably want to write my own executable that will snoop and see if I'm in a rust directory...</p>",
        "id": 191153718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641442
    },
    {
        "content": "<p>I do let g:rustfmt_command = \"/Users/mark/Edit/rust/build/x86_64-apple-darwin/stage0/bin/rustfmt\"</p>",
        "id": 191153775,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641463
    },
    {
        "content": "<p>(for vim)</p>",
        "id": 191153779,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641467
    },
    {
        "content": "<p>that said, we do have a rustfmt.toml with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># Run rustfmt with this config (it should be picked up automatically).</span>\n<span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Two&quot;</span>\n<span class=\"n\">use_small_heuristics</span> <span class=\"o\">=</span> <span class=\"s\">&quot;Max&quot;</span>\n<span class=\"n\">merge_derives</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n</pre></div>",
        "id": 191153786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641471
    },
    {
        "content": "<p>rustfmt should auto-read that, independent of which rustfmt runs, afaik</p>",
        "id": 191153815,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641489
    },
    {
        "content": "<p>(and from where etc)</p>",
        "id": 191153836,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/x.2Epy.20fmt.20and.20emacs.20don't.20agree/near/191153775\" title=\"#narrow/stream/131828-t-compiler/topic/x.2Epy.20fmt.20and.20emacs.20don't.20agree/near/191153775\">said</a>:</p>\n<blockquote>\n<p>I do let g:rustfmt_command = \"/Users/mark/Edit/rust/build/x86_64-apple-darwin/stage0/bin/rustfmt\"</p>\n</blockquote>\n<p>I have many directories</p>",
        "id": 191153865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641511
    },
    {
        "content": "<p>so I wouldn't want to hard-code a path</p>",
        "id": 191153877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641516
    },
    {
        "content": "<p>but I think I remember also that relative paths didn't work for some reason or something...</p>",
        "id": 191153924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641524
    },
    {
        "content": "<p>hm, this should be only for rust-lang/rust directories?</p>",
        "id": 191153941,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641533
    },
    {
        "content": "<p>that said, I think I could use the \"per directory\" settings to configure this differently for each of my directories</p>",
        "id": 191153952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641538
    },
    {
        "content": "<p>i.e. you can just have one where you've run x.py recently in theory</p>",
        "id": 191153966,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641545
    },
    {
        "content": "<p>I feel like I tried this and had a problem, I can't remember why</p>",
        "id": 191153973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641547
    },
    {
        "content": "<p>or install the same nightly toolchain as the one we use in x.py (from src/stage0.txt) and then use that</p>",
        "id": 191154014,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641569
    },
    {
        "content": "<p>I'd rather have it do the right thing</p>",
        "id": 191154018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641570
    },
    {
        "content": "<p>than require some manual work from me every 6 weeks</p>",
        "id": 191154050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641583
    },
    {
        "content": "<p>but yes</p>",
        "id": 191154052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641584
    },
    {
        "content": "<p>do you have <code>+stage1</code> set up? you could do the same for this in theory</p>",
        "id": 191154103,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641616
    },
    {
        "content": "<p>I have e.g. +rust-1-stage1 etc</p>",
        "id": 191154121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641631
    },
    {
        "content": "<p>ah</p>",
        "id": 191154132,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641635
    },
    {
        "content": "<p>one for each of my working directories :)</p>",
        "id": 191154137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641639
    },
    {
        "content": "<p>I <em>used</em> to use a custom wrapper around rustc that figured out which directory you were in...</p>",
        "id": 191154192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641650
    },
    {
        "content": "<p>...but that was a bit overkill, turns out</p>",
        "id": 191154201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641655
    },
    {
        "content": "<p>this is a bit crazy, but <code>rustup run --install $(rg --replace '$1' 'rustfmt: (.*)$' src/stage0.txt) rustfmt</code></p>",
        "id": 191154410,
        "sender_full_name": "simulacrum",
        "timestamp": 1584641775
    },
    {
        "content": "<p>anyway setting the variable in what seemed to be the obvious per-directory way didn't work so...</p>",
        "id": 191154562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584641850
    },
    {
        "content": "<p>I actually have the same problem and I use vim</p>",
        "id": 191154907,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584642007
    },
    {
        "content": "<p>I thought my rust.vim pluggin ought to just use the rustfmt.toml, but apparently it doesn't?</p>",
        "id": 191154957,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584642032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> you need the right version of rustfmt too, just the right config isn't enough I think</p>",
        "id": 191155818,
        "sender_full_name": "simulacrum",
        "timestamp": 1584642423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ rustfmt --version\nrustfmt 1.4.11-stable (9eb4b56 2020-01-29)\n</pre></div>",
        "id": 191197838,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584671617
    },
    {
        "content": "<p>?</p>",
        "id": 191197841,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584671622
    },
    {
        "content": "<p>Hmm... it doesn't seem that far from the nightly version timewise?</p>",
        "id": 191197894,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584671659
    },
    {
        "content": "<p>so I misremembered this Zulip thread, but, now that I have a solution for <em>my own</em> problem, here it is in case anyone else needs it: VSCode format on save w/o RLS <a href=\"https://github.com/rust-lang/rustfmt/issues/4092#issuecomment-602765344\" target=\"_blank\" title=\"https://github.com/rust-lang/rustfmt/issues/4092#issuecomment-602765344\">https://github.com/rust-lang/rustfmt/issues/4092#issuecomment-602765344</a></p>",
        "id": 191516671,
        "sender_full_name": "eddyb",
        "timestamp": 1584988201
    },
    {
        "content": "<p>and presumably this would work for any custom formatter command. and it works great with the undo log and instantly reloads, just like the real deal</p>",
        "id": 191516790,
        "sender_full_name": "eddyb",
        "timestamp": 1584988234
    }
]