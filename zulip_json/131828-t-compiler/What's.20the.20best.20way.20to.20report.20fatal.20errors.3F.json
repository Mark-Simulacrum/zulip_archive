[
    {
        "content": "<p>At the moment, lexer <a href=\"https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src/libsyntax/parse/lexer/mod.rs#L375\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src/libsyntax/parse/lexer/mod.rs#L375\">panics</a> on some errors.</p>\n<p>I think panicking is bad for compiler (it certainly is bad for IDEs), and I'd like to fix it. What's the correct way of doing it?</p>\n<p>I would think that I should still report a diagnostic with <code>Fatal</code> severity, but just avoid actually raising <code>FatalError</code>. However, <code>#[must_use]</code> on <code>FatalError</code> seems to hint that, if you produced a <code>Fatal</code> diagnostics, you <em>must</em> panic.</p>\n<p>Should I just produce an <code>Error</code>? Should I use <code>PhaseFatal</code>?</p>\n<p>If <code>FatalError</code> always panics and we want to move away from panicing, should we add a comment saying \"don't add new usages of <code>FatalError</code> and try to remove existing ones\"?</p>",
        "id": 173231536,
        "sender_full_name": "matklad",
        "timestamp": 1565809023
    },
    {
        "content": "<p>IIRC, there's a way to call something like exit_if_errors?</p>",
        "id": 173231586,
        "sender_full_name": "simulacrum",
        "timestamp": 1565809073
    },
    {
        "content": "<p>That's probably what you want after emitting just a regular error</p>",
        "id": 173231640,
        "sender_full_name": "simulacrum",
        "timestamp": 1565809088
    },
    {
        "content": "<p><code>abort_if_errors</code>, yeah</p>",
        "id": 173231656,
        "sender_full_name": "matklad",
        "timestamp": 1565809098
    },
    {
        "content": "<p>Yeah, I think that should work, right? Or is there something I'm missing? Presumably FatalError.raise() could just call abort_if_errors (modulo global session and such, but we can thread it through I think)</p>",
        "id": 173231703,
        "sender_full_name": "simulacrum",
        "timestamp": 1565809153
    },
    {
        "content": "<p>That doesn't discriminate between recoverable errors and \"oh noes, don't even try to run further phases of the compiler to avoid the flood of cascading errors\"</p>",
        "id": 173231741,
        "sender_full_name": "matklad",
        "timestamp": 1565809194
    },
    {
        "content": "<blockquote>\n<p>FatalError.raise() could just call abort_if_errors (modulo global session and such, but we can thread it through I think)</p>\n</blockquote>\n<p>It's the other way arround: abort_if_errors calls <code>FatalError.raise()</code> :D</p>",
        "id": 173231799,
        "sender_full_name": "matklad",
        "timestamp": 1565809220
    },
    {
        "content": "<p>I assume in this case there's no choice but to fatally abort?</p>",
        "id": 173231834,
        "sender_full_name": "centril",
        "timestamp": 1565809260
    },
    {
        "content": "<p>hm, but you implied FatalError.raise() panics?</p>",
        "id": 173231842,
        "sender_full_name": "simulacrum",
        "timestamp": 1565809263
    },
    {
        "content": "<p>which I didn't think was the case</p>",
        "id": 173231852,
        "sender_full_name": "simulacrum",
        "timestamp": 1565809275
    },
    {
        "content": "<p>Sorry for the sloppy wording: <code>FatalError.raise</code> unwinds (via resume unwind, not via panic), and I assume that we don't actually want that behavior for \"something's wrong with user's code\"</p>",
        "id": 173231949,
        "sender_full_name": "matklad",
        "timestamp": 1565809348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> on the contrary, in the lexer's case, we can just print an error, produce a fake token and chug along. However that <em>might</em> trigger cascading errors.</p>",
        "id": 173232121,
        "sender_full_name": "matklad",
        "timestamp": 1565809446
    },
    {
        "content": "<p>do we need an <code>::Err</code> token to avoid cascading errors?</p>",
        "id": 173232153,
        "sender_full_name": "centril",
        "timestamp": 1565809469
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <span class=\"user-mention\" data-user-id=\"119031\">@Esteban K端ber</span></p>",
        "id": 173232194,
        "sender_full_name": "centril",
        "timestamp": 1565809499
    },
    {
        "content": "<p>It wouldnt help in the lexer</p>",
        "id": 173233086,
        "sender_full_name": "Esteban K端ber",
        "timestamp": 1565810142
    },
    {
        "content": "<p>Or rather, you need the lexer to return an <code>Err</code> for cascading errors not to happen</p>",
        "id": 173233187,
        "sender_full_name": "Esteban K端ber",
        "timestamp": 1565810200
    },
    {
        "content": "<p>What about <code>Level::PhaseFatal</code>? Semantically, it is exactly what I need here, but, although this variant exists, it isn't actually used anywhere =/ There's an irony in that <code>Level::PhaseFatal</code> is the only documented error variant</p>",
        "id": 173233236,
        "sender_full_name": "matklad",
        "timestamp": 1565810238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban K端ber</span> returning <code>Result</code> is no-go for IDE use-case. IDEs should basically <em>never</em> stop processing. Cascading errors is not a problem if you emit squiggly underlines, and it's important to make at least some sense of the code after the error.</p>",
        "id": 173233352,
        "sender_full_name": "matklad",
        "timestamp": 1565810315
    },
    {
        "content": "<p>For example, here's how Kotlin deals with unclosed strings:</p>\n<p><a href=\"/user_uploads/4715/ryuyMG70WETrvs4s7juOfpqO/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ryuyMG70WETrvs4s7juOfpqO/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/ryuyMG70WETrvs4s7juOfpqO/pasted_image.png\"></a></div>",
        "id": 173233367,
        "sender_full_name": "matklad",
        "timestamp": 1565810333
    },
    {
        "content": "<p>there's a bunch of errors (8), but they are not that harmful, b/c they are not printed to the terminal, and IDE does useful stuff for the following declaration</p>",
        "id": 173233411,
        "sender_full_name": "matklad",
        "timestamp": 1565810388
    },
    {
        "content": "<p>I've found returning Results to be super annoying in practice</p>",
        "id": 173234357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565811099
    },
    {
        "content": "<p>it seems like sentinel is better overall</p>",
        "id": 173234366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565811107
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the approaches seem isomorphic tho? -- at least with <code>Result</code> you get monad powers</p>",
        "id": 173234542,
        "sender_full_name": "centril",
        "timestamp": 1565811230
    },
    {
        "content": "<p>In a compiler I wrote over the last weeks I experimented without sentinels and marked the spans as \"already errored\" and silenced further warnings on spans with such markings</p>",
        "id": 173234646,
        "sender_full_name": "oli",
        "timestamp": 1565811277
    },
    {
        "content": "<p>Result doesn't work well for \"log and continue\" I think, since you end up writing equivalent of unwrap_or(sentinel) anyway essentially</p>",
        "id": 173235231,
        "sender_full_name": "simulacrum",
        "timestamp": 1565811733
    },
    {
        "content": "<p>The approaches may <em>seem</em> isomorphic but, in general, I found it much smoother to have (e.g.) an <code>Err</code> variant inside of <code>Ty</code> than to make <code>Ty</code> always be <code>Result&lt;Ty, Error&gt;</code> (and so forth for other types). Maybe, if you were thorough, they would both work out roughly the same.</p>",
        "id": 173235391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565811866
    },
    {
        "content": "<p>Maybe <code>Result</code> is the wrong monad; <a href=\"http://hackage.haskell.org/package/monad-validate-1.2.0.0/docs/Control-Monad-Validate.html\" target=\"_blank\" title=\"http://hackage.haskell.org/package/monad-validate-1.2.0.0/docs/Control-Monad-Validate.html\">http://hackage.haskell.org/package/monad-validate-1.2.0.0/docs/Control-Monad-Validate.html</a> seems interesting; Something more <code>Writer</code>-monad like might be better</p>",
        "id": 173235484,
        "sender_full_name": "centril",
        "timestamp": 1565811938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Yeah I suppose it's a question of biasing towards handling or not handling the error case. Having <code>::Err</code> inside might also be better for introducing (possibly named) typed holes and whatnot later</p>",
        "id": 173235751,
        "sender_full_name": "centril",
        "timestamp": 1565812118
    }
]