[
    {
        "content": "<p>I just noticed that <code>ptr::read</code> is implemented as a library-only function with <code>copy_nonoverlapping</code>, while <code>ptr::write</code> uses an intrinsic. Is there a reason for this? <code>ptr::write</code> could also be implemented without an intrsic as something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">write</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">dst</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">copy_nonoverlapping</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220587932,
        "sender_full_name": "RalfJ",
        "timestamp": 1608560288
    },
    {
        "content": "<p>You also need to not drop <code>src</code></p>",
        "id": 220599707,
        "sender_full_name": "cuviper",
        "timestamp": 1608566974
    },
    {
        "content": "<p>I imagine the intrinsic was written before <code>ManuallyDrop</code> and <code>MaybeUninit</code> existed, nor even unions</p>",
        "id": 220599902,
        "sender_full_name": "cuviper",
        "timestamp": 1608567076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/131828-t-compiler/topic/ptr.3A.3Aread.20vs.20ptr.3A.3Awrite/near/220599707\">said</a>:</p>\n<blockquote>\n<p>You also need to not drop <code>src</code></p>\n</blockquote>\n<p>ah, good point.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">write</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">dst</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ManuallyDrop</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">copy_nonoverlapping</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 220603881,
        "sender_full_name": "RalfJ",
        "timestamp": 1608569195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/131828-t-compiler/topic/ptr.3A.3Aread.20vs.20ptr.3A.3Awrite/near/220599902\">said</a>:</p>\n<blockquote>\n<p>I imagine the intrinsic was written before <code>ManuallyDrop</code> and <code>MaybeUninit</code> existed, nor even unions</p>\n</blockquote>\n<p>yeah, this is pre-1.0 material. But <code>read</code> clearly was updated since then, so I wondered if there is a reason that <code>write</code> was not.</p>",
        "id": 220603913,
        "sender_full_name": "RalfJ",
        "timestamp": 1608569219
    },
    {
        "content": "<p>That is a lot more code for LLVM to churn through and is much slower in debug mode and with cg_clif.</p>",
        "id": 220603964,
        "sender_full_name": "bjorn3",
        "timestamp": 1608569249
    },
    {
        "content": "<p><code>read</code> used to get by with <code>mem:: uninitialized()</code>, however bad that was, and you changed that in <a href=\"https://github.com/rust-lang/rust/issues/54668\">#54668</a>.</p>",
        "id": 220608166,
        "sender_full_name": "cuviper",
        "timestamp": 1608571835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> if there's a codegen benefit to intrinsic <code>write</code>, I wonder if we might also benefit from an intrinsic <code>read</code>.</p>",
        "id": 220608373,
        "sender_full_name": "cuviper",
        "timestamp": 1608571947
    },
    {
        "content": "<p>Probably</p>",
        "id": 220608454,
        "sender_full_name": "bjorn3",
        "timestamp": 1608572001
    },
    {
        "content": "<p>An alternative I have been thinking about for a while would be to introduce something like <code>#[inline(force)]</code> that will force MIR-inlining and give a cycle error when there is an inlining cycle. This can then be applied to certain function that are guaranteed to not cause an inlining cycle.</p>",
        "id": 220608601,
        "sender_full_name": "bjorn3",
        "timestamp": 1608572097
    },
    {
        "content": "<p>relying on optimisation just pushes the responsibility away and still incurs the cost of having to optimise the thing, much like using <code>MaybeUninit</code> would.</p>",
        "id": 220609088,
        "sender_full_name": "nagisa",
        "timestamp": 1608572369
    },
    {
        "content": "<p>Intrinsics are nice because some of them are converted to MIR by an unconditional pass.</p>",
        "id": 220609234,
        "sender_full_name": "nagisa",
        "timestamp": 1608572441
    },
    {
        "content": "<p>Maybe inlining would help, but I think <code>read</code> and <code>write</code> really are special. The compiler knows how to deal with initializing or moving from storage without the type shenanigans.</p>",
        "id": 220609265,
        "sender_full_name": "cuviper",
        "timestamp": 1608572459
    },
    {
        "content": "<p><code>#[inline(force)]</code> would be unconditional and not just an optional optimization pass. In addition any MIR passes are done before monomorphization, so it would only incur a tiny cost during compilation of libcore itself. All downstream users would just read the optimized MIR without any calls to <code>ManuallyDrop::new</code> and <code>mem::copy_nonoverlapping</code>. It wouldn't be as optimized as a dedicated intrinsic though, but still much better.</p>",
        "id": 220609683,
        "sender_full_name": "bjorn3",
        "timestamp": 1608572680
    },
    {
        "content": "<p><code>#[inline(force)]</code> would also be useful for wrappers that only call a single intrinsic like <code>mem::size_of</code>.</p>",
        "id": 220609726,
        "sender_full_name": "bjorn3",
        "timestamp": 1608572711
    },
    {
        "content": "<p>LLVM still has codegen issues with both our <code>ptr::read()</code> <a href=\"https://github.com/rust-lang/rust/issues/73258\">#73258</a> and some uses of <code>MaybeUninit</code> compared to <code>mem::uninitialized()</code> like <a href=\"https://github.com/rust-lang/rust/issues/74267\">#74267</a></p>",
        "id": 220609903,
        "sender_full_name": "lqd",
        "timestamp": 1608572818
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/ptr.3A.3Aread.20vs.20ptr.3A.3Awrite/near/220603964\">said</a>:</p>\n<blockquote>\n<p>That is a lot more code for LLVM to churn through and is much slower in debug mode and with cg_clif.</p>\n</blockquote>\n<p>you mean because of the <code>ManuallyDrop</code>? The <code>copy_nonoverlapping</code> must be pretty close to what the intrinsic lowers to...</p>",
        "id": 220681314,
        "sender_full_name": "RalfJ",
        "timestamp": 1608637529
    },
    {
        "content": "<p>That and the fact that <code>ptr::copy_nonoverlapping</code> is a wrapper around <code>intrinsics::copy_nonoverlapping</code>, both of which prevents optimizations when inlining is not done.</p>",
        "id": 220681863,
        "sender_full_name": "bjorn3",
        "timestamp": 1608638055
    },
    {
        "content": "<p>FWIW, <code>write_unaligned</code> is already implemented like this</p>",
        "id": 220682182,
        "sender_full_name": "RalfJ",
        "timestamp": 1608638395
    },
    {
        "content": "<p>and it seems strange to treat <code>ptr::read</code> and <code>ptr::write</code> so differently</p>",
        "id": 220682229,
        "sender_full_name": "RalfJ",
        "timestamp": 1608638405
    },
    {
        "content": "<p>and without inlining, there's not much optimizing happening here anyway, since it means <code>ptr::write</code> itself will also not be inlined</p>",
        "id": 220682326,
        "sender_full_name": "RalfJ",
        "timestamp": 1608638484
    },
    {
        "content": "<p>we could possibly use <code>mem::forget</code> instead of <code>ManuallyDrop</code> (that's what <code>write_unaligned</code> does, anyway). in this particular case, \"using\" src again after the copy seems fine (so the usual concern around <code>mem::forget</code> does not apply)</p>",
        "id": 220682454,
        "sender_full_name": "RalfJ",
        "timestamp": 1608638609
    },
    {
        "content": "<p><code>ptr::write</code> could be implemented in just a few instructions (depending on the type size) but lack of inlining currently makes it several times as big.</p>",
        "id": 220682465,
        "sender_full_name": "bjorn3",
        "timestamp": 1608638623
    },
    {
        "content": "<p>It is true that this by far isn't the only case where manual inlining would have a benefit. That is why I would like a <code>#[inline(force)]</code> for MIR inlining.</p>",
        "id": 220682587,
        "sender_full_name": "bjorn3",
        "timestamp": 1608638717
    },
    {
        "content": "<p>Let's see what perf says: <a href=\"https://github.com/rust-lang/rust/pull/80290\">https://github.com/rust-lang/rust/pull/80290</a></p>",
        "id": 220682874,
        "sender_full_name": "RalfJ",
        "timestamp": 1608638969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/ptr.3A.3Aread.20vs.20ptr.3A.3Awrite/near/220681863\">said</a>:</p>\n<blockquote>\n<p>That and the fact that <code>ptr::copy_nonoverlapping</code> is a wrapper around <code>intrinsics::copy_nonoverlapping</code></p>\n</blockquote>\n<p>If this is a concern, we can make this a direct intrinsic call again (looks like we'll lose the debug assertions for now anyway, due to <a href=\"https://github.com/rust-lang/rust/pull/79684\">https://github.com/rust-lang/rust/pull/79684</a>)</p>",
        "id": 220682940,
        "sender_full_name": "RalfJ",
        "timestamp": 1608639003
    },
    {
        "content": "<p>Most of the perf gain will be for runtime of debug mode executables.</p>",
        "id": 220682977,
        "sender_full_name": "bjorn3",
        "timestamp": 1608639037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/ptr.3A.3Aread.20vs.20ptr.3A.3Awrite/near/220682587\">said</a>:</p>\n<blockquote>\n<p>It is true that this by far isn't the only case where manual inlining would have a benefit. That is why I would like a <code>#[inline(force)]</code> for MIR inlining.</p>\n</blockquote>\n<p>FWIW I think this would also help for some of the slice iterator code, where we're using macros because function calls cause a notable perf hit even in optimized code (inlining happening too late, or so)</p>",
        "id": 220682987,
        "sender_full_name": "RalfJ",
        "timestamp": 1608639051
    },
    {
        "content": "<p>Yes, I tried manually replacing <code>mem::size_of</code> with <code>intrinsics::size_of</code> in the slice iterator code and it caused a few percent improvement on simple-raytracer compiled with cg_clif.</p>",
        "id": 220683051,
        "sender_full_name": "bjorn3",
        "timestamp": 1608639116
    },
    {
        "content": "<p>oO</p>",
        "id": 220683172,
        "sender_full_name": "RalfJ",
        "timestamp": 1608639234
    },
    {
        "content": "<p>The improvements for cg_clif will be a bit better than cg_llvm as cranelift currently always emits a function prologue and epilogue but still.</p>",
        "id": 220683249,
        "sender_full_name": "bjorn3",
        "timestamp": 1608639297
    },
    {
        "content": "<p><code>#[inline(force)]</code> could also be nice for my <code>Box::new</code> optimization. As I mentioned in the other thread, it might be expedient to turn <code>Box::new</code> into an intrinsic to make sure that <code>Box:new([0; 4096*4096])</code> is guaranteed to never blow the stack, it would be painful to intrinsic-ify all the other functions/methods that essentially do the same thing, like <code>Box::pin</code></p>",
        "id": 221594443,
        "sender_full_name": "Erick Tryzelaar",
        "timestamp": 1609802344
    },
    {
        "content": "<p>Should this happen at the regular inlining pass, or should this be something that happens really early in the pipeline, essentially treating the inlined body as manually inlined so even various analyses like borrowck will not see the difference?</p>",
        "id": 221595089,
        "sender_full_name": "oli",
        "timestamp": 1609802883
    },
    {
        "content": "<p>I don't think we'd want it to affect borrow ck (or really any similar pass), but doing it before LLVM would be critical I imagine.</p>",
        "id": 221595260,
        "sender_full_name": "simulacrum",
        "timestamp": 1609803004
    },
    {
        "content": "<p>ok, then we can indeed do it in the regular inlining pass. I guess <code>#[inline(force)]</code> can cause query cycle errors if you try to inline recursive (even mutually) functions. What's the difference to <code>#[inline(always)]</code> for that matter? I always thought that should already <em>always</em> inline and we are just missing the MIR opt to do it (though LLVM's inline-always does not actually always inline)</p>",
        "id": 221596882,
        "sender_full_name": "oli",
        "timestamp": 1609804173
    },
    {
        "content": "<p>I could imagine <code>inline(rustc_mir_force)</code> that's never-stable and just always runs the mir inliner on it, trusting libs-impl to put it on the right things.  That could potentially stabilize sooner than the generic one.</p>\n<p>Alternatively, <code>inline(force)</code> could give an error if for some reason it can't be inlined, such as if it's recursive, which <code>inline(always)</code> probably can't.  Or it could apply in debug mode too (I don't remember whether <code>inline(always)</code> does anything in non-release).</p>",
        "id": 221607210,
        "sender_full_name": "scottmcm",
        "timestamp": 1609813802
    },
    {
        "content": "<p>I've certainly seen people using <code>inline(always)</code> on functions that get inlined anyway specifically because they wanted them inlined in debug mode, too.</p>",
        "id": 221614739,
        "sender_full_name": "LingM",
        "timestamp": 1609825075
    },
    {
        "content": "<p>(Err, I said \"stabilize sooner\" in my previous message, but meant \"happen sooner\", since I also said \"never-stable\", oops.)</p>",
        "id": 221619473,
        "sender_full_name": "scottmcm",
        "timestamp": 1609831895
    },
    {
        "content": "<p>What would be the examples that are not MIR inlined but should be?</p>",
        "id": 221623154,
        "sender_full_name": "tm",
        "timestamp": 1609835778
    },
    {
        "content": "<blockquote>\n<p>Alternatively, inline(force) could give an error if for some reason it can't be inlined, such as if it's recursive, which inline(always) probably can't. Or it could apply in debug mode too (I don't remember whether inline(always) does anything in non-release).</p>\n</blockquote>\n<p>Both are exactly what I want. Inlining cycles should error and I think it should inline in debug mode. <code>#[inline(force)]</code> should mostly be used for functions where a function call requires as much or more instructions as the body of the function to be inlined and as such inlining would be expected to not regress compile times.</p>",
        "id": 221626868,
        "sender_full_name": "bjorn3",
        "timestamp": 1609838912
    },
    {
        "content": "<p>yes, performing the inline even in debug mode is crucial here</p>",
        "id": 221714651,
        "sender_full_name": "Lokathor",
        "timestamp": 1609888454
    }
]