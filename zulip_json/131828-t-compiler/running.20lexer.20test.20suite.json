[
    {
        "content": "<p>What would be the best command to test changes to the lexer?</p>\n<p>I am currently using <code>./x.py -i --stage 1 test src/test/ui src/test/run-pass src/test/compile-fail/</code>, is there anything better?</p>",
        "id": 162508283,
        "sender_full_name": "matklad",
        "timestamp": 1554370182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  fastest way would be to <code>cargo foobar</code> in <code>src/libsyntax</code> I think</p>",
        "id": 162509288,
        "sender_full_name": "centril",
        "timestamp": 1554371243
    },
    {
        "content": "<p>that only works if you can roll your unit tests there tho</p>",
        "id": 162509357,
        "sender_full_name": "centril",
        "timestamp": 1554371291
    },
    {
        "content": "<p>there are dedicated parser tests in <code>src/test/ui/parser</code>, so if you want to narrow your focus, I'd just feed in that path.</p>",
        "id": 162509399,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554371346
    },
    {
        "content": "<p>(also, \"better\" is slightly ambiguous in your original question: Are you trying to minimize testing time? Or maximize coverage? Or minimize rustc recompile times?)</p>",
        "id": 162509528,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554371476
    },
    {
        "content": "<p>What I am trying to do is to extract the actual lexing part of the lexer (as opposed to interning, span management and all that stuff) into a separate crate. So, I am doing a refactoring, and interested in maximally fast rebuilds with 90% condidence that I didn't break stuff</p>",
        "id": 162509637,
        "sender_full_name": "matklad",
        "timestamp": 1554371634
    }
]