[
    {
        "content": "<p>So I was visiting a company today (same place that <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> works, as it happens...) and they were showing me some of their woes with regard to incremental compilation costs. We whipped out self-profile (yay <span class=\"user-group-mention\" data-user-group-id=\"1123\">@WG-self-profile</span>, this worked great) and we found that <strong>97%</strong> of the time was in <code>link_crate</code> -- and it looks like that might have been excluding <code>dsymutil</code> costs, which were large (like, we had top running and dsymutil was sitting there for a while). Or at least cargo said 1min of time and the self-profile included only ~35s.</p>\n<p>Which brings me to my question. How much have we thought about ways to avoid running the linker <em>at all</em> in incremental scenarios? I feel like I've heard some ideas for epic hacks (maybe from <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>? at least that's where my mind turns when I think of epic hacks...). Maybe from <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>?</p>\n<p>Also dear god what can we do about dsymutil!!</p>",
        "id": 180271167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573246676
    },
    {
        "content": "<p>there are certainly hacks we can do, but what exactly is being linked?</p>",
        "id": 180271318,
        "sender_full_name": "eddyb",
        "timestamp": 1573246756
    },
    {
        "content": "<p>if it's dsymutil, I feel like that's debuginfo? in which case the problem might be that we generate a <em>ton</em> of data -- e.g., multiple gigabytes of debuginfo if set to \"full\" vs. just line numbers</p>",
        "id": 180271501,
        "sender_full_name": "simulacrum",
        "timestamp": 1573246847
    },
    {
        "content": "<p>oh yeah unless you're using a debugger, don't set it to full</p>",
        "id": 180271538,
        "sender_full_name": "eddyb",
        "timestamp": 1573246867
    },
    {
        "content": "<p>maybe we're relying on a bad default for debug mode</p>",
        "id": 180271560,
        "sender_full_name": "eddyb",
        "timestamp": 1573246882
    },
    {
        "content": "<p>I'm not sure if we set it to full, <em>but</em> I think they are trying to use debuggers</p>",
        "id": 180273654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573248259
    },
    {
        "content": "<p>That doesn't seem like such an unreasonable thing to want to do :)</p>",
        "id": 180273666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573248268
    },
    {
        "content": "<p>dsymutil was I think like 50% of the linking cost</p>",
        "id": 180273679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573248281
    },
    {
        "content": "<blockquote>\n<p>there are certainly hacks we can do, but what exactly is being linked?</p>\n</blockquote>\n<p>I'm not sure how to answer this -- rust code? :P</p>",
        "id": 180273687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573248292
    },
    {
        "content": "<p>There's some background for dsymutil at <a href=\"https://github.com/rust-lang/rust/issues/47240\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47240\">https://github.com/rust-lang/rust/issues/47240</a></p>",
        "id": 180274781,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249003
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/pull/47784\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/47784\">https://github.com/rust-lang/rust/pull/47784</a> initially started by trying to remove it altogether but we weren't able to do that</p>",
        "id": 180274803,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249019
    },
    {
        "content": "<p>(but it ended up in a <code>-Z</code> flag to avoid it)</p>",
        "id": 180274810,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249023
    },
    {
        "content": "<p>avoiding the linker will likely be pretty hard, and maybe not that useful? That's only really possible if zero object files changed, but it seems like at least one object file is likely to always change</p>",
        "id": 180274859,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249055
    },
    {
        "content": "<p>we also have a very old issue - <a href=\"https://github.com/rust-lang/rust/issues/34651\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/34651\">https://github.com/rust-lang/rust/issues/34651</a> - to use split-dwarf on all platforms to reduce the cost of linking with debuginfo</p>",
        "id": 180275040,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249199
    },
    {
        "content": "<p>Another theory is that LLD may be faster than the system linker on OSX</p>",
        "id": 180275296,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249354
    },
    {
        "content": "<p>you should be able to switch with <code>rustc foo.rs -C linker-flavor=ld64.lld -Clinker=rust-lld</code></p>",
        "id": 180275303,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249360
    },
    {
        "content": "<p>although I just did that and it produced a segfaulting binary</p>",
        "id": 180275314,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249369
    },
    {
        "content": "<p>so it is likely not production quality yet</p>",
        "id": 180275324,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249374
    },
    {
        "content": "<p>the tl;dr; of <code>dsymutil</code> is that if we don't run it <code>RUST_BACKTRACE</code> doesn't work</p>",
        "id": 180275357,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249401
    },
    {
        "content": "<p>and historically that's been more important than saving compile time</p>",
        "id": 180275369,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is this project available though to poke around in?</p>",
        "id": 180275394,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249441
    },
    {
        "content": "<p>It's closed source</p>",
        "id": 180275450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249457
    },
    {
        "content": "<p>I was thinking about looking at some other repos that may have similar problems</p>",
        "id": 180275459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249471
    },
    {
        "content": "<p>it was 'plain old cargo' though</p>",
        "id": 180275472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249484
    },
    {
        "content": "<p>linking debug info will take a fair share of time on all platforms.</p>",
        "id": 180275473,
        "sender_full_name": "nagisa",
        "timestamp": 1573249484
    },
    {
        "content": "<p>the pattern was a lot of crates, and then a very shallow \"tip\" crate</p>",
        "id": 180275478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249493
    },
    {
        "content": "<p>(much like rustc_driver etc)</p>",
        "id": 180275507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249504
    },
    {
        "content": "<p>At work we have a semi-trivial 500-crate graph that takes 100% longer to link with debug info than when building with --release.</p>",
        "id": 180275521,
        "sender_full_name": "nagisa",
        "timestamp": 1573249515
    },
    {
        "content": "<blockquote>\n<p>avoiding the linker will likely be pretty hard, and maybe not that useful? That's only really possible if zero object files changed, but it seems like at least one object file is likely to always change</p>\n</blockquote>\n<p>yeah I mean the goal would be to somehow do some surgery such that we can run the code without actually linking or something. I have no idea how to achieve this. =)</p>",
        "id": 180275560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249545
    },
    {
        "content": "<p>lld has incremental linking support</p>",
        "id": 180275601,
        "sender_full_name": "nagisa",
        "timestamp": 1573249562
    },
    {
        "content": "<p>This is why I mentioned epic hacks ;)</p>",
        "id": 180275620,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249563
    },
    {
        "content": "<p>Yes, that's another possibility</p>",
        "id": 180275631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249568
    },
    {
        "content": "<p>and Microsoft’s linker does too AFAIK</p>",
        "id": 180275634,
        "sender_full_name": "nagisa",
        "timestamp": 1573249569
    },
    {
        "content": "<p>Sounds promising</p>",
        "id": 180275670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249601
    },
    {
        "content": "<p>some recommendations we can make for now possibly are:</p>\n<ul>\n<li>Recommend turning debuginfo off, or evaluating <code>debug = 1</code> in <code>Cargo.toml</code></li>\n<li>Recommend <code>-Z run-dsymutil=no</code> in RUSTFLAGS</li>\n<li>See if <code>rust-lld</code> works for them</li>\n<li>maybe see if a recent <code>llvm-dsymutil</code> is faster and switch to using that instead of the system one</li>\n</ul>",
        "id": 180275680,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249605
    },
    {
        "content": "<p>I've never tested out incremental linker support myself, but we probably want a working LLD linker before we switch to an incremental version</p>",
        "id": 180275742,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249658
    },
    {
        "content": "<p>IIRC we don't activate MSVC's incremental linker support</p>",
        "id": 180275813,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249685
    },
    {
        "content": "<p>OK. Definitely exploring incremental linking is the obvious route.</p>",
        "id": 180275887,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249759
    },
    {
        "content": "<p>I said lld has incremental linking support, but now that I spent 5 minutes not finding anything on ddg, I’m not so sure anymore</p>",
        "id": 180275935,
        "sender_full_name": "nagisa",
        "timestamp": 1573249792
    },
    {
        "content": "<p>I too have heard this before</p>",
        "id": 180275947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249801
    },
    {
        "content": "<blockquote>\n<p>I've never tested out incremental linker support myself, but we probably want a working LLD linker before we switch to an incremental version</p>\n</blockquote>\n<p>But I mean this is also true :)</p>",
        "id": 180275998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573249813
    },
    {
        "content": "<p>at least the <code>-h</code> page for <code>rust-lld</code> doesn't show anything about incremental</p>",
        "id": 180276066,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249862
    },
    {
        "content": "<p>that being said when it works LLD is typically much faster than the system linker</p>",
        "id": 180276086,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249872
    },
    {
        "content": "<p>I don't think the macos linker is winning any awards for its speed</p>",
        "id": 180276097,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573249880
    },
    {
        "content": "<p>The references I can find are all about thinlto incremental stuff (<a href=\"https://clang.llvm.org/docs/ThinLTO.html#incremental\" target=\"_blank\" title=\"https://clang.llvm.org/docs/ThinLTO.html#incremental\">https://clang.llvm.org/docs/ThinLTO.html#incremental</a>)</p>",
        "id": 180276105,
        "sender_full_name": "nagisa",
        "timestamp": 1573249885
    },
    {
        "content": "<p>but yeah, if linking time is a problem, the only thing I know of to resolve it right now is to reduce the amount of work for linker to do</p>",
        "id": 180276220,
        "sender_full_name": "nagisa",
        "timestamp": 1573249971
    },
    {
        "content": "<p>which means not giving it gigabytes of debuginfo to link for the first obvious step.</p>",
        "id": 180276243,
        "sender_full_name": "nagisa",
        "timestamp": 1573249987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in general our performance monitoring is pretty bad for non-x86_64-unknown-linux-gnu platforms</p>",
        "id": 180276294,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573250026
    },
    {
        "content": "<p>it's largely a technical problem where we just can't profile everything everywhere all the time</p>",
        "id": 180276358,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573250046
    },
    {
        "content": "<p>This problem is as relevant on x86_64 linux gnu tho</p>",
        "id": 180276364,
        "sender_full_name": "nagisa",
        "timestamp": 1573250048
    },
    {
        "content": "<p>but I ran across <a href=\"https://github.com/rust-lang/rust/issues/66192\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66192\">https://github.com/rust-lang/rust/issues/66192</a> yesterday which was very surprising</p>",
        "id": 180276380,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573250066
    },
    {
        "content": "<p>and yes this is a problem without split dwarf on linux but ld + dsymutil is for me I feel so much slower than just ld on linux</p>",
        "id": 180276400,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573250085
    },
    {
        "content": "<p>like the linux linkers are generally pretty fast</p>",
        "id": 180276406,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573250090
    },
    {
        "content": "<p>but not profiling these sorts of things on OSX means that this just comes up less often</p>",
        "id": 180276423,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573250103
    },
    {
        "content": "<p>it's all stuff we should fix but it's not something we're prioritizing</p>",
        "id": 180276438,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1573250111
    },
    {
        "content": "<p>yeah, sounds correct</p>",
        "id": 180276547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573250168
    },
    {
        "content": "<p>I know that basically every time I talked to Anthony Jones at Mozilla he brings up dsymutil :)</p>",
        "id": 180276554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573250180
    },
    {
        "content": "<p>He is...probably not wrong to do so</p>",
        "id": 180276573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1573250195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> when I said \"what is being linked\" I meant what kind of artifact</p>",
        "id": 180280100,
        "sender_full_name": "eddyb",
        "timestamp": 1573253083
    },
    {
        "content": "<p>is all that time spent linking an executable?</p>",
        "id": 180280105,
        "sender_full_name": "eddyb",
        "timestamp": 1573253092
    },
    {
        "content": "<p>Yes, one huge executable.</p>",
        "id": 180286386,
        "sender_full_name": "Ivan Dubrov",
        "timestamp": 1573259144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> if you want I can concoct an example</p>",
        "id": 180287397,
        "sender_full_name": "nagisa",
        "timestamp": 1573260160
    },
    {
        "content": "<p>okay an executable makes sense</p>",
        "id": 180287444,
        "sender_full_name": "eddyb",
        "timestamp": 1573260189
    },
    {
        "content": "<p>but I think you can easily do that yourself by just adding deps on a couple of crates that have large dep trees.</p>",
        "id": 180287451,
        "sender_full_name": "nagisa",
        "timestamp": 1573260199
    },
    {
        "content": "<p>that's trickier to deal with than \"we're wasting time making pointless rlib's\"</p>",
        "id": 180287455,
        "sender_full_name": "eddyb",
        "timestamp": 1573260204
    },
    {
        "content": "<p>Hello excuse the interruption. I will be monitoring (lurking).  My goal is audited source to executable dumps at each step which is very compatible with Rust. As you all know optimization makes this less deterministic but that will not be a problem for audit. </p>\n<p>This is for open source software and hardware. Thanks so very much for all your hard work. When the word \"awesome\" really says something. Go Rust.</p>",
        "id": 180303747,
        "sender_full_name": "David G. Horsman",
        "timestamp": 1573289706
    },
    {
        "content": "<p>Additionally I will looking at where NN will benefit Rust within Build, dependencies and deployment.</p>",
        "id": 180303869,
        "sender_full_name": "David G. Horsman",
        "timestamp": 1573289894
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I am unfamiliar with your work culture here. Delete anything off topic please.</p>",
        "id": 180303941,
        "sender_full_name": "David G. Horsman",
        "timestamp": 1573290018
    },
    {
        "content": "<p>Here is an old issue about incremental linking: <a href=\"https://github.com/rust-lang/rust/issues/37543\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/37543\">https://github.com/rust-lang/rust/issues/37543</a></p>",
        "id": 180408251,
        "sender_full_name": "mw",
        "timestamp": 1573464042
    },
    {
        "content": "<p>Note that incremental ThinLTO and incremental linking are two different things.</p>",
        "id": 180408276,
        "sender_full_name": "mw",
        "timestamp": 1573464087
    },
    {
        "content": "<p>the former will only avoid redoing the ThinLTO optimization passes. We already support that but it won't change the time spent in the actual linking step.</p>",
        "id": 180408352,
        "sender_full_name": "mw",
        "timestamp": 1573464168
    }
]