[
    {
        "content": "<p>I just noticed the following in <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/monomorphize/collector/index.html#discovering-roots\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/monomorphize/collector/index.html#discovering-roots</a>:</p>\n<blockquote>\n<p>The roots of the mono item graph correspond to the non-generic syntactic items in the source code. We find them by walking the HIR of the crate, and whenever we hit upon a function, method, or static item, we create a mono item consisting of the items DefId and, since we only consider non-generic items, an empty type-substitution set.</p>\n</blockquote>\n<p>From this wording, it sounds like if I have a crate with just <code>fn foo() {}</code>, then since <code>foo</code> is not generic it will act as a \"root\" of the monomorphization collector. But this function cannot be reached by any other function in the crate, nor by any dependent crate, and it's not public, so I would think that we could just skip monomorphization of this function.</p>",
        "id": 232910502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617376556
    },
    {
        "content": "<p>Actually, I just tested this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This program compiles fine, so it seems that <code>bar</code> is not actually a root and the docs are incorrect.</p>",
        "id": 232911118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617376740
    },
    {
        "content": "<p>Yeah it's missing exported or public in there.</p>",
        "id": 232911470,
        "sender_full_name": "nagisa",
        "timestamp": 1617376907
    },
    {
        "content": "<p>We only collect those unless -Clink-dead-code is specified</p>",
        "id": 232911533,
        "sender_full_name": "nagisa",
        "timestamp": 1617376926
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 232920318,
        "sender_full_name": "bjorn3",
        "timestamp": 1617381296
    },
    {
        "content": "<p>I posted this as <a href=\"https://github.com/rust-lang/rust/issues/83787\">#83787</a> (my first PR!), feel free to make additional wording suggestions there.</p>",
        "id": 232920493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617381372
    }
]