[
    {
        "content": "<p>Where do we retrieve the macro callsite for a span when generating debuginfo?</p>",
        "id": 212249611,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1601859135
    },
    {
        "content": "<p>e.g. writing</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">print_it</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Backtrace</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">print_it</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>shows the location of <code>print_it</code> in the backtrace, but I can't figure out where we compute that</p>",
        "id": 212249638,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1601859192
    },
    {
        "content": "<p>I believe what you are looking for is <code>render_multispan_macro_backtrace</code></p>",
        "id": 212269428,
        "sender_full_name": "oli",
        "timestamp": 1601885304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> That looks like the comple-time backtrace shown for macro invocations. I'm interested in the runtime backtrace when a panic occurs</p>",
        "id": 212331803,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1601919328
    },
    {
        "content": "<p>Oh...</p>",
        "id": 212349492,
        "sender_full_name": "oli",
        "timestamp": 1601928246
    },
    {
        "content": "<p>Maybe it's using track_caller trickery?</p>",
        "id": 212349510,
        "sender_full_name": "oli",
        "timestamp": 1601928259
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/85fbf49ce0e2274d0acf798f6e703747674feec3/compiler/rustc_codegen_ssa/src/mir/debuginfo.rs#L80\">https://github.com/rust-lang/rust/blob/85fbf49ce0e2274d0acf798f6e703747674feec3/compiler/rustc_codegen_ssa/src/mir/debuginfo.rs#L80</a></p>",
        "id": 212357775,
        "sender_full_name": "bjorn3",
        "timestamp": 1601932472
    },
    {
        "content": "<p>this is likely what you were looking for</p>",
        "id": 212357802,
        "sender_full_name": "bjorn3",
        "timestamp": 1601932486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> thanks!</p>",
        "id": 212358195,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1601932744
    }
]