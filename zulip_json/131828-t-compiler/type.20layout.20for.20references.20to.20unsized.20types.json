[
    {
        "content": "<p>Hey is <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> around? Or is it too late a night where they are?</p>",
        "id": 231688275,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616611712
    },
    {
        "content": "<p>What's the question?</p>",
        "id": 231688548,
        "sender_full_name": "nagisa",
        "timestamp": 1616611813
    },
    {
        "content": "<p>I got some questions about how to tell, in the compiler, whether the metadata for a fat pointer is for a slice length or for a vtable pointer</p>",
        "id": 231688903,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616611942
    },
    {
        "content": "<p>from skimming the code in rustc_target/src/abi/mod.rs, it seems like we are leveraging the fact that both of those have the same size, and just using “Scalar” for both cases</p>",
        "id": 231688993,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616611978
    },
    {
        "content": "<p>does that sound accurate? As in, there’s currently no trivial way to answer that question? Or am I overlooking some utility function?</p>",
        "id": 231689059,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616612003
    },
    {
        "content": "<p>does it need to involve layout?</p>",
        "id": 231690261,
        "sender_full_name": "nagisa",
        "timestamp": 1616612454
    },
    {
        "content": "<p>well, maybe it doesn't</p>",
        "id": 231690366,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616612496
    },
    {
        "content": "<p>I think the reason it involves layout</p>",
        "id": 231690390,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616612506
    },
    {
        "content": "<p>is that this developer is effectively writing an alternative backend</p>",
        "id": 231690411,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616612517
    },
    {
        "content": "<p>and they want to 1. be sure that they are making the right kind of layout (i.e. that they are putting the metadata into the right place), and</p>",
        "id": 231690541,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616612555
    },
    {
        "content": "<ol start=\"2\">\n<li>accommodate their particular target, and their particular target does not want to conflate the two kinds of Scalars here</li>\n</ol>",
        "id": 231690670,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616612603
    },
    {
        "content": "<p>(essentially they need to reflect the fact that they’re dealing with a length versus a vtable-pointer explicitly)</p>",
        "id": 231690736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616612633
    },
    {
        "content": "<p>so the layout is relevant to part 1</p>",
        "id": 231690809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616612648
    },
    {
        "content": "<p>while the original question is more about part 2</p>",
        "id": 231690839,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616612661
    },
    {
        "content": "<p>So, in the LLVM backend at least we do generate pointer or <code>u64</code> as appropriate for the metadata part of the fat pointer.</p>",
        "id": 231691486,
        "sender_full_name": "nagisa",
        "timestamp": 1616612935
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/f5fe425c925ef36d5f4c18cfa44173fc42de31b8/compiler/rustc_codegen_llvm/src/type_of.rs#L303-L341\">https://github.com/rust-lang/rust/blob/f5fe425c925ef36d5f4c18cfa44173fc42de31b8/compiler/rustc_codegen_llvm/src/type_of.rs#L303-L341</a> is the relevant code, I believe, so we indeed end up looking at plain <code>Ty</code>s to figure it out, rather than layouts.</p>",
        "id": 231692111,
        "sender_full_name": "nagisa",
        "timestamp": 1616613210
    },
    {
        "content": "<p>Or, I should say, that's what it looks like we're doing after a very quick read.</p>",
        "id": 231692319,
        "sender_full_name": "nagisa",
        "timestamp": 1616613306
    },
    {
        "content": "<p>does the <code>index</code> parameter there control wheter it returns the data-ptr or the metadata value?</p>",
        "id": 231692621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616613461
    },
    {
        "content": "<p>Yes. <code>0</code> is for the data, and <code>1</code> is for the metadata.</p>",
        "id": 231692648,
        "sender_full_name": "nagisa",
        "timestamp": 1616613478
    },
    {
        "content": "<p>And <a href=\"https://rust.godbolt.org/z/Tn8MK7n35\">https://rust.godbolt.org/z/Tn8MK7n35</a> is a demonstration that we end up generating distinct-looking types in the backend _somewhere_.</p>",
        "id": 231692977,
        "sender_full_name": "nagisa",
        "timestamp": 1616613593
    },
    {
        "content": "<p>namely <code>{ {}*, [3 x i64]* }</code> vs <code>{ [0 x i8]*, i64 }</code></p>",
        "id": 231693065,
        "sender_full_name": "nagisa",
        "timestamp": 1616613619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/type.20layout.20for.20references.20to.20unsized.20types/near/231690411\">said</a>:</p>\n<blockquote>\n<p>is that this developer is effectively writing an alternative backend</p>\n</blockquote>\n<p>are they trying to be ABI compatible? (which is unspecified, of course) otherwise, they can decide as they like</p>",
        "id": 231702573,
        "sender_full_name": "cuviper",
        "timestamp": 1616617480
    },
    {
        "content": "<p>I think they are likely trying to be ABI-compatible, but that is a good question.</p>",
        "id": 231706156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1616619039
    },
    {
        "content": "<p>If they are trying to be ABI-compatible, they only need the pass mode for said argument from the <code>FnAbi</code>. The types used inside the function don't matter for ABI compatibility. Only the types used when passing as argument matter. These types are often fundamentally different from the internal types. Especially when using <code>PassMode::Cast</code>.</p>",
        "id": 231788997,
        "sender_full_name": "bjorn3",
        "timestamp": 1616674196
    },
    {
        "content": "<p>The abi handling code in cg_clif is easier to read than the cg_llvm counterpart IMO: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/73626efb26f61c68c8c9d4bec0a35928130a2010/src/abi/\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/73626efb26f61c68c8c9d4bec0a35928130a2010/src/abi/</a> Cranelift doesn't distinguish between pointers and pointer sized integers though.</p>",
        "id": 231789122,
        "sender_full_name": "bjorn3",
        "timestamp": 1616674243
    }
]