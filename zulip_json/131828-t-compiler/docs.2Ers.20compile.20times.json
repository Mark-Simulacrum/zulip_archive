[
    {
        "content": "<p>Is there a way to see what metadata is being loaded for a crate?</p>",
        "id": 222226479,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610291667
    },
    {
        "content": "<p><a href=\"http://docs.rs\">docs.rs</a> is relatively small but has <em>enormous</em> incremental times, I think because it has so many dependencies</p>",
        "id": 222226486,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610291686
    },
    {
        "content": "<p>like, 20 seconds or more for println</p>",
        "id": 222226494,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610291701
    },
    {
        "content": "<p>have you done <code>-Z time-passes</code></p>",
        "id": 222226511,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291747
    },
    {
        "content": "<p>yeah, let me find it</p>",
        "id": 222226514,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610291758
    },
    {
        "content": "<p>and checked that the time is being spent in rusticc, as opposed to llvm?</p>",
        "id": 222226550,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291764
    },
    {
        "content": "<p>oh booo yeah you're right <a href=\"#narrow/stream/122651-general/topic/Tips.20to.20improve.20compile.20times.20within.20a.20crate.3F/near/215049372\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/Tips.20to.20improve.20compile.20times.20within.20a.20crate.3F/near/215049372</a></p>",
        "id": 222226576,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610291821
    },
    {
        "content": "<p>have you changed any of the codegen unit settings?</p>",
        "id": 222226592,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291864
    },
    {
        "content": "<p>also, let's move to another topic</p>",
        "id": 222226597,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/docs.2Ers.20compile.20times/near/222226592\">said</a>:</p>\n<blockquote>\n<p>have you changed any of the codegen unit settings?</p>\n</blockquote>\n<p>yes: <a href=\"https://github.com/rust-lang/docs.rs/pull/1142\">https://github.com/rust-lang/docs.rs/pull/1142</a></p>",
        "id": 222226678,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610291970
    },
    {
        "content": "<p>it's possible that a large number of LLVM modules are getting invalided</p>",
        "id": 222226730,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610292005
    },
    {
        "content": "<p>I think there's a flag to print that</p>",
        "id": 222226733,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610292009
    },
    {
        "content": "<p>just a minute</p>",
        "id": 222226734,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610292011
    },
    {
        "content": "<p>I need to try <code>debuginfo = 1</code> and see if that helps</p>",
        "id": 222226765,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292075
    },
    {
        "content": "<p>try <code>RUSTC_LOG=\"rustc_codegen_llvm::back::lto=info\"</code></p>",
        "id": 222226772,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610292095
    },
    {
        "content": "<p>(it will take me a second, this is my first full build with 1.49)</p>",
        "id": 222226814,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292122
    },
    {
        "content": "<p>and look for how many \"re-used\" vs \"re-compiled\" lines you get</p>",
        "id": 222226822,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610292130
    },
    {
        "content": "<p>we <em>really</em> need to work on the number of dependencies</p>",
        "id": 222226823,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292131
    },
    {
        "content": "<p>rust development in a nutshell</p>",
        "id": 222226831,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610292158
    },
    {
        "content": "<p>oh also the memory spike when compiling <a href=\"http://docs.rs\">docs.rs</a> at the end usually crashes my laptop lol</p>",
        "id": 222227035,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292420
    },
    {
        "content": "<p>and that I <em>do</em> think is related to metadata but I don't know how to measure it</p>",
        "id": 222227044,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/docs.2Ers.20compile.20times/near/222226772\">said</a>:</p>\n<blockquote>\n<p>try <code>RUSTC_LOG=\"rustc_codegen_llvm::back::lto=info\"</code></p>\n</blockquote>\n<p>this gave me no output</p>",
        "id": 222227105,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292493
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&gt; RUSTC_LOG=&quot;rustc_codegen_llvm::back::lto=info&quot; cargo build\n   Compiling docs-rs v0.6.0 (/home/joshua/src/rust/docs.rs)\n    Finished dev [unoptimized + debuginfo] target(s) in 14.08s\n</code></pre></div>",
        "id": 222227107,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292499
    },
    {
        "content": "<p>actually rustc_codegen_llvm in general has no output</p>",
        "id": 222227118,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292523
    },
    {
        "content": "<p>oh, right</p>",
        "id": 222227138,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610292554
    },
    {
        "content": "<p>you're doing a debug build, so there won't be any lto</p>",
        "id": 222227141,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610292561
    },
    {
        "content": "<p>uh</p>",
        "id": 222227143,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610292563
    },
    {
        "content": "<p>codegen_ssa has a bunch of output though</p>",
        "id": 222227151,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292577
    },
    {
        "content": "<p>I don't actually know how we invoke LLVM when we're not doing lto</p>",
        "id": 222227159,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610292593
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/docs.2Ers.20compile.20times/near/222227151\">said</a>:</p>\n<blockquote>\n<p>codegen_ssa has a bunch of output though</p>\n</blockquote>\n<p>mostly things like</p>\n<div class=\"codehilite\"><pre><span></span><code>INFO rustc_codegen_ssa::base codegen_instance(&lt;std::io::Write::write_fmt::Adaptor&lt;std::io::BufWriter&lt;&amp;mut hyper::net::HttpStream&gt;&gt; as std::fmt::Write&gt;::write_char)\n</code></pre></div>",
        "id": 222227212,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292617
    },
    {
        "content": "<p>seems weird that it's recompiling all the dependencies when I only modified my own crate :/</p>",
        "id": 222227223,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292643
    },
    {
        "content": "<p>I don't <em>think</em> anything is marked inline(always), let me double check</p>",
        "id": 222227245,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292667
    },
    {
        "content": "<p>some stuff in <code>comrak</code> but I wouldn't expect that to take up so much time</p>",
        "id": 222227308,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610292728
    },
    {
        "content": "<p>ok</p>",
        "id": 222227497,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293059
    },
    {
        "content": "<p>if you have a debug-assertions enabled build of the compiler</p>",
        "id": 222227500,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293067
    },
    {
        "content": "<p>then invoke it with <code>RUSTC_LOG=\"rustc_session::cgu_reuse_track=debug\" RUSTFLAGS=\"-Z query-dep-graph\"</code></p>",
        "id": 222227563,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293175
    },
    {
        "content": "<p>there really needs to be an easier way to do this</p>",
        "id": 222227565,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293180
    },
    {
        "content": "<p>then, take a look at the <code>set_actual_reuse</code> messages</p>",
        "id": 222227567,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293189
    },
    {
        "content": "<p>trying that now</p>",
        "id": 222227620,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293235
    },
    {
        "content": "<p>(has to rebuild from scratch again)</p>",
        "id": 222227624,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293256
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4kc3514mflbdci4b&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4zihw79ioi5fmfzr&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1gib4t75zcbp4yrq&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4azx5zqrqb5rg0kx&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1o0zrbbryr756loy&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;6byd17tzvjehtfe&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;16mk9a2n0oxhhm4u&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3wlnoxx2jdofpuno&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1hcdtsvqg7mmwyx4&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3j6uizm9aif4u429&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4zjf5ki9tvpomiex&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;26cso2fuuae0bjxe&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4mfmebstuy7i9m7f&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1jtnt9ndq7s144yc&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2ftzf3u0ueopsw8g&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1yvhcis448l0q4vd&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3o64vf5ct1v8zaop&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4vgvugu0xhuupeqf&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4k58vl2zlra9n1cp&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;250mmy52w6si9168&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;b53mw17xjs5f0eg&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4jwovsxxr1cikxlj&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;21uxua7inrppdqjo&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4fcz9c7ara3yxrs&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;5g0gl86aar6t27ia&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3xjbqbqq5qoiwg4q&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3aloe1hx0bo3ww9r&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2wt9o23a0lz23ztc&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3usl7i7zyqnjqnve&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;23bogtk60mkhpqho&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1ma9iajyejrlqkwj&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;duq1o9mwbyeka76&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1bn682lkk9s8k2ab&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3d04vatfn0wga9cx&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;12ondo2h1p9x65p4&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4os01jlkelavezey&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4iw4uo1atjxizlhw&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;ik59be2bv3dxg5o&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1wsk9qln7agaa7w4&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2t2mn22fco1anbfj&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;24mrc6fgawfyc4y6&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4qylpoalg6eiit4p&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;233zqh27j1tbci6u&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1bu4oo2jijymehdt&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3whgaxu4h1c5jcyp&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;329r7z1qwhwuxq6d&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;61ijsub69htib7a&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;31xm8e3xuy8smflv&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;21j9463pi4l3yzmx&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;l0pe645eerp1oe9&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3pd4pdx2ov8fxuyb&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;5bfpayma57uhtvm2&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4lek6ezkr49i3fz5&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;35tn8inc2nlc4icj&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;22g4h1mrid52i5i&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4tsgxazsc8y3logh&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1pi6bgl1u46mf6x&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;qqwci3h5l5sjnf1&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3afbhdjz3uz5wxq8&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1g5rudo01f4679c5&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2i85p1isng432k0l&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4scr4wevkcf4y6q8&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;32vu8uxr6f6p18yd&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4e8jvxab4ojbxzr8&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;l8pd06qjveypzws&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4glc93rwgj5efrrs&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;kknsetkv564kwhr&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;124dyf7tvwubglx2&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;46wpkzwg146fy51g&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;47hjyv8gk2crit7a&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;azbwpwx5pc3850&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3ba8s0s212darash&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3ms2m1a13fswlk9p&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1dik91g1qtaaajdc&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4k06jge1nl4vw946&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2y2d6ddrschh4hr2&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;47gt13od33u37oyl&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;514kwrbnltvkrisu&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;31suyzefjrxg9c3m&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1ch2wru4l5bbima8&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2at052g1x6zc4ugf&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3er63zn7oq99tkn6&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4vb374p1c4xwq251&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1by882mzidydwfnx&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2mp2qw20kdu7g63m&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;381c80x5yb1nhvs6&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1mc90e0nrlkza4x3&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3neuraicmdcloktf&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1hyq30mf3132wed7&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1dg540ijdsdmtv00&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;cfta5qmd62qriqx&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2ccb4iz7h3trc7xe&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;52vr8tt3xicsch6b&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4q5ch0pwlnlag4di&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3ap4apl7i2jev5h1&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;10qwkmwyalmpq9mb&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1m3k9a5itigkz2ro&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1m00vc7stgxxtrkd&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2q3wy1ov01hwc9t0&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;syr8xd87u9ym1n8&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;nc9nvnmsuezw37m&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;wxyn2f4qu96modw&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4ysyuglo3f6ca7t8&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1k79lseaffzilyhm&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3jxlz76krtypx27j&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2l2gg9ki00m2mm9r&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1yl4ov1lx3a8knx2&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1pe31ebskwxuso8l&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;26ogky4xtmr3qdae&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;36lbq4iomdimjnlp&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1d1et0n4hgjj38f2&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1roixjrlifpawpt8&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1uj2x1ai2vlqchk4&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1dypuzywjqsr9x8h&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3l75pqg7ti3f77wn&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;291ya3epimoecy7t&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4hxvkhdzcbde21my&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;33ruku6l8ukj519h&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;509cjcbqfmbulnfz&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3tad511laibtphqz&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4jxdm9gwwv3b9pd8&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2rb2pw6jxbp8bqag&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;29duc5xqx7f2j6i7&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4qd4sgm3wucfk6ln&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3tpi4f9m6trzue5t&quot;, No)\n</code></pre></div>",
        "id": 222227750,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293509
    },
    {
        "content": "<p>that said I did probably the worst thing for your lazy loading scheme which is reordering the modules</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/lib.rs b/src/lib.rs</span>\n<span class=\"gh\">index 41adf3e..caca1e0 100644</span>\n<span class=\"gd\">--- a/src/lib.rs</span>\n<span class=\"gi\">+++ b/src/lib.rs</span>\n<span class=\"gu\">@@ -19,8 +19,8 @@ mod context;</span>\n pub mod db;\n mod docbuilder;\n mod error;\n<span class=\"gd\">-pub mod index;</span>\n mod metrics;\n<span class=\"gi\">+pub mod index;</span>\n pub mod storage;\n #[cfg(test)]\n mod test;\n</code></pre></div>",
        "id": 222227757,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293542
    },
    {
        "content": "<p>let me try with println</p>",
        "id": 222227762,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293548
    },
    {
        "content": "<p>ok that was significantly better, only 6 seconds :)</p>",
        "id": 222227810,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293588
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4kc3514mflbdci4b&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4zihw79ioi5fmfzr&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1gib4t75zcbp4yrq&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4azx5zqrqb5rg0kx&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1o0zrbbryr756loy&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;6byd17tzvjehtfe&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;16mk9a2n0oxhhm4u&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3wlnoxx2jdofpuno&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1hcdtsvqg7mmwyx4&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3j6uizm9aif4u429&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4zjf5ki9tvpomiex&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;26cso2fuuae0bjxe&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4mfmebstuy7i9m7f&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1jtnt9ndq7s144yc&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2ftzf3u0ueopsw8g&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1yvhcis448l0q4vd&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3o64vf5ct1v8zaop&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4vgvugu0xhuupeqf&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4k58vl2zlra9n1cp&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;250mmy52w6si9168&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;b53mw17xjs5f0eg&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4jwovsxxr1cikxlj&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;21uxua7inrppdqjo&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4fcz9c7ara3yxrs&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;5g0gl86aar6t27ia&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3xjbqbqq5qoiwg4q&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3aloe1hx0bo3ww9r&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2wt9o23a0lz23ztc&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3usl7i7zyqnjqnve&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;23bogtk60mkhpqho&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1ma9iajyejrlqkwj&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;duq1o9mwbyeka76&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1bn682lkk9s8k2ab&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3d04vatfn0wga9cx&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;12ondo2h1p9x65p4&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4os01jlkelavezey&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4iw4uo1atjxizlhw&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;ik59be2bv3dxg5o&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1wsk9qln7agaa7w4&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2t2mn22fco1anbfj&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;24mrc6fgawfyc4y6&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4qylpoalg6eiit4p&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;233zqh27j1tbci6u&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1bu4oo2jijymehdt&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3whgaxu4h1c5jcyp&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;329r7z1qwhwuxq6d&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;61ijsub69htib7a&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;31xm8e3xuy8smflv&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;21j9463pi4l3yzmx&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;l0pe645eerp1oe9&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3pd4pdx2ov8fxuyb&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;5bfpayma57uhtvm2&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4lek6ezkr49i3fz5&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;35tn8inc2nlc4icj&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;22g4h1mrid52i5i&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4tsgxazsc8y3logh&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1pi6bgl1u46mf6x&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;qqwci3h5l5sjnf1&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3afbhdjz3uz5wxq8&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1g5rudo01f4679c5&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2i85p1isng432k0l&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4scr4wevkcf4y6q8&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;32vu8uxr6f6p18yd&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4e8jvxab4ojbxzr8&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;l8pd06qjveypzws&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4glc93rwgj5efrrs&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;kknsetkv564kwhr&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;124dyf7tvwubglx2&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;46wpkzwg146fy51g&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;47hjyv8gk2crit7a&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;azbwpwx5pc3850&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3ba8s0s212darash&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3ms2m1a13fswlk9p&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1dik91g1qtaaajdc&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4k06jge1nl4vw946&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2y2d6ddrschh4hr2&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;47gt13od33u37oyl&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;514kwrbnltvkrisu&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;31suyzefjrxg9c3m&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1ch2wru4l5bbima8&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2at052g1x6zc4ugf&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3er63zn7oq99tkn6&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4vb374p1c4xwq251&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1by882mzidydwfnx&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2mp2qw20kdu7g63m&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;381c80x5yb1nhvs6&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1mc90e0nrlkza4x3&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3neuraicmdcloktf&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1hyq30mf3132wed7&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1dg540ijdsdmtv00&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;cfta5qmd62qriqx&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2ccb4iz7h3trc7xe&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;52vr8tt3xicsch6b&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4q5ch0pwlnlag4di&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3ap4apl7i2jev5h1&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;10qwkmwyalmpq9mb&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1m3k9a5itigkz2ro&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1m00vc7stgxxtrkd&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2q3wy1ov01hwc9t0&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;syr8xd87u9ym1n8&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;nc9nvnmsuezw37m&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;wxyn2f4qu96modw&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4ysyuglo3f6ca7t8&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1k79lseaffzilyhm&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3jxlz76krtypx27j&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;2l2gg9ki00m2mm9r&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1yl4ov1lx3a8knx2&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1pe31ebskwxuso8l&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;26ogky4xtmr3qdae&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;36lbq4iomdimjnlp&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1d1et0n4hgjj38f2&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1roixjrlifpawpt8&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1uj2x1ai2vlqchk4&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;1dypuzywjqsr9x8h&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;3l75pqg7ti3f77wn&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;291ya3epimoecy7t&quot;, No)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;4hxvkhdzcbde21my&quot;, PostLto)\nDEBUG rustc_session::cgu_reuse_tracker set_actual_reuse(&quot;33ruku6l8ukj519h&quot;, PostLto)\n</code></pre></div>",
        "id": 222227817,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293605
    },
    {
        "content": "<p>I don't know what PostLto means</p>",
        "id": 222227826,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293620
    },
    {
        "content": "<p>I thought it was 20 seconds for print?</p>",
        "id": 222227904,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293787
    },
    {
        "content": "<p>these timings are really off because they're on a different machine</p>",
        "id": 222227948,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293814
    },
    {
        "content": "<p>my laptop can't compile rustc <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222227950,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293820
    },
    {
        "content": "<p>also, reordering modules within a crate shouldn't really do anything</p>",
        "id": 222227951,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293826
    },
    {
        "content": "<p>all of the spans of items inside the modules will stay the same</p>",
        "id": 222227954,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293835
    },
    {
        "content": "<p>and it's a local crate, so the scheme I talked about early shouldn't come into pay</p>",
        "id": 222227957,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293850
    },
    {
        "content": "<p>play</p>",
        "id": 222227960,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293852
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> It took 3 times as long as adding println</p>",
        "id": 222227961,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293854
    },
    {
        "content": "<p>where did you add <code>println!</code>?</p>",
        "id": 222227970,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293871
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/web/mod.rs b/src/web/mod.rs</span>\n<span class=\"gh\">index 97a4290..ac7cb7d 100644</span>\n<span class=\"gd\">--- a/src/web/mod.rs</span>\n<span class=\"gi\">+++ b/src/web/mod.rs</span>\n<span class=\"gu\">@@ -220,6 +220,7 @@ impl Handler for CratesfyiHandler {</span>\n                     }\n\n                     debug!(\"Path not found: {}; {}\", DebugPath(&amp;req.url), e.error);\n<span class=\"gi\">+                    debug!(\"some text\");</span>\n                 }\n\n                 Self::chain(self.inject_extensions.clone(), err).handle(req)\n</code></pre></div>",
        "id": 222227972,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293885
    },
    {
        "content": "<p>I see</p>",
        "id": 222228018,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293924
    },
    {
        "content": "<p>most 'normal' changes will touch src/web/mod.rs which is why I chose it</p>",
        "id": 222228020,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293927
    },
    {
        "content": "<p>unfortunately, I think a lot of that time is legitimate</p>",
        "id": 222228023,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293932
    },
    {
        "content": "<p>there are a bunch of things after that line in the file</p>",
        "id": 222228025,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293938
    },
    {
        "content": "<p>adding a line will modify all of those spans</p>",
        "id": 222228026,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293947
    },
    {
        "content": "<p>no no the println time was fine</p>",
        "id": 222228027,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293951
    },
    {
        "content": "<p><code>PostLto</code> seems to be re-using the output of lto if lto is enabled or just the output of regular codegen if no lto is performed: <a href=\"https://github.com/rust-lang/rust/blob/99ad5a1a2824fea1ecf60068fd3636beae7ea2da/compiler/rustc_codegen_ssa/src/base.rs#L874-L876\">https://github.com/rust-lang/rust/blob/99ad5a1a2824fea1ecf60068fd3636beae7ea2da/compiler/rustc_codegen_ssa/src/base.rs#L874-L876</a></p>",
        "id": 222228028,
        "sender_full_name": "bjorn3",
        "timestamp": 1610293954
    },
    {
        "content": "<p>causing us to need to re-run a bunch of queries</p>",
        "id": 222228029,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293957
    },
    {
        "content": "<p>I mean, not <em>great</em>, but 6 seconds is livable</p>",
        "id": 222228030,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293958
    },
    {
        "content": "<p>it's reordering the module that takes forever</p>",
        "id": 222228033,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293965
    },
    {
        "content": "<p>that's incredibly weird</p>",
        "id": 222228037,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293970
    },
    {
        "content": "<p>can you do the same invocation for recording the modules?</p>",
        "id": 222228043,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610293980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/docs.2Ers.20compile.20times/near/222228043\">said</a>:</p>\n<blockquote>\n<p>can you do the same invocation for recording the modules?</p>\n</blockquote>\n<p><a href=\"#narrow/stream/131828-t-compiler/topic/docs.2Ers.20compile.20times/near/222227750\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/docs.2Ers.20compile.20times/near/222227750</a></p>",
        "id": 222228053,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610293994
    },
    {
        "content": "<p>was that message from a warm incremental cache?</p>",
        "id": 222228063,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610294023
    },
    {
        "content": "<p>I don't know what warm means in this context. I did a full build before making the change.</p>",
        "id": 222228111,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294056
    },
    {
        "content": "<p>had you done a full build with that <code>RUSTFLAGS</code>?</p>",
        "id": 222228116,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610294070
    },
    {
        "content": "<p>because that's showing that literally every module needed to be rebuilt</p>",
        "id": 222228120,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610294082
    },
    {
        "content": "<p>this is with <code>cargo rustc</code> so I woudln't have to do a full rebuild</p>",
        "id": 222228134,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294091
    },
    {
        "content": "<p>(full rebuilds take like 5 minutes)</p>",
        "id": 222228136,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294098
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>RUSTC_LOG=&quot;rustc_session::cgu_reuse_track=debug&quot; cargo +rustc2 rustc --lib -- -Z query-dep-graph\n</code></pre></div>",
        "id": 222228143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294109
    },
    {
        "content": "<p>I don't know if cargo rustc turns on incremental compilation or not</p>",
        "id": 222228145,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610294115
    },
    {
        "content": "<p>I'll try to reproduce this locally</p>",
        "id": 222228146,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610294118
    },
    {
        "content": "<p>if it's actually rebuilding every module, that would certainly explain the compilation times</p>",
        "id": 222228150,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610294145
    },
    {
        "content": "<p>I would expect it to, the command line (without --extern because there's like 400) is</p>\n<div class=\"codehilite\"><pre><span></span><code>rustc --crate-name docs_rs --edition=2018 src/lib.rs --error-format=json --json=diagnostic-rendered-ansi --crate-type lib --emit=dep-info,metadata,link -C embed-bitcode=no -C debuginfo=2 -Z query-dep-graph -C metadata=1d8b36df000bbc77 -C extra-filename=-1d8b36df000bbc77 --out-dir /home/joshua/docs.rs/target/debug/deps -C incremental=/home/joshua/docs.rs/target/debug/incremental -L dependency=/home/joshua/docs.rs/target/debug/deps\n</code></pre></div>",
        "id": 222228200,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294178
    },
    {
        "content": "<p>which has -C incremental=... at the end</p>",
        "id": 222228209,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610294208
    },
    {
        "content": "<p>ok, I found out why all of the cgus are being invalidated</p>",
        "id": 222241691,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312278
    },
    {
        "content": "<p>re-ordering the modules changes the crate hash, which changes the hash of <code>hir_owner(crate)</code></p>",
        "id": 222241733,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312296
    },
    {
        "content": "<p>I'm pretty sure that's legitimate</p>",
        "id": 222241734,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312306
    },
    {
        "content": "<p>why do they change the crate hash?</p>",
        "id": 222241740,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610312324
    },
    {
        "content": "<p>during codegen, we directly access <code>tcx.hir()</code> as a result of looking up an associated item</p>",
        "id": 222241743,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312333
    },
    {
        "content": "<p>without any intermediate query</p>",
        "id": 222241744,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312336
    },
    {
        "content": "<p>I don't follow, sorry</p>",
        "id": 222241752,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610312362
    },
    {
        "content": "<p>don't lots of things call tcx.hir()?</p>",
        "id": 222241756,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610312371
    },
    {
        "content": "<p><code>tcx.hir()</code> is a no-op, how does it invalidate anything?</p>",
        "id": 222241759,
        "sender_full_name": "cjgillot",
        "timestamp": 1610312378
    },
    {
        "content": "<p>the crate hash is computed (in part) by hashing a bunch of items, in-order</p>",
        "id": 222241767,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312393
    },
    {
        "content": "<p>well, <code>tcx.hir().get</code></p>",
        "id": 222241819,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312408
    },
    {
        "content": "<p>however, I think the hash of the CodegenUnit is also changing</p>",
        "id": 222241829,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312432
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 222241869,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312511
    },
    {
        "content": "<p>we don't actually hash the CodegenUnit - it's an LLVM object, so we can't</p>",
        "id": 222241899,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312523
    },
    {
        "content": "<p>instead, we just check that none of its incr-comp dependencies changed</p>",
        "id": 222241919,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312537
    },
    {
        "content": "<p>so, having a direct dependency on the crate hash is enough to invalidate the entire CodegenUnit</p>",
        "id": 222241921,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312551
    },
    {
        "content": "<p>I think the solution is to add an intermediate query</p>",
        "id": 222241929,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312578
    },
    {
        "content": "<p>the issue is that you're sending large chunks to LLVM at once, and changing any part of the chunk invalidates the whole thing?</p>",
        "id": 222242005,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610312672
    },
    {
        "content": "<p>why would an intermediate query help?</p>",
        "id": 222242008,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610312680
    },
    {
        "content": "<p>the issue isn't in LLVM itself - it's in how we track changes via the query system</p>",
        "id": 222242022,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312735
    },
    {
        "content": "<p>the 'red/green' system allows us to re-compute a standard query if one of its inputs changes</p>",
        "id": 222242029,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312755
    },
    {
        "content": "<p>if the result is the same, we can mark that query as green</p>",
        "id": 222242034,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312761
    },
    {
        "content": "<p>so, if we have</p>",
        "id": 222242069,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312763
    },
    {
        "content": "<p><code>typeck(MyStruct) -&gt; hir(MyStruct)</code>, and <code>hir(MyStruct)</code> changes</p>",
        "id": 222242081,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312779
    },
    {
        "content": "<p>wait, does -&gt; represent an output or a dependency?</p>",
        "id": 222242090,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610312804
    },
    {
        "content": "<p>then the query system will automatically re-run <code>typeck(MyStruct)</code> - if the hash of the result is unchanged, then we will mark <code>typeck(MyStruct)</code> as green</p>",
        "id": 222242096,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312810
    },
    {
        "content": "<p>a dependency</p>",
        "id": 222242097,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312812
    },
    {
        "content": "<p>However, <code>CompileCodegenUnit</code> is special - it's not a normal query</p>",
        "id": 222242107,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312833
    },
    {
        "content": "<p>we don't have a way of hashing it, so we instead check if any of its dependencies changed</p>",
        "id": 222242116,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312853
    },
    {
        "content": "<p>even if the dependency change won't actually affect the result</p>",
        "id": 222242123,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312865
    },
    {
        "content": "<p>by adding an intermediate query, the query system can re-run that intermediate query, marking it as green if the result doesn't change</p>",
        "id": 222242165,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312884
    },
    {
        "content": "<p>and one of the dependencies is currently \"the whole crate\"?</p>",
        "id": 222242171,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610312893
    },
    {
        "content": "<p>Essentially</p>",
        "id": 222242178,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312908
    },
    {
        "content": "<p>ok, that makes sense</p>",
        "id": 222242182,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610312916
    },
    {
        "content": "<p>here's the stacktrace</p>",
        "id": 222242183,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312919
    },
    {
        "content": "<p><a href=\"https://gist.github.com/Aaron1011/22d61cd7c3f0482f6c40c14886ee0521\">https://gist.github.com/Aaron1011/22d61cd7c3f0482f6c40c14886ee0521</a></p>",
        "id": 222242197,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312931
    },
    {
        "content": "<p>so, <code>opt_associated_item</code> should probably be query-ified</p>",
        "id": 222242206,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312955
    },
    {
        "content": "<p>or maybe <code>impl_of_method</code></p>",
        "id": 222242209,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312962
    },
    {
        "content": "<p>how did you tell the query system <code>hir_owner</code> is a 'forbidden edge'?</p>",
        "id": 222242211,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610312966
    },
    {
        "content": "<p><code>RUST_FORBID_DEP_GRAPH_EDGE=\"hir_own-&gt;Co\"</code></p>",
        "id": 222242217,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312985
    },
    {
        "content": "<p>there's a page on it in the rustc-dev-guide</p>",
        "id": 222242222,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610312991
    },
    {
        "content": "<p>also, the syntax of that is backwards from what you'd expect</p>",
        "id": 222242275,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610313030
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/docs.2Ers.20compile.20times/near/222242206\">said</a>:</p>\n<blockquote>\n<p>so, <code>opt_associated_item</code> should probably be query-ified</p>\n</blockquote>\n<p>how much overhead is there to making things go through queries? as opposed to a normal function call</p>",
        "id": 222242277,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610313037
    },
    {
        "content": "<p>I'm not sure exactly</p>",
        "id": 222242286,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610313047
    },
    {
        "content": "<p>in the past, I did this same thing for <code>Instance::resolve</code>, which gave big wins for incremental</p>",
        "id": 222242299,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610313068
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/67797\">https://github.com/rust-lang/rust/pull/67797</a></p>",
        "id": 222242311,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610313089
    },
    {
        "content": "<p>this would also help rustdoc I think</p>",
        "id": 222242389,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610313183
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/080ee6f5d7e262b1c5fd51a0bdac62b62d0ee546/src/librustdoc/passes/collect_intra_doc_links.rs#L390\">https://github.com/rust-lang/rust/blob/080ee6f5d7e262b1c5fd51a0bdac62b62d0ee546/src/librustdoc/passes/collect_intra_doc_links.rs#L390</a></p>",
        "id": 222242408,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610313211
    },
    {
        "content": "<p>oh wait this goes the other way</p>",
        "id": 222242412,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610313228
    },
    {
        "content": "<p><code>opt_associated_item</code> is when you <em>already</em> have the associated item</p>",
        "id": 222242431,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610313242
    },
    {
        "content": "<p>actually, that stacktrace might be for the wrong call to <code>hir_owner</code></p>",
        "id": 222242630,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610313500
    },
    {
        "content": "<p>ok, here's the correct stacktrace: <a href=\"https://gist.github.com/Aaron1011/4d04e6bf53bab8a3187c1e3a7918d387\">https://gist.github.com/Aaron1011/4d04e6bf53bab8a3187c1e3a7918d387</a></p>",
        "id": 222242956,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610313963
    },
    {
        "content": "<p>so, it looks like we should actually query-ify <code>needs_gdb_debug_scripts_section</code></p>",
        "id": 222242990,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314048
    },
    {
        "content": "<p>I'll also investigate why the crate hash is changing</p>",
        "id": 222242994,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314061
    },
    {
        "content": "<p>after looking more closely at how it's computed, it should be resistant to something like re-ordering the modules</p>",
        "id": 222242999,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314080
    },
    {
        "content": "<p>For the case of <code>krate_attrs</code>, <a href=\"https://github.com/rust-lang/rust/issues/79519\">#79519</a> should help.</p>",
        "id": 222243069,
        "sender_full_name": "cjgillot",
        "timestamp": 1610314201
    },
    {
        "content": "<p>For the case of <code>opt_associated_item</code>, this requires a deeper refactoring I'm afraid.</p>",
        "id": 222243115,
        "sender_full_name": "cjgillot",
        "timestamp": 1610314237
    },
    {
        "content": "<p>that didn't actually end up affecting this case</p>",
        "id": 222243133,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314263
    },
    {
        "content": "<p>however, query-ifying it would probably still be a good idea, since any changes to its input will invalidate the entire codegen unit</p>",
        "id": 222243145,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314286
    },
    {
        "content": "<p>even if the output is unchanged</p>",
        "id": 222243149,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314292
    },
    {
        "content": "<p>ok, it looks like the crate hash gets changed due to the span of those modules changing</p>",
        "id": 222243252,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314436
    },
    {
        "content": "<p>so, this case should also be helped by <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> 's work to move spans to side tables</p>",
        "id": 222243296,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314454
    },
    {
        "content": "<p>another strategy might be to try to adapt <code>llvm::computeLTOCacheKey</code> for a non-LTO module</p>",
        "id": 222243328,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314528
    },
    {
        "content": "<p>that is, actually try to hash the LLVM module we create, instead of using our query system to determine if we need to run codegen</p>",
        "id": 222243341,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314554
    },
    {
        "content": "<p>however, I think we'd basically need to create that from scratch, so it could be very fragile across LLVM upgrades</p>",
        "id": 222243393,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314592
    },
    {
        "content": "<p>because this is working on an existing LLVM module, and optimizing it in place? That seems more reliable, yeah. How expensive would it be to hash the module?</p>",
        "id": 222243400,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610314612
    },
    {
        "content": "<p>I'm not sure</p>",
        "id": 222243470,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314727
    },
    {
        "content": "<p>someone more familiar with LLVM would need to take a look at that</p>",
        "id": 222243478,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314738
    },
    {
        "content": "<p>I don't even know if this is remotely feasible</p>",
        "id": 222243483,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314747
    },
    {
        "content": "<p>so, in order of increasing difficulty, the fixes for this are:</p>",
        "id": 222243488,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314761
    },
    {
        "content": "<ol>\n<li>query-ify <code>needs_gdb_debug_scripts_section</code></li>\n</ol>",
        "id": 222243491,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314773
    },
    {
        "content": "<ol start=\"2\">\n<li>move attributes to a side table</li>\n</ol>",
        "id": 222243493,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314779
    },
    {
        "content": "<ol start=\"3\">\n<li>stop using the query system to track module reuse,  and instead try to hash the LLVM module somehow</li>\n</ol>",
        "id": 222243497,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314800
    },
    {
        "content": "<p>actually, wait</p>",
        "id": 222243559,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314897
    },
    {
        "content": "<p>we use the query system to determine if we should even generate the module in the first place, as opposed to re-using it from disk</p>",
        "id": 222243568,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314914
    },
    {
        "content": "<p>so you could feasibly do both? use the query system to avoid generating it, once it's generated hash it to see if the optimized module is cached?</p>",
        "id": 222243615,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610314951
    },
    {
        "content": "<p>yeah</p>",
        "id": 222243621,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314962
    },
    {
        "content": "<p>it wouldn't help in debug mode, I think</p>",
        "id": 222243625,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314967
    },
    {
        "content": "<p>but could help in a non-lto release mode, I think</p>",
        "id": 222243633,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610314982
    },
    {
        "content": "<p>hmm, my original times were in debug mode</p>",
        "id": 222243642,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610315001
    },
    {
        "content": "<p>e.g. we could skip re-running optimizations on a module, if we know that the input module is the same (by comparing the hash)</p>",
        "id": 222243650,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315017
    },
    {
        "content": "<p>was the slow part generating the module in the first place? I don't know what the inputs and outputs of <code>cgu_reuse_tracker</code> are</p>",
        "id": 222243699,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610315051
    },
    {
        "content": "<p>do you still have the pass timings?</p>",
        "id": 222243708,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315072
    },
    {
        "content": "<p>I can generate them pretty easily, one sec</p>",
        "id": 222243718,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610315090
    },
    {
        "content": "<p>For <code>opt_associated_item</code>, going through the HIR was not even necessary. Filed <a href=\"https://github.com/rust-lang/rust/issues/80889\">#80889</a>.</p>",
        "id": 222243769,
        "sender_full_name": "cjgillot",
        "timestamp": 1610315162
    },
    {
        "content": "<p>improvements to the query system will let us skip the rust-side codegen of the LLVM module</p>",
        "id": 222243815,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315225
    },
    {
        "content": "<p>while implementing the module hashing scheme could potentially let us re-use the output object file, and skip running our codegenned module through LLVM</p>",
        "id": 222243822,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/docs.2Ers.20compile.20times/near/222243497\">said</a>:</p>\n<blockquote>\n<ol start=\"3\">\n<li>stop using the query system to track module reuse,  and instead try to hash the LLVM module somehow</li>\n</ol>\n</blockquote>\n<p>Another solution would be to audit all the accesses to the HIR from CompileCodegenUnit, and then hard-forbid such dependencies.</p>",
        "id": 222243885,
        "sender_full_name": "cjgillot",
        "timestamp": 1610315317
    },
    {
        "content": "<p>yeah, that souds like a good idea</p>",
        "id": 222243896,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315335
    },
    {
        "content": "<p>ugh I don't have <code>summarize</code> installed, one sec</p>",
        "id": 222243902,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610315352
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&gt; summarize summarize docs_rs-31336.mm_profdata\n+--------------------------------------------------+-----------+-----------------+----------+------------+-----------------------+\n| Item                                             | Self time | % of total time | Time     | Item count | Incremental load time |\n+--------------------------------------------------+-----------+-----------------+----------+------------+-----------------------+\n| LLVM_module_codegen_emit_obj                     | 8.47s     | 32.211          | 8.47s    | 256        | 0.00ns                |\n+--------------------------------------------------+-----------+-----------------+----------+------------+-----------------------+\n| LLVM_passes                                      | 6.54s     | 24.880          | 6.54s    | 1          | 0.00ns                |\n+--------------------------------------------------+-----------+-----------------+----------+------------+-----------------------+\n| codegen_module                                   | 5.96s     | 22.647          | 6.68s    | 256        | 0.00ns                |\n+--------------------------------------------------+-----------+-----------------+----------+------------+-----------------------+\n| monomorphization_collector_graph_walk            | 783.81ms  | 2.981           | 1.66s    | 1          | 0.00ns                |\n+--------------------------------------------------+-----------+-----------------+----------+------------+-----------------------+\n| LLVM_module_codegen                              | 560.98ms  | 2.133           | 9.03s    | 256        | 0.00ns                |\n+--------------------------------------------------+-----------+-----------------+----------+------------+-----------------------+\n| expand_crate                                     | 450.84ms  | 1.714           | 531.46ms | 1          | 0.00ns                |\n+--------------------------------------------------+-----------+-----------------+----------+------------+-----------------------+\n| evaluate_obligation                              | 221.15ms  | 0.841           | 227.17ms | 7306       | 0.00ns                |\n+--------------------------------------------------+-----------+-----------------+----------+------------+-----------------------+\n| cgu_partitioning                                 | 192.88ms  | 0.733           | 257.60ms | 1          | 0.00ns                |\n+--------------------------------------------------+-----------+-----------------+----------+------------+-----------------------+\n| resolve_instance                                 | 180.35ms  | 0.686           | 367.38ms | 22189      | 0.00ns                |\n+--------------------------------------------------+-----------+-----------------+----------+------------+-----------------------+\n| LLVM_module_optimize_module_passes               | 164.37ms  | 0.625           | 164.37ms | 256        | 0.00ns                |\n+--------------------------------------------------+-----------+-----------------+----------+------------+----------------------\n</code></pre></div>",
        "id": 222243966,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610315418
    },
    {
        "content": "<p>so, it looks like the could be substantial wins from adding an a hashing-based approach</p>",
        "id": 222243972,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315440
    },
    {
        "content": "<p>we could skip <code>LLVM_module_codegen_emit_obj</code> and <code>LLVM_passes</code></p>",
        "id": 222243980,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315452
    },
    {
        "content": "<p>assuming that spans from the re-ordered module identifiers don't somehow find their way into the output</p>",
        "id": 222243990,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315467
    },
    {
        "content": "<p>that's half the time right there :D</p>",
        "id": 222243991,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610315467
    },
    {
        "content": "<p><code>codegen_module</code> takes much longer than I thought it would</p>",
        "id": 222244051,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315532
    },
    {
        "content": "<p>so, in the case where the query system still gives us some spurious invalidations, we still have to perform a fair amount of work</p>",
        "id": 222244063,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315556
    },
    {
        "content": "<p><code>codegen_module</code> corresponds to generating the LLVM module from the MIR, btw</p>",
        "id": 222244073,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315570
    },
    {
        "content": "<p>Is there a way to see all the invalidations of a given query?</p>",
        "id": 222244089,
        "sender_full_name": "cjgillot",
        "timestamp": 1610315604
    },
    {
        "content": "<p>I have a feeling <a href=\"http://docs.rs\">docs.rs</a> generates a <em>lot</em> of MIR</p>",
        "id": 222244091,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610315609
    },
    {
        "content": "<p>let me run LLVM-lines, one sec</p>",
        "id": 222244094,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610315618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> There's not a particularly nice way that I know of</p>",
        "id": 222244098,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315624
    },
    {
        "content": "<p>I've been using <code>rustc_query_system::dep_graph::graph=debug</code></p>",
        "id": 222244127,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315642
    },
    {
        "content": "<p>which will show you which depnodes are marked red due to dependencies</p>",
        "id": 222244148,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315659
    },
    {
        "content": "<p>but it's really spammy, and shows you green nodes too</p>",
        "id": 222244153,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315670
    },
    {
        "content": "<p>booo incremental is unhappy</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0460]: found possibly newer version of crate `std` which `git2` depends on\n --&gt; build.rs:1:5\n  |\n1 | use git2::Repository;\n  |     ^^^^\n  |\n  = note: perhaps that crate needs to be recompiled?\n  = note: the following crate versions were found:\n          crate `std`: /home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-fb0328f12ecfb148.rlib\n          crate `std`: /home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libstd-fb0328f12ecfb148.so\n          crate `git2`: /home/joshua/docs.rs/target/debug/deps/libgit2-3f2c8613a0c2a869.rlib\n</code></pre></div>",
        "id": 222244160,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610315680
    },
    {
        "content": "<p>there's also <code>-Z dep-tasks</code>, but it just shows (some) depnodes, not any edges</p>",
        "id": 222244168,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610315689
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&gt; cargo +rustc3 llvm-lines --lib\n  Lines          Copies        Function name\n  -----          ------        -------------\n  720967 (100%)  16309 (100%)  (TOTAL)\n   28195 (3.9%)   1563 (9.6%)  core::ptr::drop_in_place\n   13598 (1.9%)     21 (0.1%)  &lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct\n   10727 (1.5%)     35 (0.2%)  &lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed\n    6732 (0.9%)     36 (0.2%)  alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized\n    6593 (0.9%)    110 (0.7%)  core::result::Result&lt;T,E&gt;::map\n    6529 (0.9%)     91 (0.6%)  core::result::Result&lt;T,E&gt;::map_err\n    6400 (0.9%)     16 (0.1%)  docs_rs::web::page::web_page::WebPage::into_response\n    6348 (0.9%)     46 (0.3%)  core::alloc::layout::Layout::array\n    6269 (0.9%)    106 (0.6%)  core::option::Option&lt;T&gt;::map\n    5780 (0.8%)     20 (0.1%)  &lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed\n    5646 (0.8%)     40 (0.2%)  &lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend\n    5145 (0.7%)     35 (0.2%)  alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in\n</code></pre></div>",
        "id": 222244342,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610315979
    },
    {
        "content": "<p>I don't have anything to compare this to, is 720k lines a lot?</p>",
        "id": 222244353,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610315993
    },
    {
        "content": "<p>(also, this shows that <a href=\"https://github.com/rust-lang/rust/issues/77960\">https://github.com/rust-lang/rust/issues/77960</a> would have a big impact I think)</p>",
        "id": 222244412,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610316030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> also, keep in mind that <em>every</em> module is getting invalidated in your case</p>",
        "id": 222244455,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610316104
    },
    {
        "content": "<p>once the attribute query issue is fixed, then a (hopefully) large number of modules will be detected as green via the existing query system</p>",
        "id": 222244504,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610316128
    },
    {
        "content": "<p>so the other issue I've run into is that <code>cargo test</code> tends to kill my computer</p>",
        "id": 222244604,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610316285
    },
    {
        "content": "<p>we have a lot of different tests, I think rustc might be running out of memory?</p>",
        "id": 222244611,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610316303
    },
    {
        "content": "<p>Should this module reorder case be added to the perf suite? Seems like an under-investigated one.</p>",
        "id": 222244681,
        "sender_full_name": "cjgillot",
        "timestamp": 1610316420
    },
    {
        "content": "<p>I think that would be a good idea</p>",
        "id": 222244689,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610316438
    }
]