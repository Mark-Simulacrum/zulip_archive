[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so i'm not 100% sure that miri is the right place for the const fn intrinsics</p>",
        "id": 176540753,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397218
    },
    {
        "content": "<p>I actually started implementing it there, but the \"intrinsics\" being matched there are more like FFI calls and such</p>",
        "id": 176540775,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397242
    },
    {
        "content": "<p>yes, just like in codegen</p>",
        "id": 176540807,
        "sender_full_name": "oli",
        "timestamp": 1569397260
    },
    {
        "content": "<p>miri is more like codegen and less like const eval</p>",
        "id": 176540814,
        "sender_full_name": "oli",
        "timestamp": 1569397268
    },
    {
        "content": "<p>yeah</p>",
        "id": 176540819,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397275
    },
    {
        "content": "<p>what I'm saying is that you can literally run your normal code using those intrinsics in miri</p>",
        "id": 176540828,
        "sender_full_name": "oli",
        "timestamp": 1569397288
    },
    {
        "content": "<p>so right now the simd intrinsics are quite tied to the llvm codegen backend</p>",
        "id": 176540831,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397292
    },
    {
        "content": "<p>yes, but IIUC that would also work by putting them in const eval right ?</p>",
        "id": 176540843,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397305
    },
    {
        "content": "<p>and once all that works nicely (you'll be iterating faster on miri than on rustc), we can move to rustc</p>",
        "id": 176540846,
        "sender_full_name": "oli",
        "timestamp": 1569397312
    },
    {
        "content": "<p>I see</p>",
        "id": 176540890,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397326
    },
    {
        "content": "<p>yes, but we don't put things in const eval that aren't RFCed unless there's a very good reason</p>",
        "id": 176540919,
        "sender_full_name": "oli",
        "timestamp": 1569397336
    },
    {
        "content": "<p>so, maybe we could FCP these ?</p>",
        "id": 176540926,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397350
    },
    {
        "content": "<p>in miri we'll be much more lenient with hacks and stuff</p>",
        "id": 176540930,
        "sender_full_name": "oli",
        "timestamp": 1569397355
    },
    {
        "content": "<p>I mean we want to support these properly at some point</p>",
        "id": 176540938,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397367
    },
    {
        "content": "<p>IIRC we already handle simd_shuffles somewhere in there for some reason</p>",
        "id": 176540943,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397376
    },
    {
        "content": "<p>sure, but you can't really test them without higher level changes</p>",
        "id": 176540952,
        "sender_full_name": "oli",
        "timestamp": 1569397387
    },
    {
        "content": "<p>(or at least I've seen simd_shuffle in the const eval code)</p>",
        "id": 176540953,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397390
    },
    {
        "content": "<p>that's not in const eval</p>",
        "id": 176540956,
        "sender_full_name": "oli",
        "timestamp": 1569397395
    },
    {
        "content": "<p>we const eval the simd shuffle args</p>",
        "id": 176540959,
        "sender_full_name": "oli",
        "timestamp": 1569397400
    },
    {
        "content": "<p>that's different</p>",
        "id": 176540961,
        "sender_full_name": "oli",
        "timestamp": 1569397404
    },
    {
        "content": "<p>ah, yes that makes sense, they must be constant</p>",
        "id": 176540964,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397416
    },
    {
        "content": "<p>so the reason I don't want this in const eval is because I hate the test that you added. Not because of the content, but because of the unleash and other errors</p>",
        "id": 176540971,
        "sender_full_name": "oli",
        "timestamp": 1569397442
    },
    {
        "content": "<p>yes</p>",
        "id": 176541012,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397449
    },
    {
        "content": "<p>it is really hard to differentiate between actual hacks and incomplete or broken things</p>",
        "id": 176541014,
        "sender_full_name": "oli",
        "timestamp": 1569397456
    },
    {
        "content": "<p>in miri you can do this cleanly</p>",
        "id": 176541016,
        "sender_full_name": "oli",
        "timestamp": 1569397461
    },
    {
        "content": "<p>no hacks needed</p>",
        "id": 176541017,
        "sender_full_name": "oli",
        "timestamp": 1569397464
    },
    {
        "content": "<p>no intermingling with const fn</p>",
        "id": 176541018,
        "sender_full_name": "oli",
        "timestamp": 1569397468
    },
    {
        "content": "<p>wait, can't we just say that these intrinsics are const fn ?</p>",
        "id": 176541021,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397474
    },
    {
        "content": "<p>like when doing <code>extern \"platform-intrinsics\" { ... }</code></p>",
        "id": 176541029,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397499
    },
    {
        "content": "<p>You are using the word \"just\" just like I'm using it often and I don't think it means what we use it for</p>",
        "id": 176541038,
        "sender_full_name": "oli",
        "timestamp": 1569397506
    },
    {
        "content": "<p>can I just say <code>const fn simd_insert</code> ?</p>",
        "id": 176541039,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397506
    },
    {
        "content": "<p>and no that doesn't work ;)</p>",
        "id": 176541047,
        "sender_full_name": "oli",
        "timestamp": 1569397518
    },
    {
        "content": "<p>so what would be required to test these without unleash ?</p>",
        "id": 176541050,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397529
    },
    {
        "content": "<p>I mean, I think what I want is to make these true const fns</p>",
        "id": 176541104,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397570
    },
    {
        "content": "<p>you need to add them to the big list of const evaluable intrinsics, grep for \"size_of\" (including quotes), there aren't that many uses of it and one of them is the list</p>",
        "id": 176541111,
        "sender_full_name": "oli",
        "timestamp": 1569397579
    },
    {
        "content": "<p>ok, yea, we could add them to the list</p>",
        "id": 176541124,
        "sender_full_name": "oli",
        "timestamp": 1569397611
    },
    {
        "content": "<p>ah, yes, I think I've seen that list (I added the <code>is_const_eval</code> thingy there by mistake)</p>",
        "id": 176541125,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397612
    },
    {
        "content": "<p>so looking at all the simd intrinsics that we have</p>",
        "id": 176541141,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397631
    },
    {
        "content": "<p>I think that most of them can be added to the list</p>",
        "id": 176541144,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397641
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L9\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L9\">https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L9</a> for the list</p>",
        "id": 176541151,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397665
    },
    {
        "content": "<p>kind of overlapping with <a href=\"https://github.com/rust-lang/rust/pull/61835\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61835\">https://github.com/rust-lang/rust/pull/61835</a> but that should be manageable</p>",
        "id": 176541161,
        "sender_full_name": "oli",
        "timestamp": 1569397675
    },
    {
        "content": "<p>and there: <a href=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L51\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L51\">https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L51</a></p>",
        "id": 176541162,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397678
    },
    {
        "content": "<p>most of them are just \"add\", \"eq\", etc.</p>",
        "id": 176541216,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397708
    },
    {
        "content": "<p>there are some tricky ones though, e.g., simd_select does a branch, but both arguments are always evaluated</p>",
        "id": 176541219,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397725
    },
    {
        "content": "<p>I so want these to have const generics &lt;/offtopic&gt;</p>",
        "id": 176541221,
        "sender_full_name": "oli",
        "timestamp": 1569397730
    },
    {
        "content": "<p>yes that would improve their API</p>",
        "id": 176541228,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397740
    },
    {
        "content": "<p>the plan is not to expose any of these</p>",
        "id": 176541234,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397745
    },
    {
        "content": "<p>so in miri you only need one impl for all of these</p>",
        "id": 176541248,
        "sender_full_name": "oli",
        "timestamp": 1569397762
    },
    {
        "content": "<p>but to use them internally in core to implement normal Rust wrappers that expose the functionality in a stable way</p>",
        "id": 176541249,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397765
    },
    {
        "content": "<p>because you can extract the index from the name ;)</p>",
        "id": 176541251,
        "sender_full_name": "oli",
        "timestamp": 1569397768
    },
    {
        "content": "<p>you mean the shuffles ?</p>",
        "id": 176541261,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397784
    },
    {
        "content": "<p>I think we should refactor them in the llvm_codegen_backend at some point anyways</p>",
        "id": 176541274,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397802
    },
    {
        "content": "<p>yes</p>",
        "id": 176541278,
        "sender_full_name": "oli",
        "timestamp": 1569397802
    },
    {
        "content": "<p>the way it is currently done isn't great</p>",
        "id": 176541331,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397814
    },
    {
        "content": "<p>I think we can probably just make the array a generic parameter</p>",
        "id": 176541381,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397871
    },
    {
        "content": "<p>even without const generics</p>",
        "id": 176541384,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397879
    },
    {
        "content": "<p>heh or that</p>",
        "id": 176541390,
        "sender_full_name": "oli",
        "timestamp": 1569397887
    },
    {
        "content": "<p>but nobody has bothered</p>",
        "id": 176541395,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397894
    },
    {
        "content": "<p>ok, so I'd be fine with unstably adding these intrinsics just like in your PR, as long as the tests don't need unleash, but just a feature gate</p>",
        "id": 176541397,
        "sender_full_name": "oli",
        "timestamp": 1569397896
    },
    {
        "content": "<p>so appart from simd_select, then there are also scatter and gather: <a href=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L97\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L97\">https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L97</a></p>",
        "id": 176541447,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397924
    },
    {
        "content": "<p>well... I don't want to see 5 impls of the same intrinsic in const eval :P whatever solves that is fine with me for now</p>",
        "id": 176541449,
        "sender_full_name": "oli",
        "timestamp": 1569397928
    },
    {
        "content": "<p>these take a vector of pointers, and dereferences them</p>",
        "id": 176541454,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I suppose i can match <code>s.starts_with(\"simd_shuffle\")</code> and save some boilerplate</p>",
        "id": 176541494,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569397999
    },
    {
        "content": "<p>oh matching on all names is fine</p>",
        "id": 176541502,
        "sender_full_name": "oli",
        "timestamp": 1569398014
    },
    {
        "content": "<p>as long as the code is just one arm</p>",
        "id": 176541505,
        "sender_full_name": "oli",
        "timestamp": 1569398023
    },
    {
        "content": "<p>for the vector of pointers, I don't know if need extra care, like gating that on a feature gate or something</p>",
        "id": 176541552,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569398045
    },
    {
        "content": "<p>there was a gate for pointers in const fn, so it might make sense to reuse that</p>",
        "id": 176541556,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569398066
    },
    {
        "content": "<p>these are all going to be scalarized internally, so since the operations for pointer dereference are already feature-gated, then this might not be necessary</p>",
        "id": 176541575,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569398117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so I've pushed a commit that removes the need for -Zunleash</p>",
        "id": 176543793,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569400160
    },
    {
        "content": "<p>other than that, could you let me know if that PR uses Operand/OpTy/MPlace/Place/... correctly ?</p>",
        "id": 176543819,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569400193
    },
    {
        "content": "<p>I'm not sure when should I prefer MPlaceTy vs PlaceTy, or Immediate vs ImmTy, or whether the way in which I read an Abi::Vector into a Vec&lt;ImmTy&gt; is the right way to do that</p>",
        "id": 176543899,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569400242
    },
    {
        "content": "<p>I'd rather understand those well before sending PRs for the remaining intrinsics</p>",
        "id": 176543920,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569400270
    },
    {
        "content": "<p>yes, looks generally alright from the way you use operand, place and mplace</p>",
        "id": 176544653,
        "sender_full_name": "oli",
        "timestamp": 1569400892
    },
    {
        "content": "<p>I left a comment for a refactoring</p>",
        "id": 176544666,
        "sender_full_name": "oli",
        "timestamp": 1569400912
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> by assert you mean to use <code>bug!</code> right?</p>",
        "id": 176545814,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569401998
    },
    {
        "content": "<p>there's an <code>if</code>, you can just assert the condition instead of <code>bug!</code>ing in the <code>else</code></p>",
        "id": 176546787,
        "sender_full_name": "oli",
        "timestamp": 1569402868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> looking at the other simd intrinsics</p>",
        "id": 176549169,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569404974
    },
    {
        "content": "<p>i wonder why there are so many binary_op_ methods</p>",
        "id": 176549198,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405000
    },
    {
        "content": "<p>and why the \"general\" one does not handle all cases</p>",
        "id": 176549252,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405009
    },
    {
        "content": "<p>e.g. we have <code>BinOp::Add</code>, so we need many <code>binary_op_</code> methods to handle wrapping, saturating, overflowing, etc. add</p>",
        "id": 176549288,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405049
    },
    {
        "content": "<p>why not have <code>BinOp::WrappingAdd</code>, <code>BinOp::SaturatingAdd</code>, <code>BinOp::OverflowingAdd</code>, etc. instead ?</p>",
        "id": 176549305,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405073
    },
    {
        "content": "<p>the reason is that the general one is equivalent to <code>checked_*</code> and the others are just essentially wrappers around the <code>checked_*</code> op</p>",
        "id": 176549414,
        "sender_full_name": "oli",
        "timestamp": 1569405170
    },
    {
        "content": "<p>basically for code deduplication</p>",
        "id": 176549431,
        "sender_full_name": "oli",
        "timestamp": 1569405186
    },
    {
        "content": "<p>But can't that happen inside a generic <code>binary_op</code> function ?</p>",
        "id": 176549643,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405344
    },
    {
        "content": "<p>For SIMD types, I'd like to just loop over the elements, call binary_op, and then do some result handling before writing to the destination vector</p>",
        "id": 176549720,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405389
    },
    {
        "content": "<p>it essentially doesn't matter where you move the complexity to</p>",
        "id": 176549722,
        "sender_full_name": "oli",
        "timestamp": 1569405391
    },
    {
        "content": "<p>well the complexity now gets duplicated to all simd ops, because now they have to handle it again at that level</p>",
        "id": 176549743,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405411
    },
    {
        "content": "<p>in all other interpreters I know, you just have one variant per operation, and a binary_op function that handles all binary operations</p>",
        "id": 176549810,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405446
    },
    {
        "content": "<p>simd does overflowing ops?</p>",
        "id": 176549819,
        "sender_full_name": "oli",
        "timestamp": 1569405460
    },
    {
        "content": "<p>it does saturating, wrapping</p>",
        "id": 176549827,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405469
    },
    {
        "content": "<p>it also does comparisons, etc.</p>",
        "id": 176549837,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405479
    },
    {
        "content": "<p>oh... I've never seen those</p>",
        "id": 176549886,
        "sender_full_name": "oli",
        "timestamp": 1569405483
    },
    {
        "content": "<p>simd_saturating_add I think</p>",
        "id": 176549899,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405491
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L51\" target=\"_blank\" title=\"https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L51\">https://github.com/rust-lang-nursery/packed_simd/blob/master/src/codegen/llvm.rs#L51</a> has only nonwrapping ones</p>",
        "id": 176549900,
        "sender_full_name": "oli",
        "timestamp": 1569405494
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/search?q=simd_saturating_add&amp;unscoped_q=simd_saturating_add\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/search?q=simd_saturating_add&amp;unscoped_q=simd_saturating_add\">https://github.com/rust-lang/rust/search?q=simd_saturating_add&amp;unscoped_q=simd_saturating_add</a></p>",
        "id": 176549917,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405527
    },
    {
        "content": "<p>either way, even if its just for Add vs Eq</p>",
        "id": 176549932,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405541
    },
    {
        "content": "<p>I need two different branches for the two different kinds of Ops :/</p>",
        "id": 176549953,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405553
    },
    {
        "content": "<p>looking at codegen, you have the same problem there</p>",
        "id": 176550054,
        "sender_full_name": "oli",
        "timestamp": 1569405651
    },
    {
        "content": "<p>I'm not sure how to avoid it</p>",
        "id": 176550059,
        "sender_full_name": "oli",
        "timestamp": 1569405657
    },
    {
        "content": "<p>you can always add more wrapper functions ;)</p>",
        "id": 176550074,
        "sender_full_name": "oli",
        "timestamp": 1569405667
    },
    {
        "content": "<p>if you manage to share the wrappers with regular wrapping/checked/... math, all the better</p>",
        "id": 176550105,
        "sender_full_name": "oli",
        "timestamp": 1569405712
    },
    {
        "content": "<p>the codegen for the SIMD instructions is completely different than for the scalar instructions</p>",
        "id": 176550161,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405736
    },
    {
        "content": "<p>for an interpreter, the execution of a SIMD instruction is just \"loop over the elements and execute the scalar operation\"</p>",
        "id": 176550170,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405759
    },
    {
        "content": "<p>right, and you can just create a function that takes a closure, does the iteration, call the closure on each element</p>",
        "id": 176550190,
        "sender_full_name": "oli",
        "timestamp": 1569405788
    },
    {
        "content": "<p>no, I can't</p>",
        "id": 176550198,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405799
    },
    {
        "content": "<p>oh?</p>",
        "id": 176550201,
        "sender_full_name": "oli",
        "timestamp": 1569405803
    },
    {
        "content": "<p>I want to write this code to cover all the arithmetic, bitwise, comparison, etc. binary operations:</p>",
        "id": 176550205,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405811
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">is_simd_binop</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">binop</span>: <span class=\"nc\">mir</span>::<span class=\"n\">BinOp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">simd_to_binop</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">simd_len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">..</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">binary_op</span><span class=\"p\">(</span><span class=\"n\">binop</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">operand_field</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">operand_field</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">write_immediate</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">operand_field</span><span class=\"p\">(</span><span class=\"n\">dest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 176550422,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569405993
    },
    {
        "content": "<p>but I can't, because I need to duplicate the logic of the saturatin, wrapping, checked, etc. intrinsics in here</p>",
        "id": 176550545,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569406113
    },
    {
        "content": "<p>because the binop for all of them is just <code>Add</code></p>",
        "id": 176550557,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569406127
    },
    {
        "content": "<p>These are, however, different binary operations</p>",
        "id": 176550569,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569406140
    },
    {
        "content": "<p>if we were to have <code>mir::BinOp::CheckedAdd</code>, <code>WrappingAdd</code>, <code>SaturatingAdd</code>, <code>UncheckedAdd</code>, etc. instead</p>",
        "id": 176550591,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569406170
    },
    {
        "content": "<p>then at least at this level it would be super simple to just fall back to scalar code</p>",
        "id": 176550609,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569406193
    },
    {
        "content": "<p>that would mean that <code>binary_op</code> would need to match on these, and dispatch on them, and that wherever <code>SaturatingAdd</code> is implemented, that code might want to execute a <code>BinOp::CheckedAdd</code> internally</p>",
        "id": 176550668,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569406229
    },
    {
        "content": "<p>I mean, having to match and convert <code>Add</code> to <code>(Add, true, false)</code> or whatever to indicate wrapping, checked, etc. semantics is weird</p>",
        "id": 176550715,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569406298
    },
    {
        "content": "<p>so doing this would require <del>basic</del> fundamental changes to MIR, cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 176552030,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569407745
    },
    {
        "content": "<p>so having look into that a bit more, I think the <code>mir::BinOp</code> only are intended to match the builtin <code>+</code> binary operators</p>",
        "id": 176554376,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569410314
    },
    {
        "content": "<p>maybe we could have a different <code>BinOp</code> enum in the interpreter for the binary operations</p>",
        "id": 176554380,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569410335
    },
    {
        "content": "<p>I still don't see why we would need that. You can create your own <code>binary_op</code> function that also takes an <code>enum OpKind { Checked, Wrapping, Saturating, Unchecked }</code> and dispatches the logic depending on that</p>",
        "id": 176554647,
        "sender_full_name": "oli",
        "timestamp": 1569410642
    },
    {
        "content": "<p>then <code>simd_to_binop</code> can return two enums</p>",
        "id": 176554668,
        "sender_full_name": "oli",
        "timestamp": 1569410655
    },
    {
        "content": "<p>as I said before, I don't think this needs deeper changes, you can just add more wrappers that give you the API you want</p>",
        "id": 176554732,
        "sender_full_name": "oli",
        "timestamp": 1569410726
    },
    {
        "content": "<p>so now that i'm doing the asserts</p>",
        "id": 176555327,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569411260
    },
    {
        "content": "<p>how do I check that the compiler ices properly ?</p>",
        "id": 176555349,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569411286
    },
    {
        "content": "<p>the expected error is now 101</p>",
        "id": 176555379,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569411319
    },
    {
        "content": "<p>and not just 1</p>",
        "id": 176555383,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569411323
    },
    {
        "content": "<p>I also need one test per failure</p>",
        "id": 176555390,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569411328
    },
    {
        "content": "<p>:/</p>",
        "id": 176555393,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569411331
    },
    {
        "content": "<blockquote>\n<p>as I said before, I don't think this needs deeper changes, you can just add more wrappers that give you the API you want</p>\n</blockquote>\n<p>So... I should add a method to <code>operator.rs</code> that's called from <code>intrinsics.rs</code> and dispatches back to <code>intrinsics.rs</code> when necessary ?</p>",
        "id": 176555913,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569411801
    },
    {
        "content": "<p>Like, for example, the binary saturating add simd operation would call the simd intrinsic for that, which would call this generic method, which would dispatch back to the scalar saturating intrinsics, which then call the normal add operations in <code>operators.rs</code></p>",
        "id": 176556015,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569411904
    },
    {
        "content": "<p>I suppose I could do that</p>",
        "id": 176556019,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569411913
    },
    {
        "content": "<blockquote>\n<p>how do I check that the compiler ices properly ?</p>\n</blockquote>\n<p>you don't need to do that</p>",
        "id": 176557281,
        "sender_full_name": "oli",
        "timestamp": 1569413082
    },
    {
        "content": "<p>the PR currently does that, should I remove it ?</p>",
        "id": 176557661,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569413452
    },
    {
        "content": "<p>yea, there's so many ways to ICE the compiler with unstable things and especially intrinsics, there's no point to it</p>",
        "id": 176558871,
        "sender_full_name": "oli",
        "timestamp": 1569414562
    },
    {
        "content": "<p>it won't actuall help us catch bugs if we test for it</p>",
        "id": 176558888,
        "sender_full_name": "oli",
        "timestamp": 1569414580
    },
    {
        "content": "<p>otherwise the PR lgtm now</p>",
        "id": 176559061,
        "sender_full_name": "oli",
        "timestamp": 1569414710
    },
    {
        "content": "<p>I'm removing the fail tests, will update it soon</p>",
        "id": 176559112,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569414727
    },
    {
        "content": "<p>Done</p>",
        "id": 176559155,
        "sender_full_name": "gnzlbg",
        "timestamp": 1569414786
    }
]