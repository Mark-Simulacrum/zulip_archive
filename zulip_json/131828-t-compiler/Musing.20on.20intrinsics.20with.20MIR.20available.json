[
    {
        "content": "<p>Splitting this off from the cg_gcc thread...</p>\n<p>Right now we do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"rust-intrinsic\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ctlz_nonzero</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Would it be plausible to instead do something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"rust-intrinsic\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ctlz_nonzero</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nb\">Copy</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">ctlz</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>With the backend then being able to use that implementation of the intrinsic if they don't override it?</p>\n<p>(If this conversation was already exhausted related to the simd stuff, sorry.)</p>",
        "id": 243689025,
        "sender_full_name": "scottmcm",
        "timestamp": 1624470987
    },
    {
        "content": "<p>It'd be nice to be able to inline the definitions of the fallbacks, yeah.</p>",
        "id": 243689710,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624471299
    },
    {
        "content": "<p>(And write those fallbacks in Rust rather than in MIR.)</p>",
        "id": 243689742,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1624471309
    },
    {
        "content": "<p>Many of these are provided by compiler-builtins</p>",
        "id": 243689842,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1624471341
    },
    {
        "content": "<p>yes, this is something we'd really like, and not just for these intrinsics, but especially for SIMD intrinsics</p>",
        "id": 243719813,
        "sender_full_name": "oli",
        "timestamp": 1624486418
    },
    {
        "content": "<p>Reminds me of <a href=\"#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/reifying.20function.20ptrs.20for.20intrinsics.20.2384297</a></p>",
        "id": 243722800,
        "sender_full_name": "nagisa",
        "timestamp": 1624488635
    }
]