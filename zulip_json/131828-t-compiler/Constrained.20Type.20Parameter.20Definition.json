[
    {
        "content": "<p>Does anybody have a definition for when a type parameter is considered constrained?</p>",
        "id": 245283245,
        "sender_full_name": "BN",
        "timestamp": 1625731312
    },
    {
        "content": "<p>Or explain to me, why in the following code V is not considered constrained:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;T,U,V&gt; Foo&lt;T&gt; for T\n    where (T,U): Bar&lt;Out=V&gt;\n</code></pre></div>",
        "id": 245283357,
        "sender_full_name": "BN",
        "timestamp": 1625731371
    },
    {
        "content": "<p>might be becuase <code>U</code> isnt constrained?</p>",
        "id": 245283689,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1625731611
    },
    {
        "content": "<p>No, here <code>U</code> is also unconstrained:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;T,U&gt; Bar for T\n    where T : Bar&lt;Out=U&gt;\n</code></pre></div>",
        "id": 245283827,
        "sender_full_name": "BN",
        "timestamp": 1625731693
    },
    {
        "content": "<p>I suppose a type parameter has to occur as an input parameter for it to be constrained, but would be nice if somebody could validate that.</p>",
        "id": 245283894,
        "sender_full_name": "BN",
        "timestamp": 1625731751
    },
    {
        "content": "<p>I could have sworn that should consider <code>U</code> to be constrained</p>",
        "id": 245283910,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1625731765
    },
    {
        "content": "<p>yeah so did i</p>",
        "id": 245283923,
        "sender_full_name": "BN",
        "timestamp": 1625731782
    },
    {
        "content": "<p>i thought the rules were that the param has to be used in the self type or trait or used as an assoc type bound..? but that 3rd one seems to not be the case</p>",
        "id": 245284000,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1625731817
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 245284273,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1625732033
    },
    {
        "content": "<p>this compiles</p>",
        "id": 245284285,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1625732036
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this seems to not</p>",
        "id": 245284465,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1625732153
    },
    {
        "content": "<p>hm interesting. kind of confusing without a proper definition.</p>",
        "id": 245284537,
        "sender_full_name": "BN",
        "timestamp": 1625732181
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>oh this on the otherhand <em>does</em> compile</p>",
        "id": 245284560,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1625732211
    },
    {
        "content": "<p>this is implemented <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/constrained_generic_params.rs\">here</a> in the compiler</p>",
        "id": 245284749,
        "sender_full_name": "BN",
        "timestamp": 1625732384
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/constrained_generic_params.rs#L188-L194\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/constrained_generic_params.rs#L188-L194</a></p>",
        "id": 245284811,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1625732415
    },
    {
        "content": "<p>might be this? no idea</p>",
        "id": 245284820,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1625732418
    },
    {
        "content": "<p>the not-compiling code does infact seem to be using an assoc type from the trait we're implementing</p>",
        "id": 245284842,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1625732442
    },
    {
        "content": "<p>yes I think you're right, that seems to be the reason why your example doesn't compile.</p>",
        "id": 245285400,
        "sender_full_name": "BN",
        "timestamp": 1625732835
    },
    {
        "content": "<p>This doesn't compile either though:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct S&lt;F&gt;(F);\n\nimpl &lt;&#39;a, F, G&gt; S&lt;F&gt;\nwhere\n    F: Fn(&amp;&#39;a u8) -&gt; G\n{\n    fn call(&amp;mut self) -&gt; G {\n        (self.0)(&amp;1)\n    }\n}\n</code></pre></div>\n<p>and this seems to be for different reasons, here G is considered unconstrained.</p>",
        "id": 245285484,
        "sender_full_name": "BN",
        "timestamp": 1625732884
    },
    {
        "content": "<p>There we hit <a href=\"https://github.com/rust-lang/rust/blob/ac8c3bfffb2829d0af075a5d4020fb7e9e86c3a2/compiler/rustc_typeck/src/constrained_generic_params.rs#L201-L205\">this conditional</a> and never process the type for the projection. But simply moving the code that processes the type for projection before that if statement causes code like my first example not to throw an error on <code>V</code>, which probably is not correct.</p>",
        "id": 245285705,
        "sender_full_name": "BN",
        "timestamp": 1625733040
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"328097\">BN</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Constrained.20Type.20Parameter.20Definition/near/245285484\">said</a>:</p>\n<blockquote>\n<p>This doesn't compile either though:</p>\n<div class=\"codehilite\"><pre><span></span><code>struct S&lt;F&gt;(F);\n\nimpl &lt;&#39;a, F, G&gt; S&lt;F&gt;\nwhere\n    F: Fn(&amp;&#39;a u8) -&gt; G\n{\n    fn call(&amp;mut self) -&gt; G {\n        (self.0)(&amp;1)\n    }\n}\n</code></pre></div>\n<p>and this seems to be for different reasons, here G is considered unconstrained.</p>\n</blockquote>\n<p><code>'a</code> is unconstrained, there, and we could have <code>G = &amp;'a u8</code>, for instance. Either you meant <code>'a = 'static</code>, or <code>F : for&lt;'a&gt; Fn(&amp;'a â€¦</code></p>",
        "id": 245455019,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1625843165
    }
]