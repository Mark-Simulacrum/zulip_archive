[
    {
        "content": "<p>is it safe to say that as long as closures are implemented the way they are, allowing multiple closures to borrow the same variable (assuming some way of telling rust that the lifetime is valid and that only one of the closures can be invoked at any time), is fundamentally impossible?</p>",
        "id": 220994527,
        "sender_full_name": "devsnek",
        "timestamp": 1609046691
    },
    {
        "content": "<p>actually if a closure was <code>!Sync</code> and <code>!Send</code>, couldn't all the borrows be <code>*mut</code> instead of <code>&amp;mut</code> so they're realized when the closure executes instead of when it is declared</p>",
        "id": 220996393,
        "sender_full_name": "devsnek",
        "timestamp": 1609050810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"219805\">devsnek</span> <a href=\"#narrow/stream/131828-t-compiler/topic/multiple.20closure.20borrows/near/220994527\">said</a>:</p>\n<blockquote>\n<p>is it safe to say that as long as closures are implemented the way they are, allowing multiple closures to borrow the same variable (assuming some way of telling rust that the lifetime is valid and that only one of the closures can be invoked at any time), is fundamentally impossible?</p>\n</blockquote>\n<p>So we are working on a feature (capture_disjoint_fields, rfcs#2229) if enabled will affect what a closure borrows. </p>\n<p>Eg: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mut_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mut_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Now without the feature, this won't compile because <code>t</code> is borrowed completely by <code>c1</code> and therefore <code>t</code> can't be borrowed by <code>c2</code>. However you enable the feature then this becomes valid code. That said you can't have <code>c2</code> capture <code>t.0</code> because that will be trying to borrow the same place twice mutably<br>\n.</p>",
        "id": 220996395,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609050816
    },
    {
        "content": "<p>i'm thinking more like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"> </span><span class=\"c1\">// !Sync+!Send</span>\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">});</span><span class=\"w\"> </span><span class=\"c1\">// !Sync+!Send</span>\n<span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">run</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// runs above closures in some pattern</span>\n</code></pre></div>\n<p>it would seem this is theoretically possible, just not something rustc knows how to do</p>",
        "id": 220996440,
        "sender_full_name": "devsnek",
        "timestamp": 1609050893
    },
    {
        "content": "<p>I'm not familar with Send and Sync to answer that question, but I should look into this</p>",
        "id": 220996454,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609050958
    },
    {
        "content": "<p>It's basically just saying the closure can't be shared or moved to another thread</p>",
        "id": 220996494,
        "sender_full_name": "devsnek",
        "timestamp": 1609050980
    },
    {
        "content": "<p>Ah, the feature shouldn't affect the behavior here because it only adds support for  precise paths to be captured</p>",
        "id": 220996502,
        "sender_full_name": "Aman Arora",
        "timestamp": 1609051031
    },
    {
        "content": "<p>yeah, my point was when the whole resource is borrowed in both cases, like <code>x</code> in my example</p>",
        "id": 220996509,
        "sender_full_name": "devsnek",
        "timestamp": 1609051067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219805\">@devsnek</span> no need to go <code>*mut</code>, <code>&amp;Cell</code> and the like suffice for that.<br>\nThere is also the option to give an additional env parameter to the closure, so that you capture all the \"use once\" stuff inside a variable a then explicitly pass it to each closure when called</p>",
        "id": 221005181,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1609068533
    }
]