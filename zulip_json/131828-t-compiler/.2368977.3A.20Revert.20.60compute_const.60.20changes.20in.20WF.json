[
    {
        "content": "<p>I am currently trying to fix <a href=\"https://github.com/rust-lang/rust/issues/68977\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68977\">https://github.com/rust-lang/rust/issues/68977</a> and need some mentoring</p>\n<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 190982647,
        "sender_full_name": "lcnr",
        "timestamp": 1584539697
    },
    {
        "content": "<p>well, the first step would be to rename it from <code>compute_array_len</code> back to <code>compute_const</code> and fix the comment</p>",
        "id": 190982838,
        "sender_full_name": "eddyb",
        "timestamp": 1584539784
    },
    {
        "content": "<p>as far as I understand the following changes have to be made:</p>\n<ol>\n<li>rename <code>compute_array_len</code> to <code>compute_const</code></li>\n<li>in WfPredicates::compute, call compute_const for const parameters of adts</li>\n<li>add test mentioned in the issue</li>\n</ol>",
        "id": 190982898,
        "sender_full_name": "lcnr",
        "timestamp": 1584539819
    },
    {
        "content": "<blockquote>\n<p>in WfPredicates::compute, call compute_const for const parameters of adts</p>\n</blockquote>\n<p>ideally it would be tied to <code>Substs</code> in general, but I guess the WF code is too messy for that</p>",
        "id": 190983328,
        "sender_full_name": "eddyb",
        "timestamp": 1584540005
    },
    {
        "content": "<p>if you add it to <code>nominal_obligations</code> that's the best way to ensure everything that has substs will be checked</p>",
        "id": 190983469,
        "sender_full_name": "eddyb",
        "timestamp": 1584540078
    },
    {
        "content": "<p>funnily enough I just realized <code>compute_const</code> will be able to recurse through <code>nominal_obligations</code> back to <code>compute_const</code>, which is a case I missed</p>",
        "id": 190983515,
        "sender_full_name": "eddyb",
        "timestamp": 1584540107
    },
    {
        "content": "<p>(associated consts, for example, can have their own <code>const</code> generic parameters in scope, so they also need to be checked)</p>",
        "id": 190983611,
        "sender_full_name": "eddyb",
        "timestamp": 1584540135
    },
    {
        "content": "<p>thanks.</p>\n<p>Is there a good source on what nominal in <code>nominal_obligations</code>means?</p>",
        "id": 190984466,
        "sender_full_name": "lcnr",
        "timestamp": 1584540519
    },
    {
        "content": "<p>nominal vs structural types</p>",
        "id": 190984496,
        "sender_full_name": "eddyb",
        "timestamp": 1584540534
    },
    {
        "content": "<p>literally \"has a name\". in this case, has a <code>DefId</code></p>",
        "id": 190984516,
        "sender_full_name": "eddyb",
        "timestamp": 1584540542
    },
    {
        "content": "<p>user-defined types are nominal, a tuple or array type is structural</p>",
        "id": 190984568,
        "sender_full_name": "eddyb",
        "timestamp": 1584540569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> <a href=\"https://en.wikipedia.org/wiki/Nominal_type_system\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Nominal_type_system\">https://en.wikipedia.org/wiki/Nominal_type_system</a></p>",
        "id": 190984611,
        "sender_full_name": "eddyb",
        "timestamp": 1584540591
    },
    {
        "content": "<p>is there a reason why <code>WfPredicate::cause</code> requires <code>&amp;mut self</code>?</p>",
        "id": 190988198,
        "sender_full_name": "lcnr",
        "timestamp": 1584542063
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">cause</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"nc\">traits</span>::<span class=\"n\">ObligationCauseCode</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">traits</span>::<span class=\"n\">ObligationCause</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">traits</span>::<span class=\"n\">ObligationCause</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">body_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 190988302,
        "sender_full_name": "lcnr",
        "timestamp": 1584542104
    },
    {
        "content": "<p>doesn't look like it, lol</p>",
        "id": 190988519,
        "sender_full_name": "eddyb",
        "timestamp": 1584542171
    },
    {
        "content": "<p>probably copy-paste mistake</p>",
        "id": 190988539,
        "sender_full_name": "eddyb",
        "timestamp": 1584542177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.2368977.3A.20Revert.20.60compute_const.60.20changes.20in.20WF/near/190983469\" title=\"#narrow/stream/131828-t-compiler/topic/.2368977.3A.20Revert.20.60compute_const.60.20changes.20in.20WF/near/190983469\">said</a>:</p>\n<blockquote>\n<p>if you add it to <code>nominal_obligations</code> that's the best way to ensure everything that has substs will be checked</p>\n</blockquote>\n<p>Not quite sure how this should be done.</p>",
        "id": 190992020,
        "sender_full_name": "lcnr",
        "timestamp": 1584543527
    },
    {
        "content": "<p>nm, should be solved</p>",
        "id": 190994241,
        "sender_full_name": "lcnr",
        "timestamp": 1584544338
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/70107\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70107\">https://github.com/rust-lang/rust/pull/70107</a> not yet tested</p>",
        "id": 190996060,
        "sender_full_name": "lcnr",
        "timestamp": 1584545064
    },
    {
        "content": "<p>how should I test that the substs must now be const evaluatable?</p>",
        "id": 190997130,
        "sender_full_name": "lcnr",
        "timestamp": 1584545457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> you don't need to return anything, you can push to <code>self.out</code> directly</p>",
        "id": 191000474,
        "sender_full_name": "eddyb",
        "timestamp": 1584546793
    },
    {
        "content": "<p>that is, this would be a side-effect of <code>nominal_obligations</code>, not part of what it returns</p>",
        "id": 191000533,
        "sender_full_name": "eddyb",
        "timestamp": 1584546821
    },
    {
        "content": "<p>like, <code>nominal_obligations</code> is just a good place to hijack</p>",
        "id": 191003341,
        "sender_full_name": "eddyb",
        "timestamp": 1584547815
    },
    {
        "content": "<p>Isn't that kind of ugly though? returning something that is added to <code>self.out</code> 5 out of 6 times and modifying <code>self.out</code> internally at the same time?</p>",
        "id": 191003432,
        "sender_full_name": "lcnr",
        "timestamp": 1584547861
    },
    {
        "content": "<p>it is but that's because this entire system is using <code>Ty::walk</code></p>",
        "id": 191003493,
        "sender_full_name": "eddyb",
        "timestamp": 1584547889
    },
    {
        "content": "<p>which is IMO terrible</p>",
        "id": 191003505,
        "sender_full_name": "eddyb",
        "timestamp": 1584547893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^^ more evidence <code>Ty::walk</code> is bad :P</p>",
        "id": 191003533,
        "sender_full_name": "eddyb",
        "timestamp": 1584547907
    },
    {
        "content": "<p>if <code>wf</code> used <code>TypeVisitor</code> you'd just add <code>visit_const</code> and that'd be that</p>",
        "id": 191003611,
        "sender_full_name": "eddyb",
        "timestamp": 1584547931
    },
    {
        "content": "<p>frankly this bug would likely be impossible with <code>TypeVisitor</code></p>",
        "id": 191003736,
        "sender_full_name": "eddyb",
        "timestamp": 1584548000
    },
    {
        "content": "<p>you'd have to go out of your way to get it wrong</p>",
        "id": 191003748,
        "sender_full_name": "eddyb",
        "timestamp": 1584548007
    },
    {
        "content": "<p>As tests are breaking compute_const shall be reverted :)</p>\n<blockquote>\n<p>if wf used TypeVisitor you'd just add visit_const and that'd be that</p>\n</blockquote>\n<p>want me to try and do this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 191003965,
        "sender_full_name": "lcnr",
        "timestamp": 1584548087
    },
    {
        "content": "<blockquote>\n<p>want me to try and do this <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>you could try but it's probably painful</p>",
        "id": 191004093,
        "sender_full_name": "eddyb",
        "timestamp": 1584548139
    },
    {
        "content": "<p>compute const has been reverted. Still has 2 failing ui tests and I don't know whats going on there</p>",
        "id": 191010794,
        "sender_full_name": "lcnr",
        "timestamp": 1584550963
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// check-pass\n\n#![allow(incomplete_features, dead_code, unconditional_recursion)]\n#![feature(const_generics)]\n\nfn fact&lt;const N: usize&gt;() {\n    fact::&lt;{ N - 1 }&gt;();\n}\n\nfn main() {}\n</pre></div>\n\n\n<p>fails with</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: broken MIR in DefId(0:3 ~ issue_66205[317d]::fact[0]) (CanonicalUserTypeAnnotation { user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_66205[317d]::fact[0]), UserSubsts { substs: [Const { ty: usize, val: Unevaluated(DefId(0:5 ~ issue_66205[317d]::fact[0]::{{constant}}[0]), [Const { ty: usize, val: Param(N/#0) }], None) }], user_self_ty: None }) }, span: /home/programming/rust/src/test/ui/const-generics/issues/issue-66205.rs:7:5: 7:22, inferred_ty: fn() {fact::&lt;{ N - 1 }&gt;} }): bad user type AscribeUserType(fn() {fact::&lt;{ N - 1 }&gt;}, DefId(0:3 ~ issue_66205[317d]::fact[0]) UserSubsts { substs: [Const { ty: usize, val: Unevaluated(DefId(0:5 ~ issue_66205[317d]::fact[0]::{{constant}}[0]), [Const { ty: usize, val: Param(N/#0) }], None) }], user_self_ty: None }): NoSolution\n\nthread &#39;rustc&#39; panicked at &#39;no errors encountered even though `delay_span_bug` issued&#39;, src/librustc_errors/lib.rs:360:17\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</pre></div>",
        "id": 191010934,
        "sender_full_name": "lcnr",
        "timestamp": 1584551029
    },
    {
        "content": "<p>I uhhh</p>",
        "id": 191011061,
        "sender_full_name": "eddyb",
        "timestamp": 1584551076
    },
    {
        "content": "<p>and </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// check-pass</span>\n\n<span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"c1\">//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Const</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Const</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">C</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">successor</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Const</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Const</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_x</span>: <span class=\"nc\">Const</span>::<span class=\"o\">&lt;</span><span class=\"mi\">2</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Const</span>::<span class=\"o\">&lt;</span><span class=\"mi\">1</span><span class=\"o\">&gt;</span>::<span class=\"n\">successor</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>fails with (this might actually be a wrong test? As the error is somewhat sensible</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">warning</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">const_generics</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">incomplete</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">crash</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">programming</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"k\">const</span><span class=\"o\">-</span><span class=\"n\">generics</span><span class=\"o\">/</span><span class=\"n\">issues</span><span class=\"o\">/</span><span class=\"n\">issue</span><span class=\"o\">-</span><span class=\"mf\">61747.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">12</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">            </span><span class=\"o\">^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"cp\">#[warn(incomplete_features)]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">constant</span><span class=\"w\"> </span><span class=\"n\">expression</span><span class=\"w\"> </span><span class=\"n\">depends</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">generic</span><span class=\"w\"> </span><span class=\"n\">parameter</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">programming</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"k\">const</span><span class=\"o\">-</span><span class=\"n\">generics</span><span class=\"o\">/</span><span class=\"n\">issues</span><span class=\"o\">/</span><span class=\"n\">issue</span><span class=\"o\">-</span><span class=\"mf\">61747.</span><span class=\"n\">rs</span>:<span class=\"mi\">9</span>:<span class=\"mi\">23</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">fn</span> <span class=\"nf\">successor</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Const</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                       </span><span class=\"o\">^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">fail</span><span class=\"w\"> </span><span class=\"n\">depending</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">parameter</span><span class=\"w\"> </span><span class=\"n\">takes</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191011144,
        "sender_full_name": "lcnr",
        "timestamp": 1584551122
    },
    {
        "content": "<p>that one is correct</p>",
        "id": 191011190,
        "sender_full_name": "eddyb",
        "timestamp": 1584551141
    },
    {
        "content": "<p>it's equivalent to the one <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> linked</p>",
        "id": 191011211,
        "sender_full_name": "eddyb",
        "timestamp": 1584551153
    },
    {
        "content": "<p>as in, it should error</p>",
        "id": 191011228,
        "sender_full_name": "eddyb",
        "timestamp": 1584551156
    },
    {
        "content": "<p>great! that leaves me with <code>src/test/ui/const-generics/issues/issue-66205.rs</code></p>",
        "id": 191011348,
        "sender_full_name": "lcnr",
        "timestamp": 1584551191
    },
    {
        "content": "<p>that one is weird as heck</p>",
        "id": 191011432,
        "sender_full_name": "eddyb",
        "timestamp": 1584551236
    },
    {
        "content": "<p>how does it not fail type-checking?</p>",
        "id": 191011438,
        "sender_full_name": "eddyb",
        "timestamp": 1584551241
    },
    {
        "content": "<p><code>fact::&lt;{ N - 1 }&gt;</code> shouldn't be WF</p>",
        "id": 191011463,
        "sender_full_name": "eddyb",
        "timestamp": 1584551255
    },
    {
        "content": "<p>currently rerunning all tests as I might have started this test while I was not yet finished, even if I am doubtful.</p>",
        "id": 191012540,
        "sender_full_name": "lcnr",
        "timestamp": 1584551701
    },
    {
        "content": "<p>seems like this is an actual bug <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 191016324,
        "sender_full_name": "lcnr",
        "timestamp": 1584553223
    },
    {
        "content": "<p>do you know where the  WF of generic params of expressions are checked?</p>\n<p><code>let a = expr::&lt;Ty&gt;()</code></p>",
        "id": 191116628,
        "sender_full_name": "lcnr",
        "timestamp": 1584626447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> let me look, I forgot about it</p>",
        "id": 191117726,
        "sender_full_name": "eddyb",
        "timestamp": 1584626925
    },
    {
        "content": "<p>so this handles the overall process <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L5339\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L5339\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L5339</a></p>",
        "id": 191117817,
        "sender_full_name": "eddyb",
        "timestamp": 1584626960
    },
    {
        "content": "<p>not seeing any WF checks in any of this <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L5495-L5611\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L5495-L5611\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L5495-L5611</a></p>",
        "id": 191118006,
        "sender_full_name": "eddyb",
        "timestamp": 1584627033
    },
    {
        "content": "<p>/me pokes <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> - where is WF for value paths supposed to be checked?</p>",
        "id": 191118052,
        "sender_full_name": "eddyb",
        "timestamp": 1584627058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> does <code>drop::&lt;Foo&lt;{ N - 1 }&gt;&gt;;</code> (not calling just mentioning the type) cause an error?</p>",
        "id": 191118118,
        "sender_full_name": "eddyb",
        "timestamp": 1584627095
    },
    {
        "content": "<p>mmmmmmm let me remember :)</p>",
        "id": 191118404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584627220
    },
    {
        "content": "<p>oh so <code>to_ty</code> handles it <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3267-L3271\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3267-L3271\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3267-L3271</a></p>",
        "id": 191118431,
        "sender_full_name": "eddyb",
        "timestamp": 1584627231
    },
    {
        "content": "<p>kind of disturbing that one could accidentally call <code>AstConv::ast_ty_to_ty</code> which will let things pass through</p>",
        "id": 191118503,
        "sender_full_name": "eddyb",
        "timestamp": 1584627253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> thank goodness MIR typeck exists</p>",
        "id": 191118524,
        "sender_full_name": "eddyb",
        "timestamp": 1584627265
    },
    {
        "content": "<p>wat <a href=\"https://github.com/rust-lang/rust/search?q=add_wf_bounds&amp;unscoped_q=add_wf_bounds\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/search?q=add_wf_bounds&amp;unscoped_q=add_wf_bounds\">https://github.com/rust-lang/rust/search?q=add_wf_bounds&amp;unscoped_q=add_wf_bounds</a></p>",
        "id": 191118704,
        "sender_full_name": "eddyb",
        "timestamp": 1584627329
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">drop_fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">drop</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">}</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>returns the desired error</p>",
        "id": 191118874,
        "sender_full_name": "lcnr",
        "timestamp": 1584627390
    },
    {
        "content": "<p>anyway this is where substitutions to value paths get checked <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/expr.rs#L534\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/expr.rs#L534\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/expr.rs#L534</a></p>",
        "id": 191118905,
        "sender_full_name": "eddyb",
        "timestamp": 1584627404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> so you'd have to somehow handle consts here <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3341-L3348\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3341-L3348\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3341-L3348</a></p>",
        "id": 191118998,
        "sender_full_name": "eddyb",
        "timestamp": 1584627441
    },
    {
        "content": "<p>maybe we can replace the <code>ConstEvaluatable</code> bound with <code>WellFormedConst</code> that takes a <code>&amp;'tcx ty::Const&lt;'tcx&gt;</code>, or something</p>",
        "id": 191119057,
        "sender_full_name": "eddyb",
        "timestamp": 1584627476
    },
    {
        "content": "<p>wait, we have to, otherwise const inference variables wouldn't get checked</p>",
        "id": 191119138,
        "sender_full_name": "eddyb",
        "timestamp": 1584627498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"218608\">@yodal</span> ^^ oops how did I miss this</p>",
        "id": 191119175,
        "sender_full_name": "eddyb",
        "timestamp": 1584627519
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/wf.rs#L556-L593\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/wf.rs#L556-L593\">https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/wf.rs#L556-L593</a> needs a const analogue</p>",
        "id": 191119249,
        "sender_full_name": "eddyb",
        "timestamp": 1584627560
    },
    {
        "content": "<p>there were so many things to make sure we replicated for consts; it's not surprising that a few have slipped through, even till now</p>",
        "id": 191121539,
        "sender_full_name": "varkor",
        "timestamp": 1584628477
    },
    {
        "content": "<p>maybe uses of <code>substs.types()</code> are a bit of a red flag</p>",
        "id": 191121595,
        "sender_full_name": "varkor",
        "timestamp": 1584628498
    },
    {
        "content": "<p>or, at the least, we should audit them</p>",
        "id": 191121614,
        "sender_full_name": "varkor",
        "timestamp": 1584628506
    },
    {
        "content": "<p>yeaaah</p>",
        "id": 191122414,
        "sender_full_name": "eddyb",
        "timestamp": 1584628866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> maybe I should go try and get rid of as many uses of <code>Ty::walk</code> as possible</p>",
        "id": 191122474,
        "sender_full_name": "eddyb",
        "timestamp": 1584628885
    },
    {
        "content": "<p>it's cute but <code>Visitor</code> makes more sense - the other option is changing it to give you <code>GenericArg</code>s which... idk</p>",
        "id": 191122589,
        "sender_full_name": "eddyb",
        "timestamp": 1584628919
    },
    {
        "content": "<p>I'm sure you'd come across a bug or two if you did</p>",
        "id": 191122655,
        "sender_full_name": "varkor",
        "timestamp": 1584628939
    },
    {
        "content": "<p>the name <code>GenericArg</code> still bothers me when used outside <code>Substs</code> :P</p>",
        "id": 191122656,
        "sender_full_name": "eddyb",
        "timestamp": 1584628940
    },
    {
        "content": "<p>speaking of refactorings, I'd like to go through and make sure that nothing depends on parameter order anywhere</p>",
        "id": 191122852,
        "sender_full_name": "varkor",
        "timestamp": 1584629008
    },
    {
        "content": "<p>but I just don't have enough time at the moment :|</p>",
        "id": 191122902,
        "sender_full_name": "varkor",
        "timestamp": 1584629026
    },
    {
        "content": "<p>I'm reasonably satisfied with the names we have at the moment :P</p>",
        "id": 191123019,
        "sender_full_name": "varkor",
        "timestamp": 1584629055
    },
    {
        "content": "<p>but maybe just because they changed so frequently</p>",
        "id": 191123046,
        "sender_full_name": "varkor",
        "timestamp": 1584629071
    },
    {
        "content": "<p>what is that error? <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<div class=\"codehilite\"><pre><span></span>error[E0261]: use of undeclared lifetime name `&#39;txc`\n    --&gt; src/librustc/ty/mod.rs:1236:22\n     |\n1236 |     WellFormedConst(&amp;&#39;txc ty::Const&lt;&#39;tcx&gt;),\n     |                      ^^^^ undeclared lifetime\n     |\nhelp: consider introducing lifetime `&#39;txc` here\n     |\n1201 | pub enum Predicate&lt;&#39;txc, &#39;tcx&gt; {\n     |                    ^^^^^\nhelp: consider introducing lifetime `&#39;txc` here\n     |\n1199 | #[derive(&lt;&#39;txc&gt;, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n     |          ^^^^^^\n</pre></div>",
        "id": 191125291,
        "sender_full_name": "lcnr",
        "timestamp": 1584629940
    },
    {
        "content": "<p>since when can lifetimes be derived</p>",
        "id": 191125350,
        "sender_full_name": "lcnr",
        "timestamp": 1584629961
    },
    {
        "content": "<p>open an issue about \"considering introducing lifetime here\" I guess, it shouldn't propose a suggestion at the second span</p>",
        "id": 191126754,
        "sender_full_name": "eddyb",
        "timestamp": 1584630517
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f20a60d4dcff2873ee83bfa8d4c0f677\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f20a60d4dcff2873ee83bfa8d4c0f677\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=f20a60d4dcff2873ee83bfa8d4c0f677</a> </p>\n<p>And I thought that compilers make some kind of sense.</p>",
        "id": 191128017,
        "sender_full_name": "lcnr",
        "timestamp": 1584631056
    },
    {
        "content": "<p>oh god many of the <code>input_types</code> uses are coupled with <code>Ty::walk</code>, so I have to fix that to iterate over <code>GenericArg</code> first</p>",
        "id": 191129012,
        "sender_full_name": "eddyb",
        "timestamp": 1584631473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  should I try and replace ConstEvaluatable with WellFormedConst or would this clash with your current efforts?</p>",
        "id": 191129194,
        "sender_full_name": "lcnr",
        "timestamp": 1584631553
    },
    {
        "content": "<p>it might idk</p>",
        "id": 191129397,
        "sender_full_name": "eddyb",
        "timestamp": 1584631642
    },
    {
        "content": "<p>if I change <code>Ty::walk</code> to be all about <code>GenericArg</code>, we can do the main change of the PR much better</p>",
        "id": 191129446,
        "sender_full_name": "eddyb",
        "timestamp": 1584631667
    },
    {
        "content": "<p>hmm,</p>\n<p>are there other issues I might help with?</p>",
        "id": 191132925,
        "sender_full_name": "lcnr",
        "timestamp": 1584633107
    },
    {
        "content": "<p>Will stop working on this for now until you re done</p>",
        "id": 191133018,
        "sender_full_name": "lcnr",
        "timestamp": 1584633143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> okay this is my first step <a href=\"https://github.com/rust-lang/rust/pull/70164\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70164\">https://github.com/rust-lang/rust/pull/70164</a></p>",
        "id": 191163313,
        "sender_full_name": "eddyb",
        "timestamp": 1584645957
    },
    {
        "content": "<p>if perf doesn't look too bad, I'll proceed to implement it fully</p>",
        "id": 191163383,
        "sender_full_name": "eddyb",
        "timestamp": 1584645974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> I think you could add <code>WellFormedConst</code> today <a href=\"https://github.com/rust-lang/rust/pull/70107#issuecomment-601379924\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70107#issuecomment-601379924\">https://github.com/rust-lang/rust/pull/70107#issuecomment-601379924</a></p>",
        "id": 191165239,
        "sender_full_name": "eddyb",
        "timestamp": 1584646921
    },
    {
        "content": "<p>it would suck a bit but not as much as I thought originally</p>",
        "id": 191165298,
        "sender_full_name": "eddyb",
        "timestamp": 1584646932
    },
    {
        "content": "<p>you'd just need another entry-point in <code>wf.rs</code> that takes a <code>ty::Const</code> and calls <code>compute_const</code></p>",
        "id": 191165336,
        "sender_full_name": "eddyb",
        "timestamp": 1584646956
    },
    {
        "content": "<p>will try</p>",
        "id": 191165999,
        "sender_full_name": "lcnr",
        "timestamp": 1584647303
    },
    {
        "content": "<p>am i right that calling <code>shallow_resolve</code> on a <code>InferConst</code> would not not do anything?</p>\n<p>Am kind of stuck on what I can and should do with a const inference variable</p>",
        "id": 191167858,
        "sender_full_name": "lcnr",
        "timestamp": 1584648167
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"sd\">/// Registers an obligation for checking later, during regionck, that the type `ty` must</span>\n<span class=\"w\">    </span><span class=\"sd\">/// outlive the region `r`.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">register_wf_obligation</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ty</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">span</span>: <span class=\"nc\">Span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">code</span>: <span class=\"nc\">traits</span>::<span class=\"n\">ObligationCauseCode</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// WF obligations never themselves fail, so no real need to give a detailed cause:</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">traits</span>::<span class=\"n\">ObligationCause</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">body_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">register_predicate</span><span class=\"p\">(</span><span class=\"n\">traits</span>::<span class=\"n\">Obligation</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">cause</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">ty</span>::<span class=\"n\">Predicate</span>::<span class=\"n\">WellFormed</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Is this a copy paster error?</p>",
        "id": 191176351,
        "sender_full_name": "lcnr",
        "timestamp": 1584652520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">Bastian Kauschke</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.2368977.3A.20Revert.20.60compute_const.60.20changes.20in.20WF/near/191167858\" title=\"#narrow/stream/131828-t-compiler/topic/.2368977.3A.20Revert.20.60compute_const.60.20changes.20in.20WF/near/191167858\">said</a>:</p>\n<blockquote>\n<p>am i right that calling <code>shallow_resolve</code> on a <code>InferConst</code> would not not do anything?</p>\n<p>Am kind of stuck on what I can and should do with a const inference variable</p>\n</blockquote>\n<p>no, it would resolve the inference variable if it's since been unified</p>",
        "id": 191179981,
        "sender_full_name": "eddyb",
        "timestamp": 1584654758
    },
    {
        "content": "<p>and what's a copy-paste error?</p>",
        "id": 191180131,
        "sender_full_name": "eddyb",
        "timestamp": 1584654839
    },
    {
        "content": "<p>oh, the comment?</p>",
        "id": 191180188,
        "sender_full_name": "eddyb",
        "timestamp": 1584654851
    },
    {
        "content": "<p>linking the lines on github would be clearer btw, without losing context <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3324-L3325\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3324-L3325\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3324-L3325</a></p>",
        "id": 191180233,
        "sender_full_name": "eddyb",
        "timestamp": 1584654892
    },
    {
        "content": "<p>and yeah it does look like that lmao</p>",
        "id": 191180242,
        "sender_full_name": "eddyb",
        "timestamp": 1584654896
    },
    {
        "content": "<blockquote>\n<p>linking the lines on github would be clearer btw, without losing context <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3324-L3325\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3324-L3325\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/mod.rs#L3324-L3325</a></p>\n</blockquote>\n<p>will do! First working version is now on github. Will probably still need some cleanup/clarification!!!11</p>",
        "id": 191180730,
        "sender_full_name": "lcnr",
        "timestamp": 1584655179
    },
    {
        "content": "<p>forgot to mention this comment, I hope you saw it <a href=\"https://github.com/rust-lang/rust/pull/70107#issuecomment-601434764\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70107#issuecomment-601434764\">https://github.com/rust-lang/rust/pull/70107#issuecomment-601434764</a></p>",
        "id": 191181086,
        "sender_full_name": "eddyb",
        "timestamp": 1584655388
    },
    {
        "content": "<p>anyway using the blame function, found this: <a href=\"https://github.com/rust-lang/rust/commit/8d98877112d4deb3786de521457418757e010c69#diff-1d1b0d29a2e8da97c6bfb6e364d920c7R1672-R1673\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/8d98877112d4deb3786de521457418757e010c69#diff-1d1b0d29a2e8da97c6bfb6e364d920c7R1672-R1673\">https://github.com/rust-lang/rust/commit/8d98877112d4deb3786de521457418757e010c69#diff-1d1b0d29a2e8da97c6bfb6e364d920c7R1672-R1673</a></p>",
        "id": 191181128,
        "sender_full_name": "eddyb",
        "timestamp": 1584655427
    },
    {
        "content": "<p>looks like the comment was wrong from the start (cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>)</p>",
        "id": 191181186,
        "sender_full_name": "eddyb",
        "timestamp": 1584655445
    },
    {
        "content": "<p>and in 5 years, nobody saw</p>",
        "id": 191181201,
        "sender_full_name": "eddyb",
        "timestamp": 1584655454
    },
    {
        "content": "<blockquote>\n<p>and in 5 years, nobody saw</p>\n</blockquote>\n<p>The Biggest Ancient Mysteries That No One Has Ever Been Able To Solve</p>",
        "id": 191181372,
        "sender_full_name": "lcnr",
        "timestamp": 1584655593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> just went through all instances of <code>WellFormed(</code> in the codebase and reviewed <a href=\"https://github.com/rust-lang/rust/pull/70107/commits/49b5cdb5785e736a17e0216268bca2c0d1f7934d\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70107/commits/49b5cdb5785e736a17e0216268bca2c0d1f7934d\">https://github.com/rust-lang/rust/pull/70107/commits/49b5cdb5785e736a17e0216268bca2c0d1f7934d</a></p>",
        "id": 191185550,
        "sender_full_name": "eddyb",
        "timestamp": 1584658966
    },
    {
        "content": "<p>can you update the PR description to mention <code>compute_const</code>, <code>wf::const_obligations</code> and <code>Predicate::WellFormedConst</code>?</p>",
        "id": 191185741,
        "sender_full_name": "eddyb",
        "timestamp": 1584659126
    },
    {
        "content": "<p>I changed the PR title, hope you don't mind</p>",
        "id": 191185823,
        "sender_full_name": "eddyb",
        "timestamp": 1584659185
    },
    {
        "content": "<p>thanks for tackling this <span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span>!</p>",
        "id": 191185855,
        "sender_full_name": "varkor",
        "timestamp": 1584659220
    },
    {
        "content": "<blockquote>\n<p>can you update the PR description to mention compute_const, wf::const_obligations and Predicate::WellFormedConst?</p>\n</blockquote>\n<p>y</p>",
        "id": 191185974,
        "sender_full_name": "lcnr",
        "timestamp": 1584659299
    },
    {
        "content": "<p>WF is such a stressful part of the compiler (because of how important it is) and the cowboy way the implementation looks to be makes my skin crawl</p>",
        "id": 191186148,
        "sender_full_name": "eddyb",
        "timestamp": 1584659429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> you're brave :P</p>",
        "id": 191186189,
        "sender_full_name": "eddyb",
        "timestamp": 1584659465
    },
    {
        "content": "<p>or stupid ^^</p>",
        "id": 191186200,
        "sender_full_name": "lcnr",
        "timestamp": 1584659476
    },
    {
        "content": "<p>the size of the PR disagrees :)</p>",
        "id": 191186286,
        "sender_full_name": "eddyb",
        "timestamp": 1584659531
    },
    {
        "content": "<p>Considering that WellFormedConst only adds requirements, I at least don't really worry that I cause UB</p>",
        "id": 191186294,
        "sender_full_name": "lcnr",
        "timestamp": 1584659541
    },
    {
        "content": "<p>oh yeah you're only removing bugs :P</p>",
        "id": 191186335,
        "sender_full_name": "eddyb",
        "timestamp": 1584659556
    },
    {
        "content": "<p>I'm just being as strict as I can to make sure we remove all the bugs not just some</p>",
        "id": 191186369,
        "sender_full_name": "eddyb",
        "timestamp": 1584659580
    },
    {
        "content": "<p>tbh I really want a good way to test this. I just improved like 5 different things and don't know if and when any of them actually helps <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 191187852,
        "sender_full_name": "lcnr",
        "timestamp": 1584660807
    },
    {
        "content": "<p>it's... tricky</p>",
        "id": 191187917,
        "sender_full_name": "eddyb",
        "timestamp": 1584660847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> is pretty good at this but he also doesn't have a lot of free time. I might have to hang on him the fact that this is WF and <em>we need to</em> get it right</p>",
        "id": 191187940,
        "sender_full_name": "eddyb",
        "timestamp": 1584660874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> with the changes in <a href=\"https://github.com/rust-lang/rust/pull/70170\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70170\">https://github.com/rust-lang/rust/pull/70170</a> it should be much easier to make the entire <code>wf</code> module correct wrt inference variables</p>",
        "id": 191189455,
        "sender_full_name": "eddyb",
        "timestamp": 1584662337
    },
    {
        "content": "<p>seems like we are slightly too strict now.</p>",
        "id": 191217392,
        "sender_full_name": "lcnr",
        "timestamp": 1584696203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can you help me out here?</p>\n<p>The compiler currently fails in libcore due to ambiguity: <a href=\"https://github.com/rust-lang/rust/blob/4cdfa8a5c162f35058bc53526989741b639a6389/src/libcore/array/iter.rs#L193\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/4cdfa8a5c162f35058bc53526989741b639a6389/src/libcore/array/iter.rs#L193\">https://github.com/rust-lang/rust/blob/4cdfa8a5c162f35058bc53526989741b639a6389/src/libcore/array/iter.rs#L193</a></p>\n<p>The error gets reported here: <a href=\"https://github.com/rust-lang/rust/pull/70107/files#r395598086\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70107/files#r395598086\">https://github.com/rust-lang/rust/pull/70107/files#r395598086</a></p>\n<p>and was introduced in these changes: <a href=\"https://github.com/rust-lang/rust/pull/70107/files/49b5cdb5785e736a17e0216268bca2c0d1f7934d..bba3a8faa43f7664fe2f36ef61904dca147982ad\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70107/files/49b5cdb5785e736a17e0216268bca2c0d1f7934d..bba3a8faa43f7664fe2f36ef61904dca147982ad\">https://github.com/rust-lang/rust/pull/70107/files/49b5cdb5785e736a17e0216268bca2c0d1f7934d..bba3a8faa43f7664fe2f36ef61904dca147982ad</a><br>\nDo you have an idea why this fails?<br>\nI don't really make any progress here atm, it is probably caused by wf::const_obligations not always causing a <code>ProcessResult::Changed</code> but that seems like it should be the correct behavior.</p>",
        "id": 191234933,
        "sender_full_name": "lcnr",
        "timestamp": 1584706960
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 191239795,
        "sender_full_name": "lcnr",
        "timestamp": 1584709723
    },
    {
        "content": "<p>commit: <a href=\"https://github.com/rust-lang/rust/pull/70107/commits/81ee6613311bf2ad5970b43f02cf718bad65a03b\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70107/commits/81ee6613311bf2ad5970b43f02cf718bad65a03b\">https://github.com/rust-lang/rust/pull/70107/commits/81ee6613311bf2ad5970b43f02cf718bad65a03b</a></p>",
        "id": 191241248,
        "sender_full_name": "lcnr",
        "timestamp": 1584710517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> I opened an issue <a href=\"https://github.com/rust-lang/rust/issues/70180\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/70180\">https://github.com/rust-lang/rust/issues/70180</a></p>",
        "id": 191246037,
        "sender_full_name": "eddyb",
        "timestamp": 1584712926
    },
    {
        "content": "<p>I found a different error in my diffs. which should be the reason why <code>core</code> failed to compile.  <a href=\"https://github.com/rust-lang/rust/issues/70180\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/70180\">https://github.com/rust-lang/rust/issues/70180</a> is probably still relevant for const WF though. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 191247053,
        "sender_full_name": "lcnr",
        "timestamp": 1584713402
    },
    {
        "content": "<p>basically if you've had to adapt <code>stalled_on</code> code to be different for consts than for types, it was likely wrong :P</p>",
        "id": 191247210,
        "sender_full_name": "eddyb",
        "timestamp": 1584713464
    },
    {
        "content": "<p>it should be very symmetrical, as inference variables of each can equally stall solving obligations</p>",
        "id": 191247271,
        "sender_full_name": "eddyb",
        "timestamp": 1584713499
    },
    {
        "content": "<p>My fix works! <span aria-label=\"happy\" class=\"emoji emoji-1f600\" role=\"img\" title=\"happy\">:happy:</span>  I didn't touch <code>stalled_on</code> at all, so there might be some snippets which cannot be resolved!</p>",
        "id": 191248295,
        "sender_full_name": "lcnr",
        "timestamp": 1584713970
    },
    {
        "content": "<p>and so it begins <a href=\"https://github.com/rust-lang/rust/pull/70181#issuecomment-601726100\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70181#issuecomment-601726100\">https://github.com/rust-lang/rust/pull/70181#issuecomment-601726100</a></p>",
        "id": 191248704,
        "sender_full_name": "eddyb",
        "timestamp": 1584714176
    },
    {
        "content": "<p>will probably spend a day on just perf testing</p>",
        "id": 191248726,
        "sender_full_name": "eddyb",
        "timestamp": 1584714185
    },
    {
        "content": "<p>ok</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">warning</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">const_generics</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">incomplete</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">crash</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">cannot</span><span class=\"o\">-</span><span class=\"n\">infer</span><span class=\"o\">-</span><span class=\"k\">const</span><span class=\"o\">-</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span>:<span class=\"mi\">12</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">            </span><span class=\"o\">^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"cp\">#[warn(incomplete_features)]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0282</span><span class=\"p\">]</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">annotations</span><span class=\"w\"> </span><span class=\"n\">needed</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"cp\">$DIR</span><span class=\"o\">/</span><span class=\"n\">cannot</span><span class=\"o\">-</span><span class=\"n\">infer</span><span class=\"o\">-</span><span class=\"k\">const</span><span class=\"o\">-</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">9</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">foo</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"o\">^^^</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">infer</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">for</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"kt\">usize</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">aborting</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0282</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191248787,
        "sender_full_name": "lcnr",
        "timestamp": 1584714222
    },
    {
        "content": "<p><code>cannot infer type for type</code> <span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 191248909,
        "sender_full_name": "bjorn3",
        "timestamp": 1584714273
    },
    {
        "content": "<p>big brain move</p>",
        "id": 191248939,
        "sender_full_name": "lcnr",
        "timestamp": 1584714291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"https://github.com/rust-lang/rust/pull/70107\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70107\">https://github.com/rust-lang/rust/pull/70107</a> should once again be ready for review. All ui tests pass</p>",
        "id": 191249334,
        "sender_full_name": "lcnr",
        "timestamp": 1584714478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> are you okay with me blocking it on fixing <code>walk</code> and <code>stalled_on</code>?</p>",
        "id": 191252117,
        "sender_full_name": "eddyb",
        "timestamp": 1584715688
    },
    {
        "content": "<p>I want to make sure your PR can do the correct thing</p>",
        "id": 191252161,
        "sender_full_name": "eddyb",
        "timestamp": 1584715714
    },
    {
        "content": "<blockquote>\n<p>are you okay with me blocking it on fixing walk and stalled_on?</p>\n</blockquote>\n<p>Yeah, as long as I have something else to work on in the meantime <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 191253918,
        "sender_full_name": "lcnr",
        "timestamp": 1584716544
    },
    {
        "content": "<p>that I don't know about</p>",
        "id": 191254015,
        "sender_full_name": "eddyb",
        "timestamp": 1584716592
    },
    {
        "content": "<p>heck I don't know what to do either, while I'm waiting for perf results</p>",
        "id": 191254043,
        "sender_full_name": "eddyb",
        "timestamp": 1584716606
    },
    {
        "content": "<p>if they're bad I'd have to redo my approach altogether</p>",
        "id": 191254075,
        "sender_full_name": "eddyb",
        "timestamp": 1584716617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I believe that this should compile: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=74462bd2658e83e8cfeb6c2bf80d47d9\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=74462bd2658e83e8cfeb6c2bf80d47d9\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=74462bd2658e83e8cfeb6c2bf80d47d9</a> (minimized version of <a href=\"https://github.com/rust-lang/rust/issues/70167\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/70167\">https://github.com/rust-lang/rust/issues/70167</a>)</p>",
        "id": 191256519,
        "sender_full_name": "lcnr",
        "timestamp": 1584717602
    },
    {
        "content": "<p>lmao</p>",
        "id": 191256692,
        "sender_full_name": "eddyb",
        "timestamp": 1584717666
    },
    {
        "content": "<p>also you have to use round parens, square brackets will  break links</p>",
        "id": 191256810,
        "sender_full_name": "eddyb",
        "timestamp": 1584717719
    },
    {
        "content": "<p>will just work on this then <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 191257119,
        "sender_full_name": "lcnr",
        "timestamp": 1584717806
    },
    {
        "content": "<p>from glancing at it, I'm guessing <code>rustc_typeck::astconv</code> is to blame here</p>",
        "id": 191257215,
        "sender_full_name": "eddyb",
        "timestamp": 1584717840
    },
    {
        "content": "<p>ast_ty_to_ty seems fine afaict,  will look backwards from where the error originated. Seems like a good oportunity to familiarize myself with the compiler <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 191273559,
        "sender_full_name": "lcnr",
        "timestamp": 1584724497
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 191293135,
        "sender_full_name": "lcnr",
        "timestamp": 1584733527
    },
    {
        "content": "<p>afaict type check does not emit an error but returns ty::Error. <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> any tips on checking where this might happen?</p>",
        "id": 191303885,
        "sender_full_name": "lcnr",
        "timestamp": 1584739151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> if that's true, the there is a compiler bug. <code>ty::Error</code> should never be returned unless an error is either emitted or queued.</p>",
        "id": 191324235,
        "sender_full_name": "mark-i-m",
        "timestamp": 1584758071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> damn I was right to not keep working on that branch: <a href=\"https://github.com/rust-lang/rust/pull/70181#issuecomment-601982865\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70181#issuecomment-601982865\">https://github.com/rust-lang/rust/pull/70181#issuecomment-601982865</a></p>",
        "id": 191324688,
        "sender_full_name": "eddyb",
        "timestamp": 1584758960
    },
    {
        "content": "<p>this is the (hopefully faster) second take <a href=\"https://github.com/rust-lang/rust/pull/70213\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70213\">https://github.com/rust-lang/rust/pull/70213</a></p>",
        "id": 191334383,
        "sender_full_name": "eddyb",
        "timestamp": 1584778286
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span>  well it is... I just don't know where</p>",
        "id": 191335152,
        "sender_full_name": "lcnr",
        "timestamp": 1584779669
    },
    {
        "content": "<p>presumably the thing that computes the type of an <code>AnonConst</code>?</p>",
        "id": 191335620,
        "sender_full_name": "eddyb",
        "timestamp": 1584780508
    },
    {
        "content": "<p>AAAAAAAH <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L199\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L199\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L199</a></p>",
        "id": 191335637,
        "sender_full_name": "eddyb",
        "timestamp": 1584780582
    },
    {
        "content": "<p>how does this not trigger? <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L297-L303\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L297-L303\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L297-L303</a></p>",
        "id": 191335639,
        "sender_full_name": "eddyb",
        "timestamp": 1584780593
    },
    {
        "content": "<p>wait no it's handled? <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L217\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L217\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L217</a></p>",
        "id": 191335690,
        "sender_full_name": "eddyb",
        "timestamp": 1584780654
    },
    {
        "content": "<p>oooh it's a QPath</p>",
        "id": 191335701,
        "sender_full_name": "eddyb",
        "timestamp": 1584780701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> I think I found it <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L285-L287\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L285-L287\">https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/collect/type_of.rs#L285-L287</a></p>",
        "id": 191335897,
        "sender_full_name": "eddyb",
        "timestamp": 1584781054
    },
    {
        "content": "<p>well, even if it is not, it might be a good idea to add a delay span bug! Thanks, will look into it</p>",
        "id": 191335959,
        "sender_full_name": "lcnr",
        "timestamp": 1584781154
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/70167#issuecomment-602016086\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/70167#issuecomment-602016086\">https://github.com/rust-lang/rust/issues/70167#issuecomment-602016086</a></p>",
        "id": 191335963,
        "sender_full_name": "eddyb",
        "timestamp": 1584781168
    },
    {
        "content": "<p>yeah, <code>delay_span_bug!</code> there would be good, and I also mentioned a potential fix</p>",
        "id": 191335968,
        "sender_full_name": "eddyb",
        "timestamp": 1584781199
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/70167#issuecomment-602016539\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/70167#issuecomment-602016539\">https://github.com/rust-lang/rust/issues/70167#issuecomment-602016539</a></p>",
        "id": 191336140,
        "sender_full_name": "eddyb",
        "timestamp": 1584781488
    },
    {
        "content": "<p>jup, the delay span_bug is triggered in <del>all</del> <em>some</em> relevant tests. You're a beast!</p>",
        "id": 191336362,
        "sender_full_name": "lcnr",
        "timestamp": 1584781973
    },
    {
        "content": "<p>note that my method example triggers an existing <code>delay_span_bug</code> already</p>",
        "id": 191336555,
        "sender_full_name": "eddyb",
        "timestamp": 1584782342
    },
    {
        "content": "<p>is hir pretty print of AnonConst broken? <code>Struct&lt;&gt;::method::&lt;&gt;</code></p>",
        "id": 191336717,
        "sender_full_name": "lcnr",
        "timestamp": 1584782554
    },
    {
        "content": "<p>likely yeah</p>",
        "id": 191336721,
        "sender_full_name": "eddyb",
        "timestamp": 1584782566
    },
    {
        "content": "<p>it's possible the parameters are injected with no name</p>",
        "id": 191336726,
        "sender_full_name": "eddyb",
        "timestamp": 1584782588
    },
    {
        "content": "<p>do I have to worry about AssocOpaqueTy as well?</p>",
        "id": 191337210,
        "sender_full_name": "lcnr",
        "timestamp": 1584783348
    },
    {
        "content": "<p>uhhh maybe not? there are two bug fixes btw</p>",
        "id": 191337249,
        "sender_full_name": "eddyb",
        "timestamp": 1584783409
    },
    {
        "content": "<p>either special-casing associated types, or using the segment <code>Res</code></p>",
        "id": 191337252,
        "sender_full_name": "eddyb",
        "timestamp": 1584783422
    },
    {
        "content": "<p>the latter means you don't need the former</p>",
        "id": 191337256,
        "sender_full_name": "eddyb",
        "timestamp": 1584783433
    },
    {
        "content": "<p>(if it works)</p>",
        "id": 191337259,
        "sender_full_name": "eddyb",
        "timestamp": 1584783449
    },
    {
        "content": "<p>segment <code>Res</code> seems cleaner I guess. So I might just try this and fix the fallout</p>",
        "id": 191337290,
        "sender_full_name": "lcnr",
        "timestamp": 1584783467
    },
    {
        "content": "<p>it should be a very local change</p>",
        "id": 191337349,
        "sender_full_name": "eddyb",
        "timestamp": 1584783538
    },
    {
        "content": "<p>basically get the right <code>Res</code> at the same time you're getting the index inside the segment</p>",
        "id": 191337355,
        "sender_full_name": "eddyb",
        "timestamp": 1584783567
    },
    {
        "content": "<p>are all path segments expected to have a res, considering that it's <code>Option&lt;Res&gt;</code>?https://doc.rust-lang.org/nightly/nightly-rustc/rustc_hir/struct.PathSegment.html</p>",
        "id": 191337539,
        "sender_full_name": "lcnr",
        "timestamp": 1584783894
    },
    {
        "content": "<p>that I'm not sure about</p>",
        "id": 191337618,
        "sender_full_name": "eddyb",
        "timestamp": 1584784062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> wait I'm an idiot, the method example can't be solved for a while, so you should go with the associated type special-casing</p>",
        "id": 191337760,
        "sender_full_name": "eddyb",
        "timestamp": 1584784262
    },
    {
        "content": "<p>or maybe use <code>segment_res.unwrap_or(path.res)</code></p>",
        "id": 191337765,
        "sender_full_name": "eddyb",
        "timestamp": 1584784278
    },
    {
        "content": "<p>ooh, I see, the <code>M</code> in the method example hits <code>QPath::TypeRelative</code></p>",
        "id": 191337837,
        "sender_full_name": "eddyb",
        "timestamp": 1584784401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> edited <a href=\"https://github.com/rust-lang/rust/issues/70167#issuecomment-602016539\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/70167#issuecomment-602016539\">https://github.com/rust-lang/rust/issues/70167#issuecomment-602016539</a></p>",
        "id": 191338052,
        "sender_full_name": "eddyb",
        "timestamp": 1584784776
    },
    {
        "content": "<p>fixed the issue! <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> even if I don't quite know what I am doing. Should I open a new issue for the method call?</p>",
        "id": 191338426,
        "sender_full_name": "lcnr",
        "timestamp": 1584785370
    },
    {
        "content": "<p>I guess?</p>",
        "id": 191338527,
        "sender_full_name": "eddyb",
        "timestamp": 1584785531
    },
    {
        "content": "<p>nm, breaking core again</p>",
        "id": 191338972,
        "sender_full_name": "lcnr",
        "timestamp": 1584786382
    },
    {
        "content": "<p>fffff, directly using <code>Res</code> of path segments doesnt work, As the res of path segments in types are <code>Some(Res::Err)</code>.</p>\n<p>The currently fix ended up being exactly 1 line <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span>  That's kinda disappointing</p>",
        "id": 191342705,
        "sender_full_name": "lcnr",
        "timestamp": 1584792494
    },
    {
        "content": "<p>@eddyb <a href=\"https://github.com/rust-lang/rust/pull/70223\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70223\">https://github.com/rust-lang/rust/pull/70223</a></p>",
        "id": 191343218,
        "sender_full_name": "lcnr",
        "timestamp": 1584793445
    },
    {
        "content": "<p>wheee I finally reached the last <code>walk</code> change, in <code>fulfill</code></p>",
        "id": 191416061,
        "sender_full_name": "eddyb",
        "timestamp": 1584911003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> okay <a href=\"https://github.com/rust-lang/rust/pull/70164\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70164\">https://github.com/rust-lang/rust/pull/70164</a> should be done</p>",
        "id": 191433779,
        "sender_full_name": "eddyb",
        "timestamp": 1584940997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> <a href=\"https://github.com/rust-lang/rust/pull/70213#issuecomment-602816331\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/70213#issuecomment-602816331\">https://github.com/rust-lang/rust/pull/70213#issuecomment-602816331</a></p>",
        "id": 191528385,
        "sender_full_name": "eddyb",
        "timestamp": 1584993662
    },
    {
        "content": "<p>you can rebase over my PR if you want btw</p>",
        "id": 191528480,
        "sender_full_name": "eddyb",
        "timestamp": 1584993708
    },
    {
        "content": "<p>it might unbreak some things in your PR (I forget if there are any tests that still don't work)</p>",
        "id": 191528568,
        "sender_full_name": "eddyb",
        "timestamp": 1584993728
    },
    {
        "content": "<p>even without my <code>walk</code> changes, it would let you handle <code>WellFormedConst</code> like <code>WellFormed</code> in terms of <code>stalled_on</code></p>",
        "id": 191528641,
        "sender_full_name": "eddyb",
        "timestamp": 1584993762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I looked a bit more into <a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/consts/associated_const_generic.rs\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/consts/associated_const_generic.rs\">src/test/ui/consts/associated_const_generic.rs</a> of <a href=\"https://github.com/rust-lang/rust/pull/70107\" title=\"https://github.com/rust-lang/rust/pull/70107\">https://github.com/rust-lang/rust/pull/70107</a>.</p>\n<p>As far as I can tell <code>WellFormedConst</code> adds a <code>ConstEvaluable</code> predicate for <code>B::Value</code>, which calls the query <code>const_eval_resolve</code> -&gt;<code>ty::Instance::resolve</code> -&gt;s <code>resolve_instance</code> -&gt;  <a href=\"https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src/librustc_ty/instance.rs#L62\" title=\"https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src/librustc_ty/instance.rs#L62\">resolve_associated_item</a>. </p>\n<p><code>B::Value</code> has  a <code>VtableImpl</code> and then returns none as <code>param_env.reveal</code> is <code>Reveal::UserFacing</code>, which causes the function to return <code>None</code> <a href=\"https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src/librustc_ty/instance.rs#L99\" title=\"https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src/librustc_ty/instance.rs#L99\">here</a>. At least in my understanding everything up to the branch on <code>param_env.reveal == traits::Reveal::All</code> seems correct.</p>\n<p>Looking at the comment for <code>Reveal</code>: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/traits/enum.Reveal.html\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/traits/enum.Reveal.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/traits/enum.Reveal.html</a></p>\n<blockquote>\n<p>However, we could allow projections in fully-monomorphic cases. We choose not to, because we prefer for default type to force the type definition to be treated abstractly by any consumers of the impl. </p>\n</blockquote>\n<p>This seems like to culprit, as the test case is fully monomorphic afaict. </p>\n<p>Does my analysis seem correct and if so, how could I proceed?</p>",
        "id": 191734184,
        "sender_full_name": "lcnr",
        "timestamp": 1585137631
    },
    {
        "content": "<p>wait why is it using <code>UserFacing</code>?</p>",
        "id": 191758429,
        "sender_full_name": "eddyb",
        "timestamp": 1585148576
    },
    {
        "content": "<p>hmm, this uses <code>with_reveal_all</code> <a href=\"https://github.com/rust-lang/rust/blob/bfc32dd106f0fe191b8bcd9b76348a8875c30a60/src/librustc/mir/interpret/queries.rs#L21\" title=\"https://github.com/rust-lang/rust/blob/bfc32dd106f0fe191b8bcd9b76348a8875c30a60/src/librustc/mir/interpret/queries.rs#L21\">https://github.com/rust-lang/rust/blob/bfc32dd106f0fe191b8bcd9b76348a8875c30a60/src/librustc/mir/interpret/queries.rs#L21</a></p>",
        "id": 191758827,
        "sender_full_name": "eddyb",
        "timestamp": 1585148749
    },
    {
        "content": "<p>I wonder if users of <code>const_eval_resolve</code> have to do it themselves or something</p>",
        "id": 191758909,
        "sender_full_name": "eddyb",
        "timestamp": 1585148768
    },
    {
        "content": "<p>this uses <code>with_reveal_all</code> <a href=\"https://github.com/rust-lang/rust/blob/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60/src/librustc/ty/sty.rs#L2401\" title=\"https://github.com/rust-lang/rust/blob/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60/src/librustc/ty/sty.rs#L2401\">https://github.com/rust-lang/rust/blob/342c5f33d097b2dc07a2dbc0ca45a37379d2ff60/src/librustc/ty/sty.rs#L2401</a></p>",
        "id": 191759290,
        "sender_full_name": "eddyb",
        "timestamp": 1585148917
    },
    {
        "content": "<p>this is funny given that the <code>ParamEnv</code> matters little apparently <a href=\"https://github.com/rust-lang/rust/blob/e0f5df017368dc3f7cb458fc6d5a5e0420e1d2e5/src/librustc_mir_build/hair/pattern/mod.rs#L768\" title=\"https://github.com/rust-lang/rust/blob/e0f5df017368dc3f7cb458fc6d5a5e0420e1d2e5/src/librustc_mir_build/hair/pattern/mod.rs#L768\">https://github.com/rust-lang/rust/blob/e0f5df017368dc3f7cb458fc6d5a5e0420e1d2e5/src/librustc_mir_build/hair/pattern/mod.rs#L768</a></p>",
        "id": 191759847,
        "sender_full_name": "eddyb",
        "timestamp": 1585149071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> okay so you can either add <code>.with_reveal_all()</code> to these files:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src/librustc_trait_selection/traits/select.rs#L496\" title=\"https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src/librustc_trait_selection/traits/select.rs#L496\">https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src/librustc_trait_selection/traits/select.rs#L496</a> </li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/9d0ae58d30523198dec60a9cd840c30c2bd9c4c0/src/librustc_trait_selection/traits/fulfill.rs#L505\" title=\"https://github.com/rust-lang/rust/blob/9d0ae58d30523198dec60a9cd840c30c2bd9c4c0/src/librustc_trait_selection/traits/fulfill.rs#L505\">https://github.com/rust-lang/rust/blob/9d0ae58d30523198dec60a9cd840c30c2bd9c4c0/src/librustc_trait_selection/traits/fulfill.rs#L505</a></li>\n</ul>\n<p>or just here: <a href=\"https://github.com/rust-lang/rust/blob/bfc32dd106f0fe191b8bcd9b76348a8875c30a60/src/librustc/mir/interpret/queries.rs#L41\" title=\"https://github.com/rust-lang/rust/blob/bfc32dd106f0fe191b8bcd9b76348a8875c30a60/src/librustc/mir/interpret/queries.rs#L41\">https://github.com/rust-lang/rust/blob/bfc32dd106f0fe191b8bcd9b76348a8875c30a60/src/librustc/mir/interpret/queries.rs#L41</a></p>\n<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> I really don't know if anything at the <em>value</em> levels respects <code>Reveal::UserFacing</code> <em>at all</em>, since we seem to leave that for types (associated type defaults and <code>impl Trait</code>)</p>",
        "id": 191760406,
        "sender_full_name": "eddyb",
        "timestamp": 1585149254
    },
    {
        "content": "<p>probably not</p>",
        "id": 191760521,
        "sender_full_name": "oli",
        "timestamp": 1585149281
    },
    {
        "content": "<p>I never took any care to handle <code>Reveal::UserFacing</code>, because I didn't understand it when it was relevant</p>",
        "id": 191760589,
        "sender_full_name": "oli",
        "timestamp": 1585149304
    },
    {
        "content": "<p>then we can change <code>const_eval_resolve</code> I suppose</p>",
        "id": 191760598,
        "sender_full_name": "eddyb",
        "timestamp": 1585149306
    },
    {
        "content": "<p>(and remove <code>.with_reveal_all()</code> from callsites)</p>",
        "id": 191761609,
        "sender_full_name": "eddyb",
        "timestamp": 1585149605
    },
    {
        "content": "<p>Currently testing with updated <code>const_eval_resolve</code>.</p>\n<p>When is <code>Reveal::UserFacing</code> needed then, only for default assoc types?</p>",
        "id": 191762190,
        "sender_full_name": "lcnr",
        "timestamp": 1585149780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I heard that you have a lot of free time right now. <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> </p>\n<p>As I feared that you might not know what to do in the following weeks I rebased and improved<br>\n<a href=\"https://github.com/rust-lang/rust/pull/70107\" title=\"https://github.com/rust-lang/rust/pull/70107\">https://github.com/rust-lang/rust/pull/70107</a>, meaning that it should be ready for review again <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 196052320,
        "sender_full_name": "lcnr",
        "timestamp": 1588427111
    },
    {
        "content": "<p>Nevermind, it's not... Forgot to implement a previously mentioned change <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 196054312,
        "sender_full_name": "lcnr",
        "timestamp": 1588429846
    },
    {
        "content": "<p>Ok, I now generalized <code>compute</code> and removed <code>compute_const</code>. Now its actually ready</p>",
        "id": 196058940,
        "sender_full_name": "lcnr",
        "timestamp": 1588436387
    },
    {
        "content": "<p>Can someone start another perf run for <a href=\"https://github.com/rust-lang/rust/pull/70107\">https://github.com/rust-lang/rust/pull/70107</a>?</p>",
        "id": 198861137,
        "sender_full_name": "lcnr",
        "timestamp": 1590566769
    },
    {
        "content": "<p>(looks like it was done)</p>",
        "id": 198895626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1590588577
    }
]