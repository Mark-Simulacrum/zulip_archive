[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I wanted to follow up on that conversation from <a class=\"stream-topic\" data-stream-id=\"238009\" href=\"/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-03-18.20compiler-team.23484\">#t-compiler/meetings &gt; [steering meeting] 2022-03-18 compiler-team#484</a></p>",
        "id": 275822280,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647619066
    },
    {
        "content": "<p>namely, you pointed out this:</p>",
        "id": 275822295,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647619077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-03-18.20compiler-team.23484/near/275811806\">said</a>:</p>\n<blockquote>\n<p>There are only 2 ABIs on x86_64 Windows: the standard x86_64 one and vectorcall. (IIRC)</p>\n</blockquote>",
        "id": 275822426,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647619117
    },
    {
        "content": "<p>so: what happens in Visual Studio when one tries to compile a function with extern \"thiscall\" on x86_64 on Windows?</p>",
        "id": 275822516,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647619150
    },
    {
        "content": "<p>does it get silently remapped to the standard x86_64 calling convention?</p>",
        "id": 275822564,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647619164
    },
    {
        "content": "<blockquote>\n<p>On ARM, ARM64, and x64 machines, __thiscall is accepted and ignored by the compiler. That's because they use a register-based calling convention by default.</p>\n</blockquote>\n<p><a href=\"https://docs.microsoft.com/en-us/cpp/cpp/thiscall?view=msvc-170\">https://docs.microsoft.com/en-us/cpp/cpp/thiscall?view=msvc-170</a></p>",
        "id": 275822603,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1647619175
    },
    {
        "content": "<p>(if that is the case, then I think we could make an argument for doing the same)</p>",
        "id": 275822611,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647619177
    },
    {
        "content": "<p>huh. Okay.</p>",
        "id": 275822659,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647619193
    },
    {
        "content": "<p>This applies to all the calling conventions on i686 except for vectorcall.</p>",
        "id": 275822672,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1647619199
    },
    {
        "content": "<p>Oh but </p>\n<blockquote>\n<p>On ARM machines, __vectorcall is accepted and ignored by the compiler.</p>\n</blockquote>",
        "id": 275822825,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1647619222
    },
    {
        "content": "<blockquote>\n<p>The __vectorcall calling convention on x64 extends the standard x64 calling convention to take advantage of additional registers.</p>\n</blockquote>",
        "id": 275822871,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1647619238
    },
    {
        "content": "<p><a href=\"https://docs.microsoft.com/en-us/cpp/cpp/vectorcall\">https://docs.microsoft.com/en-us/cpp/cpp/vectorcall</a></p>",
        "id": 275822887,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1647619245
    },
    {
        "content": "<p>I'm not sure if we want to copy that behavior or not. I'm guessing silently ignoring it was probably done because just switching from x86 to x64 in VS/msvc would break a lot of code in the wild that hadn't been written with this fact in mind.</p>",
        "id": 275823289,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1647619363
    },
    {
        "content": "<p>I'm not sure how true that is of Rust code.</p>",
        "id": 275823320,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1647619372
    },
    {
        "content": "<p>hmm.</p>",
        "id": 275827274,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647620831
    },
    {
        "content": "<p>yes, annoying code duplication is different from outright breakage</p>",
        "id": 275827293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647620843
    },
    {
        "content": "<p>mostly I was musing about this because my assumed direction was something like the straw proposal I had put into the meeting</p>",
        "id": 275827351,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647620874
    },
    {
        "content": "<p>namely this:</p>",
        "id": 275827447,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647620902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bsteering.20meeting.5D.202022-03-18.20compiler-team.23484/near/275812175\">said</a>:</p>\n<blockquote>\n<p><code>extern cfg_match!(target_arch, \"x86\" =&gt; \"thiscall\", \"x86_64\" =&gt; \"fastcall\") fn foo() {}</code></p>\n</blockquote>\n<p>(update: its possible the \"fastcall\" above should have just been \"C\"; I'm not sure.)</p>",
        "id": 275827450,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647620903
    },
    {
        "content": "<p>and after reflecting on it, I wondered \"Is this actually going to provide <em>value</em>? Or is it just going to be boilerplate that <em>could always</em> have been written just as <code>extern \"thiscall\" fn foo()</code></p>",
        "id": 275827554,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647620944
    },
    {
        "content": "<p>(where <code>extern \"thiscall\"</code> silently maps to <code>extern \"C\"</code> on \"x86_64\" Windows targets.)</p>",
        "id": 275827662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647620987
    },
    {
        "content": "<p>Yeah, I'm unsure. The other thing that's a bit different for us is that most of the time, these annotations are going to be on FFI code where it's really important that what you write matches up with what is actually expected at link/load time. <br>\nI could see ignoring abis that don't make sense for the current target being confusing to users. On the other hand, perhaps it will match up with what msvc does so often that it's just noise and doesn't matter.</p>",
        "id": 275828721,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1647621371
    },
    {
        "content": "<p>in any case, if I'm right in my expectations, we can always <em>adopt the msvc approach later</em></p>",
        "id": 275843403,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647627675
    },
    {
        "content": "<p>So i think I will focus on the near term goal of enabling ergonomic-yet-explicit specification here. Which I think means an MCP for making the ABI in <code>extern ABI</code> a macro expansion position.</p>",
        "id": 275843501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1647627724
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/blob/1bfe40d11c3630254504fb73eeccfca28d50df52/compiler/rustc_target/src/spec/mod.rs#L1610-L1639\">https://github.com/rust-lang/rust/blob/1bfe40d11c3630254504fb73eeccfca28d50df52/compiler/rustc_target/src/spec/mod.rs#L1610-L1639</a></p>",
        "id": 275846202,
        "sender_full_name": "nagisa",
        "timestamp": 1647629099
    },
    {
        "content": "<p>I really dislike whatever food was being served to the toolchain developers at microsoft on the day when this fallback thing was decided upon. This is almost as bad as ordering a chair on amazon and having a pillow delivered. Can sit on it? sure. Is it a chair? eh...</p>",
        "id": 275847298,
        "sender_full_name": "nagisa",
        "timestamp": 1647629664
    }
]