[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I'm here :)</p>",
        "id": 171750294,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564121328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span></p>",
        "id": 171750305,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564121357
    },
    {
        "content": "<p>I'm currently hacking on removing the TLS dependency from async/await</p>",
        "id": 171750309,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564121369
    },
    {
        "content": "<p>also, cc <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> &amp; <span class=\"user-mention\" data-user-id=\"116883\">@tmandry</span> who gave me initial pointers</p>",
        "id": 171750367,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564121454
    },
    {
        "content": "<p>My understanding of this issue is that I need to do a few things. </p>\n<p>1. Add arguments to <code>resume()</code><br>\n2. change the lowering code to have a <code> context = yield ...</code> type pattern that mutates the shared context inside the expanded generator future<br>\n3. make  yield actually return something other than the unit type</p>",
        "id": 171750568,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564121771
    },
    {
        "content": "<p>there is some question about how to get the initial state into the <code>from_generator()</code> though, since it needs to be a valid <code>Context&lt;'_&gt;</code> IIUC</p>\n<p><a href=\"https://gist.github.com/cavedweller/22ce62dc823defac5fc54e2160f084f8/a58abb06fe46f15515b9a4c77ed9d3f7f1a0e27e\" target=\"_blank\" title=\"https://gist.github.com/cavedweller/22ce62dc823defac5fc54e2160f084f8/a58abb06fe46f15515b9a4c77ed9d3f7f1a0e27e\">https://gist.github.com/cavedweller/22ce62dc823defac5fc54e2160f084f8/a58abb06fe46f15515b9a4c77ed9d3f7f1a0e27e</a></p>",
        "id": 171750852,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564122253
    },
    {
        "content": "<p>although maybe a <code>yield ()</code> would work right there as well</p>",
        "id": 171750855,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564122268
    },
    {
        "content": "<p>The first step would be to add generator arguments back. My original PR used <code>gen arg</code> as the syntax for it, but it probably make more sense to use the closure syntax for it <code>|arg1, arg2| {  ... }</code>.</p>",
        "id": 171751034,
        "sender_full_name": "Zoxc",
        "timestamp": 1564122601
    },
    {
        "content": "<p>Are generator arguments really necessary? shouldn't args on resume be sufficient?</p>",
        "id": 171751087,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564122645
    },
    {
        "content": "<p>(context: I have no idea what I'm talking about. Just trying to understand :) )</p>",
        "id": 171751099,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564122675
    },
    {
        "content": "<p>Generator arguments would be the arguments you pass to <code>resume</code>.</p>",
        "id": 171751145,
        "sender_full_name": "Zoxc",
        "timestamp": 1564122726
    },
    {
        "content": "<p>ah, cool! I used the horrific <code>rust-call</code> abi hack to do that</p>\n<p><code> extern \"rust-call\" fn resume(self: Pin&lt;&amp;mut Self&gt;, args: Args) -&gt; GeneratorState&lt;Self::Yield, Self::Return&gt;;</code></p>",
        "id": 171751160,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564122800
    },
    {
        "content": "<p>but I can do that differently if prefered</p>",
        "id": 171751175,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564122811
    },
    {
        "content": "<p>This is my branch with generators arguments: <a href=\"https://github.com/Zoxc/rust/commits/gen-body\" target=\"_blank\" title=\"https://github.com/Zoxc/rust/commits/gen-body\">https://github.com/Zoxc/rust/commits/gen-body</a></p>",
        "id": 171751305,
        "sender_full_name": "Zoxc",
        "timestamp": 1564122975
    },
    {
        "content": "<p>It has bitrotted now, but it might be useful to look at. (last 2 commits)</p>",
        "id": 171751317,
        "sender_full_name": "Zoxc",
        "timestamp": 1564123027
    },
    {
        "content": "<p>This would have been very helpful a couple hours ago :D</p>",
        "id": 171751375,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564123108
    },
    {
        "content": "<p>You should not make <code>yield</code> return the arguments as that is a terrible solution (it requires you to yield to access the arguments).</p>",
        "id": 171751392,
        "sender_full_name": "Zoxc",
        "timestamp": 1564123161
    },
    {
        "content": "<p>ok :/ What would you prefer?</p>",
        "id": 171751397,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564123185
    },
    {
        "content": "<p>Using the same syntax as closures (with named arguments)</p>",
        "id": 171751462,
        "sender_full_name": "Zoxc",
        "timestamp": 1564123267
    },
    {
        "content": "<p>I'm not really following what that looks like unfortunately</p>",
        "id": 171751525,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564123359
    },
    {
        "content": "<p>Do you know how to declare and use arguments in closures?</p>",
        "id": 171751791,
        "sender_full_name": "Zoxc",
        "timestamp": 1564123801
    },
    {
        "content": "<p>yes</p>",
        "id": 171751838,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564123812
    },
    {
        "content": "<p>Exactly the same syntax could be used for generators =P</p>",
        "id": 171751845,
        "sender_full_name": "Zoxc",
        "timestamp": 1564123852
    },
    {
        "content": "<p>Currently generators have the same syntax as closures, but are required to have 0 arguments.</p>",
        "id": 171751867,
        "sender_full_name": "Zoxc",
        "timestamp": 1564123908
    },
    {
        "content": "<p>ooo. It's my unfamiliarity with the constraints on generators here that was throwing me off</p>",
        "id": 171751920,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564123936
    },
    {
        "content": "<p>It's probably not the easiest way to add arguments though, using a dedicated AST node like my branch might be easier.</p>",
        "id": 171752010,
        "sender_full_name": "Zoxc",
        "timestamp": 1564124069
    },
    {
        "content": "<p>You could use a <code>gen_arg!</code> macro to generate the AST node (like <code>asm!</code>)</p>",
        "id": 171752025,
        "sender_full_name": "Zoxc",
        "timestamp": 1564124110
    },
    {
        "content": "<p>I guess an intrinsic would also work instead of the custom AST node, and be less invasive</p>",
        "id": 171752151,
        "sender_full_name": "Zoxc",
        "timestamp": 1564124309
    },
    {
        "content": "<p>ok, this might be silly</p>",
        "id": 171752252,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564124462
    },
    {
        "content": "<p>why is getting the result from the <code>yield</code> bad?</p>",
        "id": 171752262,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564124472
    },
    {
        "content": "<p>I can't think of a scenario where you wouldn't be calling it</p>",
        "id": 171752270,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564124495
    },
    {
        "content": "<p>I also have practically no insight into the long term plans for Generators though</p>",
        "id": 171752327,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564124543
    },
    {
        "content": "<p>You may want to start an async operation using a context passed in the argument then yield to wait for it to complete.</p>",
        "id": 171752831,
        "sender_full_name": "Zoxc",
        "timestamp": 1564125259
    },
    {
        "content": "<p>which is kinda exactly what I need I guess as well</p>",
        "id": 171754416,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564127439
    },
    {
        "content": "<p>I'll do this with a specialized node tomorrow</p>",
        "id": 171754425,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564127464
    },
    {
        "content": "<blockquote>\n<p>ou may want to start an async operation using a context passed in the argument then yield to wait for it to complete.</p>\n</blockquote>",
        "id": 171785605,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1564156936
    },
    {
        "content": "<p>that isn't how <code>async</code> works today</p>",
        "id": 171785612,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1564156942
    },
    {
        "content": "<p>no code is run until you <code>.poll</code> for the first time</p>",
        "id": 171785624,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1564156952
    },
    {
        "content": "<p>(<code>.resume</code>)</p>",
        "id": 171785630,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1564156954
    },
    {
        "content": "<p>on the very first poll, you enter the function, which is a generator. the very first <code>.resume</code> arguments translate to the arguments to that closure body</p>",
        "id": 171785705,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1564157017
    },
    {
        "content": "<p>store the results in a context variable, and update it every time <code>yield</code> is called</p>",
        "id": 171785780,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1564157055
    },
    {
        "content": "<p><a href=\"https://gist.github.com/cavedweller/22ce62dc823defac5fc54e2160f084f8\" target=\"_blank\" title=\"https://gist.github.com/cavedweller/22ce62dc823defac5fc54e2160f084f8\">https://gist.github.com/cavedweller/22ce62dc823defac5fc54e2160f084f8</a></p>",
        "id": 171785930,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564157185
    },
    {
        "content": "<blockquote>\n<p>arguments translate to the arguments to that closure body</p>\n</blockquote>",
        "id": 171785944,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564157199
    },
    {
        "content": "<p>like that?</p>",
        "id": 171785947,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564157201
    },
    {
        "content": "<p>without the rename of ctx to context, yes</p>",
        "id": 171786126,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1564157369
    },
    {
        "content": "<p>it needs to remain updated after the call to <code>.await</code></p>",
        "id": 171786132,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1564157381
    },
    {
        "content": "<p><a href=\"https://gist.github.com/cramertj/de3f16afe33c47cc814f3929cbe33a7a\" target=\"_blank\" title=\"https://gist.github.com/cramertj/de3f16afe33c47cc814f3929cbe33a7a\">https://gist.github.com/cramertj/de3f16afe33c47cc814f3929cbe33a7a</a></p>",
        "id": 171786215,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1564157440
    },
    {
        "content": "<p>cool, things make sense :)</p>",
        "id": 171786466,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564157664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> interesting, I think that implies some sort of rule that our arg <code>cx</code> must _always_ be replaced by a <code>yield</code> (if it is, for example, a <code>&amp;mut Context</code>), so it's not implicitly saved in the generator object</p>",
        "id": 171805942,
        "sender_full_name": "tmandry",
        "timestamp": 1564171431
    },
    {
        "content": "<p>although as I'm typing this I realize that typeck for generators might basically already do this</p>",
        "id": 171806003,
        "sender_full_name": "tmandry",
        "timestamp": 1564171454
    },
    {
        "content": "<p>there was mention in one of the pre-RFCs of yielding the context <em>out</em> of the generator, but I guess that isn't necessary if typeck can handle this</p>",
        "id": 171806162,
        "sender_full_name": "tmandry",
        "timestamp": 1564171598
    },
    {
        "content": "<p>So I have the lowering working on this (finally)</p>",
        "id": 172067227,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564513813
    },
    {
        "content": "<p>currently investigating modifying the generator code to have yield return a value</p>",
        "id": 172067298,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564513879
    },
    {
        "content": "<p>if you have any insight <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>, it'd be appreciated :)</p>",
        "id": 172067321,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564513897
    },
    {
        "content": "<p>oooh, is this the issue that will allow <code>async fn</code> and <code>.await</code> without libstd, and only libcore?</p>",
        "id": 172071320,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564516948
    },
    {
        "content": "<p>I believe so, or at least moves us much closer to that</p>",
        "id": 172071578,
        "sender_full_name": "simulacrum",
        "timestamp": 1564517141
    },
    {
        "content": "<p>yeah, that's what I'm working on unblocking right now</p>",
        "id": 172072342,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564517676
    },
    {
        "content": "<p>nice!</p>",
        "id": 172075140,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564519763
    },
    {
        "content": "<p>It'll be a while :P It's pretty gnarly</p>",
        "id": 172077015,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564521186
    },
    {
        "content": "<p>Are you done yet? /troll</p>",
        "id": 172090438,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1564535138
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;index out of bounds: the len is 1 but the index is 1&#39;, /usr/local/google/home/bwb/rust/src/libcore/slice/mod.rs:2690:10\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\nerror: internal compiler error: cat_expr Errd\n --&gt; src/lib.rs:3:26\n  |\n3 |   pub async fn bar() -&gt; u32{\n  |  __________________________^\n4 | |     3\n5 | | }\n  | |_^\n\nerror: internal compiler error: cat_expr Errd\n --&gt; src/lib.rs:3:26\n  |\n3 |   pub async fn bar() -&gt; u32{\n  |  __________________________^\n4 | |     3\n5 | | }\n  | |_^\n</pre></div>",
        "id": 172090595,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564535326
    },
    {
        "content": "<p>not yet</p>",
        "id": 172090598,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564535332
    },
    {
        "content": "<p>teaching <code>yield ()</code> that it can return something other than <code>()</code> is causing me to learn a lot about... well, all of the rustc internals</p>",
        "id": 172090622,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1564535395
    },
    {
        "content": "<p>hey</p>",
        "id": 173036452,
        "sender_full_name": "eddyb",
        "timestamp": 1565625923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217516\">@Benjamin Brittain</span> just in case you didn't see my pings elsewhere: I should be more available now</p>",
        "id": 173036469,
        "sender_full_name": "eddyb",
        "timestamp": 1565625940
    },
    {
        "content": "<p>I disagree with making this anything like closures</p>",
        "id": 173036523,
        "sender_full_name": "eddyb",
        "timestamp": 1565625968
    },
    {
        "content": "<p>forcing it to always be one thing makes expression <code>yield</code> much easier</p>",
        "id": 173036533,
        "sender_full_name": "eddyb",
        "timestamp": 1565625980
    },
    {
        "content": "<p><code>Generator</code> -&gt; <code>Generator&lt;T&gt;</code></p>",
        "id": 173036589,
        "sender_full_name": "eddyb",
        "timestamp": 1565626038
    },
    {
        "content": "<p>Hey! I missed your pings because I've been on a train the last week :)</p>",
        "id": 173047748,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1565634718
    },
    {
        "content": "<p>I'm back and I'd like to get working on this again</p>",
        "id": 173047796,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1565634727
    },
    {
        "content": "<p>I don't have any particular investment in an implementation method (nor the context), just a desire to remove TLS</p>",
        "id": 173047851,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1565634776
    },
    {
        "content": "<p>cc/ <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> ^</p>",
        "id": 173047876,
        "sender_full_name": "Benjamin Brittain",
        "timestamp": 1565634802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217516\">@Benjamin Brittain</span> btw unless I am actively talking, feel free to ping me because Zulip won't notify me otherwise :(</p>",
        "id": 173091551,
        "sender_full_name": "eddyb",
        "timestamp": 1565680605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217516\">@Benjamin Brittain</span> what do you have so far? and what are you stuck on?</p>",
        "id": 173091565,
        "sender_full_name": "eddyb",
        "timestamp": 1565680630
    },
    {
        "content": "<p>maybe move this discussion to <a class=\"stream\" data-stream-id=\"187312\" href=\"/#narrow/stream/187312-wg-async-foundations\">#wg-async-foundations</a> ?</p>",
        "id": 173233549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1565810487
    }
]