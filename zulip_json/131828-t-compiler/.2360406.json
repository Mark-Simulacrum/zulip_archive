[
    {
        "content": "<p>Can someone guide me on issue <a href=\"https://github.com/rust-lang/rust/issues/60406\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60406\">#60406</a>?</p>",
        "id": 164630072,
        "sender_full_name": "Caio",
        "timestamp": 1556723118
    },
    {
        "content": "<blockquote>\n<p>Tracking issue for RFC 2565, \"Attributes in formal function parameter position\" <a href=\"https://github.com/rust-lang/rust/issues/60406\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60406\">#60406</a></p>\n</blockquote>",
        "id": 164630625,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556723596
    },
    {
        "content": "<p>For context :)</p>",
        "id": 164630629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556723599
    },
    {
        "content": "<p>I feel like <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> added support for this? Oh, no, it was <em>type</em> parameters that they added support for</p>",
        "id": 164630652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556723627
    },
    {
        "content": "<p>Still, that PR might serve as a good \"guidepost\"</p>",
        "id": 164630657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556723639
    },
    {
        "content": "<p>Unfortunately, I was unable to find on GitHub this specific PR from <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>. Still looking though</p>",
        "id": 164719980,
        "sender_full_name": "Caio",
        "timestamp": 1556812545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211466\">@Caio</span> <a href=\"https://github.com/rust-lang/rust/pull/34764\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/34764\">https://github.com/rust-lang/rust/pull/34764</a></p>",
        "id": 164720963,
        "sender_full_name": "centril",
        "timestamp": 1556813230
    },
    {
        "content": "<p>also cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></p>",
        "id": 164720973,
        "sender_full_name": "centril",
        "timestamp": 1556813237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> Thanks!</p>",
        "id": 164759735,
        "sender_full_name": "Caio",
        "timestamp": 1556846463
    },
    {
        "content": "<p>libsyntax/parse/parser.rs -&gt; The parsing of a function parameter passes through  <code>parse_pat_with_range_pat</code> and then <code>lit_token</code>, which tells if a token is illegal or not. In my case,  <code>expected argument name, found '#'</code> for something like <code>foo(#[bar] u8)</code></p>",
        "id": 165181963,
        "sender_full_name": "Caio",
        "timestamp": 1557335877
    },
    {
        "content": "<p>Should another literal by added in token::Lit to handle this new feature?</p>",
        "id": 165182424,
        "sender_full_name": "Caio",
        "timestamp": 1557336189
    },
    {
        "content": "<p>Actually, NVM. I was in the wrong trail</p>",
        "id": 165186777,
        "sender_full_name": "Caio",
        "timestamp": 1557339205
    },
    {
        "content": "<p>Are the tokens normalized in <a href=\"http://parser.rs\" target=\"_blank\" title=\"http://parser.rs\">parser.rs</a>?</p>",
        "id": 165199568,
        "sender_full_name": "Caio",
        "timestamp": 1557348446
    },
    {
        "content": "<p>Like, the user provided <code>foo(     #[bar]             field     :     u8)</code> and the additional whitespaces are already stripped in <code>parser.rs</code></p>",
        "id": 165199719,
        "sender_full_name": "Caio",
        "timestamp": 1557348579
    },
    {
        "content": "<p>Also, now that <code>ast::Arg</code> has <code>Attributes</code>, how should I expose it to the user through the  <code>proc_macro</code> crate?</p>",
        "id": 165200293,
        "sender_full_name": "Caio",
        "timestamp": 1557349043
    },
    {
        "content": "<p>I don't want to be a boring person but these questions came out of despair</p>",
        "id": 165478183,
        "sender_full_name": "Caio",
        "timestamp": 1557690041
    },
    {
        "content": "<p>I know you guys are too busy and I'm sorry for bothering</p>",
        "id": 165478185,
        "sender_full_name": "Caio",
        "timestamp": 1557690045
    },
    {
        "content": "<p>The only thing left to complete this feature is macro resolution, which I couldn't fully understand after hours of struggle</p>",
        "id": 165478305,
        "sender_full_name": "Caio",
        "timestamp": 1557690268
    },
    {
        "content": "<p>Any tips about it would be very welcoming</p>",
        "id": 165478323,
        "sender_full_name": "Caio",
        "timestamp": 1557690313
    },
    {
        "content": "<p>PR is in <a href=\"https://github.com/rust-lang/rust/pull/60669\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60669\">https://github.com/rust-lang/rust/pull/60669</a></p>",
        "id": 165478328,
        "sender_full_name": "Caio",
        "timestamp": 1557690356
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> ^--- since you are reviewing the PR</p>",
        "id": 165478524,
        "sender_full_name": "centril",
        "timestamp": 1557690686
    },
    {
        "content": "<p>Sorry for the delay, I'll get to this PR during the week.</p>",
        "id": 165478718,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1557691004
    },
    {
        "content": "<p>Macros are not supposed to be resolved in that position (not until some infrastructural pre-requisite work is done at least).</p>",
        "id": 165478749,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1557691074
    },
    {
        "content": "<p>Look what happens with attributes on e.g. generic parameters <code>fn f&lt;#[attr] T&gt;</code>, they are not resolved, they are kind of whitelisted through a hack in <code>feature_gate.rs</code>.</p>",
        "id": 165478820,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1557691148
    },
    {
        "content": "<p>(Which doesn't require any extra work for fn param attributes specifically.)</p>",
        "id": 165478831,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1557691184
    },
    {
        "content": "<p><code>cfg</code> support will need to be implemented though, so I'd recommend to look at that (<code>libsyntax/config.rs</code>, by analogy with attributes in other positions).</p>",
        "id": 165478938,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1557691314
    },
    {
        "content": "<blockquote>\n<p>not until some infrastructural pre-requisite work is done at least</p>\n</blockquote>\n<p>That's why I always had a feeling that it's not the best time to implement support for attributes in more locations right now.</p>",
        "id": 165479058,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1557691452
    },
    {
        "content": "<p>I hoped for that the RFC staying unimplemented for some time, but well...</p>",
        "id": 165479081,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1557691522
    },
    {
        "content": "<p>(The pre-requisite work is in my queue, it's a part of the macro modularization work, I've just consistently happened to be busy in February-April.)</p>",
        "id": 165479135,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1557691619
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> , this shed some light on the matter</p>",
        "id": 165485608,
        "sender_full_name": "Caio",
        "timestamp": 1557702160
    },
    {
        "content": "<p>The closest I could get in the lexer is the following:</p>\n<div class=\"codehilite\"><pre><span></span>&#39;(&#39; =&gt; {\n    self.bump();\n    if self.ch_is(&#39;#&#39;) &amp;&amp; self.nextch_is(&#39;[&#39;) &amp;&amp; ident_start(self.nextnextch()) {\n        loop {\n            let raw_start = self.pos;\n            self.bump();\n            while ident_continue(self.ch) { self.bump(); }\n            let span = self.mk_sp(raw_start, self.pos);\n            self.sess.param_attr_spans.borrow_mut().push(span);\n            self.bump();\n            if !self.ch_is(&#39;#&#39;)\n                || !self.nextch_is(&#39;[&#39;)\n                || !ident_start(self.nextnextch())\n            {\n                break;\n            }\n        }\n        Ok(token::CloseDelim(token::Bracket))\n    }\n    else {\n        Ok(token::OpenDelim(token::Paren))\n    }\n}\n</pre></div>",
        "id": 165759952,
        "sender_full_name": "Caio",
        "timestamp": 1557958582
    },
    {
        "content": "<p>Unfortunately, this won't work because of tuple structs: <code>struct Foo(#[attr] i32)</code></p>",
        "id": 165760107,
        "sender_full_name": "Caio",
        "timestamp": 1557958704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211466\">@Caio</span> , are you trying to collect spans for feature gating? (<a href=\"https://github.com/rust-lang/rust/pull/60669#discussion_r283902442\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60669#discussion_r283902442\">https://github.com/rust-lang/rust/pull/60669#discussion_r283902442</a>)</p>\n<p>In that case you need the parser, not lexer, the spans can be collected on every call to <code>fn parse_arg_attributes</code>.</p>",
        "id": 165795173,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1558000611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Sorry, it was a misunderstanding of mine (lexer instead of parser).</p>",
        "id": 165819810,
        "sender_full_name": "Caio",
        "timestamp": 1558019948
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 165819816,
        "sender_full_name": "Caio",
        "timestamp": 1558019956
    },
    {
        "content": "<p>What would be the best thing to add into the <code>Annotable</code> enum?<br>\nAccording to the RFC, people expect <code>pat: type</code>, so I think it should be <code>Arg((P&lt;ast::Pat&gt;, P&lt;ast::Ty&gt;))</code></p>",
        "id": 165891784,
        "sender_full_name": "Caio",
        "timestamp": 1558092630
    },
    {
        "content": "<p>Or, instead, should a new member be added into <code>InvocationKind</code>?</p>\n<div class=\"codehilite\"><pre><span></span>pub enum InvocationKind {\n    Bang { ... },\n    Attr { ... },\n    ArgAttr { ... },\n    Derive { ... },\n}\n</pre></div>",
        "id": 165891910,
        "sender_full_name": "Caio",
        "timestamp": 1558092805
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211466\">@Caio</span> <br>\nWhy do you need to touch <code>Annotatable</code>?</p>",
        "id": 165895244,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1558095439
    },
    {
        "content": "<p>Or <code>InvocationKind</code>.</p>",
        "id": 165895248,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1558095452
    },
    {
        "content": "<p>That's the macro support which is out of scope now.</p>",
        "id": 165895266,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1558095478
    },
    {
        "content": "<p>Use any other non-macro attribute position as an example (e.g. attributes on <code>match</code> arms), they are implemented without ever working with <code>Annotatable</code>, or <code>AstFragment</code>, or all that macro machinery.</p>",
        "id": 165895479,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1558095665
    },
    {
        "content": "<p>Actually, I don't know why exactly :P<br>\nJust wanted to expand attributes inside arguments</p>",
        "id": 165895585,
        "sender_full_name": "Caio",
        "timestamp": 1558095743
    },
    {
        "content": "<blockquote>\n<p>(e.g. attributes on match arms)</p>\n</blockquote>\n<p>Thanks! I will look into the PR</p>",
        "id": 165895613,
        "sender_full_name": "Caio",
        "timestamp": 1558095777
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> The user needs a way to declare a custom macro for parameters<br>\nSince <code>proc_macro_attribute</code> isn't allowed, I guess a new attribute like <code>proc_macro_arg_attribute</code> would be required for proc-macro crates<br>\nThat's right?</p>",
        "id": 166000407,
        "sender_full_name": "Caio",
        "timestamp": 1558230839
    },
    {
        "content": "<blockquote>\n<p>The user needs a way to declare a custom macro for parameters</p>\n</blockquote>\n<p>The RFC says this is not supported.<br>\nIf it's supported in the future, then it will be done directly with <code>proc_macro_attribute</code>, without introducing a new <code>proc_macro_*</code> attribute.</p>",
        "id": 166014822,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1558257532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>  Thanks!</p>",
        "id": 166016910,
        "sender_full_name": "Caio",
        "timestamp": 1558261369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> This Pr (<a href=\"https://github.com/rust-lang/rust/pull/12812\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/12812\">https://github.com/rust-lang/rust/pull/12812</a>) that enables attrs on match is from 2014 (pre 1.0) and didn't help much</p>",
        "id": 166035969,
        "sender_full_name": "Caio",
        "timestamp": 1558292985
    },
    {
        "content": "<p>I also tried to see get some clues from <code>fold.rs</code> to no avail</p>",
        "id": 166036079,
        "sender_full_name": "Caio",
        "timestamp": 1558293115
    },
    {
        "content": "<p>I tried and I am tying really hard to expand macros but still I have no idea where to start</p>",
        "id": 166036198,
        "sender_full_name": "Caio",
        "timestamp": 1558293258
    },
    {
        "content": "<p>Can you indicate some file or anything that can help me?</p>",
        "id": 166036216,
        "sender_full_name": "Caio",
        "timestamp": 1558293323
    },
    {
        "content": "<blockquote>\n<p>This Pr (<a href=\"https://github.com/rust-lang/rust/pull/12812\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/12812\">https://github.com/rust-lang/rust/pull/12812</a>) that enables attrs on match is from 2014 (pre 1.0) and didn't help much</p>\n</blockquote>\n<p>Even if it's old it still contains all the relevant pieces of code actually (I rather meant looking at the current state of match arm attributes than that PR from 2014).<br>\nYour PR already implements everything except for the <code>libsyntax/config.rs</code> part.<br>\nAs I previously said, expanding macros is out of scope for this PR, no need to think about it right now.<br>\n<code>#[cfg]</code> expansion is a separate mechanism from macros, if that clarifies the matter.</p>",
        "id": 166069202,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1558343735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Finally got it. I wasn't calling the <code>expand.rs</code> bits, only the <code>config.rs</code> stuff</p>",
        "id": 166081164,
        "sender_full_name": "Caio",
        "timestamp": 1558355925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> I managed to finish the last (hopefully) issues</p>",
        "id": 166347814,
        "sender_full_name": "Caio",
        "timestamp": 1558606282
    },
    {
        "content": "<p>I started reviewing yesterday, but run out of time, unfortunately.<br>\nI'll try to do it today.</p>",
        "id": 166348089,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1558606594
    },
    {
        "content": "<p>Thanks! Take your time</p>",
        "id": 166350097,
        "sender_full_name": "Caio",
        "timestamp": 1558608995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>  I think <code>unused_variables</code> needs implementation, maybe in <code>liveness.rs</code>?</p>",
        "id": 166477044,
        "sender_full_name": "Caio",
        "timestamp": 1558721903
    },
    {
        "content": "<p>If so, could you describe some brief steps to implement it?</p>",
        "id": 166477097,
        "sender_full_name": "Caio",
        "timestamp": 1558721942
    },
    {
        "content": "<p>Guess 1: All UI tests disable <code>unused</code> warnings by default to avoid noise.<br>\nMake sure that they are enabled for the test you are working on.</p>",
        "id": 166477673,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1558722316
    },
    {
        "content": "<p>Guess 2: Function parameters do not have \"lint scopes\", those scopes are used to demark regions of code on which <code>allow</code>/<code>warn</code>/etc attributes work.<br>\nIn this case you'll need to do something very similar to what this recent commit does - <a href=\"https://github.com/rust-lang/rust/pull/60174/commits/e784595c280da04c98e76a5ce9d603b58f6a88e2\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60174/commits/e784595c280da04c98e76a5ce9d603b58f6a88e2\">https://github.com/rust-lang/rust/pull/60174/commits/e784595c280da04c98e76a5ce9d603b58f6a88e2</a></p>",
        "id": 166478026,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1558722526
    },
    {
        "content": "<p>I.e. the expected changes are in <code>librustc/lint/mod.rs</code>.<br>\n<code>unused_variables</code> logic by itself should work correctly, the issue is with enabling/disabling diagnostic output from it (which is what allow/warn and friends do).</p>",
        "id": 166478301,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1558722703
    },
    {
        "content": "<p>If you wanted to test guess 1 you could run the compiler directly rather than through the test framework</p>",
        "id": 166486746,
        "sender_full_name": "yodal",
        "timestamp": 1558729133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Sorry for the delay, I had to leave my PC</p>",
        "id": 166500718,
        "sender_full_name": "Caio",
        "timestamp": 1558743474
    },
    {
        "content": "<p>I think it is probably going to be Guess 2. Nevertheless, all these information are very important. Thank you</p>",
        "id": 166500779,
        "sender_full_name": "Caio",
        "timestamp": 1558743548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"218608\">@yodal</span>  Thank you for the suggestion. By the way, you made a terrific job on const generics</p>",
        "id": 166500856,
        "sender_full_name": "Caio",
        "timestamp": 1558743676
    },
    {
        "content": "<p>Thank you, though I insist @varkor gets most of the credit as he did most of the hard work</p>",
        "id": 166500944,
        "sender_full_name": "yodal",
        "timestamp": 1558743790
    },
    {
        "content": "<p>I am stuck with the same problem for 2 whole days. Very sad :/</p>",
        "id": 167248081,
        "sender_full_name": "Caio",
        "timestamp": 1559611871
    },
    {
        "content": "<p><code>fn foo(#[cfg_attr(included_flag, cfg(not_included_flag)]  a: i32)</code> successfully removes the parameter but <code>fn foo(#[cfg_attr(not_included_flag, cfg(included_flag)]  a: i32)</code> does not</p>",
        "id": 167248244,
        "sender_full_name": "Caio",
        "timestamp": 1559612052
    },
    {
        "content": "<p>I tried so many different files, compiled and tested things over and over to no avail</p>",
        "id": 167248270,
        "sender_full_name": "Caio",
        "timestamp": 1559612116
    },
    {
        "content": "<p>Isn't that expected behavior?</p>",
        "id": 167286919,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1559651240
    },
    {
        "content": "<p>If we are expanding step-by-step:<br>\n- <code>fn foo(#[cfg_attr(included_flag, cfg(not_included_flag)]  a: i32)</code> -&gt; <code>fn foo(#[cfg(not_included_flag)]  a: i32)</code> -&gt; <code>fn foo()</code><br>\n- <code>fn foo(#[cfg_attr(not_included_flag, cfg(included_flag)]  a: i32)</code> -&gt; <code>fn foo(a: i32)</code></p>",
        "id": 167287037,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1559651344
    },
    {
        "content": "<p><code>fn foo(#[cfg_attr(included_flag, anything)]  a: i32)</code> -&gt; <code>fn foo(#[anything]  a: i32)</code><br>\n<code>fn foo(#[cfg_attr(not_included_flag, anything)]  a: i32)</code> -&gt; <code>fn foo(a: i32)</code></p>",
        "id": 167287166,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1559651467
    },
    {
        "content": "<p>HAHAHAHAHAHAHAHAHAHAHAHA</p>",
        "id": 167408111,
        "sender_full_name": "Caio",
        "timestamp": 1559753587
    },
    {
        "content": "<p>This is even sadder</p>",
        "id": 167408149,
        "sender_full_name": "Caio",
        "timestamp": 1559753617
    },
    {
        "content": "<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 167408180,
        "sender_full_name": "Caio",
        "timestamp": 1559753638
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></p>",
        "id": 167408322,
        "sender_full_name": "Caio",
        "timestamp": 1559753721
    },
    {
        "content": "<p><span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 167408875,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1559754031
    },
    {
        "content": "<p>I did everything <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> said in <a href=\"https://github.com/rust-lang/rust/issues/61238\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61238\">#61238</a> but things didn't work out as expected. I guess <code>liveness.rs</code> needs some kind of modification because <a href=\"https://github.com/rust-lang/rust/blob/fc550d4295a654f9e7c621d957d81fbf1426c70b/src/librustc/middle/liveness.rs#L413\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/fc550d4295a654f9e7c621d957d81fbf1426c70b/src/librustc/middle/liveness.rs#L413\">this line</a> is what triggers the linting messages.</p>",
        "id": 168163520,
        "sender_full_name": "Caio",
        "timestamp": 1560539812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211466\">@Caio</span> can you open a PR with your code so I can have a look?</p>",
        "id": 168163640,
        "sender_full_name": "oli",
        "timestamp": 1560539919
    },
    {
        "content": "<p>oh, now I understand</p>",
        "id": 168163651,
        "sender_full_name": "oli",
        "timestamp": 1560539937
    },
    {
        "content": "<p>yea, liveness would need a change then</p>",
        "id": 168163663,
        "sender_full_name": "oli",
        "timestamp": 1560539946
    },
    {
        "content": "<p>hmm</p>",
        "id": 168163664,
        "sender_full_name": "oli",
        "timestamp": 1560539947
    },
    {
        "content": "<p>weird, it's using the correct <code>HirId</code>s in <a href=\"https://github.com/rust-lang/rust/blob/fc550d4295a654f9e7c621d957d81fbf1426c70b/src/librustc/middle/liveness.rs#L1580\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/fc550d4295a654f9e7c621d957d81fbf1426c70b/src/librustc/middle/liveness.rs#L1580\">https://github.com/rust-lang/rust/blob/fc550d4295a654f9e7c621d957d81fbf1426c70b/src/librustc/middle/liveness.rs#L1580</a></p>",
        "id": 168163797,
        "sender_full_name": "oli",
        "timestamp": 1560540045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  I tried to figure out myself but couldn't find the root cause. Any clues are very welcome</p>",
        "id": 168163929,
        "sender_full_name": "Caio",
        "timestamp": 1560540143
    },
    {
        "content": "<p>Sure, I will open a PR  in next few hours.</p>",
        "id": 168164072,
        "sender_full_name": "Caio",
        "timestamp": 1560540247
    },
    {
        "content": "<p><code>ast::visit</code> and <code>hir::intravisit</code> have not been greatly modified because the arguments are already visited in <code>visit_fn_decl</code> and <code>visit_body</code>, respectively</p>",
        "id": 168340061,
        "sender_full_name": "Caio",
        "timestamp": 1560799679
    },
    {
        "content": "<p>For all closures, bare function,  function pointers, blocks and impl blocks</p>",
        "id": 168340141,
        "sender_full_name": "Caio",
        "timestamp": 1560799736
    },
    {
        "content": "<p>Am I in the right track?</p>",
        "id": 168340170,
        "sender_full_name": "Caio",
        "timestamp": 1560799776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <a href=\"https://github.com/rust-lang/rust/issues/61856\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61856\">#61856</a></p>",
        "id": 168340229,
        "sender_full_name": "Caio",
        "timestamp": 1560799803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211466\">@Caio</span> I believe you also need to teach <a href=\"https://github.com/rust-lang/rust/blob/fff08cb04389497d254fb40948674cbbee402908/src/librustc/lint/mod.rs#L809\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/fff08cb04389497d254fb40948674cbbee402908/src/librustc/lint/mod.rs#L809\">https://github.com/rust-lang/rust/blob/fff08cb04389497d254fb40948674cbbee402908/src/librustc/lint/mod.rs#L809</a> about the new attributes</p>",
        "id": 168387787,
        "sender_full_name": "oli",
        "timestamp": 1560853845
    },
    {
        "content": "<p>the <code>unused_variable</code> lint is not a regular lint</p>",
        "id": 168387812,
        "sender_full_name": "oli",
        "timestamp": 1560853873
    },
    {
        "content": "<p>also your early-lint-pass changes do not do the attribute dance, only the late-lint-pass changes do</p>",
        "id": 168387824,
        "sender_full_name": "oli",
        "timestamp": 1560853893
    },
    {
        "content": "<p>I will take <code>Closure</code> for example</p>",
        "id": 168501326,
        "sender_full_name": "Caio",
        "timestamp": 1560947258
    },
    {
        "content": "<p><code>LintLevelMapBuilder</code> implements <code>visit_expr</code> from <code>Visitor</code> that calls <code>hir_visit::walk_expr</code> with <code>with_lint_attrs</code></p>",
        "id": 168501465,
        "sender_full_name": "Caio",
        "timestamp": 1560947385
    },
    {
        "content": "<p>Inside <code>walk_expr</code>, the <code>ExprKind::Closure</code> part calls <code>visit_fn</code> that calls <code>walk_fn</code></p>",
        "id": 168501586,
        "sender_full_name": "Caio",
        "timestamp": 1560947488
    },
    {
        "content": "<p><code>walk_fn</code> ultimately calls <code>walk_body</code> which visits all arguments and its attributes</p>",
        "id": 168501692,
        "sender_full_name": "Caio",
        "timestamp": 1560947584
    },
    {
        "content": "<p><code>visti_arg</code> method of  <code>LintLevelMapBuilder</code> is also properly \"overridden\" and should be probably being called for each <code>visit_arg</code> invocation of <code>intravisit::Visitor</code></p>",
        "id": 168501967,
        "sender_full_name": "Caio",
        "timestamp": 1560947798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  Do you mean that I should re-implement this logic inside <code>LintLevelMapBuilder</code>?</p>",
        "id": 168502150,
        "sender_full_name": "Caio",
        "timestamp": 1560947960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211466\">@Caio</span> no, that logic is all good, what I believe is missing is a <code>visit_arg</code> override that wraps the <code>walk_arg</code> call in a <code>with_lint_attrs</code> call</p>",
        "id": 168502319,
        "sender_full_name": "oli",
        "timestamp": 1560948090
    },
    {
        "content": "<p>the <code>with_lint_attrs</code> always needs to happen on the specific item like you did in <a href=\"https://github.com/rust-lang/rust/pull/61856/files#diff-837439bcaa26732bb48bcbb0c60716ccR815\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61856/files#diff-837439bcaa26732bb48bcbb0c60716ccR815\">https://github.com/rust-lang/rust/pull/61856/files#diff-837439bcaa26732bb48bcbb0c60716ccR815</a></p>",
        "id": 168502384,
        "sender_full_name": "oli",
        "timestamp": 1560948126
    },
    {
        "content": "<p>it's not the point that <code>with_lint_attrs</code> is <em>ever</em> called, but that it is called on each node that can have lint attributes</p>",
        "id": 168502396,
        "sender_full_name": "oli",
        "timestamp": 1560948148
    },
    {
        "content": "<p>and since we now can have lint attributes on <code>Arg</code>, we need to implement <code>visit_arg</code> to honor these lint attributes</p>",
        "id": 168502414,
        "sender_full_name": "oli",
        "timestamp": 1560948179
    },
    {
        "content": "<p>Oddly enough, the <code>unsued_variables</code> warnings are still appearing even after  a <code>wint_lint_attrs</code> wrapper for both <code>early</code> and <code>late</code> lint pass</p>",
        "id": 168503320,
        "sender_full_name": "Caio",
        "timestamp": 1560948915
    },
    {
        "content": "<p>The current implementation is roughly based on <code>visit_arm</code>, which doesn't use the <code>with_lint_attrs</code>call in some key parts</p>",
        "id": 168503343,
        "sender_full_name": "Caio",
        "timestamp": 1560948934
    },
    {
        "content": "<p><code>unused_variables</code> does not use early or late lint passes</p>",
        "id": 168503478,
        "sender_full_name": "oli",
        "timestamp": 1560949030
    },
    {
        "content": "<p>it uses the <code>LintLevelMapBuilder</code></p>",
        "id": 168503507,
        "sender_full_name": "oli",
        "timestamp": 1560949055
    },
    {
        "content": "<p>it's a hardwired lint</p>",
        "id": 168503523,
        "sender_full_name": "oli",
        "timestamp": 1560949071
    },
    {
        "content": "<p>they have their own visiting logic</p>",
        "id": 168503547,
        "sender_full_name": "oli",
        "timestamp": 1560949082
    },
    {
        "content": "<p>and then use the <code>LintLevelMapBuilder</code> transitively via <code>span_lint</code></p>",
        "id": 168503588,
        "sender_full_name": "oli",
        "timestamp": 1560949096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  I see</p>",
        "id": 168503620,
        "sender_full_name": "Caio",
        "timestamp": 1560949125
    },
    {
        "content": "<p>Your feedback is very important. Thank you for helping me</p>",
        "id": 168503875,
        "sender_full_name": "Caio",
        "timestamp": 1560949290
    },
    {
        "content": "<p>In the meanwhile, I'll keep trying to fix the lint</p>",
        "id": 168503990,
        "sender_full_name": "Caio",
        "timestamp": 1560949347
    },
    {
        "content": "<p>I managed to make it work</p>",
        "id": 168595488,
        "sender_full_name": "Caio",
        "timestamp": 1561037724
    },
    {
        "content": "<p>Turns out, the Hir part wasn't implemented</p>",
        "id": 168595503,
        "sender_full_name": "Caio",
        "timestamp": 1561037735
    },
    {
        "content": "<p>I will be away for a while but a new commit might appear in the next days</p>",
        "id": 168595667,
        "sender_full_name": "Caio",
        "timestamp": 1561037819
    },
    {
        "content": "<p>Thank you guys</p>",
        "id": 168595676,
        "sender_full_name": "Caio",
        "timestamp": 1561037824
    },
    {
        "content": "<p>Unfortunately, only <code>unused_variables</code> works</p>",
        "id": 168860054,
        "sender_full_name": "Caio",
        "timestamp": 1561390373
    },
    {
        "content": "<p>A proper scope probably needs to be added like in <a href=\"https://github.com/rust-lang/rust/pull/60174/commits/f506aea1fac0977c7215b4240f4d99b45bf7ae97\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60174/commits/f506aea1fac0977c7215b4240f4d99b45bf7ae97\">https://github.com/rust-lang/rust/pull/60174/commits/f506aea1fac0977c7215b4240f4d99b45bf7ae97</a></p>",
        "id": 168860169,
        "sender_full_name": "Caio",
        "timestamp": 1561390446
    },
    {
        "content": "<p>I tried to do so but nothing seemed to work</p>",
        "id": 168860276,
        "sender_full_name": "Caio",
        "timestamp": 1561390550
    },
    {
        "content": "<p>What is <code>hair</code>?</p>",
        "id": 168860350,
        "sender_full_name": "Caio",
        "timestamp": 1561390584
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/61856/commits/76da8558416416c0f6e216d342fa87d8de6ee6d9\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61856/commits/76da8558416416c0f6e216d342fa87d8de6ee6d9\">https://github.com/rust-lang/rust/pull/61856/commits/76da8558416416c0f6e216d342fa87d8de6ee6d9</a></p>",
        "id": 168868888,
        "sender_full_name": "Caio",
        "timestamp": 1561397933
    },
    {
        "content": "<p>HAIR is an intermediate datastructure for converting HIR to MIR</p>",
        "id": 168883515,
        "sender_full_name": "oli",
        "timestamp": 1561408996
    },
    {
        "content": "<p>I'm not sure what you mean by proper scopes</p>",
        "id": 168883635,
        "sender_full_name": "oli",
        "timestamp": 1561409082
    },
    {
        "content": "<blockquote>\n<p>HAIR is an intermediate datastructure for converting HIR to MIR</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 168891786,
        "sender_full_name": "Caio",
        "timestamp": 1561416547
    },
    {
        "content": "<blockquote>\n<p>I'm not sure what you mean by proper scopes</p>\n</blockquote>\n<p>Honestly, me neither :/</p>",
        "id": 168891801,
        "sender_full_name": "Caio",
        "timestamp": 1561416572
    },
    {
        "content": "<p>By seeing the related commit, it looks like that something is missing to make <code>unused_mut</code> and other types of lints to actually work. This might be related to some kind of lint scope</p>",
        "id": 168892024,
        "sender_full_name": "Caio",
        "timestamp": 1561416827
    },
    {
        "content": "<p>At first, I thought that such scope was the pattern span being inserted and collected <a href=\"https://github.com/rust-lang/rust/pull/61856/files#diff-5c91206f29170d97620d0f4bce664722\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61856/files#diff-5c91206f29170d97620d0f4bce664722\">here</a></p>",
        "id": 168892554,
        "sender_full_name": "Caio",
        "timestamp": 1561417285
    },
    {
        "content": "<p>I would start by looking where <code>unused_mut</code> is emitted. If it's being emitted by giving it a <code>HirId</code> just like <code>unused_variables</code>, then it should have worked automatically. If it is a <code>LateContext</code>, then it's related to the <code>intravisit::Visitor</code> impl used for calling the <code>LateContext::check_*</code> functions. If it's something else entirely (like a custom <code>intravisit::Visitor</code>, then that visitor probably needs an override of <code>visit_arg</code> just like the others.</p>",
        "id": 168918340,
        "sender_full_name": "oli",
        "timestamp": 1561450779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Thanks</p>",
        "id": 168970492,
        "sender_full_name": "Caio",
        "timestamp": 1561491928
    },
    {
        "content": "<p>I think I am getting the idea</p>",
        "id": 168970529,
        "sender_full_name": "Caio",
        "timestamp": 1561491960
    },
    {
        "content": "<p>In order to make <code>unused_mut</code> work, the argument <code>local</code> must be inserted into <code>used_mut</code> as stated in <a href=\"https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L321\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L321\">https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L321</a></p>",
        "id": 168970650,
        "sender_full_name": "Caio",
        "timestamp": 1561492063
    },
    {
        "content": "<p>To do so, the <code>DataflowResultsConsumer</code> implementation for <code>MirBorrowckCtxt</code> must be modified</p>",
        "id": 168970795,
        "sender_full_name": "Caio",
        "timestamp": 1561492163
    },
    {
        "content": "<p>Because  <code>used_mut</code> is initially populated on the <code>analyze_results</code> call -&gt; <a href=\"https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L276\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L276\">https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L276</a></p>",
        "id": 168970936,
        "sender_full_name": "Caio",
        "timestamp": 1561492255
    },
    {
        "content": "<p>Probably <a href=\"https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L1795\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L1795\">here</a> or <a href=\"https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L2060\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L2060\">here</a></p>",
        "id": 168971141,
        "sender_full_name": "Caio",
        "timestamp": 1561492387
    },
    {
        "content": "<p>How should the <code>DataflowResultsConsumer</code> be modified to collect the arguments locals into <code>used_mut</code>?</p>",
        "id": 168971252,
        "sender_full_name": "Caio",
        "timestamp": 1561492452
    },
    {
        "content": "<p>Sorry, I might be asking for too much but any clue will be very welcome as this whole MIR stuff is pretty new to me</p>",
        "id": 168971734,
        "sender_full_name": "Caio",
        "timestamp": 1561492795
    },
    {
        "content": "<p>hmm... i would not abort this early, I think instead we should look into why <a href=\"https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L347\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L347\">https://github.com/rust-lang/rust/blob/04a3dd8a872633ca1e4c217d11f741cc35cb19a5/src/librustc_mir/borrow_check/mod.rs#L347</a> does not hold the appropriate information about the arguments</p>",
        "id": 169006757,
        "sender_full_name": "oli",
        "timestamp": 1561534692
    },
    {
        "content": "<p>it calls <code>struct_span_lint_hir</code>, which I believe internally checks whether the hir node has the lint attributes</p>",
        "id": 169006774,
        "sender_full_name": "oli",
        "timestamp": 1561534722
    },
    {
        "content": "<p>you may have to follow a few function calls within <code>struct_span_lint_hir</code> to find that spot</p>",
        "id": 169006780,
        "sender_full_name": "oli",
        "timestamp": 1561534739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Thank you for the tips. I will continue investing the issue</p>",
        "id": 169019193,
        "sender_full_name": "Caio",
        "timestamp": 1561547795
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> do you have time for the next two weeks to take over assisting here? I won't be available starting saturday</p>",
        "id": 169020380,
        "sender_full_name": "oli",
        "timestamp": 1561548910
    },
    {
        "content": "<p>I'll be available next week but not the following. Feel free to ping me with questions, I might be able to help given the context I'm seeing.</p>",
        "id": 169052687,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1561570738
    },
    {
        "content": "<p>Thank you guys for all the help. I wouldn't make it all by myself</p>",
        "id": 171071486,
        "sender_full_name": "Caio",
        "timestamp": 1563365062
    },
    {
        "content": "<p>Soon (I guess), the linting PR will the merged and the feature completed</p>",
        "id": 171071491,
        "sender_full_name": "Caio",
        "timestamp": 1563365070
    },
    {
        "content": "<p>Can we talk about support for <code>proc_macro_attribute</code>? Does it need another RFC? Is it possible to send a PR implementing it in the next weeks?</p>",
        "id": 171071639,
        "sender_full_name": "Caio",
        "timestamp": 1563365176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>Once you told me that you were going to refactor some parsing code. Did you finish it?</p>",
        "id": 171071695,
        "sender_full_name": "Caio",
        "timestamp": 1563365242
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211466\">@Caio</span> <br>\nNot parsing, but expansion.<br>\nI've been simplifying / cleaning up the expansion infra over the last couple of months with the bottleneck partially being on reviewing.<br>\nHere's a list of the relevant PRs:</p>",
        "id": 171087914,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563376782
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/60750\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60750\">https://github.com/rust-lang/rust/pull/60750</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/61024\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61024\">https://github.com/rust-lang/rust/pull/61024</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/61547\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61547\">https://github.com/rust-lang/rust/pull/61547</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/61606\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61606\">https://github.com/rust-lang/rust/pull/61606</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/61898\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61898\">https://github.com/rust-lang/rust/pull/61898</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/62042\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62042\">https://github.com/rust-lang/rust/pull/62042</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/62243\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62243\">https://github.com/rust-lang/rust/pull/62243</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/62258\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62258\">https://github.com/rust-lang/rust/pull/62258</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/62476\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62476\">https://github.com/rust-lang/rust/pull/62476</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/62684\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62684\">https://github.com/rust-lang/rust/pull/62684</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/62735\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62735\">https://github.com/rust-lang/rust/pull/62735</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/62086\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62086\">https://github.com/rust-lang/rust/pull/62086</a><br>\n<a href=\"https://github.com/rust-lang/rust/issues/61733\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61733\">https://github.com/rust-lang/rust/issues/61733</a></p>",
        "id": 171088404,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563377029
    },
    {
        "content": "<p>The next steps are<br>\n- merging <code>Annotatable</code> and perhaps <code>Nonterminal</code> into <code>AstFragment</code><br>\n- Introducing more AST fragment kinds for currently non macro expanded positions and rewriting <code>InvocationCollector</code> and macro expander interfaces using those unified AST fragments, simultaneously addressing <a href=\"https://github.com/rust-lang/rust/issues/61733\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61733\">#61733</a></p>",
        "id": 171088688,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563377260
    },
    {
        "content": "<p>After those infrastructural changes making the function parameter position macro-expanded will be trivial.</p>",
        "id": 171088785,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563377309
    },
    {
        "content": "<hr>\n<p>At that point the question will be whether it's enough motivation to make that position macro-expanded, from language point of view.<br>\nI don't know.</p>",
        "id": 171088940,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563377438
    },
    {
        "content": "<p>(This may seem disappointing if you are aiming to put your hands on implementing a specific feature, but my goal in this process is rather longer term maintainability with features being implemented kind of naturally/automatically as  side effects.)</p>",
        "id": 171089652,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563377912
    },
    {
        "content": "<p>Wow! There is a lot of stuff going on. Thanks for writing it out</p>",
        "id": 171091515,
        "sender_full_name": "Caio",
        "timestamp": 1563379316
    },
    {
        "content": "<p>If there is something that I can help out to make user attributes possible in this whole process, please let me know</p>",
        "id": 171091561,
        "sender_full_name": "Caio",
        "timestamp": 1563379327
    },
    {
        "content": "<p>I'll check my todo list for some more or less isolated tasks in this area.</p>",
        "id": 171092172,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563379784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211466\">@Caio</span> <br>\nHere's how macro attributes are supported for a new attribute position (namely, generic parameter position)<br>\n<a href=\"https://github.com/petrochenkov/rust/tree/resall\" target=\"_blank\" title=\"https://github.com/petrochenkov/rust/tree/resall\">https://github.com/petrochenkov/rust/tree/resall</a></p>",
        "id": 171388602,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563744664
    },
    {
        "content": "<p>Currently unsupported positions are <code>ast::{Variant_, GenericParam, Arm, Arg, FieldPat, Field, StructField}</code>.<br>\nAll of those are \"list\" contexts like generic parameters, so implementations should be identical to the linked one, basically.</p>",
        "id": 171388668,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563744778
    },
    {
        "content": "<hr>\n<p>If you have time in the next 1-2 weeks and is able to implement any of those (perhaps all?), I'll wait and switch to some other work.</p>",
        "id": 171388736,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563744889
    },
    {
        "content": "<p>(<code>param.ident.as_str() == \"placeholder\"</code> is a temporary solution and should probably be replaced with boolean flags <code>is_placeholder</code> in AST structures, which is as simple, but not as dirty.)</p>",
        "id": 171388798,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563745038
    },
    {
        "content": "<p><code>Arm</code>, <code>FieldPat</code> and <code>Field</code> also lack <code>NodeId</code>s which are necessary for the attribute resolution to work, so they'll have to be added.</p>",
        "id": 171388972,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563745375
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></p>",
        "id": 171392589,
        "sender_full_name": "Caio",
        "timestamp": 1563752082
    },
    {
        "content": "<p>Looks like the intention is to generalize the use of macro attributes, which is awesome</p>",
        "id": 171392600,
        "sender_full_name": "Caio",
        "timestamp": 1563752136
    },
    {
        "content": "<p>I will probably be able to complete all necessary work in a week. It doesn't seem too difficult, I am a bit familiar with this area and your commit will help a lot</p>",
        "id": 171392694,
        "sender_full_name": "Caio",
        "timestamp": 1563752317
    },
    {
        "content": "<blockquote>\n<p>Looks like the intention is to generalize the use of macro attributes, which is awesome</p>\n</blockquote>\n<p>Yes, generalize to macro attributes, but still emit a non-fatal error if it's actually a macro to avoid changing the observable language.<br>\nName resolution support is tightly coupled to the macro support, so if you support the former, the latter needs to be supported as well.</p>",
        "id": 171392943,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1563752836
    },
    {
        "content": "<p>This explain the reason of all the <code>panic</code>s across the commit like <code>Annotatable::Foo( .. ) =&gt; panic!( .. )</code></p>",
        "id": 171898375,
        "sender_full_name": "Caio",
        "timestamp": 1564337228
    },
    {
        "content": "<p>I couldn't finish all tasks because I had to redirect my time to the lint on args PR but everything will probably be ready in the next days</p>",
        "id": 171898491,
        "sender_full_name": "Caio",
        "timestamp": 1564337469
    },
    {
        "content": "<p><a href=\"https://github.com/c410-f3r/rust/tree/attrs\" target=\"_blank\" title=\"https://github.com/c410-f3r/rust/tree/attrs\">https://github.com/c410-f3r/rust/tree/attrs</a></p>",
        "id": 172469681,
        "sender_full_name": "Caio",
        "timestamp": 1564963962
    },
    {
        "content": "<p>Still not ready not I am getting closer</p>",
        "id": 172469683,
        "sender_full_name": "Caio",
        "timestamp": 1564963969
    },
    {
        "content": "<p>Nice, thanks for the update.</p>",
        "id": 172487145,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1564993436
    },
    {
        "content": "<p>One question, the <code>span</code> fn of <code>Annotatable</code> expects a <code>span</code> of its elements. So, we probably need to use <code>Variant</code> instead of <code>Variant_</code> for the whole modification</p>",
        "id": 172493974,
        "sender_full_name": "Caio",
        "timestamp": 1565001126
    },
    {
        "content": "<p>It would be better to merge <code>Variant</code> and <code>Variant_</code>.</p>",
        "id": 172502630,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1565010394
    },
    {
        "content": "<p>In general, if you see <code>Spanned&lt;T&gt;</code> where <code>T</code> is not an <code>enum</code> that's a good candidate for refactoring.</p>",
        "id": 172502765,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1565010500
    },
    {
        "content": "<p>Great! It will make things easier</p>",
        "id": 172505637,
        "sender_full_name": "Caio",
        "timestamp": 1565012972
    },
    {
        "content": "<p>in <code>expand.rs</code>,  the <code>ast_fragments!</code> macro expects a single elements in a <code>fn visit_*</code> declaration (<code>visitor.$visit_ast_elt(ast_elt);</code>)</p>",
        "id": 172637498,
        "sender_full_name": "Caio",
        "timestamp": 1565133815
    },
    {
        "content": "<p>but <code>visit_variant</code> has a <code>&amp;mut self, v: &amp;'ast Variant, g: &amp;'ast Generics, item_id: NodeId</code> signature that conflicts with <code>ast_fragments!</code></p>",
        "id": 172637599,
        "sender_full_name": "Caio",
        "timestamp": 1565133935
    },
    {
        "content": "<p>The additional parameters are mainly used by the <code>visit_variant_data</code> function</p>",
        "id": 172637738,
        "sender_full_name": "Caio",
        "timestamp": 1565134093
    },
    {
        "content": "<p>I do not know what is the best way to solve this problem. Maybe create another visitor function?</p>",
        "id": 172637823,
        "sender_full_name": "Caio",
        "timestamp": 1565134205
    },
    {
        "content": "<p>If it doesn't fit into the macro it can be written explicitly, like <code>AstFragment::OptExpr</code>.</p>",
        "id": 172640467,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1565137483
    },
    {
        "content": "<p>There's also a good chance that the extra arguments are never used by AST visitors in practice and can be removed.</p>",
        "id": 172640637,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1565137700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211466\">@Caio</span> <br>\nAny news?</p>",
        "id": 173706931,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566345600
    },
    {
        "content": "<p>FYI, if the status changes you can use @rustbot to change github labels, e.g. to <code>S-waiting-on-review</code>, even without having write rights in the repo.<br>\n<a href=\"https://github.com/rust-lang/triagebot/wiki/Labeling\" target=\"_blank\" title=\"https://github.com/rust-lang/triagebot/wiki/Labeling\">https://github.com/rust-lang/triagebot/wiki/Labeling</a></p>",
        "id": 173707038,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566345701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>  I am sorry. I had some personal troubles and I will try to finish the PR today</p>",
        "id": 173780881,
        "sender_full_name": "Caio",
        "timestamp": 1566382792
    },
    {
        "content": "<p>No problem.</p>",
        "id": 173800308,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566398601
    },
    {
        "content": "<p>I don't know exactly why some tests are currently panicking. Another day may be needed for investigation</p>",
        "id": 173814492,
        "sender_full_name": "Caio",
        "timestamp": 1566408076
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 173814502,
        "sender_full_name": "Caio",
        "timestamp": 1566408088
    },
    {
        "content": "<p>This work started as a way to speed up macro stuff but, unfortunately, it is now a bottleneck :/</p>",
        "id": 173814614,
        "sender_full_name": "Caio",
        "timestamp": 1566408159
    },
    {
        "content": "<p>I actually did a bunch of macro-related stuff in parallel (and I still have some to do), so it's ok.</p>",
        "id": 173821253,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1566413000
    },
    {
        "content": "<p>Any thoughts about <a href=\"https://github.com/rust-lang/rust/issues/64282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64282\">#64282</a>?<br>\nI can investigate the problem but I not very familiar with pprint</p>",
        "id": 175185243,
        "sender_full_name": "Caio",
        "timestamp": 1567950360
    },
    {
        "content": "<p>I'll try to investigate it</p>",
        "id": 175187794,
        "sender_full_name": "centril",
        "timestamp": 1567954985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> Should this issue and <a href=\"https://github.com/rust-lang/rust/issues/64031\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64031\">#64031</a> be part of the stabilization report?</p>",
        "id": 175191591,
        "sender_full_name": "Caio",
        "timestamp": 1567962053
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211466\">@Caio</span> we should probably fix the issue first before that :P</p>",
        "id": 175199391,
        "sender_full_name": "centril",
        "timestamp": 1567976441
    },
    {
        "content": "<p>Sure. Just wanted to confirm the possible need for modification</p>",
        "id": 175200348,
        "sender_full_name": "Caio",
        "timestamp": 1567977956
    }
]