[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ; I imagine you're both busy, so I'll try to keep this quick</p>",
        "id": 189839097,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583444141
    },
    {
        "content": "<p>the panic message actually makes it easy to understand what's gone wrong, at a fine grain:</p>",
        "id": 189839226,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583444225
    },
    {
        "content": "<p>We're trying to access field 0 of the following \"union layout\"</p>\n<div class=\"codehilite\"><pre><span></span>LayoutDetails {\n        variants: Single {\n            index: 0,\n        },\n        fields: Union(\n            0,\n        ),\n        abi: Uninhabited,\n...\n}\n</pre></div>",
        "id": 189839260,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583444265
    },
    {
        "content": "<p>but its actually an uninhabited type, as indicated by the ABI</p>",
        "id": 189839279,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583444281
    },
    {
        "content": "<p>Now, the actual type to led to this in my case looks like: <code>enum UninhabitedUnivariant { Variant(Void), }</code></p>",
        "id": 189839363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583444310
    },
    {
        "content": "<p>so here's my question: In an ideal world, would the above: 1. have <code>fields: FieldPlacement::Union(1)</code>, or  2. we would have a separate <code>FieldPlacement</code> variant for uninhabited types, or 3. don't change the data at all; change the panicking code to first check the <code>LayoutDetails.abi</code> to catch the uninhabited case?</p>",
        "id": 189839565,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583444410
    },
    {
        "content": "<p>another way of putting my question: Is our long term intention to actually attach a layout here that indicates that there is a field (and it is just uninhabited)? Or are we better off always explicitly saying, in the <code>LayoutDetails</code> representation itself, that \"such a type has no realized fields\" (which is what <code>FieldPlacement::Uninhabited</code> proposed in option (2) above would be used for).</p>",
        "id": 189839856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583444583
    },
    {
        "content": "<p>/me suddenly remembers how late it is in the EU</p>",
        "id": 189839903,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583444608
    },
    {
        "content": "<p>for the short term I will take the most narrow solution, from option (3), and have the code here do something like <code>throw_ub!(Unreachable);</code></p>",
        "id": 189841288,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583445432
    },
    {
        "content": "<p>oh, we cannot do (2), at least not in all cases, due to <a href=\"https://github.com/rust-lang/rust/issues/49298\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/49298\">#49298</a></p>",
        "id": 189842112,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583445903
    },
    {
        "content": "<p>and since (2) cannot apply in all cases, it probably is a fragile solution to <a href=\"https://github.com/rust-lang/rust/issues/69191\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69191\">#69191</a></p>",
        "id": 189842172,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583445953
    },
    {
        "content": "<p>wow, even my \"most narrow solution\" caused existing test <a href=\"http://issue-64506.rs\" target=\"_blank\" title=\"http://issue-64506.rs\">issue-64506.rs</a> to regress (obviously wasn't as narrow as it could have been)</p>",
        "id": 189844456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583447453
    },
    {
        "content": "<p>in fact, maybe <a href=\"https://github.com/rust-lang/rust/issues/69191\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69191\">#69191</a> is another instance of <a href=\"https://github.com/rust-lang/rust/issues/64506\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64506\">#64506</a> ?</p>",
        "id": 189844514,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583447516
    },
    {
        "content": "<p>interesting, it seems like a deliberate decision was made to treat structs different from enums in PR <a href=\"https://github.com/rust-lang/rust/issues/64987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64987\">#64987</a></p>",
        "id": 189844599,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583447582
    },
    {
        "content": "<p>so then: <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, what was the reason to treat structs different from enums here? Expediency of implementation? Or because they should never arise in the manner that structs do (since we don't allow partially initialized enums) ?</p>",
        "id": 189844988,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583447870
    },
    {
        "content": "<p>I think 1) is the right solution. I don't remember if I tried it. It's kinda weird because you need to pick a variant to continue with. So if you had multiple uninhabited variants, I'm not sure if we wouldn't just end up running into other assertions</p>",
        "id": 189846400,
        "sender_full_name": "oli",
        "timestamp": 1583449054
    },
    {
        "content": "<p>If you don't pick a variant and continue into the enum code, everything will die badly iirc.</p>",
        "id": 189846464,
        "sender_full_name": "oli",
        "timestamp": 1583449109
    },
    {
        "content": "<p>But again, I don't remember what exactly I tried. I was attempting to go with minimal changes to the code though</p>",
        "id": 189846512,
        "sender_full_name": "oli",
        "timestamp": 1583449161
    },
    {
        "content": "<p>this may be an instance of where we treat univariant enums specially</p>",
        "id": 189851735,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583453788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189851735\" title=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189851735\">said</a>:</p>\n<blockquote>\n<p>this may be an instance of where we treat univariant enums specially</p>\n</blockquote>\n<p>okay, yes, I can see how to easily generalize PR <a href=\"https://github.com/rust-lang/rust/issues/64987\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64987\">#64987</a> to treat univariant enums just like structs.</p>",
        "id": 189852714,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583454942
    },
    {
        "content": "<p>... and that didn't work. Back to my original plan of doing something like (3), but even more narrowly than my original vision.</p>",
        "id": 189854293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583456803
    },
    {
        "content": "<p>just found this notification. I would've gotten to it much sooner if it wasn't on Zulip (because that can't notify me on my phone)</p>",
        "id": 189878309,
        "sender_full_name": "eddyb",
        "timestamp": 1583489513
    },
    {
        "content": "<p>Discord PMs are probably the only thing guaranteed to reach me</p>",
        "id": 189878367,
        "sender_full_name": "eddyb",
        "timestamp": 1583489542
    },
    {
        "content": "<p>(quickly, I mean)</p>",
        "id": 189878378,
        "sender_full_name": "eddyb",
        "timestamp": 1583489552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I'm really sorry for all the time wasted, but no matter how busy I am, layout bugs are a priority</p>",
        "id": 189878399,
        "sender_full_name": "eddyb",
        "timestamp": 1583489577
    },
    {
        "content": "<p>I just wish I saw all this sooner</p>",
        "id": 189878412,
        "sender_full_name": "eddyb",
        "timestamp": 1583489584
    },
    {
        "content": "<p>ftr the explanation and proposed fix are in <a href=\"https://github.com/rust-lang/rust/issues/69763#issuecomment-595688090\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69763#issuecomment-595688090\">https://github.com/rust-lang/rust/issues/69763#issuecomment-595688090</a>, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> is trying it out as we speak</p>",
        "id": 189878606,
        "sender_full_name": "eddyb",
        "timestamp": 1583489764
    },
    {
        "content": "<p>just finished the tests, it works</p>",
        "id": 189878612,
        "sender_full_name": "oli",
        "timestamp": 1583489778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> so what do you want to do with your PR? should we still merge it? what do we do about the rollup (ideally we would avoid \"critical fix\" and rollups interacting...)</p>",
        "id": 189878660,
        "sender_full_name": "eddyb",
        "timestamp": 1583489868
    },
    {
        "content": "<p>hmm the rollup failed so I can at least take it out of the rollup</p>",
        "id": 189878750,
        "sender_full_name": "eddyb",
        "timestamp": 1583489956
    },
    {
        "content": "<p>why is the tree closed?!</p>",
        "id": 189878758,
        "sender_full_name": "eddyb",
        "timestamp": 1583489977
    },
    {
        "content": "<p>the tree is closed don't worry about it</p>",
        "id": 189878768,
        "sender_full_name": "lqd",
        "timestamp": 1583489989
    },
    {
        "content": "<p>some msys2 problems</p>",
        "id": 189878772,
        "sender_full_name": "lqd",
        "timestamp": 1583489996
    },
    {
        "content": "<p><a href=\"https://github.com/msys2/MSYS2-packages/issues/1884\" target=\"_blank\" title=\"https://github.com/msys2/MSYS2-packages/issues/1884\">https://github.com/msys2/MSYS2-packages/issues/1884</a></p>",
        "id": 189878814,
        "sender_full_name": "lqd",
        "timestamp": 1583490008
    },
    {
        "content": "<p>okay I was scared it was some release thing</p>",
        "id": 189878817,
        "sender_full_name": "eddyb",
        "timestamp": 1583490010
    },
    {
        "content": "<p>also I can't tell what the timeframe is, when's the deadline for landing this?</p>",
        "id": 189880098,
        "sender_full_name": "eddyb",
        "timestamp": 1583491243
    },
    {
        "content": "<p><a href=\"https://forge.rust-lang.org/\" target=\"_blank\" title=\"https://forge.rust-lang.org/\">https://forge.rust-lang.org/</a> (March 12th I think?)</p>",
        "id": 189880204,
        "sender_full_name": "oli",
        "timestamp": 1583491354
    },
    {
        "content": "<p>So thursday next week</p>",
        "id": 189880209,
        "sender_full_name": "oli",
        "timestamp": 1583491362
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> sorry again for all the friction, I've r+'d <a href=\"https://github.com/rust-lang/rust/pull/69768\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69768\">https://github.com/rust-lang/rust/pull/69768</a>, hope that's okay with you?</p>",
        "id": 189880214,
        "sender_full_name": "eddyb",
        "timestamp": 1583491372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> okay that makes sense, so this has to land in the next day or two</p>",
        "id": 189880254,
        "sender_full_name": "eddyb",
        "timestamp": 1583491416
    },
    {
        "content": "<p>yea, because we still need to backport it to beta</p>",
        "id": 189880268,
        "sender_full_name": "oli",
        "timestamp": 1583491428
    },
    {
        "content": "<p>this will basically be insta-stable</p>",
        "id": 189880317,
        "sender_full_name": "oli",
        "timestamp": 1583491446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> btw have you tried testing with two uninhabited variants? that should also be broken on master and fixed by the PR. or is that unreachable from const-prop?</p>",
        "id": 189880515,
        "sender_full_name": "eddyb",
        "timestamp": 1583491628
    },
    {
        "content": "<p>I've tried some things with nested fields, but not multiple variants, gonna do so now</p>",
        "id": 189880528,
        "sender_full_name": "oli",
        "timestamp": 1583491664
    },
    {
        "content": "<p>the 0th variant has been broken forever, basically</p>",
        "id": 189880539,
        "sender_full_name": "eddyb",
        "timestamp": 1583491679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> btw, I explained to <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> on IRC that you couldn't have fixed this outside <code>for_variant</code>, or at least not as generally, without increasing the size of some types, because there's no way to have <code>Variants::Multiple</code> without at least one byte for the tag, so uninhabited enum variants are currently an \"on-demand\" hack in <code>for_variant</code></p>",
        "id": 189880636,
        "sender_full_name": "eddyb",
        "timestamp": 1583491748
    },
    {
        "content": "<p>but we can't paper over this forever, which is why I think we should do the thing at the end of <a href=\"https://github.com/rust-lang/rust/issues/69763#issuecomment-595699745\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69763#issuecomment-595699745\">https://github.com/rust-lang/rust/issues/69763#issuecomment-595699745</a></p>",
        "id": 189880781,
        "sender_full_name": "eddyb",
        "timestamp": 1583491895
    },
    {
        "content": "<p>I considered creating <code>Variants::None</code> just before deciding to let the code fall through the normal path and not touching too much XD</p>",
        "id": 189880782,
        "sender_full_name": "oli",
        "timestamp": 1583491896
    },
    {
        "content": "<p><code>Variants::None</code> isn't good either, since you want to be able to precompute variants</p>",
        "id": 189880802,
        "sender_full_name": "eddyb",
        "timestamp": 1583491920
    },
    {
        "content": "<p>well, for <code>enum Foo {}</code> <code>Variants::Single</code> is kinda lying</p>",
        "id": 189880881,
        "sender_full_name": "oli",
        "timestamp": 1583491984
    },
    {
        "content": "<p>this is why I prefer <code>Variants::Multiple</code> with <code>()</code> or <code>!</code> discriminants</p>",
        "id": 189880899,
        "sender_full_name": "eddyb",
        "timestamp": 1583492008
    },
    {
        "content": "<p>do we even need <code>Variants::Single</code> at that point?</p>",
        "id": 189880926,
        "sender_full_name": "oli",
        "timestamp": 1583492040
    },
    {
        "content": "<p>so that you can always access the discriminant, but because it'd be a ZST we can just pretend it's at offset 0 etc.</p>",
        "id": 189880933,
        "sender_full_name": "eddyb",
        "timestamp": 1583492042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> funny you should ask that. I think we can then remove the variant index from <code>Variants::Single</code> which would let us replace it with <code>Option</code></p>",
        "id": 189881033,
        "sender_full_name": "eddyb",
        "timestamp": 1583492123
    },
    {
        "content": "<p>I guess we don't need <code>Option</code> when we can use <code>variants: Vec&lt;Layout&gt;</code>... oh</p>",
        "id": 189881052,
        "sender_full_name": "eddyb",
        "timestamp": 1583492153
    },
    {
        "content": "<p>refactorings wooo</p>",
        "id": 189881110,
        "sender_full_name": "oli",
        "timestamp": 1583492179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> ah, no, we do need to keep the <code>VariantIdx</code> in <code>Variants::Single</code> because the individual variants still  use it</p>",
        "id": 189881113,
        "sender_full_name": "eddyb",
        "timestamp": 1583492183
    },
    {
        "content": "<p>so less refactoring possible :P</p>",
        "id": 189881116,
        "sender_full_name": "eddyb",
        "timestamp": 1583492191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189880515\" title=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189880515\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> btw have you tried testing with two uninhabited variants? that should also be broken on master and fixed by the PR. or is that unreachable from const-prop?</p>\n</blockquote>\n<p>multiple variants work after my PR, but ICE before it: <a href=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=3586057c35fc8f9f1fc86b6315c427c0\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=3586057c35fc8f9f1fc86b6315c427c0\">https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=3586057c35fc8f9f1fc86b6315c427c0</a></p>",
        "id": 189881248,
        "sender_full_name": "oli",
        "timestamp": 1583492331
    },
    {
        "content": "<p>feel free to <del>add another test</del> add that to the test and r=me it again</p>",
        "id": 189881262,
        "sender_full_name": "eddyb",
        "timestamp": 1583492351
    },
    {
        "content": "<p>looks like it does indeed only affect the first variant: <a href=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=5976ea4f169aa9f05aa8188d29150a90\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=5976ea4f169aa9f05aa8188d29150a90\">https://play.rust-lang.org/?version=beta&amp;mode=debug&amp;edition=2018&amp;gist=5976ea4f169aa9f05aa8188d29150a90</a></p>",
        "id": 189881344,
        "sender_full_name": "eddyb",
        "timestamp": 1583492433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> landing my PR as well might still be good in terms of beta backport?</p>",
        "id": 189882483,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583493570
    },
    {
        "content": "<p>I</p>",
        "id": 189882501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583493596
    },
    {
        "content": "<p>I won’t be at design meeting today but we should resolve this Question there , for expediency</p>",
        "id": 189882576,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583493648
    },
    {
        "content": "<p>well, you have two PRs, feel free to pick either. I wonder if your PR handles the two-variant testcase <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> just added to his PR</p>",
        "id": 189882580,
        "sender_full_name": "eddyb",
        "timestamp": 1583493650
    },
    {
        "content": "<p>if it does I don't care too much which gets merged first</p>",
        "id": 189882619,
        "sender_full_name": "eddyb",
        "timestamp": 1583493701
    },
    {
        "content": "<p>I should have thought to add a test for that. Let’s see....</p>",
        "id": 189882684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583493747
    },
    {
        "content": "<p>(the bug affects all uninhabited enums, but <em>only</em> their first variant, an univariant uninhabited enum just happens to only have that variant so it's easier to trigger it)</p>",
        "id": 189882778,
        "sender_full_name": "eddyb",
        "timestamp": 1583493855
    },
    {
        "content": "<p>by the way, you chose funny names for your multivariant enum cases</p>",
        "id": 189882886,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583494022
    },
    {
        "content": "<p>\"Univariant2\" <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 189882891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583494029
    },
    {
        "content": "<p>heh</p>",
        "id": 189882984,
        "sender_full_name": "oli",
        "timestamp": 1583494087
    },
    {
        "content": "<p>I'm lazy</p>",
        "id": 189882986,
        "sender_full_name": "oli",
        "timestamp": 1583494094
    },
    {
        "content": "<p>mine seems to handle the multivariant case as well, from local testing. I'll copy your test into my PR for completeness, and then try to make sure that all of this is on the agenda for today's T-compiler design meeting.</p>",
        "id": 189883119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583494215
    },
    {
        "content": "<p>(that is, we should decide quickly which one of these two PR's to beta-backport. I think mine is \"obviously\" less risky for backport. But I don't have a huge preference and thus don't mind being absent from the discussion.)</p>",
        "id": 189883167,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583494263
    },
    {
        "content": "<p>I agree that for insta stabilization felix's PR is better</p>",
        "id": 189883265,
        "sender_full_name": "oli",
        "timestamp": 1583494351
    },
    {
        "content": "<p>the only scary thing is that there could be other code that might get broken by the <code>for_variant</code> bug, but most of it should be older than what actually caused the regression</p>",
        "id": 189883473,
        "sender_full_name": "eddyb",
        "timestamp": 1583494532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189882986\" title=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189882986\">said</a>:</p>\n<blockquote>\n<p>I'm lazy</p>\n</blockquote>\n<p>and I only now just noticed \"Warriont\" <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 189883569,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583494610
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189878399\" title=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189878399\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> I'm really sorry for all the time wasted, but no matter how busy I am, layout bugs are a priority</p>\n</blockquote>\n<p>none of this is your fault. I'm the one who dropped the ball on this (by self-assigning two weeks ago and then not looking at it, despite it being a beta regression).</p>",
        "id": 189883672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583494701
    },
    {
        "content": "<blockquote>\n<p>\"Warriont\"</p>\n</blockquote>\n<p>I'm not lazy where it's important</p>",
        "id": 189883713,
        "sender_full_name": "oli",
        "timestamp": 1583494713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189883672\" title=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189883672\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189878399\" title=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189878399\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> I'm really sorry for all the time wasted, but no matter how busy I am, layout bugs are a priority</p>\n</blockquote>\n<p>none of this is your fault. I'm the one who dropped the ball on this (by self-assigning two weeks ago and then not looking at it, despite it being a beta regression).</p>\n</blockquote>\n<p>oh wow, I thought this was more recent, I guess I didn't even get to look at the issue</p>",
        "id": 189884032,
        "sender_full_name": "eddyb",
        "timestamp": 1583494943
    },
    {
        "content": "<p>like I thought it was discovered in the past couple days and that's why I hadn't seen it (yet) in my notifications</p>",
        "id": 189884056,
        "sender_full_name": "eddyb",
        "timestamp": 1583494971
    },
    {
        "content": "<p>no, it's been open for weeks, but I haven't actually done any rustc work in 3 weeks and kept putting it off</p>",
        "id": 189884386,
        "sender_full_name": "oli",
        "timestamp": 1583495198
    },
    {
        "content": "<p>weren't you on vacation :P? I've been checking GH notifications for weeks</p>",
        "id": 189885766,
        "sender_full_name": "eddyb",
        "timestamp": 1583496480
    },
    {
        "content": "<p>the only conflict would be the regression test, I Think.</p>",
        "id": 189885842,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583496526
    },
    {
        "content": "<p>(which I ... slightly revised <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> )</p>",
        "id": 189885848,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583496535
    },
    {
        "content": "<p>not even that, different filenames</p>",
        "id": 189885849,
        "sender_full_name": "oli",
        "timestamp": 1583496537
    },
    {
        "content": "<p>what <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> just said :P (I noticed it because I compared the PRs)</p>",
        "id": 189885862,
        "sender_full_name": "eddyb",
        "timestamp": 1583496554
    },
    {
        "content": "<p>but the point is that <a href=\"https://github.com/rust-lang/rust/issues/69753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69753\">#69753</a> creates some logic in const eval that we don't want in there</p>",
        "id": 189885864,
        "sender_full_name": "oli",
        "timestamp": 1583496558
    },
    {
        "content": "<p>well that, too</p>",
        "id": 189885881,
        "sender_full_name": "oli",
        "timestamp": 1583496580
    },
    {
        "content": "<p>yes we definitely want to revert it eventually</p>",
        "id": 189885890,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583496584
    },
    {
        "content": "<p>(Solely on principle I prefer to first land on nightly nonetheless, rather than going direct to beta. But I won't veto a merge direct to beta of my PR <a href=\"https://github.com/rust-lang/rust/issues/69753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69753\">#69753</a> )</p>",
        "id": 189886070,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583496755
    },
    {
        "content": "<p>(I re-r+'ed the latter, BTW ....)</p>",
        "id": 189886122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583496818
    },
    {
        "content": "<p>btw you might want to raise the priorities or at least rollup- my rollup=never</p>",
        "id": 189886368,
        "sender_full_name": "eddyb",
        "timestamp": 1583497032
    },
    {
        "content": "<p>I'm going to change the topic back to the issue's one starting from where I said \"the only conflict ...\", since this went far afield from the design meeting discussion.</p>",
        "id": 189888013,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583498332
    },
    {
        "content": "<p>oops</p>",
        "id": 189888046,
        "sender_full_name": "oli",
        "timestamp": 1583498359
    },
    {
        "content": "<p>see, problem solved. Zulip does <em>some</em> things right. :)</p>",
        "id": 189888078,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583498389
    }
]