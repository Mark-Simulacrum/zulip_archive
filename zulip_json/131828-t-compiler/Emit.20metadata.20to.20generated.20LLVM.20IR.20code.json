[
    {
        "content": "<p>Is there any method to pass metadata, for instance, type names, to the LLVM IR code generated by rustc?<br>\nI'm working on a GSoC project that ports an LLVM auto-diff plugin to rust. It needs metadata of the high-level language, but I found no proper way to pass such information to LLVM. The closest thing may be the \"plugin\" feature, which, however, is unstable. I'm considering to use some tricks like defining global variables who have the same names as the types we need to know. It seems workable (the IR code generated does have the type name strings in names of the global variables), but not elegant. Is there any better way?</p>",
        "id": 232430370,
        "sender_full_name": "Chuyang Chen",
        "timestamp": 1617113024
    },
    {
        "content": "<blockquote>\n<p>the IR code generated does have the type name strings in names of the global variables</p>\n</blockquote>\n<p>This is not guaranteed. See e.g. <a href=\"https://github.com/rust-lang/rust/pull/76030\">https://github.com/rust-lang/rust/pull/76030</a> which was reverted at some point but will be reintroduced as soon as possible.</p>",
        "id": 232431507,
        "sender_full_name": "nagisa",
        "timestamp": 1617113459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Emit.20metadata.20to.20generated.20LLVM.20IR.20code/near/232431507\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>the IR code generated does have the type name strings in names of the global variables</p>\n</blockquote>\n<p>This is not guaranteed. See e.g. <a href=\"https://github.com/rust-lang/rust/pull/76030\">https://github.com/rust-lang/rust/pull/76030</a> which was reverted at some point but will be reintroduced as soon as possible.</p>\n</blockquote>\n<p>Bad news. If there is no proper way to pass metadata, an intrusive modification of the compiler may be needed. However, that will be costly, I think.</p>",
        "id": 232432412,
        "sender_full_name": "Chuyang Chen",
        "timestamp": 1617113784
    },
    {
        "content": "<p>debuginfo is a form of metadata you could use?</p>",
        "id": 232433851,
        "sender_full_name": "nagisa",
        "timestamp": 1617114309
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Emit.20metadata.20to.20generated.20LLVM.20IR.20code/near/232433851\">said</a>:</p>\n<blockquote>\n<p>debuginfo is a form of metadata you could use?</p>\n</blockquote>\n<p>Yes, sure.</p>",
        "id": 232433923,
        "sender_full_name": "Chuyang Chen",
        "timestamp": 1617114339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Emit.20metadata.20to.20generated.20LLVM.20IR.20code/near/232433851\">said</a>:</p>\n<blockquote>\n<p>debuginfo is a form of metadata you could use?</p>\n</blockquote>\n<p>Do you mean that it could be acceptable to modify the compiler to generate some extra debuginfo in the generated IR, or there has been such method? (Compiling .rs files with \"-g\" option is not  quite right, I think.)</p>",
        "id": 232436124,
        "sender_full_name": "Chuyang Chen",
        "timestamp": 1617115049
    },
    {
        "content": "<p>The more exhaustive debuginfo that we generate is, the better, I'd say. But it should be something that debuggers don't trip over, of course.</p>",
        "id": 232438178,
        "sender_full_name": "nagisa",
        "timestamp": 1617115699
    }
]