[
    {
        "content": "<p>Hi <span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> (pings for clippy ppl will be done on discord)<br>\nThe status quo with our tool breakages works, but is not ideal imo. There are multiple forces at play here</p>\n<ol>\n<li>easy contributing to tools requires tools to be in their own repo (so we can't just make it all a monorepo)</li>\n<li>easy tool updates require tools to be in tree (so monorepo), because otherwise you need to fix the tool in its repo and then come back and update the submodule</li>\n</ol>\n<p>Half a year ago I did a small investigation into different ways to handle projects with git. I found</p>\n<ol>\n<li>git submodule (what we use in Rust, but I've noticed elsewhere that ppl are quite confused/annoyed by submodules)</li>\n<li>git subtree (oh god experimenting with those was such a nonpleasure)</li>\n<li>git subrepo</li>\n</ol>\n<p>Since I'm very much against git subtree, let me explain git subrepo.<br>\nTLDR: Monorepo with tooling to sync subfolders with other repos<br>\nLong version: <code>git subrepo clone foo bar</code> creates a folder <code>bar</code> with the contents of the repo <code>foo</code>. Now if contributors change rustc and a submodule, they can just modify the files directly (and we can gate all PRs on tools). The contributor really sees a monorepo and does not even need to know that the subrepo is a subrepo, they need not no learn any new commands beyond the standard git commands they need for any contribution.<br>\n The folder also gets a <code>.subrepo</code> file that has some metadata explaining how to sync said folder with the source repo. Now, this synchronization (I'll get to its details later) requires users to install git-subrepo and take care around rebasing because that messes up the <code>.subrepo</code> info, <strong>but</strong> this only applies to users that synchronize the subrepo. If you are just contributing to a tool via its own repo, you don't need to know about this. If you are just contributing to rustc and your changes requrie tool changes, you don't need to know about this.</p>\n<p>Of course this is not free. We will end up with a snapshot of the tool in our tree (not the whole history thank the <span aria-label=\"spaghetti\" class=\"emoji emoji-1f35d\" role=\"img\" title=\"spaghetti\">:spaghetti:</span> :monster:). But other than that, it's totally cheap to do and we can do this change per tool without any hurry.</p>",
        "id": 189226991,
        "sender_full_name": "oli",
        "timestamp": 1582819399
    },
    {
        "content": "<p>-1 on having to install additional tooling, but from your description it is not entirely clear who are the users that synchronize the subrepo</p>",
        "id": 189227200,
        "sender_full_name": "nagisa",
        "timestamp": 1582819558
    },
    {
        "content": "<p>clippy devs would do the syncing just like they do now</p>",
        "id": 189227262,
        "sender_full_name": "oli",
        "timestamp": 1582819581
    },
    {
        "content": "<p>noone needs to sync who doesn't want to sync</p>",
        "id": 189227268,
        "sender_full_name": "oli",
        "timestamp": 1582819587
    },
    {
        "content": "<p>the extra tooling is only required for ppl with an interest in syncing</p>",
        "id": 189227283,
        "sender_full_name": "oli",
        "timestamp": 1582819600
    },
    {
        "content": "<p>basically in the clippy case we sync when we want to use a newer nightly on the clippy repo or when we want to move new features from the clippy repo to the rustc subrepo</p>",
        "id": 189227332,
        "sender_full_name": "oli",
        "timestamp": 1582819642
    },
    {
        "content": "<p>I'm trying to understand how someone making rustc changes that have effects on tools wouldn't need to know about<code>.subrepo</code></p>",
        "id": 189227342,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582819648
    },
    {
        "content": "<p>there's a literal <code>cp</code> copy of the working copy of the subrepo in the rustc working copy</p>",
        "id": 189227386,
        "sender_full_name": "oli",
        "timestamp": 1582819679
    },
    {
        "content": "<p>Also this sounds like divergence between the external repo and the rustc repo is possible? How is that handled?</p>",
        "id": 189227433,
        "sender_full_name": "nagisa",
        "timestamp": 1582819684
    },
    {
        "content": "<p>the changes to the tool just turn into commits on the rust-lang/rust repo ?</p>",
        "id": 189227446,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582819690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can you elaborate on the rebasing aspect; when I'm updating my PR that isn't making tool changes, can I continue just using <code>git pull --rebase upstream master</code>?</p>",
        "id": 189227449,
        "sender_full_name": "centril",
        "timestamp": 1582819690
    },
    {
        "content": "<p>you can make commits that cross the rustc repo and the external repo</p>",
        "id": 189227454,
        "sender_full_name": "oli",
        "timestamp": 1582819693
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189227446\" title=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189227446\">said</a>:</p>\n<blockquote>\n<p>the changes to the tool just turn into commits on the rust-lang/rust repo ?</p>\n</blockquote>\n<p>yes</p>",
        "id": 189227466,
        "sender_full_name": "oli",
        "timestamp": 1582819701
    },
    {
        "content": "<p>and the synchronizers have to deal with cherry-picking them?</p>",
        "id": 189227471,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582819704
    },
    {
        "content": "<p>ah no</p>",
        "id": 189227476,
        "sender_full_name": "oli",
        "timestamp": 1582819709
    },
    {
        "content": "<p>you only get one commit per sync</p>",
        "id": 189227479,
        "sender_full_name": "oli",
        "timestamp": 1582819713
    },
    {
        "content": "<p>oh</p>",
        "id": 189227486,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582819717
    },
    {
        "content": "<p>just like with submodule</p>",
        "id": 189227488,
        "sender_full_name": "oli",
        "timestamp": 1582819718
    },
    {
        "content": "<p>but the clippy repo gets all commits that touched its subrepo in the rustc repo</p>",
        "id": 189227510,
        "sender_full_name": "oli",
        "timestamp": 1582819737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189227449\" title=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189227449\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> can you elaborate on the rebasing aspect; when I'm updating my PR that isn't making tool changes, can I continue just using <code>git pull --rebase upstream master</code>?</p>\n</blockquote>\n<p>yes</p>",
        "id": 189227531,
        "sender_full_name": "oli",
        "timestamp": 1582819755
    },
    {
        "content": "<p>so in the rust-lang/rust --&gt; tool repo direction, its fine grained?</p>",
        "id": 189227549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582819763
    },
    {
        "content": "<p>only if you used a <code>git subrepo</code> command do you need to take care</p>",
        "id": 189227550,
        "sender_full_name": "oli",
        "timestamp": 1582819764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189227549\" title=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189227549\">said</a>:</p>\n<blockquote>\n<p>so in the rust-lang/rust --&gt; tool repo direction, its fine grained?</p>\n</blockquote>\n<p>yes</p>",
        "id": 189227561,
        "sender_full_name": "oli",
        "timestamp": 1582819773
    },
    {
        "content": "<p>but int he tool repo --&gt; rust-lang/rust direction, its coarse grained?</p>",
        "id": 189227563,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582819775
    },
    {
        "content": "<p>yes, it's one commit per update in the tool repo -&gt; rust repo direction</p>",
        "id": 189227576,
        "sender_full_name": "oli",
        "timestamp": 1582819788
    },
    {
        "content": "<p>that probably makes sense.</p>",
        "id": 189227640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582819804
    },
    {
        "content": "<p>So basically the benefit here is that this is just not submodule?</p>",
        "id": 189227643,
        "sender_full_name": "nagisa",
        "timestamp": 1582819806
    },
    {
        "content": "<p>yes</p>",
        "id": 189227648,
        "sender_full_name": "oli",
        "timestamp": 1582819810
    },
    {
        "content": "<p>it's a monorepo for all intents and purposes</p>",
        "id": 189227669,
        "sender_full_name": "oli",
        "timestamp": 1582819819
    },
    {
        "content": "<p>except with synchronization tooling so we can keep a separate repo for easy contribs by users who contrib to the tools</p>",
        "id": 189227686,
        "sender_full_name": "oli",
        "timestamp": 1582819835
    },
    {
        "content": "<p>If I am hacking on rustc and also need to make drive-by changes to Clippy and then there's a merge conflict in the clippy changes, what happens then?</p>",
        "id": 189227733,
        "sender_full_name": "centril",
        "timestamp": 1582819869
    },
    {
        "content": "<p>the synchronizer needs to resolve them</p>",
        "id": 189227767,
        "sender_full_name": "oli",
        "timestamp": 1582819889
    },
    {
        "content": "<p>your changes are no different from a normal PR to clippy</p>",
        "id": 189227907,
        "sender_full_name": "oli",
        "timestamp": 1582819928
    },
    {
        "content": "<p>What (workflow?) improvements do we expect here? From my reading you basically just get submodules under a different name with slightly different and way more obscure semantics to be honest.</p>",
        "id": 189227921,
        "sender_full_name": "nagisa",
        "timestamp": 1582819942
    },
    {
        "content": "<p>we get to block CI on tool breakage</p>",
        "id": 189227939,
        "sender_full_name": "oli",
        "timestamp": 1582819959
    },
    {
        "content": "<p>so if you do some changes that break tools, you can fix them in your PR</p>",
        "id": 189227953,
        "sender_full_name": "oli",
        "timestamp": 1582819969
    },
    {
        "content": "<p>without a sync dance</p>",
        "id": 189227957,
        "sender_full_name": "oli",
        "timestamp": 1582819972
    },
    {
        "content": "<p>you just fix them inside the rust repo</p>",
        "id": 189227965,
        "sender_full_name": "oli",
        "timestamp": 1582819979
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 189227976,
        "sender_full_name": "centril",
        "timestamp": 1582819986
    },
    {
        "content": "<p>Again, does that mean the tool repo and the rustc repo can diverge for that tool?</p>",
        "id": 189228002,
        "sender_full_name": "nagisa",
        "timestamp": 1582820016
    },
    {
        "content": "<p>imo this almost sounds too good to be true :P</p>",
        "id": 189228003,
        "sender_full_name": "centril",
        "timestamp": 1582820017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189228002\" title=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189228002\">said</a>:</p>\n<blockquote>\n<p>Again, does that mean the tool repo and the rustc repo can diverge for that tool?</p>\n</blockquote>\n<p>yes</p>",
        "id": 189228011,
        "sender_full_name": "oli",
        "timestamp": 1582820024
    },
    {
        "content": "<p>And how are we gonna handle non-trivial… lets call them… sync conflicts?</p>",
        "id": 189228095,
        "sender_full_name": "nagisa",
        "timestamp": 1582820069
    },
    {
        "content": "<p>just like we handle them right now, they can already happen after contribs to the clippy repo become conflicting with future changes required for rustups</p>",
        "id": 189228148,
        "sender_full_name": "oli",
        "timestamp": 1582820113
    },
    {
        "content": "<p>Could there be automatic syncs through bors or something?</p>",
        "id": 189228211,
        "sender_full_name": "Jack Huey",
        "timestamp": 1582820147
    },
    {
        "content": "<p>With submodules you won’t get any conflicts inside a tool though.</p>",
        "id": 189228216,
        "sender_full_name": "nagisa",
        "timestamp": 1582820150
    },
    {
        "content": "<p>only between separate PRs against that tool.</p>",
        "id": 189228273,
        "sender_full_name": "nagisa",
        "timestamp": 1582820167
    },
    {
        "content": "<p>now you get yet another family of conflicts.</p>",
        "id": 189228292,
        "sender_full_name": "nagisa",
        "timestamp": 1582820185
    },
    {
        "content": "<p>And it requires a 3rd party, that’s potentially not familiar with changes in question, to resolve them.</p>",
        "id": 189228431,
        "sender_full_name": "nagisa",
        "timestamp": 1582820285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189228216\" title=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189228216\">said</a>:</p>\n<blockquote>\n<p>With submodules you won’t get any conflicts inside a tool though.</p>\n</blockquote>\n<p>you just get periods of time where the nightly rust doesn't have a working tool</p>",
        "id": 189228432,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582820285
    },
    {
        "content": "<p>(but honestly, maybe that should be considered \"okay\")</p>",
        "id": 189228464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1582820314
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189228432\" title=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/189228432\">said</a>:</p>\n<blockquote>\n<p>you just get periods of time where the nightly rust doesn't have a working tool</p>\n</blockquote>\n<p>I think that’s the choice we made entirely for convenience reasons though? There’s no inherent technical limitation that would prevent us from CIing tools in rustc and requiring rustc PR authors to also fix tools at the same time.</p>",
        "id": 189228549,
        "sender_full_name": "nagisa",
        "timestamp": 1582820378
    },
    {
        "content": "<p>this proposal is effectively that and the only thing it wins is not having to go to another repo to fix it (so that the changes to tools and changes to rustc can land in synchronized manner)</p>",
        "id": 189228627,
        "sender_full_name": "nagisa",
        "timestamp": 1582820411
    },
    {
        "content": "<p>yes, but these \"only wins\" are really big blockers and I believe the explicit syncs by ppl will be less of a problem because they require you to just handle conflicts with other PRs to the same tool, not between different repos</p>",
        "id": 189228678,
        "sender_full_name": "oli",
        "timestamp": 1582820470
    },
    {
        "content": "<p>I didn’t mean to imply that the wins are irrelevant.</p>",
        "id": 189228786,
        "sender_full_name": "nagisa",
        "timestamp": 1582820524
    },
    {
        "content": "<p>Either way, my opinion is that this trades one kind of clunky with another kind of clunky. I guess the benefits of the other kind of clunky are sizable. But IME ideally we get both the benefits and no clunky.</p>",
        "id": 189228849,
        "sender_full_name": "nagisa",
        "timestamp": 1582820587
    },
    {
        "content": "<p>I think it's also true that this in theory makes it super easy to move to monorepo if we ever want to, right?</p>",
        "id": 189229028,
        "sender_full_name": "simulacrum",
        "timestamp": 1582820708
    },
    {
        "content": "<p>i.e. you just stop syncing?</p>",
        "id": 189229037,
        "sender_full_name": "simulacrum",
        "timestamp": 1582820719
    },
    {
        "content": "<p>One alternative option I can think is moving the source of truth to an actual rustc monorepo and then clippy devs just sync the portion of the tree they are interested in into another repo once in a while. Mainlining the changes from their own repo would then be a regular PR against rustc.</p>",
        "id": 189229136,
        "sender_full_name": "nagisa",
        "timestamp": 1582820763
    },
    {
        "content": "<p>That's the subrepo thing basically, right?</p>",
        "id": 189229180,
        "sender_full_name": "simulacrum",
        "timestamp": 1582820793
    },
    {
        "content": "<p>Or at least I'm not really seeing a difference</p>",
        "id": 189229247,
        "sender_full_name": "simulacrum",
        "timestamp": 1582820838
    },
    {
        "content": "<p>In the other direction, if I understand the subrepo correctly. But then any concerns arising from clippy devs’ workflows are clippy devs’ responsibility to deal with at the time they mainline changes from their repo into rustc.</p>",
        "id": 189229342,
        "sender_full_name": "nagisa",
        "timestamp": 1582820894
    },
    {
        "content": "<p>and it does not require any additional tooling  on anybody’s end.</p>",
        "id": 189229357,
        "sender_full_name": "nagisa",
        "timestamp": 1582820906
    },
    {
        "content": "<p>I think that where the canonical repository is doesn't matter, right?</p>",
        "id": 189229643,
        "sender_full_name": "simulacrum",
        "timestamp": 1582821067
    },
    {
        "content": "<p>Like, AFAICT, for all intents and purposes, rustc is the canonical repository</p>",
        "id": 189229681,
        "sender_full_name": "simulacrum",
        "timestamp": 1582821100
    },
    {
        "content": "<p>It's just that much of the work happens elsewhere and is periodically rolled in</p>",
        "id": 189229728,
        "sender_full_name": "simulacrum",
        "timestamp": 1582821123
    },
    {
        "content": "<p>Definitely agree with <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> that the wins here are pretty big</p>",
        "id": 189229832,
        "sender_full_name": "centril",
        "timestamp": 1582821195
    },
    {
        "content": "<p>having to jump between repos when hacking on rustc would imo be a non-starter</p>",
        "id": 189229855,
        "sender_full_name": "centril",
        "timestamp": 1582821217
    },
    {
        "content": "<p>How hard is it to improve our rustc workflows and tooling to make actual genuine monorepo tenable?</p>",
        "id": 189229981,
        "sender_full_name": "nagisa",
        "timestamp": 1582821290
    },
    {
        "content": "<p>What are the current concerns?</p>",
        "id": 189230059,
        "sender_full_name": "nagisa",
        "timestamp": 1582821348
    },
    {
        "content": "<p>my understanding is that the concerns are re. compile times / landing times</p>",
        "id": 189230140,
        "sender_full_name": "centril",
        "timestamp": 1582821381
    },
    {
        "content": "<p>but Clippy doesn't have that many PRs per week</p>",
        "id": 189230163,
        "sender_full_name": "centril",
        "timestamp": 1582821395
    },
    {
        "content": "<p>I personally think it's tenable already; on the upside, people like myself would now be interested in improving clippy</p>",
        "id": 189230215,
        "sender_full_name": "centril",
        "timestamp": 1582821430
    },
    {
        "content": "<p>but moving to GHA should help to reduce landing times substantially</p>",
        "id": 189230245,
        "sender_full_name": "centril",
        "timestamp": 1582821455
    },
    {
        "content": "<p>compile times can remain mostly unaffected, you’d just do the usual <code>cargo test</code> from the <code>clippy</code> directory, no?</p>",
        "id": 189230337,
        "sender_full_name": "nagisa",
        "timestamp": 1582821499
    },
    {
        "content": "<p>I think so</p>",
        "id": 189230377,
        "sender_full_name": "centril",
        "timestamp": 1582821521
    },
    {
        "content": "<p>Running partial tests would help most with the landing times, but I doubt we want to go there.</p>",
        "id": 189230460,
        "sender_full_name": "nagisa",
        "timestamp": 1582821574
    },
    {
        "content": "<p>yea don't ever break the no-rocket science rule</p>",
        "id": 189230492,
        "sender_full_name": "centril",
        "timestamp": 1582821598
    },
    {
        "content": "<p>though ostensibly if you only change things in the clippy folder then you can avoid running every single builder</p>",
        "id": 189230602,
        "sender_full_name": "centril",
        "timestamp": 1582821654
    },
    {
        "content": "<p>but I suspect the infra team would be unhappy with that</p>",
        "id": 189230618,
        "sender_full_name": "centril",
        "timestamp": 1582821667
    },
    {
        "content": "<p>We can't really do that today, too prone to breakage (and you want artifacts for every bors commit which means a full build)</p>",
        "id": 189230978,
        "sender_full_name": "simulacrum",
        "timestamp": 1582821862
    },
    {
        "content": "<p>I feel like we should do subrepo now and then maybe more than that later if we want to</p>",
        "id": 189231006,
        "sender_full_name": "simulacrum",
        "timestamp": 1582821887
    },
    {
        "content": "<p>I think subrepo gets us 90-95% of the way there though</p>",
        "id": 189231026,
        "sender_full_name": "simulacrum",
        "timestamp": 1582821903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> would you be on board to try and get that going? Maybe we can get a PR up making the changes necessary and FCP merge it or so?</p>",
        "id": 189231113,
        "sender_full_name": "simulacrum",
        "timestamp": 1582821960
    },
    {
        "content": "<p>As a rollout plan, we could first try subrepo for maybe 2 months and then if all goes well we can start gating on e.g. Clippy</p>",
        "id": 189231497,
        "sender_full_name": "centril",
        "timestamp": 1582822194
    },
    {
        "content": "<p>So if I want to update clippy, it would look like this:<br>\nLet's say Clippy was last synced at commit X. The Clippy repo got 20 commits since then -&gt; X+20, while the rust-Clippy repo got 3 fixing commits -&gt; X+3</p>\n<p>I then run <code>git subrepo sync</code> (or whatever) and resolve all sync conflicts. Then the Clippy repo is at (X+20)+3 and the rust-Clippy repo at (X+3)+1, since all commits from clippy got squashed in a single sync commit.</p>\n<p>I then open a PR in each repo and update the nightly version in the Clippy repo.</p>\n<p>A few questions:<br>\nDid I get it right up until here?<br>\nWhat if there is a sync fallout? Do I add commits to both repos/PRs until they are fixed?</p>",
        "id": 189252019,
        "sender_full_name": "flip1995",
        "timestamp": 1582834406
    },
    {
        "content": "<p>Hm, that's very interesting indeed. I guess whether or not this is better than toolstate breakage depends on how painful the syncing is.</p>",
        "id": 189294191,
        "sender_full_name": "RalfJ",
        "timestamp": 1582881378
    },
    {
        "content": "<p>to what extend could we have that automated? like, whenever a commit lands in rustc that changes the subrepo, have a bot open a syncing PR against clippy/miri? the more timely this is done, the lower the chance of conflicts.</p>",
        "id": 189294248,
        "sender_full_name": "RalfJ",
        "timestamp": 1582881444
    },
    {
        "content": "<p>What about testing? As far as I know, clippy runs it integration tests on other crates to look for crashing and ICE.</p>",
        "id": 189314920,
        "sender_full_name": "lzutao",
        "timestamp": 1582900562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I think this is good, but it's only going to be an improvement if we also start gating on it in the compiler imo. Which shouldn't be a big deal for compiler folks, it's just another in-tree consumer like rustdoc and 99% of breakages are ones where the compiler author is fixing such things all over the codebase _anyway_. (and ideally we should suggest this approach to rustdoc as well)</p>",
        "id": 189328417,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1582909221
    },
    {
        "content": "<p>I really don't like the idea of requiring people to have another git tool installed.</p>",
        "id": 189332496,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582911808
    },
    {
        "content": "<p>Git workflows involving third-party tools always look simple when you look at the simple commands, but completely break more advanced git usage.</p>",
        "id": 189332606,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582911858
    },
    {
        "content": "<p>I would love to figure out how we can make a monorepo viable in performance for tool developers.</p>",
        "id": 189332675,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582911904
    },
    {
        "content": "<p>That seems doable.</p>",
        "id": 189332715,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582911930
    },
    {
        "content": "<p>Failing that, submodule doesn't seem any <em>worse</em> (and we already use it), and it is at least built into git.</p>",
        "id": 189332811,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582911964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> Well, to be clear, my understanding is that we don't require anyone except people doing the upstreaming work to install said tool</p>",
        "id": 189333906,
        "sender_full_name": "simulacrum",
        "timestamp": 1582912671
    },
    {
        "content": "<p>(and even then that tool is only \"nice to have\" -- you can always just <code>cp</code> or <code>rsync</code> the files or so between the two directories, AFAICT)</p>",
        "id": 189333972,
        "sender_full_name": "simulacrum",
        "timestamp": 1582912694
    },
    {
        "content": "<p>submodule is much worse -- it doesn't support bidirectional editing at all</p>",
        "id": 189334000,
        "sender_full_name": "simulacrum",
        "timestamp": 1582912718
    },
    {
        "content": "<p>Wouldn't anyone trying to do work in rustc and commit changes that include changes to tools needed it?</p>",
        "id": 189338818,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582915612
    },
    {
        "content": "<p>no, not as I understand it</p>",
        "id": 189338849,
        "sender_full_name": "simulacrum",
        "timestamp": 1582915639
    },
    {
        "content": "<p>just if you're syncing between the two repos</p>",
        "id": 189338858,
        "sender_full_name": "simulacrum",
        "timestamp": 1582915647
    },
    {
        "content": "<p>which while not infrequent, is done by very few peopel</p>",
        "id": 189338872,
        "sender_full_name": "simulacrum",
        "timestamp": 1582915653
    },
    {
        "content": "<p>to everyone else it's just a bunch of files in a subdirectory, nothing special</p>",
        "id": 189338902,
        "sender_full_name": "simulacrum",
        "timestamp": 1582915680
    },
    {
        "content": "<p>Ah, that wasn't clear from the discussion above.</p>",
        "id": 189339117,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582915812
    },
    {
        "content": "<p>If this doesn't change the workflow for anyone else working in rustc, then I withdraw my objection.</p>",
        "id": 189339145,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1582915844
    },
    {
        "content": "<p>(catching up) this does seem pretty interesting. I think it's quite relevant also to efforts to \"library-ify\" the compiler.</p>",
        "id": 189631202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583267472
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> could you file an issue about this? perhaps we should start trying this out for Clippy</p>",
        "id": 192195980,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585518793
    },
    {
        "content": "<p>and maybe move rustfmt over so it doesn't need the rustc-ap stuff anymore</p>",
        "id": 192196004,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585518810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"132040\">Manish Goregaokar</span> <a href=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/192196004\" title=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/192196004\">said</a>:</p>\n<blockquote>\n<p>and maybe move rustfmt over so it doesn't need the rustc-ap stuff anymore</p>\n</blockquote>\n<p>That'd be great; I could then help out with some cleanups to the parser logic</p>",
        "id": 192223881,
        "sender_full_name": "centril",
        "timestamp": 1585556142
    },
    {
        "content": "<p>do I understand correctly that with the subrepo, we will have to fix actual merge conflicts in addition to 'only' compile errors if clippy breaks? (imo that sounds quite a bit more complicated...)</p>",
        "id": 192258551,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585576526
    },
    {
        "content": "<p>or will that completely eliminate clippy breaking?</p>",
        "id": 192258692,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585576581
    },
    {
        "content": "<p>(also our current CI setup is more strict than just <code>./x.py test src/tools/clippy</code>, that might cause problems here and there)</p>",
        "id": 192258832,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585576640
    },
    {
        "content": "<p>I think yes, you'd need to rebase atop clippy changes in rust-lang/rust, i.e. merge conflicts, but we would presumably also make clippy never broken. It would basically mean that clippy is equivalent of src/tools/rustdoc, I think.</p>",
        "id": 192260468,
        "sender_full_name": "simulacrum",
        "timestamp": 1585577323
    },
    {
        "content": "<p>(Except has a separate repository for issues and PRs)</p>",
        "id": 192260503,
        "sender_full_name": "simulacrum",
        "timestamp": 1585577342
    },
    {
        "content": "<p>I want this, <em>so much</em></p>",
        "id": 192265083,
        "sender_full_name": "eddyb",
        "timestamp": 1585579351
    },
    {
        "content": "<p>I just want to be able to fix tools when I make a change in rustc and not leave it to other people, or navigate several repos</p>",
        "id": 192265114,
        "sender_full_name": "eddyb",
        "timestamp": 1585579368
    },
    {
        "content": "<p>it's entirely unnecessary to ever have \"broken tools\" as a possible state</p>",
        "id": 192265145,
        "sender_full_name": "eddyb",
        "timestamp": 1585579383
    },
    {
        "content": "<p>I think we used to do a juggle with submodules to try and never break something but it got really hard</p>",
        "id": 192265174,
        "sender_full_name": "eddyb",
        "timestamp": 1585579399
    },
    {
        "content": "<p>(we probably still have to do it for Cargo, right?)</p>",
        "id": 192265192,
        "sender_full_name": "eddyb",
        "timestamp": 1585579406
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> we should also move all the strictest testing to be able to run from x.py, so that nothing can break</p>",
        "id": 192265325,
        "sender_full_name": "eddyb",
        "timestamp": 1585579451
    },
    {
        "content": "<p>yeah, for cargo we do, but since cargo is very high level and usually only depends on stabilized features in a \"breaking\" way it's not too bad</p>",
        "id": 192265453,
        "sender_full_name": "simulacrum",
        "timestamp": 1585579500
    },
    {
        "content": "<p>i.e. cargo tries to not have tests for unstable features (in rustc)</p>",
        "id": 192265515,
        "sender_full_name": "simulacrum",
        "timestamp": 1585579524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/192265325\" title=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/192265325\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"217864\">matthiaskrgr</span> we should also move all the strictest testing to be able to run from x.py, so that nothing can break</p>\n</blockquote>\n<p>uuh..<br>\nwell, what we do doing ci is stuff like 1) build clippy 2) test clippy 3) run doctests of clippy-driver 4) check(bootstrap) clippy with clippy to make sure there are no warnings (also internal warnings/lints) 5) check formatting with cargo fmt 6) check formatting of .mds 7) run clippy against  ~15 rust projects and check if there are ICSs/panics</p>",
        "id": 192267039,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585580111
    },
    {
        "content": "<p>all this would probably take around an hour or so if run locally <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 192267093,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585580131
    },
    {
        "content": "<p><code>./x.py test src/tools/clippy --hurt-me-plenty</code></p>",
        "id": 192267436,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585580243
    },
    {
        "content": "<p>hmm</p>",
        "id": 192268280,
        "sender_full_name": "eddyb",
        "timestamp": 1585580507
    },
    {
        "content": "<p>ah but none of those should really block clippy from being present in nightly</p>",
        "id": 192268320,
        "sender_full_name": "eddyb",
        "timestamp": 1585580519
    },
    {
        "content": "<p>it will probably happen that someone changes clippy in the rustcrepo and when we try to sync these changes into the upstream repo, we notice the crash and need to wait a couple of days for an upstream (rustc) fix and can't land the sync because of that (or have to temporarily disable the ci check(s)...)</p>",
        "id": 192270383,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585581345
    },
    {
        "content": "<p>meanwhile a crashing clippy gets shipped in nightly and everyone complains :P</p>",
        "id": 192270503,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585581379
    },
    {
        "content": "<p>(although we already had similar situations with the current system, so whatever...)</p>",
        "id": 192270555,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585581406
    },
    {
        "content": "<p>This seems like a testable hypothesis over some time before we always gate on clippy</p>",
        "id": 192270637,
        "sender_full_name": "centril",
        "timestamp": 1585581442
    },
    {
        "content": "<p>why would clippy <em>crash</em>?</p>",
        "id": 192270966,
        "sender_full_name": "eddyb",
        "timestamp": 1585581584
    },
    {
        "content": "<p>or do you mean on some specific project we don't test</p>",
        "id": 192270996,
        "sender_full_name": "eddyb",
        "timestamp": 1585581597
    },
    {
        "content": "<p>you could still run CI using nightly clippy, so we're informed immediatelly</p>",
        "id": 192271157,
        "sender_full_name": "eddyb",
        "timestamp": 1585581649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/192270966\" title=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/192270966\">said</a>:</p>\n<blockquote>\n<p>why would clippy <em>crash</em>?</p>\n</blockquote>\n<p>it is only written by mortal humans .. :P</p>\n<p>well sometimes clippy code triggers rustc paths that are not commonly used and that triggers an ICE that is not reproducible by running plain rustc on the source code</p>",
        "id": 192271418,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585581765
    },
    {
        "content": "<p>yes but I mean, we actually test tools</p>",
        "id": 192271460,
        "sender_full_name": "eddyb",
        "timestamp": 1585581783
    },
    {
        "content": "<p>in Rust CI</p>",
        "id": 192271489,
        "sender_full_name": "eddyb",
        "timestamp": 1585581795
    },
    {
        "content": "<p>and once we're no longer allowing build failures, there's pretty much 0 reason to allow test failures</p>",
        "id": 192271528,
        "sender_full_name": "eddyb",
        "timestamp": 1585581814
    },
    {
        "content": "<p>there have been panics caused by code that we did not have tests for previously, but that was caught by running clippy against cargo sources  (+ all its deps) for example</p>",
        "id": 192271583,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585581840
    },
    {
        "content": "<p>we'll hopefully be able to do more of that once we switch to GHA</p>",
        "id": 192271786,
        "sender_full_name": "eddyb",
        "timestamp": 1585581909
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-clippy/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/.github/workflows/clippy_bors.yml#L233\" title=\"https://github.com/rust-lang/rust-clippy/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/.github/workflows/clippy_bors.yml#L233\">https://github.com/rust-lang/rust-clippy/blob/d8e6e4cfcd83d555bd7717ea24224b777ed75773/.github/workflows/clippy_bors.yml#L233</a></p>",
        "id": 192271796,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585581911
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span></p>",
        "id": 192271812,
        "sender_full_name": "eddyb",
        "timestamp": 1585581916
    },
    {
        "content": "<p>it's not like pings are speeding up the GHA development <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 192271948,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1585581962
    },
    {
        "content": "<p>I meant the part about potentially testing more in CI once it's faster :P</p>",
        "id": 192272051,
        "sender_full_name": "eddyb",
        "timestamp": 1585581996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> we would never have to fix compile errors again, provided we gate on clippy building. we could also gate on clippy tests passing. We would just have to do periodic merges, which are way easier since they don't require context</p>",
        "id": 192414705,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585672310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> i think we should start by gating on it building (it's pretty meaningless if we're not doing that since people will just ignore it if CI isn't telling them not to), and then perhaps try gating on tests as well to see what happens</p>",
        "id": 192414858,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585672372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132040\">@Manish Goregaokar</span> that could work</p>",
        "id": 192414955,
        "sender_full_name": "centril",
        "timestamp": 1585672413
    },
    {
        "content": "<p>we could potentially turn off some of the more annoying tests, like the dogfood test, and instead have _that_ get run on clippy's nightly build</p>",
        "id": 192414970,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585672419
    },
    {
        "content": "<p>alternatively we can run the dogfood test as an integration test without gating on the lint result</p>",
        "id": 192415026,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585672442
    },
    {
        "content": "<p>ideally, fixing clippy should be very easy for people breaking it, so we should avoid gating on fmt/dogfood</p>",
        "id": 192415092,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585672463
    },
    {
        "content": "<p>(fmt i can go either way)</p>",
        "id": 192415111,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585672470
    },
    {
        "content": "<p>I can't emphasize enough how much I want to fix tools when I break them :D</p>",
        "id": 192415242,
        "sender_full_name": "eddyb",
        "timestamp": 1585672535
    },
    {
        "content": "<p>I'll start writing usage docs and do this for clippy, anyone volunteering for reviewing tomorrow morning with closing the tree and priorizing and stuff?</p>",
        "id": 192415855,
        "sender_full_name": "oli",
        "timestamp": 1585672819
    },
    {
        "content": "<p>(wrong thread)</p>",
        "id": 192415860,
        "sender_full_name": "bjorn3",
        "timestamp": 1585672822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I have it on good authority that <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> loves closing the tree :P</p>",
        "id": 192415931,
        "sender_full_name": "eddyb",
        "timestamp": 1585672863
    },
    {
        "content": "<p>hehe</p>",
        "id": 192415946,
        "sender_full_name": "oli",
        "timestamp": 1585672872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> we can coordinate, in #infra</p>",
        "id": 192415987,
        "sender_full_name": "centril",
        "timestamp": 1585672901
    },
    {
        "content": "<p>(on Discord)</p>",
        "id": 192415990,
        "sender_full_name": "centril",
        "timestamp": 1585672904
    },
    {
        "content": "<p>ok</p>",
        "id": 192416353,
        "sender_full_name": "oli",
        "timestamp": 1585673065
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/192271460\" title=\"#narrow/stream/131828-t-compiler/topic/toolstate.20breakage/near/192271460\">said</a>:</p>\n<blockquote>\n<p>yes but I mean, we actually test tools</p>\n</blockquote>\n<p>AFAIK, right now Miri is the only tool that is actually not shipped via rustup when tests fail. for most tools, if they build, we ship them. (the builders that create the package dont have time budget to run the tests, so they don't know better.)<br>\nhowever for some time now we have the infra to gate shipping tools on their tests, just no tool other than miri <a href=\"https://github.com/rust-lang/rust/blob/2113659479a82ea69633b23ef710b58ab127755e/src/tools/build-manifest/src/main.rs#L409\" title=\"https://github.com/rust-lang/rust/blob/2113659479a82ea69633b23ef710b58ab127755e/src/tools/build-manifest/src/main.rs#L409\">uses that</a>.</p>",
        "id": 192416670,
        "sender_full_name": "RalfJ",
        "timestamp": 1585673219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> we talked about doing this for Miri but there was some problem with the \"push\" action also having a commit on the rustc side?</p>",
        "id": 192416734,
        "sender_full_name": "RalfJ",
        "timestamp": 1585673255
    },
    {
        "content": "<p>yes</p>",
        "id": 192416746,
        "sender_full_name": "oli",
        "timestamp": 1585673261
    },
    {
        "content": "<p>so is that a solved problem or what do we do?</p>",
        "id": 192416826,
        "sender_full_name": "RalfJ",
        "timestamp": 1585673283
    },
    {
        "content": "<p>(FWIW, if trying this with clippy first is considered too risky I am okay with using Miri as the guinea pig here.)</p>",
        "id": 192416839,
        "sender_full_name": "RalfJ",
        "timestamp": 1585673285
    },
    {
        "content": "<p>It may be solvable by storing the synchronization file in the miri repo... I'll check if <code>subrepo</code> supports this</p>",
        "id": 192416933,
        "sender_full_name": "oli",
        "timestamp": 1585673337
    },
    {
        "content": "<p>doesn't look like it. A <code>push</code> will always need to store the parent of the push-commit's ID together with the remote repo's new commit id in a <code>.subrepo</code> file in order for the next <code>pull</code> or <code>push</code> to be able to figure out what changed and only push that</p>",
        "id": 192418082,
        "sender_full_name": "oli",
        "timestamp": 1585673859
    },
    {
        "content": "<p>it can't be in miri, as theoretically multiple repos could be using <code>miri</code> as a subrepo</p>",
        "id": 192418194,
        "sender_full_name": "oli",
        "timestamp": 1585673892
    },
    {
        "content": "<p>So when you push, you get a commit to rustc that you need to merge without ever rebasing it</p>",
        "id": 192418810,
        "sender_full_name": "oli",
        "timestamp": 1585674161
    },
    {
        "content": "<p>Hypothetically we could make bors do this after every merge that touched a subrepo</p>",
        "id": 192418897,
        "sender_full_name": "oli",
        "timestamp": 1585674201
    },
    {
        "content": "<p>or... PRs that only modify the <code>.subrepo</code> file are merged without running any CI</p>",
        "id": 192419019,
        "sender_full_name": "oli",
        "timestamp": 1585674246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> down to help. we should have a github issue filed though</p>",
        "id": 192419906,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585674673
    },
    {
        "content": "<p>i think aftger clippy we should ask rustfmt to try movng over, and maybe rustdoc</p>",
        "id": 192419963,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585674695
    },
    {
        "content": "<p>rustdoc?</p>",
        "id": 192424482,
        "sender_full_name": "eddyb",
        "timestamp": 1585676701
    },
    {
        "content": "<p>rustdoc is still in-tree :P</p>",
        "id": 192424502,
        "sender_full_name": "eddyb",
        "timestamp": 1585676708
    },
    {
        "content": "<p>Right, it's worth talking to imperio and seeing if they'd prefer to move it out of tree via subrepo</p>",
        "id": 192424591,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585676752
    },
    {
        "content": "<p>miri and clippy are already submodules so this is a strict win and also an easy move to make. rustfmt has that -ap- stuff so it's going to be a bit more involved getting rid of it, but it would benefit too. rustdoc is in tree so it's a bunch more work to move out, but it might be beneficial</p>",
        "id": 192424814,
        "sender_full_name": "Manish Goregaokar",
        "timestamp": 1585676840
    },
    {
        "content": "<p>ah I see, sure</p>",
        "id": 192424960,
        "sender_full_name": "eddyb",
        "timestamp": 1585676890
    },
    {
        "content": "<p><code>rls</code> is the other one</p>",
        "id": 192424974,
        "sender_full_name": "eddyb",
        "timestamp": 1585676898
    },
    {
        "content": "<p>if I had the ability to touch <code>rls</code> in tree, maybe I'd start cleaning it up</p>",
        "id": 192425055,
        "sender_full_name": "eddyb",
        "timestamp": 1585676931
    },
    {
        "content": "<p>mmmaybe</p>",
        "id": 192425060,
        "sender_full_name": "eddyb",
        "timestamp": 1585676934
    },
    {
        "content": "<p>it would certainly be more tempting than otherwise :P</p>",
        "id": 192425097,
        "sender_full_name": "eddyb",
        "timestamp": 1585676947
    },
    {
        "content": "<p>this is the subrepo command we would be using right? <a href=\"https://github.com/ingydotnet/git-subrepo\" title=\"https://github.com/ingydotnet/git-subrepo\">https://github.com/ingydotnet/git-subrepo</a></p>",
        "id": 192435270,
        "sender_full_name": "Phil H",
        "timestamp": 1585681646
    },
    {
        "content": "<blockquote>\n<p>i think we should start by gating on it building (it's pretty meaningless if we're not doing that since people will just ignore it if CI isn't telling them not to), and then perhaps try gating on tests as well to see what happens</p>\n</blockquote>\n<p>IMO we should at least also gate on the Clippy UI-tests from the get go. If we don't do this and there's a regression from a in tree rustup, we would have to go through all the PRs that fixed something in Clippy to figure out, what caused this regression. This can be really hard, since finding what causes some test regressions is sometimes already hard if you know what rust PR broke the test.</p>\n<p>I think we should start by gating on build and ui-test for the Clippy repo. Maybe add dogfood later (and hope that it doesn't lead to <code>#[allow(clippy::_)]</code> from every Clippy in tree fix). Integration tests, fmt, and remark can only be run in the Clippy repo, since they are rarely affected by a rustup.</p>",
        "id": 192436900,
        "sender_full_name": "flip1995",
        "timestamp": 1585682386
    },
    {
        "content": "<p>Hmm, another thing; right now, I can simply do <code>x.py check</code> and when that succeeds, I assume that my changes build.<br>\nOnce we gate on clippy, will it <em>always</em> require a 2 stage build (which takes can take ~50 times longer than <code>./x.py check</code>) to see if clippy still works? <br>\nOr is it possible to have some kind of shortcut?</p>",
        "id": 192465268,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585696556
    },
    {
        "content": "<p>we'd need to make <code>./x.py check</code> also check clippy</p>",
        "id": 192465644,
        "sender_full_name": "centril",
        "timestamp": 1585696854
    },
    {
        "content": "<p>like it does check rustdoc</p>",
        "id": 192465652,
        "sender_full_name": "centril",
        "timestamp": 1585696860
    },
    {
        "content": "<p>then we need at least a stage 1 for that I think</p>",
        "id": 192466087,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585697165
    },
    {
        "content": "<p>since you can't build nightly clippy with beta</p>",
        "id": 192466109,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585697192
    },
    {
        "content": "<p>what's significant difference between rustdoc and clippy here?</p>",
        "id": 192466410,
        "sender_full_name": "centril",
        "timestamp": 1585697415
    },
    {
        "content": "<p>you can <code>cargo +beta check</code> rustdoc but not clippy , at least I <em>think</em> so</p>",
        "id": 192466792,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585697723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> heh, no</p>",
        "id": 192471538,
        "sender_full_name": "eddyb",
        "timestamp": 1585701828
    },
    {
        "content": "<p><code>rustdoc</code> is 100% unstable rustc internals</p>",
        "id": 192471551,
        "sender_full_name": "eddyb",
        "timestamp": 1585701838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> is right about this, it's just a bit of missing support</p>",
        "id": 192471606,
        "sender_full_name": "eddyb",
        "timestamp": 1585701855
    },
    {
        "content": "<p>all <code>rustdoc</code>, <code>clippy</code> or <code>miri</code> need, in <code>cargo check</code> them, is the <code>cargo check</code>'d <code>librustc_*</code> libs</p>",
        "id": 192471652,
        "sender_full_name": "eddyb",
        "timestamp": 1585701900
    },
    {
        "content": "<p>so <code>./x.py check</code> could totally work</p>",
        "id": 192471664,
        "sender_full_name": "eddyb",
        "timestamp": 1585701907
    },
    {
        "content": "<p>also <code>./x.py test --stage 1 src/test/rustdoc</code> has worked for ages, and it compiles rustc once and rustdoc once</p>",
        "id": 192471716,
        "sender_full_name": "eddyb",
        "timestamp": 1585701954
    },
    {
        "content": "<p>we wanted to setup something like this for miri but miri does a few weird things we'll have to take into account</p>",
        "id": 192471774,
        "sender_full_name": "eddyb",
        "timestamp": 1585701977
    },
    {
        "content": "<p>oh great <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 192472662,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1585702801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> hang on... this <code>git subrepo</code> thing.... is it just an external tool that makes commits?</p>",
        "id": 192518006,
        "sender_full_name": "eddyb",
        "timestamp": 1585743291
    },
    {
        "content": "<p>yes</p>",
        "id": 192518021,
        "sender_full_name": "oli",
        "timestamp": 1585743301
    },
    {
        "content": "<p>...</p>",
        "id": 192518027,
        "sender_full_name": "eddyb",
        "timestamp": 1585743304
    },
    {
        "content": "<p>okay I was expecting something internal to <code>git</code>, where it tracks trees separately like a submodule</p>",
        "id": 192518050,
        "sender_full_name": "eddyb",
        "timestamp": 1585743321
    },
    {
        "content": "<p>git subtree looks far more appropriate</p>",
        "id": 192518080,
        "sender_full_name": "eddyb",
        "timestamp": 1585743338
    },
    {
        "content": "<p>no, this is just fancy tooling around monorepos with synchronization helpers</p>",
        "id": 192518086,
        "sender_full_name": "oli",
        "timestamp": 1585743342
    },
    {
        "content": "<p>but we don't want a monorepo, git-wise, do we?</p>",
        "id": 192518107,
        "sender_full_name": "eddyb",
        "timestamp": 1585743356
    },
    {
        "content": "<p>wouldn't <code>git subtree</code> let you have the exact commit history that is now in submodules?</p>",
        "id": 192518197,
        "sender_full_name": "eddyb",
        "timestamp": 1585743404
    },
    {
        "content": "<p>or am I missing something?</p>",
        "id": 192518207,
        "sender_full_name": "eddyb",
        "timestamp": 1585743410
    },
    {
        "content": "<p>I just read in random places that ppl were unhappy with <code>git subtree</code></p>",
        "id": 192518224,
        "sender_full_name": "oli",
        "timestamp": 1585743421
    },
    {
        "content": "<p>so I looked for alternatives</p>",
        "id": 192518235,
        "sender_full_name": "oli",
        "timestamp": 1585743426
    },
    {
        "content": "<p>I never actually used git subtree myself</p>",
        "id": 192518252,
        "sender_full_name": "oli",
        "timestamp": 1585743440
    },
    {
        "content": "<p>okay but <code>git subrepo</code> isn't a real git integration, which is what I (and probably others) were led to believe</p>",
        "id": 192518266,
        "sender_full_name": "eddyb",
        "timestamp": 1585743455
    },
    {
        "content": "<p>oh</p>",
        "id": 192518389,
        "sender_full_name": "oli",
        "timestamp": 1585743551
    },
    {
        "content": "<p>I specifically stated you need to install a separate tool</p>",
        "id": 192518402,
        "sender_full_name": "oli",
        "timestamp": 1585743561
    },
    {
        "content": "<p>and it's completely transparent otherwise</p>",
        "id": 192518412,
        "sender_full_name": "oli",
        "timestamp": 1585743568
    },
    {
        "content": "<p>yes but it doesn't interact with git repos and their commits in a nested way</p>",
        "id": 192518426,
        "sender_full_name": "eddyb",
        "timestamp": 1585743581
    },
    {
        "content": "<p>the name is sort of a lie</p>",
        "id": 192518430,
        "sender_full_name": "eddyb",
        "timestamp": 1585743584
    },
    {
        "content": "<p>ok, <em>shrug</em></p>",
        "id": 192518503,
        "sender_full_name": "oli",
        "timestamp": 1585743610
    },
    {
        "content": "<p>I'll leave a comment on the issue</p>",
        "id": 192518523,
        "sender_full_name": "eddyb",
        "timestamp": 1585743621
    },
    {
        "content": "<p>someone else do sth else then :D I don't know git subtree</p>",
        "id": 192518524,
        "sender_full_name": "oli",
        "timestamp": 1585743623
    },
    {
        "content": "<p>I guess I can try to nuke the clippy submodule and add it as a subtree, like you did</p>",
        "id": 192518634,
        "sender_full_name": "eddyb",
        "timestamp": 1585743708
    },
    {
        "content": "<p>and see what happens</p>",
        "id": 192518652,
        "sender_full_name": "eddyb",
        "timestamp": 1585743713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> what's important here is that we can make changes directly via <code>rust-lang/rust</code>to clippy without having to make a separate PR in clippy</p>",
        "id": 192518793,
        "sender_full_name": "centril",
        "timestamp": 1585743786
    },
    {
        "content": "<p>so make sure subtree or whatever the alternative is handles that</p>",
        "id": 192518828,
        "sender_full_name": "centril",
        "timestamp": 1585743802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I mean, yes, that's the bare absolute minimum, but also we should avoid degrading the quality of git history</p>",
        "id": 192518955,
        "sender_full_name": "eddyb",
        "timestamp": 1585743880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> oh, <code>git subtree</code> does the thing you did for merging miri into rustc lmao</p>",
        "id": 192518969,
        "sender_full_name": "eddyb",
        "timestamp": 1585743897
    },
    {
        "content": "<p>except it rewrites the whole history</p>",
        "id": 192518982,
        "sender_full_name": "eddyb",
        "timestamp": 1585743903
    },
    {
        "content": "<p>does <code>git subrepo</code> keep the commits or just make bland sync commits?</p>",
        "id": 192519008,
        "sender_full_name": "eddyb",
        "timestamp": 1585743923
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  I have no problem with additional constraints you have <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192519015,
        "sender_full_name": "centril",
        "timestamp": 1585743929
    },
    {
        "content": "<p>pushes keep the commits</p>",
        "id": 192519020,
        "sender_full_name": "oli",
        "timestamp": 1585743932
    },
    {
        "content": "<p>your clippy import PR definitely is missing the clippy history :P</p>",
        "id": 192519042,
        "sender_full_name": "eddyb",
        "timestamp": 1585743946
    },
    {
        "content": "<p>so the remote repo sees everything</p>",
        "id": 192519045,
        "sender_full_name": "oli",
        "timestamp": 1585743950
    },
    {
        "content": "<p>okay but also in the opposite direction?</p>",
        "id": 192519064,
        "sender_full_name": "eddyb",
        "timestamp": 1585743960
    },
    {
        "content": "<p>yea, but does rustc care about clippy commits?</p>",
        "id": 192519085,
        "sender_full_name": "oli",
        "timestamp": 1585743962
    },
    {
        "content": "<p>I don't want <code>git blame</code> to break</p>",
        "id": 192519128,
        "sender_full_name": "eddyb",
        "timestamp": 1585743977
    },
    {
        "content": "<p>subrepo discussion: <a href=\"https://github.com/ingydotnet/git-subrepo/issues/246\" title=\"https://github.com/ingydotnet/git-subrepo/issues/246\">https://github.com/ingydotnet/git-subrepo/issues/246</a></p>",
        "id": 192519154,
        "sender_full_name": "oli",
        "timestamp": 1585743991
    },
    {
        "content": "<p><code>git subtree pull</code> seems to create one commit per remote commit unless you use <code>--squash</code></p>",
        "id": 192519196,
        "sender_full_name": "eddyb",
        "timestamp": 1585744017
    },
    {
        "content": "<p>yea, unsupported right now in git subrepo</p>",
        "id": 192519234,
        "sender_full_name": "oli",
        "timestamp": 1585744054
    },
    {
        "content": "<p>so why would we use subrepo over subtree?</p>",
        "id": 192519250,
        "sender_full_name": "eddyb",
        "timestamp": 1585744068
    },
    {
        "content": "<p>idk</p>",
        "id": 192519311,
        "sender_full_name": "oli",
        "timestamp": 1585744088
    },
    {
        "content": "<p>anyway it turns out there's no tool that does the submodule thing but tracked transitively instead of opaquely</p>",
        "id": 192519325,
        "sender_full_name": "eddyb",
        "timestamp": 1585744099
    },
    {
        "content": "<p>heck opaque tracking would be fine if they could be pushed alongside eachother automatically ugh</p>",
        "id": 192519347,
        "sender_full_name": "eddyb",
        "timestamp": 1585744116
    },
    {
        "content": "<p>so the choices are:</p>\n<ul>\n<li>keep history, but lose exact commit hashes</li>\n<li>don't keep history at all, full-on monorepo</li>\n</ul>",
        "id": 192519412,
        "sender_full_name": "eddyb",
        "timestamp": 1585744160
    },
    {
        "content": "<p>well, history could be kept with git subrepo, it just doesn't support it yet</p>",
        "id": 192519454,
        "sender_full_name": "oli",
        "timestamp": 1585744192
    },
    {
        "content": "<p>it's not a technical limitation</p>",
        "id": 192519465,
        "sender_full_name": "oli",
        "timestamp": 1585744201
    },
    {
        "content": "<p>I am suspicious of it existing when <code>git subtree</code> already does, is there an explainer somewhere?</p>",
        "id": 192519522,
        "sender_full_name": "eddyb",
        "timestamp": 1585744217
    },
    {
        "content": "<p>is it <em>older</em> or <em>newer</em> than <code>git subtree</code>?</p>",
        "id": 192519531,
        "sender_full_name": "eddyb",
        "timestamp": 1585744225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> btw, I think it would be good to first make a PR with the contributing notes before doing the move itself</p>",
        "id": 192519751,
        "sender_full_name": "centril",
        "timestamp": 1585744365
    },
    {
        "content": "<p>easier to review tweaks to the contributing notes that way</p>",
        "id": 192519770,
        "sender_full_name": "centril",
        "timestamp": 1585744375
    },
    {
        "content": "<p>subrepo is newer than subtree</p>",
        "id": 192519982,
        "sender_full_name": "oli",
        "timestamp": 1585744509
    },
    {
        "content": "<p>its docs explicitly mention subtree having problems that it solves</p>",
        "id": 192519997,
        "sender_full_name": "oli",
        "timestamp": 1585744518
    },
    {
        "content": "<p>which are?</p>",
        "id": 192520108,
        "sender_full_name": "eddyb",
        "timestamp": 1585744569
    },
    {
        "content": "<blockquote>\n<p>Fixes known rebase failures with git-subtree.</p>\n</blockquote>",
        "id": 192520212,
        "sender_full_name": "oli",
        "timestamp": 1585744657
    },
    {
        "content": "<p><a href=\"https://github.com/ingydotnet/git-subrepo#benefits\" title=\"https://github.com/ingydotnet/git-subrepo#benefits\">https://github.com/ingydotnet/git-subrepo#benefits</a></p>",
        "id": 192520241,
        "sender_full_name": "oli",
        "timestamp": 1585744674
    },
    {
        "content": "<p>idk, reading <a href=\"https://stackoverflow.com/questions/32407634/when-to-use-git-subtree\" title=\"https://stackoverflow.com/questions/32407634/when-to-use-git-subtree\">https://stackoverflow.com/questions/32407634/when-to-use-git-subtree</a> sounds to me like subtree has the same benefits</p>",
        "id": 192520502,
        "sender_full_name": "oli",
        "timestamp": 1585744805
    },
    {
        "content": "<p>note that subtree also does the \"is basically monorepo\" strategy</p>",
        "id": 192521340,
        "sender_full_name": "oli",
        "timestamp": 1585745272
    },
    {
        "content": "<p>I honestly don't care whether we use git subtree or git subrepo, although the former being part of git makes it more convenient</p>",
        "id": 192521419,
        "sender_full_name": "oli",
        "timestamp": 1585745295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> a monorepo with lost history is more of a terrible monorepo to me than one where we at least sync history both ways</p>",
        "id": 192522728,
        "sender_full_name": "eddyb",
        "timestamp": 1585745939
    },
    {
        "content": "<p>subrepo mentions \"Your git history is kept squeaky clean.\"</p>",
        "id": 192522929,
        "sender_full_name": "eddyb",
        "timestamp": 1585746019
    },
    {
        "content": "<p>that's... not what I want</p>",
        "id": 192522936,
        "sender_full_name": "eddyb",
        "timestamp": 1585746023
    },
    {
        "content": "<p>you don't really lose history, with submodule you still need to go to the right commit on the other repo, git subrepo had these commit ids also stored in a file, just like git submodule</p>",
        "id": 192522940,
        "sender_full_name": "oli",
        "timestamp": 1585746026
    },
    {
        "content": "<blockquote>\n<p>\"Upstream history (clone/pull) is condensed into a single commit.\"</p>\n</blockquote>",
        "id": 192522961,
        "sender_full_name": "eddyb",
        "timestamp": 1585746036
    },
    {
        "content": "<p>I'm convinced</p>",
        "id": 192522980,
        "sender_full_name": "oli",
        "timestamp": 1585746046
    },
    {
        "content": "<p>ignore git subrepo please</p>",
        "id": 192522991,
        "sender_full_name": "oli",
        "timestamp": 1585746052
    },
    {
        "content": "<p>lol</p>",
        "id": 192522996,
        "sender_full_name": "eddyb",
        "timestamp": 1585746056
    },
    {
        "content": "<p>I am trying to figure out the best option, and not be kneejerky, FWIW</p>",
        "id": 192523030,
        "sender_full_name": "eddyb",
        "timestamp": 1585746073
    },
    {
        "content": "<p>I just want any option that is monorepo style for users</p>",
        "id": 192523082,
        "sender_full_name": "oli",
        "timestamp": 1585746090
    },
    {
        "content": "<p>and I get that history is nice, and git subtree has nice (even if fake) history</p>",
        "id": 192523127,
        "sender_full_name": "oli",
        "timestamp": 1585746105
    },
    {
        "content": "<p>so let's do that</p>",
        "id": 192523133,
        "sender_full_name": "oli",
        "timestamp": 1585746109
    },
    {
        "content": "<p>these are the only three options I found (beyond full monorepo)</p>",
        "id": 192523153,
        "sender_full_name": "oli",
        "timestamp": 1585746121
    },
    {
        "content": "<p>3?</p>",
        "id": 192523207,
        "sender_full_name": "eddyb",
        "timestamp": 1585746129
    },
    {
        "content": "<p>I just never thought to check git subtree because git subrepo docs said it's not great</p>",
        "id": 192523237,
        "sender_full_name": "oli",
        "timestamp": 1585746143
    },
    {
        "content": "<p>submodule, subrepo, subtree, monorepo</p>",
        "id": 192523248,
        "sender_full_name": "oli",
        "timestamp": 1585746149
    },
    {
        "content": "<p>aaah</p>",
        "id": 192523270,
        "sender_full_name": "eddyb",
        "timestamp": 1585746157
    },
    {
        "content": "<p>and submodule and monorepo are not what we want</p>",
        "id": 192523305,
        "sender_full_name": "oli",
        "timestamp": 1585746172
    },
    {
        "content": "<p>I was gonna take subtree out for a spin, are you still on it then?</p>",
        "id": 192523318,
        "sender_full_name": "eddyb",
        "timestamp": 1585746181
    },
    {
        "content": "<p>already done, you have a PR assigned to you</p>",
        "id": 192523338,
        "sender_full_name": "oli",
        "timestamp": 1585746190
    },
    {
        "content": "<p>wait what</p>",
        "id": 192523344,
        "sender_full_name": "eddyb",
        "timestamp": 1585746194
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> did you try the <code>./x.py check</code> thing?</p>",
        "id": 192523489,
        "sender_full_name": "centril",
        "timestamp": 1585746247
    },
    {
        "content": "<p>no</p>",
        "id": 192523510,
        "sender_full_name": "oli",
        "timestamp": 1585746256
    },
    {
        "content": "<p>let's, please</p>",
        "id": 192523522,
        "sender_full_name": "centril",
        "timestamp": 1585746262
    },
    {
        "content": "<p>before r+ sure</p>",
        "id": 192523548,
        "sender_full_name": "oli",
        "timestamp": 1585746274
    },
    {
        "content": "<p>sure <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 192523565,
        "sender_full_name": "centril",
        "timestamp": 1585746282
    },
    {
        "content": "<p>oh, GH is nice enough to show your own Rust commits separately :D</p>",
        "id": 192523632,
        "sender_full_name": "eddyb",
        "timestamp": 1585746306
    },
    {
        "content": "<p>(We should make x.py check changes a separate PR, there's no need to connect the two beyond a toggle that enables it by default when we merge the two)</p>",
        "id": 192523652,
        "sender_full_name": "simulacrum",
        "timestamp": 1585746316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  okay, but let's land that separate PR first then</p>",
        "id": 192523697,
        "sender_full_name": "centril",
        "timestamp": 1585746337
    },
    {
        "content": "<p>...obviously, yes.</p>",
        "id": 192523715,
        "sender_full_name": "simulacrum",
        "timestamp": 1585746350
    },
    {
        "content": "<p>heh wasn't obvious to me :P</p>",
        "id": 192523769,
        "sender_full_name": "centril",
        "timestamp": 1585746364
    },
    {
        "content": "<p>huh, are commit signatures preserved?</p>",
        "id": 192523801,
        "sender_full_name": "eddyb",
        "timestamp": 1585746378
    },
    {
        "content": "<p>that's a benefit I haven't considered</p>",
        "id": 192523812,
        "sender_full_name": "eddyb",
        "timestamp": 1585746383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> you won't believe this</p>",
        "id": 192523953,
        "sender_full_name": "eddyb",
        "timestamp": 1585746453
    },
    {
        "content": "<p><code>git subtree</code> preserves commit hashes</p>",
        "id": 192523984,
        "sender_full_name": "eddyb",
        "timestamp": 1585746464
    },
    {
        "content": "<p>my face right now -&gt; <span aria-label=\"open mouth\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"open mouth\">:open_mouth:</span></p>",
        "id": 192524012,
        "sender_full_name": "eddyb",
        "timestamp": 1585746477
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust-clippy/commits/master\" title=\"https://github.com/rust-lang/rust-clippy/commits/master\">https://github.com/rust-lang/rust-clippy/commits/master</a></p>",
        "id": 192524083,
        "sender_full_name": "eddyb",
        "timestamp": 1585746495
    },
    {
        "content": "<p>not sure that will be permanent</p>",
        "id": 192524103,
        "sender_full_name": "oli",
        "timestamp": 1585746507
    },
    {
        "content": "<p>unless it keeps merging..hmmm</p>",
        "id": 192524134,
        "sender_full_name": "oli",
        "timestamp": 1585746517
    },
    {
        "content": "<p>doesn't matter, most of the history is in the past</p>",
        "id": 192524140,
        "sender_full_name": "eddyb",
        "timestamp": 1585746519
    },
    {
        "content": "<p>won't be soon</p>",
        "id": 192524165,
        "sender_full_name": "oli",
        "timestamp": 1585746529
    },
    {
        "content": "<p>(if we do this)</p>",
        "id": 192524185,
        "sender_full_name": "oli",
        "timestamp": 1585746538
    },
    {
        "content": "<p>still, I had already accepted losing <em>all</em> commit hash correspondence</p>",
        "id": 192524320,
        "sender_full_name": "eddyb",
        "timestamp": 1585746596
    },
    {
        "content": "<p>okay so I think the explanation is that <code>git subtree</code> (ab)uses merge commits to hide adding the prefix</p>",
        "id": 192525027,
        "sender_full_name": "eddyb",
        "timestamp": 1585746889
    },
    {
        "content": "<p>meaning every <code>git subtree pull</code> should keep matching commits from the separate repo</p>",
        "id": 192525062,
        "sender_full_name": "eddyb",
        "timestamp": 1585746904
    },
    {
        "content": "<p>and probably every <code>git subtree push</code> too (but in that direction there might be pollution, and at least that part I don't mind being rewritten)</p>",
        "id": 192525097,
        "sender_full_name": "eddyb",
        "timestamp": 1585746920
    },
    {
        "content": "<p>we also need to be careful rebasing (as in never doing so) the merge commits created by <code>git subtree</code></p>",
        "id": 192525368,
        "sender_full_name": "oli",
        "timestamp": 1585747029
    },
    {
        "content": "<p>but that's only a concern for whoever creates the subtree-operation PRs, right?</p>",
        "id": 192525435,
        "sender_full_name": "simulacrum",
        "timestamp": 1585747053
    },
    {
        "content": "<p>but that's only when sync-ing, right? I wonder if we should automate that</p>",
        "id": 192525451,
        "sender_full_name": "eddyb",
        "timestamp": 1585747060
    },
    {
        "content": "<p>yes</p>",
        "id": 192525453,
        "sender_full_name": "oli",
        "timestamp": 1585747062
    },
    {
        "content": "<p>kind of like creating a rollup PR</p>",
        "id": 192525459,
        "sender_full_name": "eddyb",
        "timestamp": 1585747065
    },
    {
        "content": "<p>you wouldn't rebase a rollup PR either</p>",
        "id": 192525475,
        "sender_full_name": "eddyb",
        "timestamp": 1585747071
    },
    {
        "content": "<p>we can automate later. This is still strictly an improvement over submodule</p>",
        "id": 192525602,
        "sender_full_name": "oli",
        "timestamp": 1585747110
    },
    {
        "content": "<p>right</p>",
        "id": 192525630,
        "sender_full_name": "eddyb",
        "timestamp": 1585747122
    },
    {
        "content": "<p>there are already issues where people accidentally include submodule reverts in their rebases</p>",
        "id": 192525662,
        "sender_full_name": "eddyb",
        "timestamp": 1585747134
    },
    {
        "content": "<p>I think that won't be possible here</p>",
        "id": 192525691,
        "sender_full_name": "simulacrum",
        "timestamp": 1585747148
    },
    {
        "content": "<p>now at least rebasing non-subtree changes shouldn't ever go wrong</p>",
        "id": 192525694,
        "sender_full_name": "eddyb",
        "timestamp": 1585747148
    },
    {
        "content": "<p>right, that's what I mean, we already had to be careful and I think now most people should have strictly less problems</p>",
        "id": 192525799,
        "sender_full_name": "eddyb",
        "timestamp": 1585747200
    },
    {
        "content": "<p>Will this give us (part of) the miri history inside rust-lang/rust twice? It already contains it once when the old const eval was replaced by the miri core.</p>",
        "id": 192525855,
        "sender_full_name": "bjorn3",
        "timestamp": 1585747214
    },
    {
        "content": "<p>hilarious</p>",
        "id": 192525878,
        "sender_full_name": "eddyb",
        "timestamp": 1585747225
    },
    {
        "content": "<p>my understanding is that subtree essentially means that no one has to know that clippy is a separate repo unless they want to</p>",
        "id": 192525889,
        "sender_full_name": "simulacrum",
        "timestamp": 1585747231
    },
    {
        "content": "<p>they're the same commit hashes though</p>",
        "id": 192525890,
        "sender_full_name": "eddyb",
        "timestamp": 1585747232
    },
    {
        "content": "<p>I don't think so... I did it without changing commit hashes back then</p>",
        "id": 192525903,
        "sender_full_name": "oli",
        "timestamp": 1585747244
    },
    {
        "content": "<p>so it will look like rejoining a long-<del>lost</del>forgotten git history</p>",
        "id": 192525935,
        "sender_full_name": "eddyb",
        "timestamp": 1585747258
    },
    {
        "content": "<p>there'll just be a long part where we never saw any interaction between the mir branch and the rustc branch</p>",
        "id": 192525956,
        "sender_full_name": "oli",
        "timestamp": 1585747264
    },
    {
        "content": "<p>but that's trivial to check when we do the merge ;)</p>",
        "id": 192525985,
        "sender_full_name": "oli",
        "timestamp": 1585747280
    },
    {
        "content": "<p>(unless I kill github UI again, as I did for a bit with clippy earlier)</p>",
        "id": 192526013,
        "sender_full_name": "oli",
        "timestamp": 1585747292
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you want to review <a href=\"https://github.com/rust-lang/rust/pull/70655/commits/f8041069e27b9ab35c937255880c988ba0f2c362\" title=\"https://github.com/rust-lang/rust/pull/70655/commits/f8041069e27b9ab35c937255880c988ba0f2c362\">https://github.com/rust-lang/rust/pull/70655/commits/f8041069e27b9ab35c937255880c988ba0f2c362</a></p>",
        "id": 192526507,
        "sender_full_name": "eddyb",
        "timestamp": 1585747517
    },
    {
        "content": "<p>and <a href=\"https://github.com/rust-lang/rust/pull/70655/commits/6a05fee1933fe61e8615739a45eac7e2033ed4c9\" title=\"https://github.com/rust-lang/rust/pull/70655/commits/6a05fee1933fe61e8615739a45eac7e2033ed4c9\">https://github.com/rust-lang/rust/pull/70655/commits/6a05fee1933fe61e8615739a45eac7e2033ed4c9</a> I guess</p>",
        "id": 192526564,
        "sender_full_name": "eddyb",
        "timestamp": 1585747541
    },
    {
        "content": "<p>They seem fine though that's no guarantee it'll work</p>",
        "id": 192526688,
        "sender_full_name": "simulacrum",
        "timestamp": 1585747594
    },
    {
        "content": "<p>oh the second commit undos the removal of the toolstate in the first</p>",
        "id": 192526781,
        "sender_full_name": "eddyb",
        "timestamp": 1585747644
    },
    {
        "content": "<p>okay I think I see what's happening in rustbuild, looks fine to me too</p>",
        "id": 192526976,
        "sender_full_name": "eddyb",
        "timestamp": 1585747724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> are you working on <code>./x.py check</code> support/testing btw?</p>",
        "id": 192528034,
        "sender_full_name": "eddyb",
        "timestamp": 1585748218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> oh, <span class=\"user-mention\" data-user-id=\"209698\">@edef</span> explained it to me on IRC: <code>git subtree</code> uses <code>git merge -Xsubtree</code> internally, so it is technically a <code>git</code> feature, not just abusing the merge commit</p>",
        "id": 192531207,
        "sender_full_name": "eddyb",
        "timestamp": 1585749392
    },
    {
        "content": "<p>yes working on check</p>",
        "id": 192531250,
        "sender_full_name": "oli",
        "timestamp": 1585749411
    },
    {
        "content": "<p>and that's the only thing left before we throw this in, no FCP no MCP :P?</p>",
        "id": 192531315,
        "sender_full_name": "eddyb",
        "timestamp": 1585749438
    },
    {
        "content": "<p>I would like to see the subrepo vs. subtree summary that Ralf asked for on the issue</p>",
        "id": 192531397,
        "sender_full_name": "simulacrum",
        "timestamp": 1585749475
    },
    {
        "content": "<p>and IMO we probably want to at least give it some time for responses, at the very least some mention at meeting tomorrow</p>",
        "id": 192531502,
        "sender_full_name": "simulacrum",
        "timestamp": 1585749505
    },
    {
        "content": "<p>I would FCP it personally</p>",
        "id": 192531510,
        "sender_full_name": "simulacrum",
        "timestamp": 1585749510
    },
    {
        "content": "<p>or at least \"FCP without the final comment period\"</p>",
        "id": 192531543,
        "sender_full_name": "simulacrum",
        "timestamp": 1585749528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> meeting sound good for final decision ^^?</p>",
        "id": 192531596,
        "sender_full_name": "eddyb",
        "timestamp": 1585749551
    },
    {
        "content": "<p>Heh, glad to see the question raised.</p>",
        "id": 192531909,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585749657
    },
    {
        "content": "<p>FCP for infra or compiler team?</p>",
        "id": 192531930,
        "sender_full_name": "centril",
        "timestamp": 1585749664
    },
    {
        "content": "<p>I felt like there should be some \"decision point\" here as well.</p>",
        "id": 192531962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585749675
    },
    {
        "content": "<p>definitely compiler, infra has no stake in this IMO.</p>",
        "id": 192532251,
        "sender_full_name": "simulacrum",
        "timestamp": 1585749787
    },
    {
        "content": "<p>I was going to say, I think it seems more compiler, and maybe dev-tools, but I am wondering a bit just what we're FCP'ing -- I think it is something like</p>\n<ul>\n<li>use of git subtree</li>\n<li>policy around updating tools -- we're going to keep them building, but maybe not testing</li>\n<li>some kind of plan for sync'ing?</li>\n</ul>",
        "id": 192532563,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585749852
    },
    {
        "content": "<p>As long as all the infra works out for rollups and whatnot then T-release should have no issues too</p>",
        "id": 192532574,
        "sender_full_name": "centril",
        "timestamp": 1585749856
    },
    {
        "content": "<p>At minimum the dev-tools folks should be <em>pinged</em> :)</p>",
        "id": 192532603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585749871
    },
    {
        "content": "<p>since it seems like this effects their workflows?</p>",
        "id": 192532628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585749879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well Oliver and Manish, et. al are involved</p>",
        "id": 192532679,
        "sender_full_name": "centril",
        "timestamp": 1585749897
    },
    {
        "content": "<p>so that's the Clippy folks</p>",
        "id": 192532697,
        "sender_full_name": "centril",
        "timestamp": 1585749904
    },
    {
        "content": "<p>we want to test this with clippy, and clippy ppl know about it</p>",
        "id": 192532814,
        "sender_full_name": "oli",
        "timestamp": 1585749960
    },
    {
        "content": "<p>if the test is successfull, we try to convince other dev tools that this is cool and they should do it, too</p>",
        "id": 192532888,
        "sender_full_name": "oli",
        "timestamp": 1585749980
    },
    {
        "content": "<p>can't wait to stop having nightlies missing tools</p>",
        "id": 192532919,
        "sender_full_name": "eddyb",
        "timestamp": 1585749999
    },
    {
        "content": "<p>I want some time though for this to sink in before we move on to <del>Clippy</del> Miri</p>",
        "id": 192532927,
        "sender_full_name": "centril",
        "timestamp": 1585750002
    },
    {
        "content": "<p>to make sure the bors queue and stuff is running smoothly</p>",
        "id": 192532959,
        "sender_full_name": "centril",
        "timestamp": 1585750016
    },
    {
        "content": "<p>the status quo makes it really hard to <code>rustup update</code> without setting a bunch of nightly dates in various places</p>",
        "id": 192532988,
        "sender_full_name": "eddyb",
        "timestamp": 1585750024
    },
    {
        "content": "<p>ok, seems good, I say we FCP w/ t-compiler -- as much to make people aware as anything -- and we can bring other tools in as we go by pinging the folks involved in each tool</p>",
        "id": 192533270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585750150
    },
    {
        "content": "<p>we want to do it on the issue, right?</p>",
        "id": 192533314,
        "sender_full_name": "eddyb",
        "timestamp": 1585750171
    },
    {
        "content": "<p>because the PR has 8000 commits on it :P</p>",
        "id": 192533335,
        "sender_full_name": "eddyb",
        "timestamp": 1585750181
    },
    {
        "content": "<p>there's a PR that updates the docs</p>",
        "id": 192533386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585750196
    },
    {
        "content": "<p>that is relatively short</p>",
        "id": 192533397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585750200
    },
    {
        "content": "<p>ah good, right</p>",
        "id": 192533440,
        "sender_full_name": "eddyb",
        "timestamp": 1585750203
    },
    {
        "content": "<p>and I think hopefully clarifies what's happening</p>",
        "id": 192533455,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585750206
    },
    {
        "content": "<p>I think the docs PR might want some tweaks though</p>",
        "id": 192533488,
        "sender_full_name": "centril",
        "timestamp": 1585750219
    },
    {
        "content": "<p>for the text and stuff</p>",
        "id": 192533499,
        "sender_full_name": "centril",
        "timestamp": 1585750222
    },
    {
        "content": "<p>anyway I don't care that much where we fcp but the docs PR or issue seems fine, we should certainly point at the docs either way</p>",
        "id": 192533554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585750247
    },
    {
        "content": "<p>and if they don't clarify what's going on, seems like a bug in the docs :)</p>",
        "id": 192533575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585750255
    }
]