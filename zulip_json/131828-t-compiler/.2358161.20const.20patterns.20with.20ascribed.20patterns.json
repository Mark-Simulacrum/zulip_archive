[
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></p>",
        "id": 157726143,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487201
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 157726160,
        "sender_full_name": "davidtwco",
        "timestamp": 1549487219
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> had a comment on your PR</p>",
        "id": 157726208,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487269
    },
    {
        "content": "<blockquote>\n<p>We still need them to check something like <code>Type&lt;'a&gt;::X</code> when we have <code>impl Type&lt;'static&gt; { const X: i32 = 0; ... }</code></p>\n</blockquote>",
        "id": 157726211,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487275
    },
    {
        "content": "<p>so you'll need to fix that</p>",
        "id": 157726274,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487295
    },
    {
        "content": "<p>and also add a test for it</p>",
        "id": 157726278,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487300
    },
    {
        "content": "<p>let me come up with one</p>",
        "id": 157726368,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487397
    },
    {
        "content": "<p>I understood his comment as explaining why we would have a <code>AscribeUserType</code> pattern in this context, not that we'd need to check it here.</p>\n<p>ie. I could see a scenario where your initial comment could be interpreted as a \"should we even have \"<code>AscribeUserType</code> patterns in this case?\", and then he clarified it was used for checking well-formedness, and that was why we should have it - but not necessarily that we should be checking it here. </p>\n<p>Perhaps I'm misunderstanding, but the checking he describes was <a href=\"https://github.com/rust-lang/rust/issues/55511\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55511\">#55511</a>, fixed in <a href=\"https://github.com/rust-lang/rust/issues/55937\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55937\">#55937</a>, which introduced this bug?</p>",
        "id": 157726533,
        "sender_full_name": "davidtwco",
        "timestamp": 1549487508
    },
    {
        "content": "<p>I may have misinterpreted it though.</p>",
        "id": 157726573,
        "sender_full_name": "davidtwco",
        "timestamp": 1549487523
    },
    {
        "content": "<p>so this function is not used in MIR typeck?</p>",
        "id": 157726674,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487598
    },
    {
        "content": "<p>I think it is</p>",
        "id": 157726687,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487616
    },
    {
        "content": "<p>This function is part of lowering to the MIR.</p>",
        "id": 157726689,
        "sender_full_name": "davidtwco",
        "timestamp": 1549487618
    },
    {
        "content": "<p>yea</p>",
        "id": 157726734,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487645
    },
    {
        "content": "<p>so I think this can't actually be relevant</p>",
        "id": 157726754,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487652
    },
    {
        "content": "<p>or is it?</p>",
        "id": 157726770,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487678
    },
    {
        "content": "<p>the problem is that <em>in theory</em> a range can contain regions</p>",
        "id": 157726778,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487686
    },
    {
        "content": "<p>if it is some sort of <code>&lt;Foo&lt;'a&gt; as Type&gt;::Assoc</code></p>",
        "id": 157726790,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487698
    },
    {
        "content": "<p>and in that case, you want the MIR to contain a usertypeascribe thingy</p>",
        "id": 157726813,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487713
    },
    {
        "content": "<p>which will generate the region error</p>",
        "id": 157726823,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487725
    },
    {
        "content": "<p>right?</p>",
        "id": 157726833,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487732
    },
    {
        "content": "<p>I guess maybe we could lower it to a equivalent of <code>AscribeUserType</code> that contains a <code>Constant</code> rather than just bypassing it here.</p>",
        "id": 157726836,
        "sender_full_name": "davidtwco",
        "timestamp": 1549487733
    },
    {
        "content": "<p>I would expect so, yes, I'm just unsure if this pattern is also used elsewhere to that effect.</p>",
        "id": 157726905,
        "sender_full_name": "davidtwco",
        "timestamp": 1549487766
    },
    {
        "content": "<p>yea, to a <code>AscribeUserType(PatternKind::Whatever)</code></p>",
        "id": 157726919,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487775
    },
    {
        "content": "<p>so the main q. is whether you can have a test that witnesses this</p>",
        "id": 157726936,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487795
    },
    {
        "content": "<p>maybe a MIR output test?</p>",
        "id": 157726947,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487803
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/issue-55511.nll.stderr\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/test/ui/issue-55511.nll.stderr\">https://github.com/rust-lang/rust/blob/master/src/test/ui/issue-55511.nll.stderr</a></p>",
        "id": 157726948,
        "sender_full_name": "davidtwco",
        "timestamp": 1549487805
    },
    {
        "content": "<p>Is that what you are describing?</p>",
        "id": 157726956,
        "sender_full_name": "davidtwco",
        "timestamp": 1549487811
    },
    {
        "content": "<p>If so, the test already exists and I did in fact implement that check in <a href=\"https://github.com/rust-lang/rust/issues/55937\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55937\">#55937</a> - that just happened to also lead to this pattern appearing in this PR's function and that wasn't handled at the time. I think.</p>",
        "id": 157727010,
        "sender_full_name": "davidtwco",
        "timestamp": 1549487864
    },
    {
        "content": "<p>maybe it just never does anything with the AscribeUserType?</p>",
        "id": 157727169,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487971
    },
    {
        "content": "<p>but that test is not for ranges</p>",
        "id": 157727180,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549487986
    },
    {
        "content": "<p>I see.</p>",
        "id": 157727185,
        "sender_full_name": "davidtwco",
        "timestamp": 1549487994
    },
    {
        "content": "<p>you'll need to craft a similar test for ranges</p>",
        "id": 157727259,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488023
    },
    {
        "content": "<p>maybe just test that the relevant AscribeUserType is present?</p>",
        "id": 157727358,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488118
    },
    {
        "content": "<blockquote>\n<p>maybe just test that the relevant AscribeUserType is present?</p>\n</blockquote>\n<p>I'm not quite sure what you mean by this.</p>",
        "id": 157727474,
        "sender_full_name": "davidtwco",
        "timestamp": 1549488199
    },
    {
        "content": "<p>do a MIR test</p>",
        "id": 157727608,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488308
    },
    {
        "content": "<p>Oh, I see.</p>",
        "id": 157727623,
        "sender_full_name": "davidtwco",
        "timestamp": 1549488320
    },
    {
        "content": "<p>because this feels hard to do in a UI test</p>",
        "id": 157727671,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488356
    },
    {
        "content": "<p>because you sort of can't have lifetimes in patterns</p>",
        "id": 157727728,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488377
    },
    {
        "content": "<p>*in range patterns</p>",
        "id": 157727732,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488380
    },
    {
        "content": "<p>right?</p>",
        "id": 157728032,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488619
    },
    {
        "content": "<p>I think so. I'm just trying to work out, if we should be preserving the <code>AscribeUserType</code> in the range pattern we create, what that would look like. Since the changes we're making here are the lowering to the HAIR - so both before and after this PR, there's not a way to really inspect the pattern we select in the MIR (unless we know what form it ends up as).</p>",
        "id": 157728179,
        "sender_full_name": "davidtwco",
        "timestamp": 1549488733
    },
    {
        "content": "<p>you can do a mir-opt test</p>",
        "id": 157728234,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488787
    },
    {
        "content": "<p>I think, at least</p>",
        "id": 157728237,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488789
    },
    {
        "content": "<p>you could hardcode the form it ends up being</p>",
        "id": 157728243,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488798
    },
    {
        "content": "<p>Yeah, I know to use a mir-opt test. I just not too sure what I'm looking for yet.</p>",
        "id": 157728273,
        "sender_full_name": "davidtwco",
        "timestamp": 1549488831
    },
    {
        "content": "<p>or just check that there is an AscribeUserType in the MIR<br>\nalong with the right<br>\n| 0: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0/0:4 ~ ex[8787]::Foo[0]::ZERO[0]), UserSubsts { substs: [A], user_self_ty: None }) } at ex.rs:11:9: 11:16</p>",
        "id": 157728284,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488841
    },
    {
        "content": "<p>or equivalent of that line</p>",
        "id": 157728328,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488846
    },
    {
        "content": "<p>so use <code>-Z mir-dump=all</code> to see what it generates</p>",
        "id": 157728335,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488859
    },
    {
        "content": "<p>eyeball that it is correct, and copy that</p>",
        "id": 157728341,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488865
    },
    {
        "content": "<p>Right, check that it is still in the map so it is well-formedness checked.</p>",
        "id": 157728345,
        "sender_full_name": "davidtwco",
        "timestamp": 1549488868
    },
    {
        "content": "<p>I would have a test of the form</p>\n<div class=\"codehilite\"><pre><span></span> | 0: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0/0:4 ~ ex[8787]::Foo[0]::ZERO[0]), UserSubsts { substs: [A], user_self_ty: None }) } at ex.rs:11:9: 11:16\n// ...\n        AscribeUserType(_1, -, UserTypeProjection { base: UserTypeAnnotation(1), projs: [] }); // bb8[0]: scope 0 at ex.rs:11:9: 11:16\n</pre></div>",
        "id": 157728377,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488910
    },
    {
        "content": "<p>so I hope the span won't be a problem</p>",
        "id": 157728404,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488943
    },
    {
        "content": "<p>maybe change it to be behind a // in the output</p>",
        "id": 157728411,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488949
    },
    {
        "content": "<p>so that mir-opt will ignore it</p>",
        "id": 157728413,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488955
    },
    {
        "content": "<p>| 0: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0/0:4 ~ ex[8787]::Foo[0]::ZERO[0]), UserSubsts { substs: [A], user_self_ty: None }) } // at ex.rs:11:9: 11:16</p>",
        "id": 157728438,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488963
    },
    {
        "content": "<p>by that, I mean, change the output of the \"dumped MIR\" to contain the comment thingy</p>",
        "id": 157728477,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549488987
    },
    {
        "content": "<p>So, there definitely isn't a <code>AscribeUserType</code> statement or an entry in <code>Mir</code>'s <code>user_type_annotations</code> map.</p>",
        "id": 157728612,
        "sender_full_name": "davidtwco",
        "timestamp": 1549489089
    },
    {
        "content": "<p>there should be</p>",
        "id": 157728624,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549489099
    },
    {
        "content": "<p>that's because you are dropping it</p>",
        "id": 157728634,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549489111
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 157728681,
        "sender_full_name": "davidtwco",
        "timestamp": 1549489155
    },
    {
        "content": "<p>can you fix that?</p>",
        "id": 157728812,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549489268
    },
    {
        "content": "<p>I think so.</p>",
        "id": 157728819,
        "sender_full_name": "davidtwco",
        "timestamp": 1549489278
    },
    {
        "content": "<p>cool</p>",
        "id": 157728923,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549489362
    },
    {
        "content": "<p>Here's a test case that should error (on both functions): <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fe632010ad3dada68e2463919215a829\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fe632010ad3dada68e2463919215a829\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fe632010ad3dada68e2463919215a829</a></p>",
        "id": 157762294,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549531483
    },
    {
        "content": "<p>inherent implementations appear to be unchecked, in an unrelated problem</p>",
        "id": 157762324,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1549531521
    },
    {
        "content": "<p>I can get a fix in for this tonight.</p>",
        "id": 157762821,
        "sender_full_name": "davidtwco",
        "timestamp": 1549531984
    },
    {
        "content": "<p>If desired, can land the PR as is to fix miscompilation but not the well-formed mess check and I can follow up with that fix.</p>",
        "id": 157763313,
        "sender_full_name": "davidtwco",
        "timestamp": 1549532457
    },
    {
        "content": "<p>can you have a single PR?</p>",
        "id": 157765625,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549534910
    },
    {
        "content": "<p>Can do.</p>",
        "id": 157774143,
        "sender_full_name": "davidtwco",
        "timestamp": 1549544076
    },
    {
        "content": "<p>how are you doing?</p>",
        "id": 157820481,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549579830
    },
    {
        "content": "<p>Getting on fine with it, just busy with All Hands things so probably won't get a fix ready until tomorrow or when I'm back home.</p>",
        "id": 157841141,
        "sender_full_name": "davidtwco",
        "timestamp": 1549611157
    },
    {
        "content": "<p>this turns out to be more complicated than we thought, so we'll do the miscompilation fix for beta, and the other change in a separate PR</p>",
        "id": 157855713,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1549629001
    }
]