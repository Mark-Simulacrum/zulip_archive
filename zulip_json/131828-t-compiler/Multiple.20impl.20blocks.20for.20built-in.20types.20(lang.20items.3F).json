[
    {
        "content": "<p>Hello there lang people! We are currently adding a bunch of methods to array directly. A lang item was added and the <code>impl&lt;T, const N: usize&gt; [T; N]</code> impl block was annotated with <code>#[lang = \"array\"]</code>. </p>\n<p>However, we would like to add different impl blocks, for example <code>impl&lt;T, const N: usize&gt; [&amp;T; N] where T: Copy</code> in order to add a <code>copied</code> method. How would we best do that? We couuuld add a lang item for each impl block, but that seems annoying and wrong somehow (we might want 5 or more additional impl blocks). </p>\n<p>I already asked <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span>  about this and they said that an attribute like <code>#[rustc_primitive_impl]</code> might be the best way forward. But they were not sure and mentioned <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  as people who would know about this. I unfortunately hardly know anything about that part of the compiler, so if someone could help out, that would be great :)</p>",
        "id": 208789609,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1599032624
    },
    {
        "content": "<p>Personally I'd consider this a libs-impl question, not a lang one -- the perma-unstable attributes that can be used for such things aren't part of the language specification, IMHO.  (If a different implementation wanted to do them as pure compiler magic, or just disabled coherence entirely in core, or ... that would I think still be a compliant implementation of the hypothetical spec.)</p>\n<p>I don't really know about that part of the compiler either.  I just figure the answer probably isn't to allow lang items on multiple things, since most of the code consuming them wouldn't want to have to deal with that.  A new <code>rustc_*</code> attribute sounds completely reasonable.</p>",
        "id": 208791945,
        "sender_full_name": "scottmcm",
        "timestamp": 1599034268
    },
    {
        "content": "<p>Oh dang, yeah opening this topic in <code>t-lang</code> was a mistake :/ I think I meant to put it into <code>t-compiler</code> as there are likely many people who know about the relevant compiler parts. Can I/we move a topic?</p>",
        "id": 208804398,
        "sender_full_name": "Lukas Kalbertodt",
        "timestamp": 1599042714
    },
    {
        "content": "<p>Only mods can move between streams.</p>",
        "id": 208804493,
        "sender_full_name": "bjorn3",
        "timestamp": 1599042760
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"213817\" href=\"/#narrow/stream/213817-t-lang/topic/Multiple.20impl.20blocks.20for.20built-in.20types.20.28lang.20items.3F.29\">#t-lang &gt; Multiple impl blocks for built-in types (lang items?)</a> by <span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span></p>",
        "id": 208807249,
        "sender_full_name": "Notification Bot",
        "timestamp": 1599044391
    },
    {
        "content": "<p>Whatever you decide, please remember to update rustdoc ^^<br>\n<a href=\"https://github.com/rust-lang/rust/blob/master/src/librustdoc/clean/types.rs#L1283\">https://github.com/rust-lang/rust/blob/master/src/librustdoc/clean/types.rs#L1283</a></p>",
        "id": 208814262,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599048916
    },
    {
        "content": "<p>It sounds like <code>lang = array</code> was already added? Then the docs for that won't work until rustdoc is updated</p>",
        "id": 208814373,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599048972
    },
    {
        "content": "<p>you can create however many lang items you need, I think , just need to update all the relevant places</p>",
        "id": 208916505,
        "sender_full_name": "eddyb",
        "timestamp": 1599103513
    },
    {
        "content": "<p>a new <code>rustc_*</code> attribute would be a bit tricky as you'd have to update everything relying on the existing lang items - it's not just allowing them in coherence, but <em>finding</em> the impls is also done through the lang items</p>",
        "id": 208916525,
        "sender_full_name": "eddyb",
        "timestamp": 1599103552
    },
    {
        "content": "<p>IIRC we have several lang items for some things where e.g. one of the impls is in <code>alloc</code></p>",
        "id": 208916566,
        "sender_full_name": "eddyb",
        "timestamp": 1599103567
    },
    {
        "content": "<p>yup:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">                </span><span class=\"n\">Str</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">both</span><span class=\"p\">(</span><span class=\"n\">lang_items</span><span class=\"p\">.</span><span class=\"n\">str_impl</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">lang_items</span><span class=\"p\">.</span><span class=\"n\">str_alloc_impl</span><span class=\"p\">()),</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 208916575,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599103587
    },
    {
        "content": "<p>I'm proud of that rustdoc code, it's very clean :) unlike the rest of rustdoc lol</p>",
        "id": 208916585,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599103609
    },
    {
        "content": "<blockquote>\n<p>you can create however many lang items you need, I think , just need to update all the relevant places</p>\n</blockquote>\n<p>yeah, but considering that we want impls for at least <code>[u8; N]</code>, <code>[T; N]</code> , <code>[&amp;T; N]</code> and <code>[&amp;mut T; N]</code> which will potentially be split between core and alloc I kind of feel like adding that many lang items seems quite unfortunate so imo it might be a better to merge all of this using a single attribute</p>",
        "id": 208935488,
        "sender_full_name": "lcnr",
        "timestamp": 1599121842
    },
    {
        "content": "<p>I don't think there's any reason to not have multiple lang items personally - we can even just have opaque numbered names for them or something</p>",
        "id": 208958552,
        "sender_full_name": "simulacrum",
        "timestamp": 1599136036
    },
    {
        "content": "<p>Can we allow multiple instances of a given lang-item impl in the same crate? Just as you can have many impls of a type you own...</p>",
        "id": 208977531,
        "sender_full_name": "cuviper",
        "timestamp": 1599144026
    },
    {
        "content": "<blockquote>\n<p>Can we allow multiple instances of a given lang-item impl in the same crate? Just as you can have many impls of a type you own...</p>\n</blockquote>\n<p>I don't think so, we currently have a 1 to 1 correspondence between lang items and <code>DefId</code>s</p>",
        "id": 208978225,
        "sender_full_name": "lcnr",
        "timestamp": 1599144314
    },
    {
        "content": "<p>but is that fundamentally 1:1, or something that could change?</p>",
        "id": 208990728,
        "sender_full_name": "cuviper",
        "timestamp": 1599149156
    },
    {
        "content": "<p>I personally think that this is fairly fundamental, or at least I don't think changing this is worth it, which is why I would instead like to use an attribute for this</p>",
        "id": 208991040,
        "sender_full_name": "lcnr",
        "timestamp": 1599149280
    },
    {
        "content": "<p>which can easily be applied to multiple items</p>",
        "id": 208991125,
        "sender_full_name": "lcnr",
        "timestamp": 1599149306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> multiple instances isn't  more useful than a special attribute. both have the same problems</p>",
        "id": 209013495,
        "sender_full_name": "eddyb",
        "timestamp": 1599159296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> the problem with primitive types is they don't have definitions like \"types you own\", so there's nothing to attach <code>impl</code>s to. lang items enforce \"at most 1 in the entire crate graph\" so they serve as an approximation</p>",
        "id": 209013999,
        "sender_full_name": "eddyb",
        "timestamp": 1599159533
    },
    {
        "content": "<p>note that if we do <code>struct str([u8]);</code> that solves the problem for that type. sadly, not really applicable to structural primitives like arrays</p>",
        "id": 209014061,
        "sender_full_name": "eddyb",
        "timestamp": 1599159570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> there <em>is</em> one possibility that I don't think was taken seriously, heh. using <code>#[lang_item = ...]</code> on a module/crate, and looking up primitive impls in that crate</p>",
        "id": 209014437,
        "sender_full_name": "eddyb",
        "timestamp": 1599159716
    },
    {
        "content": "<p>then we'd just have a <code>core</code> and an <code>alloc</code> special-case</p>",
        "id": 209014554,
        "sender_full_name": "eddyb",
        "timestamp": 1599159768
    },
    {
        "content": "<p>tying to the module/crate sounds like a nice trade-off</p>",
        "id": 209014633,
        "sender_full_name": "cuviper",
        "timestamp": 1599159797
    },
    {
        "content": "<p>it's already what the lang items for primitives impl already do, just in a roundabout way</p>",
        "id": 209014753,
        "sender_full_name": "eddyb",
        "timestamp": 1599159851
    },
    {
        "content": "<p>it still doesn't solve the problem of tracking those impls, so they'd have to just be per-crate \"primitive inherent impls\" and work a bit like the attribute (but easier to get the full list of them)</p>",
        "id": 209014855,
        "sender_full_name": "eddyb",
        "timestamp": 1599159904
    },
    {
        "content": "<blockquote>\n<p>(but easier to get the full list of them)</p>\n</blockquote>\n<p>yes please!</p>",
        "id": 209024730,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599164585
    },
    {
        "content": "<p>Possibly-related <a href=\"https://github.com/rust-lang/rust/pull/76311\">https://github.com/rust-lang/rust/pull/76311</a> mentions that <code>#[lang = \"slice\"]</code> is _itself_ over the tidy limit, so having multiple inherent impl blocks for primatives may be useful even when where different bounds are unneeded.</p>",
        "id": 209145378,
        "sender_full_name": "scottmcm",
        "timestamp": 1599257260
    }
]