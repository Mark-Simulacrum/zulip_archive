[
    {
        "content": "<p>Heyyy :)</p>\n<p>I wanted to try and fix this ICE <a href=\"https://github.com/rust-lang/rust/issues/88536\">https://github.com/rust-lang/rust/issues/88536</a> but I'm not sure where to start. I looked up the function that's panicking but I'm not sure what to do next :p</p>\n<p>Any hints?</p>\n<p>Thank you</p>\n<p>EDIT: from what I saw <code>typeck_results</code> cannot be called outside \"bodies\" (I suppose function/constant bodies). From what I saw this only happens if you create an alias type with a \"complex\" enough constant expression. So I assume that for some constant expressions inside type aliases, calling <code>typeck_results</code> is being considered outside even though it is being called inside the constant expr or smth.</p>",
        "id": 262475371,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1637683258
    },
    {
        "content": "<p>this is the last line in the backtrace before the panic machinery:</p>\n<div class=\"codehilite\"><pre><span></span><code>  17:     0x7f88ee5317bb - &lt;rustc_save_analysis::dump_visitor::DumpVisitor as rustc_hir::intravisit::Visitor&gt;::visit_expr::hf0cde4eb365a62ee\n</code></pre></div>\n<p>So I suspect you need to change the <code>visit_expr</code> implementation to check whether the expression is part of a constant/static or a function body.</p>",
        "id": 262476319,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637683679
    },
    {
        "content": "<p>save-analysis doesn't have a ton of maintainers so I'm not sure what the proper behavior is when it's in a constant. <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> might have suggestions, they maintain RLS which uses save-analysis.</p>",
        "id": 262476732,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637683835
    },
    {
        "content": "<p>Yeah, I was about to say: it's probably not defined what the behavior is for consts</p>",
        "id": 262476836,
        "sender_full_name": "Jack Huey",
        "timestamp": 1637683886
    },
    {
        "content": "<p>What I find weird is that using the same const expr outside aliases is perfectly fine:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"o\">..=</span><span class=\"mh\">0x45</span><span class=\"p\">).</span><span class=\"n\">end</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// This causes the ICE</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"o\">..=</span><span class=\"mh\">0x45</span><span class=\"p\">).</span><span class=\"n\">end</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// This does not</span>\n</code></pre></div>",
        "id": 262476978,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1637683964
    },
    {
        "content": "<p>are you sure the expression is actually being visited in that constant?</p>",
        "id": 262477111,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637684029
    },
    {
        "content": "<p>(there's probably some logging in that module which you could enable with <code>RUSTC_LOG</code>)</p>",
        "id": 262477203,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637684057
    },
    {
        "content": "<p>Not sure if this is going to answer your question or not. But I added a <code>eprintln!</code> at the top of <code>get_expr_data</code> which is the function calling <code>typeck_results</code> and I can see the <code>(0u8..=0x45).end()</code> expr being printed</p>",
        "id": 262477792,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1637684336
    },
    {
        "content": "<p>in both cases</p>",
        "id": 262477846,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1637684365
    },
    {
        "content": "<p>but the alias one is the only that panics</p>",
        "id": 262477861,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1637684376
    },
    {
        "content": "<p>oh interesting, that does seem a little odd</p>",
        "id": 262478042,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1637684462
    },
    {
        "content": "<p>actually that expr is the only one being printed</p>",
        "id": 262478322,
        "sender_full_name": "Christian Poveda",
        "timestamp": 1637684592
    }
]