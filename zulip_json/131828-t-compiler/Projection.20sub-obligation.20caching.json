[
    {
        "content": "<p>Currently, when we cache the result of a projection , we try to discard as many of the sub-obligations as we can: <a href=\"https://github.com/rust-lang/rust/blob/657bc01888e6297257655585f9c475a0801db6d2/compiler/rustc_trait_selection/src/traits/project.rs#L608\">https://github.com/rust-lang/rust/blob/657bc01888e6297257655585f9c475a0801db6d2/compiler/rustc_trait_selection/src/traits/project.rs#L608</a></p>\n<p>However, this interacts badly with incremental compilation. If one of the sub-obligations ends up evaluating to <code>EvaluatedToOkModuloRegions</code>, then an uncached evaluation of the predicate will also evaluate to <code>EvaluatedToOkModuloRegions</code>. If that sub-obligation gets thrown away when the projection result is cached, subsequent evaluations involving that projection can evaluate to <code>EvaluateToOk</code>. Since the cache is not saved across compilation sessions, the next compilation session will perform an uncached evaluation of that projection, resulting in <code>EvalutedToOkModuloRegions</code></p>\n<p>The simplest solution would be always cache all sub-obligations, and never discard any subobligations. I attempted this in <a href=\"https://github.com/rust-lang/rust/pull/85868\">https://github.com/rust-lang/rust/pull/85868</a> ,but there were some significant perf regressions. Does anyone have any ideas for a way to perform caching here that's compatible with incremental compilation?</p>\n<p>cc <span class=\"user-group-mention\" data-user-group-id=\"3282\">@wg-incr-comp</span></p>",
        "id": 240880261,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622505149
    },
    {
        "content": "<p>Unfortunately, we can't know in advance if a particular sub-obligation will lead to <code>EvalutedToOkModuloRegion</code></p>",
        "id": 240880368,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622505349
    },
    {
        "content": "<p>as there could be a lifetime-related predicate that occurs at an arbitrary depth</p>",
        "id": 240880400,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622505363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> might have an idea who would know about this kind of thing</p>",
        "id": 240929536,
        "sender_full_name": "mw",
        "timestamp": 1622548211
    },
    {
        "content": "<p>We should discuss this in <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a></p>",
        "id": 241147158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640030
    },
    {
        "content": "<p>There is a pending PR to remove that logic altogether</p>",
        "id": 241147173,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1622640036
    }
]