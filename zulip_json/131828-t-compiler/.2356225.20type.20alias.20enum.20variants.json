[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> continuing from privmsg...</p>\n<p>...is this the sort of \"heart\" of your PR?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gi\">+        debug!(&quot;resolve_ufcs: method_name={:?} self_ty={:?} expr_id={:?}&quot;,</span>\n<span class=\"gi\">+            method_name,</span>\n<span class=\"gi\">+            self_ty,</span>\n<span class=\"gi\">+            expr_id</span>\n<span class=\"gi\">+        );</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        let tcx = self.tcx;</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+        // Check if we have an enum variant here.</span>\n<span class=\"gi\">+        if let ty::Adt(adt_def, _) = self_ty.sty {</span>\n<span class=\"gi\">+            if adt_def.is_enum() {</span>\n<span class=\"gi\">+                let variant_def = adt_def.variants.iter().find(|vd| {</span>\n<span class=\"gi\">+                    tcx.hygienic_eq(method_name, vd.ident, adt_def.did)</span>\n<span class=\"gi\">+                });</span>\n<span class=\"gi\">+                if let Some(variant_def) = variant_def {</span>\n<span class=\"gi\">+                    check_type_alias_enum_variants_enabled(tcx, span);</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+                    let def = Def::VariantCtor(variant_def.did, variant_def.ctor_kind);</span>\n<span class=\"gi\">+                    tcx.check_stability(def.def_id(), Some(expr_id), span);</span>\n<span class=\"gi\">+                    return Ok(def);</span>\n<span class=\"gi\">+                }</span>\n<span class=\"gi\">+            }</span>\n<span class=\"gi\">+        }</span>\n</pre></div>\n\n\n<p>(i've been skimming the diff, trying to figure out what changed here=)</p>",
        "id": 152206546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545247817
    },
    {
        "content": "<p>I'm not really sure I guess what this <code>CtorKind::Fictive</code> thing is</p>",
        "id": 152206606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545247888
    },
    {
        "content": "<p>maybe that's pre-existing</p>",
        "id": 152206613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545247894
    },
    {
        "content": "<p>I'm specifically wondering about the purpose of this diff</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gd\">-            hir::ExprKind::Path(ref qpath) =&gt; {</span>\n<span class=\"gi\">+            ExprKind::Path(ref qpath) =&gt; {</span>\n                 let (def, opt_ty, segs) = self.resolve_ty_and_def_ufcs(qpath, expr.id, expr.span);\n<span class=\"gd\">-                let ty = if def != Def::Err {</span>\n<span class=\"gd\">-                    self.instantiate_value_path(segs, opt_ty, def, expr.span, id).0</span>\n<span class=\"gd\">-                } else {</span>\n<span class=\"gd\">-                    self.set_tainted_by_errors();</span>\n<span class=\"gd\">-                    tcx.types.err</span>\n<span class=\"gi\">+                let ty = match def {</span>\n<span class=\"gi\">+                    Def::Err =&gt; {</span>\n<span class=\"gi\">+                        self.set_tainted_by_errors();</span>\n<span class=\"gi\">+                        tcx.types.err</span>\n<span class=\"gi\">+                    }</span>\n<span class=\"gi\">+                    Def::VariantCtor(_, CtorKind::Fictive) =&gt; {</span>\n<span class=\"gi\">+                        report_unexpected_variant_def(tcx, &amp;def, expr.span, qpath);</span>\n<span class=\"gi\">+                        tcx.types.err</span>\n<span class=\"gi\">+                    }</span>\n<span class=\"gi\">+                    _ =&gt; self.instantiate_value_path(segs, opt_ty, def, expr.span, id).0,</span>\n                 };\n</pre></div>",
        "id": 152206626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545247909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> kind of. that, <code>associated_path_def_to_ty</code>, <code>def_to_ty</code>, and <code>instantiate_value_path</code></p>",
        "id": 152207208,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545248417
    },
    {
        "content": "<p>ah, that's needed to avoid an ICE... I forget which one</p>",
        "id": 152207234,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545248462
    },
    {
        "content": "<p>but you can infer it from the error message it reports</p>",
        "id": 152207249,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545248476
    },
    {
        "content": "<p>anyway even without that diff, the two issues I mentioned to you still occur</p>",
        "id": 152207254,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545248490
    },
    {
        "content": "<p>Hope that makes sense anyway...</p>",
        "id": 152207578,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545248849
    },
    {
        "content": "<p>both issues could possibly be related to inference, in fact. The problem with <code>Self</code> is that the type parameter in the <code>Self</code> alias is being treated as inferrable, when it shouldn't be.</p>",
        "id": 152207779,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545249014
    },
    {
        "content": "<p>and conversely in the <code>Alias</code> case, it's not being treated as inferrable, I think!</p>",
        "id": 152207793,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545249032
    },
    {
        "content": "<p>ok well I didn't quite figure out the problem before I ran out of time but I'm still poking at it a bit amongst other things</p>",
        "id": 152208395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545249538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry, didn't see your reply here. the UX for Zulip on mobile is even worse than the desktop one :-P</p>",
        "id": 152212700,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545253122
    },
    {
        "content": "<p>no worries, I'll try to come back to it, I'm kind of mulling what I think about modifying that code for method search in any case</p>",
        "id": 152212964,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545253390
    },
    {
        "content": "<p>mhm</p>",
        "id": 152213059,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545253484
    },
    {
        "content": "<p>I have a suspicion it could be that the infctxt it's scoped correctly or something like that...</p>",
        "id": 152213090,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545253516
    },
    {
        "content": "<p>did you get the build working at least?</p>",
        "id": 152216778,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545257120
    },
    {
        "content": "<p>yes</p>",
        "id": 152217308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545257729
    },
    {
        "content": "<p>ah good</p>",
        "id": 152218024,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545258402
    },
    {
        "content": "<p>I'm still inclined to think it's an issue with inference rather than the code I've touched</p>",
        "id": 152218118,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545258493
    },
    {
        "content": "<p>but far from sure.</p>",
        "id": 152218120,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545258496
    },
    {
        "content": "<p>aha, <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> has replied with an idea.</p>",
        "id": 152218373,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545258784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> BTW this is basically fixed now. only issue is I'm getting an ICE <em>after</em> a normal error due to trying to infer generic args where they're already prohibited. not sure the best way to fix this.</p>",
        "id": 152264075,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1545320126
    },
    {
        "content": "<p>ah, cool</p>",
        "id": 152264249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545320272
    }
]