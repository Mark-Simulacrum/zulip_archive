[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> I was thinking... <code>--keep-stage 1</code> is an amazing time saver, but if you change the definition of things that wind up in metadata (or the metadata code itself) then things go haywire...</p>",
        "id": 135539759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539177093
    },
    {
        "content": "<p>but it seems <em>plausible</em> to me that we could hash the definitions of all types that may wind up in metadata</p>",
        "id": 135539773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539177113
    },
    {
        "content": "<p>I guess I'm thinking: it's plausible that we could make a variant of <code>--keep-stage 1</code> that's \"always on\" and approximates when it can be safely used. <em>Well</em>, always-on isn't right of course, but you could make it a <em>lot</em> safer</p>",
        "id": 135539838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539177163
    },
    {
        "content": "<p>I guess if you modified (e.g.) the type checker, you would always be foregoing the check to see that libstd and friends still type-check with your new code</p>",
        "id": 135539849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539177183
    },
    {
        "content": "<p>(which in turn might affect — if not the <em>structure</em> of metadata — then its contents)</p>",
        "id": 135539871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539177206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you mean <code>--keep-stage 0</code> right? <code>--keep-stage 1</code> will NOT keep stage 0. I have not yet found a case where keeping stage 1 is useful, but your workflow may differ?</p>",
        "id": 135961402,
        "sender_full_name": "RalfJ",
        "timestamp": 1539769926
    },
    {
        "content": "<p>We have <em>got</em> to fix the <a href=\"https://rust-lang-nursery.github.io/rustc-guide/how-to-build-and-run.html?highlight=keep#suggested-workflows-for-faster-builds-of-the-compiler\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rustc-guide/how-to-build-and-run.html?highlight=keep#suggested-workflows-for-faster-builds-of-the-compiler\">rustc guide</a></p>",
        "id": 135963058,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539772247
    },
    {
        "content": "<p>I stopped trying to use <code>--keep-stage</code> some time ago because I couldn't understand/predict when it would go wrong</p>",
        "id": 135963079,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539772277
    },
    {
        "content": "<p>and then I recently tried to use <code>--keep-stage 1</code>, based on the rustc guide. And I <em>again</em> cannot understand/predict when it will go wrong. Except perhaps the prediction is \"all the time\" is about right.</p>",
        "id": 135963086,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539772317
    },
    {
        "content": "<p>In any case, any idea that <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and/or <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>  have for making <code>--keep-stage N</code> be more defensive about its behavior gets a big <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span> from me</p>",
        "id": 135963714,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539773098
    },
    {
        "content": "<p>I use <code>--keep-stage 0 --keep-stage 1</code> when I'm modifying unit tests in e.g. <code>librustc_datastructures</code></p>",
        "id": 135963745,
        "sender_full_name": "oli",
        "timestamp": 1539773160
    },
    {
        "content": "<p>So, here's a simple question: Is <code>--keep-stage 0</code> <strong>expected</strong> to fail in weird ways if you use the flag on a clean checkout?</p>",
        "id": 135965047,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539775138
    },
    {
        "content": "<p>In particular, I keep a shell script that I use to drive my builds. Currently it doesn't attempt to keep track whether this is a clean build or if we're building atop a previous build attempt. I had <em>assumed</em> that <code>--keep-stage</code> would fall back on building stuff if the things it needs are not present.</p>",
        "id": 135965130,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539775223
    },
    {
        "content": "<p>I should probably go look at how its actually implemented rather than try to guess the semantics here.</p>",
        "id": 135965338,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539775492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yeah I'd assume <code>--keep-stage</code> to just skip even trying to do any stage 0 build job</p>",
        "id": 135965836,
        "sender_full_name": "RalfJ",
        "timestamp": 1539776205
    },
    {
        "content": "<p>I guess I would prefer if it fell back on building the stuff it needs if the needed files aren't even there in the first place</p>",
        "id": 135965859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539776261
    },
    {
        "content": "<p>potentially with some printouts saying that its doing so</p>",
        "id": 135965900,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539776283
    },
    {
        "content": "<p>so what I usually do when I work on <code>librustc_mir</code> and need to build miri (which needs a stage 2 build): I first do <code>./x.py build src/rustc</code>, once, to get a clean everything; then then subsequent builds are <code>./x.py --keep-stage 0 build src/rustc</code>. That takes around 5min then (I feel it was faster some weeks ago...)</p>",
        "id": 135965904,
        "sender_full_name": "RalfJ",
        "timestamp": 1539776289
    },
    {
        "content": "<p>you do <code>src/rustc</code> instead of <code>src/libstd</code> ?</p>",
        "id": 135965911,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539776308
    },
    {
        "content": "<p>yeah I need a fully working stage 2</p>",
        "id": 135965920,
        "sender_full_name": "RalfJ",
        "timestamp": 1539776325
    },
    {
        "content": "<p>IIRC <code>src/libstd</code> doesnt give me that</p>",
        "id": 135965925,
        "sender_full_name": "RalfJ",
        "timestamp": 1539776332
    },
    {
        "content": "<p>the difference between the two is negligible though with stage 2</p>",
        "id": 135965935,
        "sender_full_name": "RalfJ",
        "timestamp": 1539776345
    },
    {
        "content": "<p>it just copies some more stuff around</p>",
        "id": 135965939,
        "sender_full_name": "RalfJ",
        "timestamp": 1539776350
    },
    {
        "content": "<p>oh sorry I overlooked that part of your message</p>",
        "id": 135965940,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539776352
    },
    {
        "content": "<p>(\"fully working\" = including proc macros)</p>",
        "id": 135965942,
        "sender_full_name": "RalfJ",
        "timestamp": 1539776358
    },
    {
        "content": "<p>if it wasn't for that I'd just always do <code>./x.py --stage 1 build src/libstd</code> and would never even need <code>--keep-stage</code></p>",
        "id": 135965957,
        "sender_full_name": "RalfJ",
        "timestamp": 1539776379
    },
    {
        "content": "<p>I never use <code>--keep-stage 0</code></p>",
        "id": 135971239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781619
    },
    {
        "content": "<p>I have no idae what it does</p>",
        "id": 135971251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781625
    },
    {
        "content": "<p>I use only <code>--keep-stage 1</code>, which I understand :)</p>",
        "id": 135971256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781631
    },
    {
        "content": "<p>so, no, I did not mean <code>--keep-stage 0</code></p>",
        "id": 135971258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781637
    },
    {
        "content": "<p>The instructions in the rustc-guide match precisely what I do, but I'm open to there being a better set of things to do :)</p>",
        "id": 135971274,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781665
    },
    {
        "content": "<p>in particular, I build with <code>--keep-stage 1</code> but only after I've already got a succesful build lying around ...</p>",
        "id": 135971322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781684
    },
    {
        "content": "<blockquote>\n<p>and then I recently tried to use <code>--keep-stage 1</code>, based on the rustc guide. And I <em>again</em> cannot understand/predict when it will go wrong. Except perhaps the prediction is \"all the time\" is about right.</p>\n</blockquote>\n<p>interesting <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> . I do not find this at all. It basically goes wrong if I have rebased or something, but if I've just made a small edit to some fn, it is generally fine. (And if things \"seem fishy\", then I just try removing it.)</p>\n<p>Interestingly, this aligns basically perfectly with my experiences with makefiles in the past. That is, makefiles never truly capture <em>all</em> the dependencies, so it's usually \"hmm something is weird, better make clean\". :P</p>",
        "id": 135971398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781773
    },
    {
        "content": "<p>but I guess my basic attitude is to \"add\" <code>--keep-stage 1</code> when iterating, not to use it by default</p>",
        "id": 135971448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781803
    },
    {
        "content": "<p>I think the core of my problem was my assumption was that i didn't actually <em>need</em> to start with the base run</p>",
        "id": 135971469,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539781815
    },
    {
        "content": "<p>ah. yes, that would go wrong</p>",
        "id": 135971476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539781825
    },
    {
        "content": "<p>i.e. that <code>--keep-stage 1</code> would be \"smart\"  and build things that are truly not present</p>",
        "id": 135971490,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539781845
    },
    {
        "content": "<p>which is .... well, I won't claim its what <code>make</code> always does. But its what <code>make</code> is <em>supposed</em> to do, given a \"correct\" <code>Makefile</code></p>",
        "id": 135971507,
        "sender_full_name": "pnkfelix",
        "timestamp": 1539781874
    },
    {
        "content": "<blockquote>\n<p>which is .... well, I won't claim its what <code>make</code> always does. But its what <code>make</code> is <em>supposed</em> to do, given a \"correct\" <code>Makefile</code></p>\n</blockquote>\n<p>yes just ime never <em>actually</em> the case :P</p>",
        "id": 135972803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783102
    },
    {
        "content": "<p>or, much like with <code>x.py</code>, if the makefile is correct -- then it is overconservative, and it offers some escape valves, which is exactly what <code>--keep-stage 1</code> is...</p>",
        "id": 135972856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783126
    },
    {
        "content": "<blockquote>\n<p>I use only <code>--keep-stage 1</code>, which I understand :)</p>\n</blockquote>\n<p>funny. I am dead scared of it.^^</p>",
        "id": 135973386,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783696
    },
    {
        "content": "<p>it recompiles stage0 but then does NOT recompile stage1.</p>",
        "id": 135973396,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783709
    },
    {
        "content": "<p>I have no idea what your workflow is like, to make that useful^^</p>",
        "id": 135973493,
        "sender_full_name": "RalfJ",
        "timestamp": 1539783788
    },
    {
        "content": "<p>1. build compiler<br>\n2. add a <code>debug!</code> log<br>\n3. rebuild compiler, but do not rebuild libraries &lt;-- this is where <code>--keep-stage 1</code> makes sense</p>",
        "id": 135973600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783852
    },
    {
        "content": "<p>a variation on (2) is \"modify some part of the compiler that the libraries do not use\"</p>",
        "id": 135973609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539783873
    },
    {
        "content": "<p>so what is your full invocation then?</p>",
        "id": 135973865,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784102
    },
    {
        "content": "<p><code>./x.py build -i --stage 1 src/libstd</code> is my \"base invocation\" 99% of the time</p>",
        "id": 135973925,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539784181
    },
    {
        "content": "<p>I tack on <code>--keep-stage 1</code> if I just made a small alteration</p>",
        "id": 135973931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539784193
    },
    {
        "content": "<p>which of course is <em>actually</em> the vast majority of the time</p>",
        "id": 135973982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539784205
    },
    {
        "content": "<p>so in terms of # of builds I suppose that's the most common thing</p>",
        "id": 135973992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539784217
    },
    {
        "content": "<p>oh so you have <code>--stage 1 --keep-stage 1</code>. that makes some more sense, I get it.</p>",
        "id": 135974091,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784338
    },
    {
        "content": "<p>libstd builds in &lt;60s without <code>-i</code> so I dont usually bother optimizing that</p>",
        "id": 135974105,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784361
    },
    {
        "content": "<p>and for proc macros I need the starts to align or so, haven't found a way to cut that shorter. I guess I could try <code>--keep-stage 0 --keep-stage 2 --stage 2</code>...</p>",
        "id": 135974144,
        "sender_full_name": "RalfJ",
        "timestamp": 1539784416
    }
]