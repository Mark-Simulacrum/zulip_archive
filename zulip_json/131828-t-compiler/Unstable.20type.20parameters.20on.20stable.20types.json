[
    {
        "content": "<p>WG-Allocators would like to have unstable type parameters on stable types, e.g., <code>Box&lt;T, A = alloc::Global&gt;</code> where <code>A</code> is unstable to use. See <a href=\"https://github.com/rust-lang/wg-allocators/issues/2\" target=\"_blank\" title=\"https://github.com/rust-lang/wg-allocators/issues/2\">https://github.com/rust-lang/wg-allocators/issues/2</a></p>\n<p>I think it would already be very helpful for us to know whether this is something that would be feasible for a sufficiently motivated party to implement in the compiler in the near future, or whether right now, given the current implementation, trying to do this would just hit to many issues, be really really hard, etc.</p>",
        "id": 164986837,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557153533
    },
    {
        "content": "<p>Maybe the compiler team could discuss how feasible this would be in their next meeting, and give us a heads up on how feasible they think this would be?</p>",
        "id": 164986996,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557153614
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> (I think it should be easy as long as it's only allowed on <code>struct</code>/<code>enum</code>/<code>union</code> parameters)</p>",
        "id": 164995547,
        "sender_full_name": "eddyb",
        "timestamp": 1557159597
    },
    {
        "content": "<p>I agree, I think this should be relatively straightforward to support</p>",
        "id": 165006774,
        "sender_full_name": "varkor",
        "timestamp": 1557167655
    },
    {
        "content": "<p>Great!! Unless I'm missing something, it's fine to use an \"unstable unstable annotation\" (not wait for a stabilization cycle), so this shouldn't add too much latency.</p>",
        "id": 165074070,
        "sender_full_name": "John Ericson",
        "timestamp": 1557238359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> the intent is to use this in the alloc crate collections and related types (e.g. Box). I think all of them are <code>struct</code>s.</p>",
        "id": 165092748,
        "sender_full_name": "gnzlbg",
        "timestamp": 1557250471
    },
    {
        "content": "<p>please make sure that you have tests for unstable type params and that you take various places a path can be mentioned into account</p>",
        "id": 165096093,
        "sender_full_name": "centril",
        "timestamp": 1557252616
    },
    {
        "content": "<p>possibly also accounting for inference</p>",
        "id": 165096098,
        "sender_full_name": "centril",
        "timestamp": 1557252621
    }
]