[
    {
        "content": "<p>leonardo-m made an interesting point on <a href=\"https://github.com/rust-lang/rust/issues/74373\">#74373</a> (add <code>slice::array_chunks</code> to std).</p>\n<blockquote>\n<p>Could you please add a note here that says that future versions of this are allowed to panic at compile-time if N is 0 instead of run-time?</p>\n</blockquote>",
        "id": 204001667,
        "sender_full_name": "lcnr",
        "timestamp": 1594841414
    },
    {
        "content": "<p>While I fully agree that this is desirable, I can't really see how this is feasible</p>",
        "id": 204002003,
        "sender_full_name": "lcnr",
        "timestamp": 1594841594
    },
    {
        "content": "<p>We could add a comment saying</p>\n<blockquote>\n<p>Note: This method currently panics at runtime if <code>N == 0</code>. This may get changed to error at compile time in the future <strong>without</strong> constituting a breaking change</p>\n</blockquote>",
        "id": 204002197,
        "sender_full_name": "lcnr",
        "timestamp": 1594841690
    },
    {
        "content": "<p>But how can we actually implement this in the future without breaking code like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">do_stuff</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arr</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"n\">array_chunks</span>::<span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">whatever</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204002411,
        "sender_full_name": "lcnr",
        "timestamp": 1594841815
    },
    {
        "content": "<p>We can't really just add a <code>where {N &gt; 0}</code> bound to this function in this case</p>",
        "id": 204002468,
        "sender_full_name": "lcnr",
        "timestamp": 1594841840
    },
    {
        "content": "<p>We might add a compile warning if this method is ever used with <code>N == 0</code>, but I don't think we will ever be able to change this to an error after stabilizing it.</p>",
        "id": 204002641,
        "sender_full_name": "lcnr",
        "timestamp": 1594841924
    },
    {
        "content": "<p>It could presumably be a deny-by-default lint</p>",
        "id": 204002680,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594841957
    },
    {
        "content": "<p>will that work with coherence?</p>",
        "id": 204003078,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594842158
    },
    {
        "content": "<p>you can't turn off overlapping traits</p>",
        "id": 204003101,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594842168
    },
    {
        "content": "<p>what trait?</p>",
        "id": 204003154,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594842199
    },
    {
        "content": "<p><code>where N &gt; 0</code></p>",
        "id": 204003393,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594842353
    },
    {
        "content": "<p>not sure if I'm making sense, sorry</p>",
        "id": 204003451,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594842367
    },
    {
        "content": "<p><code>where {N &gt; 0}</code> isn't a trait but a generic bound.</p>",
        "id": 204003489,
        "sender_full_name": "lcnr",
        "timestamp": 1594842387
    },
    {
        "content": "<p>We don't actually have a syntax for this rn, but think of it similar to <code>where T: Default</code></p>",
        "id": 204003532,
        "sender_full_name": "lcnr",
        "timestamp": 1594842417
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/issues/68436\">https://github.com/rust-lang/rust/issues/68436</a> for some more discussion about this</p>",
        "id": 204003571,
        "sender_full_name": "lcnr",
        "timestamp": 1594842447
    },
    {
        "content": "<p>oh I see, it's entirely different machinery than <code>LengthAtMost32</code></p>",
        "id": 204003586,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594842461
    },
    {
        "content": "<p>ignore me then</p>",
        "id": 204003594,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1594842464
    },
    {
        "content": "<p>It's similar, we could theoretically use negative <code>impl</code>s here, so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"sd\">/// implemented for all `[(); N]` with `N != 0`</span>\n<span class=\"n\">auto</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">NonZero</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">NonZero</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 204003830,
        "sender_full_name": "lcnr",
        "timestamp": 1594842577
    },
    {
        "content": "<p>and <code>fn array_chunks&lt;const N: usize&gt;() -&gt; Ty where [(); N]: NonZero {}</code></p>",
        "id": 204003938,
        "sender_full_name": "lcnr",
        "timestamp": 1594842610
    },
    {
        "content": "<p>So we theoretically could already add this bound rn and rewrite this bound in the future once we have a better story about const wf</p>",
        "id": 204004168,
        "sender_full_name": "lcnr",
        "timestamp": 1594842756
    },
    {
        "content": "<p>hm, cc <span class=\"user-mention\" data-user-id=\"256759\">@boats</span>, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  it's probably desirable to already add this bound to <code>array_chunks</code>.</p>",
        "id": 204005679,
        "sender_full_name": "lcnr",
        "timestamp": 1594843425
    },
    {
        "content": "<p>idk <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I think if we ever get a good concept for const wf bounds having these bounds here is expected and in general a <em>good idea</em></p>",
        "id": 204006421,
        "sender_full_name": "lcnr",
        "timestamp": 1594843773
    },
    {
        "content": "<p>But it will probably prevent calling these methods with generic parameters when the MVP lands on stable. This is hopefully rare though</p>",
        "id": 204006761,
        "sender_full_name": "lcnr",
        "timestamp": 1594843933
    },
    {
        "content": "<p>array_chunks will be unstable anyway so we can punt whether or not we should do that to some time before stabilizing the method</p>",
        "id": 204008282,
        "sender_full_name": "boats",
        "timestamp": 1594844723
    },
    {
        "content": "<p>Well, added a bound for now. Considering that relaxing the bound shouldn't break stuff while adding one can, this seems like it would cause less harm.</p>",
        "id": 204012146,
        "sender_full_name": "lcnr",
        "timestamp": 1594846777
    },
    {
        "content": "<p>Make sure to add that point to the tracking issue :-)</p>",
        "id": 204014083,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594847743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/array_chunks.20of.20size.200/near/204012146\">said</a>:</p>\n<blockquote>\n<p>Well, added a bound for now. Considering that relaxing the bound shouldn't break stuff while adding one can, this seems like it would cause less harm.</p>\n</blockquote>\n<p>Well, removed that bound for now <a href=\"https://github.com/rust-lang/rust/issues/74383\">#74383</a></p>",
        "id": 204018780,
        "sender_full_name": "lcnr",
        "timestamp": 1594850692
    },
    {
        "content": "<p>lol</p>",
        "id": 204026999,
        "sender_full_name": "eddyb",
        "timestamp": 1594856428
    },
    {
        "content": "<p>If we don't want to bubble up bounds we can also use user-defined post-monomorphization errors: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=5d44d3ae6d71021771242b935aac6513\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=5d44d3ae6d71021771242b935aac6513</a></p>",
        "id": 204052978,
        "sender_full_name": "oli",
        "timestamp": 1594884273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> bold plan to try and get me to give up static typing forever</p>",
        "id": 204053206,
        "sender_full_name": "eddyb",
        "timestamp": 1594884488
    },
    {
        "content": "<p>(or alternatively, retreat into formal proof assistant territory)</p>",
        "id": 204053246,
        "sender_full_name": "eddyb",
        "timestamp": 1594884518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> but note that with bubbling, you'd get the error at the point where you're <em>choosing</em> an <code>N == 0</code>, not somewhere else deep down someone else's code or w/e</p>",
        "id": 204053294,
        "sender_full_name": "eddyb",
        "timestamp": 1594884575
    },
    {
        "content": "<p>I think it's a good alternative for where we can't do breaking changes or where users \"just give up\" due to complex bounds</p>",
        "id": 204053312,
        "sender_full_name": "oli",
        "timestamp": 1594884598
    },
    {
        "content": "<p>the plan was never to use bounds though?</p>",
        "id": 204053365,
        "sender_full_name": "eddyb",
        "timestamp": 1594884618
    },
    {
        "content": "<p>at least no practical plan</p>",
        "id": 204053370,
        "sender_full_name": "eddyb",
        "timestamp": 1594884621
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/array_chunks.20of.20size.200/near/204053294\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> but note that with bubbling, you'd get the error at the point where you're <em>choosing</em> an <code>N == 0</code>, not somewhere else deep down someone else's code or w/e</p>\n</blockquote>\n<p>I am working on this, so you at least get a note mentioning one site that caused it</p>",
        "id": 204053372,
        "sender_full_name": "oli",
        "timestamp": 1594884622
    },
    {
        "content": "<p>my plan was always \"repeat the expression somewhere in your public interface so that it's checked at the use site\"</p>",
        "id": 204053419,
        "sender_full_name": "eddyb",
        "timestamp": 1594884663
    },
    {
        "content": "<p>not <code>where N != 0</code></p>",
        "id": 204053427,
        "sender_full_name": "eddyb",
        "timestamp": 1594884670
    },
    {
        "content": "<p>you don't have to tell me not to add a SAT solver dependency :P</p>",
        "id": 204053443,
        "sender_full_name": "eddyb",
        "timestamp": 1594884687
    },
    {
        "content": "<p>which... is the manual version of exposed bodies I guess? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 204053459,
        "sender_full_name": "oli",
        "timestamp": 1594884705
    },
    {
        "content": "<p>but only exposing the fallible things</p>",
        "id": 204053465,
        "sender_full_name": "oli",
        "timestamp": 1594884715
    },
    {
        "content": "<p>I'll have you know that exposed bodies is more responsible than post-monomorphization errors :P</p>",
        "id": 204053514,
        "sender_full_name": "eddyb",
        "timestamp": 1594884734
    },
    {
        "content": "<p>but yeah, the same way you'll have to write <code>?const</code> or w/e soon, I want the interface to express the typesystem requirements</p>",
        "id": 204053555,
        "sender_full_name": "eddyb",
        "timestamp": 1594884768
    },
    {
        "content": "<p>and <code>do_stuff::&lt;0&gt;(b\"foo\");</code> should error in type-check because <code>&lt;[u8; 0]&gt; as NotZero&gt;::MEM</code> doesn't evaluate successfully</p>",
        "id": 204053594,
        "sender_full_name": "eddyb",
        "timestamp": 1594884807
    },
    {
        "content": "<p>you <em>still get</em> the custom errors!</p>",
        "id": 204053600,
        "sender_full_name": "eddyb",
        "timestamp": 1594884815
    },
    {
        "content": "<p>in case that wasn't clear</p>",
        "id": 204053604,
        "sender_full_name": "eddyb",
        "timestamp": 1594884818
    },
    {
        "content": "<p>you just get them in type-checking, and at the point where the problem is introduced</p>",
        "id": 204053656,
        "sender_full_name": "eddyb",
        "timestamp": 1594884849
    },
    {
        "content": "<p>uh... this trait trick works on stable (modulo the custom message and the const generic)</p>",
        "id": 204053666,
        "sender_full_name": "oli",
        "timestamp": 1594884868
    },
    {
        "content": "<p>not like in C++ where there can be a hundred template expansion levels in between</p>",
        "id": 204053670,
        "sender_full_name": "eddyb",
        "timestamp": 1594884870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> yes and  that's fine, the problem is when that associated constant is used <em>in a type</em></p>",
        "id": 204053692,
        "sender_full_name": "eddyb",
        "timestamp": 1594884890
    },
    {
        "content": "<p>right</p>",
        "id": 204053699,
        "sender_full_name": "oli",
        "timestamp": 1594884897
    },
    {
        "content": "<p>I keep forgetting, thx</p>",
        "id": 204053710,
        "sender_full_name": "oli",
        "timestamp": 1594884905
    },
    {
        "content": "<p>I keep repeating myself, you just have to show me this and I'll keep restating it lmao</p>",
        "id": 204053725,
        "sender_full_name": "eddyb",
        "timestamp": 1594884919
    },
    {
        "content": "<p>like I just left a comment a few hours ago on one of the issues</p>",
        "id": 204053739,
        "sender_full_name": "eddyb",
        "timestamp": 1594884935
    },
    {
        "content": "<p><span aria-label=\"laughter tears\" class=\"emoji emoji-1f602\" role=\"img\" title=\"laughter tears\">:laughter_tears:</span></p>",
        "id": 204053741,
        "sender_full_name": "oli",
        "timestamp": 1594884938
    },
    {
        "content": "<p>I haven't caught up on github notifications today</p>",
        "id": 204053751,
        "sender_full_name": "oli",
        "timestamp": 1594884950
    },
    {
        "content": "<p>your example can be a warning + runtime panic</p>",
        "id": 204053799,
        "sender_full_name": "eddyb",
        "timestamp": 1594884966
    },
    {
        "content": "<p>the bad constant is just used at runtime</p>",
        "id": 204053807,
        "sender_full_name": "eddyb",
        "timestamp": 1594884973
    },
    {
        "content": "<p>the problem is when you stop being able to reason about types</p>",
        "id": 204053819,
        "sender_full_name": "eddyb",
        "timestamp": 1594884987
    },
    {
        "content": "<p>we've introduced WF rules for similar things around associated types</p>",
        "id": 204053860,
        "sender_full_name": "eddyb",
        "timestamp": 1594885019
    },
    {
        "content": "<p>where <em>we really want</em> them to hold</p>",
        "id": 204053878,
        "sender_full_name": "eddyb",
        "timestamp": 1594885032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and I haven't even considered any lifetime implications lol</p>",
        "id": 204053887,
        "sender_full_name": "eddyb",
        "timestamp": 1594885048
    },
    {
        "content": "<p>since you can't check lifetime constraints at codegen time. WOW</p>",
        "id": 204053896,
        "sender_full_name": "eddyb",
        "timestamp": 1594885063
    },
    {
        "content": "<p><del>@<strong>oli</strong> thanks, I think I can demolish the argument for post-monomorphization const-eval errors <em>forever</em></del></p>",
        "id": 204053936,
        "sender_full_name": "eddyb",
        "timestamp": 1594885083
    },
    {
        "content": "<p><del>although it might mean that some stuff we do today is arguably unsound</del></p>",
        "id": 204053975,
        "sender_full_name": "eddyb",
        "timestamp": 1594885118
    },
    {
        "content": "<p>why did I forget lifetimes exist lmao</p>",
        "id": 204053983,
        "sender_full_name": "eddyb",
        "timestamp": 1594885128
    },
    {
        "content": "<p>hmm but how can I abuse this, most of the stuff seems to be handled by where clauses already :(</p>",
        "id": 204054110,
        "sender_full_name": "eddyb",
        "timestamp": 1594885230
    },
    {
        "content": "<p>I might still try to look into it, it's suspicious but I may have overreacted</p>",
        "id": 204054289,
        "sender_full_name": "eddyb",
        "timestamp": 1594885408
    }
]