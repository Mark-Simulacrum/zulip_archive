[
    {
        "content": "<p>Hey so <span class=\"user-mention\" data-user-id=\"224872\">@Ryan Levick</span> mentioned to me that PR <a href=\"https://github.com/rust-lang/rust/issues/69718\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69718\">#69718</a> would be really useful for Microsoft folks trying to get Rust building internally. I don't know all the details but I'm keen to enable Microsoft to do more Rust experimentation. </p>\n<p>The PR itself adds a compiler flag (presently a <code>-Z</code> flag, but presumably it would eventually become a <code>-C</code> flag) to include a cryptographic hash of the source  files in debug info. This seems like a pretty useful feature -- I'm assuming it's done in some way that's compatible with various C compilers etc but I don't really know (see thoughts on a quick writeup below...)./</p>\n<p>I meant to nominate this for the meeting for a brief discussion, but let me raise it here. We don't have a very clear process around \"small ad-hoc features\" of this kind, though we often add them with an FCP (I just opened <a href=\"https://github.com/rust-lang/compiler-team/issues/261\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/261\">compiler-team#261</a> to track <a class=\"stream\" data-stream-id=\"185694\" href=\"/#narrow/stream/185694-t-compiler.2Fwg-meta\">#t-compiler/wg-meta</a> with drafting a quick policy here). </p>\n<p>In any case, the general procedure I think we should do -- and in specific what I want to do here -- is:</p>\n<ul>\n<li>encourage OP to do a short write-up of what the flag does, link to some of the relevant docs or context (e.g., LLVM docs, or some references to flags from other compilers that this would be compatible with)</li>\n<li>create a tracking issue, list the PR authors plus anyone else they name as contact people, and of course link to that write-up</li>\n<li>ensure that the PR has user-facing docs for the rustc unstable book and -- if necessary -- encourage rustc-dev-guide entries</li>\n<li>fcp merge to land in an unstable state</li>\n</ul>\n<p>Any thoughts on the abve, particularly with respect to <a href=\"https://github.com/rust-lang/rust/issues/69718\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69718\">#69718</a>?</p>",
        "id": 191131105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584632355
    },
    {
        "content": "<p>( cc <span class=\"user-mention\" data-user-id=\"270929\">@Arlo Siemsen</span>, the PR author )</p>",
        "id": 191131256,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584632406
    },
    {
        "content": "<p>o/</p>",
        "id": 191131890,
        "sender_full_name": "eddyb",
        "timestamp": 1584632684
    },
    {
        "content": "<p>(The PR itself seems fairly small.)</p>",
        "id": 191131893,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584632687
    },
    {
        "content": "<p>I only saw this thread accidentally</p>",
        "id": 191131898,
        "sender_full_name": "eddyb",
        "timestamp": 1584632688
    },
    {
        "content": "<p>please ping me on all debuginfo stuff :P</p>",
        "id": 191131903,
        "sender_full_name": "eddyb",
        "timestamp": 1584632694
    },
    {
        "content": "<p>Sorry! You'd have gotten pinged for the FCP, at least :)</p>",
        "id": 191131985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584632730
    },
    {
        "content": "<p>see <a href=\"https://github.com/rust-lang/rust/issues/68980\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68980\">#68980</a></p>",
        "id": 191132031,
        "sender_full_name": "eddyb",
        "timestamp": 1584632748
    },
    {
        "content": "<p>Questions:</p>\n<ul>\n<li>What would be the story for e.g., Cranelift here? cc <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span></li>\n<li>What does this mean for stability? e.g., if internal changes results in a changed checksum, is that breakage, and if so what does that imply for language evolution? (I haven't read the PR in-depth)</li>\n</ul>",
        "id": 191132194,
        "sender_full_name": "centril",
        "timestamp": 1584632804
    },
    {
        "content": "<p>One question I might have is whether it makes sense to add this as a flag vs. doing it by default -- I can't imagine a SHA256 hash or w/e would actually take that long (on source code), so probably wouldn't add too much to compile times, even.</p>",
        "id": 191132211,
        "sender_full_name": "simulacrum",
        "timestamp": 1584632810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> it's just giving debuggers something we already have</p>",
        "id": 191132259,
        "sender_full_name": "eddyb",
        "timestamp": 1584632835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191132211\" title=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191132211\">said</a>:</p>\n<blockquote>\n<p>One question I might have is whether it makes sense to add this as a flag vs. doing it by default -- I can't imagine a SHA256 hash or w/e would actually take that long (on source code), so probably wouldn't add too much to compile times, even.</p>\n</blockquote>\n<p>Would be good to measure though</p>",
        "id": 191132262,
        "sender_full_name": "centril",
        "timestamp": 1584632835
    },
    {
        "content": "<p>which is the ability to ignore a file if it has changed</p>",
        "id": 191132278,
        "sender_full_name": "eddyb",
        "timestamp": 1584632842
    },
    {
        "content": "<p>we do the same for cross-crate file loading</p>",
        "id": 191132300,
        "sender_full_name": "eddyb",
        "timestamp": 1584632852
    },
    {
        "content": "<p>For cg_clif this is an easy addition. I use gimli to emit arbitrary DWARF.</p>",
        "id": 191132335,
        "sender_full_name": "bjorn3",
        "timestamp": 1584632868
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> from me. That process makes sense to me. The only thing I would add is that we should really be filling out the Rust unstable book as well especially for flags that we expect interested users besides the compiler team to be using. </p>\n<p>On a side note, .Net compilers do this with their PDBs and it's very nice because if you forget to build and then try to debug a process, the debugger will immediately highlight that things are weird because the source file doesn't match the code running in the process.</p>",
        "id": 191132351,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584632876
    },
    {
        "content": "<p>I also think the process itself seems sensible</p>",
        "id": 191132475,
        "sender_full_name": "centril",
        "timestamp": 1584632916
    },
    {
        "content": "<p>I think the Microsoft symbol server stuff might also rely on these signatures but I'm not sure.</p>",
        "id": 191132532,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584632943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ok so there's no exposure wrt. stability and lang evolution in other words; if so, then I have no concerns</p>",
        "id": 191132595,
        "sender_full_name": "centril",
        "timestamp": 1584632984
    },
    {
        "content": "<p>(One question -- this write-up I describe is really a kind of mini-RFC. I wonder where they should live. Probably asking folks to open a real RFC is bit heavyweight, although I think in principle it would be nice. But storing the write-up in a gist that is linked from the tracking issue feels unsatisfying, as the gist could be deleted etc. They could be stored into the compiler-team repo, or inline on tracking issue, or -- perhaps -- in a section at the end of the rustc-dev-guide? This isn't really blocking the PR per se, but I think it'd be nice to have more of a record of \"why was this flag added\" that we can find later)</p>",
        "id": 191133204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633232
    },
    {
        "content": "<p>there's also the unstable book as a possible candidate</p>",
        "id": 191133326,
        "sender_full_name": "centril",
        "timestamp": 1584633267
    },
    {
        "content": "<p>I view the unstable book as \"end user facing\",</p>",
        "id": 191133479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633335
    },
    {
        "content": "<p>so I expect it to have docs on how to use the feature more than design notes,</p>",
        "id": 191133506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633346
    },
    {
        "content": "<p>but also when things are stabilized it gets removed...</p>",
        "id": 191133518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633351
    },
    {
        "content": "<p>but yeah, might be a place to collect them I guess</p>",
        "id": 191133527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I assigned the PR to you since you seemed \"on it\"</p>",
        "id": 191133579,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> rustc guide is probably the place for internal design notes then</p>",
        "id": 191133630,
        "sender_full_name": "centril",
        "timestamp": 1584633391
    },
    {
        "content": "<p>Yeah, I think so too</p>",
        "id": 191133651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633400
    },
    {
        "content": "<p>I think we can have a section</p>",
        "id": 191133663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633407
    },
    {
        "content": "<p>sounds good, left comments on the parts I care about</p>",
        "id": 191133675,
        "sender_full_name": "eddyb",
        "timestamp": 1584633412
    },
    {
        "content": "<p>though the line is blurry; some of that info would probably be useful for end users too</p>",
        "id": 191133715,
        "sender_full_name": "centril",
        "timestamp": 1584633427
    },
    {
        "content": "<p>i.e. the redundancy with <code>src_hash</code></p>",
        "id": 191133716,
        "sender_full_name": "eddyb",
        "timestamp": 1584633427
    },
    {
        "content": "<p>I'd rather us not hash source files more than once</p>",
        "id": 191133739,
        "sender_full_name": "eddyb",
        "timestamp": 1584633438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191133715\" title=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191133715\">said</a>:</p>\n<blockquote>\n<p>though the line is blurry; some of that info would probably be useful for end users too</p>\n</blockquote>\n<p>my assumption is we'll extract that out into the unstable book</p>",
        "id": 191133797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633462
    },
    {
        "content": "<p>tbh I don't even know if we need a flag</p>",
        "id": 191133899,
        "sender_full_name": "eddyb",
        "timestamp": 1584633488
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> -- makes sense</p>",
        "id": 191133914,
        "sender_full_name": "centril",
        "timestamp": 1584633492
    },
    {
        "content": "<p>we can just switch src_hash to MD5 and do all of this without an opt-in</p>",
        "id": 191133978,
        "sender_full_name": "eddyb",
        "timestamp": 1584633515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191133899\" title=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191133899\">said</a>:</p>\n<blockquote>\n<p>tbh I don't even know if we need a flag</p>\n</blockquote>\n<p>(I'm ok with making it the default if you think that's the right call)</p>",
        "id": 191133990,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633517
    },
    {
        "content": "<p>DWARF is very extension-friendly so no reasonable tools would break from the extra info being there</p>",
        "id": 191134040,
        "sender_full_name": "eddyb",
        "timestamp": 1584633537
    },
    {
        "content": "<p>though I think it doesn't change much process-wise, apart from it being \"insta stable\"</p>",
        "id": 191134059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633544
    },
    {
        "content": "<p>(as in, if you don't recognize a property, you just ignore it)</p>",
        "id": 191134077,
        "sender_full_name": "eddyb",
        "timestamp": 1584633551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> maybe give it a bit of time in nightly before making it the default?</p>",
        "id": 191134086,
        "sender_full_name": "centril",
        "timestamp": 1584633555
    },
    {
        "content": "<p>just to let it bake a bit</p>",
        "id": 191134102,
        "sender_full_name": "centril",
        "timestamp": 1584633563
    },
    {
        "content": "<p>iow I would still want a short write-up</p>",
        "id": 191134128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633569
    },
    {
        "content": "<p>like, IMO this is a bugfix</p>",
        "id": 191134134,
        "sender_full_name": "eddyb",
        "timestamp": 1584633572
    },
    {
        "content": "<p>but yeah that'st he other option, add a flag, and then decide later to make it the default</p>",
        "id": 191134174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> hmm we could have a flag that toggles whether it's put into the debuginfo but still compute src_hash via MD5</p>",
        "id": 191134213,
        "sender_full_name": "eddyb",
        "timestamp": 1584633600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191134134\" title=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191134134\">said</a>:</p>\n<blockquote>\n<p>like, IMO this is a bugfix</p>\n</blockquote>\n<p>say a bit more?</p>",
        "id": 191134318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633618
    },
    {
        "content": "<p>I'll suggest that on the PR</p>",
        "id": 191134332,
        "sender_full_name": "eddyb",
        "timestamp": 1584633624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> agree; I think this is key; atm it feels like flags are being added a bit left and center and there's no \"order\"</p>",
        "id": 191134351,
        "sender_full_name": "centril",
        "timestamp": 1584633632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> as in we could say that it's a bug we weren't emitting hashes</p>",
        "id": 191134406,
        "sender_full_name": "eddyb",
        "timestamp": 1584633651
    },
    {
        "content": "<p>I'd like to know why you view it as a bugfix</p>",
        "id": 191134412,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633655
    },
    {
        "content": "<p>OK. It's not like it's <em>required</em> in some sense</p>",
        "id": 191134467,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633671
    },
    {
        "content": "<p>but it's a relatively minor bit of extra info to include, you're saying</p>",
        "id": 191134505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633687
    },
    {
        "content": "<p>not having it can cause debuggers to show the wrong snippet</p>",
        "id": 191134522,
        "sender_full_name": "eddyb",
        "timestamp": 1584633695
    },
    {
        "content": "<p>how so?</p>",
        "id": 191134557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633711
    },
    {
        "content": "<p>because they don't realize source file changed?</p>",
        "id": 191134578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633719
    },
    {
        "content": "<p>for the reason reason we already hash the source file and don't show snippets in diagnostics if it changed</p>",
        "id": 191134653,
        "sender_full_name": "eddyb",
        "timestamp": 1584633737
    },
    {
        "content": "<p>(from when it was compiled, I mean)</p>",
        "id": 191134665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633741
    },
    {
        "content": "<p>yeah, there is no way to check short of a hash</p>",
        "id": 191134678,
        "sender_full_name": "eddyb",
        "timestamp": 1584633746
    },
    {
        "content": "<p>OK. I'm starting to see your perspective.</p>",
        "id": 191135080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633903
    },
    {
        "content": "<p>It does feel like an \"externally visible commitment\" though</p>",
        "id": 191135150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633926
    },
    {
        "content": "<p>eh we don't guarantee what's in our debuginfo</p>",
        "id": 191135194,
        "sender_full_name": "eddyb",
        "timestamp": 1584633948
    },
    {
        "content": "<p>it's always been a best-effort type of thing</p>",
        "id": 191135292,
        "sender_full_name": "eddyb",
        "timestamp": 1584633974
    },
    {
        "content": "<p>That's true.</p>",
        "id": 191135320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584633988
    },
    {
        "content": "<p>Regardless, I'm fairly persuaded we don't need a flag for it</p>",
        "id": 191135355,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634001
    },
    {
        "content": "<p>The reason I said it's a \"kind of\" commitment is that I think it's important to MS tooling -- so we wouldn't want to remove it. But that's ok, that's all the more reason to do it of course.</p>",
        "id": 191135438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634028
    },
    {
        "content": "<p>(I don't really know any details, could be wrong)</p>",
        "id": 191135485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634046
    },
    {
        "content": "<p>anyway left a comment with the simplified version I had in mind</p>",
        "id": 191135505,
        "sender_full_name": "eddyb",
        "timestamp": 1584634054
    },
    {
        "content": "<p>I guess the only purpose for the flag would be to help people choose between MD5/SHA1, and you're (I think) saying \"MD5 is good enough\"</p>",
        "id": 191135753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634166
    },
    {
        "content": "<p>but also if DWARF doesn't support SHA1... that's kind of bad</p>",
        "id": 191135918,
        "sender_full_name": "eddyb",
        "timestamp": 1584634243
    },
    {
        "content": "<p>worst case we always compute both and use the best one supported, unless it's a perf drawback</p>",
        "id": 191135974,
        "sender_full_name": "eddyb",
        "timestamp": 1584634272
    },
    {
        "content": "<p>or we make the target spec choose</p>",
        "id": 191136008,
        "sender_full_name": "eddyb",
        "timestamp": 1584634293
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , why wouldn't we use the major change proposal for this process?</p>",
        "id": 191136190,
        "sender_full_name": "pnkfelix",
        "timestamp": 1584634380
    },
    {
        "content": "<p>is that too heavyweight?</p>",
        "id": 191136204,
        "sender_full_name": "pnkfelix",
        "timestamp": 1584634387
    },
    {
        "content": "<p>I was wondering that</p>",
        "id": 191136223,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634397
    },
    {
        "content": "<p>that reminds me that <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and I kind of sketched out some details and started an RFC for that</p>",
        "id": 191136273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634420
    },
    {
        "content": "<p>but we didn't quite finish it</p>",
        "id": 191136280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634423
    },
    {
        "content": "<p>isn't major change primarily about well... a major change to the codebase?</p>",
        "id": 191136284,
        "sender_full_name": "centril",
        "timestamp": 1584634425
    },
    {
        "content": "<p>it might be a good choice indeed</p>",
        "id": 191136288,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634427
    },
    {
        "content": "<p>it is in some sense a bit <em>lightweight</em></p>",
        "id": 191136306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634433
    },
    {
        "content": "<p>as opposed to e.g., a feature that isn't very invasive codebase wise</p>",
        "id": 191136314,
        "sender_full_name": "centril",
        "timestamp": 1584634439
    },
    {
        "content": "<p>in that we didn't require a full FCP</p>",
        "id": 191136315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634439
    },
    {
        "content": "<p>I think in some ways, having a smaller number of processes, even if some are not perfect fits, is better than a plethora of processes to choose from</p>",
        "id": 191136317,
        "sender_full_name": "pnkfelix",
        "timestamp": 1584634441
    },
    {
        "content": "<p>but then again</p>",
        "id": 191136359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634443
    },
    {
        "content": "<p>as long as the compiler flag is untsable, that's probably fine</p>",
        "id": 191136370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634450
    },
    {
        "content": "<p>I would only want a full FCP for something irreversible</p>",
        "id": 191136385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191136317\" title=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191136317\">said</a>:</p>\n<blockquote>\n<p>I think in some ways, having a smaller number of processes, even if some are not perfect fits, is better than a plethora of processes to choose from</p>\n</blockquote>\n<p>agreed</p>",
        "id": 191136398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634467
    },
    {
        "content": "<p>at least when I think of major change proposals I think of \"changes to architecture\"</p>",
        "id": 191136437,
        "sender_full_name": "centril",
        "timestamp": 1584634489
    },
    {
        "content": "<p>it just requires extending the definition of \"major change\" to include \"adding a new compiler flag\" :)</p>",
        "id": 191136454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584634498
    },
    {
        "content": "<p>heh <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 191136509,
        "sender_full_name": "centril",
        "timestamp": 1584634523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191136273\" title=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191136273\">said</a>:</p>\n<blockquote>\n<p>that reminds me that <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> and I kind of sketched out some details and started an RFC for that</p>\n</blockquote>\n<p>did I? :P</p>",
        "id": 191137742,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1584635059
    },
    {
        "content": "<p>ahh now read it, about the major changes proposal, ok ok</p>",
        "id": 191137836,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1584635099
    },
    {
        "content": "<p>I have a short write up about the feature. <a href=\"https://gist.github.com/arlosi/27162cfbd4bfc9bfabc25bfbe4777160\" target=\"_blank\" title=\"https://gist.github.com/arlosi/27162cfbd4bfc9bfabc25bfbe4777160\">https://gist.github.com/arlosi/27162cfbd4bfc9bfabc25bfbe4777160</a><br>\nIs the next step for this to create a PR to add it to the rustc guide? Should be in the rustc guide before it is implemented?</p>",
        "id": 191158736,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1584643706
    },
    {
        "content": "<p>I'd say to go ahead and open the PR for the rustc guide even if the implementation hasn't landed yet. We can wait to merge the rustc guide pr until the implementation is merged.</p>",
        "id": 191159548,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1584644103
    },
    {
        "content": "<p>PR is up <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/623\" target=\"_blank\" title=\"https://github.com/rust-lang/rustc-dev-guide/pull/623\">https://github.com/rust-lang/rustc-dev-guide/pull/623</a></p>",
        "id": 191167100,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1584647834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270929\">@Arlo Siemsen</span> thanks for the write-up! That's great</p>",
        "id": 191637720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067688
    },
    {
        "content": "<p>Glad it helps. Let me know if there's more we need to add. Since we're looking at making it a target option (rather than a compiler option), should I still open a tracking issue?</p>",
        "id": 191637868,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585067757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> convinced me that this is a relatively small change,</p>",
        "id": 191637891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067762
    },
    {
        "content": "<p>but reading your write-up did make me wonder exactly how it should be exposed</p>",
        "id": 191637957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067777
    },
    {
        "content": "<p>in particular, just always doing MD5 (like clang) is I guess not recommended</p>",
        "id": 191638018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067807
    },
    {
        "content": "<p>I guess a target option seems fine, are those \"insta stable\"?</p>",
        "id": 191638039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067820
    },
    {
        "content": "<p>I guess they probably are, I'm not sure that we have a notion of a \"nightly only\" target option.</p>",
        "id": 191638075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067838
    },
    {
        "content": "<p>Yes, I think that would make it insta stable.</p>",
        "id": 191638088,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585067841
    },
    {
        "content": "<p>I guess I think \"target option\" makes sense if -- on the various targets -- there is an obvious \"correct choice\" based on the surrounding tooling</p>",
        "id": 191638144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067865
    },
    {
        "content": "<p>it seems like most people just won't care what kind of hash is used</p>",
        "id": 191638224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067885
    },
    {
        "content": "<p>as long as their debugger supports it</p>",
        "id": 191638238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585067889
    },
    {
        "content": "<p>We really want to use SHA256 for PDBs, however the support for SHA256 isn't available until LLVM 11.</p>",
        "id": 191638285,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585067906
    },
    {
        "content": "<p>I agree, most people are going to be fine with anything supported by the debugger.</p>",
        "id": 191638337,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585067924
    },
    {
        "content": "<p>The thought with making it a target option was to choose the best hash available for the given target.</p>",
        "id": 191638401,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585067946
    },
    {
        "content": "<p>OK. I could see an argument for including both, even. i.e., have the target info supply the default, but give the ability to override.</p>",
        "id": 191638801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585068113
    },
    {
        "content": "<p>That seems like it'd be easy enough to do?</p>",
        "id": 191638875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585068129
    },
    {
        "content": "<p>But I guess the question is whether people would ever <em>actually</em> want to override. I'm fine with just doing target info to start.</p>",
        "id": 191638918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585068151
    },
    {
        "content": "<p>Yes, I think that would be easy enough. I'm not sure people would want to override it.</p>",
        "id": 191638959,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585068168
    },
    {
        "content": "<p>That's an irreversible decision, though, so I think it'd be great to add just a note or two about in the write-up, and we can do a quick FCP.</p>",
        "id": 191639030,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585068198
    },
    {
        "content": "<p>I'll nominate it also for discussion in the meeting.</p>",
        "id": 191639054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585068209
    },
    {
        "content": "<p>Sounds good. I can add it to the write up PR.</p>",
        "id": 191639100,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585068238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191639030\" title=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191639030\">said</a>:</p>\n<blockquote>\n<p>That's an irreversible decision, though, so I think it'd be great to add just a note or two about in the write-up, and we can do a quick FCP.</p>\n</blockquote>\n<p>is it? I could be wrong, but I'm assuming people can make their own target options.</p>",
        "id": 191639107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585068241
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 191639153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585068248
    },
    {
        "content": "<p>Ping me when it's done and I'll go kick off the FCP</p>",
        "id": 191639171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585068255
    },
    {
        "content": "<p>Yes, I think you can create your own target file via JSON.</p>",
        "id": 191639218,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585068276
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/rustc/targets/custom.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/rustc/targets/custom.html\">https://doc.rust-lang.org/rustc/targets/custom.html</a></p>",
        "id": 191639814,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1585068508
    },
    {
        "content": "<p>can we avoid stabilization by making it not parse from JSON?</p>",
        "id": 191643005,
        "sender_full_name": "eddyb",
        "timestamp": 1585069872
    },
    {
        "content": "<p>so it's internal-only?</p>",
        "id": 191643023,
        "sender_full_name": "eddyb",
        "timestamp": 1585069879
    },
    {
        "content": "<p>(I guess that could mean we can just have a method that returns the best supported hash format)</p>",
        "id": 191643047,
        "sender_full_name": "eddyb",
        "timestamp": 1585069900
    },
    {
        "content": "<p>(and not let the target spec control it)</p>",
        "id": 191643075,
        "sender_full_name": "eddyb",
        "timestamp": 1585069910
    },
    {
        "content": "<p>If we make it a real target option, it has to be parsed through JSON, since even the hard-coded targets round-trip through JSON.</p>",
        "id": 191643646,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585070181
    },
    {
        "content": "<p>I guess that's an insurance policy against target spec bugs</p>",
        "id": 191643685,
        "sender_full_name": "eddyb",
        "timestamp": 1585070212
    },
    {
        "content": "<p>To avoid stabilization, we could key off <code>is_like_msvc</code>in the target I suppose.</p>",
        "id": 191643877,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585070288
    },
    {
        "content": "<p>that's the only situation in which we emit PDBs, right?</p>",
        "id": 191643925,
        "sender_full_name": "eddyb",
        "timestamp": 1585070307
    },
    {
        "content": "<p>what does LLVM even do if you give it e.g. SHA1 for a DWARF target?</p>",
        "id": 191643967,
        "sender_full_name": "eddyb",
        "timestamp": 1585070325
    },
    {
        "content": "<p>It drops it.</p>",
        "id": 191643981,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585070333
    },
    {
        "content": "<p>And you get no hash.</p>",
        "id": 191643994,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585070341
    },
    {
        "content": "<p>yikes</p>",
        "id": 191644014,
        "sender_full_name": "eddyb",
        "timestamp": 1585070346
    },
    {
        "content": "<p>I think MSVC is the only place we emit PDBs.</p>",
        "id": 191644072,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585070368
    },
    {
        "content": "<p>I bet there's no way to check through LLVM's API whether a hash is supported on a target</p>",
        "id": 191644106,
        "sender_full_name": "eddyb",
        "timestamp": 1585070382
    },
    {
        "content": "<p>Not that I know of.</p>",
        "id": 191644215,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585070404
    },
    {
        "content": "<p>anyway, yeah, <code>is_like_msvc</code> could be okay for now if we don't want to add an insta-stable option name</p>",
        "id": 191644292,
        "sender_full_name": "eddyb",
        "timestamp": 1585070430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I updated <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/623\" target=\"_blank\" title=\"https://github.com/rust-lang/rustc-dev-guide/pull/623\">https://github.com/rust-lang/rustc-dev-guide/pull/623</a></p>",
        "id": 191644346,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585070455
    },
    {
        "content": "<p>Heh so I think it'd be fine to just start emitting hashes always using our own \"best judgement\" about when to do so</p>",
        "id": 191649102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585072420
    },
    {
        "content": "<p>OK, so, current plan is to just pick a default and add a <code>-Z</code> flag?</p>",
        "id": 191650080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585072815
    },
    {
        "content": "<p>seems ok to me</p>",
        "id": 191650084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585072816
    },
    {
        "content": "<p>I'd prob go w/ the original plan of making a stabilization issue and note down the options we considered. I don't care so much whether we use MCP or FCP, although technically there is a \"user facing\" change (we're adding the basic feature of including hashing in debuginfo), but I think it's a pretty minor thing and if people are <em>really</em> concerned we have plenty of time before stable.</p>",
        "id": 191650227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585072895
    },
    {
        "content": "<p>So just mentioning it in the meeting probably suffices</p>",
        "id": 191650255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585072904
    },
    {
        "content": "<p>I imagine sometime later if we ever get requests to customize per platform or to expose the flag we can figure out later the best way to do it</p>",
        "id": 191650344,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585072932
    },
    {
        "content": "<p>probably we never will</p>",
        "id": 191650348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585072934
    },
    {
        "content": "<p>Ok, to avoid insta-stabilizing anything, I'll update the PR to:</p>\n<ul>\n<li>Use the existing <code>is_like_msvc</code> target option to set the default hash algorithm instead of adding a new target option.</li>\n<li>Add back the <code>-Z</code> flag to allow overriding the hash algorithm.</li>\n</ul>",
        "id": 191653035,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585074269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270929\">@Arlo Siemsen</span> sorry I didn't take a look at the PR earlier, I put it off for a day or two and then it ended up on the second page of GH notifications :(</p>",
        "id": 192293669,
        "sender_full_name": "eddyb",
        "timestamp": 1585591001
    },
    {
        "content": "<p>I need to start unwatching PRs that I don't need to be involved in, just so it's easier to keep track of the ones where I should be involved</p>",
        "id": 192293804,
        "sender_full_name": "eddyb",
        "timestamp": 1585591057
    },
    {
        "content": "<p>No problem. I re-merged the PR and squashed all the commits. Let me know if there's anything else we need.</p>",
        "id": 192426468,
        "sender_full_name": "Arlo Siemsen",
        "timestamp": 1585677551
    },
    {
        "content": "<p>(I had the hubris to try and rename the topic but Zulip is fighting me, this is an attempt to move the two messages before my first message in the topic)</p>",
        "id": 192965611,
        "sender_full_name": "eddyb",
        "timestamp": 1586102303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so it looks like \"move previous and following messages to this topic\" doesn't move other people's messages, this means you'd have to move your own messages to \"proposal: add source file hashes to debuginfo <a href=\"https://github.com/rust-lang/rust/issues/69718\" title=\"https://github.com/rust-lang/rust/issues/69718\">#69718</a>\" :(</p>",
        "id": 192965716,
        "sender_full_name": "eddyb",
        "timestamp": 1586102439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270929\">@Arlo Siemsen</span> that fix was really prompt, thanks a lot!</p>",
        "id": 192965730,
        "sender_full_name": "eddyb",
        "timestamp": 1586102464
    },
    {
        "content": "<p>this just shows we should perf-test more PRs, perhaps after making the perf testing server more capable (or starting to distribute it across 2-3 servers)</p>",
        "id": 192965789,
        "sender_full_name": "eddyb",
        "timestamp": 1586102530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270929\">@Arlo Siemsen</span> I posted 3 comparisons here which show the fix, the overall effect and the PRs landed in between the original PR and the fix (the latter two both seem negligible) <a href=\"https://github.com/rust-lang/rust/issues/70785#issuecomment-609438109\" title=\"https://github.com/rust-lang/rust/issues/70785#issuecomment-609438109\">https://github.com/rust-lang/rust/issues/70785#issuecomment-609438109</a></p>",
        "id": 192965822,
        "sender_full_name": "eddyb",
        "timestamp": 1586102606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270929\">@Arlo Siemsen</span> if you want to help test the SHA1 performance compared to MD5, you could make a PR that changes the default (which we'd not actually land) and we could test that. the perf stuff is all on linux but if we make linux do SHA1 hashing it should be indicative of what is now happening on windows</p>",
        "id": 192965895,
        "sender_full_name": "eddyb",
        "timestamp": 1586102709
    },
    {
        "content": "<p>/msg <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> what was the original topic for <a href=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20source.20file.20hashes.20to.20debuginfo.20.2369718/near/192965716\" title=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20source.20file.20hashes.20to.20debuginfo.20.2369718/near/192965716\">\"proposal: add source file hashes to debuginfo #69718\"</a>? Your statement that \"move previous and following... \" doesn't move other people's message does not match my own recollection of what I'd observed myself...</p>",
        "id": 194723021,
        "sender_full_name": "pnkfelix",
        "timestamp": 1587411687
    },
    {
        "content": "<p>argh <code>/msg</code> is not a thing in zulip; <em>that</em> seems like something they could fix...</p>",
        "id": 194723045,
        "sender_full_name": "pnkfelix",
        "timestamp": 1587411705
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> \"cryptographic\" in lieu of \"source file\"</p>",
        "id": 194723186,
        "sender_full_name": "eddyb",
        "timestamp": 1587411769
    },
    {
        "content": "<p><a href=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191131256\" title=\"#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191131256\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/proposal.3A.20add.20cryptographic.20hashes.20to.20debuginfo.20.2369718/near/191131256</a></p>",
        "id": 194723218,
        "sender_full_name": "eddyb",
        "timestamp": 1587411786
    },
    {
        "content": "<p>Okay well I think <em>I</em> was able to revise other peoples' titles (observe this topic itself, in particular)</p>",
        "id": 194723770,
        "sender_full_name": "pnkfelix",
        "timestamp": 1587412100
    },
    {
        "content": "<p>but that might because I have admin privileges perhaps?</p>",
        "id": 194723787,
        "sender_full_name": "pnkfelix",
        "timestamp": 1587412111
    },
    {
        "content": "<p>the weird thing is that the option shows up for me too, except... oh right it's that timed thing</p>",
        "id": 194729085,
        "sender_full_name": "eddyb",
        "timestamp": 1587414806
    },
    {
        "content": "<p>so maybe because I can't edit topics on other people's messages after a while, the before+after feature is also affected</p>",
        "id": 194729169,
        "sender_full_name": "eddyb",
        "timestamp": 1587414841
    },
    {
        "content": "<p>whereas the usual \"move this message and all after\" does affect all messages</p>",
        "id": 194729242,
        "sender_full_name": "eddyb",
        "timestamp": 1587414864
    },
    {
        "content": "<p>but if its a timing thing, then why let me do it as an admin right now?</p>",
        "id": 194730823,
        "sender_full_name": "pnkfelix",
        "timestamp": 1587415586
    },
    {
        "content": "<p>(because I just <em>did</em> move all the messages over into this very topic...)</p>",
        "id": 194730846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1587415599
    },
    {
        "content": "<p>everyone should be able to do it</p>",
        "id": 194731697,
        "sender_full_name": "simulacrum",
        "timestamp": 1587415966
    },
    {
        "content": "<p>you may need to start on your own message? not sure</p>",
        "id": 194731713,
        "sender_full_name": "simulacrum",
        "timestamp": 1587415973
    }
]