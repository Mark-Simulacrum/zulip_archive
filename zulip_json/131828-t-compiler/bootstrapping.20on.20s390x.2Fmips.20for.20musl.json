[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>, I'm one of the developers of the pyca/cryptography Python library (probably  the most popular python crypto lib), we just shipped a first release that includes Rust code. <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  (I'm also part of the secure code working group) This has raise a number of platform compatibility issues to the forefront, one of them is that Alpine Linux (which uses musl libc) is having trouble bootstrapping rustc on some of their platforms (s390x and MIPS specifically). If they had support for Rust on all the architectures, this would be a big help to them in terms of adoption of Rust for them.</p>\n<p>I'm in a slightly odd place here of acting as a go-between, but: They would like to work with someone who understands rustc bootstrapping. Myself and other pyca/cryptography developers are potentially interested in sponsoring this work, if that's the impediment to getting it done. Is there an existing rustc dev interested in this problem? Is there some structure for finding someone if we were going to pay for it?</p>\n<p>(And my apologies if this is the wrong stream for this!)</p>",
        "id": 225769549,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1612910988
    },
    {
        "content": "<p>has any work towards that been done at all so far? I think primarily its going to be just adding the targets in question.</p>",
        "id": 225773831,
        "sender_full_name": "nagisa",
        "timestamp": 1612913703
    },
    {
        "content": "<p>what issues were encountered bootstrapping MIPS?</p>",
        "id": 225773880,
        "sender_full_name": "nagisa",
        "timestamp": 1612913747
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/rustc/platform-support.html\">https://doc.rust-lang.org/nightly/rustc/platform-support.html</a> has mips musl but not s390x. What I have from them is:</p>\n<blockquote>\n<p>Basically, what happens is that when building a cross-compiler (in the<br>\nsame way as you would cross compile GCC in order to bring up a new<br>\narchitecture), the process dies after building stage0.  We are not sure<br>\nwhy the process dies, it could be something very trivial that we are<br>\nmissing.</p>\n</blockquote>",
        "id": 225774036,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1612913839
    },
    {
        "content": "<p>that's… not very much to start with. Lack of the s390x musl target is a blocker for bootstrap either way… I would suspect that maybe a wrong <code>--target</code> triple was specified for mips?</p>",
        "id": 225774240,
        "sender_full_name": "nagisa",
        "timestamp": 1612913957
    },
    {
        "content": "<p>Yes I agree it's not really enough to debug on :-) ATM I'm as interested in the meta-question of how to get the alpine folks help from a rustc developer, and if it requires sponsorship, as I am in the specific question of \"why it dies\".</p>",
        "id": 225774447,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1612914060
    },
    {
        "content": "<p>And perhaps the answer is as simple as \"some alpine folks should join this stream\" as a starting point.</p>",
        "id": 225774493,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1612914084
    },
    {
        "content": "<p>I don't anticipate this to be much work at all given that both architectures have been proven to work (though perhaps not those exact targets), and we have working musl support (at least on x86_64) as well. So its to me sounds mostly just aligning the lego pieces right (and adding the targets).</p>\n<p>I'm happy to PR a s390x-musl target if nobody gets to it before me this coming weekend.</p>",
        "id": 225774836,
        "sender_full_name": "nagisa",
        "timestamp": 1612914292
    },
    {
        "content": "<p>Another question: is the mips bootstrap attempted for the bigendian variant or the little endian?</p>",
        "id": 225774890,
        "sender_full_name": "nagisa",
        "timestamp": 1612914343
    },
    {
        "content": "<p>(alternatively, maybe alpine also targets something like sparc?)</p>",
        "id": 225774955,
        "sender_full_name": "nagisa",
        "timestamp": 1612914364
    },
    {
        "content": "<p>(or a big-endian ppc)</p>",
        "id": 225774975,
        "sender_full_name": "nagisa",
        "timestamp": 1612914375
    },
    {
        "content": "<p>endianess bugs have bitten us in the past, but to really tell we'd just need more information as to how exactly things are failing.</p>\n<p>So I would suggest starting there.</p>",
        "id": 225775094,
        "sender_full_name": "nagisa",
        "timestamp": 1612914474
    },
    {
        "content": "<p>As for the sponsorship: its a hard question. It… depends? I imagine that it might be difficult to get a-hold of a dedicated person to work woth, if a more difficult problem were to arise. Many of us are volunteers after all. Paying somebody to be available and/or work on the problem would likely help to some extent, but then there are plenty of examples where bounties weren't of much help in getting things to progress, either.</p>",
        "id": 225775696,
        "sender_full_name": "nagisa",
        "timestamp": 1612914934
    },
    {
        "content": "<p>Thanks, I appreciate it!</p>",
        "id": 225775976,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1612915115
    },
    {
        "content": "<p>For s390x it looks like they have a patch <a href=\"https://github.com/alpinelinux/aports/blob/master/community/rust/musl-add-s390x-target.patch\">https://github.com/alpinelinux/aports/blob/master/community/rust/musl-add-s390x-target.patch</a></p>",
        "id": 225776195,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1612915240
    },
    {
        "content": "<p>Hi everyone.  That s390x patch is incomplete, but not related to the actual issue.</p>\n<p>The main issue is that we cannot successfully cross compile <em>any</em> rust compiler, e.g. build a rustc that runs on aarch64 from an x86_64 host.  That is the main prerequisite for enabling s390x and mips64[el] and the other ports that presently lack rustc.</p>\n<p>You can see how we do it by looking at our APKBUILD, <a href=\"https://github.com/alpinelinux/aports/blob/master/community/rust/APKBUILD\">https://github.com/alpinelinux/aports/blob/master/community/rust/APKBUILD</a>.  Does anyone have any ideas on what to do?  I last brought this up in October, but nobody could figure it out then.</p>",
        "id": 225780290,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612917999
    },
    {
        "content": "<p>Most likely it is something stupid that is missing that we simply do not understand.  I think once that issue is tackled, it is just a matter of adding the additional targets and doing the bootstrap.</p>\n<p>I suspect the targets we add may be defective in some way -- Void Linux, for example, is able to cross-compile their rust packaging, but instead of adding new targets, they modify the generic musl targets to have similar behavior as glibc (e.g. removing the static linking defaults).  We do the same, but through adding new targets which derive from the generic musl ones.</p>",
        "id": 225780492,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612918180
    },
    {
        "content": "<p>for s390x in particular, we have an issue with cross-compiling that has not been fully diagnosed, <a href=\"https://github.com/rust-lang/rust/issues/80810\">#80810</a></p>",
        "id": 225781171,
        "sender_full_name": "cuviper",
        "timestamp": 1612918678
    },
    {
        "content": "<p>but in general, I'd look at the way we set cross-compiling variables in src/ci/docker/...</p>",
        "id": 225781259,
        "sender_full_name": "cuviper",
        "timestamp": 1612918718
    },
    {
        "content": "<p>some are using crosstool-ng for the toolchain, and others just ubuntu cross tools, but you can at least learn from the environment variables we set</p>",
        "id": 225781393,
        "sender_full_name": "cuviper",
        "timestamp": 1612918804
    },
    {
        "content": "<p>yeah <a href=\"https://github.com/rust-lang/rust/issues/80810\">#80810</a> isn’t related here.  we don’t get any tool chain at all.</p>",
        "id": 225783769,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612920776
    },
    {
        "content": "<blockquote>\n<p>I last brought this up in October, but nobody could figure it out then.</p>\n</blockquote>\n<p>do you have a link?</p>",
        "id": 225787203,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612924127
    },
    {
        "content": "<p>hang on, trying to figure out how to get the link to that zulip thread</p>",
        "id": 225788061,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612925005
    },
    {
        "content": "<p><a href=\"http://zulip-archive.rust-lang.org/\">zulip-archive.rust-lang.org/</a> will probably be easier than trying to use search</p>",
        "id": 225788072,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612925027
    },
    {
        "content": "<p><a href=\"https://zulip-archive.rust-lang.org/182449tcompilerhelp/94495crosscompilationandmissingrdlallocandfriends.html\">https://zulip-archive.rust-lang.org/182449tcompilerhelp/94495crosscompilationandmissingrdlallocandfriends.html</a></p>",
        "id": 225788158,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612925119
    },
    {
        "content": "<p>so anyway, i’m still stumped on this, but it’s becoming more urgent to solve as more things require rust</p>",
        "id": 225788623,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612925622
    },
    {
        "content": "<p>(sorry, I can help after I finish a thing for work)</p>",
        "id": 225788683,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612925673
    },
    {
        "content": "<p>no rush :)</p>",
        "id": 225788796,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612925840
    },
    {
        "content": "<p>oh heh I was on that thread too</p>",
        "id": 225789085,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612926141
    },
    {
        "content": "<p>indeed</p>",
        "id": 225790062,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612927386
    },
    {
        "content": "<p>unfortunately higher priority projects came up, but we can revisit this now</p>",
        "id": 225790085,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612927411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> I think my main recommendation is to switch to x.py dist (and/or install) which generally are much better at producing what folks expect; build currently has some bugs around cross compilation. Dist and install also have significantly more stable interfaces generally speaking.</p>",
        "id": 225790657,
        "sender_full_name": "simulacrum",
        "timestamp": 1612928098
    },
    {
        "content": "<p>what would that look like?</p>",
        "id": 225790724,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612928165
    },
    {
        "content": "<p>So, x.py dist produces tarballs in build/dist and x.py install will default to putting rustc in e.g. /usr/bin, but you can configure that. I'm not sure if that answers your question - if you replace x.py build in the file you linked with dist or install I would expect you to get the artifacts you want.</p>",
        "id": 225790818,
        "sender_full_name": "simulacrum",
        "timestamp": 1612928315
    },
    {
        "content": "<p>Both will build the compiler and other necessary components directly; you don't need to invoke build first.</p>",
        "id": 225790834,
        "sender_full_name": "simulacrum",
        "timestamp": 1612928366
    },
    {
        "content": "<p>I personally would use x.py install for this sort of use case.</p>",
        "id": 225790841,
        "sender_full_name": "simulacrum",
        "timestamp": 1612928388
    },
    {
        "content": "<p>so the reason we cannot do that, is because there's a build phase and a package phase</p>",
        "id": 225791006,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612928568
    },
    {
        "content": "<p>we want to build the artifacts without using fakeroot, and then we use fakeroot to set up the package filesystem</p>",
        "id": 225791020,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612928592
    },
    {
        "content": "<p>though i am confused as to why this would make a difference, void linux uses x.py build to cross compile and it works fine for them.</p>\n<p>the key difference between us and void is that we add new targets for dynamically-linked musl distributions, while void linux modifies the targets to remove the \"static linking by default\" setting.  they can cross compile just fine, but we can't.</p>",
        "id": 225791109,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612928718
    },
    {
        "content": "<p>(it is an open question whether or not we are taking the right approach there, or whether or not the \"static linking by default\" setting of the generic musl targets are appropriate)</p>",
        "id": 225791204,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612928824
    },
    {
        "content": "<p>(while your average end user looking to build software linked against musl probably does want static linking in that case, distros definitely don't, and glibc is treated differently.)</p>",
        "id": 225791229,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612928872
    },
    {
        "content": "<p>So, unless I'm missing something, you would just want to set your prefix to e.g. build/prefix, and then do whatever you do today to copy the files out of that directory after x.py install.</p>",
        "id": 225791375,
        "sender_full_name": "simulacrum",
        "timestamp": 1612929045
    },
    {
        "content": "<p>If you still see empty artifact directories after trying this, please file an issue and ping me (@Mark-Simulacrum), I'd be happy to take a more detailed look.</p>",
        "id": 225791456,
        "sender_full_name": "simulacrum",
        "timestamp": 1612929143
    },
    {
        "content": "<p>and there won't be hardcoded paths in the binary?</p>",
        "id": 225791465,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612929164
    },
    {
        "content": "<p>No, there's not really any difference in produced binaries either way - it's just x.py dist and install do the right thing for packagers/cross compilation in more cases today.</p>",
        "id": 225791485,
        "sender_full_name": "simulacrum",
        "timestamp": 1612929208
    },
    {
        "content": "<p>okay.  in autoconf world, messing with <code>--prefix</code> can result in that prefix being hardcoded in the binary.  for example, you can't relocate GCC paths as a result of that.</p>\n<p>but i can look into x.py install case if there is an example somewhere</p>",
        "id": 225791571,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612929325
    },
    {
        "content": "<p>just now finished <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> </p>\n<blockquote>\n<p>if there is an example somewhere</p>\n</blockquote>\n<p>try this:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cat config.toml\n[install]\nprefix = &quot;build/prefix&quot;\n$ ./x.py install\n</code></pre></div>\n<p>(with appropriate --target flags)</p>",
        "id": 225791647,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612929456
    },
    {
        "content": "<p>but what does <code>build/prefix</code> do to the actual packaging?</p>",
        "id": 225791795,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612929629
    },
    {
        "content": "<p>we want to wind up with rustc in /usr/bin</p>",
        "id": 225791799,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612929642
    },
    {
        "content": "<p>it doesn't. It's just a way to build the artifacts without installing them, which you said you wanted</p>",
        "id": 225791821,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612929671
    },
    {
        "content": "<p>then in the packaging step you can copy build/prefix to /usr/bin</p>",
        "id": 225791827,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612929688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstraping.20on.20s390x.2Fmips.20for.20musl/near/225790657\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> I think my main recommendation is to switch to x.py dist (and/or install) which generally are much better at producing what folks expect; build currently has some bugs around cross compilation. Dist and install also have significantly more stable interfaces generally speaking.</p>\n</blockquote>\n<p>btw, why is build more unstable than <code>install</code> and <code>dist</code>?</p>",
        "id": 225791922,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612929788
    },
    {
        "content": "<p>yes, i am not convinced that this is the problem at all.  i am 100% certain it is related to our use of custom targets instead of just patching the generic targets to fit our requirements</p>",
        "id": 225791952,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612929826
    },
    {
        "content": "<p>the reason i am not convinced is because void uses x.py build and can cross, and we can't, and the primary substantive difference is the custom targets.  i should be able to at least build an aarch64 cross compiler on an x86_64 host, which void can do in their packaging, but we cannot.</p>",
        "id": 225792167,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612930037
    },
    {
        "content": "<p>oh huh, void did switch to x.py dist.  ok i'll investigate that</p>",
        "id": 225792275,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612930191
    },
    {
        "content": "<p>i need to wait for a cross toolchain to finish building tho</p>",
        "id": 225792352,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612930276
    },
    {
        "content": "<p>the point is not so much \"x.py build is causing the bug\" as much as \"x.py build is known to have bugs and it's hard to tell if this is an existing bug or an actual problem\"</p>",
        "id": 225792510,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612930492
    },
    {
        "content": "<p>yeah we can check it out.  right now i'm building a cross toolchain for aarch64.  that way s390x is not even an issue to fight.</p>",
        "id": 225792532,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612930526
    },
    {
        "content": "<p>i think our current plan of attack will be:</p>\n<ul>\n<li>make it cross x86_64 -&gt; aarch64</li>\n<li>upgrade to 1.48 from 1.47</li>\n<li>attempt to cross x86_64 -&gt; s390x</li>\n<li>attempt to cross the remaining targets</li>\n</ul>",
        "id": 225792646,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612930653
    },
    {
        "content": "<p>I've never been patient enough to do a full stage2 build haha, I can help with conceptual things but I've never tried cross-compiling</p>",
        "id": 225792832,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612930816
    },
    {
        "content": "<p>thankfully i have dual AMD EPYC 7742 system that i can use for this</p>",
        "id": 225792858,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612930848
    },
    {
        "content": "<p>now to the longest part, LLVM</p>",
        "id": 225793356,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612931501
    },
    {
        "content": "<p>I don't know your distros requirements - if you're ok downloading things, you can set <code>download-ci-llvm</code> so you don't have to build from source</p>",
        "id": 225793418,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612931538
    },
    {
        "content": "<p>oh well that probably doesn't work if it's not a tier 1 platform anyway</p>",
        "id": 225793428,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612931555
    },
    {
        "content": "<p>we have to cross compile LLVM for the target, then rust</p>",
        "id": 225793476,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612931604
    },
    {
        "content": "<p>basically, Alpine has this mega script, <code>bootstrap.sh</code>, which when complete, spits out a set of packages and an ISO you can boot on regular hardware to get a builder up and rebuild the entire distro from, so it has to build everything, including rust's dependencies</p>",
        "id": 225793798,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612931975
    },
    {
        "content": "<p>(in some cases, it's not an ISO, but that is the situation for most archs)</p>",
        "id": 225793844,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612932004
    },
    {
        "content": "<p>looks like cross might work for x86_64 -&gt; aarch64 with x.py build.</p>",
        "id": 225797507,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612936807
    },
    {
        "content": "<p>i also noticed something about the s390x triplet.  it may be wrong :)</p>",
        "id": 225797542,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612936846
    },
    {
        "content": "<p>but so far the x86_64 -&gt; aarch64 cross hasn't bombed out, and we're much farther in than i was getting before</p>",
        "id": 225797589,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612936911
    },
    {
        "content": "<p>the real nightmare is going to be mips64, all the MIPS ports are softfloat because Octeon FPU is buggy</p>",
        "id": 225797721,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612937034
    },
    {
        "content": "<p>(Loongson may be hardfloat.  I need to set up the board and check it.)</p>",
        "id": 225797773,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612937057
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Assembling stage1 compiler (aarch64-alpine-linux-musl)\nBuilding stage1 std artifacts (aarch64-alpine-linux-musl -&gt; x86_64-alpine-linux-musl)\nerror: process didn&#39;t exit successfully: `/home/kaniini/aports/community/rust/src/rustc-1.47.0-src/build/bootstrap/debug/rustc -vV` (exit code: 101)\n--- stderr\nthread &#39;main&#39; panicked at &#39;\nFailed to run:\n&quot;/home/kaniini/aports/community/rust/src/rustc-1.47.0-src/build/aarch64-alpine-linux-musl/stage1/bin/rustc&quot; &quot;-vV&quot; &quot;-Wrust_2018_idioms&quot; &quot;-Wunused_lifetimes&quot; &quot;-Clinker=aarch64-alpine-linux-musl-gcc&quot; &quot;-C&quot; &quot;target-feature=-crt-static&quot; &quot;-Z&quot; &quot;force-unstable-if-unmarked&quot;\n-------------: Os { code: 8, kind: Other, message: &quot;Exec format error&quot; }&#39;, src/bootstrap/bin/rustc.rs:152:22\nstack backtrace:\n   0: rust_begin_unwind\n   1: core::panicking::panic_fmt\n   2: core::result::unwrap_failed\n   3: core::result::Result&lt;T,E&gt;::expect\n             at ./library/core/src/result.rs:933\n   4: rustc::main\n             at ./src/bootstrap/bin/rustc.rs:152\n   5: core::ops::function::FnOnce::call_once\n             at ./library/core/src/ops/function.rs:227\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\n\ncommand did not execute successfully: &quot;/usr/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;x86_64-alpine-linux-musl&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;256&quot; &quot;--release&quot; &quot;--locked&quot; &quot;--frozen&quot; &quot;--features&quot; &quot;panic-unwind backtrace&quot; &quot;--manifest-path&quot; &quot;/home/kaniini/aports/community/rust/src/rustc\n-1.47.0-src/library/test/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\nexpected success, got: exit code: 101\nfailed to run: /home/kaniini/aports/community/rust/src/rustc-1.47.0-src/build/bootstrap/debug/bootstrap build --jobs 256\n</code></pre></div>",
        "id": 225798528,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612937985
    },
    {
        "content": "<p>welp... it tried to run the aarch64 compiler.  i guess there is something to this dist stuff after all</p>",
        "id": 225798577,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612938017
    },
    {
        "content": "<p>going to retry with x.py dist</p>",
        "id": 225798666,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612938156
    },
    {
        "content": "<p>Hmm, that's weird that the target compiler is in stage1 and not stage2</p>",
        "id": 225800255,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612940229
    },
    {
        "content": "<p>Did you pass --host or something?</p>",
        "id": 225800280,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612940276
    },
    {
        "content": "<p>huh.  we do pass <code>--host=\"$_target\"</code>.  perhaps <code>--host=\"$_build\"</code> makes more sense :)</p>",
        "id": 225800371,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612940360
    },
    {
        "content": "<p>or perhaps we do not need <code>--host</code> at all</p>",
        "id": 225800386,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612940393
    },
    {
        "content": "<p>I would see what happens if you remove --host</p>",
        "id": 225800607,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612940621
    },
    {
        "content": "<p>so, the goal is to wind up with a rustc that i can run on aarch64 in this case.</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/master/config.toml.example#L168-L188\">https://github.com/rust-lang/rust/blob/master/config.toml.example#L168-L188</a> indicates that host and target must be set the same for this.</p>",
        "id": 225800669,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612940657
    },
    {
        "content": "<p>this view is backed up with <a href=\"https://github.com/void-linux/void-packages/blob/master/srcpkgs/rust/template#L226-L228\">https://github.com/void-linux/void-packages/blob/master/srcpkgs/rust/template#L226-L228</a> which does precisely the same</p>",
        "id": 225800685,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612940688
    },
    {
        "content": "<p>i'm skeptical that if i remove --host that i will get a compiler that can run on aarch64.</p>",
        "id": 225800708,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612940735
    },
    {
        "content": "<p>About <code>--target</code> the example config says: </p>\n<div class=\"codehilite\"><pre><span></span><code># Defaults to `host`. If you set this explicitly, you likely want to add all\n# host triples to this list as well in order for those host toolchains to be\n# able to compile programs for their native target.\n</code></pre></div>\n<p>So I think <code>--host</code> is needed and <code>--target</code> is technically optional.  But it's harmless if they are the same.</p>",
        "id": 225800808,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612940840
    },
    {
        "content": "<p>Oh wait I misread</p>\n<div class=\"codehilite\"><pre><span></span><code>--build BUILD   build target of the stage0 compiler\n        --host HOST     host targets to build\n</code></pre></div>\n<p>So I would expect --build to be what's going wrong</p>",
        "id": 225800906,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612940958
    },
    {
        "content": "<p>--build is x86_64-alpine-linux-musl</p>",
        "id": 225800928,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612940998
    },
    {
        "content": "<p>Hmm, I'm not sure then</p>",
        "id": 225800970,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612941009
    },
    {
        "content": "<p>i will try to collect a verbose build log with dist instead of build.  maybe this is dist vs build after all.  but i need to go to bed soon :)</p>",
        "id": 225800996,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612941071
    },
    {
        "content": "<p>switching to <code>dist</code> only changed the way it bombed.  <a href=\"https://distfiles.dereferenced.org/rust-build.txt\">https://distfiles.dereferenced.org/rust-build.txt</a></p>",
        "id": 225807250,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612946659
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>/usr/lib/gcc/x86_64-alpine-linux-musl/10.2.1/../../../../x86_64-alpine-linux-musl/bin/ld: skipping incompatible /home/kaniini/sysroot-aarch64/lib/libz.so when searching for -lz\n</code></pre></div>\n<p>Did you set the linker for the aarch64 target?</p>",
        "id": 225807478,
        "sender_full_name": "bjorn3",
        "timestamp": 1612946816
    },
    {
        "content": "<p>no, it's dumber than that.  i need zlib-dev on host too.</p>",
        "id": 225807527,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612946851
    },
    {
        "content": "<p>trying again</p>",
        "id": 225807537,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1612946856
    },
    {
        "content": "<p>ok, looks like x.py dist gets the job done here.  now going to attempt an s390x bootstrap</p>",
        "id": 226003832,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613055968
    },
    {
        "content": "<p>Meaning aarch64 bootstraps now?</p>",
        "id": 226004432,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613056231
    },
    {
        "content": "<p>yes, i was able to generate an aarch64 rust package from an x86_64 host (and vice versa)</p>",
        "id": 226004707,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613056365
    },
    {
        "content": "<p>now... we should talk about our triplets.  i can upstream them, but i think it makes more sense to introduce generic targets for any musl-based distro, as distros are going to want the behaviour we define in our targets (e.g. musl treated same as glibc re: linking)</p>",
        "id": 226006413,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613057018
    },
    {
        "content": "<p>it sounds like you're asking a change to the target file format? That would probably need an MCP</p>",
        "id": 226006707,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057118
    },
    {
        "content": "<p><a href=\"https://forge.rust-lang.org/compiler/mcp.html\">https://forge.rust-lang.org/compiler/mcp.html</a></p>",
        "id": 226006725,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057124
    },
    {
        "content": "<p>no, the target format doesnt need to change</p>",
        "id": 226007075,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613057249
    },
    {
        "content": "<p>I'm unsure what you're asking for then</p>",
        "id": 226007167,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057281
    },
    {
        "content": "<p>rust assumes on musl that you want staticly linked binaries, distros want the C dependencies to be dynamic</p>",
        "id": 226007172,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613057282
    },
    {
        "content": "<p>oh I see, this is some default that gets set during codegen</p>",
        "id": 226007382,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057348
    },
    {
        "content": "<p>you could probably make a PR fixing that</p>",
        "id": 226007395,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057352
    },
    {
        "content": "<p>well, it is a political situation.  the people who originally enabled rust on musl want static linking by default, despite this being inappropriate for distros</p>",
        "id": 226007459,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613057385
    },
    {
        "content": "<p>ok, then an MCP is probably the right approach after all <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 226007642,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057439
    },
    {
        "content": "<p>what is an MCP?</p>",
        "id": 226008702,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613057784
    },
    {
        "content": "<p>I'm pretty sure the solution to this is pretty much just \"more\" targets.</p>",
        "id": 226008713,
        "sender_full_name": "nagisa",
        "timestamp": 1613057788
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstraping.20on.20s390x.2Fmips.20for.20musl/near/226008702\">said</a>:</p>\n<blockquote>\n<p>what is an MCP?</p>\n</blockquote>\n<p><a href=\"https://forge.rust-lang.org/compiler/mcp.html\">https://forge.rust-lang.org/compiler/mcp.html</a></p>",
        "id": 226008767,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613057811
    },
    {
        "content": "<p>yes, but it seems pointless to have targets for every single musl distro when musl distros all largely want the same thing</p>",
        "id": 226008821,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613057832
    },
    {
        "content": "<p>hince why i bring this up :)</p>\n<p>more targets are fine, but it is wasted work to have custom targets for every distro.  so would be nice to solve that somehow :)</p>",
        "id": 226009086,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613057903
    },
    {
        "content": "<p>Yeah you probably wouldn't add a target for each distro, just a set of musl targets where <code>static-crt</code> is unset.</p>",
        "id": 226009282,
        "sender_full_name": "nagisa",
        "timestamp": 1613057965
    },
    {
        "content": "<p>one thought would be to add a set of <code>dynmusl</code> targets based on the alpine ones :)</p>",
        "id": 226009435,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613058011
    },
    {
        "content": "<p>i have AMD EPYC 7742P and rust just sits there wasting cpu on ipc overhead if you try to use -j256.  sweet spot seems to be -j32 or perhaps -j64.</p>",
        "id": 226020030,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613061779
    },
    {
        "content": "<p>All those poor wasted cores. I guess you can use the remaining ones for youtube.</p>",
        "id": 226020620,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613062007
    },
    {
        "content": "<p>it might be worth investigating why there is so much ipc overhead at some point :)</p>",
        "id": 226021114,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613062182
    },
    {
        "content": "<p>when you say IPC overhead, what processes do you mean?</p>",
        "id": 226021135,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613062193
    },
    {
        "content": "<p>is this between cargo and rustc?</p>",
        "id": 226021147,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613062197
    },
    {
        "content": "<p>you could open a thread in <a class=\"stream\" data-stream-id=\"246057\" href=\"/#narrow/stream/246057-t-cargo\">#t-cargo</a> maybe</p>",
        "id": 226021259,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613062223
    },
    {
        "content": "<p>inside rustc itself.  if you look at cpu utilization using htop, it's all in-kernel, so i presume it is ipc overhead between processes</p>",
        "id": 226022429,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613062681
    },
    {
        "content": "<p>i'll dig into it with perf at some point :)</p>",
        "id": 226022496,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613062697
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 226022661,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613062768
    },
    {
        "content": "<p>that might be LLVM since it's dynamically linked? Rust doesn't do much IPC other than the linker</p>",
        "id": 226022717,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613062792
    },
    {
        "content": "<p>Might also be rustc trying to acquire/release <a href=\"https://docs.rs/jobserver/0.1.21/jobserver/\">jobserver</a> tokens but I haven't seen this issue so that's just a guess.</p>",
        "id": 226024082,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1613063334
    },
    {
        "content": "<p>it could be pagefaulting a lot on some shared memory, though conceptually llvm codegen units should all be pretty independent.</p>",
        "id": 226025473,
        "sender_full_name": "nagisa",
        "timestamp": 1613063811
    },
    {
        "content": "<p>s390x bootstrap failed with the <code>__rdl_alloc</code> stuff as it did last october</p>",
        "id": 226026095,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613064068
    },
    {
        "content": "<p>(<a href=\"https://zulip-archive.rust-lang.org/182449tcompilerhelp/94495crosscompilationandmissingrdlallocandfriends.html\">https://zulip-archive.rust-lang.org/182449tcompilerhelp/94495crosscompilationandmissingrdlallocandfriends.html</a>)</p>",
        "id": 226026170,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613064101
    },
    {
        "content": "<p>we are updating to rust 1.48 atm.  i will try again with 1.48</p>",
        "id": 226026395,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613064175
    },
    {
        "content": "<blockquote>\n<p>yes, what i am wondering is if the buildsystem is slipping in test as a cfg variable</p>\n</blockquote>\n<p>fyi you can test this by adding <code>#[cfg(not(test))] compile_error!();</code> or something</p>",
        "id": 226027071,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613064426
    },
    {
        "content": "<p>if something goes wrong here I would expect it to have something to do with <code>rustc_std_internal_symbol</code> being magic</p>",
        "id": 226027148,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613064467
    },
    {
        "content": "<p>yeah, all those __rdl functions have it</p>",
        "id": 226027262,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613064510
    },
    {
        "content": "<p>A quick grep suggests that the only other place that uses <code>rustc_std_internal_symbol</code> is unwinding.</p>",
        "id": 226027331,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613064542
    },
    {
        "content": "<p>Well, panicking in general.</p>",
        "id": 226027383,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613064559
    },
    {
        "content": "<blockquote>\n<p>this symbol is a \"weird symbol\"</p>\n</blockquote>\n<p>great .... <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/middle/codegen_fn_attrs/struct.CodegenFnAttrFlags.html#associatedconstant.RUSTC_STD_INTERNAL_SYMBOL\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/middle/codegen_fn_attrs/struct.CodegenFnAttrFlags.html#associatedconstant.RUSTC_STD_INTERNAL_SYMBOL</a></p>",
        "id": 226027393,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613064562
    },
    {
        "content": "<p>apparently that's a \"global allocator span\" and also implies <code>#[used]</code>, <code>#[no_mangle]</code>, and <code>#[weak]</code>:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_metadata/src/creader.rs#L992\">https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_metadata/src/creader.rs#L992</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_feature/src/builtin_attrs.rs#L438\">https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_feature/src/builtin_attrs.rs#L438</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_typeck/src/collect.rs#L2925\">https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_typeck/src/collect.rs#L2925</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_typeck/src/collect.rs#L2906\">https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_typeck/src/collect.rs#L2906</a></li>\n</ul>",
        "id": 226027667,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613064680
    },
    {
        "content": "<p>and it is only exported for <code>dylibs</code> and <code>rlibs</code>: <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/middle/exported_symbols/enum.SymbolExportLevel.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/middle/exported_symbols/enum.SymbolExportLevel.html</a><br>\n<a href=\"https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L382-L386\">https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_codegen_ssa/src/back/symbol_export.rs#L382-L386</a></p>",
        "id": 226028224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613064903
    },
    {
        "content": "<p>and then there's a page-long comment about why it gets marked as \"hidden\": <a href=\"https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_mir/src/monomorphize/partitioning/default.rs#L491-L528\">https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler/rustc_mir/src/monomorphize/partitioning/default.rs#L491-L528</a></p>",
        "id": 226028750,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613065154
    },
    {
        "content": "<p>not sure how much this is actually helping lol</p>",
        "id": 226029226,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613065341
    },
    {
        "content": "<p>this is the part where i need a rustc developer.  i think my target is missing something.</p>",
        "id": 226031994,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613066387
    },
    {
        "content": "<p>A bit off-topic, but does <code>-Ctarget-feature=-crt-static</code> work for anyone on <code>x86_64-unknown-linux-musl</code>? I get linker errors for some pthread functions, even on an empty program.</p>",
        "id": 226132859,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613134522
    },
    {
        "content": "<p>Do you have a dynamic musl libc to link against?</p>",
        "id": 226133060,
        "sender_full_name": "nagisa",
        "timestamp": 1613134641
    },
    {
        "content": "<p>(empty programs will still need some pthread libraries to set-up the main thread before <code>fn main() {}</code> is invoked)</p>",
        "id": 226133089,
        "sender_full_name": "nagisa",
        "timestamp": 1613134668
    },
    {
        "content": "<p>Good question... I have a <code>/usr/lib/musl/lib/libc.so</code></p>",
        "id": 226136636,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613136717
    },
    {
        "content": "<p>Progress: <code>-Clinker=musl-gcc</code> fails with <code>cannot find -lgcc_s</code></p>",
        "id": 226136755,
        "sender_full_name": "Laurențiu",
        "timestamp": 1613136770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/226026095\">said</a>:</p>\n<blockquote>\n<p>s390x bootstrap failed with the <code>__rdl_alloc</code> stuff as it did last october</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> you said void had this working with a custom target? What do they do differently?</p>",
        "id": 226158945,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613146927
    },
    {
        "content": "<p>not s390x but crossing in general</p>",
        "id": 226167005,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613150267
    },
    {
        "content": "<p>oh I see</p>",
        "id": 226167114,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613150299
    },
    {
        "content": "<p>They modify the upstream targets to dynamically link crt, while alpine creates new targets that are theoretically identical, right?</p>",
        "id": 226167205,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613150334
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/226020030\">said</a>:</p>\n<blockquote>\n<p>i have AMD EPYC 7742P and rust just sits there wasting cpu on ipc overhead if you try to use -j256.  sweet spot seems to be -j32 or perhaps -j64.</p>\n</blockquote>\n<p>Am I right that I should be able to use <code>htop</code> and immediately witness a top of in-kernel overhead? I guess I will just trying it and see. Is this during a <code>x.py build</code> bootstrap in particular? Could you share the <code>config.toml</code> and <code>x.py</code> invocation you are using?</p>",
        "id": 226184990,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613158533
    },
    {
        "content": "<p>(Also, <span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> , how much RAM do you have on your box? I’m wondering at the outset whether virt. mem. swapping could be part of of the story here.)</p>",
        "id": 226189436,
        "sender_full_name": "pnkfelix",
        "timestamp": 1613160552
    },
    {
        "content": "<p>512gb on that host.  no swap :)</p>",
        "id": 226254223,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613234527
    },
    {
        "content": "<p>I suspect that its going to be migration/numa losses, primarily.</p>",
        "id": 226257019,
        "sender_full_name": "nagisa",
        "timestamp": 1613237716
    },
    {
        "content": "<p>seems reasonable.  will have time to work on this bootstrap issue again tomorrow if people wanna tackle it</p>",
        "id": 226345214,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613364707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/226027148\">said</a>:</p>\n<blockquote>\n<p>if something goes wrong here I would expect it to have something to do with <code>rustc_std_internal_symbol</code> being magic</p>\n</blockquote>\n<p>ok I did some git archeology and found that it was introduced in <a href=\"https://github.com/rust-lang/rust/commit/fbf98697021173a30b84d9145df0966a23a2f9d2\">fbf98697021173a30b84d9145df0966a23a2f9d2</a>. So maybe <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> will have some idea what's going wrong?</p>\n<p>For context, <span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> is trying to bootstrap on s390x and is getting errors about <code>__rdl_alloc</code> not being defined.</p>",
        "id": 226351383,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613373210
    },
    {
        "content": "<p>I wonder if this has something to do with different linker behaviors between the platforms. What linker is being used on s390x?</p>",
        "id": 226395277,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613402022
    },
    {
        "content": "<p>Sure I can try to help out, the most useful thing would be to gist the exact error message and preserve a build dir</p>",
        "id": 226400258,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613404605
    },
    {
        "content": "<p>Given the error message there's probably a few files to poke around in where I'd expect the symbol to exist to try to narrow down where the bug is</p>",
        "id": 226400323,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613404642
    },
    {
        "content": "<p>here's a build log (from <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/cross.20compilation.20and.20missing.20__rdl_alloc.20and.20friends/near/215213649\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/cross.20compilation.20and.20missing.20__rdl_alloc.20and.20friends/near/215213649</a>): <a href=\"https://tpaste.us/ejvV\">https://tpaste.us/ejvV</a></p>",
        "id": 226400434,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613404685
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> :)</p>",
        "id": 226400466,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613404700
    },
    {
        "content": "<p>I'm on a phone right now so limited capabilities, but that thread mentioned y'all digging around in rlibs but if things haven't changed since I last looked I think that the rdl symbols should appear in libstds object files, not the rlib</p>",
        "id": 226401180,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613404910
    },
    {
        "content": "<p>I know that musl also has a default mode in the compiler whether it's static or dynamic but I don't think that would affect this, it's another vector something could possibly go wrong though</p>",
        "id": 226401355,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613404948
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116015\">Alex Crichton</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/226401355\">said</a>:</p>\n<blockquote>\n<p>I know that musl also has a default mode in the compiler whether it's static or dynamic but I don't think that would affect this, it's another vector something could possibly go wrong though</p>\n</blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> patched that to use dynamic by default IIRC</p>",
        "id": 226401645,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613405030
    },
    {
        "content": "<p>FWIW, alpine didn't patch the existing targets, it added new targets that are the same except for that opt</p>",
        "id": 226401829,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613405075
    },
    {
        "content": "<p>we use the cross gcc for linking on the target</p>",
        "id": 226421868,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613417025
    },
    {
        "content": "<p>s390x doesn’t have a musl target so i made one.  i don’t think mine is correct and so we wind up with no allocator implementation</p>",
        "id": 226421939,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613417085
    },
    {
        "content": "<p>anyway rust has been updated so going to reattempt the bootstrap in a few</p>",
        "id": 226424048,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613418482
    },
    {
        "content": "<p>the bootstrap procedure failed to build libc crate for s390x, i am rerunning it while capturing logs (oops)</p>",
        "id": 226429344,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613422745
    },
    {
        "content": "<p>this is on 1.50</p>",
        "id": 226429361,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613422757
    },
    {
        "content": "<p>This is a new error yeah? Further along than befor?</p>",
        "id": 226429385,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1613422775
    },
    {
        "content": "<p>yes, new error</p>",
        "id": 226429396,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613422786
    },
    {
        "content": "<p>i think we got past the std error</p>",
        "id": 226429410,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613422800
    },
    {
        "content": "<p>(of course the real test will be making sure the cross compiler can compile itself on my frankenstein z13 mainframe that i built out of 5 broken ones bought from salvage auctions)</p>",
        "id": 226429556,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613422881
    },
    {
        "content": "<p>and here's the log: <a href=\"https://distfiles.dereferenced.org/rust-cross-s390x-1.50-1.log.txt\">https://distfiles.dereferenced.org/rust-cross-s390x-1.50-1.log.txt</a></p>",
        "id": 226432198,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613424865
    },
    {
        "content": "<p>i'm not sure if this is progress or a step backwards tbh</p>",
        "id": 226432459,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613425098
    },
    {
        "content": "<p>yeah that looks like it didn't get as far :( it errors when type checking, not linking. On the bright side, it looks like \"just\" a bug in libc, you might be able to add your own definitions or open a bug report</p>",
        "id": 226432813,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613425415
    },
    {
        "content": "<p>it could be just a bug in libc, but it could also be a bug in the compiler which makes it fail to accept valid code (which we had happening in the past due to e.g. sandiness differences)</p>",
        "id": 226432888,
        "sender_full_name": "nagisa",
        "timestamp": 1613425486
    },
    {
        "content": "<p>could it be an incorrect <code>cfg</code> flag that doesn't account for this platform?</p>",
        "id": 226433207,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1613425758
    },
    {
        "content": "<p>from what i see, the definitions are already there</p>",
        "id": 226433223,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613425774
    },
    {
        "content": "<p>it could be that the s390x-generic-linux-musl target i added is wrong.  can somebody check it?</p>",
        "id": 226433240,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613425802
    },
    {
        "content": "<p>Yeah it could be a target not specifying correct values and so cfgs don't end up being set right</p>",
        "id": 226433293,
        "sender_full_name": "nagisa",
        "timestamp": 1613425831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> are you in a position to run the rustc that was used in the failing compilation?</p>",
        "id": 226433306,
        "sender_full_name": "nagisa",
        "timestamp": 1613425850
    },
    {
        "content": "<p>uhhh... in theory yes</p>",
        "id": 226433331,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613425896
    },
    {
        "content": "<p>in particular <code>/home/kaniini/aports/community/rust/src/rustc-1.50.0-src/build/x86_64-alpine-linux-musl/stage1/bin/rustc --target=s390x-alpine-linux-musl --print cfg</code></p>",
        "id": 226433341,
        "sender_full_name": "nagisa",
        "timestamp": 1613425911
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html?highlight=rustup,link#creating-a-rustup-toolchain\">https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html?highlight=rustup,link#creating-a-rustup-toolchain</a></p>",
        "id": 226433342,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613425912
    },
    {
        "content": "<p>i will have to manually set up the buildroot again, but the artifacts are still there</p>",
        "id": 226433344,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613425913
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>treefort:~/aports/community/rust/src/rustc-1.50.0-src/build/x86_64-alpine-linux-musl/stage1/bin$ ./rustc --target=s390x-alpine-linux-musl --print cfg\ndebug_assertions\ntarget_arch=&quot;s390x&quot;\ntarget_endian=&quot;big&quot;\ntarget_env=&quot;musl&quot;\ntarget_family=&quot;unix&quot;\ntarget_os=&quot;linux&quot;\ntarget_pointer_width=&quot;64&quot;\ntarget_vendor=&quot;alpine&quot;\nunix\n</code></pre></div>",
        "id": 226433666,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613426174
    },
    {
        "content": "<p>that looks reasonable to me</p>",
        "id": 226433713,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613426222
    },
    {
        "content": "<p>I think the reason is that libc doesn't actually have musl s390x code: <a href=\"https://github.com/rust-lang/libc/blob/master/src/unix/linux_like/linux/musl/b64/mod.rs#L154\">https://github.com/rust-lang/libc/blob/master/src/unix/linux_like/linux/musl/b64/mod.rs#L154</a></p>",
        "id": 226433768,
        "sender_full_name": "nagisa",
        "timestamp": 1613426265
    },
    {
        "content": "<p>(I accidentally ended up looking at the gnu folder before heh)</p>",
        "id": 226433836,
        "sender_full_name": "nagisa",
        "timestamp": 1613426301
    },
    {
        "content": "<p>yeah the cfgs look reasonable enough to me.</p>",
        "id": 226433887,
        "sender_full_name": "nagisa",
        "timestamp": 1613426355
    },
    {
        "content": "<p>hmm, this would also likely explain why __rdl_alloc was missing before.</p>",
        "id": 226434035,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613426423
    },
    {
        "content": "<p>if i were to guess, libc comes into play there somehow :)</p>",
        "id": 226434076,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613426434
    },
    {
        "content": "<p>looks like i could adapt the glibc s390x libc code, basically removing the ucontext functions.  the rest of the ABI is identical to glibc on s390x</p>",
        "id": 226434573,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613426563
    },
    {
        "content": "<p>since we have the theoretical ability to crosscompile with cargo to s390x on x86_64 in the alpine packages we ship now, i'll try to generate an s390x patch for libc crate</p>",
        "id": 226436219,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613427176
    },
    {
        "content": "<p>I'd suggest sticking to 1.49, because 1.50 has some problem on s390x -- <a href=\"https://github.com/rust-lang/rust/issues/80810\">#80810</a></p>",
        "id": 226437105,
        "sender_full_name": "cuviper",
        "timestamp": 1613427713
    },
    {
        "content": "<p>its too late, alpine already moved to 1.50</p>",
        "id": 226437198,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613427787
    },
    {
        "content": "<p>well, if that bug manifests for you too, I'd welcome any help in tracking it down...</p>",
        "id": 226452068,
        "sender_full_name": "cuviper",
        "timestamp": 1613428714
    },
    {
        "content": "<p>looks like std and libc will need some help first</p>",
        "id": 226452700,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613429208
    },
    {
        "content": "<p>if its still around by the time that's done, i can dig into it</p>",
        "id": 226452746,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613429249
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ rustc --target s390x-alpine-linux-musl -Z unstable-options --print target-spec-json\nerror: the option `Z` is only accepted on the nightly compiler\n</code></pre></div>\n<p>sigh.  is there any downside to us as a downstream package just switching the channel to nightly?</p>",
        "id": 226453716,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430180
    },
    {
        "content": "<p>because i like when my tools do what i say instead of treating me like an idiot</p>",
        "id": 226453756,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430215
    },
    {
        "content": "<p>or perhaps just making -Z work on stable makes more sense.  who knows</p>",
        "id": 226453924,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430343
    },
    {
        "content": "<p><code>-Z</code> is explicitly meant to be the unstable version of <code>-C</code></p>",
        "id": 226453983,
        "sender_full_name": "cuviper",
        "timestamp": 1613430375
    },
    {
        "content": "<p>i.e. they are stabilized by moving to <code>-C</code></p>",
        "id": 226453993,
        "sender_full_name": "cuviper",
        "timestamp": 1613430403
    },
    {
        "content": "<p>You can temporarily allow unstable features by setting <code>RUSTC_BOOTSTRAP</code>. But yes, -Z flags explicitly guard unstable behaviour.</p>",
        "id": 226453996,
        "sender_full_name": "nagisa",
        "timestamp": 1613430405
    },
    {
        "content": "<p>that's cool.  in the real world, we like when our tools don't gaslight us.</p>",
        "id": 226454001,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430411
    },
    {
        "content": "<p>thanks for the tip re: <code>RUSTC_BOOTSTRAP</code>.  can we stabilize \"--print target-spec-json\"?</p>",
        "id": 226454030,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430455
    },
    {
        "content": "<p>sorry if i seem grouchy, it's because i'm grouchy :)</p>",
        "id": 226454095,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430520
    },
    {
        "content": "<p>the target json is not considered stable, nevermind printing it</p>",
        "id": 226454118,
        "sender_full_name": "cuviper",
        "timestamp": 1613430566
    },
    {
        "content": "<p>JSON target specification are pretty unstable, but I don't see why having this output in some other more informational form would not be fine. I suspect the primary reason there is no stable form of this is because nobody _really_ needed it.</p>",
        "id": 226454120,
        "sender_full_name": "nagisa",
        "timestamp": 1613430568
    },
    {
        "content": "<p>well the problem is that you do occasionally need it, like when setting up CI for libc crate</p>",
        "id": 226454133,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430590
    },
    {
        "content": "<p>it might be nice to mention <code>RUSTC_BOOTSTRAP</code> on that error message, like</p>",
        "id": 226454252,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/226454252\">said</a>:</p>\n<blockquote>\n<p>it might be nice to mention <code>RUSTC_BOOTSTRAP</code> on that error message, like</p>\n</blockquote>\n<p>it's explicitly not recommended though</p>",
        "id": 226454258,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613430691
    },
    {
        "content": "<p>like, bootstrapping is the <em>one</em> time you should use it</p>",
        "id": 226454269,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613430699
    },
    {
        "content": "<p><code>error: the option Z is only accepted on the nightly compiler; use RUSTC_BOOTSTRAP if you know what you're doing</code></p>",
        "id": 226454273,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430704
    },
    {
        "content": "<p>yes, well, in the real world, people are going to do things they shouldn't</p>",
        "id": 226454329,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430727
    },
    {
        "content": "<p>ugh</p>",
        "id": 226454333,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613430737
    },
    {
        "content": "<p>let me find the stream where you can argue about this</p>",
        "id": 226454338,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613430750
    },
    {
        "content": "<p>gatekeeping that knowledge just makes people angry at rust</p>",
        "id": 226454347,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430756
    },
    {
        "content": "<p>you can complain here: <a href=\"#narrow/stream/233931-xxx/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350\">https://rust-lang.zulipchat.com/#narrow/stream/233931-xxx/topic/Require.20users.20to.20confirm.20they.20know.20RUSTC_.E2.80.A6.20compiler-team.23350</a></p>",
        "id": 226454388,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613430781
    },
    {
        "content": "<p>anyway, back on topic.  mips64 has all the magic bits it seems, so i am going to try to go for that one first.</p>",
        "id": 226454603,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613430982
    },
    {
        "content": "<p>and we get to do all of this for riscv64 too, which misses all the same bits as s390x-musl</p>",
        "id": 226455572,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613431855
    },
    {
        "content": "<p>the good news is, now there is a person on github who did all of this for mips64, so i can follow the same path that person did</p>",
        "id": 226455592,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613431883
    },
    {
        "content": "<p>ok, so step 1 seems to be submit the <code>s390x-unknown-linux-musl</code> target to rust devs.  then we can enable CI for the libc crate.</p>",
        "id": 226457031,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613433375
    },
    {
        "content": "<p>that is done here if somebody wishes to review it.  <a href=\"https://github.com/rust-lang/rust/pull/82166\">https://github.com/rust-lang/rust/pull/82166</a></p>",
        "id": 226460355,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613437034
    },
    {
        "content": "<p>hmm...</p>\n<div class=\"codehilite\"><pre><span></span><code>/usr/lib/gcc/mips64-alpine-linux-musl/10.2.1/../../../../mips64-alpine-linux-musl/bin/ld: warning: /home/kaniini/aports/community/rust/src/rustc-1.50.0-src/build/x86_64-alpine-linux-musl/stage1-std/mips64-alpine-linux-musl/release/deps/libstd-1f066723f7203cd7.\nso uses -msoft-float (set by /home/kaniini/sysroot-mips64/usr/lib/../lib/crti.o), /home/kaniini/aports/community/rust/src/rustc-1.50.0-src/build/x86_64-alpine-linux-musl/stage1-std/mips64-alpine-linux-musl/release/deps/std-1f066723f7203cd7.std.9yg3cm60-cgu.1.rcgu.o uses\n -mhard-float\n</code></pre></div>",
        "id": 226464598,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613442422
    },
    {
        "content": "<p>how do i tell rust i want soft-float?</p>",
        "id": 226464604,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613442431
    },
    {
        "content": "<p>other than that, it built me a rustc.  just failed to link cause hard float</p>",
        "id": 226464609,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613442444
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> got soft-float working at some point</p>",
        "id": 226465240,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613443430
    },
    {
        "content": "<p>Here, it goes in the target json file: <a href=\"https://github.com/openwrt/packages/pull/13916/files?file-filters%5B%5D=.mk&amp;file-filters%5B%5D=.patch&amp;file-filters%5B%5D=.sh&amp;file-filters%5B%5D=No+extension#diff-06b70a60a4749faaeb6148bd8b0cab4d4072bad41addc24d2782cfd9151150d5R9\">https://github.com/openwrt/packages/pull/13916/files?file-filters%5B%5D=.mk&amp;file-filters%5B%5D=.patch&amp;file-filters%5B%5D=.sh&amp;file-filters%5B%5D=No+extension#diff-06b70a60a4749faaeb6148bd8b0cab4d4072bad41addc24d2782cfd9151150d5R9</a></p>",
        "id": 226465314,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613443523
    },
    {
        "content": "<p>Oh God GitHub what is that url lol</p>",
        "id": 226465316,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613443533
    },
    {
        "content": "<p>cool ok, i'll patch the target :)</p>",
        "id": 226465377,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613443624
    },
    {
        "content": "<p>alright, doing another mips build :)</p>",
        "id": 226465924,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613444367
    },
    {
        "content": "<p>You're rebuilding enough you may want to turn on incremental so it doesn't take as long</p>",
        "id": 226466161,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613444604
    },
    {
        "content": "<p><code>incremental = true</code> in config.toml, I think it goes under <code>[rust]</code></p>",
        "id": 226466172,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613444626
    },
    {
        "content": "<p>still more linking problems.  <a href=\"https://tpaste.us/BEzk\">https://tpaste.us/BEzk</a></p>",
        "id": 226467627,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613446626
    },
    {
        "content": "<p>ok cool i figured out how to use incremental to make my life more pleasant</p>",
        "id": 226467769,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613446835
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>          /usr/lib/gcc/mips64-alpine-linux-musl/10.2.1/../../../../mips64-alpine-linux-musl/bin/ld: BFD (GNU Binutils) 2.35.1 assertion fail elfxx-mips.c:3591\n          /usr/lib/gcc/mips64-alpine-linux-musl/10.2.1/../../../../mips64-alpine-linux-musl/bin/ld: BFD (GNU Binutils) 2.35.1 assertion fail elfxx-mips.c:3591\n</code></pre></div>\n<p>this looks like a bug in the linker <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 226467772,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613446843
    },
    {
        "content": "<p>its not</p>",
        "id": 226467787,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613446874
    },
    {
        "content": "<p>unless you mean rust's linker</p>",
        "id": 226467788,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613446880
    },
    {
        "content": "<p>that toolchain compiled the entire alpine base system before compiling rust.  it's fine</p>",
        "id": 226467793,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613446896
    },
    {
        "content": "<p>I mean, compiling alpine and having a bug on code generated by rustc are not mutually exclusive</p>",
        "id": 226467803,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613446921
    },
    {
        "content": "<p>I don't know what this means though:</p>\n<div class=\"codehilite\"><pre><span></span><code>  = note: /usr/lib/gcc/mips64-alpine-linux-musl/10.2.1/../../../../mips64-alpine-linux-musl/bin/ld: skipping incompatible /usr/lib/libssp_nonshared.a when searching for -lssp_nonshared\n          /usr/lib/gcc/mips64-alpine-linux-musl/10.2.1/../../../../mips64-alpine-linux-musl/bin/ld: skipping incompatible /usr/lib/libgcc_s.so.1 when searching for libgcc_s.so.1\n          /usr/lib/gcc/mips64-alpine-linux-musl/10.2.1/../../../../mips64-alpine-linux-musl/bin/ld: skipping incompatible /usr/lib/libgcc_s.so.1 when searching for libgcc_s.so.1\n          /usr/lib/gcc/mips64-alpine-linux-musl/10.2.1/../../../../mips64-alpine-linux-musl/bin/ld: skipping incompatible /usr/lib/libc.so when searching for -lc\n          /usr/lib/gcc/mips64-alpine-linux-musl/10.2.1/../../../../mips64-alpine-linux-musl/bin/ld: skipping incompatible /usr/lib/libc.a when searching for -lc\n</code></pre></div>",
        "id": 226467847,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613446945
    },
    {
        "content": "<p><code>\"-L\" \"native=/usr/lib\"</code></p>",
        "id": 226468243,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613447462
    },
    {
        "content": "<p>should this not be the sysroot path?</p>",
        "id": 226468250,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613447468
    },
    {
        "content": "<p>you could see what cargo passes for <code>-L</code> maybe</p>",
        "id": 226469269,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613448497
    },
    {
        "content": "<p>nah its something else.</p>\n<div class=\"codehilite\"><pre><span></span><code>treefort:~/aports/community/rust$ mips64-alpine-linux-musl-gcc -o foo foo.c\n/usr/lib/gcc/mips64-alpine-linux-musl/10.2.1/../../../../mips64-alpine-linux-musl/bin/ld: cannot find Scrt1.o: No such file or directory\n/usr/lib/gcc/mips64-alpine-linux-musl/10.2.1/../../../../mips64-alpine-linux-musl/bin/ld: cannot find crti.o: No such file or directory\n/usr/lib/gcc/mips64-alpine-linux-musl/10.2.1/../../../../mips64-alpine-linux-musl/bin/ld: cannot find -lssp_nonshared\ncollect2: error: ld returned 1 exit status\n</code></pre></div>",
        "id": 226469430,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613448687
    },
    {
        "content": "<p>i reconstructed the environment wrong it seems</p>",
        "id": 226469445,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613448706
    },
    {
        "content": "<p>ok got it now</p>",
        "id": 226469843,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613449161
    },
    {
        "content": "<p>hmm, how can i make it not delete the tmpdir it makes</p>",
        "id": 226470331,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613449629
    },
    {
        "content": "<p><code>rustc -C save-temps=yes</code></p>",
        "id": 226470344,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613449664
    },
    {
        "content": "<p>how do i do that with this x.py thing</p>",
        "id": 226470412,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613449722
    },
    {
        "content": "<p>hmm, depends what stage fails to build</p>",
        "id": 226470419,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613449737
    },
    {
        "content": "<p>can you run <em>without</em> -vv and show me the output just before the error?</p>",
        "id": 226470429,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613449751
    },
    {
        "content": "<p>for stage0 it will be <code>RUSTFLAGS_BOOTSTRAP</code>, for everything else it's <code>RUSTFLAGS_NOT_BOOTSTRAP</code></p>",
        "id": 226470438,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613449771
    },
    {
        "content": "<p>wow, setting that is making it rebuild everything</p>",
        "id": 226470527,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613449841
    },
    {
        "content": "<p>grrrrr</p>",
        "id": 226470528,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613449843
    },
    {
        "content": "<p>next time you could find the last command it executes and just tack the flag onto that</p>",
        "id": 226470567,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613449901
    },
    {
        "content": "<p>instead of going through x.py</p>",
        "id": 226470571,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613449905
    },
    {
        "content": "<p>yeah <code>ash</code> has a limit to how much you can input at once</p>",
        "id": 226470625,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613449945
    },
    {
        "content": "<p>you could save it to a tempfile and run that maybe</p>",
        "id": 226470635,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613449974
    },
    {
        "content": "<p>with my luck it will just work now</p>",
        "id": 226470952,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450233
    },
    {
        "content": "<p>hmm.  actually, this elfxx-mips thing might be \"it\"</p>",
        "id": 226471034,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450300
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  /* Once we determine the global GOT entry with the lowest dynamic\n     symbol table index, we must put all dynamic symbols with greater\n     indices into the primary GOT.  That makes it easy to calculate the\n     GOT offset.  */\n  BFD_ASSERT (h-&gt;dynindx &gt;= global_got_dynindx);\n</code></pre></div>",
        "id": 226471163,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450419
    },
    {
        "content": "<p>this is endianness bug i bet</p>",
        "id": 226471173,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450429
    },
    {
        "content": "<p>h-&gt;dynindx is saved in wrong endianness, evaluates less than 0</p>",
        "id": 226471218,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450469
    },
    {
        "content": "<p>does rustc generate its own binaries at any stage during compilation</p>",
        "id": 226471318,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450557
    },
    {
        "content": "<p>rlib etc</p>",
        "id": 226471321,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450563
    },
    {
        "content": "<p>or are those packaged up with the system toolchain</p>",
        "id": 226471326,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450573
    },
    {
        "content": "<p>I'm not sure. <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_codegen_ssa/\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_codegen_ssa/</a> is the place to look, <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> may know more</p>",
        "id": 226471405,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613450656
    },
    {
        "content": "<p>yeah i’m pretty sure that’s what’s going on</p>",
        "id": 226471520,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450837
    },
    {
        "content": "<p>the ELF headers are probably being written in host byte order instead of the correct order</p>",
        "id": 226471526,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450857
    },
    {
        "content": "<p>there is a way we can find out, but i’m going to take a break first</p>",
        "id": 226471612,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450937
    },
    {
        "content": "<p>we could cross to mips64el</p>",
        "id": 226471619,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450945
    },
    {
        "content": "<p>if that works then we have an endianness problem</p>",
        "id": 226471640,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613450966
    },
    {
        "content": "<p>monitoring what processes get spawned i don’t see anything traditional, looks like rustc emits the .o and .rlib itself</p>",
        "id": 226474094,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613453791
    },
    {
        "content": "<p>to confirm this theory going to kick off mips64el build</p>",
        "id": 226474108,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613453811
    },
    {
        "content": "<p>though that isn’t an actual release arch yet</p>",
        "id": 226474116,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613453820
    },
    {
        "content": "<p>When you added your custom target for mips64-alpine-linux-musl, did you create the <a href=\"http://mips64_alpine_linux_musl.rs\">mips64_alpine_linux_musl.rs</a> file and edit <a href=\"http://mod.rs\">mod.rs</a> to know about it?  Also, you'll need to you set MUSL to dynamically linked rather than statically linked in <a href=\"http://linux_musl_base.rs\">linux_musl_base.rs</a> by changing base.crt_static_default = true; to base.crt_static_default = false;</p>",
        "id": 226474560,
        "sender_full_name": "Grommish",
        "timestamp": 1613454339
    },
    {
        "content": "<p>yes, i did</p>",
        "id": 226474571,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454361
    },
    {
        "content": "<p>that’s definitely not what’s happening here</p>",
        "id": 226474628,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454388
    },
    {
        "content": "<p>Ok, sorry I'm playing catchup because I didn't reinstall zulip once I blew my system up :)  What issues are you having?</p>",
        "id": 226474633,
        "sender_full_name": "Grommish",
        "timestamp": 1613454401
    },
    {
        "content": "<p>i’m chasing an issue with binutils 2.35.1 assertion failure</p>",
        "id": 226474646,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454432
    },
    {
        "content": "<p>maybe it is worth upgrading binutils</p>",
        "id": 226474649,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454441
    },
    {
        "content": "<p>but i think the symbol gnu_hash table is being written with incorrect endianness</p>",
        "id": 226474658,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454465
    },
    {
        "content": "<p>I'm running rust 1.49.0 for mips64-musl under Openwrt with gcc10.2 and 2.35.1 binutils.. Got any logs?</p>",
        "id": 226474673,
        "sender_full_name": "Grommish",
        "timestamp": 1613454482
    },
    {
        "content": "<p>the assertion failure would be consistent with that</p>",
        "id": 226474709,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454489
    },
    {
        "content": "<p>this is 1.50</p>",
        "id": 226474714,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454498
    },
    {
        "content": "<p>because other people decided to not listen and upgraded all the way to 1.50</p>",
        "id": 226474728,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454529
    },
    {
        "content": "<p>I can bump the version to test if you think it'll help, but it'll take a few hours sto build out</p>",
        "id": 226474732,
        "sender_full_name": "Grommish",
        "timestamp": 1613454537
    },
    {
        "content": "<p>well i can gather a new build log or i can test my theory with mips64el</p>",
        "id": 226474753,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454572
    },
    {
        "content": "<p>:)</p>",
        "id": 226474755,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454574
    },
    {
        "content": "<p>i think mips64el is better approach</p>",
        "id": 226474763,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454590
    },
    {
        "content": "<p>one question though.</p>",
        "id": 226474765,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454593
    },
    {
        "content": "<p>Ok.. I've got an Octeon3, so I've got a BE SoC</p>",
        "id": 226474810,
        "sender_full_name": "Grommish",
        "timestamp": 1613454606
    },
    {
        "content": "<p>do you use regular GNU ld</p>",
        "id": 226474811,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454606
    },
    {
        "content": "<p>or do you use gold</p>",
        "id": 226474819,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454610
    },
    {
        "content": "<p>gnu</p>",
        "id": 226474829,
        "sender_full_name": "Grommish",
        "timestamp": 1613454624
    },
    {
        "content": "<p>are you 100% sure</p>",
        "id": 226474838,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454640
    },
    {
        "content": "<p>Yes.. Its the OpenWRT build system</p>",
        "id": 226474974,
        "sender_full_name": "Grommish",
        "timestamp": 1613454786
    },
    {
        "content": "<p>Cross compiling from x86_64 to mips64</p>",
        "id": 226474991,
        "sender_full_name": "Grommish",
        "timestamp": 1613454816
    },
    {
        "content": "<p>i am incidentally curious about which o3 board you have</p>",
        "id": 226475095,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454920
    },
    {
        "content": "<p>we have a few ubiquiti edgerouter infinity boards</p>",
        "id": 226475103,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613454941
    },
    {
        "content": "<p>Its a CN7020AAP1.2 from a network security device that was part of a limited &lt;500 device run.. an Itus Networks Shield</p>",
        "id": 226475161,
        "sender_full_name": "Grommish",
        "timestamp": 1613454988
    },
    {
        "content": "<p>dunno that sku</p>",
        "id": 226475297,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613455154
    },
    {
        "content": "<p>Dual core 1ghz SOC</p>",
        "id": 226475348,
        "sender_full_name": "Grommish",
        "timestamp": 1613455204
    },
    {
        "content": "<p>hmm</p>",
        "id": 226475656,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613455562
    },
    {
        "content": "<p>i have an idea</p>",
        "id": 226475690,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613455566
    },
    {
        "content": "<p>i'm going to patch binutils to show me what's up</p>",
        "id": 226475704,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613455597
    },
    {
        "content": "<p>I've got a build going for 1.50.0, we'll see what happens :)</p>",
        "id": 226475716,
        "sender_full_name": "Grommish",
        "timestamp": 1613455612
    },
    {
        "content": "<p>cross i assume</p>",
        "id": 226475764,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613455684
    },
    {
        "content": "<p>in the meantime, i am going to dig into this issue a bit</p>",
        "id": 226475796,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613455715
    },
    {
        "content": "<p>I build both stage1/stage2.. the stage2 are mips64</p>",
        "id": 226475802,
        "sender_full_name": "Grommish",
        "timestamp": 1613455721
    },
    {
        "content": "<p>stage1 is x86_64</p>",
        "id": 226475806,
        "sender_full_name": "Grommish",
        "timestamp": 1613455728
    },
    {
        "content": "<p>i think if i can get it to output what file is open in the assertion failure that would help</p>",
        "id": 226475817,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613455753
    },
    {
        "content": "<p>alright, got a hacked binutils in place, lets see what it says</p>",
        "id": 226476251,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613456218
    },
    {
        "content": "<p><code>WTF condition, file /home/kaniini/aports/community/rust/src/rustc-1.50.0-src/build/x86_64-alpine-linux-musl/stage1-std/mips64-alpine-linux-musl/release/deps/libstd-1f066723f7203cd7.so, dynindx a, global_got_dynindx c</code></p>",
        "id": 226476296,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613456278
    },
    {
        "content": "<p>well... that was unexpected</p>",
        "id": 226476323,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613456283
    },
    {
        "content": "<p>ok perhaps this is not an endianness issue after all</p>",
        "id": 226476356,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613456323
    },
    {
        "content": "<p>does openwrt do any patching to its binutils?</p>",
        "id": 226476366,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613456340
    },
    {
        "content": "<p><a href=\"https://github.com/openwrt/openwrt/tree/master/toolchain/binutils/patches/2.35.1\">https://github.com/openwrt/openwrt/tree/master/toolchain/binutils/patches/2.35.1</a></p>",
        "id": 226476448,
        "sender_full_name": "Grommish",
        "timestamp": 1613456445
    },
    {
        "content": "<p>ok, i applied the patches openwrt uses, lets see if that changes anything</p>",
        "id": 226476773,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613456774
    },
    {
        "content": "<p>ok that didn't change anything</p>",
        "id": 226476894,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613456889
    },
    {
        "content": "<p>lets have a laugh and delete the assert</p>",
        "id": 226476902,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613456897
    },
    {
        "content": "<p>ok assert deleted</p>",
        "id": 226477239,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613457257
    },
    {
        "content": "<p>we are now in YOLO territory :)</p>",
        "id": 226477254,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613457287
    },
    {
        "content": "<p>HOLY FUCK IT BUILT</p>",
        "id": 226477262,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613457297
    },
    {
        "content": "<p>i wasn't expecting that, but whatever</p>",
        "id": 226477277,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613457312
    },
    {
        "content": "<p>:D</p>",
        "id": 226477387,
        "sender_full_name": "Grommish",
        "timestamp": 1613457436
    },
    {
        "content": "<p>and then stage1 x86_64 failed with __rdl_alloc</p>",
        "id": 226477455,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613457531
    },
    {
        "content": "<p>guess that means we're back to verifying a known good cross still works</p>",
        "id": 226477717,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613457835
    },
    {
        "content": "<p>Can you post your <a href=\"http://mips-alpine-linux-musl.rs\">mips-alpine-linux-musl.rs</a> somewhere so i can look at it?</p>",
        "id": 226477793,
        "sender_full_name": "Grommish",
        "timestamp": 1613457922
    },
    {
        "content": "<p><a href=\"https://tpaste.us/byx1\">https://tpaste.us/byx1</a></p>",
        "id": 226478005,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613458129
    },
    {
        "content": "<p>Thanks :) I'll play with it after I verify 1.50 builds out and let you know if i come up with something</p>",
        "id": 226478138,
        "sender_full_name": "Grommish",
        "timestamp": 1613458273
    },
    {
        "content": "<p>sounds good!</p>",
        "id": 226478365,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613458514
    },
    {
        "content": "<p>hmm, and now i am not able to cross x86_64 to aarch64 on 1.50</p>",
        "id": 226494363,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613470097
    },
    {
        "content": "<p>it fails trying to build cargo</p>",
        "id": 226494377,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613470106
    },
    {
        "content": "<p>say std and other crates are not present</p>",
        "id": 226494395,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613470114
    },
    {
        "content": "<p>well this is certainly a setback</p>",
        "id": 226494475,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613470167
    },
    {
        "content": "<p>I've got 1.50.0 build for a x86_64-mips64 to build..  I'll try making an alpine define and see what happens</p>",
        "id": 226549502,
        "sender_full_name": "Grommish",
        "timestamp": 1613497769
    },
    {
        "content": "<p>Your target is going to be the s390x MUSL, correct?</p>",
        "id": 226549962,
        "sender_full_name": "Grommish",
        "timestamp": 1613497975
    },
    {
        "content": "<p>I'm not sure how to test this because I don't have an alpine target to build for..  But, try using this as your triple  <a href=\"/user_uploads/4715/gfdywLvwjDH1kbzp4IMmjS9G/s390x_alpine_linux_musl.rs\">s390x_alpine_linux_musl.rs</a></p>",
        "id": 226552882,
        "sender_full_name": "Grommish",
        "timestamp": 1613499241
    },
    {
        "content": "<p>and remember to add the line to <a href=\"http://mod.rs\">mod.rs</a> for it</p>",
        "id": 226553003,
        "sender_full_name": "Grommish",
        "timestamp": 1613499279
    },
    {
        "content": "<p>Ultimately we need to bootstrap on s390x, mips64[el] and riscv64 to get rust on all release archs.</p>",
        "id": 226589430,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613515100
    },
    {
        "content": "<p>s390x and riscv64 need some actual coding to be done in libc and std crates</p>",
        "id": 226596125,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613519643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332271\">@Grommish</span> where is the latest rust packaging source for openwrt?</p>",
        "id": 226596277,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613519764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> There isn't one yet  I'm still working on integration for use in the repo.  My draft PR (<a href=\"https://github.com/openwrt/packages/pull/13916\">https://github.com/openwrt/packages/pull/13916</a>) works for Mips64 and should work for mips64el, though I don't have a device to test it on.  As I go further and further along with the draft, I'm filling in toolchain targets.</p>",
        "id": 226605958,
        "sender_full_name": "Grommish",
        "timestamp": 1613528433
    },
    {
        "content": "<p>The Rust integration to the OpenWrt build system will take a while, I suspect, at least officially..  I've used the mips64 toolchain to build/run Suricata6 (which requires rust) on my device, so I know at least that part works :)</p>",
        "id": 226606052,
        "sender_full_name": "Grommish",
        "timestamp": 1613528538
    },
    {
        "content": "<p>Im hoping interest picks up as rust becomes more mainstream and other packages start to use it  (eg: <a href=\"https://github.com/pyca/cryptography/issues/5799\">https://github.com/pyca/cryptography/issues/5799</a>) which will help with testing.  Being able to get help with rust compiler options will also be a boon.. I am not a programmers, nor have I ever used Rust.  <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> helped me through the initial stuff as much as he could, given he doesn't know the OpenWrt build system</p>",
        "id": 226606248,
        "sender_full_name": "Grommish",
        "timestamp": 1613528770
    },
    {
        "content": "<p>hmm, i notice you have --host and --build the same</p>",
        "id": 226607664,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613530501
    },
    {
        "content": "<p>maybe i should try that</p>",
        "id": 226607668,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613530504
    },
    {
        "content": "<p>to clarify: we want to wind up with a rustc that runs on a mips64 or s390x or riscv64 machine</p>",
        "id": 226607846,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613530768
    },
    {
        "content": "<p>That would be up to the Rust devs to move those Archs to at least a tier 1.5 support then.  Currently, I build everything I do on a Ubuntu 20.04 WSL2 environment for use ON a Mips64 device, but it's cross-compiled. However, my rustc/cargo is MIPS64..</p>\n<p><code>grommish@DESKTOP-N35LRJ4:~/openwrt/staging_dir/hostpkg/bin$ file rustc\nrustc: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=328487cbd30837b4305b2ccc3618e94495ac069e, for GNU/Linux 3.2.0, not stripped</code></p>\n<p><code>grommish@DESKTOP-N35LRJ4:~/openwrt/staging_dir/hostpkg/bin$ file cargo\ncargo: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=49283db987f1a84804d63250e6843164c09e5b71, for GNU/Linux 3.2.0, not stripped</code></p>",
        "id": 226608288,
        "sender_full_name": "Grommish",
        "timestamp": 1613531274
    },
    {
        "content": "<p>Or rather, they know how to cross for Mips64</p>",
        "id": 226608910,
        "sender_full_name": "Grommish",
        "timestamp": 1613532076
    },
    {
        "content": "<p>yeah we need to get rustc/cargo on s390x/mips/riscv64 :)</p>",
        "id": 226609747,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613533193
    },
    {
        "content": "<p>If <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> can direct me, or direct me to someone who can direct me, I have no issues helping get rustc/cargo for mips64.  In the OpenWrt environment, I can build the installation ipk packages to go on the device once they are built</p>",
        "id": 226614411,
        "sender_full_name": "Grommish",
        "timestamp": 1613538230
    },
    {
        "content": "<p>are you asking how to promote mips64 to tier 2 so the components are available from rustup?</p>",
        "id": 226614464,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613538261
    },
    {
        "content": "<p>you can already cross-compile them yourself</p>",
        "id": 226614470,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613538270
    },
    {
        "content": "<p>well, that's the problem: for whatever reason, i can't even cross aarch64 anymore on 1.50</p>",
        "id": 226615743,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613539836
    },
    {
        "content": "<p>this cross compilation procedure seems very fragile, i think we need to work on improving it</p>",
        "id": 226615751,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613539855
    },
    {
        "content": "<p>understatement of the year lol</p>",
        "id": 226615763,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613539895
    },
    {
        "content": "<p>well, we are all learning together at least.</p>",
        "id": 226615837,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613539988
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 226619657,
        "sender_full_name": "bjorn3",
        "timestamp": 1613544718
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I can create the x86_64-&gt;MIPS64 aware rustc/cargo, yes, but I've yet to create a MIPS64 rustc/cargo binary that can be ran, as a compiler, on a MIPS64 device (at least, that I'm aware of).   I can use my artifacts to compile FOR MIPS64 - from x86_64 - but not _on_ MIPS64, if that makes any sense.  And having rustc/cargo _on_ MIPS64 seems to be <span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> goal</p>",
        "id": 226686737,
        "sender_full_name": "Grommish",
        "timestamp": 1613580426
    },
    {
        "content": "<p>have you cross-compiled a rustc that runs natively on MIPS64?</p>",
        "id": 226686828,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613580467
    },
    {
        "content": "<p>oh wait that's what you said, you haven't</p>",
        "id": 226686929,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613580499
    },
    {
        "content": "<p>ok yeah that's the next step, I would look how CI does this for tier 2 targets</p>",
        "id": 226686975,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613580517
    },
    {
        "content": "<p>That's the ultimate goal..  I can use my x86_64-&gt;MIPS64 yto create binaries for MIPS64 of things I compile with Rustc, but not rustc itself.. Thanks :) I'll look</p>",
        "id": 226687070,
        "sender_full_name": "Grommish",
        "timestamp": 1613580563
    },
    {
        "content": "<p>did you set <code>build=[\"mips...\"]</code>?</p>",
        "id": 226687471,
        "sender_full_name": "nagisa",
        "timestamp": 1613580722
    },
    {
        "content": "<p>from what you described it sounds like you've only set <code>target</code> rather than <code>build</code>.</p>",
        "id": 226687645,
        "sender_full_name": "nagisa",
        "timestamp": 1613580774
    },
    {
        "content": "<p><a href=\"https://github.com/openwrt/packages/pull/13916/files#diff-000828b821201f172a6a3c1b97c5a89fd38753d46e7b0c11e475b7e61a99a24cR35-R53\">https://github.com/openwrt/packages/pull/13916/files#diff-000828b821201f172a6a3c1b97c5a89fd38753d46e7b0c11e475b7e61a99a24cR35-R53</a></p>",
        "id": 226687909,
        "sender_full_name": "Grommish",
        "timestamp": 1613580871
    },
    {
        "content": "<p>Those get passed for every target, and extra are added on top if they choose those options</p>",
        "id": 226688036,
        "sender_full_name": "Grommish",
        "timestamp": 1613580910
    },
    {
        "content": "<p>--build=$(RUSTC_HOST_ARCH)</p>",
        "id": 226688201,
        "sender_full_name": "nagisa",
        "timestamp": 1613580961
    },
    {
        "content": "<p>if I'm reading this right that's indeed what's going to be happening, you're building a compiler that runs on $HOST and can target the $TARGET</p>",
        "id": 226688316,
        "sender_full_name": "nagisa",
        "timestamp": 1613580988
    },
    {
        "content": "<p>Right.. Which is what I need to do for OpenWrt's Build system, because people don't compile on MIPS64 or ARMv7.. yet :)</p>",
        "id": 226688416,
        "sender_full_name": "Grommish",
        "timestamp": 1613581029
    },
    {
        "content": "<p>I believe you'll want <code>--host=$(RUSTC_HOST_ARCH) --build=$(RUSTC_TARGET_ARCH) --target=$(RUSTC_TARGET_ARCH)</code> if you want to run the resulting compiler on mips/etc.</p>",
        "id": 226688453,
        "sender_full_name": "nagisa",
        "timestamp": 1613581042
    },
    {
        "content": "<p>Is there a way to cross-compile Rustc/Cargo to MIPS64 using the existing x86_64-&gt;MIP64 rustc?</p>",
        "id": 226688620,
        "sender_full_name": "Grommish",
        "timestamp": 1613581106
    },
    {
        "content": "<p>Do I just build it again?</p>",
        "id": 226688662,
        "sender_full_name": "Grommish",
        "timestamp": 1613581123
    },
    {
        "content": "<p>you can set <code>rustc = /path/to/rustc</code> in config.toml</p>",
        "id": 226688676,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613581129
    },
    {
        "content": "<p>in a new git worktree</p>",
        "id": 226688732,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613581149
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html?highlight=worktree#working-on-multiple-branches-at-the-same-time\">https://rustc-dev-guide.rust-lang.org/building/suggested.html?highlight=worktree#working-on-multiple-branches-at-the-same-time</a></p>",
        "id": 226688787,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613581170
    },
    {
        "content": "<p>Ok.. So I should run the compile twice.. Once for the cross-enabled chain, and again with that chain to create the target version?  I think I can do that</p>",
        "id": 226688972,
        "sender_full_name": "Grommish",
        "timestamp": 1613581228
    },
    {
        "content": "<p>hmm I feel like x.py should be able to do this automatically</p>",
        "id": 226689111,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613581280
    },
    {
        "content": "<p>that's kind of the point of 2-stage builds</p>",
        "id": 226689125,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613581284
    },
    {
        "content": "<p>You know I consider x.py scary voodoo magik.. But I'm willing to try :D</p>",
        "id": 226689216,
        "sender_full_name": "Grommish",
        "timestamp": 1613581321
    },
    {
        "content": "<p>BTW&gt;.  Getting rid of the full bootstrap saved me about 20 minutes</p>",
        "id": 226689379,
        "sender_full_name": "Grommish",
        "timestamp": 1613581369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"332271\">Grommish</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/226689216\">said</a>:</p>\n<blockquote>\n<p>You know I consider x.py scary voodoo magik.. But I'm willing to try :D</p>\n</blockquote>\n<p>I think <span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> 's suggestion should work: <code>--host=$(RUSTC_HOST_ARCH) --build=$(RUSTC_TARGET_ARCH) --target=$(RUSTC_TARGET_ARCH) </code></p>",
        "id": 226689704,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613581491
    },
    {
        "content": "<p><code>--build</code> needs to be the system on which you are bootstrapping as far as I know. <code>--host</code> and <code>--target</code> describe what to build. <code>--host</code> says what target rustc must be built for. <code>--target</code> says what target libstd must be built for.</p>",
        "id": 226690054,
        "sender_full_name": "bjorn3",
        "timestamp": 1613581602
    },
    {
        "content": "<p>Ah right, i might very well have mixed the two up.</p>",
        "id": 226690406,
        "sender_full_name": "nagisa",
        "timestamp": 1613581737
    },
    {
        "content": "<p>I never get them right ^^</p>",
        "id": 226690473,
        "sender_full_name": "nagisa",
        "timestamp": 1613581764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/226690054\">said</a>:</p>\n<blockquote>\n<p><code>--build</code> needs to be the system on which you are bootstrapping as far as I know. <code>--host</code> and <code>--target</code> describe what to build. <code>--host</code> says what target rustc must be built for. <code>--target</code> says what target libstd must be built for.</p>\n</blockquote>\n<p>This is correct :)</p>",
        "id": 226690538,
        "sender_full_name": "simulacrum",
        "timestamp": 1613581792
    },
    {
        "content": "<p>Do I need to compile for the HOST Build system first, then rebuild for the \"Host\" Target system?  IE: BUild for the x86_64/MIPS64 before building for Mips64/Mips64?  Also, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> , If I <code>x.py dist</code> do I need to specify the other segments?  Currently, I'm using <code>RUST_BACKTRACE=full $(PYTHON) x.py --config ./config.toml dist cargo extended library/std llvm-tools miri</code></p>",
        "id": 226765891,
        "sender_full_name": "Grommish",
        "timestamp": 1613624964
    },
    {
        "content": "<p>Well.. Building with <code>--host</code> and <code>--target</code> set to the MIPS64 with <code>--build</code> as x86_64 falls on its face with libunwind.</p>\n<p><a href=\"https://gist.github.com/Grommish/f9f7790f1326be8e334586ca12e77dd0\">https://gist.github.com/Grommish/f9f7790f1326be8e334586ca12e77dd0</a>  if anyone wants to look.  My apologise to <span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> for seemingly hijacking the thread, but since this isn't a supported arch use case, I kinda don't want to start a new thread on it.  (If it's an issue, I will however)</p>",
        "id": 226773501,
        "sender_full_name": "Grommish",
        "timestamp": 1613633218
    },
    {
        "content": "<p>i mean i appreciate your work on this</p>",
        "id": 226774601,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613634233
    },
    {
        "content": "<p>Well, just let me know :) I don't mind and I want to remain respectful :)  We will see if anyone sees anything in the error log they can fix or if it's something different.</p>",
        "id": 226774833,
        "sender_full_name": "Grommish",
        "timestamp": 1613634441
    },
    {
        "content": "<p>Not sure what you mean by segments. I don't think there should be any problem with specifying as many hosts or targets as you want (comma separated, IIRC, if on CLI).</p>",
        "id": 226792519,
        "sender_full_name": "simulacrum",
        "timestamp": 1613645047
    },
    {
        "content": "<p>That error looks sort of external to me, presumably LLVM isn't configured right somehow - you might try playing with system libunwind enabling in config.toml, but IIRC that's for rustc, not the llvm build.</p>",
        "id": 226792762,
        "sender_full_name": "simulacrum",
        "timestamp": 1613645185
    },
    {
        "content": "<p>Meaning, if I use <code>./x.py dist</code> do I need to specify the <code>cargo extended library/std llvm-tools miri</code> or is it redundant? </p>\n<p>That error is when I try to use the mips64 as the host/target and x86 as the build, but if I have host/build as x86 and target as mips64, it builds fine.  Dunno.. Again, i know it's outside the supported archs for rustc/cargo, but wanted to see if I could get a mips64 rustc/cargo binaries. (rather than x86_64 binaries that knows how to cross-compile for mips64)</p>",
        "id": 226794848,
        "sender_full_name": "Grommish",
        "timestamp": 1613646446
    },
    {
        "content": "<p>Yes, you do, if you want just those - otherwise you'd get more artifacts :)</p>",
        "id": 226795813,
        "sender_full_name": "simulacrum",
        "timestamp": 1613647072
    },
    {
        "content": "<p>The error stops happening without a host mips64 because we then don't need to build LLVM for mips64, I imagine</p>",
        "id": 226795885,
        "sender_full_name": "simulacrum",
        "timestamp": 1613647112
    },
    {
        "content": "<p>Gotcha.. I kinda want everything right now for testing..  Ah, see, my knowledge base when it comes to the code is almost nil, so I'm feeling my way through it</p>",
        "id": 226795987,
        "sender_full_name": "Grommish",
        "timestamp": 1613647183
    },
    {
        "content": "<p>In our case, we have an LLVM for the target already, which we use</p>",
        "id": 226905701,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613695209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/226905701\">said</a>:</p>\n<blockquote>\n<p>In our case, we have an LLVM for the target already, which we use</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> I don't do programming..  LLVM is like an assembler?  What else woukd it be called that I might know it as under mips64?</p>",
        "id": 226916342,
        "sender_full_name": "Grommish",
        "timestamp": 1613705496
    },
    {
        "content": "<p>LLVM is a library which consumes IR from rustc and generates assembly / machine object code</p>",
        "id": 226916409,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613705537
    },
    {
        "content": "<p>Ok, but if LLVM doesn't support mips64, we are dead-ended if it won't build without.  The only other option might be a mip64 n32 build to see if mips llvm can be used?</p>",
        "id": 226916543,
        "sender_full_name": "Grommish",
        "timestamp": 1613705672
    },
    {
        "content": "<p>Unless you've got something else I can use in it's place?  I can just add the alternate package to the build system and point rust at it</p>",
        "id": 226916587,
        "sender_full_name": "Grommish",
        "timestamp": 1613705745
    },
    {
        "content": "<p>Sorry, I know it's frustrating.  I don't ever have to use what gets built, so I don't know about the various pieces.. I just make them work, if possible.  But, I'm persistent, so if there is a way, you are welcome to help me with the info I don't know :)</p>",
        "id": 226916852,
        "sender_full_name": "Grommish",
        "timestamp": 1613706062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"332271\">Grommish</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/226916543\">said</a>:</p>\n<blockquote>\n<p>Ok, but if LLVM doesn't support mips64, we are dead-ended if it won't build without.  The only other option might be a mip64 n32 build to see if mips llvm can be used?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> said they already have a pre-built llvm, so it shouldn't be an issue</p>",
        "id": 226917153,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613706427
    },
    {
        "content": "<p>Yeah LLVM definitely supports mips64</p>",
        "id": 226917391,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613706730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209168\">@Thom Chiovoloni</span> Any thoughts on the llvm error above when attempting to builds a mips64 rustc target?  I'm building all the submodules from the repo, so I'm using the llvm included</p>",
        "id": 226917483,
        "sender_full_name": "Grommish",
        "timestamp": 1613706884
    },
    {
        "content": "<p>Sadly no :(</p>",
        "id": 226917502,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1613706911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Ah, ok, unless I can get a copy of it, I'm finished with what I can do.  Woudl that be possibel <span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> ?</p>",
        "id": 226917522,
        "sender_full_name": "Grommish",
        "timestamp": 1613706948
    },
    {
        "content": "<p>If not, i can just update the repo to patch for the s390x-musl target in case you want to fork it and continue locally</p>",
        "id": 226917578,
        "sender_full_name": "Grommish",
        "timestamp": 1613707002
    },
    {
        "content": "<p>you can probably just download the llvm mips64 packages from alpine and use those inside your sysroot</p>",
        "id": 226917581,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613707010
    },
    {
        "content": "<p><a href=\"https://pkgs.alpinelinux.org/packages?name=llvm*&amp;branch=edge&amp;arch=mips64\">https://pkgs.alpinelinux.org/packages?name=llvm*&amp;branch=edge&amp;arch=mips64</a> ?  These?</p>",
        "id": 226917741,
        "sender_full_name": "Grommish",
        "timestamp": 1613707212
    },
    {
        "content": "<p>yeah</p>",
        "id": 226920343,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613710218
    },
    {
        "content": "<p>so, i'm not sure how to proceed.  would it be helpful if i set up an alpine dev environment with cross-toolchain that people can SSH into and play with?</p>",
        "id": 226958238,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1613738815
    },
    {
        "content": "<p>Since that llvm is already in mips64, i can't use it to build with.. so, I'll look at a qemu system to try</p>",
        "id": 227039592,
        "sender_full_name": "Grommish",
        "timestamp": 1613773625
    },
    {
        "content": "<p>In which case I'll be using Win10 WSL2 to Ubunto 20.04 to QEMU Mips Malta to build.. oh boy, what could go wrong</p>",
        "id": 227039670,
        "sender_full_name": "Grommish",
        "timestamp": 1613773673
    },
    {
        "content": "<p>and I'll tryh to get the octeon stretch working instead of malta, but I want to see what success looks like</p>",
        "id": 227039808,
        "sender_full_name": "Grommish",
        "timestamp": 1613773747
    },
    {
        "content": "<p>i'm still confused as to why rust 1.50  broke cross compiling period.  i can't cross compile between known good targets anymore, which i was able to do with 1.47</p>",
        "id": 227276836,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614005213
    },
    {
        "content": "<p>i think that we're going to need to attack that somehow, before we can continue bootstrap process</p>",
        "id": 227276887,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614005242
    },
    {
        "content": "<p>hooray, now curl is going rust.  guess that means this is now even more urgent.</p>",
        "id": 227294301,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614011126
    },
    {
        "content": "<p>I thought curl just had an optional rust backend?</p>",
        "id": 227294346,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614011152
    },
    {
        "content": "<p>It now supports rustls as a TLS backend IIRC</p>",
        "id": 227294509,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1614011202
    },
    {
        "content": "<p>It also gaining support for hyper as an H1 and H2 implementation.</p>",
        "id": 227294584,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1614011231
    },
    {
        "content": "<p>yes, and <code>curl</code> is now restricted in alpine, because we can't enable those</p>",
        "id": 227295224,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614011455
    },
    {
        "content": "<p>because i have been toiling in the rustc cross-compilation mines with no success for the past month</p>",
        "id": 227295261,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614011470
    },
    {
        "content": "<p>this has been failure, after failure, and i don't know what to do</p>",
        "id": 227295339,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614011510
    },
    {
        "content": "<p>i had working cross compilation (to known-good targets) with 1.47 and <code>x.py dist</code>, but 1.50 is broken again</p>",
        "id": 227295442,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614011536
    },
    {
        "content": "<p>i am so very tired</p>",
        "id": 227295498,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614011565
    },
    {
        "content": "<p>i do not think mgorny's behavior towards the python-cryptography team was acceptable, but i can understand it.</p>",
        "id": 227295616,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614011608
    },
    {
        "content": "<p>making rust work on these missing archs has driven my imposter syndrome to new highs i did not even know existed</p>",
        "id": 227295734,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614011646
    },
    {
        "content": "<p>this task has literally caused mental health issues for me</p>",
        "id": 227295800,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614011676
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/227295734\">said</a>:</p>\n<blockquote>\n<p>making rust work on these missing archs has driven my imposter syndrome to new highs i did not even know existed</p>\n</blockquote>\n<p>if it makes you feel better, every one I've talked to has had trouble cross-compiling :/</p>",
        "id": 227295808,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614011678
    },
    {
        "content": "<p>@infinity0 on github might have suggestions</p>",
        "id": 227295825,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614011688
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/227295800\">said</a>:</p>\n<blockquote>\n<p>this task has literally caused mental health issues for me</p>\n</blockquote>\n<p>have you considered taking a break?</p>",
        "id": 227295859,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614011702
    },
    {
        "content": "<p>i don't need to take a break, i did that this weekend.  what i need is to figure out a solution.</p>",
        "id": 227296008,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614011762
    },
    {
        "content": "<p>at this point, this is going to bug me until we have a win.</p>",
        "id": 227296063,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614011772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/226494395\">said</a>:</p>\n<blockquote>\n<p>say std and other crates are not present</p>\n</blockquote>\n<p>can you post that full error?</p>",
        "id": 227296217,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614011840
    },
    {
        "content": "<p>let me see what i can come up with, i think we can do an incremental build</p>",
        "id": 227298013,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614012543
    },
    {
        "content": "<p>incremental should speed this up a lot, yeah</p>",
        "id": 227298110,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614012576
    },
    {
        "content": "<p>i still have the artifacts from an aarch64 cross attempt (which was working in 1.47)</p>",
        "id": 227298565,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614012739
    },
    {
        "content": "<p>well, if you have incremental artifacts from 1.47 they won't be usable with a 1.50 toolchain</p>",
        "id": 227298723,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614012800
    },
    {
        "content": "<p>what i mean is, x86_64 -&gt; aarch64 broke again in 1.50, the artifacts are from 1.50</p>",
        "id": 227298768,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614012821
    },
    {
        "content": "<p>it might be useful to get 1.47 working first, since it sounds like there was a regression in bootstrap</p>",
        "id": 227298861,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614012848
    },
    {
        "content": "<p>i can't</p>",
        "id": 227298918,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614012877
    },
    {
        "content": "<p>that would involve downgrading rust to 1.47</p>",
        "id": 227298938,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614012885
    },
    {
        "content": "<p>ah well fair enough</p>",
        "id": 227298951,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614012891
    },
    {
        "content": "<p>and that does us nothing useful anyway, because s390x-musl and riscv64-musl are missing things there</p>",
        "id": 227299027,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614012918
    },
    {
        "content": "<p>ok, i had to blast away the artifacts because they were broken</p>",
        "id": 227299289,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013003
    },
    {
        "content": "<p>see you in 45 min</p>",
        "id": 227299325,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013017
    },
    {
        "content": "<p>fwiw the bootstrap times went down like 20% last week, if you rebase you'd get faster compiles</p>",
        "id": 227299411,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013044
    },
    {
        "content": "<p><a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/bootstrap.20times.20went.20down.2020.25.20percent.20on.20Feb.2020\">https://rust-lang.zulipchat.com/#narrow/stream/247081-t-compiler.2Fperformance/topic/bootstrap.20times.20went.20down.2020.25.20percent.20on.20Feb.2020</a></p>",
        "id": 227299436,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013052
    },
    {
        "content": "<p>That's going to give a nightly, not 1.50, sadly.</p>",
        "id": 227299595,
        "sender_full_name": "nagisa",
        "timestamp": 1614013106
    },
    {
        "content": "<p>oh right, I forgot this is for a distro</p>",
        "id": 227299639,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013124
    },
    {
        "content": "<p>i look forward to that feature in 1.51</p>",
        "id": 227299706,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013147
    },
    {
        "content": "<p>it will be in 1.52</p>",
        "id": 227299726,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013153
    },
    {
        "content": "<p>1.51 is currently in beta</p>",
        "id": 227299739,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013157
    },
    {
        "content": "<p>oh, ok</p>",
        "id": 227299756,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013162
    },
    {
        "content": "<p>well 1.52 will likely be out before alpine 3.14 is cut</p>",
        "id": 227299781,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013170
    },
    {
        "content": "<p><a href=\"https://forge.rust-lang.org/#current-release-versions\">https://forge.rust-lang.org/#current-release-versions</a></p>",
        "id": 227299788,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013174
    },
    {
        "content": "<p>i figure the s390x/riscv64 libc/std crate work will be in 1.52</p>",
        "id": 227300109,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013261
    },
    {
        "content": "<p>immediate goal is mips64 since everything should theoretically be there for that</p>",
        "id": 227300150,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013276
    },
    {
        "content": "<p>but before even that, aarch64 is the goal, since we know we can do that one (we did it in 1.47)</p>",
        "id": 227300199,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/227300199\">said</a>:</p>\n<blockquote>\n<p>but before even that, aarch64 is the goal, since we know we can do that one (we did it in 1.47)</p>\n</blockquote>\n<p>CI builds for aarch64 I think</p>",
        "id": 227300248,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013313
    },
    {
        "content": "<p>you should be able to just copy what it does</p>",
        "id": 227300265,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013319
    },
    {
        "content": "<p>to be clear: we have rust working fine on aarch64</p>",
        "id": 227300377,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013343
    },
    {
        "content": "<p>this is just to make sure the cross is working</p>",
        "id": 227300398,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013352
    },
    {
        "content": "<p>right, CI also cross compiles</p>",
        "id": 227300428,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013364
    },
    {
        "content": "<p>we don't have any aarch64 hosts AFAIK</p>",
        "id": 227300452,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013371
    },
    {
        "content": "<p>do you want one?</p>",
        "id": 227300462,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013376
    },
    {
        "content": "<p>heh, that's a question for <a class=\"stream\" data-stream-id=\"242791\" href=\"/#narrow/stream/242791-t-infra\">#t-infra</a></p>",
        "id": 227300480,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013387
    },
    {
        "content": "<p>let me put it this way, i'll make it rain infra if it makes my life easier</p>",
        "id": 227300547,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is that something t-infra is interested in? having native aarch64 hosts for CI?</p>",
        "id": 227300605,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013428
    },
    {
        "content": "<p>FWIW there is an aarch64 host that runs tests, donated by some vendor. It was a requirement for aarch64-linux-glibc going tier 1.</p>",
        "id": 227300722,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1614013462
    },
    {
        "content": "<p>Yeah, I think we do have at least one.</p>",
        "id": 227300756,
        "sender_full_name": "simulacrum",
        "timestamp": 1614013481
    },
    {
        "content": "<p>i want to make dynamicly linked musl tier 1</p>",
        "id": 227300770,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013489
    },
    {
        "content": "<p>oh right, it was aarch64-darwin that we couldn't find hosts for</p>",
        "id": 227300791,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013498
    },
    {
        "content": "<p>because then my life is really easy</p>",
        "id": 227300797,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013500
    },
    {
        "content": "<p>because all they had was M1 laptops <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 227300828,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614013508
    },
    {
        "content": "<p>oh, i cannot help you there.</p>",
        "id": 227300848,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013513
    },
    {
        "content": "<p>It should be possible to make it tier 1 in the long run, I imagine, but I also think tier 2 would likely meet most of your needs :)</p>",
        "id": 227300903,
        "sender_full_name": "simulacrum",
        "timestamp": 1614013533
    },
    {
        "content": "<p>the only aarch64 machines i have are thunderx2 and honeycomb boards</p>",
        "id": 227300913,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013537
    },
    {
        "content": "<p>i think today i will submit the riscv64 musl target, and perhaps begin work on a set of dynamic musl targets (<code>-dynmusl</code> seems to be the preferred name)</p>",
        "id": 227301086,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013590
    },
    {
        "content": "<p>just getting dynmusl done in 1.52 would make life a lot easier</p>",
        "id": 227301220,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013636
    },
    {
        "content": "<p>that would basically take our patch count down to zero</p>",
        "id": 227301269,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614013660
    },
    {
        "content": "<p>hmmph, that s390x target still hasn't been merged</p>",
        "id": 227302365,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614014043
    },
    {
        "content": "<p>yeah bors has been behind the last week or so</p>",
        "id": 227302622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614014112
    },
    {
        "content": "<p>oh, there is a riscv64gc-unknown-linux-musl target now</p>",
        "id": 227302998,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614014263
    },
    {
        "content": "<p>cool, work i don't have to do :)</p>",
        "id": 227303020,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614014269
    },
    {
        "content": "<p>The queue is <a href=\"https://bors.rust-lang.org/queue/rust\">pretty long</a>, yeah.</p>",
        "id": 227303365,
        "sender_full_name": "nagisa",
        "timestamp": 1614014370
    },
    {
        "content": "<p>going to try to get some more alpine devs in here</p>",
        "id": 227303493,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614014405
    },
    {
        "content": "<p>Building stage1 std artifacts (x86_64-alpine-linux-musl -&gt; aarch64-alpine-linux-musl)</p>",
        "id": 227303644,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614014453
    },
    {
        "content": "<p>ok it should explode momentarily</p>",
        "id": 227303661,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614014458
    },
    {
        "content": "<p>redoing this as an incremental build</p>",
        "id": 227304427,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614014755
    },
    {
        "content": "<p>ok, i've been fighting a fuckup of my own doing</p>",
        "id": 227305461,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614015138
    },
    {
        "content": "<p>i was using the wrong <code>$EXTRADEPENDS</code> env vars so the cross env was not properly set up</p>",
        "id": 227305776,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614015262
    },
    {
        "content": "<p>(that's an alpine thing)</p>",
        "id": 227305822,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614015280
    },
    {
        "content": "<p>ok, it appears aarch64 cross might actually work after all.  fingers crossed.</p>",
        "id": 227308910,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614016395
    },
    {
        "content": "<p>if so, then i will try again with mips64</p>",
        "id": 227308945,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614016408
    },
    {
        "content": "<p>that means the next objective would be the <code>dynmusl</code> targets, so we can drop our patches</p>",
        "id": 227308997,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614016435
    },
    {
        "content": "<p>ok, aarch64 cross has gotten to <code>rustdoc</code></p>",
        "id": 227309521,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614016621
    },
    {
        "content": "<p>i think its gonna work</p>",
        "id": 227309567,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614016633
    },
    {
        "content": "<p>Congrats!</p>",
        "id": 227309785,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614016709
    },
    {
        "content": "<p>Dist rustc-dev-1.50.0-aarch64-alpine-linux-musl</p>",
        "id": 227310770,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017087
    },
    {
        "content": "<p>ok, it's going to work</p>",
        "id": 227310790,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017095
    },
    {
        "content": "<p>now its building <code>cargo</code></p>",
        "id": 227311311,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017315
    },
    {
        "content": "<p>So most of the stoppages have been in rustbuild?</p>",
        "id": 227311346,
        "sender_full_name": "Jubilee",
        "timestamp": 1614017330
    },
    {
        "content": "<p>yeah</p>",
        "id": 227311428,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017381
    },
    {
        "content": "<p>i spent 4 months figuring out that <code>x.py build</code> is broken and <code>x.py dist</code> is not</p>",
        "id": 227311558,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017418
    },
    {
        "content": "<p>So when you actually get to the point of building cargo it's usually home safe, sounds like.</p>",
        "id": 227311632,
        "sender_full_name": "Jubilee",
        "timestamp": 1614017448
    },
    {
        "content": "<p>well, we will see :)</p>",
        "id": 227311648,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017457
    },
    {
        "content": "<p>it has failed to link cargo before</p>",
        "id": 227311656,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017463
    },
    {
        "content": "<p>it has also succeeded in linking cargo</p>",
        "id": 227311874,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017540
    },
    {
        "content": "<p>we will know soon enough :D</p>",
        "id": 227311902,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017554
    },
    {
        "content": "<p>I saw a few tickets up thread but is there a ticket tracking the issues in rustbuild that you've run into?</p>",
        "id": 227312457,
        "sender_full_name": "Jubilee",
        "timestamp": 1614017780
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Finished release [optimized] target(s) in 9m 19s\n</code></pre></div>",
        "id": 227312508,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017802
    },
    {
        "content": "<p>holy shit</p>",
        "id": 227312518,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017807
    },
    {
        "content": "<p>uhh, i'll make one about the x.py build vs dist</p>",
        "id": 227312551,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017820
    },
    {
        "content": "<p>if you read through this one, you'll see someone told me x.py build is broken and once that info was disseminated we made some progress</p>",
        "id": 227312640,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017858
    },
    {
        "content": "<p>yes there's an existing one about that</p>",
        "id": 227312770,
        "sender_full_name": "simulacrum",
        "timestamp": 1614017901
    },
    {
        "content": "<p>no need to file more :)</p>",
        "id": 227312782,
        "sender_full_name": "simulacrum",
        "timestamp": 1614017905
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/81702\">https://github.com/rust-lang/rust/issues/81702</a> at least</p>",
        "id": 227312845,
        "sender_full_name": "simulacrum",
        "timestamp": 1614017936
    },
    {
        "content": "<p>cool</p>",
        "id": 227312860,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614017944
    },
    {
        "content": "<p>Oh OK, I saw some of the tickets but wasn't sure if all the issues that had come up were being tracked already even after reading <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\n<span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span></p>",
        "id": 227312926,
        "sender_full_name": "Jubilee",
        "timestamp": 1614017972
    },
    {
        "content": "<p>should i note in that ticket that 1.47 was also broken?</p>",
        "id": 227313052,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614018023
    },
    {
        "content": "<p>Do we expect that this solves all of Alpine's needs, modulo upstreaming the dynmusl targets. Or are there other steps required?</p>",
        "id": 227313078,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1614018036
    },
    {
        "content": "<p>no, we need to get s390x and riscv64 musl support finished</p>",
        "id": 227313154,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614018071
    },
    {
        "content": "<p>actual code needs to be written for that</p>",
        "id": 227313186,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614018092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> Yes, that's useful for tracking where the regression/problem began.</p>",
        "id": 227313197,
        "sender_full_name": "Jubilee",
        "timestamp": 1614018095
    },
    {
        "content": "<p><code>Build completed successfully in 1:17:00</code></p>",
        "id": 227316956,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614019692
    },
    {
        "content": "<p>going to turn that into APKs just to be sure :)</p>",
        "id": 227317002,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614019724
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&gt;&gt;&gt; rust-dbg*: Running split function dbg...\naarch64-alpine-linux-musl-objcopy: Unable to recognise the format of the input file `rust-llvm-dwp&#39;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>~/aports/community/rust $ file pkg/rust/usr/lib/rustlib/aarch64-alpine-linux-musl/bin/rust-llvm-dwp\npkg/rust/usr/lib/rustlib/aarch64-alpine-linux-musl/bin/rust-llvm-dwp: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-musl-x86_64.so.1, stripped\n</code></pre></div>",
        "id": 227321195,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614021258
    },
    {
        "content": "<p>what is rust-llvm-dwp?</p>",
        "id": 227321220,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614021272
    },
    {
        "content": "<p>it's used for split-dwarf I think: <a href=\"https://github.com/rust-lang/rust/pull/80087\">https://github.com/rust-lang/rust/pull/80087</a></p>",
        "id": 227321318,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614021318
    },
    {
        "content": "<p>looks like fedora just nukes it</p>",
        "id": 227321348,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614021334
    },
    {
        "content": "<p>It should be optional IIRC</p>",
        "id": 227321349,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614021334
    },
    {
        "content": "<p>going to do what fedora does</p>",
        "id": 227321374,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614021345
    },
    {
        "content": "<p>BOMBS AWAY</p>",
        "id": 227321388,
        "sender_full_name": "Jubilee",
        "timestamp": 1614021356
    },
    {
        "content": "<p>llvm-dwp is necessary for a currently unstable feature <code>-Csplit-debuginfo=packed</code></p>",
        "id": 227322538,
        "sender_full_name": "nagisa",
        "timestamp": 1614021841
    },
    {
        "content": "<p>Not  a blocker or a huge deal, but probably will become more important over time.</p>",
        "id": 227322632,
        "sender_full_name": "nagisa",
        "timestamp": 1614021867
    },
    {
        "content": "<p>looks like its a bug that we put a x86_64 llvm-dwp into a aarch64 toolchain?</p>",
        "id": 227322723,
        "sender_full_name": "nagisa",
        "timestamp": 1614021916
    },
    {
        "content": "<p>that may be my bug.  i call the host llvm-config</p>",
        "id": 227323216,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614022129
    },
    {
        "content": "<p>but llvm-dwp is on the host regardless if rustc is installed</p>",
        "id": 227323287,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614022163
    },
    {
        "content": "<p>so the internal rust copy isnt needed</p>",
        "id": 227323299,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614022168
    },
    {
        "content": "<p>well, <code>rustc</code> invokes <code>rust-llvm-dwp</code>, not <code>llvm-dwp</code> so you may want to symlink.</p>",
        "id": 227324844,
        "sender_full_name": "nagisa",
        "timestamp": 1614022746
    },
    {
        "content": "<p>but again its a pretty fresh part of the codebase so a) nobody is using that functionality quite yet; b) its probably borken in various ways.</p>",
        "id": 227324982,
        "sender_full_name": "nagisa",
        "timestamp": 1614022797
    },
    {
        "content": "<p>okay, i've made a mental note</p>",
        "id": 227325107,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614022836
    },
    {
        "content": "<p>FWIW I seem to recall seeing a thread about how the author of llvm-dwp didn't think it was a very good codebase and maybe people shouldn't really use it, so there might be evolution in the tooling rust uses for split debuginfo anyways.</p>",
        "id": 227325283,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1614022897
    },
    {
        "content": "<p>mips64 did not go well</p>",
        "id": 227325338,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614022916
    },
    {
        "content": "<p>capturing a build log</p>",
        "id": 227325397,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614022924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130046\">@Alex Gaynor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/llvm-dwp.20is.20not.20recommended\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/llvm-dwp.20is.20not.20recommended</a>?</p>",
        "id": 227325439,
        "sender_full_name": "nagisa",
        "timestamp": 1614022933
    },
    {
        "content": "<p><a href=\"https://tpaste.us/5V1j\">https://tpaste.us/5V1j</a></p>",
        "id": 227325790,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614023075
    },
    {
        "content": "<p>build log :)</p>",
        "id": 227325796,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614023077
    },
    {
        "content": "<p>this is the same error we ran into before, right? with __rdl_alloc?</p>",
        "id": 227326015,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614023155
    },
    {
        "content": "<p>yes</p>",
        "id": 227326261,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614023239
    },
    {
        "content": "<p>i can try a non-incremental build</p>",
        "id": 227326359,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614023280
    },
    {
        "content": "<p>/me runs <code>CHOST=mips64 abuild clean unpack prepare build &amp;&gt;build.log</code></p>",
        "id": 227326819,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614023473
    },
    {
        "content": "<p>i dont think this will do any actual good, but...</p>",
        "id": 227326836,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614023489
    },
    {
        "content": "<p>yeah didnt do any good, same error</p>",
        "id": 227332079,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614025692
    },
    {
        "content": "<p>what is strange is that the failure happens in stage0</p>",
        "id": 227332139,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614025726
    },
    {
        "content": "<p>which is pre-cross, isn't it?</p>",
        "id": 227332159,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614025737
    },
    {
        "content": "<p>stage0 is where it pulls in a compiler and starts building a new std so it can build the next compiler, if memory serves.</p>",
        "id": 227332451,
        "sender_full_name": "Jubilee",
        "timestamp": 1614025864
    },
    {
        "content": "<p>this happens when building stage1-std, which is for the host</p>",
        "id": 227333393,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614026292
    },
    {
        "content": "<p>\"stage0\" is not really defined, it is using the stage 0 compiler though: <a href=\"http://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap\">rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap</a></p>",
        "id": 227333444,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614026314
    },
    {
        "content": "<p>(you can tell stage1-std is for the host because the directory says <code>stage1-std/x86_64-alpine-linux-musl</code>, not mips64)</p>",
        "id": 227333729,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614026440
    },
    {
        "content": "<p>If someone wants to reproduce this from scratch, is there an easy way to do so?</p>",
        "id": 227349377,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1614032469
    },
    {
        "content": "<p>yes.  all you have to do is install alpine, checkout aports.git, run <code>sh scripts/bootstrap.sh mips64</code> to generate a cross-compiler, then you can do <code>CHOST=mips64 abuild -r</code> inside community/rust after adding mips64 to the arch list</p>",
        "id": 227381885,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614055333
    },
    {
        "content": "<p>if it would help, i can create a VM with all of that done ahead of time.</p>",
        "id": 227383484,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614056958
    },
    {
        "content": "<p>my next attempt is going to be to target the mips64-unknown-linux-musl target</p>",
        "id": 227389751,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614063645
    },
    {
        "content": "<p>maybe our target is broken</p>",
        "id": 227389774,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614063672
    },
    {
        "content": "<p>sending it :)</p>",
        "id": 227389921,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614063835
    },
    {
        "content": "<p>alright, lets see if it blows up</p>",
        "id": 227391632,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614065497
    },
    {
        "content": "<p>Building stage1 std artifacts (x86_64-alpine-linux-musl -&gt; x86_64-alpine-linux-musl) :)</p>",
        "id": 227391634,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614065500
    },
    {
        "content": "<p>that didn't do any good, going to try to blast away that <code>[cfg(test)]</code></p>",
        "id": 227392819,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614066505
    },
    {
        "content": "<p>err, <code>[cfg(not(test))]</code></p>",
        "id": 227392960,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614066612
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>075983c70ba2 src/libstd/alloc.rs      (Ralf Jung      2018-11-12 09:00:39 +0100 341)     // These magic symbol names are used as a fallback for implementing the\n99e0d8ed7996 src/libstd/alloc.rs      (Yuki Okushi    2020-04-03 19:03:13 +0900 342)     // `__rust_alloc` etc symbols (see `src/liballoc/alloc.rs`) when there is\n075983c70ba2 src/libstd/alloc.rs      (Ralf Jung      2018-11-12 09:00:39 +0100 343)     // no `#[global_allocator]` attribute.\n</code></pre></div>",
        "id": 227393437,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067032
    },
    {
        "content": "<p>hmm, so there is no #[global_allocator]</p>",
        "id": 227393443,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067042
    },
    {
        "content": "<p><code>library/core/src/macros/mod.rs:    pub macro global_allocator($item:item) {</code></p>",
        "id": 227393784,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067262
    },
    {
        "content": "<p>which is a compiler-builtin</p>",
        "id": 227393815,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067301
    },
    {
        "content": "<p><code>compiler/rustc_metadata/src/creader.rs:            if !data.has_global_allocator() {</code></p>",
        "id": 227393997,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067428
    },
    {
        "content": "<p>this looks promising</p>",
        "id": 227394004,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067434
    },
    {
        "content": "<p>hmm, not really</p>",
        "id": 227394083,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067466
    },
    {
        "content": "<p>digging a little further...</p>\n<div class=\"codehilite\"><pre><span></span><code>        // Ok we haven&#39;t found a global allocator but we still need an\n        // allocator. At this point our allocator request is typically fulfilled\n        // by the standard library, denoted by the `#![default_lib_allocator]`\n        // attribute.\n        let mut has_default = self.sess.contains_name(&amp;krate.attrs, sym::default_lib_allocator);\n</code></pre></div>",
        "id": 227394134,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067526
    },
    {
        "content": "<p>looking for <code>default_lib_allocator</code>...</p>",
        "id": 227394151,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067548
    },
    {
        "content": "<p><code>library/std/src/lib.rs:#![default_lib_allocator]</code></p>",
        "id": 227394238,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067590
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>// NB: the above list is sorted to minimize merge conflicts.\n#![default_lib_allocator]\n</code></pre></div>",
        "id": 227394264,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067626
    },
    {
        "content": "<p>hmm</p>",
        "id": 227394273,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067630
    },
    {
        "content": "<p>well, that is a dead end kinda</p>",
        "id": 227394278,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067636
    },
    {
        "content": "<p>except:</p>",
        "id": 227394293,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067649
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>#[allow(unused_imports)] // macros from `alloc` are not used on all platforms\n#[macro_use]\nextern crate alloc as alloc_crate;\n#[doc(masked)]\n#[allow(unused_extern_crates)]\nextern crate libc;\n</code></pre></div>",
        "id": 227394303,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067660
    },
    {
        "content": "<p>so then perhaps the malloc is learned from libc crate</p>",
        "id": 227394317,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614067678
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>library/std/src/sys_common/alloc.rs:use crate::alloc::{GlobalAlloc, Layout, System};\nlibrary/std/src/sys_common/alloc.rs:    alloc: &amp;System,\n</code></pre></div>",
        "id": 227394975,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614068102
    },
    {
        "content": "<p>[...]</p>",
        "id": 227395191,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614068240
    },
    {
        "content": "<p><code>            libc::malloc(layout.size()) as *mut u8</code></p>",
        "id": 227395214,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614068266
    },
    {
        "content": "<p>so, allocator knowledge is wrapped but ultimately originates in libc crate.</p>",
        "id": 227395226,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614068282
    },
    {
        "content": "<p>which makes sense, because the s390x and riscv64 targets had the same behavior on 1.47 where libc crate had no awareness</p>",
        "id": 227395913,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614068724
    },
    {
        "content": "<p>so, lets see what libc crate got included into 1.50</p>",
        "id": 227395936,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614068743
    },
    {
        "content": "<p>theres 3 different libc crates vendored</p>",
        "id": 227396078,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614068816
    },
    {
        "content": "<p>hmm, all those libc crates have the mips64 stuff</p>",
        "id": 227396288,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614068940
    },
    {
        "content": "<p>so that's not it</p>",
        "id": 227396316,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614068953
    },
    {
        "content": "<p>welp i’m out of ideas for now</p>",
        "id": 227397676,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614069798
    },
    {
        "content": "<p>Is there a <code>#[cfg]</code> or <code>cfg_if!</code> in front of libc::malloc in the standard library?</p>",
        "id": 227429386,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614086994
    },
    {
        "content": "<p>ok yeah this is in <code>sys::unix</code>, which is platform-dependent. Are you sure it's actually being compiled?</p>",
        "id": 227433924,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614088954
    },
    {
        "content": "<p>hmm, it's for any <code>cfg(unix)</code> platform, which I would expect to include s390x: <a href=\"https://github.com/rust-lang/rust/blob/446d4533e89db04f9568be4199e56b5fce0d176d/library/std/src/sys/mod.rs#L29\">https://github.com/rust-lang/rust/blob/446d4533e89db04f9568be4199e56b5fce0d176d/library/std/src/sys/mod.rs#L29</a></p>",
        "id": 227434089,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089029
    },
    {
        "content": "<p>this is mips64</p>",
        "id": 227434161,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089045
    },
    {
        "content": "<p>all of the code to support mips64 on musl is allegedly present in 1.50</p>",
        "id": 227434212,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089065
    },
    {
        "content": "<p>I am confused. So people have gotten mips64 working in the past, but it's failing for you now?</p>",
        "id": 227434310,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089109
    },
    {
        "content": "<p>nobody has gotten rust mips64 working on alpine, but it appears to have all the needed bits.</p>",
        "id": 227434536,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089197
    },
    {
        "content": "<p>presumably, somebody else has gotten mips64 rust working on musl at some point (as there is code for it)</p>",
        "id": 227434578,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089215
    },
    {
        "content": "<p>if i were to guess, it would be loongson team that contributed that code.</p>",
        "id": 227434662,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089239
    },
    {
        "content": "<p>Ok. In that case I would not assume it's working <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> If you cross-compile this program for mips64, does it work?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(unix)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227434679,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089249
    },
    {
        "content": "<p>we're not even at that stage</p>",
        "id": 227434724,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089267
    },
    {
        "content": "<p>if you can't cross-compile <em>any</em> program for mips, you certainly can't cross-compile the standard library</p>",
        "id": 227434801,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089287
    },
    {
        "content": "<p>you might need <code>#![no_std]</code> though</p>",
        "id": 227434845,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089299
    },
    {
        "content": "<p>you're not understanding what i mean</p>",
        "id": 227434855,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089304
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 227434939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089347
    },
    {
        "content": "<p>i am trying to build a cross toolchain for mips64-unknown-linux-muslabi64</p>",
        "id": 227434940,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089348
    },
    {
        "content": "<p>we do not get remotely close to that stage</p>",
        "id": 227435016,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089375
    },
    {
        "content": "<p>because we fail to build x86_64 compiler (stage 1) first</p>",
        "id": 227435083,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089397
    },
    {
        "content": "<p>HOWEVER</p>",
        "id": 227435176,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089415
    },
    {
        "content": "<p>if we try to cross to aarch64-unknown-linux-musl</p>",
        "id": 227435189,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089425
    },
    {
        "content": "<p>the x86_64 compiler (stage 1) builds fine</p>",
        "id": 227435231,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089445
    },
    {
        "content": "<p>this has nothing to do with mips and everything to do with the build system</p>",
        "id": 227435278,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089463
    },
    {
        "content": "<p>something is wrong with either your or my mental model of bootstrapping, because the target should never affect the host AFAIK</p>",
        "id": 227435291,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089467
    },
    {
        "content": "<p>stage1-std should be exactly the same regardless of what you're cross-compiling for</p>",
        "id": 227435555,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089549
    },
    {
        "content": "<p>yes, i agree</p>",
        "id": 227435576,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089561
    },
    {
        "content": "<p>but that's not happening</p>",
        "id": 227435588,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089565
    },
    {
        "content": "<p>if we cross-compile for aarch64, stage1-std builds fine.</p>",
        "id": 227435631,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089581
    },
    {
        "content": "<p>if we cross-compile for mips64, it dies.</p>",
        "id": 227435652,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you know why <em>stage1-std</em> would fail to build when cross-compiling? I'd expect it for stage2, but not stage1</p>",
        "id": 227435682,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089594
    },
    {
        "content": "<p>i have no idea why.</p>",
        "id": 227435691,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089597
    },
    {
        "content": "<p>here's the build log: <a href=\"https://tpaste.us/5V1j\">https://tpaste.us/5V1j</a></p>",
        "id": 227435720,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089607
    },
    {
        "content": "<p>if you look at the build log, you can see mips64 is not even in the picture.  the only difference is the final target.</p>",
        "id": 227435755,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089628
    },
    {
        "content": "<p>aarch64 = fine, mips64|s390x|riscv64 = not fine</p>",
        "id": 227435779,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089641
    },
    {
        "content": "<p>if you don't believe me i can do aarch64 again and upload a build log</p>",
        "id": 227435863,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089659
    },
    {
        "content": "<p>no no I believe you</p>",
        "id": 227435879,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089666
    },
    {
        "content": "<p>I'm just super confused lol</p>",
        "id": 227435890,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614089671
    },
    {
        "content": "<p>hm, have you tried to inspect the rlibs (which IIRC are just .ar in disguise) with nm or something to confirm the symbols aren't present?</p>",
        "id": 227436089,
        "sender_full_name": "simulacrum",
        "timestamp": 1614089756
    },
    {
        "content": "<p>i.e., are they getting removed by the linker perhaps?</p>",
        "id": 227436166,
        "sender_full_name": "simulacrum",
        "timestamp": 1614089771
    },
    {
        "content": "<p>yes, back in october</p>",
        "id": 227436213,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089795
    },
    {
        "content": "<p>I admit to knowing next to nothing about linkers</p>",
        "id": 227436224,
        "sender_full_name": "simulacrum",
        "timestamp": 1614089796
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/227436213\">said</a>:</p>\n<blockquote>\n<p>yes, back in october</p>\n</blockquote>\n<p>so the symbol is there?</p>",
        "id": 227436347,
        "sender_full_name": "simulacrum",
        "timestamp": 1614089851
    },
    {
        "content": "<p>no, the symbol is not anywhere to be seen</p>",
        "id": 227436553,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614089933
    },
    {
        "content": "<p>in fact, <code>nm</code> on these rlibs produces a bunch of .o files with no symbols at all</p>",
        "id": 227436876,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090064
    },
    {
        "content": "<p>hm, that's odd (but perhaps indicative of the problem)</p>",
        "id": 227436923,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090081
    },
    {
        "content": "<p><a href=\"https://tpaste.us/5V1M\">https://tpaste.us/5V1M</a></p>",
        "id": 227436952,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090096
    },
    {
        "content": "<p>i assume there should be symbols in these</p>",
        "id": 227437006,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090121
    },
    {
        "content": "<p>other than libc crate which is incorporating musl's libc</p>",
        "id": 227437089,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090136
    },
    {
        "content": "<p>which rlib is that?</p>",
        "id": 227437092,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090139
    },
    {
        "content": "<p>that is all of the rlibs</p>",
        "id": 227437114,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090145
    },
    {
        "content": "<p>literally i did nm *.rlib | tpaste</p>",
        "id": 227437129,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090156
    },
    {
        "content": "<p>can you try on the equivalent of build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/libstd-8a326c40d2ce3e0b.rlib ?</p>",
        "id": 227437157,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090171
    },
    {
        "content": "<p>that doesn't exist</p>",
        "id": 227437241,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090204
    },
    {
        "content": "<p>there is no libstd.rlib</p>",
        "id": 227437260,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090215
    },
    {
        "content": "<p>hm, right, because it's not linking</p>",
        "id": 227437281,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090226
    },
    {
        "content": "<p>i do have .o files that look equivalent</p>",
        "id": 227437285,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090228
    },
    {
        "content": "<p>ah ok, so something like std-8a326c40d2ce3e0b.std.ee2dvkrm-cgu.0.rcgu.o?</p>",
        "id": 227437373,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090248
    },
    {
        "content": "<p><a href=\"https://tpaste.us/vZ95\">https://tpaste.us/vZ95</a></p>",
        "id": 227437391,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090253
    },
    {
        "content": "<p><code>nm std*.o | tpaste</code></p>",
        "id": 227437414,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090263
    },
    {
        "content": "<p>what directory is that in?</p>",
        "id": 227437454,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090283
    },
    {
        "content": "<p>can you confirm that the same rlib/.o files for the working target don't see this behavior?</p>",
        "id": 227437495,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090301
    },
    {
        "content": "<p><code>build/x86_64-alpine-linux-musl/stage1-std/x86_64-alpine-linux-musl/release/deps</code></p>",
        "id": 227437507,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090305
    },
    {
        "content": "<p>sure, but i will have to blow everything away and rebuild again</p>",
        "id": 227437557,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090320
    },
    {
        "content": "<p>hm</p>",
        "id": 227437569,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090325
    },
    {
        "content": "<p>don't do that yet then</p>",
        "id": 227437580,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090329
    },
    {
        "content": "<p>can you dump the target spec json for this target?</p>",
        "id": 227437606,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090340
    },
    {
        "content": "<p>too late i already did it</p>",
        "id": 227437745,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090381
    },
    {
        "content": "<p>--print target-spec-json --target x86_64-alpine-linux-musl -Zunstable-options</p>",
        "id": 227437752,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090383
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>~/rust $ RUSTC_BOOTSTRAP=1 rustc -Z unstable-options --print target-spec-json --target mips64-unknown-linux-muslabi64\n{\n  &quot;arch&quot;: &quot;mips64&quot;,\n  &quot;cpu&quot;: &quot;mips64r2&quot;,\n  &quot;crt-static-respected&quot;: true,\n  &quot;data-layout&quot;: &quot;E-m:e-i8:8:32-i16:16:32-i64:64-n32:64-S128&quot;,\n  &quot;dynamic-linking&quot;: true,\n  &quot;env&quot;: &quot;musl&quot;,\n  &quot;executables&quot;: true,\n  &quot;features&quot;: &quot;+mips64r2&quot;,\n  &quot;has-elf-tls&quot;: true,\n  &quot;has-rpath&quot;: true,\n  &quot;is-builtin&quot;: true,\n  &quot;linker-is-gnu&quot;: true,\n  &quot;llvm-target&quot;: &quot;mips64-unknown-linux-musl&quot;,\n  &quot;max-atomic-width&quot;: 64,\n  &quot;os&quot;: &quot;linux&quot;,\n  &quot;position-independent-executables&quot;: true,\n  &quot;pre-link-args&quot;: {\n    &quot;gcc&quot;: [\n      &quot;-Wl,--as-needed&quot;,\n      &quot;-Wl,-z,noexecstack&quot;\n    ]\n  },\n  &quot;relro-level&quot;: &quot;full&quot;,\n  &quot;target-endian&quot;: &quot;big&quot;,\n  &quot;target-family&quot;: &quot;unix&quot;,\n  &quot;target-mcount&quot;: &quot;_mcount&quot;,\n  &quot;target-pointer-width&quot;: &quot;64&quot;\n}\n</code></pre></div>",
        "id": 227437923,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090455
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>~/rust $ RUSTC_BOOTSTRAP=1 rustc -Z unstable-options --print target-spec-json --target x86_64-alpine-linux-musl\n{\n  &quot;arch&quot;: &quot;x86_64&quot;,\n  &quot;cpu&quot;: &quot;x86-64&quot;,\n  &quot;crt-static-respected&quot;: true,\n  &quot;data-layout&quot;: &quot;e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128&quot;,\n  &quot;dynamic-linking&quot;: true,\n  &quot;env&quot;: &quot;musl&quot;,\n  &quot;executables&quot;: true,\n  &quot;has-elf-tls&quot;: true,\n  &quot;has-rpath&quot;: true,\n  &quot;is-builtin&quot;: true,\n  &quot;linker-is-gnu&quot;: true,\n  &quot;llvm-target&quot;: &quot;x86_64-alpine-linux-musl&quot;,\n  &quot;max-atomic-width&quot;: 64,\n  &quot;need-rpath&quot;: true,\n  &quot;os&quot;: &quot;linux&quot;,\n  &quot;position-independent-executables&quot;: true,\n  &quot;pre-link-args&quot;: {\n    &quot;gcc&quot;: [\n      &quot;-Wl,--as-needed&quot;,\n      &quot;-Wl,-z,noexecstack&quot;,\n      &quot;-m64&quot;\n    ]\n  },\n  &quot;relro-level&quot;: &quot;full&quot;,\n  &quot;stack-probes&quot;: true,\n  &quot;static-position-independent-executables&quot;: true,\n  &quot;target-family&quot;: &quot;unix&quot;,\n  &quot;target-pointer-width&quot;: &quot;64&quot;,\n  &quot;vendor&quot;: &quot;alpine&quot;\n}\n</code></pre></div>",
        "id": 227438111,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090524
    },
    {
        "content": "<p>or do you want it from the bootstrap rustc</p>",
        "id": 227438121,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090530
    },
    {
        "content": "<p>ideally from the stage1/bin/rustc, which is the one compiling stage1-std</p>",
        "id": 227438193,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090553
    },
    {
        "content": "<p>it sounds like the bootstrap rustc does work for you</p>",
        "id": 227438227,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090566
    },
    {
        "content": "<p>ok, well right now i am building aarch64 again</p>",
        "id": 227438310,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090599
    },
    {
        "content": "<p>i'll stop it once it starts building stage1 std</p>",
        "id": 227438369,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090607
    },
    {
        "content": "<p>but yeah if the rlibs have no symbols that would be a problem :)</p>",
        "id": 227438670,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614090724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> you mentioned you can produce images/VMs to look at. I could take a short look at this if you had a gcloud image (or, I guess, a docker container with standard development environment) that I could create a gcloud VM from.</p>",
        "id": 227438944,
        "sender_full_name": "nagisa",
        "timestamp": 1614090838
    },
    {
        "content": "<p>I honestly don't know what could cause that</p>",
        "id": 227438951,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090841
    },
    {
        "content": "<p><code>rlib</code>s don't necessarily need to contain machine code, not for the rust libraries.</p>",
        "id": 227439157,
        "sender_full_name": "nagisa",
        "timestamp": 1614090918
    },
    {
        "content": "<p>hm, but if they have .o they should, right? I'd expect there's cases where they're \"just mir\" but then that's all in metadata I'd expect?</p>",
        "id": 227439231,
        "sender_full_name": "simulacrum",
        "timestamp": 1614090961
    },
    {
        "content": "<p>Not necessarily. I mean, it does make sense to me that you'd see _some_ rust symbols, especially for libstd, but if the crate is all generics, the codegen units can very well be just empty.</p>",
        "id": 227439410,
        "sender_full_name": "nagisa",
        "timestamp": 1614091022
    },
    {
        "content": "<p>ah, sure, yeah</p>",
        "id": 227439444,
        "sender_full_name": "simulacrum",
        "timestamp": 1614091038
    },
    {
        "content": "<p>but these rust allocator symbols are definitely non-generic</p>",
        "id": 227439480,
        "sender_full_name": "simulacrum",
        "timestamp": 1614091054
    },
    {
        "content": "<p>I wonder if it helps if you compile with -Ccodegen-units=1</p>",
        "id": 227439968,
        "sender_full_name": "nagisa",
        "timestamp": 1614091243
    },
    {
        "content": "<p>how do i do that</p>",
        "id": 227440023,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614091263
    },
    {
        "content": "<p>There're <code>codegen-units</code> and <code>codegen-units-std</code> settings in config.toml, I think you can set those through something like <code>--set rust.codegen-units-std=1</code> if you're using <code>./configure</code>?</p>",
        "id": 227440529,
        "sender_full_name": "nagisa",
        "timestamp": 1614091345
    },
    {
        "content": "<p><code>RUSTFLAGS_NOT_BOOTSTRAP=-Ccodegen-units=1</code></p>",
        "id": 227440535,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614091348
    },
    {
        "content": "<p>oh or that lol</p>",
        "id": 227440549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614091352
    },
    {
        "content": "<p>what does codegen-units do</p>",
        "id": 227441007,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614091456
    },
    {
        "content": "<p>it configures into how many <code>.o</code> to split a crate into when building a crate.</p>",
        "id": 227441115,
        "sender_full_name": "nagisa",
        "timestamp": 1614091494
    },
    {
        "content": "<p>For parallelization purposes.</p>",
        "id": 227441187,
        "sender_full_name": "nagisa",
        "timestamp": 1614091509
    },
    {
        "content": "<p>ah</p>",
        "id": 227441238,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614091523
    },
    {
        "content": "<p>Another shot in the dark is to set <code>-Clink-dead-code</code> that should enable eager monomorphization collection.</p>",
        "id": 227441341,
        "sender_full_name": "nagisa",
        "timestamp": 1614091549
    },
    {
        "content": "<p>(I don't think that has a config.toml option, so you'd need to use environment)</p>",
        "id": 227441484,
        "sender_full_name": "nagisa",
        "timestamp": 1614091576
    },
    {
        "content": "<p>gonna try codegen-units=1</p>",
        "id": 227442077,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614091755
    },
    {
        "content": "<p>void linux uses codegen-units=1 so it may be related</p>",
        "id": 227442971,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614092080
    },
    {
        "content": "<p>all of rust's ci also builds std with 1 codegen unit fwiw, so it's not impossible not doing so may cause some unexpected behavior</p>",
        "id": 227443078,
        "sender_full_name": "simulacrum",
        "timestamp": 1614092127
    },
    {
        "content": "<p>(though it's a bug if that's the case)</p>",
        "id": 227443112,
        "sender_full_name": "simulacrum",
        "timestamp": 1614092144
    },
    {
        "content": "<p>codegen-units-std is 1 by default it seems.</p>",
        "id": 227443227,
        "sender_full_name": "nagisa",
        "timestamp": 1614092182
    },
    {
        "content": "<p>hm? CI sets it explicitly, but I don't think it's the default. I might be misremembering</p>",
        "id": 227443286,
        "sender_full_name": "simulacrum",
        "timestamp": 1614092209
    },
    {
        "content": "<p>that's what it shows up as a commented out option in my config.toml.</p>",
        "id": 227443342,
        "sender_full_name": "nagisa",
        "timestamp": 1614092230
    },
    {
        "content": "<p>weird</p>",
        "id": 227443357,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614092238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/227443342\">said</a>:</p>\n<blockquote>\n<p>that's what it shows up as a commented out option in my config.toml.</p>\n</blockquote>\n<p>yeah it's num cpus by default afaict</p>",
        "id": 227443426,
        "sender_full_name": "simulacrum",
        "timestamp": 1614092272
    },
    {
        "content": "<p>its strange though.  aarch64 was crossing reliably, so i am not sure this is it</p>",
        "id": 227443656,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614092347
    },
    {
        "content": "<p>we will see</p>",
        "id": 227443682,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614092353
    },
    {
        "content": "<p>then again, i was skeptical on x.py dist</p>",
        "id": 227443697,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614092359
    },
    {
        "content": "<p>What are the missing symbols? There are too much messages in this thread to find it again.</p>",
        "id": 227447462,
        "sender_full_name": "bjorn3",
        "timestamp": 1614093764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span></p>",
        "id": 227447757,
        "sender_full_name": "bjorn3",
        "timestamp": 1614093865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> __rdl_alloc and a few more allocator symbols</p>",
        "id": 227448072,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614093985
    },
    {
        "content": "<p>i can tell you that codegen-units-std is definitely not default to 1</p>",
        "id": 227448545,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614094198
    },
    {
        "content": "<p>this is a lot slower</p>",
        "id": 227448567,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614094204
    },
    {
        "content": "<p>Huh, <a href=\"https://tpaste.us/vZ95\">https://tpaste.us/vZ95</a> lists literally no symbols except for inside the allocator shim. The allocator shim is where <code>__rdl_alloc</code> and others are used.</p>",
        "id": 227448658,
        "sender_full_name": "bjorn3",
        "timestamp": 1614094229
    },
    {
        "content": "<p>yeah, this is hella confusing to everyone :)</p>",
        "id": 227448683,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614094243
    },
    {
        "content": "<p>Can you try compiling <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/c24744657021aa20bb577eb0e23cc8dcee55805c/example/mini_core.rs\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/c24744657021aa20bb577eb0e23cc8dcee55805c/example/mini_core.rs</a> using the compiler that gives the empty object files for the target for which it gives empty object files? Does it contain any symbols? If not can you send it to me, so I can take a look?</p>",
        "id": 227449133,
        "sender_full_name": "bjorn3",
        "timestamp": 1614094433
    },
    {
        "content": "<p>if i wind up with a new compiler that does that, sure</p>",
        "id": 227452645,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614095690
    },
    {
        "content": "<p><a href=\"https://tpaste.us/W7zB\">https://tpaste.us/W7zB</a></p>",
        "id": 227464656,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614099469
    },
    {
        "content": "<p>we got a bit farther this time with codegen-units=1</p>",
        "id": 227464689,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614099479
    },
    {
        "content": "<p>namely, std built</p>",
        "id": 227464819,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614099512
    },
    {
        "content": "<p>ok that's a very good sign</p>",
        "id": 227464836,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614099521
    },
    {
        "content": "<p>that's \"just\" a bug in some library that assumed <code>c_int</code> is 64 bits</p>",
        "id": 227464886,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614099535
    },
    {
        "content": "<p>This is actually trying to cross-compile now.</p>",
        "id": 227465952,
        "sender_full_name": "nagisa",
        "timestamp": 1614099922
    },
    {
        "content": "<p>so its \"just\" broken libraries in the ecosystem that need fixing.</p>",
        "id": 227465979,
        "sender_full_name": "nagisa",
        "timestamp": 1614099938
    },
    {
        "content": "<p>So there's a bug with codegen units?</p>",
        "id": 227466009,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1614099950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130046\">Alex Gaynor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/227466009\">said</a>:</p>\n<blockquote>\n<p>So there's a bug with codegen units?</p>\n</blockquote>\n<p>I can mention this as part of <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrap.20defaults\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/bootstrap.20defaults</a></p>",
        "id": 227466216,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614100020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> It's not assuming a c_int is 64 bits, it's assuming a const that has a varying C-type based on platform, according to our libc libraries, is 64 bits.</p>",
        "id": 227466294,
        "sender_full_name": "Jubilee",
        "timestamp": 1614100047
    },
    {
        "content": "<p>so either our libc bindings are wrong or the library is, and I'm checking on which it is now.</p>",
        "id": 227466374,
        "sender_full_name": "Jubilee",
        "timestamp": 1614100080
    },
    {
        "content": "<p>Ah, this issue was previously patched and our libc bindings are correct here, so time to file a bug against termize. Or just fix it.</p>",
        "id": 227466608,
        "sender_full_name": "Jubilee",
        "timestamp": 1614100169
    },
    {
        "content": "<p>what do you mean by patched?</p>",
        "id": 227466743,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614100212
    },
    {
        "content": "<p>Er, sorry. I meant that the issue has previously come up on the libc crate and someone fixed it there then, but termize did not adjust, as a dependent, to the different possible rules re: function signature.</p>",
        "id": 227467514,
        "sender_full_name": "Jubilee",
        "timestamp": 1614100517
    },
    {
        "content": "<p>...the constant that is being coerced into the function signature seems to even have a different C-type based on platform, that can also change independently of the function signature.</p>",
        "id": 227469254,
        "sender_full_name": "Jubilee",
        "timestamp": 1614101194
    },
    {
        "content": "<p>...no, wait, maybe the issue is in our libc bindings, the C-type was changed for some platforms and not others.</p>",
        "id": 227474275,
        "sender_full_name": "Jubilee",
        "timestamp": 1614102985
    },
    {
        "content": "<p>:D</p>",
        "id": 227478708,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614104636
    },
    {
        "content": "<p>i had to step away from this for the past hour, there were some technical difficulties with this cumulus linux garbage switches i thought were a good purchase decision</p>",
        "id": 227478841,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614104669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> You don't happen to know off the top of your head why TIOCGWINSZ is so much more _interesting_ on mips64-musl than on, say, aarch64-musl?</p>",
        "id": 227479642,
        "sender_full_name": "Jubilee",
        "timestamp": 1614104969
    },
    {
        "content": "<p>i remember encountering a similar issue but do not remember the details</p>",
        "id": 227479907,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614105048
    },
    {
        "content": "<p>sorry :)</p>",
        "id": 227479914,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614105050
    },
    {
        "content": "<p>alright, opened <a href=\"https://github.com/rust-lang/libc/pull/2078\">https://github.com/rust-lang/libc/pull/2078</a></p>",
        "id": 227492632,
        "sender_full_name": "Jubilee",
        "timestamp": 1614109931
    },
    {
        "content": "<p>cool, i'll turn that into a patch against the vendored libc crates</p>",
        "id": 227493793,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614110397
    },
    {
        "content": "<p>....Hm, might've messed up. That'd be fun.</p>",
        "id": 227495311,
        "sender_full_name": "Jubilee",
        "timestamp": 1614110953
    },
    {
        "content": "<p>i'm waiting on it to be ack'd first :P</p>",
        "id": 227495438,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614111004
    },
    {
        "content": "<p>Hmm, the math is correct, but musl is still expecting a c_int, but the range of the values of 0x8...etc. are out of range for an i32 (which is expecting only 0x7FFFFFFF at most), so those need to be persuaded they're bitfields first, and <strong>then</strong> cast to i32, isn't type coercion fun. :D</p>",
        "id": 227498847,
        "sender_full_name": "Jubilee",
        "timestamp": 1614112417
    },
    {
        "content": "<p>but if you print it back out using <code>:x</code> formatting, even though it's an i32, it prints the same hex value as C would because of course it does. :D</p>",
        "id": 227503162,
        "sender_full_name": "Jubilee",
        "timestamp": 1614114351
    },
    {
        "content": "<p>using i32 and then setting its sign bit for a bitmask seems super weird.</p>",
        "id": 227503888,
        "sender_full_name": "nagisa",
        "timestamp": 1614114658
    },
    {
        "content": "<p>That is why I almost didn't fix it in the PR, but then I caught it :D</p>",
        "id": 227505069,
        "sender_full_name": "Jubilee",
        "timestamp": 1614115151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> it has been acked and merged, can you check if that gives us the goods?</p>",
        "id": 227513093,
        "sender_full_name": "Jubilee",
        "timestamp": 1614118197
    },
    {
        "content": "<p>Feel free to throw rotten tomatos at me if libc needs further patching.</p>",
        "id": 227513694,
        "sender_full_name": "Jubilee",
        "timestamp": 1614118345
    },
    {
        "content": "<p>It's not actually merged yet, but will be in a few minutes :-)</p>",
        "id": 227514177,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1614118456
    },
    {
        "content": "<p>oh right</p>",
        "id": 227514226,
        "sender_full_name": "Jubilee",
        "timestamp": 1614118487
    },
    {
        "content": "<p>it's in the bors queue! SAME DIFFERENCE!!!! <em>cough</em> (no)</p>",
        "id": 227514265,
        "sender_full_name": "Jubilee",
        "timestamp": 1614118508
    },
    {
        "content": "<p>@Jubilee i'll check it in a little while, i have been dealing with this cumulus issue all day</p>",
        "id": 227523526,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614123213
    },
    {
        "content": "<p>I've been oscillating between \"codegen-units=1 fixing this makes no sense\" and \"of course codegen-units=1 fixes this, duh\" the entire day today.</p>",
        "id": 227523646,
        "sender_full_name": "nagisa",
        "timestamp": 1614123294
    },
    {
        "content": "<p>yes, it shouldn't have fixed it</p>",
        "id": 227523685,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614123325
    },
    {
        "content": "<p>but it appears to have</p>",
        "id": 227523690,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614123334
    },
    {
        "content": "<p>I think I have a vague idea why it did, probably has to do something with symbol visibility.</p>",
        "id": 227523815,
        "sender_full_name": "nagisa",
        "timestamp": 1614123388
    },
    {
        "content": "<p>ok patched those crates up</p>",
        "id": 227524138,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614123594
    },
    {
        "content": "<p>did not appear to do anything</p>",
        "id": 227524225,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614123633
    },
    {
        "content": "<p>do i need to rebuild from scratch?</p>",
        "id": 227524234,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614123641
    },
    {
        "content": "<p>hmm cargo may be caching the output</p>",
        "id": 227524308,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614123692
    },
    {
        "content": "<p>try <code>touch compiler/rustc_apfloat/src/lib.rs</code> maybe?</p>",
        "id": 227524399,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614123729
    },
    {
        "content": "<p>err I guess that hurts the stage0 build cache too</p>",
        "id": 227524440,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614123756
    },
    {
        "content": "<p><code>rm -r build/$mips-target-name/stage1-rustc</code> might work without rebuilding the stage1 compiler</p>",
        "id": 227524490,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614123781
    },
    {
        "content": "<p>oh well, plenty of tim</p>",
        "id": 227524539,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614123802
    },
    {
        "content": "<p>(the terminology is really bad, sorry: <a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap</a>)</p>",
        "id": 227524544,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614123807
    },
    {
        "content": "<p>e</p>",
        "id": 227524546,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614123807
    },
    {
        "content": "<p>how do you all propose i patch the libc crate</p>",
        "id": 227531434,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614127971
    },
    {
        "content": "<p>i do not wish to deal with vendoring</p>",
        "id": 227531440,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614127976
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> I am not sure what you are asking exactly but you may be interested in <a href=\"https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html\">https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html</a></p>",
        "id": 227532093,
        "sender_full_name": "Jubilee",
        "timestamp": 1614128489
    },
    {
        "content": "<p>oh my god</p>",
        "id": 227532186,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614128565
    },
    {
        "content": "<p>this is so not workable for distros</p>",
        "id": 227532254,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614128605
    },
    {
        "content": "<p>here is what distros do: we have .patch files.  we patch things.</p>",
        "id": 227532328,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614128647
    },
    {
        "content": "<p>here is what rust did: came up with an entirely different workflow that completely ruins that</p>",
        "id": 227532368,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614128671
    },
    {
        "content": "<p>i have a .patch file.  i want to apply it.  i want cargo to do what i say instead of making me appease IT.</p>",
        "id": 227532410,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614128706
    },
    {
        "content": "<p>i want to turn off checksum verification.  that is what i want.</p>",
        "id": 227532467,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614128762
    },
    {
        "content": "<p>how do i turn off the checksum verification</p>",
        "id": 227532661,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614128903
    },
    {
        "content": "<p>every step of the way, these rust tools have fought me</p>",
        "id": 227532861,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129069
    },
    {
        "content": "<p>it is the same attitude as systemd.  rust devs know best for all use cases.</p>",
        "id": 227532918,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129111
    },
    {
        "content": "<p>...I am pretty sure the [patch] table and pointing it to a local repo actually does effectively disable checksum verification, or at least, inform it you only care about what's in that repo.</p>",
        "id": 227533029,
        "sender_full_name": "Jubilee",
        "timestamp": 1614129179
    },
    {
        "content": "<p>and now, to PATCH something, i have to COPY THE ENTIRE CRATE, AND EDIT A BUNCH OF CONFIG FILES</p>",
        "id": 227533040,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129183
    },
    {
        "content": "<p>I am not sure how a patch works without a copy of the crate in question, honestly.</p>",
        "id": 227533108,
        "sender_full_name": "Jubilee",
        "timestamp": 1614129237
    },
    {
        "content": "<p>the copy of the crate already exists, actually rust-1.50 ships with three copies of libc crate</p>",
        "id": 227533179,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129261
    },
    {
        "content": "<p>That's odd, there's only one specified in the rustc repository's lockfile.</p>",
        "id": 227533247,
        "sender_full_name": "Jubilee",
        "timestamp": 1614129344
    },
    {
        "content": "<p>this is insane</p>",
        "id": 227533260,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129357
    },
    {
        "content": "<p>if i download gcc sources, i can modify them all i want, and <code>make</code> does not complain about checksums</p>",
        "id": 227533338,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129403
    },
    {
        "content": "<p>but, no instead now i have to COPY YET AGAIN and PATCH THAT</p>",
        "id": 227533365,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129440
    },
    {
        "content": "<p>and then edit god knows what to make it actually use the copy</p>",
        "id": 227533369,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129450
    },
    {
        "content": "<p>and rustaceans wonder why people get angry about rust.  this, right here.  the damn tool is fighting me.</p>",
        "id": 227533449,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129489
    },
    {
        "content": "<p>there needs to be a <code>CARGO_I_AM_NOT_AN_IDIOT_TURN_EVERYTHING_OFF=1</code> which disables all of this lockfile checking stuff</p>",
        "id": 227533478,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129527
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>~/aports/community/rust/src/rustc-1.50.0-src/vendor $ ls -alh | grep libc\ndrwxr-xr-x   4 kaniini kaniini 4.0K Feb 24 00:54 libc\ndrwxr-xr-x   4 kaniini kaniini 4.0K Feb 24 00:54 libc-0.2.77\ndrwxr-xr-x   4 kaniini kaniini 4.0K Feb 24 00:54 libc-0.2.79\n</code></pre></div>",
        "id": 227533607,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129630
    },
    {
        "content": "<p>how does this stuff work?  which one do i patch?  how do i copy it and make sure it actually gets respected 300 crates down</p>",
        "id": 227533623,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129652
    },
    {
        "content": "<p>sorry, i am just very frustrated with this</p>",
        "id": 227533678,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614129713
    },
    {
        "content": "<p>real answer: modify <code>std</code> Cargo.toml file</p>",
        "id": 227534101,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130052
    },
    {
        "content": "<p>My understanding is that Rust was in fact built mostly with makefiles at one point in time, and there were several motivating factors that gave rise to the Rust build systems and specifically Cargo.</p>\n<p>When you specify a patch in the patches table in a Cargo.toml, my observational understanding has been that override is what Cargo sees, and it basically stops caring about checksum stuff because then it only cares about validating against that version, basically, and you can specify a local repo. ( and it applies this override recursively afaik )<br>\nThere are also various ways to pretend you're a registry, as it were. <a href=\"https://doc.rust-lang.org/cargo/reference/source-replacement.html\">https://doc.rust-lang.org/cargo/reference/source-replacement.html</a><br>\nAnd it's completely understandable to want to be able to dictate sources more specifically and more easily.</p>",
        "id": 227534107,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130057
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: the lock file /home/kaniini/aports/community/rust/src/rustc-1.50.0-src/Cargo.lock needs to be updated but --frozen was passed to prevent this\n</code></pre></div>",
        "id": 227534224,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130150
    },
    {
        "content": "<p>oh my fucking god</p>",
        "id": 227534234,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130155
    },
    {
        "content": "<p>i should just remove rust from alpine and call it a day</p>",
        "id": 227534241,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130165
    },
    {
        "content": "<p><span aria-label=\"rolling eyes\" class=\"emoji emoji-1f644\" role=\"img\" title=\"rolling eyes\">:rolling_eyes:</span></p>",
        "id": 227534244,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130166
    },
    {
        "content": "<p>i'm about 30 seconds away from doing so</p>",
        "id": 227534251,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130174
    },
    {
        "content": "<p>yeah cargo is being kinda silly.</p>",
        "id": 227534255,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130186
    },
    {
        "content": "<p>like, i did the whole <code>[patch.blahblahblah]</code> thing and put it in the right place.  and pointed it to <code>patched-crates/libc</code>.</p>",
        "id": 227534362,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130226
    },
    {
        "content": "<p>and now cargo tells me to do something that is not possible to do on a builder</p>",
        "id": 227534382,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130249
    },
    {
        "content": "<p>hmmm.</p>",
        "id": 227534388,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130255
    },
    {
        "content": "<p>apparently this is done by rustbuild specifically <strong>if</strong> it is told to use vendored sources.<br>\nwhat.</p>",
        "id": 227534424,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130286
    },
    {
        "content": "<p>what.</p>",
        "id": 227534427,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130289
    },
    {
        "content": "<p>????????????????????????</p>",
        "id": 227534431,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130293
    },
    {
        "content": "<p>that's what i am saying</p>",
        "id": 227534435,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130300
    },
    {
        "content": "<p>i want to patch the vendored sources and i want cargo to just be chill about it</p>",
        "id": 227534446,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130313
    },
    {
        "content": "<p>which you can theoretically do by changing <code>.cargo-checksums.json</code>, but then it tells me that error</p>",
        "id": 227534521,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130353
    },
    {
        "content": "<p>this [patch] approach gives me that error</p>",
        "id": 227534526,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130359
    },
    {
        "content": "<p>all paths give me this error</p>",
        "id": 227534537,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130365
    },
    {
        "content": "<p>and <code>cargo update</code> doesn't work, I imagine.<br>\n...because cargo doesn't exist yet, right?</p>",
        "id": 227534741,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130517
    },
    {
        "content": "<p>What happens if you don't pass <code>--frozen</code>?</p>",
        "id": 227534749,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614130528
    },
    {
        "content": "<p>I believe the build is automatically passing <code>--frozen</code>, Joshua.</p>",
        "id": 227534765,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130546
    },
    {
        "content": "<p>yes, i <em>can</em> do cargo update</p>",
        "id": 227534786,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130562
    },
    {
        "content": "<p>Oh okay.</p>",
        "id": 227534824,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130568
    },
    {
        "content": "<p>because we have a host cargo</p>",
        "id": 227534830,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130571
    },
    {
        "content": "<p>and that doesn't work?<br>\nAlso can I see the rest of that build log so it's obvious where exactly it stopped? There's two spaces it decides to override and specify <code>--frozen</code>.</p>",
        "id": 227534853,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130602
    },
    {
        "content": "<p>in spite of the user not requesting such. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 227534865,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130615
    },
    {
        "content": "<p>oh my god, <code>cargo update</code> made it even worse</p>",
        "id": 227534915,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130651
    },
    {
        "content": "<p>i give up</p>",
        "id": 227534916,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130654
    },
    {
        "content": "<p>welp.</p>",
        "id": 227534917,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130658
    },
    {
        "content": "<p>time to blast away the rust source tree again</p>",
        "id": 227535017,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130719
    },
    {
        "content": "<p>You can check out Cargo.lock from git</p>",
        "id": 227535048,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614130749
    },
    {
        "content": "<p>So you don't lose the build cache</p>",
        "id": 227535070,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614130760
    },
    {
        "content": "<p>F.<br>\n<span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <a href=\"https://github.com/rust-lang/rust/blob/185de5f41a64e1b790524d5873dc1f7e368f64ab/src/bootstrap/bootstrap.py#L892-L897\">https://github.com/rust-lang/rust/blob/185de5f41a64e1b790524d5873dc1f7e368f64ab/src/bootstrap/bootstrap.py#L892-L897</a><br>\n<a href=\"https://github.com/rust-lang/rust/blob/cd64446196a02e593c5f50b8d863161306da43f7/src/bootstrap/builder.rs#L1454-L1459\">https://github.com/rust-lang/rust/blob/cd64446196a02e593c5f50b8d863161306da43f7/src/bootstrap/builder.rs#L1454-L1459</a></p>",
        "id": 227535081,
        "sender_full_name": "Jubilee",
        "timestamp": 1614130780
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>--frozen                   Require Cargo.lock and cache are up to date\n--locked                   Require Cargo.lock is up to date\n</code></pre></div>\n<p>hmm, why does vendoring pass --frozen instead of --locked?</p>",
        "id": 227535163,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614130840
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/227535048\">said</a>:</p>\n<blockquote>\n<p>You can check out Cargo.lock from git</p>\n</blockquote>\n<p>that wasnt the problem.  the problem was that cargo added all these <code>.cargo-checksum.json</code> files everywhere.  aka: the things i don't wanna use</p>",
        "id": 227535166,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130842
    },
    {
        "content": "<p>you can delete those <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 227535172,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614130851
    },
    {
        "content": "<p>yes</p>",
        "id": 227535178,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130858
    },
    {
        "content": "<p>i can</p>",
        "id": 227535180,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130861
    },
    {
        "content": "<p>they definitely got deleted when i ran <code>abuild clean</code></p>",
        "id": 227535213,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614130883
    },
    {
        "content": "<p><code>locked-deps = false</code></p>",
        "id": 227535394,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614131051
    },
    {
        "content": "<p>or just patch bootstrap.py/builder.rs</p>",
        "id": 227535460,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614131130
    },
    {
        "content": "<p>like so? <a href=\"https://mystb.in/SurgeonDeadlinePursue.lua\">https://mystb.in/SurgeonDeadlinePursue.lua</a></p>",
        "id": 227535654,
        "sender_full_name": "Jubilee",
        "timestamp": 1614131319
    },
    {
        "content": "<p>yeah</p>",
        "id": 227535717,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614131402
    },
    {
        "content": "<p>that gave rustbuild the lobotomy it needed</p>",
        "id": 227535783,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614131419
    },
    {
        "content": "<p>Compiling libc v0.2.80</p>",
        "id": 227535825,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614131482
    },
    {
        "content": "<p>oh, but it chose to use the new version</p>",
        "id": 227535834,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614131490
    },
    {
        "content": "<p>hm</p>",
        "id": 227535842,
        "sender_full_name": "Jubilee",
        "timestamp": 1614131500
    },
    {
        "content": "<p>what happens if you only remove <code>frozen</code> and not <code>locked</code>?</p>",
        "id": 227535901,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614131525
    },
    {
        "content": "<p>Maybe I made it too dumb. :^)</p>",
        "id": 227535923,
        "sender_full_name": "Jubilee",
        "timestamp": 1614131544
    },
    {
        "content": "<p>no they both have to go</p>",
        "id": 227536001,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614131620
    },
    {
        "content": "<p>preferring libc 0.2.80 is fine by me</p>",
        "id": 227536070,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614131653
    },
    {
        "content": "<p>hmm, ok</p>",
        "id": 227536076,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614131659
    },
    {
        "content": "<p>cool~<br>\nAs long as it's making it happen for ya. something something warranty void linux'd.</p>",
        "id": 227536139,
        "sender_full_name": "Jubilee",
        "timestamp": 1614131731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281757\">@Jubilee</span> remind me never to go on a car ride with you <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 227536156,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614131757
    },
    {
        "content": "<p>well these are temporary measures anyway</p>",
        "id": 227536211,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614131783
    },
    {
        "content": "<p>i am sure by 1.52 it will be non-issue</p>",
        "id": 227536218,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614131792
    },
    {
        "content": "<p>something will be figured out I'm sure. :^)</p>",
        "id": 227536253,
        "sender_full_name": "Jubilee",
        "timestamp": 1614131837
    },
    {
        "content": "<p>allowing me to actually patch the vendored sources without jumping through hoops is the goal, and lobotomizing rustbuild got it done</p>",
        "id": 227536346,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614131921
    },
    {
        "content": "<p>besides, i had no warranty to begin with (:</p>",
        "id": 227536966,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614132398
    },
    {
        "content": "<p>I wonder which is easiest to augment from until rustbuild/cargo works best for your purposes, of the <code>paths</code> array in <code>.cargo/config.toml</code>, <code>cargo vendor</code>, or <a href=\"https://crates.io/crates/cargo-local-registry\">https://crates.io/crates/cargo-local-registry</a></p>",
        "id": 227537173,
        "sender_full_name": "Jubilee",
        "timestamp": 1614132598
    },
    {
        "content": "<p>it has to be fully automated</p>",
        "id": 227537244,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614132639
    },
    {
        "content": "<p>and network access is technically disallowed (but not presently enforced by the build software)</p>",
        "id": 227537273,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614132671
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>find vendor -name .cargo-checksum.json \\\n  -exec sed -i.uncheck -e &#39;s/&quot;files&quot;:{[^}]*}/&quot;files&quot;:{ }/&#39; &#39;{}&#39; &#39;+&#39;\n</code></pre></div>",
        "id": 227537701,
        "sender_full_name": "cuviper",
        "timestamp": 1614133013
    },
    {
        "content": "<p>^ look, no files to check!</p>",
        "id": 227537724,
        "sender_full_name": "cuviper",
        "timestamp": 1614133031
    },
    {
        "content": "<p>cargo update is potentially likely to cause problems; you're updating dependencies that in theory follow semver but you then get an untested build. My recommendation is \"cargo metadata\" or similar which will regenerate the lockfile with your patch section applied but without complaining otherwise. I'm not sure if there's a way to avoid the lockfile update entirely; it's sort of there intentionally to guard against messing with sources like you're doing :)</p>\n<p>It would be great to document the expected workflow for applying patches to dependencies, though; I'd be happy to accept a PR which adds a note to the \"using vendored sources\" message we already print today, or something similar.</p>",
        "id": 227537755,
        "sender_full_name": "simulacrum",
        "timestamp": 1614133071
    },
    {
        "content": "<p>ran cargo metadata and whoa.</p>",
        "id": 227538039,
        "sender_full_name": "Jubilee",
        "timestamp": 1614133297
    },
    {
        "content": "<p>mm, <code>cargo vendor</code> whines that it isn't intended to be used for modifications, and points back to [replace] (actually it means the patches table).<br>\nbut the patches table has to be specified on a per-project basis which seems to be a bit much.</p>",
        "id": 227539232,
        "sender_full_name": "Jubilee",
        "timestamp": 1614134355
    },
    {
        "content": "<p>yet, cargo vendor does enable pointing to a directory. hm.</p>",
        "id": 227540291,
        "sender_full_name": "Jubilee",
        "timestamp": 1614135299
    },
    {
        "content": "<p>enabling patches-but-it's-an-entire-registry seems possible.</p>",
        "id": 227540417,
        "sender_full_name": "Jubilee",
        "timestamp": 1614135428
    },
    {
        "content": "<p>current status: <code>error: Error relocating /home/kaniini/aports/community/rust/src/rustc-1.50.0-src/build/x86_64-alpine-linux-musl/stage1-rustc/release/deps/libchalk_derive-5d1d56a171b894b4.so: __muloti4: symbol not found</code></p>",
        "id": 227548323,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614142656
    },
    {
        "content": "<p>I don't see that symbol used in <code>compiler/</code> or <code>library/</code>, just llvm-project/</p>",
        "id": 227548399,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614142712
    },
    {
        "content": "<p>maybe this is an LLVM bug?</p>",
        "id": 227548402,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614142716
    },
    {
        "content": "<p><a href=\"https://bugs.llvm.org/show_bug.cgi?id=16404\">https://bugs.llvm.org/show_bug.cgi?id=16404</a> looks related</p>",
        "id": 227548437,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614142760
    },
    {
        "content": "<p>hmm, if you pass <code>RUSTFLAGS_NOT_BOOTSTRAP=-Clink-arg=-rtlib=compiler-rt</code> does it help? I guess that will require rebuilding stage1-rustc :/ not sure if there's a way around that</p>",
        "id": 227548563,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614142894
    },
    {
        "content": "<p>maybe just copy/paste that final command line with the link arg added to start</p>",
        "id": 227548566,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614142913
    },
    {
        "content": "<p>hmm, <code>rg compiler-rt compiler/</code> at least has some hits</p>\n<div class=\"codehilite\"><pre><span></span><code>compiler/rustc_target/src/spec/android_base.rs\n6:    // Many of the symbols defined in compiler-rt are also defined in libgcc.\n\ncompiler/rustc_codegen_llvm/src/mono_item.rs\n62:        // compiler-rt, then we want to implicitly compile everything with hidden\n\ncompiler/rustc_codegen_ssa/src/back/link.rs\n2062:            // compiler-builtins crate (e.g., compiler-rt) because it&#39;ll get\n\ncompiler/rustc_feature/src/builtin_attrs.rs\n422:        which contains compiler-rt intrinsics and will never be stable&quot;,\n</code></pre></div>",
        "id": 227548641,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614142983
    },
    {
        "content": "<p>libgcc ok</p>",
        "id": 227548855,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614143168
    },
    {
        "content": "<p>hmm?</p>",
        "id": 227548876,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614143191
    },
    {
        "content": "<p>hmm yeah no _muloti4 in libgcc</p>",
        "id": 227548879,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614143199
    },
    {
        "content": "<p>oh I guess I should ask - are you using clang or gcc as the linker?</p>",
        "id": 227548894,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614143229
    },
    {
        "content": "<p>gcc</p>",
        "id": 227550154,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614144419
    },
    {
        "content": "<p>I don't know how this worked before then :/ maybe this symbol never got emitted?</p>",
        "id": 227550174,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614144442
    },
    {
        "content": "<p>let me see if <code>nm</code> shows it on a tier 1 platform</p>",
        "id": 227550177,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614144452
    },
    {
        "content": "<p>yup apparently this symbol doesn't exist on other platforms:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; nm /home/joshua/.local/lib/rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustc | less | grep __mu | wc -l\n0\n</code></pre></div>",
        "id": 227550241,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614144494
    },
    {
        "content": "<p>yeah idk</p>",
        "id": 227552537,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614146753
    },
    {
        "content": "<p>enough toiling in the rust mines for today :)</p>",
        "id": 227553932,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614147991
    },
    {
        "content": "<p><code>__muloti4</code> should be defined by compiler-builtins.: <a href=\"https://github.com/rust-lang/compiler-builtins/blob/b8c2585ce3a70ad6e95961947ddc3f1b2ad22490/src/int/mul.rs#L124\">https://github.com/rust-lang/compiler-builtins/blob/b8c2585ce3a70ad6e95961947ddc3f1b2ad22490/src/int/mul.rs#L124</a></p>\n<p>Note that <code>nm rustc</code> won't ever show it as it has a hidden visibility and as such is never exported from linked artifacts.</p>",
        "id": 227567244,
        "sender_full_name": "bjorn3",
        "timestamp": 1614157143
    },
    {
        "content": "<p>yeah, strange.  i dunno why it doesn't get included in the binary then.  maybe my lobotomization of rustbuild had unanticipated side effects?</p>",
        "id": 227599616,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614174262
    },
    {
        "content": "<p>I doubt it.</p>",
        "id": 227603720,
        "sender_full_name": "Jubilee",
        "timestamp": 1614175996
    },
    {
        "content": "<p>Running the rustc test suite with the security lobotomy in place on my i7-7700, if it's just the lobotomy that will immediately show a problem.</p>",
        "id": 227622491,
        "sender_full_name": "Jubilee",
        "timestamp": 1614182678
    },
    {
        "content": "<p>had to comment out a few more bits that were checking for sudo to make the lobotomy take effect but now it's building and testing just ifne.</p>",
        "id": 227639429,
        "sender_full_name": "Jubilee",
        "timestamp": 1614188053
    },
    {
        "content": "<p>strange :)</p>",
        "id": 227640343,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614188367
    },
    {
        "content": "<p>so my conclusion is that perhaps the next steps are to try to focus on staging all the libc/std work that will be needed to bring up {mips64, s390x, riscv64} ports and retry bootstrap in 1.52</p>",
        "id": 227658966,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614195560
    },
    {
        "content": "<p>Sounds sane!</p>",
        "id": 227669989,
        "sender_full_name": "Jubilee",
        "timestamp": 1614199800
    },
    {
        "content": "<p>I think the musl stuff should probably be reorganized a bit, the function definition for ioctl doesn't need to be respecified for each and every arch since it remains constant across the libc.</p>",
        "id": 227673105,
        "sender_full_name": "Jubilee",
        "timestamp": 1614200959
    },
    {
        "content": "<p>yes, seems reasonable</p>",
        "id": 227926955,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614346021
    },
    {
        "content": "<p>i'll work on the dynmusl targets today</p>",
        "id": 227926977,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614346029
    },
    {
        "content": "<p>i think if we can get bootstrap working in git, it will make it a lot simpler to get working in a release</p>",
        "id": 227927019,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614346049
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/82556\">https://github.com/rust-lang/rust/pull/82556</a> is the dynmusl targets</p>",
        "id": 227957925,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614359096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> am I correct in understanding that these targets as they have been submitted have been tested in alpine to some extent already?</p>",
        "id": 227960827,
        "sender_full_name": "nagisa",
        "timestamp": 1614360338
    },
    {
        "content": "<p>In particular I'm somewhat concerned about using the static musl targets as a base, because some of them set up some things that seem fairly unconventional and possibly relevant only for self-contained/statically linked musl.</p>",
        "id": 227960988,
        "sender_full_name": "nagisa",
        "timestamp": 1614360393
    },
    {
        "content": "<p>yes, that patch comes directly out of alpine, though some of my sed work got chewed up</p>",
        "id": 227961074,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614360433
    },
    {
        "content": "<p>one should never innovate with sed</p>",
        "id": 227961079,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614360439
    },
    {
        "content": "<p>Great.</p>",
        "id": 227961093,
        "sender_full_name": "nagisa",
        "timestamp": 1614360448
    },
    {
        "content": "<p>(I was thinking that e.g. <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs</a> file looked sketchy, in particular the frame pointer elimination stuff or the linker flags)</p>",
        "id": 227961137,
        "sender_full_name": "nagisa",
        "timestamp": 1614360477
    },
    {
        "content": "<p>yes, theres a lot of sketchy stuff in the musl targets</p>",
        "id": 227961199,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614360492
    },
    {
        "content": "<p>who is petrochenkov?</p>",
        "id": 227961767,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614360726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> hi, why did you self-assign my PR to you?</p>",
        "id": 227962118,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614360877
    },
    {
        "content": "<p>They assign themselves to PRs they want to take a look at later AFAIK.</p>",
        "id": 227962273,
        "sender_full_name": "nagisa",
        "timestamp": 1614360960
    },
    {
        "content": "<p>ok... well, the :/ response is concerning</p>",
        "id": 227964594,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614361814
    },
    {
        "content": "<p>i really do not want my work on this to wind up blocked by some person who does not wish to talk about their concerns</p>",
        "id": 227964672,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614361845
    },
    {
        "content": "<p>hopefully that is understandable :)</p>",
        "id": 227964789,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614361884
    },
    {
        "content": "<p>There is possibly a Timezone Thing going on.</p>",
        "id": 227966596,
        "sender_full_name": "Jubilee",
        "timestamp": 1614362495
    },
    {
        "content": "<p>well, really, i think that this approach is good for solving what distros want, while being minimally intrusive to the rust team.  it's not ideal, but it's something we can all live with.  our inability to make a compromise on this will only serve to benefit the people who view rust as a threat in the same way they view systemd as a threat.  so i really hope this person does not show up and ruin everything.</p>",
        "id": 227967154,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614362697
    },
    {
        "content": "<p>and... if you are unfamiliar with how those people react, you can ask the python-cryptography team ;)</p>",
        "id": 227967650,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614362930
    },
    {
        "content": "<p>ok.  how do i set these pre/post crt object fallbacks to an empty set</p>",
        "id": 227967845,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614363025
    },
    {
        "content": "<p>my answer is apparently not satisfying CI</p>",
        "id": 227967859,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614363033
    },
    {
        "content": "<p>I agree and currently remain optimistic that nothing of serious consequence will happen and Petrochenkov just flitted by, noticed something odd, and made a mark to take another look later and crashed out asleep or went to get dinner because of TZ differences or something.</p>",
        "id": 227967923,
        "sender_full_name": "Jubilee",
        "timestamp": 1614363069
    },
    {
        "content": "<p>well, i hope that he does not drop in and go \"but why would anyone want dynmusl\" targets and just sit there and block it</p>",
        "id": 227968358,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614363237
    },
    {
        "content": "<p>I don't think that would happen. Tier3 basically exists for \"hi I'm doing something weird and I've done the work to make this work and I expect a whole 5 people would want to use this target, would you mind this target spec sitting in the Rust repo? cool.\"</p>",
        "id": 227969232,
        "sender_full_name": "Jubilee",
        "timestamp": 1614363591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> <code>Default::default()</code> should work.</p>",
        "id": 227969678,
        "sender_full_name": "nagisa",
        "timestamp": 1614363773
    },
    {
        "content": "<p>i found a different solution, but we can try that one too</p>",
        "id": 227969743,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614363803
    },
    {
        "content": "<p>(its a <code>BTreeMap</code> so other way would be to say <code>BTreeMap::new()</code>, however for that you'd need to <code>use</code> things, and nobody wants to <code>use</code> things)</p>",
        "id": 227969758,
        "sender_full_name": "nagisa",
        "timestamp": 1614363811
    },
    {
        "content": "<p>Ah, I see, you can use the <code>new</code> function too, yeah.</p>",
        "id": 227969902,
        "sender_full_name": "nagisa",
        "timestamp": 1614363868
    },
    {
        "content": "<p>I think all of the options are fine ^^</p>",
        "id": 227969975,
        "sender_full_name": "nagisa",
        "timestamp": 1614363907
    },
    {
        "content": "<p>my assumption is that he just does not know why anyone would want this.  hopefully my comment explains it</p>",
        "id": 227970497,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614364134
    },
    {
        "content": "<p>in rust land, the concept of a musl-based distro is not what most people think when they think musl</p>",
        "id": 227970542,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614364160
    },
    {
        "content": "<p>That's likely the <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> reaction, but I wouldn't expect anyone in the team to block this, given that there's a very clear rationale.</p>",
        "id": 227970752,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1614364240
    },
    {
        "content": "<p>I wouldn't read too much into a <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> reaction, at least I use them all the time for all sorts of stuff, ranging from \"you have this bug which ate my cat\" to \"here, I've fixed a cat-eating bug you had\".</p>",
        "id": 227971345,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614364457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> would you mind adding part of your comment to petrochenkov to the description of the PR? That way it'll end up as part of the merge commit as well.</p>",
        "id": 227971402,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1614364481
    },
    {
        "content": "<p>yes sounds like a plan</p>",
        "id": 227971467,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614364515
    },
    {
        "content": "<p>done!</p>",
        "id": 227971653,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614364588
    },
    {
        "content": "<p>Last thing that's probably good to do at this point is to squash the commits a little so that once merged we end up with a more meaningful history. Other than that this looks ready to r+ to me.</p>",
        "id": 227972837,
        "sender_full_name": "nagisa",
        "timestamp": 1614365095
    },
    {
        "content": "<p>you might want to give petrochenkov a few days to review first</p>",
        "id": 227972929,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614365133
    },
    {
        "content": "<p>is there a way to override his r- :)</p>",
        "id": 227973972,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614365561
    },
    {
        "content": "<p>Oh, also it's worth noting in terms of salience that Petrochenkov has touched the compiler's target handling code many times, so your target specs were always functionally subject to Petrochenkov's attention as embodied in the rustc compiler anyways. :^)</p>",
        "id": 227974240,
        "sender_full_name": "Jubilee",
        "timestamp": 1614365671
    },
    {
        "content": "<p>sure, but it comes down to how much further resources are worth spending on something doomed to failure because a single senior contributor has his own opinion on dynamically linked musl environments</p>",
        "id": 227976169,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614366421
    },
    {
        "content": "<p>Have they expressed an opposing opinion anywhere else?</p>",
        "id": 227976483,
        "sender_full_name": "nagisa",
        "timestamp": 1614366558
    },
    {
        "content": "<p>they have not yet, but based on knowledge and experience (having done this exact thing to block a PR) one can speculate on the outcome</p>",
        "id": 227976616,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614366617
    },
    {
        "content": "<p>so, i believe the question is relevant -- whether or not there is a process to get this merged over his future objections</p>",
        "id": 227976730,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614366681
    },
    {
        "content": "<p>I think that kind of behavior would actually run up against the Rust CoC pretty quickly in actual practice, so I do not recommend doing that here.</p>",
        "id": 227977019,
        "sender_full_name": "Jubilee",
        "timestamp": 1614366797
    },
    {
        "content": "<p>do not recommend doing which?  asking about governance processes?</p>",
        "id": 227977222,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614366872
    },
    {
        "content": "<p>Trying to block PRs using blatant power plays, I mean. :^)<br>\nThe questions are legitimate, I'm not sure what the process is!</p>",
        "id": 227977329,
        "sender_full_name": "Jubilee",
        "timestamp": 1614366926
    },
    {
        "content": "<p>I would say its too early to call anything based on a PR reaction. In my experience Vadim is a very reasonable person. </p>\n<p>That said, Rust's decision making process is consensus based, so there's definitely a danger that a change gets rejected, especially the PRs that have far reaching consequences. Historically, however, adding new targets was never such a change.</p>",
        "id": 227977330,
        "sender_full_name": "nagisa",
        "timestamp": 1614366928
    },
    {
        "content": "<p>oh ok</p>",
        "id": 227977404,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614366962
    },
    {
        "content": "<p>yeah, there's a reason I noted that adding a tier3 target has <strong>very</strong> low standards.</p>",
        "id": 227977450,
        "sender_full_name": "Jubilee",
        "timestamp": 1614366968
    },
    {
        "content": "<p>If a well motivated PR is rejected, it generally is expected to be followed by a good rationale, and typically an alternative design to solve the problems that the original PR set out to solve.</p>",
        "id": 227977498,
        "sender_full_name": "nagisa",
        "timestamp": 1614366993
    },
    {
        "content": "<p>on the other hand, the confusion might be \"why are the -musl targets making musl distros unhappy\"</p>",
        "id": 227977829,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614367134
    },
    {
        "content": "<p>which, if that's the situation, then maybe it can lead to a redesign of the <code>-musl</code> targets instead of introducing <code>-dynmusl</code> targets</p>",
        "id": 227978064,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614367232
    },
    {
        "content": "<p>there are indeed reasons like that to be optimistic, yes. :^)</p>",
        "id": 227978177,
        "sender_full_name": "Jubilee",
        "timestamp": 1614367286
    },
    {
        "content": "<p>the lack of actionable data makes me anxious though</p>",
        "id": 227978289,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614367327
    },
    {
        "content": "<p>i am somebody who thinks about every possible outcome in order to stay at least 1 step ahead :)</p>",
        "id": 227978343,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614367348
    },
    {
        "content": "<p>at any rate, my goal is to wind up in a situation where musl distros are able to have a rustc that does not require hacks on hacks to work as any other program they install would work</p>",
        "id": 227978603,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614367462
    },
    {
        "content": "<p>because the hacks on hacks are not helping anyone</p>",
        "id": 227978657,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614367497
    },
    {
        "content": "<p>speaking of hacks on hacks, i wonder if it makes sense to rework the libc crate to move all of the common stuff musl defines into the common code</p>",
        "id": 227979341,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614367794
    },
    {
        "content": "<p>Yeah, I was reading the libc crate and it's actually <em>supposed</em> to work that way, i.e. that everything along the common paths for a target gets imported, people just were overly conservative about doing it for musl because, I presume, they didn't know what they were doing.</p>",
        "id": 227979591,
        "sender_full_name": "Jubilee",
        "timestamp": 1614367889
    },
    {
        "content": "<p>well i definitely don't know what i am doing (which is why people who do know what they're doing going :/ makes me anxious), but i do know musl as i literally maintain the package on alpine</p>",
        "id": 227979771,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614367950
    },
    {
        "content": "<p>:P</p>",
        "id": 227979779,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614367952
    },
    {
        "content": "<p>but even when i was doing the s390x definitions, i noticed that it was strange that i had to copy a lot of commonly defined stuff.</p>",
        "id": 227981287,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614368515
    },
    {
        "content": "<p>i think the libc crate should mimic the <code>arch/$arch/bits/*.h</code> in musl.</p>",
        "id": 227981417,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614368550
    },
    {
        "content": "<p>e.g. everything that is common in the base, then the arch-specific overrides.</p>",
        "id": 227981457,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614368571
    },
    {
        "content": "<p>And I deeply understand that kind of anxiety, which is why I am talking it out with you, yes. ^_^<br>\nYeah, it kind of seems like that's how it's supposed to be organized according to libc's CONTRIBUTING.md anyways!</p>",
        "id": 227981742,
        "sender_full_name": "Jubilee",
        "timestamp": 1614368693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> Specifically, because we don't really \"do\" #undef then #ifdef here in Rust (that I'm aware of), the common stuff should probably be in its own module (possibly with further segmentation into submodules) so that you then can import that module for every arch it applies to. Not Quite Overrides, But Close.</p>",
        "id": 227984121,
        "sender_full_name": "Jubilee",
        "timestamp": 1614369666
    },
    {
        "content": "<p>yeah seems like a reasonable design.  i would like to clean this stuff up.</p>",
        "id": 227984366,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614369755
    },
    {
        "content": "<p>as it stands now, i found the libc musl support code to not be what i understand to be idiomatic rust, nor what i understand to be reflective of musl itself</p>",
        "id": 227984480,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614369796
    },
    {
        "content": "<p>and rust noob i may totally be, i am not a musl noob :)</p>",
        "id": 227984561,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614369841
    },
    {
        "content": "<p>Go for it imo. It'd also be nice if we could get smFifteen's <a href=\"https://github.com/rust-lang/libc/pull/1662\">https://github.com/rust-lang/libc/pull/1662</a> rebased and reviewed as that would help a lot.</p>",
        "id": 227984665,
        "sender_full_name": "Jubilee",
        "timestamp": 1614369877
    },
    {
        "content": "<p>also <a href=\"https://github.com/rust-lang/libc/pull/2078\">https://github.com/rust-lang/libc/pull/2078</a> finally landed on libc's master after <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span>  CI fun <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span>.</p>",
        "id": 227984812,
        "sender_full_name": "Jubilee",
        "timestamp": 1614369949
    },
    {
        "content": "<p>also, #undef is a no-no in the musl definition headers</p>",
        "id": 227985810,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614370331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/227985810\">said</a>:</p>\n<blockquote>\n<p>also, #undef is a no-no in the musl definition headers</p>\n</blockquote>\n<p>lol that reminds me of <a href=\"http://conal.net/blog/posts/the-c-language-is-purely-functional\">http://conal.net/blog/posts/the-c-language-is-purely-functional</a></p>",
        "id": 227985946,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614370389
    },
    {
        "content": "<p>yes :D</p>",
        "id": 227986539,
        "sender_full_name": "Jubilee",
        "timestamp": 1614370607
    },
    {
        "content": "<p>cursed</p>",
        "id": 227986979,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614370782
    },
    {
        "content": "<p>oh, huh.  it is possible for issues to have multiple assignees on github</p>",
        "id": 227994493,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614373809
    },
    {
        "content": "<p>the way it looked to me was that petrochenkov took assignment from nagisa and then reacted with <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 227994948,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614374013
    },
    {
        "content": "<p>github should do something to better clarify changes like that</p>",
        "id": 227995135,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614374084
    },
    {
        "content": "<p>yes, GH's UI still leaves much to be desired, in spite of being... adequate for many purposes.</p>",
        "id": 228001260,
        "sender_full_name": "Jubilee",
        "timestamp": 1614376619
    },
    {
        "content": "<p>grr.  to be absolutely clear: transparent behavior without patching is a hard requirement for musl-based distros</p>",
        "id": 228021312,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614388596
    },
    {
        "content": "<p>in this case my thought re: configuration bits would be essentially that something like .cargo/config would have the feature flag already set on RUSTFLAGS so that when you ran cargo it would just Do The Thing, and if you wanted to stop it from doing so it would be done by poking .cargo/config so that it doesn't.</p>",
        "id": 228021998,
        "sender_full_name": "Jubilee",
        "timestamp": 1614389173
    },
    {
        "content": "<p>And we'd just arrange for that config file to already have that one entry on it.</p>",
        "id": 228022033,
        "sender_full_name": "Jubilee",
        "timestamp": 1614389199
    },
    {
        "content": "<p>that sounds too fragile, people used to mess with our gcc specs file</p>",
        "id": 228022092,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614389266
    },
    {
        "content": "<p>Yeah, that's why I said \"but oof, configuration management over time\".</p>",
        "id": 228022144,
        "sender_full_name": "Jubilee",
        "timestamp": 1614389287
    },
    {
        "content": "<p>i have horrors of people following half-baked stack overflow solutions and breaking rustc entirely</p>",
        "id": 228022186,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614389330
    },
    {
        "content": "<p>man stack overflow needs to stop... something.</p>",
        "id": 228022217,
        "sender_full_name": "Jubilee",
        "timestamp": 1614389356
    },
    {
        "content": "<p>as they used to do in order to remove security features from our gcc in order to avoid fixing their broken code :)</p>",
        "id": 228022218,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614389357
    },
    {
        "content": "<p>...anyways.</p>",
        "id": 228022221,
        "sender_full_name": "Jubilee",
        "timestamp": 1614389359
    },
    {
        "content": "<p>that site like most sites is hit or miss</p>",
        "id": 228022243,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614389392
    },
    {
        "content": "<p>It's a website that has not heard of clearing caches, ironically.</p>",
        "id": 228022334,
        "sender_full_name": "Jubilee",
        "timestamp": 1614389442
    },
    {
        "content": "<p>the problem is that for a while, people were suggesting to patch out FORTIFY by editing the gcc specs file, which lead to problems, because it is not stable across releases</p>",
        "id": 228022335,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614389443
    },
    {
        "content": "<p>so, something something, someone should run a destructor on half the Stack Overflow questions. :^)<br>\nshepmaster has done a lot of hard work on making most them good for Rust, Generally, dunno about \"for Alpine\" though!</p>",
        "id": 228022814,
        "sender_full_name": "Jubilee",
        "timestamp": 1614389764
    },
    {
        "content": "<p>anyway i'm weary to have another scenario like that with rust</p>",
        "id": 228022943,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614389869
    },
    {
        "content": "<p>Just curious (as I don't have much experience with Alpine or musl), what's the problem with static linking by default on Alpine? Does it not work at all, or is it just discouraged?</p>",
        "id": 228056646,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614430335
    },
    {
        "content": "<p>I cam imagine that <code>rustc</code> itself needs to be linked dynamically for <code>dlopen</code></p>",
        "id": 228056654,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614430359
    },
    {
        "content": "<p>Re the PR itself, I totally agree, it's better to have a reasonable target in the compiler than to ask every user of the compiler to set <code>-C target-feature=-crt-static</code>.</p>",
        "id": 228056681,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614430412
    },
    {
        "content": "<p>it is a policy violation</p>",
        "id": 228056867,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614430674
    },
    {
        "content": "<p>Ah, okay</p>",
        "id": 228056923,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614430712
    },
    {
        "content": "<p>if the end user wishes to use static linking, it works fine.  but for alpine itself, it is a policy violation, and we are unwilling to ship a toolchain that violates policy by default.</p>",
        "id": 228056924,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614430717
    },
    {
        "content": "<p>So the static target works fine, too?</p>",
        "id": 228056925,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614430722
    },
    {
        "content": "<p>yes</p>",
        "id": 228056931,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614430727
    },
    {
        "content": "<p>i don't know if the static target works after the requested modifications for <code>-dynmusl</code> btw.</p>",
        "id": 228056951,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614430778
    },
    {
        "content": "<p>Cool. TBH, <code>dlopen</code> not working with static musl is a good enough reason to prefer dynamic linking. Not to mention any libc updates.</p>",
        "id": 228056957,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614430801
    },
    {
        "content": "<p>yes, dlopen does not work at all in staticly linked musl.</p>",
        "id": 228057020,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614430827
    },
    {
        "content": "<p>It also does not work well if you mix and match dynamically linked dependencies and the statically linked musl</p>",
        "id": 228057029,
        "sender_full_name": "nagisa",
        "timestamp": 1614430851
    },
    {
        "content": "<p>which can happen if you pull in a crate that depends on native libraries.</p>",
        "id": 228057045,
        "sender_full_name": "nagisa",
        "timestamp": 1614430868
    },
    {
        "content": "<p>i basically see this as a matter of equity.  whoever did the initial bringup for musl support in rust did not consult musl-based distributions.</p>",
        "id": 228057057,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614430890
    },
    {
        "content": "<p>A common example that comes up is panics not working right, or things crashing in weird ways.</p>",
        "id": 228057059,
        "sender_full_name": "nagisa",
        "timestamp": 1614430906
    },
    {
        "content": "<p>(because if they had, the -musl target would be the same as the other conventional targets)</p>",
        "id": 228057063,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614430919
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/228057059\">said</a>:</p>\n<blockquote>\n<p>A common example that comes up is panics not working right, or things crashing in weird ways.</p>\n</blockquote>\n<p>Yeah, there was a nice example of that in <a href=\"#narrow/stream/122651-general/topic/.2Bcrt-static.20musl.20library.20and.20C.2B.2B.20exceptions\">https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/.2Bcrt-static.20musl.20library.20and.20C.2B.2B.20exceptions</a></p>",
        "id": 228057176,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614431010
    },
    {
        "content": "<p>it is fine that the <code>-musl</code> targets exist, but it is misleading to users that believe that the <code>-musl</code> targets exhibit appropriate behavior on musl-based distros</p>",
        "id": 228057180,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614431021
    },
    {
        "content": "<p>so in my view i think it is important to have a set of common targets that behave appropriately</p>",
        "id": 228057208,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614431043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/228056867\">said</a>:</p>\n<blockquote>\n<p>it is a policy violation</p>\n</blockquote>\n<p>Should that be mentioned in the PR description? It wasn't obvious to me why the targets were actually needed.</p>",
        "id": 228057234,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614431053
    },
    {
        "content": "<p>though i agree with <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> that using targets for this purpose is overkill.  i don't see a better solution that can be easily implemented though.</p>",
        "id": 228057266,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614431109
    },
    {
        "content": "<p>(the right solution would be to fix the <code>-musl</code> targets to have the same behavior as the other conventional targets, but users are presumably already using these targets assuming the behavior for their specific usecase, and we don't want to break those users)</p>",
        "id": 228057353,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614431188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/228057266\">said</a>:</p>\n<blockquote>\n<p>though i agree with <span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> that using targets for this purpose is overkill.  i don't see a better solution that can be easily implemented though.</p>\n</blockquote>\n<p>Aren't targets a bit weird? Each comes with its own copy of the standard library (if you add <code>rust-src</code>), docs etc., but they're identical</p>",
        "id": 228057359,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614431209
    },
    {
        "content": "<p>anyway, my goal is to wind up with an out of box experience for musl-based distros that is the same as glibc-based distros</p>",
        "id": 228057437,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614431287
    },
    {
        "content": "<p>i assume the rust community would find that to be valuable too</p>",
        "id": 228057455,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614431326
    },
    {
        "content": "<p>(there are some staticly-linked musl distros, like Sabotage.  but rust is very incompatible with the Sabotage philosophy, so I don't think that is a helpful data point.)</p>",
        "id": 228057609,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614431488
    },
    {
        "content": "<p>(removed, this ended up being posted twice)</p>",
        "id": 228057611,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614431489
    },
    {
        "content": "<p>I added that to the description.</p>",
        "id": 228057785,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614431662
    },
    {
        "content": "<blockquote>\n<p>These targets are required because Linux distributions generally consider static linking by default to be a policy violation. It is a policy violation in Alpine, Void and Adelie Linux, which are the top three musl-based distributions. Though it should also be said that there are staticly-linked musl distributions such as Sabotage, which would continue to be served by the -musl targets directly (if they ship Rust at all, I haven't checked).</p>\n</blockquote>",
        "id": 228057788,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614431668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>'s solution is more elegant than introducing <code>-dynmusl</code> targets.  I like it.</p>",
        "id": 228062203,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614436938
    },
    {
        "content": "<p>It has downsides too, though. For example people who want to produce entirely static binaries and are on musl-based host will be confused by pretty much every blog post etc out there that suggests just adding a <code>--target=*-musl</code> is sufficient.</p>",
        "id": 228063044,
        "sender_full_name": "nagisa",
        "timestamp": 1614437971
    },
    {
        "content": "<p>Another question comes up when we want to distribute pre-built rustc builds. What exactly does a <code>x86_64-unknown-linux-musl</code> rustc mean then?</p>",
        "id": 228063206,
        "sender_full_name": "nagisa",
        "timestamp": 1614438125
    },
    {
        "content": "<p>this is particularly relevant for libstd and libcore probably, as they already come pre-compiled in those instances.</p>",
        "id": 228063354,
        "sender_full_name": "nagisa",
        "timestamp": 1614438271
    },
    {
        "content": "<p>should raise those points :)</p>",
        "id": 228063512,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614438481
    },
    {
        "content": "<p>personally, i like the idea of just fixing the <code>-musl</code> targets.  they should never have been implemented that way to begin with, and conversation with the musl author would have confirmed that.</p>",
        "id": 228063579,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614438532
    },
    {
        "content": "<p>incidentally, rich felker agrees that <code>-musl</code> should not be staticly linked in <em>any</em> case by default</p>",
        "id": 228063959,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614438925
    },
    {
        "content": "<p>so i think if people want to fix <code>-musl</code> target, it should be fixed in a consistent way</p>",
        "id": 228063968,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614438945
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[07:49:23] &lt;Ariadne&gt; so -dynmusl isn&#39;t going to happen after all, and -musl is just going to be fixed\n[07:52:05] &lt;dalias&gt; good\n[07:52:19] &lt;dalias&gt; the &quot;differently static by default&quot; makes no sense\n[07:52:25] &lt;dalias&gt; if you want a static binary just pass -static\n[07:52:27] &lt;dalias&gt; same as all targets\n[07:53:02] &lt;Cogitri&gt; Sure, but it&#39;ll be a rather huge break from the previous behaviour, so my understanding was that they didn&#39;t want to do rhat\n[07:53:23] &lt;dalias&gt; *sigh*\n[07:53:43] &lt;Ariadne&gt; Cogitri: they are adding backwards compatibility code to handle that for glibc hosts\n[07:53:53] &lt;dalias&gt; ...\n[07:53:58] &lt;Ariadne&gt; so if you do rust build on a glibc host with musl, it will still be static\n[07:54:09] &lt;dalias&gt; that&#39;s so broken -- isn&#39;t it going to break the rather normal case of cross compiling?\n[07:54:10] &lt;Ariadne&gt; if you do rust build on musl host with musl it will be dynamic\n[07:54:35] &lt;Ariadne&gt; dalias: no, it will keep the behavior the same as it is now for cross compiling\n[07:54:45] &lt;dalias&gt; the behavior now IS BROKEN\n[07:54:52] &lt;Ariadne&gt; yes, i agree\n[07:55:00] &lt;Ariadne&gt; but i don&#39;t care about glibc to musl cross :P\n[07:55:04] &lt;dalias&gt; if i want to cross compile for arm-linux-musleabihf and don&#39;t put -static i want dynamic binaries\n[07:55:15] &lt;dalias&gt; and doing that from glibc host is a fairly common thing ppl do\n[07:55:36] &lt;Ariadne&gt; for that case, you just use -C features=-crt-static\n[07:55:41] &lt;Ariadne&gt; as you do now :P\n[07:55:49] &lt;dalias&gt; ...\n[07:55:58] &lt;dalias&gt; no, now i don&#39;t use rust\n[07:56:10] &lt;dalias&gt; but if/when i do, i want it not to violate least-surprise in stupid ways\n</code></pre></div>",
        "id": 228064083,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614439073
    },
    {
        "content": "<p>( Rich Felker is dalias. )</p>",
        "id": 228064476,
        "sender_full_name": "Jubilee",
        "timestamp": 1614439452
    },
    {
        "content": "<p>i have to say, if people talked to the musl community instead of making assumptions about musl 5 years ago, we would probably not be having this conversation now :P</p>",
        "id": 228064582,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614439569
    },
    {
        "content": "<p>anyway i asked rich to comment on the PR</p>",
        "id": 228064619,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614439635
    },
    {
        "content": "<p>i would like to withdraw any merge until we completely talk this through</p>",
        "id": 228064626,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614439652
    },
    {
        "content": "<p>because ultimately i think we need to just solve this once and for all and <code>-dynmusl</code> is walking around the elephant in the room</p>",
        "id": 228064636,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614439681
    },
    {
        "content": "<p>and i think that is ultimately <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>'s point, that we're not solving the real problem here</p>",
        "id": 228064720,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614439759
    },
    {
        "content": "<p>You don't have to worry about this being merged prematurely, even if everyone voted NOW, it would not immediately get merged.</p>",
        "id": 228064723,
        "sender_full_name": "Jubilee",
        "timestamp": 1614439764
    },
    {
        "content": "<p>and uh, it takes more than a second to round up all the <del>cats</del> compiler developers.</p>",
        "id": 228064780,
        "sender_full_name": "Jubilee",
        "timestamp": 1614439807
    },
    {
        "content": "<p>The final comment period would then be open for about 10 days, so apologies if you had a tight deadline for this. :^)</p>",
        "id": 228064978,
        "sender_full_name": "Jubilee",
        "timestamp": 1614440033
    },
    {
        "content": "<p>i do not have a tight deadline, we do not ship alpine 3.14 until may or june :)</p>",
        "id": 228065246,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440299
    },
    {
        "content": "<p>but hey, if we're going to go through RFC process, we might as well just fix <code>-musl</code> targets properly.</p>",
        "id": 228065254,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440324
    },
    {
        "content": "<p>Does Rust's backwards compatibility policy permit this change?</p>",
        "id": 228065279,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1614440360
    },
    {
        "content": "<p>considering rust did something that if musl had a trademark policy, it would be suing rust over...</p>",
        "id": 228065282,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440384
    },
    {
        "content": "<p>well maybe suing is too strong a word, but :P</p>",
        "id": 228065334,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440412
    },
    {
        "content": "<p>I've actually never seen a backwards compatibility policy with a litigation exception :P Security is the usual exception.</p>",
        "id": 228065343,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1614440425
    },
    {
        "content": "<p>i'm not sure what to do re: that policy, but this whole situation boils down to somebody getting something merged without doing the proper communications with their other stakeholders (the people who actually hack on musl, like me and rich and so on)</p>",
        "id": 228065374,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440491
    },
    {
        "content": "<p>i would certainly hope a backwards compatibility policy has some allowances for correcting mistakes</p>",
        "id": 228065377,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440509
    },
    {
        "content": "<p>I don't know. I'm genuinely asking.</p>",
        "id": 228065444,
        "sender_full_name": "Alex Gaynor",
        "timestamp": 1614440549
    },
    {
        "content": "<p>there was a whole \"musl is for static linking\" meme on hacker news, my guess would be that's where this mistake originated from</p>",
        "id": 228065451,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440564
    },
    {
        "content": "<p>Maybe deprecate the original target and add a new, <code>dynmusl</code> one <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 228065471,
        "sender_full_name": "Laurențiu",
        "timestamp": 1614440587
    },
    {
        "content": "<p>I do not believe the backwards compatibility guarantees substantively apply here. They strongly apply to <em>code</em>, and <strong>types</strong>.</p>",
        "id": 228065479,
        "sender_full_name": "Jubilee",
        "timestamp": 1614440591
    },
    {
        "content": "<p>yes, at least from my side (Alpine and also as a musl contributor), i see this as a well overdue bugfix and <code>-dynmusl</code> as a workaround</p>",
        "id": 228065546,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> indicated he wants to see an actual bugfix and not a workaround :P</p>",
        "id": 228065556,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440666
    },
    {
        "content": "<p>And even then the famed Rust \"backwards compatibility policy\" is actually more of a specification of what <strong>won't</strong> be considered as subject to backwards compatibility concerns, since the passive policy in many other langs is to, when you find out that you implemented something in an unsound way, go \"oh well\".</p>",
        "id": 228065575,
        "sender_full_name": "Jubilee",
        "timestamp": 1614440703
    },
    {
        "content": "<p>instead of breaking it.</p>",
        "id": 228065593,
        "sender_full_name": "Jubilee",
        "timestamp": 1614440711
    },
    {
        "content": "<p>however i do admit there is a lot of (wrong) advice that says if you want staticly linked rust binaries use <code>--target=*-musl</code></p>",
        "id": 228065604,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440752
    },
    {
        "content": "<p>so, some way of managing expectations seems appropriate</p>",
        "id": 228065652,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440767
    },
    {
        "content": "<p>So, Rust actually promises to break you if something unsound is discovered. :^)<br>\nIndeed, though I would say <em>any</em> change here requires heavy marketing.</p>",
        "id": 228065664,
        "sender_full_name": "Jubilee",
        "timestamp": 1614440796
    },
    {
        "content": "<p>on the bug i proposed fixing the <code>-musl</code> targets and having it print a warning.  musl distros can just patch out that warning for now.</p>",
        "id": 228065695,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440835
    },
    {
        "content": "<p>i think this is a reasonable approach that aligns the rust musl target with reality</p>",
        "id": 228065707,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614440874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130046\">Alex Gaynor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/228065279\">said</a>:</p>\n<blockquote>\n<p>Does Rust's backwards compatibility policy permit this change?</p>\n</blockquote>\n<p>Targets historically haven't been following the strict interpretation of backwards compatibility that APIs do. In recent memory we both downgraded target tiers and removed existing unmaintained/unused targets.</p>",
        "id": 228065803,
        "sender_full_name": "nagisa",
        "timestamp": 1614440996
    },
    {
        "content": "<p>/me remembers <a href=\"https://github.com/rust-lang/rust/issues/81514\">https://github.com/rust-lang/rust/issues/81514</a> and goes to delete the target in question.</p>",
        "id": 228065871,
        "sender_full_name": "nagisa",
        "timestamp": 1614441045
    },
    {
        "content": "<p>i wonder if there should be some documented best practices for target maintainers too</p>",
        "id": 228065891,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441079
    },
    {
        "content": "<p>like i said, lack of communication is why we find ourselves in this mess with musl :)</p>",
        "id": 228065900,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441095
    },
    {
        "content": "<p>It would be nice to specify points of contact for targets and docker images</p>",
        "id": 228065976,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1614441153
    },
    {
        "content": "<p>also if there is anything alpine or the musl community at large can provide to rust, let me know and i'll try to get it going</p>",
        "id": 228066005,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441197
    },
    {
        "content": "<p>It could be just my perception, but based on what I've noticed, targets are often introduced by people who have a desire to compile for that target, who have their own motivations that may not be aligned with the Rust compiler's long term interests nor the target's long term interests.</p>",
        "id": 228066011,
        "sender_full_name": "Jubilee",
        "timestamp": 1614441221
    },
    {
        "content": "<p>we are working on providing some musl-based systems for Python CI :)</p>",
        "id": 228066018,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441233
    },
    {
        "content": "<p>yes, absolutely.  and when i say communication, i mean that FOSS world at large could stand to have better communication.</p>",
        "id": 228066118,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441346
    },
    {
        "content": "<p>the musl community should have been more proactive in engaging with the rust team</p>",
        "id": 228066171,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441375
    },
    {
        "content": "<p>So without knowing the history per se, I think that the null hypothesis is that it wasn't even necessarily a misunderstanding that caused musl to be static linked by default so much as the person adding musl targets just wanted a musl target that does static linking. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 228066173,
        "sender_full_name": "Jubilee",
        "timestamp": 1614441380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/228066011\">said</a>:</p>\n<blockquote>\n<p>It could be just my perception, but based on what I've noticed, targets are often introduced by people who have a desire to compile for that target, who have their own motivations that may not be aligned with the Rust compiler's long term interests nor the target's long term interests.</p>\n</blockquote>\n<p>Yes, the <code>musl</code> targets were introduced with a primary motivation of being able to quickly build self-contained things without needing to set anything up – that's why they ship the entire musl with the libstd.</p>",
        "id": 228066180,
        "sender_full_name": "nagisa",
        "timestamp": 1614441403
    },
    {
        "content": "<p>and that's fine, but the targets should have been named appropriately</p>",
        "id": 228066204,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441447
    },
    {
        "content": "<p>because now we've been patching since 2015 :)</p>",
        "id": 228066213,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441472
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/24777\">https://github.com/rust-lang/rust/pull/24777</a></p>",
        "id": 228066271,
        "sender_full_name": "nagisa",
        "timestamp": 1614441516
    },
    {
        "content": "<blockquote>\n<p>The outcome here is that there are 0 compile-time dependencies for a MUSL-targeting build except for a linker.</p>\n</blockquote>",
        "id": 228066292,
        "sender_full_name": "nagisa",
        "timestamp": 1614441545
    },
    {
        "content": "<p>yep.</p>",
        "id": 228066308,
        "sender_full_name": "Jubilee",
        "timestamp": 1614441557
    },
    {
        "content": "<p>yeah good deal for alex, bad deal for the ecosystem at large :P</p>",
        "id": 228066316,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441580
    },
    {
        "content": "<p>Believing someone would just fix it within the next year or two if it was a big issue probably seemed like a sane assumption at the time. :^)</p>",
        "id": 228066457,
        "sender_full_name": "Jubilee",
        "timestamp": 1614441687
    },
    {
        "content": "<p>we were busy dealing with the whole docker revolution</p>",
        "id": 228066477,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441720
    },
    {
        "content": "<p>prior to docker, there were maybe 10,000 people using musl-based distros</p>",
        "id": 228066549,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441762
    },
    {
        "content": "<p>oh dear.</p>",
        "id": 228066551,
        "sender_full_name": "Jubilee",
        "timestamp": 1614441771
    },
    {
        "content": "<p>then people noticed they could get tiny images on Alpine Linux or whatever</p>",
        "id": 228066581,
        "sender_full_name": "Jubilee",
        "timestamp": 1614441787
    },
    {
        "content": "<p>well, that's not exactly what happened</p>",
        "id": 228066613,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441833
    },
    {
        "content": "<p>Solomon did the Alpine deal as a big middle finger to Canonical because they pissed him off</p>",
        "id": 228066661,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441854
    },
    {
        "content": "<p>something about competing with his company while saying they weren't (:</p>",
        "id": 228066673,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441887
    },
    {
        "content": "<p>Alpine was a good target for Docker to base on because it was small, but more importantly because they could employ a good chunk of the dev team.</p>",
        "id": 228066720,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441931
    },
    {
        "content": "<p>and if you have a good chunk of a distro's dev team on your payroll, you tend to get what you want done</p>",
        "id": 228066735,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614441952
    },
    {
        "content": "<p>but as a result of that we went from being a small distro to being a mainstream distro in about a year</p>",
        "id": 228066833,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614442050
    },
    {
        "content": "<p>and that was going on at the same time as rust growing musl support</p>",
        "id": 228066838,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614442067
    },
    {
        "content": "<p>well if y’all don’t hate me already you’ll hate my next initiative after sorting the musl mess</p>",
        "id": 228080418,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457073
    },
    {
        "content": "<p>which is going to be figure out how to slim down the overhead of libstd</p>",
        "id": 228080470,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457096
    },
    {
        "content": "<p>i would like to start porting alpine user space components to rust, but going from 55kb to 500+kb for ifupdown-ng as an example, is going to get people wanting to burn a witch</p>",
        "id": 228080518,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457165
    },
    {
        "content": "<p><code>-Clto=yes -Oz</code></p>",
        "id": 228080525,
        "sender_full_name": "bjorn3",
        "timestamp": 1614457183
    },
    {
        "content": "<p>hot damn</p>",
        "id": 228080526,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457190
    },
    {
        "content": "<p>going to have to check that out</p>",
        "id": 228080536,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457202
    },
    {
        "content": "<p>LTO is often very effective at stripping away big chunks of libstd. Even <code>--gc-sections</code>, which is passed by rustc by default, doesn't help as much as LTO at removing dead code.</p>",
        "id": 228080633,
        "sender_full_name": "bjorn3",
        "timestamp": 1614457283
    },
    {
        "content": "<p>well it would be nice if we had dynamic linking for crates too</p>",
        "id": 228080708,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457332
    },
    {
        "content": "<p>You can also use <code>-Cprefer-dynamic</code> to dynamically link the standard library.</p>",
        "id": 228080709,
        "sender_full_name": "bjorn3",
        "timestamp": 1614457334
    },
    {
        "content": "<p>that would help a lot</p>",
        "id": 228080710,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457336
    },
    {
        "content": "<p>o...</p>",
        "id": 228080712,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457342
    },
    {
        "content": "<p>huh</p>",
        "id": 228080715,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457348
    },
    {
        "content": "<p>You do need the corresponding libstd, but given that the filename changes for every rustc version, that shouldn't cause any conflicts.</p>",
        "id": 228080757,
        "sender_full_name": "bjorn3",
        "timestamp": 1614457396
    },
    {
        "content": "<p>seems to me i could slot the libstd crate</p>",
        "id": 228080886,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457539
    },
    {
        "content": "<p>that would allow multiple <a href=\"http://libstd.so\">libstd.so</a> to be managed by apk at the same time</p>",
        "id": 228080899,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457558
    },
    {
        "content": "<p>well then it’s very likely that we will replace busybox with a rust replacement</p>",
        "id": 228081163,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614457805
    },
    {
        "content": "<p>Something like <a href=\"https://github.com/uutils/coreutils\">https://github.com/uutils/coreutils</a> you mean?</p>",
        "id": 228081212,
        "sender_full_name": "bjorn3",
        "timestamp": 1614457860
    },
    {
        "content": "<p>Or <a href=\"https://github.com/mesalock-linux/mesabox\">https://github.com/mesalock-linux/mesabox</a>?</p>",
        "id": 228081241,
        "sender_full_name": "bjorn3",
        "timestamp": 1614457890
    },
    {
        "content": "<p>In rust dylibs don't have the best ergonomics currently. They will link into themself all their rlib dependencies. If two dylibs depend on the same rlib, rustc will throw an error as that would cause the rlib to be included twice. Most crates don't specify a dylib as possible crate type, so it rarely causes problems, but it does happen a bit more often when using <code>-Cprefer-dynamic</code> as that will cause dylibs to be preferred over rlibs when both are available. It is probably not something to worry about, but just in case you happen to encounter it, I am telling this.</p>",
        "id": 228081700,
        "sender_full_name": "bjorn3",
        "timestamp": 1614458326
    },
    {
        "content": "<p>yeah my understanding is dylibs are very experimental still</p>",
        "id": 228081938,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614458559
    },
    {
        "content": "<p>I would very much love the rough edges to be gone. The jit mode of cg_clif doesn't support loading unlinked rlibs, only linked dylibs using dlopen, so it needs dylibs.</p>",
        "id": 228082440,
        "sender_full_name": "bjorn3",
        "timestamp": 1614459151
    },
    {
        "content": "<p>Yes I think while it technically is not marked by an unstable flag, \"overly much messing with linker stuff\" seems to have \"All hope abandon ye who enter here\" somewhere around it.</p>",
        "id": 228082724,
        "sender_full_name": "Jubilee",
        "timestamp": 1614459527
    },
    {
        "content": "<p>with <code>-Cprefer-dynamic</code> a stripped hello world program is 14kb</p>",
        "id": 228082746,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614459565
    },
    {
        "content": "<p>which is \"sellable\"</p>",
        "id": 228082751,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614459576
    },
    {
        "content": "<p>I think I already mentioned that there's also been efforts to use gold or lld as a linker, which may be better/worse at GCing like that.</p>",
        "id": 228082855,
        "sender_full_name": "Jubilee",
        "timestamp": 1614459686
    },
    {
        "content": "<p>lld is a bit worse. 15k</p>",
        "id": 228082972,
        "sender_full_name": "bjorn3",
        "timestamp": 1614459793
    },
    {
        "content": "<p>Interesting. I wonder if they have different performance on larger projects.</p>",
        "id": 228082983,
        "sender_full_name": "Jubilee",
        "timestamp": 1614459811
    },
    {
        "content": "<p>gold is better. 11k<br>\nedit: rounding</p>",
        "id": 228082985,
        "sender_full_name": "bjorn3",
        "timestamp": 1614459814
    },
    {
        "content": "<p>aah, nice.</p>",
        "id": 228082986,
        "sender_full_name": "Jubilee",
        "timestamp": 1614459819
    },
    {
        "content": "<p>With optimizations and gold just 6k.</p>",
        "id": 228083043,
        "sender_full_name": "bjorn3",
        "timestamp": 1614459899
    },
    {
        "content": "<p>For the default linker and lld optimizations barely matter. <del>For lld it even made it a bit worse.</del></p>",
        "id": 228083210,
        "sender_full_name": "bjorn3",
        "timestamp": 1614460061
    },
    {
        "content": "<p><code>-Oz</code> seems to not work on 1.50</p>",
        "id": 228083217,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614460078
    },
    {
        "content": "<p>Use <code>-Copt-level=z</code>.</p>",
        "id": 228083258,
        "sender_full_name": "bjorn3",
        "timestamp": 1614460087
    },
    {
        "content": "<p>Doesn't change the result over <code>-Copt-level=3</code> in this case though for me.</p>",
        "id": 228083278,
        "sender_full_name": "bjorn3",
        "timestamp": 1614460119
    },
    {
        "content": "<p>still 14k :P</p>",
        "id": 228083285,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614460137
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/54026\">https://github.com/rust-lang/rust/issues/54026</a></p>",
        "id": 228083310,
        "sender_full_name": "Jubilee",
        "timestamp": 1614460187
    },
    {
        "content": "<p>without -Cprefer-dynamic, it's 283kb</p>",
        "id": 228083311,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614460191
    },
    {
        "content": "<p>which is not bad for a staticly linked program, but :P</p>",
        "id": 228083313,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614460200
    },
    {
        "content": "<p>oh <span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> what's your baseline for x86_64 support out of curiosity.</p>",
        "id": 228083483,
        "sender_full_name": "Jubilee",
        "timestamp": 1614460354
    },
    {
        "content": "<p>baseline in what way?</p>",
        "id": 228083583,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614460473
    },
    {
        "content": "<p>we go all the way back to original AMD K8</p>",
        "id": 228083590,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614460487
    },
    {
        "content": "<p>in fact, i still have a few Athlon 64 3200+ machines in service at various sites running alpine</p>",
        "id": 228083725,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614460670
    },
    {
        "content": "<p>in the science community, there is a very strong \"if it ain't broke, don't fix it\" mentality.  so if you set up VPN concentrator or something like that, it will just stay in service until it is physically dead or the service is no longer needed</p>",
        "id": 228084086,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614461130
    },
    {
        "content": "<p>since alpine runs from ram, and compactflash IDE storage is quite robust, it is possible to have appliances in service across multiple decades</p>",
        "id": 228084149,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614461181
    },
    {
        "content": "<p>yeah, minimal arch support was what I was wondering! got it, SSE2 then~</p>",
        "id": 228084152,
        "sender_full_name": "Jubilee",
        "timestamp": 1614461186
    },
    {
        "content": "<p>which is basically what we built alpine to do :)</p>",
        "id": 228084154,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614461195
    },
    {
        "content": "<p>(alpine was basically started by people in the networking research community.  we started it because emdebian wasn't getting the job done anymore.)</p>",
        "id": 228084195,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614461263
    },
    {
        "content": "<p>musl also comes from that community and so on</p>",
        "id": 228084254,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614461296
    },
    {
        "content": "<p>our x86 baseline is i586 AMD Geode</p>",
        "id": 228084328,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614461407
    },
    {
        "content": "<p>There is that part of the science community and then there is also the part of the science community that has very, very, very big machines that run the bleedingest edgest AVX instructions, and sometimes there is some surprising overlap, which is why I figured I'd ask. :^)</p>",
        "id": 228084344,
        "sender_full_name": "Jubilee",
        "timestamp": 1614461420
    },
    {
        "content": "<p>oh, people do that with alpine too now :)</p>",
        "id": 228084354,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614461442
    },
    {
        "content": "<p>same reason for geode btw, there's still a lot of embedded SBCs with that chip in service</p>",
        "id": 228084376,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614461475
    },
    {
        "content": "<p>we try to choose practical baseline targets for support, based on what people are likely to have in service</p>",
        "id": 228084380,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614461496
    },
    {
        "content": "<p>this is why mips64 is soft-float mips64r2, for example.  we want to target the Octeon appliances out there which do not have usable FPUs</p>",
        "id": 228084436,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614461536
    },
    {
        "content": "<p>Rust uses i686 as baseline though I think there are also i586 targets for some OS + libc combinations.</p>",
        "id": 228086169,
        "sender_full_name": "bjorn3",
        "timestamp": 1614463693
    },
    {
        "content": "<p>yes, alpine uses an i586 target :)</p>",
        "id": 228086175,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614463710
    },
    {
        "content": "<p>baseline for alpine was originally i486, but we moved to i586 for practical reasons (namely, it is difficult to make modern kernel boot on i486)</p>",
        "id": 228086424,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614464042
    },
    {
        "content": "<p>the more i work with rust, the more it fits what i already know from ML.  in that way, it feels like an old friend.</p>",
        "id": 228092413,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614471162
    },
    {
        "content": "<p>It can't really hide that it started as OCaml and a bunch of PPX. :^)</p>",
        "id": 228094225,
        "sender_full_name": "Jubilee",
        "timestamp": 1614473502
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/228081163\">said</a>:</p>\n<blockquote>\n<p>well then it’s very likely that we will replace busybox with a rust replacement</p>\n</blockquote>\n<p>Is there a place/forum I could follow discussions on this part? :D</p>",
        "id": 228857589,
        "sender_full_name": "Darley Barreto",
        "timestamp": 1614894968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> You asked if there was anything musl could do on your end, to make musl and rust work better together?</p>",
        "id": 229006898,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614971051
    },
    {
        "content": "<p>There is something that comes up very often in the rust libc crate.</p>",
        "id": 229007250,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614971177
    },
    {
        "content": "<p>We have tests in CI to make sure that any definitions we add match the C library, and we run those tests on both glibc and musl targets (in addition to other targets like Windows and macOS).</p>",
        "id": 229007366,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614971239
    },
    {
        "content": "<p>So when we add something on Linux, for instance, it has to match the definitions in both glibc and musl, or it fails CI and we have to either the definition or add an exception in CI. This helps make sure we don't have portability issues on some targets.</p>",
        "id": 229007483,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614971288
    },
    {
        "content": "<p>However, a really common problem that arises (for which we regularly end up having to add exceptions to CI) is when we're adding a definition from the Linux kernel headers, glibc has it because glibc systems use the actual kernel headers, and musl systems don't have it. So we typically end up having to add a CI exception, because the definition will be the same on all Linux platforms, and it depends on the kernel and not the C library.</p>",
        "id": 229007684,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614971394
    },
    {
        "content": "<p>There isn't a trivial way to match \"all kernel-specific definitions\", or I think we'd have long since added a blanket \"ignore musl compatibility for everything from the kernel headers\".</p>",
        "id": 229007880,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614971470
    },
    {
        "content": "<p>I have the general impression (third-hand, not first-hand) that there's something going on with musl's handling of kernel headers that makes it tend to not have the latest kernel definitions, in a way that doesn't seem to happen with glibc. I don't know if this is an accurate impression, and I don't know what the underlying issue is.</p>",
        "id": 229009246,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614971999
    },
    {
        "content": "<p>But in general, it'd be extremely helpful if we could rely on musl having all the up-to-date definitions from the kernel headers, at least as up-to-date as the definitions from a reasonably recent glibc. That'd go a long way towards making the musl targets easier to maintain and update.</p>",
        "id": 229009659,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1614972131
    },
    {
        "content": "<p>err musl uses the actual kernel headers too</p>",
        "id": 229015666,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614974550
    },
    {
        "content": "<p>at one time, the kernel headers required patching, but for the past several years, the kernel headers have been used in an unmodified state</p>",
        "id": 229016065,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614974706
    },
    {
        "content": "<p>so it sounds to me like something about the CI is out of date</p>",
        "id": 229017261,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614975185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"360752\">Ariadne Conill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrapping.20on.20s390x.2Fmips.20for.20musl/near/229015666\">said</a>:</p>\n<blockquote>\n<p>err musl uses the actual kernel headers too</p>\n</blockquote>\n<p>This is incorrect. musl has <em>supported</em> including actual kernel headers for a while now, but unlike glibc, the musl headers are self-contained, while glibc headers actually include kernel headers for various definitions.</p>",
        "id": 229034000,
        "sender_full_name": "NeoRaider",
        "timestamp": 1614982666
    },
    {
        "content": "<p>So for many Linux-specific parts, e.g. new fcntl flags, glibc gets the definitions \"for free\", while they have to be mirrored in musl to become usable.</p>",
        "id": 229034205,
        "sender_full_name": "NeoRaider",
        "timestamp": 1614982769
    },
    {
        "content": "<p>I have no idea how exactly this affects the Rust libc though</p>",
        "id": 229034229,
        "sender_full_name": "NeoRaider",
        "timestamp": 1614982790
    },
    {
        "content": "<p>oh, good point.  well, that is somewhat a philosophical decision on musl's part</p>",
        "id": 229055462,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1614996808
    },
    {
        "content": "<p>It seems problematic when it's leaving a flag defined that the kernel headers define, and that can't reasonably be defined any other way than the kernel defines it.</p>",
        "id": 229117312,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615054342
    },
    {
        "content": "<p>This affects the rust libc when we try to define such a flag and the musl CI fails because the musl headers don't define it</p>",
        "id": 229117337,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615054388
    },
    {
        "content": "<p>It doesn't deeply matter to me whether the definitions come from kernel headers or musl headers, except insofar as it prevents using constant definitions from the kernel.</p>",
        "id": 229117468,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615054475
    },
    {
        "content": "<p>so, in musl, you're supposed to #include the linux headers directly for that.</p>",
        "id": 229265898,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1615193550
    },
    {
        "content": "<p>Interesting. I had had the impression that musl discouraged that. Do musl's headers avoid conflicts and duplicate definitions there?</p>",
        "id": 229795150,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615439386
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"360752\">@Ariadne Conill</span> et al, I just wanted to let you know I've submitted a <a href=\"https://github.com/rust-lang/compiler-team/issues/416\">compiler team meeting proposal</a> to discuss <a href=\"https://github.com/rust-lang/rust/issues/82556\">#82556</a>. Thanks for your patience while we've worked through the right way to resolve this issue! </p>\n<p>Tomorrow morning we have a planning meeting in <a class=\"stream\" data-stream-id=\"238009\" href=\"/#narrow/stream/238009-t-compiler.2Fmeetings\">#t-compiler/meetings</a>  at <time datetime=\"2021-03-12T15:00:00Z\">2021-03-12T10:00:00-05:00</time>  to schedule these meetings over the coming weeks (meetings are always held at that time on Fridays). If you would like to attend tomorrow's meeting and help us find a time that works for you so we can discuss next steps that would be great! Or, if you just want to let me know which Fridays over the next month works for you, I can make sure we schedule that meeting on a day you've said. </p>\n<p>(Also, if the meeting proposal isn't accurate or you feel it is missing important questions that should be resolved, please let me know and I will fix it)</p>",
        "id": 229934086,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1615499971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> is it appropriate to ask other stakeholders to attend the scheduling meeting?</p>",
        "id": 229941387,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1615502443
    },
    {
        "content": "<blockquote>\n<p>Interesting. I had had the impression that musl discouraged that. Do musl's headers avoid conflicts and duplicate definitions there?</p>\n</blockquote>\n<p>yes</p>",
        "id": 229941434,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1615502469
    },
    {
        "content": "<p>if you wish to use linux-specific APIs, you should use the linux headers that define them</p>",
        "id": 229941467,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1615502496
    },
    {
        "content": "<p>you should NOT use linux-specific headers that define POSIX interfaces</p>",
        "id": 229941486,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1615502510
    },
    {
        "content": "<p>Sure! Our meetings are open for anyone to attend. If there are other people that should be included in the actual meeting to discuss <a href=\"https://github.com/rust-lang/rust/issues/82556\">#82556</a> then it would be great if we can find a day that works for them as well.</p>",
        "id": 229941540,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1615502525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> alright, i've asked ericonr from void and rich felker to attend the scheduling meeting</p>",
        "id": 229945874,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1615504799
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 230040910,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1615560648
    },
    {
        "content": "<p>tmhoang, an alpine contributor from IBM is going to likely take over the actual bootstrap work on s390x since i am busy right now with other tasks</p>",
        "id": 231011382,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616154964
    },
    {
        "content": "<p>i linked him this thread, so he can get up to date on the situation :)</p>",
        "id": 231011408,
        "sender_full_name": "Ariadne Conill",
        "timestamp": 1616154983
    }
]