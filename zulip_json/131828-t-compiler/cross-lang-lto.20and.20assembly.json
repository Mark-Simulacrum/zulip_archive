[
    {
        "content": "<p>Hey @mw, do you know of any reason that cross-language LTO shouldn't work if my C file is actually an assembly file?</p>",
        "id": 152207262,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1545248494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> Yeah, that I think would be expected -- LLVM doesn't uplift assembly into LLVM IR so it can't run optimization passes based on it?</p>\n<p>Not sure if that's what you mean though</p>",
        "id": 152207321,
        "sender_full_name": "simulacrum",
        "timestamp": 1545248542
    },
    {
        "content": "<p>I don't think I phrased my question well, let me try again: Do you think cross-language LTO will work when the two languages are Rust + assembly?</p>",
        "id": 152207364,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1545248628
    },
    {
        "content": "<p>I have not tried anything, so I have no clue ;-)</p>",
        "id": 152207412,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1545248644
    },
    {
        "content": "<p>But, if I understand you correctly, cross-language LTO only works when there's LLVM IR available. Assembly wouldn't have that, so LTO is <strong>not</strong> possible?</p>",
        "id": 152207435,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1545248697
    },
    {
        "content": "<p>I suppose it depends on definition of LTO -- LLVM might be able to strip out symbols/reduce code size by inlining still, I guess</p>",
        "id": 152207551,
        "sender_full_name": "simulacrum",
        "timestamp": 1545248794
    },
    {
        "content": "<p>But the \"intelligent\" optimization I think wouldn't happen</p>",
        "id": 152207579,
        "sender_full_name": "simulacrum",
        "timestamp": 1545248849
    },
    {
        "content": "<p>AFAIK there is no existing infrastructure in LLVM for doing any non-trivial optimizing starting from textual assembly (beyond what linkers could already do). Even the low level machine-specific peephole optimizations work on a much richer IR (MachineInstr) than what LLVM can get back out of textual assembly (MCInstr).</p>",
        "id": 152208572,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1545249658
    },
    {
        "content": "<p>I'm thinking even beyond text â€” if I have two fully compiled object files (just machine code), can those somehow be optimized (esp. inlined) with each other?</p>",
        "id": 152210983,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1545251673
    },
    {
        "content": "<p>Like, I guess I got mislead by the belief that \"linkers just combine machine code\", thus link-time optimization would be on that machine code. However, in this case we have enhanced object files that also have LLVM IR in it, so \"link time\" is <em>also</em> \"code generation time\"</p>",
        "id": 152211130,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1545251795
    },
    {
        "content": "<p>FWIW object file vs textual asm isn't a big difference in any way that matters for this subject</p>",
        "id": 152214891,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1545255296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> what matters is ability to inline</p>",
        "id": 152216987,
        "sender_full_name": "nagisa",
        "timestamp": 1545257360
    },
    {
        "content": "<p>object file produced from external assembly will not be able to get rid of the call-overhead</p>",
        "id": 152216996,
        "sender_full_name": "nagisa",
        "timestamp": 1545257382
    },
    {
        "content": "<p>though in practice it seems seldom necessary</p>",
        "id": 152217396,
        "sender_full_name": "nagisa",
        "timestamp": 1545257824
    },
    {
        "content": "<p>Yes, as the others already mentioned, cross-lang LTO needs LLVM IR for all code involved in order to do anything useful. Linkers can handle mixes of LLVM IR and regular libs/object files but the latter won't take part in the optimization passes.</p>",
        "id": 152242538,
        "sender_full_name": "mw",
        "timestamp": 1545295933
    }
]