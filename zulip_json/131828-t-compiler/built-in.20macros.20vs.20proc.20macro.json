[
    {
        "content": "<p>Is there any particular reason that some built-in macros are actually built-in rather than \"regular\" procedural macros? It seems like a number of macros (including all derives, <code>concat</code>, <code>concat_idents</code>, and probably more) could be done as a proc macro. Admittedly the current proc macro API is a bit limited in knowledge, but wouldn't that be a good opportunity to hammer out a more thorough API based on real-world usage? Something like <code>concat</code> or <code>concat_idents</code> could likely be implemented trivially, even with the current limited API.</p>",
        "id": 245236444,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625689006
    },
    {
        "content": "<p>Historical artifact for sure, but also the proc macro implementation is definitely not zero cost (and I'm not sure it can be, but that's a harder claim). So there may be some benefits to in-tree impls there too. Generally I don't think there's too much point trying to extract them...</p>",
        "id": 245236714,
        "sender_full_name": "simulacrum",
        "timestamp": 1625689172
    },
    {
        "content": "<p>I figured it was at least partially historical. What extra costs would there be? Re-building the partial AST after the macro is expanded?</p>",
        "id": 245236949,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625689305
    },
    {
        "content": "<p>I am curious to know whether's there's an observable cost and what it might be... not that my own curiosity alone justifies that much work :P</p>",
        "id": 245238485,
        "sender_full_name": "bstrie",
        "timestamp": 1625690060
    },
    {
        "content": "<p>For sure. I likely wouldn't end up doing this myself, was just curious ¯\\_(ツ)_/¯</p>",
        "id": 245238828,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625690266
    },
    {
        "content": "<p>The implementation has to currently pass over C FFI, essentially serializing to bytes and then deserializing. That obviously is higher cost than function calls</p>",
        "id": 245239759,
        "sender_full_name": "simulacrum",
        "timestamp": 1625690800
    },
    {
        "content": "<p>Right. Not thinking about the bridge. Hopefully that won't be necessary in the future. Some day™</p>",
        "id": 245240450,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1625691141
    },
    {
        "content": "<p>Also builtin macros directly construct the AST instead of a tokenstream that is then parsed.</p>",
        "id": 245244222,
        "sender_full_name": "bjorn3",
        "timestamp": 1625693073
    },
    {
        "content": "<p>May I ask why the C FFI is necessary?</p>",
        "id": 245244624,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625693282
    },
    {
        "content": "<p>So that proc macros can be built with a different rustc version than the one used to compile the host rustc they are loaded in. Happens during bootstrapping. Only the source code needs to match between the proc-macro and the host rustc because it uses the C abi.</p>",
        "id": 245244950,
        "sender_full_name": "bjorn3",
        "timestamp": 1625693426
    },
    {
        "content": "<p>I see. Thanks!</p>",
        "id": 245245142,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625693514
    },
    {
        "content": "<p>Also, we have some special cases for the built-in macros, and we'd have to make sure we can preserve those with proc macros.</p>",
        "id": 245247768,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625695032
    },
    {
        "content": "<p>For instance, some macros that require string literals also accept <code>concat!</code> of string literals.</p>",
        "id": 245247786,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625695047
    },
    {
        "content": "<p>We'd have to make sure we can still do that if we use a proc macro.</p>",
        "id": 245247793,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625695054
    },
    {
        "content": "<p>Depending on the architecture, it might get <em>easier</em>...</p>",
        "id": 245247804,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625695060
    },
    {
        "content": "<p>It's unfortunate hat the eager expansion RFC needed to be postponed...</p>",
        "id": 245248255,
        "sender_full_name": "inquisitivecrystal",
        "timestamp": 1625695306
    },
    {
        "content": "<p>Heh, the experiments I did in <a href=\"https://docs.rs/with_builtin_macros\">https://docs.rs/with_builtin_macros</a> may seem relevant.</p>\n<p>But yeah, most built-in macros take advantage of being able to perform eager expansion of the \"string literal expression\", thus accepting stuff such as <code>format!(concat!(include_str!(env!(\"…\")), \"…\"), …)</code>.</p>\n<p>For instance, just look at the API hoops (callback style) <code>with_builtin_macros</code> needs to go through to \"be eagerly expandable\"</p>",
        "id": 245453893,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1625842668
    },
    {
        "content": "<p>(I'm still in love with the example showcased in <a href=\"https://docs.rs/with_builtin_macros/0.0.3/with_builtin_macros/builtin_macros/include_from_root/index.html\">https://docs.rs/with_builtin_macros/0.0.3/with_builtin_macros/builtin_macros/include_from_root/index.html</a> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> )</p>",
        "id": 245454074,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1625842739
    },
    {
        "content": "<p>one of the problems is that <code>proc_macro</code> depends on <code>std</code>, which depends on <code>alloc</code> and eventually <code>core</code></p>",
        "id": 245454124,
        "sender_full_name": "eddyb",
        "timestamp": 1625842767
    },
    {
        "content": "<p>but <code>core</code> has access to builtin macros. AFAIK it's impossible to square that circular dependency graph</p>",
        "id": 245454164,
        "sender_full_name": "eddyb",
        "timestamp": 1625842792
    },
    {
        "content": "<p>you can use a different copy of <code>std</code>+<code>proc_macro</code> to build a proc macro that <code>core</code> depends on at some point in the bootstrap (the very first <code>core</code> being locally built during a Rust build, I believe), but not other points</p>",
        "id": 245454345,
        "sender_full_name": "eddyb",
        "timestamp": 1625842863
    },
    {
        "content": "<p>similarly, <code>-Z build-std</code> <em>might</em> be able to make it work, but I can't guarantee it</p>",
        "id": 245454380,
        "sender_full_name": "eddyb",
        "timestamp": 1625842877
    },
    {
        "content": "<p>there's certainly <em>build scripts</em> that run during the build of <code>std</code> (for backtrace support maybe?), but proc macros have to be compatible with the <code>rustc</code> that will execute them, so we'd have to have version-to-version binary compatibility (maybe version the proc macro bridge, but only support 2 versions at once? and one of them is mostly just a redirect to the other one)</p>",
        "id": 245454802,
        "sender_full_name": "eddyb",
        "timestamp": 1625843067
    },
    {
        "content": "<p>welp now I actually have an idea of how to do this (which I've considered implausible/impractical) for so long :P</p>",
        "id": 245454885,
        "sender_full_name": "eddyb",
        "timestamp": 1625843110
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"270901\">@Nika Layzell</span> (given her recent PRs, and related discussions we've had)</p>",
        "id": 245454917,
        "sender_full_name": "eddyb",
        "timestamp": 1625843130
    },
    {
        "content": "<p>It'd definitely be possible to version the proc macro bridge and support 2 rolling versions in rustc if that's a thing we wanted to do, though we'd need to be a bit careful about it in that case to make sure that each side of the connection isn't making too many assumptions, and would need to run tests with mismatched client/server versions :-) (I'd also want to change the API quite a bit to make it easier to maintain like that)<br>\nWe'd still run into the issues I discovered while working on the proc_macro PR around unmangled symbols in std causing things like panics to not work properly when mixing std versions, though, and that might be a bit tricky.</p>",
        "id": 245455909,
        "sender_full_name": "Nika Layzell",
        "timestamp": 1625843613
    },
    {
        "content": "<p>We'd also need to expand the proc_macro interface to support all of the features which built-in macros take advantage of (like the ability to expand nested macros into literals as <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> mentioned). Getting functionality like that into proc_macro might be nice anyway though :-)</p>",
        "id": 245456449,
        "sender_full_name": "Nika Layzell",
        "timestamp": 1625843872
    },
    {
        "content": "<p>the mismatch only happens during bootstrapping</p>",
        "id": 245456888,
        "sender_full_name": "eddyb",
        "timestamp": 1625844046
    },
    {
        "content": "<p>i.e. <code>-Z build-std</code> shouldn't hit the old version</p>",
        "id": 245456939,
        "sender_full_name": "eddyb",
        "timestamp": 1625844067
    },
    {
        "content": "<p>and I wouldn't move all the macros right away, tbf</p>",
        "id": 245457169,
        "sender_full_name": "eddyb",
        "timestamp": 1625844164
    },
    {
        "content": "<p>If builtin macros are made proc-macros, I would prefer if they are still compiled into rustc itself. I would like to see the build scripts used during libstd builds to go away too.</p>",
        "id": 245457874,
        "sender_full_name": "bjorn3",
        "timestamp": 1625844473
    },
    {
        "content": "<p>that's completely separate from what I'm suggesting, I guess. the unstable <code>proc_macro::quote!</code> macro (if we still have it) is implemented today as a proc macro, but compiled into <code>rustc</code> (rather than as its own dylib), and it would be easy to do the same for some builtin macros</p>",
        "id": 245458047,
        "sender_full_name": "eddyb",
        "timestamp": 1625844577
    },
    {
        "content": "<p>It does still exist: <a href=\"https://github.com/rust-lang/rust/blob/e916b7cb7708e470be8d0134bdf39479051a5c44/library/proc_macro/src/quote.rs#L64\">https://github.com/rust-lang/rust/blob/e916b7cb7708e470be8d0134bdf39479051a5c44/library/proc_macro/src/quote.rs#L64</a></p>",
        "id": 245458732,
        "sender_full_name": "Nika Layzell",
        "timestamp": 1625844925
    },
    {
        "content": "<p>It's implemented there using the <code>proc_macro</code> API, and exported as a builtin macro here: <a href=\"https://github.com/rust-lang/rust/blob/e916b7cb7708e470be8d0134bdf39479051a5c44/library/proc_macro/src/lib.rs#L273\">https://github.com/rust-lang/rust/blob/e916b7cb7708e470be8d0134bdf39479051a5c44/library/proc_macro/src/lib.rs#L273</a> (<a href=\"https://searchfox.org/rust/rev/2daa26b7caad3742c9c61849c67d7341c3df5b97/compiler/rustc_builtin_macros/src/lib.rs#115\">https://searchfox.org/rust/rev/2daa26b7caad3742c9c61849c67d7341c3df5b97/compiler/rustc_builtin_macros/src/lib.rs#115</a>)</p>",
        "id": 245458850,
        "sender_full_name": "Nika Layzell",
        "timestamp": 1625844974
    }
]