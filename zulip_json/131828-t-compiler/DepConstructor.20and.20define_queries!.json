[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> so, I finally got around to following up on <a href=\"https://github.com/rust-lang/rust/pull/80325#discussion_r548492704\">https://github.com/rust-lang/rust/pull/80325#discussion_r548492704</a>. While refactoring that, I thought of making <code>DepConstructor</code> crate-private, since it's only used in rustc_middle, and I discovered that hundreds of functions are being compiled that are completely unused.</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_middle/src/dep_graph/dep_node.rs b/compiler/rustc_middle/src/dep_graph/dep_node.rs</span>\n<span class=\"gh\">index d954c8ab5fb..ff696f84332 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_middle/src/dep_graph/dep_node.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_middle/src/dep_graph/dep_node.rs</span>\n<span class=\"gu\">@@ -172,7 +172,7 @@ pub fn has_params(&amp;self) -&gt; bool {</span>\n             }\n         }\n\n<span class=\"gd\">-        pub struct DepConstructor;</span>\n<span class=\"gi\">+        crate struct DepConstructor;</span>\n\n         #[allow(non_camel_case_types)]\n         impl DepConstructor {\n<span class=\"gh\">diff --git a/compiler/rustc_middle/src/dep_graph/mod.rs b/compiler/rustc_middle/src/dep_graph/mod.rs</span>\n<span class=\"gh\">index 728bfef9f46..303ad19a618 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_middle/src/dep_graph/mod.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_middle/src/dep_graph/mod.rs</span>\n<span class=\"gu\">@@ -15,7 +15,8 @@</span>\n     WorkProduct, WorkProductId,\n };\n\n<span class=\"gd\">-pub use dep_node::{label_strs, DepConstructor, DepKind, DepNode, DepNodeExt};</span>\n<span class=\"gi\">+pub use dep_node::{label_strs, DepKind, DepNode, DepNodeExt};</span>\n<span class=\"gi\">+crate use dep_node::DepConstructor;</span>\n\n pub type DepGraph = rustc_query_system::dep_graph::DepGraph&lt;DepKind&gt;;\n pub type TaskDeps = rustc_query_system::dep_graph::TaskDeps&lt;DepKind&gt;;\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>warning: associated function is never used: `normalize_opaque_types`\n    --&gt; compiler/rustc_middle/src/dep_graph/dep_node.rs:182:17\n     |\n106  | /   macro_rules! define_dep_nodes {\n107  | |       (&lt;$tcx:tt&gt;\n108  | |       $(\n109  | |           [$($attrs:tt)*]\n...    |\n182  | |                   pub fn $variant(_tcx: TyCtxt&lt;&#39;_&gt;, $(arg: $tuple_arg_ty)*) -&gt; DepNode {\n     | |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...    |\n300  | |       );\n301  | |   }\n     | |___- in this expansion of `define_dep_nodes!` (#2)\n302  |\n303  | /   rustc_dep_node_append!([define_dep_nodes!][ &lt;&#39;tcx&gt;\n304  | |       // We use this for most things when incr. comp. is turned off.\n305  | |       [] Null,\n306  | |\n...    |\n312  | |       [] CompileCodegenUnit(Symbol),\n313  | |   ]);\n     | |_____- in this macro invocation (#1)\n     |\n    ::: compiler/rustc_middle/src/query/mod.rs:37:1\n     |\n37   |   / rustc_queries! {\n38   |   |     Other {\n39   |   |         query trigger_delay_span_bug(key: DefId) -&gt; () {\n40   |   |             desc { &quot;trigger a delay span bug&quot; }\n...      |\n1670 |   |     }\n1671 |   | }\n     |   | -\n     |   | |\n     |   |_in this expansion of `rustc_dep_node_append!` (#1)\n     |     in this macro invocation (#2)\n\nwarning: 235 warnings emitted\n</code></pre></div>",
        "id": 222135164,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610145414
    },
    {
        "content": "<p>clearly these can't be completely deleted because <code>hir_crate</code> for example is used quite a lot, so my thought is that the same functions are being compiled multiple times in different namespaces?</p>",
        "id": 222135205,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610145450
    },
    {
        "content": "<p>in fact the only time I see DepConstructor used at <em>all</em> is</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; rg DepConstructor:: compiler/\ncompiler/rustc_middle/src/mir/mono.rs\n365:        DepConstructor::CompileCodegenUnit(tcx, self.name())\n</code></pre></div>",
        "id": 222135387,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610145595
    },
    {
        "content": "<p>which makes me think we might be able to get rid of it</p>",
        "id": 222135457,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610145614
    },
    {
        "content": "<p>Welcome to the query system, with its 237 queries, and 236 special cases <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 222135562,
        "sender_full_name": "cjgillot",
        "timestamp": 1610145703
    },
    {
        "content": "<p>Joke aside, we should totally get rid of it.</p>",
        "id": 222135573,
        "sender_full_name": "cjgillot",
        "timestamp": 1610145716
    },
    {
        "content": "<p>do you know what this is actually doing? What is <code>DepNode::construct</code>?</p>",
        "id": 222135617,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610145725
    },
    {
        "content": "<p><code>DepNode::construct</code> is the constructor for <code>DepNode</code>. It's not called <code>new</code>, probably for historical reasons.</p>",
        "id": 222135673,
        "sender_full_name": "cjgillot",
        "timestamp": 1610145784
    },
    {
        "content": "<p>Defined in <code>rustc_query_system/src/dep_graph/dep_node.rs</code></p>",
        "id": 222135698,
        "sender_full_name": "cjgillot",
        "timestamp": 1610145820
    },
    {
        "content": "<p>ok, so I could replace all the DepConstructor nonsense with something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">codegen_dep_node</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">DepNode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DepNode</span>::<span class=\"n\">construct</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DepKind</span>::<span class=\"n\">CompileCodegenUnit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">names</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222135709,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610145827
    },
    {
        "content": "<p>One caveat: <code>DepNode::construct</code> does not check that the key type corresponds to the query definition. That is <code>DepConstructor</code>'s job.</p>",
        "id": 222135835,
        "sender_full_name": "cjgillot",
        "timestamp": 1610145915
    },
    {
        "content": "<p>Replacing the whole <code>DepConstructor</code> macro by just the few useful functions could be enough.</p>",
        "id": 222135865,
        "sender_full_name": "cjgillot",
        "timestamp": 1610145948
    },
    {
        "content": "<p>omg it was literally that easy</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_middle/src/mir/mono.rs b/compiler/rustc_middle/src/mir/mono.rs</span>\n<span class=\"gh\">index 1e70f760504..243d0aa5fa5 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_middle/src/mir/mono.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_middle/src/mir/mono.rs</span>\n<span class=\"gu\">@@ -362,7 +362,8 @@ fn item_sort_key&lt;'tcx&gt;(tcx: TyCtxt&lt;'tcx&gt;, item: MonoItem&lt;'tcx&gt;) -&gt; ItemSortKey&lt;'</span>\n     }\n\n     pub fn codegen_dep_node(&amp;self, tcx: TyCtxt&lt;'tcx&gt;) -&gt; DepNode {\n<span class=\"gd\">-        DepConstructor::CompileCodegenUnit(tcx, self.name())</span>\n<span class=\"gi\">+        use crate::dep_graph::DepKind;</span>\n<span class=\"gi\">+        DepNode::construct(tcx, DepKind::CompileCodegenUnit, &amp;self.name())</span>\n     }\n }\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>warning: struct is never constructed: `DepConstructor`\n    --&gt; compiler/rustc_middle/src/dep_graph/dep_node.rs:175:9\n</code></pre></div>",
        "id": 222135880,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610145958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/131828-t-compiler/topic/DepConstructor.20and.20define_queries!/near/222135835\">said</a>:</p>\n<blockquote>\n<p>One caveat: <code>DepNode::construct</code> does not check that the key type corresponds to the query definition. That is <code>DepConstructor</code>'s job.</p>\n</blockquote>\n<p>I don't know what this means</p>",
        "id": 222135938,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610145983
    },
    {
        "content": "<p>is 'type' not encoded in the type system?</p>",
        "id": 222135946,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610145991
    },
    {
        "content": "<p><code>DepNode::construct</code> does not know that <code>CompileCodegenUnit</code> takes <code>Symbol</code>s as keys.</p>",
        "id": 222135988,
        "sender_full_name": "cjgillot",
        "timestamp": 1610146038
    },
    {
        "content": "<p>If you call <code>DepNode::construct(tcx, DepKind::CompileCodegenUnit, some_def_id)</code>, the compiler will not yell at you.</p>",
        "id": 222136084,
        "sender_full_name": "cjgillot",
        "timestamp": 1610146103
    },
    {
        "content": "<p>oh I see, <code>construct</code> is generic and there's no checks that you instantiate it with the right type</p>",
        "id": 222136104,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610146121
    },
    {
        "content": "<p>I'm still inclined to get rid of DepConstructor and just leave a comment that it's important to get the type right</p>",
        "id": 222136136,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610146147
    },
    {
        "content": "<p>I rather replace it by</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">make_compile_codegen_unit</span><span class=\"p\">(</span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nc\">Symbol</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">DepNode</span>::<span class=\"n\">construct</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DepKind</span>::<span class=\"n\">CompileCodegenUnit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>in <code>dep_node.rs</code>, with a by warning comment linking it to the definition of <code>CompileCodegenUnit</code>.</p>",
        "id": 222136318,
        "sender_full_name": "cjgillot",
        "timestamp": 1610146292
    },
    {
        "content": "<p>ok, I'll do that</p>",
        "id": 222136372,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610146323
    },
    {
        "content": "<p>And vice versa <span aria-label=\"music\" class=\"emoji emoji-1f3b5\" role=\"img\" title=\"music\">:music:</span></p>",
        "id": 222136383,
        "sender_full_name": "cjgillot",
        "timestamp": 1610146331
    },
    {
        "content": "<p>Full disclosure: <a href=\"https://github.com/rust-lang/rust/issues/78452\">#78452</a> made <code>DepConstructor</code> a module, named <code>dep_constructor</code>.</p>",
        "id": 222137049,
        "sender_full_name": "cjgillot",
        "timestamp": 1610146876
    },
    {
        "content": "<p>oh lol what timing</p>",
        "id": 222137175,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610146934
    },
    {
        "content": "<p>wow, rebasing came up with a <em>lot</em> of unused imports lol</p>",
        "id": 222137468,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610147145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> what is <code>DepKindStruct</code> for?</p>",
        "id": 222137868,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610147450
    },
    {
        "content": "<p>I see that it delegates almost everything to <code>query_keys::$variant as DepNodeParams</code></p>",
        "id": 222137893,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610147466
    },
    {
        "content": "<p>It provides a unified place for the description of all <code>DepKind</code>s. Among them, the description of the query itself (is_anon, is_eval_always), and the way the dep-graph should invoke it (<code>force_from_dep_node</code> and <code>try_load_from_on_disk_cache</code>).</p>",
        "id": 222138154,
        "sender_full_name": "cjgillot",
        "timestamp": 1610147658
    },
    {
        "content": "<p><code>DepNodeParams</code> only serves to convert a <code>Fingerprint</code> into a query key, effectively reversing <code>DepNode::construct</code>.</p>",
        "id": 222138226,
        "sender_full_name": "cjgillot",
        "timestamp": 1610147719
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"sd\">/// Contains variant =&gt; str representations for constructing</span>\n<span class=\"w\">        </span><span class=\"sd\">/// DepNode groups for tests.</span>\n<span class=\"w\">        </span><span class=\"cp\">#[allow(dead_code, non_upper_case_globals)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">label_strs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"cp\">$(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"cp\">$variant</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">stringify!</span><span class=\"p\">(</span><span class=\"cp\">$variant</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>does that mean I can make this and <code>dep_kind_from_label_string</code> <code>#[cfg(test)]</code>?</p>",
        "id": 222138266,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610147750
    },
    {
        "content": "<p>Those are used in rustc_incremental, for the incremental test suite.</p>",
        "id": 222138389,
        "sender_full_name": "cjgillot",
        "timestamp": 1610147847
    },
    {
        "content": "<p>There is a pair of attributes (rustc_clean/rustc_dirty) which check the color of some dep nodes.</p>",
        "id": 222138471,
        "sender_full_name": "cjgillot",
        "timestamp": 1610147891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/131828-t-compiler/topic/DepConstructor.20and.20define_queries!/near/222138389\">said</a>:</p>\n<blockquote>\n<p>Those are used in rustc_incremental, for the incremental test suite.</p>\n</blockquote>\n<p>could we get cargo to pass <code>--cfg test</code> to rustc_middle too?</p>",
        "id": 222138487,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610147906
    },
    {
        "content": "<p>no, that won't work, the test suite is run with a normal compiler, it's not unit tests</p>",
        "id": 222138536,
        "sender_full_name": "simulacrum",
        "timestamp": 1610147944
    },
    {
        "content": "<p>I guess in theory we could gate it for dist compiles but seems pretty unnecessary</p>",
        "id": 222138553,
        "sender_full_name": "simulacrum",
        "timestamp": 1610147963
    },
    {
        "content": "<p>ok, could we run the test suite with <code>--cfg test</code>? :P</p>",
        "id": 222138556,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610147966
    },
    {
        "content": "<p>oh yeah I guess that doesn't actually help bootstrap times</p>",
        "id": 222138565,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610147977
    },
    {
        "content": "<p>no you don't want --cfg test</p>",
        "id": 222138635,
        "sender_full_name": "simulacrum",
        "timestamp": 1610148011
    },
    {
        "content": "<p>it just seems kind of silly to generate all those matches when they're only ever used for <code>src/test/incremental</code></p>",
        "id": 222138678,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610148065
    },
    {
        "content": "<p>hm? what matches?</p>",
        "id": 222138822,
        "sender_full_name": "simulacrum",
        "timestamp": 1610148195
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/26438b473883ea607b30288e461187f0fb2fe589/compiler/rustc_middle/src/dep_graph/dep_node.rs#L360\">https://github.com/rust-lang/rust/blob/26438b473883ea607b30288e461187f0fb2fe589/compiler/rustc_middle/src/dep_graph/dep_node.rs#L360</a></p>",
        "id": 222138850,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610148235
    },
    {
        "content": "<p>that function is only used by compiletest AFAIK</p>",
        "id": 222138898,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610148248
    },
    {
        "content": "<p>it is just the one match though?</p>",
        "id": 222138916,
        "sender_full_name": "simulacrum",
        "timestamp": 1610148264
    },
    {
        "content": "<p>well, and all of <code>dirty_clean</code> too</p>",
        "id": 222138973,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610148315
    },
    {
        "content": "<p>oh hm, I guess this is in a macro, maybe it is getting expanded multiple times? not sure?</p>",
        "id": 222138975,
        "sender_full_name": "simulacrum",
        "timestamp": 1610148317
    },
    {
        "content": "<p>Its a drop in the ocean of monomorphizations for the query system.</p>",
        "id": 222138986,
        "sender_full_name": "cjgillot",
        "timestamp": 1610148337
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/26438b473883ea607b30288e461187f0fb2fe589/compiler/rustc_incremental/src/persist/dirty_clean.rs\">https://github.com/rust-lang/rust/blob/26438b473883ea607b30288e461187f0fb2fe589/compiler/rustc_incremental/src/persist/dirty_clean.rs</a></p>",
        "id": 222138988,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610148338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/131828-t-compiler/topic/DepConstructor.20and.20define_queries!/near/222138986\">said</a>:</p>\n<blockquote>\n<p>Its a drop in the ocean of monomorphizations for the query system.</p>\n</blockquote>\n<p>ok, I will direct my attention elsewhere</p>",
        "id": 222138998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610148353
    },
    {
        "content": "<p>yeah this all seems fairly reasonable/straightforward</p>",
        "id": 222139045,
        "sender_full_name": "simulacrum",
        "timestamp": 1610148369
    },
    {
        "content": "<p>It should only be expanded once, the macro is a kind of callback for the <code>rustc_dep_node_append</code> macro.</p>",
        "id": 222139068,
        "sender_full_name": "cjgillot",
        "timestamp": 1610148390
    },
    {
        "content": "<p><code>rustc_dep_node_append</code> is so complicated <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222139082,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610148407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> maybe I should ask - where are all the monomorphizations happening? what would actually have an impact?</p>",
        "id": 222139200,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610148523
    },
    {
        "content": "<p>off the top of my head, generating 236 DepKindStructs with 4 functions each seems not great</p>",
        "id": 222139372,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610148667
    },
    {
        "content": "<p>more functions is much better for LLVM than small number of huge functions</p>",
        "id": 222139461,
        "sender_full_name": "simulacrum",
        "timestamp": 1610148731
    },
    {
        "content": "<p>Most of the work is on <code>{get,ensure,force}_query</code>. The generic versions are defined in <code>rustc_query_system::query::plumbing</code>. The instances are in <code>rustc_middle::dep_graph::dep_node</code> (forcing), and <code>rustc_middle::ty::query::plumbing</code> (get/ensure).</p>",
        "id": 222139471,
        "sender_full_name": "cjgillot",
        "timestamp": 1610148746
    },
    {
        "content": "<p>LLVM is roughly O(n) or so on number of functions but more like n^3 or something on size of functions, obviously not real numbers :)</p>",
        "id": 222139487,
        "sender_full_name": "simulacrum",
        "timestamp": 1610148765
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/DepConstructor.20and.20define_queries!/near/222139461\">said</a>:</p>\n<blockquote>\n<p>more functions is much better for LLVM than small number of huge functions</p>\n</blockquote>\n<p>right, I was hoping to make these generic functions instead so they only have to be type checked once</p>",
        "id": 222139498,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610148782
    },
    {
        "content": "<p>I feel like high order bit is not type checking for rustc compile times, and I'm not sure they <em>can</em> be made generic</p>",
        "id": 222139543,
        "sender_full_name": "simulacrum",
        "timestamp": 1610148831
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/131828-t-compiler/topic/DepConstructor.20and.20define_queries!/near/222139471\">said</a>:</p>\n<blockquote>\n<p>Most of the work is on <code>{get,ensure,force}_query</code>. The generic versions are defined in <code>rustc_query_system::query::plumbing</code>. The instances are in <code>rustc_middle::dep_graph::dep_node</code> (forcing), and <code>rustc_middle::ty::query::plumbing</code> (get/ensure).</p>\n</blockquote>\n<p>wow, these are really big functions to be marked as <code>#[inline(always)]</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <br>\n<a href=\"https://github.com/rust-lang/rust/blob/26438b473883ea607b30288e461187f0fb2fe589/compiler/rustc_query_system/src/query/plumbing.rs#L570\">https://github.com/rust-lang/rust/blob/26438b473883ea607b30288e461187f0fb2fe589/compiler/rustc_query_system/src/query/plumbing.rs#L570</a></p>",
        "id": 222139674,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610148952
    },
    {
        "content": "<p>I'll try removing that and see if it makes any difference on perf</p>",
        "id": 222139749,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610149004
    },
    {
        "content": "<p>For reference, you can look at the rustc_middle line in <a href=\"http://gistpreview.github.io/?33d98065c10f6926afe530587575a625/before-pr80522-cargo-timing.html\">http://gistpreview.github.io/?33d98065c10f6926afe530587575a625/before-pr80522-cargo-timing.html</a><br>\nThe blue part is HIR &amp; type checking, the purple one is LLVM codegen for (mostly) the query system.</p>",
        "id": 222139752,
        "sender_full_name": "cjgillot",
        "timestamp": 1610149006
    },
    {
        "content": "<p>Those call inline(never) functions <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 222139767,
        "sender_full_name": "cjgillot",
        "timestamp": 1610149024
    },
    {
        "content": "<p>still, <code>force_query_with_job</code> is 35 lines of significant code just by itself</p>",
        "id": 222139791,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610149066
    },
    {
        "content": "<p>About this, I already have <a href=\"https://github.com/rust-lang/rust/issues/78780\">#78780</a> in flight.</p>",
        "id": 222139874,
        "sender_full_name": "cjgillot",
        "timestamp": 1610149136
    },
    {
        "content": "<p>ok, I'll wait until that's merged</p>",
        "id": 222139959,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610149210
    },
    {
        "content": "<p>Feel free to comment on it :)</p>",
        "id": 222139967,
        "sender_full_name": "cjgillot",
        "timestamp": 1610149220
    },
    {
        "content": "<p>wow that touches a <em>lot</em> of code - should I just hold off on all of this until then?</p>",
        "id": 222139971,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610149223
    },
    {
        "content": "<p>Don't feel constrained by this PR. If you have a decent workstation for perf runs (I don't), please go ahead!</p>",
        "id": 222140073,
        "sender_full_name": "cjgillot",
        "timestamp": 1610149356
    },
    {
        "content": "<p>oh I was just going to open a PR and run <code>@rust-timer queue</code> haha</p>",
        "id": 222140087,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610149375
    },
    {
        "content": "<p>The most difficult part is to avoid runtime degradation. This code is absurdly sensitive.</p>",
        "id": 222140121,
        "sender_full_name": "cjgillot",
        "timestamp": 1610149407
    },
    {
        "content": "<p>About rustc_middle compile time, I have <a href=\"https://github.com/rust-lang/rust/issues/70951\">#70951</a> in flight. Unfortunately, there is a significant runtime regression (up to 7%), which I am still trying to mitigate.</p>",
        "id": 222141606,
        "sender_full_name": "cjgillot",
        "timestamp": 1610150759
    },
    {
        "content": "<p>So I recently saw the following comment: <a href=\"https://github.com/rust-lang/rust/blob/fd34606ddf02d1e9364e459b373a6ad665c3d8a4/compiler/rustc_query_system/src/dep_graph/dep_node.rs#L66\">https://github.com/rust-lang/rust/blob/fd34606ddf02d1e9364e459b373a6ad665c3d8a4/compiler/rustc_query_system/src/dep_graph/dep_node.rs#L66</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// FIXME: Enforce this by preventing manual construction of `DefNode`</span>\n<span class=\"w\">    </span><span class=\"c1\">// (e.g. add a `_priv: ()` field)</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">hash</span>: <span class=\"nc\">PackedFingerprint</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and I tried adding a <code>pub(crate)</code> field, but it turns out rustc_middle is actually using this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: cannot construct `rustc_query_system::dep_graph::DepNode&lt;dep_node::DepKind&gt;` with struct literal syntax due to inaccessible fields\n    --&gt; compiler/rustc_middle/src/dep_graph/dep_node.rs:237:17\n     |\n106  | /   macro_rules! define_dep_nodes {\n107  | |       (&lt;$tcx:tt&gt;\n108  | |       $(\n109  | |           [$($attrs:tt)*]\n...    |\n237  | |                   DepNode {\n     | |                   ^^^^^^^\n...    |\n300  | |       );\n301  | |   }\n     | |___- in this expansion of `define_dep_nodes!` (#2)\n</code></pre></div>\n<p><a href=\"https://github.com/rust-lang/rust/blob/fd34606ddf02d1e9364e459b373a6ad665c3d8a4/compiler/rustc_middle/src/dep_graph/dep_node.rs#L432\">https://github.com/rust-lang/rust/blob/fd34606ddf02d1e9364e459b373a6ad665c3d8a4/compiler/rustc_middle/src/dep_graph/dep_node.rs#L432</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Construct a DepNode from the given DepKind and DefPathHash. This</span>\n<span class=\"w\">    </span><span class=\"sd\">/// method will assert that the given DepKind actually requires a</span>\n<span class=\"w\">    </span><span class=\"sd\">/// single DefId/DefPathHash parameter.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from_def_path_hash</span><span class=\"p\">(</span><span class=\"n\">def_path_hash</span>: <span class=\"nc\">DefPathHash</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">DepKind</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">DepNode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"fm\">debug_assert!</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">.</span><span class=\"n\">can_reconstruct_query_key</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"p\">.</span><span class=\"n\">has_params</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">DepNode</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">hash</span>: <span class=\"nc\">def_path_hash</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">into</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is this behavior incorrect? Or is the FIXME wrong?</p>",
        "id": 222224554,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610288822
    },
    {
        "content": "<p>My guess is the comment is pre-existing before the split of query system to a separate crate.</p>",
        "id": 222225165,
        "sender_full_name": "simulacrum",
        "timestamp": 1610289779
    },
    {
        "content": "<p>I added that FIXME</p>",
        "id": 222225418,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610290163
    },
    {
        "content": "<p>the way we register the mapping for incr comp has changed, so that may be outdated</p>",
        "id": 222225436,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610290191
    },
    {
        "content": "<p>ok, I'm going to leave this for people more familiar with incr-comp then <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 222225514,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610290284
    },
    {
        "content": "<p>yeah, <code>register_reused_dep_node</code> is now called from <code>register_reused_dep_nodes</code> in a single place</p>",
        "id": 222225515,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610290289
    },
    {
        "content": "<p>so that comment can be removed</p>",
        "id": 222225516,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610290292
    },
    {
        "content": "<p>originally, we did the registration when a <code>DepNode</code> was constructed</p>",
        "id": 222225522,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610290305
    },
    {
        "content": "<p>so it was important to keep track of all of the places where that could happen</p>",
        "id": 222225524,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610290312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/DepConstructor.20and.20define_queries!/near/222225515\">said</a>:</p>\n<blockquote>\n<p>yeah, <code>register_reused_dep_node</code> is now called from <code>register_reused_dep_nodes</code> in a single place</p>\n</blockquote>\n<p>What does register_reused do?</p>",
        "id": 222225596,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610290402
    },
    {
        "content": "<p>It ensures that we store a <code>DefPathHash -&gt; DefId</code> mapping in the incremental cache that we write out at the end of compilation</p>",
        "id": 222226193,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291220
    },
    {
        "content": "<p>if the <code>DefId</code> is from a foreign crate</p>",
        "id": 222226203,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291243
    },
    {
        "content": "<p>that lets us try to map the <code>DefPathHash</code> to a <code>DefId</code> in the next compilation session, without needing to decode the entire def path table for a foreign crate</p>",
        "id": 222226213,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291274
    },
    {
        "content": "<p>the impementation has changed a bit, but <a href=\"https://github.com/rust-lang/rust/pull/74967\">https://github.com/rust-lang/rust/pull/74967</a> gives an overview of how it works</p>",
        "id": 222226264,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291324
    },
    {
        "content": "<p>along with comments in the code</p>",
        "id": 222226265,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291327
    },
    {
        "content": "<blockquote>\n<p>We then use the old DefIndex as an initial guess, which we validate by<br>\ncomparing the expected and actual DefPathHashes. In most cases,<br>\nforeign crates will be completely unchanged, which means that we our<br>\nguess will be correct. If our guess is wrong, we fall back to decoding<br>\nthe entire DefPathTable for the foreign crate.</p>\n</blockquote>\n<p>When would the guess be wrong?</p>",
        "id": 222226286,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610291392
    },
    {
        "content": "<p>If the <code>DefPathHash</code> still exists, but the <code>DefId</code> is different</p>",
        "id": 222226339,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291439
    },
    {
        "content": "<p>e.g. if you add/remove an item that occurs before the target an item in crate, the <code>DefIndex</code> will change</p>",
        "id": 222226349,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291465
    },
    {
        "content": "<p>I think I don't understand incremental well enough <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I thought DefIds were meant to be stable across process invocations?</p>",
        "id": 222226350,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610291466
    },
    {
        "content": "<p>no - that's what DefPathHash is for</p>",
        "id": 222226354,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291476
    },
    {
        "content": "<p>well</p>",
        "id": 222226356,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291482
    },
    {
        "content": "<p>the raw contents of a DefId is just two indexes</p>",
        "id": 222226360,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291491
    },
    {
        "content": "<p>ok, so the idea is that <em>if</em> you don't add more items, which is most of the time, the DefIndex won't change</p>",
        "id": 222226366,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610291510
    },
    {
        "content": "<p>in particular, the <code>DefIndex</code> is just a sequential identifier of definitions in the crate</p>",
        "id": 222226367,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291510
    },
    {
        "content": "<p>right</p>",
        "id": 222226368,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291517
    },
    {
        "content": "<p>it will also be unchanged if you add/remove items that occur 'after' the target item in the crate</p>",
        "id": 222226407,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291533
    },
    {
        "content": "<p>as determined by the order in which definitions are created</p>",
        "id": 222226410,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291540
    },
    {
        "content": "<p>assuming that you're only modifiying one crate, then all of the upstream crates will be unchanged</p>",
        "id": 222226418,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291573
    },
    {
        "content": "<p>so any foreign <code>DefIds</code> that we save in our local incremental cache will remain valid</p>",
        "id": 222226423,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291586
    },
    {
        "content": "<p>which lets us skip a lot of work, especially when only a few items are used from a crate</p>",
        "id": 222226435,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1610291612
    }
]