[
    {
        "content": "<p>I would like to move rustâ€™s parser to the same token model that proc macros use. However, the current model contains various Nt tokens which store parsed fragments of AST. My understanding is that they exist solely for macro-by-example macros.</p>\n<p>Are such token fundamental, or are we hoping to replace them with token trees with none delimiters in the future?</p>",
        "id": 174630189,
        "sender_full_name": "matklad",
        "timestamp": 1567280052
    },
    {
        "content": "<p>Not fundamental, but we may need some hacks for compatibility.</p>",
        "id": 174639568,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567298584
    },
    {
        "content": "<p><code>$expr:expr</code> is a <code>TokenTree::Group</code> with an implicit delimiter in the token model.</p>",
        "id": 174639628,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567298659
    },
    {
        "content": "<p>I think this model covers most of the existing behavior, but not all.</p>",
        "id": 174639639,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567298707
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/issues/55414\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55414\">https://github.com/rust-lang/rust/issues/55414</a>, <a href=\"https://github.com/rust-lang/rust/issues/47358\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/47358\">https://github.com/rust-lang/rust/issues/47358</a> for exceptions.</p>",
        "id": 174639651,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567298759
    },
    {
        "content": "<p>The basic example is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">doc_from_file</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$expr</span>:<span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[doc = $expr]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">doc_from_file</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">include_str</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;doc.md&quot;</span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>",
        "id": 174639705,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567298848
    },
    {
        "content": "<p><code>$expr</code> is a nonterminal token with an <code>ast::Expr</code> fragment inside it.</p>",
        "id": 174639750,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567298888
    },
    {
        "content": "<p>And that <code>ast::Expr</code> is visited by the visitor expanding macros as any other expression in less exotic position.</p>",
        "id": 174639765,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567298948
    },
    {
        "content": "<p>So we get <code>#[doc = \"contents of doc.md\"]</code> after macro expansion.</p>",
        "id": 174639775,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567298984
    },
    {
        "content": "<p>This is entirely incompatible with the token model where <code>include_str!(\"doc.md\")</code> is not an <code>ast::Expr</code>, but just some token stream that fits into expression grammar.</p>",
        "id": 174639832,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567299043
    },
    {
        "content": "<hr>\n<p>(I'm currently preparing an experiment for checking whether this behavior can be limited to e.g. only values in key-value attributes, rather than to arbitrary non-terminal tokens.)</p>",
        "id": 174639904,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567299131
    },
    {
        "content": "<hr>\n<p>There may be other cases where nonterminals are fundamentally treated as AST pieces and not tokens streams, but I'm not aware of them right now.</p>",
        "id": 174639913,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1567299182
    }
]