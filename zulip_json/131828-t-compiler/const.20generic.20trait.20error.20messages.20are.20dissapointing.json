[
    {
        "content": "<p>I had a quick idea for a type-safer bytemuck::cast, in which is also checks the size at compile time rather than panicking. While I am aware this is most likely always going to be compiled away, I still like the idea of types enforcing that. This lead me to creating this: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=c2b4df31ba7445be9b01d9a81bd197ff\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2021&amp;gist=c2b4df31ba7445be9b01d9a81bd197ff</a></p>\n<p>However, the error messages are not great</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0308</span><span class=\"p\">]</span>: <span class=\"nc\">mismatched</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">24</span>:<span class=\"mi\">22</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">24</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">j</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">cast</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                      </span><span class=\"o\">^^^^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"mi\">4_</span><span class=\"k\">usize</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"mi\">8_</span><span class=\"k\">usize</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"mi\">4_</span><span class=\"k\">usize</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"err\">`</span><span class=\"mi\">8_</span><span class=\"k\">usize</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">For</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">information</span><span class=\"w\"> </span><span class=\"n\">about</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kr\">try</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">explain</span><span class=\"w\"> </span><span class=\"n\">E0308</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">error</span>: <span class=\"nc\">could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">playground</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">previous</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I was hoping something more on the lines:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">HasSizeOf</span><span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">note</span>: <span class=\"nc\">it</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"n\">HasSizeOf</span><span class=\"o\">&lt;</span><span class=\"mi\">8</span><span class=\"o\">&gt;</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'd be interested in fixing this myself, not sure how complicated this would be though, I've never hacked in the compiler before</p>",
        "id": 274268037,
        "sender_full_name": "Conrad Ludgate",
        "timestamp": 1646518762
    },
    {
        "content": "<p>I think we're either missing some obligation cause or not reporting obligation causes in const generic errors. CC <span class=\"user-group-mention\" data-user-group-id=\"3805\">@project-const-generics</span></p>",
        "id": 274304145,
        "sender_full_name": "oli",
        "timestamp": 1646570841
    }
]