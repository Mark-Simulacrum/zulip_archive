[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/compiler-team/issues/245\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/245\">compiler-team#245</a></p>",
        "id": 187469089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580919986
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> regarding this change proposal</p>",
        "id": 187469133,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580920009
    },
    {
        "content": "<p>did you notice any impact when bootstrapping <code>rustc</code> itself with incremental turned on?</p>",
        "id": 187469163,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580920026
    },
    {
        "content": "<p>or wait, we don't <em>set</em> <code>-Ccodegen-units</code> anyway in the default config.toml , do we?</p>",
        "id": 187469214,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580920065
    },
    {
        "content": "<p>oh but the point still stands nonetheless, even without an explicit setting...</p>",
        "id": 187469299,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580920102
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> we do not set it explicitly, and the config.toml.example lies about the default (it's just the \"regular\" compiler default, so 16 w/o incremental and 2*modules it sounds like with)</p>",
        "id": 187479739,
        "sender_full_name": "simulacrum",
        "timestamp": 1580926687
    },
    {
        "content": "<p>Right. So with this change, it will go from being 2*modules to 256 when incremental is on, right?</p>",
        "id": 187479821,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580926773
    },
    {
        "content": "<p>Well, 2*modules I think but capped at 256?</p>",
        "id": 187479987,
        "sender_full_name": "simulacrum",
        "timestamp": 1580926902
    },
    {
        "content": "<p>okay yes; the main point is that the max (of 16) was not respected before, and now the new max (of 256) will be respected. Does that sound right?</p>",
        "id": 187483266,
        "sender_full_name": "pnkfelix",
        "timestamp": 1580929056
    },
    {
        "content": "<p>Yes. I personally am not sure if <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> has done much experimentation around the exact number.</p>",
        "id": 187483578,
        "sender_full_name": "simulacrum",
        "timestamp": 1580929248
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/67834\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67834\">https://github.com/rust-lang/rust/pull/67834</a> has a number of perf runs with different default values. 256 seemed to be a good compromise between granularity and overhead.</p>",
        "id": 187535579,
        "sender_full_name": "mw",
        "timestamp": 1580984314
    },
    {
        "content": "<p>I did not do any measurements on bootstrap time with this. I expect that <code>librustc</code> exceeds the default and would profit from the change.</p>",
        "id": 187535681,
        "sender_full_name": "mw",
        "timestamp": 1580984406
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 187545473,
        "sender_full_name": "simulacrum",
        "timestamp": 1580994075
    },
    {
        "content": "<p>Also, the default can be tweaked in the future. The more important change is that the user now has control over something that could not be influenced before.</p>",
        "id": 187545735,
        "sender_full_name": "mw",
        "timestamp": 1580994328
    }
]