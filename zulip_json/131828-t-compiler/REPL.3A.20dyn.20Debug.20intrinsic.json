[
    {
        "content": "<p>What does the intrinsic do exactly? create a dummy vtable printing nothing or a default value if there's no <code>Debug</code> impl?</p>",
        "id": 182187913,
        "sender_full_name": "oli",
        "timestamp": 1575043090
    },
    {
        "content": "<p>context: <a href=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw\" target=\"_blank\" title=\"https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw\">https://hackmd.io/GJokfI0wQ0i4SIgRbFTmfw</a></p>",
        "id": 182188132,
        "sender_full_name": "oli",
        "timestamp": 1575043278
    },
    {
        "content": "<p>right, let me paste my code from the REPL repo</p>",
        "id": 182188507,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043614
    },
    {
        "content": "<p>This is the handling of the new intrinsic, in the match stmt in <code>call_intrinsic</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">            </span><span class=\"s\">&quot;as_debug&quot;</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">existential_trait_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">sty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">ty</span>::<span class=\"n\">RawPtr</span><span class=\"p\">(</span><span class=\"n\">tm</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">tm</span><span class=\"p\">.</span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">sty</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">ty</span>::<span class=\"n\">Dynamic</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"></span>\n<span class=\"w\">                                </span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">principal</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                                    </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;&#39;debug trait&#39; has no principal trait&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;return type pointee is not dynamic type&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;return type is not raw pointer&quot;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pointee_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">type_at</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">trait_predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">existential_trait_ref</span><span class=\"p\">.</span><span class=\"n\">with_self_ty</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pointee_ty</span><span class=\"p\">).</span><span class=\"n\">to_predicate</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">evaluate_predicate</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">trait_predicate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">read_immediate</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">to_scalar_ptr</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vtable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">get_vtable</span><span class=\"p\">(</span><span class=\"n\">pointee_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">existential_trait_ref</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">Immediate</span>::<span class=\"n\">new_dyn_trait</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vtable</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vtable</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">get_vtable</span><span class=\"p\">(</span><span class=\"n\">pointee_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">Immediate</span>::<span class=\"n\">new_dyn_trait</span><span class=\"p\">(</span><span class=\"n\">Scalar</span>::<span class=\"n\">ptr_null</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">vtable</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">write_immediate</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dest</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 182188606,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043693
    },
    {
        "content": "<p>and a helper fn:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">evaluate_predicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">instance</span>: <span class=\"nc\">Instance</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">predicate</span>: <span class=\"nc\">Predicate</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// FIXME: is this really necessary? Maybe we can just use `DUMMY_HIR_ID` instead.</span>\n<span class=\"w\">    </span><span class=\"c1\">// Or use `Obligation::new` and `ObligationCause::dummy`?</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">body_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">as_local_hir_id</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">def_id</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">&quot;`instance` is not in local crate&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Obligation</span>::<span class=\"n\">misc</span><span class=\"p\">(</span><span class=\"n\">DUMMY_SP</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ParamEnv</span>::<span class=\"n\">reveal_all</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">infer_ctxt</span><span class=\"p\">().</span><span class=\"n\">enter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">infer_ctxt</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">infer_ctxt</span><span class=\"p\">.</span><span class=\"n\">evaluate_obligation</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">obligation</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">EvaluationResult</span>::<span class=\"n\">EvaluatedToOk</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">EvaluationResult</span>::<span class=\"n\">EvaluatedToOkModuloRegions</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 182188617,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043716
    },
    {
        "content": "<p>alternatively (as I believe I mentioned in the design doc), the intrinsic could save the debug representation to a field in the <code>Evaluator</code>, and let the REPL do the printing of its own accord.</p>",
        "id": 182188717,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043812
    },
    {
        "content": "<p>this might make (e.g.) formatted/coloured printing, depending on settings of the REPL, a bit easier.</p>",
        "id": 182188747,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043846
    },
    {
        "content": "<p>obviously a minor point though.</p>",
        "id": 182188750,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575043849
    },
    {
        "content": "<p>so... what debug impl is being used in case there is no debug impl?</p>",
        "id": 182188860,
        "sender_full_name": "oli",
        "timestamp": 1575043935
    },
    {
        "content": "<p>the pointer to the data is printed?</p>",
        "id": 182188870,
        "sender_full_name": "oli",
        "timestamp": 1575043942
    },
    {
        "content": "<p>no, it looks like a null ponter, but I don't get what the vtable is</p>",
        "id": 182188882,
        "sender_full_name": "oli",
        "timestamp": 1575043963
    },
    {
        "content": "<p>sadly specialization doesn't work for this case it seems, otherwise we could use <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=faaa84ebb20225679401d0c7cc108149\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=faaa84ebb20225679401d0c7cc108149\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=faaa84ebb20225679401d0c7cc108149</a></p>",
        "id": 182188918,
        "sender_full_name": "oli",
        "timestamp": 1575044023
    },
    {
        "content": "<p>yes, indeed. I experimented with that before trying this.</p>",
        "id": 182189000,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575044091
    },
    {
        "content": "<p>so, right now, the <code>main fn</code> (template) looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">user_body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cp\">#[rustc_interp_user_fn]</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">user_body_placeholder</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[allow(unused)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">user_body</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">as_debug</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ret</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">debug</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{:?}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">debug</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;[{}]&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">type_name</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ret</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 182189042,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575044142
    },
    {
        "content": "<p>oh, the <code>null</code> turns into <code>None</code> <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> ok</p>",
        "id": 182189105,
        "sender_full_name": "oli",
        "timestamp": 1575044175
    },
    {
        "content": "<p>yep heh</p>",
        "id": 182189110,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575044179
    },
    {
        "content": "<p>seems good to me, but needs a lot of comments so future readers get all that</p>",
        "id": 182189125,
        "sender_full_name": "oli",
        "timestamp": 1575044192
    },
    {
        "content": "<p>I will change <code>user_body_placeholder</code> to be a macro call however, and do the pre-parsing of the whole template in the REPL itself (with an even more minor extension to the <code>Parser</code> interface than present), which I think people prefer.</p>",
        "id": 182189172,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575044264
    },
    {
        "content": "<p>yeah, no problem. more comments is understandable.</p>",
        "id": 182189176,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575044274
    },
    {
        "content": "<p>anyway, thanks for giving the nod to a lot of this REPL design stuff and helping to move it along, in spite of our differences on some matters. I will r? you (or RalfJung, I guess) on the mir/mir-interpreter-related rustc PR when the time arises, if that's alright.</p>",
        "id": 182189761,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575044909
    },
    {
        "content": "<p>yea, as always, please only add functional changes to the PRs and make one PR per \"topic\" (e.g. one for Machine changes, one for command line flag + new attributes). We'll be able to move along much faster with individual PRs</p>",
        "id": 182189863,
        "sender_full_name": "oli",
        "timestamp": 1575045014
    },
    {
        "content": "<p>will do</p>",
        "id": 182189868,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575045025
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 182189879,
        "sender_full_name": "oli",
        "timestamp": 1575045035
    },
    {
        "content": "<p>if there are any formatting changes or changes to comments, I'll make sure they're only <em>clear improvements</em> that are directly next to functional changes. and they shan't be many. I will have a pass over my existing PRs to remove extraneous \"cosmetic\" stuff, but if I forget, just let me know matter-of-factly, because it will probably be that I've simply overlooked them. :-)</p>",
        "id": 182189936,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575045120
    },
    {
        "content": "<p>sgtm</p>",
        "id": 182190004,
        "sender_full_name": "oli",
        "timestamp": 1575045165
    },
    {
        "content": "<p>;-)</p>",
        "id": 182190038,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575045210
    },
    {
        "content": "<p>don't worry: I've just gotten this design doc essentially approved. the last thing I want to do is annoy reviewers or make getting PRs approved a pain for all of us!</p>",
        "id": 182190109,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575045267
    },
    {
        "content": "<blockquote>\n<p>sadly specialization doesn't work for this case it seems, otherwise we could use <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=faaa84ebb20225679401d0c7cc108149\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=faaa84ebb20225679401d0c7cc108149\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=faaa84ebb20225679401d0c7cc108149</a></p>\n</blockquote>\n<p>Does it not ? I think you just omitted a <code>default</code> <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bc90cd6d61e11d07cd9b3517bdf38940\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bc90cd6d61e11d07cd9b3517bdf38940\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=bc90cd6d61e11d07cd9b3517bdf38940</a></p>",
        "id": 182235780,
        "sender_full_name": "Nadrieril",
        "timestamp": 1575113762
    },
    {
        "content": "<p>Awesome, you don't even need the DebugEverything trait since it's implemented for all types. <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=83de0447fe2d0bc2eda7fc27c5437dcc\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=83de0447fe2d0bc2eda7fc27c5437dcc\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=83de0447fe2d0bc2eda7fc27c5437dcc</a></p>",
        "id": 182236745,
        "sender_full_name": "oli",
        "timestamp": 1575115470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> you can get rid of the intrinsic by putting the DebugEverything trait in your generated file (or injecting a dependency on a crate that implements it, not sure whether the current REPL can import crates)</p>",
        "id": 182236811,
        "sender_full_name": "oli",
        "timestamp": 1575115614
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> yeah, that's not bad, but the thing is a) I don't want to depend on nightly, b) I still want a way to \"hand back\" string values to the REPL itself, so some sort of intrinsic would be neded for that.</p>",
        "id": 182243137,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575127397
    },
    {
        "content": "<p>Not sure why b) would be affected?</p>",
        "id": 182243347,
        "sender_full_name": "oli",
        "timestamp": 1575127787
    },
    {
        "content": "<p>Right now you get a <code>*const dyn Debug</code>, with this you'd get a <code>&amp;dyn DebugEverything</code>. In both cases you have to call the fmt method</p>",
        "id": 182243413,
        "sender_full_name": "oli",
        "timestamp": 1575127889
    },
    {
        "content": "<p>Wrt a) are you worried the specialization feature gate will break/disappear?</p>",
        "id": 182243468,
        "sender_full_name": "oli",
        "timestamp": 1575127983
    },
    {
        "content": "<p>no, I just want people to be able to use the REPL without nightly. so they can specify the version/toolchain, ideally. :-)</p>",
        "id": 182243535,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575128085
    },
    {
        "content": "<p>b) because I don't want to just print from <em>within</em> the evaluated code, but also hand back strings to the REPL, so it can use them as it pleases (maybe just format and then print them according to settings, maybe something fancY)</p>",
        "id": 182243552,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575128127
    },
    {
        "content": "<p>I understand what you're saying wrt b), but the intrinsic doesn't give any string to the REPL</p>",
        "id": 182245956,
        "sender_full_name": "oli",
        "timestamp": 1575132114
    },
    {
        "content": "<p>since you're calling the intrinsic, you're forever stuck on nightly anyway</p>",
        "id": 182246006,
        "sender_full_name": "oli",
        "timestamp": 1575132162
    },
    {
        "content": "<p>activating a feature gate for an intrinsic or for a feature makes no difference as far as i can tell</p>",
        "id": 182246074,
        "sender_full_name": "oli",
        "timestamp": 1575132264
    },
    {
        "content": "<p>wrt b) I think I'm missing some information, thus don't get what the difference between <code>as_debug(&amp;value)</code> and <code>value as *DebugEverything</code> is (except for the None result, but that is resolved by the default impl)</p>",
        "id": 182246171,
        "sender_full_name": "oli",
        "timestamp": 1575132431
    },
    {
        "content": "<p>Or maybe you're thinking about future changes?</p>",
        "id": 182246176,
        "sender_full_name": "oli",
        "timestamp": 1575132446
    },
    {
        "content": "<p>Making it work on stable should be possible by using hygiene to pretend that the respective code came from a macro which allowed the necessary feature gates, like:</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3/src/libstd/thread/local.rs#L127\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3/src/libstd/thread/local.rs#L127\">https://github.com/rust-lang/rust/blob/d8bdb3fdcbd88eb16e1a6669236122c41ed2aed3/src/libstd/thread/local.rs#L127</a></p>",
        "id": 182249014,
        "sender_full_name": "bjorn3",
        "timestamp": 1575137013
    },
    {
        "content": "<p>the use of that attribute also requires feature gates, so you don't gain anything (unless we put it in libcore and stabilize it, which we won't do for an internal thing)</p>",
        "id": 182249470,
        "sender_full_name": "oli",
        "timestamp": 1575137742
    },
    {
        "content": "<p>I meant that the REPL changes the parsed syntax so that it looks like it came from a macro with that attribute.</p>",
        "id": 182250158,
        "sender_full_name": "bjorn3",
        "timestamp": 1575138926
    },
    {
        "content": "<p>right, but that applies to either solution <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 182250205,
        "sender_full_name": "oli",
        "timestamp": 1575138987
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> yeah, I forgot about that, oops. I still very a little uneasy about the specialisation-based approach... I remember discussing this with <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> (he implemented something similar to <code>DebugEverything</code> trait?) and deciding it couldn't work properly, but I forget why exactly... perhaps I was mistaken.</p>",
        "id": 182254850,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575147209
    },
    {
        "content": "<p>as for b), the point is that it's nice to have an intrinsic for being able to pass some string value to the Miri evaluator.</p>",
        "id": 182254900,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575147248
    },
    {
        "content": "<p>which would be different from <code>as_debug</code>, sure.</p>",
        "id": 182254902,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575147256
    },
    {
        "content": "<p>(it could be part of the same intrinsic, or a separate one, rather)</p>",
        "id": 182254907,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575147270
    },
    {
        "content": "<p>I'm not sure if this is what Centril found, but specialization on traits (as implemented by rustc) is unsound and this can even be exploited by downstream crates without the feature.</p>",
        "id": 182255191,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1575147777
    },
    {
        "content": "<p>I don't think that your intrinsic avoids this problem though.</p>",
        "id": 182255281,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1575147949
    },
    {
        "content": "<p>aha</p>",
        "id": 182255344,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575148068
    },
    {
        "content": "<p>probably not, but that's a fair point too</p>",
        "id": 182255348,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575148073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> what's the problem with the intrinsic, as you see it?</p>",
        "id": 182255392,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575148091
    },
    {
        "content": "<p>It would probably need to do something similar to generator witnesses, where all of the regions are replaced with regions that are bound by the binder around the predicate.</p>",
        "id": 182255478,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1575148220
    },
    {
        "content": "<p>The issue is that it's only checking that there are some lifetimes where the predicate holds.</p>",
        "id": 182255489,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1575148250
    },
    {
        "content": "<p>Maybe the unusual nature of the repl works around this somehow.</p>",
        "id": 182255502,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1575148278
    },
    {
        "content": "<p>hmm</p>",
        "id": 182257315,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575150737
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> yes possibly.</p>",
        "id": 182257343,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575150803
    },
    {
        "content": "<p>how would this look in code?</p>",
        "id": 182257344,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575150806
    },
    {
        "content": "<p><code>impl Debug for A&lt;'static&gt; { /* impl that requires 'static */ }</code> and then debug printing an <code>A&lt;'short&gt;</code></p>",
        "id": 182257432,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1575150873
    },
    {
        "content": "<p>It's fairly fiddly to create a use after free from this.</p>",
        "id": 182257466,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1575150941
    },
    {
        "content": "<p>A could contain a stack reference and the Debug impl could store it in a static.</p>",
        "id": 182257534,
        "sender_full_name": "bjorn3",
        "timestamp": 1575151048
    },
    {
        "content": "<p>That way a dangling reference is made</p>",
        "id": 182257543,
        "sender_full_name": "bjorn3",
        "timestamp": 1575151072
    },
    {
        "content": "<p>The main reason I like the specialization approach over the intrinsic is that it's much easier to grok the Rust code than the rustc code emulating it</p>",
        "id": 182258454,
        "sender_full_name": "oli",
        "timestamp": 1575152779
    },
    {
        "content": "<p>the unsoundness is irrelevant for this use case, miri won't allow you to do anything stupid</p>",
        "id": 182258461,
        "sender_full_name": "oli",
        "timestamp": 1575152804
    },
    {
        "content": "<p>so even if you build an impl that leaks a local value, once it's deallocated and you try to use it you'll get an error</p>",
        "id": 182258472,
        "sender_full_name": "oli",
        "timestamp": 1575152858
    },
    {
        "content": "<p>even without stacked borrows</p>",
        "id": 182258474,
        "sender_full_name": "oli",
        "timestamp": 1575152862
    },
    {
        "content": "<p>there's also no need for an intrinsic for the \"give a value back to the repl\", because you can just define an arbitrary <code>extern \"C\"</code> function with a name noone will use and hook that</p>",
        "id": 182258528,
        "sender_full_name": "oli",
        "timestamp": 1575152942
    },
    {
        "content": "<p>no need for rustc to know about it</p>",
        "id": 182258531,
        "sender_full_name": "oli",
        "timestamp": 1575152948
    },
    {
        "content": "<p>I suppose so.</p>",
        "id": 182258811,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575153559
    },
    {
        "content": "<p>An intrinsic seems somehow \"neater\" though...</p>",
        "id": 182258812,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575153568
    },
    {
        "content": "<p>arguably less hacky?</p>",
        "id": 182258814,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575153573
    },
    {
        "content": "<p>not hackier than miri supporting <code>puts</code></p>",
        "id": 182258920,
        "sender_full_name": "oli",
        "timestamp": 1575153762
    },
    {
        "content": "<p>heh</p>",
        "id": 182259966,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575156054
    },
    {
        "content": "<p>I suppose. It just feels semantically like it should be an intrinsic... hmm.</p>",
        "id": 182259971,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575156073
    },
    {
        "content": "<p>Let me ponder it a bit.</p>",
        "id": 182259974,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575156083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Can't say I've changed my mind about it being hacky... but I do see why you might be drawn to this, since it requires no rustc changes (not that the rustc changes would be anything but tiny). As for <code>puts</code>, I consider that a bit different, since it's <em>meant</em> to be a C stdlib fn that is normally called via the C ABI. But miri wouldn' t be emulating a C fn / ABI call here. It's very much something that only makes sense to use within the REPL. :-)</p>",
        "id": 182412633,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575343047
    },
    {
        "content": "<p>There's another advntage of it not being in rustc: modifying its API does not require you to touch rustc, giving you more freedom</p>",
        "id": 182422069,
        "sender_full_name": "oli",
        "timestamp": 1575357229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> That's true actually... I mean, making a PR to rustc is pretty easy, but you have a fair point.</p>",
        "id": 182466571,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575390381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can the fn just be \"extern\" and not \"extern C\", in fact?</p>",
        "id": 182466592,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575390393
    },
    {
        "content": "<blockquote>\n<p><code>impl Debug for A&lt;'static&gt; { /* impl that requires 'static */ }</code> and then debug printing an <code>A&lt;'short&gt;</code></p>\n</blockquote>\n<p>Maybe replace all <code>ReErased</code> with fresh lifetimes? I think that will require the <code>Debug</code> impl to be valid for all lifetimes, thus fixing the unsoundness.</p>",
        "id": 182467321,
        "sender_full_name": "bjorn3",
        "timestamp": 1575390776
    },
    {
        "content": "<p>I prefer <code>as_debug</code> to be an intrinsic, as all functions handled specially by both cg_llvm and cg_clif are either lang items or intrinsics. Miri does handle some <code>extern \"C\"</code> functions specially, but those don't perform magic, but are only shims. If the code wasn't running in an interpreter, those functions could be implemented without the help of the compiler. <code>as_debug</code> however is magic, as it inspects if a type implements <code>Debug</code>.</p>",
        "id": 182467896,
        "sender_full_name": "bjorn3",
        "timestamp": 1575391071
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> can the fn just be \"extern\" and not \"extern C\", in fact?</p>\n</blockquote>\n<p>yes, it does not have to be <code>\"C\"</code>, but that makes it easier to use from miri</p>",
        "id": 182472114,
        "sender_full_name": "oli",
        "timestamp": 1575393362
    },
    {
        "content": "<p>hmm, okay. makes it easier because the ABI is simpler? Miri can surely use the Rust ABI though?</p>",
        "id": 182473081,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575393842
    },
    {
        "content": "<p>sure, but you need to shim it. Most of the time that is totally not a problem though.</p>",
        "id": 182473339,
        "sender_full_name": "oli",
        "timestamp": 1575393956
    },
    {
        "content": "<p>and for your REPL you are right, you are in control anyway, so you can just us the Rust ABI</p>",
        "id": 182473400,
        "sender_full_name": "oli",
        "timestamp": 1575393973
    },
    {
        "content": "<p>cool</p>",
        "id": 182474043,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575394303
    },
    {
        "content": "<p>okay, you've won me over</p>",
        "id": 182474049,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575394308
    },
    {
        "content": "<p>let's do that.</p>",
        "id": 182474051,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575394310
    },
    {
        "content": "<p>(unless anyone else has objections...)</p>",
        "id": 182474249,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575394403
    }
]