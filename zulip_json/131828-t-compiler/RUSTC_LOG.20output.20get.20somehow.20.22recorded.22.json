[
    {
        "content": "<p>Today i found a strange thing. I set RUSTC_LOG to debug when i build the compile, and lots of log information come out. Then i set it to empty, and do an incremental build on top of that, the log information is still coming out. Are those somehow recorded somewhere?</p>",
        "id": 202003776,
        "sender_full_name": "Charles Lew",
        "timestamp": 1593108276
    },
    {
        "content": "<p>I thought <code>RUSTC_LOG</code> is a variable you pass at runtime and not compile-time?</p>",
        "id": 202004089,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1593108447
    },
    {
        "content": "<p>I think that to remove the debug info you need to change your <code>config.toml</code> and set <code>debug-assertions = false</code>.</p>",
        "id": 202004151,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1593108482
    },
    {
        "content": "<p>See <a href=\"https://rustc-dev-guide.rust-lang.org/compiler-debugging.html#getting-logging-output\">this part</a> of the rustc-dev-guide</p>",
        "id": 202004295,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1593108534
    },
    {
        "content": "<blockquote>\n<h3>How to keep or remove debug! and trace! calls from the resulting binary</h3>\n<p>While calls to error!, warn! and info! are included in every build of the compiler, calls to debug! and trace! are only included in the program if debug-assertions=yes is turned on in config.toml (it is turned off by default), so if you don't see DEBUG logs, especially if you run the compiler with RUSTC_LOG=rustc rustc <a href=\"http://some.rs\">some.rs</a> and only see INFO logs, make sure that debug-assertions=yes is turned on in your config.toml.</p>\n<p>In some cases, just setting it will not trigger a rebuild, so if you changed it and you already have a compiler built, you might want to call x.py clean to force one.</p>\n</blockquote>",
        "id": 202004420,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1593108590
    },
    {
        "content": "<p>I think this is not about <code>config.toml</code> since i haven't change it recently.</p>",
        "id": 202004768,
        "sender_full_name": "Charles Lew",
        "timestamp": 1593108736
    },
    {
        "content": "<p>I set the variable actually just wanting to see the internal compiler debug output of a unit test running.</p>",
        "id": 202004831,
        "sender_full_name": "Charles Lew",
        "timestamp": 1593108765
    },
    {
        "content": "<p>And it worked... however the output of the building part is somehow \"recorded\" i think...</p>",
        "id": 202004893,
        "sender_full_name": "Charles Lew",
        "timestamp": 1593108807
    },
    {
        "content": "<p>Cargo caches the compiler diagnostics and replays them, presumably that also records log output?</p>",
        "id": 202013065,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1593112836
    },
    {
        "content": "<p>yeah I think cargo caches all stderr/stdout from compiler, or at least stderr for that</p>",
        "id": 202015779,
        "sender_full_name": "simulacrum",
        "timestamp": 1593114264
    },
    {
        "content": "<p>(note this means large files, potentially)</p>",
        "id": 202015791,
        "sender_full_name": "simulacrum",
        "timestamp": 1593114273
    },
    {
        "content": "<p>Thanks! I think that's indeed the case. And it's about 21MB text output in my case. I'm curious where is that information stored? Is there a way to remove/force regenerate that information without breaking the incremental compilation state?</p>",
        "id": 202044338,
        "sender_full_name": "Charles Lew",
        "timestamp": 1593135218
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/issues/8374\">https://github.com/rust-lang/cargo/issues/8374</a></p>",
        "id": 202159454,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1593219119
    }
]