[
    {
        "content": "<p>tl;dr: How to add a stable <code>-C dlltool</code> flag that is not mentioned in the original <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2627-raw-dylib-kind.md\">raw-dylib RFC</a>? Are there alternatives?</p>\n<p>Hey everyone! I've been reviewing <span class=\"user-mention\" data-user-id=\"379933\">@Richard Cobbe</span>'s PR that implements raw-dylibs for MinGW. The PR makes <code>rustc</code> invoke <code>dlltool</code> for creating the required DLL import library instead of letting LLVM do that. This is necessary because the MinGW toolchain apparently cannot handle the import libraries generated via LLVM.</p>\n<p>The PR makes the compiler attempt to find the right <code>dlltool</code> automatically. But, as <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> pointed out, it is problematic to make the compiler rely on automatic detection exclusively -- in case the system is in a state that the compiler cannot handle. Therefore the PR adds a <code>-Z dlltool</code> flag to the compiler that enables overriding the automated selection.</p>\n<p>The problem is that the flag is not mentioned in the raw-dylib RFC -- but we need the flag to become stable eventually. So my question is: <em>What's  the process here?</em> Do we just mentioned the additional flag in the stabilization PR for the entire raw-dylib feature and thus make it part of the FCP vote? Do we amend the RFC? Do we create a major change proposal (which is kind of weird for a flag that hasn't even been merged yet)?</p>\n<p>Even better would be to find a way of enabling explicit <code>dlltool</code> selection without a new stable flag -- but so far no one on the PR thread had a good idea about how to do that.</p>",
        "id": 266927404,
        "sender_full_name": "mw",
        "timestamp": 1641384669
    },
    {
        "content": "<p>Tracking issue and FCP are sufficient for flags of this sort.</p>",
        "id": 266927528,
        "sender_full_name": "nagisa",
        "timestamp": 1641384745
    },
    {
        "content": "<p>whether its a new one or a part of an existing one really depends on conceptual relationships between features. <code>dlltool</code> flag seems closely related to <code>raw-dylib</code> feature, so rolling it up into the raw-dylib tracking issue seems reasonable to me.</p>",
        "id": 266927607,
        "sender_full_name": "nagisa",
        "timestamp": 1641384815
    },
    {
        "content": "<p>Thanks for the quick reply, <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>! Sounds good to me then.</p>",
        "id": 267038031,
        "sender_full_name": "mw",
        "timestamp": 1641459427
    }
]