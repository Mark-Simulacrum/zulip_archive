[
    {
        "content": "<p>Dear <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>,</p>\n<p>Today we will be having a <strong>design meeting</strong>. The topic was originally sketched as \"some Zoxc PR\". We've since narrowed that down to discuss <a href=\"https://github.com/rust-lang/rust/issues/62038\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62038\">#62038</a>, which is a refactoring to how dep-graph loading occurs. <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> <a href=\"https://github.com/rust-lang/rust/pull/62038#issuecomment-540508308\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62038#issuecomment-540508308\">wrote up a comment</a> giving a summary of the ideas. Note that this PR itself is an incremental step towards <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a>, which aims to make dep-graph loading/saving more continuous.</p>\n<p>I'd also like to discuss briefly how we should document these changes. We currently have some rustc-chapters on incremental compilation (e.g., <a href=\"https://rust-lang.github.io/rustc-guide/queries/incremental-compilation-in-detail.html\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/queries/incremental-compilation-in-detail.html\">this chapter goes into detail</a>). I would like to move us to a world where major refactorings like <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a> (but not limited to this one -- I think e.g. <a href=\"https://github.com/rust-lang/rust/pull/65232\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/65232\">my recent PR</a> and work on lazy norm fits the bill) come along with a rustc-guide chapter that documents the new state of the world. Maybe we discuss some how that might work and -- in the case of THIS PR -- who might do that documentation work (I don't necessarily think it has to be <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>, though they're also an obvious candidate). (In my ideal world, drafts of that chapter would be available <em>before</em> the PR, but at minimum I think such a chapter should be in place to help with reviewing.)</p>",
        "id": 177906209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570800196
    },
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>! Meeting starting in a few minutes. As you arrive, please click on the <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> emoji so we have some idea who is here today.</p>\n<h1>Announcements</h1>",
        "id": 177909253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570802493
    },
    {
        "content": "<p>The <code>A Tale Of Two DepGraphs: The Old And The New</code> part you linked could be updated, but it seems like the rest of the docs don't go enough into details for this PR to matter.</p>",
        "id": 177909263,
        "sender_full_name": "Zoxc",
        "timestamp": 1570802503
    },
    {
        "content": "<p>I think updating that section would suffice, yes</p>",
        "id": 177909398,
        "sender_full_name": "mw",
        "timestamp": 1570802547
    },
    {
        "content": "<p>(In general, I definitely think there's a bootstrapping problem that the <strong>old docs</strong> don't exist, which makes writing the first round of <strong>new docs</strong> harder.)</p>",
        "id": 177909447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570802572
    },
    {
        "content": "<p><strong>Announcement:</strong> <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> wrote an <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/418/\" target=\"_blank\" title=\"https://github.com/rust-lang/blog.rust-lang.org/pull/418/\">awesome blog post</a> on the recent diagnostic work they've been working on.</p>",
        "id": 177909500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570802612
    },
    {
        "content": "<p>Here is a <a href=\"https://hackmd.io/FWbz1a_5RPmUnyUWNra7pg\" target=\"_blank\" title=\"https://hackmd.io/FWbz1a_5RPmUnyUWNra7pg\">hackmd document</a> that we can use to document and guide this conversation -- at the end, it will hopefully also serve as the minutes.</p>",
        "id": 177909649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570802716
    },
    {
        "content": "<p>I meant to do this before but I got caught up in other crap -- but maybe use a few minutes to jot down questions or thoughts, if you've had a chance to peruse the links above</p>",
        "id": 177909671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570802734
    },
    {
        "content": "<blockquote>\n<p><strong>Announcement:</strong> <span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> wrote an <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/418/\" target=\"_blank\" title=\"https://github.com/rust-lang/blog.rust-lang.org/pull/418/\">awesome blog post</a> on the recent diagnostic work they've been working on.</p>\n</blockquote>\n<p>wonder how much of that may end in rustc-guide :)</p>",
        "id": 177909820,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1570802846
    },
    {
        "content": "<p>OK, let's get started?</p>",
        "id": 177909998,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570802981
    },
    {
        "content": "<p>was just gonna say :P</p>",
        "id": 177910005,
        "sender_full_name": "centril",
        "timestamp": 1570802987
    },
    {
        "content": "<p>There are some notes happening in the hackmd too :)</p>",
        "id": 177910017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570802995
    },
    {
        "content": "<p>(I advise you to tile your windows if possible :)</p>",
        "id": 177910023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803001
    },
    {
        "content": "<p>So, maybe we can start by talking a bit about how the PR works?</p>",
        "id": 177910096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803029
    },
    {
        "content": "<p>So as <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> wrote, we currently load he entire previous dep-graph into memory</p>",
        "id": 177910182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803096
    },
    {
        "content": "<p>I have a few questions to refresh my memory</p>",
        "id": 177910190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803102
    },
    {
        "content": "<p>About existing system</p>",
        "id": 177910196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803106
    },
    {
        "content": "<p>Basically, when we start a query, I think we go check against this old graph to see if we can re-use the results, right?</p>",
        "id": 177910262,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803126
    },
    {
        "content": "<p>If so, we copy into the new graph that we are building up for the current session?</p>",
        "id": 177910270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803137
    },
    {
        "content": "<p>yes</p>",
        "id": 177910279,
        "sender_full_name": "mw",
        "timestamp": 1570803142
    },
    {
        "content": "<p>We have also this color scheme -- green nodes being ones whose results were unchanged from last time etc -- but that is only relevant to the new graph, right?</p>",
        "id": 177910369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803200
    },
    {
        "content": "<p>That's only for the old graph</p>",
        "id": 177910395,
        "sender_full_name": "Zoxc",
        "timestamp": 1570803216
    },
    {
        "content": "<p>Hmm, I guess that surprises me, but likely i'm confused :)</p>",
        "id": 177910530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803278
    },
    {
        "content": "<p>What I think happens when we start a query is something like this:</p>",
        "id": 177910535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803285
    },
    {
        "content": "<ul>\n<li>If the query existed in the old graph, we go and find its node</li>\n<li>We add that node to the new graph, colored grey or something like that</li>\n</ul>",
        "id": 177910569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803310
    },
    {
        "content": "<p>yes, when you ask if node X is green or red, and node X did not exist in the old graph, then you don't have to look any further</p>",
        "id": 177910584,
        "sender_full_name": "mw",
        "timestamp": 1570803318
    },
    {
        "content": "<ul>\n<li>Then we go validate its inputs recursively, repeating the above process</li>\n</ul>",
        "id": 177910592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803322
    },
    {
        "content": "<p>The green color means that the result of a query is the same in the previous graph as the current one. If the query doesn't exist in the previous graph, it has no color.</p>",
        "id": 177910615,
        "sender_full_name": "Zoxc",
        "timestamp": 1570803339
    },
    {
        "content": "<ul>\n<li>If all inputs are green, then we can mark this node as green; if any input changed, we re-execute and compare hashes of output, coloring node red or green appropriately.</li>\n</ul>",
        "id": 177910637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803353
    },
    {
        "content": "<p>Right, ok, it sounds like we're roughly saying the same thing. So the <strong>color</strong> is a property of the new graph. Nobody cares what color it had in the old graph.</p>",
        "id": 177910710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803377
    },
    {
        "content": "<p>(Sound right?)</p>",
        "id": 177910749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> almost: we don;t add grey nodes. rather we don't do anything with the current node yet</p>",
        "id": 177910752,
        "sender_full_name": "mw",
        "timestamp": 1570803408
    },
    {
        "content": "<p>OK.</p>",
        "id": 177910758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803414
    },
    {
        "content": "<p>/me wonders about parallelism</p>",
        "id": 177910768,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803421
    },
    {
        "content": "<p>ah I guess that's handled separately</p>",
        "id": 177910785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803434
    },
    {
        "content": "<p>marking is racy, but deterministic currently</p>",
        "id": 177910794,
        "sender_full_name": "mw",
        "timestamp": 1570803441
    },
    {
        "content": "<p>i.e., the query mechanism intercepts parallel attempts to compute same value earlier</p>",
        "id": 177910796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803442
    },
    {
        "content": "<p>I think</p>",
        "id": 177910799,
        "sender_full_name": "mw",
        "timestamp": 1570803444
    },
    {
        "content": "<p>Colors are comparisons between the new and old graph and don't get stored on disk</p>",
        "id": 177910825,
        "sender_full_name": "Zoxc",
        "timestamp": 1570803461
    },
    {
        "content": "<p>ok, let's leave parallelism out of it for a second</p>",
        "id": 177910828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803462
    },
    {
        "content": "<p>I have another question:</p>\n<blockquote>\n<p>This means that the ids in the previous dep graph and current dep graph are distinct.</p>\n</blockquote>",
        "id": 177910892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803486
    },
    {
        "content": "<p>These ids you are referring to, <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>, are they the <code>DepGraphNodeIndex</code> values?</p>",
        "id": 177910906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803497
    },
    {
        "content": "<p>To give those following along some context:</p>\n<ul>\n<li>the dep-graph tracks the dependencies between queries; </li>\n<li>it has a node representing each query, and an edge N1 -&gt; N2 indicates that the query N1 executed the query N2 (and hence is dependent on N2's result)</li>\n<li>each node gets an index, the <code>DepNodeIndex</code>; </li>\n<li>also, sometimes we have nodes that are not queries, so-called \"anonymous nodes\", but I don't think they're too relevant here (yet).</li>\n</ul>",
        "id": 177911022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803574
    },
    {
        "content": "<blockquote>\n<p>These ids you are referring to, @Zoxc, are they the DepGraphNodeIndex values?</p>\n</blockquote>\n<p>yes. <code>DepGraphNodeIndex</code> -&gt; <code>DepNodeIndex</code></p>",
        "id": 177911093,
        "sender_full_name": "mw",
        "timestamp": 1570803604
    },
    {
        "content": "<p>er, ok</p>",
        "id": 177911107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803612
    },
    {
        "content": "<p>OK, so in the new PR, let's maybe walk through the editing process a bit?</p>",
        "id": 177911161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803653
    },
    {
        "content": "<p>Basically, the change is to load up the old graph and use it as the starting point, editing it in place, rather than copying things out from it into the new graph (right?)</p>",
        "id": 177911184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803672
    },
    {
        "content": "<p>Yeah. That's the key idea.</p>",
        "id": 177911215,
        "sender_full_name": "Zoxc",
        "timestamp": 1570803689
    },
    {
        "content": "<p>Do we ever delete nodes?</p>",
        "id": 177911307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803726
    },
    {
        "content": "<p>Like, if we go to evaluate some query, and we find it had a correpsonding node, but that node has a red input</p>",
        "id": 177911334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803743
    },
    {
        "content": "<p>We will re-execute the query, producing a result -- this result may have distinct edges from before, I guess</p>",
        "id": 177911360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803767
    },
    {
        "content": "<p>But we keep the same DepNode index, we just adjust its set of edges in place?</p>",
        "id": 177911372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803777
    },
    {
        "content": "<p>No, we only overwrite nodes with new dependencies.</p>",
        "id": 177911387,
        "sender_full_name": "Zoxc",
        "timestamp": 1570803790
    },
    {
        "content": "<p>My PR will delete nodes at the end of the compiler, but that's the only way nodes are removed.</p>",
        "id": 177911428,
        "sender_full_name": "Zoxc",
        "timestamp": 1570803821
    },
    {
        "content": "<p>The main scenario (at present) that I think something could need to be deleted is:</p>\n<ul>\n<li>Node A used to depend nodes B and C</li>\n<li>Node B was Red</li>\n<li>When N re-executes, it no longer uses node C </li>\n<li>Node C remains in the graph and is maybe no longer relevant</li>\n</ul>",
        "id": 177911542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803896
    },
    {
        "content": "<p>As in queries which did not get executed are removed from the dep graph. In the current state of the compiler, these wouldn't get copied to the new dep graph from the old.</p>",
        "id": 177911543,
        "sender_full_name": "Zoxc",
        "timestamp": 1570803896
    },
    {
        "content": "<p>OK, so we do a final sweep over the graph</p>",
        "id": 177911573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803913
    },
    {
        "content": "<p>Checking which queries were used this time</p>",
        "id": 177911580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803917
    },
    {
        "content": "<p>and deleting those that were not?</p>",
        "id": 177911584,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803920
    },
    {
        "content": "<p>what about so-called \"anonymous nodes\"?</p>",
        "id": 177911595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570803927
    },
    {
        "content": "<p>everything that got used is either red or green, right? (including anon nodes)</p>",
        "id": 177911697,
        "sender_full_name": "mw",
        "timestamp": 1570803969
    },
    {
        "content": "<p>the rest is \"unknown\"</p>",
        "id": 177911708,
        "sender_full_name": "mw",
        "timestamp": 1570803977
    },
    {
        "content": "<p>and we should get rid of all excess nodes by deleting all the unknown ones</p>",
        "id": 177911752,
        "sender_full_name": "mw",
        "timestamp": 1570804003
    },
    {
        "content": "<p>(which is true only under the assumption  that we did a full compilation that touched everything)</p>",
        "id": 177911800,
        "sender_full_name": "mw",
        "timestamp": 1570804031
    },
    {
        "content": "<p>ok, so we now have a use for the \"grey\" color :P</p>",
        "id": 177911811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804039
    },
    {
        "content": "<p>yes, in the PR, the current graph starts out as a grey copy of the old graph</p>",
        "id": 177911848,
        "sender_full_name": "mw",
        "timestamp": 1570804067
    },
    {
        "content": "<p>however, I take it that when we delete nodes, we don't have any mechanism to \"re-use\" the old indices</p>",
        "id": 177911856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804072
    },
    {
        "content": "<p>this is presumably the \"index leak\" that <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> was referring to?</p>",
        "id": 177911873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804083
    },
    {
        "content": "<p>The PR stores the deletes ids to disk to be reused.</p>",
        "id": 177911937,
        "sender_full_name": "Zoxc",
        "timestamp": 1570804107
    },
    {
        "content": "<p>OK. So the main problem is that the \"high water mark\" never goes down?</p>",
        "id": 177911954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804122
    },
    {
        "content": "<p>so is there still a drift?</p>",
        "id": 177911962,
        "sender_full_name": "mw",
        "timestamp": 1570804127
    },
    {
        "content": "<p>plus fragmentation</p>",
        "id": 177911968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804130
    },
    {
        "content": "<p>i.e., maybe they are scattered through the \"index space\"</p>",
        "id": 177911980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804138
    },
    {
        "content": "<p>The problem is when you have a crate with a lot of ids, which then could have less ids in the future.</p>",
        "id": 177911993,
        "sender_full_name": "Zoxc",
        "timestamp": 1570804144
    },
    {
        "content": "<p>yeah, that's what I was referring to by \"high water mark\"</p>",
        "id": 177912041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804172
    },
    {
        "content": "<p>Usually crates grow larger though, but there could be like an edge case with recursive types, etc. that crates a lot of ids due to an error.</p>",
        "id": 177912057,
        "sender_full_name": "Zoxc",
        "timestamp": 1570804182
    },
    {
        "content": "<p>are the <code>DepNodeIndex</code> values visible outside the graph?</p>",
        "id": 177912147,
        "sender_full_name": "mw",
        "timestamp": 1570804216
    },
    {
        "content": "<p><em>Presently</em> we dont' store the dep-graph on error</p>",
        "id": 177912151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804219
    },
    {
        "content": "<p>(But obviously we'd like to change that eventually)</p>",
        "id": 177912159,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804227
    },
    {
        "content": "<p>i.e. are we free to re-assign them during serialization if fragmentation gets too high?</p>",
        "id": 177912179,
        "sender_full_name": "mw",
        "timestamp": 1570804249
    },
    {
        "content": "<p>it seems like if we are doing a \"remove old node\" sweep</p>",
        "id": 177912217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804272
    },
    {
        "content": "<p>it's not hard to imagine a \"compression step\" as well</p>",
        "id": 177912227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804277
    },
    {
        "content": "<p>not saying it has to block this PR, but there seems to be room to fix that in the future if we had a problem</p>",
        "id": 177912247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804290
    },
    {
        "content": "<p>(is there any fundamental reason that is hard?)</p>",
        "id": 177912253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804295
    },
    {
        "content": "<blockquote>\n<p>i.e. are we free to re-assign them during serialization if fragmentation gets too high?</p>\n</blockquote>\n<p>basically this, yes</p>",
        "id": 177912259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804302
    },
    {
        "content": "<p>I'm trying to remember if the query result cache uses these indices as keys or something</p>",
        "id": 177912273,
        "sender_full_name": "mw",
        "timestamp": 1570804316
    },
    {
        "content": "<blockquote>\n<p>are the <code>DepNodeIndex</code> values visible outside the graph?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>, do you recall <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 177912338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804336
    },
    {
        "content": "<p>The query result cache does indeed use them as keys.</p>",
        "id": 177912339,
        "sender_full_name": "Zoxc",
        "timestamp": 1570804336
    },
    {
        "content": "<p>ok I confess I don't really remember anything about query result cache</p>",
        "id": 177912398,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804377
    },
    {
        "content": "<p>So if we want to garbage collect them, it must be done in sync with the query result cache.</p>",
        "id": 177912399,
        "sender_full_name": "Zoxc",
        "timestamp": 1570804377
    },
    {
        "content": "<p>presumably this is stored on the disk ?</p>",
        "id": 177912408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804381
    },
    {
        "content": "<p>well, right now the cache is entirely re-written anyway :)</p>",
        "id": 177912416,
        "sender_full_name": "mw",
        "timestamp": 1570804384
    },
    {
        "content": "<blockquote>\n<p>So if we want to garbage collect them, it must be done in sync with the query result cache.</p>\n</blockquote>\n<p>yeah, I guess the question is \"is that hard?\"</p>",
        "id": 177912433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804402
    },
    {
        "content": "<p>compression would have to record the mapping</p>",
        "id": 177912459,
        "sender_full_name": "mw",
        "timestamp": 1570804430
    },
    {
        "content": "<p>I think the query result cache will require garbage collection anyway though, for it to be incremental (I have a branch with that), since it uses interned recursive stuff like types.</p>",
        "id": 177912468,
        "sender_full_name": "Zoxc",
        "timestamp": 1570804440
    },
    {
        "content": "<p>and cache serialization would map on the fly during serialization?</p>",
        "id": 177912516,
        "sender_full_name": "mw",
        "timestamp": 1570804447
    },
    {
        "content": "<blockquote>\n<p>well, right now the cache is entirely re-written anyway :)</p>\n</blockquote>\n<p>sorry I misunderstood this -- you mean \"the compiler re-writes the cache after every exection\"</p>",
        "id": 177912604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804527
    },
    {
        "content": "<p>I thought you meant \"it has been fully refactored\" or something</p>",
        "id": 177912613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804533
    },
    {
        "content": "<p>We'd probably want to garbage collect all the incremental state either before loading it or after compilation. Doing it on-the-fly is going to make the query code messier.</p>",
        "id": 177912621,
        "sender_full_name": "Zoxc",
        "timestamp": 1570804544
    },
    {
        "content": "<p>yes please :)</p>",
        "id": 177912630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804554
    },
    {
        "content": "<p>with on-the-fly I mean during serialization</p>",
        "id": 177912689,
        "sender_full_name": "mw",
        "timestamp": 1570804574
    },
    {
        "content": "<p>instead of going into the query tables and rewriting there before serialization</p>",
        "id": 177912718,
        "sender_full_name": "mw",
        "timestamp": 1570804599
    },
    {
        "content": "<p>(ps, for those following the hackmd, I'm finding lots of weird bugs owing to it being tiled to half a screen, hence the weird formatting :) I need my separate monitor! at a coffee house right now though...)</p>",
        "id": 177912760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804627
    },
    {
        "content": "<p>There's no separate serialization step with <a href=\"https://github.com/rust-lang/rust/pull/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60035\">https://github.com/rust-lang/rust/pull/60035</a>. We serialize while executing.</p>",
        "id": 177912763,
        "sender_full_name": "Zoxc",
        "timestamp": 1570804631
    },
    {
        "content": "<p>I think the real question regarding GC is whether we think it's necessary <em>right now</em></p>",
        "id": 177912784,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804648
    },
    {
        "content": "<p>and separately whether we see a <em>path forward</em></p>",
        "id": 177912795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804656
    },
    {
        "content": "<p>I guess I mean like \"should it block landing this PR\", is question 1, and maybe also \"how soon would we want to fix it\"</p>",
        "id": 177912821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804674
    },
    {
        "content": "<p>I .. feel like it will probably be a problem at some point</p>",
        "id": 177912872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804685
    },
    {
        "content": "<p>but I also don't know that it needs to block current PR</p>",
        "id": 177912884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804693
    },
    {
        "content": "<p>I'd also like to do a time check - we are 40 minutes in</p>",
        "id": 177912890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804699
    },
    {
        "content": "<p>For <em>me</em> this has been very helpful, I understand much better what's happening, and I hope that for those who haven't been as actively participating it's been at least eductional :)</p>",
        "id": 177912914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804715
    },
    {
        "content": "<p>I don't think we need it now. Also having tons of ids likely won't affect performance much.</p>",
        "id": 177912917,
        "sender_full_name": "Zoxc",
        "timestamp": 1570804717
    },
    {
        "content": "<p>But I want to give a chance to turn to another topic</p>",
        "id": 177912932,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804730
    },
    {
        "content": "<p>We might as well garbage collect ids if we are garbage collecting the query result cache in the future though.</p>",
        "id": 177912959,
        "sender_full_name": "Zoxc",
        "timestamp": 1570804752
    },
    {
        "content": "<p>it has been highly educational indeed</p>",
        "id": 177912966,
        "sender_full_name": "qmx",
        "timestamp": 1570804755
    },
    {
        "content": "<p>we should also determine if want to do this at all</p>",
        "id": 177912976,
        "sender_full_name": "mw",
        "timestamp": 1570804765
    },
    {
        "content": "<p>yes, that could be a good topic :)</p>",
        "id": 177912987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804775
    },
    {
        "content": "<p>Which seems like it should be decided as part of broader picture</p>",
        "id": 177913000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804785
    },
    {
        "content": "<p>I'm not saying we shouldn't but there has been no discussion about whether <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a> is where we want to go</p>",
        "id": 177913017,
        "sender_full_name": "mw",
        "timestamp": 1570804799
    },
    {
        "content": "<p>Can we summarize in a few words what <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a> is aiming to do? (Maybe <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>?)</p>",
        "id": 177913114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804840
    },
    {
        "content": "<p>As in, do we want incremental data structures for the dep graph and query result cache or are we fine with a discrete step writing the incremental state taking up all the time in the clean incremental benchmarks? =P</p>",
        "id": 177913173,
        "sender_full_name": "Zoxc",
        "timestamp": 1570804884
    },
    {
        "content": "<p>Let me rephase that sarcasm into something more productive: can we lay out the motivations :)</p>",
        "id": 177913257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804923
    },
    {
        "content": "<p>As in, what is the right approach to make these more incremental</p>",
        "id": 177913270,
        "sender_full_name": "mw",
        "timestamp": 1570804927
    },
    {
        "content": "<p>I need to skim <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a> more closely</p>",
        "id": 177913349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570804997
    },
    {
        "content": "<p>the PR description says</p>\n<blockquote>\n<p>This PR changes how we save the dep graph. Instead of storing the nodes in memory until the end of the compilation they are streamed to a file (in the background with parallel_compiler). This should hopefully reduce the memory usage with incremental compilation somewhat.</p>\n</blockquote>",
        "id": 177913375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805019
    },
    {
        "content": "<p>But that doesn't feel complete</p>",
        "id": 177913384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805030
    },
    {
        "content": "<p>Or is it? I was assuming that dep-graph loading was also be affected</p>",
        "id": 177913400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805041
    },
    {
        "content": "<p>I'll quote myself =P</p>\n<blockquote>\n<p>This PR (<a href=\"https://github.com/rust-lang/rust/pull/62038\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62038\">https://github.com/rust-lang/rust/pull/62038</a>) is intended as an incremental step towards <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a> which goes further and removes the current dep graph from memory and instead stores it in an incremental key-value store on disk. There we apply changes to the on disk dep graph as we execute and we only need write the changes to the dep graph instead of writing the entire dep graph at the end.</p>\n</blockquote>",
        "id": 177913451,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805056
    },
    {
        "content": "<p>The dep graph loading isn't really affected.</p>",
        "id": 177913463,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805076
    },
    {
        "content": "<p>So in that model we would store a \"diff\" as we execute?</p>",
        "id": 177913476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805091
    },
    {
        "content": "<p>I don't think I had fully processed that part of the text before :)</p>",
        "id": 177913507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805113
    },
    {
        "content": "<p>Kind of. We still have a old dep graph in memory, but a new dep graph on disk which we change as we execute.</p>",
        "id": 177913533,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805135
    },
    {
        "content": "<p>So unlike <a href=\"https://github.com/rust-lang/rust/pull/62038\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62038\">https://github.com/rust-lang/rust/pull/62038</a> it doesn't need to copy the dep graph when loading.</p>",
        "id": 177913562,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805160
    },
    {
        "content": "<p>We have a copy on disk we can modify.</p>",
        "id": 177913610,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805169
    },
    {
        "content": "<p>I'll make an observation: we probably don't have enough time to really talk out the new PR in a lot of technical depth.</p>",
        "id": 177913627,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805180
    },
    {
        "content": "<p>Maybe we should do a 2nd meeting on that, as a follow-up?</p>",
        "id": 177913650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805197
    },
    {
        "content": "<p>Do we think that we can land the current PR either way? Off hand, it seems like it may just be a useful step period.</p>",
        "id": 177913682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805224
    },
    {
        "content": "<p>/me looks at <a href=\"https://perf.rust-lang.org/compare.html?start=4a365a29d64bec75d107214319a129ba68fc12a3&amp;end=7830caefb62c9c8d3fb7a742c66c64c89bf3aafe&amp;stat=wall-time\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=4a365a29d64bec75d107214319a129ba68fc12a3&amp;end=7830caefb62c9c8d3fb7a742c66c64c89bf3aafe&amp;stat=wall-time\">https://perf.rust-lang.org/compare.html?start=4a365a29d64bec75d107214319a129ba68fc12a3&amp;end=7830caefb62c9c8d3fb7a742c66c64c89bf3aafe&amp;stat=wall-time</a> again</p>",
        "id": 177913848,
        "sender_full_name": "mw",
        "timestamp": 1570805307
    },
    {
        "content": "<p>I guess the other question is whether people have other ideas for tackling the problems <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>  is trying to tackle, which reminds me that I think it'd be good to define those a bit more closely (you mentioned timing in incremental benchmarks, <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>, can you elaborate a bit more?)</p>",
        "id": 177913882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805337
    },
    {
        "content": "<p>The documentation in the rustc-guide should also be updated if the PR lands</p>",
        "id": 177913956,
        "sender_full_name": "mw",
        "timestamp": 1570805398
    },
    {
        "content": "<p>one thing that got me wondering: do we have rough figures on the footprint of the depgraph, both in memory and in disk?</p>",
        "id": 177914040,
        "sender_full_name": "qmx",
        "timestamp": 1570805429
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://media.giphy.com/media/5wWf7H89PisM6An8UAU/source.gif\" target=\"_blank\" title=\"https://media.giphy.com/media/5wWf7H89PisM6An8UAU/source.gif\"><img src=\"https://media.giphy.com/media/5wWf7H89PisM6An8UAU/source.gif\"></a></div>",
        "id": 177914046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805431
    },
    {
        "content": "<p>also the wins in the PR might go away on a fully loaded system, right? because we are offloading work to the background</p>",
        "id": 177914074,
        "sender_full_name": "mw",
        "timestamp": 1570805450
    },
    {
        "content": "<p>I don't want to waste time writing the entire dep graph and query result cache to disk each execution. In the clean incremental benchmark pretty much nothing changes so it's extremely wasteful.</p>",
        "id": 177914088,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> The instruction count regresses only slightly though, so at worst it will be pretty close.</p>",
        "id": 177914167,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805517
    },
    {
        "content": "<blockquote>\n<p>one thing that got me wondering: do we have rough figures on the footprint of the depgraph, both in memory and in disk?</p>\n</blockquote>\n<p>I was wondering the same thing, I don't know the answer, but I know that I have had trouble with huge amounts of incremental data from time to time. I don't know that this PR will affect that, I guess it could a <em>little</em> but I assume it's mostly from serialized reuslts and not the graph itself.</p>",
        "id": 177914221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805531
    },
    {
        "content": "<p>We pretty much move work from the query system to the background thread.</p>",
        "id": 177914224,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805533
    },
    {
        "content": "<blockquote>\n<p>I don't want to waste time writing the entire dep graph and query result cache to disk each execution. In the clean incremental benchmark pretty much nothing changes so it's extremely wasteful.</p>\n</blockquote>\n<p>This does feel like a very solid motivation :)</p>",
        "id": 177914240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805550
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> you and I talking a bit about things like \"mmap'ing\" incremental results (or at least making it so that loading and saving is very cheap)</p>",
        "id": 177914277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805580
    },
    {
        "content": "<p>It feels like this PR by <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> also moves in that direction, since mutating the graph is more in line with that? (I guess it's somewhat separable)</p>",
        "id": 177914337,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805616
    },
    {
        "content": "<p>Memory stats from <a href=\"https://github.com/rust-lang/rust/pull/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60035\">https://github.com/rust-lang/rust/pull/60035</a>: <a href=\"https://perf.rust-lang.org/compare.html?start=eeedd3a6e15d43d0cd3e860f36be737cb2c941ca&amp;end=cfe977fc791e1a9305d2b79e47b448dfa50abb4a&amp;stat=max-rss\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=eeedd3a6e15d43d0cd3e860f36be737cb2c941ca&amp;end=cfe977fc791e1a9305d2b79e47b448dfa50abb4a&amp;stat=max-rss\">https://perf.rust-lang.org/compare.html?start=eeedd3a6e15d43d0cd3e860f36be737cb2c941ca&amp;end=cfe977fc791e1a9305d2b79e47b448dfa50abb4a&amp;stat=max-rss</a></p>",
        "id": 177914341,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805620
    },
    {
        "content": "<p>This is because we don't have to retain the old graph in memory?</p>",
        "id": 177914420,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805652
    },
    {
        "content": "<p>The new dep graph is only on disk. The old is still in memory.</p>",
        "id": 177914439,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805671
    },
    {
        "content": "<p>In <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a>, <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>, do we always dump out a full new graph each time?</p>",
        "id": 177914444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805674
    },
    {
        "content": "<blockquote>\n<p>I remember <span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> you and I talking a bit about things like \"mmap'ing\" incremental results (or at least making it so that loading and saving is very cheap)</p>\n</blockquote>\n<p>Yes, a while ago. That would be independent of making the graph more incremental</p>",
        "id": 177914464,
        "sender_full_name": "mw",
        "timestamp": 1570805687
    },
    {
        "content": "<blockquote>\n<p>The new dep graph is only on disk. The old is still in memory.</p>\n</blockquote>\n<p>yeah, sorry, I meant to say the <em>whole</em> graph</p>",
        "id": 177914469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805690
    },
    {
        "content": "<p>Which suggest that most of the compiler memory usage is just the dep graph in some cases...</p>",
        "id": 177914470,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805692
    },
    {
        "content": "<blockquote>\n<p>In <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a>, <span class=\"user-mention silent\" data-user-id=\"116466\">Zoxc</span>, do we always dump out a full new graph each time?</p>\n</blockquote>\n<p>in other words, how I am understanding this PR is something like this:</p>\n<ul>\n<li>load old dep graph</li>\n<li>as we \"evaluate\" the new graph, dump out the nodes but we don't actively keep them in memory</li>\n<li>at the end, we have a new graph and can delete the old one</li>\n</ul>",
        "id": 177914553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805745
    },
    {
        "content": "<p>this is based on basically zero reading of the PR itself :)</p>",
        "id": 177914568,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805759
    },
    {
        "content": "<p>so feel free to correct me</p>",
        "id": 177914624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805772
    },
    {
        "content": "<p>We only 'dump' out nodes that changed or a new relative to the old dep graph, but it otherwise sounds right.</p>",
        "id": 177914736,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805862
    },
    {
        "content": "<p>Do we delete nodes from the old graph?</p>",
        "id": 177914759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805879
    },
    {
        "content": "<p>No. We delete the entire old graph from the disk (and all incremental state) from the previous session.</p>",
        "id": 177914844,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805912
    },
    {
        "content": "<p>The old dep graph is read-only in memory and doesn't change.</p>",
        "id": 177914906,
        "sender_full_name": "Zoxc",
        "timestamp": 1570805955
    },
    {
        "content": "<p>So if something doesn't change, and we delete it, but don't write a new copy, what happens to it?</p>",
        "id": 177914937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570805970
    },
    {
        "content": "<p>We make a copy of the entire incremental state in the start of the compiler, and we only mutate that copy of the dep graph</p>",
        "id": 177915072,
        "sender_full_name": "Zoxc",
        "timestamp": 1570806023
    },
    {
        "content": "<p>OK I don't understand but it doesn't matter</p>",
        "id": 177915139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806064
    },
    {
        "content": "<p>I started taking some notes on \"conclusions\" in the hackmd</p>",
        "id": 177915151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806071
    },
    {
        "content": "<p>pasting current status here</p>",
        "id": 177915161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806076
    },
    {
        "content": "<ul>\n<li>We had a good discussion of the PR in question. I don't think we raised any red flags or anything, the approach seems solid.</li>\n<li>The real question is whether we want to move in he <strong>overall direction</strong> proposed by <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a></li>\n<li>The goal here is to reduce the cost of loading/saving the dep-graph</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a> proposed to do so by incrementally dumping out changed nodes and not retaining them in memory</li>\n<li>\n<p>This we barely touched on -- some open questions for me<br>\n    * Are there alternative designs we have in mind?<br>\n    * Is <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a> itself an \"end state\" or a stepping stone?</p>\n</li>\n<li>\n<p>Conclusion:<br>\n    * Follow-up meeting to dig into design of <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a> and maybe discuss alternatives<br>\n    * In parallel, Niko will review <a href=\"https://github.com/rust-lang/rust/issues/62038\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62038\">#62038</a></p>\n</li>\n</ul>",
        "id": 177915163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806077
    },
    {
        "content": "<p>In particular, the \"conclusion\" there is kind of a \"what do you all think of this\"?</p>",
        "id": 177915198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806094
    },
    {
        "content": "<p>Ah we did not discuss documentation</p>",
        "id": 177915243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806120
    },
    {
        "content": "<p>I think we should make the graph and the result cache more incremental</p>",
        "id": 177915289,
        "sender_full_name": "mw",
        "timestamp": 1570806127
    },
    {
        "content": "<p>But I think I've made clear what I Think we sohuld do there and we can discuss it somewhat separately</p>",
        "id": 177915296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806130
    },
    {
        "content": "<p>I would like a more detailed description of what the final state looks like</p>",
        "id": 177915327,
        "sender_full_name": "mw",
        "timestamp": 1570806149
    },
    {
        "content": "<p>To be clear, I am not proposing to land <a href=\"https://github.com/rust-lang/rust/issues/62038\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62038\">#62038</a> before we discuss <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a></p>",
        "id": 177915372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806174
    },
    {
        "content": "<p>i.e. the incremental file format for the dep graph</p>",
        "id": 177915375,
        "sender_full_name": "mw",
        "timestamp": 1570806175
    },
    {
        "content": "<p>But I thought it would be useful to do some review of it while my understanding is fresh :)</p>",
        "id": 177915400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806186
    },
    {
        "content": "<p>regarding <a href=\"https://github.com/rust-lang/rust/issues/62038\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62038\">#62038</a>, it does regress memory usage quite a bit in some cases: <a href=\"https://perf.rust-lang.org/compare.html?start=4a365a29d64bec75d107214319a129ba68fc12a3&amp;end=7830caefb62c9c8d3fb7a742c66c64c89bf3aafe&amp;stat=max-rss\" target=\"_blank\" title=\"https://perf.rust-lang.org/compare.html?start=4a365a29d64bec75d107214319a129ba68fc12a3&amp;end=7830caefb62c9c8d3fb7a742c66c64c89bf3aafe&amp;stat=max-rss\">https://perf.rust-lang.org/compare.html?start=4a365a29d64bec75d107214319a129ba68fc12a3&amp;end=7830caefb62c9c8d3fb7a742c66c64c89bf3aafe&amp;stat=max-rss</a></p>",
        "id": 177915449,
        "sender_full_name": "mw",
        "timestamp": 1570806215
    },
    {
        "content": "<p>That's useful data</p>",
        "id": 177915479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806229
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> how do you feel about the plan of </p>\n<ul>\n<li>reviewing <a href=\"https://github.com/rust-lang/rust/issues/60238\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60238\">#60238</a> but not landing before we</li>\n<li>discuss <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a>, which means we should do some prep on documenting the details</li>\n</ul>\n<p>I would expect to hold a follow-up meeting in ~3 weeks -- next week is busy, week after that is planning meeting. But that seems ok.</p>",
        "id": 177915746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806362
    },
    {
        "content": "<p>And I guess I want to know if there are alternative designs in mind :)</p>",
        "id": 177915836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806397
    },
    {
        "content": "<p>Or anyone has strong objections to this change</p>",
        "id": 177915848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806406
    },
    {
        "content": "<p>(Feel free to message me privately if you prefer :)</p>",
        "id": 177915860,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806413
    },
    {
        "content": "<p>It seems fine given that <a href=\"https://github.com/rust-lang/rust/pull/62038\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62038\">https://github.com/rust-lang/rust/pull/62038</a> has drawbacks fixed by <a href=\"https://github.com/rust-lang/rust/pull/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60035\">https://github.com/rust-lang/rust/pull/60035</a>.</p>",
        "id": 177915877,
        "sender_full_name": "Zoxc",
        "timestamp": 1570806424
    },
    {
        "content": "<p>Yes, I was going to mention that</p>",
        "id": 177915944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806460
    },
    {
        "content": "<p>it'd be best to land them in close succession</p>",
        "id": 177915954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806465
    },
    {
        "content": "<p>OK, I gotta go. I've occupied this cafe seat for too long.</p>",
        "id": 177916017,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806484
    },
    {
        "content": "<p>I'm not sure the drawback are that severe, but we should decide that we want to do something like 60035.</p>",
        "id": 177916039,
        "sender_full_name": "Zoxc",
        "timestamp": 1570806497
    },
    {
        "content": "<p>for the next discussion we might want to think about whether we also want to tackle saving the dep-graph if compilation errors or if that is off the table for the time being</p>",
        "id": 177916048,
        "sender_full_name": "mw",
        "timestamp": 1570806504
    },
    {
        "content": "<p>I do think we want something like <a href=\"https://github.com/rust-lang/rust/issues/60035\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60035\">#60035</a></p>",
        "id": 177916086,
        "sender_full_name": "mw",
        "timestamp": 1570806531
    },
    {
        "content": "<p>Yes, I want to spend a bit of time trying to prepare for next discussion, <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span></p>",
        "id": 177916111,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806539
    },
    {
        "content": "<p>but I'd like to have a clearer picture and some evaluation of it</p>",
        "id": 177916137,
        "sender_full_name": "mw",
        "timestamp": 1570806551
    },
    {
        "content": "<p>let's create a hackmd talk and I'll reach out to you all to schedule some time to take notes in it</p>",
        "id": 177916140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806553
    },
    {
        "content": "<p>ok, seems like we're on same page, I feel the same -- this work seems to be in the right direction; I'd like to understand it better, but overall I'm feeling positive</p>",
        "id": 177916188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806584
    },
    {
        "content": "<p>I also want to give a shout out to <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> for pursuing so much of this work. It's very cool stuff. =)</p>",
        "id": 177916302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570806632
    },
    {
        "content": "<p>alright, thanks everyone! I think it is very useful to discussion bigger changes like the ones proposed here!</p>",
        "id": 177916597,
        "sender_full_name": "mw",
        "timestamp": 1570806797
    },
    {
        "content": "<p>/me needs to run</p>",
        "id": 177916609,
        "sender_full_name": "mw",
        "timestamp": 1570806803
    }
]