[
    {
        "content": "<p>I think so? we might want to clue in <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> just in case this is a mistake :P</p>",
        "id": 191762322,
        "sender_full_name": "eddyb",
        "timestamp": 1585149816
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.2368977.3A.20Revert.20.60compute_const.60.20changes.20in.20WF/near/191760589\" title=\"#narrow/stream/131828-t-compiler/topic/.2368977.3A.20Revert.20.60compute_const.60.20changes.20in.20WF/near/191760589\">said</a>:</p>\n<blockquote>\n<p>I never took any care to handle <code>Reveal::UserFacing</code>, because I didn't understand it when it was relevant</p>\n</blockquote>\n<p>FWIW, the old consteval ignored it completely, so you're not exactly in the wrong here I don't think, and the associated type default reasoning doesn't make much sense to me</p>",
        "id": 191763083,
        "sender_full_name": "eddyb",
        "timestamp": 1585150059
    },
    {
        "content": "<p>so the only jobs of <code>Reveal::UserFacing</code>, if we ignore associated defaults, would be:</p>\n<ol>\n<li>keeping \"global predicates\" (i.e. that don't depend on any type parameters and may look redundant. wait but why would <code>Reveal::All</code> hide those? that sounds like a recipe for ICEs in miri/layout! cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>)</li>\n<li>hide <code>ty::Opaque</code> aka <code>-&gt; impl Trait</code></li>\n</ol>",
        "id": 191764514,
        "sender_full_name": "eddyb",
        "timestamp": 1585150535
    },
    {
        "content": "<p>that reminded me I should try to do this :D <a href=\"https://github.com/rust-lang/rust/issues/70398\" title=\"https://github.com/rust-lang/rust/issues/70398\">#70398</a></p>",
        "id": 191781159,
        "sender_full_name": "eddyb",
        "timestamp": 1585156658
    },
    {
        "content": "<p>OK so I've gotten a bunch of pings rom this topic but i've not been able to keep up with it :)</p>",
        "id": 191803547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166453
    },
    {
        "content": "<p>is there a TL;DR</p>",
        "id": 191803560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166458
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.2368977.3A.20Revert.20.60compute_const.60.20changes.20in.20WF/near/191764514\" title=\"#narrow/stream/131828-t-compiler/topic/.2368977.3A.20Revert.20.60compute_const.60.20changes.20in.20WF/near/191764514\">said</a>:</p>\n<blockquote>\n<p>so the only jobs of <code>Reveal::UserFacing</code>, if we ignore associated defaults, would be:</p>\n<ol>\n<li>keeping \"global predicates\" (i.e. that don't depend on any type parameters and may look redundant. wait but why would <code>Reveal::All</code> hide those? that sounds like a recipe for ICEs in miri/layout! cc <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span>)</li>\n<li>hide <code>ty::Opaque</code> aka <code>-&gt; impl Trait</code></li>\n</ol>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is this the TL;DR?</p>",
        "id": 191803592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166473
    },
    {
        "content": "<p>yeah I guess</p>",
        "id": 191803669,
        "sender_full_name": "eddyb",
        "timestamp": 1585166514
    },
    {
        "content": "<p>at lease regarding <code>ParamEnv</code></p>",
        "id": 191803749,
        "sender_full_name": "eddyb",
        "timestamp": 1585166537
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh well also the fact that we likely don't want associated <em>const</em> defaults to be treated like associated <em>types</em> in terms of not normalizing during typeck</p>",
        "id": 191803932,
        "sender_full_name": "eddyb",
        "timestamp": 1585166641
    },
    {
        "content": "<p>but also I guess I pinged you on this :P <a href=\"https://github.com/rust-lang/rust/commit/8d98877112d4deb3786de521457418757e010c69#diff-1d1b0d29a2e8da97c6bfb6e364d920c7R1672-R1673\" title=\"https://github.com/rust-lang/rust/commit/8d98877112d4deb3786de521457418757e010c69#diff-1d1b0d29a2e8da97c6bfb6e364d920c7R1672-R1673\">https://github.com/rust-lang/rust/commit/8d98877112d4deb3786de521457418757e010c69#diff-1d1b0d29a2e8da97c6bfb6e364d920c7R1672-R1673</a></p>",
        "id": 191803984,
        "sender_full_name": "eddyb",
        "timestamp": 1585166654
    },
    {
        "content": "<p>I'm feeling a bit confused :)</p>",
        "id": 191808322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168953
    },
    {
        "content": "<p>I guess I need to read a bit more of the backscroll</p>",
        "id": 191808329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168960
    },
    {
        "content": "<p>In particular, I think I never imagined that reveal-all would have any use <em>besides</em> specialization (associated ty defaults) and impl trait, but maybe I've forgotten something?</p>",
        "id": 191808370,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168988
    },
    {
        "content": "<p>I'm not quite sure what you mean about global predicates, in particular</p>",
        "id": 191808378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585168996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <code>UserFacing</code> hides associated type defaults <em>even when</em> we know the entire type so we could just expose the type if we wanted to</p>",
        "id": 191814317,
        "sender_full_name": "eddyb",
        "timestamp": 1585172295
    },
    {
        "content": "<p>we don't anything like this for <em>values</em>, only <em>types</em></p>",
        "id": 191814347,
        "sender_full_name": "eddyb",
        "timestamp": 1585172314
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the global thing is <a href=\"https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src/librustc/ty/mod.rs#L1840-L1844\" title=\"https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src/librustc/ty/mod.rs#L1840-L1844\">https://github.com/rust-lang/rust/blob/cdb50c6f2507319f29104a25765bfb79ad53395c/src/librustc/ty/mod.rs#L1840-L1844</a></p>",
        "id": 191814388,
        "sender_full_name": "eddyb",
        "timestamp": 1585172343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.2368977.3A.20Revert.20.60compute_const.60.20changes.20in.20WF/near/191803932\" title=\"#narrow/stream/131828-t-compiler/topic/.2368977.3A.20Revert.20.60compute_const.60.20changes.20in.20WF/near/191803932\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> oh well also the fact that we likely don't want associated <em>const</em> defaults to be treated like associated <em>types</em> in terms of not normalizing during typeck</p>\n</blockquote>\n<p>Huh? Associated const defaults shouldn't be revealed either in trait defs, e.g. this should result in a unification failure:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SIZE</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Self</span>::<span class=\"n\">SIZE</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_y</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR mismatched types</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191840192,
        "sender_full_name": "centril",
        "timestamp": 1585198286
    },
    {
        "content": "<p>This is specced in the associated type defaults RFC</p>",
        "id": 191840202,
        "sender_full_name": "centril",
        "timestamp": 1585198300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> what I'm talking about is not about trait defs, which have <code>Self</code> in there so clearly it's not known</p>",
        "id": 191843149,
        "sender_full_name": "eddyb",
        "timestamp": 1585202957
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ah; do you have an example in mind wrt. the diff?</p>",
        "id": 191843156,
        "sender_full_name": "centril",
        "timestamp": 1585202982
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> if you have <code>&lt;ConcreteType as Trait&gt;::AssociatedType</code>, type-check won't let you see that if it finds an impl that doesn't specify it and relies on the trait default, IIRC. or maybe it's just with specialization</p>",
        "id": 191843201,
        "sender_full_name": "eddyb",
        "timestamp": 1585203025
    },
    {
        "content": "<p>I'll just go make an example</p>",
        "id": 191843204,
        "sender_full_name": "eddyb",
        "timestamp": 1585203032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8f677687fc5cb72cd2e622047ceb99a6\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8f677687fc5cb72cd2e622047ceb99a6\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=8f677687fc5cb72cd2e622047ceb99a6</a></p>",
        "id": 191843227,
        "sender_full_name": "eddyb",
        "timestamp": 1585203103
    },
    {
        "content": "<p>see the second error</p>",
        "id": 191843228,
        "sender_full_name": "eddyb",
        "timestamp": 1585203107
    },
    {
        "content": "<p>wait what it's gone?! <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=268803fb5872cd3803025cd27940afab\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=268803fb5872cd3803025cd27940afab\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=268803fb5872cd3803025cd27940afab</a></p>",
        "id": 191843271,
        "sender_full_name": "eddyb",
        "timestamp": 1585203138
    },
    {
        "content": "<p>but I could've sworn I've seen that code recently and it looked the same</p>",
        "id": 191843278,
        "sender_full_name": "eddyb",
        "timestamp": 1585203154
    },
    {
        "content": "<p>ah, this changed <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1035\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1035\">https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1035</a></p>",
        "id": 191843298,
        "sender_full_name": "eddyb",
        "timestamp": 1585203227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"https://github.com/rust-lang/rust/pull/64564\" title=\"https://github.com/rust-lang/rust/pull/64564\">https://github.com/rust-lang/rust/pull/64564</a> or <a href=\"https://github.com/rust-lang/rust/pull/61812\" title=\"https://github.com/rust-lang/rust/pull/61812\">https://github.com/rust-lang/rust/pull/61812</a> probably changed this, per RFC</p>",
        "id": 191843341,
        "sender_full_name": "centril",
        "timestamp": 1585203246
    },
    {
        "content": "<p>likely the latter</p>",
        "id": 191843346,
        "sender_full_name": "centril",
        "timestamp": 1585203257
    },
    {
        "content": "<p>it only changed traits specifically, specialization is still affected</p>",
        "id": 191843351,
        "sender_full_name": "eddyb",
        "timestamp": 1585203264
    },
    {
        "content": "<p>while you're at it... you can always finish that RFCs impl :D</p>",
        "id": 191843352,
        "sender_full_name": "centril",
        "timestamp": 1585203269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d7ad891485b6404da0520f9ddcd50554\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d7ad891485b6404da0520f9ddcd50554\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=d7ad891485b6404da0520f9ddcd50554</a></p>",
        "id": 191843367,
        "sender_full_name": "eddyb",
        "timestamp": 1585203308
    },
    {
        "content": "<p>we don't do this for associated consts</p>",
        "id": 191843372,
        "sender_full_name": "eddyb",
        "timestamp": 1585203317
    },
    {
        "content": "<p>that seems like a bug; <code>&lt;() as Trait&gt;::Assoc</code> has a ground term  in <code>Self</code>, so <code>Assoc</code> must be fully known here</p>",
        "id": 191843429,
        "sender_full_name": "centril",
        "timestamp": 1585203417
    },
    {
        "content": "<p>no this has been intentional all along</p>",
        "id": 191843446,
        "sender_full_name": "eddyb",
        "timestamp": 1585203429
    },
    {
        "content": "<p>we've relaxed it for defaults coming from the trait itself more recently</p>",
        "id": 191843464,
        "sender_full_name": "eddyb",
        "timestamp": 1585203450
    },
    {
        "content": "<p>but there's long comments in that file about this :P</p>",
        "id": 191843476,
        "sender_full_name": "eddyb",
        "timestamp": 1585203472
    },
    {
        "content": "<p>wait what; why is this intentional?</p>",
        "id": 191843514,
        "sender_full_name": "centril",
        "timestamp": 1585203493
    },
    {
        "content": "<p>ask <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 191843517,
        "sender_full_name": "eddyb",
        "timestamp": 1585203499
    },
    {
        "content": "<p>uh oh <a href=\"https://github.com/rust-lang/rust/commit/a323ff2c864801fdc8e044e88f11efb49a565ed1#diff-b50d9bf9e9d008c91a87602713a20333L1057-R1057\" title=\"https://github.com/rust-lang/rust/commit/a323ff2c864801fdc8e044e88f11efb49a565ed1#diff-b50d9bf9e9d008c91a87602713a20333L1057-R1057\">https://github.com/rust-lang/rust/commit/a323ff2c864801fdc8e044e88f11efb49a565ed1#diff-b50d9bf9e9d008c91a87602713a20333L1057-R1057</a></p>",
        "id": 191843535,
        "sender_full_name": "eddyb",
        "timestamp": 1585203548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> ^^ there's a comment above your change there, and probably  elsewhere in the file too</p>",
        "id": 191843545,
        "sender_full_name": "eddyb",
        "timestamp": 1585203574
    },
    {
        "content": "<p>I'm not sure they're 100% correct anymore</p>",
        "id": 191843591,
        "sender_full_name": "eddyb",
        "timestamp": 1585203606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/mod.rs#L37-L56\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/traits/mod.rs#L37-L56\">https://github.com/rust-lang/rust/blob/master/src/librustc/traits/mod.rs#L37-L56</a></p>",
        "id": 191843680,
        "sender_full_name": "eddyb",
        "timestamp": 1585203764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yea but your playground has a crucial difference: <code>impl Trait for () {}</code>, which locks in the associated type, making it not further specializable</p>",
        "id": 191843745,
        "sender_full_name": "centril",
        "timestamp": 1585203873
    },
    {
        "content": "<p>read what I just linked?</p>",
        "id": 191843752,
        "sender_full_name": "eddyb",
        "timestamp": 1585203884
    },
    {
        "content": "<p>I did yes</p>",
        "id": 191843755,
        "sender_full_name": "centril",
        "timestamp": 1585203893
    },
    {
        "content": "<p>\"However, we <em>could</em> allow projections in fully-monomorphic cases. We choose not to,\"</p>",
        "id": 191843758,
        "sender_full_name": "eddyb",
        "timestamp": 1585203900
    },
    {
        "content": "<p>my example is a \"fully monomorphic case\"</p>",
        "id": 191843766,
        "sender_full_name": "eddyb",
        "timestamp": 1585203907
    },
    {
        "content": "<p>Yes, I'm skeptical that comment is the right thing in the case of <code>impl Trait for () {}</code></p>",
        "id": 191843782,
        "sender_full_name": "centril",
        "timestamp": 1585203938
    },
    {
        "content": "<p>at least</p>",
        "id": 191843792,
        "sender_full_name": "centril",
        "timestamp": 1585203944
    },
    {
        "content": "<p>oh their example is missing that haha</p>",
        "id": 191843794,
        "sender_full_name": "eddyb",
        "timestamp": 1585203947
    },
    {
        "content": "<p>that <code>impl</code> doesn't actually matter for the specialization example, it's a left-over from the trait example</p>",
        "id": 191843834,
        "sender_full_name": "eddyb",
        "timestamp": 1585203966
    },
    {
        "content": "<p>specializing empty impls do nothing</p>",
        "id": 191843841,
        "sender_full_name": "eddyb",
        "timestamp": 1585203980
    },
    {
        "content": "<p>it's only relevant if it actually overrides the default itself <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c9cef05e1013f9a04142578724cbf53d\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c9cef05e1013f9a04142578724cbf53d\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=c9cef05e1013f9a04142578724cbf53d</a></p>",
        "id": 191843854,
        "sender_full_name": "eddyb",
        "timestamp": 1585204019
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> looks like the impl has inconsistencies then; cause omitting an associated type without further marking it as <code>default</code> does have the effect of locking in the type, per <a href=\"https://github.com/rust-lang/rust/pull/64564\" title=\"https://github.com/rust-lang/rust/pull/64564\">https://github.com/rust-lang/rust/pull/64564</a></p>",
        "id": 191844042,
        "sender_full_name": "centril",
        "timestamp": 1585204244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> yeah, this part here of \"is implicitly default\" should've been adjusted <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1019-L1020\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1019-L1020\">https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1019-L1020</a></p>",
        "id": 191844053,
        "sender_full_name": "eddyb",
        "timestamp": 1585204262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> you're saying there's a required chain of <code>default</code>s now?</p>",
        "id": 191844137,
        "sender_full_name": "eddyb",
        "timestamp": 1585204370
    },
    {
        "content": "<p>let me cook up an example</p>",
        "id": 191844146,
        "sender_full_name": "centril",
        "timestamp": 1585204392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f211bc5670f7a50631fdfbff832afbba\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f211bc5670f7a50631fdfbff832afbba\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f211bc5670f7a50631fdfbff832afbba</a></p>",
        "id": 191844208,
        "sender_full_name": "centril",
        "timestamp": 1585204465
    },
    {
        "content": "<p>the implementation basically remains conservative, with small exceptions</p>",
        "id": 191844210,
        "sender_full_name": "eddyb",
        "timestamp": 1585204470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  I'd recommend going over Jonas's two PRs (esp. the tests) and reading over the RFC</p>",
        "id": 191844307,
        "sender_full_name": "centril",
        "timestamp": 1585204611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I don't think the specialization graph was updated for this</p>",
        "id": 191844315,
        "sender_full_name": "eddyb",
        "timestamp": 1585204626
    },
    {
        "content": "<p>yea, the impl was partial</p>",
        "id": 191844330,
        "sender_full_name": "centril",
        "timestamp": 1585204645
    },
    {
        "content": "<p>to take advantage of this knowledge you need two trait/impl's, not just one</p>",
        "id": 191844340,
        "sender_full_name": "eddyb",
        "timestamp": 1585204653
    },
    {
        "content": "<p>the defaulter and the finalizer</p>",
        "id": 191844346,
        "sender_full_name": "eddyb",
        "timestamp": 1585204662
    },
    {
        "content": "<p>when they're equal, it's a non-default</p>",
        "id": 191844350,
        "sender_full_name": "eddyb",
        "timestamp": 1585204673
    },
    {
        "content": "<p>when not, and the finalizer isn't missing, you actually can treat something declared as <code>default</code>, as if it weren't</p>",
        "id": 191844401,
        "sender_full_name": "eddyb",
        "timestamp": 1585204707
    },
    {
        "content": "<p>but you need to tell apart the presence of the <code>finalizer</code>, which the current implementation just doesn't have a way to do, <em>except</em> when the default is from the trait</p>",
        "id": 191844413,
        "sender_full_name": "eddyb",
        "timestamp": 1585204743
    },
    {
        "content": "<p>because there's clearly a finalizer otherwise you wouldn't have matched the trait</p>",
        "id": 191844422,
        "sender_full_name": "eddyb",
        "timestamp": 1585204757
    },
    {
        "content": "<p>none of this would simplify the implementation, at least, and you'd still have cases where even miri/codegen can't normalize something because it hits the blanket impl with a <code>default type</code> or <code>default const</code> and has no finalizer</p>",
        "id": 191844486,
        "sender_full_name": "eddyb",
        "timestamp": 1585204832
    },
    {
        "content": "<p>so e.g. it wouldn't help with <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>'s polymorphization struggles</p>",
        "id": 191844493,
        "sender_full_name": "eddyb",
        "timestamp": 1585204853
    },
    {
        "content": "<p>uh oh, just realized <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_ty/instance.rs#L90-L100\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_ty/instance.rs#L90-L100\">https://github.com/rust-lang/rust/blob/master/src/librustc_ty/instance.rs#L90-L100</a> is missing this entire logic <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1018-L1042\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1018-L1042\">https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1018-L1042</a></p>",
        "id": 191844598,
        "sender_full_name": "eddyb",
        "timestamp": 1585205006
    },
    {
        "content": "<p>I'm glad we would be able to ship associated type defaults without finalizing the specialization interactions :P</p>",
        "id": 191844678,
        "sender_full_name": "centril",
        "timestamp": 1585205125
    },
    {
        "content": "<p>is this unnecessary? I can't trigger the bad behavior I expected to on playground <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1041\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1041\">https://github.com/rust-lang/rust/blob/master/src/librustc_trait_selection/traits/project.rs#L1041</a></p>",
        "id": 191844755,
        "sender_full_name": "eddyb",
        "timestamp": 1585205240
    },
    {
        "content": "<p><del>ah nvm we use <code>Reveal::All</code> so I can't have generics which means... yeah nvm lol</del></p>",
        "id": 191844833,
        "sender_full_name": "eddyb",
        "timestamp": 1585205286
    },
    {
        "content": "<p><del>it doesn't matter how correct <code>instance::resolve_associated_item</code> is, since it's never used with <code>UserFacing</code></del></p>",
        "id": 191844852,
        "sender_full_name": "eddyb",
        "timestamp": 1585205326
    },
    {
        "content": "<p><del>except by WF I guess?</del></p>",
        "id": 191844870,
        "sender_full_name": "eddyb",
        "timestamp": 1585205350
    },
    {
        "content": "<p>argh, no, the defaultness condition is first, which means it would override <code>Reveal</code></p>",
        "id": 191844932,
        "sender_full_name": "eddyb",
        "timestamp": 1585205416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> why does this not constant fold? I was hoping to show a bad optimization :(<br>\nbut I can't because it doesn't actually do what I want it to <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=d247d1ea11675ed855171a239cac7517\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=d247d1ea11675ed855171a239cac7517\">https://play.rust-lang.org/?version=nightly&amp;mode=release&amp;edition=2018&amp;gist=d247d1ea11675ed855171a239cac7517</a></p>",
        "id": 191845090,
        "sender_full_name": "eddyb",
        "timestamp": 1585205692
    },
    {
        "content": "<p>maybe I can trick miri into evaluating something</p>",
        "id": 191845094,
        "sender_full_name": "eddyb",
        "timestamp": 1585205702
    },
    {
        "content": "<p>meh opened <a href=\"https://github.com/rust-lang/rust/issues/70419\" title=\"https://github.com/rust-lang/rust/issues/70419\">#70419</a>, I don't want to care about this further</p>",
        "id": 191846673,
        "sender_full_name": "eddyb",
        "timestamp": 1585207613
    },
    {
        "content": "<p>Hmm so I think that <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0e2e556402333111a989fbd40f90b029\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=0e2e556402333111a989fbd40f90b029\">this example</a> should get an error on the <code>u8</code> case, but not <code>()</code> -- that meets your expectations, <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Assoc</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">default</span> <span class=\"k\">type</span><span class=\"w\"> </span><span class=\"n\">Assoc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">X</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">Assoc</span><span class=\"o\">=</span><span class=\"kt\">bool</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">//~ ERROR</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>that is not, however, the current behavior, it's true.</p>",
        "id": 191947573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585256157
    },
    {
        "content": "<p>I don't think this is covered by <a href=\"https://github.com/rust-lang/rust/issues/70419\" title=\"https://github.com/rust-lang/rust/issues/70419\">#70419</a></p>",
        "id": 191947692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585256209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think that does meet them, but I haven't though deeply about it (slept too little today to do so now anyways <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span>)</p>",
        "id": 191947914,
        "sender_full_name": "centril",
        "timestamp": 1585256317
    },
    {
        "content": "<p>Basic rationale being that <code>for ()</code> has locked in the associated type</p>",
        "id": 191947971,
        "sender_full_name": "centril",
        "timestamp": 1585256342
    },
    {
        "content": "<p>so further specialization doesn't apply</p>",
        "id": 191947994,
        "sender_full_name": "centril",
        "timestamp": 1585256353
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/rust/issues/70442\" title=\"https://github.com/rust-lang/rust/issues/70442\">https://github.com/rust-lang/rust/issues/70442</a> to cover that particuar bug</p>",
        "id": 191948643,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585256675
    }
]