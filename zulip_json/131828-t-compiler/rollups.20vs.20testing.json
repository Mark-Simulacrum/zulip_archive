[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> and I were looking at this article <a href=\"https://hacks.mozilla.org/2020/07/testing-firefox-more-efficiently-with-machine-learning/\">Testing Firefox more efficiently with machine learning</a>. The basic idea is to use some automated heuristics to learn which tests might be broken by which commits. </p>\n<p>Mozilla's process is more \"optimistic\" than ours -- they land commits and then test afterwards, and remove things that break the build. The goal with the machine learning then is to figure out (after the fact, I think) what is the best order to run the tests to find problems efficiently and back them out.</p>\n<p>Reading the article got me thinking about how rollups interact with bisection. i.e., if we were able to run a \"pretty good\" set of tests based on some heuristics and land each PR more efficiently, then we'd sometimes find that tests created unexpected failures. However, because we wouldn't have any rollups, we'd also be able to bisect and find the PR quite efficiently (and hopefully then back it out with minimal disruption). </p>\n<p>Not really proposing a change, just thinking out loud. I'm not convinced that the \"pessimistic\" approach we're using now of testing everything up front is the best solution, though I think it has a lot of advantages.</p>",
        "id": 204209957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594994901
    },
    {
        "content": "<p>(And of course even our current pessimistic approach can't prevent all errors, i.e., we still get regressions in the wild)</p>",
        "id": 204209999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594994935
    },
    {
        "content": "<p>IMO for bisection enhancement we should modify bors to basically bors try any r+'d PR such that we have artifacts for it</p>",
        "id": 204210292,
        "sender_full_name": "simulacrum",
        "timestamp": 1594995088
    },
    {
        "content": "<p>(alternatively we can setup a bot that'll \"generate\" such a set of try builds from a rollup post-facto, when needed -- it would be a bit of work but not too hard)</p>",
        "id": 204210367,
        "sender_full_name": "simulacrum",
        "timestamp": 1594995124
    },
    {
        "content": "<p>yes, I've thought about that too</p>",
        "id": 204210421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594995166
    },
    {
        "content": "<p>this is also very similar to what FF does</p>",
        "id": 204210433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594995178
    },
    {
        "content": "<p>but different:)</p>",
        "id": 204210441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594995183
    },
    {
        "content": "<p>i.e., the same idea of \"land a bunch of stuff fast, then go back and fill in the gaps\"</p>",
        "id": 204210457,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594995196
    },
    {
        "content": "<p>well -- in this case it'd probably be more like \"fill in the gaps if needed\"</p>",
        "id": 204210486,
        "sender_full_name": "simulacrum",
        "timestamp": 1594995214
    },
    {
        "content": "<p>but it's probably better to ensure tests pass on the full set before landing, and have the \"gaps we're filling in\" just be binaries that aid in bisection</p>",
        "id": 204210487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594995215
    },
    {
        "content": "<p>well</p>",
        "id": 204210514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594995232
    },
    {
        "content": "<p>yeah I guess we could wait to do it until we find a regression from a rollup?</p>",
        "id": 204210582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594995247
    },
    {
        "content": "<p>right, yeah, that'd be the idea</p>",
        "id": 204210590,
        "sender_full_name": "simulacrum",
        "timestamp": 1594995253
    },
    {
        "content": "<p>however, I'm also thinking of things like perf regressions</p>",
        "id": 204210608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594995259
    },
    {
        "content": "<p>which are harder to track down it seems</p>",
        "id": 204210622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594995268
    },
    {
        "content": "<p>I think we don't have time budget to build even just binaries for every PR in a rollup</p>",
        "id": 204210657,
        "sender_full_name": "simulacrum",
        "timestamp": 1594995290
    },
    {
        "content": "<p>I think for perf regressions I'd rather have a bot that generates a revert PR for you for the \"candidate\" and then perf-tests that, which gives you a pretty good idea of the impact</p>",
        "id": 204210741,
        "sender_full_name": "simulacrum",
        "timestamp": 1594995341
    },
    {
        "content": "<p>but yes I agree that looking into these things would be amazing</p>",
        "id": 204210901,
        "sender_full_name": "simulacrum",
        "timestamp": 1594995413
    },
    {
        "content": "<p>Don't tell Graydon you're considering this :)</p>",
        "id": 204374426,
        "sender_full_name": "njn",
        "timestamp": 1595199448
    },
    {
        "content": "<p>I'm frankly terrified. I've already complained about rollups (not made on the basis of small impactless PRs) making it hard to track down perf/functionality regressions. although some of the stuff I see in the discussion (extra binaries) seems sensible if done on top of what we have today</p>",
        "id": 204381434,
        "sender_full_name": "eddyb",
        "timestamp": 1595212307
    },
    {
        "content": "<p>Chrome does the equivalent of rollups for every merge, and then has some logic to guess the most likely failed commit that broke a merge and kick it out and try again. Very much a \"computer time is cheaper than human time\" solution.</p>",
        "id": 204385181,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595218401
    },
    {
        "content": "<p>This reminds me, there are CI systems out there that do this as well, I remember being linked to one such but I don’t have a link to it handy anymore.</p>",
        "id": 204408026,
        "sender_full_name": "nagisa",
        "timestamp": 1595242119
    },
    {
        "content": "<p>basically it would test multiple potentially dependent commits in parallel and if there were failures it would retry the other PRs after booting the earlier failures… something along those lines.</p>",
        "id": 204408074,
        "sender_full_name": "nagisa",
        "timestamp": 1595242179
    },
    {
        "content": "<p>That wouldn’t work as well in our case as we already utilize pretty much all of the resources we have available to us to just cover all the different configurations.</p>",
        "id": 204408179,
        "sender_full_name": "nagisa",
        "timestamp": 1595242239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> was it maybe SubmitQueue <a href=\"https://blog.acolyer.org/2019/04/18/keeping-master-green-at-scale/\">https://blog.acolyer.org/2019/04/18/keeping-master-green-at-scale/</a> ?</p>",
        "id": 204408381,
        "sender_full_name": "lqd",
        "timestamp": 1595242438
    },
    {
        "content": "<p>Finding regressions caused by rollups isn't  cheap human time as well.</p>",
        "id": 204408430,
        "sender_full_name": "mati865",
        "timestamp": 1595242451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> doesn’t look like it. From what I remember it was an actual CI product website/landing page. Also had a video prominently on the front page or similar describing how their approach works.</p>",
        "id": 204408533,
        "sender_full_name": "nagisa",
        "timestamp": 1595242533
    },
    {
        "content": "<p>Though maybe the idea is the same, don’t have the time to dig into it now.</p>",
        "id": 204408675,
        "sender_full_name": "nagisa",
        "timestamp": 1595242648
    }
]