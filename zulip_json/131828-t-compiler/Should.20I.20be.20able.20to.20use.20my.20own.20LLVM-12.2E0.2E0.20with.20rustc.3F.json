[
    {
        "content": "<p>Hi,</p>\n<p>I've just built rustc using an LLVM-12.0.0 that I built myself. This is valid, right? I ask because I've got this test failure:</p>\n<div class=\"codehilite\"><pre><span></span><code>---- [codegen] codegen/alloc-optimisation.rs stdout ----\n\nerror: verification with &#39;FileCheck&#39; failed\nstatus: exit status: 1\ncommand: &quot;/opt/llvm-12.0.0-release-with-assertions/bin/FileCheck&quot; &quot;--input-file&quot; &quot;/home/vext01/source/rust/build/x86_64-unknown-linux-gnu/test/codegen/alloc-optimisation/alloc-optimisation.ll&quot; &quot;/home/vext01/sourc\ne/rust/src/test/codegen/alloc-optimisation.rs&quot;\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\n/home/vext01/source/rust/src/test/codegen/alloc-optimisation.rs:10:17: error: CHECK-NEXT: is not on the line after the previous match\n // CHECK-NEXT: ret void\n                ^\n/home/vext01/source/rust/build/x86_64-unknown-linux-gnu/test/codegen/alloc-optimisation/alloc-optimisation.ll:25:2: note: &#39;next&#39; match was here\n ret void\n ^\n/home/vext01/source/rust/build/x86_64-unknown-linux-gnu/test/codegen/alloc-optimisation/alloc-optimisation.ll:11:7: note: previous match ended here\nstart:\n      ^\n/home/vext01/source/rust/build/x86_64-unknown-linux-gnu/test/codegen/alloc-optimisation/alloc-optimisation.ll:12:1: note: non-matching line after previous match is here\n %0 = tail call i8* @__rust_alloc(i64 4, i64 4) #2\n^\n\nInput file: /home/vext01/source/rust/build/x86_64-unknown-linux-gnu/test/codegen/alloc-optimisation/alloc-optimisation.ll\nCheck file: /home/vext01/source/rust/src/test/codegen/alloc-optimisation.rs\n\n-dump-input=help explains the following input dump.\n\nInput was:\n&lt;&lt;&lt;&lt;&lt;&lt;\n         .\n         .\n         .\n        20:\n        21: &quot;_ZN5alloc5boxed12Box$LT$T$GT$3new17h86d95fc91cd13025E.exit&quot;: ; preds = %start\n        22:  %2 = bitcast i8* %0 to i32*\n        23:  store i32 %data, i32* %2, align 4\n        24:  tail call void @__rust_dealloc(i8* nonnull %0, i64 4, i64 4) #2\n        25:  ret void\nnext:10      !~~~~~~~ error: match on wrong line\n        26: }\n        27:\n        28: ; Function Attrs: nounwind nonlazybind uwtable\n        29: declare i32 @rust_eh_personality(i32, i32, i64, %&quot;unwind::libunwind::_Unwind_Exception&quot;*, %&quot;unwind::libunwind::_Unwind_Context&quot;*) unnamed_addr #0\n        30:\n         .\n         .\n         .\n&gt;&gt;&gt;&gt;&gt;&gt;\n\n------------------------------------------\n\n\n\nfailures:\n    [codegen] codegen/alloc-optimisation.rs\n</code></pre></div>\n<p>I built LLVM as described <a href=\"https://github.com/rust-lang/rust/issues/60059#issuecomment-823302769\">here</a>.</p>\n<p>Should I raise an issue? Thanks.</p>",
        "id": 235354527,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1618929664
    },
    {
        "content": "<p>(The failure does not occur using the bundled LLVM)</p>",
        "id": 235354594,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1618929697
    },
    {
        "content": "<p>Rust uses a patched llvm (rust-lang/llvm-project). One of these patches teaches llvm about <code>__rust_alloc</code> and <code>__rust_dealloc</code>. Others fix miscompilations and stuff like that.</p>",
        "id": 235354768,
        "sender_full_name": "bjorn3",
        "timestamp": 1618929756
    },
    {
        "content": "<p>Gotcha. So I guess if I want a stable LLVM whose version won't change under my feet, then  I should manually compile the fork.</p>",
        "id": 235355272,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1618929942
    },
    {
        "content": "<p>You should be fine compiling and running your own still. Distributions do exactly that.</p>",
        "id": 235355385,
        "sender_full_name": "nagisa",
        "timestamp": 1618929977
    },
    {
        "content": "<p>Though you may or may not need to bring some of those patches in which is also something distributions do.</p>",
        "id": 235355454,
        "sender_full_name": "nagisa",
        "timestamp": 1618930006
    },
    {
        "content": "<p>I'm going to need to run the test suite in a CI setup, so the tests need to pass.</p>",
        "id": 235355502,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1618930021
    },
    {
        "content": "<p>Should I just choose a recent llvm-12 branch from your fork? e.g. <code>rustc/12.0-2021-04-15</code>.</p>",
        "id": 235355798,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1618930129
    },
    {
        "content": "<p><code>.gitmodules</code> in the rust repo shows the right branch. Currently it is <code>rustc/12.0-2021-04-15</code>.</p>",
        "id": 235355917,
        "sender_full_name": "bjorn3",
        "timestamp": 1618930179
    },
    {
        "content": "<p>Sorry, one more query. For how long would I get away with using any given version from your fork?</p>\n<p>For example, if i build the <code>rustc/12.0-2021-04-15</code> branch today, is it likely to still work with the latest rustc in say, a year or two's time, or is rustc quite dependent on a particular version?</p>",
        "id": 235359361,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1618931156
    },
    {
        "content": "<p>We support 2 or so major releases. Though it is recommended that people use the most recent llvm regardless because ecosystem may come to rely on e.g. soundness fixes only available in a more recent llvm version</p>",
        "id": 235360501,
        "sender_full_name": "nagisa",
        "timestamp": 1618931517
    },
    {
        "content": "<p>A good example of this are the <code>loop{}</code> miscompiles. Most code will work on llvm 10/11 but a crate written with 12 in mind may end up with a loop{} that's misoptimized under those older versions.</p>",
        "id": 235360761,
        "sender_full_name": "nagisa",
        "timestamp": 1618931601
    },
    {
        "content": "<p>Great. Thank you.</p>",
        "id": 235402462,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1618947452
    },
    {
        "content": "<blockquote>\n<p>Rust uses a patched llvm (rust-lang/llvm-project). One of these patches teaches llvm about __rust_alloc and __rust_dealloc. Others fix miscompilations and stuff like that.</p>\n</blockquote>\n<p>So it's not just optimisations? rustc will in some situations, miscompile things with a stock llvm?</p>",
        "id": 235480484,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1618997621
    },
    {
        "content": "<p>correct</p>",
        "id": 235480748,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618997751
    },
    {
        "content": "<p>(well, I think \"llvm will miscompile things\" is more accurate)</p>",
        "id": 235480808,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618997763
    },
    {
        "content": "<p>I think we try pretty hard to upstream patches that fix miscompilations though</p>",
        "id": 235480868,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618997797
    },
    {
        "content": "<p>I thought there was a policy to not add patches before they're accepted by upstream LLVM (though they might not be in the latest release yet)</p>",
        "id": 235481750,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618998313
    },
    {
        "content": "<p>not that I'm aware of</p>",
        "id": 235481817,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618998356
    },
    {
        "content": "<p>For the tiny PRs that I've submitted I used my system LLVM to speed up the initial compile time. But you might need to build the custom one if you get failing tests or other weird issues.</p>",
        "id": 235481944,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618998412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu</span> <span class=\"user-mention silent\" data-user-id=\"223288\">Edd Barrett</span> is building from source for a distro (or possibly a fork? I don't remember)</p>",
        "id": 235481987,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618998434
    },
    {
        "content": "<p>Oh, okay</p>",
        "id": 235482184,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618998537
    },
    {
        "content": "<p>Regarding the patching policy, I found this on <a href=\"https://rustc-dev-guide.rust-lang.org/backend/updating-llvm.html\">https://rustc-dev-guide.rust-lang.org/backend/updating-llvm.html</a>: \"Strongly prefer to upstream all patches to LLVM before including them in rustc. [...] Often we find bugs in the compiler and fix them upstream in LLVM. We'll want to pull fixes back to the compiler itself as they're merged upstream. [...] All features and bugfixes are upstream, but there's often some weird build-related patches that don't make sense to upstream which we have on our repositories.\"</p>",
        "id": 235482432,
        "sender_full_name": "Laurențiu",
        "timestamp": 1618998665
    },
    {
        "content": "<p>(I need to make changes to libLTO and was deciding if I should fork stock LLVM or the Rust fork)</p>",
        "id": 235482896,
        "sender_full_name": "Edd Barrett",
        "timestamp": 1618998944
    }
]