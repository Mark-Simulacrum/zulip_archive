[
    {
        "content": "<p>So I took a stab at rewriting the <code>UnconditionalRecursion</code> lint to operate on MIR instead of the <code>CFG</code>. I've got something that basically works but I want to make sure my approach is reasonable. </p>\n<p>To get the mir for a function, I'm using the <code>optimized_mir()</code> query. I've tried using some of the other queries such as <code>mir_built()</code>but since <code>UnconditionalRecursion</code> is a late lint, those other MIR queries' values have already been stolen and are unavailable.  I tried making <code>UnconditionalRecursion</code> an early lint instead but I can't find any <code>TyCtxt</code>s available to early lints and so I don't know how to get the MIR at all in an early lint context.</p>\n<p>Is using the optimized MIR ok or is there something else I should be using?</p>",
        "id": 133801741,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536761948
    },
    {
        "content": "<p>I .. huh</p>",
        "id": 133810389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769692
    },
    {
        "content": "<p>this feels like something that should use unoptimized MIR to me</p>",
        "id": 133810401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769700
    },
    {
        "content": "<p>I think we should rework the way lints are setup anyway</p>",
        "id": 133810409,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769715
    },
    {
        "content": "<p>So, having thought it about some more, we shouldn't use optimized mir at all since that means the warning may or may not fire depending on optimization levels</p>",
        "id": 133810420,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536769731
    },
    {
        "content": "<p>right</p>",
        "id": 133810421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769735
    },
    {
        "content": "<p>I think what you would want to do is to have the MIR thief invoke the lint setup run</p>",
        "id": 133810434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769756
    },
    {
        "content": "<p>and not use any \"lint runner\" thing</p>",
        "id": 133810435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769759
    },
    {
        "content": "<p>probably we want to have some meta-query that is like \"analyze\"</p>",
        "id": 133810440,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769767
    },
    {
        "content": "<p>alternatively, make MIR borrowck do it</p>",
        "id": 133810443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769773
    },
    {
        "content": "<p>same idea</p>",
        "id": 133810446,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769775
    },
    {
        "content": "<p>(just that MIR borrowck is that meta-query)</p>",
        "id": 133810450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769780
    },
    {
        "content": "<p>Hmm. So turn this lint into a query essentially?</p>",
        "id": 133810456,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536769786
    },
    {
        "content": "<p>yeah</p>",
        "id": 133810523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769812
    },
    {
        "content": "<p>it doesn't have to actually be a query</p>",
        "id": 133810529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769823
    },
    {
        "content": "<p>it can just be a fn that <code>mir_borrowck</code> calls</p>",
        "id": 133810535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769826
    },
    {
        "content": "<p>Right</p>",
        "id": 133810538,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536769833
    },
    {
        "content": "<p>But it also needs to run from the old borrow checker right?</p>",
        "id": 133810557,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536769860
    },
    {
        "content": "<p>no</p>",
        "id": 133810595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769896
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 133810601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769900
    },
    {
        "content": "<p>I mean, we always invoke the MIR borrow check query</p>",
        "id": 133810605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769904
    },
    {
        "content": "<p>sometimes it does nothing</p>",
        "id": 133810608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769906
    },
    {
        "content": "<p>at least I think this is true</p>",
        "id": 133810615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769913
    },
    {
        "content": "<p>one second</p>",
        "id": 133810616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769915
    },
    {
        "content": "<p>Even without <code>-Zborrowck=mir</code>?</p>",
        "id": 133810661,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536769928
    },
    {
        "content": "<p>right, we check that <a href=\"https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src/librustc_mir/borrow_check/mod.rs#L87\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/6810f5286b6b91daab06fc3dccb27d8c46f14349/src/librustc_mir/borrow_check/mod.rs#L87\">right here</a></p>",
        "id": 133810673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769940
    },
    {
        "content": "<p>so we could just invoke the lint before that :)</p>",
        "id": 133810679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769948
    },
    {
        "content": "<p>Oh alright</p>",
        "id": 133810690,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536769958
    },
    {
        "content": "<p>one problem (maybe?) is that you'll get these lint messages before borrowck</p>",
        "id": 133810691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769958
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 133810695,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536769962
    },
    {
        "content": "<p>you can rejigger to run in whatever order...</p>",
        "id": 133810699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536769967
    },
    {
        "content": "<p>Are we going to want additional \"mir lints\" in the future?</p>",
        "id": 133810717,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536769990
    },
    {
        "content": "<p>probably?</p>",
        "id": 133810725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770001
    },
    {
        "content": "<p>I can think of a few ...</p>",
        "id": 133810733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770008
    },
    {
        "content": "<p>Would it be worth adding a <code>MirLint</code> trait in addition to our <code>EarlyLint</code> and <code>LateLint</code>?</p>",
        "id": 133810741,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770021
    },
    {
        "content": "<p>I think there's an open issue about <code>Copy</code>ing large types... that's probably a good candidate for a mir lint too</p>",
        "id": 133810793,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770047
    },
    {
        "content": "<p>that's the one I was thinking of. <span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> has a sort of working version of it, even</p>",
        "id": 133810828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770092
    },
    {
        "content": "<blockquote>\n<p>Would it be worth adding a <code>MirLint</code> trait in addition to our <code>EarlyLint</code> and <code>LateLint</code>?</p>\n</blockquote>\n<p>I... maybe? I mean it's just a function that takes a MIR, basically?</p>",
        "id": 133810847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770110
    },
    {
        "content": "<p>I'm not a big fan of the current \"register lint\" system because it's shared mutable state</p>",
        "id": 133810857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770129
    },
    {
        "content": "<p>bad mojo</p>",
        "id": 133810861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770131
    },
    {
        "content": "<p>I think I'd rather we just invoke the lints by hand as we add them</p>",
        "id": 133810870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770137
    },
    {
        "content": "<p>Yeah, I was thinking more about the registration infrastructure around the existing lints system</p>",
        "id": 133810871,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770139
    },
    {
        "content": "<p>Ah ok :)</p>",
        "id": 133810874,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770141
    },
    {
        "content": "<p>I guess I don't have a strong opinion</p>",
        "id": 133810882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770155
    },
    {
        "content": "<p>but I think the lint infrastructure has to be changed to really fit the query model</p>",
        "id": 133810884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770161
    },
    {
        "content": "<p>I might have that branch laying around in my github</p>",
        "id": 133810940,
        "sender_full_name": "qmx",
        "timestamp": 1536770188
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> had the idea of having people patch the query providers to insert themselves</p>",
        "id": 133810945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770201
    },
    {
        "content": "<p>so there'd be like a <code>mir_lint</code> query</p>",
        "id": 133810949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770205
    },
    {
        "content": "<p>by default, it does nothing</p>",
        "id": 133810963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770217
    },
    {
        "content": "<p>to add a <code>mir_lint</code>, you overwrite the provider with our own, and it invokes what was previously there somehow</p>",
        "id": 133810975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770232
    },
    {
        "content": "<p>not sure how that should work though</p>",
        "id": 133810979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770239
    },
    {
        "content": "<p>maybe it wants to be another kind of provider, a sort of \"multi-provider\"</p>",
        "id": 133810988,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770249
    },
    {
        "content": "<p>(I think I prefer that idea)</p>",
        "id": 133810992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770259
    },
    {
        "content": "<p>Could just be a helper query that demands lints for every item in the crate. Then we'd get caching from the query system and not rerun lints that don't need to be</p>",
        "id": 133811108,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770363
    },
    {
        "content": "<p>We'd have to cache the lint output though which I think we don't currently do</p>",
        "id": 133811121,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770380
    },
    {
        "content": "<blockquote>\n<p>Could just be a helper query that demands lints for every item in the crate. Then we'd get caching from the query system and not rerun lints that don't need to be</p>\n</blockquote>\n<p>the point is, how do you know what the set of lints to run is</p>",
        "id": 133811192,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770413
    },
    {
        "content": "<p>if we just want a non-extensible set, seems fine, but we also need a way to support things like clippy</p>",
        "id": 133811197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770426
    },
    {
        "content": "<blockquote>\n<p>We'd have to cache the lint output though which I think we don't currently do</p>\n</blockquote>\n<p>we do</p>",
        "id": 133811203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770431
    },
    {
        "content": "<p>at least, I belive we do</p>",
        "id": 133811205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770441
    },
    {
        "content": "<p>anyway, that is the basic idea, regardless</p>",
        "id": 133811211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770447
    },
    {
        "content": "<p>Oh yes, I see</p>",
        "id": 133811214,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770450
    },
    {
        "content": "<p>I don't really know anything about Clippy...</p>",
        "id": 133811267,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770521
    },
    {
        "content": "<p>Regardless, it sounds like the right thing to do for now is to just call the function directly from <code>mir_borrowck()</code></p>",
        "id": 133811320,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770537
    },
    {
        "content": "<p>That certainly resolves my issue.</p>",
        "id": 133811329,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770550
    },
    {
        "content": "<blockquote>\n<p>to add a <code>mir_lint</code>, you overwrite the provider with our own, and it invokes what was previously there somehow</p>\n</blockquote>\n<p>The way providers work today it's just a struct of function points so that would be fairly easy to do -- we'd just want the default to be an empty function for that provider instead of a function that panics (like today)</p>",
        "id": 133811363,
        "sender_full_name": "simulacrum",
        "timestamp": 1536770591
    },
    {
        "content": "<p>Should I move the function out of <code>librustc_lints</code> then and into <code>librustc_mir::borrow_check</code>or leave it where it is?</p>",
        "id": 133811369,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770606
    },
    {
        "content": "<blockquote>\n<p>The way providers work today it's just a struct of function points so that would be fairly easy to do -- we'd just want the default to be an empty function for that provider instead of a function that panics (like today)</p>\n</blockquote>\n<p>it's not that easy. You have to keep the old pointer.</p>",
        "id": 133811435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770658
    },
    {
        "content": "<p>this is why I would rather have a \"multi-provider\" opton</p>",
        "id": 133811441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770666
    },
    {
        "content": "<p>where the struct itself has a <code>Vec</code> or something</p>",
        "id": 133811444,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770671
    },
    {
        "content": "<p>it also feels more declarative</p>",
        "id": 133811448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770679
    },
    {
        "content": "<p>Is Clippy interested in running the built-in lints too?</p>",
        "id": 133811452,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770685
    },
    {
        "content": "<p>(one question is whether we want to hash this set, too, we've not really .. figured out how that works with incremental)</p>",
        "id": 133811459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770696
    },
    {
        "content": "<p>You could also have a query for <code>additional_lints()</code> and then <code>mir_lint()</code> just unions the built-in ones with anything returned from <code>additional_lints()</code>. rustc would return an empty set for <code>additional_lints()</code> but Clippy would return their lints.</p>",
        "id": 133811532,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770769
    },
    {
        "content": "<p>what kind of value is that?</p>",
        "id": 133811587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770858
    },
    {
        "content": "<p>how do we hash it?</p>",
        "id": 133811588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770860
    },
    {
        "content": "<p>it sounds like you would be returning fn ptrs or trait objects</p>",
        "id": 133811642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770890
    },
    {
        "content": "<p>... we'd have to work that out</p>",
        "id": 133811645,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770898
    },
    {
        "content": "<p>this is why I was pushing it into the providers, which is where fn poitners currently live</p>",
        "id": 133811650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770907
    },
    {
        "content": "<p>it doesn't exactly dodge the question</p>",
        "id": 133811652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770911
    },
    {
        "content": "<p>but it sort of does</p>",
        "id": 133811656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770916
    },
    {
        "content": "<p>because we can say that the \"provider setup\" routine</p>",
        "id": 133811661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770931
    },
    {
        "content": "<p>is kind of \"hashed\" somehow (e.g., with the names + versions of the plugins we run)</p>",
        "id": 133811666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770941
    },
    {
        "content": "<p>You could always have a tuple of <code>(metadata id, fn ptr)</code> and just hash the metadata</p>",
        "id": 133811667,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770941
    },
    {
        "content": "<p>yes, you could also do that</p>",
        "id": 133811681,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770967
    },
    {
        "content": "<p>personally, I'd rather we not pass around random trait objects</p>",
        "id": 133811684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770977
    },
    {
        "content": "<p>That's fair</p>",
        "id": 133811687,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536770982
    },
    {
        "content": "<p>(though I guess fn ptrs might be ok)</p>",
        "id": 133811690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770989
    },
    {
        "content": "<p>it just feels cleaner to push that into a setup phase</p>",
        "id": 133811692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536770994
    },
    {
        "content": "<p>less room for error</p>",
        "id": 133811695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771001
    },
    {
        "content": "<p>Regardless, I've got my answer for the <code>UnconditionalRecursion</code> lint question :)</p>",
        "id": 133811743,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536771010
    },
    {
        "content": "<p>:)</p>",
        "id": 133811744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771015
    },
    {
        "content": "<p>Should I move that code out of <code>librust_lints</code> since it's not used there anymore or leave it since it is a lint?</p>",
        "id": 133811765,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536771050
    },
    {
        "content": "<p>I think you should move it out, maybe make <code>librustc_mir/lints</code>?</p>",
        "id": 133811799,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771107
    },
    {
        "content": "<p>Not super important I suppose but I don't know what the desired architecture is here</p>",
        "id": 133811800,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536771108
    },
    {
        "content": "<p>yeah, who knows :)</p>",
        "id": 133811804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771115
    },
    {
        "content": "<p>Ok, will do!</p>",
        "id": 133811811,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536771121
    },
    {
        "content": "<p>I'm opinionated but others may also be</p>",
        "id": 133811849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771124
    },
    {
        "content": "<p>but I'd rather not make <code>librustc_mir</code> depend <code>librustc_lints</code></p>",
        "id": 133811865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771153
    },
    {
        "content": "<p>so .. :)</p>",
        "id": 133811867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536771156
    },
    {
        "content": "<p>Good point</p>",
        "id": 133811871,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536771166
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>!</p>",
        "id": 133811877,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536771180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Hm, yeah, but in theory you're only going to register providers once so you could stash it in a static oncecell (not great though)</p>",
        "id": 133838445,
        "sender_full_name": "simulacrum",
        "timestamp": 1536780375
    },
    {
        "content": "<p>seems messier than supporting multi-providers or something</p>",
        "id": 133839043,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536781144
    },
    {
        "content": "<p>Sure, yeah, I agree -- was just saying that if we want to avoid overhauling that (it feels like a somewhat non trivial change) there is a way</p>",
        "id": 133839083,
        "sender_full_name": "simulacrum",
        "timestamp": 1536781185
    },
    {
        "content": "<p>yes, ok. I actually think it'd be a fairly small change but I may be overlooking stuff</p>",
        "id": 133839134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536781207
    },
    {
        "content": "<p>I bet <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has a better idea anyway :)</p>",
        "id": 133839152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536781228
    },
    {
        "content": "<p>they're usually 2 steps ahead  on this sort of thing</p>",
        "id": 133839158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536781235
    },
    {
        "content": "<p>well the query stuff is macros all the way down last I looked which makes me think individual changes could be quite painful</p>",
        "id": 133839236,
        "sender_full_name": "simulacrum",
        "timestamp": 1536781333
    },
    {
        "content": "<p>yeah, it is macros all the way down...</p>",
        "id": 133839251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536781377
    },
    {
        "content": "<p>/me shrugs</p>",
        "id": 133839258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536781383
    },
    {
        "content": "<p>/me shudders</p>",
        "id": 133839263,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536781392
    },
    {
        "content": "<p>I've been wondering about trying to factor it out into a crate. It's hard to do</p>",
        "id": 133839265,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536781395
    },
    {
        "content": "<p>I think the main blocker there is that it is used by rustc itself and uses types defined in it (e.g., DefId)</p>",
        "id": 133839356,
        "sender_full_name": "simulacrum",
        "timestamp": 1536781487
    },
    {
        "content": "<p>I think moving the HIR declarations into a crate that librustc depends on might help but not sure</p>",
        "id": 133839378,
        "sender_full_name": "simulacrum",
        "timestamp": 1536781509
    },
    {
        "content": "<p>Generally I think the query providers could use a refactor to be less downwardly structured but not sure</p>",
        "id": 133839400,
        "sender_full_name": "simulacrum",
        "timestamp": 1536781542
    },
    {
        "content": "<p>sorry, I meant something more drastic, like a <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> crate :)</p>",
        "id": 133839477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536781624
    },
    {
        "content": "<p>but it is related; it'd be nice, for example, to have the set of queries be dynamically extensible</p>",
        "id": 133839491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536781638
    },
    {
        "content": "<p>Well, yeah - I meant that even decoupling inside the compiler is hard today</p>",
        "id": 133839499,
        "sender_full_name": "simulacrum",
        "timestamp": 1536781648
    },
    {
        "content": "<p>Much less moving out to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> :)</p>",
        "id": 133839503,
        "sender_full_name": "simulacrum",
        "timestamp": 1536781657
    },
    {
        "content": "<p>:)</p>",
        "id": 133839594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536781773
    },
    {
        "content": "<p>uhhh this is a long discussion</p>",
        "id": 133841910,
        "sender_full_name": "eddyb",
        "timestamp": 1536784299
    },
    {
        "content": "<p>please do not complicate providers</p>",
        "id": 133841917,
        "sender_full_name": "eddyb",
        "timestamp": 1536784319
    },
    {
        "content": "<p>IMO hardwired lints should be implemented in the place where they have all the information they need. this is partly why we moved to the \"lint scopes\" approach where you don't need the messy \"lint runner\" at all</p>",
        "id": 133841993,
        "sender_full_name": "eddyb",
        "timestamp": 1536784389
    },
    {
        "content": "<p>so we don't really need any queries for these</p>",
        "id": 133842002,
        "sender_full_name": "eddyb",
        "timestamp": 1536784404
    },
    {
        "content": "<p>just move the code to rustc_mir</p>",
        "id": 133842005,
        "sender_full_name": "eddyb",
        "timestamp": 1536784412
    },
    {
        "content": "<p>making them hookable is interesting but I had a different idea than <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> seems to have discussed - or maybe I missed a part of the discussion</p>",
        "id": 133842066,
        "sender_full_name": "eddyb",
        "timestamp": 1536784466
    },
    {
        "content": "<p>that is, I imagined one of the things we could do is read-only hooks for queries. but this is not enough for unconditional recursion (really excited that's moving to MIR :D), unless we get rid of stealing</p>",
        "id": 133842111,
        "sender_full_name": "eddyb",
        "timestamp": 1536784555
    },
    {
        "content": "<p>or, wait, is unconditional recursion a local analysis or not?</p>",
        "id": 133842159,
        "sender_full_name": "eddyb",
        "timestamp": 1536784589
    },
    {
        "content": "<p>if it's local then it doesn't need anything special</p>",
        "id": 133842166,
        "sender_full_name": "eddyb",
        "timestamp": 1536784607
    },
    {
        "content": "<p>anyway we have to be really careful with the design of any sort of additional hooks, so they don't introduce performance or architectural overhead</p>",
        "id": 133842217,
        "sender_full_name": "eddyb",
        "timestamp": 1536784672
    },
    {
        "content": "<p>(e.g. incremental interactions wrt diagnostics produced by hooks)</p>",
        "id": 133842291,
        "sender_full_name": "eddyb",
        "timestamp": 1536784722
    },
    {
        "content": "<p>I want open-world queries but it's an even harder problem. we'll eventually need something for incremental parsing and macro expansion</p>",
        "id": 133842394,
        "sender_full_name": "eddyb",
        "timestamp": 1536784829
    },
    {
        "content": "<p>it's almost an ECS problem, where open-world implementations typically add some overhead</p>",
        "id": 133842425,
        "sender_full_name": "eddyb",
        "timestamp": 1536784870
    },
    {
        "content": "<p>what we need is similar to dynamic linking support for TLS</p>",
        "id": 133842458,
        "sender_full_name": "eddyb",
        "timestamp": 1536784919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> By local do you mean \"only looks at the function body\"?</p>",
        "id": 133842525,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536784968
    },
    {
        "content": "<p>where each crate can add their own queries and they're \"concatenated\" in the engine, with statics adjusted to indicate offsets</p>",
        "id": 133842528,
        "sender_full_name": "eddyb",
        "timestamp": 1536784972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> yeah</p>",
        "id": 133842532,
        "sender_full_name": "eddyb",
        "timestamp": 1536784981
    },
    {
        "content": "<p>Yeah, it's local</p>",
        "id": 133842536,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536784985
    },
    {
        "content": "<p>then we should be able to run it post-MIR-building</p>",
        "id": 133842550,
        "sender_full_name": "eddyb",
        "timestamp": 1536785008
    },
    {
        "content": "<p>or somewhere in there</p>",
        "id": 133842558,
        "sender_full_name": "eddyb",
        "timestamp": 1536785018
    },
    {
        "content": "<p>all it needs is \"call dominates return\" and <code>Instance</code>, really</p>",
        "id": 133842621,
        "sender_full_name": "eddyb",
        "timestamp": 1536785067
    },
    {
        "content": "<p>so, domtree after building MIR, should be a tiny lint</p>",
        "id": 133842786,
        "sender_full_name": "eddyb",
        "timestamp": 1536785278
    },
    {
        "content": "<p>(sorry, I was on my phone, and I'm a bit sleepy)</p>",
        "id": 133842843,
        "sender_full_name": "eddyb",
        "timestamp": 1536785310
    },
    {
        "content": "<p>I want a redesign of <code>rustc</code> but I'm worried that if we don't organize properly we'll be left with a bunch of suboptimal ideas, and even worse, implement some of them</p>",
        "id": 133842872,
        "sender_full_name": "eddyb",
        "timestamp": 1536785353
    },
    {
        "content": "<blockquote>\n<p>just move the code to rustc_mir</p>\n</blockquote>\n<p>to be clear <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, this is precisely what I advised <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> to do...</p>",
        "id": 133843298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536785802
    },
    {
        "content": "<p>the rest was just random, non-actionable chatter</p>",
        "id": 133843306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536785813
    },
    {
        "content": "<p>no need to panic :)</p>",
        "id": 133843321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536785840
    },
    {
        "content": "<p>heh</p>",
        "id": 133843322,
        "sender_full_name": "eddyb",
        "timestamp": 1536785842
    },
    {
        "content": "<p>and that's my current plan :)</p>",
        "id": 133843324,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536785849
    },
    {
        "content": "<p>since I got pinged and the conversation was long, I wanted to state my position</p>",
        "id": 133843334,
        "sender_full_name": "eddyb",
        "timestamp": 1536785866
    },
    {
        "content": "<p>makes sense</p>",
        "id": 133843339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536785879
    },
    {
        "content": "<p>I figured you'd have a plan, I'm not sure I fully understood it, but it's not imp't right now :)</p>",
        "id": 133843385,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536785891
    },
    {
        "content": "<p>I never have a plan</p>",
        "id": 133843454,
        "sender_full_name": "eddyb",
        "timestamp": 1536785969
    },
    {
        "content": "<p>only a loose set of ideas</p>",
        "id": 133843461,
        "sender_full_name": "eddyb",
        "timestamp": 1536785975
    },
    {
        "content": "<p>like <a href=\"https://github.com/rust-lang/rust/issues/53590\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53590\">https://github.com/rust-lang/rust/issues/53590</a></p>",
        "id": 133843549,
        "sender_full_name": "eddyb",
        "timestamp": 1536786027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> That looks really interesting!</p>",
        "id": 133843776,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536786276
    },
    {
        "content": "<p>the hard part is having enough time to experiment with all of the ideas</p>",
        "id": 133843784,
        "sender_full_name": "eddyb",
        "timestamp": 1536786291
    },
    {
        "content": "<p>Yeah</p>",
        "id": 133843800,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536786318
    },
    {
        "content": "<p>Completely off topic: Is there a list of \"desired\" MIR optimization passes that have yet to be implemented?</p>",
        "id": 133843832,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536786361
    },
    {
        "content": "<p>I've seen comments about such things but nothing concrete</p>",
        "id": 133843880,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536786373
    },
    {
        "content": "<p>And it sounds like something I'd love to work on :)</p>",
        "id": 133843891,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536786396
    },
    {
        "content": "<p>I have a few unfinished passes</p>",
        "id": 133843916,
        "sender_full_name": "eddyb",
        "timestamp": 1536786418
    },
    {
        "content": "<p>partly blocked on an unfinished branch to redo debuginfo wrt MIR</p>",
        "id": 133843928,
        "sender_full_name": "eddyb",
        "timestamp": 1536786431
    },
    {
        "content": "<p>I almost forgot about all of that stuff <em>shudder</em></p>",
        "id": 133843937,
        "sender_full_name": "eddyb",
        "timestamp": 1536786443
    },
    {
        "content": "<p>but there's lint(-like) stuff that we could probably move to the MIR</p>",
        "id": 133844064,
        "sender_full_name": "eddyb",
        "timestamp": 1536786549
    },
    {
        "content": "<p>like some unreachable code warnings might belong there instead of typeck?</p>",
        "id": 133844074,
        "sender_full_name": "eddyb",
        "timestamp": 1536786565
    },
    {
        "content": "<p>OH OH</p>",
        "id": 133844079,
        "sender_full_name": "eddyb",
        "timestamp": 1536786569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <code>liveness</code></p>",
        "id": 133844086,
        "sender_full_name": "eddyb",
        "timestamp": 1536786578
    },
    {
        "content": "<p>(unless the MIR borrowck already warns about unused assignments and stuff)</p>",
        "id": 133844101,
        "sender_full_name": "eddyb",
        "timestamp": 1536786599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Is that <a href=\"https://github.com/rust-lang/rust/issues/51003\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/51003\">https://github.com/rust-lang/rust/issues/51003</a> ?</p>",
        "id": 133844151,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536786611
    },
    {
        "content": "<p>yupp</p>",
        "id": 133844157,
        "sender_full_name": "eddyb",
        "timestamp": 1536786619
    },
    {
        "content": "<p>Interesting...</p>",
        "id": 133844163,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536786624
    },
    {
        "content": "<p>I'm not sure how good the <code>rustc_mir::util::liveness</code> thing is</p>",
        "id": 133844189,
        "sender_full_name": "eddyb",
        "timestamp": 1536786649
    },
    {
        "content": "<p>like, it's potentially too specific to the generator state transform to be generally usable</p>",
        "id": 133844208,
        "sender_full_name": "eddyb",
        "timestamp": 1536786668
    },
    {
        "content": "<p>but if it <em>is</em> usable, then it should make the analysis pretty straight-forward</p>",
        "id": 133844220,
        "sender_full_name": "eddyb",
        "timestamp": 1536786685
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 133844226,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536786694
    },
    {
        "content": "<p>compared to the huge mess of HIR-matching code that the old <code>liveness</code> pass is</p>",
        "id": 133844229,
        "sender_full_name": "eddyb",
        "timestamp": 1536786702
    },
    {
        "content": "<p>it's reasonable general, but it doesn't do some of the stuff the old analysis did</p>",
        "id": 133844284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536786725
    },
    {
        "content": "<p>I'll take a look at that after I finish porting <code>UnconditionalRecursion</code></p>",
        "id": 133844291,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536786729
    },
    {
        "content": "<p>e.g., unused assignment</p>",
        "id": 133844301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536786738
    },
    {
        "content": "<p>well, I forget, maybe you can get that particular thing</p>",
        "id": 133844310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536786748
    },
    {
        "content": "<p>but I remember there were some extra variations on liveness</p>",
        "id": 133844317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536786755
    },
    {
        "content": "<p>the dataflow stuff may or may not be relevant</p>",
        "id": 133844346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536786794
    },
    {
        "content": "<p>it only does fwd dataflow</p>",
        "id": 133844349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536786798
    },
    {
        "content": "<p>Ok, so this is going pretty well. I moved the code around and I've got it being called from the MIR borrow check entry point as discussed. That's all working but the <code>src/test/ui/lints/lint-unconditional-recursion.rs</code> test is failing in a few cases. It looks like the issue is around calling trait methods. For example:</p>\n<div class=\"codehilite\"><pre><span></span>trait Foo {\n    fn bar(&amp;self) {\n        self.bar()\n    }\n}\n\nimpl Foo for i32 {\n    fn bar(&amp;self) { //~ ERROR function cannot return without recursing\n        0.bar()\n    }\n}\n</pre></div>\n\n\n<p>Isn't triggering the error.</p>",
        "id": 133892739,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536852082
    },
    {
        "content": "<p>Right now, the lint is just checking for <code>TerminatorKind::Call(fn)</code> where <code>fn</code>'s <code>DefId</code> <code>==</code> our function's <code>DefId</code>. Which obviously doesn't work in this case because the function we're calling is <code>Foo::bar</code> but our function is the impl's function</p>",
        "id": 133892866,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536852153
    },
    {
        "content": "<p>I think I need to actually calculate the real method we're calling on the trait. Which, I think, is what the <code>rustc::ty::instance::Instance::resolve()</code> function does, right?</p>",
        "id": 133892912,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536852216
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/instance/struct.Instance.html#method.resolve\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/instance/struct.Instance.html#method.resolve\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/instance/struct.Instance.html#method.resolve</a></p>",
        "id": 133892913,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536852219
    },
    {
        "content": "<p>yeah! doesn't the old code already use <code>Instance</code>? or is it resolving things manually?</p>",
        "id": 133901247,
        "sender_full_name": "eddyb",
        "timestamp": 1536860946
    },
    {
        "content": "<p>No, it re-invents the wheel I think</p>",
        "id": 133901366,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861056
    },
    {
        "content": "<p>/me looking</p>",
        "id": 133901371,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861061
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_lint/builtin.rs#L998\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_lint/builtin.rs#L998\">https://github.com/rust-lang/rust/blob/master/src/librustc_lint/builtin.rs#L998</a></p>",
        "id": 133901403,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861103
    },
    {
        "content": "<p><code>traits::SelectionContext::new</code> oh jeez indeed it does</p>",
        "id": 133901469,
        "sender_full_name": "eddyb",
        "timestamp": 1536861146
    },
    {
        "content": "<p>Should I use that instead of <code>Instance</code>?</p>",
        "id": 133901588,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861277
    },
    {
        "content": "<p>(not quite sure what I'm looking at)</p>",
        "id": 133901592,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861284
    },
    {
        "content": "<p>you want <code>Instance</code></p>",
        "id": 133901599,
        "sender_full_name": "eddyb",
        "timestamp": 1536861304
    },
    {
        "content": "<p>Ok :)</p>",
        "id": 133901691,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861377
    },
    {
        "content": "<p>(btw, feel free to ping me about compiler minutia - oh and discord works better, notification-wise, I think)</p>",
        "id": 133901716,
        "sender_full_name": "eddyb",
        "timestamp": 1536861414
    },
    {
        "content": "<p>I also looked at <code>tcx.subst_and_normalize_erasing_regions()</code> but I couldn't really figure out what that did <span class=\"emoji emoji-1f606\" title=\"laughing\">:laughing:</span></p>",
        "id": 133901753,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861454
    },
    {
        "content": "<p>Absolutely. Thanks <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>!</p>",
        "id": 133901770,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> (are you rewriting it to use <code>Instance</code>?)</p>",
        "id": 133902068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861719
    },
    {
        "content": "<p>I forgot about these messages, sorry, meant to follow up with you</p>",
        "id": 133902118,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861731
    },
    {
        "content": "<p>Yeah, that's what I was going to try to do</p>",
        "id": 133902125,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861741
    },
    {
        "content": "<p>I can also explain what <code>subst_and_normalize_erasing_regions</code> does if you want :)</p>",
        "id": 133902127,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861742
    },
    {
        "content": "<p>ok</p>",
        "id": 133902131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536861746
    },
    {
        "content": "<p>I was trying to avoid porting those helper functions</p>",
        "id": 133902144,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861764
    },
    {
        "content": "<p>In particular, I wasn't sure how to get a <code>NodeId</code> for the call expression from the <code>Mir</code></p>",
        "id": 133902190,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861817
    },
    {
        "content": "<blockquote>\n<p>I can also explain what <code>subst_and_normalize_erasing_regions</code> does if you want :)</p>\n</blockquote>\n<p>Absolutely! I'm kind of just curious</p>",
        "id": 133902264,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536861850
    },
    {
        "content": "<blockquote>\n<p>In particular, I wasn't sure how to get a <code>NodeId</code> for the call expression from the <code>Mir</code></p>\n</blockquote>\n<p>why do you need that?</p>",
        "id": 133902488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862031
    },
    {
        "content": "<blockquote>\n<p>Absolutely! I'm kind of just curious</p>\n</blockquote>\n<p>well the \"subst\" part means replace the generic types with their values</p>",
        "id": 133902505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862049
    },
    {
        "content": "<p>the \"normalize\" part means to look for associated types that may now be resolveable</p>",
        "id": 133902511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862060
    },
    {
        "content": "<p>e.g., if you had a generic type like <code>Vec&lt;&lt;T as Iterator&gt;::Item&gt;</code></p>",
        "id": 133902519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862074
    },
    {
        "content": "<p>and you replace <code>T</code> with <code>vec::Iter&lt;'x, u32&gt;</code> or something</p>",
        "id": 133902561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862084
    },
    {
        "content": "<p>then you can normalize <code>Vec&lt;&lt;vec::Iter&lt;'x, u32&gt; as Iterator&gt;::Item&gt;</code> to <code>Vec&lt;&amp;'x u32&gt;</code></p>",
        "id": 133902571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862101
    },
    {
        "content": "<p>the \"erasing regions\" part takes <em>that</em> result and replaces all the (free) regions with a special <code>'erased</code>; we do this a lot when generating code or in some phases of the compiler where we don't care about the regions</p>",
        "id": 133902587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862125
    },
    {
        "content": "<p>so you get <code>Vec&lt;&amp;'erased u32&gt;</code></p>",
        "id": 133902592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862132
    },
    {
        "content": "<p>or just <code>Vec&lt;&amp;u32&gt;</code>, if you prefer</p>",
        "id": 133902593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862135
    },
    {
        "content": "<p>(note: \"region\" is a synonym with \"lifetime\")</p>",
        "id": 133902606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862145
    },
    {
        "content": "<p>The helper functions in the lint right now are all expr based and they need the <code>NodeId</code> of the call expression. For example: <a href=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_lint/builtin.rs#L1011\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_lint/builtin.rs#L1011\">https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_lint/builtin.rs#L1011</a></p>",
        "id": 133902617,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536862151
    },
    {
        "content": "<p>oh, in the lint, I see</p>",
        "id": 133902721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862247
    },
    {
        "content": "<p>yeah ugh</p>",
        "id": 133902723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862250
    },
    {
        "content": "<p>:)</p>",
        "id": 133902726,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862252
    },
    {
        "content": "<p>these should be expressable in MIR but I guess they have to be rewritten from scratch</p>",
        "id": 133902745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862270
    },
    {
        "content": "<blockquote>\n<p>the \"erasing regions\" part takes <em>that</em> result and replaces all the (free) regions with a special <code>'erased</code>; we do this a lot when generating code or in some phases of the compiler where we don't care about the regions</p>\n</blockquote>\n<p>And this is because after we've done borrow checking, we know the lifetimes are valid and since you can't specialize on lifetimes, they have no effect to the rest of the compiler?</p>",
        "id": 133902751,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536862273
    },
    {
        "content": "<blockquote>\n<p>these should be expressable in MIR but I guess they have to be rewritten from scratch</p>\n</blockquote>\n<p>Yeah. In my original version that used <code>optimized_mir()</code> this seemed to \"just work\". Ie, this test was passing. I guess optimized mir has already selected the correct functions for trait methods calls?</p>",
        "id": 133902841,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536862339
    },
    {
        "content": "<blockquote>\n<p>subst_and_normalize_erasing_regions()</p>\n</blockquote>\n<p>So I guess my confusion was the <code>T</code> parameter. I see there's a bound on that to make it work but I just wasn't sure what to pass there. I've got a <code>DefId</code> for the trait method I'm calling. I've got an <code>Operand</code> for the call. Also a <code>Const</code> that wraps the function. I think all of those could be passed but I wasn't sure that what I'd get back is what I want</p>",
        "id": 133902984,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536862486
    },
    {
        "content": "<p>Is there a difference between <code>Instance::resolve()</code> and <code>subst_and_normalize_erasing_regions&lt;DefId&gt;()</code>?</p>",
        "id": 133903050,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536862559
    },
    {
        "content": "<blockquote>\n<p>Yeah. In my original version that used <code>optimized_mir()</code> this seemed to \"just work\". Ie, this test was passing. I guess optimized mir has already selected the correct functions for trait methods calls?</p>\n</blockquote>\n<p>I don't really understand this at all</p>",
        "id": 133903269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862739
    },
    {
        "content": "<p>there is no difference between optimized-mir and non-optimized MIR in this respect</p>",
        "id": 133903292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862752
    },
    {
        "content": "<p>Hmm....</p>",
        "id": 133903318,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536862796
    },
    {
        "content": "<blockquote>\n<p>Is there a difference between <code>Instance::resolve()</code> and <code>subst_and_normalize_erasing_regions&lt;DefId&gt;()</code>?</p>\n</blockquote>\n<p>let me go read the source; in my head they are not particularly related to one another :)</p>",
        "id": 133903321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862799
    },
    {
        "content": "<p>That was a few days ago. Perhaps I'm just misremembering which tests were broken?</p>",
        "id": 133903383,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536862818
    },
    {
        "content": "<p>It's not really important</p>",
        "id": 133903393,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536862826
    },
    {
        "content": "<p>/me vaguely remembers fiddling with <code>Instance::resolve()</code></p>",
        "id": 133903403,
        "sender_full_name": "qmx",
        "timestamp": 1536862842
    },
    {
        "content": "<p>I guess they are related, in that <code>subst_and_normalize_erasing_regions</code> is sort of maybe a building block for <code>Instance::resolve</code></p>",
        "id": 133903431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862878
    },
    {
        "content": "<p>in any case, the MIR just records the trait + types</p>",
        "id": 133903436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862886
    },
    {
        "content": "<p>(when you are invoking a trait method)</p>",
        "id": 133903443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862895
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Is there a difference between <code>Instance::resolve()</code> and <code>subst_and_normalize_erasing_regions&lt;DefId&gt;()</code>?</p>\n</blockquote>\n<p>let me go read the source; in my head they are not particularly related to one another :)</p>\n</blockquote>\n<p>They only seemed related to me in that they have, what I would expect, is the right function signature for what I want. They both take a <code>DefId</code>, <code>ParamEnv</code>, and <code>Substs</code> which is what I was thinking you'd need to resolve the trait method call</p>",
        "id": 133903449,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536862903
    },
    {
        "content": "<p>the job of <code>Instance::resolve</code> is to try to match that up with a specific impl or other thing</p>",
        "id": 133903456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> what do you have already? the lint helpers are useless because they're for the AST. what I think you need is to look at <code>TerminatorKind::Call</code> and the type of the function to call from it, if it's <code>ty::FnDef(def_id, substs)</code> you can feed those <code>def_id</code> and <code>substs</code> to <code>Instance::resolve</code></p>",
        "id": 133903508,
        "sender_full_name": "eddyb",
        "timestamp": 1536862927
    },
    {
        "content": "<p>ah well <code>subst_and_normalize_erasing_regions</code> would not normally be invoked on a <code>DefId</code></p>",
        "id": 133903513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862934
    },
    {
        "content": "<p>that is a no-op</p>",
        "id": 133903518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862936
    },
    {
        "content": "<p>it would be invoked on someting with types in it, usually</p>",
        "id": 133903524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862944
    },
    {
        "content": "<p>looking at the inline code may be helpful</p>",
        "id": 133903538,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862965
    },
    {
        "content": "<p>heh I should've suggested inline</p>",
        "id": 133903547,
        "sender_full_name": "eddyb",
        "timestamp": 1536862975
    },
    {
        "content": "<p>e.g., <a href=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_mir/transform/inline.rs#L96-L111\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/994cdd918589535d705177545bf503cd0c3c5148/src/librustc_mir/transform/inline.rs#L96-L111\">this part</a></p>",
        "id": 133903561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536862985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  Yep, that's what I've got. I should have pushed a branch last night to my repo so I could just link it</p>\n<p>I've got a <code>DefId</code> for the function being called, its <code>Substs</code> and I can get access to the <code>ParamEnv</code> via the <code>tcx.param_env()</code> query</p>",
        "id": 133903569,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536862987
    },
    {
        "content": "<p>note that the param_env is that of the <em>caller</em>, not callee</p>",
        "id": 133903591,
        "sender_full_name": "eddyb",
        "timestamp": 1536863007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh that's wrong</p>",
        "id": 133903608,
        "sender_full_name": "eddyb",
        "timestamp": 1536863028
    },
    {
        "content": "<p>/me opens issue</p>",
        "id": 133903613,
        "sender_full_name": "eddyb",
        "timestamp": 1536863034
    },
    {
        "content": "<p>I want the <code>param_env(fn_being_linted)</code> right?</p>",
        "id": 133903615,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536863036
    },
    {
        "content": "<p>yeah</p>",
        "id": 133903621,
        "sender_full_name": "eddyb",
        "timestamp": 1536863040
    },
    {
        "content": "<p>Ok, cool</p>",
        "id": 133903660,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536863045
    },
    {
        "content": "<p>you'd query it only once and use it later</p>",
        "id": 133903670,
        "sender_full_name": "eddyb",
        "timestamp": 1536863050
    },
    {
        "content": "<p>Gotcha</p>",
        "id": 133903683,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536863062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Oh, that's helpful. Thanks! I thought maybe there was code that did what I wanted in the codegen layer but I couldn't find it</p>",
        "id": 133903739,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536863125
    },
    {
        "content": "<p>it's in <code>rustc_codegen_llvm/mir/block.rs</code></p>",
        "id": 133903746,
        "sender_full_name": "eddyb",
        "timestamp": 1536863140
    },
    {
        "content": "<p>but it's uglier</p>",
        "id": 133903747,
        "sender_full_name": "eddyb",
        "timestamp": 1536863142
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/54193\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54193\">https://github.com/rust-lang/rust/issues/54193</a></p>",
        "id": 133903843,
        "sender_full_name": "eddyb",
        "timestamp": 1536863215
    },
    {
        "content": "<p>make sure you don't make the same mistake the inline code does</p>",
        "id": 133903863,
        "sender_full_name": "eddyb",
        "timestamp": 1536863230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> wait, what's wrong exactly?</p>",
        "id": 133903968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863325
    },
    {
        "content": "<p>/me looks at the inline code again</p>",
        "id": 133903973,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863337
    },
    {
        "content": "<p>I remember there was some ICE, maybe it's related?</p>",
        "id": 133903979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863342
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I have a pattern match that looks just like that right now. I should just call <code>Operand::ty(mir, tcx)</code> instead?</p>",
        "id": 133903996,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536863355
    },
    {
        "content": "<p>I don't see what's wrong about the inline code yet :)</p>",
        "id": 133904122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536863461
    },
    {
        "content": "<p>yeah you should call the method</p>",
        "id": 133904933,
        "sender_full_name": "eddyb",
        "timestamp": 1536864229
    },
    {
        "content": "<p>and change the inline code while you're at it</p>",
        "id": 133904938,
        "sender_full_name": "eddyb",
        "timestamp": 1536864234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I linked an issue</p>",
        "id": 133904942,
        "sender_full_name": "eddyb",
        "timestamp": 1536864240
    },
    {
        "content": "<p>or are you saying the issue isn't clear enough?</p>",
        "id": 133904995,
        "sender_full_name": "eddyb",
        "timestamp": 1536864259
    },
    {
        "content": "<p>oh</p>",
        "id": 133904999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536864265
    },
    {
        "content": "<p>I didn't see that</p>",
        "id": 133905002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536864268
    },
    {
        "content": "<p>I see it now</p>",
        "id": 133905011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536864273
    },
    {
        "content": "<p>so you're saying it is insufficiently general</p>",
        "id": 133905015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536864278
    },
    {
        "content": "<p>but not that it's using the wrong <code>param_env</code> or something</p>",
        "id": 133905021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536864285
    },
    {
        "content": "<p>I thought you meant the latter</p>",
        "id": 133905024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536864290
    },
    {
        "content": "<p>right, it's only a mistake in the sense of missing the more general approach, not incorrectness</p>",
        "id": 133905088,
        "sender_full_name": "eddyb",
        "timestamp": 1536864360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Got it <span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 133905463,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1536864700
    }
]