[
    {
        "content": "<p>both the <code>user_fn</code> frame and the <code>Memory</code> need to be serialized and restored. Currently <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> has implemented a manual scheme, and iirc wanted to check again why <code>RustcSerialize</code> and <code>RustcDeserialize</code> aren't used instead</p>",
        "id": 182189748,
        "sender_full_name": "oli",
        "timestamp": 1575044894
    },
    {
        "content": "<p>So, I believe I experimented with this some time ago (you may have suggested this formerly), and basically the issue was that a) it pulled in memory from the start fn and main's params</p>",
        "id": 182190122,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575045289
    },
    {
        "content": "<p>b) the <code>dead_alloc_map</code> isn't something that we really want to serialise, I think</p>",
        "id": 182190135,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575045311
    },
    {
        "content": "<p>you need the <code>dead_alloc_map</code> for a few operations. If it's not there you may run into trouble when doing things to dangling pointers</p>",
        "id": 182190229,
        "sender_full_name": "oli",
        "timestamp": 1575045392
    },
    {
        "content": "<p>and trust me, users will do evil things with a REPL :D</p>",
        "id": 182190239,
        "sender_full_name": "oli",
        "timestamp": 1575045401
    },
    {
        "content": "<p>about the wasted memory. Essentially the way you serialize is to serialize the frame of the closure, write down all alloc ids, serialize the corresponding <code>Alloations</code> for the alloc ids, again writing down all new alloc ids encountered?</p>",
        "id": 182190402,
        "sender_full_name": "oli",
        "timestamp": 1575045585
    },
    {
        "content": "<p>hmm I see</p>",
        "id": 182193210,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575048486
    },
    {
        "content": "<p>I will look into this for sure</p>",
        "id": 182193239,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575048522
    },
    {
        "content": "<p>I don't think it affects the first couple of PRs</p>",
        "id": 182193242,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575048532
    },
    {
        "content": "<p>and a <code>RustcSeriaze/Deserialize</code> implementation for <code>Memory</code> should not be too hard. I'm sure I implemented it before and reverted it.</p>",
        "id": 182193262,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575048559
    },
    {
        "content": "<p>will do a bit more experimentation before opening the MIR PR, of course</p>",
        "id": 182193267,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575048569
    },
    {
        "content": "<p>I think you're right in that a manual deserialization works better, because it can skip everything that is not needed</p>",
        "id": 182196200,
        "sender_full_name": "oli",
        "timestamp": 1575051633
    },
    {
        "content": "<p>But yea, you'll have to also preserve the dead alloc map entries that are reachable</p>",
        "id": 182196212,
        "sender_full_name": "oli",
        "timestamp": 1575051659
    },
    {
        "content": "<p>okay, so I think we're in agreement there. I'll just make sure the dead alloc map gets serialised now! (I guess my simple test cases didn't catch problems with that, but indeed, someone would find a way to break it heh...)</p>",
        "id": 182196479,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575052003
    },
    {
        "content": "<p>Should the stacked borrow state be serialized too?</p>",
        "id": 182197729,
        "sender_full_name": "bjorn3",
        "timestamp": 1575053621
    },
    {
        "content": "<p>what exactly do you mean <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> ?</p>",
        "id": 182201761,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575058474
    },
    {
        "content": "<p>Stacked borrows is kind of a runtime version of the borrowchecker. To make it work correctly, it's state should be serialized too.</p>",
        "id": 182202434,
        "sender_full_name": "bjorn3",
        "timestamp": 1575059307
    },
    {
        "content": "<p>oh sorry, I parsed your sentence invalidly.</p>",
        "id": 182202663,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575059526
    },
    {
        "content": "<p>it currently is serialised for the miri backend, in fact.</p>",
        "id": 182202672,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575059542
    },
    {
        "content": "<p>it's \"just\" a dynamic correctness check though, as far as I'm aware? so it's not necessary for the Codegen backend.</p>",
        "id": 182202690,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575059576
    },
    {
        "content": "<p>indeed, cg_llvm doesn't implement it either. it requires a lot of dynamic instrumentation (every call and every borrow/deref) to implement it.</p>",
        "id": 182202867,
        "sender_full_name": "bjorn3",
        "timestamp": 1575059768
    },
    {
        "content": "<p>yep, I think this is fine. :-)</p>",
        "id": 182202873,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575059789
    },
    {
        "content": "<p>easy enough to say \"if you want this sort of dynamic correctness checking, just use the miri backend\".</p>",
        "id": 182202886,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575059815
    },
    {
        "content": "<p>yeah, it doesn't make much sense without the other UB checks anyway</p>",
        "id": 182202911,
        "sender_full_name": "bjorn3",
        "timestamp": 1575059870
    },
    {
        "content": "<p>true</p>",
        "id": 182202945,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1575059882
    }
]