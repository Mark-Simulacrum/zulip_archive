[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> just wanted to confirm that you aren't working on this?</p>",
        "id": 177061350,
        "sender_full_name": "davidtwco",
        "timestamp": 1569940616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I gave it a look at decided it was becoming too complicated at the time</p>",
        "id": 177061389,
        "sender_full_name": "centril",
        "timestamp": 1569940648
    },
    {
        "content": "<p>but we can talk if you want about it</p>",
        "id": 177061419,
        "sender_full_name": "centril",
        "timestamp": 1569940659
    },
    {
        "content": "<p>not working on it tho</p>",
        "id": 177061430,
        "sender_full_name": "centril",
        "timestamp": 1569940668
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/pull/64910\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64910\">https://github.com/rust-lang/rust/pull/64910</a> should land first)</p>",
        "id": 177061437,
        "sender_full_name": "centril",
        "timestamp": 1569940678
    },
    {
        "content": "<p>I threw something together locally if you don't mind me working on it.</p>",
        "id": 177061487,
        "sender_full_name": "davidtwco",
        "timestamp": 1569940689
    },
    {
        "content": "<p>oh, already? interesting</p>",
        "id": 177061558,
        "sender_full_name": "centril",
        "timestamp": 1569940745
    },
    {
        "content": "<p>r? me if you want</p>",
        "id": 177061562,
        "sender_full_name": "centril",
        "timestamp": 1569940749
    },
    {
        "content": "<p>Sure.</p>",
        "id": 177061574,
        "sender_full_name": "davidtwco",
        "timestamp": 1569940758
    },
    {
        "content": "<p>Are you just making changes in <code>fn parse_self_param</code>?</p>",
        "id": 177061610,
        "sender_full_name": "centril",
        "timestamp": 1569940798
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <a href=\"https://github.com/rust-lang/rust/pull/64959\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64959\">https://github.com/rust-lang/rust/pull/64959</a></p>",
        "id": 177061698,
        "sender_full_name": "davidtwco",
        "timestamp": 1569940831
    },
    {
        "content": "<p>that was quick :D -- will have a look later tonight</p>",
        "id": 177062041,
        "sender_full_name": "centril",
        "timestamp": 1569941053
    },
    {
        "content": "<p>from the outset it seems a much cleaner approach than the throw-away stuff I had</p>",
        "id": 177062061,
        "sender_full_name": "centril",
        "timestamp": 1569941075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> looking at <code>self: i32</code>... did you consider a more semantic approach with <code>.parse_ty()</code> and then checking whether the type would be applicable as a <code>self: SelfTy</code> parameter?</p>",
        "id": 177062316,
        "sender_full_name": "centril",
        "timestamp": 1569941263
    },
    {
        "content": "<p>I thought about it, but wasn't sure that it made sense for the parser to do that - would just have added a lot of complexity.</p>",
        "id": 177062387,
        "sender_full_name": "davidtwco",
        "timestamp": 1569941290
    },
    {
        "content": "<p>I made the suggestion <code>MaybeIncorrect</code> for cases like that.</p>",
        "id": 177062402,
        "sender_full_name": "davidtwco",
        "timestamp": 1569941303
    },
    {
        "content": "<p>it's OK in the parser in recovery branches if it is reasonably hidden away from main happy-path logic but I think you're right that even so it would be a lot of complexity (you'd need a visitor and such)</p>",
        "id": 177062474,
        "sender_full_name": "centril",
        "timestamp": 1569941361
    },
    {
        "content": "<p>I don't know if it's required for the arbitrary self type to contain <code>Self</code> - could there be some trait implementation on <code>i32</code> that takes a <code>self: i32</code> correctly?</p>",
        "id": 177062481,
        "sender_full_name": "davidtwco",
        "timestamp": 1569941366
    },
    {
        "content": "<p>The stable subset requires <code>Box&lt;Self&gt;</code>, <code>Rc&lt;Self&gt;</code>, <code>Arc&lt;Self&gt;</code>,  <code>Self</code>, <code>&amp;Self</code>, <code>&amp;mut Self</code> and some stuff about <code>Pin</code></p>",
        "id": 177062596,
        "sender_full_name": "centril",
        "timestamp": 1569941423
    },
    {
        "content": "<p>but notably <code>Self</code> need not syntactically occur</p>",
        "id": 177062610,
        "sender_full_name": "centril",
        "timestamp": 1569941433
    },
    {
        "content": "<p>it could be a type alias to the type, iirc</p>",
        "id": 177062621,
        "sender_full_name": "centril",
        "timestamp": 1569941441
    },
    {
        "content": "<p>but as a heuristic it works</p>",
        "id": 177062638,
        "sender_full_name": "centril",
        "timestamp": 1569941455
    },
    {
        "content": "<p>Sure. It's an improvement we could do in a follow-up if we really wanted, I think this is a reasonable improvement to land first.</p>",
        "id": 177062730,
        "sender_full_name": "davidtwco",
        "timestamp": 1569941522
    },
    {
        "content": "<p>One could do something dumber tho: Use a visitor that looks for <code>Path</code> with <code>kw::SelfUpper</code> as the identifier</p>",
        "id": 177062801,
        "sender_full_name": "centril",
        "timestamp": 1569941545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  yeah agreed on that</p>",
        "id": 177062812,
        "sender_full_name": "centril",
        "timestamp": 1569941554
    }
]