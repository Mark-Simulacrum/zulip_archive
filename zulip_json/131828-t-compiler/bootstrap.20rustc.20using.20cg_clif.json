[
    {
        "content": "<p>I tried bootstrapping rustc using cg_clif. I was able to compile rustc using cg_clif. It is now at crate 173/207 of a full bootstrap (compiling rustc using that cg_clif compiled rustc) <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"balloon\" class=\"emoji emoji-1f388\" role=\"img\" title=\"balloon\">:balloon:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 202294172,
        "sender_full_name": "bjorn3",
        "timestamp": 1593427634
    },
    {
        "content": "<p>It took 30min to compile a compiler using stage0 rustc. It took 4m40s to compile a compiler using stage1 rustc. And it has now been busy compiling a compiler using stage2 rustc for at least 40min.</p>",
        "id": 202294450,
        "sender_full_name": "bjorn3",
        "timestamp": 1593427860
    },
    {
        "content": "<p>186/207: rustc_middle</p>",
        "id": 202295544,
        "sender_full_name": "bjorn3",
        "timestamp": 1593428734
    },
    {
        "content": "<p>so... stage0 rustc is still the same thing as on master, but the 4m40s thing is with cg_clif, and the currently running thing is using the compiler built with cg_clif to build itself again?</p>",
        "id": 202300292,
        "sender_full_name": "oli",
        "timestamp": 1593432502
    },
    {
        "content": "<p>yes. by the way it is now at 204/207: rustc_mir</p>",
        "id": 202300919,
        "sender_full_name": "bjorn3",
        "timestamp": 1593432954
    },
    {
        "content": "<p>go go go</p>",
        "id": 202301320,
        "sender_full_name": "oli",
        "timestamp": 1593433222
    },
    {
        "content": "<p>205/207: rustc_driver</p>",
        "id": 202301648,
        "sender_full_name": "bjorn3",
        "timestamp": 1593433455
    },
    {
        "content": "<p>it can almost go compile cg_clif itself using cg_clif rustc again</p>",
        "id": 202301717,
        "sender_full_name": "bjorn3",
        "timestamp": 1593433490
    },
    {
        "content": "<p>and after that I can use my laptop again. (firefox+vscode+compiling rustc =&gt; excessive swapping)</p>",
        "id": 202301855,
        "sender_full_name": "bjorn3",
        "timestamp": 1593433577
    },
    {
        "content": "<p>now compiling cg_clif</p>",
        "id": 202302173,
        "sender_full_name": "bjorn3",
        "timestamp": 1593433747
    },
    {
        "content": "<p>Build completed successfully in 2:57:19</p>",
        "id": 202305002,
        "sender_full_name": "bjorn3",
        "timestamp": 1593435527
    },
    {
        "content": "<p>That is starting at the compilation of libcore using cg_clif</p>",
        "id": 202305050,
        "sender_full_name": "bjorn3",
        "timestamp": 1593435555
    },
    {
        "content": "<p>which now should take the same amount of time that it took for stage 2, right?</p>",
        "id": 202305085,
        "sender_full_name": "oli",
        "timestamp": 1593435582
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 202305176,
        "sender_full_name": "bjorn3",
        "timestamp": 1593435626
    },
    {
        "content": "<p>the stage2 compiler's libcore was build with a stage1 compiler using cg_clif, so building a libcore with the stage2 compiler that was just built should be absolutely the same... but while writing this I realized you meant that's the time elapsed since starting the compilation of libcore with <code>cg_clif</code></p>",
        "id": 202305317,
        "sender_full_name": "oli",
        "timestamp": 1593435702
    },
    {
        "content": "<p>ah ok</p>",
        "id": 202305393,
        "sender_full_name": "bjorn3",
        "timestamp": 1593435729
    },
    {
        "content": "<p>Now time for stages 3, 4, 5,  <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 202305897,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593435987
    },
    {
        "content": "<p>Those should be identical. I am not going to try another 3 hour compilation though :)</p>",
        "id": 202306002,
        "sender_full_name": "bjorn3",
        "timestamp": 1593436046
    },
    {
        "content": "<p>Reproduction instructions: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-651108168\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-651108168</a></p>",
        "id": 202306020,
        "sender_full_name": "bjorn3",
        "timestamp": 1593436056
    },
    {
        "content": "<p>This is awesome!</p>",
        "id": 202378511,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593472055
    },
    {
        "content": "<p>I'm trying to understand why stage 1 was so much faster than stage 2?</p>",
        "id": 202378568,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593472092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> What were the specs on the system you used for that build?</p>",
        "id": 202394129,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593490599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198054\">mark-i-m</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrap.20rustc.20using.20cg_clif/near/202378568\">said</a>:</p>\n<blockquote>\n<p>I'm trying to understand why stage 1 was so much faster than stage 2?</p>\n</blockquote>\n<p>The bootstrap conpiler compiled an optimized compiler with cg_clif support using LLVM. This took 30m. This compiler with cg_clif support compiles a conpiler which is effectively less optimized than an LLVM debug build. This took 4m40s. This unoptimized comiler then took 3h to compile libstd+compiler.</p>",
        "id": 202400854,
        "sender_full_name": "bjorn3",
        "timestamp": 1593499865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrap.20rustc.20using.20cg_clif/near/202394129\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> What were the specs on the system you used for that build?</p>\n</blockquote>\n<p>I ran the bootstrap on a laptop with a Intel(R) Core(TM) i3-7130U CPU @ 2.70GHz and an ssd.</p>",
        "id": 202400953,
        "sender_full_name": "bjorn3",
        "timestamp": 1593499965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrap.20rustc.20using.20cg_clif/near/202400953\">said</a>:</p>\n<blockquote>\n<p>I ran the bootstrap on a laptop with a Intel(R) Core(TM) i3-7130U CPU @ 2.70GHz and an ssd.</p>\n</blockquote>\n<p>Ouch, I'll try it on something a bit more reasonable when I get time to do it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 202420046,
        "sender_full_name": "mati865",
        "timestamp": 1593514702
    },
    {
        "content": "<blockquote>\n<p>Edit has_cpuid in corearch to always return false.</p>\n</blockquote>\n<p>FYI that is this function: <a href=\"https://github.com/rust-lang/stdarch/blob/b17efd88af158b14b32ff394efb57c1b90179bf5/crates/core_arch/src/x86/cpuid.rs#L92\">https://github.com/rust-lang/stdarch/blob/b17efd88af158b14b32ff394efb57c1b90179bf5/crates/core_arch/src/x86/cpuid.rs#L92</a> Also you need to clone cg_clif to <code>&lt;rust checkout&gt;/../cg_clif</code>. Bootstrap has been tested on Linux, but should also work fine on macOS. Windows is not yet supported by cg_clif at all.</p>",
        "id": 202421149,
        "sender_full_name": "bjorn3",
        "timestamp": 1593515494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrap.20rustc.20using.20cg_clif/near/202400854\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"198054\">mark-i-m</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrap.20rustc.20using.20cg_clif/near/202378568\">said</a>:</p>\n<blockquote>\n<p>I'm trying to understand why stage 1 was so much faster than stage 2?</p>\n</blockquote>\n<p>The bootstrap conpiler compiled an optimized compiler with cg_clif support using LLVM. This took 30m. This compiler with cg_clif support compiles a conpiler which is effectively less optimized than an LLVM debug build. This took 4m40s. This unoptimized comiler then took 3h to compile libstd+compiler.</p>\n</blockquote>\n<p>Oh, that's awesome! It means that for debug builds cg_clif could provide major compile-time improvements <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>",
        "id": 202577295,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593614755
    },
    {
        "content": "<p>cg_clif built rustc is somewhat slower than even a rustc build in debug mode with LLVM. Rustc is normally build in release mode because debug mode is way too slow.</p>",
        "id": 202577523,
        "sender_full_name": "bjorn3",
        "timestamp": 1593614858
    },
    {
        "content": "<p>If you have a step-by-step recipe to do the stage 1 build (without building LLVM from source), I would be happy to test that on a 96-CPU system and see how fast it builds.</p>",
        "id": 202591966,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593621404
    },
    {
        "content": "<p>That same system can build Rust stage 1 from scratch, including LLVM, in 5 minutes.</p>",
        "id": 202592039,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593621447
    },
    {
        "content": "<p>I would also be interested to know how long it takes to run the test suite on the cg_clif-based compiler</p>",
        "id": 202592188,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593621506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-651108168\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-651108168</a></p>\n<p>Combined with</p>\n<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrap.20rustc.20using.20cg_clif/near/202421149\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Edit has_cpuid in corearch to always return false.</p>\n</blockquote>\n<p>FYI that is this function: <a href=\"https://github.com/rust-lang/stdarch/blob/b17efd88af158b14b32ff394efb57c1b90179bf5/crates/core_arch/src/x86/cpuid.rs#L92\">https://github.com/rust-lang/stdarch/blob/b17efd88af158b14b32ff394efb57c1b90179bf5/crates/core_arch/src/x86/cpuid.rs#L92</a> Also you need to clone cg_clif to <code>&lt;rust checkout&gt;/../cg_clif</code>. Bootstrap has been tested on Linux, but should also work fine on macOS. Windows is not yet supported by cg_clif at all.</p>\n</blockquote>\n<p>should be everything you need to know to reproduce this. The instructions completely disable the LLVM backend, so it won't build LLVM. cg_clif will likely benefit less from the high core count, as it doesn't do codegen in parallel. (/me is still waiting on parallel rustc)</p>",
        "id": 202592798,
        "sender_full_name": "bjorn3",
        "timestamp": 1593621807
    },
    {
        "content": "<p>cg_clif should pass a fair amount of the run-pass tests: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/381\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/381</a> See <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/6b1e90c01330676251e40fe916657f8e74029034/test.sh#L97-L147\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/6b1e90c01330676251e40fe916657f8e74029034/test.sh#L97-L147</a> for all things that are expected to not pass.</p>",
        "id": 202593024,
        "sender_full_name": "bjorn3",
        "timestamp": 1593621914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> it failed for me with <a href=\"https://hastebin.com/movapotori\">https://hastebin.com/movapotori</a><br>\ncg_clif is on <code>wip_proc_macro_fixes</code> branch:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ git --no-pager branch -v\n  master               a299d0e Don&#39;t panic on unevaluatable promoted constants\n* wip_proc_macro_fixes 8051242 Fix SwitchInt on 128bit integers\n</code></pre></div>",
        "id": 202669653,
        "sender_full_name": "mati865",
        "timestamp": 1593684405
    },
    {
        "content": "<p>Did you checkout <a href=\"https://github.com/rust-lang/rust/commit/430ab52a3cf9c941783e7996cb6dd00206e9152a\">430ab52a3cf9c941783e7996cb6dd00206e9152a</a> of my wasmtime fork for the correct Cranelift version?</p>",
        "id": 202669845,
        "sender_full_name": "bjorn3",
        "timestamp": 1593684540
    },
    {
        "content": "<p><code>ArgumentPurpose::StructArgument</code> is not yet supported by upstream, but it is necessary for abi compatibility between cg_clif and cg_llvm compiled libproc_macro.</p>",
        "id": 202669901,
        "sender_full_name": "bjorn3",
        "timestamp": 1593684601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> ^</p>",
        "id": 202669961,
        "sender_full_name": "bjorn3",
        "timestamp": 1593684617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>$ git --no-pager branch -v\n* 128bit_switch ed0495c75 Fix Switch for 128bit integers\n  master        39ba281bc Update some documentation on `Memory` (#1360)\n$ git checkout 430ab52a3cf9c941783e7996cb6dd00206e9152a\nfatal: reference is not a tree: 430ab52a3cf9c941783e7996cb6dd00206e9152a\n$ git remote -v\norigin  https://github.com/bjorn3/wasmtime (fetch)\norigin  https://github.com/bjorn3/wasmtime (push)\n</code></pre></div>",
        "id": 202670291,
        "sender_full_name": "mati865",
        "timestamp": 1593684853
    },
    {
        "content": "<p>Forgot I squashed the PR. The new commit is <a href=\"https://github.com/rust-lang/rust/commit/8fbde92c387635908955a5a8140a8901861cdade\">8fbde92c387635908955a5a8140a8901861cdade</a>.</p>",
        "id": 202670368,
        "sender_full_name": "bjorn3",
        "timestamp": 1593684951
    },
    {
        "content": "<p>You also need to merge <a href=\"https://github.com/rust-lang/rust/commit/ed0495c75440a1b593685491da157d79250afa02\">ed0495c75440a1b593685491da157d79250afa02</a> into it.</p>",
        "id": 202670434,
        "sender_full_name": "bjorn3",
        "timestamp": 1593684985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> ^</p>",
        "id": 202670554,
        "sender_full_name": "bjorn3",
        "timestamp": 1593685089
    },
    {
        "content": "<p>I see, I was waiting for cranelift to build. Seems to work now.<br>\nFYI I'm on 128bit_switch branch and cherry-picked <a href=\"https://github.com/rust-lang/rust/commit/8fbde92c387635908955a5a8140a8901861cdade\">8fbde92c387635908955a5a8140a8901861cdade</a></p>",
        "id": 202670643,
        "sender_full_name": "mati865",
        "timestamp": 1593685176
    },
    {
        "content": "<p>2700X Arch Linux:</p>\n<blockquote>\n<p>Build completed successfully in 1:17:37</p>\n</blockquote>\n<p>Full log (with step timings) is available here: <a href=\"https://hastebin.com/ogoqojofes\">https://hastebin.com/ogoqojofes</a></p>",
        "id": 202681487,
        "sender_full_name": "mati865",
        "timestamp": 1593693463
    },
    {
        "content": "<p>Nice! The output is what I expected, just a lot faster :)</p>",
        "id": 202702854,
        "sender_full_name": "bjorn3",
        "timestamp": 1593703311
    },
    {
        "content": "<p>What are the next steps here? Should we expect this in rustc any time soon?</p>",
        "id": 202704708,
        "sender_full_name": "mark-i-m",
        "timestamp": 1593704118
    },
    {
        "content": "<p>Is the next step getting <a href=\"https://github.com/rust-lang/compiler-team/issues/270\">https://github.com/rust-lang/compiler-team/issues/270</a> approved?</p>",
        "id": 202705298,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593704334
    },
    {
        "content": "<p>The MCP is pretty much blocked on <a href=\"https://github.com/rust-lang/compiler-team/issues/270#issuecomment-646289245\">https://github.com/rust-lang/compiler-team/issues/270#issuecomment-646289245</a>. (<code>git subtree</code> depends on a git patch to work fine on a repo as big as <code>rust-lang/rust</code>)</p>\n<p>The actual rustc bootstrap depends on <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1559\">bytecodealliance/wasmtime#1559</a> (support the SystemV abi way of passing structs as arguments, moderately sized PR) and <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1939\">bytecodealliance/wasmtime#1939</a> (fix matching on 128bit integers, small PR) on the Cranelift side.<br>\nIt also depends on a libstd patch of <a href=\"https://github.com/rust-lang/rust/compare/master...bjorn3:cg_clif_subtree#diff-c126590bd9baecba4097bcdb3c839b5bL17-R21\"><code>fast_thread_local::register_dtor</code></a>, because it is doing something with weak linkage that I couldn't figure out how to make it work with cg_clif. Maybe if I look at it again I can find the issue.<br>\nOn the rustc_codegen_cranelift side it depends on a <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/compare/wip_proc_macro_fixes#diff-f3d6fdbd69d415b035b88f0dbb908c7eR114-R156\">hack</a> to outside of <code>main</code> initialize the global mutex used to emulate atomics, so that proc macros can be loaded by a cg_llvm compiled rustc.</p>",
        "id": 202708269,
        "sender_full_name": "bjorn3",
        "timestamp": 1593705628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ^</p>",
        "id": 202708283,
        "sender_full_name": "bjorn3",
        "timestamp": 1593705636
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>! I'm really excited to see this move forward so I'll watch those PRs. <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 202723130,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1593712656
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> What's the current status of atomics?</p>",
        "id": 202730516,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593716155
    },
    {
        "content": "<p>I am emulating them using <code>pthread_mutex_lock</code>. Getting real atomics is blocked on Cranelift.</p>",
        "id": 202730623,
        "sender_full_name": "bjorn3",
        "timestamp": 1593716196
    },
    {
        "content": "<p>That's what I meant; I wondered about the status of atomics in Cranelift.</p>",
        "id": 202730649,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593716210
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1059\">https://github.com/bytecodealliance/wasmtime/issues/1059</a></p>",
        "id": 202730657,
        "sender_full_name": "bjorn3",
        "timestamp": 1593716214
    },
    {
        "content": "<p>Also bnjbvr posted the following just today in the context of AArch64 support in Cranelift:</p>\n<p><a href=\"https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Build.20wasmtime.20for.20Android/near/202705996\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Build.20wasmtime.20for.20Android/near/202705996</a></p>\n<blockquote>\n<p>[...] SIMD and atomics have started relatively recently, in comparison.</p>\n</blockquote>",
        "id": 202730941,
        "sender_full_name": "bjorn3",
        "timestamp": 1593716343
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 202730975,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593716358
    },
    {
        "content": "<p>This came as a complete surprise to me. I seem to be missing discussions about Cranelift,as the bytecodealliance meetings don't seem to get any minutes published. <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>?</p>",
        "id": 202731456,
        "sender_full_name": "bjorn3",
        "timestamp": 1593716567
    },
    {
        "content": "<p>Sorry I also don't attend cranelift meetings</p>",
        "id": 202731592,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593716636
    },
    {
        "content": "<p>Ok</p>",
        "id": 202731651,
        "sender_full_name": "bjorn3",
        "timestamp": 1593716649
    },
    {
        "content": "<p>I've only been to a couple of cranelift meetings; they're at a particularly bad time for me.</p>",
        "id": 202731903,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1593716765
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1559\">https://github.com/bytecodealliance/wasmtime/pull/1559</a> has been merged, so it is no longer necessary to patch cg_clif to bootstrap rustc. Only rustc needs to be patched to integrate with cg_clif. <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-660046919\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/743#issuecomment-660046919</a></p>",
        "id": 204197098,
        "sender_full_name": "bjorn3",
        "timestamp": 1594986973
    }
]