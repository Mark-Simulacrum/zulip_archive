[
    {
        "content": "<p>Do we have a library for snapshot testing somewhere in rustc?</p>",
        "id": 207537330,
        "sender_full_name": "matklad",
        "timestamp": 1597938054
    },
    {
        "content": "<p>Specifically, for writing snapshot <strong>unit</strong> tests?</p>",
        "id": 207537356,
        "sender_full_name": "matklad",
        "timestamp": 1597938070
    },
    {
        "content": "<p>Something like this: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5101\">https://github.com/rust-analyzer/rust-analyzer/pull/5101</a></p>",
        "id": 207537366,
        "sender_full_name": "matklad",
        "timestamp": 1597938076
    },
    {
        "content": "<p>no, I don't think so</p>",
        "id": 207537517,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938152
    },
    {
        "content": "<p>Context: I am rewriting rustdoc syntax highlighting (long yak). It currently is tested via assert_eq, which is painful to modify by hand: </p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src/librustdoc/html/highlight/tests.rs#L25-L82\">https://github.com/rust-lang/rust/blob/5fff3824bc77cd7052e2515f82259e32f8ad1486/src/librustdoc/html/highlight/tests.rs#L25-L82</a></p>",
        "id": 207537527,
        "sender_full_name": "matklad",
        "timestamp": 1597938155
    },
    {
        "content": "<p>I think we just use UI tests for this</p>",
        "id": 207537544,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938168
    },
    {
        "content": "<p>with println!/eprintln! and compare-run-output or whatever the flag is</p>",
        "id": 207537581,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938191
    },
    {
        "content": "<p>Uhu... rustdoc's integration tests are based on <code>htmldocck</code> which isn't exactly a UI test... And UI tests need special harness for running. </p>\n<p>I guess, what I am trying to say is that we've been using expect <em>unit</em> tests with a great success in rust-analyzer, and I wonder if we should add them to rustc?</p>",
        "id": 207537776,
        "sender_full_name": "matklad",
        "timestamp": 1597938303
    },
    {
        "content": "<p>I'd not be opposed, we just have almost zero unit tests in rustc</p>",
        "id": 207537805,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938324
    },
    {
        "content": "<p>but seems good to add them where possible!</p>",
        "id": 207537823,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938332
    },
    {
        "content": "<p>Are there any specific use-cases where we want them?</p>",
        "id": 207537927,
        "sender_full_name": "matklad",
        "timestamp": 1597938366
    },
    {
        "content": "<p>If we  <em>just</em> add a library, it'll just die without much use I am afraid.</p>",
        "id": 207537960,
        "sender_full_name": "matklad",
        "timestamp": 1597938388
    },
    {
        "content": "<p>Many parts of the compiler don't lend themselves well to unit testing today (too much global state)</p>",
        "id": 207538021,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938424
    },
    {
        "content": "<p>or, you know, requiring a ton of setup</p>",
        "id": 207538038,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938434
    },
    {
        "content": "<p>but for things like lexer and rustdoc's syntax highlighting it seems like neither is probably true</p>",
        "id": 207538084,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938456
    },
    {
        "content": "<p>Even more specifically -- I am working exactly on purging the global state away, which makes it possible to write unit tests. But I lack convenient way to do that.</p>",
        "id": 207538210,
        "sender_full_name": "matklad",
        "timestamp": 1597938501
    },
    {
        "content": "<p>assert_eq unit tests are just a pain to maintain long-term</p>",
        "id": 207538251,
        "sender_full_name": "matklad",
        "timestamp": 1597938514
    },
    {
        "content": "<p>I guess, I should file an MCP about adopting something along the lines of <code>expect!</code> from rust-analyzer?</p>",
        "id": 207538286,
        "sender_full_name": "matklad",
        "timestamp": 1597938533
    },
    {
        "content": "<p>I guess I don't see why you don't want to just add it?</p>",
        "id": 207538530,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938648
    },
    {
        "content": "<p>like, I don't think it needs an MCP</p>",
        "id": 207538539,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938652
    },
    {
        "content": "<p>even if it doesn't get a lot of use initially, seems like a good thing to have that doesn't really hurt us any</p>",
        "id": 207538591,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938683
    },
    {
        "content": "<p>There's some design-space around the library for snapshot testing. The thing written for rust-analyzer is something maximally simple I came up with, as an alternative to more feature-full stuff from <a href=\"http://crates.io\">crates.io</a> (insta, k9). </p>\n<p>I obviously like my thing more, but I don't want to \"push\" rustc to it without consensus. I guess, sending a PR which shows the thing wont' hurt.</p>",
        "id": 207538908,
        "sender_full_name": "matklad",
        "timestamp": 1597938832
    },
    {
        "content": "<p>I think starting simple and with something we're already \"using\" makes sense</p>",
        "id": 207539292,
        "sender_full_name": "simulacrum",
        "timestamp": 1597938991
    },
    {
        "content": "<p>PR's up: <a href=\"https://github.com/rust-lang/rust/pull/75773\">https://github.com/rust-lang/rust/pull/75773</a></p>",
        "id": 207629176,
        "sender_full_name": "matklad",
        "timestamp": 1598013643
    }
]