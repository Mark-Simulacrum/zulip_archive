[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> have a second to discuss <a href=\"https://github.com/rust-lang/rust/pull/74040\">https://github.com/rust-lang/rust/pull/74040</a> ?</p>",
        "id": 205291297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970685
    },
    {
        "content": "<p>yeah</p>",
        "id": 205291307,
        "sender_full_name": "lcnr",
        "timestamp": 1595970692
    },
    {
        "content": "<p>So</p>",
        "id": 205291332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970712
    },
    {
        "content": "<p>I was looking at your \"motivating example\"</p>",
        "id": 205291339,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970718
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// fn bind&lt;const N: usize&gt;(value: [u8; N]) -&gt; [u8; 3 + 4] {</span>\n<span class=\"w\">    </span><span class=\"sd\">///     todo!()</span>\n<span class=\"w\">    </span><span class=\"sd\">/// }</span>\n<span class=\"w\">    </span><span class=\"sd\">///</span>\n<span class=\"w\">    </span><span class=\"sd\">/// fn main() {</span>\n<span class=\"w\">    </span><span class=\"sd\">///     let mut arr = Default::default();</span>\n<span class=\"w\">    </span><span class=\"sd\">///     arr = bind(arr);</span>\n<span class=\"w\">    </span><span class=\"sd\">/// }</span>\n</code></pre></div>",
        "id": 205291389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970731
    },
    {
        "content": "<p>are you saying that this code should not compile?</p>",
        "id": 205291408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970751
    },
    {
        "content": "<p>This code should compile</p>",
        "id": 205291431,
        "sender_full_name": "lcnr",
        "timestamp": 1595970772
    },
    {
        "content": "<p>but with the way <code>ty::Generics</code> and lazy norm currently works it causes problems</p>",
        "id": 205291459,
        "sender_full_name": "lcnr",
        "timestamp": 1595970797
    },
    {
        "content": "<p>OK, so I think the idea is that the occurs check will reject some attempt at unification</p>",
        "id": 205291471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970803
    },
    {
        "content": "<p>and force us down a different path?</p>",
        "id": 205291476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970808
    },
    {
        "content": "<p>also, this is presumably a blocker to the \"min const generics\" stabilization?</p>",
        "id": 205291504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970824
    },
    {
        "content": "<p>So the occurs check rejects unifying <code>N</code> with <code>{ N + 1 }</code></p>",
        "id": 205291566,
        "sender_full_name": "lcnr",
        "timestamp": 1595970838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/occurs.20check.20for.20constants.20.20.2374040/near/205291504\">said</a>:</p>\n<blockquote>\n<p>also, this is presumably a blocker to the \"min const generics\" stabilization?</p>\n</blockquote>\n<p>luckily no, this is only problematic when dealing with <code>ConstKind::Unevaluated</code> and lazy norm</p>",
        "id": 205291680,
        "sender_full_name": "lcnr",
        "timestamp": 1595970860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/occurs.20check.20for.20constants.20.20.2374040/near/205291566\">said</a>:</p>\n<blockquote>\n<p>So the occurs check rejects unifying <code>N</code> with <code>{ N + 1 }</code></p>\n</blockquote>\n<p>but because we currently use the parent generics in <code>ConstKind::Unevaluated</code>, we also reject unifying <code>N</code> with <code>1 + 2</code> if <code>1 +2</code> has the wrong parent generics</p>",
        "id": 205291753,
        "sender_full_name": "lcnr",
        "timestamp": 1595970911
    },
    {
        "content": "<p>i.e. we can't currently know that <code>1 + 2</code> does not use<code>N</code></p>",
        "id": 205291773,
        "sender_full_name": "lcnr",
        "timestamp": 1595970933
    },
    {
        "content": "<p>Hmm</p>",
        "id": 205291789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970948
    },
    {
        "content": "<p>I am wondering</p>",
        "id": 205291792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970951
    },
    {
        "content": "<p>How would you feel about scheduling some time to do a recorded walk through of how const generics is working?</p>",
        "id": 205291855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970970
    },
    {
        "content": "<p>i.e., we talk out some examples</p>",
        "id": 205291859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970972
    },
    {
        "content": "<p>or we could do it on zulip if you prefer</p>",
        "id": 205291867,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970976
    },
    {
        "content": "<p>but zoom might be higher bandwidth</p>",
        "id": 205291873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970980
    },
    {
        "content": "<p>I'm thinking it'd be a good rustc lecture series entry :)</p>",
        "id": 205291878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970987
    },
    {
        "content": "<p>I am feeling a desire to better understand the details here...</p>",
        "id": 205291889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595970997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/occurs.20check.20for.20constants.20.20.2374040/near/205291773\">said</a>:</p>\n<blockquote>\n<p>i.e. we can't currently know that <code>1 + 2</code> does not use<code>N</code></p>\n</blockquote>\n<p>yeah this is interesting. I mean the \"min const generics\" proposal actually <em>does</em> require us to know that, right? But we regard that as something of a temporary crutch?</p>",
        "id": 205291927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971028
    },
    {
        "content": "<p>i.e., there is that edge case of <code>u8::FOO</code> that could be expanded to <code>&lt;u8 as Trait&lt;T&gt;&gt;::FOO</code></p>",
        "id": 205291944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/occurs.20check.20for.20constants.20.20.2374040/near/205291855\">said</a>:</p>\n<blockquote>\n<p>How would you feel about scheduling some time to do a recorded walk through of how const generics is working?</p>\n</blockquote>\n<p>yeah, I have a small amount of imposter syndrome here, but I think this should be something I can do</p>",
        "id": 205292027,
        "sender_full_name": "lcnr",
        "timestamp": 1595971104
    },
    {
        "content": "<p>zoom is fine for me</p>",
        "id": 205292038,
        "sender_full_name": "lcnr",
        "timestamp": 1595971111
    },
    {
        "content": "<p>You Can Do It! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 205292050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971117
    },
    {
        "content": "<p>in any case, the idea would be to talk together</p>",
        "id": 205292053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971122
    },
    {
        "content": "<p>i.e., I've got lots of questions so it's not like you have to prepare some kind of script</p>",
        "id": 205292064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971130
    },
    {
        "content": "<blockquote>\n<p>the \"min const generics\" proposal actually does require us to know that, right?</p>\n</blockquote>\n<p>nope, we never use the parent generics in \"min const generics\"</p>",
        "id": 205292065,
        "sender_full_name": "lcnr",
        "timestamp": 1595971131
    },
    {
        "content": "<p>well yeah but</p>",
        "id": 205292069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971137
    },
    {
        "content": "<p>the reason we can get away with that</p>",
        "id": 205292074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971141
    },
    {
        "content": "<p>is because we are scanning for generic type parameters in the expression</p>",
        "id": 205292090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971152
    },
    {
        "content": "<p>So we never have to deal with <code>ConstKind::Unevaluated</code> with generics</p>",
        "id": 205292093,
        "sender_full_name": "lcnr",
        "timestamp": 1595971156
    },
    {
        "content": "<p>and erroring if we see them</p>",
        "id": 205292094,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971156
    },
    {
        "content": "<p>na, I currently check this during name resolution and only allow <code>N</code> or <code>{ N }</code></p>",
        "id": 205292206,
        "sender_full_name": "lcnr",
        "timestamp": 1595971226
    },
    {
        "content": "<p>so we never create any <code>ConstKind::Unevaluated</code> which could contain generic parameters</p>",
        "id": 205292249,
        "sender_full_name": "lcnr",
        "timestamp": 1595971249
    },
    {
        "content": "<p>right but what I'm saying is</p>",
        "id": 205292261,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971258
    },
    {
        "content": "<p>we believe that we can detect expressions that definitely do not reference generic parameters</p>",
        "id": 205292293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971278
    },
    {
        "content": "<p>basically I'm contemplating the weirdness that <code>3+4</code> is considered to potentially depend on the parent generics :)</p>",
        "id": 205292320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971300
    },
    {
        "content": "<p>anyway, this is a bit off topic</p>",
        "id": 205292340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971315
    },
    {
        "content": "<p>I guess I want to walk through the example with lazy-norm to understand what's going on</p>",
        "id": 205292389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971328
    },
    {
        "content": "<blockquote>\n<p>I'm contemplating the weirdness that 3+4 is considered to potentially depend on the parent generics</p>\n</blockquote>\n<p>yeah, I am not sure if a partial solution is a good idea though</p>",
        "id": 205292443,
        "sender_full_name": "lcnr",
        "timestamp": 1595971384
    },
    {
        "content": "<p>There might be a good subset which should be fine</p>",
        "id": 205292465,
        "sender_full_name": "lcnr",
        "timestamp": 1595971404
    },
    {
        "content": "<p>similar to what's the plan with const wf, so this might work</p>",
        "id": 205292500,
        "sender_full_name": "lcnr",
        "timestamp": 1595971433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/occurs.20check.20for.20constants.20.20.2374040/near/205292389\">said</a>:</p>\n<blockquote>\n<p>I guess I want to walk through the example with lazy-norm to understand what's going on</p>\n</blockquote>\n<p>now?</p>",
        "id": 205292578,
        "sender_full_name": "lcnr",
        "timestamp": 1595971469
    },
    {
        "content": "<p>maybe:)</p>",
        "id": 205292606,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971491
    },
    {
        "content": "<p>maybe not</p>",
        "id": 205292617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971498
    },
    {
        "content": "<p>I mean the PR seems ok I just don't have a complete picture</p>",
        "id": 205292628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971503
    },
    {
        "content": "<p>of the context</p>",
        "id": 205292633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971507
    },
    {
        "content": "<p>okay</p>",
        "id": 205292643,
        "sender_full_name": "lcnr",
        "timestamp": 1595971511
    },
    {
        "content": "<p>let me try to explain this rn, and if it doesn't work we can reschedule this and do it over zoom</p>",
        "id": 205292715,
        "sender_full_name": "lcnr",
        "timestamp": 1595971559
    },
    {
        "content": "<p>Let's use this example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"> </span><span class=\"c1\">//~ WARN the feature `const_generics` is incomplete</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bind</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR mismatched types</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205292781,
        "sender_full_name": "lcnr",
        "timestamp": 1595971577
    },
    {
        "content": "<p>we call <code>bind</code> here and constrain <code>arr</code> to <code>[u8; _#1c]</code> (or <code>[u8; N]</code>, whatever)</p>",
        "id": 205292933,
        "sender_full_name": "lcnr",
        "timestamp": 1595971686
    },
    {
        "content": "<p>right so</p>",
        "id": 205292944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971695
    },
    {
        "content": "<p>to start, <code>arr</code> will be <code>?X</code> (i.e., after the call to <code>Default</code>)</p>",
        "id": 205292967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971712
    },
    {
        "content": "<p>we'll instantiate a <code>_#1c</code> for the <code>N</code> parameter when we call <code>bind</code></p>",
        "id": 205292995,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971738
    },
    {
        "content": "<p>the signature of <code>bind</code> is then <code>[u8; ?N]</code> (let's use that notation, easier to type)</p>",
        "id": 205293022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971761
    },
    {
        "content": "<p>when we relate <code>?X</code> and <code>[u8; ?N]</code>, do we generalize <code>?N</code> to a <code>?M</code>?</p>",
        "id": 205293042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971775
    },
    {
        "content": "<p>(maybe not relevant, just checking)</p>",
        "id": 205293051,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971780
    },
    {
        "content": "<p>or do we not because constants are only equal if they're equal I guess</p>",
        "id": 205293060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971791
    },
    {
        "content": "<p>(mm well that's not entirely true, there can be multiple constants that evaluate to one another...)</p>",
        "id": 205293121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971808
    },
    {
        "content": "<p>I guess based on your comment that we would not generalize <code>?N</code> and hence we just bind <code>?X</code> to the value <code>[u8; ?N]</code></p>",
        "id": 205293165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/occurs.20check.20for.20constants.20.20.2374040/near/205293042\">said</a>:</p>\n<blockquote>\n<p>when we relate <code>?X</code> and <code>[u8; ?N]</code>, do we generalize <code>?N</code> to a <code>?M</code>?</p>\n</blockquote>\n<p>I don't think so, but I also don't think this matters as consts must be exactly equal (no subtyping)</p>",
        "id": 205293185,
        "sender_full_name": "lcnr",
        "timestamp": 1595971865
    },
    {
        "content": "<p>yeah i'm not entirely sure</p>",
        "id": 205293314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971934
    },
    {
        "content": "<p>I am certain that we bind <code>?X</code> to <code>[u8; ?Q]</code> where <code>?Q</code> unifies with <code>?N</code></p>",
        "id": 205293315,
        "sender_full_name": "lcnr",
        "timestamp": 1595971934
    },
    {
        "content": "<p>I think you're right it doesn't matter, but only if we get everything else right ;)</p>",
        "id": 205293326,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971943
    },
    {
        "content": "<p>anyway ok</p>",
        "id": 205293340,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971960
    },
    {
        "content": "<p>so the return type of <code>bind(arr)</code> is then <code>[u8; 3+4]</code>, but <code>3+4</code> is actually an \"unevaluated\" with the parent generics</p>",
        "id": 205293379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971984
    },
    {
        "content": "<p>which means it is like <code>Unevaluated&lt;?N&gt;(3+4)</code> or something</p>",
        "id": 205293396,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595971994
    },
    {
        "content": "<p>yeah</p>",
        "id": 205293401,
        "sender_full_name": "lcnr",
        "timestamp": 1595972000
    },
    {
        "content": "<p>so then we attempt to unify that with <code>?N</code> -- and this is where your PR interferes</p>",
        "id": 205293406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972004
    },
    {
        "content": "<p>until now, I guess, that unification succeeds</p>",
        "id": 205293411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972008
    },
    {
        "content": "<p>but with your PR, it fails because the <code>?N</code> is part of the generics?</p>",
        "id": 205293423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972028
    },
    {
        "content": "<p>so what about an example like</p>",
        "id": 205293435,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972039
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bind</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205293489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972053
    },
    {
        "content": "<p>and then <code>arr = bind(arr)</code></p>",
        "id": 205293499,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972058
    },
    {
        "content": "<p>well wait</p>",
        "id": 205293514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972065
    },
    {
        "content": "<p>don't answer that</p>",
        "id": 205293519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/occurs.20check.20for.20constants.20.20.2374040/near/205293423\">said</a>:</p>\n<blockquote>\n<p>but with your PR, it fails because the <code>?N</code> is part of the generics?</p>\n</blockquote>\n<p>so, it fails, and then we fall back to some other path where we evaluate the <code>3+4</code>?</p>",
        "id": 205293534,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972084
    },
    {
        "content": "<p>(where is that path)</p>",
        "id": 205293540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/occurs.20check.20for.20constants.20.20.2374040/near/205293534\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/occurs.20check.20for.20constants.20.20.2374040/near/205293423\">said</a>:</p>\n<blockquote>\n<p>but with your PR, it fails because the <code>?N</code> is part of the generics?</p>\n</blockquote>\n<p>so, it fails, and then we fall back to some other path where we evaluate the <code>3+4</code>?</p>\n</blockquote>\n<p>we aren't doing so rn, at least not intentionally <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 205293584,
        "sender_full_name": "lcnr",
        "timestamp": 1595972123
    },
    {
        "content": "<p>ok :)</p>",
        "id": 205293688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972175
    },
    {
        "content": "<p>so how does it succeed?</p>",
        "id": 205293690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972178
    },
    {
        "content": "<p>That test doesn't</p>",
        "id": 205293703,
        "sender_full_name": "lcnr",
        "timestamp": 1595972188
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n  --&gt; $DIR/unused-substs-4.rs:9:11\n   |\nLL |     arr = bind(arr);\n   |           ^^^^^^^^^ encountered a self-referencing constant\n</code></pre></div>",
        "id": 205293718,
        "sender_full_name": "lcnr",
        "timestamp": 1595972198
    },
    {
        "content": "<p>OK, but earlier you wrote that it was meant to work</p>",
        "id": 205293752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972222
    },
    {
        "content": "<p>so is that a \"FIXME\"?</p>",
        "id": 205293760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972226
    },
    {
        "content": "<p>somewhat</p>",
        "id": 205293801,
        "sender_full_name": "lcnr",
        "timestamp": 1595972268
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> mentioned that we might try to eagerly evaluate <code>3 + 4</code> if the occurs check fails</p>",
        "id": 205293870,
        "sender_full_name": "lcnr",
        "timestamp": 1595972298
    },
    {
        "content": "<p>but that seems non trivial to me (as it can cause cycle errors and stuff)</p>",
        "id": 205293885,
        "sender_full_name": "lcnr",
        "timestamp": 1595972320
    },
    {
        "content": "<p>yeah, this is the thing I'd like to talk over in more detail</p>",
        "id": 205293890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972324
    },
    {
        "content": "<p>that doesn't feel \"right\"</p>",
        "id": 205293895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972328
    },
    {
        "content": "<p>though maybe it is :P</p>",
        "id": 205293899,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972332
    },
    {
        "content": "<p>so I would try it in a future PR if it seems needed</p>",
        "id": 205293904,
        "sender_full_name": "lcnr",
        "timestamp": 1595972339
    },
    {
        "content": "<p>\"if it seems needed\" --</p>",
        "id": 205294012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972408
    },
    {
        "content": "<p>eventually we'll need <em>some</em> solution to this</p>",
        "id": 205294023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972414
    },
    {
        "content": "<p>so does that mean \"if we don't find a better alternative\" or something like that?</p>",
        "id": 205294032,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972425
    },
    {
        "content": "<p>\"if it seems needed\" mostly means once all more important issues have been dealt with</p>",
        "id": 205294144,
        "sender_full_name": "lcnr",
        "timestamp": 1595972522
    },
    {
        "content": "<p>I suspect there is no good solution here as long as we keep using the parent generics</p>",
        "id": 205294228,
        "sender_full_name": "lcnr",
        "timestamp": 1595972565
    },
    {
        "content": "<p>but there are also quite a few issues with doing so and it will be quite a lot of work to get this right (if we even want to)</p>",
        "id": 205294398,
        "sender_full_name": "lcnr",
        "timestamp": 1595972673
    },
    {
        "content": "<p>I left a review</p>",
        "id": 205294567,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972792
    },
    {
        "content": "<p>mostly it talks about the universe question</p>",
        "id": 205294587,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972803
    },
    {
        "content": "<p>re: the parent generics, clearly we sometimes have to, but we may also be able to figure out when we don't, but the identify case is interesting</p>",
        "id": 205294637,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972838
    },
    {
        "content": "<p>there are also cases like <code>&lt;T as Foo&lt;N&gt;&gt;::BAR</code> which maybe doesn't really care what <code>N</code> is</p>",
        "id": 205294655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972855
    },
    {
        "content": "<p>yeah, it's an interesting problem</p>",
        "id": 205294687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972873
    },
    {
        "content": "<p>We also have </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bind</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205294772,
        "sender_full_name": "lcnr",
        "timestamp": 1595972900
    },
    {
        "content": "<p>(gotta run now though)</p>",
        "id": 205294845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1595972948
    },
    {
        "content": "<p>which won't cause problems with the example from above (because we can't infer the array length just from <code>bind</code> anymore)</p>",
        "id": 205294847,
        "sender_full_name": "lcnr",
        "timestamp": 1595972950
    },
    {
        "content": "<p>oh, I just realized that we can pretty much fix this much doing polymorphization on <code>mir_validated</code>/<code>mir_const</code></p>",
        "id": 205297443,
        "sender_full_name": "lcnr",
        "timestamp": 1595974728
    },
    {
        "content": "<p>for constants</p>",
        "id": 205297504,
        "sender_full_name": "lcnr",
        "timestamp": 1595974787
    },
    {
        "content": "<p>will elaborate tomorrow if needed</p>",
        "id": 205297786,
        "sender_full_name": "lcnr",
        "timestamp": 1595974980
    },
    {
        "content": "<p>Okay, so now that I slept over this and spend a bit more time thinking about it, I wasn't able to think of any big problems with this approach</p>",
        "id": 205331260,
        "sender_full_name": "lcnr",
        "timestamp": 1596012547
    },
    {
        "content": "<p>Similar to what I wanted to do with const wf bounds, this would need to use unoptimized mir to prevent us relying on optimizations: e.g.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205331407,
        "sender_full_name": "lcnr",
        "timestamp": 1596012666
    },
    {
        "content": "<p>If we were to use <code>optimized_mir</code> here, removing <code>std::mem::size_of::&lt;T&gt;()</code> in an optimization would suddenly be part of our stability guarantees.</p>",
        "id": 205331545,
        "sender_full_name": "lcnr",
        "timestamp": 1596012758
    },
    {
        "content": "<p>I guess one concern will be performance, as we would have to look at a lot more mir than what can be found in <code>optimized_mir</code>, so it is slightly slower. We can only run this check for anon consts where this is relevant, so the impact will hopefully be minimal</p>",
        "id": 205331834,
        "sender_full_name": "lcnr",
        "timestamp": 1596012981
    },
    {
        "content": "<p>going back to the above example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">bind</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205331897,
        "sender_full_name": "lcnr",
        "timestamp": 1596013047
    },
    {
        "content": "<p><code>arr = bind(arr)</code> currently tries to unify <code>[u8; ?X]</code> with <code>[u8; Unevaluated&lt;?X&gt;(3 + 4)]</code> which fails the occurs check</p>",
        "id": 205331982,
        "sender_full_name": "lcnr",
        "timestamp": 1596013090
    },
    {
        "content": "<p>but by discarding all unused substs of <code>3 + 4</code> we would unify <code>[u8; ?X]</code> with <code>[u8; Unevaluated&lt;N&gt;(3 + 4)]</code> which works fine.</p>",
        "id": 205332038,
        "sender_full_name": "lcnr",
        "timestamp": 1596013144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> looks like I was once again overeager to just ditch the current <code>ty::Generics</code> entirely <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 205332075,
        "sender_full_name": "lcnr",
        "timestamp": 1596013184
    },
    {
        "content": "<p>\"doing polymorphization\" pretty much means using something like <code>query unused_generic_params</code> and replacing all unused params with dummy values here.</p>",
        "id": 205332559,
        "sender_full_name": "lcnr",
        "timestamp": 1596013535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/occurs.20check.20for.20constants.20.20.2374040/near/205331260\">said</a>:</p>\n<blockquote>\n<p>Okay, so now that I slept over this and spend a bit more time thinking about it, I wasn't able to think of any big problems with this approach</p>\n</blockquote>\n<p>what is \"this approach\" here, the \"try to evaluate\" approach?</p>",
        "id": 205370664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596035732
    },
    {
        "content": "<p>\"this approach\" is using polymorphization to prevent cyclic inference variables here</p>",
        "id": 205370909,
        "sender_full_name": "lcnr",
        "timestamp": 1596035819
    },
    {
        "content": "<p>While we might try the \"try to evaluate\" approach, I am fairly sure that this isn't a good solution, not only because it can cause cycle errors and stuff, but also because the following won't work by doing so:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205371257,
        "sender_full_name": "lcnr",
        "timestamp": 1596035967
    },
    {
        "content": "<p>^ nm, the example here should work,  but there should be examples similar to this where \"just evaluating\" them won't fix it</p>",
        "id": 205372547,
        "sender_full_name": "lcnr",
        "timestamp": 1596036552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/occurs.20check.20for.20constants.20.20.2374040/near/205370909\">said</a>:</p>\n<blockquote>\n<p>\"this approach\" is using polymorphization to prevent cyclic inference variables here</p>\n</blockquote>\n<p>I see, I must have missed this somewhere.</p>",
        "id": 205373577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037014
    },
    {
        "content": "<p>That's...huh.</p>",
        "id": 205373601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037025
    },
    {
        "content": "<p>Yeah, I think it's potentially a good idea, but polymorphization is also intended as a \"code size optimization\" that we can tweak and change over time, so i'd probably prefer to have a <em>separate</em> analysis</p>",
        "id": 205373644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037052
    },
    {
        "content": "<p>I guess it seems like we could figure this out by analyzing the HIR fairly readily in any case</p>",
        "id": 205373675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037066
    },
    {
        "content": "<p>But I'm not 100% sure about that :)</p>",
        "id": 205373755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037096
    },
    {
        "content": "<p>We can certainly detect references to type parameters or things like <code>&lt;u8 as Foo&lt;T&gt;&gt;::BAR</code></p>",
        "id": 205373842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037144
    },
    {
        "content": "<blockquote>\n<p>HIR fairly readily</p>\n</blockquote>\n<p>Isn't that kinda hard when dealing with stuff like this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&gt;</span>::<span class=\"n\">ASSOC</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"kt\">u8</span>: <span class=\"nc\">Trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205373852,
        "sender_full_name": "lcnr",
        "timestamp": 1596037149
    },
    {
        "content": "<p>but checking this on mir is quite easy</p>",
        "id": 205373875,
        "sender_full_name": "lcnr",
        "timestamp": 1596037167
    },
    {
        "content": "<p><em>but</em> if you have wacky <code>const fn</code> that have where-clauses .. that might be harder .. have to think about it</p>",
        "id": 205373881,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037172
    },
    {
        "content": "<p>and as long as we don't use <code>optimized_mir</code> here we also don't have to worry about optimizations</p>",
        "id": 205373918,
        "sender_full_name": "lcnr",
        "timestamp": 1596037196
    },
    {
        "content": "<p>really what I meant I guess is checking on \"HAIR\"</p>",
        "id": 205373928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037200
    },
    {
        "content": "<p>or whatever we decided to rename it to</p>",
        "id": 205373991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037211
    },
    {
        "content": "<p>the distinction between HAIR and \"pre-optimization\" MIR is slim</p>",
        "id": 205374004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037218
    },
    {
        "content": "<p>but the point is that I'd prefer to specify the check separately vs overloading polymorphization</p>",
        "id": 205374031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037232
    },
    {
        "content": "<p>in particular I think we're going to want to extend polymorphization to cover cases like:</p>",
        "id": 205374042,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037243
    },
    {
        "content": "<p>\"the type parameter <code>T</code> is used, but the only thing that matters is its size/alignment\"</p>",
        "id": 205374066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037255
    },
    {
        "content": "<p>or</p>",
        "id": 205374073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037258
    },
    {
        "content": "<p>\"but we can get away with passing in a vtable\"</p>",
        "id": 205374077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037262
    },
    {
        "content": "<p>I guess maybe they can ultimately share code and that's ok</p>",
        "id": 205374110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037275
    },
    {
        "content": "<p>(i.e., if polymorphization can determine that the type parameter doesn't matter at all...)</p>",
        "id": 205374129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037286
    },
    {
        "content": "<p>but I think if we could specify it \"syntactically\" (taking into account the full expanded form of associated constants) I'd feel more comfortable</p>",
        "id": 205374171,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1596037308
    },
    {
        "content": "<p>so yeah, tbh I probably won't get to this before we stabilize min_const_generics, so I am satisfied with knowing that a solution exists at all here</p>",
        "id": 205377431,
        "sender_full_name": "lcnr",
        "timestamp": 1596038900
    }
]