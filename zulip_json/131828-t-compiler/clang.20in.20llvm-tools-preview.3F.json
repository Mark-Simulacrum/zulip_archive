[
    {
        "content": "<p>It looks like we have support for building clang from the bundled LLVM. How feasible would it be to build clang and ship it in llvm-tools-preview or a similar component? I'd be interested in making it easier to use a compatible clang for cross-language LTO. cc <span class=\"user-mention\" data-user-id=\"124287\">@mw</span></p>",
        "id": 207499373,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597911847
    },
    {
        "content": "<p>I think I remember discussing this with <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> a while ago and, if I remember correctly, the main point of uncertainty was the availability of the C/C++ standard libraries on the installing system. I don't think there is any reason why this shouldn't work in principle though.</p>",
        "id": 207501178,
        "sender_full_name": "mw",
        "timestamp": 1597913252
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> As in, the availability of those libraries for linking programs built with that toolchain?</p>",
        "id": 207502014,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597913840
    },
    {
        "content": "<p>That makes sense. That's a much easier problem to solve than obtaining a matching version of clang that uses the same version of LLVM as Rust, though.</p>",
        "id": 207502267,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597914014
    },
    {
        "content": "<p>LLVMs libc++ and compiler-rt+libunwind can be used to replace the need for GCC on host system for the main platforms like Linux and Windows (at least for MinGW, I don't know about MSVC).</p>",
        "id": 207502440,
        "sender_full_name": "mati865",
        "timestamp": 1597914156
    },
    {
        "content": "<p>That wouldn't replace the need for libc headers, but yeah.</p>",
        "id": 207502498,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597914208
    },
    {
        "content": "<p>It'd also make cross-compiling C code easier.</p>",
        "id": 207502605,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597914259
    },
    {
        "content": "<p>What would it take to give this a try in nightly?</p>",
        "id": 207502680,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597914321
    },
    {
        "content": "<p>I'm not really up-to-date but it looks like we are still already building clang on at least <code>x86_64-unknown-linux-gnu</code> in order to run the xLTO end-to-end tests.</p>",
        "id": 207503732,
        "sender_full_name": "mw",
        "timestamp": 1597915217
    },
    {
        "content": "<p>(see <a href=\"https://github.com/rust-lang/rust/blob/1a22a0ff93d63f738151f096434e732466b4a42e/src/ci/docker/host-x86_64/x86_64-gnu-debug/Dockerfile#L29\">https://github.com/rust-lang/rust/blob/1a22a0ff93d63f738151f096434e732466b4a42e/src/ci/docker/host-x86_64/x86_64-gnu-debug/Dockerfile#L29</a>)</p>",
        "id": 207503761,
        "sender_full_name": "mw",
        "timestamp": 1597915263
    },
    {
        "content": "<p>It might be as easy as adding clang to the list of LLVM tools at: <br>\n<a href=\"https://github.com/rust-lang/rust/blob/1a22a0ff93d63f738151f096434e732466b4a42e/src/bootstrap/lib.rs#L172\">https://github.com/rust-lang/rust/blob/1a22a0ff93d63f738151f096434e732466b4a42e/src/bootstrap/lib.rs#L172</a><br>\nand setting <code>RUSTBUILD_FORCE_CLANG_BASED_TESTS</code> in an appropriate <code>dist</code> docker image.</p>",
        "id": 207504016,
        "sender_full_name": "mw",
        "timestamp": 1597915543
    },
    {
        "content": "<p>Although I am absolutely certain that it will not be as easy as just that <code>:)</code></p>",
        "id": 207504066,
        "sender_full_name": "mw",
        "timestamp": 1597915568
    },
    {
        "content": "<p>Well, we shouldn't just set <code>RUSTBUILD_FORCE_CLANG_BASED_TESTS</code>; presumably we should modify <code>src/bootstrap/native.rs</code> to add <code>\"clang\"</code> to <code>enabled_llvm_projects</code> on some subset of platforms.</p>",
        "id": 207504597,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597916016
    },
    {
        "content": "<p>And then yeah, there will almost certainly be other files that have to be shipped to make that usable. But it's worth a try.</p>",
        "id": 207504676,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597916062
    },
    {
        "content": "<p>Yes, of course, my proposal was not a clean solution, more something to point at the appropriate  bits that already exist in <code>bootstrap</code></p>",
        "id": 207504740,
        "sender_full_name": "mw",
        "timestamp": 1597916126
    },
    {
        "content": "<p>I'll give that a shot at some point, and see if I can make it work.</p>",
        "id": 207504819,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597916163
    },
    {
        "content": "<p>nice</p>",
        "id": 207504850,
        "sender_full_name": "mw",
        "timestamp": 1597916185
    },
    {
        "content": "<p>there's still quite some room for improvement for xLTO, especially when it comes to usability</p>",
        "id": 207504876,
        "sender_full_name": "mw",
        "timestamp": 1597916220
    },
    {
        "content": "<p>Yeah, we're a long way from <code>rustc foo.c bar.rs</code>. :)</p>",
        "id": 207504971,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597916294
    },
    {
        "content": "<p>But hopefully this will make it easier.</p>",
        "id": 207504991,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597916321
    }
]