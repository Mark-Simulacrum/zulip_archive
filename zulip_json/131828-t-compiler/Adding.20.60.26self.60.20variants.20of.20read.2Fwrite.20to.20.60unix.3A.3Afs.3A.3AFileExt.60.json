[
    {
        "content": "<p>Hello -- this is my first time using Zulip, please redirect if I'm in the wrong place.</p>\n<p>The default <code>std::fs::File</code> functions <code>read()</code> and <code>write()</code> come from <code>std::io::</code> traits, which are <code>&amp;mut self</code>. This is unnecessarily strict on UNIX platforms, which allow concurrent read/write to the same file descriptor. The internal implementation in <code>library/std/src/sys/unix/fs.rs</code> uses <code>&amp;self</code>, so I wonder if it might be possible to expose this capability in the <code>std::os::unix::fs::FileExt</code> trait. I think I could put together a PR, but I'm reluctant to go through the FCP and stabilization requirements documented in the contribution guide. Is there a low-overhead contribution process for stdlib additions that are unlikely to have compatibility problems?</p>",
        "id": 205212521,
        "sender_full_name": "John Millikin",
        "timestamp": 1595927097
    },
    {
        "content": "<p>My main concern is that these <code>*Ext</code> traits appear to be user-implementable, so I don't know if adding new functions counts as a backwards-incompatible change.</p>",
        "id": 205212768,
        "sender_full_name": "John Millikin",
        "timestamp": 1595927288
    },
    {
        "content": "<p>I don't think this is necessary as <code>&amp;File</code> already implements<code>Read</code> and <code>Write</code></p>",
        "id": 205212848,
        "sender_full_name": "lcnr",
        "timestamp": 1595927390
    },
    {
        "content": "<p>And getting an <code>&amp;mut &amp;File</code> is always possible as<code>&amp;File</code> is <code>Copy</code></p>",
        "id": 205212922,
        "sender_full_name": "lcnr",
        "timestamp": 1595927417
    },
    {
        "content": "<p>I don't understand what you mean, sorry. Given a <code>fp: &amp;std::fs::File</code>, how would you recommend I use that reference to write data to it?</p>",
        "id": 205213094,
        "sender_full_name": "John Millikin",
        "timestamp": 1595927556
    },
    {
        "content": "<p>On UNIX the type is semantically <code>fn write(&amp;self, buf: &amp;[u8})</code> -- the <code>&amp;mut self</code> comes from the <code>std::fs::File</code> wrapper.</p>",
        "id": 205213143,
        "sender_full_name": "John Millikin",
        "timestamp": 1595927614
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"p\">{</span><span class=\"n\">Read</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Write</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">use_me</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">v</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">File</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 205213217,
        "sender_full_name": "lcnr",
        "timestamp": 1595927655
    },
    {
        "content": "<p>See here <a href=\"https://doc.rust-lang.org/nightly/std/fs/struct.File.html#impl-Read-1\">https://doc.rust-lang.org/nightly/std/fs/struct.File.html#impl-Read-1</a></p>",
        "id": 205213260,
        "sender_full_name": "lcnr",
        "timestamp": 1595927693
    },
    {
        "content": "<p>and</p>\n<blockquote>\n<p>Note that, although read and write methods require a &amp;mut File, because of the interfaces for Read and Write, the holder of a &amp;File can still modify the file, either through methods that take &amp;File or by retrieving the underlying OS object and modifying the file that way. Additionally, many operating systems allow concurrent modification of files by different processes. Avoid assuming that holding a &amp;File means that the file will not change.</p>\n</blockquote>",
        "id": 205213272,
        "sender_full_name": "lcnr",
        "timestamp": 1595927704
    },
    {
        "content": "<p>Ah, I see, so the type becomes <code>&amp;mut &amp;File</code>, and the read/write functions are available through that?</p>",
        "id": 205213382,
        "sender_full_name": "John Millikin",
        "timestamp": 1595927779
    },
    {
        "content": "<p>yeah <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 205213387,
        "sender_full_name": "lcnr",
        "timestamp": 1595927788
    },
    {
        "content": "<p>I understand, that does make sense, thank you! You can probably tell I'm fairly new to this, so I didn't realize a double-pointer could be used in that way.</p>",
        "id": 205213414,
        "sender_full_name": "John Millikin",
        "timestamp": 1595927824
    },
    {
        "content": "<p>No worries, rust has some abstractions which (while often clever), aren't really intuitive if you don't already know them. So it's fine to miss them and ask questions</p>",
        "id": 205213605,
        "sender_full_name": "lcnr",
        "timestamp": 1595927974
    },
    {
        "content": "<blockquote>\n<p>rust has some abstractions</p>\n</blockquote>\n<p>from what I have seen, most languages do</p>",
        "id": 205213635,
        "sender_full_name": "lcnr",
        "timestamp": 1595927995
    },
    {
        "content": "<p>See also <a href=\"https://stackoverflow.com/q/31503488/155423\">Why is it possible to implement Read on an immutable reference to File?</a>.</p>",
        "id": 205238668,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1595944846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325706\">@John Millikin</span> It's worth finding out early that a reference is not always necessarily a pointer. It can be, but Rust can also optimize that away.</p>",
        "id": 206544383,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1597127989
    }
]