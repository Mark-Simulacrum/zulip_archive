[
    {
        "content": "<p>We recently noticed that slices in extern \"C\" headers are represented differently:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">__enzyme_autodiff</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">d_a</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//...</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">declare</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">__enzyme_autodiff</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"n\">unnamed_addr</span><span class=\"w\"> </span>#<span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"n\">define</span><span class=\"w\"> </span><span class=\"n\">internal</span><span class=\"w\"> </span><span class=\"n\">float</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">_ZN4test4test17hcb9908069376019fE</span><span class=\"p\">([</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">float</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">nonnull</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">unnamed_addr</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">dbg</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"mi\">316</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Why is the compiler generating <code>{ i64, i64 }</code> rather than <code>{ pointer, length }</code> ?<br>\nEven if the slice implementation might change, I guess that these two informations must always be available?<br>\nAt least we stabilized <code>len()</code> and <code>as_ptr()</code> for slice.<br>\nLeaving the warning there would be totally fine for me but the current behavior doesn't make sense to me, what reason am I missing?<br>\nWe generate the implementation of __enzyme_autodiff based on the llvm-ir code of the test function.</p>",
        "id": 248586101,
        "sender_full_name": "Manuel Drehwald",
        "timestamp": 1628240054
    },
    {
        "content": "<p><code>&amp;[T]</code> is not FFI safe. You are only allowed to use it with the unstable rust abi, not the C abi. In this particular case I think the C abi code saw a 2 register big struct and thus casted the value to two register sized integers per the x86_64 System-V abi I think.</p>",
        "id": 248586492,
        "sender_full_name": "bjorn3",
        "timestamp": 1628240371
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler/rustc_target/src/abi/call/x86_64.rs#L59-L76\">https://github.com/rust-lang/rust/blob/1f94abcda6884893d4723304102089198caa0839/compiler/rustc_target/src/abi/call/x86_64.rs#L59-L76</a></p>",
        "id": 248586765,
        "sender_full_name": "bjorn3",
        "timestamp": 1628240540
    },
    {
        "content": "<p>Enzyme is an llvm plugin not a rustc plugin, so I think we have to stick to the C abi, rather than the unstable rust abi.<br>\nThanks for the link.<br>\nI can understand that it's generally undesired to expose internals.<br>\nHowever, I'm having a hard time understanding why the generation of <code>{ pointer, length }</code> in this case here could be an issue.<br>\nDue to already stabilized methods slices must always support this behavior.<br>\nThere are afaik no cases where the current behavior helps users, but users like Enzyme would benefit from the new information.</p>",
        "id": 248587797,
        "sender_full_name": "Manuel Drehwald",
        "timestamp": 1628241310
    },
    {
        "content": "<p>The problem is that the ABI of slices is not stable. Only the API is stable.</p>",
        "id": 248587967,
        "sender_full_name": "bjorn3",
        "timestamp": 1628241437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/slices.20.2F.20vectors.20in.20extern.20.22C.22/near/248587967\">said</a>:</p>\n<blockquote>\n<p>The problem is that the ABI of slices is not stable. Only the API is stable.</p>\n</blockquote>\n<p>the diagnostic from <code>improper_ctypes</code> probably should include that detail, right? I mean, sure, the current one (“slices have no C equivalent”), makes sense, but someone who doesn’t realize that the Rust ABI is unstable might make similar inferences to the ones made in the dialogue on this topic.</p>",
        "id": 248640102,
        "sender_full_name": "pnkfelix",
        "timestamp": 1628270008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"348574\">Manuel Drehwald</span> <a href=\"#narrow/stream/131828-t-compiler/topic/slices.20.2F.20vectors.20in.20extern.20.22C.22/near/248586101\">said</a>:</p>\n<blockquote>\n<p>Even if the slice implementation might change, I guess that these two informations must always be available?<br>\nAt least we stabilized <code>len()</code> and <code>as_ptr()</code> for slice.</p>\n</blockquote>\n<p>You can store two values inside one integer with some cleverness. Cleverness that might be unwise, but nonetheless, the mere presence of a method should not be considered equivalent to a data layout guarantee, and the latter is what an ABI is.</p>",
        "id": 248685878,
        "sender_full_name": "Jubilee",
        "timestamp": 1628298289
    },
    {
        "content": "<p>I don't think that's practical, though, those tricks can be... academic. A more practical example: an ABI guarantee would prevent storing those values but in an \"out of band\" fashion. I could see that being made to happen for the length in cases where the slice started life as a pointer to an array.</p>",
        "id": 248687025,
        "sender_full_name": "Jubilee",
        "timestamp": 1628299421
    }
]