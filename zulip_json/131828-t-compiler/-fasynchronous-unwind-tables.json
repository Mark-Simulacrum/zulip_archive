[
    {
        "content": "<p>Anyone know anything about <code>-fasynchronous-unwind-tables</code>? Do we expose this option in compiling rustc? In particular, i'm trying to use perf but none of the <code>--call-graph</code> options seem to be giving me the data I want (even with frame pointers enabled). <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> tells me that maybe I need to enable \"asyncronous unwind tables\" since sampling can occur at any point in time, and our dwarf data may not be prepared for that.</p>",
        "id": 151043845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544130562
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> seems like something you might know :)</p>",
        "id": 151043852,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544130571
    },
    {
        "content": "<p>I donâ€™t know about asynchronous unwind tables, but it also seems weird to me that you would need it, unless you are profiling unwinding...</p>",
        "id": 151046275,
        "sender_full_name": "nagisa",
        "timestamp": 1544132791
    },
    {
        "content": "<p>Looks like it's just the <code>uwtable</code> attribute in LLVM, set here in rustc -- <a href=\"https://github.com/rust-lang/rust/blob/118e052d84157a675649fe640e3d56f264475a3a/src/librustc_codegen_llvm/attributes.rs#L162-L181\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/118e052d84157a675649fe640e3d56f264475a3a/src/librustc_codegen_llvm/attributes.rs#L162-L181\">https://github.com/rust-lang/rust/blob/118e052d84157a675649fe640e3d56f264475a3a/src/librustc_codegen_llvm/attributes.rs#L162-L181</a></p>",
        "id": 151050721,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1544137495
    },
    {
        "content": "<p>some targets have it on by default like windows, but there's currently no CLI flag to turn it on by default</p>",
        "id": 151050726,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1544137505
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> for better debuginfo we'd need to add a CLI flag to turn it on by default for the compilation at hand</p>",
        "id": 151050734,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1544137519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> hmm but that code says:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">().</span><span class=\"n\">no_landing_pads</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">().</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">requires_uwtable</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I presume <code>no_landing_pads</code> means <code>-Cpanic=abort</code>? In that case, aren't we enabling this attribute for the compiler anyway, since we don't build with that option?</p>",
        "id": 151099222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544175382
    },
    {
        "content": "<p>You can make yourself a custom target that derives the primary target and sets \"requires_uwtable\"?</p>",
        "id": 151103325,
        "sender_full_name": "nagisa",
        "timestamp": 1544180391
    },
    {
        "content": "<p>if <code>no_landing_pads</code> are specified, the attribute is not added because it has no value whatsoever then</p>",
        "id": 151103383,
        "sender_full_name": "nagisa",
        "timestamp": 1544180412
    },
    {
        "content": "<p>(given that there are no unwind targets)</p>",
        "id": 151103391,
        "sender_full_name": "nagisa",
        "timestamp": 1544180425
    },
    {
        "content": "<p>well, that's not clear</p>",
        "id": 151104687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544182022
    },
    {
        "content": "<p>in particular, for profiling, we may need to walk the stack back at arbitrary spots</p>",
        "id": 151104700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544182035
    },
    {
        "content": "<p>and I gather that this attribute is relevant then (at least <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> thought so)</p>",
        "id": 151104705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544182044
    },
    {
        "content": "<p>so we may want a way to force it on <em>even if</em> there is no unwinding</p>",
        "id": 151104709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544182061
    },
    {
        "content": "<p>Conclusion was that LLVM/Clang don't actually implement asynchronous-unwind-tables, unlike gcc</p>",
        "id": 151110673,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1544188962
    }
]