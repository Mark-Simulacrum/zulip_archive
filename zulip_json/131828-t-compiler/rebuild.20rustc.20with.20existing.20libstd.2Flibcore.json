[
    {
        "content": "<p>FWIW, another thing I'd love to see (not sure if it exists already) is a way to rebuild rustc but use it with an existing libstd/libcore - which isn't possible for all changes, but I think would be good enough to test small changes.</p>",
        "id": 204286024,
        "sender_full_name": "comex",
        "timestamp": 1595051232
    },
    {
        "content": "<p>I'm interested in both \"build libstd/libcore, but only once, not every time I change anything in rustc\" and \"don't build libstd/libcore at all, just use the one from the rustup nightly\".</p>",
        "id": 204286090,
        "sender_full_name": "comex",
        "timestamp": 1595051371
    },
    {
        "content": "<p>Again, I have limited experience with building rustc, so I don't know if this is possible already somehow.</p>",
        "id": 204286132,
        "sender_full_name": "comex",
        "timestamp": 1595051412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198590\">@comex</span> I believe the path forward for stuff like that is your second point, more than the first. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> and I have discussed it before, but idk if anyone has made any progress in allowing  the use of rustup nightly (or more realistically, last PR build)</p>",
        "id": 204286848,
        "sender_full_name": "eddyb",
        "timestamp": 1595052919
    },
    {
        "content": "<p>if you change something in <code>rustc</code>, it'd be unsound in general to use a stale core/std build</p>",
        "id": 204286883,
        "sender_full_name": "eddyb",
        "timestamp": 1595052963
    },
    {
        "content": "<p>I've recently observed some strange behavior arising from the fact that stage1-* doesn't get entirely nuked whenever I rebuild rustc</p>",
        "id": 204286905,
        "sender_full_name": "eddyb",
        "timestamp": 1595052987
    },
    {
        "content": "<p>I guess I should've filed an issue</p>",
        "id": 204286906,
        "sender_full_name": "eddyb",
        "timestamp": 1595052991
    },
    {
        "content": "<p>at best, it ICEs because of some incoherence. at worst, it generates broken code that behaves incorrectly at runtime</p>",
        "id": 204286917,
        "sender_full_name": "eddyb",
        "timestamp": 1595053044
    },
    {
        "content": "<p>Still, when the goal is to make the edit-compile-run cycle as fast as possible, and the change might be something as simple as \"add a println somewhere\"...</p>",
        "id": 204286992,
        "sender_full_name": "comex",
        "timestamp": 1595053191
    },
    {
        "content": "<p>but it's like 40 seconds</p>",
        "id": 204287035,
        "sender_full_name": "eddyb",
        "timestamp": 1595053209
    },
    {
        "content": "<p>maybe I'm still getting used to how fast building rustc is nowadays (with incremental), heh</p>",
        "id": 204287042,
        "sender_full_name": "eddyb",
        "timestamp": 1595053254
    },
    {
        "content": "<p>Don't know.  I haven't built rustc very often :)</p>",
        "id": 204287046,
        "sender_full_name": "comex",
        "timestamp": 1595053270
    },
    {
        "content": "<p>But I do work on Clang from time to time, and I'm used to Clang incremental builds being like 10-20 seconds total, and I think that's slow.</p>",
        "id": 204287048,
        "sender_full_name": "comex",
        "timestamp": 1595053295
    },
    {
        "content": "<p>40 seconds is about the time it takes to build core/std from scratch, that is. maybe 2 minutes on less capable machines? not sure</p>",
        "id": 204287049,
        "sender_full_name": "eddyb",
        "timestamp": 1595053299
    },
    {
        "content": "<p>and I tend to run everything through the entire test suite anyway, so it's not like the risks are worth the fraction that is taken up by core/std</p>",
        "id": 204287099,
        "sender_full_name": "eddyb",
        "timestamp": 1595053334
    },
    {
        "content": "<p>Another thing...</p>",
        "id": 204287104,
        "sender_full_name": "comex",
        "timestamp": 1595053367
    },
    {
        "content": "<p>I also want to be able to build rustc in debug mode, without the cost of building libcore/libstd with rustc in debug mode.</p>",
        "id": 204287109,
        "sender_full_name": "comex",
        "timestamp": 1595053386
    },
    {
        "content": "<p>why? I don't know anyone who actually uses that except to debug maybe some \"rustc calling into LLVM\" failures</p>",
        "id": 204287118,
        "sender_full_name": "eddyb",
        "timestamp": 1595053413
    },
    {
        "content": "<p>It's faster, isn't it?  (If the actual debug info level is held constant.  I just mean the optimization level.)</p>",
        "id": 204287158,
        "sender_full_name": "comex",
        "timestamp": 1595053443
    },
    {
        "content": "<p>I mean using debug rustc. it's only there in case something really bad happens and there's no normal way to handle it</p>",
        "id": 204287177,
        "sender_full_name": "eddyb",
        "timestamp": 1595053467
    },
    {
        "content": "<p>once we move to <code>tracing</code>, most of my gripes with the debug logging should go away, due to the hierarchical nesting information</p>",
        "id": 204287183,
        "sender_full_name": "eddyb",
        "timestamp": 1595053497
    },
    {
        "content": "<p>there's just no way to get that kind of detail from using an actual debugger</p>",
        "id": 204287190,
        "sender_full_name": "eddyb",
        "timestamp": 1595053517
    },
    {
        "content": "<p>not without us putting a lot of effort into integrating the rustc codebase with debuggers</p>",
        "id": 204287197,
        "sender_full_name": "eddyb",
        "timestamp": 1595053544
    },
    {
        "content": "<p>Well.  My primary interest is not actually a debugger but just building in unoptimized mode.</p>",
        "id": 204287251,
        "sender_full_name": "comex",
        "timestamp": 1595053609
    },
    {
        "content": "<p>it's not like LLVM where most stuff is fields and printable through a <code>-&gt;dump()</code> call or whatever</p>",
        "id": 204287252,
        "sender_full_name": "eddyb",
        "timestamp": 1595053613
    },
    {
        "content": "<p>I'd love if Rust had a better debugger experience but that's another matter :)</p>",
        "id": 204287256,
        "sender_full_name": "comex",
        "timestamp": 1595053637
    },
    {
        "content": "<p>it's not really about Rust, we're kind of limited by archaic tooling and don't have the bandwidth to develop our own</p>",
        "id": 204287259,
        "sender_full_name": "eddyb",
        "timestamp": 1595053667
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198590\">@comex</span> oh, sorry, that's <code>optimize = false</code> not <code>debug = true</code> and even less requested</p>",
        "id": 204287266,
        "sender_full_name": "eddyb",
        "timestamp": 1595053682
    },
    {
        "content": "<p>(in my opinion, traditional debuggers are fundamentally broken even for C++, since they can't instantiate functions at runtime.  Swift does this right.)</p>",
        "id": 204287298,
        "sender_full_name": "comex",
        "timestamp": 1595053685
    },
    {
        "content": "<p>or talked about at all</p>",
        "id": 204287300,
        "sender_full_name": "eddyb",
        "timestamp": 1595053686
    },
    {
        "content": "<p>does Swift have its own debugger?</p>",
        "id": 204287302,
        "sender_full_name": "eddyb",
        "timestamp": 1595053697
    },
    {
        "content": "<p>or does it do something fancy by integrating lldb and swiftc?</p>",
        "id": 204287305,
        "sender_full_name": "eddyb",
        "timestamp": 1595053705
    },
    {
        "content": "<p>The latter.</p>",
        "id": 204287306,
        "sender_full_name": "comex",
        "timestamp": 1595053709
    },
    {
        "content": "<p>I am jealous now</p>",
        "id": 204287314,
        "sender_full_name": "eddyb",
        "timestamp": 1595053716
    },
    {
        "content": "<p>but I guess I have previously suggested gdb/lldb could be connected up to miri somehow</p>",
        "id": 204287326,
        "sender_full_name": "eddyb",
        "timestamp": 1595053741
    },
    {
        "content": "<p>so that no JITing would be necessary</p>",
        "id": 204287329,
        "sender_full_name": "eddyb",
        "timestamp": 1595053758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198590\">@comex</span> anyway in practice, it's not worth it. even if you bypass building core/std, anything you build will still be really slow</p>",
        "id": 204287371,
        "sender_full_name": "eddyb",
        "timestamp": 1595053819
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> has good news regarding the cranelift backend, i.e. maybe it's less hopeless than LLVM</p>",
        "id": 204287383,
        "sender_full_name": "eddyb",
        "timestamp": 1595053848
    },
    {
        "content": "<p>(there's also MIR optimizations we haven't finished/turned on by default, or even started working on, which could take up the slack)</p>",
        "id": 204287393,
        "sender_full_name": "eddyb",
        "timestamp": 1595053876
    },
    {
        "content": "<p>Well, I don't know if the time spent just loading core makes this not worth it.  I did actually try this once, but I think I used <code>no_core</code> for the test case.</p>",
        "id": 204287395,
        "sender_full_name": "comex",
        "timestamp": 1595053880
    },
    {
        "content": "<p>it'd be useful for like maybe one test case</p>",
        "id": 204287400,
        "sender_full_name": "eddyb",
        "timestamp": 1595053898
    },
    {
        "content": "<p>But the thing I want to build in that case was a 10 line test case.</p>",
        "id": 204287402,
        "sender_full_name": "comex",
        "timestamp": 1595053910
    },
    {
        "content": "<p>in general it takes more time to write a <code>#![no_core]</code> testcase than the extra time it takes to build the compiler with optimizations :P</p>",
        "id": 204287449,
        "sender_full_name": "eddyb",
        "timestamp": 1595053942
    },
    {
        "content": "<p>Then it's still a win, because I only have to write the testcase once, but rebuild the compiler many times ;)</p>",
        "id": 204287460,
        "sender_full_name": "comex",
        "timestamp": 1595053964
    },
    {
        "content": "<p>oh wait</p>",
        "id": 204287472,
        "sender_full_name": "eddyb",
        "timestamp": 1595053981
    },
    {
        "content": "<p>if the test is <code>#![no_core]</code> you can just set <code>optimize = false</code> and just don't build core/std</p>",
        "id": 204287479,
        "sender_full_name": "eddyb",
        "timestamp": 1595054001
    },
    {
        "content": "<p><code>./x.py build --stage 0 src/rustc</code> or something should be enough (the explicit <code>src/rustc</code> is to account for this MCP)</p>",
        "id": 204287485,
        "sender_full_name": "eddyb",
        "timestamp": 1595054034
    },
    {
        "content": "<p>Yeah, I actually did do something like that.  I forget which command I used.  But I was hoping I could get a similar effect while still being able to use <code>core</code>, by reusing an existing built one.</p>",
        "id": 204287526,
        "sender_full_name": "comex",
        "timestamp": 1595054052
    },
    {
        "content": "<p>But as I said, maybe it takes a long time just to load the serialized data or something; I haven't tried.</p>",
        "id": 204287536,
        "sender_full_name": "comex",
        "timestamp": 1595054093
    },
    {
        "content": "<p>it's risky but I guess <code>--keep-std</code> could be offered as a non-broken version of <code>--keep-stage</code> (the latter which likes to break your build directory until you nuke most of it...)</p>",
        "id": 204287537,
        "sender_full_name": "eddyb",
        "timestamp": 1595054096
    },
    {
        "content": "<p>it's mostly loaded on-demand, which actually matters, e.g. I remember cutting 4 seconds off the hello world compile time on raspberry pi lol</p>",
        "id": 204287556,
        "sender_full_name": "eddyb",
        "timestamp": 1595054123
    },
    {
        "content": "<p>I see.  well, maybe \"less broken\" :)</p>",
        "id": 204287596,
        "sender_full_name": "comex",
        "timestamp": 1595054163
    },
    {
        "content": "<p>one of the reasons I'm opposed is you could gain minutes but lose hours if you touch one of many things that would actually result in a different core/std. I wish there was a way to tell if the only change between two builds is one has more debug logging <em>sigh</em></p>",
        "id": 204287632,
        "sender_full_name": "eddyb",
        "timestamp": 1595054279
    },
    {
        "content": "<p>Fair enough...</p>",
        "id": 204287674,
        "sender_full_name": "comex",
        "timestamp": 1595054338
    },
    {
        "content": "<p>but I guess if it warns that it's not rebuilding core/std and explains what could go wrong, every single time... it shouldn't be that bad</p>",
        "id": 204287692,
        "sender_full_name": "eddyb",
        "timestamp": 1595054384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/rebuild.20rustc.20with.20existing.20libstd.2Flibcore/near/204287383\">said</a>:</p>\n<blockquote>\n<p>maybe <span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> has good news regarding the cranelift backend, i.e. maybe it's less hopeless than LLVM</p>\n</blockquote>\n<p>Compile time is better, but runtime is slightly worse than even LLVM debug mode. Rustc is normally always built with optimizations, as it can then compile later stages much (up to 10x) faster.</p>",
        "id": 204298106,
        "sender_full_name": "bjorn3",
        "timestamp": 1595073976
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 204298238,
        "sender_full_name": "lqd",
        "timestamp": 1595074293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> alright, thanks for the clarification!</p>",
        "id": 204298288,
        "sender_full_name": "eddyb",
        "timestamp": 1595074356
    },
    {
        "content": "<blockquote>\n<p>I'm interested in both \"build libstd/libcore, but only once, not every time I change anything in rustc\" and \"don't build libstd/libcore at all, just use the one from the rustup nightly\".</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"198590\">@comex</span> this is <code>build --stage 1 src/libstd --keep-stage 1</code>. But I've heard it might break things in the standard library.</p>",
        "id": 204299355,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595076413
    },
    {
        "content": "<p>Oh whoops <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> already mentioned that</p>",
        "id": 204299415,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595076516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> looks like this topic is also orphaned from an MCP, idk where it belongs</p>",
        "id": 204300874,
        "sender_full_name": "eddyb",
        "timestamp": 1595079315
    },
    {
        "content": "<p>probably <a class=\"stream\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler\">#t-compiler</a> would be fine</p>",
        "id": 204300879,
        "sender_full_name": "eddyb",
        "timestamp": 1595079333
    },
    {
        "content": "<p>yeah that was my thought</p>",
        "id": 204300885,
        "sender_full_name": "simulacrum",
        "timestamp": 1595079341
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"233931\" href=\"/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/rebuild.20rustc.20with.20existing.20libstd.2Flibcore\">#t-compiler/major changes &gt; rebuild rustc with existing libstd/libcore</a> by <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span></p>",
        "id": 204300889,
        "sender_full_name": "Notification Bot",
        "timestamp": 1595079349
    },
    {
        "content": "<p>thanks!</p>",
        "id": 204300934,
        "sender_full_name": "eddyb",
        "timestamp": 1595079376
    }
]