[
    {
        "content": "<p>Why is <code>MyEnum</code> represented with 2 bytes in this code?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">MyEnum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"bool: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\">     </span><span class=\"c1\">// bool: 1</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"MyEnum: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">MyEnum</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"> </span><span class=\"c1\">// MyEnum: 2</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>You only need one bit to represent <code>bool</code> so why isn't the tag packed into one byte with the <code>bool</code> like with <code>Option&lt;&amp;'a T&gt;</code>?</p>",
        "id": 222515920,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610497914
    },
    {
        "content": "<p>Background: I was reading and responding to <a href=\"https://internals.rust-lang.org/t/pre-rfc-multiple-if-let-guards-not-chaining/13818/10\">this forum post</a> and while playing around with types like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">EnumRef</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">EnumOwned</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and showing how <code>EnumRef</code> needs only 8 bytes while <code>EnumOwned</code> needs 16, I realized that <code>enum MyEnum { Foo(bool), Bar(bool) }</code> wasn't being optimized the way I expected. <code>enum MyEnum { Foo, Bar(bool) }</code> <em>is</em> packed into one byte, but not where both variants contain <code>bool</code>s.</p>",
        "id": 222516234,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610498102
    },
    {
        "content": "<p>Is it just that that optimization hasn't been implemented?</p>",
        "id": 222516245,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610498115
    },
    {
        "content": "<p>Off the top of my head (not being someone who's implemented this sort of thing) I can't think of a reason why <code>enum MyEnum { Foo(bool), Bar(bool) }</code> can't be represented in one byte, other than making the compiler more complex. (And without that, where's the fun? ;)</p>",
        "id": 222516352,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610498187
    },
    {
        "content": "<p>this isn't implemented yet</p>",
        "id": 222517247,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610498877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Camelid</span> <a href=\"#narrow/stream/131828-t-compiler/topic/enum.20of.20bool.20tag.20packing/near/222516352\">said</a>:</p>\n<blockquote>\n<p>Off the top of my head (not being someone who's implemented this sort of thing) I can't think of a reason why <code>enum MyEnum { Foo(bool), Bar(bool) }</code> can't be represented in one byte</p>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">get_bool</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">e</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"nc\">MyEnum</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span> <span class=\"kt\">bool</span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">MyEnum</span>::<span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">MyEnum</span>::<span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is the reason this is not possible: you need the full size of a <code>bool</code> reserved for a payload so that this projection holds, which leaves no room for the discriminant (hence the need for an extra byte)</p>",
        "id": 222517999,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1610499469
    },
    {
        "content": "<p>hmm, why does it work for one variant then?</p>",
        "id": 222518069,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610499509
    },
    {
        "content": "<p>ah, right, this can't work because <code>bool</code> can only be 0 or 1</p>",
        "id": 222518147,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610499582
    },
    {
        "content": "<p>If you have something like <code>Option&lt;bool&gt;</code>, the <code>None</code> variant does not have to store a <code>bool</code>, so we can use any bit pattern that's not a valid <code>bool</code> to encode <code>None</code></p>",
        "id": 222518269,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610499653
    },
    {
        "content": "<p>You can also demonstrate the problem with a <code>&amp;mut bool</code> to the payload -- writes through that mutable reference will overwrite the whole byte.</p>",
        "id": 222521740,
        "sender_full_name": "scottmcm",
        "timestamp": 1610502282
    },
    {
        "content": "<p>There's often conversation about \"copy-only fields\" or similar, so you could mark fields as not directly referencable, and then layout optimizations like this would work.</p>",
        "id": 222521932,
        "sender_full_name": "scottmcm",
        "timestamp": 1610502436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Thanks for explaining it with <code>&amp;mut bool</code> â€“ for some reason that's what made it click for me :)</p>",
        "id": 222528668,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610508798
    },
    {
        "content": "<p>I think I was thinking too high-level about references and forgot that they're just pointers under the hood <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 222528684,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610508827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/enum.20of.20bool.20tag.20packing/near/222518069\">said</a>:</p>\n<blockquote>\n<p>hmm, why does it work for one variant then?</p>\n</blockquote>\n<p>I'm guessing a single-variant enum is treated like a struct and thus doesn't have a tag?</p>",
        "id": 222528759,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610508888
    },
    {
        "content": "<p>Yup.  You'll see that with things like <code>Result&lt;i32, std::convert::Infallible&gt;</code> too.</p>",
        "id": 222534058,
        "sender_full_name": "scottmcm",
        "timestamp": 1610514100
    },
    {
        "content": "<p>(You can also think of it as being a 0-bit tag, aka a ZST, which ends up not affecting layout)</p>",
        "id": 222534123,
        "sender_full_name": "scottmcm",
        "timestamp": 1610514134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/enum.20of.20bool.20tag.20packing/near/222521740\">said</a>:</p>\n<blockquote>\n<p>You can also demonstrate the problem with a <code>&amp;mut bool</code> to the payload -- writes through that mutable reference will overwrite the whole byte.</p>\n</blockquote>\n<p>Actually, how does that explain why the optimization can be applied on this code?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">MyEnum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"bool: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\">     </span><span class=\"c1\">// bool: 1</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"MyEnum: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">size_of</span>::<span class=\"o\">&lt;</span><span class=\"n\">MyEnum</span><span class=\"o\">&gt;</span><span class=\"p\">());</span><span class=\"w\"> </span><span class=\"c1\">// MyEnum: 1</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222534375,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610514375
    },
    {
        "content": "<p>I guess I still don't understand :/</p>",
        "id": 222534680,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610514695
    },
    {
        "content": "<p>At least it means there's more to learn! :)</p>",
        "id": 222535206,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610515191
    },
    {
        "content": "<p>If you see either 0 or 1 you know you have a <code>Bar</code></p>",
        "id": 222551820,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1610528535
    },
    {
        "content": "<p>I think the idea is that in that case the bytes 0, 1 are the two valid values for <code>Bar</code> and we can use _any_ other value for <code>Foo</code> (like 0xFF).</p>",
        "id": 222551821,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1610528535
    },
    {
        "content": "<p>If you had two different bool valued constructors packed into one byte, which would it be?</p>",
        "id": 222551859,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1610528559
    },
    {
        "content": "<p>There is one case that would be interesting, though:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(u8)]</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">Bool23</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">MyEnum</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"n\">Bool23</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>All the inhabitants of <code>Bool23</code> are niches of <code>bool</code>, and <em>vice versa</em>, so discriminant elision could apply (which is what happens for <code>Option&lt;NonZeroâ€¦&gt;</code> and the like: the inhabitants of \"<code>None</code>'s payload\", a ZST, trivially occupy the non-empty set of niches of <code>NonZeroâ€¦</code>).</p>",
        "id": 222566943,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1610537510
    },
    {
        "content": "<p>That seems, well, too <em>niche</em> for extending the niche optimization <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 222567214,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610537679
    },
    {
        "content": "<p>(the existing optimization is already of somewhat questionable utility in some cases, apparently)</p>",
        "id": 222567242,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610537700
    },
    {
        "content": "<p>Could <code>repr(packed)</code> on the enum with two plain bools be allowed to perform the packing? I seem to remember that taking references to fields of packed structs is not safe, so maybe sth similar would work with enums?</p>",
        "id": 222607050,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610555374
    },
    {
        "content": "<p>references can make a slightly more realistic example of mutually-niche variants, if we include unaligned values in the niche:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">MyEnum</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Foo</span><span class=\"p\">(</span><span class=\"kt\">bool</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// must be 0 or 1</span>\n<span class=\"w\">    </span><span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">u16</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// must be !0 and even</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 222619570,
        "sender_full_name": "cuviper",
        "timestamp": 1610560341
    },
    {
        "content": "<p>Okay, I <em>think</em> I understand now. I think I forgot that you can only fetch a single byte at a time, so if you (e.g.) had one bit represent the tag and another represent the boolean value, in order to check the tag you would need <em>three</em> instructions (a fetch, an and, and the comparison) instead of just two (a fetch and a comparison). And when constructing the value you would also need to use an and. And you may have padding anyway which means this kind of optimization would be worse than no optimization.</p>",
        "id": 222679201,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610598707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Do you know of any active efforts on the \"copy-only fields\" idea?</p>",
        "id": 222689090,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610612094
    },
    {
        "content": "<p>I would love to see that.</p>",
        "id": 222689097,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610612101
    },
    {
        "content": "<p>There's a proposal for bitfields, which also won't support references, so there might be common elements there.</p>",
        "id": 222689167,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610612142
    },
    {
        "content": "<p>I don't think we have anything active - it would be good to at least get a lang design note going though!</p>",
        "id": 222703851,
        "sender_full_name": "simulacrum",
        "timestamp": 1610622397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> No, I don't know any either.  The bitfield RFC that got posted does seem like an interesting place to push it, though, since it'll be doing similar things.</p>",
        "id": 222740233,
        "sender_full_name": "scottmcm",
        "timestamp": 1610640995
    },
    {
        "content": "<p>I don't want to expand the scope of that RFC. I just mentioned it because it may provide useful infrastructure.</p>",
        "id": 222760374,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610648781
    },
    {
        "content": "<p>I think it needs to solve similar problems, but beyond that, I agree that expanding scope is not necessary. I would expect the RFC (haven't read) to address the question of uniformity with a potential copy-only fields, though, I think -- it may be that there's no real overlap.</p>",
        "id": 222765529,
        "sender_full_name": "simulacrum",
        "timestamp": 1610650843
    },
    {
        "content": "<p>Yeah, poorly phrased on my part.  I agree that \"guaranteed to match C\" and \"optimized in repr(rust)\" are different-enough surface features to be separate RFCs, even if they both use similar layout code internally.</p>",
        "id": 222788091,
        "sender_full_name": "scottmcm",
        "timestamp": 1610660250
    }
]