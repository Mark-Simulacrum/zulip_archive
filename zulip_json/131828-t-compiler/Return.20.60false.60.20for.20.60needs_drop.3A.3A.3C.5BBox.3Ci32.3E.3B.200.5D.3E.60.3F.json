[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/65348\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65348\">#65348</a> is a backwards compatibility hazard with the new, dataflow-based const validator. An elegant fix for this problem (and for  <a href=\"https://github.com/rust-lang/rust/issues/64945\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64945\">#64945</a> as well)  would be to return <code>false</code> for the <code>needs_drop</code> query for all zero-sized arrays, regardless of the type contained within. Is this reasonable? I could duplicate the logic for<code>needs_drop</code> in <code>qualify_consts.rs</code> and make the modification there--const validation is fairly aggressive about ignoring frivolous <code>Drop</code> impls--but changing the result of the query proper might have ancillary benefits.</p>",
        "id": 178008382,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570917694
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/issues/65389\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65389\">#65389</a>. This caused 5 codegen test failures locally due to missed optimizations when iterating over slices. I have no idea why though. The generated MIR was the same for the two that I checked, so the problem must occur when generating LLVM IR?</p>",
        "id": 178051765,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1570995500
    },
    {
        "content": "<p>I rebased on the latest master (I was on a pretty old one) and rebuilt LLVM. The problem seems to have gone away, and my PR passes CI. No idea what the root cause was.</p>",
        "id": 178059013,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1571007818
    },
    {
        "content": "<blockquote>\n<p>return false for the needs_drop query for all zero-sized arrays, regardless of the type contained within. Is this reasonable?</p>\n</blockquote>\n<p>Why wouldn't it be? An empty array has no fields, so why would those types need drop glue ?</p>",
        "id": 178083315,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571041721
    },
    {
        "content": "<p>In a sense, an empty array is like a <code>struct Foo&lt;T&gt;(PhantomData&lt;T&gt;);</code> which shouldn't need drop glue either for any <code>T</code> (modulo some nits, where <code>T</code> actually impacts the alignment of the array, even if it is zero-sized).</p>",
        "id": 178083332,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571041743
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 178083359,
        "sender_full_name": "gnzlbg",
        "timestamp": 1571041782
    }
]