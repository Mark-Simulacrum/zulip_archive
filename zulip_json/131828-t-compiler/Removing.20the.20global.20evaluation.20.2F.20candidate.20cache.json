[
    {
        "content": "<p>The (global) evaluation cache has been a source of several different problems related to incremental compilation (<a href=\"https://github.com/rust-lang/rust/pull/83220\">https://github.com/rust-lang/rust/pull/83220</a> and <a href=\"https://github.com/rust-lang/rust/issues/83538\">https://github.com/rust-lang/rust/issues/83538</a> for example)</p>\n<p>Recently,  another issue has come up: <a href=\"https://github.com/rust-lang/rust/issues/92987#issuecomment-1014253654\">https://github.com/rust-lang/rust/issues/92987#issuecomment-1014253654</a> . It involves a complicated interaction between the evaluation cache, the 'provisional' cycle cache, and the way we handle anonymous dep nodes.</p>\n<p>As far as I can tell, the concept of anon dep nodes exists entirely to support this (apart from <code>erase_region_ty</code>, which has <code>anon</code> purely for performance reasons). If we no longer needed global caches that needed to store <code>DepNode</code>s, then we could eliminate quite a bit of complexity from the compiler.</p>\n<p>My thinking is that we could try to replace the uses of the cache with query invocations. When any inference variables are present in the key, we could continue to use the <code>InferCtxt</code>-local candidate and evaluation caches. Since the global caches currently store un-canonicalized <code>ParamEnv</code>s and <code>Predicate</code>s, I think we might <em>just</em> be able to invoke a normal query.</p>\n<p>The biggest challenges would probably be avoiding query cycles, and retaining the current performance. Right now, I believe we only invoke the <code>evaluate_obligation</code> query from outside of trait selection (we invoke it during fulfillment, and in some scattered places throughout the compiler). If we start invoking an evaluation query from within the trait selection code, we'll need to ensure that we don't trigger a cycle.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> <span class=\"user-mention\" data-user-id=\"124287\">@mw</span></p>",
        "id": 268312873,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642451475
    },
    {
        "content": "<p>I <em>think</em> that we only use <code>EvaluatedToOkModuloRegions</code> as a signal that we need to take a 'slow path' with <code>FulfillmentContext</code> (we don't actually care about any region constraints generated during evaluation), so adding in extra queries wouldn't break region handling</p>",
        "id": 268313111,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642451727
    },
    {
        "content": "<p>Performance-wise, the biggest issue would probably be the loss of candidate caching during <code>SelectionContext.select</code> calls</p>",
        "id": 268313186,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642451800
    },
    {
        "content": "<p>We should probably take a step back and adress the more general problem of cycles.  We could extend the current system when we have cycles whose components are all of the same query.  Basically, the scheme would be:</p>\n<ol>\n<li>from <code>query(key)</code>, compute its direct dependencies: <code>deps = [k...]</code> where the dependency is <code>query(k)</code>, recursively into a graph;</li>\n<li>compute SCC on this graph <code>key -&gt; deps</code>;</li>\n<li>when <code>key</code> is not a cycle, invoke a \"direct\" provider function <code>query(key) := direct_call(key, [(k, query(k)) for k in deps])</code>;</li>\n<li>when <code>key</code> is in a cycle, invoke a \"cycle\" provider function <code>[query(k) for k in deps] := cycle_call(deps)</code>.</li>\n</ol>\n<p>The dep-graph would be:</p>\n<ul>\n<li>a specific (anon? dedicated name?) DepNode <code>D</code> for step 1,</li>\n<li>a real DepNode for step 3 with an additional edge to <code>D</code>,</li>\n<li>a single DepNode for step 4 for all keys in the cycle.</li>\n</ul>\n<p>I think this should be safe, but needs a proper proof.</p>",
        "id": 268318031,
        "sender_full_name": "cjgillot",
        "timestamp": 1642456226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> knows more about this than me. I had hoped that chalk would obviate the need for anon queries at some point. I general, I agree that it would be great to get rid of anon queries and the special handling of trait evaluation.</p>",
        "id": 268384015,
        "sender_full_name": "mw",
        "timestamp": 1642509366
    }
]