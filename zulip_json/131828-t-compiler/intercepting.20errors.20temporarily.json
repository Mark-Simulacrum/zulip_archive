[
    {
        "content": "<p>Is there a way to execute a certain function in some context that converts errors to <code>Result</code> or something? Hopefully it would not output anything to stdout/err either.</p>",
        "id": 169294030,
        "sender_full_name": "nagisa",
        "timestamp": 1561808967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I would look at compare mode for NLL transition</p>",
        "id": 169296288,
        "sender_full_name": "simulacrum",
        "timestamp": 1561812980
    },
    {
        "content": "<p>It appears that compare mode simply passes through a flag which enables/disables error reporting – something I want to avoid doing as that would involve threading such information across entire trait machinery for an external project.</p>",
        "id": 169297439,
        "sender_full_name": "nagisa",
        "timestamp": 1561815108
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> any solutions that do not involve passing a flag through the call stack?</p>",
        "id": 169639708,
        "sender_full_name": "nagisa",
        "timestamp": 1562239002
    },
    {
        "content": "<p>I don't see how you can avoid threading something through to represent the interceptor itself. Unless you wanted to put an interceptor into thread-local storage or something?</p>",
        "id": 169639804,
        "sender_full_name": "pnkfelix",
        "timestamp": 1562239121
    },
    {
        "content": "<p>well I was thinking more something like this:</p>\n<div class=\"codehilite\"><pre><span></span>let result: Result&lt;_, _&gt; = diagnostics::catch_errors(|| {\n    ...\n})\n</pre></div>\n\n\n<p>which could work if we’re representing errors as panics (it could also change some state in diagnostics code or something)</p>",
        "id": 169644468,
        "sender_full_name": "nagisa",
        "timestamp": 1562243782
    },
    {
        "content": "<p>You could overwrite the error emitter with one that just stores the error and reinstate the previous emitter afterwards</p>",
        "id": 169824236,
        "sender_full_name": "oli",
        "timestamp": 1562529424
    },
    {
        "content": "<p>Though the error counter will still increase I think</p>",
        "id": 169824256,
        "sender_full_name": "oli",
        "timestamp": 1562529454
    }
]