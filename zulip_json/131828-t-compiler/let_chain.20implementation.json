[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ...</p>",
        "id": 152560038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545841744
    },
    {
        "content": "<p>... is the primary question you were asking me about how to modify the <em>parser</em>, or are you also wondering about the latter phases of the compiler?</p>",
        "id": 152560115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545841828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've done some of that already but I might have questions about it... the bigger question is whether you find adding <code>ast::ExprKind::Let(..)</code> and removing <code>ExprKind::{IfLet, WhileLet}</code></p>",
        "id": 152560147,
        "sender_full_name": "centril",
        "timestamp": 1545841907
    },
    {
        "content": "<p>...to be a good idea</p>",
        "id": 152560148,
        "sender_full_name": "centril",
        "timestamp": 1545841916
    },
    {
        "content": "<p>that's the cleanest way I could think of to implement the parser</p>",
        "id": 152560196,
        "sender_full_name": "centril",
        "timestamp": 1545841936
    },
    {
        "content": "<p>it feels pretty reasonable to me</p>",
        "id": 152560204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545841969
    },
    {
        "content": "<p>and it will probably lead to better diagnostics / easier lowering / also more extensible if we want to improve lang design in the future</p>",
        "id": 152560208,
        "sender_full_name": "centril",
        "timestamp": 1545841974
    },
    {
        "content": "<p>I guess the concern is that <code>let</code> isn't permitted in all places that expressions are permitted, obviously</p>",
        "id": 152560215,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545841985
    },
    {
        "content": "<p>but the same is true of (e.g.) <code>impl Trait</code> types</p>",
        "id": 152560221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545841991
    },
    {
        "content": "<p>it seems particularly ok if this is confined to the AST, and not the HIR</p>",
        "id": 152560230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has often expressed the vision (which I agree with) that the AST ought to \"naturally reflect\" the things the user wrote, basically, whereas the HIR is more oriented around the compiler</p>",
        "id": 152560290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842050
    },
    {
        "content": "<p>I forget exactly how they put it but it seems to fit this scenario</p>",
        "id": 152560296,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842062
    },
    {
        "content": "<p>makes a lot of sense</p>",
        "id": 152560297,
        "sender_full_name": "centril",
        "timestamp": 1545842064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  the other question is about the parser; In the RFC, specifically this subsection: <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#a-few-more-examples\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#a-few-more-examples\">https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#a-few-more-examples</a>, I specified some precedence changes</p>",
        "id": 152560341,
        "sender_full_name": "centril",
        "timestamp": 1545842162
    },
    {
        "content": "<p>I got the first one to work but not the other 3</p>",
        "id": 152560384,
        "sender_full_name": "centril",
        "timestamp": 1545842175
    },
    {
        "content": "<p>Consider having <code>if</code> and <code>while</code> take not an expression but <code>pattern-expression</code>?</p>",
        "id": 152560389,
        "sender_full_name": "nagisa",
        "timestamp": 1545842184
    },
    {
        "content": "<p>where <code>pattern-expression = EXPR | LET PATTERN</code></p>",
        "id": 152560391,
        "sender_full_name": "nagisa",
        "timestamp": 1545842200
    },
    {
        "content": "<p>Iâ€™d rather not make <code>let pat = expr </code> an expression at AST level, that sounds like foot waiting to be shot into</p>",
        "id": 152560449,
        "sender_full_name": "nagisa",
        "timestamp": 1545842319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  my first thought was to do it like that, but <code>if let a = b &amp;&amp; c &amp;&amp; let c = d { ... }</code> is permitted and we might want to extend to <code>||</code> in the future; it also felt hard to get this right re. precedence since <code>if a &amp;&amp; b || c &amp;&amp; d { .. }</code> still needs to parse</p>",
        "id": 152560468,
        "sender_full_name": "centril",
        "timestamp": 1545842350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I wonder if I should follow the RFC to the letter re. the precedence changes of:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Range</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">start</span>: <span class=\"nc\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end</span>: <span class=\"nc\">_</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">..</span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">PAT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">PAT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">F</span><span class=\"p\">..</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">PAT</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">..</span><span class=\"o\">&amp;&amp;</span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>it seems more messy to do this change and honestly I cannot say that changing the parse is more intuitive</p>",
        "id": 152560536,
        "sender_full_name": "centril",
        "timestamp": 1545842488
    },
    {
        "content": "<blockquote>\n<p>I got the first one to work but not the other 3</p>\n</blockquote>\n<p>i.e., <code>if let PAT = break true &amp;&amp; false { ... }</code> parsed incorrectly?</p>",
        "id": 152560547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> do you have a branch somewhere?</p>",
        "id": 152560549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842519
    },
    {
        "content": "<p>re: following the RFC to the letter, I personally consider the RFC more of a \"guideline\", though of course we have to be clear about deviations and the reasons for them</p>",
        "id": 152560595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842558
    },
    {
        "content": "<p>but if we encounter complications or experience that makes us rethink what was decided, I think that's ok</p>",
        "id": 152560604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842576
    },
    {
        "content": "<p>as is implementing in stages :)</p>",
        "id": 152560607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842583
    },
    {
        "content": "<p>;) in this case I also wrote the RFC :P</p>",
        "id": 152560610,
        "sender_full_name": "centril",
        "timestamp": 1545842592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  yeah, <code>if let PAT = break true &amp;&amp; false { ... }</code> parses incorrectly (it parses as it does today)</p>",
        "id": 152560613,
        "sender_full_name": "centril",
        "timestamp": 1545842611
    },
    {
        "content": "<p>that said, I'm not clear on exactly what you are proposing</p>",
        "id": 152560615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842616
    },
    {
        "content": "<p>yes so the problem seems to be what restrictions were \"intended\" for</p>",
        "id": 152560616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842633
    },
    {
        "content": "<p>but I guess you are basically having problems with things open on the \"right-hand side\"</p>",
        "id": 152560653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842643
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  (I'm suggesting) to let them parse as they do today</p>",
        "id": 152560654,
        "sender_full_name": "centril",
        "timestamp": 1545842644
    },
    {
        "content": "<p>what about other examples, e.g. <code>if let PAT = x &amp;&amp; foo.is_true()</code></p>",
        "id": 152560665,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842671
    },
    {
        "content": "<p>I feel ok about certain things -- like <code>break</code> -- yielding parse errors</p>",
        "id": 152560672,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842687
    },
    {
        "content": "<p>I'm not keen about <code>&amp;&amp;</code> being part of the matched expression sometimes but not other times</p>",
        "id": 152560683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842704
    },
    {
        "content": "<p>hah; I haven't tested fields / methods yet; good point</p>",
        "id": 152560685,
        "sender_full_name": "centril",
        "timestamp": 1545842706
    },
    {
        "content": "<p>(and successfully parsing, I mean)</p>",
        "id": 152560691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842727
    },
    {
        "content": "<p>anyway, to figure out why it's not working, and how best to make it work, I'd have to look at the code I guess</p>",
        "id": 152560695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842751
    },
    {
        "content": "<p>though I can sort of imagine how it's going wrong</p>",
        "id": 152560701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842759
    },
    {
        "content": "<p>yeah; the code changes are very prototype-y atm</p>",
        "id": 152560750,
        "sender_full_name": "centril",
        "timestamp": 1545842777
    },
    {
        "content": "<p>ill throw up a temporary branch</p>",
        "id": 152560757,
        "sender_full_name": "centril",
        "timestamp": 1545842793
    },
    {
        "content": "<p>I am not very keen on the \"restrictions\" impl, I feel like what we would rather have is that the \"parse expression\" fn is kind of a template, that takes as a parameter the \"kind of expression\" for the cases where it recurs</p>",
        "id": 152560763,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842812
    },
    {
        "content": "<p>but anyway</p>",
        "id": 152560766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842818
    },
    {
        "content": "<blockquote>\n<p>yeah; the code changes are very prototype-y atm</p>\n</blockquote>\n<p>seems fine</p>",
        "id": 152560773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545842824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/Centril/rust/tree/let-chains-2-hack\" target=\"_blank\" title=\"https://github.com/Centril/rust/tree/let-chains-2-hack\">https://github.com/Centril/rust/tree/let-chains-2-hack</a></p>",
        "id": 152560845,
        "sender_full_name": "centril",
        "timestamp": 1545842937
    },
    {
        "content": "<p>(ignore the various changes to Debug and such... they were just convenient hacks to see precedence changes...)</p>",
        "id": 152560921,
        "sender_full_name": "centril",
        "timestamp": 1545843027
    },
    {
        "content": "<p>(method calls and field projections seem to work right)</p>",
        "id": 152561019,
        "sender_full_name": "centril",
        "timestamp": 1545843212
    },
    {
        "content": "<p>ok</p>",
        "id": 152561078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545843277
    },
    {
        "content": "<blockquote>\n<p>I feel like what we would rather have is that the \"parse expression\" fn is kind of a template, that takes as a parameter the \"kind of expression\" for the cases where it recurs</p>\n</blockquote>\n<p>that seems like a good idea as a bigger refactoring; I think <code>parser.rs</code> is pretty stateful spaghetti atm so that'd help</p>",
        "id": 152561190,
        "sender_full_name": "centril",
        "timestamp": 1545843479
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  so when you say \"I'm not keen about &amp;&amp; being part of the matched expression sometimes but not other times\" you mean that from a lang design POV you'd prefer to make the changes in the \"A few more examples\"?</p>",
        "id": 152561539,
        "sender_full_name": "centril",
        "timestamp": 1545844011
    },
    {
        "content": "<p>maybe..</p>",
        "id": 152561798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545844416
    },
    {
        "content": "<p>I mostly mean that if you have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">is_true</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and it parses like <code>let (foo = bar)</code>, then I think that every other use of <code>&amp;&amp;</code> should either not parse or be treated as part of the <code>if</code>, not the expression being matched</p>",
        "id": 152561855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545844461
    },
    {
        "content": "<p>in other words, maybe those examples with <code>break</code> and stuff should just error</p>",
        "id": 152561859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545844473
    },
    {
        "content": "<p>I think it would be confusing if the <code>&amp;&amp;</code> <em>sometimes</em> parses as part of the expression and <em>sometimes</em> as part of the <code>if</code></p>",
        "id": 152561884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545844517
    },
    {
        "content": "<p>but I've not given this a lot of thought</p>",
        "id": 152561886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545844523
    },
    {
        "content": "<p>I confess :)</p>",
        "id": 152561894,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545844538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  so if we write <code>{ a &amp;&amp; b..&amp;&amp;c };</code> it currently associates as <code>{ a &amp;&amp; (b..(&amp;&amp;c)) };</code> (it won't typeck...) -- idk if we can change this tho due to macros; and it seems unlikely that someone will get bitten by this?</p>",
        "id": 152562586,
        "sender_full_name": "centril",
        "timestamp": 1545845452
    },
    {
        "content": "<p>the type error you get is pretty clear about the problem</p>",
        "id": 152562593,
        "sender_full_name": "centril",
        "timestamp": 1545845467
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> So what do you think about this?: To make progress, I'll implement this first without changing the 4 examples since that is the simplest and most minimal change, it is also forward compatible with changing the precedence later...</p>",
        "id": 152563570,
        "sender_full_name": "centril",
        "timestamp": 1545846899
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>  thoughts on the above discussion? wdyt about <code>ExprKind::Let</code> ?</p>",
        "id": 152646817,
        "sender_full_name": "centril",
        "timestamp": 1545992402
    },
    {
        "content": "<p>I think I'd prefer the nagisa's variant for now.</p>",
        "id": 152647334,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1545993327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> so this would be a <code>Vec&lt;P&lt;ExprOrLet&gt;&gt;</code> in <code>::If</code> and <code>::While</code> ?</p>",
        "id": 152647395,
        "sender_full_name": "centril",
        "timestamp": 1545993405
    },
    {
        "content": "<p>(the Vec is for the &amp;&amp;s)</p>",
        "id": 152647397,
        "sender_full_name": "centril",
        "timestamp": 1545993412
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>  also, what are your thoughts on the 4 ambiguities (<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#a-few-more-examples\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#a-few-more-examples\">https://github.com/rust-lang/rfcs/blob/master/text/2497-if-let-chains.md#a-few-more-examples</a>) I've referenced above?</p>",
        "id": 152647454,
        "sender_full_name": "centril",
        "timestamp": 1545993490
    },
    {
        "content": "<blockquote>\n<p>Vec&lt;P&lt;ExprOrLet&gt;&gt;</p>\n</blockquote>\n<p>Yes, something like that, maybe even <code>Vec&lt;ExprOrLet&gt;</code> without <code>P</code>.</p>",
        "id": 152649876,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1545997261
    },
    {
        "content": "<p>Precedence specified in the RFC looks ok to me.</p>",
        "id": 152650253,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1545997873
    },
    {
        "content": "<p>We are basically parsing the expression after <code>let PAT = </code> as an arbitrary expression with restriction \"no <code>&amp;&amp;</code> and no <code>||</code>\".</p>",
        "id": 152650312,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1545997965
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> ah, my other thought was to just have <code>ExprKind::Let</code> and have <code>|this| this.parse_assoc_expr_with(4, ...)</code> in <code>parse_let_expr</code></p>",
        "id": 152650380,
        "sender_full_name": "centril",
        "timestamp": 1545998089
    },
    {
        "content": "<p>well, substitute 4 for the precedence just above &amp;&amp; so that it doesn't parse &amp;&amp;</p>",
        "id": 152650390,
        "sender_full_name": "centril",
        "timestamp": 1545998118
    },
    {
        "content": "<p><code>LAnd =&gt; 6,</code> <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 152650402,
        "sender_full_name": "centril",
        "timestamp": 1545998135
    },
    {
        "content": "<p>I'll try your approach</p>",
        "id": 152650404,
        "sender_full_name": "centril",
        "timestamp": 1545998147
    },
    {
        "content": "<p>We had restrictions like this before, but they were removed.<br>\nSee e.g. <code>RESTRICTION_NO_BAR_OP</code> removed in <a href=\"https://github.com/rust-lang/rust/pull/23930\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/23930\">https://github.com/rust-lang/rust/pull/23930</a></p>",
        "id": 152650406,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1545998159
    }
]