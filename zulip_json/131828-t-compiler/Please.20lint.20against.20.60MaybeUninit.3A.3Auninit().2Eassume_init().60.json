[
    {
        "content": "<p>If someone uses <code>MaybeUninit::uninit().assume_init()</code> to produce any type that isn't itself MaybeUninit, it's instant UB.</p>\n<p>This is detectable just based on the output type, and so the compiler should <em>really</em> not be allowing this. Even in an <code>unsafe</code> context it is never correct. This should be a warning, if not an error. It's the most common beginners mistake when using MaybeUninit.</p>",
        "id": 208110946,
        "sender_full_name": "Lokathor",
        "timestamp": 1598457379
    },
    {
        "content": "<p>maybe open an issue so it's not lost?</p>",
        "id": 208112224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598457974
    },
    {
        "content": "<p>i can do that later today, but i usually find a zulip topic is the best way to just start a conversation</p>",
        "id": 208113753,
        "sender_full_name": "Lokathor",
        "timestamp": 1598458714
    },
    {
        "content": "<p>In general, we should be able to do some very basic dataflow analysis to detect definitely uninitialized values.</p>",
        "id": 208116334,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598460020
    },
    {
        "content": "<p>you don't happen to describe this clippy lint <a href=\"https://rust-lang.github.io/rust-clippy/master/index.html#uninit_assumed_init\">https://rust-lang.github.io/rust-clippy/master/index.html#uninit_assumed_init</a> , do you? :P</p>",
        "id": 208119159,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1598461383
    },
    {
        "content": "<p><del>Hmm, looking at that lint, the pattern where it's ok is for making arrays?  Seems like now that libs is allowing const-generics-array-methods there should just be a safe method for that.</del></p>\n<p>Oh, oops, it's already there: <a href=\"https://doc.rust-lang.org/nightly/std/mem/union.MaybeUninit.html#method.uninit_array\">https://doc.rust-lang.org/nightly/std/mem/union.MaybeUninit.html#method.uninit_array</a></p>",
        "id": 208124615,
        "sender_full_name": "scottmcm",
        "timestamp": 1598464157
    },
    {
        "content": "<p>Is there any non-UB way to get an uninitialized <code>usize</code>? That is, one that is filled nondeterministically with some valid usize value rather than causing nasal demons</p>",
        "id": 208126624,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598465181
    },
    {
        "content": "<p>this is the <code>freeze</code> instruction in LLVM</p>",
        "id": 208126846,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598465301
    },
    {
        "content": "<p>not sure if rust exposes it, I think llvm is having trouble making it internally consistent currently</p>",
        "id": 208126866,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598465317
    },
    {
        "content": "<p><a href=\"https://llvm.org/docs/LangRef.html#freeze-instruction\">https://llvm.org/docs/LangRef.html#freeze-instruction</a></p>",
        "id": 208126938,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1598465350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217864\">@matthiaskrgr</span> cool, let's uplift the exiting lint then.</p>",
        "id": 208128043,
        "sender_full_name": "Lokathor",
        "timestamp": 1598465972
    },
    {
        "content": "<p>Agreed that this lint should probably be uplifted if it's almost always UB. A handful of Clippy's correctness lints should be considered for being in the compiler given that they are against UB or always-bad code.</p>",
        "id": 208153387,
        "sender_full_name": "Jubilee",
        "timestamp": 1598478444
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/75968\">https://github.com/rust-lang/rust/issues/75968</a> issue filed</p>",
        "id": 208170157,
        "sender_full_name": "Lokathor",
        "timestamp": 1598492107
    },
    {
        "content": "<blockquote>\n<p>If someone uses MaybeUninit::uninit().assume_init() to produce any type that isn't itself MaybeUninit, it's instant UB.</p>\n</blockquote>\n<p>FWIW, this is wrong, there are more exceptions -- see the issue.</p>",
        "id": 208448264,
        "sender_full_name": "RalfJ",
        "timestamp": 1598727056
    },
    {
        "content": "<p>I suppose I should have known about the unions exception, since MaybeUninit is itself just a union</p>",
        "id": 208452901,
        "sender_full_name": "Lokathor",
        "timestamp": 1598733456
    }
]