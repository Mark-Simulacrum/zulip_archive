[
    {
        "content": "<p>While looking into an unrelated issue (<a href=\"https://github.com/rust-lang/rust/issues/66219\">https://github.com/rust-lang/rust/issues/66219</a>) I noticed that the current way used to tell that a platform might have trouble with division/multiplication is to test it's pointer width, as least in core/src/slice/memchr.rs. See line 26.<br>\nIs there some better way this could be set up? As there exist 32-bit platforms with slow divide/multiply, and 16-bit platforms with fast divide/multiply.</p>",
        "id": 209342971,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599536093
    },
    {
        "content": "<p>This feels like something that'd need a per-platform flag, though.</p>",
        "id": 209343072,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599536262
    },
    {
        "content": "<p>this sounds hard because it's in libstd, not the compiler</p>",
        "id": 209343221,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599536475
    },
    {
        "content": "<p>so it doesn't know about all the targets the compiler supports</p>",
        "id": 209343232,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599536490
    },
    {
        "content": "<p>Looking now, seems like target_pointer_width itself could do with some improvement... Not going to start two threads just yet, but looking in <a href=\"http://vec_deque.rs\">vec_deque.rs</a> (alloc/src/collections) shows 3 separate pointer width checks used to calculate ZST capacity. And yea, that's an issue. The best way would for there to be some cfg checkable value, as I can imagine this being a nice-to-have for embedded developers, but that's a whole can of worms.</p>",
        "id": 209343295,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599536565
    },
    {
        "content": "<p>it looks like a const for the pointer width and type decls for the signed/unsigned pointer ints could be helpful (the latter would be, say, <code>type UPointer = u32</code> on 32-bit platforms.) But now i'm off-topic.</p>",
        "id": 209343503,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599536908
    },
    {
        "content": "<p>the latter specifically for tests. It feels like other cases could be refactored to use usize.</p>",
        "id": 209343518,
        "sender_full_name": "Braden Nelson",
        "timestamp": 1599536952
    }
]