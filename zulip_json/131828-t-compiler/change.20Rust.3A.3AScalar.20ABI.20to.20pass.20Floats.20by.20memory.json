[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I'm not sure which code needs modifying to achieve that</p>",
        "id": 175894945,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568717934
    },
    {
        "content": "<p>but that would be a quick fix for a couple of soundness bugs</p>",
        "id": 175894962,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568717957
    },
    {
        "content": "<p>WOW</p>",
        "id": 175905944,
        "sender_full_name": "eddyb",
        "timestamp": 1568727109
    },
    {
        "content": "<p>you can look at how this is done for vectors</p>",
        "id": 175906004,
        "sender_full_name": "eddyb",
        "timestamp": 1568727124
    },
    {
        "content": "<p>Ugh, please no</p>",
        "id": 175906246,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132920\">@gnzlbg</span> <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L2819-L2844\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L2819-L2844\">https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L2819-L2844</a></p>",
        "id": 175906350,
        "sender_full_name": "eddyb",
        "timestamp": 1568727341
    },
    {
        "content": "<p>knock yourself out :P</p>",
        "id": 175906360,
        "sender_full_name": "eddyb",
        "timestamp": 1568727347
    },
    {
        "content": "<p>(note that you need to do also do it for ScalarPair where <em>at least one</em> of the scalars is a float)</p>",
        "id": 175906413,
        "sender_full_name": "eddyb",
        "timestamp": 1568727366
    },
    {
        "content": "<p>Vector values are usually concentrated in big fully-inlined hot loops so passing them through memory is not a huge problem, but passing scalar floats by value can easily be a part of hot (scalar) code.</p>",
        "id": 175906416,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> at this point I'm worried to even ask or debate it, lol</p>",
        "id": 175906456,
        "sender_full_name": "eddyb",
        "timestamp": 1568727403
    },
    {
        "content": "<p>So one can just add a match arm there for Abi::Scalar(Float..) and make the argument indirect ?</p>",
        "id": 175906474,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727416
    },
    {
        "content": "<p>we can do that on a PR or w/e</p>",
        "id": 175906479,
        "sender_full_name": "eddyb",
        "timestamp": 1568727421
    },
    {
        "content": "<p>suuuure</p>",
        "id": 175906491,
        "sender_full_name": "eddyb",
        "timestamp": 1568727429
    },
    {
        "content": "<p>no promises it won't break in strange ways</p>",
        "id": 175906498,
        "sender_full_name": "eddyb",
        "timestamp": 1568727438
    },
    {
        "content": "<p>sure</p>",
        "id": 175906507,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727443
    },
    {
        "content": "<p>And the issue this would paper over only occurs a very weird scenario (+soft-float or -sse applied inconsistently) which we've never supposed and which has other serious problems as well</p>",
        "id": 175906514,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727449
    },
    {
        "content": "<p>It wouldn't fix, e.g., <code>extern \"C\"</code> functions</p>",
        "id": 175906622,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727504
    },
    {
        "content": "<p>(also, this doesn't change anything about C, so what you'll likely cause is people abusing <code>extern \"C\" fn</code>s in Rust to get perf back or something)</p>",
        "id": 175906633,
        "sender_full_name": "eddyb",
        "timestamp": 1568727515
    },
    {
        "content": "<p>if libstd standard exposed one, the ABI would still mismatch a declaration in a crate</p>",
        "id": 175906644,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727524
    },
    {
        "content": "<p>this would only \"\"fix\"\" the issue for extern \"Rust\"</p>",
        "id": 175906670,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727544
    },
    {
        "content": "<p>maybe</p>",
        "id": 175906685,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727551
    },
    {
        "content": "<p>That will depend on what the impact is</p>",
        "id": 175906701,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727564
    },
    {
        "content": "<p>More importantly it wouldn't fix the fact that you're getting a libstd compiled with sse/hardfloat enabled, so anyone trying to get kernel-compatible code without recompiling the sysroot is doing it wrong to begin with</p>",
        "id": 175906730,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727594
    },
    {
        "content": "<p>yep, but people doing that already need to re-compile everything</p>",
        "id": 175906856,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727633
    },
    {
        "content": "<p>What is the use case for -Ctarget-feature=+soft-float that <em>doesn't</em> require that?</p>",
        "id": 175906879,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727651
    },
    {
        "content": "<p>I suppose we can just forbid that target feature for some targets</p>",
        "id": 175906926,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727684
    },
    {
        "content": "<p>???</p>",
        "id": 175906932,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727690
    },
    {
        "content": "<p>and those who want it would have to create their own new targets</p>",
        "id": 175906936,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727694
    },
    {
        "content": "<p>Oh, maybe, I guess</p>",
        "id": 175906947,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727702
    },
    {
        "content": "<p>As in, it would be part of the target specification file or similar</p>",
        "id": 175906962,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727715
    },
    {
        "content": "<p>But Xargo with an ordinary in-tree target + <code>-Ctarget-feature</code> works fine</p>",
        "id": 175907033,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727740
    },
    {
        "content": "<p>for soft-float I don't know, but somebody might think that <code>-C target-feature=-sse</code> forces all code to use the FPU</p>",
        "id": 175907037,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727745
    },
    {
        "content": "<p>and they might want to try to hack their way to get higher precision or something</p>",
        "id": 175907054,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727757
    },
    {
        "content": "<p>Ok, correction, what is a <em>good</em> use case?</p>",
        "id": 175907070,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727775
    },
    {
        "content": "<p>that won't do what they want</p>",
        "id": 175907071,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727775
    },
    {
        "content": "<p>but it wouldn't be broken either</p>",
        "id": 175907085,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727786
    },
    {
        "content": "<p>I think a good use-case would be thumb mode on arm</p>",
        "id": 175907098,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727798
    },
    {
        "content": "<p>but that still requires choosing the default mode and then explicitly going from arm to thumb</p>",
        "id": 175907113,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727809
    },
    {
        "content": "<p>thumb mode doesn't cause abi mismatches tho</p>",
        "id": 175907117,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727815
    },
    {
        "content": "<p>no, but it won't do what the user wants</p>",
        "id": 175907184,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727847
    },
    {
        "content": "<p>e.g. it won't change the mode for the code in the whole binary</p>",
        "id": 175907213,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727864
    },
    {
        "content": "<p>Ok, sure</p>",
        "id": 175907273,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727905
    },
    {
        "content": "<p>Now where does that leave us</p>",
        "id": 175907279,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568727907
    },
    {
        "content": "<p>once cargo supports compiling libstd, any RUSTFLAG should cause a recompilation</p>",
        "id": 175907284,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727914
    },
    {
        "content": "<p>and at that point we maybe can just forbid linking crates with mismatching target features</p>",
        "id": 175907304,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727926
    },
    {
        "content": "<p>the question is whether it is worth it to do something else in the meantime</p>",
        "id": 175907320,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727942
    },
    {
        "content": "<p>one can trigger all these issues without <code>-C target-feature</code>, e.g., choose a <code>x86</code> target without SSE, and call a <code>#[target_feature(enable = \"sse\")]</code> function</p>",
        "id": 175907429,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568727984
    },
    {
        "content": "<p>so forbidding target features per target, or doing link time checking won't catch all unsoundness</p>",
        "id": 175907523,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568728042
    },
    {
        "content": "<p>the proper fix would be to detect those incompatibilities on a per function basis, and use different call ABIs</p>",
        "id": 175907557,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568728062
    },
    {
        "content": "<p>the float* change is a one liner, I don't know how hard it would be to track target features on call ABIs</p>",
        "id": 175907670,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568728110
    },
    {
        "content": "<p>The float change is a one liner but one which most likely adversely impacts the performance of the vast, vast majority of code which doesn't have any problem</p>",
        "id": 175907927,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568728301
    },
    {
        "content": "<p>That the alternatives are harder doesn't make it good</p>",
        "id": 175907951,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1568728321
    },
    {
        "content": "<p>true</p>",
        "id": 175908010,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568728339
    },
    {
        "content": "<p>i can't estimate what the impact of the change is for Rust</p>",
        "id": 175908904,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568728950
    },
    {
        "content": "<p>every function call using floats that's not inlined would pay for a stack spill</p>",
        "id": 175908956,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568728983
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> we'd probably need to change this here: <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_target/spec/abi.rs#L7\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_target/spec/abi.rs#L7\">https://github.com/rust-lang/rust/blob/master/src/librustc_target/spec/abi.rs#L7</a></p>",
        "id": 175910560,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568729887
    },
    {
        "content": "<p>rename <code>Abi</code> to <code>AbiKind</code></p>",
        "id": 175910570,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568729894
    },
    {
        "content": "<p>and add a <code>struct Abi(AbiKind, TargetFeatures);</code> type instead</p>",
        "id": 175910587,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568729908
    },
    {
        "content": "<p>at some point we'd need to set the TargetFeatures for each function on its ABI, by using the module and the <code>#[target_feature]</code> attributes</p>",
        "id": 175910663,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568729976
    },
    {
        "content": "<p>I think we already do that somewhere</p>",
        "id": 175910690,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568729996
    },
    {
        "content": "<p>but we'd need to make those part of the ABI</p>",
        "id": 175910744,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568730005
    },
    {
        "content": "<p>And then when calling a function we'd need to generate code depending on the target features of the caller and callee</p>",
        "id": 175910785,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568730034
    },
    {
        "content": "<blockquote>\n<p>but that would be a quick fix for a couple of soundness bugs</p>\n</blockquote>\n<p>any references?</p>",
        "id": 175985499,
        "sender_full_name": "RalfJ",
        "timestamp": 1568797998
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/63466\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63466\">https://github.com/rust-lang/rust/issues/63466</a> is one of the most recent ones</p>",
        "id": 175985615,
        "sender_full_name": "gnzlbg",
        "timestamp": 1568798157
    }
]