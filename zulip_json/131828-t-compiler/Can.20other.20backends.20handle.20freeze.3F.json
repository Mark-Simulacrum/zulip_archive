[
    {
        "content": "<p>I was contemplating adding <a href=\"https://llvm.org/docs/LangRef.html#freeze-instruction\">LLVM's <code>freeze</code></a> as an intrinsic, to allow experimenting with using it for fast-math in nightly.  (It would be interesting for <a href=\"https://llvm.org/docs/LangRef.html#fast-math-flags\"><code>nnan</code>/<code>ninf</code>/<code>fast</code></a>, as those return <code>poison</code> for bad input -- they're not immediate UB.  So one way to expose them to safe code -- as needed for operators -- would be to have a safe way to decay that poison down to just an unknown-but-initialized value, which freeze can do.)</p>\n<p>But I wanted to check how that would impact other backends.</p>\n<p>As far as I could tell, cranelift doesn't have uninitialized or poison because it doesn't have UB.  So freeze would be a nop there, which would be fine.  (Right?)</p>\n<p>I know nothing about GCC's IR, though.  Does it have a similar idea to freeze?</p>",
        "id": 244780260,
        "sender_full_name": "scottmcm",
        "timestamp": 1625287518
    },
    {
        "content": "<p>wouldn't you want to expose only intrinsics which implicitly use <code>freeze</code> themselves?</p>",
        "id": 244782076,
        "sender_full_name": "eddyb",
        "timestamp": 1625290400
    },
    {
        "content": "<p>so they could just default to non-fast-math if they can't do the <code>freeze(... nnan/ninf/fast)</code> combo</p>",
        "id": 244782127,
        "sender_full_name": "eddyb",
        "timestamp": 1625290493
    },
    {
        "content": "<p>I was thinking of separate intrinsics to avoid extra <code>freeze</code>s.</p>\n<p>For example, <code>fast_fadd</code> could be <code>MaybeUninit&lt;f32&gt; + MaybeUninit&lt;f32&gt; -&gt; MaybeUninit&lt;f32&gt;</code>, called in <code>impl Add for FastF32</code>, and only <code>freeze</code> on <code>impl From&lt;FastF32&gt; for f32</code>.</p>\n<p>(And in general it'd be nice to offer freeze on <code>MaybeUninit</code>.)</p>\n<p>But I guess it could be a specific <code>fastmath_freeze</code> so that it being a nop when <code>fast_fadd</code> is just normal add would also be obviously fine.</p>",
        "id": 244783674,
        "sender_full_name": "scottmcm",
        "timestamp": 1625292625
    },
    {
        "content": "<p>We already have problems with codegen backends not sharing LLVM's model so closely and <code>cg_ssa</code> embedding a lot of LLVM-internal logic, per <a href=\"#narrow/stream/131828-t-compiler/topic/Considering.20a.20future.20integration.20of.20the.20gcc.20backend\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Considering.20a.20future.20integration.20of.20the.20gcc.20backend</a></p>",
        "id": 244880292,
        "sender_full_name": "Jubilee",
        "timestamp": 1625437032
    },
    {
        "content": "<p>The paper that introduces the concept of the freeze operator asserts that all IRs they looked at feature UB: <a href=\"https://www.cs.utah.edu/~regehr/papers/undef-pldi17.pdf\">https://www.cs.utah.edu/~regehr/papers/undef-pldi17.pdf</a></p>\n<p>The typical pipeline is ${LANG} -&gt; Generic-&gt; Gimple -&gt; RTL -&gt; asm,<br>\nand I am seeing nothing akin to <code>freeze</code> while paging through <a href=\"https://gcc.gnu.org/onlinedocs/gccint/\">https://gcc.gnu.org/onlinedocs/gccint/</a> but it is surely incomplete.</p>",
        "id": 244880931,
        "sender_full_name": "Jubilee",
        "timestamp": 1625438174
    },
    {
        "content": "<p>You might ask David Malcom, who works on GCC.</p>",
        "id": 244881566,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1625439430
    }
]