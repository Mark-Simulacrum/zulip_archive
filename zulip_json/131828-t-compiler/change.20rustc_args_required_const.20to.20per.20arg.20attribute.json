[
    {
        "content": "<p>Hey all,</p>\n<p>I am currently working on <a href=\"https://github.com/rust-lang/rust/issues/69282\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69282\">69282</a> which changes <code>#[rustc_args_required_const]</code> to a per argument attribute (implemented <a href=\"https://github.com/rust-lang/rust/pull/60669\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60669\">here</a>).</p>\n<p>I was talking to <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>  and he suggested reaching out to you about the best way to encode a argument attribute in the MIR. He suggested maybe a boolean flag specifically for this rustc_required_const instead of encoding all attributes.</p>",
        "id": 191355650,
        "sender_full_name": "Jake Vossen",
        "timestamp": 1584810335
    },
    {
        "content": "<p>why do we want this to affect MIR?</p>",
        "id": 191371068,
        "sender_full_name": "varkor",
        "timestamp": 1584834538
    },
    {
        "content": "<p>I was under the impression <code>rustc_args_required_const</code> was always a temporary hack — we can achieve the same thing with const generics, so we shouldn't special-case too much to support it</p>",
        "id": 191371080,
        "sender_full_name": "varkor",
        "timestamp": 1584834569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246502\">@jakevossen5</span> You need to access this from <em>outside</em> the function, not from the MIR body (which is the \"inside\" of the function, so the speak)</p>",
        "id": 191373491,
        "sender_full_name": "eddyb",
        "timestamp": 1584839253
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246502\">@jakevossen5</span> the most important part is how you can detect this cross-crate. locally you can just look at the HIR, but cross-crate is the hard part, and if you do that right then you'll end up with a query which you can implement locally too (and encoding the cross-crate data would just use the query)</p>",
        "id": 191373542,
        "sender_full_name": "eddyb",
        "timestamp": 1584839345
    },
    {
        "content": "<p>probably a decent way to do it would be like this <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/mod.rs#L330\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/mod.rs#L330\">https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/rmeta/mod.rs#L330</a></p>",
        "id": 191373545,
        "sender_full_name": "eddyb",
        "timestamp": 1584839364
    },
    {
        "content": "<p>left this comment <a href=\"https://github.com/rust-lang/rust/issues/69282#issuecomment-602130836\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69282#issuecomment-602130836\">https://github.com/rust-lang/rust/issues/69282#issuecomment-602130836</a></p>",
        "id": 191373673,
        "sender_full_name": "eddyb",
        "timestamp": 1584839575
    },
    {
        "content": "<p>How hard would it be to turn <code>rustc_required_const</code> into real const generics when desugaring to HIR? That would make <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/666\" target=\"_blank\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/666\">bjorn3/rustc_codegen_cranelift#666</a> much easier to implement.</p>",
        "id": 191390244,
        "sender_full_name": "bjorn3",
        "timestamp": 1584873108
    },
    {
        "content": "<p>FYI I use the same mechanism as <code>rustc_required_const</code> for <code>const</code> operands to inline assembly.</p>",
        "id": 191391006,
        "sender_full_name": "Amanieu",
        "timestamp": 1584874426
    },
    {
        "content": "<p>... which means that my code is currently broken since it also assumes that the MIR resolves to a constant...</p>",
        "id": 191391063,
        "sender_full_name": "Amanieu",
        "timestamp": 1584874530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Have you tried calling <code>eval_mir_constant</code>? <a href=\"https://github.com/rust-lang/rust/pull/69171/files#diff-a5b7af844d26b58c2c9537372b100c90R938\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69171/files#diff-a5b7af844d26b58c2c9537372b100c90R938\">https://github.com/rust-lang/rust/pull/69171/files#diff-a5b7af844d26b58c2c9537372b100c90R938</a></p>",
        "id": 191391182,
        "sender_full_name": "Amanieu",
        "timestamp": 1584874782
    },
    {
        "content": "<p>Yes, I am using <code>eval_mir_constant</code>. The problem is that for example <code>_mm256_extract_epi64</code> is a single function, that is codegened a single time without being specialized on the imm8 argument. However the <code>simd_extract</code> intrinsic needs to know the value of imm8 at during codegen. With cg_llvm this is not a problem, as it only needs to have a known value after inlining and other optimizations, but clif ir treats it as a real immediate, so you can't pass a value that will be known after optimizations.</p>",
        "id": 191391413,
        "sender_full_name": "bjorn3",
        "timestamp": 1584875107
    },
    {
        "content": "<p>Ah I see. Does <code>#[inline(always)]</code> force MIR inlining?</p>",
        "id": 191391670,
        "sender_full_name": "Amanieu",
        "timestamp": 1584875532
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 191391692,
        "sender_full_name": "Amanieu",
        "timestamp": 1584875587
    },
    {
        "content": "<p>No, unfortunately not.</p>\n<ol>\n<li>MIR inlining is only enabled at mir-opt-level&gt;=2</li>\n<li>MIR inlining is skipped in many cases to prevent potential cycles during inlining</li>\n<li>MIR inlining has some bugs, so I can't enable it by default in cg_clif</li>\n</ol>",
        "id": 191391787,
        "sender_full_name": "bjorn3",
        "timestamp": 1584875750
    },
    {
        "content": "<p>wait how does that even work</p>",
        "id": 191394126,
        "sender_full_name": "eddyb",
        "timestamp": 1584879545
    },
    {
        "content": "<p>is <code>simd_extract</code> being used by <code>_mm256_extract_epi64</code> with only the latter having <code>#[rustc_args_required_const]</code>?</p>",
        "id": 191394138,
        "sender_full_name": "eddyb",
        "timestamp": 1584879599
    },
    {
        "content": "<p>because that's scary, intrinsics should be correctly annotated</p>",
        "id": 191394181,
        "sender_full_name": "eddyb",
        "timestamp": 1584879618
    },
    {
        "content": "<p>IIRC I was told this wouldn't be allowed to happen</p>",
        "id": 191394190,
        "sender_full_name": "eddyb",
        "timestamp": 1584879634
    },
    {
        "content": "<p>uhhhh ohhhhhhhh <a href=\"https://doc.rust-lang.org/src/core/up/stdarch/crates/core_arch/src/x86_64/avx2.rs.html#28-30\" target=\"_blank\" title=\"https://doc.rust-lang.org/src/core/up/stdarch/crates/core_arch/src/x86_64/avx2.rs.html#28-30\">https://doc.rust-lang.org/src/core/up/stdarch/crates/core_arch/src/x86_64/avx2.rs.html#28-30</a></p>",
        "id": 191394201,
        "sender_full_name": "eddyb",
        "timestamp": 1584879687
    },
    {
        "content": "<p>so we stabilized functions like this?!</p>",
        "id": 191394204,
        "sender_full_name": "eddyb",
        "timestamp": 1584879695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> the only correct thing to do, IMO, would be to force <code>#[rustc_args_required_const(...)]</code> to be applied to an intrinsic, and to make all of the users of the attribute intrinsics</p>",
        "id": 191394259,
        "sender_full_name": "eddyb",
        "timestamp": 1584879762
    },
    {
        "content": "<p>note that your inline assembly should be fine, and so should intrinsics</p>",
        "id": 191394263,
        "sender_full_name": "eddyb",
        "timestamp": 1584879781
    },
    {
        "content": "<p>it's only functions where it doesn't make much sense</p>",
        "id": 191394271,
        "sender_full_name": "eddyb",
        "timestamp": 1584879806
    },
    {
        "content": "<p>this is all because we have forsaken platform-intrinsics</p>",
        "id": 191394276,
        "sender_full_name": "eddyb",
        "timestamp": 1584879819
    },
    {
        "content": "<p>which was for silly concerns such as optimizing for adding intrinsics one by one</p>",
        "id": 191394281,
        "sender_full_name": "eddyb",
        "timestamp": 1584879837
    },
    {
        "content": "<p>as opposed to treating it like a data entry thing</p>",
        "id": 191394322,
        "sender_full_name": "eddyb",
        "timestamp": 1584879850
    },
    {
        "content": "<p>Maybe once we have const generics we could make <code>#[rustc_args_required_const]</code> just desugar to const generics.</p>",
        "id": 191394331,
        "sender_full_name": "Amanieu",
        "timestamp": 1584879872
    },
    {
        "content": "<p>try not to assume that, though</p>",
        "id": 191394343,
        "sender_full_name": "eddyb",
        "timestamp": 1584879893
    },
    {
        "content": "<p>intrinsics and inline assembly are fine, because they're builtin so we can attribute arbitrary semantics to them</p>",
        "id": 191394350,
        "sender_full_name": "eddyb",
        "timestamp": 1584879921
    },
    {
        "content": "<p>anyway I have to deal with another mess atm, and then probably just sleep</p>",
        "id": 191394411,
        "sender_full_name": "eddyb",
        "timestamp": 1584880044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> How about forcing MIR inlining just for functions marked <code>#[rustc_args_required_const(...)]</code>? Since this attribute is only used in stdarch, we should be able to avoid all the existing issues with MIR inlining.</p>",
        "id": 191394533,
        "sender_full_name": "Amanieu",
        "timestamp": 1584880252
    },
    {
        "content": "<p>Either than or monomorphizing such functions as you would with const generics. I don't really see any other solutions.</p>",
        "id": 191394783,
        "sender_full_name": "Amanieu",
        "timestamp": 1584880656
    },
    {
        "content": "<p>the real solution is to get rid of it on functions with bodies</p>",
        "id": 191394790,
        "sender_full_name": "eddyb",
        "timestamp": 1584880675
    },
    {
        "content": "<p>how come stdarch is <em>still</em> not yet in tree? what a disaster</p>",
        "id": 191394856,
        "sender_full_name": "eddyb",
        "timestamp": 1584880763
    },
    {
        "content": "<p>anyway, opened <a href=\"https://github.com/rust-lang/rust/issues/70271\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/70271\">https://github.com/rust-lang/rust/issues/70271</a></p>",
        "id": 191395071,
        "sender_full_name": "eddyb",
        "timestamp": 1584881076
    },
    {
        "content": "<p>Thank you, I will look into this!</p>",
        "id": 191473699,
        "sender_full_name": "Jake Vossen",
        "timestamp": 1584970792
    },
    {
        "content": "<p>Does this change how I should do my implementation?</p>",
        "id": 191473842,
        "sender_full_name": "Jake Vossen",
        "timestamp": 1584970856
    }
]