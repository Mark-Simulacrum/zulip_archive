[
    {
        "content": "<p>I am compiling Rust several times a day at this point, is there a desire/place to report Warnings that I get (since I have to see them)?  Is it something the devs worry about?  I know WARNINGS are not errors, but I'm not sure how sanitized the rust code wants to be.  And yes, I know it's 1.49.0, but I'm just testing a known build before I switch over to 1.50.  The question still applies :)</p>\n<p>example:</p>\n<div class=\"codehilite\"><pre><span></span><code>[1025/2614] Building CXX object lib/MC/CMakeFiles/LLVMMC.dir/XCOFFObjectWriter.cpp.o\nIn file included from /usr/include/string.h:495,\n                 from /usr/include/c++/9/cstring:42,\n                 from /home/grommish/openwrt/build_dir/hostpkg/rust-1.49.0/src/llvm-project/llvm/include/llvm/ADT/Hashing.h:53,\n                 from /home/grommish/openwrt/build_dir/hostpkg/rust-1.49.0/src/llvm-project/llvm/include/llvm/ADT/ArrayRef.h:12,\n                 from /home/grommish/openwrt/build_dir/hostpkg/rust-1.49.0/src/llvm-project/llvm/include/llvm/MC/MCAsmBackend.h:12,\n                 from /home/grommish/openwrt/build_dir/hostpkg/rust-1.49.0/src/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:14:\nIn function &#39;char* strncpy(char*, const char*, size_t)&#39;,\n    inlined from &#39;{anonymous}::Section::Section(const char*, llvm::XCOFF::SectionTypeFlags, bool, {anonymous}::CsectGroups)&#39; at /home/grommish/openwrt/build_dir/hostpkg/rust-1.49.0/src/llvm-project/llvm/lib/MC/XCOFFObjectWriter.cpp:146:12:\n/usr/include/x86_64-linux-gnu/bits/string_fortified.h:106:34: warning: &#39;char* __builtin_strncpy(char*, const char*, long unsigned int)&#39; specified bound 8 equals destination size [-Wstringop-truncation]\n  106 |   return __builtin___strncpy_chk (__dest, __src, __len, __bos (__dest));\n      |          ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre></div>",
        "id": 226769027,
        "sender_full_name": "Grommish",
        "timestamp": 1613628252
    },
    {
        "content": "<p>These are warnings from llvm, not rustc</p>",
        "id": 226769314,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613628576
    },
    {
        "content": "<p>But yeah it might be useful to report them upstream</p>",
        "id": 226769387,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1613628611
    },
    {
        "content": "<p>OpenWrt screams about a lot by default, so I wanted to ask :)</p>",
        "id": 226769413,
        "sender_full_name": "Grommish",
        "timestamp": 1613628654
    },
    {
        "content": "<p>Building <code>rustc</code> itself shouldn't have _any_ warnings in master (I'm pretty sure we deny them in CI, although that might have changed at some point). For warnings coming from LLVM, we might want to be aware of them, but I don't know how actionable they would be nor who would be looking at them, sadly. Filing tickets to LLVM directly _may_ be worthwhile, but I don't know what _their_ attitude towards those kind of reports is.</p>",
        "id": 227054374,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1613784001
    },
    {
        "content": "<blockquote>\n<p>(I'm pretty sure we deny them in CI, although that might have changed at some point)</p>\n</blockquote>\n<p>In my experience we deny them locally too.</p>",
        "id": 227130666,
        "sender_full_name": "Noah Lev",
        "timestamp": 1613868464
    },
    {
        "content": "<p>There's an option (deny-warnings) which you can set to false in config.toml, or pass --warnings=warn and/or --warnings=deny on CLI to override config</p>",
        "id": 227131140,
        "sender_full_name": "simulacrum",
        "timestamp": 1613869046
    },
    {
        "content": "<p>LLVM warnings we don't really do anything with ourselves I think</p>",
        "id": 227131141,
        "sender_full_name": "simulacrum",
        "timestamp": 1613869060
    },
    {
        "content": "<p>(I would sort of guess that whatever LLVM's defaults are we also use)</p>",
        "id": 227131155,
        "sender_full_name": "simulacrum",
        "timestamp": 1613869080
    }
]