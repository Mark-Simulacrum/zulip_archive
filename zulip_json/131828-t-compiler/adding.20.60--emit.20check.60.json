[
    {
        "content": "<p>I posed <a href=\"https://internals.rust-lang.org/t/rfc-emit-check/14711\">https://internals.rust-lang.org/t/rfc-emit-check/14711</a> about this, but the TL;DR is that I'm proposing making <code>--emit metadata</code> always include full mir info as .rmeta, and adding <code>--emit check</code> for a mir-less .rcheck file.</p>\n<p>But that assumes there's a large perf hit from always including mir - but from my benchmarks of running <code>cargo check</code> on cargo itself showed that there was only ~8% difference. That's not nothing, but it doesn't seem enough to justify lots of complexity. If the primary concern is turnaround latency, that doesn't seem all that significant.  But maybe cargo is just a bad example - does anyone have some examples where always including mir in rmeta would be very expensive over not?</p>",
        "id": 239035495,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1621229177
    },
    {
        "content": "<p>I'm pretty sure <code>--emit metadata</code> omits more data than MIR. I was recently bugged that <code>exported_symbols()</code> always returns empty result if <code>!tcx.sess.opts.output_types.should_codegen()</code>.</p>",
        "id": 239052180,
        "sender_full_name": "hyd-dev",
        "timestamp": 1621240651
    },
    {
        "content": "<p>Empty <code>reachable_non_generics</code> would be another example. In <a href=\"https://github.com/rust-lang/rust/issues/85401\">#85401</a> MIR being missing is one thing, but the error arises in the first place because crate bar attempts to codegen static from crate foo (because <code>should_codegen()</code> was false when it was built).</p>",
        "id": 239052752,
        "sender_full_name": "tm",
        "timestamp": 1621240946
    },
    {
        "content": "<p>@tm In general <code>-Zalways-encode-mir=yes</code> works surprisingly well - I managed to build quite a large portion of my target codebase with rmeta until I ran into <a href=\"https://github.com/rust-lang/rust/issues/85401\">#85401</a>. Without that <code>static</code> the small example works fine, but I certainly won't be surprised if I run into another case. It definitely looks like I'm treading in uncommon pathways (<a href=\"https://github.com/rust-lang/rust/issues/85356\">#85356</a> for a more mundane example).</p>",
        "id": 239143562,
        "sender_full_name": "Jeremy Fitzhardinge",
        "timestamp": 1621278446
    }
]