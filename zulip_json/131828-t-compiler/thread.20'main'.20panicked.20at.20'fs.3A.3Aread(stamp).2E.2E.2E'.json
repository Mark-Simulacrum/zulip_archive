[
    {
        "content": "<p>I am compiling rustc for the first time in a while. I have this <code>config.toml</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>changelog-seen = 2\n[llvm]\nrelease-debuginfo = true\n[rust]\ndebuginfo-level = 1\n</code></pre></div>\n<p>And I have built it with this command:</p>\n<div class=\"codehilite\"><pre><span></span><code>RUSTFLAGS=&quot;-C link-arg=-fuse-ld=lld&quot; ./x.py build --stage 2 compiler/rustc\n</code></pre></div>\n<p>It successfully builds <code>/home/njn/dev/rust0/build/x86_64-unknown-linux-gnu/stage1/bin/rustc</code>. Then I get a possibly harmless but disconcerting error:</p>\n<div class=\"codehilite\"><pre><span></span><code>    Finished release [optimized + debuginfo] target(s) in 3m 35s\nCopying stage1 rustc from stage1 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nAssembling stage2 compiler (x86_64-unknown-linux-gnu)\nUplifting stage1 std (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\nCopying stage2 std from stage1 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nUplifting stage1 rustc (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\nCopying stage2 rustc from stage1 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nAssembling stage3 compiler (x86_64-unknown-linux-gnu)\nthread &#39;main&#39; panicked at &#39;fs::read(stamp) failed with No such file or directory (os error 2) (&quot;/home/njn/dev/rust0/build/x86_64-unknown-linux-gnu/stage2-rustc/x86_64-unknown-linux-gnu/release/.librustc.stamp&quot;)&#39;, src/bootstrap/lib.rs:1295:24\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nBuild completed unsuccessfully in 0:07:31\n</code></pre></div>\n<p>I don't know why <code>Assembling stage3 compiler</code> is even running.<br>\nHas anyone else seen this? If I just run <code>RUSTFLAGS=\"-C link-arg=-fuse-ld=lld\" ./x.py build</code> I don't have this problem.</p>",
        "id": 260603298,
        "sender_full_name": "njn",
        "timestamp": 1636329485
    },
    {
        "content": "<p>Oh, maybe <code>x.py build</code> worked because it doesn't build the stage 2 compiler.</p>",
        "id": 260603765,
        "sender_full_name": "njn",
        "timestamp": 1636330016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span>  <code>build --stage 2 compiler/rustc</code> means \"build the stage 2 compiler and then using it to rebuild the compiler</p>",
        "id": 260603820,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636330102
    },
    {
        "content": "<p>If you want stage 2 you just need <code>build --stage 2</code></p>",
        "id": 260603825,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636330116
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap</a></p>",
        "id": 260603837,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636330135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <code>build --stage 2 compiler/rustc</code> is what I've been using since forever for my compiler profiling work... but it could well be that it's not optimal</p>",
        "id": 260603849,
        "sender_full_name": "njn",
        "timestamp": 1636330176
    },
    {
        "content": "<p>Well, the stage 3 compiler should theoretically be identical to stage 2</p>",
        "id": 260603904,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636330203
    },
    {
        "content": "<p>(but yeah stage3 is broken right now, there's an issue open somewhere)</p>",
        "id": 260603913,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636330216
    },
    {
        "content": "<p>What command should I use to get a nicely optimized, representative stage 2 compiler?</p>",
        "id": 260603924,
        "sender_full_name": "njn",
        "timestamp": 1636330236
    },
    {
        "content": "<p>(Suitable for profiling)</p>",
        "id": 260603930,
        "sender_full_name": "njn",
        "timestamp": 1636330243
    },
    {
        "content": "<p>I don't know what suitable for profiling means, but <code>build --stage 2</code> gets you a stage 2 compiler</p>",
        "id": 260603952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636330275
    },
    {
        "content": "<p>\"Suitable for profiling\" means I want to profile rustc itself, in order to speed it up. This requires a few things like: an optimized build, non-incremental (because that can result in slower code), debuginfo=1 for line numbers, etc.</p>",
        "id": 260604023,
        "sender_full_name": "njn",
        "timestamp": 1636330414
    },
    {
        "content": "<p>Those should all be on by default, except for debuginfo which you've already configured :)</p>",
        "id": 260604030,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636330441
    },
    {
        "content": "<p>Yes. I'm just answering your implicit question about what \"suitable for profiling\" means, in case it's helpful :)</p>",
        "id": 260604080,
        "sender_full_name": "njn",
        "timestamp": 1636330493
    },
    {
        "content": "<p>The whole thing of \"explain broadly what you're doing\" rather than asking a specific question</p>",
        "id": 260604097,
        "sender_full_name": "njn",
        "timestamp": 1636330533
    },
    {
        "content": "<p>I'm happy to question anything and everything about this, including e.g. \"do I even need to profile a stage 2 compiler, could I profile a stage 1 compiler?\"</p>",
        "id": 260604149,
        "sender_full_name": "njn",
        "timestamp": 1636330579
    },
    {
        "content": "<p>Yes, you can profile a stage 1 compiler. It may not be representative of stage 2 though (e.g. if nightly has MIR opts on by default that beta doesn't)</p>",
        "id": 260604175,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636330651
    },
    {
        "content": "<p>But I would expect it to be very close most of the time</p>",
        "id": 260604181,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636330664
    },
    {
        "content": "<p>I usually only use stage 1 for profiling rustdoc</p>",
        "id": 260604184,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636330674
    },
    {
        "content": "<p>I'm re-reading the early parts of <a href=\"https://rustc-dev-guide.rust-lang.org/getting-started.html\">https://rustc-dev-guide.rust-lang.org/getting-started.html</a>, but this use case is still unclear, even with <a href=\"https://rustc-dev-guide.rust-lang.org/profiling.html\">https://rustc-dev-guide.rust-lang.org/profiling.html</a></p>",
        "id": 260604244,
        "sender_full_name": "njn",
        "timestamp": 1636330746
    },
    {
        "content": "<p>When you say \"this use case\", you mean whether you should use stage 1 or 2? I don't know if that's something with a definite answer ... Stage 1 is definitely a ton faster to build, and it's <em>almost</em> the same, but it's not what's distributed with rustup</p>",
        "id": 260604314,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636330827
    },
    {
        "content": "<p>Right, that's useful: stage 2 is the most representative thing to profile, but if stage 1 is similar enough it can be used instead</p>",
        "id": 260604390,
        "sender_full_name": "njn",
        "timestamp": 1636330947
    },
    {
        "content": "<p>All this reminds me of <a href=\"https://github.com/rust-lang/rust/issues/59864\">https://github.com/rust-lang/rust/issues/59864</a>, alas</p>",
        "id": 260604409,
        "sender_full_name": "njn",
        "timestamp": 1636331006
    },
    {
        "content": "<p>Because it's not clear the difference between stage 1 and stage 2?</p>",
        "id": 260604448,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636331043
    },
    {
        "content": "<p>I thought was explained reasonably well in the bootstrap page I linked ...</p>",
        "id": 260604458,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636331064
    },
    {
        "content": "<p>This particular panic is just a bug</p>",
        "id": 260604463,
        "sender_full_name": "simulacrum",
        "timestamp": 1636331074
    },
    {
        "content": "<p>there's an issue already</p>",
        "id": 260604464,
        "sender_full_name": "simulacrum",
        "timestamp": 1636331080
    },
    {
        "content": "<p>you probably want download-llvm = true, unless you're intending to optimize LLVM (that'll give you a PGO'd llvm on x86_64-unknown-linux-gnu, which is a nice speedup)</p>",
        "id": 260604490,
        "sender_full_name": "simulacrum",
        "timestamp": 1636331135
    },
    {
        "content": "<p>But for profiling I'd recommend using x.py build --stage 1 library/test and the stage1/bin/rustc produced by that</p>",
        "id": 260604544,
        "sender_full_name": "simulacrum",
        "timestamp": 1636331196
    },
    {
        "content": "<p>if you're seeing inconsistent results on perf.rlo, then the likely cause is PGO -- that's pretty annoying to setup locally, but you can look at src/ci/pgo.sh for what CI does</p>",
        "id": 260604555,
        "sender_full_name": "simulacrum",
        "timestamp": 1636331230
    },
    {
        "content": "<p>(it's actually fairly easy to get it running locally, more of a time sink)</p>",
        "id": 260604558,
        "sender_full_name": "simulacrum",
        "timestamp": 1636331246
    },
    {
        "content": "<p>Ok, thanks</p>",
        "id": 260604561,
        "sender_full_name": "njn",
        "timestamp": 1636331259
    },
    {
        "content": "<p>I admit I still find the <code>library/test</code>/<code>compiler/rustc</code> stuff confusing too</p>",
        "id": 260604580,
        "sender_full_name": "njn",
        "timestamp": 1636331282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> I really recommend looking through that bootstrap page if you haven't read it in the last ~6 months since I reworked it</p>",
        "id": 260604627,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636331367
    },
    {
        "content": "<p>Happy to answer any questions you still have afterwards :)</p>",
        "id": 260604680,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636331416
    },
    {
        "content": "<p>I just consulted some old notes I had from the last time I was confused by all this. I think the possible \"targets\" (might be the wrong word) for <code>x.py build</code> are:</p>\n<ul>\n<li>src/libstd</li>\n<li>src/libtest</li>\n<li>src/rustc</li>\n<li>src/codegen</li>\n</ul>",
        "id": 260604773,
        "sender_full_name": "njn",
        "timestamp": 1636331636
    },
    {
        "content": "<p>Err most of those have been shuffled to different directories</p>",
        "id": 260604821,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636331689
    },
    {
        "content": "<p>E.g. <code>src/libstd</code> is now <code>library/std</code></p>",
        "id": 260604824,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636331701
    },
    {
        "content": "<p>Mmm, ok</p>",
        "id": 260604826,
        "sender_full_name": "njn",
        "timestamp": 1636331703
    },
    {
        "content": "<p>And <code>src/rustc</code> is now <code>compiler/rustc</code></p>",
        "id": 260604833,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636331715
    },
    {
        "content": "<p>(not sure what the codegen directory used to build)</p>",
        "id": 260604893,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636331779
    },
    {
        "content": "<p>So, @simulacrum's <code>x.py build --stage 1 library/test</code> means \"build the stage 1 compiler with the stage 0 compiler, plus also the stage2 stdlib (plus its tests?) with the stage 1 compiler...?\"</p>",
        "id": 260604973,
        "sender_full_name": "njn",
        "timestamp": 1636331921
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> I think you're using \"stage2 stdlib\" in a different sense than the dev guide does, but yes, that builds the standard library with the stage 1 compiler</p>",
        "id": 260604997,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636331980
    },
    {
        "content": "<p>hm, well, in some sense yes, but that's also the stage 1 libstd (we do the library copy thing)</p>\n<p>library/test is just the test harness (i.e. code that runs when you do <code>#[test]</code>), it's not actual tests</p>",
        "id": 260605001,
        "sender_full_name": "simulacrum",
        "timestamp": 1636331984
    },
    {
        "content": "<p>I guess I'm not sure what the effect of the <code>library/test</code>is there</p>",
        "id": 260605002,
        "sender_full_name": "njn",
        "timestamp": 1636331989
    },
    {
        "content": "<p>it stops you from building the stage 2 compiler (i.e., the second rustc build)</p>",
        "id": 260605052,
        "sender_full_name": "simulacrum",
        "timestamp": 1636332016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> not since I changed the defaults</p>",
        "id": 260605056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636332031
    },
    {
        "content": "<p>oh, well, then maybe it's not actually necessary</p>",
        "id": 260605060,
        "sender_full_name": "simulacrum",
        "timestamp": 1636332039
    },
    {
        "content": "<p>Now it just prevents building rustdoc</p>",
        "id": 260605062,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636332043
    },
    {
        "content": "<p>ok, prevents doing probably-useless work :)</p>",
        "id": 260605066,
        "sender_full_name": "simulacrum",
        "timestamp": 1636332059
    },
    {
        "content": "<p>for me, anyway</p>",
        "id": 260605072,
        "sender_full_name": "simulacrum",
        "timestamp": 1636332066
    },
    {
        "content": "<p>(I wanted to make rustdoc off by default too but people complained)</p>",
        "id": 260605078,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636332080
    },
    {
        "content": "<p>Ok, I will try using <code>x.py build --stage 1 library/test</code> and <code>stage1/bin/rustc</code>, thanks. I have always found this stuff confusing :(</p>",
        "id": 260605237,
        "sender_full_name": "njn",
        "timestamp": 1636332337
    },
    {
        "content": "<p>Oh, is <code>RUSTFLAGS=\"-C link-arg=-fuse-ld=lld\"</code> still useful/needed on Linux?</p>",
        "id": 260605303,
        "sender_full_name": "njn",
        "timestamp": 1636332424
    },
    {
        "content": "<p>I think you can specify it via use-lld or some such in config.toml these days and it'll adjust slightly more</p>",
        "id": 260605308,
        "sender_full_name": "simulacrum",
        "timestamp": 1636332442
    },
    {
        "content": "<p>but yes, IIRC, still useful</p>",
        "id": 260605309,
        "sender_full_name": "simulacrum",
        "timestamp": 1636332447
    },
    {
        "content": "<p>(there's an issue open somewhere to turn it on by default)</p>",
        "id": 260605360,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636332492
    },
    {
        "content": "<p>Ah, looks like <code>[rust] use-lld=true</code></p>",
        "id": 260605392,
        "sender_full_name": "njn",
        "timestamp": 1636332560
    },
    {
        "content": "<p>I also learned about <code>[llvm] link-jobs = 2</code> today because the LLVM linking OOM'd my 32GiB-of-RAM machine O_o</p>",
        "id": 260605447,
        "sender_full_name": "njn",
        "timestamp": 1636332605
    },
    {
        "content": "<p>I had four linking jobs that each got up to about 7 GiB before they were killed</p>",
        "id": 260605464,
        "sender_full_name": "njn",
        "timestamp": 1636332633
    },
    {
        "content": "<p>Did you have LTO on or something? That seems unusually high even for llvm</p>",
        "id": 260605466,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636332633
    },
    {
        "content": "<p>Just the config.toml mentioned above, nothing fancy other than <code>[llvm] release-debuginfo = true</code></p>",
        "id": 260605486,
        "sender_full_name": "njn",
        "timestamp": 1636332668
    },
    {
        "content": "<p>Oof, ok. FWIW you should be able to download LLVM without needing to link it locally</p>",
        "id": 260605498,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636332708
    },
    {
        "content": "<p>But will that have the debuginfo in it? That's useful when profiling</p>",
        "id": 260605558,
        "sender_full_name": "njn",
        "timestamp": 1636332748
    },
    {
        "content": "<p>I think so, yes - there's an \"llvm-alt\" component which I believe has debuginfo</p>",
        "id": 260605563,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636332775
    },
    {
        "content": "<p>you probably want to build locally if you want llvm debuginfo</p>",
        "id": 260605567,
        "sender_full_name": "simulacrum",
        "timestamp": 1636332785
    },
    {
        "content": "<p>Oh right, -alt is assertions</p>",
        "id": 260605573,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636332804
    },
    {
        "content": "<p>I don't think we ship debuginfo llvm's, the alt builds have assertions on but that's... different</p>",
        "id": 260605574,
        "sender_full_name": "simulacrum",
        "timestamp": 1636332805
    },
    {
        "content": "<p>(and fwiw you shouldn't need to memorize this, x.py will give a hard error if you configure an LLVM setting that isn't available for downloads)</p>",
        "id": 260605625,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636332880
    },
    {
        "content": "<p>LOL, I have a million bash aliases for all this stuff that I'm having to update</p>",
        "id": 260605780,
        "sender_full_name": "njn",
        "timestamp": 1636333112
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\">https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html</a> suggests creating a toolchain with rustup</p>",
        "id": 260606127,
        "sender_full_name": "njn",
        "timestamp": 1636333583
    },
    {
        "content": "<p>Is there anything wrong with just e.g. running <code>$HOME/dev/rust0/build/x86_64-unknown-linux-gnu/stage1/bin/rustc</code>?</p>",
        "id": 260606133,
        "sender_full_name": "njn",
        "timestamp": 1636333609
    },
    {
        "content": "<p>that works, it's just more annoying</p>",
        "id": 260606147,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636333642
    },
    {
        "content": "<p>I'm used to it :) I have this:</p>\n<div class=\"codehilite\"><pre><span></span><code>export RUSTC0=&quot;$HOME/dev/rust0/build/x86_64-unknown-linux-gnu/stage1/bin/rustc&quot;\n</code></pre></div>",
        "id": 260606203,
        "sender_full_name": "njn",
        "timestamp": 1636333689
    },
    {
        "content": "<p>I just run <code>$RUSTC0 a.rs</code>, etc.</p>",
        "id": 260606205,
        "sender_full_name": "njn",
        "timestamp": 1636333698
    },
    {
        "content": "<p>Just wanted to make sure there wasn't something deeper going on with the toolchain</p>",
        "id": 260606212,
        "sender_full_name": "njn",
        "timestamp": 1636333710
    },
    {
        "content": "<p>not to my knowledge, no - it does let you run rustdoc and things more easily, but I don't think it changes any behavior</p>",
        "id": 260606216,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636333732
    },
    {
        "content": "<p>Hmm, running <code>x.py test</code> I get lots of link errors like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: linking with `cc` failed: exit status: 1\n   |\n   = note: &quot;cc&quot; &quot;-m64&quot; &quot;/home/njn/dev/rust1/build/x86_64-unknown-linux-gnu/test/ui/z-crate-attr/a.z_crate_attr.d6e75bc1-cgu.0.rcgu.o&quot; &quot;-Wl,--as-needed&quot; &quot;-L&quot; &quot;/home/njn/dev/rust1/build/x86_64-unknown-linux-gnu/native/rust-test-helpers&quot; &quot;-L&quot; &quot;/home/njn/dev/rust1/build/x86_64-unknown-linux-gnu/test/ui/z-crate-attr/auxiliary&quot; &quot;-L&quot; &quot;/home/njn/dev/rust1/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;-Wl,--start-group&quot; &quot;-L&quot; &quot;/home/njn/dev/rust1/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;-lstd-45222600de877f18&quot; &quot;-Wl,--end-group&quot; &quot;-Wl,-Bstatic&quot; &quot;/home/njn/dev/rust1/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libcompiler_builtins-82dfd1ba81d743bb.rlib&quot; &quot;-Wl,-Bdynamic&quot; &quot;-lgcc_s&quot; &quot;-lutil&quot; &quot;-lrt&quot; &quot;-lpthread&quot; &quot;-lm&quot; &quot;-ldl&quot; &quot;-lc&quot; &quot;-Wl,--eh-frame-hdr&quot; &quot;-Wl,-znoexecstack&quot; &quot;-L&quot; &quot;/home/njn/dev/rust1/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;-o&quot; &quot;/home/njn/dev/rust1/build/x86_64-unknown-linux-gnu/test/ui/z-crate-attr/a&quot; &quot;-Wl,--gc-sections&quot; &quot;-pie&quot; &quot;-Wl,-zrelro&quot; &quot;-Wl,-znow&quot; &quot;-Wl,-O1&quot; &quot;-nodefaultlibs&quot; &quot;-Wl,-rpath,$ORIGIN/../../../stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib&quot; &quot;-Wl,--enable-new-dtags&quot; &quot;-fuse-ld=lld&quot; &quot;-Wl,--threads=1&quot;\n   = note: ld.lld: error: unknown argument &#39;--threads=1&#39;\n           collect2: error: ld returned 1 exit status\n</code></pre></div>",
        "id": 260608762,
        "sender_full_name": "njn",
        "timestamp": 1636337668
    },
    {
        "content": "<p>I wonder if <code>use-lld</code> in <code>config.toml</code> is broken</p>",
        "id": 260608769,
        "sender_full_name": "njn",
        "timestamp": 1636337691
    },
    {
        "content": "<p>hmm, the only place I see -Wl,--threads=1 is in <code>src/bootstrap/bin/rustdoc.rs</code></p>",
        "id": 260608789,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636337750
    },
    {
        "content": "<p>I have lld 10.0.0</p>",
        "id": 260608791,
        "sender_full_name": "njn",
        "timestamp": 1636337752
    },
    {
        "content": "<p>are you setting it in RUSTFLAGS?</p>",
        "id": 260608792,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636337757
    },
    {
        "content": "<p>no</p>",
        "id": 260608794,
        "sender_full_name": "njn",
        "timestamp": 1636337762
    },
    {
        "content": "<p><code>git grep threads=1</code> shows lots of hits</p>",
        "id": 260608838,
        "sender_full_name": "njn",
        "timestamp": 1636337795
    },
    {
        "content": "<p><code>test-threads</code> is something different though</p>",
        "id": 260608849,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636337842
    },
    {
        "content": "<p>the only hit I see besides rustdoc is</p>\n<div class=\"codehilite\"><pre><span></span><code>src/bootstrap/lib.rs\n1042:            let threads = if target.contains(&quot;windows&quot;) { &quot;/threads:1&quot; } else { &quot;--threads=1&quot; };\n</code></pre></div>",
        "id": 260608856,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636337854
    },
    {
        "content": "<p>src/bootstrap/lib.rs has something</p>",
        "id": 260608857,
        "sender_full_name": "njn",
        "timestamp": 1636337858
    },
    {
        "content": "<p>yeah</p>",
        "id": 260608859,
        "sender_full_name": "njn",
        "timestamp": 1636337858
    },
    {
        "content": "<p>added in <a href=\"https://github.com/rust-lang/rust/commit/0ddc3afbb59bde6a14068b3e7887aa41cd58277f\">https://github.com/rust-lang/rust/commit/0ddc3afbb59bde6a14068b3e7887aa41cd58277f</a></p>",
        "id": 260608919,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636337926
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> , apparently this doesn't work on all versions of ldd</p>",
        "id": 260608921,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636337936
    },
    {
        "content": "<p>hm</p>",
        "id": 260608925,
        "sender_full_name": "simulacrum",
        "timestamp": 1636337947
    },
    {
        "content": "<p>I thought we used rust-lld from the beta, which should always work</p>",
        "id": 260608928,
        "sender_full_name": "simulacrum",
        "timestamp": 1636337956
    },
    {
        "content": "<p>my system ld.lld accepts <code>--threads</code>, but not <code>--threads=1</code></p>",
        "id": 260608933,
        "sender_full_name": "njn",
        "timestamp": 1636337991
    },
    {
        "content": "<p>$ ls -trl <code>which lld</code><br>\nlrwxrwxrwx 1 mark mark 112 Sep 19 10:50 /home/mark/bin/lld -&gt; /home/mark/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/rust-lld</p>",
        "id": 260608934,
        "sender_full_name": "simulacrum",
        "timestamp": 1636337993
    },
    {
        "content": "<p>So I guess you can do something similar</p>",
        "id": 260608973,
        "sender_full_name": "simulacrum",
        "timestamp": 1636338007
    },
    {
        "content": "<p>As a workaround?</p>",
        "id": 260609000,
        "sender_full_name": "njn",
        "timestamp": 1636338062
    },
    {
        "content": "<p>well, I mean, it just gets you ~latest stable lld</p>",
        "id": 260609010,
        "sender_full_name": "simulacrum",
        "timestamp": 1636338086
    },
    {
        "content": "<p>(currently v13)</p>",
        "id": 260609014,
        "sender_full_name": "simulacrum",
        "timestamp": 1636338094
    },
    {
        "content": "<p>since we upgrade LLVM pretty quickly</p>",
        "id": 260609015,
        "sender_full_name": "simulacrum",
        "timestamp": 1636338102
    },
    {
        "content": "<p>but yeah, it'll \"fix\" the issue</p>",
        "id": 260609023,
        "sender_full_name": "simulacrum",
        "timestamp": 1636338113
    },
    {
        "content": "<p>UI tests run a good bit faster with this threads=1</p>",
        "id": 260609061,
        "sender_full_name": "simulacrum",
        "timestamp": 1636338124
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>\n<div class=\"codehilite\"><pre><span></span><code> [gulf:~] .rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/rust-lld\n.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/x86_64-unknown-linux-gnu/bin/rust-lld: error while loading shared libraries: libLLVM-13-rust-1.58.0-nightly.so: cannot open shared object file: No such file or directory\n</code></pre></div>",
        "id": 260609305,
        "sender_full_name": "njn",
        "timestamp": 1636338594
    },
    {
        "content": "<p>hm</p>",
        "id": 260609354,
        "sender_full_name": "simulacrum",
        "timestamp": 1636338629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> does <code>rustup component add llvm-tools-preview</code> help?</p>",
        "id": 260609358,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636338635
    },
    {
        "content": "<p>it seems to work for me, I don't have LD_LIBRARY_PATH...</p>",
        "id": 260609378,
        "sender_full_name": "simulacrum",
        "timestamp": 1636338670
    },
    {
        "content": "<p>I have <code>LD_LIBRARY_PATH=/home/njn/local/lib:</code></p>",
        "id": 260609391,
        "sender_full_name": "njn",
        "timestamp": 1636338716
    },
    {
        "content": "<p>I think I'll disable <code>use-lld</code>, go back to using RUSTFLAGS</p>",
        "id": 260609436,
        "sender_full_name": "njn",
        "timestamp": 1636338732
    },
    {
        "content": "<p>I might retry <code>use-lld</code> later, but I need to get basic stuff just working again, even if it involves sub-optimal stuff</p>",
        "id": 260610029,
        "sender_full_name": "njn",
        "timestamp": 1636339555
    },
    {
        "content": "<p>Oh, RUSTFLAGS still has the same problem. I guess I'll switch away from lld for the moment</p>",
        "id": 260610410,
        "sender_full_name": "njn",
        "timestamp": 1636340154
    },
    {
        "content": "<p>And on the stage 1 vs stage 2 choice, I just re-read this note in the rustc-perf docs:</p>\n<blockquote>\n<p>&lt;RUSTC&gt;: a path (relative or absolute) to a rustc executable that will be benchmarked. Some benchmarks use plugins, which require a stage 2 compiler. Therefore, the value is likely to be something like $RUST/build/x86_64-unknown-linux-gnu/stage2/bin/rustc, where $RUST is a path (relative or absolute) to a rust repository.</p>\n</blockquote>",
        "id": 260611672,
        "sender_full_name": "njn",
        "timestamp": 1636341852
    },
    {
        "content": "<p>I think servo is the only one that uses plugins (do they still have plugins?)</p>",
        "id": 260611685,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636341885
    },
    {
        "content": "<p>and I remember you saying a while ago you very rarely run servo because it's so expensive and dependent on CGU partitioning</p>",
        "id": 260611691,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636341902
    },
    {
        "content": "<p>Good to know :)</p>",
        "id": 260611697,
        "sender_full_name": "njn",
        "timestamp": 1636341914
    },
    {
        "content": "<p>I don't even know what plugins are</p>",
        "id": 260612104,
        "sender_full_name": "njn",
        "timestamp": 1636342541
    },
    {
        "content": "<p>I thought stage2 might have been needed for benchmarks using procmacros, but I could be wrong about that</p>",
        "id": 260612106,
        "sender_full_name": "njn",
        "timestamp": 1636342559
    },
    {
        "content": "<p>my understanding is that plugins are type-aware proc-macros</p>",
        "id": 260612142,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636342565
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">njn</span> <a href=\"#narrow/stream/131828-t-compiler/topic/thread.20'main'.20panicked.20at.20'fs.3A.3Aread.28stamp.29.2E.2E.2E'/near/260612106\">said</a>:</p>\n<blockquote>\n<p>I thought stage2 might have been needed for benchmarks using procmacros, but I could be wrong about that</p>\n</blockquote>\n<p>it used to be, but no longer</p>",
        "id": 260612146,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636342571
    },
    {
        "content": "<blockquote>\n<p>it used to be, but no longer</p>\n</blockquote>\n<p>That's the theme for this entire thread</p>",
        "id": 260612554,
        "sender_full_name": "njn",
        "timestamp": 1636343202
    },
    {
        "content": "<p>hopefully most of those changes are positive and not just churn <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 260612617,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636343310
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/thread.20'main'.20panicked.20at.20'fs.3A.3Aread.28stamp.29.2E.2E.2E'/near/260608921\">said</a>:</p>\n<blockquote>\n<p>cc <span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> , apparently this doesn't work on all versions of ldd</p>\n</blockquote>\n<p>Hrm, it has been working for me with 11 and 12. And I assume it also works with 13 since CI builds that</p>",
        "id": 260629632,
        "sender_full_name": "The 8472",
        "timestamp": 1636362195
    },
    {
        "content": "<p>Oh yeah I think 10 only had --threads/--no-threads or something like that.</p>",
        "id": 260629776,
        "sender_full_name": "The 8472",
        "timestamp": 1636362270
    },
    {
        "content": "<p>This might prompt me to get off Ubuntu 20.04 LTS onto the 6-montly releases again</p>",
        "id": 260631214,
        "sender_full_name": "njn",
        "timestamp": 1636363096
    },
    {
        "content": "<p>We could make <code>rust.use-lld</code> use rust-lld with <code>-Zgcc-ld=lld</code>? Currently we use <code>-Clink-args=-fuse-ld=lld</code> which uses whatever lld is in PATH, in contrast to what is documented in config.toml.example. For stage 2 this would only work if <code>rust.lld</code>is set to true though.</p>",
        "id": 260631672,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1636363363
    },
    {
        "content": "<p>Lld is pretty fast to build, so I think defaulting to building it with use-lld should be fine. We can also consider detecting the version and failing early.</p>",
        "id": 260649764,
        "sender_full_name": "simulacrum",
        "timestamp": 1636374367
    },
    {
        "content": "<p>I just tried this change:</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/bootstrap/lib.rs b/src/bootstrap/lib.rs\nindex 3b3c8a9227d..408dbce6589 100644\n--- a/src/bootstrap/lib.rs\n+++ b/src/bootstrap/lib.rs\n@@ -1036,7 +1036,8 @@ fn lld_flags(&amp;self, target: TargetSelection) -&gt; impl Iterator&lt;Item = String&gt; {\n\n         if self.config.use_lld {\n             if self.is_fuse_ld_lld(target) {\n-                options[0] = Some(&quot;-Clink-arg=-fuse-ld=lld&quot;.to_string());\n+                //options[0] = Some(&quot;-Clink-arg=-fuse-ld=lld&quot;.to_string());\n+                options[0] = Some(&quot;-Zgcc-ld=lld&quot;.to_string());\n             }\n\n             let threads = if target.contains(&quot;windows&quot;) { &quot;/threads:1&quot; } else { &quot;--threads=1&quot; };\n</code></pre></div>\n<p>And enabled <code>use-lld = true</code>and everything worked fine, even <code>./x.py build --stage 2</code>. And I confirmed by looking at <code>top</code> that it was using <code>ld.lld</code> instead of <code>ld</code> when doing linking.</p>",
        "id": 262392044,
        "sender_full_name": "nnethercote",
        "timestamp": 1637623644
    },
    {
        "content": "<p>So it seems like the fix for this is even simpler than people thought? I can file a PR, is there anything else I should check/try?</p>",
        "id": 262392066,
        "sender_full_name": "nnethercote",
        "timestamp": 1637623673
    },
    {
        "content": "<p>Oh, I just ran tests <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 262392262,
        "sender_full_name": "nnethercote",
        "timestamp": 1637623805
    },
    {
        "content": "<p>Tons of <code>error: rust-lld (as ld) not found</code> failures</p>",
        "id": 262392271,
        "sender_full_name": "nnethercote",
        "timestamp": 1637623812
    },
    {
        "content": "<p>I added this:</p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/bootstrap/config.rs b/src/bootstrap/config.rs\nindex 68e20f90b7f..bd3666b1d96 100644\n--- a/src/bootstrap/config.rs\n+++ b/src/bootstrap/config.rs\n@@ -895,6 +895,10 @@ pub fn parse(args: &amp;[String]) -&gt; Config {\n             }\n             set(&amp;mut config.use_lld, rust.use_lld);\n             set(&amp;mut config.lld_enabled, rust.lld);\n+            if let Some(true) = rust.use_lld {\n+                // Need a local `lld` built in order to use it.\n+                config.lld_enabled = true;\n+            }\n             set(&amp;mut config.llvm_tools_enabled, rust.llvm_tools);\n             config.rustc_parallel = rust.parallel_compiler.unwrap_or(false);\n             config.rustc_default_linker = rust.default_linker;\n</code></pre></div>\n<p>And things are looking better. Just a single <code>ui</code> failure now, for <code>ui/linkage-attr/issue-10755.rs</code>.</p>",
        "id": 262393822,
        "sender_full_name": "nnethercote",
        "timestamp": 1637624875
    },
    {
        "content": "<p>It uses <code>compile-flags: -C linker=llllll -C linker-flavor=ld</code>.</p>\n<p>It is supposed to fail with <code>linker 'llllll' not found</code>.</p>\n<p>But instead it fails with <code>option '-Z gcc-ld' is used even though linker flavor is not gcc</code>, hmm.</p>",
        "id": 262393945,
        "sender_full_name": "nnethercote",
        "timestamp": 1637624948
    },
    {
        "content": "<p>Is there a way to unset <code>-Zgcc-ld</code>?</p>",
        "id": 262394101,
        "sender_full_name": "nnethercote",
        "timestamp": 1637625028
    },
    {
        "content": "<p>I think that would make stage 0 doc tests slower?</p>",
        "id": 262397561,
        "sender_full_name": "The 8472",
        "timestamp": 1637627427
    },
    {
        "content": "<p>I added those flags to make lib doctests (stage 0) and UI tests (stage1) run faster.</p>",
        "id": 262397627,
        "sender_full_name": "The 8472",
        "timestamp": 1637627515
    },
    {
        "content": "<p>Just using <code>-Zgcc-ld</code> works. <span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> I'm just asking about disabling it for a single test</p>",
        "id": 262397843,
        "sender_full_name": "nnethercote",
        "timestamp": 1637627682
    },
    {
        "content": "<p>ah, maybe compiletest needs to detect when the test requests a different linker and not pass in the flags from bootstrap</p>",
        "id": 262397995,
        "sender_full_name": "The 8472",
        "timestamp": 1637627824
    },
    {
        "content": "<p>But I think instead of adding more opt-in/opt-out back and forth it might be easier to check if lld supports the thread argument once in some place and adjust the arguments accordingly.</p>",
        "id": 262398201,
        "sender_full_name": "The 8472",
        "timestamp": 1637627993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"330154\">@The 8472</span> That would be the \"use system lld\" approach, rather than the \"use our own lld\" approach that I'm trying out</p>",
        "id": 262398336,
        "sender_full_name": "nnethercote",
        "timestamp": 1637628081
    },
    {
        "content": "<p>\"our own lld\" is only built when you do stage 1 builds (I think), so it wouldn't help library developers</p>",
        "id": 262398371,
        "sender_full_name": "The 8472",
        "timestamp": 1637628122
    },
    {
        "content": "<p>How/where would I check for <code>--thread</code> support?</p>",
        "id": 262398627,
        "sender_full_name": "nnethercote",
        "timestamp": 1637628315
    },
    {
        "content": "<p>try <code>ld.lld -V --threads=1; echo $?</code>, i'd expect it to return exit code 1 if it's not supported 0 otherwise</p>",
        "id": 262398773,
        "sender_full_name": "The 8472",
        "timestamp": 1637628474
    },
    {
        "content": "<p>(My current branch just passed <code>x.py test</code>, FWIW)</p>",
        "id": 262398782,
        "sender_full_name": "nnethercote",
        "timestamp": 1637628479
    },
    {
        "content": "<p>try <code>./x.py test library/std --stage 0</code></p>",
        "id": 262398840,
        "sender_full_name": "The 8472",
        "timestamp": 1637628516
    },
    {
        "content": "<p>Lots of failures: <code>error: rust-lld (as ld) not found</code></p>",
        "id": 262398976,
        "sender_full_name": "nnethercote",
        "timestamp": 1637628623
    },
    {
        "content": "<p>I wish I understood rustc's build system</p>",
        "id": 262398991,
        "sender_full_name": "nnethercote",
        "timestamp": 1637628638
    },
    {
        "content": "<p>The <code>ld.lld -V</code> thing works, where would I run that test?</p>",
        "id": 262399009,
        "sender_full_name": "nnethercote",
        "timestamp": 1637628663
    },
    {
        "content": "<p>Presumably somewhere within <code>bootstrap/</code>?</p>",
        "id": 262399042,
        "sender_full_name": "nnethercote",
        "timestamp": 1637628692
    },
    {
        "content": "<p><code>test.rs</code> seems to have stuff like that</p>",
        "id": 262399124,
        "sender_full_name": "nnethercote",
        "timestamp": 1637628742
    },
    {
        "content": "<p>yeah, just some helper function that populates a <code>Lazy</code> or <code>Once</code> so it's not probed all the time and then use that in the helper function that sets the thread parameters.</p>",
        "id": 262399287,
        "sender_full_name": "The 8472",
        "timestamp": 1637628772
    },
    {
        "content": "<p>Or I could just find a way to update lld on my system and forget about this, because it'll become a less relevant problem as these old versions of lld become less common over time...</p>",
        "id": 262399396,
        "sender_full_name": "nnethercote",
        "timestamp": 1637628855
    },
    {
        "content": "<p>heh, sure. no llvm backports?</p>",
        "id": 262399438,
        "sender_full_name": "The 8472",
        "timestamp": 1637628909
    },
    {
        "content": "<p>Sorry, I don't understand the question</p>",
        "id": 262399457,
        "sender_full_name": "nnethercote",
        "timestamp": 1637628929
    },
    {
        "content": "<p>well, debian has backports repositories where one can selectively pull in packages that have been backported from the next version to the current one. I think you were on ubuntu? I think they have something like that too.</p>",
        "id": 262399568,
        "sender_full_name": "The 8472",
        "timestamp": 1637629006
    },
    {
        "content": "<p><a href=\"https://help.ubuntu.com/community/UbuntuBackports\">https://help.ubuntu.com/community/UbuntuBackports</a> maybe there's a newer llvm/lld in there.</p>",
        "id": 262399712,
        "sender_full_name": "The 8472",
        "timestamp": 1637629072
    },
    {
        "content": "<p>I see, thanks!  I'm considering just upgrading from 20.04 LTS to 21.10 anyway</p>",
        "id": 262400456,
        "sender_full_name": "nnethercote",
        "timestamp": 1637629578
    },
    {
        "content": "<p>Though now I see that probably requires a fresh install</p>",
        "id": 262400605,
        "sender_full_name": "nnethercote",
        "timestamp": 1637629738
    },
    {
        "content": "<p>ubuntu ships with update tools that should let you go from LTS to the next normal release. idk if you can skip straight to 21.10 though.</p>",
        "id": 262400790,
        "sender_full_name": "The 8472",
        "timestamp": 1637629893
    },
    {
        "content": "<p>In the end I was able to upgrade 20.04 to 21.04, and then to 21.10</p>",
        "id": 262411837,
        "sender_full_name": "nnethercote",
        "timestamp": 1637641931
    }
]