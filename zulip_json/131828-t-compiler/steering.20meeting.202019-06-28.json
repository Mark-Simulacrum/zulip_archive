[
    {
        "content": "<p>So we need to discuss a possible immediate backport of <a href=\"https://github.com/rust-lang/rust/pull/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/61207\">https://github.com/rust-lang/rust/pull/61207</a>  to 1.36.0 stable due to forward compat concerns with the second to last case in <a href=\"https://gist.github.com/nikomatsakis/c5c8e585989924e8485df48ab6bbc3dd\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/c5c8e585989924e8485df48ab6bbc3dd\">https://gist.github.com/nikomatsakis/c5c8e585989924e8485df48ab6bbc3dd</a></p>",
        "id": 169172620,
        "sender_full_name": "centril",
        "timestamp": 1561667443
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 169172639,
        "sender_full_name": "centril",
        "timestamp": 1561667457
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span></p>",
        "id": 169172644,
        "sender_full_name": "centril",
        "timestamp": 1561667461
    },
    {
        "content": "<p>(for tomorrow)</p>",
        "id": 169172662,
        "sender_full_name": "centril",
        "timestamp": 1561667471
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 169172669,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1561667476
    },
    {
        "content": "<p>especially because I'm not sure if I'll able to be online that much tomorrow</p>",
        "id": 169172682,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1561667490
    },
    {
        "content": "<p>I might as well cc <span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span>, right?</p>",
        "id": 169172684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561667491
    },
    {
        "content": "<p>Some context:<br>\n- We discussed this on the language team meeting today. Attendance was me, Felix, Taylor, and Josh. Our conclusion was to attempt a backport.<br>\n- This is particularly problematic due to case 7 and 10 being weird together.<br>\n- This was tested on crater with zero regressions.</p>",
        "id": 169173093,
        "sender_full_name": "centril",
        "timestamp": 1561667778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> seems to have already reviewed the PR; they said:</p>\n<blockquote>\n<p>I like how simple this is!</p>\n</blockquote>\n<p>However, it would be good if as many as possible can give the PR a thorough review and add additional test cases if you believe it to be necessary.</p>",
        "id": 169173184,
        "sender_full_name": "centril",
        "timestamp": 1561667849
    },
    {
        "content": "<p>Ideally that should happen ASAP because we need this done before the 30th is over</p>",
        "id": 169173215,
        "sender_full_name": "centril",
        "timestamp": 1561667879
    },
    {
        "content": "<p>(I will note that I did express a slight misgiving, in the sense of \"it doesn't seem like it would be the end of the world to not have this backport\"; but I do appreciate the motivation that with the stabilization of the Future API's, code like this will become more commonplace)</p>",
        "id": 169174486,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561668879
    },
    {
        "content": "<p>and I think <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> made the point that it <em>would</em> be a disaster to not address this &lt;= the point when async-await is stabilized.</p>",
        "id": 169174536,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561668934
    },
    {
        "content": "<p>Yeah, it for sure needs to be in by 1.37 / 1.38, but missing 1.36 probably isn't the end of the world</p>",
        "id": 169175010,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1561669272
    },
    {
        "content": "<p>I won't personally be able to manage backporting until Saturday (which is technically not too late, but gives us essentially no margin for error). I am not against backporting, really, especially given crater run. I would backport directly onto stable branch... we might need to delete artifacts for them to get properly copied to dev-static, but that can happen at any point: we always publish to rust-ci-2(naming?) bucket first IIRC.</p>",
        "id": 169196349,
        "sender_full_name": "simulacrum",
        "timestamp": 1561694504
    },
    {
        "content": "<p>(I will not be able to attend tomorrow's meeting either -- unfortunately -- but don't block on me for any decisions wrt to backport)</p>",
        "id": 169196411,
        "sender_full_name": "simulacrum",
        "timestamp": 1561694585
    },
    {
        "content": "<p>Let me try to find a better way to summarize the results here. I am concerned that the PR doesn't have the behavior I think we want, but I want to double check.</p>",
        "id": 169219797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561724570
    },
    {
        "content": "<p>at the T-lang meeting last night, <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> said several times that they did not understand, in <a href=\"https://gist.github.com/nikomatsakis/c5c8e585989924e8485df48ab6bbc3dd\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/c5c8e585989924e8485df48ab6bbc3dd\">your gist</a>, why lines 2+3 have differing static semantics under \"Niko's (preferred?) rule\"</p>",
        "id": 169219926,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561724710
    },
    {
        "content": "<p>and more generally, the group at large seemed to basically say that \"Niko's rule\" is a non-starter due to its regressing behavior for lines 2 and 5.</p>",
        "id": 169220004,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561724808
    },
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , you may want to spell out somewhere what you see as the motivation/justification for \"Niko's rule\", if that is indeed what you want.</p>",
        "id": 169220025,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561724846
    },
    {
        "content": "<p>(Also, it would probably be good to add explicit row numbers to that table. It was very annoying trying to describe the entries last night.)</p>",
        "id": 169220034,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561724879
    },
    {
        "content": "<p>Yeah, no, Niko's rule wasn't meant to be seen by the public =)</p>",
        "id": 169220160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561724981
    },
    {
        "content": "<p>actually the gist itself wasn't really ready</p>",
        "id": 169220166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561724990
    },
    {
        "content": "<p>You didn't hold onto your <code>&amp;mut gist</code> long enough.</p>",
        "id": 169220234,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561725021
    },
    {
        "content": "<p>OK, I will revamp the table, but I think my take is that the PR is indeed an improvement, but I think we may want to deprecate some of the things that we currently accept</p>",
        "id": 169220717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561725431
    },
    {
        "content": "<p>I just did some more testing, but I have to run right now</p>",
        "id": 169220740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561725447
    },
    {
        "content": "<p>OK here is a <a href=\"https://gist.github.com/nikomatsakis/5996e4f58899ef5c6926948b6f76835e\" target=\"_blank\" title=\"https://gist.github.com/nikomatsakis/5996e4f58899ef5c6926948b6f76835e\">revised gist</a> that I believe is accurate.</p>",
        "id": 169222421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561726956
    },
    {
        "content": "<p>(I assume <code>X</code> means \"rustc issues an error due to ambiguous lifetime\")</p>",
        "id": 169222890,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561727323
    },
    {
        "content": "<p>S3 and N1 are symmetrical. Only change is Pin to Box.</p>",
        "id": 169223971,
        "sender_full_name": "centril",
        "timestamp": 1561728219
    },
    {
        "content": "<p>And the mut bit but that's irrelevant</p>",
        "id": 169224026,
        "sender_full_name": "centril",
        "timestamp": 1561728247
    },
    {
        "content": "<blockquote>\n<p>S3 and N1 are symmetrical. Only change is Pin to Box.</p>\n</blockquote>\n<p>this is intentional :)</p>",
        "id": 169226901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561730463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> but why does it say X then?</p>",
        "id": 169226934,
        "sender_full_name": "centril",
        "timestamp": 1561730501
    },
    {
        "content": "<p>hello <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span></p>",
        "id": 169226947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561730516
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> but why does it say X then?</p>\n</blockquote>\n<p>(correct, typo, should be <code>self</code> for 61207)</p>",
        "id": 169227010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561730544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> phew <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 169227022,
        "sender_full_name": "centril",
        "timestamp": 1561730563
    },
    {
        "content": "<p>the world is alright again</p>",
        "id": 169227031,
        "sender_full_name": "centril",
        "timestamp": 1561730569
    },
    {
        "content": "<p>So I'd like to establish up front</p>",
        "id": 169227043,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561730582
    },
    {
        "content": "<blockquote>\n<p>(I assume <code>X</code> means \"rustc issues an error due to ambiguous lifetime\")</p>\n</blockquote>\n<p>actually it's that it gets a kind of \"unrelated error\" -- I was just double checking the behavior in weird cases</p>",
        "id": 169227052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561730591
    },
    {
        "content": "<p>I'd like to establish up front whether we plan to have the topic of this meeting <em>change</em> to discussion of the last minute backporting of <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a>, or if we are planning to bound how much time we spend discussing that</p>",
        "id": 169227128,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561730642
    },
    {
        "content": "<p>(imo <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a> should take as much time as is necessary)</p>",
        "id": 169227147,
        "sender_full_name": "centril",
        "timestamp": 1561730664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>  I think you are missing my point</p>",
        "id": 169227154,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561730677
    },
    {
        "content": "<p>if we anticipate that it will take up the whole meeting slot, then fine</p>",
        "id": 169227182,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561730703
    },
    {
        "content": "<p>but there are people who may be interested in the triage/maintenance issues who might not be as interested in the particulars of this</p>",
        "id": 169227201,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561730728
    },
    {
        "content": "<p>Out of respect for those people's time, I would like to at least try to <em>guess</em> whether this is going to be a \"quick\" 5-10 minute thing</p>",
        "id": 169227225,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561730756
    },
    {
        "content": "<p>or if we simply need to punt on the triage/maintenance discussion, due to the timing pressure that we have for this backport question</p>",
        "id": 169227285,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561730778
    },
    {
        "content": "<p>So I think we have 2 issues to think about:<br>\n1. Do we think the PR is a step in the right direction?<br>\n2. Do we backport to 1.36.0, to 1.37.0, are we fine with 1.38.0?</p>",
        "id": 169227392,
        "sender_full_name": "centril",
        "timestamp": 1561730840
    },
    {
        "content": "<p>Possibly:<br>\n3. Is there any way in which the PR is a step in the wrong direction?</p>",
        "id": 169227420,
        "sender_full_name": "centril",
        "timestamp": 1561730863
    },
    {
        "content": "<p>I don't know how much that will take; but 8 minutes have already passed, so let's not waste more time.</p>",
        "id": 169227522,
        "sender_full_name": "centril",
        "timestamp": 1561730914
    },
    {
        "content": "<p>Okay then, based on this, I'm willing to guess that this <em>will</em> take up the whole meeting slot. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , what do you think? Should we officially change the topic of the whole meeting to be about <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a> slash dealing with <code>Pin</code> and lifetime elision?</p>",
        "id": 169227538,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561730933
    },
    {
        "content": "<p>Sure, why not.</p>",
        "id": 169227595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561730974
    },
    {
        "content": "<p>okay</p>",
        "id": 169227753,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731074
    },
    {
        "content": "<p>Here is my understanding of the function elision rules based on the gist, the reference, some tests, the code in the PR, etc..</p>\n<hr>\n<p>1. Each elided lifetime in the parameters becomes a distinct lifetime parameter.<br>\n2. If there is exactly one lifetime used in the parameters (elided or not), that lifetime is assigned to all elided output lifetimes.<br>\nIn method signatures there is another rule:</p>\n<ul>\n<li>\n<p>STABLE: If the receiver has the semantic type <code>&amp;'lt mut? Self</code>, then <code>'lt</code> is assigned to all elided output lifetime parameters.</p>\n</li>\n<li>\n<p>WITH PR: In the receiver, if there is a unique mention of the semantic type <code>&amp;'lt mut? Self</code>, then <code>'lt</code> is assigned to all elided output lifetime parameters.</p>\n</li>\n</ul>",
        "id": 169227764,
        "sender_full_name": "centril",
        "timestamp": 1561731088
    },
    {
        "content": "<p>So yes let's start with describing the behavior. I don't think that fully meets the tests</p>",
        "id": 169227845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731140
    },
    {
        "content": "<p>That is, on stable we just look at the type expression of the receiver; with the PR we look at any type expression inside the receiver</p>",
        "id": 169227848,
        "sender_full_name": "centril",
        "timestamp": 1561731144
    },
    {
        "content": "<p>Notably, this case does not behave as described:</p>\n<p><code>impl Foo&lt;'a&gt; { fn(self: Box&lt;Foo&lt;'a&gt;&gt;, f: &amp;u8) -&gt; &amp;u8 }</code></p>",
        "id": 169227868,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731161
    },
    {
        "content": "<p>under both stable and <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a>, this resolves the <code>-&gt; &amp;u8</code> to the type of <code>f</code></p>",
        "id": 169227913,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731190
    },
    {
        "content": "<p>and yet there are multiple lifetimes (so rule 2 does not apply) and there is no <code>&amp;Self</code> (so self rule does not apply)</p>",
        "id": 169227947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731217
    },
    {
        "content": "<p>I do not however necessarily think that has to block the PR</p>",
        "id": 169227977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731232
    },
    {
        "content": "<p>Because (as I said) it is also the behavior on stable</p>",
        "id": 169227991,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731239
    },
    {
        "content": "<p>(I am running one other test re: the PR which seems a bit odd; in particular, the PR uses an \"awfully shallow\" test to decide if <code>&amp;Self</code> has been found, though stable does as well)</p>",
        "id": 169228053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731266
    },
    {
        "content": "<p>I think this could only ever be an issue, however, under the more generalized forms of arbitrary-self-types</p>",
        "id": 169228100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731312
    },
    {
        "content": "<p>So it also not likely to be a blocker to backporting</p>",
        "id": 169228117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731322
    },
    {
        "content": "<p>I did notice the tests in your gist did not include more complex compositions such as <code>Box&lt;Box&lt;Foo&gt;&gt;</code></p>",
        "id": 169228236,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731382
    },
    {
        "content": "<p>Right, I agree; -- the current/PR behavior does not conform exactly with the specification I gave above, but importantly we move in all respects towards that spec and never away from it, I think.</p>",
        "id": 169228254,
        "sender_full_name": "centril",
        "timestamp": 1561731397
    },
    {
        "content": "<p>my understanding is that such cases today are not handled, at least not without a feature-flag</p>",
        "id": 169228257,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731400
    },
    {
        "content": "<p>that is correct, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, although I think they would not yield any surprises over (e.g.) <code>Box&lt;&amp;Self&gt;</code></p>",
        "id": 169228309,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> actually we have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">pin_pin_pin_ref</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">Self</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">Self</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169228356,
        "sender_full_name": "centril",
        "timestamp": 1561731482
    },
    {
        "content": "<p>well... <code>Box&lt;&amp;Self&gt;</code> is one of the cases that changes its behavior in <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a></p>",
        "id": 169228358,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731482
    },
    {
        "content": "<p>and therefore that is not putting much of a bound on how much surprise I might suffer</p>",
        "id": 169228435,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731511
    },
    {
        "content": "<p>sorry, what I mean is that adding additional layers of <code>Box</code> does not change anything</p>",
        "id": 169228454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731525
    },
    {
        "content": "<p>but it'd be good to show at least one more :)</p>",
        "id": 169228464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731530
    },
    {
        "content": "<p>The only stable recursive case is for Pin per snippet above</p>",
        "id": 169228503,
        "sender_full_name": "centril",
        "timestamp": 1561731556
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> actually we have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">pin_pin_pin_ref</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">Self</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">Self</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n</blockquote>\n<p>So that <em>is</em> supported without a feature gate?</p>",
        "id": 169228507,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yes, there's a test for it in the PR</p>",
        "id": 169228515,
        "sender_full_name": "centril",
        "timestamp": 1561731572
    },
    {
        "content": "<p>okay</p>",
        "id": 169228523,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731576
    },
    {
        "content": "<p>(and I think this is correct)</p>",
        "id": 169228531,
        "sender_full_name": "centril",
        "timestamp": 1561731583
    },
    {
        "content": "<p>Checking the PR quickly it also has tests for aliases and whatnot</p>",
        "id": 169228653,
        "sender_full_name": "centril",
        "timestamp": 1561731657
    },
    {
        "content": "<p>It doesn't test for more feature gated cases, but we can follow up for that</p>",
        "id": 169228673,
        "sender_full_name": "centril",
        "timestamp": 1561731672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> so, what are the misgivings you'd like to discuss? Are they misgivings with PR <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a>? Or are they misgivings with the current state of affairs, i.e. a desire for us to make breaking changes <em>in the future</em> ?</p>",
        "id": 169228675,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731673
    },
    {
        "content": "<p>I dont' think I have misgivings with the PR as is. I have misgivings around our current behavior</p>",
        "id": 169228815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731782
    },
    {
        "content": "<p>and the PR does not correct all of those misgivings</p>",
        "id": 169228834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731792
    },
    {
        "content": "<p>Okay. So that's fine, that's an argument that more work needs to be done in the long term</p>",
        "id": 169228859,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731806
    },
    {
        "content": "<p>potentially with, e.g., warning-cycled changes</p>",
        "id": 169228876,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731815
    },
    {
        "content": "<p>correct</p>",
        "id": 169228890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731825
    },
    {
        "content": "<p>So I guess then the question is whether to backport: the changes seem fairly self-contained</p>",
        "id": 169228955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731843
    },
    {
        "content": "<p>OK so we've answered 1. \"we think the PR is a strict improvement\"</p>",
        "id": 169228963,
        "sender_full_name": "centril",
        "timestamp": 1561731848
    },
    {
        "content": "<blockquote>\n<p>So I guess then the question is whether to backport: the changes seem fairly self-contained</p>\n</blockquote>\n<p>and also, whether to backport to 1.36? Or if the backport can target 1.37 instead. (As <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> stated up above in the list of questions to resolve)</p>",
        "id": 169229030,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731907
    },
    {
        "content": "<p>I am pretty convinced from what e.g. <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> has said that we <em>do</em> want something landed in time for 1.37</p>",
        "id": 169229060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731940
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> was saying last night at the T-lang meeting that they were willing to take the heat on the release team for trying to get PR <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a> backported into 1.36</p>",
        "id": 169229129,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561731987
    },
    {
        "content": "<p>I think we should target 1.37 personally</p>",
        "id": 169229131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731988
    },
    {
        "content": "<p>Er, wait</p>",
        "id": 169229149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561731998
    },
    {
        "content": "<p>Sorry, 1.36 is current beta, correct?</p>",
        "id": 169229158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732007
    },
    {
        "content": "<p>shall we perhaps briefly discuss the pros and cons of 1.36 vs 1.37 ?</p>",
        "id": 169229159,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732007
    },
    {
        "content": "<p>1.36 is the imminent release</p>",
        "id": 169229175,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732020
    },
    {
        "content": "<p>Yes, so the argument for 1.36 in <em>particular</em> (since the behavior in question is already stabilized) is that <code>Future</code> trait is stabilized there</p>",
        "id": 169229197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732039
    },
    {
        "content": "<p>We have a clean crater run</p>",
        "id": 169229203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732043
    },
    {
        "content": "<p>But it's pretty plausible that there a lot more code that relies on the stable behavior would be producd between 1.36 and 1.37</p>",
        "id": 169229246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732082
    },
    {
        "content": "<p>Pietro and Mark were OK with backport it seems -- but we have some CI problems and making a new stable release after the 30th will be hard; so we need to act fast, basically</p>",
        "id": 169229277,
        "sender_full_name": "centril",
        "timestamp": 1561732087
    },
    {
        "content": "<p>I hate to ask the question, but I feel like I must: It would be a non-starter to unstabilize <code>Future</code> in 1.36 based on this, right?</p>",
        "id": 169229284,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732096
    },
    {
        "content": "<p>eheheh :D</p>",
        "id": 169229288,
        "sender_full_name": "centril",
        "timestamp": 1561732106
    },
    {
        "content": "<p>(I mean as an alternative to landing <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a> right now into 1.36)</p>",
        "id": 169229305,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732132
    },
    {
        "content": "<p>Interesting, I had not considered that. :)</p>",
        "id": 169229329,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732148
    },
    {
        "content": "<p>It seems somehow riskier</p>",
        "id": 169229330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732151
    },
    {
        "content": "<p>socially or technically?</p>",
        "id": 169229334,
        "sender_full_name": "centril",
        "timestamp": 1561732161
    },
    {
        "content": "<p>I guess it's just adding a stability attribute on</p>",
        "id": 169229338,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732165
    },
    {
        "content": "<p>I meant technically but also socially :)</p>",
        "id": 169229352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732174
    },
    {
        "content": "<p>I don't know what other components we are landing rely on it being stable</p>",
        "id": 169229361,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732180
    },
    {
        "content": "<p>Like, we have a PR with a crater run</p>",
        "id": 169229363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732183
    },
    {
        "content": "<p>It is relatively contained</p>",
        "id": 169229375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732194
    },
    {
        "content": "<p>the chance of a \"whooops, we didn't think of <em>that</em>\" with destabilizing <code>Future</code> trait seems higher</p>",
        "id": 169229430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732210
    },
    {
        "content": "<p>I guess it depends on the confidence with which we claim the PR is a strict improvement</p>",
        "id": 169229438,
        "sender_full_name": "centril",
        "timestamp": 1561732222
    },
    {
        "content": "<p>Destabilizing Future seems easy tho if we must</p>",
        "id": 169229444,
        "sender_full_name": "centril",
        "timestamp": 1561732238
    },
    {
        "content": "<p>I've perhaps just been burned too many times by breaking the build with a \"harmless change that could never break anything\" :)</p>",
        "id": 169229486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732273
    },
    {
        "content": "<p>In any case, there are also social considerations to consider, yes :)</p>",
        "id": 169229514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732312
    },
    {
        "content": "<p>that'd be a much bigger announcement to be planned</p>",
        "id": 169229525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732324
    },
    {
        "content": "<p>the stable surface area of arbitrary self types is, I believe, restrained to compositions of <code>Box</code>, <code>&amp;</code>, <code>&amp;mut</code>, and <code>Pin</code></p>",
        "id": 169229583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732350
    },
    {
        "content": "<p>(Box is not recursive, Pin is)</p>",
        "id": 169229607,
        "sender_full_name": "centril",
        "timestamp": 1561732373
    },
    {
        "content": "<p>and what does <code>Box&lt;Pin&lt;&amp;Self&gt;&gt;</code> do?</p>",
        "id": 169229814,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732536
    },
    {
        "content": "<p>what do you mean not recursive?</p>",
        "id": 169229822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732550
    },
    {
        "content": "<blockquote>\n<p>and what does <code>Box&lt;Pin&lt;&amp;Self&gt;&gt;</code> do?</p>\n</blockquote>\n<p>testing that now :)</p>",
        "id": 169229824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <code>self: Box&lt;Box&lt;Self&gt;&gt;</code> is an error on stable, I think?</p>",
        "id": 169229884,
        "sender_full_name": "centril",
        "timestamp": 1561732575
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 169229912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732600
    },
    {
        "content": "<p>yes, that is correct</p>",
        "id": 169229915,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732603
    },
    {
        "content": "<p>(correct, it is)</p>",
        "id": 169229920,
        "sender_full_name": "centril",
        "timestamp": 1561732607
    },
    {
        "content": "<blockquote>\n<p>and what does <code>Box&lt;Pin&lt;&amp;Self&gt;&gt;</code> do?</p>\n</blockquote>\n<p>with the feature-gate, it matches against the <code>&amp;</code> from <code>&amp;Self</code> (as I would expect)</p>",
        "id": 169229929,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732616
    },
    {
        "content": "<p>point is, the stable surface is more shallow than I thought, <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ?</p>",
        "id": 169229960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yup</p>",
        "id": 169229968,
        "sender_full_name": "centril",
        "timestamp": 1561732645
    },
    {
        "content": "<p>This test (<code>src/test/ui/self/self_lifetime.rs</code>) looks strange:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;b</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Alias</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"nb\">&#39;static</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Alias</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Alias</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 169230007,
        "sender_full_name": "centril",
        "timestamp": 1561732681
    },
    {
        "content": "<p>(added in the PR, but the behavior is the same on stable)</p>",
        "id": 169230061,
        "sender_full_name": "centril",
        "timestamp": 1561732693
    },
    {
        "content": "<p>I agree that behavior is strange</p>",
        "id": 169230078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732715
    },
    {
        "content": "<p>this is the case I was pointing out</p>",
        "id": 169230080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732719
    },
    {
        "content": "<p>right</p>",
        "id": 169230085,
        "sender_full_name": "centril",
        "timestamp": 1561732725
    },
    {
        "content": "<p>rwell</p>",
        "id": 169230088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732728
    },
    {
        "content": "<p>well</p>",
        "id": 169230090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732729
    },
    {
        "content": "<p>actually it's not quite</p>",
        "id": 169230093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732734
    },
    {
        "content": "<p>that surprises me a little</p>",
        "id": 169230117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732754
    },
    {
        "content": "<p>I think that <code>&amp;Alias</code> does not count as \"self\" type</p>",
        "id": 169230135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732773
    },
    {
        "content": "<p>this is a distinct case</p>",
        "id": 169230138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732778
    },
    {
        "content": "<p>regardless I do not think the PR changes anything in this regard</p>",
        "id": 169230201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732810
    },
    {
        "content": "<p>indeed</p>",
        "id": 169230205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732816
    },
    {
        "content": "<p>except extending the strangeness to things like <code>Pin&lt;&amp;Alias&gt;</code></p>",
        "id": 169230209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732818
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Alias</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"bp\">self</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>gets rejected</p>",
        "id": 169230233,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732839
    },
    {
        "content": "<p>(I'm actually not sure this is bad, I think I might prefer to deprecate all cases around elision except with the keyword <code>Self</code>, personally)</p>",
        "id": 169230248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732846
    },
    {
        "content": "<p>(but that's more the long-term question)</p>",
        "id": 169230275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561732860
    },
    {
        "content": "<p>we were having a hard time trying to explain that to <span class=\"user-mention\" data-user-id=\"127859\">@Taylor Cramer</span> last night</p>",
        "id": 169230303,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732875
    },
    {
        "content": "<p>(about <em>why</em> one might treat <code>Self</code> differently from <code>Foo&lt;'a&gt;</code> when <code>Self = Foo&lt;'a&gt;</code>)</p>",
        "id": 169230353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  right; I think we should either be entirely semantic in determining <code>is_self_type</code> or entirely syntactic (the literal <code>Self</code>)</p>",
        "id": 169230354,
        "sender_full_name": "centril",
        "timestamp": 1561732902
    },
    {
        "content": "<p>that does at least sound like something we can emit a nice diagnostic for</p>",
        "id": 169230430,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732943
    },
    {
        "content": "<p>and have rustfix fix up</p>",
        "id": 169230438,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561732952
    },
    {
        "content": "<p>I've updated the chart to include this case</p>",
        "id": 169230527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733037
    },
    {
        "content": "<p>(S9)</p>",
        "id": 169230530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733039
    },
    {
        "content": "<p>so I personally think a backport is ok</p>",
        "id": 169230595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733062
    },
    {
        "content": "<p>I think I would prefer that to destabilizing future</p>",
        "id": 169230602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733067
    },
    {
        "content": "<p>which feels like a heavier lift, socially plus technically, <em>plus</em> still leaves \"undesirable\" behavior on stable longer</p>",
        "id": 169230615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733085
    },
    {
        "content": "<p>and specifically, you mean a backport to 1.36</p>",
        "id": 169230631,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561733095
    },
    {
        "content": "<p>yes</p>",
        "id": 169230633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733098
    },
    {
        "content": "<p>OK; so based on this discussion and reviewing the tests in the PR I am confident that it's a strict improvement that is also well tested. Coupled with the crater run with no regressions... I agree that a backport is OK (and personally I think it's desirable and within our time constraints).</p>",
        "id": 169230681,
        "sender_full_name": "centril",
        "timestamp": 1561733133
    },
    {
        "content": "<p>okay then. So I'll go mark the PR as beta-accepted (and include a note that we're talking about 1.36)</p>",
        "id": 169230763,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561733179
    },
    {
        "content": "<p>who will prep the beta backport PR?</p>",
        "id": 169230772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733187
    },
    {
        "content": "<p>it should be straightforward</p>",
        "id": 169230783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733195
    },
    {
        "content": "<p>Can any of you two?</p>",
        "id": 169230798,
        "sender_full_name": "centril",
        "timestamp": 1561733206
    },
    {
        "content": "<p>I can do it now</p>",
        "id": 169230806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733210
    },
    {
        "content": "<p><span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 169230809,
        "sender_full_name": "centril",
        "timestamp": 1561733216
    },
    {
        "content": "<p>I also have a bevy of tests to add</p>",
        "id": 169230813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733219
    },
    {
        "content": "<p>but I will not do that as part of backport</p>",
        "id": 169230822,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733222
    },
    {
        "content": "<p>awesome!</p>",
        "id": 169230837,
        "sender_full_name": "centril",
        "timestamp": 1561733234
    },
    {
        "content": "<p>one other thing I want to bring up but only briefly</p>",
        "id": 169230859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733253
    },
    {
        "content": "<p>is that I think we should try to \"follow up\" with deprecation warnings for some of the other behaviors</p>",
        "id": 169230876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733268
    },
    {
        "content": "<p>i.e., let's put this \"to bed\"</p>",
        "id": 169230882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733274
    },
    {
        "content": "<p>this doesn't have the \"time pressure\" aspect</p>",
        "id": 169230891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733282
    },
    {
        "content": "<p>and maybe wants an RFC</p>",
        "id": 169230942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733294
    },
    {
        "content": "<p>I'm not sure about the semantic/syntactic <code>Self</code> question personally but I agree with \"let's settle the matter permanently\"</p>",
        "id": 169230960,
        "sender_full_name": "centril",
        "timestamp": 1561733315
    },
    {
        "content": "<p>I'm sort of inclined to just \"deprecate\" weird behaviors for now, maybe remove in an edition or something</p>",
        "id": 169230963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733318
    },
    {
        "content": "<blockquote>\n<p>I'm not sure about the semantic/syntactic <code>Self</code> question personally but I agree with \"let's settle the matter permanently\"</p>\n</blockquote>\n<p>I agree</p>",
        "id": 169230981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733334
    },
    {
        "content": "<p>there are a few other minor things; e.g., right now you can do <code>fn foo&lt;'a&gt;(x: &amp;'a self) -&gt; &amp;u8</code>, which I think should be forbidden (use <code>'a</code>)</p>",
        "id": 169231008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733358
    },
    {
        "content": "<p>well, I think should be linted</p>",
        "id": 169231013,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733362
    },
    {
        "content": "<p>Linting on that one seems reasonable at least imo</p>",
        "id": 169231030,
        "sender_full_name": "centril",
        "timestamp": 1561733376
    },
    {
        "content": "<p>many of these were already discussed on and off</p>",
        "id": 169231031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733376
    },
    {
        "content": "<p>this is more something to put on lang team agenda I think, though</p>",
        "id": 169231057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733401
    },
    {
        "content": "<p>as a possible \"focus topic\" for some group to go and take care of</p>",
        "id": 169231112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733408
    },
    {
        "content": "<p>let me go prep that PR</p>",
        "id": 169231120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733414
    },
    {
        "content": "<p>before I get distraced :P</p>",
        "id": 169231126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733417
    },
    {
        "content": "<p>Yeah; I think this <code>fn foo</code> example has the problem of being confusing when you don't know the rules by heart</p>",
        "id": 169231154,
        "sender_full_name": "centril",
        "timestamp": 1561733447
    },
    {
        "content": "<blockquote>\n<p>before I get distraced :P</p>\n</blockquote>\n<p>or even DTraced</p>",
        "id": 169231203,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561733485
    },
    {
        "content": "<p>(can you tell I was up until 3am)</p>",
        "id": 169231236,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561733510
    },
    {
        "content": "<p>BTW <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I refined your description</p>",
        "id": 169231240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>  great blog post btw!</p>",
        "id": 169231242,
        "sender_full_name": "centril",
        "timestamp": 1561733514
    },
    {
        "content": "<ul>\n<li>61207: In the receiver, if all mentions of the semantic type <code>&amp;'lt mut? Self</code> use a unique lifetime <code>'lt</code>, then <code>'lt</code> is assigned to all elided output lifetime parameters.</li>\n</ul>",
        "id": 169231245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733515
    },
    {
        "content": "<blockquote>\n<p>great blog post btw!</p>\n</blockquote>\n<p>where was it posted?</p>",
        "id": 169231303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733530
    },
    {
        "content": "<blockquote>\n<ul>\n<li>61207: In the receiver, if all mentions of the semantic type <code>&amp;'lt mut? Self</code> use a unique lifetime <code>'lt</code>, then <code>'lt</code> is assigned to all elided output lifetime parameters.</li>\n</ul>\n</blockquote>\n<p>it's not possible for this to be relevant on stable, but it matters with the feature gate enabled</p>",
        "id": 169231322,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733551
    },
    {
        "content": "<blockquote>\n<p>where was it posted?</p>\n</blockquote>\n<p><a href=\"http://blog.pnkfx.org/\" target=\"_blank\" title=\"http://blog.pnkfx.org/\">http://blog.pnkfx.org/</a></p>",
        "id": 169231329,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561733560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"http://blog.pnkfx.org/blog/2019/06/26/breaking-news-non-lexical-lifetimes-arrives-for-everyone/\" target=\"_blank\" title=\"http://blog.pnkfx.org/blog/2019/06/26/breaking-news-non-lexical-lifetimes-arrives-for-everyone/\">http://blog.pnkfx.org/blog/2019/06/26/breaking-news-non-lexical-lifetimes-arrives-for-everyone/</a></p>",
        "id": 169231341,
        "sender_full_name": "centril",
        "timestamp": 1561733572
    },
    {
        "content": "<p>&lt;3</p>",
        "id": 169231350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733576
    },
    {
        "content": "<p>I continue to be quite proud of getting those Tufte margin notes to work</p>",
        "id": 169231368,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561733588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the description probably needs a definition of \"semantic type\" also since aliases didn't work</p>",
        "id": 169231460,
        "sender_full_name": "centril",
        "timestamp": 1561733664
    },
    {
        "content": "<p>(which I expected it would when I wrote this)</p>",
        "id": 169231470,
        "sender_full_name": "centril",
        "timestamp": 1561733676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  btw, the backport target should be the <code>stable</code> branch, I think</p>",
        "id": 169231532,
        "sender_full_name": "centril",
        "timestamp": 1561733724
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> the description probably needs a definition of \"semantic type\" also since aliases didn't work</p>\n</blockquote>\n<p>yes so the actual test is \"the path <code>Self</code> or a path that resolves to the struct/enum/union\"</p>",
        "id": 169231553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733757
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span>  btw, the backport target should be the <code>stable</code> branch, I think</p>\n</blockquote>\n<p>oh, ok</p>",
        "id": 169231562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733761
    },
    {
        "content": "<p>(because we have already done the beta -&gt; stable promotion)</p>",
        "id": 169231635,
        "sender_full_name": "centril",
        "timestamp": 1561733790
    },
    {
        "content": "<blockquote>\n<p>yes so the actual test is \"the path <code>Self</code> or a path that resolves to the struct/enum/union\"</p>\n</blockquote>\n<p>note that this is <em>not</em> necessarily <code>Self</code> (as I noted in the gist below)</p>",
        "id": 169231648,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733803
    },
    {
        "content": "<p>(that is, <code>stable</code> and <code>beta</code> point at the same place atm)</p>",
        "id": 169231654,
        "sender_full_name": "centril",
        "timestamp": 1561733808
    },
    {
        "content": "<p>they...don't</p>",
        "id": 169231663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733816
    },
    {
        "content": "<p>at least I don't think they do</p>",
        "id": 169231668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733821
    },
    {
        "content": "<blockquote>\n<p>(that is, <code>stable</code> and <code>beta</code> point at the same place atm)</p>\n</blockquote>\n<p>but won't he need to land it in both places?</p>",
        "id": 169231670,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561733822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yes, but land on stable first, then nightly</p>",
        "id": 169231707,
        "sender_full_name": "centril",
        "timestamp": 1561733847
    },
    {
        "content": "<p>and then nightly gets promoted to beta</p>",
        "id": 169231713,
        "sender_full_name": "centril",
        "timestamp": 1561733853
    },
    {
        "content": "<p>ah right, we haven't promoted nightly to beta yet</p>",
        "id": 169231724,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561733860
    },
    {
        "content": "<p>okay</p>",
        "id": 169231726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561733862
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>athena. git log rust-lang/stable <span class=\"p\">|</span> head\ncommit 09a353c529064185aab3fee18128cf1cc697c11e\nMerge: 83167c47939 32055e1cd98\nAuthor: bors &lt;bors@rust-lang.org&gt;\nDate:   Wed Jun <span class=\"m\">26</span> <span class=\"m\">22</span>:52:15 <span class=\"m\">2019</span> +0000\n\n    Auto merge of <span class=\"c1\">#62162 - Mark-Simulacrum:stable-next, r=Mark-Simulacrum</span>\n\n    <span class=\"o\">[</span>stable<span class=\"o\">]</span> <span class=\"m\">1</span>.36 stable release\n\n    cc @rust-lang/release\n</pre></div>",
        "id": 169231806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  oh yeah, you are correct</p>",
        "id": 169231817,
        "sender_full_name": "centril",
        "timestamp": 1561733911
    },
    {
        "content": "<p>but that's just switching the \"is it stable\"</p>",
        "id": 169231832,
        "sender_full_name": "centril",
        "timestamp": 1561733918
    },
    {
        "content": "<p>Not sure if that means I should target stable or not</p>",
        "id": 169231835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733920
    },
    {
        "content": "<p>right</p>",
        "id": 169231839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733924
    },
    {
        "content": "<p>ok</p>",
        "id": 169231843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733924
    },
    {
        "content": "<p>so they are morally equivalent</p>",
        "id": 169231848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733927
    },
    {
        "content": "<p>yep</p>",
        "id": 169231854,
        "sender_full_name": "centril",
        "timestamp": 1561733931
    },
    {
        "content": "<p>==&gt; target stable</p>",
        "id": 169231860,
        "sender_full_name": "centril",
        "timestamp": 1561733936
    },
    {
        "content": "<p>so should I use rust-lang/stable as the basis for my PR?</p>",
        "id": 169231875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733942
    },
    {
        "content": "<p>I guess the merge will only bring in the fresh commits</p>",
        "id": 169231882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733950
    },
    {
        "content": "<p>so it's fine</p>",
        "id": 169231883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561733951
    },
    {
        "content": "<p>OK I opened <a href=\"https://github.com/rust-lang/rust/pull/62209\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62209\">https://github.com/rust-lang/rust/pull/62209</a></p>",
        "id": 169232115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561734109
    },
    {
        "content": "<p>I would be ok with r+'ing <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a></p>",
        "id": 169232126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561734115
    },
    {
        "content": "<p>r+ed</p>",
        "id": 169232230,
        "sender_full_name": "centril",
        "timestamp": 1561734199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> did you want to push your bevy of new tests to <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a> first before r+'ing?</p>",
        "id": 169232326,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561734256
    },
    {
        "content": "<p>good idea</p>",
        "id": 169232335,
        "sender_full_name": "centril",
        "timestamp": 1561734265
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  What a nice and clean backport :D</p>",
        "id": 169232342,
        "sender_full_name": "centril",
        "timestamp": 1561734274
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> did you want to push your bevy of new tests to <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a> first before r+'ing?</p>\n</blockquote>\n<p>I was going to ask whether I should do that</p>",
        "id": 169232346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561734281
    },
    {
        "content": "<p>I'll babysit it</p>",
        "id": 169232348,
        "sender_full_name": "centril",
        "timestamp": 1561734283
    },
    {
        "content": "<p>I would be happy to do so</p>",
        "id": 169232349,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561734283
    },
    {
        "content": "<p>I have a dentist appointment soon so I'll be afk for a bit but I'll try do those tests now before I go</p>",
        "id": 169232379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561734302
    },
    {
        "content": "<p>I think it would be a good idea to get those tests in</p>",
        "id": 169232380,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561734302
    },
    {
        "content": "<p>okay thanks</p>",
        "id": 169232391,
        "sender_full_name": "pnkfelix",
        "timestamp": 1561734308
    },
    {
        "content": "<p>Yeah, thanks</p>",
        "id": 169232416,
        "sender_full_name": "centril",
        "timestamp": 1561734327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  So I r+ed <a href=\"https://github.com/rust-lang/rust/pull/62209\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62209\">https://github.com/rust-lang/rust/pull/62209</a> but I'm not familiar with dev-static and the other stuff</p>",
        "id": 169232856,
        "sender_full_name": "centril",
        "timestamp": 1561734615
    },
    {
        "content": "<p>also cc <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span></p>",
        "id": 169233475,
        "sender_full_name": "centril",
        "timestamp": 1561735097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ping me once it's merged</p>",
        "id": 169233515,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1561735132
    },
    {
        "content": "<p>will do</p>",
        "id": 169233521,
        "sender_full_name": "centril",
        "timestamp": 1561735140
    },
    {
        "content": "<p>nuking the dev-static's channel toml should be enough</p>",
        "id": 169233543,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1561735158
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I pushed tests to <a href=\"https://github.com/rust-lang/rust/issues/61207\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61207\">#61207</a></p>",
        "id": 169252581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1561748320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I saw; taking a look</p>",
        "id": 169252821,
        "sender_full_name": "centril",
        "timestamp": 1561748495
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> in case you didn't see on Discord, <a href=\"https://github.com/rust-lang/rust/pull/62209\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62209\">https://github.com/rust-lang/rust/pull/62209</a> failed and probably needs <code>--bless --compare-mode=nll</code></p>",
        "id": 169255916,
        "sender_full_name": "centril",
        "timestamp": 1561750854
    },
    {
        "content": "<p>Pushed a fix to your branch</p>",
        "id": 169260440,
        "sender_full_name": "centril",
        "timestamp": 1561754579
    }
]