[
    {
        "content": "<p>Could I get some opinions from a MIR expert for <a href=\"https://github.com/rust-lang/rust/issues/69171\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69171\">#69171</a>? Specifically this question:</p>\n<blockquote>\n<p>I'm not sure how best to represent inline assembly in MIR. I can think of several options:<br>\n- Represent it as a <code>Statement</code>, like the previous implementation. This effectively acts as a parallel <code>Assign</code> since it reads/writes to multiple places at once for outputs.<br>\n- Represent it as an <code>RValue</code> which takes its inputs as arguments and returns a tuple of outputs. The outputs are then moved to their destinations with <code>Assign</code>. This is closer to the LLVM representation, but it may be difficult to model the borrow checking behavior (we want to avoid multiple outputs to the same place).<br>\n- Represent it as a <code>Terminator</code> like a <code>Call</code>. This works well because the new <code>asm!</code> has a <code>noreturn</code> flag which indicates that it never returns.t-compiler/help</p>\n</blockquote>",
        "id": 188320099,
        "sender_full_name": "Amanieu",
        "timestamp": 1581846985
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20assembly.20in.20MIR/near/188320099\" title=\"#narrow/stream/131828-t-compiler/topic/Inline.20assembly.20in.20MIR/near/188320099\">said</a>:</p>\n<blockquote>\n<blockquote>\n<ul>\n<li>Represent it as a <code>Terminator</code> like a <code>Call</code>. This works well because the new <code>asm!</code> has a <code>noreturn</code> flag which indicates that it never returns.t-compiler/help</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>I don't really know why <code>asm</code> isn't already a <code>Terminator</code>. If we're going to have two separate types for everything, then it may as well be done correctly.</p>",
        "id": 188321591,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1581850546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> Indeed, I'm trying to do things correctly this time! Can you give me your opinion on these two ways of representing InlineAsm in MIR?</p>",
        "id": 188329040,
        "sender_full_name": "Amanieu",
        "timestamp": 1581867068
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// Input</span>\n<span class=\"n\">asm</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">inout</span><span class=\"p\">(</span><span class=\"n\">reg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Option 1</span>\n<span class=\"n\">InlineAsm</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">operands</span>: <span class=\"p\">[</span><span class=\"k\">in</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span>: <span class=\"nc\">rvalue</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"w\"> </span>: <span class=\"nc\">place</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">inout</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"w\"> </span>: <span class=\"nc\">place</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"c1\">// Option 2</span>\n<span class=\"n\">_0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">InlineAsm</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">inputs</span>: <span class=\"p\">[</span><span class=\"n\">a</span>: <span class=\"nc\">rvalue</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"nc\">rvalue</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_0</span><span class=\"p\">.</span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 188329045,
        "sender_full_name": "Amanieu",
        "timestamp": 1581867097
    },
    {
        "content": "<p>Both are functionally equivalent, since <code>asm!</code> only supports <code>Copy</code> arguments. My main concern is how it will integrate with the borrow checker, since we want to ban things like <code>asm!(\"\",  out(reg) a, out(reg) a)</code>, or even <code>asm!(\"\", out(reg) *a, out(reg) a)</code>.</p>",
        "id": 188329095,
        "sender_full_name": "Amanieu",
        "timestamp": 1581867224
    },
    {
        "content": "<p>I would probably try <code>Option 1</code> first.</p>",
        "id": 188331763,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1581872657
    }
]