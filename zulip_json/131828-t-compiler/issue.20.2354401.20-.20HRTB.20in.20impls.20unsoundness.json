[
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nSo I read your comments about <a href=\"https://github.com/rust-lang/rust/issues/54302\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54302\">https://github.com/rust-lang/rust/issues/54302</a> and <a href=\"https://github.com/rust-lang/rust/issues/54302\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54302\">https://github.com/rust-lang/rust/issues/54302</a></p>",
        "id": 134609632,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893090
    },
    {
        "content": "<p>I'm trying to think whether we should do a perf run</p>",
        "id": 134609645,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893107
    },
    {
        "content": "<p>seems fine to do so</p>",
        "id": 134609777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893229
    },
    {
        "content": "<p>yea</p>",
        "id": 134609844,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893272
    },
    {
        "content": "<p>I'm not sure how hard will be doing evaluation \"correctly\"</p>",
        "id": 134609867,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893294
    },
    {
        "content": "<p>given that higher-ranked lifetimes can't come with where-clauses on them</p>",
        "id": 134609891,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893316
    },
    {
        "content": "<blockquote>\n<p>I'm not sure how hard will be doing evaluation \"correctly\"</p>\n</blockquote>\n<p>I'm not sure what you mean by correctly here</p>",
        "id": 134609972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893374
    },
    {
        "content": "<p>I mean, handling lifetimes in trait evaluations</p>",
        "id": 134609976,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893383
    },
    {
        "content": "<p>because you only need to handle escaping regions</p>",
        "id": 134609983,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893392
    },
    {
        "content": "<p>so you know that <code>'a: 'b</code> can only hold if either <code>'a = 'b</code> or <code>'a</code> is an infer variable</p>",
        "id": 134609991,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893411
    },
    {
        "content": "<p>(re: HR lifetimes, my assumption was that we would use an \"implied bounds\" sort of setup, for backwards compatibility)</p>",
        "id": 134609992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893416
    },
    {
        "content": "<p>(but that's a bit further down the line)</p>",
        "id": 134609997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893423
    },
    {
        "content": "<p>I don't think we do implied bounds today</p>",
        "id": 134610001,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893425
    },
    {
        "content": "<p>but we also don't check WF today</p>",
        "id": 134610011,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893437
    },
    {
        "content": "<p>so it equals out</p>",
        "id": 134610016,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893439
    },
    {
        "content": "<p>right now we just ignore things involving HR regions until you actually instantiate them</p>",
        "id": 134610022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893444
    },
    {
        "content": "<p>right</p>",
        "id": 134610027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893447
    },
    {
        "content": "<p>I mean, of course you want implied bounds for WF</p>",
        "id": 134610032,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893456
    },
    {
        "content": "<p>*for non-WF</p>",
        "id": 134610044,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893468
    },
    {
        "content": "<p>I mean, you definitely want some sort of implied bounds for WF itself</p>",
        "id": 134610097,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893487
    },
    {
        "content": "<p>but today a <code>for&lt;'a&gt; Foo&lt;'a&gt;: Bar</code> means <code>forall&lt;'a&gt; Implemented(Foo&lt;'a&gt;: Bar)</code> modulo bugs</p>",
        "id": 134610131,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893522
    },
    {
        "content": "<p>with no extra predicates in the environment</p>",
        "id": 134610142,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893531
    },
    {
        "content": "<p>(in a where clause)</p>",
        "id": 134610163,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893557
    },
    {
        "content": "<p>I was just looking at roughly this topic in the context of the universe PR, realizing that we have to refactor how the region-obligations are being returned, in particular to handle the case where you are returning a relation to a placeholder region in some fresh universe</p>",
        "id": 134610249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893626
    },
    {
        "content": "<p>in the \"older style\", where the param-env carried the universe, I was capturing the param-env with the region obligations, and that was ok</p>",
        "id": 134610268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893649
    },
    {
        "content": "<p>but in the newer style, where the \"current universe\" lives in the inference context and we try to normalize, that doesn't work as well, you need to map to fresh universes</p>",
        "id": 134610303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893685
    },
    {
        "content": "<p>returning a relation?</p>",
        "id": 134610334,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893714
    },
    {
        "content": "<p>i.e., when you do trait solving, you get back a series of region constraints you have to solve; these may involve placeholders in new universes, in the case of <code>for&lt;..&gt;</code> binders</p>",
        "id": 134610431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893766
    },
    {
        "content": "<p>placeholder being the term I am trying to adopt in lieu of 'skolemized', given that that term is confusing and used in different ways by different folks</p>",
        "id": 134610452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893790
    },
    {
        "content": "<p>don't you solve constraints from other universes eagerly?</p>",
        "id": 134610491,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893826
    },
    {
        "content": "<p>not for regions, no</p>",
        "id": 134610496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893834
    },
    {
        "content": "<p>at least i'm hoping we can avoid it</p>",
        "id": 134610543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893846
    },
    {
        "content": "<p>though it might make some things easier, and might plausibly be needed for backwards compat</p>",
        "id": 134610565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893871
    },
    {
        "content": "<p>so that means that Eval(String: DeserializeOwned) is a compilation error rather than false?</p>",
        "id": 134610607,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893907
    },
    {
        "content": "<p>if we avoided solving eagerly, then it would be a \"ok\" result but with region constraints that give an error when you try to solve them</p>",
        "id": 134610668,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893961
    },
    {
        "content": "<p>this has a uniformity that appeals to me; I'm trying to think what my other reason was</p>",
        "id": 134610721,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537893977
    },
    {
        "content": "<p>yea, exactly what I'll call a \"compilation error rather than false\"</p>",
        "id": 134610724,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537893979
    },
    {
        "content": "<p>because I suppose it means that <code>!(String: DeserializeOwned)</code> is not Ok either?</p>",
        "id": 134610757,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894016
    },
    {
        "content": "<p>in any modality?</p>",
        "id": 134610767,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894024
    },
    {
        "content": "<p>sounds correct</p>",
        "id": 134610789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894049
    },
    {
        "content": "<p>btw, my <code>RefFoo</code> example was supposed to just have no regions in its problem predicate</p>",
        "id": 134610874,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894101
    },
    {
        "content": "<p>so that you can't talk about any funkiness with that region</p>",
        "id": 134610891,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894115
    },
    {
        "content": "<p>I just find that resolving a predicate with no  inference variables returning things that do have inference variables to be confusing</p>",
        "id": 134610928,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894145
    },
    {
        "content": "<p>I think one of my other concerns was that if we had to solve region constraints eagerly — well, that's complex, because you can have things like <code>for&lt;'a&gt; { if ('a: 'b, 'b: 'a) { 'a = 'b } }</code> and that should be true. So, at minimum, the setup that we use now for propagating universes wouldn't be right. (I'd like to try and implement a more careful solver for these kinds of scenarios, though, but I've not thought particularly hard about it.)</p>",
        "id": 134610933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894147
    },
    {
        "content": "<p>I remember that we didn't want to have negative reasoning on region equality</p>",
        "id": 134610966,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894184
    },
    {
        "content": "<p>because of it being a back-compat/\"stability\" hazard</p>",
        "id": 134610986,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894197
    },
    {
        "content": "<blockquote>\n<p>btw, my <code>RefFoo</code> example was supposed to just have no regions in its problem predicate</p>\n</blockquote>\n<p>you mean this example?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">RefFoo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ref_foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">RefFoo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ref_foo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>how would the predicate be changed then?</p>",
        "id": 134611044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894209
    },
    {
        "content": "<p>I mean, in my example the \"problem predicate\" is &lt;u32 as RefFoo&gt;</p>",
        "id": 134611060,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894228
    },
    {
        "content": "<p>which contains no lifetimes, but with \"lazy outlives normalization\" its normalization will suddenly contain inference variables</p>",
        "id": 134611079,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894248
    },
    {
        "content": "<p>my mental model is that if your type is 'static, then you are in classical logic land and all trait questions have clear yes/no answers</p>",
        "id": 134611125,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894313
    },
    {
        "content": "<blockquote>\n<p>I just find that resolving a predicate with no  inference variables returning things that do have inference variables to be confusing</p>\n</blockquote>\n<p>when you say \"that do have inference variables\", you are referring to the \"placeholders\" we have to create?</p>\n<p><del>e.g., when we solve <code>for&lt;'a&gt; 'a: 'static</code>, this gets translated to a <code>'!1: 'static</code> sort of thing (where <code>!1</code> is a placeholder)</del> this was confused</p>",
        "id": 134611128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894314
    },
    {
        "content": "<p>oh maybe I see what you mean, sorry</p>",
        "id": 134611201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894357
    },
    {
        "content": "<p>you're saying, the impl that we apply?</p>",
        "id": 134611208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894361
    },
    {
        "content": "<blockquote>\n<p>when you say \"that do have inference variables\", you are referring to the \"placeholders\" we have to create?</p>\n</blockquote>\n<p>can't you get constraints that have existentials in them?</p>",
        "id": 134611232,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894386
    },
    {
        "content": "<p>I'm trying to think if you can</p>",
        "id": 134611263,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894418
    },
    {
        "content": "<p>I think that RFC 447 won't let you</p>",
        "id": 134611282,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894434
    },
    {
        "content": "<p>I think the answer is technically yes, but they would be constrained to be equal to placeholders</p>",
        "id": 134611284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894434
    },
    {
        "content": "<p>because it exactly forces things to equal to placeholders</p>",
        "id": 134611331,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894447
    },
    {
        "content": "<p>*all inference variables</p>",
        "id": 134611341,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894456
    },
    {
        "content": "<p>(and hence could conceivably be normalized)</p>",
        "id": 134611343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894457
    },
    {
        "content": "<p>chalk <em>does</em> handle unification on inference variables, in part to simplify the output</p>",
        "id": 134611374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894478
    },
    {
        "content": "<p>I think that in the current rustc, with no where-clauses on higher-universe placeholders</p>",
        "id": 134611403,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894506
    },
    {
        "content": "<p>you never need to <em>return</em> placeholders</p>",
        "id": 134611422,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894518
    },
    {
        "content": "<p>e.g. in this example, you would have <code>for&lt;'a&gt; &amp;'a T: Foo</code>, this creates a placeholder <code>!1</code> and then applies the impl. Applying the impl creates an existential <code>?0</code> that is equated with <code>!1</code>.</p>",
        "id": 134611426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yea exactly, and then you equate <code>?0 = !1</code>, and RFC 447 means you can always do it</p>",
        "id": 134611448,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894547
    },
    {
        "content": "<blockquote>\n<p>you never need to <em>return</em> placeholders</p>\n</blockquote>\n<p>well wouldn't that require us to eagerly solve the constriants?</p>",
        "id": 134611450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894551
    },
    {
        "content": "<p>yea, exactly</p>",
        "id": 134611455,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894556
    },
    {
        "content": "<p>I don't think that with the current trait checker there are any obstructions to eagerly solving constraints</p>",
        "id": 134611507,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894569
    },
    {
        "content": "<p>ok</p>",
        "id": 134611508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894569
    },
    {
        "content": "<p><em>because</em> there are no where-clauses</p>",
        "id": 134611513,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894576
    },
    {
        "content": "<p>sounds correct</p>",
        "id": 134611518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894589
    },
    {
        "content": "<p>(but we do want where clauses to close the soundness hole around contravariance)</p>",
        "id": 134611525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894600
    },
    {
        "content": "<p>will they be where clauses around HRTBs?</p>",
        "id": 134611535,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894621
    },
    {
        "content": "<p>I guess those could be separated</p>",
        "id": 134611556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894657
    },
    {
        "content": "<p>I hadn't considered doing so</p>",
        "id": 134611565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894665
    },
    {
        "content": "<p>I mean, obviously we <em>do</em> have where clauses today, e.g. in trait impls</p>",
        "id": 134611571,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894678
    },
    {
        "content": "<p>right but not on HRTB's</p>",
        "id": 134611636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894709
    },
    {
        "content": "<p>which I <em>think</em> is the relevant thing?</p>",
        "id": 134611649,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894718
    },
    {
        "content": "<p>well</p>",
        "id": 134611661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894732
    },
    {
        "content": "<p>yea. I think that having HRTBs with where-clauses is a strictly \"needs research\" thing</p>",
        "id": 134611668,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894742
    },
    {
        "content": "<p>(obviously the regions on impls can play a \"placeholder\" role, so there's a sort of asymmetry, I guess that's the point you were making?)</p>",
        "id": 134611690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894763
    },
    {
        "content": "<p>(e.g. when WF checking the impl or something)</p>",
        "id": 134611704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537894777
    },
    {
        "content": "<blockquote>\n<p>I guess that's the point you were making?</p>\n</blockquote>",
        "id": 134611714,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894789
    },
    {
        "content": "<p>when?</p>",
        "id": 134611716,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894791
    },
    {
        "content": "<p>\"higher-universe placeholders\" - sure</p>",
        "id": 134611781,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894814
    },
    {
        "content": "<p>only the \"0 universe\" can have where-clauses in it ATM</p>",
        "id": 134611787,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537894823
    },
    {
        "content": "<p>if you have eager unification universe code in a close-to-landing state, I'm for having <a href=\"https://github.com/rust-lang/rust/issues/54401\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54401\">#54401</a> use it</p>",
        "id": 134611966,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537895021
    },
    {
        "content": "<p>hmm, I might be able to make it resolve eagerly.</p>",
        "id": 134612070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537895105
    },
    {
        "content": "<p>of course, if there is no perf impact, and there are no plans for having eager resolve ever, it might be ok to r+ this</p>",
        "id": 134612096,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537895138
    },
    {
        "content": "<p>but I remember that this cache was added to avoid severe perf issues with futures-based code, which definitely has lifetimes</p>",
        "id": 134612118,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537895158
    },
    {
        "content": "<p>I think the code even almost DTRT today</p>",
        "id": 134612516,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537895503
    },
    {
        "content": "<p>given that I get</p>",
        "id": 134612519,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537895505
    },
    {
        "content": "<p>EVAL(Binder(&lt;&amp;ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(1:12), 'a)) u32 as Foo&gt;))</p>",
        "id": 134612529,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537895515
    },
    {
        "content": "<p>so it's making the query with an HRTB</p>",
        "id": 134612582,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537895539
    },
    {
        "content": "<p>ah that because impl_or_trait_obligations does a plug_leaks</p>",
        "id": 134612826,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537895806
    },
    {
        "content": "<p>so maybe we just need to copy the fulfill HRTB obligation logic to select, and everything will work</p>",
        "id": 134612836,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537895822
    },
    {
        "content": "<p>(tm)</p>",
        "id": 134612845,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537895826
    },
    {
        "content": "<p>*the fulfill Outlives obligation logic</p>",
        "id": 134612865,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537895852
    },
    {
        "content": "<p>BTW, I actually think that evaluation is closer to being a Chalkifiable solver than selection, and that it just intentionally ignores region requirements to have better cacheability properties.</p>",
        "id": 134629010,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537910578
    },
    {
        "content": "<p>*closer to being a Chalkifiable solver than fulfillment</p>",
        "id": 134629020,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537910587
    },
    {
        "content": "<p>which is sort of a \"perf hack\" to handle incremental obligation resolution that goes in parallel with inference.</p>",
        "id": 134629045,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537910632
    },
    {
        "content": "<p>but sure, they are basically \"independent\" trait solving engines</p>",
        "id": 134629139,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537910755
    },
    {
        "content": "<p>(not quite independent, because fulfillment calls evaluation during winnowing)</p>",
        "id": 134629189,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1537910775
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> so, that PR doesn't seem to regress perf in particular. I think i'd like to land it and then move on with \"universe stuff\" independently (I'm pushing on my branch some more, though I'm not (yet) doing eager errors — I want to get the lazy errors version working first, since that's the approach I was taking, and then see how I have to adapt it)</p>",
        "id": 134689984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1537982380
    },
    {
        "content": "<p>I am trying to investigate what it takes to make evaluation correct, and it seems to be as easy as I thought it is</p>",
        "id": 134767863,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538075953
    },
    {
        "content": "<p>I don't think it requires any universe stuff, because of how fulfillment works</p>",
        "id": 134767879,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538075986
    },
    {
        "content": "<p>what do you mean by correct?</p>",
        "id": 134767918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538076003
    },
    {
        "content": "<p>to make it handle things the same way fulfillment does</p>",
        "id": 134767930,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076013
    },
    {
        "content": "<p>are you planning to propagate back a set of region requirements?</p>",
        "id": 134767949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538076050
    },
    {
        "content": "<p>you don't need to</p>",
        "id": 134767952,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076056
    },
    {
        "content": "<p>it does most of the things for you anyway with plug_leaks</p>",
        "id": 134767956,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076064
    },
    {
        "content": "<p>I guess you're saying: because we only care about this for global predicates?</p>",
        "id": 134767967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538076085
    },
    {
        "content": "<p>for \"staticized\" predicates</p>",
        "id": 134767984,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076095
    },
    {
        "content": "<p>yea</p>",
        "id": 134767985,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076097
    },
    {
        "content": "<p>as in, where all \"inference/free\" regions are <code>'static</code></p>",
        "id": 134767988,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076106
    },
    {
        "content": "<p>but evaluation always works staticized</p>",
        "id": 134767990,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076111
    },
    {
        "content": "<p>and I think that \"classical logic\" queries will be staticized for quite some time</p>",
        "id": 134768041,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076132
    },
    {
        "content": "<blockquote>\n<p>as in, where all \"inference/free\" regions are <code>'static</code></p>\n</blockquote>\n<p>I believe this is the condition that <code>is_global</code> checks for, no?</p>",
        "id": 134768044,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538076137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 134768046,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076146
    },
    {
        "content": "<p>Well you can run evaluation even if your type contains <code>'a</code>, it will just treat the <code>'a</code> as though it was <code>'static</code></p>",
        "id": 134768052,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076161
    },
    {
        "content": "<p>(and typeck does that quite a lot of times)</p>",
        "id": 134768055,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076170
    },
    {
        "content": "<p>yes, I know, but we don't use that to skip fulfill cx work</p>",
        "id": 134768057,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538076182
    },
    {
        "content": "<p>put another way: I think it would still be a bug if we did, if I understand what you are saying</p>",
        "id": 134768068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538076195
    },
    {
        "content": "<blockquote>\n<p>put another way: I think it would still be a bug if we did, if I understand what you are saying</p>\n</blockquote>\n<p>sure, but trait matching etc. does use evaluation, so there's no reason for it to be semi-randomly incorrect</p>",
        "id": 134768080,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076224
    },
    {
        "content": "<p>actually, thinking about it, we might want to return EvaluatedToOk in \"intercrate context\"</p>",
        "id": 134768134,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076263
    },
    {
        "content": "<p>to not allow for extra coherence power</p>",
        "id": 134768138,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076267
    },
    {
        "content": "<p>I don't see how it can be otherwise if you plan to ignore region obligations?</p>",
        "id": 134768154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538076283
    },
    {
        "content": "<p>I still don't understand I guess what def'n of incorrect you are using</p>",
        "id": 134768158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538076292
    },
    {
        "content": "<p>I mean, trait evaluation should return the correct answer for the staticized version of the query you ask it</p>",
        "id": 134768173,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076314
    },
    {
        "content": "<p>if you ask it about <code>&amp;'a Foo: Bar</code>, it should answer the correct answer for <code>&amp;'static Foo: Bar</code></p>",
        "id": 134768181,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076325
    },
    {
        "content": "<p>for global types, <code>staticize(T) = T</code>, so you can just do evaluation</p>",
        "id": 134768192,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076345
    },
    {
        "content": "<p>ok</p>",
        "id": 134768202,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538076360
    },
    {
        "content": "<p>seems reasonable</p>",
        "id": 134768273,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538076415
    },
    {
        "content": "<p>so I <em>think</em> I have it working</p>",
        "id": 134768402,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076564
    },
    {
        "content": "<p>now I'll just try to check it a little to see it solves all the problems</p>",
        "id": 134768415,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538076580
    },
    {
        "content": "<p>Could you review this + <a href=\"https://github.com/rust-lang/rust/pull/54701\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/54701\">https://github.com/rust-lang/rust/pull/54701</a> ? The latter is beta-nominated</p>",
        "id": 134991993,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538422886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> yep</p>",
        "id": 134995483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538426618
    },
    {
        "content": "<p>and what's the status of my PR for <a href=\"https://github.com/rust-lang/rust/issues/54401\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54401\">#54401</a>? (<a href=\"https://github.com/rust-lang/rust/issues/54624\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54624\">#54624</a>)?</p>",
        "id": 134998635,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538430394
    },
    {
        "content": "<p>is it waiting for something?</p>",
        "id": 134998652,
        "sender_full_name": "Ariel Ben-Yehuda",
        "timestamp": 1538430404
    },
    {
        "content": "<p>no, I think it's probably good to go, just didn't get to it when doing reviews yesterday I guess. I'll review latest status today</p>",
        "id": 135036669,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538487812
    }
]