[
    {
        "content": "<p>I was curious if there is data about comparison of different linkers (I was looking at <code>lld</code> but also reading about <a href=\"https://github.com/rui314/mold\">mold</a>), which \"knobs\" could be used to decrease linking time. I have a great stake in this because for me linking time is the main time eater when developing in Rust, I assume because I have a lot of opaque type resolution.<br>\nFor some context numbrs, I have a project with ~450 crates: <code>cargo +nightly -Z timings build</code> reports 100s compile + ~500s linking time. </p>\n<p>I am looking forward to the next nightly cut to test pr <a href=\"https://github.com/rust-lang/rust/issues/87546\">#87546</a> and see the difference (if any)</p>",
        "id": 252381460,
        "sender_full_name": "apiraino",
        "timestamp": 1631054460
    },
    {
        "content": "<p>doesn't most of the time come from lto?</p>",
        "id": 252381930,
        "sender_full_name": "The 8472",
        "timestamp": 1631054791
    },
    {
        "content": "<p>id be surprised if rustc included lto in the linking time, because despite the name, LTO is not done by the linker, its done by rustc/llvm on the llvm ir</p>",
        "id": 252381971,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1631054827
    },
    {
        "content": "<p>If you just care about the incremental compilation time of the final executable you could try linking all dependencies into a single dylib and then link against this dylib. This will save a lot of duplicate work linking the dependencies again each time.</p>",
        "id": 252411138,
        "sender_full_name": "bjorn3",
        "timestamp": 1631081391
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Data.20on.20using.20alternative.20linkers/near/252381930\">said</a>:</p>\n<blockquote>\n<p>doesn't most of the time come from lto?</p>\n</blockquote>\n<p>not sure if relevant, for <code>[profile.dev]</code> of Cargo.toml I have <code>codegen-units=16</code> and <code>lto=false</code>, so link-time optimizations should be off (if I understand correctly the flag meaning)</p>",
        "id": 252417696,
        "sender_full_name": "apiraino",
        "timestamp": 1631085937
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Data.20on.20using.20alternative.20linkers/near/252411138\">said</a>:</p>\n<blockquote>\n<p>If you just care about the incremental compilation time of the final executable you could try linking all dependencies into a single dylib and then link against this dylib. </p>\n</blockquote>\n<p>yes, I'm looking into getting the shortest build time possible when iterating on the codebase (release builds can be as slow and optimized as possible).</p>\n<p>Dynamic linking of dependencies is sometyhing I could try. Are there specific settings you'd suggest? For example <a href=\"https://doc.rust-lang.org/stable/rustc/codegen-options/#prefer-dynamic\">prefer-dynamic</a>?</p>",
        "id": 252418019,
        "sender_full_name": "apiraino",
        "timestamp": 1631086145
    },
    {
        "content": "<p>Prefer-dynamic only helps when there are already dylibs to link against. In your case probably only libstd is a dylib. I would try creating a new crate with dylib as crate type  adding all dependencies of your main executable and <code>use dep_name;</code> in the source of this crate to ensure that it actually links the deps. Then depend on this crate from the main executable and add a <code>use my_dylib;</code> to the main executable source.</p>",
        "id": 252422642,
        "sender_full_name": "bjorn3",
        "timestamp": 1631088862
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250987\">apiraino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Data.20on.20using.20alternative.20linkers/near/252417696\">said</a>:</p>\n<blockquote>\n<p><code>lto=false</code>, so link-time optimizations should be off (if I understand correctly the flag meaning)</p>\n</blockquote>\n<p>No, <code>lto = false</code> means \"thin local\" LTO: <a href=\"https://github.com/rust-lang/cargo/issues/7491\">https://github.com/rust-lang/cargo/issues/7491</a></p>",
        "id": 252428180,
        "sender_full_name": "hyd-dev",
        "timestamp": 1631091875
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"374396\">hyd-dev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Data.20on.20using.20alternative.20linkers/near/252428180\">said</a>:</p>\n<blockquote>\n<p>No, <code>lto = false</code> means \"thin local\" LTO: <a href=\"https://github.com/rust-lang/cargo/issues/7491\">https://github.com/rust-lang/cargo/issues/7491</a></p>\n</blockquote>\n<p>oh thanks, I was also confused by the description on <br>\n<a href=\"https://doc.rust-lang.org/stable/rustc/codegen-options/#lto\">https://doc.rust-lang.org/stable/rustc/codegen-options/#lto</a></p>",
        "id": 252430798,
        "sender_full_name": "apiraino",
        "timestamp": 1631093360
    },
    {
        "content": "<p>So, it turns out that the cheapest method to shave off a substantial linking time is throwing it at a Ryzen grinding machine :-)</p>",
        "id": 252650454,
        "sender_full_name": "apiraino",
        "timestamp": 1631203168
    },
    {
        "content": "<p>This said, I am also playing with this new experimental linker: <a href=\"https://github.com/rui314/mold\">https://github.com/rui314/mold</a></p>\n<p>A debug build on my production code went from ~ 7'20\" to ~ 4'20\" (-40% !). I'll do some more tests...</p>",
        "id": 252650619,
        "sender_full_name": "apiraino",
        "timestamp": 1631203207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250987\">@apiraino</span> Oooh. Last time I looked at mold, I believe it was still under a proprietary license. I'm really glad to see that they've switched over to AGPL.</p>",
        "id": 252657765,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1631206097
    }
]