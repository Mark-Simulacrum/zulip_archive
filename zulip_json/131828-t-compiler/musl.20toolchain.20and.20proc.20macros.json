[
    {
        "content": "<p>It <a href=\"https://git.musl-libc.org/cgit/musl/tree/src/ldso/dlopen.c\" title=\"https://git.musl-libc.org/cgit/musl/tree/src/ldso/dlopen.c\">seems</a> to me that <code>dlopen</code> does not quite work on musl. But there is a musl Rust toolchain -- does anyone know how it's working?</p>",
        "id": 196863907,
        "sender_full_name": "Lauren»õiu",
        "timestamp": 1588921584
    },
    {
        "content": "<p>It seems that you need to disable crt-static (link musl dynamically) to get it working: <a href=\"https://github.com/rust-lang/rust/issues/31322\" title=\"https://github.com/rust-lang/rust/issues/31322\">https://github.com/rust-lang/rust/issues/31322</a></p>",
        "id": 196870088,
        "sender_full_name": "bjorn3",
        "timestamp": 1588926871
    },
    {
        "content": "<p>Starting with 1.44 beta you shouldn't need anything special to make it work: <a href=\"https://github.com/rust-lang/rust/issues/40174\" title=\"https://github.com/rust-lang/rust/issues/40174\">https://github.com/rust-lang/rust/issues/40174</a></p>",
        "id": 196994578,
        "sender_full_name": "mati865",
        "timestamp": 1589035025
    },
    {
        "content": "<p>But, with <code>-crt-static</code>, the rust-analyzer itself would require <code>musl</code> to be present on the user's machine, right? </p>\n<p>Like, it seems like it's fundamentally impossible to statically link libc, but be able to dlopen dynamic libraries, because the main executable and the loaded library need to use the same (dynamically loaded) libc?</p>",
        "id": 196995481,
        "sender_full_name": "matklad",
        "timestamp": 1589036194
    },
    {
        "content": "<blockquote>\n<p>But, with <code>-crt-static</code>, the rust-analyzer itself would require <code>musl</code> to be present on the user's machine, right? </p>\n</blockquote>\n<p>Correct. <a href=\"https://github.com/rust-lang/rust/pull/69519\" title=\"https://github.com/rust-lang/rust/pull/69519\">https://github.com/rust-lang/rust/pull/69519</a> gets around that by setting <code>-crt-static</code> only for proc_macros (which are only used during compilation). This only takes effect on musl based systems, on glibc systems proc_macros are build for <code>${arch}-unknown-linux-gnu</code> target.</p>\n<blockquote>\n<p>Like, it seems like it's fundamentally impossible to statically link libc, but be able to dlopen dynamic libraries, because the main executable and the loaded library need to use the same (dynamically loaded) libc?</p>\n</blockquote>\n<p>Yes, AFAIK.</p>",
        "id": 197001100,
        "sender_full_name": "mati865",
        "timestamp": 1589043774
    },
    {
        "content": "<p>It's more or less safe to do so, as long as you don't resolve any network names or user names or similar; a statically linked glibc still dynamically loads NSS modules.</p>",
        "id": 197011738,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589056689
    },
    {
        "content": "<p>I'm going to revert <a href=\"https://github.com/rust-lang/rust/pull/69519\" title=\"https://github.com/rust-lang/rust/pull/69519\">https://github.com/rust-lang/rust/pull/69519</a> though and do it in a slightly more general and more conservative way.</p>",
        "id": 197024309,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1589072664
    },
    {
        "content": "<p>Just need to finish some reading - <a href=\"https://gist.github.com/petrochenkov/1a2e52b01a71d49d908756e194d3c3d9\" title=\"https://gist.github.com/petrochenkov/1a2e52b01a71d49d908756e194d3c3d9\">https://gist.github.com/petrochenkov/1a2e52b01a71d49d908756e194d3c3d9</a>. This is a truly wonderful story.</p>",
        "id": 197024373,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1589072876
    },
    {
        "content": "<p>The sooner the better, <a href=\"https://github.com/rust-lang/rust/pull/69519\" title=\"https://github.com/rust-lang/rust/pull/69519\">https://github.com/rust-lang/rust/pull/69519</a> is harmful for future-compatibility (besides just being hacky).</p>",
        "id": 197024533,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1589073176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/musl.20toolchain.20and.20proc.20macros/near/197024533\" title=\"#narrow/stream/131828-t-compiler/topic/musl.20toolchain.20and.20proc.20macros/near/197024533\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/69519\" title=\"https://github.com/rust-lang/rust/pull/69519\">https://github.com/rust-lang/rust/pull/69519</a> is harmful for future-compatibility</p>\n</blockquote>\n<p>Strike that, <a href=\"https://github.com/rust-lang/rust/issues/69519\" title=\"https://github.com/rust-lang/rust/issues/69519\">#69519</a> only allows proc macro crates if <code>crt-static = true</code> comes from target defaults, but not from explicitly passed options.<br>\nPhew.</p>",
        "id": 197060332,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1589123340
    }
]