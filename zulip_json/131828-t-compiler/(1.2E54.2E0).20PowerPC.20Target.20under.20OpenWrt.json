[
    {
        "content": "<p>I'm receiving error while building  a custom <code>powerpc-openwrt-linux-musl</code> target, defined by duplicating the existing <code>powerpc-unknown-linux-musl</code> and adding the choice to <code>mod.rs</code></p>\n<div class=\"codehilite\"><pre><span></span><code>running: &quot;powerpc-openwrt-linux-musl-gcc-ar&quot; &quot;s&quot; &quot;/home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/build/powerpc-openwrt-linux-musl/native/crt/libcrt.a&quot;\nexit status: 0\nBuilding stage2 std artifacts (x86_64-unknown-linux-gnu -&gt; powerpc-openwrt-linux-musl)\n   Compiling cc v1.0.68\n   Compiling core v0.0.0 (/home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/library/core)\n   Compiling libc v0.2.93\n   Compiling std v0.0.0 (/home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/library/std)\n   Compiling compiler_builtins v0.1.45\n   Compiling unwind v0.0.0 (/home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/library/unwind)\nThe following warnings were emitted during compilation:\n\nwarning: /home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/src/llvm-project/libunwind/src/libunwind.cpp:68:3: error: #error Architecture not supported\nwarning:    68 | # error Architecture not supported\nwarning:       |   ^~~~~\nwarning: /home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/src/llvm-project/libunwind/src/libunwind.cpp: In function &#39;int __unw_init_local(unw_cursor_t*, unw_context_t*)&#39;:\nwarning: /home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/src/llvm-project/libunwind/src/libunwind.cpp:71:57: error: &#39;REGISTER_KIND&#39; was not declared in this scope\nwarning:    71 |   new (reinterpret_cast&lt;UnwindCursor&lt;LocalAddressSpace, REGISTER_KIND&gt; *&gt;(cursor))\nwarning:       |                                                         ^~~~~~~~~~~~~\nwarning: /home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/src/llvm-project/libunwind/src/libunwind.cpp:71:70: error: template argument 2 is invalid\nwarning:    71 |   new (reinterpret_cast&lt;UnwindCursor&lt;LocalAddressSpace, REGISTER_KIND&gt; *&gt;(cursor))\nwarning:       |                                                                      ^\nwarning: /home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/src/llvm-project/libunwind/src/libunwind.cpp:71:8: error: expected type-specifier before &#39;reinterpret_cast&#39;\nwarning:    71 |   new (reinterpret_cast&lt;UnwindCursor&lt;LocalAddressSpace, REGISTER_KIND&gt; *&gt;(cursor))\nwarning:       |        ^~~~~~~~~~~~~~~~\nwarning: /home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/src/llvm-project/libunwind/src/libunwind.cpp:71:8: error: expected &#39;)&#39; before &#39;reinterpret_cast&#39;\nwarning:    71 |   new (reinterpret_cast&lt;UnwindCursor&lt;LocalAddressSpace, REGISTER_KIND&gt; *&gt;(cursor))\nwarning:       |       ~^~~~~~~~~~~~~~~~\nwarning:       |        )\n\nerror: failed to run custom build command for `unwind v0.0.0 (/home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/library/unwind)`\n\nCaused by:\n  process didn&#39;t exit successfully: `/home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/build/x86_64-unknown-linux-gnu/stage2-std/release/build/unwind-17b01f67d6d12a0e/build-script-build` (exit status: 1)\n  --- stdout\n  cargo:rerun-if-changed=build.rs\n  OPT_LEVEL = Some(&quot;3&quot;)\n  TARGET = Some(&quot;powerpc-openwrt-linux-musl&quot;)\n  HOST = Some(&quot;x86_64-unknown-linux-gnu&quot;)\n  CXX_powerpc-openwrt-linux-musl = Some(&quot;ccache powerpc-openwrt-linux-musl-g++&quot;)\n  CXXFLAGS_powerpc-openwrt-linux-musl = Some(&quot;-ffunction-sections -fdata-sections -fPIC -static&quot;)\n  CRATE_CC_NO_DEFAULTS = None\n  DEBUG = Some(&quot;false&quot;)\n  CARGO_CFG_TARGET_FEATURE = None\n  CXX_powerpc-openwrt-linux-musl = Some(&quot;ccache powerpc-openwrt-linux-musl-g++&quot;)\n  CXXFLAGS_powerpc-openwrt-linux-musl = Some(&quot;-ffunction-sections -fdata-sections -fPIC -static&quot;)\n  CRATE_CC_NO_DEFAULTS = None\n  CARGO_CFG_TARGET_FEATURE = None\n  cargo:rustc-link-search=native=/home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/build/x86_64-unknown-linux-gnu/stage2-std/powerpc-openwrt-linux-musl/release/build/unwind-0ce7447c01c4f530/out\n  running: &quot;ccache&quot; &quot;powerpc-openwrt-linux-musl-gcc&quot; &quot;-O3&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; &quot;-static&quot; &quot;-I&quot; &quot;../../src/llvm-project/libunwind/include&quot; &quot;-nostdinc++&quot; &quot;-fno-exceptions&quot; &quot;-fno-rtti&quot; &quot;-std=c++11&quot; &quot;-fstrict-aliasing&quot; &quot;-funwind-tables&quot; &quot;-fvisibility=hidden&quot; &quot;-D_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS&quot; &quot;-o&quot; &quot;/home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/build/x86_64-unknown-linux-gnu/stage2-std/powerpc-openwrt-linux-musl/release/build/unwind-0ce7447c01c4f530/out/Unwind-EHABI.o&quot; &quot;-c&quot; &quot;/home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/src/llvm-project/libunwind/src/Unwind-EHABI.cpp&quot;\n  exit status: 0\n</code></pre></div>\n<p>The last time <code>powerpc-unknown-linux-musl.rs</code> was changed was in March (prior to the 1.54 versioning) to remove unwrap (<a href=\"https://github.com/rust-lang/rust/commit/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9\">https://github.com/rust-lang/rust/commit/049a49b91151a88c95fa0d62a53fd0a0ac2c3af9</a>) but I've not seen anything since.</p>\n<p>Any hints?</p>",
        "id": 251679459,
        "sender_full_name": "Grommish",
        "timestamp": 1630569774
    },
    {
        "content": "<p><a href=\"https://github.com/llvm-mirror/libunwind/blob/3e6ec2ae9afaa3683269b690612f84d907943ea2/src/libunwind.cpp#L39-L63\">https://github.com/llvm-mirror/libunwind/blob/3e6ec2ae9afaa3683269b690612f84d907943ea2/src/libunwind.cpp#L39-L63</a></p>",
        "id": 251689540,
        "sender_full_name": "nagisa",
        "timestamp": 1630575406
    },
    {
        "content": "<p>looks like your C/C++ toolchain may be failing to define one of these?</p>",
        "id": 251689590,
        "sender_full_name": "nagisa",
        "timestamp": 1630575444
    },
    {
        "content": "<p>It's possible, but OpenWrt doesn't use LLVM.  That's pulled in by the repo, and x.py kicks off the entire thing (including the cmake calls).  I need to pass a <code>-D__ppc__</code> it seems, but it needs to go to rust's invoke of cmake.  Is there a place to put that either on the CLI invoke of configure/x.py or in the config.toml?  I'm logging out the entire thing so i'll have that when it's finished.  I never expected PowerPC to be an issue when the other ones have gone so well.  I'll check back in shortly</p>",
        "id": 251954727,
        "sender_full_name": "Grommish",
        "timestamp": 1630711685
    },
    {
        "content": "<p>it will be annoying, but you could set <code>cc</code> to a shell script that defines <code>-D__ppc__</code> and then invokes gcc/clang</p>",
        "id": 251955727,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630712543
    },
    {
        "content": "<p>I'm not sure I can inside the build environment, because I'm already trying to add the <code>-D__ppc__</code> with the mechanisms it has <code>TARGET_CFLAGS/TARGET_CXX_FLAGS/CMAKE_HOST_OPTIONS/CMAKE_OPTIONS</code> and it doesn't get passed to the cmake call rust uses internally</p>",
        "id": 251955888,
        "sender_full_name": "Grommish",
        "timestamp": 1630712725
    },
    {
        "content": "<p>Ah, so, it it's a known issue, or was.. <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Is there anyway to tell if this was ever fixed? <a href=\"https://github.com/rust-lang/rust/pull/45422\">https://github.com/rust-lang/rust/pull/45422</a></p>",
        "id": 251961458,
        "sender_full_name": "Grommish",
        "timestamp": 1630718094
    },
    {
        "content": "<p>I don't know what specifically you're asking about, but I found this gem:</p>\n<blockquote>\n<p>GCC and clang both seem to define __PPC__ here; the uncapital ones typically vary between version and compiler.</p>\n</blockquote>\n<p>I think it would be reasonable to change libunwind to check for the caps version</p>",
        "id": 251961571,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630718215
    },
    {
        "content": "<p>The issue is I can't just change the LLVM repo that Rust is pulling and call it good :(</p>",
        "id": 251961591,
        "sender_full_name": "Grommish",
        "timestamp": 1630718244
    },
    {
        "content": "<p>I need to be able to have repeatable builds across the OpenWrt build-set.. Altering the source for the LLVM that gets pulled in when the rust-lang repo is cloned isn't going to work</p>",
        "id": 251961655,
        "sender_full_name": "Grommish",
        "timestamp": 1630718294
    },
    {
        "content": "<p>Does openwrt not already have llvm packaged?</p>",
        "id": 251961675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630718326
    },
    {
        "content": "<p>Most distros use system llvm instead of building it again from source</p>",
        "id": 251961683,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630718338
    },
    {
        "content": "<p>No, it doesn't (GCC MUSL toolchain).  I have to incorporate everything into the build system without relying on the build host :(</p>",
        "id": 251961715,
        "sender_full_name": "Grommish",
        "timestamp": 1630718386
    },
    {
        "content": "<p>Seems like an odd requirement, but sure. I think passing CMAKE_OPTIONS through to cmake would also be a reasonable fix</p>",
        "id": 251961790,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630718451
    },
    {
        "content": "<p>I may just not be able to support PPC Rust-lang.  There aren't too many targets.  I've got mips, mipsel, mips64, armv7, aarch, x86_64 working so far</p>",
        "id": 251961806,
        "sender_full_name": "Grommish",
        "timestamp": 1630718478
    },
    {
        "content": "<p>I tried that, didn't work.. whatever x.py is doing to call the build also controls the cmake options</p>",
        "id": 251961821,
        "sender_full_name": "Grommish",
        "timestamp": 1630718507
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I don't think it would be hard to change x.py</p>",
        "id": 251961830,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630718518
    },
    {
        "content": "<p>The code would be somewhere in src/bootstrap/native.rs</p>",
        "id": 251961884,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630718542
    },
    {
        "content": "<p>Oh, I don't program/code in rust or any other language..  :D</p>",
        "id": 251961897,
        "sender_full_name": "Grommish",
        "timestamp": 1630718566
    },
    {
        "content": "<p>Is there a way to pass it at the command line?</p>",
        "id": 251961913,
        "sender_full_name": "Grommish",
        "timestamp": 1630718586
    },
    {
        "content": "<p>can I do a <code>CMAKE_OPTIONS=-D__ppc__ x..py ...</code>?</p>",
        "id": 251961933,
        "sender_full_name": "Grommish",
        "timestamp": 1630718615
    },
    {
        "content": "<p>You could try</p>",
        "id": 251961941,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630718633
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>CMAKE_OPTIONS=&quot;-D__ppc__&quot; $(PYTHON) x.py --config ./config.toml dist cargo extended \\\n          library/std llvm-tools miri\n</code></pre></div>\n<p>?</p>",
        "id": 251962105,
        "sender_full_name": "Grommish",
        "timestamp": 1630718772
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  error occurred: Command &quot;ccache&quot; &quot;powerpc-openwrt-linux-musl-gcc&quot; &quot;-O3&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; &quot;-ffunction-sections&quot; &quot;-fdata-sections&quot; &quot;-fPIC&quot; &quot;-static&quot; &quot;-I&quot; &quot;../../src/llvm-project/libunwind/include&quot; &quot;-nostdinc++&quot; &quot;-fno-exceptions&quot; &quot;-fno-rtti&quot; &quot;-std=c++11&quot; &quot;-fstrict-aliasing&quot; &quot;-funwind-tables&quot; &quot;-fvisibility=hidden&quot; &quot;-D_LIBUNWIND_DISABLE_VISIBILITY_ANNOTATIONS&quot; &quot;-o&quot; &quot;/home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/build/x86_64-unknown-linux-gnu/stage2-std/powerpc-openwrt-linux-musl/release/build/unwind-0ce7447c01c4f530/out/libunwind.o&quot; &quot;-c&quot; &quot;/home/grommish/openwrt/build_dir/hostpkg/rust-1.54.0/src/llvm-project/libunwind/src/libunwind.cpp&quot; with args &quot;powerpc-openwrt-linux-musl-gcc&quot; did not execute successfully (status code exit status: 1).\n</code></pre></div>\n<p>See, Those Cmake Invokes are internal.  Was waiting for it to fail :) I'll try the above</p>",
        "id": 251962153,
        "sender_full_name": "Grommish",
        "timestamp": 1630718855
    },
    {
        "content": "<p>Well.. That didn't work.. I really don't want to have to edit the LLVM source to make this work properly.. That will add a level of patching on top of everything else.  Is there a way to set something like an EXTRA_CFLAGS in ./configure --options?</p>",
        "id": 252068811,
        "sender_full_name": "Grommish",
        "timestamp": 1630839805
    },
    {
        "content": "<p>uhhh looks like yes actually</p>\n<div class=\"codehilite\"><pre><span></span><code>$ grep -i cflags src/bootstrap/configure.py\nv(&quot;llvm-cflags&quot;, &quot;llvm.cflags&quot;, &quot;build LLVM with these extra compiler flags&quot;)\n</code></pre></div>",
        "id": 252079942,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1630851867
    },
    {
        "content": "<p><code>rustc-dev</code> is for the compiler libraries, I believe.<br>\nYou should probably distribute at least what rustup considers the default profile:<br>\n<a href=\"https://rust-lang.github.io/rustup/concepts/profiles.html\">https://rust-lang.github.io/rustup/concepts/profiles.html</a></p>",
        "id": 262838996,
        "sender_full_name": "Jubilee",
        "timestamp": 1637965489
    },
    {
        "content": "<p>In addition to minimal/default profiles rust-src may also be relevant for embedded so that the nightly <code>build-std</code>feature works.</p>",
        "id": 262840721,
        "sender_full_name": "The 8472",
        "timestamp": 1637967591
    },
    {
        "content": "<p>For now, this is for Cross-compiling only.  Most of the SOCs on embedded devices are considered, at minimum, limited because of LLVM support not being available or just not being supported by rust-lang.  At this point, I'm not looking to put <code>rustc</code> or <code>cargo</code> on device to allow them to natively compile rust programs on a router.  That might come later if the support becomes available.  Although I tend to treat Openwrt as an Embedded OS rather than just router firmware, so I do have provisions for installing those artifacts down the line</p>",
        "id": 262847562,
        "sender_full_name": "Grommish",
        "timestamp": 1637977754
    }
]