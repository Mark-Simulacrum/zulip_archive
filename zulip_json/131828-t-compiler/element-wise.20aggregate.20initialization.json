[
    {
        "content": "<p>So I was thinking about doing the optimization described in <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/expr/as_rvalue.rs#L182\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/expr/as_rvalue.rs#L182\">https://github.com/rust-lang/rust/blob/master/src/librustc_mir/build/expr/as_rvalue.rs#L182</a><br>\nMy current plan is to basically replace</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"n\">_2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"n\">_3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Aggregate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">_2</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>with</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">_3</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"n\">_3</span><span class=\"p\">.</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"n\">SetDiscriminant</span><span class=\"p\">(</span><span class=\"n\">_3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you wrote the original FIXME comment and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> suggested to ask you about potential pitfalls and things to look out for</p>",
        "id": 136615490,
        "sender_full_name": "oli",
        "timestamp": 1540661573
    },
    {
        "content": "<p>We at some point had an optimisation pass called dis/deaggregation, that was left not entirely finished by an intern 2 years ago?</p>",
        "id": 136615541,
        "sender_full_name": "nagisa",
        "timestamp": 1540661696
    },
    {
        "content": "<p>maybe 3 now.</p>",
        "id": 136615544,
        "sender_full_name": "nagisa",
        "timestamp": 1540661704
    },
    {
        "content": "<p>IIRC eddyb tried to finish it up more recently but there were serious perf regressions and the PR was never pushed over the finish line</p>",
        "id": 136616028,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540662817
    },
    {
        "content": "<p>ah no, the PR I was thinking of was merged but didn't eliminates the aggregate rvalues entirely because of perf</p>",
        "id": 136616068,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540662865
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/48052\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/48052\">https://github.com/rust-lang/rust/pull/48052</a></p>",
        "id": 136616069,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540662868
    },
    {
        "content": "<p>I have a feeling that deagregatting everything will always have the perf impact one way or the other</p>",
        "id": 136616085,
        "sender_full_name": "nagisa",
        "timestamp": 1540662941
    },
    {
        "content": "<p>and the earlier it is done, the worse off the impact will end up being</p>",
        "id": 136616088,
        "sender_full_name": "nagisa",
        "timestamp": 1540662952
    },
    {
        "content": "<p>(because e.g. drop elaboration will have to track many more locals)</p>",
        "id": 136616133,
        "sender_full_name": "nagisa",
        "timestamp": 1540662977
    },
    {
        "content": "<p>i'm not sure why there would be many more locals? more statements, yes, and that would slow down e.g. data flow analyses, but whether you compute a temporary and then assign it to a projection or whether you put the temporary into an aggregate rvalue to assign the whole struct shouldn't affect the number of locals</p>",
        "id": 136616318,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540663272
    },
    {
        "content": "<p>note that this is not quite the same as SROA, we don't need to actually split <code>let t: (T, U);</code> into <code>let (t0, t1): (T, U);</code></p>",
        "id": 136616370,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540663331
    },
    {
        "content": "<p>oh, right… I for some reason recalled disagregattor doing SROA</p>",
        "id": 136616384,
        "sender_full_name": "nagisa",
        "timestamp": 1540663399
    },
    {
        "content": "<p>come to think of it, i'm not sure any more whether more statements would actually have any quadratic behavior. i guess it might depending on how we insert and remove statements in the middle of blocks? but most data flow is linear in the statements. which still doesn't make more statements free (not to mention memory usage) but outside of the \"large constant vector that can be created with a single statement today\" case it might not be so bad</p>",
        "id": 136616499,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540663607
    },
    {
        "content": "<p>The number of statements would not change with this optimization</p>",
        "id": 136616558,
        "sender_full_name": "oli",
        "timestamp": 1540663691
    },
    {
        "content": "<p>there would simply be fewer locals</p>",
        "id": 136616560,
        "sender_full_name": "oli",
        "timestamp": 1540663703
    },
    {
        "content": "<p>it would if the <code>Aggregate</code> contains constant operands, which currently aren't separate statements</p>",
        "id": 136616581,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540663773
    },
    {
        "content": "<p>e.g. <code>let x = [1, 2, 3, 4, 5];</code> is ca. one statement, with deaggregation it's ca. five</p>",
        "id": 136616591,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540663801
    },
    {
        "content": "<p>right</p>",
        "id": 136616632,
        "sender_full_name": "oli",
        "timestamp": 1540663809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> at least the drop elaboration does not care about what initializes an aggregate. So if yoou have an aggregate that has a billion elements, it won’t have to bother and look at all billion statements that assign the aggregate field by field. IIRC, anyway.</p>",
        "id": 136616654,
        "sender_full_name": "nagisa",
        "timestamp": 1540663865
    },
    {
        "content": "<p>but these cases actually have another possibility for optimization: Just generate a single constant instead of ever producing a mir aggregate of constants</p>",
        "id": 136616658,
        "sender_full_name": "oli",
        "timestamp": 1540663868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> yes i was just typing out something to that effect :)</p>",
        "id": 136616665,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540663896
    },
    {
        "content": "<p>It wold be pretty cool to have s/Rvalue::Aggregate/Rvalue::ByteInitializer/</p>",
        "id": 136616707,
        "sender_full_name": "nagisa",
        "timestamp": 1540663933
    },
    {
        "content": "<p>there are some problems when lifetimes are involved, but I think they are resolveable</p>",
        "id": 136616708,
        "sender_full_name": "oli",
        "timestamp": 1540663934
    },
    {
        "content": "<p>though <code>[1, 2, 3, 4, 5, ...., runtime_variable, ...]</code> needs either trickery or just remains inefficient (it seems more niche)</p>",
        "id": 136616713,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540663961
    },
    {
        "content": "<p>the trickery being, for example, leaving some elements of the constant undef and overwriting them in a separate statement after the ByteInitializer</p>",
        "id": 136616722,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540663994
    },
    {
        "content": "<p>right</p>",
        "id": 136616724,
        "sender_full_name": "oli",
        "timestamp": 1540664005
    },
    {
        "content": "<p>ok... I found a slightly unfun situation: <code>x[i] = (x[j].0, 42)</code> can't be converted to <code>x[i].0 = x[j].0; x[i].1 = 42;</code> because for index ops going through IndexMut that would evaluate <code>index_mut</code> twice</p>\n<p>we also can't do <code>let a = &amp;mut x[i]; a.0 = x[j].0; a.1 = 42;</code> because then borrowck throws a fit</p>",
        "id": 136622015,
        "sender_full_name": "oli",
        "timestamp": 1540673800
    },
    {
        "content": "<p>Ah, I'm in the wrong code anyway. It'll work itself out automatically if I get <code>x = [(4, 5), (1, 2)];</code> to be <code>x[0].0 = 4; x[0].1 = 5; x[1].0 = 1; x[1].1 = 2;</code></p>",
        "id": 136622223,
        "sender_full_name": "oli",
        "timestamp": 1540674228
    },
    {
        "content": "<p>So I think I know how to do this: partially evaluate aggregate initializers so that <code>x[j].0</code> becomes <code>_X</code> if it's not just a projection, then partially evaluate the lhs of the original assignment so we get <code>let a = &amp;mut X</code> if anything other than projections are involved. Then generate all the assignments.</p>\n<p>This translates to: Evaluate the rhs to a tree of aggregate initializers of <code>Operand</code>s. Evaluate the lhs to a <code>Place</code>. Visit the aggregate initializer tree recursively, building up the <code>Place</code> to the concrete value as you go in, and popping projections as you go out.</p>",
        "id": 136622795,
        "sender_full_name": "oli",
        "timestamp": 1540675375
    },
    {
        "content": "<p>The previous sentence is not right. It should be <code>Rvalue</code> not <code>Operand</code></p>",
        "id": 136630738,
        "sender_full_name": "oli",
        "timestamp": 1540690777
    },
    {
        "content": "<p>Ok... I ran into a few problems with this. Most notably I'm now hitting the fact that the 2018 edition forbids <code>let mut s; s.x = Val;</code></p>",
        "id": 136766260,
        "sender_full_name": "oli",
        "timestamp": 1540893895
    },
    {
        "content": "<p>is this a problem? I can point you at the lang team discussion of the matter</p>",
        "id": 136771837,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540901282
    },
    {
        "content": "<p>oh I see, you're doing it as a MIR transformation that runs <em>before</em> <code>rustc_mir::borrow_check</code>?</p>",
        "id": 136771858,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540901311
    },
    {
        "content": "<p>We can probably easily add a feature flag to let you write that code again. There's an RFC being drafted to describe the scenarios where we would start allowing it again.</p>",
        "id": 136771877,
        "sender_full_name": "pnkfelix",
        "timestamp": 1540901369
    },
    {
        "content": "<p>I just found the RFC draft independently :D <a href=\"https://github.com/Centril/rfcs/pull/16\" target=\"_blank\" title=\"https://github.com/Centril/rfcs/pull/16\">https://github.com/Centril/rfcs/pull/16</a></p>",
        "id": 136772047,
        "sender_full_name": "oli",
        "timestamp": 1540901547
    },
    {
        "content": "<p>Well... a feature flag does make sense. I should probably hide my changes behind one for sanity's sake</p>",
        "id": 136772056,
        "sender_full_name": "oli",
        "timestamp": 1540901577
    },
    {
        "content": "<p>I'm not even doing a MIR transformation, but changing the way MIR is generated</p>",
        "id": 136772070,
        "sender_full_name": "oli",
        "timestamp": 1540901607
    },
    {
        "content": "<p>deaggregation as a MIR pass is too expensive as proven by our existing deaggregation MIR pass</p>",
        "id": 136772086,
        "sender_full_name": "oli",
        "timestamp": 1540901627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I do not think you should change how MIR is generated, but rather I would expect to transform this after the fact as an optimization.</p>",
        "id": 136781778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911320
    },
    {
        "content": "<p>Otherwise, we're going to need some way to signal that the aggregate is \"complete\", no? That was the reason we kept it as is until now -- i.e., when do we know that the destructor should run.</p>",
        "id": 136781804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> eddyb tried that and we do have a disaggregator</p>",
        "id": 136781808,
        "sender_full_name": "oli",
        "timestamp": 1540911358
    },
    {
        "content": "<p>What is the motivation here?</p>",
        "id": 136781857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911370
    },
    {
        "content": "<p>but it's very inefficient to do so after the fact</p>",
        "id": 136781859,
        "sender_full_name": "oli",
        "timestamp": 1540911371
    },
    {
        "content": "<p>my motivation is const eval performance, so disaggregator would be fine</p>",
        "id": 136781871,
        "sender_full_name": "oli",
        "timestamp": 1540911386
    },
    {
        "content": "<p>It seems like we're accumulating a few places where we'd like to update MIR</p>",
        "id": 136781873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911391
    },
    {
        "content": "<p>but now my motivation has become getting rid of <code>Rvalue::Aggregate</code></p>",
        "id": 136781875,
        "sender_full_name": "oli",
        "timestamp": 1540911399
    },
    {
        "content": "<p>basically where there is tension between the needs of the borrow check (which wants something closer to surface level syntax) and optimizations (which maybe doesn't)</p>",
        "id": 136781883,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911412
    },
    {
        "content": "<p>I feel pretty wary of making this change at this time</p>",
        "id": 136781900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911429
    },
    {
        "content": "<p>particularly without some sort of write-up</p>",
        "id": 136781906,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911436
    },
    {
        "content": "<blockquote>\n<p>Otherwise, we're going to need some way to signal that the aggregate is \"complete\", no? That was the reason we kept it as is until now -- i.e., when do we know that the destructor should run.</p>\n</blockquote>\n<p>I am currently using  <code>SetDiscriminant</code> for that, which is what the disaggregator MIR pass also does</p>",
        "id": 136781911,
        "sender_full_name": "oli",
        "timestamp": 1540911443
    },
    {
        "content": "<p>i.e., we are in the midst of trying to ship a new borrow checker based on the MIR :)</p>",
        "id": 136781916,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911449
    },
    {
        "content": "<p>I'm fine with delaying this, but I also do have an impl behind a feature gate ;)</p>",
        "id": 136781932,
        "sender_full_name": "oli",
        "timestamp": 1540911476
    },
    {
        "content": "<p>well, one that doesn't work :)</p>",
        "id": 136781993,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911500
    },
    {
        "content": "<p>i.e., it breaks in Rust 2018</p>",
        "id": 136781999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911506
    },
    {
        "content": "<p>everywhere where mir borrowck <code>bug!</code>ed out, I assert that the feature gate is active and then do a different change</p>",
        "id": 136782003,
        "sender_full_name": "oli",
        "timestamp": 1540911510
    },
    {
        "content": "<p>because it's not been integrated properly with the mir borrowck</p>",
        "id": 136782008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911515
    },
    {
        "content": "<p>oh...</p>",
        "id": 136782014,
        "sender_full_name": "oli",
        "timestamp": 1540911521
    },
    {
        "content": "<p>that explains why my tests pass :D</p>",
        "id": 136782022,
        "sender_full_name": "oli",
        "timestamp": 1540911530
    },
    {
        "content": "<p>(at least if I understood you properly)</p>",
        "id": 136782037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911539
    },
    {
        "content": "<p>you did, and you're right</p>",
        "id": 136782047,
        "sender_full_name": "oli",
        "timestamp": 1540911546
    },
    {
        "content": "<p>(that said, I'm not opposed to the overall plan)</p>",
        "id": 136782056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911551
    },
    {
        "content": "<p>2018 edition fails hard on this</p>",
        "id": 136782058,
        "sender_full_name": "oli",
        "timestamp": 1540911552
    },
    {
        "content": "<p>are you fine with me doing this behind a feature gate?</p>",
        "id": 136782066,
        "sender_full_name": "oli",
        "timestamp": 1540911564
    },
    {
        "content": "<p>hmm</p>",
        "id": 136782072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911568
    },
    {
        "content": "<p>no, I am :)</p>",
        "id": 136782074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911571
    },
    {
        "content": "<p>but I am not opposed to you doing it \"properly\" :P</p>",
        "id": 136782085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911587
    },
    {
        "content": "<p>tbh I'm not sure that I'm <em>opposed</em> to anything</p>",
        "id": 136782091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911595
    },
    {
        "content": "<p>huh?</p>",
        "id": 136782097,
        "sender_full_name": "oli",
        "timestamp": 1540911598
    },
    {
        "content": "<p>\"properly\"?</p>",
        "id": 136782141,
        "sender_full_name": "oli",
        "timestamp": 1540911605
    },
    {
        "content": "<p>I don't understand why a feature gate makes sense</p>",
        "id": 136782158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911613
    },
    {
        "content": "<p>this is not something end-users of Rust should be able to observe</p>",
        "id": 136782168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911629
    },
    {
        "content": "<p>it sounds like you want a feature gate because you want to land a PR that doesn't fully work, I guess? That might be ok</p>",
        "id": 136782175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911643
    },
    {
        "content": "<p>but I'd prefer to do that with a broader plan in place for how to finish the work</p>",
        "id": 136782180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911653
    },
    {
        "content": "<p>the issue is that we need to allow partially initializing structs, which is forbidden in 2018</p>",
        "id": 136782198,
        "sender_full_name": "oli",
        "timestamp": 1540911664
    },
    {
        "content": "<p>(it seems like a \"revised MIR\" might be a good Rust All Hands discussion topic)</p>",
        "id": 136782211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911676
    },
    {
        "content": "<p>yes, though the intention was to eventually support it</p>",
        "id": 136782221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911691
    },
    {
        "content": "<p>jup, so I'd bind these two things together</p>",
        "id": 136782227,
        "sender_full_name": "oli",
        "timestamp": 1540911701
    },
    {
        "content": "<p>I see, and the feature gate would be for <em>that</em></p>",
        "id": 136782232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911712
    },
    {
        "content": "<p>I believe @centril is working on an RFC on that topic</p>",
        "id": 136782237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911722
    },
    {
        "content": "<p>that said, I think the two things are sort of independent</p>",
        "id": 136782280,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911729
    },
    {
        "content": "<p>they are, (linked above)</p>",
        "id": 136782282,
        "sender_full_name": "oli",
        "timestamp": 1540911730
    },
    {
        "content": "<p>or should be</p>",
        "id": 136782286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911737
    },
    {
        "content": "<p>they are, but without the latter I can't do the former</p>",
        "id": 136782287,
        "sender_full_name": "oli",
        "timestamp": 1540911741
    },
    {
        "content": "<p>I'd need a lot of weird workarounds</p>",
        "id": 136782295,
        "sender_full_name": "oli",
        "timestamp": 1540911762
    },
    {
        "content": "<p>how do you plan to deal with things like <code>let x = Foo { .. }</code> where <code>Foo</code> has a <code>Drop</code> and hence is not permitted to be partially initialized?</p>",
        "id": 136782306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911778
    },
    {
        "content": "<p>hmm... good point...</p>",
        "id": 136782331,
        "sender_full_name": "oli",
        "timestamp": 1540911818
    },
    {
        "content": "<p>I skipped drop types so far</p>",
        "id": 136782338,
        "sender_full_name": "oli",
        "timestamp": 1540911826
    },
    {
        "content": "<p>ok, so these two things are independent</p>",
        "id": 136782343,
        "sender_full_name": "oli",
        "timestamp": 1540911836
    },
    {
        "content": "<p>basically if I make drop type element wise intialization work correctly and separately from user element wise initialization, everything should be fine</p>",
        "id": 136782404,
        "sender_full_name": "oli",
        "timestamp": 1540911882
    },
    {
        "content": "<p>(one step back: you mentioned that the \"deaggregator\" was \"good enough\" to solve some const eval perf problems?)</p>",
        "id": 136782434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540911934
    },
    {
        "content": "<p>This necessitates a form of \"initialization\" similar to <code>mem::uninitialized</code>, but only available to MIR, and only if the expression it's coming from an adt/tuple/array init-expression</p>",
        "id": 136782495,
        "sender_full_name": "oli",
        "timestamp": 1540911969
    },
    {
        "content": "<p>right</p>",
        "id": 136782496,
        "sender_full_name": "oli",
        "timestamp": 1540911975
    },
    {
        "content": "<p>const evaluating large arrays is problematic, because we get a local for each element if the element type is complex, and then copy all those locals in one expression into the destination array local</p>",
        "id": 136782514,
        "sender_full_name": "oli",
        "timestamp": 1540912023
    },
    {
        "content": "<p>yes; same problem of course arises in our codegen</p>",
        "id": 136782530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912037
    },
    {
        "content": "<p>if we just wrote the elements into the array each by itself we'd be saving ourselves quite a few assignments and conversions</p>",
        "id": 136782537,
        "sender_full_name": "oli",
        "timestamp": 1540912054
    },
    {
        "content": "<p>(const eval conversions between immediates like fat pointers or ints and their memory representations is expensive)</p>",
        "id": 136782586,
        "sender_full_name": "oli",
        "timestamp": 1540912093
    },
    {
        "content": "<p>current state of my experiments: <a href=\"https://gist.github.com/oli-obk/41cc65f0808b63d714ef2d74578f9f6c\" target=\"_blank\" title=\"https://gist.github.com/oli-obk/41cc65f0808b63d714ef2d74578f9f6c\">https://gist.github.com/oli-obk/41cc65f0808b63d714ef2d74578f9f6c</a></p>",
        "id": 136782641,
        "sender_full_name": "oli",
        "timestamp": 1540912176
    },
    {
        "content": "<p>OK -- I have to run -- I think the TL;DR is that I definitely want to see improvements here, I just want to have a plan for how it should work in all parts of the compiler. In my ideal world, I think, we'd document this by a PR to rustc-guide that describes the new design (and of course rustc-guide would have enough material that this makes sense). I'm not sure how much docs we have for MIR in the rustc-guide, not enough I imagine to really have it be a \"sufficiently precise spec\" for this purpose.</p>",
        "id": 136783004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912534
    },
    {
        "content": "<p>I think <em>maybe</em> it'd be <em>nice</em> if -- perhaps via <code>SetDiscriminant</code>? -- we always generated the same sort of MIR for <code>Foo { .. }</code></p>",
        "id": 136783027,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912562
    },
    {
        "content": "<p>and the borrow check knew the difference between <code>Drop</code> etc</p>",
        "id": 136783069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912567
    },
    {
        "content": "<p>but maybe that's not worth it, and we should keep the <code>Aggregate</code> but just not always use it</p>",
        "id": 136783077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912579
    },
    {
        "content": "<p>and then lower the remaining uses away</p>",
        "id": 136783080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912582
    },
    {
        "content": "<p>I can't really decide if that would actually be nice</p>",
        "id": 136783099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912603
    },
    {
        "content": "<p>I'll write something up. I guess first I'll have to do a writeup for <code>HAIR</code> though. The crickets are very loud in <a href=\"https://rust-lang-nursery.github.io/rustc-guide/mir/construction.html\" target=\"_blank\" title=\"https://rust-lang-nursery.github.io/rustc-guide/mir/construction.html\">https://rust-lang-nursery.github.io/rustc-guide/mir/construction.html</a></p>",
        "id": 136783509,
        "sender_full_name": "oli",
        "timestamp": 1540912904
    },
    {
        "content": "<p>Yes, HAIR specifically has been on my list to try and start documenting</p>",
        "id": 136783598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912951
    },
    {
        "content": "<p>I am thinking more and more about this idea of a rustc-guide WG</p>",
        "id": 136783610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912959
    },
    {
        "content": "<p>particularly if we are able to use the rustc-guide as a way to talk about design-level discussion? maybe that's a nutty idea</p>",
        "id": 136783644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540912986
    },
    {
        "content": "<p>I am trying to pursue that path with the trait work: document the intended design,</p>",
        "id": 136783656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540913005
    },
    {
        "content": "<p>implement,</p>",
        "id": 136783657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540913008
    },
    {
        "content": "<p>and then adjust the docs</p>",
        "id": 136783663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540913018
    },
    {
        "content": "<p>I won't lie though, it's hard</p>",
        "id": 136783664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540913018
    },
    {
        "content": "<p>takes time :)</p>",
        "id": 136783667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540913022
    },
    {
        "content": "<p>I'll start documenting how mir building works, since it's fresh on my mind</p>",
        "id": 136783726,
        "sender_full_name": "oli",
        "timestamp": 1540913048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I do not believe disaggregation being run as a pass as the core cause of the slowness for the disaggregator pass. Rather I think it is all on us not having an efficient way to update MIR.</p>",
        "id": 136786617,
        "sender_full_name": "nagisa",
        "timestamp": 1540915671
    },
    {
        "content": "<p>I do however think getting rid of Rvalue::Aggregate entirely could be a nice simplification of the IR, if it doesn't force significant extra complexity on borrowck/drop elaboration/etc.</p>",
        "id": 136786805,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540915823
    },
    {
        "content": "<p>even so, the changes required for doing this during MIR generation are minimal</p>",
        "id": 136786807,
        "sender_full_name": "oli",
        "timestamp": 1540915831
    },
    {
        "content": "<p>we do need the changes to all the other passes anyway when/if we get element-wise initialization in user space</p>",
        "id": 136786826,
        "sender_full_name": "oli",
        "timestamp": 1540915863
    },
    {
        "content": "<p>good point</p>",
        "id": 136786842,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540915880
    },
    {
        "content": "<p>I am mainly concerned about <code>[1, 2, 3]</code> as an <code>Rvalue::Aggregate</code> of constants becoming 3 statements</p>",
        "id": 136786963,
        "sender_full_name": "oli",
        "timestamp": 1540915931
    },
    {
        "content": "<p>but I believe we can address this by generating the appropriate constant on the fly (if we consider that to be a problem at all)</p>",
        "id": 136786988,
        "sender_full_name": "oli",
        "timestamp": 1540915963
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I do not believe disaggregation being run as a pass as the core cause of the slowness for the disaggregator pass. Rather I think it is all on us not having an efficient way to update MIR.</p>\n</blockquote>\n<p>I just added this to my <a href=\"https://paper.dropbox.com/doc/Compiler-Team-Planning-Rust-All-Hands-2018--AQmd~UZkigjTaNOOhZO2pXhlAg-EiyRtIBW1KxYI6nZeTKjt#:uid=823892722052589599911454&amp;h2=Possible-discussion-topics\" target=\"_blank\" title=\"https://paper.dropbox.com/doc/Compiler-Team-Planning-Rust-All-Hands-2018--AQmd~UZkigjTaNOOhZO2pXhlAg-EiyRtIBW1KxYI6nZeTKjt#:uid=823892722052589599911454&amp;h2=Possible-discussion-topics\">list of all hands topics</a> -- see the MIR 2.0 bullet point :)</p>",
        "id": 136791243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540919529
    }
]