[
    {
        "content": "<p>Would it ever be possible to have a proc Macro <em>definition</em> inside of a regular crate? I keep running into the case where I want to have a compile-time and run-time version of an API, which share virtually all the same internal code with different interfaces, and currently to achieve that you have to split your single crate into three-four crates, which becomes much more of a hassle to maintain and publish on <a href=\"http://crates.io\">crates.io</a>.</p>\n<p>I understand why it wouldn’t be possible to both define a proc macro and use it in the same crate, but I think allowing just the definition would still be a huge quality of life improvement for me.</p>",
        "id": 198557144,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590277285
    },
    {
        "content": "<p>Seems to me like the problems of \"compiling multiple different crates from one set of source files\" remain the same when when the crate doesnt use its \"own\" proc_macro.</p>",
        "id": 198571687,
        "sender_full_name": "RalfJ",
        "timestamp": 1590306701
    },
    {
        "content": "<p>and AFAIK that is what makes mixing proc_macro and lib code so hard.</p>",
        "id": 198571688,
        "sender_full_name": "RalfJ",
        "timestamp": 1590306718
    },
    {
        "content": "<p>That's true, and to be honest I don't even want a proc macro. I just want to be able to perform certain operations at compile time, such as reading and parsing files from a directory, and currently proc macros are the only way I know to do that.</p>",
        "id": 198578249,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590318404
    },
    {
        "content": "<p>I might not understand the problem fully but what about <code>build.rs</code> file?</p>",
        "id": 198578373,
        "sender_full_name": "marmeladema",
        "timestamp": 1590318670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> I want to expose a compile time API to users, a <code>build.rs</code> only works inside my crate. To pick a simple example I want to have <code>std::env::var</code> and <code>env!</code>.</p>",
        "id": 198582321,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590325195
    },
    {
        "content": "<p>It wouldn't work for that particular case, but some such things could be done with <code>const fn</code>. For those that can't, though, a proc macro seems right, and it would be nice to be able to provide one from the same crate.</p>",
        "id": 198692358,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1590431122
    },
    {
        "content": "<p>Thinking on this more I was thinking my problem is more with Cargo than rustc and having to turn my project into a cargo workspace just to support macros, I was thinking what if instead of having to set <code>proc-macro = true</code>, cargo had a macro target similar to bin, that could act as the place to declare the macros that are exported as part of your library. E.g.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">[[macros]]</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"err\">“</span><span class=\"n\">derive</span><span class=\"err\">”</span>\n<span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"err\">“</span><span class=\"n\">macros</span><span class=\"err\">/</span><span class=\"n\">derive</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"err\">”</span>\n</code></pre></div>",
        "id": 198706745,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590446658
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 198706763,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590446710
    },
    {
        "content": "<p>This could also provide the benefit of being usable in your crate if it doesn’t depend on it. So it’s easier to have macros as a private implementation detail, which I have wanted more recently.</p>\n<p>Either way I think I’ll write a post about it on internals since it’s bigger in scope.</p>",
        "id": 198708208,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590448809
    },
    {
        "content": "<p>Internals Thread <a href=\"https://internals.rust-lang.org/t/pre-rfc-add-macros-target-to-cargo-manifest/12428\">https://internals.rust-lang.org/t/pre-rfc-add-macros-target-to-cargo-manifest/12428</a></p>",
        "id": 198711500,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1590453725
    }
]