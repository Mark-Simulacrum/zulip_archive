[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> , while looking over <a href=\"https://github.com/rust-lang/rust/issues/53823\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53823\">#53823</a>, I had the following potentially very-terrible idea: Have we considered generalizing <a href=\"https://github.com/rust-lang/rfcs/pull/2412\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2412\">RFC 2412</a> (\"The optimize attribute\"), implemented by PR <a href=\"https://github.com/rust-lang/rust/issues/55641\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55641\">#55641</a>, to allow one to even toggle individual llvm-args? (In the case of <a href=\"https://github.com/rust-lang/rust/issues/53823\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53823\">#53823</a>, the motivation would be to toggle <code>llvm-args=-x86-cmov-converter=false</code> just on the <code>fn binary_search</code> methods.)</p>",
        "id": 159060567,
        "sender_full_name": "pnkfelix",
        "timestamp": 1550748959
    },
    {
        "content": "<p>Seems problematic to acknowledge the existence of LLVM in the language itself...</p>",
        "id": 159066213,
        "sender_full_name": "centril",
        "timestamp": 1550755021
    },
    {
        "content": "<p>if you can phrase it in backend-neutral terms that might be more workable</p>",
        "id": 159066244,
        "sender_full_name": "centril",
        "timestamp": 1550755046
    },
    {
        "content": "<p>for the standard library such fine-grained optimizations could be done with <code>#[rustc_optimize(...)]</code> as a forever-unstable mechanism</p>",
        "id": 159066324,
        "sender_full_name": "centril",
        "timestamp": 1550755111
    },
    {
        "content": "<p>LLVM command line arguments unfortunately can't be toggled on such a fine grained level. For a few things there might be corresponding function attributes we could use, but usually it's just global state. To change it for one function, you'd need to break out that function into a separate compilation unit and run the relevant parts of the pipeline (which for cmov conversion includes the codegen pipeline) and stitch the results together (in this case, that means linking machine code).</p>",
        "id": 159080387,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1550765506
    },
    {
        "content": "<p>we havenâ€™t.</p>",
        "id": 159082649,
        "sender_full_name": "nagisa",
        "timestamp": 1550766873
    }
]