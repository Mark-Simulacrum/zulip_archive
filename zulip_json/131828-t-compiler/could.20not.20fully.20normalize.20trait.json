[
    {
        "content": "<p>I am working on a <a href=\"https://github.com/willcrichton/flowistry\">rustc plugin</a>. As a part of this plugin, I need to normalize the type of a MIR place. So something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">norm_type</span><span class=\"p\">(</span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body_id</span>: <span class=\"nc\">BodyId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place</span>: <span class=\"nc\">Place</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Place</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">local_def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">hir</span><span class=\"p\">().</span><span class=\"n\">body_owner_def_id</span><span class=\"p\">(</span><span class=\"n\">body_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">def_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">local_def_id</span><span class=\"p\">.</span><span class=\"n\">to_def_id</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">(</span><span class=\"n\">def_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">normalize_erasing_regions</span><span class=\"p\">(</span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">place</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>However, in certain cases I'm getting an ICE. For example, when analyzing the function <a href=\"https://github.com/image-rs/image/blob/master/src/imageops/sample.rs#L402-L418\"><code>sample_val</code></a>, I get the error:</p>\n<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: compiler/rustc_traits/src/normalize_erasing_regions.rs:54:32:\n  could not fully normalize `&lt;S as traits::Enlargeable&gt;::Larger`\n</code></pre></div>\n<p>What are the situations that would cause a type to not be normalizable? Am I invoking <code>normalize_erasing_regions</code> incorrectly? (I'm not sure if I should be using <code>subst_and_normalize_erasing_regions</code> instead with some value of <code>SubstsRef</code>.)</p>",
        "id": 256365297,
        "sender_full_name": "Will Crichton",
        "timestamp": 1633502914
    },
    {
        "content": "<p>Oh this should probably go in t-compiler/help, sorry for the wrong channel.</p>",
        "id": 256365343,
        "sender_full_name": "Will Crichton",
        "timestamp": 1633502957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"265377\">Will Crichton</span> has marked this topic as resolved.</p>",
        "id": 256366906,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633503924
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"265377\">Will Crichton</span> has marked this topic as unresolved.</p>",
        "id": 256366911,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633503926
    },
    {
        "content": "<p>I'm assuming the function in question has a bound like <code>S: traits::Enlargeable</code> and not a  <code>S: traits::Enlargeable&lt;Larger = SomeType&gt;</code> bound. If you are looking at such a generic function without supplying concrete types for the generic parameters , rustc cannot normalize <code>&lt;S as traits::Enlargeable&gt;::Larger</code>as that is unknown with the information at hand. So it depends on your use case. if you'd like to do a best effort without knowing concrete types, then you need to use an InferCtxt and <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/struct.InferCtxt.html#method.partially_normalize_associated_types_in\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_trait_selection/infer/struct.InferCtxt.html#method.partially_normalize_associated_types_in</a></p>",
        "id": 256392835,
        "sender_full_name": "oli",
        "timestamp": 1633518411
    }
]