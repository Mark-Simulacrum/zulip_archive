[
    {
        "content": "<p>Hello, folks. I've been working on an RFC for a feature change to <code>rustc</code>. Is this the right place to start a pre-RFC discussion? Here's the link to my RFC:</p>\n<p><a href=\"https://github.com/sivadeilra/rfcs/blob/user/ardavis/checked_cfg/text/0000-conditional-compilation-checking.md\">https://github.com/sivadeilra/rfcs/blob/user/ardavis/checked_cfg/text/0000-conditional-compilation-checking.md</a></p>\n<p>From the summary:</p>\n<p>Rust supports conditional compilation, analogous to <code>#ifdef</code> in C / C++ / C#. Experience has shown<br>\nthat managing conditional compilation is a significant burden for large-scale development. One of<br>\nthe risks is that a condition may contain misspelled identifiers, or may use identifiers that are<br>\nobsolete or have been removed from a product. For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"widnows\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">do_windows_thing</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The developer intended to test for the feature named <code>windows</code>. This could easily have been detected<br>\nby <code>rustc</code> if it had known the set of all valid <code>feature</code> flags, not only the ones currently<br>\nenabled.</p>\n<p>This RFC proposes adding new command-line options to <code>rustc</code>, which will allow Cargo (and other<br>\nbuild tools) to inform <code>rustc</code> of the set of valid feature flags. Using conditions that are not<br>\nvalid will cause a diagnostic warning. This feature is opt-in, for backwards compatibility;<br>\nif no valid configuration options are presented to <code>rustc</code> then no warnings are generated.</p>",
        "id": 215615513,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604511297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> if you want to get preliminary feedback, <a href=\"https://internals.rust-lang.org/\">https://internals.rust-lang.org/</a> is a good place. Otherwise if you think it's ready for review by community, you'd make a PR to the RFCs repo: <a href=\"https://github.com/rust-lang/rfcs/#what-the-process-is\">https://github.com/rust-lang/rfcs/#what-the-process-is</a></p>",
        "id": 215615946,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604511479
    },
    {
        "content": "<p>Ok, good to know. This is not a complex feature, and partly my goal is just to become familiar with the process of writing RFCs, working with reviewers, and landing feature changes.</p>\n<p>This doc has been reviewed internally by my team within Microsoft, so I think it's reasonably self-coherent. Does that meet the bar for just opening a PR to the RFCs repo?  Or is it expected that there's always some discussion, somewhere, before that?</p>",
        "id": 215616210,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604511604
    },
    {
        "content": "<p>If you think it's good to go, feel free to open an RFC directly :)</p>",
        "id": 215616331,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604511673
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rfcs/pull/3013\">https://github.com/rust-lang/rfcs/pull/3013</a>, if anyone is interested.</p>",
        "id": 215616810,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604511906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> in the PR message people usually put a link to a rendered version to ease reading and feedback. You can see how it is done in other PRs.</p>",
        "id": 215641214,
        "sender_full_name": "pachi",
        "timestamp": 1604523895
    },
    {
        "content": "<p>(I've added a Rendered link.)</p>",
        "id": 215649151,
        "sender_full_name": "scottmcm",
        "timestamp": 1604528871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 215686470,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604567701
    },
    {
        "content": "<p>Always good to have extra checks like this to prevent problems on platforms other than the ones the developer uses most of the time.</p>",
        "id": 215686545,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604567751
    },
    {
        "content": "<p>If this is something you run into, you might also find the portability lint helpful. Already approved, just needs implementation.</p>",
        "id": 215686633,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604567795
    },
    {
        "content": "<p>Ah, the portability lint RFC is interesting -- I was unaware of it. I'm going to see how much overlap there is with my RFC.</p>",
        "id": 215741985,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604595716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> I've wanted that lint implemented for a <em>long</em> time. I'm not aware of other languages or similar having anything like it, and it would go a <em>long</em> way towards helping people who write code on one platform become aware of issues that may only occur on other platforms.</p>",
        "id": 215768396,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604607475
    },
    {
        "content": "<p>Which I think would benefit Windows quite a bit.</p>",
        "id": 215768471,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604607496
    },
    {
        "content": "<p>Absolutely.  I'm especially interested in it for things like sanely representing SIMD/SSE capabilities.</p>",
        "id": 215769329,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604607964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I believe Apple has « @available » in Swift for portability which does something similar, though I’m no expert on the subject</p>",
        "id": 215782863,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1604615568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307289\">@Poliorcetics</span> <a href=\"https://rust-lang.github.io/rfcs/2523-cfg-path-version.html\">https://rust-lang.github.io/rfcs/2523-cfg-path-version.html</a></p>",
        "id": 215793135,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604623672
    },
    {
        "content": "<p>Oh I didn’t know this existed !</p>",
        "id": 215813306,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1604648046
    },
    {
        "content": "<p>I have a prototype implemented, which adds two new lints, <code>invalid_cfg_name</code> and <code>invalid_cfg_value</code>. Everything works, except I can't suppress these with <code>#![allow(invalid_cfg_name)]</code>. So I'm trying to understand the diagnostics system better.</p>\n<p>Since these errors are detected during the \"early\" phase of parsing, should I be using <code>ParseSess::buffer_lint</code>?  I tried using that, but I don't know when / where to catch the buffered lints, so the compiler is panicking later, when it finds that I haven't done anything with the buffered lints.</p>",
        "id": 215899892,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604694538
    },
    {
        "content": "<p>Do I need to add something to an EarlyLintPass, to consume it?</p>",
        "id": 215900442,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604694857
    },
    {
        "content": "<p>If you grep for the other uses of buffer lint, there should be a place where they're currently being re-emitted as proper lints.</p>",
        "id": 215900571,
        "sender_full_name": "simulacrum",
        "timestamp": 1604694938
    },
    {
        "content": "<p><a href=\"https://github.com/Mark-Simulacrum/rust/blob/c279138ab6080e3c3d9b4300cd74b3eb059d0b77/compiler/rustc_lint/src/early.rs#L40-L48\">https://github.com/Mark-Simulacrum/rust/blob/c279138ab6080e3c3d9b4300cd74b3eb059d0b77/compiler/rustc_lint/src/early.rs#L40-L48</a> looks relevant</p>",
        "id": 215900698,
        "sender_full_name": "simulacrum",
        "timestamp": 1604694999
    },
    {
        "content": "<p>Yeah, I've been trying to track down exactly how that works.</p>",
        "id": 215901718,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604695577
    },
    {
        "content": "<p>Is a buffered lint the right way to go?  Where does the #[allow] filtering get applied?</p>",
        "id": 215901774,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604695617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"274471\">@Arlie Davis</span> so one hurdle might be that when dealing with cfg items, I'm not sure how lint levels are expected to work -- in particular, what if you invalidly cfg out the item the cfg is on?</p>",
        "id": 215909242,
        "sender_full_name": "simulacrum",
        "timestamp": 1604699920
    },
    {
        "content": "<p>(Maybe I should read the RFC/pre-RFC)</p>",
        "id": 215909275,
        "sender_full_name": "simulacrum",
        "timestamp": 1604699945
    },
    {
        "content": "<p>Well, the RFC doesn't change the behavior of <code>#[cfg]</code>. It only adds new lints. It's easiest to check those lints when evaluating <code>#[cfg]</code>, not as a separate / later pass.</p>",
        "id": 215909354,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604699994
    },
    {
        "content": "<p>I just mean that lint emission on an attribute that is gone might not work, so we might be stuck sort of</p>",
        "id": 215910005,
        "sender_full_name": "simulacrum",
        "timestamp": 1604700396
    },
    {
        "content": "<p>i.e., you can't really check if the lint level at that attribute is something because the attribute is gone by that point in the compiler</p>",
        "id": 215910026,
        "sender_full_name": "simulacrum",
        "timestamp": 1604700415
    },
    {
        "content": "<p>Ah, right.  Would it work to attach them to the crate, instead?</p>",
        "id": 215911885,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604701787
    },
    {
        "content": "<p>Perhaps, yeah. Not sure.</p>",
        "id": 215912286,
        "sender_full_name": "simulacrum",
        "timestamp": 1604702030
    },
    {
        "content": "<p>Since these are always user-specified a hard lint might not be the worst idea -- presumably, users can just add it to the valid list if it's a problem</p>",
        "id": 215912366,
        "sender_full_name": "simulacrum",
        "timestamp": 1604702062
    },
    {
        "content": "<p>(or hard warning but affected by cap-lints, ideally)</p>",
        "id": 215912386,
        "sender_full_name": "simulacrum",
        "timestamp": 1604702081
    },
    {
        "content": "<p>Pardon my ignorance, but what's a hard lint?  Just a normal Ennn error?  That's easy enough to do, of course, but can users control those with <code>#[allow]</code>?</p>",
        "id": 215913970,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604703084
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> meant deny-by-default</p>",
        "id": 215914016,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604703117
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> </p>\n<p>Not quite. We would probably need to do something ad-hoc here, I guess</p>",
        "id": 215914020,
        "sender_full_name": "simulacrum",
        "timestamp": 1604703119
    },
    {
        "content": "<p>as opposed to warn-by-default</p>",
        "id": 215914031,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604703123
    },
    {
        "content": "<p>No, that's not what I meant</p>",
        "id": 215914072,
        "sender_full_name": "simulacrum",
        "timestamp": 1604703128
    },
    {
        "content": "<p>e.g. we could span_warn, I believe, though perhaps conditionally</p>",
        "id": 215914156,
        "sender_full_name": "simulacrum",
        "timestamp": 1604703195
    },
    {
        "content": "<p>Since this feature is opt-in to begin with, maybe an unconditional error is OK?</p>",
        "id": 215915254,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604703898
    },
    {
        "content": "<p>yeah, maybe</p>",
        "id": 215917083,
        "sender_full_name": "simulacrum",
        "timestamp": 1604705331
    },
    {
        "content": "<p>Definitely seems fine to start with</p>",
        "id": 215917101,
        "sender_full_name": "simulacrum",
        "timestamp": 1604705345
    },
    {
        "content": "<p>That sure makes life easier for me.  :)</p>",
        "id": 215917125,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1604705364
    }
]