[
    {
        "content": "<p>Why is <code>rustc_query_impl</code> so slow to compile? It has the longest compile time of any rustc crate; it currently takes around 2 minutes to compile on rustc-perf. But it's only around 2000 lines of Rust code (excluding blanks and comments). Is it because <code>define_queries!</code> and <code>rustc_query_append!</code> expand to a lot of code?</p>",
        "id": 250237387,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629580350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> yes, it's running a bunch of proc macros generating a bunch of highly generic code</p>",
        "id": 250237410,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629580406
    },
    {
        "content": "<p>take a look at how <code>define_queries!</code> is defined in <code>rustc_macros</code></p>",
        "id": 250237418,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629580423
    },
    {
        "content": "<p>(this is what used to make rustc_middle so ridiculously slow to compile)</p>",
        "id": 250237466,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629580452
    },
    {
        "content": "<p>Isn't <code>define_queries!</code> defined in <code>rustc_query_impl</code>? Or is this a different macro with the same name?</p>",
        "id": 250237468,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629580456
    },
    {
        "content": "<p>oops, I mean <code>rustc_queries</code></p>",
        "id": 250237493,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629580513
    },
    {
        "content": "<p>I know that for benchmarks on rustc-perf you can see how long each pass took. Is there any way to do that for bootstrap crates on rustc-perf?</p>",
        "id": 250237513,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629580558
    },
    {
        "content": "<p>I'm curious if the macro expansion is the slow part or if it's the compilation of the expanded code (probably both, but I'm wondering to what degree).</p>",
        "id": 250237561,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629580610
    },
    {
        "content": "<p>I don't think so, no - it only measures the total time</p>",
        "id": 250237572,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629580672
    },
    {
        "content": "<p>you could measure it locally with <code>RUSTFLAGS_BOOTSTRAP=-Zself-profile</code> though</p>",
        "id": 250237623,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629580706
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20rustc_query_impl.20so.20slow.20to.20compile.3F/near/250237623\">said</a>:</p>\n<blockquote>\n<p>you could measure it locally with <code>RUSTFLAGS_BOOTSTRAP=-Zself-profile</code> though</p>\n</blockquote>\n<p>Ok, thanks. I'll do that.</p>",
        "id": 250237627,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629580720
    },
    {
        "content": "<p>rustc_query_impl duplicates all the code for each of the 257 queries.</p>",
        "id": 250237691,
        "sender_full_name": "cjgillot",
        "timestamp": 1629580813
    },
    {
        "content": "<p>Interesting. Is that necessary for the current architecture or could it be removed?</p>",
        "id": 250237764,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629580927
    },
    {
        "content": "<p>Well... it's responsible for plumbing together all the calls to queries for incremental compilation. The current implementation is quite heavy, so any idea to make it thinner is welcome.</p>",
        "id": 250237921,
        "sender_full_name": "cjgillot",
        "timestamp": 1629581183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20rustc_query_impl.20so.20slow.20to.20compile.3F/near/250237627\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20rustc_query_impl.20so.20slow.20to.20compile.3F/near/250237623\">said</a>:</p>\n<blockquote>\n<p>you could measure it locally with <code>RUSTFLAGS_BOOTSTRAP=-Zself-profile</code> though</p>\n</blockquote>\n<p>Ok, thanks. I'll do that.</p>\n</blockquote>\n<p>Would I want <code>-Z self-profile</code> or <code>-Z time-passes</code>?</p>",
        "id": 250238624,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629582335
    },
    {
        "content": "<p>self-profile, time-passes only shows the time elapsed</p>",
        "id": 250238632,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629582355
    },
    {
        "content": "<p>self-profile records it and lets you do fancy analysis after the fact</p>",
        "id": 250238675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629582380
    },
    {
        "content": "<p>(you can pass both if you want a progress indicator)</p>",
        "id": 250238678,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629582393
    },
    {
        "content": "<p>You'll probably want to use the <a href=\"https://github.com/rust-lang/measureme#summarize\"><code>summarize</code></a> tool which prints a table of useful statistics including but not limited to time elapsed</p>",
        "id": 250238748,
        "sender_full_name": "LÃ©o Lanteri Thauvin",
        "timestamp": 1629582509
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20rustc_query_impl.20so.20slow.20to.20compile.3F/near/250237561\">said</a>:</p>\n<blockquote>\n<p>I'm curious if the macro expansion is the slow part or if it's the compilation of the expanded code (probably both, but I'm wondering to what degree).</p>\n</blockquote>\n<p>Ok, looks like it's entirely codegen. Macro expansion takes 300ms on rustc_query_impl.</p>",
        "id": 250241248,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629586112
    },
    {
        "content": "<p>Even just gathering the mono items takes 2.43s (which is actually longer than typeck's 2.17s).</p>",
        "id": 250241261,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629586146
    },
    {
        "content": "<p>On my machine, LTO is taking more than a minute. (I didn't even realize I had it enabled; I should probably disable it since I don't need that much in the way of optimizations.)</p>",
        "id": 250241331,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629586238
    },
    {
        "content": "<p>Interestingly, <code>mir_shims</code> takes 246ms, which seems like a long time to just generate shims (unless I'm misunderstanding what it does).</p>",
        "id": 250241360,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629586300
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20rustc_query_impl.20so.20slow.20to.20compile.3F/near/250241331\">said</a>:</p>\n<blockquote>\n<p>On my machine, LTO is taking more than a minute. (I didn't even realize I had it enabled; I should probably disable it since I don't need that much in the way of optimizations.)</p>\n</blockquote>\n<p>Actually, there doesn't seem to be a config.toml setting to disable that.</p>",
        "id": 250241413,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629586350
    },
    {
        "content": "<p>Does <code>expand_crate</code> includ the time it took for proc macros to run? I assume yes, but I wanted to check.</p>",
        "id": 250241439,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629586413
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20rustc_query_impl.20so.20slow.20to.20compile.3F/near/250241413\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20rustc_query_impl.20so.20slow.20to.20compile.3F/near/250241331\">said</a>:</p>\n<blockquote>\n<p>On my machine, LTO is taking more than a minute. (I didn't even realize I had it enabled; I should probably disable it since I don't need that much in the way of optimizations.)</p>\n</blockquote>\n<p>Actually, there doesn't seem to be a config.toml setting to disable that.</p>\n</blockquote>\n<p>you might be able to hack it</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"c1\"># Compile the compiler with a non-default ThinLTO import limit. This import</span>\n<span class=\"c1\"># limit controls the maximum size of functions imported by ThinLTO. Decreasing</span>\n<span class=\"c1\"># will make code compile faster at the expense of lower runtime performance.</span>\n<span class=\"c1\">#thin-lto-import-instr-limit = if incremental { 10 } else { LLVM default (currently 100) }</span>\n</code></pre></div>",
        "id": 250241503,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629586474
    },
    {
        "content": "<p>(by setting the limit to 0)</p>",
        "id": 250241531,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629586529
    },
    {
        "content": "<p>Does <code>10</code> mean 10 ASM instructions?</p>",
        "id": 250241543,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629586562
    },
    {
        "content": "<p>(Or LLVM instructions?)</p>",
        "id": 250241582,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629586568
    },
    {
        "content": "<p>I think it's just an arbitrary unit tbh</p>",
        "id": 250241591,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629586597
    },
    {
        "content": "<p>Hmm</p>",
        "id": 250241603,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629586624
    },
    {
        "content": "<p>Some queries take <code>impl IntoQueryParam&lt;DefId&gt;</code>. The macro-generated call sites of <code>into_query_param</code> are marked with <code>#[inline(always)]</code>. Could adding a trampoline still help with reducing the amount of generic code, or no?</p>",
        "id": 250242285,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629587455
    },
    {
        "content": "<p>oh good call - I would actually see how much churn there is from taking DefId directly and only doing that</p>",
        "id": 250242398,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629587607
    },
    {
        "content": "<p>I think I've tried it before and it had no effect</p>",
        "id": 250243070,
        "sender_full_name": "simulacrum",
        "timestamp": 1629588626
    },
    {
        "content": "<p>into_query_param is very trivial</p>",
        "id": 250243076,
        "sender_full_name": "simulacrum",
        "timestamp": 1629588641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20rustc_query_impl.20so.20slow.20to.20compile.3F/near/250243076\">said</a>:</p>\n<blockquote>\n<p>into_query_param is very trivial</p>\n</blockquote>\n<p>right, but won't it compile the function twice if you call it with LocalDefId and DefId? not <code>into_query_param</code>, the function it's used in</p>",
        "id": 250243147,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629588739
    },
    {
        "content": "<p>you likely want it to be inlined anyway, since queries are quite hot; at that point you're not saving much</p>",
        "id": 250243217,
        "sender_full_name": "simulacrum",
        "timestamp": 1629588874
    },
    {
        "content": "<p>The call sites actually aren't that large (only 10 or so lines that are mostly functional calls and a conditional or two).</p>",
        "id": 250243474,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629589285
    },
    {
        "content": "<p>Alright, I guess I'll have to look for something else.</p>",
        "id": 250243475,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629589297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20rustc_query_impl.20so.20slow.20to.20compile.3F/near/250237410\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> yes, it's running a bunch of proc macros generating a bunch of highly generic code</p>\n</blockquote>\n<p>Which code is the highly generic code you're referring to?</p>",
        "id": 250243482,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629589318
    },
    {
        "content": "<p>I remember <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> telling me that some functions are super generic, I don't remember which though. Maybe <code>JobOwner::try_start</code>?</p>",
        "id": 250243595,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629589494
    },
    {
        "content": "<p>there are a <em>lot</em> of generics in the query system</p>",
        "id": 250243603,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629589503
    },
    {
        "content": "<p>Yeah, JobOwner is too generic for its sake.</p>",
        "id": 250243735,
        "sender_full_name": "cjgillot",
        "timestamp": 1629589703
    },
    {
        "content": "<p>Ok, thanks! I'll look into that.</p>",
        "id": 250243897,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629590032
    },
    {
        "content": "<p>There are a lot of generics, but it seems like a decent number of them are only instantiated to one or two different types. Doesn't that mean de-genericising them wouldn't affect codegen time?</p>",
        "id": 250245145,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629592143
    },
    {
        "content": "<p>Why are <code>rustc_query_impl</code> and <code>rustc_query_system</code> separate crates? It seems like them being separate is the source of a lot of the generics.</p>",
        "id": 250245253,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629592290
    },
    {
        "content": "<p>looks like <code>rustc_middle</code> depends on query_system but not query_impl</p>",
        "id": 250245350,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629592431
    },
    {
        "content": "<p>and query_impl depends on rustc_middle</p>",
        "id": 250245390,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629592449
    },
    {
        "content": "<p>I was worried that was the case.</p>",
        "id": 250245442,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629592548
    },
    {
        "content": "<p>Having both crates also allows to manage the amount of code using generics instead of macros. That way, rustc_query_system has a clean (-ish) interface and rustc_query_impl instanciates everything.</p>",
        "id": 250245529,
        "sender_full_name": "cjgillot",
        "timestamp": 1629592630
    },
    {
        "content": "<p>So is there a way to de-genericise stuff without changing the architecture?</p>",
        "id": 250245546,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629592674
    },
    {
        "content": "<p>However, this separation of concerns is still very weak, with some convoluted back-and-forth.</p>",
        "id": 250245550,
        "sender_full_name": "cjgillot",
        "timestamp": 1629592678
    },
    {
        "content": "<p>Could <code>-Z print-mono-items</code> be useful to see what's being instantiated so much?</p>",
        "id": 250245608,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629592732
    },
    {
        "content": "<p>Some functions only depend on the query result type as a return type. I think we should get rid of this dependency, but I haven't found a satisfactory way to do it.</p>",
        "id": 250245736,
        "sender_full_name": "cjgillot",
        "timestamp": 1629592922
    },
    {
        "content": "<p>Hmm, what do you mean?</p>",
        "id": 250245798,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629592979
    },
    {
        "content": "<p>Do you have an example of a function that does that?</p>",
        "id": 250245806,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629592994
    },
    {
        "content": "<p>try_execute_query does nothing interesting with the query result. It just passes it around for caching and to the caller.</p>",
        "id": 250245910,
        "sender_full_name": "cjgillot",
        "timestamp": 1629593141
    }
]