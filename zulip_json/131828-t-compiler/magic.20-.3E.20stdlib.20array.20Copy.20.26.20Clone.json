[
    {
        "content": "<p>somewhere in the compiler is some magic that allows all tuples and function pointers to implement Copy/Clone regardless of arity. Presumably this is the same code that has always allowed arrays of all sizes to implement Copy/Clone, even before const generics existed. now that const generics exist I was curious about removing this magic from the compiler and into ordinary impls in std. Does anyone know where in the compiler this code lives?</p>",
        "id": 241177662,
        "sender_full_name": "bstrie",
        "timestamp": 1622653048
    },
    {
        "content": "<p>also, whether or not this would be a good idea; I'd hope that it's perf-neutral, but I really have no clue</p>",
        "id": 241177878,
        "sender_full_name": "bstrie",
        "timestamp": 1622653150
    },
    {
        "content": "<p>This branch makes the trait system think that the traits are implemented: <a href=\"https://github.com/rust-lang/rust/blob/01e9d09d3bbb35a1fbb0a2a353cfcf90a4feb050/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1632-L1635\">https://github.com/rust-lang/rust/blob/01e9d09d3bbb35a1fbb0a2a353cfcf90a4feb050/compiler/rustc_trait_selection/src/traits/select/mod.rs#L1632-L1635</a><br>\nRemoving array from this match would then make the compiler use the implementation written in the impl block: <a href=\"https://github.com/rust-lang/rust/blob/30187c81f65aa29a53ad7c24fe3b4c7bff947094/compiler/rustc_ty_utils/src/instance.rs#L256\">https://github.com/rust-lang/rust/blob/30187c81f65aa29a53ad7c24fe3b4c7bff947094/compiler/rustc_ty_utils/src/instance.rs#L256</a></p>",
        "id": 241179233,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1622653766
    }
]