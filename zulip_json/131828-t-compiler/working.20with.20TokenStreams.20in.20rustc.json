[
    {
        "content": "<p>hey, I know that this would be bending the rustc apis quite a ways, but is there anyway to turn a <code>rustc_ast</code> <code>TokenStream</code> into a <code>proc_macro</code> one? I've been staring at the implementation of <code>proc_macro_server</code> for a while and I can't figure out where the types actually change. </p>\n<p>For context, I'm working on a rustc_driver and I'd like to run a <code>syn</code> macro on a <code>TokenStream</code> inside this driver</p>",
        "id": 217663871,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1606155510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"312719\">@Xavier Denis</span> I think it happens at <a href=\"https://github.com/rust-lang/rust/blob/40cf72108edb9b8633a9d284b238988309204494/compiler/rustc_expand/src/proc_macro.rs#L84\">https://github.com/rust-lang/rust/blob/40cf72108edb9b8633a9d284b238988309204494/compiler/rustc_expand/src/proc_macro.rs#L84</a></p>",
        "id": 217664480,
        "sender_full_name": "bjorn3",
        "timestamp": 1606155863
    },
    {
        "content": "<p>I might be confused but that seems to produce a <code>rustc_ast::TokenStream</code> for part of a rust ast</p>",
        "id": 217664867,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1606156076
    },
    {
        "content": "<p>I'm looking for the step afterwards where we get a <code>proc_macro::TokenStream</code></p>",
        "id": 217664934,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1606156093
    },
    {
        "content": "<p>and from what I can tell it happens inside <code>client.run</code> but I can't actually figure out where the 'meat' of it is</p>",
        "id": 217664980,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1606156120
    },
    {
        "content": "<p>do we just <code>transmute</code> the tokenstream betwene representatons? (by doing FFI)?</p>",
        "id": 217665077,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1606156167
    },
    {
        "content": "<p>On the server side any <code>TokenStream</code> type can be used. You just have to implement certain traits on your context (in this case <code>Rustc</code>: <a href=\"https://github.com/rust-lang/rust/blob/40cf72108edb9b8633a9d284b238988309204494/compiler/rustc_expand/src/proc_macro_server.rs#L353\">https://github.com/rust-lang/rust/blob/40cf72108edb9b8633a9d284b238988309204494/compiler/rustc_expand/src/proc_macro_server.rs#L353</a>) for <code>proc_macro::server</code> to manipulate it. The <code>proc_macro::bridge::client::Client</code> then takes this server side <code>TokenStream</code> type and stores it somewhere. The client side then gets a token that will be stored in the client <code>TokenStream</code> that can then be used to ask the server for information about and manipulate the token stream.</p>",
        "id": 217665690,
        "sender_full_name": "bjorn3",
        "timestamp": 1606156501
    },
    {
        "content": "<p>Here is the <code>TokenStream</code> handle type defined: <a href=\"https://github.com/rust-lang/rust/blob/40cf72108edb9b8633a9d284b238988309204494/library/proc_macro/src/bridge/client.rs#L161\">https://github.com/rust-lang/rust/blob/40cf72108edb9b8633a9d284b238988309204494/library/proc_macro/src/bridge/client.rs#L161</a></p>",
        "id": 217665818,
        "sender_full_name": "bjorn3",
        "timestamp": 1606156568
    },
    {
        "content": "<p>It may be easier to use <code>proc_macro2</code>, which can also be used outside proc-macro's.</p>",
        "id": 217665896,
        "sender_full_name": "bjorn3",
        "timestamp": 1606156625
    },
    {
        "content": "<p>Hmm I see so the client/proc_macro token stream is fundamentally tied to the existence of a server</p>",
        "id": 217666693,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1606157049
    },
    {
        "content": "<p>Yea proc_macro2 would solve this but I’d need to turn a rustc_ast tokenstream into that one</p>",
        "id": 217666737,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1606157088
    },
    {
        "content": "<p>Maybe I’ll just keep my hacky code for now (turn everything into a string, parse that)</p>",
        "id": 217666782,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1606157121
    }
]