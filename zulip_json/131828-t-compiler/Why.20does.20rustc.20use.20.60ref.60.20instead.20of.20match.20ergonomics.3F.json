[
    {
        "content": "<p>Is it just because there's a lot of existing code using <code>ref</code>? Or is it the preferred style?</p>",
        "id": 217572961,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1606083244
    },
    {
        "content": "<p>My guess is that most cases are just old enough to predate match ergnomics, I don't think it's the preferred style.</p>",
        "id": 217573273,
        "sender_full_name": "simulacrum",
        "timestamp": 1606083631
    },
    {
        "content": "<p>And cause there's no <code>rustfix</code> for it.</p>",
        "id": 217585817,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1606101969
    },
    {
        "content": "<p>Also a lot of things are Copy, so using match ergonomics forces you to deref a bunch</p>",
        "id": 217868416,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606300949
    },
    {
        "content": "<p>i fairly strongly prefer <code>match *x { Type(a, ref x) =&gt; func(a, x) }</code> over <code>match x { Type(a, x) =&gt; func(*a, x) }</code></p>",
        "id": 217868505,
        "sender_full_name": "lcnr",
        "timestamp": 1606301043
    },
    {
        "content": "<p>I never used <code>match *x {}</code> before working on rustc because I rarely had Copy members. It feels wrong to me because <code>*x</code> isn't a real value; among other things it means I can't tuple it with something else if I want to match two things at once. That made me always prefer match ergonomics. Frankly I'd love some kind of auto-deref of Copy types so that I can keep match ergonomics but I don't have to deref manually. Or at least allow patterns like <code>match x { Type(&amp;a, x) =&gt; func(a, x) }</code></p>",
        "id": 217928404,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606332423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> You <em>can</em> write patterns like <code>&amp;a</code> to match a <code>&amp;Foo</code> and get a <code>Foo</code>.</p>",
        "id": 217944020,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606341424
    },
    {
        "content": "<p>Yes but not as a subpattern, right?</p>",
        "id": 217944067,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606341465
    },
    {
        "content": "<p>Testing...</p>",
        "id": 217944123,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606341493
    },
    {
        "content": "<p>As in, say <code>x: &amp;Option&lt;(u64, Foo)&gt;</code>, I would like <code>match x { Some((&amp;i, foo)) =&gt; ... }</code></p>",
        "id": 217944188,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606341544
    },
    {
        "content": "<p>Just confirmed that you can. This works:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"k\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">v</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">value2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">show_me_the_type</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">dbg</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">value2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217944194,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606341549
    },
    {
        "content": "<p>The <code>&amp;</code> in my example isn't because there's an actual ref in the corresponding type there. Rather, the ref only appears because of match ergonomics</p>",
        "id": 217944242,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606341582
    },
    {
        "content": "<p><em>oh</em>. You want a subpattern where the <code>&amp;</code> isn't where the reference is.</p>",
        "id": 217944246,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606341586
    },
    {
        "content": "<p>Yeah, to avoid needing to dereference when the binding is copy and I'm using ergonomics</p>",
        "id": 217944312,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606341615
    },
    {
        "content": "<p>There's an issue somewhere for this</p>",
        "id": 217944324,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606341622
    },
    {
        "content": "<p>Can't help you there; the compile error that produces is exactly what I hope it <em>keeps</em> producing.</p>",
        "id": 217944404,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606341688
    },
    {
        "content": "<p>Oh :(</p>",
        "id": 217944420,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606341707
    },
    {
        "content": "<p>(That's not the only position on the matter, though.)</p>",
        "id": 217944436,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606341719
    },
    {
        "content": "<p>Subject of much debate, and I'm not looking to reopen it here; I just misunderstood your original question.</p>",
        "id": 217944492,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1606341745
    },
    {
        "content": "<p>Oh yeah, got sidetracked sry.</p>",
        "id": 217944521,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606341778
    },
    {
        "content": "<p>(Found the issue, if anyone is curious: <a href=\"https://github.com/rust-lang/rust/issues/64586\">https://github.com/rust-lang/rust/issues/64586</a>)</p>",
        "id": 217944717,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606341917
    },
    {
        "content": "<p>I use <code>ref</code> because I frankly still don't understand match ergonomics...</p>",
        "id": 217956049,
        "sender_full_name": "mark-i-m",
        "timestamp": 1606352284
    },
    {
        "content": "<p>The issue <span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> linked makes it much less intuitive than it ought to be, for me.</p>",
        "id": 217959286,
        "sender_full_name": "varkor",
        "timestamp": 1606356487
    },
    {
        "content": "<p>I feel somewhat strongly that instead of the \"default binding mode\" implementation, <code>Some(pat): &amp;Option&lt;T&gt;</code>  should just match <code>pat: &amp;T</code> so that <code>Some(&amp;x)</code> and <code>&amp;Some(x)</code> are equivalent when matching a <code>&amp;Option&lt;T&gt;</code>. This is really simple and easy to teach, but I recall in the issue about this (I don't think it's the one <span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> found) it was pointed out that this is backward incompatible when matching <code>Some(p): &amp;&amp;Option&lt;u32&gt;</code> that <code>p</code> will currently get type <code>&amp;u32</code> and the suggested approach gives it type <code>&amp;&amp;u32</code>. I think this is something an edition boundary (and maybe a lint) can solve though.</p>",
        "id": 217962182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606361064
    },
    {
        "content": "<p>(I'm not exactly sure if this is the issue I'm thinking of but <a href=\"https://github.com/rust-lang/rfcs/pull/2005\">https://github.com/rust-lang/rfcs/pull/2005</a> has a bunch of discussion on this point.)</p>",
        "id": 217962539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606361621
    },
    {
        "content": "<p>Hm, so match ergonomics collapse multiple refs? I think we can still allow <code>Some(&amp;p)</code> there without breaking backcompat. The collapse of nested refs will stay a source of confusion with or without this I think</p>",
        "id": 217962957,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606362203
    },
    {
        "content": "<p>But I should read the discussion first</p>",
        "id": 217962981,
        "sender_full_name": "Nadrieril",
        "timestamp": 1606362241
    },
    {
        "content": "<p>No, because <code>Some(&amp;x): &amp;Option&lt;&amp;u32&gt;</code> will currently give <code>x</code> the type <code>u32</code></p>",
        "id": 217963118,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606362399
    },
    {
        "content": "<p>because the changed default binding mode isn't actually a ref, you can't match on it</p>",
        "id": 217963129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606362436
    },
    {
        "content": "<p>I don't think it makes a whole lot of sense to have <code>Some(p): &amp;&amp;Option&lt;T&gt;</code> give <code>p</code> the type <code>&amp;&amp;T</code>; it works in the syntactic sense but there is no second pointer available so the match basically has to invent a <code>&amp;T</code> local just so it can be pointed to. I would much prefer that this be an error though, where we just tell people to use <code>&amp;Some(p)</code> instead if they want a <code>&amp;T</code> (and if they want a <code>&amp;&amp;T</code> they will have to build it themselves outside the match)</p>",
        "id": 217963327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606362743
    }
]