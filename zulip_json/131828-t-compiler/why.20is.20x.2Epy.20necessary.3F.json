[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/the.20rustc-dev-guide.20is.20confusing/near/221141303\">said</a>:</p>\n<blockquote>\n<p>I think the main issue we run into is that people <em>really</em> want to have one code snippet they can copy paste, and we don't have one to give them</p>\n</blockquote>\n<p>That's why <code>cargo</code> should work.</p>",
        "id": 221141437,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609255432
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/131828-t-compiler/topic/the.20rustc-dev-guide.20is.20confusing/near/221141292\">said</a>:</p>\n<blockquote>\n<p>Which same sentence is that? I'm looking at <a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html#configuring-rust-analyzer-for-rustc\">https://rustc-dev-guide.rust-lang.org/building/suggested.html#configuring-rust-analyzer-for-rustc</a></p>\n</blockquote>\n<p>ah ok - that really does want to use rustfmt directly so you can format a single file at a time</p>",
        "id": 221141488,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/131828-t-compiler/topic/the.20rustc-dev-guide.20is.20confusing/near/221141437\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/the.20rustc-dev-guide.20is.20confusing/near/221141303\">said</a>:</p>\n<blockquote>\n<p>I think the main issue we run into is that people <em>really</em> want to have one code snippet they can copy paste, and we don't have one to give them</p>\n</blockquote>\n<p>That's why <code>cargo</code> should work.</p>\n</blockquote>\n<p>no no this is my point</p>",
        "id": 221141497,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255451
    },
    {
        "content": "<p>cargo is <em>fundamentally insufficient for building the compiler</em></p>",
        "id": 221141506,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255464
    },
    {
        "content": "<p>it doesn't have any notion of multiple targets</p>",
        "id": 221141512,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255470
    },
    {
        "content": "<p>or stopping and resuming halfway through a build</p>",
        "id": 221141515,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255479
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/the.20rustc-dev-guide.20is.20confusing/near/221141515\">said</a>:</p>\n<blockquote>\n<p>or stopping and resuming halfway through a build</p>\n</blockquote>\n<p>I always stop builds with Ctrl-C and resume them with <code>cargo build</code> or <code>cargo check</code>, what do you mean?</p>",
        "id": 221141534,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609255505
    },
    {
        "content": "<p>if you want to build the standard library, that requires about 1/10th of the time of a full <code>x.py build --stage 2</code></p>",
        "id": 221141549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255530
    },
    {
        "content": "<p>how would you know when to stop?</p>",
        "id": 221141552,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255537
    },
    {
        "content": "<p>the whole point of x.py is there are <em>multiple</em> targets it makes sense to build</p>",
        "id": 221141620,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255581
    },
    {
        "content": "<p>and each of them are complete in and of themselves</p>",
        "id": 221141624,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255590
    },
    {
        "content": "<p>If <code>std</code> was in a different repo, I could clone only that. Or <code>cargo build -p libstd</code> might work. Of course they don't work now, but they <em>might</em> be made to work.</p>",
        "id": 221141626,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609255593
    },
    {
        "content": "<p>yeah, I would like for <code>cargo build -p libstd</code> to work - it sort of does today if you hack it enough</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cd library/test\n$ cargo +nightly build\n</code></pre></div>",
        "id": 221141660,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255643
    },
    {
        "content": "<p>but it will never understand stages</p>",
        "id": 221141669,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255659
    },
    {
        "content": "<p>stages are where you use the output of one cargo invocation as the input compiler for another</p>",
        "id": 221141677,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255677
    },
    {
        "content": "<p>I suggest reading through <a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html</a></p>",
        "id": 221141737,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/the.20rustc-dev-guide.20is.20confusing/near/221141669\">said</a>:</p>\n<blockquote>\n<p>but it will never understand stages</p>\n</blockquote>\n<p>Neither will I <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span>. I know what stages are, but they've always seemed misnamed in <code>rustc</code>. I think there's an open issue for that.</p>",
        "id": 221141754,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609255743
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap\">https://rustc-dev-guide.rust-lang.org/building/bootstrapping.html#understanding-stages-of-bootstrap</a></p>",
        "id": 221141763,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255756
    },
    {
        "content": "<p>but yeah I have this discussion with basically every new contributor - they want <code>cargo build</code> to just work and I have to explain that x.py does more work than cargo could</p>",
        "id": 221141860,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255809
    },
    {
        "content": "<p>I think it's feasible for <code>cargo build</code> to work on libstd with enough hacks, but not on anything else</p>",
        "id": 221141888,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255836
    },
    {
        "content": "<p>Ideally, the compiler and <code>std</code> could be compiled with a beta or stable toolchain. <code>x.py</code> could still be used for CI for more advanced workflows, but testing <code>std</code> changes locally shouldn't be one.</p>",
        "id": 221141892,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609255850
    },
    {
        "content": "<p>Same for <code>rustfmt</code>. I understand that the compiler might be using new or unstable syntax today, but in the long run, a stable <code>rustfmt</code> can be enough.</p>",
        "id": 221141935,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609255904
    },
    {
        "content": "<p>please see <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/MCP.3A.20move.20compiler.2F.20crates.20to.20stable.20Rust.20compiler-team.23358\">https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/MCP.3A.20move.20compiler.2F.20crates.20to.20stable.20Rust.20compiler-team.23358</a>, <a href=\"https://zulip-archive.rust-lang.org/131828tcompiler/38874Buildingrustcwithbetalibstd.html\">https://zulip-archive.rust-lang.org/131828tcompiler/38874Buildingrustcwithbetalibstd.html</a> - this has been discussed a lot</p>",
        "id": 221141963,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255922
    },
    {
        "content": "<p>(a <em>lot</em>)</p>",
        "id": 221141982,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609255926
    },
    {
        "content": "<p>and I still recommend reading the bootstrapping chapter</p>",
        "id": 221142282,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609256235
    },
    {
        "content": "<p><a href=\"https://fs.blog/2020/03/chestertons-fence/\">https://fs.blog/2020/03/chestertons-fence/</a></p>",
        "id": 221142292,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609256264
    },
    {
        "content": "<p>I think I need to stop having these discussions before people read the bootstrapping chapter, it's bad for my health <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 221142609,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609256536
    },
    {
        "content": "<p>Just to be clear, I've read the bootstrapping chapter (at some point, maybe it has changed), but it still seems to me that things could be simpler.</p>",
        "id": 221142758,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609256660
    },
    {
        "content": "<p>It changed a lot in the past 3 months or so, I made a lot of changes</p>",
        "id": 221142948,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609256848
    },
    {
        "content": "<p>I agree libstd specifically could be a lot simpler, but I really don't think the compiler could be</p>",
        "id": 221143035,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609256888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20x.2Epy.20necessary.3F/near/221141626\">said</a>:</p>\n<blockquote>\n<p>If <code>std</code> was in a different repo, I could clone only that. Or <code>cargo build -p libstd</code> might work. Of course they don't work now, but they <em>might</em> be made to work.</p>\n</blockquote>\n<p>if I could get <code>cargo build</code> working in library/std, I wonder if we could make it a subtree</p>",
        "id": 221143112,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609256974
    },
    {
        "content": "<p>the main issue is that the compiler and standard library are one big workspace right now</p>",
        "id": 221143139,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609257001
    },
    {
        "content": "<p>and 'nested workspaces' are mostly still a pipe dream</p>",
        "id": 221143184,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609257011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> <a href=\"https://github.com/rust-lang/compiler-team/issues/394\">https://github.com/rust-lang/compiler-team/issues/394</a></p>",
        "id": 221145960,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609259229
    },
    {
        "content": "<blockquote>\n<p>Split apart compiler/ and library/ so they no longer use the same global Cargo.lock and Cargo.toml.</p>\n</blockquote>\n<p>I recall it was a bit complicated, but this might even help <code>rust-analyzer</code></p>",
        "id": 221146406,
        "sender_full_name": "Laurențiu",
        "timestamp": 1609259567
    },
    {
        "content": "<p>right, there's a lot of discussion on <a href=\"https://github.com/rust-lang/rust/pull/76533\">https://github.com/rust-lang/rust/pull/76533</a></p>",
        "id": 221146453,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609259594
    },
    {
        "content": "<p>let's move to <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394\">https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Make.20it.20easier.20to.20build.20the.20standard.20libr.E2.80.A6.20compiler-team.23394</a> though</p>",
        "id": 221146467,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609259616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> FWIW, I'd love to extend Cargo to the point where it <em>could</em> be sufficient to build the Rust compiler, and other things with similar requirements.</p>",
        "id": 221172319,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609279954
    },
    {
        "content": "<p>Artifact dependencies could help with part of that.</p>",
        "id": 221172331,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609279968
    },
    {
        "content": "<p>Even the multi-phase build is something that's not wildly different from being able to express a crate dependency on a specific toolchain.</p>",
        "id": 221172357,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609280010
    },
    {
        "content": "<p>I think, in general, the kinds of changes to Cargo that would be necessary to make it sufficient for building rustc are changes that would help for other users of Cargo as well.</p>",
        "id": 221172370,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1609280034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20x.2Epy.20necessary.3F/near/221172319\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> FWIW, I'd love to extend Cargo to the point where it <em>could</em> be sufficient to build the Rust compiler, and other things with similar requirements.</p>\n</blockquote>\n<p>I'm really surprised to hear you say that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> x.py does a <em>lot</em> more than cargo.</p>\n<blockquote>\n<p>Even the multi-phase build is something that's not wildly different from being able to express a crate dependency on a specific toolchain.</p>\n</blockquote>\n<p>I see it as very different actually - this isn't just one crate depending on binary artifacts from another, this is the <em>same</em> crate being its <em>own</em> dependency</p>",
        "id": 221173180,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609280745
    },
    {
        "content": "<p>since you need to build <code>rustc_middle</code> with the beta compiler in order to build rustc_middle with stage one</p>",
        "id": 221173190,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609280761
    },
    {
        "content": "<p>and for that reason I don't see this being generally applicable</p>",
        "id": 221173234,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609280780
    },
    {
        "content": "<p>eh, that part could be worked around with facade crates or something. but I agree we're a long way off.</p>",
        "id": 221173281,
        "sender_full_name": "simulacrum",
        "timestamp": 1609280868
    },
    {
        "content": "<p>x.py also handles things like --keep-stage that deliberately prevent cache invalidation to speed up builds.</p>",
        "id": 221174138,
        "sender_full_name": "bjorn3",
        "timestamp": 1609281809
    },
    {
        "content": "<p>I think there's an important part that it depends greatly how complicated a change one is making whether x.py is a problem.  I've been experimenting with a different <code>?</code> trait+desugar lately, and needing to use x.py instead of cargo for that is not an issue at all -- I'd have to look up all the magic incantations for cargo just the same as I need to for x.py, since the only way to be productive with that is to be very careful about stages, something I never need to care about in any other cargo situation.  I'm happy to <code>x.py test --stage 1 --keep-stage 0 src/test/ui</code> for that -- it's better than running cargo in three places in the right order.</p>",
        "id": 221256007,
        "sender_full_name": "scottmcm",
        "timestamp": 1609371444
    },
    {
        "content": "<p>(btw --keep-stage 0 looks wrong there - do you mean <code>--keep-stage-std 1</code> maybe?)</p>",
        "id": 221256886,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609372473
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/why.20is.20x.2Epy.20necessary.3F/near/221256886\">said</a>:</p>\n<blockquote>\n<p>(btw --keep-stage 0 looks wrong there - do you mean <code>--keep-stage-std 1</code> maybe?)</p>\n</blockquote>\n<p>I don't think so -- I wanted to pick up changes to the compiler and std, but not rebuild the bootstrap version of std (since that forces the whole compiler to rebuild).</p>",
        "id": 221337431,
        "sender_full_name": "scottmcm",
        "timestamp": 1609480317
    },
    {
        "content": "<p>ah ok, you're modifying <em>both</em> the compiler and the standard library</p>",
        "id": 221337546,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609480535
    },
    {
        "content": "<p>I think you want --keep-stage-std 0 then, otherwise it will use a cached version of the compiler</p>",
        "id": 221337549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609480553
    },
    {
        "content": "<p>Yeah, \"one snippet\" can't work if alone for the reason that different snippets are needed depending on whether</p>\n<ul>\n<li>you just change the stdlib</li>\n<li>you just change the compiler</li>\n<li>you change both of them in a way that stdlib should use the enw compiler features (so you need to interact with bootstrapping)</li>\n<li>probably more?</li>\n</ul>",
        "id": 221399590,
        "sender_full_name": "RalfJ",
        "timestamp": 1609593159
    },
    {
        "content": "<p>I've just discovered the discussion on std aware cargo (<a href=\"https://github.com/rust-lang/wg-cargo-std-aware/\">https://github.com/rust-lang/wg-cargo-std-aware/</a>). I don't follow everything, could that help make bootstrap less special?</p>",
        "id": 221468688,
        "sender_full_name": "Nadrieril",
        "timestamp": 1609704790
    },
    {
        "content": "<p>It could help for stage1 builds, maybe</p>",
        "id": 221468950,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609705094
    },
    {
        "content": "<p>I don't think it could help for stage 2</p>",
        "id": 221468951,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609705099
    },
    {
        "content": "<p>within a stage perhaps but not between stages most likely.</p>",
        "id": 221468960,
        "sender_full_name": "simulacrum",
        "timestamp": 1609705124
    },
    {
        "content": "<p>another example of things x.py makes a lot easier than using cargo directly: <a href=\"https://github.com/rust-lang/rust/issues/46955#issuecomment-753264720\">https://github.com/rust-lang/rust/issues/46955#issuecomment-753264720</a>. If you look at the linked PR, adding it in rustbuild is like 10 lines of code.</p>",
        "id": 222471335,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610474839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224471\">@Lokathor</span> let's move here so we're not disrupting the other thread</p>",
        "id": 260340957,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636063436
    },
    {
        "content": "<p>I totally get that it would be amazing and magical and wonderful for <code>cargo build</code> to work on the compiler</p>",
        "id": 260341028,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636063456
    },
    {
        "content": "<p>but I don't think it's feasible any time in the short term, and showing people how to use <code>x.py</code> through a livestream seems like an easy way to make it easier to get started</p>",
        "id": 260341074,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636063487
    },
    {
        "content": "<p>I'm not against the idea, nor did i read any part of the other thread at all leading up to when you pingged me. I just saw a ping and then gave you a meme.</p>",
        "id": 260341607,
        "sender_full_name": "Lokathor",
        "timestamp": 1636063821
    },
    {
        "content": "<p>Lmao well fair enough</p>",
        "id": 260341991,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636064031
    },
    {
        "content": "<p>My main issues with x.py are performance and that intellij doesn't understand it (it wants cargo check output instead, for extra linting beyond the built-in stuff). Knowing when to invoke which command... well, you learn with time although I still have to look up link checker every time.</p>\n<p>Maybe a cheat sheet would help. All the common invocations on one page, links to the dev guide if someone needs more details.</p>",
        "id": 260344659,
        "sender_full_name": "The 8472",
        "timestamp": 1636065716
    },
    {
        "content": "<p>Yeah I've been meaning to make the linkchecker work with --stage 0 (that would be a good first project, let me write it up)</p>",
        "id": 260344788,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636065796
    },
    {
        "content": "<p>I think the cheat sheet can just be part of the guide tbh</p>",
        "id": 260344815,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636065812
    },
    {
        "content": "<p>But yeah would definitely be useful</p>",
        "id": 260344839,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636065831
    },
    {
        "content": "<p>Rust analyzer allows you to override the check command from <code>cargo check</code> to <code>./x.py check --json-output</code>. Does intellij have something similar? <a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html#configuring-rust-analyzer-for-rustc\">https://rustc-dev-guide.rust-lang.org/building/suggested.html#configuring-rust-analyzer-for-rustc</a></p>",
        "id": 260385247,
        "sender_full_name": "bjorn3",
        "timestamp": 1636106433
    },
    {
        "content": "<p>Choices are hardcoded </p>\n<p><a href=\"/user_uploads/4715/xYaDJ1QOjwolDRrUIYgKBnSF/intellij.png\">intellij.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/xYaDJ1QOjwolDRrUIYgKBnSF/intellij.png\" title=\"intellij.png\"><img src=\"/user_uploads/4715/xYaDJ1QOjwolDRrUIYgKBnSF/intellij.png\"></a></div>",
        "id": 260390834,
        "sender_full_name": "The 8472",
        "timestamp": 1636109880
    },
    {
        "content": "<p>I would suggest opening an issue about it.</p>",
        "id": 260396292,
        "sender_full_name": "bjorn3",
        "timestamp": 1636113849
    },
    {
        "content": "<p>Might be just making things confusing, but since \"cargo build\" command is almost never what people want today.<br>\nWhy don't we just make <code>check</code>, <code>build</code>, <code>test</code> commands as aliases <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/master/.cargo/config#L2\">in the same principle as rust-analyzer</a> and call it a day? They can still accept the same parameters as <code>x.py</code>.</p>",
        "id": 260408312,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636120698
    },
    {
        "content": "<p>I would expect that you can't override builtin commands. In addition how would rustbuild call them then?</p>",
        "id": 260411828,
        "sender_full_name": "bjorn3",
        "timestamp": 1636122339
    },
    {
        "content": "<p>Just turn top-level command into aliases, and keep compiler/ and library/ directory commands sane? </p>\n<p>I think implementation is not a problem, since allowing overriding just needs another unstable option for cargo, right?</p>",
        "id": 260413305,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636123037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> I don't understand your suggestion. Are you saying <code>cargo build</code> should call <code>x.py build</code>? I don't see what advantage that really gives, and it seems a little complicated for what it does. Also it doesn't allow passing any flags to rustbuild.</p>",
        "id": 260413604,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636123188
    },
    {
        "content": "<p>Being a little more beginner-friendly to Rust community? After this even complete beginner know how to build rustc now... without needing to read the guide :)</p>",
        "id": 260414372,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636123539
    },
    {
        "content": "<p><code>cargo build</code> can build and run <code>bootstrap</code> directly, which can handle all the flags.</p>",
        "id": 260414493,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636123583
    },
    {
        "content": "<p>not reading the guide seems like a bad idea in general <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 260414613,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636123644
    },
    {
        "content": "<p>this makes the very first step easier but makes the learning curve after that steeper</p>",
        "id": 260414636,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636123656
    },
    {
        "content": "<p>because then you have to switch your mental model from \"cargo works like normal\" to \"cargo works sometimes maybe if you're doing simple things\"</p>",
        "id": 260414673,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636123679
    },
    {
        "content": "<p>indeed. i'm not saying we should go in this direction, just that we could in theory.</p>",
        "id": 260414805,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636123721
    },
    {
        "content": "<p>well, I'm not sure we could even in theory, I've tried a lot of approaches in this area without success</p>",
        "id": 260414957,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636123800
    },
    {
        "content": "<p>let me find a link</p>",
        "id": 260415003,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636123804
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/79021\">https://github.com/rust-lang/rust/pull/79021</a><br>\n<a href=\"https://github.com/rust-lang/rust/pull/76446\">https://github.com/rust-lang/rust/pull/76446</a></p>",
        "id": 260415151,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636123868
    },
    {
        "content": "<p>Very interesting ideas.</p>",
        "id": 260415645,
        "sender_full_name": "Charles Lew",
        "timestamp": 1636124075
    }
]