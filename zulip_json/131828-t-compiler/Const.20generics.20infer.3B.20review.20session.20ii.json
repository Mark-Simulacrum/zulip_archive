[
    {
        "content": "<p>Just wake up to check up the progress with the const generics. Did the review session happen today? <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 163934247,
        "sender_full_name": "Charles Lew",
        "timestamp": 1555964353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> I didn't get to it, I was about to post a comment that I fell behind :(</p>",
        "id": 163940055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555968505
    },
    {
        "content": "<p>I may yet</p>",
        "id": 163940058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555968507
    },
    {
        "content": "<p>I added a test, but the other tests (that were working on <a href=\"https://github.com/rust-lang/rust/issues/53645\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53645\">#53645</a>) seem not to be working with the latest infer changes, so I haven't added them yet</p>",
        "id": 163940727,
        "sender_full_name": "varkor",
        "timestamp": 1555969004
    },
    {
        "content": "<p>I haven't got around to checking whether it's because there are still some missing things in the infer PR, or whether something has broken in the meantime</p>",
        "id": 163940769,
        "sender_full_name": "varkor",
        "timestamp": 1555969029
    },
    {
        "content": "<p>(I've added another test)</p>",
        "id": 163946783,
        "sender_full_name": "varkor",
        "timestamp": 1555974522
    },
    {
        "content": "<p>okay, there are a few tests there now</p>",
        "id": 163983868,
        "sender_full_name": "varkor",
        "timestamp": 1556022264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> fwiw, the more unblocking thing to do is answering point-wise questions about the type/trait/infer system, in light of recent changes</p>",
        "id": 163985787,
        "sender_full_name": "eddyb",
        "timestamp": 1556023694
    },
    {
        "content": "<p>Mmm, did the session rescheduled again?</p>",
        "id": 164046527,
        "sender_full_name": "Charles Lew",
        "timestamp": 1556071628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> a ping to make sure the review session actually get rescheduled.</p>",
        "id": 164099466,
        "sender_full_name": "Charles Lew",
        "timestamp": 1556125440
    },
    {
        "content": "<p>Update: I spent some time reading it but didn't get as far as I would like.</p>",
        "id": 164104475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556128986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> so I was playing with this test case, and it doesn't compile</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164110142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556132667
    },
    {
        "content": "<p>I guess this is known to you :)</p>",
        "id": 164110219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556132678
    },
    {
        "content": "<p>the error I get is</p>\n<div class=\"codehilite\"><pre><span></span>error[E0282]: type annotations needed\n --&gt; /home/nmatsakis/tmp/const-generics-1.rs:7:5\n  |\n7 |     foo(data);\n  |     ^^^ cannot infer type for `fn([u8; _]) {foo::&lt;_&gt;}`\n</pre></div>",
        "id": 164110277,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556132697
    },
    {
        "content": "<p>I guess I have to trace through the code, presumably the unification logic is either missing or disabled</p>",
        "id": 164110292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556132712
    },
    {
        "content": "<p>OK, well, I guess the problem is <a href=\"https://github.com/rust-lang/rust/blob/e305df1846a6d985315917ae0c81b74af8b4e641/src/librustc/ty/relate.rs#L504-L517\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e305df1846a6d985315917ae0c81b74af8b4e641/src/librustc/ty/relate.rs#L504-L517\">the <code>relate</code> logic here</a></p>",
        "id": 164111073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556133328
    },
    {
        "content": "<p>Is it expected that this test ICEs and gives other errors?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">data</span>: <span class=\"kt\">usize</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"c1\">// compiler doesn&#39;t really like the `Foo&lt;C&gt;` there</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">3</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"mi\">22</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164111297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556133485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>: it's known that quite a few things don't work</p>",
        "id": 164112807,
        "sender_full_name": "varkor",
        "timestamp": 1556134566
    },
    {
        "content": "<p>some are due to the questions in the RFC</p>",
        "id": 164112839,
        "sender_full_name": "varkor",
        "timestamp": 1556134581
    },
    {
        "content": "<p>others are probably oversights</p>",
        "id": 164112850,
        "sender_full_name": "varkor",
        "timestamp": 1556134590
    },
    {
        "content": "<p>I'm not sure what the best way forward is — that is, whether we want to get everything working before merging, or fix problems as follow ups</p>",
        "id": 164112883,
        "sender_full_name": "varkor",
        "timestamp": 1556134639
    },
    {
        "content": "<p>the latter is probably less hassle</p>",
        "id": 164112898,
        "sender_full_name": "varkor",
        "timestamp": 1556134659
    },
    {
        "content": "<p>I have a few extra tests that ICE (that I haven't added to the PR) that I know about</p>",
        "id": 164112981,
        "sender_full_name": "varkor",
        "timestamp": 1556134710
    },
    {
        "content": "<p>but some simple tests are passing now, at least :)</p>",
        "id": 164113018,
        "sender_full_name": "varkor",
        "timestamp": 1556134749
    },
    {
        "content": "<blockquote>\n<p>I'm not sure what the best way forward is — that is, whether we want to get everything working before merging, or fix problems as follow ups</p>\n</blockquote>\n<p>probably best to merge bit by bit. I am just sort of trying to wrap my head around what this PR itself enables</p>",
        "id": 164113198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556134909
    },
    {
        "content": "<p>anyway I think I'll try to review eddyb's specific questions</p>",
        "id": 164113208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556134918
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"218608\">@yodal</span>! On Github <a href=\"https://github.com/rust-lang/rust/pull/59008#issuecomment-487194356\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59008#issuecomment-487194356\">I wrote</a>:</p>\n<blockquote>\n<p>maybe we can sync up a bit next week and you can try to talk me through it? (Over Zulip would be fine.) I'm interested in having the design here written out and submitted as a proposal. Anyway, I'll ping you on Zulip to discuss.</p>\n</blockquote>\n<p>So this is me pinging you both =) what do you think?</p>",
        "id": 164296258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556311338
    },
    {
        "content": "<p>sounds good <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span><br>\nit'd be useful to make sure <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> is available too, as the overarching strategy for the PRs was <a href=\"https://github.com/rust-lang/rust/issues/44580#issuecomment-330154745\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/44580#issuecomment-330154745\">following the guidelines here</a> and doing something analogous to type parameters by default</p>",
        "id": 164296592,
        "sender_full_name": "varkor",
        "timestamp": 1556311640
    },
    {
        "content": "<p>regarding the specific comments: as we discussed previously, there's definitely opportunity for refactoring afterwards, but that can be considered mostly as a separate issue</p>",
        "id": 164296680,
        "sender_full_name": "varkor",
        "timestamp": 1556311711
    },
    {
        "content": "<p>canonicalisation is one of the trickier parts, so I imagine there are some kinks to work out there (though as you say, I'm not sure whether it's worth addressing in this PR, or afterwards)</p>",
        "id": 164296746,
        "sender_full_name": "varkor",
        "timestamp": 1556311784
    },
    {
        "content": "<p>thanks for reviewing :)</p>",
        "id": 164297031,
        "sender_full_name": "varkor",
        "timestamp": 1556312032
    },
    {
        "content": "<p>I am also up for sitting down for a chat. That said, I am not sure how much I can add other than to say that we followed the patterns in what was already done.</p>",
        "id": 164299320,
        "sender_full_name": "yodal",
        "timestamp": 1556314084
    },
    {
        "content": "<p>Cannonicalization is definitely just past where I have been comfortable working because I don't quite understand everything that is going on from a bigger picture</p>",
        "id": 164299391,
        "sender_full_name": "yodal",
        "timestamp": 1556314164
    },
    {
        "content": "<p>Also, I haven't been lurking on Zulip because I only used it for the last review session, but I will try to stick around so that you can reach me</p>",
        "id": 164299489,
        "sender_full_name": "yodal",
        "timestamp": 1556314245
    },
    {
        "content": "<p>I vaguely understand canonicalization, but I'm not comfortable with edge cases</p>",
        "id": 164518467,
        "sender_full_name": "eddyb",
        "timestamp": 1556610275
    },
    {
        "content": "<p>as in, I think I know how to make <em>some</em> things work, but not how to keep everything sound etc.</p>",
        "id": 164518481,
        "sender_full_name": "eddyb",
        "timestamp": 1556610302
    },
    {
        "content": "<p>I've fixed the remaining issue with <code>shallow_resolve</code>, so I think there are just the questions about canonicalisation to go?</p>",
        "id": 164579447,
        "sender_full_name": "varkor",
        "timestamp": 1556660506
    }
]