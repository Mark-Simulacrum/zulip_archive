[
    {
        "content": "<p>I just tried to make the following refactor to rustdoc:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/librustdoc/clean/blanket_impl.rs b/src/librustdoc/clean/blanket_impl.rs</span>\n<span class=\"gh\">index c4a2050a818..aaa43122c97 100644</span>\n<span class=\"gd\">--- a/src/librustdoc/clean/blanket_impl.rs</span>\n<span class=\"gi\">+++ b/src/librustdoc/clean/blanket_impl.rs</span>\n<span class=\"gu\">@@ -24,6 +24,10 @@ impl&lt;'a, 'tcx&gt; BlanketImplFinder&lt;'a, 'tcx&gt; {</span>\n         let param_env = self.cx.tcx.param_env(item_def_id);\n         let ty = self.cx.tcx.type_of(item_def_id);\n\n<span class=\"gi\">+        let substs = infcx.fresh_substs_for_item(DUMMY_SP, item_def_id);</span>\n<span class=\"gi\">+        let ty = ty.subst(infcx.tcx, substs);</span>\n<span class=\"gi\">+        let param_env = param_env.subst(infcx.tcx, substs);</span>\n<span class=\"gi\">+</span>\n         debug!(\"get_blanket_impls({:?})\", ty);\n         let mut impls = Vec::new();\n         for &amp;trait_def_id in self.cx.tcx.all_traits(LOCAL_CRATE).iter() {\n<span class=\"gu\">@@ -44,10 +48,6 @@ impl&lt;'a, 'tcx&gt; BlanketImplFinder&lt;'a, 'tcx&gt; {</span>\n                         _ =&gt; return false,\n                     }\n\n<span class=\"gd\">-                    let substs = infcx.fresh_substs_for_item(DUMMY_SP, item_def_id);</span>\n<span class=\"gd\">-                    let ty = ty.subst(infcx.tcx, substs);</span>\n<span class=\"gd\">-                    let param_env = param_env.subst(infcx.tcx, substs);</span>\n<span class=\"gd\">-</span>\n                     let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n                     let trait_ref = trait_ref.subst(infcx.tcx, impl_substs);\n</code></pre></div>\n<p>which broke because it depends on the infer context. I'm worried about moving the infer context out of the inner loop because it uses interior mutability and I don't know if it will have the same behavior if I only call <code>infer_ctxt().enter(|| ...)</code> once. Why does it use interior mutability?</p>",
        "id": 223829775,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611515519
    },
    {
        "content": "<p>well I just spent entirely too much time finding out why, but I think it might be possible to get rid of <a href=\"https://github.com/jyn514/rust/tree/infer-mut/\">https://github.com/jyn514/rust/tree/infer-mut/</a></p>",
        "id": 223839434,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611527266
    },
    {
        "content": "<p>about 22 errors left, I started with ~100</p>",
        "id": 223839439,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1611527272
    }
]