[
    {
        "content": "<p>Hmm <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> do you have any idea what <a href=\"https://github.com/rust-lang/rust/blob/f5230fbf76bafd86ee4376a0e26e551df8d17fec/compiler/rustc_middle/src/ty/print/mod.rs#L120-L123\">this logic</a> is trying to do?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">substs</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">generics</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>seems...suspicious (did I write that?!?!)</p>",
        "id": 216933024,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605561216
    },
    {
        "content": "<p>I think I just marked a couple months of mentions as \"read\", thanks Zulip,,,</p>",
        "id": 216933215,
        "sender_full_name": "eddyb",
        "timestamp": 1605561300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think I did and it decides whether to apply substs (when you're in a generics-child of the impl, like an assoc item) or not (e.g. nested defs that have the impl in their def path ancestors)</p>",
        "id": 216933448,
        "sender_full_name": "eddyb",
        "timestamp": 1605561411
    },
    {
        "content": "<p>hmm</p>",
        "id": 216933525,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605561463
    },
    {
        "content": "<p>because we don't have generic modules, I believe the substs are always empty when that condition is false</p>",
        "id": 216933530,
        "sender_full_name": "eddyb",
        "timestamp": 1605561465
    },
    {
        "content": "<p>i.e. there is an implicit <code>Option</code> around the substs</p>",
        "id": 216933539,
        "sender_full_name": "eddyb",
        "timestamp": 1605561473
    },
    {
        "content": "<p>I don't really understand , but ok</p>",
        "id": 216933626,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605561507
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">struct</span> <span class=\"nc\">X</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 216933676,
        "sender_full_name": "eddyb",
        "timestamp": 1605561542
    },
    {
        "content": "<p>you get <code>{impl#0}::foo</code> and <code>{impl#0}::foo::X</code> paths from that</p>",
        "id": 216933700,
        "sender_full_name": "eddyb",
        "timestamp": 1605561560
    },
    {
        "content": "<p>the former may have substs (when provided at all) but the latter can't</p>",
        "id": 216933736,
        "sender_full_name": "eddyb",
        "timestamp": 1605561584
    },
    {
        "content": "<p>the conditional allows getting e.g. <code>&lt;Bar&lt;String&gt; as Foo&gt;::foo</code> when <code>substs = [String]</code> for the former, while not breaking when substs aren't available</p>",
        "id": 216933840,
        "sender_full_name": "eddyb",
        "timestamp": 1605561621
    },
    {
        "content": "<p>the condition could just be <code>if !substs.is_empty()</code></p>",
        "id": 216933858,
        "sender_full_name": "eddyb",
        "timestamp": 1605561629
    },
    {
        "content": "<p>ok</p>",
        "id": 216933934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605561672
    },
    {
        "content": "<p>that helps for my purposes, thanks</p>",
        "id": 216933949,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1605561679
    },
    {
        "content": "<p>just remembered to make <code>X</code> a type (instead of just a <code>static</code>), because this means you can <code>rustc</code> to actually print the path quite easily (<code>let () = X;</code> inside <code>fn foo</code>)</p>",
        "id": 216934156,
        "sender_full_name": "eddyb",
        "timestamp": 1605561771
    },
    {
        "content": "<p>if I'm not mistaken it will show up as <code>&lt;Bar&lt;T&gt; as Foo&gt;::foo::X</code></p>",
        "id": 216934227,
        "sender_full_name": "eddyb",
        "timestamp": 1605561810
    },
    {
        "content": "<p>(the fun variant of this is nesting things in closures, because there the type printing of a closure vs the path printing is quite different)</p>",
        "id": 216934294,
        "sender_full_name": "eddyb",
        "timestamp": 1605561837
    },
    {
        "content": "<p>shouldn't it be <code>&lt;Bar&lt;T&gt; as Foo&gt;</code>? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 216934369,
        "sender_full_name": "lcnr",
        "timestamp": 1605561859
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> fixed</p>",
        "id": 216934655,
        "sender_full_name": "eddyb",
        "timestamp": 1605562009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/print_def_path/near/216934294\">said</a>:</p>\n<blockquote>\n<p>(the fun variant of this is nesting things in closures, because there the type printing of a closure vs the path printing is quite different)</p>\n</blockquote>\n<p>I thought we updated them to be somewhat similar <a href=\"https://github.com/rust-lang/rust/pull/77069/files#diff-0485903fe0105680719870f73d0211551183b03f6d54b05d1667992cf0ca776b\">https://github.com/rust-lang/rust/pull/77069/files#diff-0485903fe0105680719870f73d0211551183b03f6d54b05d1667992cf0ca776b</a></p>",
        "id": 216935630,
        "sender_full_name": "Aman Arora",
        "timestamp": 1605562482
    }
]