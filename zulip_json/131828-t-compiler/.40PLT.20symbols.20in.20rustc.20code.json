[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"131022\">@Gabriel Majeri</span> Hi!</p>",
        "id": 134822197,
        "sender_full_name": "nagisa",
        "timestamp": 1538139865
    },
    {
        "content": "<p>so I've looked around and realized the symbols which use the PLT are generated by LLVM code</p>",
        "id": 134822237,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538139906
    },
    {
        "content": "<p>to begin with, could you give me an idea how to make <code>x.py</code> rebuild the local LLVM if I've made a change?</p>",
        "id": 134822269,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538139939
    },
    {
        "content": "<p>I remember needing to actually stage the LLVM submodule changes so that <code>x.py</code> did not check-out the previous version</p>",
        "id": 134822404,
        "sender_full_name": "nagisa",
        "timestamp": 1538140037
    },
    {
        "content": "<p>I recall there possibly being some flag(s) to make x.py not checkout submodules for you, but I don’t remember what they are.</p>",
        "id": 134822479,
        "sender_full_name": "nagisa",
        "timestamp": 1538140093
    },
    {
        "content": "<p>LLVM making calls to @PLT seems plausible. This ties back into what I had suggested before: changing the <code>cc</code> crate.</p>",
        "id": 134822512,
        "sender_full_name": "nagisa",
        "timestamp": 1538140125
    },
    {
        "content": "<p>(submodules? <a href=\"https://github.com/rust-lang/rust/blob/master/config.toml.example#L133\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/config.toml.example#L133\">https://github.com/rust-lang/rust/blob/master/config.toml.example#L133</a>)</p>",
        "id": 134822530,
        "sender_full_name": "davidtwco",
        "timestamp": 1538140143
    },
    {
        "content": "<blockquote>\n<p>(submodules? <a href=\"https://github.com/rust-lang/rust/blob/master/config.toml.example#L133\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/config.toml.example#L133\">https://github.com/rust-lang/rust/blob/master/config.toml.example#L133</a>)</p>\n</blockquote>\n<p>yeah, that's the one.</p>",
        "id": 134822550,
        "sender_full_name": "nagisa",
        "timestamp": 1538140165
    },
    {
        "content": "<p>hmm, well I set that to false, and even comitted my changes to the submodule and it seems like it doesn't work</p>",
        "id": 134822635,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538140210
    },
    {
        "content": "<p>I'd rather not do a clean rebuild of LLVM if possible</p>",
        "id": 134822648,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538140223
    },
    {
        "content": "<p>In that case you could <code>touch</code> <code>src/rustllvm/llvm-rebuild-trigger</code>, but I can’t immediatelly tell if it rebuilds from scratch or not</p>",
        "id": 134822686,
        "sender_full_name": "nagisa",
        "timestamp": 1538140263
    },
    {
        "content": "<p>lemme try it for you</p>",
        "id": 134822690,
        "sender_full_name": "nagisa",
        "timestamp": 1538140266
    },
    {
        "content": "<p>nevermind, I've deleted <code>llvm-finished-building</code> file and it works now</p>",
        "id": 134822795,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538140329
    },
    {
        "content": "<p>/me will try nevertheless, out of sheer interest</p>",
        "id": 134822858,
        "sender_full_name": "nagisa",
        "timestamp": 1538140382
    },
    {
        "content": "<p>Yeah, it seems like touching <code>llvm-rebuild-trigger</code> does not help.</p>",
        "id": 134823636,
        "sender_full_name": "nagisa",
        "timestamp": 1538141011
    },
    {
        "content": "<p>You <em>need</em> to remove the llvm-finished-building markerfile</p>",
        "id": 134823649,
        "sender_full_name": "nagisa",
        "timestamp": 1538141023
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131022\">@Gabriel Majeri</span> the appropriate location to set flags for llvm build is in <code>src/librustc_llvm/build.rs</code> btw.</p>",
        "id": 134823707,
        "sender_full_name": "nagisa",
        "timestamp": 1538141055
    },
    {
        "content": "<p>LLVM was already built with <code>-fno-plt</code> for me, because I set <code>CXXFLAGS=-fno-plt</code> and it picked that up</p>",
        "id": 134824293,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538141620
    },
    {
        "content": "<p>Something even weirder is going on here. I've completly removed the code to call functions through PLT from LLVM and it _still_ generates some PLT calls</p>",
        "id": 134824353,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538141652
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/YEMmGkxS-GAtNw4S-ZkaKXFV/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/YEMmGkxS-GAtNw4S-ZkaKXFV/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/YEMmGkxS-GAtNw4S-ZkaKXFV/pasted_image.png\"></a></div>",
        "id": 134824360,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538141662
    },
    {
        "content": "<p>Literally, at this point even if I build with <code>-Z plt=yes</code>, LLVM should simply not know how to generate PLT calls, yet for some compiler intrinsics it still seems to generate them</p>",
        "id": 134824414,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538141709
    },
    {
        "content": "<p>Can you get a list of all @PLTd symbols at all?</p>",
        "id": 134824576,
        "sender_full_name": "nagisa",
        "timestamp": 1538141869
    },
    {
        "content": "<p>OK, so for a simple <code>hello world</code> binary, the functions which use the PLT are: <code>_Unwind_Resume</code> and <code>__stack_chk_fail</code>, <code>memcpy</code> and <code>memset</code></p>",
        "id": 134824726,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538141992
    },
    {
        "content": "<p>These are all intrinsic functions, generated by LLVM implicitly</p>",
        "id": 134824777,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538142016
    },
    {
        "content": "<p>I added the <code>RtLibUseGOT</code> module flag to all Rust modules to ensure LLVM doesn't use the PLT for these calls, but it seems it didn't work?</p>",
        "id": 134824802,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538142064
    },
    {
        "content": "<blockquote>\n<p>OK, so for a simple <code>hello world</code> binary, the functions which use the PLT are: <code>_Unwind_Resume</code> and <code>__stack_chk_fail</code>, <code>memcpy</code> and <code>memset</code></p>\n</blockquote>\n<p>At least some of those are provided by glibc, is it possible that calling function at all would <em>require</em> calling through @PLT?</p>",
        "id": 134825462,
        "sender_full_name": "nagisa",
        "timestamp": 1538142691
    },
    {
        "content": "<p>No, that's the issue, on my Arch distro where every C binary is compiled with <code>-fno-plt</code>, there are absolutely no PLT mentions in the disassembly. I want to get Rust binaries to the same point.</p>",
        "id": 134825619,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538142819
    },
    {
        "content": "<p>Okay. So they cannot come from the standard library and <code>__stack_chk_fail</code> is definitely called by LLVM itself, yeah.</p>",
        "id": 134825837,
        "sender_full_name": "nagisa",
        "timestamp": 1538143004
    },
    {
        "content": "<p>I’m honestly not sure where in LLVM @PLT calls are generated, so my guess is as good as yours. But I expected there to be more calls in the first place.</p>",
        "id": 134826004,
        "sender_full_name": "nagisa",
        "timestamp": 1538143169
    },
    {
        "content": "<p>if it is just those, that’s already very workable <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 134826010,
        "sender_full_name": "nagisa",
        "timestamp": 1538143179
    },
    {
        "content": "<p>Yeah, I am happy to say that we got rid of 80-90% of the PLT calls. When the perf run was made, we had only gotten rid of 20% of the calls, so perf should be even better once it gets merged</p>",
        "id": 134826106,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538143235
    },
    {
        "content": "<p>lets run perf again, I guess.</p>",
        "id": 134826135,
        "sender_full_name": "nagisa",
        "timestamp": 1538143258
    },
    {
        "content": "<p>I wanted to see if we can get rid of ALL the PLT calls before trying that</p>",
        "id": 134826155,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538143276
    },
    {
        "content": "<p>Feel free to keep trying. Whenever you’re ready just ping me and I’ll kick the perf off</p>",
        "id": 134826183,
        "sender_full_name": "nagisa",
        "timestamp": 1538143317
    },
    {
        "content": "<p>Well I seem to be getting somewhere. It seems <code>libbacktrace</code>'s build file didn't take into account global CFLAGS, so after adding <code>-fno-plt</code> I managed to at least eliminate the <code>_Unwind_Resume@PLT</code> calls</p>",
        "id": 134829108,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538145769
    },
    {
        "content": "<p>I'll investigate the other calls, but it seems the story will be similar: C libraries (which don't respect CFLAGS) are the issue</p>",
        "id": 134829151,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538145809
    },
    {
        "content": "<p>At least calls to <code>__stack_chk_fail@PLT</code> are entirely generated by LLVM</p>",
        "id": 134829778,
        "sender_full_name": "nagisa",
        "timestamp": 1538146337
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131022\">@Gabriel Majeri</span> you could just grep through disassembly of the whole binary for <code>call .*@PLT</code> to see <em>what</em> calls via PLT.</p>",
        "id": 134829831,
        "sender_full_name": "nagisa",
        "timestamp": 1538146402
    },
    {
        "content": "<p>Oh lovely, it seems <code>jemalloc</code> is also betraying us.</p>",
        "id": 134830467,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538146849
    },
    {
        "content": "<p>Using the system allocator drastically reduces the number of PLT calls</p>",
        "id": 134830484,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538146863
    },
    {
        "content": "<p>Also, it seems <code>jemalloc</code> recorded the <code>-fno-plt</code> flag in the <code>SPECIFIED_CFLAGS</code> Makefile variable, but then decided to ignore it when building</p>",
        "id": 134831236,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538147463
    },
    {
        "content": "<p>Well I don't think there's much more I can do here. The issue is with C code, and the best solution I guess is to eventually rewrite everything in Rust :)</p>",
        "id": 134838843,
        "sender_full_name": "Gabriel Majeri",
        "timestamp": 1538155210
    },
    {
        "content": "<blockquote>\n<p>Well I don't think there's much more I can do here. The issue is with C code, and the best solution I guess is to eventually rewrite everything in Rust <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>\n</blockquote>\n<p>I’m starting another perf run then</p>",
        "id": 134843083,
        "sender_full_name": "nagisa",
        "timestamp": 1538159405
    }
]