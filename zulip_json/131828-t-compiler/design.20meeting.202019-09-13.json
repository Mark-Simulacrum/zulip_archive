[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> -- design meeting starting in <strong>5 minutes</strong>.  The topic will be <a href=\"https://hackmd.io/_ixQrAr5TKafV9m8eSU_VA?view\" target=\"_blank\" title=\"https://hackmd.io/_ixQrAr5TKafV9m8eSU_VA?view\">\"rust-analyzer and library-ification\"</a>. You can view the <a href=\"https://hackmd.io/_ixQrAr5TKafV9m8eSU_VA?view\" target=\"_blank\" title=\"https://hackmd.io/_ixQrAr5TKafV9m8eSU_VA?view\">hackmd document</a> here that collects some thoughts.</p>\n<p>To start, let's have</p>\n<h1>Announcements</h1>",
        "id": 175625746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383014
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> and <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span>, not sure if you are part of t-compiler/meeting (let me know if you want to be added...)</p>",
        "id": 175626002,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383155
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 175626568,
        "sender_full_name": "matklad",
        "timestamp": 1568383461
    },
    {
        "content": "<p>OK, let's see, maybe we can make a kind of \"agenda-ish\" to guide our time</p>",
        "id": 175626570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383462
    },
    {
        "content": "<p>(Also, I realized that I should probably -- after each planning meeting -- be sending an e-mail to the compiler mailing list with upcoming dates. Going to start doing that after this meeting.)</p>",
        "id": 175626616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383491
    },
    {
        "content": "<p>(I don't think I'm on that list... but interested)</p>",
        "id": 175626684,
        "sender_full_name": "centril",
        "timestamp": 1568383531
    },
    {
        "content": "<p>actually the right place to post these sorts of updates is the team blog</p>",
        "id": 175626713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383555
    },
    {
        "content": "<p>that we're \"about to setup\"</p>",
        "id": 175626718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383559
    },
    {
        "content": "<p>(the canonical place for now is the compiler team calendar, of course)</p>",
        "id": 175626853,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383618
    },
    {
        "content": "<p>anyway, shall we get started?</p>",
        "id": 175626858,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> and I had kind of identified these questions to help guide us</p>\n<p>anyway, shall we get started?</p>\n<ul>\n<li>Are we on board with pursuing “library-ification”?</li>\n<li>What is the first target of library-ification?</li>\n<li>As time allows, consider some of the technical details of the above targets, particularly what kind of “boundaries” we can draw.</li>\n</ul>\n<p>but it seems like we should start maybe by \"summarizing\" a bit about what's been happening around rust-analyzer + what library-ification means</p>",
        "id": 175626937,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383673
    },
    {
        "content": "<p>I don't get pinged by <code>T-compiler/meeting</code></p>",
        "id": 175627029,
        "sender_full_name": "eddyb",
        "timestamp": 1568383713
    },
    {
        "content": "<p>curious, you are on the list</p>",
        "id": 175627065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383737
    },
    {
        "content": "<p>(just checked)</p>",
        "id": 175627069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383740
    },
    {
        "content": "<p>I have been in the past, but I didn't get pinged just then</p>",
        "id": 175627119,
        "sender_full_name": "varkor",
        "timestamp": 1568383767
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span></p>",
        "id": 175627126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383774
    },
    {
        "content": "<p>maybe because I edited the message? :)</p>",
        "id": 175627139,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383781
    },
    {
        "content": "<p>weird</p>",
        "id": 175627145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383784
    },
    {
        "content": "<p>OH</p>",
        "id": 175627150,
        "sender_full_name": "eddyb",
        "timestamp": 1568383792
    },
    {
        "content": "<p>ah, that worked <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 175627151,
        "sender_full_name": "varkor",
        "timestamp": 1568383792
    },
    {
        "content": "<p>yeah that would explain why Zulip had a ghost ping that didn't really show up but counted up the mentions thing</p>",
        "id": 175627239,
        "sender_full_name": "eddyb",
        "timestamp": 1568383818
    },
    {
        "content": "<p>let's start =)</p>",
        "id": 175627253,
        "sender_full_name": "centril",
        "timestamp": 1568383826
    },
    {
        "content": "<p>anyway, re: rust-analyzer and its current status, I don't want to talk too much about it, but it seemed worth mentioning some details. Basically, work there has been proceeding pretty well and rust-analyzer now incuds:</p>\n<ul>\n<li>some kind of name resolution</li>\n<li>integration with chalk</li>\n<li>some efforts at a type checker</li>\n</ul>\n<p>and, notably, a shared lexer with rustc (right, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>?)</p>",
        "id": 175627272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383841
    },
    {
        "content": "<p>Right!</p>",
        "id": 175627309,
        "sender_full_name": "matklad",
        "timestamp": 1568383869
    },
    {
        "content": "<p>previously when we had talked about, we had discussed the idea of trying to identify key libraries for parts of rustc that we can extract and share</p>",
        "id": 175627314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383876
    },
    {
        "content": "<p>and essentially this meeting is to discuss that process in a bit more detail, and talk through some details of possible candidates --</p>",
        "id": 175627350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383898
    },
    {
        "content": "<p>though I think there's also room for people to object if they think the overall direction isn't great</p>",
        "id": 175627365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383908
    },
    {
        "content": "<p>what does \"extract\" mean then; refactor a bit and publish to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> in a \"totally unstable\" manner?</p>",
        "id": 175627429,
        "sender_full_name": "centril",
        "timestamp": 1568383930
    },
    {
        "content": "<p>that is a good question, and one of the things we should decide :)</p>",
        "id": 175627445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383942
    },
    {
        "content": "<p>I think that we are clearly a long way from \"stable APIs\" that we expect to support long term</p>",
        "id": 175627456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568383955
    },
    {
        "content": "<p>I frankly have failed to prove anything because the past year (or two?) have been a mess, so any past objections I may have had are like \"eh whatever\" now</p>",
        "id": 175627458,
        "sender_full_name": "eddyb",
        "timestamp": 1568383956
    },
    {
        "content": "<p>I think another key element is \"does extract mean no 'path' dependencies\"</p>",
        "id": 175627465,
        "sender_full_name": "simulacrum",
        "timestamp": 1568383963
    },
    {
        "content": "<p>what I do want to say is that we could use an \"abstract MIR\"</p>",
        "id": 175627483,
        "sender_full_name": "eddyb",
        "timestamp": 1568383983
    },
    {
        "content": "<p>which includes the sort of weird rustc-ap- deps</p>",
        "id": 175627485,
        "sender_full_name": "simulacrum",
        "timestamp": 1568383986
    },
    {
        "content": "<p>that uses the chalk infrastructure to talk about types and whatnot and is otherwise relatively typesystem-agnostic</p>",
        "id": 175627537,
        "sender_full_name": "eddyb",
        "timestamp": 1568384020
    },
    {
        "content": "<p>I wouldn't want \"extract\" to mean \"only stable features\" since that removes the possibility to dogfood features in the compiler</p>",
        "id": 175627539,
        "sender_full_name": "centril",
        "timestamp": 1568384021
    },
    {
        "content": "<p>it would be nice to come up with a list (tree) of libraries that we think the compiler should be comprised of</p>",
        "id": 175627547,
        "sender_full_name": "mw",
        "timestamp": 1568384026
    },
    {
        "content": "<p>would extrating a stable parser to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> would mean commiting to a stable AST-like interface?</p>",
        "id": 175627548,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1568384026
    },
    {
        "content": "<p>I think that if rust-analyzer is to use the libraries, then a requirement would be that they are ultiamtely dependent on std and work on stable</p>",
        "id": 175627551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'd define \"extract\" = builds on stabeli-ish compiler without bootstrap process.</p>",
        "id": 175627558,
        "sender_full_name": "matklad",
        "timestamp": 1568384032
    },
    {
        "content": "<p>why is \"works on stable\" a requirement here?</p>",
        "id": 175627632,
        "sender_full_name": "centril",
        "timestamp": 1568384060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I wish the -ap- crates were never a thing and we just did in-tree builds :(</p>",
        "id": 175627635,
        "sender_full_name": "eddyb",
        "timestamp": 1568384062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> working on stable make the project MASSIVELY easier to contribute</p>",
        "id": 175627657,
        "sender_full_name": "matklad",
        "timestamp": 1568384083
    },
    {
        "content": "<p>Yeah. I think that works on stable is ok, but also something we could defer</p>",
        "id": 175627677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384102
    },
    {
        "content": "<p>it doesn't seem like the central point</p>",
        "id": 175627687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384105
    },
    {
        "content": "<p>the main thing is: trying to build up libraries that can be used as \"normal\" code</p>",
        "id": 175627713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384129
    },
    {
        "content": "<p>True, it's only a means to get \"easy build process\", it's not an end</p>",
        "id": 175627722,
        "sender_full_name": "matklad",
        "timestamp": 1568384136
    },
    {
        "content": "<p>that is, through the normal \"cargo dev process\"</p>",
        "id": 175627724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384140
    },
    {
        "content": "<p>(I think <code>cargo check</code> is valuable, but that's different than \"uses stable compiler\")</p>",
        "id": 175627743,
        "sender_full_name": "centril",
        "timestamp": 1568384159
    },
    {
        "content": "<p>indeed</p>",
        "id": 175627795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384171
    },
    {
        "content": "<p>one of the things we discuss in the document, which also seems relevant, is the question of \"monorepo vs poly-repo\"</p>",
        "id": 175627833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384202
    },
    {
        "content": "<p>(and e.g. once we have <code>if let</code> chains I'd like to simplify code in the compiler with it and dogfood it through the compiler)</p>",
        "id": 175627843,
        "sender_full_name": "centril",
        "timestamp": 1568384214
    },
    {
        "content": "<p>I thkn we've examples of both today --</p>",
        "id": 175627845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384217
    },
    {
        "content": "<p>Note that there's a failure in feature-design process, if it <em>requires</em> doggdoffing the compiler: compiler's are only a tiny slice of rust' domain</p>",
        "id": 175627848,
        "sender_full_name": "matklad",
        "timestamp": 1568384221
    },
    {
        "content": "<blockquote>\n<p>one of the things we discuss in the document, which also seems relevant, is the question of \"monorepo vs poly-repo\"</p>\n</blockquote>\n<p>also known as: Will we reap the benefits if we continue to gate on bors/homu</p>",
        "id": 175627863,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568384230
    },
    {
        "content": "<p>and x.py</p>",
        "id": 175627902,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> could you elaborate on this?</p>",
        "id": 175627908,
        "sender_full_name": "matklad",
        "timestamp": 1568384279
    },
    {
        "content": "<p>well, in some sense, no, because we can gate on bors sort of \"individually\" -- I would put it more so as \"gate on src/test/{ui,etc}\"</p>",
        "id": 175627959,
        "sender_full_name": "simulacrum",
        "timestamp": 1568384293
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> could you elaborate on this?</p>\n</blockquote>\n<p>I take monorepo to mean: we continue gating landing any PR through the usual r+ on bors</p>",
        "id": 175627980,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568384312
    },
    {
        "content": "<p>sorry, internet troubles, ignore my messages</p>",
        "id": 175627988,
        "sender_full_name": "oli",
        "timestamp": 1568384315
    },
    {
        "content": "<p>e.g. I would say that rustc_lexer's unit tests (i.e., <code>cargo test</code>) is actually much weaker than full src/test/ui</p>",
        "id": 175627998,
        "sender_full_name": "simulacrum",
        "timestamp": 1568384323
    },
    {
        "content": "<blockquote>\n<p>Note that there's a failure in feature-design process, if it requires doggdoffing the compiler: compiler's are only a tiny slice of rust' domain</p>\n</blockquote>\n<p>I disagree; rustc is a huge project and a good place to test features that are sometimes too minor or mostly convenience to expect anyone to use outside</p>",
        "id": 175628012,
        "sender_full_name": "centril",
        "timestamp": 1568384336
    },
    {
        "content": "<p>having a poly-repo would mean that the individual repos would really have to be rather separate standalone projects that are loosely integrated with the rest of the compiler</p>",
        "id": 175628017,
        "sender_full_name": "mw",
        "timestamp": 1568384340
    },
    {
        "content": "<blockquote>\n<p>I take monorepo to mean: we continue gating landing any PR through the usual r+ on bors</p>\n</blockquote>\n<p>then <del>you</del> each PR needs to wait its turn</p>",
        "id": 175628031,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568384346
    },
    {
        "content": "<blockquote>\n<p>then you each PR needs to wait its turn</p>\n</blockquote>\n<p>or rollups <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 175628066,
        "sender_full_name": "centril",
        "timestamp": 1568384376
    },
    {
        "content": "<blockquote>\n<p>e.g. I would say that rustc_lexer's unit tests (i.e., <code>cargo test</code>) is actually much weaker than full src/test/ui</p>\n</blockquote>\n<p>yes, I think this is a core point. One of the questions that arises around having many libaries is figuring out a good testing strategy</p>",
        "id": 175628069,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384378
    },
    {
        "content": "<p>in general, one thing that <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> and I agreed on is that overly narrow unit tests can be \"future hostile\"</p>",
        "id": 175628079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384390
    },
    {
        "content": "<p>rollups are a symptom of something wrong</p>",
        "id": 175628089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568384399
    },
    {
        "content": "<p>not an answer.</p>",
        "id": 175628147,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568384405
    },
    {
        "content": "<p>i.e., if you change how the library works in some fundamental way, it becomes really hard to port those tests forward, whereas e.g. src/test/ui tests are relatively easy</p>",
        "id": 175628164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384415
    },
    {
        "content": "<p>isn't this the standard separation between unit tests and integration tests? you kinda want both?</p>",
        "id": 175628172,
        "sender_full_name": "qmx",
        "timestamp": 1568384421
    },
    {
        "content": "<p>yeah it is, nothing magic</p>",
        "id": 175628183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384431
    },
    {
        "content": "<p>this reminds me, one crate that's not necessarily relevant to rust-analyzer but could be useful to other projects is <code>rustc_apfloat</code> - see <a href=\"https://github.com/rust-lang/rust/issues/55993\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55993\">https://github.com/rust-lang/rust/issues/55993</a></p>",
        "id": 175628188,
        "sender_full_name": "eddyb",
        "timestamp": 1568384436
    },
    {
        "content": "<p>but I think it also informs the boundaries that make a good library</p>",
        "id": 175628199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384442
    },
    {
        "content": "<p>so it could be a test subject</p>",
        "id": 175628206,
        "sender_full_name": "eddyb",
        "timestamp": 1568384443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> eh well... I think rolling up small docs PRs are not a symptom of a problem... and the problem where it exists is mostly \"we need better machines\"</p>",
        "id": 175628218,
        "sender_full_name": "centril",
        "timestamp": 1568384448
    },
    {
        "content": "<p>wouldn't the gating be on \"bumping rustc version dependency on crate\", so that only happens every now and then, and the crate can be developed independently</p>",
        "id": 175628219,
        "sender_full_name": "oli",
        "timestamp": 1568384448
    },
    {
        "content": "<p>I'm strongly in favor of a monorepo; I don't want to audit what a <code>Cargo.lock</code> file meant in terms of changes to the language from a lang team POV.</p>",
        "id": 175628271,
        "sender_full_name": "centril",
        "timestamp": 1568384488
    },
    {
        "content": "<blockquote>\n<p>wouldn't the gating be on \"bumping rustc version dependency on crate\", so that only happens every now and then, and the crate can be developed independently</p>\n</blockquote>\n<p>some challenges I see here:</p>\n<ul>\n<li>reviewing those bumps is hard, so we have to have confidence in the review process for the separate projects (which I think we can do)</li>\n<li>integration tests may live on rustc too</li>\n</ul>",
        "id": 175628307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384512
    },
    {
        "content": "<p>I meant that niko, having the integration tests living where the crate is used</p>",
        "id": 175628414,
        "sender_full_name": "qmx",
        "timestamp": 1568384554
    },
    {
        "content": "<blockquote>\n<p>so that only happens every now and then</p>\n</blockquote>\n<p>maybe this could be done automatically: build a version of rust with all updated dependencies every day (or so), so we identify problems that have snuck into the libraries early</p>",
        "id": 175628420,
        "sender_full_name": "varkor",
        "timestamp": 1568384558
    },
    {
        "content": "<p>sure</p>",
        "id": 175628445,
        "sender_full_name": "oli",
        "timestamp": 1568384577
    },
    {
        "content": "<p>So, i'm not hearing a lot of people arguing about <em>whether</em> we should try to extract libraries with stronger boundaries, mostly about some details of how we should do it?</p>",
        "id": 175628449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384582
    },
    {
        "content": "<p>I think petrochenkov may have expressed concern in the past</p>",
        "id": 175628470,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568384598
    },
    {
        "content": "<p>I'd like to see something like LLVM's model, where everything is a transformation from data to data</p>",
        "id": 175628482,
        "sender_full_name": "mw",
        "timestamp": 1568384609
    },
    {
        "content": "<p>but I'm not sure if that was more about mono-repo vs poly-repo Q</p>",
        "id": 175628483,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568384609
    },
    {
        "content": "<p>if we did automatic updating as well, then reviewing bumps wouldn't be so problematic</p>",
        "id": 175628490,
        "sender_full_name": "varkor",
        "timestamp": 1568384616
    },
    {
        "content": "<p>that would enable having rather stable unit tests (because the data definition is stable)</p>",
        "id": 175628498,
        "sender_full_name": "mw",
        "timestamp": 1568384630
    },
    {
        "content": "<p>(oh and I think <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> was also concerned about inefficiency from (increased) breaking into multiple cratees)</p>",
        "id": 175628515,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568384638
    },
    {
        "content": "<p>One concern that I've had is that due to coherence it's a bit harder if we split up into crates</p>",
        "id": 175628526,
        "sender_full_name": "simulacrum",
        "timestamp": 1568384642
    },
    {
        "content": "<p>I'm wondering if the best way to resolve these details around mono-vs-poliy-repo and workflow is to do a bit more experimentation first and revisit with more experience. At present we have some projects trying to inhabit both worlds.</p>",
        "id": 175628580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384654
    },
    {
        "content": "<p>you could then have a human readable encoding of the data for writing tests</p>",
        "id": 175628594,
        "sender_full_name": "mw",
        "timestamp": 1568384664
    },
    {
        "content": "<p>e.g., I'm pretty reluctant to move chalk or polonius into the monorepo at present</p>",
        "id": 175628605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384667
    },
    {
        "content": "<blockquote>\n<p>that would enable having rather stable unit tests (because the data definition is stable)</p>\n</blockquote>\n<p>yes, this I think is an interesting question too. Chalk kind of steers a middle course here</p>",
        "id": 175628636,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> /me thinks of the Clojure \"it's just data\" joke ;)</p>",
        "id": 175628648,
        "sender_full_name": "centril",
        "timestamp": 1568384699
    },
    {
        "content": "<p>(the input is defined as queries that we demand from some environment, but we have a \"driver\" that reads data input in a canonical text format for testing)</p>",
        "id": 175628667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384708
    },
    {
        "content": "<p>yes</p>",
        "id": 175628676,
        "sender_full_name": "mw",
        "timestamp": 1568384718
    },
    {
        "content": "<p>it would require quite a bit of initial setup, I guess</p>",
        "id": 175628693,
        "sender_full_name": "mw",
        "timestamp": 1568384730
    },
    {
        "content": "<p>(and one of the things I'd like to do is to make it easy to extract \"traces\" from rust-analyzer, <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> did some first steps towards this and its very useful)</p>",
        "id": 175628698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384731
    },
    {
        "content": "<p>i.e., so we can make unit tests from problematic scenarios</p>",
        "id": 175628705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384736
    },
    {
        "content": "<p>in rust-analyzer, all tests are data-in / data-out. The problem is that data-in is rust surface syntax, so it depends on the lower parts of the compiler's stack</p>",
        "id": 175628730,
        "sender_full_name": "matklad",
        "timestamp": 1568384748
    },
    {
        "content": "<p>(also, that text format is based on rust syntax, so it should be \"long lived\")</p>",
        "id": 175628739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384750
    },
    {
        "content": "<p>in any case, if we have general agreement around library-ification, maybe it makes sense to turn to some specifics of possible libraries? and maybe someone (prob me) can go back over the transcript later and try to pick out and summarize the pros/cons from various setups for future discussion</p>",
        "id": 175628834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384799
    },
    {
        "content": "<p>FWIW the grammars we want to work with in wg-grammar are meant to be extensible so chalk could eventually be built on that</p>",
        "id": 175628839,
        "sender_full_name": "eddyb",
        "timestamp": 1568384803
    },
    {
        "content": "<p>in the <a href=\"https://hackmd.io/_ixQrAr5TKafV9m8eSU_VA?view\" target=\"_blank\" title=\"https://hackmd.io/_ixQrAr5TKafV9m8eSU_VA?view\">hackmd document</a> we listed out</p>\n<ul>\n<li>lexer and parser</li>\n<li>name resolution</li>\n<li>traits + \"type constraint solving\"</li>\n</ul>",
        "id": 175628901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384853
    },
    {
        "content": "<p>(or you can even replace some syntax, like <code>WhereClause</code>, with Chalk's equivalent)</p>",
        "id": 175628905,
        "sender_full_name": "eddyb",
        "timestamp": 1568384858
    },
    {
        "content": "<p>probably in order of \"well to least undersztood\"? maybe not, kind of a toss-up between name res and traits</p>",
        "id": 175628921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384868
    },
    {
        "content": "<p>but each has interesting characteristics</p>",
        "id": 175628927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384872
    },
    {
        "content": "<p>name resolution is worse than traits IME, but maybe less code in total</p>",
        "id": 175628997,
        "sender_full_name": "eddyb",
        "timestamp": 1568384891
    },
    {
        "content": "<p>(I think I still don't really understand what library-ification means)</p>",
        "id": 175628999,
        "sender_full_name": "centril",
        "timestamp": 1568384895
    },
    {
        "content": "<p>it's less pure than trait solving, that's the sad part</p>",
        "id": 175629012,
        "sender_full_name": "eddyb",
        "timestamp": 1568384906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> yeah, I don't think we clarified that :)</p>",
        "id": 175629026,
        "sender_full_name": "mw",
        "timestamp": 1568384921
    },
    {
        "content": "<p>does the diagnostics extraction fit this theme too?</p>",
        "id": 175629029,
        "sender_full_name": "varkor",
        "timestamp": 1568384921
    },
    {
        "content": "<blockquote>\n<p>(I think I still don't really understand what library-ification means)</p>\n</blockquote>\n<p>is it worth discussing more about this then</p>",
        "id": 175629071,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384947
    },
    {
        "content": "<p>I think best-understood is probably parser, lowering, and typeck?</p>",
        "id": 175629086,
        "sender_full_name": "centril",
        "timestamp": 1568384953
    },
    {
        "content": "<p>I think the most important question is probably \"does it just mean making a new crate\" (in my view, no)</p>",
        "id": 175629107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568384974
    },
    {
        "content": "<p>\"library-ification\" : add entry point that isn't the <code>rustc</code> binary, for testing?</p>",
        "id": 175629139,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568384993
    },
    {
        "content": "<p>it's really about producing something that is relatively disentangled from the specifics of rustc and reusable in more contexts, right?</p>",
        "id": 175629149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385002
    },
    {
        "content": "<blockquote>\n<p>does the diagnostics extraction fit this theme too?</p>\n</blockquote>\n<p>that's a good question :) I think yes but it is distinct from the other examples we've given</p>",
        "id": 175629203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I mean that's <code>rustc_interface</code> isn't it?</p>",
        "id": 175629211,
        "sender_full_name": "eddyb",
        "timestamp": 1568385018
    },
    {
        "content": "<p>but it fits my \"disentangled\" above?</p>",
        "id": 175629224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385028
    },
    {
        "content": "<p>you could build a tiny LSP (like, a subset of RLS) on top of <code>rustc_interface</code> and a bit of glue code, for example</p>",
        "id": 175629264,
        "sender_full_name": "eddyb",
        "timestamp": 1568385051
    },
    {
        "content": "<p>I think in some sense it means decoupling things \"until\" rustc_interface or some similar crate ties things together</p>",
        "id": 175629277,
        "sender_full_name": "simulacrum",
        "timestamp": 1568385054
    },
    {
        "content": "<p>right</p>",
        "id": 175629289,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385062
    },
    {
        "content": "<p>Yeah, I think we want to detangle not from the binary, but from the types and state. Like, a library-ified parser shouldn't have a ParseSess</p>",
        "id": 175629314,
        "sender_full_name": "matklad",
        "timestamp": 1568385075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  generally, it sorta sounds like \"simpler boundaries with less implicit state between libraries\"</p>",
        "id": 175629324,
        "sender_full_name": "centril",
        "timestamp": 1568385082
    },
    {
        "content": "<p>so e.g. one could imagine that library-ification of the parser means that librustc does not depend on a parser</p>",
        "id": 175629329,
        "sender_full_name": "simulacrum",
        "timestamp": 1568385088
    },
    {
        "content": "<p>and probably there is a bit of a \"ladder\" -- so e.g. we might (eventually) have some crate that defines type representations, and presumably other steps will use that</p>",
        "id": 175629334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385093
    },
    {
        "content": "<blockquote>\n<p>so e.g. one could imagine that library-ification of the parser means that librustc does not depend on a parser</p>\n</blockquote>\n<p>I think this is not as imporant -- librustc might link directly to the parser crate, but it's more about \"other people can drive the parser in a relatively straight-forward way\"</p>",
        "id": 175629418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385131
    },
    {
        "content": "<p>e.g., the lexer was extracted into a library</p>",
        "id": 175629430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that feels very clean -- we have crates defining data representation, and crates defining transforms between those representations</p>",
        "id": 175629434,
        "sender_full_name": "centril",
        "timestamp": 1568385141
    },
    {
        "content": "<p>it doesn't mean that rustc doesn't know which lexer it's using</p>",
        "id": 175629438,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385145
    },
    {
        "content": "<p>(this is kind of what I was getting at with this \"ladder\" discussion above)</p>",
        "id": 175629469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385166
    },
    {
        "content": "<p>it's the sort of process that would make it easier to write an independent compiler, reusing some of the same components</p>",
        "id": 175629482,
        "sender_full_name": "varkor",
        "timestamp": 1568385175
    },
    {
        "content": "<p>(that said, we would want to reduce coupling where we can)</p>",
        "id": 175629492,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385181
    },
    {
        "content": "<p>I'd like to remove steps from the ladder :)</p>",
        "id": 175629500,
        "sender_full_name": "mw",
        "timestamp": 1568385185
    },
    {
        "content": "<p>(<a href=\"https://www.youtube.com/watch?v=jlPaby7suOc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=jlPaby7suOc\">https://www.youtube.com/watch?v=jlPaby7suOc</a> ^,-)</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"jlPaby7suOc\" href=\"https://www.youtube.com/watch?v=jlPaby7suOc\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=jlPaby7suOc\"><img src=\"https://i.ytimg.com/vi/jlPaby7suOc/default.jpg\"></a></div>",
        "id": 175629547,
        "sender_full_name": "centril",
        "timestamp": 1568385209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> although it would be lovely to install a compilation firewall (a-la C++'s pimpl) between the lexer and the rest of the compiler, just to avoid rebuilds. But I think rust doesn't have good idioms for this yet.</p>",
        "id": 175629550,
        "sender_full_name": "matklad",
        "timestamp": 1568385211
    },
    {
        "content": "<p>say more, <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>? one question I've been wondering about is what makes sense to think of a \"unit\". I make a case in the hackmd doc, for example, that \"chalk\" should encompass more things -- e.g. definition of types, unification, and constraint solving</p>",
        "id": 175629578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385220
    },
    {
        "content": "<blockquote>\n<p>although it would be lovely to install a compilation firewall (a-la C++'s pimpl) between the lexer and the rest of the compiler, just to avoid rebuilds. But I think rust doesn't have good idioms for this yet.</p>\n</blockquote>\n<p>yes, I just think that's mildly orthogonal.</p>",
        "id": 175629650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385243
    },
    {
        "content": "<blockquote>\n<p>But I think rust doesn't have good idioms for this yet.</p>\n</blockquote>\n<p>How do you mean?</p>",
        "id": 175629671,
        "sender_full_name": "centril",
        "timestamp": 1568385257
    },
    {
        "content": "<p>(re. coherence and traits, one can just... not use traits for this... ^^)</p>",
        "id": 175629686,
        "sender_full_name": "centril",
        "timestamp": 1568385267
    },
    {
        "content": "<p>Servo uses crates that only have data types and traits in them</p>",
        "id": 175629710,
        "sender_full_name": "eddyb",
        "timestamp": 1568385286
    },
    {
        "content": "<p>a lot</p>",
        "id": 175629716,
        "sender_full_name": "eddyb",
        "timestamp": 1568385287
    },
    {
        "content": "<p>specifically to avoid recompilation when changing the implementation</p>",
        "id": 175629728,
        "sender_full_name": "eddyb",
        "timestamp": 1568385297
    },
    {
        "content": "<p>it seems like finding the \"right\" place to draw boundaries is important on this point</p>",
        "id": 175629770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385329
    },
    {
        "content": "<p>yeah, I think it would be good to have a shallow graph of crates</p>",
        "id": 175629771,
        "sender_full_name": "mw",
        "timestamp": 1568385330
    },
    {
        "content": "<p>but also that doing better with incremental may make it a moot point</p>",
        "id": 175629777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385336
    },
    {
        "content": "<p>(if compilaton time is the sole concern)</p>",
        "id": 175629804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385357
    },
    {
        "content": "<p>having a split between type definition crates and logic crates seems good</p>",
        "id": 175629853,
        "sender_full_name": "mw",
        "timestamp": 1568385365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  those traits being internal to the crate &amp; then free functions between?</p>",
        "id": 175629861,
        "sender_full_name": "centril",
        "timestamp": 1568385367
    },
    {
        "content": "<p>no it's just a set of data and behaviors</p>",
        "id": 175629881,
        "sender_full_name": "eddyb",
        "timestamp": 1568385382
    },
    {
        "content": "<p>and having infrastructure crates, like salsa</p>",
        "id": 175629882,
        "sender_full_name": "mw",
        "timestamp": 1568385383
    },
    {
        "content": "<p>that another crate implements</p>",
        "id": 175629890,
        "sender_full_name": "eddyb",
        "timestamp": 1568385390
    },
    {
        "content": "<p>so <code>libast</code>, <code>libparser</code>, <code>libfeature_gate</code>, etc. then?</p>",
        "id": 175629903,
        "sender_full_name": "centril",
        "timestamp": 1568385404
    },
    {
        "content": "<blockquote>\n<p>having a split between type definition crates and logic crates seems good</p>\n</blockquote>\n<p>(I agree with this, incidentally, I do like the idea of factoring out \"the IR\" from the rest)</p>",
        "id": 175629917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385409
    },
    {
        "content": "<p>and diagnostics would also be infrastructure</p>",
        "id": 175629918,
        "sender_full_name": "mw",
        "timestamp": 1568385410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> not that fine-grained</p>",
        "id": 175629940,
        "sender_full_name": "eddyb",
        "timestamp": 1568385424
    },
    {
        "content": "<p>more like libsyntax_traits and libsyntax</p>",
        "id": 175629948,
        "sender_full_name": "eddyb",
        "timestamp": 1568385430
    },
    {
        "content": "<p>do we now feel like we have a good idea what \"library-ification\" is? maybe we should try to summarize. I think we captured the spirit of our goal, but we also came up with various guidelines</p>",
        "id": 175629950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385431
    },
    {
        "content": "<p>the spirit being: a set of reusable components that could be combined to build new tools, new compilers, etc.</p>",
        "id": 175629979,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385452
    },
    {
        "content": "<p>as distinct from just \"lots of crates\"</p>",
        "id": 175630001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  hmm... maybe libfeature_gate is excessive, (maybe not...) but libast &amp; libparser seems like what <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>  is saying</p>",
        "id": 175630090,
        "sender_full_name": "centril",
        "timestamp": 1568385499
    },
    {
        "content": "<p>some guidelines might be:</p>\n<ul>\n<li>separating out the IR definition from the logic</li>\n<li>trying to separate infrastructure (e.g., the query system \"plumbing\", or diagnostic printing)</li>\n<li>trying to draw boundaries that let us express tests as \"input files\", ideally ones that are independent from the details of the implementation, which are expected to change</li>\n</ul>",
        "id": 175630115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385510
    },
    {
        "content": "<p>(did I miss things?)</p>",
        "id": 175630131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385523
    },
    {
        "content": "<p>so we have parser + lowering communicating via libast and they don't know each other otherwise</p>",
        "id": 175630147,
        "sender_full_name": "centril",
        "timestamp": 1568385534
    },
    {
        "content": "<p>yeah and you can substitute libparser if you wanted to</p>",
        "id": 175630185,
        "sender_full_name": "eddyb",
        "timestamp": 1568385561
    },
    {
        "content": "<p>certainly a lot of this structure is \"inherent\" in the compiler already, albeit in a messy form</p>",
        "id": 175630219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385581
    },
    {
        "content": "<p>yeah</p>",
        "id": 175630243,
        "sender_full_name": "mw",
        "timestamp": 1568385596
    },
    {
        "content": "<p>so we're trying to tease that out</p>",
        "id": 175630249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385598
    },
    {
        "content": "<p>Though replacing libparser would be sort of \"hard\" i.e., maybe you'd need to patch it out via Cargo.toml, we don't want to get into dylibs here or w/e</p>",
        "id": 175630251,
        "sender_full_name": "simulacrum",
        "timestamp": 1568385599
    },
    {
        "content": "<p>(right?)</p>",
        "id": 175630293,
        "sender_full_name": "simulacrum",
        "timestamp": 1568385605
    },
    {
        "content": "<p>yeah I meant source-wise</p>",
        "id": 175630315,
        "sender_full_name": "eddyb",
        "timestamp": 1568385613
    },
    {
        "content": "<p>I'd lke to keep \"hot swapping\" components as a \"tabled\" topic :)</p>",
        "id": 175630330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385618
    },
    {
        "content": "<p>you could build two impls and then switch them in the Cargo.toml</p>",
        "id": 175630335,
        "sender_full_name": "eddyb",
        "timestamp": 1568385622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think one missing bit is \"making sure that libraries work for IDE\"</p>",
        "id": 175630336,
        "sender_full_name": "matklad",
        "timestamp": 1568385622
    },
    {
        "content": "<p>I'd like it if things like specific string interning strategies would not need to be known throughout the compiler</p>",
        "id": 175630339,
        "sender_full_name": "mw",
        "timestamp": 1568385624
    },
    {
        "content": "<p>We could extract <code>libast</code> from current <code>libsyntax</code>, but that would be pretty useless for rust-analyzer</p>",
        "id": 175630368,
        "sender_full_name": "matklad",
        "timestamp": 1568385643
    },
    {
        "content": "<blockquote>\n<p>I think one missing bit is \"making sure that libraries work for IDE\"</p>\n</blockquote>\n<p>that's a good point -- the design of the interface needs to accommodate \"on demand\" processing</p>",
        "id": 175630372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385644
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> if we had a trait for interning and a trait for accessing the data, that'd be better right?</p>",
        "id": 175630402,
        "sender_full_name": "eddyb",
        "timestamp": 1568385668
    },
    {
        "content": "<p>do we see that as a first order bit though? It seems like it might be something we'd want to wait on, right?</p>",
        "id": 175630410,
        "sender_full_name": "simulacrum",
        "timestamp": 1568385674
    },
    {
        "content": "<p>(I left some notes in the doc of places where chalk's queries, for example, were suboptimal and we need to rework them a bit)</p>",
        "id": 175630413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yeah, something like that.</p>",
        "id": 175630426,
        "sender_full_name": "mw",
        "timestamp": 1568385689
    },
    {
        "content": "<p>also such libast should be possible to encode possibly partially missing/invalid AST?</p>",
        "id": 175630428,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1568385690
    },
    {
        "content": "<blockquote>\n<p>do we see that as a first order bit though? It seems like it might be something we'd want to wait on, right?</p>\n</blockquote>\n<p>mm I think it's pretty imporant</p>",
        "id": 175630430,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385691
    },
    {
        "content": "<p>I actually use <code>Index&lt;IStr, Output = str&gt;</code> in <code>grammer</code></p>",
        "id": 175630437,
        "sender_full_name": "eddyb",
        "timestamp": 1568385693
    },
    {
        "content": "<p>as is often the case for the IDEs</p>",
        "id": 175630440,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1568385694
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> can have sentinels for that</p>",
        "id": 175630460,
        "sender_full_name": "centril",
        "timestamp": 1568385709
    },
    {
        "content": "<p>yes, that's important</p>",
        "id": 175630464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385714
    },
    {
        "content": "<p>feels like typed holes</p>",
        "id": 175630465,
        "sender_full_name": "centril",
        "timestamp": 1568385715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> that's an interesting question</p>",
        "id": 175630468,
        "sender_full_name": "mw",
        "timestamp": 1568385716
    },
    {
        "content": "<p>this is another thing that came up around chalk + rust-analyzer, wnating e.g. an error type</p>",
        "id": 175630524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385728
    },
    {
        "content": "<p>I think it's important, yes, but it's not clear to me that we don't get a lot of benefit from doing this library-ification internally without bringing IDEs into it :)</p>",
        "id": 175630530,
        "sender_full_name": "simulacrum",
        "timestamp": 1568385731
    },
    {
        "content": "<p>i.e. there are probably things were the reqs for a batch compiler and IDEs diverge</p>",
        "id": 175630545,
        "sender_full_name": "mw",
        "timestamp": 1568385745
    },
    {
        "content": "<p>well, I think we get benefit, but it seems like if we're going through the trouble to design an interface</p>",
        "id": 175630548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385747
    },
    {
        "content": "<p>I also want to avoid putting two things together and then never actually doing it</p>",
        "id": 175630552,
        "sender_full_name": "simulacrum",
        "timestamp": 1568385748
    },
    {
        "content": "<p>we shoulld take the time to think about it</p>",
        "id": 175630558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385750
    },
    {
        "content": "<p>we don't have to do all at once</p>",
        "id": 175630598,
        "sender_full_name": "centril",
        "timestamp": 1568385785
    },
    {
        "content": "<p>can just do libast, parser, lowering as one step for example</p>",
        "id": 175630609,
        "sender_full_name": "centril",
        "timestamp": 1568385796
    },
    {
        "content": "<p>But I think a viable outcome of said thinking is \"we can start before finishing our thinking\"</p>",
        "id": 175630616,
        "sender_full_name": "simulacrum",
        "timestamp": 1568385802
    },
    {
        "content": "<p>sure, but improving the IDE experience is an important task for both short- and long-term</p>",
        "id": 175630638,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568385820
    },
    {
        "content": "<p>we don't, but I think we should prioritize things that can help with the IDE experience -- and yes, I think we would do things in stages, and maybe we just start by trying to sever links</p>",
        "id": 175630641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385822
    },
    {
        "content": "<p>but e.g. we're not aiming to develop some \"pristine\" interface that doesn't have to worry about error reporting</p>",
        "id": 175630702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385846
    },
    {
        "content": "<p>or messy inputs</p>",
        "id": 175630705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385847
    },
    {
        "content": "<p>and those things are often important to think about early on</p>",
        "id": 175630739,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385869
    },
    {
        "content": "<p>( chalk e.g. <em>hasn't</em> thought about them, but I think it should; to be fair, the existing trait solver in rust only barely does :P )</p>",
        "id": 175630767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sure, but that messiness already exists in e.g. libparser &amp; friends so it will be noticed when we refactor?</p>",
        "id": 175630786,
        "sender_full_name": "centril",
        "timestamp": 1568385903
    },
    {
        "content": "<p>anyway, is there a \"disagreement\" here? if so, I guess it might be about how to prioritize effort</p>",
        "id": 175630795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385909
    },
    {
        "content": "<p>but I think the answer is probably \"not\"</p>",
        "id": 175630808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385923
    },
    {
        "content": "<p>Yes, I think this is purely about prioritization/ordering</p>",
        "id": 175630817,
        "sender_full_name": "simulacrum",
        "timestamp": 1568385939
    },
    {
        "content": "<p>so we have 15 minutes left</p>",
        "id": 175630836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568385957
    },
    {
        "content": "<p>I identified two potential disagreements: 1) stable/nightly features &amp; dogfooding, 2) mono/poly repo.<br>\nOtherwise it seems we have consensus for <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>'s philosophy?</p>",
        "id": 175630892,
        "sender_full_name": "centril",
        "timestamp": 1568385971
    },
    {
        "content": "<p>anything that keeps rustc and rust-analyzer pulling in the same direction is good for now, I'd say</p>",
        "id": 175630895,
        "sender_full_name": "mw",
        "timestamp": 1568385972
    },
    {
        "content": "<p>I think a poly repo should only be done when everything is in really good shape for doing so</p>",
        "id": 175630946,
        "sender_full_name": "mw",
        "timestamp": 1568386014
    },
    {
        "content": "<p>it's the more difficult option</p>",
        "id": 175630981,
        "sender_full_name": "mw",
        "timestamp": 1568386028
    },
    {
        "content": "<p>which needs things to be in a clean, decoupled state</p>",
        "id": 175630995,
        "sender_full_name": "mw",
        "timestamp": 1568386042
    },
    {
        "content": "<p>things I think we could dig into </p>\n<ul>\n<li>poly vs mono repo -- ok, some of that already :)</li>\n<li>how much <em>do</em> we want to prioritize this work, and in particular integration around rust-analyzer? I know <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> would like to have more involvement from compiler team writ large</li>\n<li>specifics of particular libraries (likely not enough time)</li>\n</ul>",
        "id": 175631016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386057
    },
    {
        "content": "<p>it might be a better option in the future though</p>",
        "id": 175631018,
        "sender_full_name": "mw",
        "timestamp": 1568386060
    },
    {
        "content": "<p>I think if we are extracting something from rustc, doing it in repo makes a lot of sense</p>",
        "id": 175631040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386078
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  -- I'd personally not do poly-repos ever so not doing it for a long time is good from that POV <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 175631080,
        "sender_full_name": "centril",
        "timestamp": 1568386083
    },
    {
        "content": "<p>(and potentially moving out at some point)</p>",
        "id": 175631084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386084
    },
    {
        "content": "<blockquote>\n<ul>\n<li>how much <em>do</em> we want to prioritize this work, and in particular integration around rust-analyzer? I know <span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> would like to have more involvement from compiler team writ large</li>\n</ul>\n</blockquote>\n<p>maybe I should rephrase this -- can we do more to help support this effort? are there folks who'd like to express an interest in collaborating on some of these projects?</p>",
        "id": 175631152,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386140
    },
    {
        "content": "<p>(with polyrepos, implementing a new language change, e.g. or-patterns, that touches many parts of the compiler becomes really hard)</p>",
        "id": 175631184,
        "sender_full_name": "centril",
        "timestamp": 1568386167
    },
    {
        "content": "<p>maybe name resolution is an area where we could think about getting more interaction?</p>",
        "id": 175631308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386232
    },
    {
        "content": "<p>(I was supposed  to help with nameres but compiler stuff, as well as life, was major distraction )</p>",
        "id": 175631340,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568386260
    },
    {
        "content": "<p>I'm personally mostly interested in helping out with refactorings (I've been doing some internal ones in parser, lowering, and typeck)</p>",
        "id": 175631349,
        "sender_full_name": "centril",
        "timestamp": 1568386265
    },
    {
        "content": "<p>I intend to be pushing hard in/around traits personally, though I'm trying to figure out how much time that means, particularly as I think we need to keep moving on bugs in/around rustc's trait system</p>",
        "id": 175631350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386266
    },
    {
        "content": "<p>I also think we shouldn't try to do everything at once</p>",
        "id": 175631377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386283
    },
    {
        "content": "<p>Specifically, name-resolution would be the most valuable thing for rust-analyzer, but it's also one of the thorniest bits</p>",
        "id": 175631378,
        "sender_full_name": "matklad",
        "timestamp": 1568386284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  libast,nameres,parser,lowering seem natural as a first pass then?</p>",
        "id": 175631509,
        "sender_full_name": "centril",
        "timestamp": 1568386345
    },
    {
        "content": "<p>when you say you'd like more interaction from t-compiler, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, what are you thinking of more specifically?</p>",
        "id": 175631511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386347
    },
    {
        "content": "<p>I personally am planning to keep the whole rust-analyzer afloat, as well as chipping bits of the rustc's parser here and there</p>",
        "id": 175631526,
        "sender_full_name": "matklad",
        "timestamp": 1568386361
    },
    {
        "content": "<p>e.g. I could imagine a few things</p>\n<ul>\n<li>coding support</li>\n<li>feedback on things like how the ast is actually implemented, and other bits of the design</li>\n<li>tweets</li>\n</ul>",
        "id": 175631537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386366
    },
    {
        "content": "<p>and more no doubt :)</p>",
        "id": 175631558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386382
    },
    {
        "content": "<p>perhaps we can \"let the types tell us what the phases of library-ification are\"</p>",
        "id": 175631595,
        "sender_full_name": "centril",
        "timestamp": 1568386402
    },
    {
        "content": "<p>I'm thinking that trying to create shared libraries is obviously a \"forcing function\" for coming to agreement around interfaces</p>",
        "id": 175631603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386406
    },
    {
        "content": "<p>it seems like we've been sort of side-stepping the ast/hir in the things we've chosen so far</p>",
        "id": 175631662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386438
    },
    {
        "content": "<p>which .. is probably good to start, but also putting off some of the most important work?</p>",
        "id": 175631718,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I belive libast in the current state would be useful for rust-analyzer.  Designing the ast that works for both rustc and rust-analyzer seems like a really major needs-design things. I'd prefer to clean up things <em>around</em> AST first. In particular, I think it's possible to make a parser that doens't know a specific AST type</p>",
        "id": 175631729,
        "sender_full_name": "matklad",
        "timestamp": 1568386455
    },
    {
        "content": "<p>(I guess it depends on how the parser works)</p>",
        "id": 175631733,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386459
    },
    {
        "content": "<p>s/useful/useless :)</p>",
        "id": 175631748,
        "sender_full_name": "matklad",
        "timestamp": 1568386473
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> are you thinking of some sort of \"tagless final interpreter\" scheme?</p>",
        "id": 175631778,
        "sender_full_name": "centril",
        "timestamp": 1568386502
    },
    {
        "content": "<p>maybe we should use last 5 minutes or so to talk about follow-up actions? do we want to try to have follow-up meetings, for example, to talk about specific library-ification details?</p>",
        "id": 175631786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386504
    },
    {
        "content": "<p>(or not meetings, just splinter out :)</p>",
        "id": 175631812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386519
    },
    {
        "content": "<p>I am thinking about untyped event-based parser :)</p>",
        "id": 175631819,
        "sender_full_name": "matklad",
        "timestamp": 1568386524
    },
    {
        "content": "<p>(e.g. I'd like to folow along with how a parser library-ification will work)</p>",
        "id": 175631830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386531
    },
    {
        "content": "<p>+1, I thin the parser plans needs a separate meeting</p>",
        "id": 175631865,
        "sender_full_name": "matklad",
        "timestamp": 1568386555
    },
    {
        "content": "<p>it sounds like a small core of folks could get together</p>",
        "id": 175631918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386566
    },
    {
        "content": "<p>talk over zulip and whatever</p>",
        "id": 175631923,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386570
    },
    {
        "content": "<p>and then talk to the rest of us about it? :)</p>",
        "id": 175631939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386581
    },
    {
        "content": "<p>I'd be game for that since I've done a lot of hacking on the parser lately</p>",
        "id": 175631986,
        "sender_full_name": "centril",
        "timestamp": 1568386614
    },
    {
        "content": "<p>(I was hoping to do something similar around traits/types -- try to make more concrete plans and come back with them, say in a month or so)</p>",
        "id": 175631987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386614
    },
    {
        "content": "<p>SGTM, though, for parser specifically, I feel like \"moving to proc-macros token model\" is prerequisite, and that is a no-small chunk of work</p>",
        "id": 175632011,
        "sender_full_name": "matklad",
        "timestamp": 1568386638
    },
    {
        "content": "<p>say a bit more?</p>",
        "id": 175632025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386657
    },
    {
        "content": "<p>do you mean doing that in rustc's parser?</p>",
        "id": 175632029,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386662
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/63689\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63689\">https://github.com/rust-lang/rust/issues/63689</a></p>",
        "id": 175632034,
        "sender_full_name": "matklad",
        "timestamp": 1568386665
    },
    {
        "content": "<blockquote>\n<p>I am thinking about untyped event-based parser :)</p>\n</blockquote>\n<p>untyped: sure, fine, <code>grammer</code> is like that<br>\nevent-based: huh, I thought that only made sense for LISP and XML, and maybe our token trees :P</p>",
        "id": 175632039,
        "sender_full_name": "eddyb",
        "timestamp": 1568386676
    },
    {
        "content": "<p>do you feel like you can't talk through what the parser interface would look like after that?</p>",
        "id": 175632082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386683
    },
    {
        "content": "<p>or just that it's not worth the effort?</p>",
        "id": 175632092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386693
    },
    {
        "content": "<p>it's mostly internal though isn't it?</p>",
        "id": 175632104,
        "sender_full_name": "eddyb",
        "timestamp": 1568386705
    },
    {
        "content": "<p>it seems like it'd be good to get agreement (if possible) on the overall direction, probably in parallel with refactoring and working on <a href=\"https://github.com/rust-lang/rust/issues/63689\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63689\">#63689</a>?</p>",
        "id": 175632115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386712
    },
    {
        "content": "<p>the interface already takes <code>TokenStream</code></p>",
        "id": 175632117,
        "sender_full_name": "eddyb",
        "timestamp": 1568386714
    },
    {
        "content": "<p>it's just that we have two token representations and convert on the fly between them</p>",
        "id": 175632136,
        "sender_full_name": "eddyb",
        "timestamp": 1568386727
    },
    {
        "content": "<p>ok; what I meant was, it seems like there's some questions around how to get the <em>output</em> from the parser</p>",
        "id": 175632164,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386745
    },
    {
        "content": "<p>anyway either way is ok for me :)</p>",
        "id": 175632193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  tagless final would mean that we use traits to encode \"constructor\" rather than using <code>enum</code>s to have specific ones</p>",
        "id": 175632195,
        "sender_full_name": "centril",
        "timestamp": 1568386769
    },
    {
        "content": "<p>then you'll need \"is X variant\" in some cases as well</p>",
        "id": 175632216,
        "sender_full_name": "centril",
        "timestamp": 1568386781
    },
    {
        "content": "<p>I am a little confused, but my point is: <a href=\"https://github.com/rust-lang/rust/issues/63689\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63689\">#63689</a> seems like a prerequsite for anything else, so I don't think there's a ton of value in discussing specifics until iti s fixed</p>",
        "id": 175632292,
        "sender_full_name": "matklad",
        "timestamp": 1568386804
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  I think there's value for rustc tho in terms of splitting parser/ast/lowering</p>",
        "id": 175632352,
        "sender_full_name": "centril",
        "timestamp": 1568386834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ah, the mad scientist approach to data</p>",
        "id": 175632358,
        "sender_full_name": "eddyb",
        "timestamp": 1568386839
    },
    {
        "content": "<p>if I may summarize the meeting, in broad strokes:</p>\n<ul>\n<li>agreement on library-ification, as outlined earlier</li>\n<li>agreement we're going to create some libaries with 2 consumers, rustc and rust-analyzer<br>\n    - this implies we do care about the rust-analyzer / IDE use case</li>\n<li>lots of back and forth on the best way to manage this that I'll have to go summarize</li>\n<li>next steps:<br>\n    - some folks splinter out to pursue parser and come back with some experience / design notes<br>\n    - some folks splinter out to pursue traits (in/around <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a>) and come back with experience / design notes</li>\n</ul>\n<p>sound right?</p>",
        "id": 175632408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I actually wanted something like that for the <code>gll</code> crate's autogenerated types, so you can easily make an AST/have actions/etc. but now that I'm moving to a more dynamic model I care less</p>",
        "id": 175632426,
        "sender_full_name": "eddyb",
        "timestamp": 1568386890
    },
    {
        "content": "<p>and you all fork this parser-specific discussion into a different topic :P</p>",
        "id": 175632433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386901
    },
    {
        "content": "<p>/me wishes Zulip had a way to tag individual messages</p>",
        "id": 175632452,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> If by \"mad scientist\" you mean Oleg Kiselyov</p>",
        "id": 175632457,
        "sender_full_name": "centril",
        "timestamp": 1568386918
    },
    {
        "content": "<p>(but I could still help someone deliver that ridiculous vision. it uhh involves type HRTB stuff)</p>",
        "id": 175632462,
        "sender_full_name": "eddyb",
        "timestamp": 1568386921
    },
    {
        "content": "<p>And if some folks want to spearhead macros/nameres, that would be awesome :D</p>",
        "id": 175632519,
        "sender_full_name": "matklad",
        "timestamp": 1568386938
    },
    {
        "content": "<p>I want to but I doubt I have the time</p>",
        "id": 175632535,
        "sender_full_name": "eddyb",
        "timestamp": 1568386954
    },
    {
        "content": "<p>(and I want to do it in a way none of you would like except maybe if it did work)</p>",
        "id": 175632548,
        "sender_full_name": "eddyb",
        "timestamp": 1568386969
    },
    {
        "content": "<p>Yeah, I totally want to say \"we'll do that!\" but I'm feeling like the right answer is \"and that's next on our queue\"</p>",
        "id": 175632551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> something that might not be obvious: we tests things through compiler errors most of the time. would be nice to actually dumb the resolutions of paths somehow and make sure those make sense, especially for the complex macro stuff</p>",
        "id": 175632610,
        "sender_full_name": "eddyb",
        "timestamp": 1568387038
    },
    {
        "content": "<p>OK thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> we're out of time, this was awesome as ever, y'all are wonderful. <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 175632628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568387042
    },
    {
        "content": "<p>maybe fix the pretty-printer so it uses modern indentation rules :P</p>",
        "id": 175632665,
        "sender_full_name": "eddyb",
        "timestamp": 1568387059
    },
    {
        "content": "<blockquote>\n<p>something that might not be obvious: we tests things through compiler errors most of the time. would be nice to actually dumb the resolutions of paths somehow and make sure those make sense, especially for the complex macro stuff</p>\n</blockquote>\n<p>I've wondered about this -- I sometimes add funky things to the compiler to make errors for internal state like this that wouldn't otherwise be visible. I really like this approach. But it's only \"sort of\" an integration test -- still, I think it's a good approach, as long as that state that's being dumped is something that would likely be \"forwards portable\" to a new system</p>",
        "id": 175632729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568387100
    },
    {
        "content": "<p>(I made a new topic for frontend ast/parser/macros/nameres/lowering stuff)</p>",
        "id": 175632869,
        "sender_full_name": "centril",
        "timestamp": 1568387170
    },
    {
        "content": "<p>In rust-analyzer, nameres/macro expansion tests dump, for each module, the set of visible names (with namespaeces)</p>",
        "id": 175632894,
        "sender_full_name": "matklad",
        "timestamp": 1568387185
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> expanded a bit on \"rust doesn't have good idioms for pimpl\": <a href=\"https://internals.rust-lang.org/t/request-for-an-rfc-pimpl-for-rust/10947\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/request-for-an-rfc-pimpl-for-rust/10947\">https://internals.rust-lang.org/t/request-for-an-rfc-pimpl-for-rust/10947</a></p>",
        "id": 175719780,
        "sender_full_name": "matklad",
        "timestamp": 1568497835
    }
]