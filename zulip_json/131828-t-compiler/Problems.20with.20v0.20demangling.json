[
    {
        "content": "<p>If I'm reading the <a href=\"https://rust-lang.github.io/rfcs/2603-rust-symbol-name-mangling-v0.html#syntax-of-mangled-names\">v0 spec</a> right, '.' is not valid</p>",
        "id": 260617544,
        "sender_full_name": "njn",
        "timestamp": 1636350444
    },
    {
        "content": "<p>But <code>rustfilt</code> handles it, giving this:</p>\n<div class=\"codehilite\"><pre><span></span><code>core::ptr::drop_in_place::&lt;rustc_borrowck::region_infer::RegionInferenceContext&gt;\n</code></pre></div>",
        "id": 260617603,
        "sender_full_name": "njn",
        "timestamp": 1636350515
    },
    {
        "content": "<p>So I'm wondering if the Rust compiler is also being naughty, by generating some invalid symbols</p>",
        "id": 260617629,
        "sender_full_name": "njn",
        "timestamp": 1636350593
    },
    {
        "content": "<p>If so, my guess is that the symbols are mangled and then the <code>.llvm.&lt;numbers&gt;</code> bit is added afterwards. And this was ok with legacy encoding, but is invalid with v0 encoding.</p>",
        "id": 260618206,
        "sender_full_name": "njn",
        "timestamp": 1636351334
    },
    {
        "content": "<p>Yes, those are added afterwards by LLVM. For example, when importing/promoting static function for ThinLTO to avoid symbol conflicts.</p>",
        "id": 260619495,
        "sender_full_name": "tm",
        "timestamp": 1636353266
    },
    {
        "content": "<p>v0 spec should probably include a vendor dot suffix like the one in Itanium</p>",
        "id": 260619507,
        "sender_full_name": "tm",
        "timestamp": 1636353298
    },
    {
        "content": "<p>That's an interesting find about the <code>.llvm.&lt;numbers&gt;</code> suffix. Annoying too <code>:)</code></p>",
        "id": 260630829,
        "sender_full_name": "mw",
        "timestamp": 1636362844
    },
    {
        "content": "<p>Here is a link to the relevant Itanium mangling section: <a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling-structure\">https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling-structure</a><br>\nI wonder if just adding something like that  to the grammar would be sufficient to consider the problem solved. I'd certainly prefer if LLVM and other backends wouldn't just append random stuff to symbol names.</p>",
        "id": 260631335,
        "sender_full_name": "mw",
        "timestamp": 1636363185
    },
    {
        "content": "<p>I posted about both these bugs on the turn it on for everyone by default PR</p>",
        "id": 260649827,
        "sender_full_name": "simulacrum",
        "timestamp": 1636374425
    },
    {
        "content": "<p>But yeah, I think v0 is still enough of a win with these bugs (I rebuilt valgrind locally but gave up on linux perf which is broken on at least LTS Ubuntu)</p>",
        "id": 260650014,
        "sender_full_name": "simulacrum",
        "timestamp": 1636374529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> What's the PR number for that? I was going to mention the issues in <a href=\"https://github.com/rust-lang/rust/issues/60705\">https://github.com/rust-lang/rust/issues/60705</a> today once I'd worked through the Valgrind one a bit more.</p>",
        "id": 260719907,
        "sender_full_name": "njn",
        "timestamp": 1636406080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> <a href=\"https://github.com/rust-lang/rust/pull/89917#issuecomment-961035863\">https://github.com/rust-lang/rust/pull/89917#issuecomment-961035863</a> (PR and my specific comment)</p>",
        "id": 260719948,
        "sender_full_name": "simulacrum",
        "timestamp": 1636406105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Github says you wrote that comment 4 days ago. Is that correct? Did I just rediscover yesterday stuff you'd already learned?</p>",
        "id": 260720509,
        "sender_full_name": "njn",
        "timestamp": 1636406417
    },
    {
        "content": "<p>yes</p>",
        "id": 260720541,
        "sender_full_name": "simulacrum",
        "timestamp": 1636406441
    },
    {
        "content": "<p>(to both)</p>",
        "id": 260720554,
        "sender_full_name": "simulacrum",
        "timestamp": 1636406445
    },
    {
        "content": "<p>Goodness. Anyway, I'm happy to take point on getting Valgrind fixed.</p>",
        "id": 260720626,
        "sender_full_name": "njn",
        "timestamp": 1636406491
    },
    {
        "content": "<p>sounds great!</p>",
        "id": 260720636,
        "sender_full_name": "simulacrum",
        "timestamp": 1636406502
    },
    {
        "content": "<p>Here's one v0 entry demangled by the fixed-up Valgrind that is surprising to me:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;rustc_infer::infer::InferCtxt&gt;::rollback_to\n</code></pre></div>",
        "id": 260736716,
        "sender_full_name": "nnethercote",
        "timestamp": 1636416029
    },
    {
        "content": "<p>Why are the angle brackets present?</p>",
        "id": 260736736,
        "sender_full_name": "nnethercote",
        "timestamp": 1636416035
    },
    {
        "content": "<p>I see this pattern a lot, and I don't see any <code>aa::bb::cc::dd</code> forms, they're all <code>&lt;aa::bb::cc&gt;::dd</code></p>",
        "id": 260736859,
        "sender_full_name": "nnethercote",
        "timestamp": 1636416108
    },
    {
        "content": "<p>yeah, that's an inherent method <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.rollback_to\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_infer/infer/struct.InferCtxt.html#method.rollback_to</a></p>",
        "id": 260736862,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636416110
    },
    {
        "content": "<p>I wonder if <code>#[instrument]</code> confuses it?</p>",
        "id": 260736872,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636416119
    },
    {
        "content": "<p>Oh, <code>rustc_expand::mbe::macro_parser::parse_tt</code> is more normal</p>",
        "id": 260737070,
        "sender_full_name": "nnethercote",
        "timestamp": 1636416215
    },
    {
        "content": "<p>More weird ones:<br>\n<code>&lt;rustc_middle::ty::context::CtxtInterners&gt;::intern_ty</code></p>",
        "id": 260737095,
        "sender_full_name": "nnethercote",
        "timestamp": 1636416235
    },
    {
        "content": "<p><code>&lt;rustc_parse::parser::Parser&gt;::bump</code></p>",
        "id": 260737152,
        "sender_full_name": "nnethercote",
        "timestamp": 1636416251
    },
    {
        "content": "<p><code>rustc_middle::ty::relate::super_relate_tys::&lt;rustc_infer::infer::equate::Equate&gt;</code>, wtf</p>",
        "id": 260737177,
        "sender_full_name": "nnethercote",
        "timestamp": 1636416269
    },
    {
        "content": "<p><code>&lt;rustc_middle::ty::context::TyCtxt&gt;::_intern_substs</code></p>",
        "id": 260737200,
        "sender_full_name": "nnethercote",
        "timestamp": 1636416290
    },
    {
        "content": "<p><code>&lt;rustc_trait_selection::traits::select::SelectionContext&gt;::match_where_clause_trait_ref</code></p>",
        "id": 260737224,
        "sender_full_name": "nnethercote",
        "timestamp": 1636416322
    },
    {
        "content": "<p>The weird ones are definitely more common than the non-weird ones</p>",
        "id": 260737234,
        "sender_full_name": "nnethercote",
        "timestamp": 1636416333
    },
    {
        "content": "<p>My guess is these are treated as genetic over Self, so they get encoded with that as the one type parameter (so in angle brackets)</p>",
        "id": 260737240,
        "sender_full_name": "simulacrum",
        "timestamp": 1636416336
    },
    {
        "content": "<p>I'm using a fun hack for writing the Valgrind test. I don't want to add a Rust dependency to the Valgrind test suite, so I'm using mangled Rust symbols as C function names, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>// A legacy symbol that demangles to: core::str::lossy::Utf8Lossy::from_bytes\nint _ZN4core3str5lossy9Utf8Lossy10from_bytes17heb1677c8cb728b0bE(int* p)\n{\n   return _RNvNtNtCsaqSe1lZGvEL_12rustc_expand3mbe12macro_parser8parse_tt(p);\n}\n</code></pre></div>",
        "id": 260743346,
        "sender_full_name": "nnethercote",
        "timestamp": 1636421262
    },
    {
        "content": "<p>When Valgrind prints out the error message for the test, the C function names get demangled into Rust function names</p>",
        "id": 260743405,
        "sender_full_name": "nnethercote",
        "timestamp": 1636421297
    },
    {
        "content": "<p><a href=\"https://bugs.kde.org/show_bug.cgi?id=445184\">https://bugs.kde.org/show_bug.cgi?id=445184</a> is the Valgrind fix.</p>",
        "id": 260746902,
        "sender_full_name": "nnethercote",
        "timestamp": 1636424830
    },
    {
        "content": "<p>In &gt;1 year old profiles I have names like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>rustc_data_structures::obligation_forest::ObligationForest&lt;O&gt;::process_obligations\n</code></pre></div>",
        "id": 260752871,
        "sender_full_name": "nnethercote",
        "timestamp": 1636432471
    },
    {
        "content": "<p>In new profiles I have names like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;rustc_data_structures::obligation_forest::ObligationForest&lt;rustc_trait_selection::traits::fulfill::PendingPredicateObligation&gt;&gt;::process_obligations::&lt;rustc_trait_selection::traits::fulfill::FulfillProcessor, rustc_data_structures::obligation_forest::Outcome&lt;rustc_trait_selection::traits::fulfill::PendingPredicateObligation, rustc_infer::traits::FulfillmentErrorCode&gt;&gt;\n</code></pre></div>",
        "id": 260752886,
        "sender_full_name": "nnethercote",
        "timestamp": 1636432502
    },
    {
        "content": "<p>A big difference</p>",
        "id": 260752900,
        "sender_full_name": "nnethercote",
        "timestamp": 1636432526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Problems.20with.20v0.20demangling/near/260736859\">said</a>:</p>\n<blockquote>\n<p>I see this pattern a lot, and I don't see any <code>aa::bb::cc::dd</code> forms, they're all <code>&lt;aa::bb::cc&gt;::dd</code></p>\n</blockquote>\n<p>That's what the <a href=\"https://doc.rust-lang.org/reference/paths.html#canonical-paths\">canonical path</a> of a method in an inherent <code>impl</code> looks like. <code>aa::bb::cc</code> is the path of the Self type and <code>dd</code> is the method name.</p>",
        "id": 260778278,
        "sender_full_name": "mw",
        "timestamp": 1636453599
    },
    {
        "content": "<p>This one puzzles me:</p>\n<div class=\"codehilite\"><pre><span></span><code>[gulf:~] echo _RINvNtCs19hrgr3zeqR_5alloc7raw_vec11finish_growNtNtB4_5alloc6GlobalECsgI90OQiJWEs_11rustc_infer | rustfilt\nalloc::raw_vec::finish_grow::&lt;alloc::alloc::Global&gt;\n</code></pre></div>",
        "id": 261091099,
        "sender_full_name": "nnethercote",
        "timestamp": 1636603663
    },
    {
        "content": "<p>What happened to the <code>rustc_infer</code> at the end of the mangled symbol?</p>",
        "id": 261091103,
        "sender_full_name": "nnethercote",
        "timestamp": 1636603673
    },
    {
        "content": "<p>It's the crate that instantiates the symbol</p>",
        "id": 261093089,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636606134
    },
    {
        "content": "<p>Why include info in the mangled name that doesn't show up when you demangle it?</p>",
        "id": 261095960,
        "sender_full_name": "nnethercote",
        "timestamp": 1636609415
    },
    {
        "content": "<p>Another thing I just discovered about v0 demangling: it seems to have destroyed the usefulness of <code>cargo-llvm-lines</code>.</p>",
        "id": 261095976,
        "sender_full_name": "nnethercote",
        "timestamp": 1636609439
    },
    {
        "content": "<p>I used to get lines like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    9871 (2.6%)   152 (1.6%)  core::option::Option&lt;T&gt;::map\n</code></pre></div>",
        "id": 261096025,
        "sender_full_name": "nnethercote",
        "timestamp": 1636609460
    },
    {
        "content": "<p>Which means there were 152 distinct instantiations of <code>Option::map</code>, totalling 9871 lines of LLVM IR.</p>",
        "id": 261096037,
        "sender_full_name": "nnethercote",
        "timestamp": 1636609482
    },
    {
        "content": "<p>Now I get lines like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>      52 (0.0%)     1 (0.0%)  &lt;core[1888027d9e9c7885]::option::Option&lt;&amp;(core[1888027d9e9c7885]::option::Option&lt;&amp;str&gt;, &amp;str)&gt;&gt;::map::&lt;&amp;str, &amp;mut &lt;clap[445153585277c4b]::app::parser::Parser&gt;::add_defaults::{closure#142}&gt;\n</code></pre></div>\n<p>Every instantiation shows up on a different line, so you can't easily tell how many they are and how many lines they add up to <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span></p>",
        "id": 261096088,
        "sender_full_name": "nnethercote",
        "timestamp": 1636609541
    },
    {
        "content": "<p>Plus it's much less readable in general. What is <code>core[1888027d9e9c7885]</code>? What is the stuff that comes after <code>map</code>?</p>",
        "id": 261096181,
        "sender_full_name": "nnethercote",
        "timestamp": 1636609629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Problems.20with.20v0.20demangling/near/261095960\">said</a>:</p>\n<blockquote>\n<p>Why include info in the mangled name that doesn't show up when you demangle it?</p>\n</blockquote>\n<p>This ensures that symbols instantiated in two crates wouldn't clash.</p>",
        "id": 261096248,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636609701
    },
    {
        "content": "<p>Sounds like <code>cargo-llvm-lines</code> needs to be updated</p>",
        "id": 261096260,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636609725
    },
    {
        "content": "<p>The number is the hash of the crate so symbol names are unique and won't clash when two crates share the same name.</p>",
        "id": 261096295,
        "sender_full_name": "Gary Guo",
        "timestamp": 1636609801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119235\">@David Tolnay</span> This information may be of interest ^^ (about cargo-llvm-lines and v0 demangling)</p>",
        "id": 261096491,
        "sender_full_name": "nnethercote",
        "timestamp": 1636610034
    },
    {
        "content": "<p>It sounds to me like we'll want to add ways to configure how <a href=\"https://github.com/rust-lang/rustc-demangle\">rustc-demangle</a> renders names (e.g. erase generic arguments, leave off crate disambiguators, etc) so as to make it easy for consumers of the library to choose a rendering that makes the most sense for the given use case.</p>",
        "id": 261106546,
        "sender_full_name": "mw",
        "timestamp": 1636620128
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Problems.20with.20v0.20demangling/near/261096181\">said</a>:</p>\n<blockquote>\n<p>What is <code>core[1888027d9e9c7885]</code></p>\n</blockquote>\n<p><code>core</code> is the crate name and <code>[1888027d9e9c7885]</code> is the crate-disambiguator that makes sure that symbols from different versions of the same crate don't clash. For mangled names the disambiguator is needed in order to prevent linker errors but demangled names it should usually be fine to just not display it.</p>",
        "id": 261106864,
        "sender_full_name": "mw",
        "timestamp": 1636620380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Problems.20with.20v0.20demangling/near/261096181\">said</a>:</p>\n<blockquote>\n<p>What is the stuff that comes after <code>map</code>?</p>\n</blockquote>\n<p>Those are the generic parameters of <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html#method.map\">Option::map()</a>: <code>&amp;str</code> for <code>U</code> and <code>&amp;mut &lt;clap[445153585277c4b]::app::parser::Parser&gt;::add_defaults::{closure#142}</code> for the closure <code>F</code>.</p>",
        "id": 261107373,
        "sender_full_name": "mw",
        "timestamp": 1636620776
    }
]