[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> fwiw I <em>think</em> my run is still hanging with a deepbind <a href=\"https://github.com/rust-lang/rust/issues/76980#issuecomment-703307978\">https://github.com/rust-lang/rust/issues/76980#issuecomment-703307978</a></p>",
        "id": 212239666,
        "sender_full_name": "simulacrum",
        "timestamp": 1601842640
    },
    {
        "content": "<p>Huh, weird. It's working fine for me (and passes the test suite).</p>",
        "id": 212239731,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601842718
    },
    {
        "content": "<p>do you have a patch up yet? Maybe I'm changing the wrong thing</p>",
        "id": 212239735,
        "sender_full_name": "simulacrum",
        "timestamp": 1601842729
    },
    {
        "content": "<p>Are you using the hypermine repo or the minimized code?</p>",
        "id": 212239742,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601842745
    },
    {
        "content": "<p>minimized</p>",
        "id": 212239748,
        "sender_full_name": "simulacrum",
        "timestamp": 1601842751
    },
    {
        "content": "<p>me too</p>",
        "id": 212239751,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601842759
    },
    {
        "content": "<p>let me try again</p>",
        "id": 212239821,
        "sender_full_name": "simulacrum",
        "timestamp": 1601842850
    },
    {
        "content": "<p>how long does it take for you?</p>",
        "id": 212239826,
        "sender_full_name": "simulacrum",
        "timestamp": 1601842857
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/pull/77545\">https://github.com/rust-lang/rust/pull/77545</a></p>",
        "id": 212239831,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601842864
    },
    {
        "content": "<p>clean rebuld is 4.25s</p>",
        "id": 212239837,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601842884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> and you're reproducing a fix with a stage 1 build?</p>",
        "id": 212240239,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843412
    },
    {
        "content": "<p>yeah</p>",
        "id": 212240248,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601843433
    },
    {
        "content": "<p>huh</p>",
        "id": 212240254,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843443
    },
    {
        "content": "<p>It definitely hangs for me</p>",
        "id": 212240260,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843448
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>#0  0x00007fd853798838 in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n(gdb) bt\n#0  0x00007fd853798838 in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#1  0x00007fd853798aa6 in ?? () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#2  0x00007fd853798f99 in _Unwind_RaiseException () from /lib/x86_64-linux-gnu/libgcc_s.so.1\n#3  0x00007fd85021878c in __cxa_throw () from /lib/x86_64-linux-gnu/libstdc++.so.6\n#4  0x00007fd85020f1e8 in std::__throw_bad_cast() () from /lib/x86_64-linux-gnu/libstdc++.so.6\n#5  0x00007fd8502a1fd5 in std::ostream&amp; std::ostream::_M_insert&lt;unsigned long&gt;(unsigned long) ()\n   from /lib/x86_64-linux-gnu/libstdc++.so.6\n#6  0x00007fd8490da687 in spvtools::(anonymous namespace)::to_string(unsigned int) ()\n   from /home/mark/repro-76980/target/debug/deps/libvk_shader_macros_impl-cf4b048c4299a1f1.so\n#7  0x00007fd8490db33d in spvtools::FriendlyNameMapper::SaveName(unsigned int, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) ()\n</code></pre></div>",
        "id": 212240405,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> did you reproduce it hanging before you applied the patch?</p>",
        "id": 212240495,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843695
    },
    {
        "content": "<p>yeah</p>",
        "id": 212240527,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601843707
    },
    {
        "content": "<p>oh, but only on nightly</p>",
        "id": 212240529,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601843713
    },
    {
        "content": "<p>not master</p>",
        "id": 212240534,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601843718
    },
    {
        "content": "<p>I wonder if it's e.g. how you're building LLVM</p>",
        "id": 212240542,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843725
    },
    {
        "content": "<p>are you using the download-from-ci stuff?</p>",
        "id": 212240546,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843731
    },
    {
        "content": "<p>yeah, I use system LLVM</p>",
        "id": 212240549,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601843734
    },
    {
        "content": "<p>no, not that</p>",
        "id": 212240551,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601843740
    },
    {
        "content": "<p>oh, so that might be the problem</p>",
        "id": 212240552,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843741
    },
    {
        "content": "<p>because system LLVM would (presumably) not have the symbol clash or whatever we're seeing, since it'd link the same as the proc macro</p>",
        "id": 212240592,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843764
    },
    {
        "content": "<p>i.e., to the same c++ stdlib</p>",
        "id": 212240601,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843770
    },
    {
        "content": "<p>if you're on x86_64-unknown-linux-gnu the download-ci-llvm option should work just fine fwiw</p>",
        "id": 212240613,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843809
    },
    {
        "content": "<p>I'll try with that enabled</p>",
        "id": 212240642,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601843874
    },
    {
        "content": "<p>yeah I've tested with stage 2 and a ci llvm and it still breaks, going to see if in-tree llvm does the same, as well as start a try build</p>",
        "id": 212240732,
        "sender_full_name": "simulacrum",
        "timestamp": 1601843971
    },
    {
        "content": "<p>looks like CI is also failing on some fulldeps test</p>",
        "id": 212240803,
        "sender_full_name": "simulacrum",
        "timestamp": 1601844037
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"241545\" href=\"/#narrow/stream/241545-t-release/topic/1.2E47.20release\">#t-release &gt; 1.47 release</a> by <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span></p>",
        "id": 212241089,
        "sender_full_name": "Notification Bot",
        "timestamp": 1601844400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> so I cannot reproduce with a non-CI llvm, I suspect maybe it's the shared linking? trying that now</p>",
        "id": 212241096,
        "sender_full_name": "simulacrum",
        "timestamp": 1601844427
    },
    {
        "content": "<p>well, static cpp std, and then link-shared if that doesn't reproduce it</p>",
        "id": 212241112,
        "sender_full_name": "simulacrum",
        "timestamp": 1601844474
    },
    {
        "content": "<p>when rustc LLVM uses the system libstdc++, that should be fine with the proc macro</p>",
        "id": 212241155,
        "sender_full_name": "cuviper",
        "timestamp": 1601844489
    },
    {
        "content": "<p>static linking that might still be fine, since the versions match</p>",
        "id": 212241165,
        "sender_full_name": "cuviper",
        "timestamp": 1601844505
    },
    {
        "content": "<p>I think when we download from CI, we're probably using a different libstdc++</p>",
        "id": 212241168,
        "sender_full_name": "simulacrum",
        "timestamp": 1601844517
    },
    {
        "content": "<p>right</p>",
        "id": 212241170,
        "sender_full_name": "cuviper",
        "timestamp": 1601844523
    },
    {
        "content": "<p>(or when using a CI-built rustc locally)</p>",
        "id": 212241171,
        "sender_full_name": "simulacrum",
        "timestamp": 1601844526
    },
    {
        "content": "<p>I agree that IPC or similar is the right long-term (e.g., maybe compiling to wasm and running them there would be better) but definitely not a beta-backportable change</p>",
        "id": 212241182,
        "sender_full_name": "simulacrum",
        "timestamp": 1601844560
    },
    {
        "content": "<p>Last time we tried RPC even using another thread for proc macros turned out too slow</p>",
        "id": 212241244,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1601844656
    },
    {
        "content": "<p>wasm is a neat idea, but might not be possible for cases like this shader library</p>",
        "id": 212241252,
        "sender_full_name": "cuviper",
        "timestamp": 1601844671
    },
    {
        "content": "<p><code>dlmopen</code> is another possibility, but that's also a GNU extension</p>",
        "id": 212241308,
        "sender_full_name": "cuviper",
        "timestamp": 1601844752
    },
    {
        "content": "<p>we could also try to isolate the c++ library we build llvm with somehow? I don't know anything about that though</p>",
        "id": 212241373,
        "sender_full_name": "simulacrum",
        "timestamp": 1601844850
    },
    {
        "content": "<p>e.g. mangling the symbols</p>",
        "id": 212241379,
        "sender_full_name": "simulacrum",
        "timestamp": 1601844872
    },
    {
        "content": "<p>do we know what broke from beta to stable though?</p>",
        "id": 212241402,
        "sender_full_name": "simulacrum",
        "timestamp": 1601844940
    },
    {
        "content": "<p>er, stable to beta?</p>",
        "id": 212241404,
        "sender_full_name": "simulacrum",
        "timestamp": 1601844943
    },
    {
        "content": "<p>like, did LLVM just happen to start using this particular function?</p>",
        "id": 212241408,
        "sender_full_name": "simulacrum",
        "timestamp": 1601844952
    },
    {
        "content": "<p>don't know, I only hypothesized that this was the issue, not confirmed</p>",
        "id": 212241451,
        "sender_full_name": "cuviper",
        "timestamp": 1601844976
    },
    {
        "content": "<p>it's quite possible that we've been clashing symbols all along, and just got lucky that it worked</p>",
        "id": 212241526,
        "sender_full_name": "cuviper",
        "timestamp": 1601845140
    },
    {
        "content": "<p>hm, so in theory, one fix is to disable statically linking the c++ standard library and expect one on the system</p>",
        "id": 212241541,
        "sender_full_name": "simulacrum",
        "timestamp": 1601845196
    },
    {
        "content": "<p>right?</p>",
        "id": 212241542,
        "sender_full_name": "simulacrum",
        "timestamp": 1601845197
    },
    {
        "content": "<p>(not saying we <em>want</em> to do that, but it is one option)</p>",
        "id": 212241591,
        "sender_full_name": "simulacrum",
        "timestamp": 1601845223
    },
    {
        "content": "<p>if we only cared about newer systems</p>",
        "id": 212241597,
        "sender_full_name": "cuviper",
        "timestamp": 1601845235
    },
    {
        "content": "<p>ah, right :/</p>",
        "id": 212241605,
        "sender_full_name": "simulacrum",
        "timestamp": 1601845258
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  another thing to try is <code>RTLD_NOW</code> instead of lazy</p>",
        "id": 212241845,
        "sender_full_name": "cuviper",
        "timestamp": 1601845655
    },
    {
        "content": "<p>rust-analyzer uses <code>RTLD_NOW | RTLD_DEEPBIND</code></p>",
        "id": 212241847,
        "sender_full_name": "cuviper",
        "timestamp": 1601845662
    },
    {
        "content": "<p>hm, I do not think that fixed it, but trying a few more things</p>",
        "id": 212241908,
        "sender_full_name": "simulacrum",
        "timestamp": 1601845764
    },
    {
        "content": "<p>well, rather, that literally rather than via env variable</p>",
        "id": 212241913,
        "sender_full_name": "simulacrum",
        "timestamp": 1601845777
    },
    {
        "content": "<p>(with a custom <code>RTLD_DEEPBIND</code> definition instead of libc's, eek)</p>",
        "id": 212241914,
        "sender_full_name": "cuviper",
        "timestamp": 1601845778
    },
    {
        "content": "<p>they seem to match on x86_64-unknown-linux-gnu at least though</p>",
        "id": 212241963,
        "sender_full_name": "simulacrum",
        "timestamp": 1601845839
    },
    {
        "content": "<p>I think only mips is different, 0x10</p>",
        "id": 212241966,
        "sender_full_name": "cuviper",
        "timestamp": 1601845853
    },
    {
        "content": "<p>and I don't expect that flag to work on non-linux-gnu</p>",
        "id": 212241976,
        "sender_full_name": "cuviper",
        "timestamp": 1601845880
    },
    {
        "content": "<p>I think Windows is probably immune to this, since they bind symbols at link time</p>",
        "id": 212242041,
        "sender_full_name": "cuviper",
        "timestamp": 1601846001
    },
    {
        "content": "<p>don't know about MacOS</p>",
        "id": 212242043,
        "sender_full_name": "cuviper",
        "timestamp": 1601846009
    },
    {
        "content": "<p>but all ELF targets will probably have issues</p>",
        "id": 212242046,
        "sender_full_name": "cuviper",
        "timestamp": 1601846021
    },
    {
        "content": "<p>Mach-O has support for two level namespaces. This means that all symbols are annotated with the dylib they are imported from. This means that there can be no conflicts between multiple libstdc++ versions I think, or at least when two level namespaces are not disabled.</p>",
        "id": 212242379,
        "sender_full_name": "bjorn3",
        "timestamp": 1601846565
    },
    {
        "content": "<p>hm now I managed to do something that has my rustc stuck in reclaiming stacks</p>",
        "id": 212242768,
        "sender_full_name": "simulacrum",
        "timestamp": 1601847292
    },
    {
        "content": "<p>you could try dlmopen to be extra sure.</p>",
        "id": 212243284,
        "sender_full_name": "nagisa",
        "timestamp": 1601848235
    },
    {
        "content": "<p>but with that the loaded thing gets its own e.g. allocator too so you cannot just free things that you got from the other side.</p>",
        "id": 212243299,
        "sender_full_name": "nagisa",
        "timestamp": 1601848305
    },
    {
        "content": "<p>dlmopen seems to produce hangs in __reclaim_stacks, though maybe I'm using it wrong</p>",
        "id": 212243618,
        "sender_full_name": "simulacrum",
        "timestamp": 1601848896
    }
]