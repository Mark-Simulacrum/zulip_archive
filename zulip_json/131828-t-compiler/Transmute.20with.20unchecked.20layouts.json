[
    {
        "content": "<p>Currently <code>transmute</code> is too conservative with it layout checks. It complicates unsafe generic code as one now has to use <code>transmute_copy</code> etc.<br>\nCould it be possible to add (probably perma-unstable) <code>core::intrinsics::transmute_unchecked</code> thing that does not validate size? IMHO some libstd code will become simpler.</p>",
        "id": 212139422,
        "sender_full_name": "Mikail Bagishov",
        "timestamp": 1601680388
    },
    {
        "content": "<p>isn't that the same as <code>transmute_copy</code>?</p>",
        "id": 212139718,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601680590
    },
    {
        "content": "<p>I guess that's a <em>consuming</em> <code>transmute_copy</code> -- <code>transmute_move</code>?</p>",
        "id": 212140542,
        "sender_full_name": "cuviper",
        "timestamp": 1601681351
    },
    {
        "content": "<p>Given that the safe transmute project is currently \"in progress\", this feels less likely to be added. Might as well just wait a little longer and use safe transmutes.</p>",
        "id": 212141268,
        "sender_full_name": "Lokathor",
        "timestamp": 1601682201
    },
    {
        "content": "<p>With const wf bounds we can make it possible to check that the size of the generic parameters of transmute are the same and thus allow people to bubble up this requirement in their generic bounds</p>",
        "id": 212155701,
        "sender_full_name": "oli",
        "timestamp": 1601705660
    },
    {
        "content": "<p>So this is how a generic transmute can be implemented using const wf bounds</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9c623c26f215e8c99a5688b287368b67\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9c623c26f215e8c99a5688b287368b67</a></p>",
        "id": 212158163,
        "sender_full_name": "lcnr",
        "timestamp": 1601709760
    },
    {
        "content": "<p>this still validates sizes but does so in a generic way</p>",
        "id": 212158177,
        "sender_full_name": "lcnr",
        "timestamp": 1601709787
    },
    {
        "content": "<p>the only issue is that I don't think we should add <code>const_evaluatable_checked</code> to std yet</p>",
        "id": 212158199,
        "sender_full_name": "lcnr",
        "timestamp": 1601709831
    },
    {
        "content": "<p>even if it is not yet used in any userfacing api</p>",
        "id": 212158203,
        "sender_full_name": "lcnr",
        "timestamp": 1601709840
    },
    {
        "content": "<p>as it might still be broken in subtle ways</p>",
        "id": 212158245,
        "sender_full_name": "lcnr",
        "timestamp": 1601709851
    },
    {
        "content": "<p>And in the meantime:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">unsafe</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">transmute_unchecked</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">it</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">U</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">transmute_copy</span>::<span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">ManuallyDrop</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">it</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212190328,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1601759878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Transmute.20with.20unchecked.20layouts/near/212158163\">said</a>:</p>\n<blockquote>\n<p>So this is how a generic transmute can be implemented using const wf bounds</p>\n<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9c623c26f215e8c99a5688b287368b67\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=9c623c26f215e8c99a5688b287368b67</a></p>\n</blockquote>\n<p>does this mean we can change <code>mem::transmute</code> from a reexport to a proper wrapper function and make the actual intrinsic private and unstable? :D<br>\n(though likely at this point too much code directly uses <code>intrinsics::transmute</code> and we cannot take this back any more...)</p>",
        "id": 212218179,
        "sender_full_name": "RalfJ",
        "timestamp": 1601809425
    },
    {
        "content": "<p>We could remove the intrinsic and make the intrinsic be the reexport. There's precedent for this iirc</p>",
        "id": 212218474,
        "sender_full_name": "oli",
        "timestamp": 1601809978
    },
    {
        "content": "<p>what now, remove it or make it a reexport?^^</p>",
        "id": 212219377,
        "sender_full_name": "RalfJ",
        "timestamp": 1601811547
    },
    {
        "content": "<p>the intrinsic is stabilized</p>",
        "id": 212219461,
        "sender_full_name": "lcnr",
        "timestamp": 1601811671
    },
    {
        "content": "<p>so we have to have at least a reexport here</p>",
        "id": 212219465,
        "sender_full_name": "lcnr",
        "timestamp": 1601811687
    },
    {
        "content": "<p>which we can then deprecate hopefully</p>",
        "id": 212219509,
        "sender_full_name": "lcnr",
        "timestamp": 1601811736
    },
    {
        "content": "<p>but we don't need transmute to be an intrinsic afterwards</p>",
        "id": 212219511,
        "sender_full_name": "lcnr",
        "timestamp": 1601811753
    },
    {
        "content": "<p>(if it doesn't hurt perf)</p>",
        "id": 212219515,
        "sender_full_name": "lcnr",
        "timestamp": 1601811763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Transmute.20with.20unchecked.20layouts/near/212219461\">said</a>:</p>\n<blockquote>\n<p>the intrinsic is stabilized</p>\n</blockquote>\n<p>it is intentionally stabilized at <code>mem::transmute</code> and accidentally stabilized at <code>intrinsics::transmute</code>. I cannot tell which of the two reexports of the same item you are referring to.</p>",
        "id": 212223326,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818025
    },
    {
        "content": "<p>I wasnt talking about making it not an intrinsic, I was talking about not re-exporting the underlying intrinsic. We don't usually re-export intrinsics, but we had to for <code>transmute</code> because of the size check.</p>",
        "id": 212223339,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818069
    },
    {
        "content": "<p>It is not possible to make a generic wrapper around <code>transmute</code>. The input and output types of <code>transmute</code> must be known before monomorphization.</p>",
        "id": 212223382,
        "sender_full_name": "bjorn3",
        "timestamp": 1601818121
    },
    {
        "content": "<p>that's what I said</p>",
        "id": 212223402,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818190
    },
    {
        "content": "<p>but this thread describes a way that seems to make it possible, hence my reaction :D</p>",
        "id": 212223447,
        "sender_full_name": "RalfJ",
        "timestamp": 1601818214
    },
    {
        "content": "<p>Yes, we will be able to wrap transmute. But in fact we will be able to remove the intrinsic entirely and just put a reexport of the library implementation in its place</p>",
        "id": 212223548,
        "sender_full_name": "oli",
        "timestamp": 1601818396
    },
    {
        "content": "<p>Ah ok. Just found the playground link. I did prefer using a <code>transmute</code> intrinsic inside the wrapper over using <code>MaybeUninit</code>. The later requires much more work from the optimizer to make it fast.</p>",
        "id": 212223602,
        "sender_full_name": "bjorn3",
        "timestamp": 1601818450
    },
    {
        "content": "<p>yeah, we can use a <code>transmute_unchecked_size</code> intrinsic or put the const evaluatable bound on the intrinsic itself</p>",
        "id": 212224396,
        "sender_full_name": "lcnr",
        "timestamp": 1601819775
    },
    {
        "content": "<p>if perf ends up being an issue here</p>",
        "id": 212224431,
        "sender_full_name": "lcnr",
        "timestamp": 1601819836
    },
    {
        "content": "<p>will take a while until we will have to worry about this though</p>",
        "id": 212224438,
        "sender_full_name": "lcnr",
        "timestamp": 1601819860
    },
    {
        "content": "<p>The MCP for a custom transmute rvalue has just finished FCP, so I'm not worried about perf here as we can just replace the lib impl with an rvalue where appropriate</p>",
        "id": 212224576,
        "sender_full_name": "oli",
        "timestamp": 1601820102
    }
]