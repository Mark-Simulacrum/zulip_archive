[
    {
        "content": "<p>I am trying to call Const.unwrap_usize in typeck chec, but am getting:</p>\n<div class=\"codehilite\"><pre><span></span>error: internal compiler error: src/librustc/ty/sty.rs:2337: expected constant usize, got Const {\n    ty: usize,\n    val: Unevaluated(\n        DefId(0:15 ~ simd_array_type[317d]::S[0]::0[0]::{{constant}}[0]),\n        [],\n    ),\n}\n</pre></div>\n\n\n<p>IIUC, the ty is correctly an usize, but the value is not an usize, but <code>Unevaluated</code> instead</p>",
        "id": 172513987,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565019719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> i'm not sure how to deal with that. Is there a way to evaluate it ?</p>",
        "id": 172514061,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565019753
    },
    {
        "content": "<p>In my case, the value can either be a power of two, or a const generic</p>",
        "id": 172514078,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565019775
    },
    {
        "content": "<p>you can't eval a const generic</p>",
        "id": 172514104,
        "sender_full_name": "oli",
        "timestamp": 1565019805
    },
    {
        "content": "<p>unless you substitute the const generic, at which point you're not evaluating a const generic</p>",
        "id": 172514122,
        "sender_full_name": "oli",
        "timestamp": 1565019826
    },
    {
        "content": "<p>it currently isn't a const generic though</p>",
        "id": 172514125,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565019829
    },
    {
        "content": "<p>it's generic, you can't know its value</p>",
        "id": 172514130,
        "sender_full_name": "oli",
        "timestamp": 1565019835
    },
    {
        "content": "<p>hmm</p>",
        "id": 172514132,
        "sender_full_name": "oli",
        "timestamp": 1565019836
    },
    {
        "content": "<p>currently i have an [i32; 4] array</p>",
        "id": 172514189,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565019851
    },
    {
        "content": "<p>so you want me to work on <a href=\"https://github.com/rust-lang/rust/pull/59369\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59369\">https://github.com/rust-lang/rust/pull/59369</a> :D</p>",
        "id": 172514194,
        "sender_full_name": "oli",
        "timestamp": 1565019855
    },
    {
        "content": "<p>:D</p>",
        "id": 172514237,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565019897
    },
    {
        "content": "<p>ok, I think I will skip the check for now</p>",
        "id": 172514252,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565019905
    },
    {
        "content": "<p>You can also try to subst and normalize first</p>",
        "id": 172525506,
        "sender_full_name": "oli",
        "timestamp": 1565028930
    },
    {
        "content": "<p>It's hacky but should work until my PR is through</p>",
        "id": 172525537,
        "sender_full_name": "oli",
        "timestamp": 1565028952
    },
    {
        "content": "<p>ok, nevermind, got the PR ready and sent it to bors</p>",
        "id": 172527133,
        "sender_full_name": "oli",
        "timestamp": 1565030186
    },
    {
        "content": "<p>you should be able to rebase over it soonish</p>",
        "id": 172527142,
        "sender_full_name": "oli",
        "timestamp": 1565030192
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> , it looks like this landed, i'll try it out</p>",
        "id": 172681957,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565187669
    },
    {
        "content": "<p>let me know if anything is off</p>",
        "id": 172681975,
        "sender_full_name": "oli",
        "timestamp": 1565187687
    },
    {
        "content": "<p>I want to support <code>#[repr(simd)] struct Simd&lt;T, const N: usize&gt;([T; N]);</code></p>",
        "id": 172682067,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565187758
    },
    {
        "content": "<p>so needed that for a piece in layout where <code>simd_size</code> is called</p>",
        "id": 172682082,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565187774
    },
    {
        "content": "<p>uh</p>",
        "id": 172682110,
        "sender_full_name": "oli",
        "timestamp": 1565187809
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"go\">rg &#39;simd_size\\(&#39; src/</span>\n<span class=\"go\">src/librustc_codegen_llvm/intrinsic.rs</span>\n<span class=\"go\">1095:        let v_len = arg_tys[1].simd_size(tcx);</span>\n<span class=\"go\">1110:    let in_len = arg_tys[0].simd_size(tcx);</span>\n<span class=\"go\">1125:        let out_len = ret_ty.simd_size(tcx);</span>\n<span class=\"go\">1150:        let out_len = ret_ty.simd_size(tcx);</span>\n<span class=\"go\">1211:        let v_len = arg_tys[1].simd_size(tcx);</span>\n<span class=\"go\">1427:        require!(in_len == arg_tys[1].simd_size(tcx),</span>\n<span class=\"go\">1430:                 arg_tys[1].simd_size(tcx));</span>\n<span class=\"go\">1431:        require!(in_len == arg_tys[2].simd_size(tcx),</span>\n<span class=\"go\">1434:                 arg_tys[2].simd_size(tcx));</span>\n<span class=\"go\">1531:        require!(in_len == arg_tys[1].simd_size(tcx),</span>\n<span class=\"go\">1534:                 arg_tys[1].simd_size(tcx));</span>\n<span class=\"go\">1535:        require!(in_len == arg_tys[2].simd_size(tcx),</span>\n<span class=\"go\">1538:                 arg_tys[2].simd_size(tcx));</span>\n<span class=\"go\">1758:        let out_len = ret_ty.simd_size(tcx);</span>\n\n<span class=\"go\">src/librustc/ty/sty.rs</span>\n<span class=\"go\">1839:    pub fn simd_size(&amp;self, tcx: TyCtxt&lt;&#39;tcx&gt;) -&gt; usize {</span>\n\n<span class=\"go\">src/librustc/ty/layout.rs</span>\n<span class=\"go\">697:                let count = ty.simd_size(tcx) as u64;</span>\n</pre></div>",
        "id": 172682146,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565187836
    },
    {
        "content": "<p>that's everywhere where it is used - in librustc_codegen_llvm the value of N should be known</p>",
        "id": 172682213,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565187873
    },
    {
        "content": "<p>only in librustc/ty/layout.rs we use it in a place where <code>N</code> maybe isn't known, no idea</p>",
        "id": 172682249,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565187902
    },
    {
        "content": "<p>yes, but you're doing \"the wrong thing\"^TM if you're using <code>eval_usize</code></p>",
        "id": 172682260,
        "sender_full_name": "oli",
        "timestamp": 1565187910
    },
    {
        "content": "<p>you should not touch <code>librustc/ty/layout</code></p>",
        "id": 172682274,
        "sender_full_name": "oli",
        "timestamp": 1565187921
    },
    {
        "content": "<p>sorry I should have asked what you are trying to solve</p>",
        "id": 172682277,
        "sender_full_name": "oli",
        "timestamp": 1565187928
    },
    {
        "content": "<p>i'm only touching <code>librustc/ty/sty.rs</code> which is where <code>simd_size</code> is implemented</p>",
        "id": 172682295,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565187942
    },
    {
        "content": "<p>just monomorphize <code>arg_tys[1]</code> or whatever type you wanna call <code>simd_size</code> on</p>",
        "id": 172682361,
        "sender_full_name": "oli",
        "timestamp": 1565187965
    },
    {
        "content": "<p>I think a layout is only computed for monomorphized types</p>",
        "id": 172682374,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565187987
    },
    {
        "content": "<p>yea, but you should not touch it I believe</p>",
        "id": 172682379,
        "sender_full_name": "oli",
        "timestamp": 1565187988
    },
    {
        "content": "<p>yes, but your type is not monomorphic</p>",
        "id": 172682385,
        "sender_full_name": "oli",
        "timestamp": 1565187996
    },
    {
        "content": "<p>I have to touch it, because currently <code>[T; N]</code> isn't supported in <code>repr(simd)</code> types, only tuple structs are</p>",
        "id": 172682395,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188011
    },
    {
        "content": "<p>and the number of elements of tuple structs is always known, even if they are generic</p>",
        "id": 172682406,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188023
    },
    {
        "content": "<p>oh, you're doing two things</p>",
        "id": 172682426,
        "sender_full_name": "oli",
        "timestamp": 1565188039
    },
    {
        "content": "<p>so I at least need to patternmatch on elements that are arrays there, and do something about them</p>",
        "id": 172682428,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188040
    },
    {
        "content": "<p>go ahead then</p>",
        "id": 172682432,
        "sender_full_name": "oli",
        "timestamp": 1565188043
    },
    {
        "content": "<p>ah yes</p>",
        "id": 172682434,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188045
    },
    {
        "content": "<p>but my changes should not have an effect on anything you do</p>",
        "id": 172682449,
        "sender_full_name": "oli",
        "timestamp": 1565188059
    },
    {
        "content": "<p>so <code>repr(simd) struct X([f32; 4]);</code> is not supported yet either (my branch does)</p>",
        "id": 172682453,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188061
    },
    {
        "content": "<p>you'll still hit the same thing</p>",
        "id": 172682515,
        "sender_full_name": "oli",
        "timestamp": 1565188086
    },
    {
        "content": "<p>but I wanted to try to make sure that <code>#[repr(simd)] struct X&lt;const N: usize&gt;([f32; N])</code> works as well</p>",
        "id": 172682521,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188090
    },
    {
        "content": "<p>yes, I was hitting the same thing with a concrete <code>4</code></p>",
        "id": 172682528,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188099
    },
    {
        "content": "<p>do you have a backtrace available?</p>",
        "id": 172682543,
        "sender_full_name": "oli",
        "timestamp": 1565188112
    },
    {
        "content": "<p>hmm</p>",
        "id": 172682547,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188119
    },
    {
        "content": "<p>I think you forgot a monomorphize call somewhere</p>",
        "id": 172682551,
        "sender_full_name": "oli",
        "timestamp": 1565188122
    },
    {
        "content": "<p>let me scroll, like a couple of days</p>",
        "id": 172682558,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188130
    },
    {
        "content": "<p>don't try to get concrete <code>4</code> working</p>",
        "id": 172682565,
        "sender_full_name": "oli",
        "timestamp": 1565188135
    },
    {
        "content": "<p>just go directly for const generics</p>",
        "id": 172682579,
        "sender_full_name": "oli",
        "timestamp": 1565188144
    },
    {
        "content": "<p>I worked around this by doing something else</p>",
        "id": 172682604,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188162
    },
    {
        "content": "<p>I think, by removing the <code>simd_size</code> call</p>",
        "id": 172682614,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188173
    },
    {
        "content": "<p>there was a stale check in rustc_typeck that checked that N was a power of two</p>",
        "id": 172682636,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188199
    },
    {
        "content": "<p>I don't think we can check that there if we want to support const generics</p>",
        "id": 172682693,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188212
    },
    {
        "content": "<p>you can check it after monomorphization, but that's a bit bad</p>",
        "id": 172682971,
        "sender_full_name": "oli",
        "timestamp": 1565188418
    },
    {
        "content": "<p>you can also make the generic arg be the power of two that should be used :P</p>",
        "id": 172682986,
        "sender_full_name": "oli",
        "timestamp": 1565188432
    },
    {
        "content": "<p>so <code>1</code> for <code>2</code> and <code>2</code> for <code>4</code> and <code>3</code> for <code>8</code> and so on</p>",
        "id": 172683042,
        "sender_full_name": "oli",
        "timestamp": 1565188446
    },
    {
        "content": "<p><code>const N: NonZeroUsize</code> :D</p>",
        "id": 172683066,
        "sender_full_name": "oli",
        "timestamp": 1565188471
    },
    {
        "content": "<p>we have an upper bound on the largest power of two supported problably</p>",
        "id": 172683122,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188529
    },
    {
        "content": "<p>ok i rebased, and migrated unwrap_usize to eval_usize</p>",
        "id": 172683193,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188579
    },
    {
        "content": "<p>but i'm now missing a ParamEnv</p>",
        "id": 172683197,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188585
    },
    {
        "content": "<p>either way, for the time being, we just support all Ns</p>",
        "id": 172683260,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188645
    },
    {
        "content": "<p>it will be up to libcore to constraint things in meaningful ways</p>",
        "id": 172683278,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565188659
    },
    {
        "content": "<p>pass down the param_env as an argument of <code>simd_size</code></p>",
        "id": 172683391,
        "sender_full_name": "oli",
        "timestamp": 1565188745
    },
    {
        "content": "<p>in llvm you can just do <code>ParamEnv::reveal_all()</code></p>",
        "id": 172683411,
        "sender_full_name": "oli",
        "timestamp": 1565188764
    },
    {
        "content": "<p>everywhere else you should take the <code>ParamEnv</code> from the surroundings</p>",
        "id": 172683419,
        "sender_full_name": "oli",
        "timestamp": 1565188777
    },
    {
        "content": "<p><code>TyS</code> doesn't have a <code>ParamEnv</code></p>",
        "id": 172684296,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565189402
    },
    {
        "content": "<p>i ended up using ty::ParamEnv::empty()</p>",
        "id": 172684316,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565189408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> it... just works...</p>",
        "id": 172687199,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565191375
    },
    {
        "content": "<p>is this a good thing ?</p>",
        "id": 172687206,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565191382
    },
    {
        "content": "<p>uh</p>",
        "id": 172689051,
        "sender_full_name": "oli",
        "timestamp": 1565192570
    },
    {
        "content": "<p>ok only the basic tests work, adding more complex tests things start breaking</p>",
        "id": 172690541,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565193537
    },
    {
        "content": "<p>ok so eval_usize appears to be a bad idea</p>",
        "id": 172692695,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565195122
    },
    {
        "content": "<p>for some reason, the layout of a <code>struct S&lt;const N: usize&gt;([f32; N]);</code> is required before monomorphization</p>",
        "id": 172692716,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565195145
    },
    {
        "content": "<p>e.g.</p>",
        "id": 172692717,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565195147
    },
    {
        "content": "<p>a simple lib crate that exposes a <code>pub S</code> fails</p>",
        "id": 172692731,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565195156
    },
    {
        "content": "<p>Told you ^^</p>",
        "id": 172693742,
        "sender_full_name": "oli",
        "timestamp": 1565195959
    },
    {
        "content": "<p>Can you backtrace the place where it's invoked before llvm?</p>",
        "id": 172693775,
        "sender_full_name": "oli",
        "timestamp": 1565195997
    },
    {
        "content": "<p>i'm kind of coming forward with debugging</p>",
        "id": 172694152,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565196348
    },
    {
        "content": "<p>i am going to make the simd_size function of sty take a ParamEnv environment</p>",
        "id": 172694219,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565196379
    },
    {
        "content": "<p>and then do what is done for arrays in Layout</p>",
        "id": 172694223,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565196385
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">.</span><span class=\"n\">has_projections</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">normalize_erasing_regions</span><span class=\"p\">(</span><span class=\"n\">param_env</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">.</span><span class=\"n\">has_projections</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">LayoutError</span>::<span class=\"n\">Unknown</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">count</span><span class=\"p\">.</span><span class=\"n\">try_eval_usize</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param_env</span><span class=\"p\">).</span><span class=\"n\">ok_or</span><span class=\"p\">(</span><span class=\"n\">LayoutError</span>::<span class=\"n\">Unknown</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172694270,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565196416
    },
    {
        "content": "<p>Yea that seems reasonable</p>",
        "id": 172694391,
        "sender_full_name": "oli",
        "timestamp": 1565196553
    },
    {
        "content": "<p>so i'm stuck now</p>",
        "id": 172756779,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565263985
    },
    {
        "content": "<p>i solved a couple of issues</p>",
        "id": 172756785,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565263993
    },
    {
        "content": "<p>but I'm getting incorrect code generation in a couple of places</p>",
        "id": 172756788,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565264001
    },
    {
        "content": "<p>the llvm-ir that i'm seeing is completely wrong, i'm gonna have to learn how to read mir</p>",
        "id": 172756865,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565264073
    },
    {
        "content": "<p>that's the mir for the following program(<a href=\"https://gist.github.com/gnzlbg/479ba3ee6a563af17e0d517de21e241b\" target=\"_blank\" title=\"https://gist.github.com/gnzlbg/479ba3ee6a563af17e0d517de21e241b\">https://gist.github.com/gnzlbg/479ba3ee6a563af17e0d517de21e241b</a>): </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// run-pass</span>\n<span class=\"cp\">#![allow(non_camel_case_types, incomplete_features)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![feature(repr_simd, platform_intrinsics, const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ops</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[repr(simd)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(Copy, Clone)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">S</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;platform-intrinsic&quot;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">simd_add</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">simd_extract</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">E</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">v</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">E</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">ops</span>::<span class=\"n\">Add</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span><span class=\"n\">lhs</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">ops</span>::<span class=\"n\">Add</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">S</span><span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">Self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"n\">simd_add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">)}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lr2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">S</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"k\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"k\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.0</span><span class=\"k\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0</span><span class=\"k\">f32</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">lr2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lr2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">f32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">simd_extract</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">f32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">simd_extract</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"k\">f32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0</span><span class=\"k\">f32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172756964,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565264174
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> can it be that this is being evaluated at compile-time ?</p>",
        "id": 172757312,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565264585
    },
    {
        "content": "<p>and constant evaluation is doing something wrong ?</p>",
        "id": 172757316,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565264595
    },
    {
        "content": "<p>For this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[inline(never)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">add_pair</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lr2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">S</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">([</span><span class=\"mf\">1.0</span><span class=\"k\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2.0</span><span class=\"k\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.0</span><span class=\"k\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0</span><span class=\"k\">f32</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">simd_add</span><span class=\"p\">(</span><span class=\"n\">lr2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lr2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">f32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">simd_extract</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"kt\">f32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">simd_extract</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I get the following MIR:</p>\n<div class=\"codehilite\"><pre><span></span>fn  add_pair() -&gt; (f32, f32) {\n    let mut _0: (f32, f32);              // return place in scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:18:22: 18:32\n    let mut _2: [f32; 4];                // in scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:19:22: 19:54\n    let mut _4: S&lt;4usize&gt;;               // in scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:22: 20:25\n    let mut _5: S&lt;4usize&gt;;               // in scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:27: 20:30\n    let mut _7: S&lt;4usize&gt;;               // in scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:21:31: 21:32\n    let mut _9: S&lt;4usize&gt;;               // in scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:22:31: 22:32\n    let mut _10: f32;                    // in scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:23:6: 23:7\n    let mut _11: f32;                    // in scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:23:9: 23:10\n    scope 1 {\n        let _1: S&lt;4usize&gt;;               // &quot;lr2&quot; in scope 1 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:19:9: 19:12\n        scope 2 {\n            let _3: S&lt;4usize&gt;;           // &quot;a&quot; in scope 2 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:9: 20:10\n            scope 3 {\n                let _6: f32 as UserTypeProjection { base: UserType(1), projs: [] }; // &quot;x&quot; in scope 3 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:21:9: 21:10\n                scope 4 {\n                    let _8: f32 as UserTypeProjection { base: UserType(3), projs: [] }; // &quot;y&quot; in scope 4 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:22:9: 22:10\n                    scope 5 {\n                    }\n                }\n            }\n        }\n    }\n\n    bb0: {\n        StorageLive(_1);                 // bb0[0]: scope 1 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:19:9: 19:12\n        StorageLive(_2);                 // bb0[1]: scope 1 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:19:22: 19:54\n        _2 = [const 1f32, const 2f32, const 3f32, const 4f32]; // bb0[2]: scope 1 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:19:22: 19:54\n                                         // ty::Const\n                                         // + ty: f32\n                                         // + val: Scalar(0x3f800000)\n                                         // mir::Constant\n                                         // + span: /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:19:23: 19:29\n                                         // + ty: f32\n                                         // + literal: Const { ty: f32, val: Scalar(0x3f800000) }\n                                         // ty::Const\n                                         // + ty: f32\n                                         // + val: Scalar(0x40000000)\n                                         // mir::Constant\n                                         // + span: /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:19:31: 19:37\n                                         // + ty: f32\n                                         // + literal: Const { ty: f32, val: Scalar(0x40000000) }\n                                         // ty::Const\n                                         // + ty: f32\n                                         // + val: Scalar(0x40400000)\n                                         // mir::Constant\n                                         // + span: /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:19:39: 19:45\n                                         // + ty: f32\n                                         // + literal: Const { ty: f32, val: Scalar(0x40400000) }\n                                         // ty::Const\n                                         // + ty: f32\n                                         // + val: Scalar(0x40800000)\n                                         // mir::Constant\n                                         // + span: /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:19:47: 19:53\n                                         // + ty: f32\n                                         // + literal: Const { ty: f32, val: Scalar(0x40800000) }\n        (_1.0: [f32; 4]) = move _2;      // bb0[3]: scope 1 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:19:15: 19:55\n        StorageDead(_2);                 // bb0[4]: scope 1 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:19:54: 19:55\n        StorageLive(_3);                 // bb0[5]: scope 2 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:9: 20:10\n        StorageLive(_4);                 // bb0[6]: scope 2 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:22: 20:25\n        _4 = _1;                         // bb0[7]: scope 2 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:22: 20:25\n        StorageLive(_5);                 // bb0[8]: scope 2 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:27: 20:30\n        _5 = _1;                         // bb0[9]: scope 2 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:27: 20:30\n        _3 = const simd_add::&lt;S&lt;4usize&gt;&gt;(move _4, move _5) -&gt; bb1; // bb0[10]: scope 2 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:13: 20:31\n                                         // ty::Const\n                                         // + ty: unsafe extern &quot;platform-intrinsic&quot; fn(S&lt;4usize&gt;, S&lt;4usize&gt;) -&gt; S&lt;4usize&gt; {simd_add::&lt;S&lt;4usize&gt;&gt;}\n                                         // + val: Scalar(&lt;ZST&gt;)\n                                         // mir::Constant\n                                         // + span: /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:13: 20:21\n                                         // + ty: unsafe extern &quot;platform-intrinsic&quot; fn(S&lt;4usize&gt;, S&lt;4usize&gt;) -&gt; S&lt;4usize&gt; {simd_add::&lt;S&lt;4usize&gt;&gt;}\n                                         // + literal: Const { ty: unsafe extern &quot;platform-intrinsic&quot; fn(S&lt;4usize&gt;, S&lt;4usize&gt;) -&gt; S&lt;4usize&gt; {simd_add::&lt;S&lt;4usize&gt;&gt;}, val: Scalar(&lt;ZST&gt;) }\n    }\n\n    bb1: {\n        StorageDead(_5);                 // bb1[0]: scope 2 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:30: 20:31\n        StorageDead(_4);                 // bb1[1]: scope 2 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:20:30: 20:31\n        StorageLive(_6);                 // bb1[2]: scope 3 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:21:9: 21:10\n        StorageLive(_7);                 // bb1[3]: scope 3 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:21:31: 21:32\n        _7 = _3;                         // bb1[4]: scope 3 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:21:31: 21:32\n        _6 = const simd_extract::&lt;S&lt;4usize&gt;, f32&gt;(move _7, const 0u32) -&gt; bb2; // bb1[5]: scope 3 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:21:18: 21:36\n                                         // ty::Const\n                                         // + ty: unsafe extern &quot;platform-intrinsic&quot; fn(S&lt;4usize&gt;, u32) -&gt; f32 {simd_extract::&lt;S&lt;4usize&gt;, f32&gt;}\n                                         // + val: Scalar(&lt;ZST&gt;)\n                                         // mir::Constant\n                                         // + span: /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:21:18: 21:30\n                                         // + ty: unsafe extern &quot;platform-intrinsic&quot; fn(S&lt;4usize&gt;, u32) -&gt; f32 {simd_extract::&lt;S&lt;4usize&gt;, f32&gt;}\n                                         // + literal: Const { ty: unsafe extern &quot;platform-intrinsic&quot; fn(S&lt;4usize&gt;, u32) -&gt; f32 {simd_extract::&lt;S&lt;4usize&gt;, f32&gt;}, val: Scalar(&lt;ZST&gt;) }\n                                         // ty::Const\n                                         // + ty: u32\n                                         // + val: Scalar(0x00000000)\n                                         // mir::Constant\n                                         // + span: /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:21:34: 21:35\n                                         // + ty: u32\n                                         // + literal: Const { ty: u32, val: Scalar(0x00000000) }\n    }\n\n    bb2: {\n        StorageDead(_7);                 // bb2[0]: scope 3 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:21:35: 21:36\n        StorageLive(_8);                 // bb2[1]: scope 4 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:22:9: 22:10\n        StorageLive(_9);                 // bb2[2]: scope 4 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:22:31: 22:32\n        _9 = _3;                         // bb2[3]: scope 4 at /Users/gnzlbg/projects/sideprojects/rust/src/test/ui/simd/simd-generics.rs:22:31: 22:32\n        _8 = const simd_extract::&lt;S&lt;4usize&gt;, f32&gt;(move _9, const 1u32) -&gt; bb3; // bb2[4]: scope 4 a\n</pre></div>",
        "id": 172757881,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565265334
    },
    {
        "content": "<p>What's this <code>const simd_add::&lt;S&lt;4usize&gt;&gt;(move _4, move _5)</code> doing ? Is this evaluating <code>simd_add</code> at compile-time ?</p>",
        "id": 172757978,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565265447
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  ^^^</p>",
        "id": 172758098,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565265597
    },
    {
        "content": "<p>Smaller example, the LLVM-IR generated is broken: <a href=\"https://gcc.godbolt.org/z/3nuRpN\" target=\"_blank\" title=\"https://gcc.godbolt.org/z/3nuRpN\">https://gcc.godbolt.org/z/3nuRpN</a></p>",
        "id": 172758722,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565266228
    },
    {
        "content": "<blockquote>\n<p>What's this <code>const simd_add::&lt;S&lt;4usize&gt;&gt;(move _4, move _5)</code> doing ? Is this evaluating <code>simd_add</code> at compile-time ?</p>\n</blockquote>\n<p>I'm pretty sure that just means that function call is to a <code>ConstVal </code>which is a function pointer to <code>simd_add</code>. It doesn't mean that the function call is being evaluated at compile time.</p>",
        "id": 172758725,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1565266230
    },
    {
        "content": "<p>found the issue, the memcpy in the last example is incorrect</p>",
        "id": 172758865,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565266420
    },
    {
        "content": "<p>for some reason, when copying the [f32; 4] array into the &lt;4 x f32&gt; vector, we call <code>memcpy</code> with a length of 4 bytes</p>",
        "id": 172758918,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565266444
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.memcpy.p0i8.p0i8.i64</span><span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">align</span> <span class=\"m\">16</span> <span class=\"nv nv-Anonymous\">%5</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">align</span> <span class=\"m\">4</span> <span class=\"nv nv-Anonymous\">%6</span><span class=\"p\">,</span> <span class=\"k\">i64</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n</pre></div>",
        "id": 172758935,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565266459
    },
    {
        "content": "<p>we should call it with a length of <code>4 * sizeof(f32) == 16</code> bytes</p>",
        "id": 172758950,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565266480
    },
    {
        "content": "<p>that fixes the bug, now the question is, where is this coming from</p>",
        "id": 172758979,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565266519
    },
    {
        "content": "<p>there's no <code>memcpy</code> in the MIR, is it being generated by the simd intrinsics?</p>",
        "id": 172762930,
        "sender_full_name": "oli",
        "timestamp": 1565269939
    },
    {
        "content": "<p>@oli  no, it is maybe generated by <code>move</code> in the mir ?</p>",
        "id": 172764177,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565270837
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">build_array</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"p\">[</span><span class=\"kt\">f32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">S</span><span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">  </span><span class=\"n\">S</span>::<span class=\"o\">&lt;</span><span class=\"mi\">4</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 172764207,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565270864
    },
    {
        "content": "<p>that reproduces the issue</p>",
        "id": 172764231,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565270882
    },
    {
        "content": "<p>the layout of a simd type is not queried anywhere</p>",
        "id": 172764288,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565270905
    },
    {
        "content": "<p>when generating this incorrect LLVM-IR for it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">define</span> <span class=\"k\">void</span> <span class=\"vg\">@build_array</span><span class=\"p\">(&lt;</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"k\">float</span><span class=\"p\">&gt;*</span> <span class=\"k\">noalias</span> <span class=\"k\">nocapture</span> <span class=\"k\">sret</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">16</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"k\">float</span><span class=\"p\">]*</span> <span class=\"k\">noalias</span> <span class=\"k\">nocapture</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">16</span><span class=\"p\">)</span> <span class=\"nv\">%x</span><span class=\"p\">)</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv\">%_2</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"k\">float</span><span class=\"p\">],</span> <span class=\"k\">align</span> <span class=\"m\">4</span>\n  <span class=\"nv nv-Anonymous\">%1</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"k\">float</span><span class=\"p\">]*</span> <span class=\"nv\">%_2</span> <span class=\"k\">to</span> <span class=\"k\">i8</span><span class=\"p\">*</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.lifetime.start.p0i8</span><span class=\"p\">(</span><span class=\"k\">i64</span> <span class=\"m\">16</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">)</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"k\">float</span><span class=\"p\">]*</span> <span class=\"nv\">%_2</span> <span class=\"k\">to</span> <span class=\"k\">i8</span><span class=\"p\">*</span>\n  <span class=\"nv nv-Anonymous\">%3</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"k\">float</span><span class=\"p\">]*</span> <span class=\"nv\">%x</span> <span class=\"k\">to</span> <span class=\"k\">i8</span><span class=\"p\">*</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.memcpy.p0i8.p0i8.i64</span><span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">align</span> <span class=\"m\">4</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">align</span> <span class=\"m\">4</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span> <span class=\"k\">i64</span> <span class=\"m\">16</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n  <span class=\"nv nv-Anonymous\">%4</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"p\">&lt;</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"k\">float</span><span class=\"p\">&gt;*</span> <span class=\"nv nv-Anonymous\">%0</span> <span class=\"k\">to</span> <span class=\"k\">float</span><span class=\"p\">*</span>\n  <span class=\"nv nv-Anonymous\">%5</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"k\">float</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%4</span> <span class=\"k\">to</span> <span class=\"k\">i8</span><span class=\"p\">*</span>\n  <span class=\"nv nv-Anonymous\">%6</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"k\">float</span><span class=\"p\">]*</span> <span class=\"nv\">%_2</span> <span class=\"k\">to</span> <span class=\"k\">i8</span><span class=\"p\">*</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.memcpy.p0i8.p0i8.i64</span><span class=\"p\">(</span><span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">align</span> <span class=\"m\">16</span> <span class=\"nv nv-Anonymous\">%5</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"k\">align</span> <span class=\"m\">4</span> <span class=\"nv nv-Anonymous\">%6</span><span class=\"p\">,</span> <span class=\"k\">i64</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n  <span class=\"nv nv-Anonymous\">%7</span> <span class=\"p\">=</span> <span class=\"k\">bitcast</span> <span class=\"p\">[</span><span class=\"m\">4</span> <span class=\"k\">x</span> <span class=\"k\">float</span><span class=\"p\">]*</span> <span class=\"nv\">%_2</span> <span class=\"k\">to</span> <span class=\"k\">i8</span><span class=\"p\">*</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@llvm.lifetime.end.p0i8</span><span class=\"p\">(</span><span class=\"k\">i64</span> <span class=\"m\">16</span><span class=\"p\">,</span> <span class=\"k\">i8</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%7</span><span class=\"p\">)</span>\n  <span class=\"k\">ret</span> <span class=\"k\">void</span>\n<span class=\"p\">}</span>\n</pre></div>",
        "id": 172764324,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565270934
    },
    {
        "content": "<p>(note that the second memcpy only copies 4 bytes into the vector, for whatever reason</p>",
        "id": 172764370,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565270957
    },
    {
        "content": "<p>the mir i get is</p>\n<div class=\"codehilite\"><pre><span></span>fn  build_array(_1: [f32; 4]) -&gt; S&lt;4usize&gt; {\n    let mut _0: S&lt;4usize&gt;;               // return place in scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs:14:36: 14:40\n    let mut _2: [f32; 4];                // in scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs:16:12: 16:13\n\n    bb0: {\n        StorageLive(_2);                 // bb0[0]: scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs:16:12: 16:13\n        _2 = _1;                         // bb0[1]: scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs:16:12: 16:13\n        (_0.0: [f32; 4]) = move _2;      // bb0[2]: scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs:16:5: 16:14\n        StorageDead(_2);                 // bb0[3]: scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs:16:13: 16:14\n        return;                          // bb0[4]: scope 0 at /Users/gnzlbg/projects/sideprojects/rust/src/test/codegen/simd-intrinsic/simd-intrinsic-transmute-array.rs:17:2: 17:2\n    }\n}\n</pre></div>",
        "id": 172764713,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565271139
    },
    {
        "content": "<p>So <code>(_0.0: [f32; 4]) = move _2; </code> is what I'd say is geenrating the memcpy</p>",
        "id": 172764738,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565271167
    },
    {
        "content": "<p>What I don't understand is why the layout of S&lt;4usize&gt; is not computed anywhere</p>",
        "id": 172765000,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565271344
    },
    {
        "content": "<p>I'd suppose that to lower that to LLVM one must compute the layout of <code>S</code></p>",
        "id": 172765080,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565271372
    },
    {
        "content": "<p>how are you checking that it's not being computed?</p>",
        "id": 172765217,
        "sender_full_name": "oli",
        "timestamp": 1565271513
    },
    {
        "content": "<p>I have an <code>eprintln!</code> in the Layout pattern for it</p>",
        "id": 172765429,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565271700
    },
    {
        "content": "<p>when building other code it shows, when building this particular test it does not</p>",
        "id": 172765445,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565271721
    },
    {
        "content": "<p>maybe instead of fetching the layout, some code is calling <code>simd_size</code> and <code>simd_type</code> and doing some manual layout computation for this ?</p>",
        "id": 172765512,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565271756
    },
    {
        "content": "<p>I'm trying to figure out where the memcpys are generated so that i can try to trace things back</p>",
        "id": 172765531,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565271781
    },
    {
        "content": "<p>but grepping for \"move\" isn't super helpful</p>",
        "id": 172765546,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565271794
    },
    {
        "content": "<p>well... <code>Operand::Move</code></p>",
        "id": 172765557,
        "sender_full_name": "oli",
        "timestamp": 1565271810
    },
    {
        "content": "<p>ok, so the layout was called</p>",
        "id": 172779761,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565281485
    },
    {
        "content": "<p>compiletest without --verbose swallows eprintln statements from rustc, and logs</p>",
        "id": 172779780,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565281498
    },
    {
        "content": "<p>the layout returned is correct</p>",
        "id": 172779831,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565281541
    },
    {
        "content": "<p>I have no idea where the incorrect memcpy size might be coming from, or how to debug it, <code>Operand::Move</code> is quite abstract</p>",
        "id": 172779891,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565281570
    },
    {
        "content": "<p>the code in rustc_codegen_ssa does the obvious thing for Operand::Move</p>",
        "id": 172780224,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565281852
    },
    {
        "content": "<p>have you checked whether <code>std::mem::type_size</code> still returns the right thing for your type?</p>",
        "id": 172786465,
        "sender_full_name": "oli",
        "timestamp": 1565286379
    },
    {
        "content": "<p>checking that right now</p>",
        "id": 172790175,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565288725
    },
    {
        "content": "<p>i published the branch here: <a href=\"https://github.com/gnzlbg/rust/tree/array_simd\" target=\"_blank\" title=\"https://github.com/gnzlbg/rust/tree/array_simd\">https://github.com/gnzlbg/rust/tree/array_simd</a></p>",
        "id": 172790194,
        "sender_full_name": "gnzlbg",
        "timestamp": 1565288741
    }
]