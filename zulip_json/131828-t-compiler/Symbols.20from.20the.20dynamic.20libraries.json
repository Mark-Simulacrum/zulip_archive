[
    {
        "content": "<p>Do we have a good unified way to tell if a declaration would come from a dynamic library? (i.e. <code>#[link(kind=\"various dynamic options\"]</code> on an extern block, shared generics from dynamic <code>--extern</code> libraries etc.)</p>",
        "id": 232190961,
        "sender_full_name": "nagisa",
        "timestamp": 1616963303
    },
    {
        "content": "<p>No, only the linker knows which symbol is defined where.</p>",
        "id": 232193212,
        "sender_full_name": "bjorn3",
        "timestamp": 1616965543
    },
    {
        "content": "<p>My understanding from issues such as <a href=\"https://github.com/rust-lang/rust/issues/65610\">https://github.com/rust-lang/rust/issues/65610</a> is that rustc must have knowledge which symbols come from what libraries. Otherwise it'll fail to correctly order the linker arguments or make public certain symbols or declarations.</p>",
        "id": 232193951,
        "sender_full_name": "nagisa",
        "timestamp": 1616966323
    },
    {
        "content": "<p>At least for some of them.</p>",
        "id": 232194893,
        "sender_full_name": "nagisa",
        "timestamp": 1616967270
    },
    {
        "content": "<p>I think there is such an association by <code>#[link]</code> as you say, and also at the crate level with a build script emitting <code>rustc-link-lib</code>, but the linker is not bound by any of that</p>",
        "id": 232200161,
        "sender_full_name": "cuviper",
        "timestamp": 1616973286
    },
    {
        "content": "<p>The reason why I am asking this is because I'm looking for opportunities to add <code>dso_local</code> annotations. I tried adapting the logic clang has for this, but that logic doesn't really work at all for the purposes of Rust.</p>",
        "id": 232200267,
        "sender_full_name": "nagisa",
        "timestamp": 1616973378
    },
    {
        "content": "<p>primarily hitting cases like rust pulling in definitions of generic monomorphizations in other crates.</p>",
        "id": 232200281,
        "sender_full_name": "nagisa",
        "timestamp": 1616973400
    },
    {
        "content": "<blockquote>\n<p>The reason why I am asking this is because I'm looking for opportunities to add dso_local annotations.</p>\n</blockquote>\n<p>Doesn't LLVM adds them automatically based on visibilities, etc?<br>\nI remember reading that code when documenting TLS models (LLVM can chose a more optimal TLS model for DSO local symbols), and the DSO local property was calculated from many inputs, IIRC.</p>",
        "id": 232230281,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1617004215
    },
    {
        "content": "<p>Apparently not anymore. In llvm 12 some of that logic was moved away from llvm into clang which broke some of the users.</p>",
        "id": 232251682,
        "sender_full_name": "nagisa",
        "timestamp": 1617016777
    },
    {
        "content": "<p>It's also no longer just a hint contrary to what langref claims it seems.</p>",
        "id": 232252067,
        "sender_full_name": "nagisa",
        "timestamp": 1617017002
    }
]