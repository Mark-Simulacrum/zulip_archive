[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> <br>\nCould you clarify a couple of details regarding that option?</p>",
        "id": 177107343,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569972045
    },
    {
        "content": "<hr>\n<p>Can the compiler rely on metadata in the host and target versions of the proc macro library being the same?<br>\nBy metadata I mean things like name, edition, etc. (Everything beside the target, basically.)</p>",
        "id": 177107462,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569972137
    },
    {
        "content": "<p>In theory, these two crates are loaded using two independent crate searches and you can place crates with entirely different contents to be found by those searches.<br>\nOn the other hand that's certainly not an intended use.</p>",
        "id": 177107688,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569972351
    },
    {
        "content": "<p>Looks like right now this kind of metadata is almost always used from the target version, except when it isn't (?!), e.g. for the crate edition in <code>fn load_proc_macro</code>.</p>",
        "id": 177107929,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569972569
    },
    {
        "content": "<p>I'm not personally familiar with the rustc implementation of this flag, just the cargo part for myself</p>",
        "id": 177108033,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569972631
    },
    {
        "content": "<p>Is this a bug? Should the edition be taken from the target version as well?<br>\nOtherwise it looks like the host version is used <em>only</em> for <code>dlsym</code>ing.</p>",
        "id": 177108041,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569972643
    },
    {
        "content": "<p>But in cargo at least and I believe the expected use is that these are compiled exactly the same way except for target</p>",
        "id": 177108048,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569972653
    },
    {
        "content": "<p>Yeah, cargo reflects the intended use.</p>",
        "id": 177108066,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569972674
    },
    {
        "content": "<p>I haven't actually reviewed the rustc implementation at all (or I forget it), so I'll defer to zoxc or when I'm next at a computer tomorrow</p>",
        "id": 177108097,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1569972716
    },
    {
        "content": "<p>They should be the same except for the target, but I did try to only use stuff from the target libraries for everything but executing code</p>",
        "id": 177108140,
        "sender_full_name": "Zoxc",
        "timestamp": 1569972724
    },
    {
        "content": "<blockquote>\n<p>only use stuff from the target libraries for everything but executing code</p>\n</blockquote>\n<p>This matches the description in <a href=\"https://github.com/rust-lang/rust/pull/58013#issuecomment-459805962\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58013#issuecomment-459805962\">https://github.com/rust-lang/rust/pull/58013#issuecomment-459805962</a>.<br>\nThen the edition bit must be a bug.</p>",
        "id": 177108289,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569972881
    },
    {
        "content": "<p>Nice, if it's a bug, then it simplifies things.</p>",
        "id": 177108325,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569972931
    },
    {
        "content": "<p>Where is the edition related code?</p>",
        "id": 177108649,
        "sender_full_name": "Zoxc",
        "timestamp": 1569973280
    },
    {
        "content": "<p><code>fn load_proc_macro</code> in <code>decoder.rs</code>, the edition is taken from the <code>host_lib</code> metadata, while everything else is taken from <code>self.root</code> which is the target metadata.</p>",
        "id": 177108802,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569973419
    },
    {
        "content": "<p>It kinda make sense since <code>SyntaxExtension</code> is the thing executing the macros. Not sure what it is used for though. Also different editions between the target and host isn't really a supported use case =P</p>",
        "id": 177109152,
        "sender_full_name": "Zoxc",
        "timestamp": 1569973736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> <br>\nOne more question: why is <code>-Z dual-proc-macros</code> required only in rustc bootstrap?<br>\nThe situation \"cross compile a library which uses (possibly reexports) a proc macro crate\" seems to happen during any cross-compilation?<br>\nIn this case the host version of the proc macro crate is needed to run code during the build, and the target version is needed to read metadata for reexports etc.</p>",
        "id": 177130636,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570004588
    },
    {
        "content": "<p>How is rustc different?</p>",
        "id": 177130649,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570004604
    },
    {
        "content": "<p>Also, what happens if we read metadata from the host version? How exactly is it incompatible? (If at least logically the metadata in both host and target versions is supposed to be the same.)</p>",
        "id": 177130750,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570004727
    },
    {
        "content": "<p>Also, do the host and target versions have the same <code>CrateDisambiguator</code> or different?<br>\n(I'll investigate some of this myself in a couple of days, but leaving questions in the meantime won't hurt, I guess.)</p>",
        "id": 177131142,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570005143
    },
    {
        "content": "<blockquote>\n<p>How is rustc different?</p>\n</blockquote>\n<p>I might be wrong -- and would appreciate <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> confirming -- but I _think_ the difference is that rustc is \"unique\" in that we have plugins that link against it and want to use the proc macros from its sysroot</p>",
        "id": 177140489,
        "sender_full_name": "simulacrum",
        "timestamp": 1570015205
    },
    {
        "content": "<p>However, if we were to just compile them for the host, then that wouldn't work if the plugin is built for the target</p>",
        "id": 177140498,
        "sender_full_name": "simulacrum",
        "timestamp": 1570015229
    },
    {
        "content": "<p>Though I suspect that might be rather a bug in the compiler (i.e., we should never need to \"run\" proc macros anywhere but the host) and dual-proc-macros just patch over it</p>",
        "id": 177140535,
        "sender_full_name": "simulacrum",
        "timestamp": 1570015301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Normally cargo cross compiles the library only then links that to a proc macro crate for the host. This means that you cannot copy the library over to the target and use it with a Rust compiler running on that target.</p>",
        "id": 177174908,
        "sender_full_name": "Zoxc",
        "timestamp": 1570038719
    },
    {
        "content": "<p>why does the library contain any references to the proc macro?</p>",
        "id": 177175849,
        "sender_full_name": "simulacrum",
        "timestamp": 1570039254
    },
    {
        "content": "<p>I would expect us to compile those out so to speak, i.e., that they only need to be available at build time</p>",
        "id": 177175868,
        "sender_full_name": "simulacrum",
        "timestamp": 1570039271
    },
    {
        "content": "<p>The rlib or dylib metadata will reference the proc macro, and it has to for reexports to work.</p>",
        "id": 177179134,
        "sender_full_name": "Zoxc",
        "timestamp": 1570041363
    },
    {
        "content": "<blockquote>\n<p>and use it with a Rust compiler running on that target.</p>\n</blockquote>\n<p>Aha, this seems to be the key missing piece - there are actually <em>two</em> compilers running on two different targets!<br>\nAnd they both work with a single library.<br>\nI'll try to write some pseudo-code below to understand the exact configuration.</p>",
        "id": 177179774,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570041790
    },
    {
        "content": "<hr>\n<p>There are two libraries <code>PM</code> (proc macro) and <code>L</code> (uses the proc macro and reexports it).<br>\nThere are two targets <code>T1</code> and <code>T2</code>.</p>",
        "id": 177180078,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570041982
    },
    {
        "content": "<p>When cross-compiling <code>L</code> from <code>T1</code> to <code>T2</code> we have:<br>\n- Compiler built for <code>T1</code> and running on it.<br>\n- Library <code>PM</code> built for <code>T1</code>.<br>\n- Library <code>L</code> built for <code>T2</code>, to run proc macros the compiler-T1 <code>dlsym</code>s code from <code>PM-T1</code>, to reexport proc macros the compiler-T1 reads metadata from <code>PM-T1</code>.</p>",
        "id": 177180585,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570042320
    },
    {
        "content": "<p>(That's a normal, non-rustc story.)</p>",
        "id": 177181047,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570042603
    },
    {
        "content": "<p>Now rustc story when we have a second compiler.<br>\n- The second compiler is built for <code>T2</code> and is running on it.<br>\n- We have our previously built library <code>L-T2</code>.<br>\n- Using <code>L-T2</code> - to run proc macros reexported by <code>L-T2</code> the compiler-T2 <code>dlsyms</code>s code from <code>PM-T2</code>, to reexport proc macros reexported by <code>L-T2</code> further the compiler-T2 reads metadata from <code>PM-T2</code>.</p>",
        "id": 177181546,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570042930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> <br>\nIs the description above correct?<br>\nIf it's correct, then we need to produce <code>PM-T2</code> at some point, and that explains why we need <code>-Z dual-proc-macros</code> for Cargo.</p>",
        "id": 177181669,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570043028
    },
    {
        "content": "<p>It doesn't explain why we need <code>-Z dual-proc-macros</code> for <code>rustc</code> though, in both cases we can dlsym and metadata-read the same library with target matching the compiler's one (aka host).</p>",
        "id": 177181822,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570043129
    },
    {
        "content": "<p>So am I right in saying that we wouldn't need this if we never re-exported proc macros? i.e., if there was a direct dep on any proc macro crates. That seems like a reasonable ask (to me); basically saying \"we don't ship proc macros in sysroot\"</p>",
        "id": 177184281,
        "sender_full_name": "simulacrum",
        "timestamp": 1570044952
    },
    {
        "content": "<p>we'd need some sort of autopublish or w/e business if clippy etc want to directly use rustc_macros for example, but I imagine that would be not too difficult.</p>",
        "id": 177184367,
        "sender_full_name": "simulacrum",
        "timestamp": 1570044989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Not quite, the <code>L-T2</code> library built the \"normal\" way directly links to the <code>PM-T1</code> proc macro, so it can't be used with the compiler on <code>T2</code>, since it can't run <code>PM-T1</code>. We need to cross compile <code>L-T2</code> using <code>-Z dual-proc-macros</code>, where cargo builds both <code>PM-T1</code> and <code>PM-T2</code>, rustc loads metadata for both; uses <code>PM-T1</code> to run the macros, but only links the resulting <code>L-T2</code> to <code>PM-T2</code>. Then we have <code>L-T2</code> and <code>PM-T2</code> as if they were built by rustc running on <code>T2</code>.</p>",
        "id": 177184876,
        "sender_full_name": "Zoxc",
        "timestamp": 1570045349
    },
    {
        "content": "<blockquote>\n<p>the <code>L-T2</code> library built the \"normal\" way directly links to the <code>PM-T1</code> proc macro</p>\n</blockquote>\n<p>Why does it need to <em>link</em> to it?<br>\nSo far we've been talking only about the compiler <code>dlopen</code>ing/<code>dlsym</code>ing it and reading metadata from it, but not about linking to it.</p>",
        "id": 177186495,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570046411
    },
    {
        "content": "<p>When I say link, I mean that the metadata refers to it</p>",
        "id": 177186639,
        "sender_full_name": "Zoxc",
        "timestamp": 1570046487
    },
    {
        "content": "<blockquote>\n<p>I mean that the metadata refers to it</p>\n</blockquote>\n<p>Hmm, is it somehow hardcoded inside <code>L-T2</code> through paths or fingerprints?<br>\nI thought <code>L-T2</code> refers to something more flexible like \"just something named <code>PM</code>\" and while processing <code>L-T2</code> we can find <code>PM-T1</code> through crate search if the compiler is <code>T1</code> and can find <code>PM-T2</code> thorough crate search if the compiler is <code>T2</code>.</p>",
        "id": 177187811,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570047190
    },
    {
        "content": "<p><code>L-T2</code> will link to the proc macro with a specific crate disambiguator (and probably target triple too)</p>",
        "id": 177187983,
        "sender_full_name": "Zoxc",
        "timestamp": 1570047305
    },
    {
        "content": "<p>We can have multiple versions of a proc macro in the search path (though <code>-Z dual-proc-macros</code> doesn't support that)</p>",
        "id": 177188034,
        "sender_full_name": "Zoxc",
        "timestamp": 1570047351
    },
    {
        "content": "<p>Since if there's multiple proc macro crates for the host, it won't know which ones corresponds to the proc macro crate for the target</p>",
        "id": 177188179,
        "sender_full_name": "Zoxc",
        "timestamp": 1570047423
    },
    {
        "content": "<p>Ok, I think I understand it now.<br>\nWhat a mess -_-</p>",
        "id": 177188879,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570047898
    },
    {
        "content": "<p>I think it would be interesting to find a way to refer to \"flexible <code>PM</code>\" from <code>L-T2</code> instead of hardcoding, so it could resolve to different crates (<code>PM-T1</code> or <code>PM-T2</code>) when <code>L-T2</code> is processed by different compilers (<code>T1</code> or <code>T2</code> respectively).<br>\n(In that case we wouldn't need <code>-Z dual-proc-macros</code> at least on the <code>rustc</code> side.)</p>",
        "id": 177189192,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570048092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> </p>\n<blockquote>\n<p>So am I right in saying that we wouldn't need this if we never re-exported proc macros?</p>\n</blockquote>\n<p>Looks like that, except the compiler should known about it somehow (e.g. we can use <code>rustc_macros</code> only through <code>#[no_link] extern crate rustc_macros</code> or something).</p>",
        "id": 177190684,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570049034
    },
    {
        "content": "<p>hm, I guess we have e.g. <code>serde = { version = \"1\", features = [\"derive\"] }</code> though in deps which might make this not possible</p>",
        "id": 177190769,
        "sender_full_name": "simulacrum",
        "timestamp": 1570049074
    },
    {
        "content": "<p>IIRC we have a special mode in rustc_metadata for \"just macro uses\" which maybe isn't fully applicable to proc macros, but might be relevant here?</p>",
        "id": 177190822,
        "sender_full_name": "simulacrum",
        "timestamp": 1570049120
    },
    {
        "content": "<p>Ah, of course, <code>rustc_macros</code> is not the only proc macro thing we need.</p>",
        "id": 177190829,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570049125
    },
    {
        "content": "<p>though -- I might be wrong here -- but is it true that regular crates build just fine? e.g. if clippy et al used rustc_macros by path and rebuilt it then we'd work just fine</p>",
        "id": 177190941,
        "sender_full_name": "simulacrum",
        "timestamp": 1570049169
    },
    {
        "content": "<p>(and same with serde, etc.)</p>",
        "id": 177190952,
        "sender_full_name": "simulacrum",
        "timestamp": 1570049181
    },
    {
        "content": "<blockquote>\n<p>IIRC we have a special mode in rustc_metadata for \"just macro uses\"</p>\n</blockquote>\n<p>Yes, that's exactly what I've been talking about - <code>DepKind::UnexportedMacrosOnly</code>, which is currently expressible only as <code>#[no_link] extern crate</code> in the language.</p>",
        "id": 177190977,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1570049197
    },
    {
        "content": "<p>ah okay</p>",
        "id": 177190991,
        "sender_full_name": "simulacrum",
        "timestamp": 1570049205
    },
    {
        "content": "<p>that is, the problem only arises if you re-export a proc macro from a precompiled dependency (i.e., in the sysroot)</p>",
        "id": 177191006,
        "sender_full_name": "simulacrum",
        "timestamp": 1570049218
    },
    {
        "content": "<p>if you re-export a proc macro normally then things work fine</p>",
        "id": 177191023,
        "sender_full_name": "simulacrum",
        "timestamp": 1570049234
    },
    {
        "content": "<p>Using webassembly for proc macros would also avoid this =P</p>",
        "id": 177191313,
        "sender_full_name": "Zoxc",
        "timestamp": 1570049440
    }
]