[
    {
        "content": "<p>So i'm trying to use rust-analyzer with the compiler</p>",
        "id": 192323022,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585605712
    },
    {
        "content": "<p>In order to properly integrate, I need a way to run <code>x.py check</code> with options like:</p>\n<p>--workspace --message-format=json --manifest-path /home/nmatsakis/versioned/rust-3/Cargo.toml --all-targets</p>",
        "id": 192323086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585605735
    },
    {
        "content": "<p>in particular the json format</p>",
        "id": 192323093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585605739
    },
    {
        "content": "<p>but I can't seem to find equivalent options to x.py check</p>",
        "id": 192323102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585605748
    },
    {
        "content": "<p>is there some way to thread those options through that I'm missing?</p>",
        "id": 192323123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585605763
    },
    {
        "content": "<p><code>x.py --error-format json</code> gives me some strange errors:</p>\n<div class=\"codehilite\"><pre><span></span>&gt; ./x.py check --error-format json\nUpdating only changed submodules\nSubmodules updated in <span class=\"m\">0</span>.03 seconds\n    Finished dev <span class=\"o\">[</span>unoptimized<span class=\"o\">]</span> target<span class=\"o\">(</span>s<span class=\"o\">)</span> in <span class=\"m\">0</span>.17s\nChecking rustdoc artifacts <span class=\"o\">(</span>x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu<span class=\"o\">)</span>\nChecking std artifacts <span class=\"o\">(</span>x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu<span class=\"o\">)</span>\nerror: invalid message format specifier: <span class=\"sb\">`</span>json-diagnostic-json<span class=\"sb\">`</span>\n<span class=\"nb\">command</span> did not execute successfully: <span class=\"s2\">&quot;/home/nmatsakis/versioned/rust-3/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot;</span> <span class=\"s2\">&quot;check&quot;</span> <span class=\"s2\">&quot;--target&quot;</span> <span class=\"s2\">&quot;x86_64-unknown-linux-gnu&quot;</span> <span class=\"s2\">&quot;-Zbinary-dep-depinfo&quot;</span> <span class=\"s2\">&quot;-j&quot;</span> <span class=\"s2\">&quot;16&quot;</span> <span class=\"s2\">&quot;--release&quot;</span> <span class=\"s2\">&quot;--features&quot;</span> <span class=\"s2\">&quot;panic-unwind backtrace compiler-builtins-c&quot;</span> <span class=\"s2\">&quot;--manifest-path&quot;</span> <span class=\"s2\">&quot;/home/nmatsakis/versioned/rust-3/src/libtest/Cargo.toml&quot;</span> <span class=\"s2\">&quot;--message-format&quot;</span> <span class=\"s2\">&quot;json-render-diagnostics,json-diagnostic-json&quot;</span>\nexpected success, got: <span class=\"nb\">exit</span> code: <span class=\"m\">101</span>\nfailed to run: /home/nmatsakis/versioned/rust-3/build/bootstrap/debug/bootstrap check --error-format json\nBuild completed unsuccessfully in <span class=\"m\">0</span>:00:01\n</pre></div>",
        "id": 192323264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585605862
    },
    {
        "content": "<p>we do not currently support passing cargo flags like that</p>",
        "id": 192324751,
        "sender_full_name": "simulacrum",
        "timestamp": 1585606712
    },
    {
        "content": "<p>try <code>RUSTFLAGS=</code> perhaps? Not sure if that'll work though</p>",
        "id": 192324801,
        "sender_full_name": "simulacrum",
        "timestamp": 1585606743
    },
    {
        "content": "<p>hmmm interesting</p>",
        "id": 192324861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585606793
    },
    {
        "content": "<p>didn't seem to work</p>",
        "id": 192324922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585606825
    },
    {
        "content": "<p>well it's probably that the rustc flag is something different</p>",
        "id": 192324931,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585606836
    },
    {
        "content": "<p>to be clear, I don't really need to be able to pass <em>general</em> flags</p>",
        "id": 192324940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585606846
    },
    {
        "content": "<p>(I mean that'd be great but..)</p>",
        "id": 192324945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585606852
    },
    {
        "content": "<p>mostly I just want the json output I think</p>",
        "id": 192324951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585606856
    },
    {
        "content": "<p>maybe i'll add it</p>",
        "id": 192324957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585606863
    },
    {
        "content": "<p>I'd be happy to support JSON output , yeah</p>",
        "id": 192327206,
        "sender_full_name": "simulacrum",
        "timestamp": 1585608538
    },
    {
        "content": "<p>I think we already get it in fact</p>",
        "id": 192327213,
        "sender_full_name": "simulacrum",
        "timestamp": 1585608550
    },
    {
        "content": "<p>so it should be pretty straightforward hopefully</p>",
        "id": 192327214,
        "sender_full_name": "simulacrum",
        "timestamp": 1585608557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/x.2Epy.20error.20format/near/192324751\" title=\"#narrow/stream/131828-t-compiler/topic/x.2Epy.20error.20format/near/192324751\">said</a>:</p>\n<blockquote>\n<p>we do not currently support passing cargo flags like that</p>\n</blockquote>\n<p>so, reading the source, there <em>is</em> <code>CARGOFLAGS</code>, but since we append <code>--message-format=json-render-diagnostics</code>, adding <code>--message-format=json</code> seems to have no effect</p>",
        "id": 192336052,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585616857
    },
    {
        "content": "<p>ok, I added some <em>really hack</em> code to support <code>./x.py --json-output</code> and that... seems to work</p>",
        "id": 192336778,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585617627
    },
    {
        "content": "<p>which is.. pretty nifty</p>",
        "id": 192336782,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585617637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'd love a PR, especially if you have the config options to get rust-analyzer auto checking working in the rustc tree :)</p>",
        "id": 192378602,
        "sender_full_name": "simulacrum",
        "timestamp": 1585655957
    },
    {
        "content": "<p>(I can take a look at cleaning things up myself with the initial branch, too)</p>",
        "id": 192378633,
        "sender_full_name": "simulacrum",
        "timestamp": 1585655982
    },
    {
        "content": "<p>right now it still takes a bit of manual fiddling, but we could fix that</p>",
        "id": 192417989,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585673811
    },
    {
        "content": "<p>what I had to do was</p>",
        "id": 192417994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585673813
    },
    {
        "content": "<p>create a <code>cargo-rustc-build</code> executable that does</p>",
        "id": 192418005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585673823
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>./x.py check --json-output\n</pre></div>",
        "id": 192418023,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585673830
    },
    {
        "content": "<p>( json-output being the flag I added )</p>",
        "id": 192418033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585673835
    },
    {
        "content": "<p>and then configure the cargo command for rustc directories to run <code>rustc-build</code> as the command</p>",
        "id": 192418086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585673861
    },
    {
        "content": "<p>I could open a PR to add the flag and then open a rustc-dev-guide PR explaining the setup</p>",
        "id": 192418106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585673870
    },
    {
        "content": "<p>there's probably better ways to do it</p>",
        "id": 192418179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585673884
    },
    {
        "content": "<p>in particular, it might be nice if we were able to \"pipe through\" the options that rust-analyzer is giving us, instead of me just hardcoding things when invoking <code>x.py</code></p>",
        "id": 192418235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585673914
    },
    {
        "content": "<p>yeah, I think I'd just want the flag for now, we can think about expanding it further</p>",
        "id": 192419871,
        "sender_full_name": "simulacrum",
        "timestamp": 1585674655
    },
    {
        "content": "<p>I've been doing some thinking recently about how x.py should behave better for this sort of use case</p>",
        "id": 192419939,
        "sender_full_name": "simulacrum",
        "timestamp": 1585674686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> rust-analyzer's side of implementaiton is here: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/3825\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/3825\">https://github.com/rust-analyzer/rust-analyzer/pull/3825</a></p>\n<p>Now it is possible to set arbitrary command for on-the-fly error checking.</p>",
        "id": 192657707,
        "sender_full_name": "matklad",
        "timestamp": 1585830764
    },
    {
        "content": "<p>The relevant config should look like this: </p>\n<div class=\"codehilite\"><pre><span></span>14:36:43|~/projects/rust|master✓\nλ bat -p ./.vscode/settings.json\n{\n    &quot;rust-analyzer.checkOnSave.overrideCommand&quot;: [\n        &quot;./x.py&quot;,\n        &quot;check&quot;,\n        &quot;--json-output&quot;\n    ]\n}\n</pre></div>",
        "id": 192658317,
        "sender_full_name": "matklad",
        "timestamp": 1585831076
    },
    {
        "content": "<p>Great! We should definitely get json-output upstreamed in that case.</p>",
        "id": 192658890,
        "sender_full_name": "simulacrum",
        "timestamp": 1585831319
    },
    {
        "content": "<p>I wonder if <code>--error-output=json</code> would be a better thing to expose this as or if it really doesn't matter</p>",
        "id": 192668565,
        "sender_full_name": "eddyb",
        "timestamp": 1585835884
    },
    {
        "content": "<p>uh, well, I mean, we could expose the error-format option, though I don't know to what extent (i.e. I wouldn't want to necessarily spend time supporting all the permutations, just JSON for rust-analyzer, I think)</p>",
        "id": 192668705,
        "sender_full_name": "simulacrum",
        "timestamp": 1585835950
    },
    {
        "content": "<p>hmm are there still permutations? I was under the impression that all the JSON flags are under <code>--json</code> now</p>",
        "id": 192668938,
        "sender_full_name": "eddyb",
        "timestamp": 1585836031
    },
    {
        "content": "<p>ah, perhaps</p>",
        "id": 192668960,
        "sender_full_name": "simulacrum",
        "timestamp": 1585836039
    },
    {
        "content": "<p>I meant that rustbuild itself also needs JSON</p>",
        "id": 192668974,
        "sender_full_name": "simulacrum",
        "timestamp": 1585836047
    },
    {
        "content": "<p>(just from Cargo though)</p>",
        "id": 192668988,
        "sender_full_name": "simulacrum",
        "timestamp": 1585836052
    },
    {
        "content": "<p>but if it's e.g. a match statement that just always enables cargo's json as needed, then I'm happy</p>",
        "id": 192669046,
        "sender_full_name": "simulacrum",
        "timestamp": 1585836085
    },
    {
        "content": "<p>I'll open a PR against rustbuild, I don't care what the option is</p>",
        "id": 192669177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585836139
    },
    {
        "content": "<p>yeah just some groundwork (whatever you have locally) would be helpful, I can polish it up if needed -- though I don't care too much how things look if they work :)</p>",
        "id": 192669307,
        "sender_full_name": "simulacrum",
        "timestamp": 1585836209
    },
    {
        "content": "<p><code>--error-format=</code> would be nice because I think it could allow using the shorter errors but idk if those have been made to work</p>",
        "id": 192671021,
        "sender_full_name": "eddyb",
        "timestamp": 1585836977
    },
    {
        "content": "<p>I think they hide the labels instead of rendering them differently, which is a shame</p>",
        "id": 192671058,
        "sender_full_name": "eddyb",
        "timestamp": 1585836994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> opened <a href=\"https://github.com/rust-lang/rust/pull/70698/\" title=\"https://github.com/rust-lang/rust/pull/70698/\">https://github.com/rust-lang/rust/pull/70698/</a></p>",
        "id": 192674516,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585838363
    }
]