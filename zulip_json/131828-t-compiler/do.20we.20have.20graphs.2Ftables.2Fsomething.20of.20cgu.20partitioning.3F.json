[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I was thinking during the meeting -- to what extent would it be helpful to have some visualization (at least a set of bullet-y lists) of the CGUs we ended up with and how we got there?</p>",
        "id": 198451769,
        "sender_full_name": "simulacrum",
        "timestamp": 1590159807
    },
    {
        "content": "<p>Do we dump this somehow today?</p>",
        "id": 198451780,
        "sender_full_name": "simulacrum",
        "timestamp": 1590159813
    },
    {
        "content": "<p>Like, has anyone looked at the CGUs for say serde and said \"hm these make sense\"</p>",
        "id": 198451814,
        "sender_full_name": "simulacrum",
        "timestamp": 1590159830
    },
    {
        "content": "<p><code>-Z print-mono-items={lazy,eager}</code> prints the mono-items and the cgu(s) that they're in, IIRC</p>",
        "id": 198451878,
        "sender_full_name": "davidtwco",
        "timestamp": 1590159845
    },
    {
        "content": "<p>I assume the print out is not in a format usable by graphviz though?</p>",
        "id": 198452093,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159960
    },
    {
        "content": "<p>I think having visualizations at hand would help a ton. Maybe we could show these from the perf runs reports. Like, having a button that pops up the visualization for this or that particular run?</p>",
        "id": 198452142,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590159966
    },
    {
        "content": "<p>not sure how much that would help/hinder analysis, but it seems worth considering</p>",
        "id": 198452168,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159982
    },
    {
        "content": "<p>yes, I ask this primarily to gauge whether they'd be useful for perf</p>",
        "id": 198452172,
        "sender_full_name": "simulacrum",
        "timestamp": 1590159984
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/do.20we.20have.20graphs.2Ftables.2Fsomething.20of.20cgu.20partitioning.3F/near/198452093\">said</a>:</p>\n<blockquote>\n<p>I assume the print out is not in a format usable by graphviz though?</p>\n</blockquote>\n<p>no, but all the information we'd need is there though, I think</p>",
        "id": 198452183,
        "sender_full_name": "davidtwco",
        "timestamp": 1590159988
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I don't think they show the merging strategy, or maybe I'm not seeing it</p>",
        "id": 198452249,
        "sender_full_name": "simulacrum",
        "timestamp": 1590160021
    },
    {
        "content": "<p>basically what I was thinking is sort of a \"tree\" where the initial set is at the bottom collapsing to ~16 at the top if that makes sense</p>",
        "id": 198452293,
        "sender_full_name": "simulacrum",
        "timestamp": 1590160049
    },
    {
        "content": "<p>Maybe we could dump detailed reports with a flag? Like... \"here's how we started, and this is how it looked after each merging\"</p>",
        "id": 198452325,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590160072
    },
    {
        "content": "<p>Oh, you're right - it wouldn't give you that - it would just tell you where things ended up; misread the initial message.</p>",
        "id": 198452372,
        "sender_full_name": "davidtwco",
        "timestamp": 1590160083
    },
    {
        "content": "<p>Yes, exactly what simulacrum said!</p>",
        "id": 198452387,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590160092
    },
    {
        "content": "<p>I think the end state is useful, but I imagine that the way there is also pretty key to understanding the decisions made</p>",
        "id": 198452400,
        "sender_full_name": "simulacrum",
        "timestamp": 1590160103
    },
    {
        "content": "<p>And to potentially spot weaknesses in the current scheme</p>",
        "id": 198452440,
        "sender_full_name": "Félix Fischer",
        "timestamp": 1590160124
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> <a href=\"#narrow/stream/131828-t-compiler/topic/do.20we.20have.20graphs.2Ftables.2Fsomething.20of.20cgu.20partitioning.3F/near/198451878\">said</a>:</p>\n<blockquote>\n<p><code>-Z print-mono-items={lazy,eager}</code> prints the mono-items and the cgu(s) that they're in, IIRC</p>\n</blockquote>\n<p>Oh, that's super useful! I've been using <code>RUSTC_LOG=rustc_mir::monomorphize::partitioning</code> which prints out similar data at each step of the algorithm.</p>",
        "id": 198452520,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590160170
    },
    {
        "content": "<p>the output looks like the following, for anyone who's interested and can't check:</p>\n<div class=\"codehilite\"><pre><span></span><code>MONO_ITEM fn alloc::alloc[0]::alloc[0] @@ 1nzjqubjkxlft6bh[External]\nMONO_ITEM fn alloc::alloc[0]::alloc_zeroed[0] @@ 1nzjqubjkxlft6bh[Internal]\n</code></pre></div>",
        "id": 198452863,
        "sender_full_name": "davidtwco",
        "timestamp": 1590160260
    },
    {
        "content": "<p>anyway, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> do you think exposing even just the raw dumps in perf somehow would be helpful?</p>",
        "id": 198453104,
        "sender_full_name": "simulacrum",
        "timestamp": 1590160346
    },
    {
        "content": "<p>I would love that honestly</p>",
        "id": 198453280,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590160444
    },
    {
        "content": "<p>Just getting the data out of rustc to look at isn't trivial</p>",
        "id": 198453296,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590160456
    },
    {
        "content": "<p>Although <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>'s flag should help quite a bit</p>",
        "id": 198453308,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590160470
    },
    {
        "content": "<p>The other thing I ended up doing was dumping the log output to a file and then using a graphical diff tool on it between runs</p>",
        "id": 198453361,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590160506
    },
    {
        "content": "<p>(especially in the incremental test case)</p>",
        "id": 198453378,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590160520
    },
    {
        "content": "<p>I've got the output of those flags for servo-script with and without polymorphisation in debug and release to try look into, not gotten to doing it yet.</p>",
        "id": 198453438,
        "sender_full_name": "davidtwco",
        "timestamp": 1590160555
    }
]