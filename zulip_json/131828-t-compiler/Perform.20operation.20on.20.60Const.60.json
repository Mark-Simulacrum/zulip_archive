[
    {
        "content": "<p>If I have a <code>ty::Const</code> and its type is <code>Int</code>, for instance, what's the correct way to perform an operation like <code>abs</code> on it? I just realised I've only ever dealt with consts abstractly, rather than manipulating them.</p>",
        "id": 212224618,
        "sender_full_name": "varkor",
        "timestamp": 1601820125
    },
    {
        "content": "<p>maybe by using <code>try_eval_usize</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 212224627,
        "sender_full_name": "lcnr",
        "timestamp": 1601820181
    },
    {
        "content": "<p>or for other integers looking at <code>ConstKind::Value</code> after calling <code>const_eval_resolve</code></p>",
        "id": 212224657,
        "sender_full_name": "lcnr",
        "timestamp": 1601820244
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> what's the best way to get the relevant integer rn while val tree is not yet implemented</p>",
        "id": 212224692,
        "sender_full_name": "lcnr",
        "timestamp": 1601820276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Perform.20operation.20on.20.60Const.60/near/212224627\">said</a>:</p>\n<blockquote>\n<p>maybe by using <code>try_eval_usize</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>Yeah, I was wondering whether there was a way to do it without evaluating, but maybe this is the most straightforward solution.</p>",
        "id": 212225234,
        "sender_full_name": "varkor",
        "timestamp": 1601821147
    },
    {
        "content": "<p>What do you want the constant for? It seems weird to me to do anything with consts without first trying to evaluate them</p>",
        "id": 212225252,
        "sender_full_name": "lcnr",
        "timestamp": 1601821199
    },
    {
        "content": "<p>esp when dealing with lazy normalization</p>",
        "id": 212225290,
        "sender_full_name": "lcnr",
        "timestamp": 1601821206
    },
    {
        "content": "<p>In the particular case I'm interested in, I can evaluate the constant, because I just want to produce the right string for the v0 mangling, but I was wondering how to go about it when that wasn't possible. Maybe the answer is: \"You never want to do this in practice anyway.\" :P</p>",
        "id": 212225435,
        "sender_full_name": "varkor",
        "timestamp": 1601821470
    },
    {
        "content": "<p>\"You never want to do this in practice anyway.\"</p>\n<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I think that this is the case, but maybe some forgotten arcane magic does require this</p>",
        "id": 212225541,
        "sender_full_name": "lcnr",
        "timestamp": 1601821635
    },
    {
        "content": "<p>You don't want do do this in practice indeed</p>",
        "id": 212226545,
        "sender_full_name": "oli",
        "timestamp": 1601823381
    },
    {
        "content": "<p>Have a look at the soon-to-be-removed const_deref (or deref_const? I can never remember) on how to do ops via the mir interpreter on arbitrary constants. But yea, I highly recommend not to do that and please ping me on any PRs that even remotely do something like that</p>",
        "id": 212226606,
        "sender_full_name": "oli",
        "timestamp": 1601823485
    },
    {
        "content": "<p>Also look at my scalar int PR for some stuff that should make const generics simpler soon</p>",
        "id": 212226616,
        "sender_full_name": "oli",
        "timestamp": 1601823516
    },
    {
        "content": "<p>Value trees are coming</p>",
        "id": 212226621,
        "sender_full_name": "oli",
        "timestamp": 1601823522
    },
    {
        "content": "<p>Winter, too, but that's a different story</p>",
        "id": 212226631,
        "sender_full_name": "oli",
        "timestamp": 1601823540
    },
    {
        "content": "<p>what's the scalar int PR?</p>",
        "id": 212226639,
        "sender_full_name": "lcnr",
        "timestamp": 1601823553
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/77227\">https://github.com/rust-lang/rust/pull/77227</a></p>",
        "id": 212226711,
        "sender_full_name": "oli",
        "timestamp": 1601823631
    },
    {
        "content": "<p>Oh wow, look at these beautiful numbers <a href=\"https://github.com/rust-lang/rust/pull/77390\">https://github.com/rust-lang/rust/pull/77390</a></p>",
        "id": 212226747,
        "sender_full_name": "oli",
        "timestamp": 1601823705
    },
    {
        "content": "<p>So much code removed and we get a perf improvement</p>",
        "id": 212226755,
        "sender_full_name": "oli",
        "timestamp": 1601823717
    },
    {
        "content": "<p>(The latter PR is assigned to you <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> btw, but feel free to reassign)</p>",
        "id": 212226823,
        "sender_full_name": "oli",
        "timestamp": 1601823817
    },
    {
        "content": "<p>these are some nice PRs if only I were comfortable with reviewing them <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 212227843,
        "sender_full_name": "lcnr",
        "timestamp": 1601825597
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Perform.20operation.20on.20.60Const.60/near/212226823\">said</a>:</p>\n<blockquote>\n<p>(The latter PR is assigned to you <span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> btw, but feel free to reassign)</p>\n</blockquote>\n<p>It's on my radar: I just need to schedule some time to look at it properly. I'll try to get to it soon!</p>",
        "id": 212241708,
        "sender_full_name": "varkor",
        "timestamp": 1601845406
    }
]