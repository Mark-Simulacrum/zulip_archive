[
    {
        "content": "<p>I'm going to do a bit of ICE triage right now. I think getting control over our database of ICE's is going to be more important than any other bit of triage I can do right now.</p>",
        "id": 167183453,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559564762
    },
    {
        "content": "<p>so lets see, here are the <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-ICE+-label%3AP-high+-label%3AP-medium+-label%3AP-low+sort%3Acreated-asc\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+label%3AI-ICE+-label%3AP-high+-label%3AP-medium+-label%3AP-low+sort%3Acreated-asc\">unprioritized I-ICE issues, oldest first</a>.</p>",
        "id": 167183736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559564953
    },
    {
        "content": "<p>first: \"Array as asm output ICEs LLVM\" <a href=\"https://github.com/rust-lang/rust/issues/13368\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/13368\">#13368</a></p>",
        "id": 167183938,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559565071
    },
    {
        "content": "<p>requires <code>#[feature(asm)]</code>. <code>asm</code> is not currently on the 2019 roadmap; see tracking issue <a href=\"https://github.com/rust-lang/rust/issues/29722\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/29722\">#29722</a> <a href=\"https://github.com/rust-lang/rust/issues/29722\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/29722\">here</a></p>",
        "id": 167184078,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559565163
    },
    {
        "content": "<p>I'm going to CC <a href=\"https://github.com/rust-lang/rust/issues/29722\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/29722\">#29722</a> and mark the ICE's with <code>asm</code> as P-medium, with the intention that they be upgraded in priority if we upgrade the priority on <code>asm</code> in general. (And I'll follow a similar protocol for any other ICE that seems to be intertwined with an unstable feature that is not on the 2019 roadmap.)</p>",
        "id": 167184223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559565246
    },
    {
        "content": "<p>next: \"compiler segfault with deref of *() in asm arg\" <a href=\"https://github.com/rust-lang/rust/issues/13520\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/13520\">#13520</a></p>",
        "id": 167184832,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559565607
    },
    {
        "content": "<p>I'm handling this same as <a href=\"https://github.com/rust-lang/rust/issues/13368\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/13368\">#13368</a> above</p>",
        "id": 167184844,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559565617
    },
    {
        "content": "<p>next: \"compiler abort in LLVM code when using a newtype-wrapper as an argument\" <a href=\"https://github.com/rust-lang/rust/issues/15402\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/15402\">#15402</a></p>",
        "id": 167185126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559565818
    },
    {
        "content": "<p>for some reason this is also connected to <code>feature(asm)</code>.</p>",
        "id": 167185148,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559565839
    },
    {
        "content": "<p>I handled it same as <a href=\"https://github.com/rust-lang/rust/issues/13368\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/13368\">#13368</a> above</p>",
        "id": 167185209,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559565854
    },
    {
        "content": "<p>next: \"ICE: Intrinsics cannot be used as bare functions\" <a href=\"https://github.com/rust-lang/rust/issues/15694\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/15694\">#15694</a></p>",
        "id": 167185273,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559565917
    },
    {
        "content": "<p>I looked at that recently, we can probably create another shim generator for intrinsics</p>",
        "id": 167185419,
        "sender_full_name": "oli",
        "timestamp": 1559565999
    },
    {
        "content": "<p>but we could also just make it a proper error, no?</p>",
        "id": 167185427,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559566014
    },
    {
        "content": "<p>(as <a href=\"https://github.com/rust-lang/rust/issues/15694#issuecomment-115578372\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/15694#issuecomment-115578372\">aatch suggested back in 2015</a>)</p>",
        "id": 167185440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559566023
    },
    {
        "content": "<p>oh, that would probably be for the best, as the shims have various problems</p>",
        "id": 167185448,
        "sender_full_name": "oli",
        "timestamp": 1559566035
    },
    {
        "content": "<p>oh wait, this depends on <code>feature(intrinsics)</code> anyway</p>",
        "id": 167185584,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559566124
    },
    {
        "content": "<p>/me looks for a tracking issue in preparation for marking as P-medium</p>",
        "id": 167185604,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559566142
    },
    {
        "content": "<p>I couldn't find a tracking issue, but I left a triage note and marked <a href=\"https://github.com/rust-lang/rust/issues/15694\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/15694\">#15694</a> as P-medium, <a href=\"https://github.com/rust-lang/rust/issues/15694#issuecomment-498245106\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/15694#issuecomment-498245106\">here</a></p>",
        "id": 167186994,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559567211
    },
    {
        "content": "<p>next: \"ICE when simplest rust-call method is called\" <a href=\"https://github.com/rust-lang/rust/issues/22565\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/22565\">#22565</a></p>",
        "id": 167187050,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559567253
    },
    {
        "content": "<p>this depends on the \"rust-call\" ABI</p>",
        "id": 167187059,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559567264
    },
    {
        "content": "<p>(which is not stable; guarded under <code>feature(unboxed_closures)</code>, tracking issue <a href=\"https://github.com/rust-lang/rust/issues/29625\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/29625\">#29625</a>)</p>",
        "id": 167187628,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559567714
    },
    {
        "content": "<p><em>however</em>, <a href=\"https://github.com/rust-lang/rust/issues/34901\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/34901\">#34901</a> demonstrates a case where a \"rust-call\" call site does not require the feature gate...</p>",
        "id": 167187731,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559567777
    },
    {
        "content": "<p>(namely, when the use site is in a different crate from the definition site.)</p>",
        "id": 167187786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559567826
    },
    {
        "content": "<p>I'm going to triage <a href=\"https://github.com/rust-lang/rust/issues/34901\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/34901\">#34901</a> as P-high because it strikes me as a stability hole</p>",
        "id": 167187919,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559567899
    },
    {
        "content": "<p>and I'm going to triage <a href=\"https://github.com/rust-lang/rust/issues/22565\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/22565\">#22565</a> as P-medium, under assumption that it depends on (someone in dependency chain) using <code>feature(unboxed_closures)</code></p>",
        "id": 167189898,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559568961
    },
    {
        "content": "<p>next: \"ICE: capacity overflow or \"Illegal instruction (core dumped)\" with very large static item\" <a href=\"https://github.com/rust-lang/rust/issues/23600\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/23600\">#23600</a></p>",
        "id": 167193766,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559571336
    },
    {
        "content": "<p>the bug discussion has a couple different examples, focused on two dimensions: length in {0xffff_ffff_ffff_ffff, 0xffff_ffff}, and zero-sized-vs-nonzero-sized.</p>",
        "id": 167193916,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559571417
    },
    {
        "content": "<p>nonzero-sized with length 0xffff_ffff causes the compiler to use a bunch of RAM and time before it ends with an LLVM OOM.</p>",
        "id": 167194176,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559571557
    },
    {
        "content": "<p>nonzero-sized with length 0xffff_ffff_ffff_ffff causes the compiler to error with a \"too big for the current architecture\" error.</p>",
        "id": 167194301,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559571608
    },
    {
        "content": "<p>not sure what we can improve there other than have special cased code for repeat-expressions in the const evaluator</p>",
        "id": 167194705,
        "sender_full_name": "oli",
        "timestamp": 1559571834
    },
    {
        "content": "<p>okay?</p>",
        "id": 167194808,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559571867
    },
    {
        "content": "<p>I mean, that doesn't sound so bad to me.</p>",
        "id": 167194816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559571873
    },
    {
        "content": "<p>sure, its dumb code</p>",
        "id": 167194829,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559571881
    },
    {
        "content": "<p>but these are also pretty dumb outcomes.</p>",
        "id": 167194847,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559571887
    },
    {
        "content": "<p>while we can do it and it would just be somewhat annoying in const eval, the problem I see is that <code>let mut x = [0; 0xFFFF_FFFF_FFFF_FFFF]; x[900]=42;</code> would end up either getting weird logic to handle efficiently, or just allocate the entire thing on the <code>42</code> write</p>",
        "id": 167195179,
        "sender_full_name": "oli",
        "timestamp": 1559572051
    },
    {
        "content": "<p>I was assuming we could error based on the absurd length of the initial array</p>",
        "id": 167195415,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572164
    },
    {
        "content": "<p>you want to represent it as a allocate-on-write value?</p>",
        "id": 167195443,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572184
    },
    {
        "content": "<p>(which then means we do not observe an error until the write occurs?)</p>",
        "id": 167195473,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572201
    },
    {
        "content": "<p>or are you hoping to eventually have some support where arrays at const-eval time are represented sparsely?</p>",
        "id": 167195547,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572220
    },
    {
        "content": "<p>(while a sparse array representation sounds tempting, I suspect it would just end up being super complex given that we'd want to allocate the dense representation once we see a borrow or similar...)</p>",
        "id": 167195656,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572269
    },
    {
        "content": "<p>oh, borrows are no problem in miri, even if we picked a sparse representation</p>",
        "id": 167195741,
        "sender_full_name": "oli",
        "timestamp": 1559572317
    },
    {
        "content": "<p>but yea, the backing code for allocations would be crazy</p>",
        "id": 167195806,
        "sender_full_name": "oli",
        "timestamp": 1559572334
    },
    {
        "content": "<p>hmm okay yeah, not borrows.</p>",
        "id": 167195822,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572341
    },
    {
        "content": "<p>maybe eventual casts of borrows to unsafe pointers would be tricky</p>",
        "id": 167195834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572354
    },
    {
        "content": "<p>XD not even that</p>",
        "id": 167195852,
        "sender_full_name": "oli",
        "timestamp": 1559572367
    },
    {
        "content": "<p>but I assume that you and Ralf could do something clever for those too</p>",
        "id": 167195863,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572372
    },
    {
        "content": "<p>ANyway</p>",
        "id": 167195865,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572375
    },
    {
        "content": "<p>miri has like 3 levels of abstraction</p>",
        "id": 167195871,
        "sender_full_name": "oli",
        "timestamp": 1559572378
    },
    {
        "content": "<p>What is the problem with erroring at the point where the array is initially created?</p>",
        "id": 167195896,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572389
    },
    {
        "content": "<p>ok, so... report an error if the allocations are too large?</p>",
        "id": 167195899,
        "sender_full_name": "oli",
        "timestamp": 1559572390
    },
    {
        "content": "<p>absolutely none, we just need to pick a limit</p>",
        "id": 167195913,
        "sender_full_name": "oli",
        "timestamp": 1559572400
    },
    {
        "content": "<p>is the issue that you do not want miri to be consulting the runtime architecture limit?</p>",
        "id": 167195927,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572410
    },
    {
        "content": "<p>I assume it already does something similar to deal with sizeof</p>",
        "id": 167195943,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572424
    },
    {
        "content": "<p>that's one problem, but also we can't figure out the maximum RAM size at all anyway</p>",
        "id": 167196026,
        "sender_full_name": "oli",
        "timestamp": 1559572448
    },
    {
        "content": "<p>maybe we can just pick a nice value and make it configurable similar to the recursion limit?</p>",
        "id": 167196055,
        "sender_full_name": "oli",
        "timestamp": 1559572468
    },
    {
        "content": "<p>okay so you're worried about the gulf between maximum RAM size and the maximum architecture size?</p>",
        "id": 167196068,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572477
    },
    {
        "content": "<p>as in, choosing a limit that is \"obviously\" too large</p>",
        "id": 167196092,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572490
    },
    {
        "content": "<p>yea</p>",
        "id": 167196101,
        "sender_full_name": "oli",
        "timestamp": 1559572496
    },
    {
        "content": "<p>ppl will complain about 100GB arrays being denied, I guarantee it :D</p>",
        "id": 167196132,
        "sender_full_name": "oli",
        "timestamp": 1559572512
    },
    {
        "content": "<p>I think something analogous to recursion limit makes a lot of sense here.</p>",
        "id": 167196142,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572517
    },
    {
        "content": "<p>since usually 100GB arrays are a user error</p>",
        "id": 167196167,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572529
    },
    {
        "content": "<p>we used to have a memory limit for miri, but removed it, should be easy enough to re-add just for const eval</p>",
        "id": 167196192,
        "sender_full_name": "oli",
        "timestamp": 1559572545
    },
    {
        "content": "<p>in any case</p>",
        "id": 167196228,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572563
    },
    {
        "content": "<p>this isn't P-high, obviously</p>",
        "id": 167196268,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572567
    },
    {
        "content": "<p>Based on what I've observed on my Linux box, I'm going to triage this as P-low. I added a summary of the outcomes I observed to a grid at the top of the issue.</p>",
        "id": 167196646,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572795
    },
    {
        "content": "<blockquote>\n<p>I think getting control over our database of ICE's is going to be more important than any other bit of triage I can do right now.</p>\n</blockquote>\n<p>FYI Crater results for 1.36 are pretty bad (700 regressions), so you might want to take a look at that soonish<br>\n<a href=\"https://github.com/rust-lang/rust/issues/61401#issuecomment-498089693\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61401#issuecomment-498089693\">https://github.com/rust-lang/rust/issues/61401#issuecomment-498089693</a></p>",
        "id": 167196963,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1559572948
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> ; I did notice that there were a bunch of regression issues logged when I skimmed the results.</p>",
        "id": 167197012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572985
    },
    {
        "content": "<p>I'll try to get to that soon-ish too.</p>",
        "id": 167197024,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559572991
    },
    {
        "content": "<p>(most likely, first thing tomorrow)</p>",
        "id": 167197038,
        "sender_full_name": "pnkfelix",
        "timestamp": 1559573008
    },
    {
        "content": "<p>thanks!</p>",
        "id": 167197043,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1559573014
    },
    {
        "content": "<p>this was only the check-only+rustdoc btw, results for the full run still have to come in</p>",
        "id": 167197061,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1559573034
    }
]