[
    {
        "content": "<blockquote>\n<p>(since MIR kind of needs a definition of types)</p>\n</blockquote>\n<p>I have thought a few times about makeing MIR generic over the type type</p>",
        "id": 183943342,
        "sender_full_name": "oli",
        "timestamp": 1576854600
    },
    {
        "content": "<p>yes that is \"type type\" :D</p>",
        "id": 183943395,
        "sender_full_name": "oli",
        "timestamp": 1576854610
    },
    {
        "content": "<p>then we can pull it out into a separate crate</p>",
        "id": 183943410,
        "sender_full_name": "oli",
        "timestamp": 1576854619
    },
    {
        "content": "<p>and rustc just instantiates it with <code>Ty&lt;'tcx&gt;</code></p>",
        "id": 183943427,
        "sender_full_name": "oli",
        "timestamp": 1576854631
    },
    {
        "content": "<p>just like we do it with <code>TyLayout</code> right now</p>",
        "id": 183943434,
        "sender_full_name": "oli",
        "timestamp": 1576854640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> chalk-engine does this</p>",
        "id": 183948720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576858071
    },
    {
        "content": "<p>it just has a notion of \"generic argument\" (which chalk currently calls <code>Parameter</code>)</p>",
        "id": 183948781,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576858085
    },
    {
        "content": "<p>but the chalk-ir crate is sort of in the middle, and probably appropriate for MIR</p>",
        "id": 183948798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576858100
    },
    {
        "content": "<p>i.e., it lets you have a real notion of what a type is, while still leaving the details abstracted via the <code>TypeFamily</code> trait</p>",
        "id": 183948821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576858117
    },
    {
        "content": "<p>(and maybe eventually it makes sense for chalk-engine to be just using chalk-ir directly; originally I thought that rustc would directly use chalk-engine, but that's not the current goal)</p>",
        "id": 183948846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576858142
    },
    {
        "content": "<p>I'll look at chalk engine and chalk IR! Thanks</p>",
        "id": 183950228,
        "sender_full_name": "oli",
        "timestamp": 1576859045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> with respect to <a href=\"https://github.com/rust-lang/compiler-team/issues/233\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/233\">compiler-team#233</a> -- I have a few questions:</p>\n<ul>\n<li>Do you intend to move more than just a few random data-structures?</li>\n<li>Can we discuss the eventual scope of what could be extracted?</li>\n</ul>\n<p>In particular, I think it would be nice if we could have a library that</p>\n<ul>\n<li>defines the entire MIR (modulo types)</li>\n<li>implements transformations and optimizations against it</li>\n</ul>\n<p>that was independently testable and embeddable from rustc.</p>\n<p>In my ideal world, it might also cover lowering to LLVM IR, but I'm not sure if that's possible.</p>",
        "id": 184103808,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577107385
    },
    {
        "content": "<p>I want to move the entire <code>MIR</code>. So a generic form of <code>mir::Body</code></p>",
        "id": 184103850,
        "sender_full_name": "oli",
        "timestamp": 1577107437
    },
    {
        "content": "<p>And yes, my original motivation was writing optimizations without tieing them to rustc</p>",
        "id": 184103912,
        "sender_full_name": "oli",
        "timestamp": 1577107464
    },
    {
        "content": "<p>well... codegen is already pretty nicely abstracted. I'm sure we can come up with someting</p>",
        "id": 184103935,
        "sender_full_name": "oli",
        "timestamp": 1577107500
    },
    {
        "content": "<p>Potentially we can even make mir interpretation generic enough so that we can start using it without rustc</p>",
        "id": 184104059,
        "sender_full_name": "oli",
        "timestamp": 1577107605
    },
    {
        "content": "<p>hmm, but it's not like you can switch out <code>Ty</code> for some other notion of types that is semantically different... so it would just be another representation for the same thing?</p>",
        "id": 184104458,
        "sender_full_name": "centril",
        "timestamp": 1577108057
    },
    {
        "content": "<p>If we implement logic over this generic MIR then you give up the ability to pattern match on types in that logic</p>",
        "id": 184104710,
        "sender_full_name": "centril",
        "timestamp": 1577108312
    },
    {
        "content": "<p>maybe, this needs to be explored, but  my hope is that we can come up with something</p>",
        "id": 184104753,
        "sender_full_name": "oli",
        "timestamp": 1577108372
    },
    {
        "content": "<p>chalk-ir has some helper traits around types</p>",
        "id": 184104768,
        "sender_full_name": "oli",
        "timestamp": 1577108397
    },
    {
        "content": "<p>Well, you'd need associated pattern aliases with exhaustiveness groupings to be able to use <code>match</code> again</p>",
        "id": 184104971,
        "sender_full_name": "centril",
        "timestamp": 1577108588
    },
    {
        "content": "<p>otherwise you'll need to use <code>.is_foobar()</code> and <code>.as_foobar()</code> and largely give up exhaustive matches</p>",
        "id": 184104999,
        "sender_full_name": "centril",
        "timestamp": 1577108621
    },
    {
        "content": "<p>(which feels like it would make a part of the compiler, that needs to be especially robust, more brittle)</p>",
        "id": 184105073,
        "sender_full_name": "centril",
        "timestamp": 1577108657
    },
    {
        "content": "<p>I don't think we exhaustively match <code>Ty</code> a lot</p>",
        "id": 184105082,
        "sender_full_name": "oli",
        "timestamp": 1577108670
    },
    {
        "content": "<p>There are many many things we can move without making stuff less robust in anyone's metric</p>",
        "id": 184105138,
        "sender_full_name": "oli",
        "timestamp": 1577108747
    },
    {
        "content": "<p>I feel like we should have this discussion once we have concrete things that are weird to move</p>",
        "id": 184105201,
        "sender_full_name": "oli",
        "timestamp": 1577108777
    },
    {
        "content": "<p>just making things more generic is not a goal in itself, so when we hit something that requires weird trait bounds with weird APIs then we should definitely be careful</p>",
        "id": 184105247,
        "sender_full_name": "oli",
        "timestamp": 1577108844
    },
    {
        "content": "<blockquote>\n<p>hmm, but it's not like you can switch out <code>Ty</code> for some other notion of types that is semantically different... so it would just be another representation for the same thing?</p>\n</blockquote>\n<p>I was expecting to parameterize it eventually in the style of chalk-ir, which means that yes it's really mostly about the representation. chalk-ir in particular does permit matching (because the generic notion can convert itself to a <code>TyData</code>)</p>",
        "id": 184116553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577119612
    },
    {
        "content": "<p>However, I'm not sure if that's the best approach -- I guess it would be worth looking at how much different optimizations and things that operate over MIR care about Rust types (and which aspects they care about)</p>",
        "id": 184116646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577119683
    },
    {
        "content": "<blockquote>\n<p>chalk-ir in particular does permit matching (because the generic notion can convert itself to a TyData)</p>\n</blockquote>\n<p>So it's sort of tag-less final + a conversion to an initial repr... sounds possibly expensive though <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 184121248,
        "sender_full_name": "centril",
        "timestamp": 1577123963
    },
    {
        "content": "<p>You also have to deal with accessing <code>TyCtxt</code> which also adds some complexity.</p>\n<p>I'd like a <code>rustc_mir_types</code> crate (basically just <code>rustc::mir</code>) and have <code>rustc_mir</code> depend on it. Though that is mostly for compile time reasons. <code>rustc_mir</code> should be split up too, but that shouldn't be too hard. We could start with that and let <code>rustc_mir</code>still use <code>rustc</code> and the concrete <code>Ty</code> type.</p>",
        "id": 184432517,
        "sender_full_name": "Zoxc",
        "timestamp": 1577646021
    },
    {
        "content": "<p>We can have matching by defining a generic <code>enum TyKind&lt;T&gt;</code> where <code>T</code> is the concrete <code>Ty&lt;'tcx&gt;</code>. That should have no performance impact.</p>",
        "id": 184433368,
        "sender_full_name": "Zoxc",
        "timestamp": 1577647566
    },
    {
        "content": "<p>Having an specific <code>TyKind</code> for Mir which doesn't expose variants which can't occur in Mir could be handy.</p>",
        "id": 184433444,
        "sender_full_name": "Zoxc",
        "timestamp": 1577647747
    }
]