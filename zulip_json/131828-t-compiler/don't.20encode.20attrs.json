[
    {
        "content": "<p>in <a href=\"https://github.com/rust-lang/rust/issues/95562\">#95562</a> i've stopped encoding some attributes in the crate metadata if they are only needed for the current crate.</p>\n<p>I don't like that too much because it seems somewhat fragile, e.g. removing <code>#[stable]</code> annotations (which should be a ~1% perf impact probably), ended up causing some diagnostics changes I didn't want to deal with.</p>",
        "id": 277687535,
        "sender_full_name": "lcnr",
        "timestamp": 1649054303
    },
    {
        "content": "<p>i think that ideally I would like to simply not encode attributes at all, relying us to store relevant attributes in some other way which is specialized for each attribute. e.g.  <code>#[inline]</code> is already part of <code>CodegenFnAttrs</code> instead of using the attribute directly</p>",
        "id": 277687822,
        "sender_full_name": "lcnr",
        "timestamp": 1649054565
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> this seems similar to things you've done with incremental</p>",
        "id": 277695427,
        "sender_full_name": "oli",
        "timestamp": 1649059639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/don.27t.20encode.20attrs/near/277687822\">said</a>:</p>\n<blockquote>\n<p>i think that ideally I would like to simply not encode attributes at all, relying us to store relevant attributes in some other way which is specialized for each attribute. e.g.  <code>#[inline]</code> is already part of <code>CodegenFnAttrs</code> instead of using the attribute directly</p>\n</blockquote>\n<p>That would be great!  Do you have an idea of the list of queries/fields that would be required?</p>",
        "id": 277775809,
        "sender_full_name": "cjgillot",
        "timestamp": 1649097444
    },
    {
        "content": "<p>FWIW rustdoc already does something like this for doc-comments (for performance reasons)</p>",
        "id": 277776771,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1649097890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/don't.20encode.20attrs/near/277687822\">said</a>:</p>\n<blockquote>\n<p>i think that ideally I would like to simply not encode attributes at all, relying us to store relevant attributes in some other way which is specialized for each attribute.</p>\n</blockquote>\n<p>That sounds far less error-prone, too, since it means that hopefully there's only one spot <em>parsing</em> the attribute, and everything else uses the purpose-made model to consume it.</p>",
        "id": 277778447,
        "sender_full_name": "scottmcm",
        "timestamp": 1649098696
    },
    {
        "content": "<p>Could this idea be recast as: Identify the most common attributes and choose a more specialized encoding for them, rather than striving to remove all attributes ?</p>",
        "id": 277947327,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649194833
    },
    {
        "content": "<p>(this recasting has the advantage that it can be done incrementally. It has the drawback that it does not admit the \"less error-prone\" property that <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> described.)</p>",
        "id": 277947397,
        "sender_full_name": "pnkfelix",
        "timestamp": 1649194880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/don't.20encode.20attrs/near/277947327\">said</a>:</p>\n<blockquote>\n<p>Could this idea be recast as: Identify the most common attributes and choose a more specialized encoding for them, rather than striving to remove all attributes ?</p>\n</blockquote>\n<p>I think we probably have to start with that anyways, considering that changing all attributes at once is probably not feasible</p>",
        "id": 277984925,
        "sender_full_name": "lcnr",
        "timestamp": 1649230305
    },
    {
        "content": "<p>opened an mcp <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/try.20to.20not.20rely.20on.20attributes.20from.20extern.E2.80.A6.20compiler-team.23505\">https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/try.20to.20not.20rely.20on.20attributes.20from.20extern.E2.80.A6.20compiler-team.23505</a></p>",
        "id": 277986389,
        "sender_full_name": "lcnr",
        "timestamp": 1649231282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126944\">Joe ST</span> has marked this topic as resolved.</p>",
        "id": 277988976,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649232746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126944\">Joe ST</span> has marked this topic as unresolved.</p>",
        "id": 277988982,
        "sender_full_name": "Notification Bot",
        "timestamp": 1649232749
    },
    {
        "content": "<blockquote>\n<p>if the previous step continues to have a positive - or at least neutral - perf impact and does not negatively impact the maintainability of rustc, stop encoding attributes entirely and remove the item_attrs query</p>\n</blockquote>\n<p>How should tool attributes be handled?</p>",
        "id": 277993841,
        "sender_full_name": "bjorn3",
        "timestamp": 1649235316
    },
    {
        "content": "<p>maybe <code>query tool_attrs(def_id: DefId, prefix: Symbol) -&gt; Attributes&lt;'tcx&gt;</code> or something like that <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 277995176,
        "sender_full_name": "lcnr",
        "timestamp": 1649236034
    },
    {
        "content": "<p>so clippy would use <code>tcx.tool_attrs(item, sym::clippy)</code></p>",
        "id": 277995201,
        "sender_full_name": "lcnr",
        "timestamp": 1649236047
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 277996473,
        "sender_full_name": "bjorn3",
        "timestamp": 1649236772
    }
]