[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> let's move the discussion to chat?</p>",
        "id": 216744730,
        "sender_full_name": "oli",
        "timestamp": 1605380966
    },
    {
        "content": "<p>I guess we should fine a minimal fix for beta backporting, and in case that is not a nice fix that we want to keep around, then do a good fix</p>",
        "id": 216744783,
        "sender_full_name": "oli",
        "timestamp": 1605381043
    },
    {
        "content": "<p>(I think the beta cutoff was yesterday, so it will be in beta)</p>",
        "id": 216744795,
        "sender_full_name": "oli",
        "timestamp": 1605381081
    },
    {
        "content": "<p>Yep, beta has been cut; we'll definitely want a backport</p>",
        "id": 216744904,
        "sender_full_name": "simulacrum",
        "timestamp": 1605381284
    },
    {
        "content": "<p>The issue should be <code>regression-from-stable-to-beta</code> then?</p>",
        "id": 216744921,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605381324
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/ef663a8a48ea6b98b43cbfaefd99316b36b16825/compiler/rustc_typeck/src/check/writeback.rs#L34\">https://github.com/rust-lang/rust/blob/ef663a8a48ea6b98b43cbfaefd99316b36b16825/compiler/rustc_typeck/src/check/writeback.rs#L34</a> is where the <code>TypeckResults</code> are built. So we can add a <code>FxHashSet&lt;NodeId&gt;</code> to <code>FnCtxt</code>, populate that during type checking and move it just like we do with <a href=\"https://github.com/rust-lang/rust/blob/ef663a8a48ea6b98b43cbfaefd99316b36b16825/compiler/rustc_typeck/src/check/writeback.rs#L73\">https://github.com/rust-lang/rust/blob/ef663a8a48ea6b98b43cbfaefd99316b36b16825/compiler/rustc_typeck/src/check/writeback.rs#L73</a></p>",
        "id": 216744971,
        "sender_full_name": "oli",
        "timestamp": 1605381383
    },
    {
        "content": "<p>Ah, yes, but don't bump that just yet. I'll update labels after we release for easier tracking.</p>",
        "id": 216744974,
        "sender_full_name": "simulacrum",
        "timestamp": 1605381391
    },
    {
        "content": "<p>Then <code>const_to_pat</code> can use the expression's node id to index the hashset (which it gets via <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.typeck_body\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.typeck_body</a>)</p>",
        "id": 216744989,
        "sender_full_name": "oli",
        "timestamp": 1605381479
    },
    {
        "content": "<p>On the side of code that I understand, I think if we pass the scrutinee type to <code>is_useful</code> and only inspect that instead of the type of patterns, this would solve the issue. However we'd run into <a href=\"https://github.com/rust-lang/rust/issues/72476\">https://github.com/rust-lang/rust/issues/72476</a> again and I don't know how to fix that one</p>",
        "id": 216745034,
        "sender_full_name": "Nadrieril",
        "timestamp": 1605381516
    },
    {
        "content": "<p>What you're proposing sounds easier</p>",
        "id": 216745037,
        "sender_full_name": "Nadrieril",
        "timestamp": 1605381530
    },
    {
        "content": "<p>ok, I'll implement my solution then along with the appropriate tests. We can then get that backported and iterate on cleaning this up without any pressure</p>",
        "id": 216745121,
        "sender_full_name": "oli",
        "timestamp": 1605381713
    },
    {
        "content": "<p>Hmm... <a href=\"https://github.com/rust-lang/rust/compare/master...oli-obk:byte_str_pat?expand=1\">this</a> does not appear to work at all</p>",
        "id": 216748418,
        "sender_full_name": "oli",
        "timestamp": 1605385966
    },
    {
        "content": "<p>I'll try to find some time tomorrow to look at it again</p>",
        "id": 216748550,
        "sender_full_name": "oli",
        "timestamp": 1605386121
    },
    {
        "content": "<p>(I assigned you to the issue for easier tracking/agenda preparation)</p>",
        "id": 216752296,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605390730
    },
    {
        "content": "<p>I don't know the tck code, but I imagine the ideal solution would be to give any <code>b\"foo\"</code> pattern an inference variable as a type, and have inference figure out the type it should have. Is that an easy thing to do, compared to the other solutions we have?</p>",
        "id": 216752434,
        "sender_full_name": "Nadrieril",
        "timestamp": 1605390892
    },
    {
        "content": "<p>If I can be really annoying for a second, 'tck' as an abbreviation for 'type checking' is really hard to decipher for new contributors - do you mind saying 'typeck' or something instead? that pulls up <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn.typeck.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn.typeck.html</a> as the first hit on google</p>",
        "id": 216752549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605391006
    },
    {
        "content": "<p>(and from there people can figure it out, I'm not asking you to write a paragraph every time)</p>",
        "id": 216752571,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605391042
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/exhaustiveness.20is.20broken.20.2379048/near/216752549\">said</a>:</p>\n<blockquote>\n<p>that pulls up <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn.typeck.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn.typeck.html</a> as the first hit on google</p>\n</blockquote>\n<p>As Google search results are personal, I guess this could not be the case for a new contributor?</p>",
        "id": 216752624,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605391137
    },
    {
        "content": "<p>ah hmm</p>",
        "id": 216752627,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605391152
    },
    {
        "content": "<p>Also maybe if \"tck\" is used by some people here we can add it to the glossary</p>",
        "id": 216752629,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605391160
    },
    {
        "content": "<p>sure, that works too</p>",
        "id": 216752634,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605391176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"255061\">Léo Lanteri Thauvin</span> <a href=\"#narrow/stream/131828-t-compiler/topic/exhaustiveness.20is.20broken.20.2379048/near/216752624\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/exhaustiveness.20is.20broken.20.2379048/near/216752549\">said</a>:</p>\n<blockquote>\n<p>that pulls up <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn.typeck.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_typeck/check/fn.typeck.html</a> as the first hit on google</p>\n</blockquote>\n<p>As Google search results are personal, I guess this could not be the case for a new contributor?</p>\n</blockquote>\n<p>I tried a new private tab and it had the same results, not sure if google does IP tracking though</p>",
        "id": 216752639,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605391192
    },
    {
        "content": "<p>Heh, I wanted to try but Firefox crashed when I asked it to go on Google <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 216752765,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1605391372
    },
    {
        "content": "<p>typeck fails completely to find something Rust-related for me on DuckDuckGo</p>",
        "id": 216752898,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1605391631
    },
    {
        "content": "<p>does 'rust typeck' bring something up?</p>",
        "id": 216752955,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605391704
    },
    {
        "content": "<p>'rust tck' gives me nothing <a href=\"/user_uploads/4715/LR__BM37hqKcmXzEwhuwBxBV/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/LR__BM37hqKcmXzEwhuwBxBV/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/LR__BM37hqKcmXzEwhuwBxBV/image.png\"></a></div>",
        "id": 216752959,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605391715
    },
    {
        "content": "<p>Oops sorry. I'm not even a hardened contributor x)</p>",
        "id": 216753103,
        "sender_full_name": "Nadrieril",
        "timestamp": 1605391948
    },
    {
        "content": "<p>oh no worries, I know it's just less to type <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 216753118,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1605391992
    },
    {
        "content": "<p>« Rust typeck » works perfectly so that’s good enough <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 216753129,
        "sender_full_name": "Poliorcetics",
        "timestamp": 1605392023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/exhaustiveness.20is.20broken.20.2379048/near/216752434\">said</a>:</p>\n<blockquote>\n<p>I don't know the tck code, but I imagine the ideal solution would be to give any <code>b\"foo\"</code> pattern an inference variable as a type, and have inference figure out the type it should have. Is that an easy thing to do, compared to the other solutions we have?</p>\n</blockquote>\n<p>ah, while we can try this, you gave me another idea. We can make sure that the literal -&gt; ty::Const conversion figures out the correct type</p>",
        "id": 216790183,
        "sender_full_name": "oli",
        "timestamp": 1605443956
    },
    {
        "content": "<p>ah nevermind, a fix PR is now up: <a href=\"https://github.com/rust-lang/rust/pull/79072\">https://github.com/rust-lang/rust/pull/79072</a></p>",
        "id": 216791581,
        "sender_full_name": "oli",
        "timestamp": 1605445551
    },
    {
        "content": "<p>the problem was/is that <code>TypeckResults</code> is not taken verbatim out out of the type checker, but instead all fields that should be taken must be taken manually <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 216791626,
        "sender_full_name": "oli",
        "timestamp": 1605445586
    },
    {
        "content": "<p>@oli, what's this <code>#[instrument(skip(self))]</code> magic you use? I can't find it in the dev guide or the docs</p>",
        "id": 216795229,
        "sender_full_name": "Nadrieril",
        "timestamp": 1605450586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span>  I think it is <a href=\"https://docs.rs/tracing-attributes/0.1.11/tracing_attributes/attr.instrument.html\">https://docs.rs/tracing-attributes/0.1.11/tracing_attributes/attr.instrument.html</a></p>",
        "id": 216796116,
        "sender_full_name": "andjo403",
        "timestamp": 1605451445
    },
    {
        "content": "<p>jup, that's it</p>",
        "id": 216796498,
        "sender_full_name": "oli",
        "timestamp": 1605451877
    },
    {
        "content": "<p>Using it instead of just <code>debug!</code> invocations will give us a hierarchical tree in the logs, making it much easier to see which logs are nested below others</p>",
        "id": 216796516,
        "sender_full_name": "oli",
        "timestamp": 1605451906
    },
    {
        "content": "<p>ohh sounds amazing</p>",
        "id": 216796590,
        "sender_full_name": "Nadrieril",
        "timestamp": 1605451956
    },
    {
        "content": "<p>jup, it made finding this bug much easier <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> thus the \"unrelated\" logging changes</p>",
        "id": 216796862,
        "sender_full_name": "oli",
        "timestamp": 1605452235
    },
    {
        "content": "<p>PR looks good, as far as I can understand it <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 216801102,
        "sender_full_name": "Nadrieril",
        "timestamp": 1605458246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> here is the discussion on the exhaustivness soundness bug (cc <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-10.20.2354818/near/219485251\">https://rust-lang.zulipchat.com/#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.20meeting.5D.202020-12-10.20.2354818/near/219485251</a>). The solution we came up with seemed like the right one, even though I agree that looking at just the solution it seems like a band-aid.</p>",
        "id": 219575375,
        "sender_full_name": "oli",
        "timestamp": 1607674752
    },
    {
        "content": "<p>though we did recognize that a refactor of all of this logic is probably necessary <em>anyway</em>. Potentially all of this will beocme simpler once we move to value trees for type-level constants</p>",
        "id": 219575576,
        "sender_full_name": "oli",
        "timestamp": 1607674896
    },
    {
        "content": "<p>I trust you on that, <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> :)</p>",
        "id": 219590135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607684311
    },
    {
        "content": "<p>(I don't have time to read the discussion in detail right now)</p>",
        "id": 219590151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1607684321
    }
]