[
    {
        "content": "<p>In some cases, we are unable to propagate caller location information for <code>#[track_caller]</code> functions (e.g. casts to function pointers, or trait objects without <code>#[track_caller]</code> on the trait). I'm planning to add an unstable flag <code>-Z track-caller-backtrace</code> that uses <code>std::backtrace::Backtrace</code> to retrieve caller location information in those cases</p>",
        "id": 247602606,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627573924
    },
    {
        "content": "<p>this would mainly be intended for debugging purposes, to allow getting a caller location in situations where it would not otherwise be possible</p>",
        "id": 247602680,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627573950
    },
    {
        "content": "<p>when generating the 'shim' we use for <code>#[track_caller]</code> function pointers and trait objects, we would insert a call to a helper function in libstd (or libcore, once we get <code>Backtrace</code> in core)</p>",
        "id": 247602803,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627574020
    },
    {
        "content": "<p>the function would create a <code>Backtrace</code>, and get the filename and line number from the proper frame</p>",
        "id": 247602937,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627574072
    },
    {
        "content": "<p>What about using a thread_local instead? It would likely require recompiling libstd, but that would almost always work, unlike backtraces which can miss functions for various reasons like optimizations.</p>",
        "id": 247604181,
        "sender_full_name": "bjorn3",
        "timestamp": 1627574684
    },
    {
        "content": "<p>that's an interesting idea</p>",
        "id": 247604451,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627574826
    },
    {
        "content": "<p>On second thought, I don't think a thread_local would be feasible. We would need to set it before every single function pointer invocation, which means that we would need to encode the location for every single function pointer call site into the binary</p>",
        "id": 247608161,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627576606
    },
    {
        "content": "<p>We would need to do the same thing for non-<code>#[track_caller]</code> trait object method invocations</p>",
        "id": 247608210,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627576630
    },
    {
        "content": "<p>The backtrace option could also potentially be used in <em>all</em> cases (gated behind a different flag value). This would allow us to avoid the extra parameter when codegenning <code>#[track_caller]</code> functions. If<code>Location::caller()</code> calls are rare, than this could give a performance boost</p>",
        "id": 247608445,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627576749
    },
    {
        "content": "<p>Backtraces are not always available with <code>-Cpanic=abort</code> and will be missing frames when optimizing and not having debuginfo enabled.</p>",
        "id": 247608902,
        "sender_full_name": "bjorn3",
        "timestamp": 1627576996
    },
    {
        "content": "<p>That's true - this would be opt-in</p>",
        "id": 247609065,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627577067
    },
    {
        "content": "<p>so it would be up to the end user to decide if this is something that makes sense for their use-case</p>",
        "id": 247609110,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627577095
    },
    {
        "content": "<p>here's a possible use case: <a href=\"https://github.com/rust-lang/rust/issues/87401\">https://github.com/rust-lang/rust/issues/87401</a></p>",
        "id": 247609426,
        "sender_full_name": "cuviper",
        "timestamp": 1627577265
    },
    {
        "content": "<p>they have <code>From</code> with <code>#[track_caller]</code>, but that gets lost in <code>?</code> by <code>Result::from_residual</code></p>",
        "id": 247609513,
        "sender_full_name": "cuviper",
        "timestamp": 1627577299
    },
    {
        "content": "<p>could the global allocator hook also be a use case for this ? eg <a href=\"https://github.com/rust-lang/rust/issues/74433\">#74433</a> (except if getting a backtrace would allocate of course)</p>",
        "id": 247609980,
        "sender_full_name": "lqd",
        "timestamp": 1627577547
    },
    {
        "content": "<p>For global allocators, it might be simpler to just use <code>Backtrace</code> manually, since it looks like it <em>never</em> works</p>",
        "id": 247610344,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627577724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.60Backtrace.60-based.20.60.23.5Btrack_caller.5D.60.20helper/near/247609513\">said</a>:</p>\n<blockquote>\n<p>they have <code>From</code> with <code>#[track_caller]</code>, but that gets lost in <code>?</code> by <code>Result::from_residual</code></p>\n</blockquote>\n<p>should <code>Result::from_residual</code> have <code>#[track_caller]</code>?</p>",
        "id": 247611303,
        "sender_full_name": "eddyb",
        "timestamp": 1627578165
    },
    {
        "content": "<p>annotating more things is much easier and general than the backtrace approach (which I guess I don't have anything against, but it is a bit more involved and less reliable)</p>",
        "id": 247611388,
        "sender_full_name": "eddyb",
        "timestamp": 1627578218
    },
    {
        "content": "<p>The idea would be to give better location information in cases where we otherwise couldn't give any</p>",
        "id": 247611567,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627578282
    },
    {
        "content": "<p>e.g. a crate implements a foreign trait, and puts <code>#[track_caller]</code> on the implementation of a method</p>",
        "id": 247611611,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627578300
    },
    {
        "content": "<p>doesn't that work?</p>",
        "id": 247613202,
        "sender_full_name": "eddyb",
        "timestamp": 1627578996
    },
    {
        "content": "<p>Not through a trait object</p>",
        "id": 247613222,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627579009
    },
    {
        "content": "<p>aaah sure, okay</p>",
        "id": 247613231,
        "sender_full_name": "eddyb",
        "timestamp": 1627579015
    },
    {
        "content": "<p>same thing for function pointer casts</p>",
        "id": 247613247,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627579024
    },
    {
        "content": "<p>I just mean that in non-dynamic cases we should try more annotations</p>",
        "id": 247613273,
        "sender_full_name": "eddyb",
        "timestamp": 1627579040
    },
    {
        "content": "<p>the backtrace fallback seems okay for the dynamic ones</p>",
        "id": 247613295,
        "sender_full_name": "eddyb",
        "timestamp": 1627579053
    }
]