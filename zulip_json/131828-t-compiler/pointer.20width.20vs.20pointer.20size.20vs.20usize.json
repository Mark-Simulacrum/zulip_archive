[
    {
        "content": "<p>I'm attempting to port Rust to a platform (CHERI) which has <code>target_pointer_width = 128</code>, but <code>usize</code> should be <code>u64</code>: the remaining bits are used for capability tagging. It seems that it's quite hard to get a 64-bit <code>usize</code>,  as it seems to depend on <code>pointer_size</code> from the data layout. However, it seems that <code>pointer_size</code> is also used for offsets.</p>\n<p>I wonder if I'm doing something silly, or if the meaning has been overloaded?<br>\nMy understanding is that there is no support (currently!) for architectures where pointer width, pointer size, or usize can differ. Is this correct? Or maybe this should \"just work\" -- I've configured it wrongly?</p>\n<p>Happy if anyone can shed light on this!</p>",
        "id": 163081699,
        "sender_full_name": "Nicholas Sim",
        "timestamp": 1554972564
    },
    {
        "content": "<p><code>usize</code> is the size of a pointer by definition. So it should be <code>u128</code> then.</p>",
        "id": 163081968,
        "sender_full_name": "Zoxc",
        "timestamp": 1554972793
    },
    {
        "content": "<p>Not only is it defined in Rust that <code>usize</code> is the same size as <code>*const ()</code>, but I also believe the compiler can't cope with pointer sizes other than <code>32</code> and <code>64</code> bit with some minor support for <code>16</code> bit</p>",
        "id": 163082161,
        "sender_full_name": "oli",
        "timestamp": 1554972971
    },
    {
        "content": "<p>@Zoxc do you mean <code>usize == uintptr_t</code>, rather than <code>size_t</code>? And since <code>usize</code> is implicitly used for <code>size_t</code>, there is an (assumed) equivalence between the three?</p>\n<p>As for coping with other pointer sizes -- I've seen the (16-bit) AVR patches, and I can attest that rustc \"copes\" with 128-bit <code>target_pointer_width</code>, <code>pointer_size</code>, and <code>usize</code>. The trouble comes when you can't call <code>ptrtoint</code> to the pointer size, or certain GEP indexing operations, etc., where 128-bit operands are not accepted. To an extent, I've solved this using <code>intcast</code>s -- this breaks when with <code>opt-level &gt;= 2</code></p>",
        "id": 163084222,
        "sender_full_name": "Nicholas Sim",
        "timestamp": 1554974836
    },
    {
        "content": "<p>Traditionally, <code>usize == uintptr_t</code>, yes. I can't speak to the rest necessarily.</p>",
        "id": 163103879,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1554992527
    },
    {
        "content": "<p>const eval will fail guaranteed if you use <code>usize</code> values bigger than <code>u64::max_value</code></p>",
        "id": 163104472,
        "sender_full_name": "oli",
        "timestamp": 1554992908
    },
    {
        "content": "<p>const eval has a bug ;)</p>",
        "id": 163104529,
        "sender_full_name": "centril",
        "timestamp": 1554992944
    },
    {
        "content": "<p>well... fixing it will regress max-rss even for all hosts</p>",
        "id": 163104869,
        "sender_full_name": "oli",
        "timestamp": 1554993175
    },
    {
        "content": "<p>because all hosts pay the overhead of whatever the maximum ptr width is?</p>",
        "id": 163104957,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554993230
    },
    {
        "content": "<p>Might make sense to go to flexible-width integers for all sorts of integral types.</p>",
        "id": 163105100,
        "sender_full_name": "nagisa",
        "timestamp": 1554993301
    },
    {
        "content": "<blockquote>\n<p>because all hosts pay the overhead of whatever the maximum ptr width is?</p>\n</blockquote>\n<p>yes</p>",
        "id": 163105562,
        "sender_full_name": "oli",
        "timestamp": 1554993601
    },
    {
        "content": "<blockquote>\n<p>Might make sense to go to flexible-width integers for all sorts of integral types.</p>\n</blockquote>\n<p>then we'd end up with a pointer to the heap alloc, which is also bigger than 64 bits ;)</p>",
        "id": 163105672,
        "sender_full_name": "oli",
        "timestamp": 1554993652
    },
    {
        "content": "<p>(in total, pointer + data)</p>",
        "id": 163105687,
        "sender_full_name": "oli",
        "timestamp": 1554993661
    },
    {
        "content": "<p>Not necessarily.</p>",
        "id": 163105738,
        "sender_full_name": "nagisa",
        "timestamp": 1554993698
    },
    {
        "content": "<p>anything 63-bits long can be represented as a regular tagged integer, anything above as a pointer to integers</p>",
        "id": 163105828,
        "sender_full_name": "nagisa",
        "timestamp": 1554993745
    },
    {
        "content": "<p>so only heapify if the value is bigger than <code>usize</code> and use some bits to clarify that?</p>",
        "id": 163105832,
        "sender_full_name": "oli",
        "timestamp": 1554993748
    },
    {
        "content": "<p>yeah, thatâ€™s one of the options</p>",
        "id": 163105852,
        "sender_full_name": "nagisa",
        "timestamp": 1554993765
    },
    {
        "content": "<p>another option is to use indices into some sort of an array, and those can be made smaller -- only as large as necessary to store the necessary number of integers, rather than address the whole address space.</p>",
        "id": 163105935,
        "sender_full_name": "nagisa",
        "timestamp": 1554993824
    }
]