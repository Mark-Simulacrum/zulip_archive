[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Debug)]</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Data</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">Maybe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Ref</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"n\">Data</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Owned</span><span class=\"p\">(</span><span class=\"n\">Data</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">err</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Maybe</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">Maybe</span>::<span class=\"n\">Ref</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Maybe</span>::<span class=\"n\">Owned</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">ok</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">Maybe</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">Maybe</span>::<span class=\"n\">Ref</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Maybe</span>::<span class=\"n\">Owned</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271828924,
        "sender_full_name": "lcnr",
        "timestamp": 1644847067
    },
    {
        "content": "<p>encountered this when matching on <code>hir::ExprKind::Path(ref path) | hir::ExprKind::Struct(path, _, _)</code></p>",
        "id": 271829022,
        "sender_full_name": "lcnr",
        "timestamp": 1644847103
    },
    {
        "content": "<p>considering that the implicit \"ref\" works when using match ergonomics, is there a reason why the explicit ref is in error?</p>",
        "id": 271829096,
        "sender_full_name": "lcnr",
        "timestamp": 1644847136
    },
    {
        "content": "<p>Different lifetimes?</p>",
        "id": 271878064,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644867614
    },
    {
        "content": "<p>Hmm, I wonder if its just not allowed at all to do that. I.e. if compiler is just assuming \"you couldn't possibly have meant to include a <code>ref</code> for one binding and a non-<code>ref </code> for another, even if that's <em>exactly</em> what you meant to do...</p>",
        "id": 271878697,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644867926
    },
    {
        "content": "<p>the fact it works when using match ergonomics probably lends some amount of credibility to my hypothesis. (To be clear: I'm saying we're looking at an insufficiently smart compiler here.)</p>",
        "id": 271878929,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644868023
    }
]