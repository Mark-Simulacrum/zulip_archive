[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  <span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> </p>\n<p>There's been a long standing a desire for rustfmt to support formatting inline assmebly (<a href=\"https://github.com/rust-dev-tools/fmt-rfcs/issues/152\">https://github.com/rust-dev-tools/fmt-rfcs/issues/152</a>) and we've recently started digging into it</p>\n<p>rustfmt lives entirely in the pre-expansion world, so it sees the <code>asm</code> and <code>llvm_asm</code> as standard MacCall expressions. I believe that in order to do any type of significant formatting we'll want to at least get the underling <code>AsmArgs</code> representation, but obviously we really don't want to duplicate the parsing and processing of the token stream because that'll inevitably lead to bifurcation and likely future bugs in rustfmt.</p>\n<p>It seems to me that the easiest way for rustfmt to be able to get the <code>AsmArgs</code> would be for some slight augmentation to the existing <code>parse_args</code> function in <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/asm.rs#L27-L32\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_builtin_macros/src/asm.rs#L27-L32</a>. AIUI that generation of the <code>AsmArgs</code> really only needs a parser, source map, and a function for the span errors, all of which we have/can access pre-expansion within rustfmt (via the session).</p>\n<p>Would folks be open to an extra function or two/slightly adjusted signatures that would allow the existing flow to stay the same with the <code>ExtCtxt</code> based approach while also giving us a way to hook into this from rustfmt (e.g. a new function rustfmt could call and pass the parser instance, source map, etc. directly)?</p>\n<p>We're happy to send a PR with a proposal but wanted to gauge receptiveness first, or even see if anyone had any suggested alternatives.</p>",
        "id": 265208543,
        "sender_full_name": "Caleb Cartwright",
        "timestamp": 1639683497
    },
    {
        "content": "<p>The idea seems reasonable.</p>",
        "id": 265211113,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639684743
    },
    {
        "content": "<p>When you say formatting asm, you mean the macro invocation, not the assembly string, right?</p>",
        "id": 265211173,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1639684779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/parsing.20of.20AsmArgs.20for.20inline.20assembly/near/265211173\">said</a>:</p>\n<blockquote>\n<p>When you say formatting asm, you mean the macro invocation, not the assembly string, right?</p>\n</blockquote>\n<p>correct, invocation including the args</p>",
        "id": 265216919,
        "sender_full_name": "Caleb Cartwright",
        "timestamp": 1639687479
    },
    {
        "content": "<p>Sounds good to me!</p>",
        "id": 265218563,
        "sender_full_name": "Amanieu",
        "timestamp": 1639688270
    },
    {
        "content": "<p>awesome, thanks all! will see if i can't get a pr up within the next day or so</p>",
        "id": 265218742,
        "sender_full_name": "Caleb Cartwright",
        "timestamp": 1639688361
    }
]