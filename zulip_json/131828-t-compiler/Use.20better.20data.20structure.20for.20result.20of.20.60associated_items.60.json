[
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/68957\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68957\">#68957</a> is a performance problem caused by <code>O(n)</code> lookup for associated items by name. It seems that searching through all associated items for one with a particular name is a common pattern. The obvious solution is to use a better data structure, but the result of the <code>associated_items</code> query needs to be interned. Do we currently intern hashmaps or btrees? If we don't and it's hard to do, we could sort the list of associated items by name before interning.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 187859120,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581369502
    },
    {
        "content": "<blockquote>\n<p>Do we currently intern hashmaps or btrees?</p>\n</blockquote>\n<p>Yes. For example, the <code>wasm_import_module_map</code> query returns a <code>&amp;'tcx FxHashMap&lt;DefId, String&gt;</code>.</p>\n<p>Query definition: <a href=\"https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src/librustc/query/mod.rs#L200\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src/librustc/query/mod.rs#L200\">https://github.com/rust-lang/rust/blob/4ff8fb9cb210a9f06e0eafc364bd12de2b67f087/src/librustc/query/mod.rs#L200</a></p>\n<p>Query implementation: <a href=\"https://github.com/rust-lang/rust/blob/a29424a2265411dda7d7446516ac5fd7499e2b55/src/librustc_codegen_llvm/attributes.rs#L429\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/a29424a2265411dda7d7446516ac5fd7499e2b55/src/librustc_codegen_llvm/attributes.rs#L429\">https://github.com/rust-lang/rust/blob/a29424a2265411dda7d7446516ac5fd7499e2b55/src/librustc_codegen_llvm/attributes.rs#L429</a></p>",
        "id": 187860347,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1581370222
    },
    {
        "content": "<p>Good! My next question is what we should index on. It seems like most code that searches for an item by name uses <code>hygienic_eq</code>, but some uses non-hygienic comparison for well-known traits. Seems like we either want a multi-map from <code>Symbol</code> to <code>AssocItem</code> or to use hygienic comparison everywhere and incorporate that information into the key.</p>",
        "id": 187860857,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581370555
    },
    {
        "content": "<p>So something like <code>(AssocItemKind, Symbol, {hygiene info}) -&gt; AssocItem</code></p>",
        "id": 187861124,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581370692
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/e6ec0d125eba4074122b187032474b4174fb9d31/src/librustc_mir_build/hair/cx/mod.rs#L173\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e6ec0d125eba4074122b187032474b4174fb9d31/src/librustc_mir_build/hair/cx/mod.rs#L173\">https://github.com/rust-lang/rust/blob/e6ec0d125eba4074122b187032474b4174fb9d31/src/librustc_mir_build/hair/cx/mod.rs#L173</a></p>\n<p>(unhygienic comparison)</p>",
        "id": 187861130,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581370697
    },
    {
        "content": "<p>Does anyone object to me sorting the result of <code>associated_items</code> by <code>Symbol</code> for now and adding an efficient <code>find_with_name_unhygienic</code> method to it?</p>",
        "id": 187861288,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581370803
    },
    {
        "content": "<p>Do we want to avoid actually computing <code>{hygiene info}</code> for performance reasons? I know nothing about this.</p>",
        "id": 187861354,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581370851
    },
    {
        "content": "<p>I briefly looked into this and it seemed like some passes rely on these items being in definition order</p>",
        "id": 187861484,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1581370924
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> That's good to know. We can still do this while preserving definition order. But we won't be able to use data structures in <code>std</code>.</p>",
        "id": 187861616,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581371034
    },
    {
        "content": "<p>Unless someone added an insertion-order preserving <code>HashMap</code> while I wasn't paying attention.</p>",
        "id": 187861696,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581371064
    },
    {
        "content": "<p>I'm gonna go ahead and claim <a href=\"https://github.com/rust-lang/rust/issues/68957\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68957\">#68957</a>. It seems like we may want to audit the places that depend on definition order and stop looking up particular items on known traits by name (perhaps these should be lang items instead?). However, I don't think this should block resolving <a href=\"https://github.com/rust-lang/rust/issues/68957\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68957\">#68957</a>.</p>",
        "id": 187862117,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581371380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has suggested the same, and I agree</p>",
        "id": 187862466,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1581371596
    },
    {
        "content": "<p>definitely on the lang items, they are basically free and we should use them as much as possible</p>",
        "id": 187862580,
        "sender_full_name": "eddyb",
        "timestamp": 1581371675
    },
    {
        "content": "<p>but also I've wanted method lookup to be faster for years, I just kept forgetting about it lol</p>",
        "id": 187862655,
        "sender_full_name": "eddyb",
        "timestamp": 1581371741
    },
    {
        "content": "<p>I'm happy to take this on. I'll start with the method lookup part and then start converting things to lang items</p>",
        "id": 187862806,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581371844
    },
    {
        "content": "<p>the lang item part is easier and less controversial, I would do it separately I think</p>",
        "id": 187862848,
        "sender_full_name": "eddyb",
        "timestamp": 1581371873
    },
    {
        "content": "<p>Just lang items won't solve <a href=\"https://github.com/rust-lang/rust/issues/68957\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68957\">#68957</a> though.</p>",
        "id": 187862960,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581371952
    },
    {
        "content": "<p>So I'd like to prioritize efficient method lookup over that</p>",
        "id": 187863037,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581372002
    },
    {
        "content": "<p>Not that they're mutually exclusive, and learning a bit more about hygiene/hygienic_eq would be beneficial before tackling method lookup.</p>",
        "id": 187863136,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1581372043
    },
    {
        "content": "<p>ah sure</p>",
        "id": 187868244,
        "sender_full_name": "eddyb",
        "timestamp": 1581375871
    }
]