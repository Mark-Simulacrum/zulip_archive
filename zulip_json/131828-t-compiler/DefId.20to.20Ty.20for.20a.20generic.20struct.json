[
    {
        "content": "<p>Hi. How can I build a <code>Ty</code> for a <em>generic</em> struct, given the <code>DefId</code> of its definition and the <code>Ty</code> of the (one) type parameter?</p>",
        "id": 221149556,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609261962
    },
    {
        "content": "<p>is <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.type_of\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.type_of</a> what you want?</p>",
        "id": 221149589,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609261987
    },
    {
        "content": "<p>I was about to type, when the struct was non-generic I could use that :)</p>",
        "id": 221149617,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609262010
    },
    {
        "content": "<p>But how to specify the parameter now that it is?</p>",
        "id": 221149630,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609262018
    },
    {
        "content": "<p>you can then use <code>.subst(substs)</code> to apply your generic parameters</p>",
        "id": 221149690,
        "sender_full_name": "oli",
        "timestamp": 1609262043
    },
    {
        "content": "<p>(requires a bit more arguments <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>, but generally, the <code>subst</code> method is what you want, you need to import the <code>Subst</code> trait for that to be available I think</p>",
        "id": 221149725,
        "sender_full_name": "oli",
        "timestamp": 1609262079
    },
    {
        "content": "<p>Looks like that worked, thank you both!</p>",
        "id": 221150233,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1609262500
    }
]