[
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I wasn't able to reproduce <a href=\"https://github.com/rust-lang/rust/issues/94564\">#94564</a> on my Linux machine. How much target dependency might there be here? (I was trying on an AMD threadripper, and I'm wondering if I need to switch to an Intel machine to see this._</p>",
        "id": 274858869,
        "sender_full_name": "pnkfelix",
        "timestamp": 1646929373
    },
    {
        "content": "<p>I am using an <code>Intel(R) Core(TM) i3-7130U CPU @ 2.70GHz</code> with Debian 11 and glibc 2.31. I can reproduce it both using the repro given by <code>@elast0ny</code> and without cargo using <code>echo 'fn main() { std::process::Command::new(\"ls\").spawn(); }' | rustc +stable - -Copt-level=3 -Clto -Ctarget-feature=+crt-static</code>.</p>",
        "id": 274862263,
        "sender_full_name": "bjorn3",
        "timestamp": 1646930847
    },
    {
        "content": "<p>If I step a bit back in rr I get the following backtrace:</p>\n<div class=\"codehilite\"><pre><span></span><code>(rr) continue\n(rr) break std::sys::unix::rwlock::RWLock::read\n(rr) reverse-continue\n(rr) rsi\n(rr) bt\n0x000000000043af0e in core::ptr::drop_in_place&lt;core::result::Result&lt;(), std::io::error::Error&gt;&gt; () at /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/ptr/mod.rs:188\n188     in /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/ptr/mod.rs\n(rr) bt\n#0  0x000000000043af0e in core::ptr::drop_in_place&lt;core::result::Result&lt;(), std::io::error::Error&gt;&gt; () at /rustc/9d1b2106e23b1abd32fce1f17267604a5102f57a/library/core/src/ptr/mod.rs:188\n#1  std::io::Write::write_fmt&lt;std::sys::unix::stdio::Stderr&gt; () at library/std/src/io/mod.rs:1671\n#2  std::panicking::rust_panic_with_hook () at library/std/src/panicking.rs:583\n#3  0x000000000043aa36 in std::panicking::begin_panic_handler::{closure#0} () at library/std/src/panicking.rs:500\n#4  0x000000000043a9d6 in std::sys_common::backtrace::__rust_end_short_backtrace&lt;std::panicking::begin_panic_handler::{closure#0}, !&gt; () at library/std/src/sys_common/backtrace.rs:139\n#5  0x000000000043a992 in std::panicking::begin_panic_handler () at library/std/src/panicking.rs:498\n#6  0x0000000000401220 in core::panicking::panic_fmt () at library/core/src/panicking.rs:116\n#7  0x000000000043afc4 in std::sys::unix::rwlock::RWLock::read () at library/std/src/sys/unix/rwlock.rs:49\n#8  std::sys_common::rwlock::StaticRWLock::read () at library/std/src/sys_common/rwlock.rs:23\n#9  std::panicking::rust_panic_with_hook () at library/std/src/panicking.rs:595\n#10 0x000000000043aa36 in std::panicking::begin_panic_handler::{closure#0} () at library/std/src/panicking.rs:500\n#11 0x000000000043a9d6 in std::sys_common::backtrace::__rust_end_short_backtrace&lt;std::panicking::begin_panic_handler::{closure#0}, !&gt; () at library/std/src/sys_common/backtrace.rs:139\n#12 0x000000000043a992 in std::panicking::begin_panic_handler () at library/std/src/panicking.rs:498\n#13 0x0000000000401220 in core::panicking::panic_fmt () at library/core/src/panicking.rs:116\n#14 0x000000000043afc4 in std::sys::unix::rwlock::RWLock::read () at library/std/src/sys/unix/rwlock.rs:49\n#15 std::sys_common::rwlock::StaticRWLock::read () at library/std/src/sys_common/rwlock.rs:23\n#16 std::panicking::rust_panic_with_hook () at library/std/src/panicking.rs:595\n#17 0x000000000043aa36 in std::panicking::begin_panic_handler::{closure#0} () at library/std/src/panicking.rs:500\n#18 0x000000000043a9d6 in std::sys_common::backtrace::__rust_end_short_backtrace&lt;std::panicking::begin_panic_handler::{closure#0}, !&gt; () at library/std/src/sys_common/backtrace.rs:139\n#19 0x000000000043a992 in std::panicking::begin_panic_handler () at library/std/src/panicking.rs:498\n#20 0x0000000000401220 in core::panicking::panic_fmt () at library/core/src/panicking.rs:116\n#21 0x0000000000438077 in std::sys::unix::rwlock::RWLock::read () at library/std/src/sys/unix/rwlock.rs:49\n#22 std::sys_common::rwlock::StaticRWLock::read () at library/std/src/sys_common/rwlock.rs:23\n#23 std::sys::unix::os::env_read_lock () at library/std/src/sys/unix/os.rs:490\n#24 std::sys::unix::process::process_common::Command::posix_spawn () at library/std/src/sys/unix/process/process_unix.rs:529\n#25 std::sys::unix::process::process_common::Command::spawn () at library/std/src/sys/unix/process/process_unix.rs:55\n#26 std::process::Command::spawn () at library/std/src/process.rs:868\n#27 0x000000000040bf2c in rust_out::main ()\n#28 0x000000000040ac43 in std::sys_common::backtrace::__rust_begin_short_backtrace ()\n#29 0x000000000040b23c in main ()\n</code></pre></div>",
        "id": 274862498,
        "sender_full_name": "bjorn3",
        "timestamp": 1646930949
    },
    {
        "content": "<p>The second panic is because it hits <code>panic!(\"rwlock read lock would result in deadlock\");</code>.</p>",
        "id": 274862883,
        "sender_full_name": "bjorn3",
        "timestamp": 1646931115
    },
    {
        "content": "<p>The first panic is also because it hits this. <del><code>pthread_rwlock_rdlock</code> returns <code>EAGAIN</code>.</del></p>",
        "id": 274863009,
        "sender_full_name": "bjorn3",
        "timestamp": 1646931152
    },
    {
        "content": "<p>It either returns <code>EDEADLK</code> or <code>*self.write_locked.get()</code> returns true.</p>",
        "id": 274863205,
        "sender_full_name": "bjorn3",
        "timestamp": 1646931229
    },
    {
        "content": "<p>If you need further help minimizing this feel free to ask.</p>",
        "id": 274863799,
        "sender_full_name": "bjorn3",
        "timestamp": 1646931494
    },
    {
        "content": "<p>It does return EDEADLK in my debugging.</p>",
        "id": 274864243,
        "sender_full_name": "Hans Kratz",
        "timestamp": 1646931649
    },
    {
        "content": "<p>I does reproduce for me on Ubuntu 20.04 VM running on AMD Ryzen 5950X so it's not an Intel thing.</p>",
        "id": 274864302,
        "sender_full_name": "mati865",
        "timestamp": 1646931674
    },
    {
        "content": "<p>huh. Okay. I'm going to keep looking into why I'm not seeing it myself.</p>",
        "id": 274864494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1646931738
    },
    {
        "content": "<p>Maybe you use a different glibc version?</p>",
        "id": 274864678,
        "sender_full_name": "bjorn3",
        "timestamp": 1646931809
    },
    {
        "content": "<p>I'm going to look at that, yeah</p>",
        "id": 274865055,
        "sender_full_name": "pnkfelix",
        "timestamp": 1646931949
    },
    {
        "content": "<p>glibc 2.34</p>",
        "id": 274865288,
        "sender_full_name": "pnkfelix",
        "timestamp": 1646932037
    },
    {
        "content": "<p>I'm on a 3970X and I know for sure I could reproduce this when the issue was posted, but I can't anymore. I suspect this is because on March 5, I bumped my version of glibc from 2.33-5 to 2.35-2.</p>",
        "id": 274868128,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1646933359
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/crt-static.20.2B.20LTO.20yields.20crash.20.2394564/near/274865288\">said</a>:</p>\n<blockquote>\n<p>glibc 2.34</p>\n</blockquote>\n<p>(just reproduced atop cloud desktop running glibc 2.31. So, yeah, its seeming likely that there's some interaction here.)</p>",
        "id": 274868573,
        "sender_full_name": "pnkfelix",
        "timestamp": 1646933542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> regarding your comment on GitHub 2.33-5 and 2.35-2 are just 2.33 and 2.35. <code>-2</code> and <code>-5</code> are the distro suffixes for the patch levels.</p>",
        "id": 274870233,
        "sender_full_name": "mati865",
        "timestamp": 1646934262
    },
    {
        "content": "<p>I was assume it was a patch level; I didn't know if that was a glibc patch, but it sounds like you're saying each distro chooses its own set of patches and thus the numbers are not meaningful outside of a specific distribution?</p>",
        "id": 274870334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1646934309
    },
    {
        "content": "<p>Yeah, those versions look like Arch Linux packages. Right now I have the same 2.35-2 version: <a href=\"https://archlinux.org/packages/core/x86_64/glibc/\">https://archlinux.org/packages/core/x86_64/glibc/</a></p>",
        "id": 274871087,
        "sender_full_name": "mati865",
        "timestamp": 1646934657
    },
    {
        "content": "<p>Correct, sorry for the confusion. I'm just covering all my bases in case an Arch patch is important.</p>",
        "id": 274871377,
        "sender_full_name": "Ben Kimock (Saethlin)",
        "timestamp": 1646934782
    },
    {
        "content": "<p>thanks</p>",
        "id": 274871410,
        "sender_full_name": "pnkfelix",
        "timestamp": 1646934799
    },
    {
        "content": "<p>I reproduced this in an old Arch Linux docker image</p>",
        "id": 274899733,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1646948805
    },
    {
        "content": "<p>And confirmed with gdb that <code>pthread_rwlock_rdlock()</code> is returning <code>EDEADLK</code> for some reason</p>",
        "id": 274899765,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1646948828
    },
    {
        "content": "<p>Interestingly <code>pthread_rwlock_wrlock()</code> isn't even linked in, so there's no way it's a real deadlock</p>",
        "id": 274899812,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1646948855
    },
    {
        "content": "<p>It seems to be this code block: <a href=\"https://github.com/bminor/glibc/blob/glibc-2.33/nptl/pthread_rwlock_common.c#L296-L300\">https://github.com/bminor/glibc/blob/glibc-2.33/nptl/pthread_rwlock_common.c#L296-L300</a></p>",
        "id": 274900313,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1646949161
    },
    {
        "content": "<p><code>__cur_writer</code> is zero, but so is <code>THREAD_GETMEM (THREAD_SELF, tid)</code></p>",
        "id": 274900420,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1646949231
    },
    {
        "content": "<p>I'm guessing <code>THREAD_SELF</code> didn't get initialized</p>",
        "id": 274900476,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1646949247
    },
    {
        "content": "<p>Uh</p>\n<div class=\"codehilite\"><pre><span></span><code>[root@8b906bb3417f /]# cat foo.c\n#include &lt;assert.h&gt;\n#include &lt;pthread.h&gt;\n\nstatic pthread_rwlock_t rwl = PTHREAD_RWLOCK_INITIALIZER;\n\nint main() {\n  assert(pthread_rwlock_rdlock(&amp;rwl) == 0);\n  return 0;\n}\n[root@8b906bb3417f /]# gcc -static -pthread ./foo.c -o foo\n[root@8b906bb3417f /]# ./foo\nfoo: ./foo.c:7: main: Assertion `pthread_rwlock_rdlock(&amp;rwl) == 0&#39; failed.\nAborted (core dumped)\n</code></pre></div>",
        "id": 274900955,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1646949510
    },
    {
        "content": "<p>Okay so this is <a href=\"https://sourceware.org/bugzilla/show_bug.cgi?id=5784\">https://sourceware.org/bugzilla/show_bug.cgi?id=5784</a></p>",
        "id": 274901665,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1646949783
    },
    {
        "content": "<p>It's probably \"fixed\" in glibc 2.34 because they merged libpthread into libc</p>",
        "id": 274901698,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1646949798
    },
    {
        "content": "<p>This is the typical workaround:</p>\n<div class=\"codehilite\"><pre><span></span><code>[root@8b906bb3417f /]# gcc -static -pthread -Wl,--whole-archive,-lpthread,--no-whole-archive ./foo.c -o foo\n[root@8b906bb3417f /]# ./foo\n[root@8b906bb3417f /]#\n</code></pre></div>\n<p>but I don't know how to get <code>rustc</code> to put <code>--whole-archive</code> in the right place</p>",
        "id": 274902623,
        "sender_full_name": "Tavian Barnes",
        "timestamp": 1646950237
    },
    {
        "content": "<p>Something like <code>#[link(name = \"pthread\", modifier = \"+whole-archive\")]</code> maybe?</p>",
        "id": 274908715,
        "sender_full_name": "bjorn3",
        "timestamp": 1646953481
    }
]