[
    {
        "content": "<p>In rust-analyzer, we need to do name resolution. Our current support is pretty limited (main limitation: items inside blocks don't participate in name res at all), and I wonder what is the best path forward for improving this...</p>\n<p>Realistically, I think we have no one who can, at this point, spearhead the real name resolution librarification effort. So, for the time being, it seems best if rust-analyzer continues with its own thing. I wonder, however, how to make this \"own thing\" useful long-term.</p>\n<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> do you have any suggestions as to what is the best path forward here? Should we, at rust-analyzer, just write something that works? Should we perhaps try some specific experimental approaches which are hard to use in current rustc? Should we put special effort into writing design documents/specifications?</p>\n<p>As a remainder, the main thing we need to do differently for IDEs is to have the ability to <em>not</em> look into function bodies for name resolution. This technically doesn't work in Rust in edge cases (b/c #[macro_export] and impls are global), but this is a very important optimization for IDEs, so I'm betting on separate code-paths for rustc and rust-analyzer here, and future language-level tweaks to make item bodies more isolated.</p>",
        "id": 172040579,
        "sender_full_name": "matklad",
        "timestamp": 1564495604
    },
    {
        "content": "<p>Why can't IDEs look into function bodies? I would sort of expect that you have to parse the body to find the end anyway, at which point you're not really gaining anything by ignoring struct/enum/etc definitions</p>",
        "id": 172041331,
        "sender_full_name": "simulacrum",
        "timestamp": 1564496050
    },
    {
        "content": "<p>OTOH, I believe current rules mean that in order to find the definition of a struct/enum it's fine to ignore function bodies unless it's the current function because there's no way to export them</p>",
        "id": 172041392,
        "sender_full_name": "simulacrum",
        "timestamp": 1564496097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> almost all code is in bodies. If we ignore bodies, we'll get significantly less data to process.  You don't even need to parse bodies, because counting <code>{}</code> would be enough</p>",
        "id": 172041651,
        "sender_full_name": "matklad",
        "timestamp": 1564496244
    },
    {
        "content": "<p>Hm, I guess I sort of presumed counting <code>{}</code> would be approximately as slow as fast-parsing for e.g. keywords <code>struct</code>/<code>union</code> etc</p>",
        "id": 172041787,
        "sender_full_name": "simulacrum",
        "timestamp": 1564496305
    },
    {
        "content": "<blockquote>\n<p>OTOH, I believe current rules mean that in order to find the definition of a struct/enum it's fine to ignore function bodies unless it's the current function because there's no way to export them</p>\n</blockquote>\n<p>macros break that <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> </p>\n<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7ebc99813e42c705a66b7705d2165a7c\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7ebc99813e42c705a66b7705d2165a7c\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=7ebc99813e42c705a66b7705d2165a7c</a></p>",
        "id": 172041836,
        "sender_full_name": "matklad",
        "timestamp": 1564496334
    },
    {
        "content": "<p>I would expect current resolution to be able to work with a partial view of the world -- e.g. <code>everybody_loops</code> applied to functions essentially</p>",
        "id": 172041960,
        "sender_full_name": "simulacrum",
        "timestamp": 1564496403
    },
    {
        "content": "<p>Is that not the case?</p>",
        "id": 172041980,
        "sender_full_name": "simulacrum",
        "timestamp": 1564496409
    },
    {
        "content": "<p>It could work that way, yeah. And that's basically how rust-analyzer now works. But, when you actually look into the body of the current function, you need to glue together results of local resolution and global resolution. This is the bit that is missing from rust-analyzer.</p>",
        "id": 172042147,
        "sender_full_name": "matklad",
        "timestamp": 1564496521
    },
    {
        "content": "<p>Like, I think it's realitevely straightforward to <em>just</em> do this, and we can add this to rust-analyzer. But I feel that's the case where a bit of up-front design can be helpful</p>",
        "id": 172042273,
        "sender_full_name": "matklad",
        "timestamp": 1564496575
    },
    {
        "content": "<p>Sure, yeah -- maybe a simple bit would be to make rustc's resolver a bit more generic so it can be used as a library by rust-analyzer more easily (without needing to port to libsyntax types and such)</p>",
        "id": 172042625,
        "sender_full_name": "simulacrum",
        "timestamp": 1564496772
    },
    {
        "content": "<p>I would sort of expect that even rustc's analyzer wants to be able to do incremental resolution based (just not today, since incremental comp. starts after it IIRC)</p>",
        "id": 172042697,
        "sender_full_name": "simulacrum",
        "timestamp": 1564496811
    },
    {
        "content": "<blockquote>\n<p>maybe a simple bit would be to make rustc's resolver a bit more generic so it can be used as a library by rust-analyzer more easily</p>\n</blockquote>\n<p>I fear that this <em>simple</em> bit is on order of half a year of work full time. We definitely <em>should</em> do this eventually, but I am not sure that right now is the best time, given that, for example, there's unfinished chalk work</p>",
        "id": 172042910,
        "sender_full_name": "matklad",
        "timestamp": 1564496921
    },
    {
        "content": "<p>Sure, yeah, \"simple\" in terms of describing it I guess :)</p>",
        "id": 172042982,
        "sender_full_name": "simulacrum",
        "timestamp": 1564496967
    },
    {
        "content": "<p>Chalk seems orthogonal to this though? i.e. trait-related vs. name resolution</p>",
        "id": 172043021,
        "sender_full_name": "simulacrum",
        "timestamp": 1564496991
    },
    {
        "content": "<p>But yeah, just sharing the nameres code would be ideal. However, it took me a long time to do this for lexer (<a href=\"https://github.com/rust-lang/rust/issues/59706\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59706\">#59706</a>), and lexer is like infinitely more simple than name res</p>",
        "id": 172043095,
        "sender_full_name": "matklad",
        "timestamp": 1564497012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yeah, chalk is orthogonal but I am not sure that having many parallel (pun intended) efforts is good</p>",
        "id": 172043171,
        "sender_full_name": "matklad",
        "timestamp": 1564497054
    },
    {
        "content": "<p>That's true. name resolution's complexity includes HIR and AST and such so I agree it is much harder to do (presumably)</p>",
        "id": 172043305,
        "sender_full_name": "simulacrum",
        "timestamp": 1564497129
    },
    {
        "content": "<p>Though, I <em>think</em> I can maybe drive this effort, after I finish the remainig bits of lexer.... I don't know a lot about name res, but I'd like to learn more</p>",
        "id": 172043358,
        "sender_full_name": "matklad",
        "timestamp": 1564497169
    },
    {
        "content": "<p>The main complication I think is how tightly coupled name resolution is to the compiler in terms of driving macro expansion, etc.</p>",
        "id": 172043429,
        "sender_full_name": "simulacrum",
        "timestamp": 1564497223
    },
    {
        "content": "<p>It wants to know a lot</p>",
        "id": 172043443,
        "sender_full_name": "simulacrum",
        "timestamp": 1564497232
    },
    {
        "content": "<p>Yeah: there's no clear name resolution \"intermediate language\", though it seems like there <em>should</em> be one (sets of names indexed by scopes and namespaces)</p>",
        "id": 172043581,
        "sender_full_name": "matklad",
        "timestamp": 1564497322
    }
]