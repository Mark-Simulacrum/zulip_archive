[
    {
        "content": "<p>If I wanted to help with <a href=\"https://github.com/rust-lang/rust/issues/65031\">https://github.com/rust-lang/rust/issues/65031</a>, how would I get started? I took a quick glance at the API and it looks like maybe <code>rustc_middle::ich</code> would be a good candidate for splitting out into a separate crate - is that a good approach?</p>",
        "id": 211942897,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601572323
    },
    {
        "content": "<blockquote>\n<p>how would I get started?</p>\n</blockquote>\n<p>It would probably be worth investing some time to trying to figure out what code in the crate is driving the compilation time up so high.</p>",
        "id": 211945767,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1601573575
    },
    {
        "content": "<p><code>-Zllvm-time-trace</code> might be worth exploring but I think you will need to disable parallel codegen to use it.</p>\n<p><code>-Zprint-mono-items</code> might also be helpful.</p>",
        "id": 211946157,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1601573725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> IMO a good step would also be a PR to rustbuild that lets us get llvm-lines output (as a check alternative like clippy)</p>",
        "id": 211956137,
        "sender_full_name": "simulacrum",
        "timestamp": 1601578059
    },
    {
        "content": "<p>ooh I like that</p>",
        "id": 211956530,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601578206
    },
    {
        "content": "<p>I'll try to work in this area this weekend</p>",
        "id": 211956557,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601578216
    },
    {
        "content": "<p>would it make sense to have a generic 'unknown cargo command' delegate and try to pass things through to cargo if they're unrecognized? or maybe just have a whitelist of things to pass through?</p>",
        "id": 211956723,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601578300
    },
    {
        "content": "<p>It would probably be good to split <code>mir</code> out into its own crate, right? Perhaps <code>rustc_middle</code> should only have things that nearly every part of the compiler needs: <code>Ty</code>, arenas, etc. What do you think?</p>",
        "id": 211956726,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601578303
    },
    {
        "content": "<p>no, I do not want to just allow anything through that seems annoying and hard to deal with at least for now</p>",
        "id": 211956894,
        "sender_full_name": "simulacrum",
        "timestamp": 1601578370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> I would not try to approach this generically or by coming up with a list or anything -- really rustc_middle likely shouldn't exist, it doesn't make sense as a standalone entity imo</p>",
        "id": 211956981,
        "sender_full_name": "simulacrum",
        "timestamp": 1601578413
    },
    {
        "content": "<p>I think the steps here are basically to identify some fairly large chunk and try to pull it out -- this is nontrivial, usually.</p>",
        "id": 211957055,
        "sender_full_name": "simulacrum",
        "timestamp": 1601578441
    },
    {
        "content": "<p>So are you suggesting (in the long run) that we have a bunch of crates (<code>rustc_ty</code>, <code>rustc_arena</code> -- those names may be taken) that represent exactly one set of things, and remove <code>rustc_middle</code>?</p>",
        "id": 211957161,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601578463
    },
    {
        "content": "<p>If so, that sounds like a good way to approach it</p>",
        "id": 211957261,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601578507
    },
    {
        "content": "<p>Sure, I think that's probably the right thing. There will be some amount of rustc_middle-like crate which defines things, but basically it shouldn't be too large</p>",
        "id": 211957268,
        "sender_full_name": "simulacrum",
        "timestamp": 1601578510
    },
    {
        "content": "<p>Yeah, but they won't all be thrown together in one crate :)</p>",
        "id": 211957310,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601578529
    },
    {
        "content": "<p>Certainly I think <em>logic</em> bits probably can move out, even if connector glue of some kind remains.</p>",
        "id": 211957312,
        "sender_full_name": "simulacrum",
        "timestamp": 1601578531
    },
    {
        "content": "<p>Maybe there would be a few utility functions that would be nice to have -- rename to <code>rustc_utility</code>?</p>",
        "id": 211957365,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601578559
    },
    {
        "content": "<p>I think we should see what's making it slow in the first place</p>",
        "id": 211957482,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601578597
    },
    {
        "content": "<p>just moving things around doesn't actually make it faster, just more parallel</p>",
        "id": 211957506,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601578608
    },
    {
        "content": "<p>That should make it faster in wall-clock time though</p>",
        "id": 211957557,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601578632
    },
    {
        "content": "<p>Yes, but that will already solve things like memory &gt;4GB and such. Realistically splitting apart that crate just because of that is fine.</p>",
        "id": 211957564,
        "sender_full_name": "simulacrum",
        "timestamp": 1601578636
    },
    {
        "content": "<p>fwiw I don't expect to find any big \"silver bullets\" here or anything like that -- it's just a huge crate. The source, before expansion, is already 2MB.</p>",
        "id": 211957687,
        "sender_full_name": "simulacrum",
        "timestamp": 1601578685
    },
    {
        "content": "<p>And 46K lines of code (including comments and blanks) according to tokei</p>",
        "id": 211958069,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601578864
    },
    {
        "content": "<p>In some ways I'm surprised it's not more</p>",
        "id": 211958096,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601578877
    },
    {
        "content": "<p>Why is trait resolution in <code>rustc_middle</code> and not <code>rustc_typeck</code> or its own crate?</p>",
        "id": 211958433,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601579011
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Making.20rustc_middle.20faster.20to.20compile/near/211946157\">said</a>:</p>\n<blockquote>\n<p><code>-Zllvm-time-trace</code> might be worth exploring but I think you will need to disable parallel codegen to use it.</p>\n<p><code>-Zprint-mono-items</code> might also be helpful.</p>\n</blockquote>\n<p>unfortunately <code>llvm-time-trace</code> gave nothing useful, I think the file might be being overwritten?</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cat llvm_timings.json\n{&quot;traceEvents&quot;:[{&quot;cat&quot;:&quot;&quot;,&quot;pid&quot;:16371,&quot;tid&quot;:16372,&quot;ts&quot;:0,&quot;ph&quot;:&quot;M&quot;,&quot;name&quot;:&quot;process_name&quot;,&quot;args&quot;:{&quot;name&quot;:&quot;rustc&quot;}},{&quot;cat&quot;:&quot;&quot;,&quot;pid&quot;:16371,&quot;tid&quot;:16372,&quot;ts&quot;:0,&quot;ph&quot;:&quot;M&quot;,&quot;name&quot;:&quot;thread_name&quot;,&quot;args&quot;:{&quot;name&quot;:&quot;&quot;}}],&quot;beginningOfTime&quot;:1601699236094356}\n</code></pre></div>",
        "id": 212153174,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601700253
    },
    {
        "content": "<p>wow, <code>print-mono-items</code> has a <em>lot</em> of output</p>",
        "id": 212153192,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601700343
    },
    {
        "content": "<p>well this is exciting <a href=\"https://github.com/rust-lang/rust/issues/77478\">https://github.com/rust-lang/rust/issues/77478</a></p>",
        "id": 212154206,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601702455
    },
    {
        "content": "<p>oh boy</p>\n<div class=\"codehilite\"><pre><span></span><code>$ grep rustc_middle mono-items.log | wc -l\n634285\n</code></pre></div>",
        "id": 212154272,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601702627
    },
    {
        "content": "<p>out of a total of <code>1176865</code></p>",
        "id": 212154310,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601702649
    },
    {
        "content": "<p><em>wow</em>, that's more than half of all mono items just from rustc_middle</p>",
        "id": 212154312,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601702673
    },
    {
        "content": "<p>oh that's <em>everything</em> that has the word rustc_middle, it's much smaller if you only count things defined in that crate:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cut -d &#39; &#39; -f -3 mono-items.log  | grep &#39; rustc_middle&#39; | wc -l\n89836\n</code></pre></div>",
        "id": 212154321,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601702735
    },
    {
        "content": "<p>and yes this is definitely showing the same functions being monomorphized over and over again</p>\n<div class=\"codehilite\"><pre><span></span><code>$ cut -d &#39; &#39; -f -3 mono-items.log  | grep &#39; rustc_middle&#39; | sort | uniq -c | sort -k 1  | head -n 20\n    100 MONO_ITEM fn rustc_middle::ty[0]::context[0]::{{impl}}[31]::struct_span_lint_hir[0]&lt;rustc_span::span_encoding[0]::Span[0],\n    103 MONO_ITEM fn rustc_middle::ty[0]::query[0]::on_disk_cache[0]::decode_tagged[0]&lt;rustc_middle::ty[0]::query[0]::on_disk_cache[0]::CacheDecoder[0],\n     10 MONO_ITEM fn rustc_middle::middle[0]::codegen_fn_attrs[0]::_DERIVE_rustc_serialize_Decodable_D_FOR_CodegenFnAttrFlags[0]::{{impl}}[0]::decode[0]::{{closure}}[0]&lt;rustc_middle::ty[0]::query[0]::on_disk_cache[0]::CacheDecoder[0],\n     10 MONO_ITEM fn rustc_middle::middle[0]::codegen_fn_attrs[0]::_DERIVE_rustc_serialize_Decodable_D_FOR_CodegenFnAttrFlags[0]::{{impl}}[0]::decode[0]&lt;rustc_middle::ty[0]::query[0]::on_disk_cache[0]::CacheDecoder[0]&gt;\n     10 MONO_ITEM fn rustc_middle::middle[0]::codegen_fn_attrs[0]::_DERIVE_rustc_serialize_Decodable_D_FOR_CodegenFnAttrs[0]::{{impl}}[0]::decode[0]::{{closure}}[0]&lt;rustc_middle::ty[0]::query[0]::on_disk_cache[0]::CacheDecoder[0],\n     10 MONO_ITEM fn rustc_middle::middle[0]::codegen_fn_attrs[0]::_DERIVE_rustc_serialize_Decodable_D_FOR_CodegenFnAttrs[0]::{{impl}}[0]::decode[0]&lt;rustc_middle::ty[0]::query[0]::on_disk_cache[0]::CacheDecoder[0]&gt;\n     10 MONO_ITEM fn rustc_middle::mir[0]::{{impl}}[8]::decode[0]&lt;rustc_middle::ty[0]::query[0]::on_disk_cache[0]::CacheDecoder[0],\n     10 MONO_ITEM fn rustc_middle::mir[0]::interpret[0]::allocation[0]::{{impl}}[4]::get_bytes_internal[0]&lt;(),\n</code></pre></div>",
        "id": 212154369,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601702865
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> you're right that a lot of statics are being generated by tracing</p>\n<div class=\"codehilite\"><pre><span></span><code>$ grep &#39;CALLSITE&#39; mono-items.log  | wc -l\n3087\n</code></pre></div>\n\n\n<p><a href=\"https://github.com/tokio-rs/tracing/issues/921\">https://github.com/tokio-rs/tracing/issues/921</a></p>",
        "id": 212154459,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601703031
    },
    {
        "content": "<p>not a ton compared to the number of total items though</p>",
        "id": 212154460,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601703046
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"307286\">@Eliza Weisman</span> )</p>",
        "id": 212154467,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601703076
    },
    {
        "content": "<p>here are the items ordered by crate:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ grep -o &#39;fn rustc_[^:]*&#39;  mono-items.log | cut -d &#39; &#39; -f 2 | sort | uniq -c | sort -k1 -h | tail -n 10\n   2978 rustc_lint\n   3007 rustc_target\n   3136 rustc_span\n   5508 rustc_mir\n   8666 rustc_hir\n   9301 rustc_ast\n  14481 rustc_data_structures\n  21051 rustc_serialize\n  35012 rustc_query_system\n  89581 rustc_middle\n</code></pre></div>",
        "id": 212154523,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601703229
    },
    {
        "content": "<p>among rustc_middle, the worst offender is <code>ty</code> by far:</p>\n<div class=\"codehilite\"><pre><span></span><code>     49 fn rustc_middle::util[0]\n    153 fn rustc_middle::lint[0]\n    182 fn rustc_middle::ich[0]\n    216 fn rustc_middle::arena[0]\n    387 fn rustc_middle::hir[0]\n    583 fn rustc_middle::middle[0]\n    680 fn rustc_middle::query[0]\n    744 fn rustc_middle::infer[0]\n    870 fn rustc_middle::traits[0]\n   5263 fn rustc_middle::dep_graph[0]\n   7550 fn rustc_middle::mir[0]\n  72904 fn rustc_middle::ty[0]\n</code></pre></div>",
        "id": 212154672,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601703499
    },
    {
        "content": "<p>ok, let me try moving <code>ty</code> out. probably it will be hard because so much depends on it</p>",
        "id": 212154675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601703517
    },
    {
        "content": "<p>does anyone know the difference between <code>rustc_ty</code> and <code>rustc_middle::ty</code>? Is there any reason not to make them both the same crate?</p>",
        "id": 212154727,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601703607
    },
    {
        "content": "<p>yesssss</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: publicly re-exporting an item\n  --&gt; compiler/rustc_lint/src/builtin.rs:62:1\n   |\n62 | pub use rustc_session::lint::builtin::*;\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: `-W rustc::pub-cross-crate-reexport` implied by `-W rustc::internal`\n   = note: facade crates are discouraged; import from the original crate instead\n</code></pre></div>",
        "id": 212157622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601708856
    },
    {
        "content": "<p>oh haha <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> you got assigned to the PR <a href=\"https://github.com/rust-lang/rust/pull/77479\">https://github.com/rust-lang/rust/pull/77479</a></p>",
        "id": 212158181,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601709792
    },
    {
        "content": "<p>do you think I should ping t-compiler on it? it is a bit of an invasive change</p>",
        "id": 212158410,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601710136
    },
    {
        "content": "<p>I personally think that lint is a good idea but  do think we should have an MCP or even FCP here though as this is a fairly clear statement of direction afaict and iirc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> had some reservations here. These might just have been about a specific instance which we can just <code>allow</code> but I still think it's better to get at least some broader consensus here.</p>",
        "id": 212158890,
        "sender_full_name": "lcnr",
        "timestamp": 1601710965
    },
    {
        "content": "<p>sure, MCP seems helpful</p>",
        "id": 212158913,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601711010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Making.20rustc_middle.20faster.20to.20compile/near/212158890\">said</a>:</p>\n<blockquote>\n<p>and iirc <span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> had some reservations here.</p>\n</blockquote>\n<p>No reservations, please proceed with removing the reexports.<br>\n(I'll look at those PRs anyway and write if I'm against some specific changes.)</p>",
        "id": 212159513,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1601711933
    },
    {
        "content": "<p>I'm not sure about the lint, it will give a lot of warnings - ~400 instances of <code>pub use</code> in <code>compiler</code> right now.</p>",
        "id": 212159579,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1601712037
    },
    {
        "content": "<p>maybe it makes sense to first clean up most of the re-exports and only then add the lint?</p>",
        "id": 212159592,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601712076
    },
    {
        "content": "<p>Ah, the lint detects only reexport from other crates, I see.</p>",
        "id": 212159598,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1601712098
    },
    {
        "content": "<p>having the lint helps me find the exports in the first place but I'm fine with working off a local copy in the meantime, I made a list at <a href=\"https://github.com/rust-lang/rust/pull/77479#issuecomment-703061465\">https://github.com/rust-lang/rust/pull/77479#issuecomment-703061465</a></p>",
        "id": 212159616,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601712123
    },
    {
        "content": "<p>can someone merge this stream with <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Internal.20lint.3A.20Ban.20.60pub.60.20re-exports.20in.20co.E2.80.A6.20compiler-team.23368\">https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Internal.20lint.3A.20Ban.20.60pub.60.20re-exports.20in.20co.E2.80.A6.20compiler-team.23368</a> please?</p>",
        "id": 212159646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601712158
    },
    {
        "content": "<p>starting from around <a href=\"#narrow/stream/131828-t-compiler/topic/Making.20rustc_middle.20faster.20to.20compile/near/212157622\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/Making.20rustc_middle.20faster.20to.20compile/near/212157622</a></p>",
        "id": 212159651,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601712173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Making.20rustc_middle.20faster.20to.20compile/near/212159598\">said</a>:</p>\n<blockquote>\n<p>Ah, the lint detects only reexport from other crates, I see.</p>\n</blockquote>\n<p>I could possibly extend it later to detect <code>pub use self::x::Item;</code> if <code>x</code> is public, but that definitely doesn't need to be in the first pass</p>",
        "id": 212159703,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601712286
    },
    {
        "content": "<p>Considering that the lint is <code>allow</code> by default I think it's good to just add it and then slowly add <code>warn</code>s to the different crates</p>",
        "id": 212160066,
        "sender_full_name": "lcnr",
        "timestamp": 1601712879
    },
    {
        "content": "<p>somewhat related, <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> do you know how hard it is to lint things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">inner</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"n\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ WARN import of private use statement</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">other</span>::<span class=\"n\">Item</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212160086,
        "sender_full_name": "lcnr",
        "timestamp": 1601712949
    },
    {
        "content": "<p>That seems not too hard to do, I could check if <code>Item</code> was defined in <code>super</code> or not</p>",
        "id": 212160137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601713019
    },
    {
        "content": "<blockquote>\n<p>Considering that the lint is <code>allow</code> by default I think it's good to just add it and then slowly add <code>warn</code>s to the different crates</p>\n</blockquote>\n<p>It's not actually allowed by default, it's warn by default because it's in the <code>rustc</code> lint group</p>",
        "id": 212160147,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601713055
    },
    {
        "content": "<p>I would prefer it to be opt out instead of opt-in, which is why I suggested changing the re-exports before adding the lint. Another alternative is to not yet add it to the lint group so it's opt-in for now, then add it later.</p>",
        "id": 212160196,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601713118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> your idea seems like it could be a clippy lint regardless of what rustc does, it's not specific to the compiler</p>",
        "id": 212160206,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601713149
    },
    {
        "content": "<p>(related: <a href=\"https://github.com/rust-lang/rust/pull/77351\">https://github.com/rust-lang/rust/pull/77351</a>)</p>",
        "id": 212160263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601713243
    },
    {
        "content": "<blockquote>\n<p>I would prefer it to be opt out instead of opt-in</p>\n</blockquote>\n<p>yeah, my idea would be to add it as allow and then fix all desired occurrences and only then change this to warn by default</p>",
        "id": 212160265,
        "sender_full_name": "lcnr",
        "timestamp": 1601713254
    },
    {
        "content": "<blockquote>\n<p>maybe it makes sense to first clean up most of the re-exports and only then add the lint?</p>\n</blockquote>\n<p>so that we start by adding the lint here</p>",
        "id": 212160278,
        "sender_full_name": "lcnr",
        "timestamp": 1601713286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Making.20rustc_middle.20faster.20to.20compile/near/212154727\">said</a>:</p>\n<blockquote>\n<p>does anyone know the difference between <code>rustc_ty</code> and <code>rustc_middle::ty</code>? Is there any reason not to make them both the same crate?</p>\n</blockquote>\n<p>many of rustc_middle 's submodules have matchings in their name rustc_middle::hir, rustc_middle::mir, etc. I'm not sure why though.</p>",
        "id": 212162308,
        "sender_full_name": "est31",
        "timestamp": 1601716709
    },
    {
        "content": "<p>It used to be even weirder back when the crate was called rustc. You had rustc::mir and rustc_mir :)</p>",
        "id": 212162328,
        "sender_full_name": "est31",
        "timestamp": 1601716756
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/lib.rs#L1\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/lib.rs#L1</a></p>",
        "id": 212162399,
        "sender_full_name": "est31",
        "timestamp": 1601716843
    },
    {
        "content": "<p>Apparently it's the definitions which are in the crate. That's what I remember as well. Maybe it would make sense to have rustc_def_* crates for each of the submodules. As in rustc_def_mir etc.</p>",
        "id": 212162424,
        "sender_full_name": "est31",
        "timestamp": 1601716883
    },
    {
        "content": "<p>IIRC, the worst offender is the query system, which generates a <em>lot</em> of symbols inside <code>rustc_middle::ty::query</code>. A tentative extraction was done, with the compilation time measurement in <a href=\"https://github.com/rust-lang/rust/pull/70951#issuecomment-611564529\">https://github.com/rust-lang/rust/pull/70951#issuecomment-611564529</a>. In short, most of the codegen time is query-related.</p>",
        "id": 212168673,
        "sender_full_name": "cjgillot",
        "timestamp": 1601726996
    },
    {
        "content": "<p>So, that looks a little more ambitious than I was planning</p>",
        "id": 212170463,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601729998
    },
    {
        "content": "<p>Rather than splitting rustc_middle into crates, it changes the <em>design</em> of the query system</p>",
        "id": 212170514,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601730038
    },
    {
        "content": "<p>I was hoping we could get some of the benefit without such sweeping changes</p>",
        "id": 212170525,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601730072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Making.20rustc_middle.20faster.20to.20compile/near/212154727\">said</a>:</p>\n<blockquote>\n<p>does anyone know the difference between <code>rustc_ty</code> and <code>rustc_middle::ty</code>? Is there any reason not to make them both the same crate?</p>\n</blockquote>\n<p>I wondered the same thing. Plus there's <code>rustc_middle::hir</code> and <code>rustc_hir</code> and others <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212184129,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601749847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Making.20rustc_middle.20faster.20to.20compile/near/212154727\">said</a>:</p>\n<blockquote>\n<p>does anyone know the difference between <code>rustc_ty</code> and <code>rustc_middle::ty</code>? Is there any reason not to make them both the same crate?</p>\n</blockquote>\n<p><code>rustc_middle::ty</code> is definitions for types representing various type-system concepts (and also a bunch of query-system stuff that lives in a submodule for some reason). <code>rustc_ty</code> is a bunch of query providers that are vaguely type-system related, but don't need to live in <code>rustc_typeck</code>. </p>\n<p><code>rustc_middle::mir</code> vs. <code>rustc_mir</code> is similar. But <code>rustc_hir</code> is actually  a dependency of <code>rustc_middle</code> (<code>rustc_passes</code> is more analogous to <code>rustc_mir</code>)</p>\n<p>A lot of <code>rustc_ty</code> used to live in <code>rustc_middle::ty</code>, but was moved out to improve compile-times. Since many queries use types in <code>rustc_middle::ty</code> they can only be moved to a crate that's depended on by <code>rustc_middle</code> rather than the other way around.</p>",
        "id": 212185471,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1601751912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120096\">est31</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Making.20rustc_middle.20faster.20to.20compile/near/212162424\">said</a>:</p>\n<blockquote>\n<p>Apparently it's the definitions which are in the crate. That's what I remember as well. Maybe it would make sense to have rustc_def_* crates for each of the submodules. As in rustc_def_mir etc.</p>\n</blockquote>\n<p>I think it would be better to have e.g. <code>rustc_mir</code> be definitions for MIR and then rename <code>rustc_mir</code> to <code>rustc_mir_analysis</code> or something. And then <code>rustc_ty</code> would have type definitions and the current <code>rustc_ty</code> would be renamed <code>rustc_ty_query</code> or something. Probably there would be too much friction in making that change though :/</p>",
        "id": 212187158,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601754726
    },
    {
        "content": "<p>there's also some Miri interpreter logic in <code>librustc_middle::mir::interpret</code>... the annoying thing is that types like <code>Alloc</code> appear as query return types, so to have properly encapsulated logic on their private fields, <code>Alloc</code> and all of its logic must be in <code>rustc_middle</code> :/<br>\n(and this logic is subtle, making these fields public is not really an option)</p>\n<p>For a similar, reason, all the logic of <code>Scalar</code> and <code>Pointer</code> is in that crate.</p>",
        "id": 212218120,
        "sender_full_name": "RalfJ",
        "timestamp": 1601809306
    },
    {
        "content": "<p>We can move anything that does not depend on types into a separate crate that rustc_middle depends on</p>",
        "id": 212218172,
        "sender_full_name": "oli",
        "timestamp": 1601809406
    },
    {
        "content": "<p>hm, I guess the scalar and pointer stuff could qualify? not sure about the alloc stuff... and I'd rather not spread the interpreter across <em>three</em> crates^^</p>",
        "id": 212218236,
        "sender_full_name": "RalfJ",
        "timestamp": 1601809507
    },
    {
        "content": "<p>Does anything need types anymore? Maybe some methods but these could likely be made generic over the Ty (in case they just look at the layout)</p>",
        "id": 212218354,
        "sender_full_name": "oli",
        "timestamp": 1601809786
    },
    {
        "content": "<p>Maybe this was already said, but potentially a good way to start splitting up <code>rustc_middle</code> would be to create different crates for the different modules (<code>rustc_def_ty</code>, <code>rustc_def_mir</code>, etc.) and then re-export (<span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> will love this) those crates from the modules. And then after that we can get rid of the re-exports. This way the work is split into two steps that will both compile.</p>",
        "id": 212232761,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601833198
    },
    {
        "content": "<p>kind of off-topic, will splitting benefit a huge rust project(about 1.8 million lines) with <code>codegen-units=1 lto=fat</code> at release mode? cc <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span></p>",
        "id": 212260371,
        "sender_full_name": "csmoe",
        "timestamp": 1601875861
    },
    {
        "content": "<p>the compile time of our rust sdk makes the dev workflow really hard.</p>",
        "id": 212260653,
        "sender_full_name": "csmoe",
        "timestamp": 1601876312
    },
    {
        "content": "<p>It makes it more parallel and use less memory (hopefully). It does not decrease the CPU time.</p>",
        "id": 212297825,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601904127
    },
    {
        "content": "<p>So I think it would likely reduce wall clock time if you have multiple cores</p>",
        "id": 212357653,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601932415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Making.20rustc_middle.20faster.20to.20compile/near/212185471\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Making.20rustc_middle.20faster.20to.20compile/near/212154727\">said</a>:</p>\n<blockquote>\n<p>does anyone know the difference between <code>rustc_ty</code> and <code>rustc_middle::ty</code>? Is there any reason not to make them both the same crate?</p>\n</blockquote>\n<p><code>rustc_middle::ty</code> is definitions for types representing various type-system concepts (and also a bunch of query-system stuff that lives in a submodule for some reason). <code>rustc_ty</code> is a bunch of query providers that are vaguely type-system related, but don't need to live in <code>rustc_typeck</code>. </p>\n<p><code>rustc_middle::mir</code> vs. <code>rustc_mir</code> is similar. But <code>rustc_hir</code> is actually  a dependency of <code>rustc_middle</code> (<code>rustc_passes</code> is more analogous to <code>rustc_mir</code>)</p>\n<p>A lot of <code>rustc_ty</code> used to live in <code>rustc_middle::ty</code>, but was moved out to improve compile-times. Since many queries use types in <code>rustc_middle::ty</code> they can only be moved to a crate that's depended on by <code>rustc_middle</code> rather than the other way around.</p>\n</blockquote>\n<p>how does it sounds to move ~most of the rest of <code>rustc_middle::ty</code> to <code>rustc_ty</code>?</p>",
        "id": 212932534,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602360461
    },
    {
        "content": "<p>oh I see rustc_ty depends on rustc_middle, not the other way around</p>",
        "id": 212932577,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602360493
    },
    {
        "content": "<p>oof</p>",
        "id": 212932578,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602360494
    },
    {
        "content": "<p>ok instead I'm going to look at moving <code>rustc_middle::ty::query</code> to <code>rustc_query</code></p>",
        "id": 212932590,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602360523
    },
    {
        "content": "<p>and see how badly that goes <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 212932596,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602360531
    },
    {
        "content": "<p>update: badly <a href=\"https://hastebin.com/imakobujuc.rust\">https://hastebin.com/imakobujuc.rust</a></p>",
        "id": 212933023,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602361234
    },
    {
        "content": "<p>I tried going the other way: making <code>rustc_query</code> depend on <code>rustc_middle</code>, and that seems to be going a little better: <a href=\"https://paste.rs/lrm.rs\">https://paste.rs/lrm.rs</a></p>\n<p>The main issue is that lots of things in <code>rustc_middle::ty</code> depend on <code>Providers</code></p>",
        "id": 212933294,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602361721
    },
    {
        "content": "<p>maybe instead of having <code>fn provide</code> throughout rustc_middle, <code>rustc_query</code> could add those functions as the defaults? Since query would have access to the functions but <code>middle</code> wouldn't have access to <code>Providers</code></p>",
        "id": 212933305,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602361763
    },
    {
        "content": "<p>ah wait no that breaks <code>create_global_ctxt</code>, booo</p>",
        "id": 212933361,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602361845
    },
    {
        "content": "<p>ok here's an idea: the only thing <code>rustc_middle::middle::cstore</code> uses is <code>TyCtxt</code>, and that's only for</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">encode_metadata</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">EncodedMetadata</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">used_crates</span><span class=\"p\">(</span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">prefer</span>: <span class=\"nc\">LinkagePreference</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">CrateNum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">LibSource</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>maybe that could be broken up somehow with extension traits?</p>",
        "id": 212933622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602362391
    },
    {
        "content": "<p>hmm <code>CrateStore</code> is already a trait though ...</p>",
        "id": 212933671,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602362421
    },
    {
        "content": "<p>I tried changing <code>used_crates</code> to take <code>impl QueryContext</code> instead, but that didn't work either since it needs some of the queries:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0599]: no method named `dep_kind` found for type parameter `CTX` in the current scope\n   --&gt; compiler/rustc_middle/src/middle/cstore.rs:227:20\n    |\n227 |             if tcx.dep_kind(cnum).macros_only() {\n    |                    ^^^^^^^^ method not found in `CTX`\n</code></pre></div>",
        "id": 212933953,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602362942
    },
    {
        "content": "<p>I tried making <code>CrateStore</code> have an associated <code>type CTX: QueryContext</code> but that <em>also</em> doesn't work because that means you now need <code>type CrateStoreDyn&lt;'tcx&gt; = dyn CrateStore&lt;TyCtxt&lt;'tcx&gt;&gt; + sync::Sync;</code> and now the lifetimes infect everything (I got to <code>ResolverOutputs</code> before giving up)</p>",
        "id": 212934224,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602363450
    },
    {
        "content": "<p>it looks like the only places that actually use <code>encode_metadata</code> are</p>\n<div class=\"codehilite\"><pre><span></span><code>rustc_middle/src/ty/context.rs\n1280:    pub fn encode_metadata(self) -&gt; EncodedMetadata {\n1282:        self.cstore.encode_metadata(self)\n\nrustc_interface/src/passes.rs\n944:        MetadataKind::Uncompressed | MetadataKind::Compressed =&gt; tcx.encode_metadata(),\n</code></pre></div>\n\n\n<p>maybe instead of making it part of the trait, it could be a free function?</p>",
        "id": 212934300,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602363599
    },
    {
        "content": "<p>why is there only <code>cstore_as_any()</code> but not <code>cstore()</code>?</p>",
        "id": 212934436,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602363802
    },
    {
        "content": "<p>oh I see the issue, <code>tcx.cstore</code> is <code>CrateStoreDyn</code>, not <code>CStore</code>, so it doesn't help to have inherent impls</p>",
        "id": 212934509,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602363885
    },
    {
        "content": "<p>ugh</p>",
        "id": 212934510,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602363885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> you probably have ideas about this - do you think there's a way to separate <code>CrateStore</code> and <code>TyCtxt</code> into different crates? If there was I could separate a lot more things, like <code>rustc_middle::ich</code> (at least part of it).</p>",
        "id": 212934865,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602364481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span>: Did you look ad <a href=\"https://github.com/rust-lang/rust/issues/70951\">#70951</a>? The <code>QueryEngine</code> trait there gives a way to untangle the <code>ty::query</code> spaghetti. It can certainly be improved upon.</p>",
        "id": 212935783,
        "sender_full_name": "cjgillot",
        "timestamp": 1602366004
    },
    {
        "content": "<p>Without changing the design, you can get an idea of where the knot is tied.</p>",
        "id": 212935796,
        "sender_full_name": "cjgillot",
        "timestamp": 1602366048
    },
    {
        "content": "<p>wow, I'm with you on <a href=\"https://github.com/rust-lang/rust/pull/70951#issuecomment-611582538\">https://github.com/rust-lang/rust/pull/70951#issuecomment-611582538</a></p>",
        "id": 212935973,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602366260
    },
    {
        "content": "<p>I don't think I understand queries well enough to understand your change :/</p>",
        "id": 212936331,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602366841
    },
    {
        "content": "<p>why did moving only a few methods to <code>QueryCtxt</code> instead of <code>TyCtxt</code> work?</p>",
        "id": 212936370,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602366856
    },
    {
        "content": "<p>in any case <a href=\"https://github.com/rust-lang/rust/pull/70951#issuecomment-611582538\">https://github.com/rust-lang/rust/pull/70951#issuecomment-611582538</a> makes it seem like splitting up the crate alone is not enough, some part of the approach has to change or we're just moving the compile times around</p>",
        "id": 212936480,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1602367032
    },
    {
        "content": "<p>QueryCtxt exists so it knows the real types of the queries. As a consequence, it can implement rustc_query_system::query::QueryContext, where TyCtxt cannot. Because of the <code>impl Deref for QueryCtxt</code>, both types behave the same most of the time.</p>",
        "id": 212936633,
        "sender_full_name": "cjgillot",
        "timestamp": 1602367275
    },
    {
        "content": "<p>Moving compile time around is not enough, yes. It may, or may not help, depending on parallelism.</p>",
        "id": 212936642,
        "sender_full_name": "cjgillot",
        "timestamp": 1602367318
    },
    {
        "content": "<p>I have a branch (<a href=\"https://github.com/cjgillot/rust/tree/query-merge\">https://github.com/cjgillot/rust/tree/query-merge</a>) where I try to simplify the generated code. It is far from ready, but I welcome ideas.</p>",
        "id": 212936706,
        "sender_full_name": "cjgillot",
        "timestamp": 1602367391
    }
]