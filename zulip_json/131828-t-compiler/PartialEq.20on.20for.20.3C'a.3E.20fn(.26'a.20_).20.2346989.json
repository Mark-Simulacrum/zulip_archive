[
    {
        "content": "<p>I'd like to idly discuss this detail of our current std derives (or lack thereof) for <code>for &lt;'a&gt; T</code> ...</p>",
        "id": 177506336,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570443401
    },
    {
        "content": "<p>a reasonably large set of people think behavior is unintuitive on <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=34bb2c64aa548bde034e655aee759522\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=34bb2c64aa548bde034e655aee759522\">this playpen</a></p>",
        "id": 177506379,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570443475
    },
    {
        "content": "<p>hmm after thinking about it, I guess its hard/impossible to \"just fix this\" via hard-coding our own impls</p>",
        "id": 177506460,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570443549
    },
    {
        "content": "<p>/me goes skimming code to figure out how we even <code>impl PartialEq for fn</code> in general</p>",
        "id": 177506599,
        "sender_full_name": "pnkfelix",
        "timestamp": 1570443668
    },
    {
        "content": "<p>As we discussed together, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, something I've considered from time to time (and am still vaguely in favor of, presuming there is no complication) is creating a built-in \"marker trait\" called <code>FnPointer</code>, which is implemented for any <code>fn(...)</code> type (of any ABI etc). This trait might look something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[fundamental]</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FnPointer</span>: <span class=\"nb\">Copy</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">as_pointer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>It would be built-in to the compiler and illegal to manually implement. The trait system would just hard-code it in a simple way.</p>\n<p>I think this would allow us to do things like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">FnPointer</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">Clone</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">FnPointer</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">PartialEq</span><span class=\"w\">  </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">FnPointer</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Debug</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>and so forth. There <em>may</em> be some complications around fundamental that I'm not thinking of, though. Could be \"prototyped\" fairly easily I guess with just a regular trait that is impemented for <code>fn(A)</code>, <code>fn(A, B)</code>, etc.</p>",
        "id": 177817762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1570719250
    },
    {
        "content": "<blockquote>\n<p>/me goes skimming code to figure out how we even <code>impl PartialEq for fn</code> in general</p>\n</blockquote>\n<p>For those wondering where the code was, it is in <code>src/libcore/ptr/mod.rs</code>: <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/ptr/mod.rs#L2801\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/libcore/ptr/mod.rs#L2801\">https://github.com/rust-lang/rust/blob/master/src/libcore/ptr/mod.rs#L2801</a></p>",
        "id": 178275238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571220697
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would your hypothetical <code>trait FnPointer</code>  also get magically implemented by the type <code>for &lt;'a&gt; fn(&amp;'a u32)</code>, and <code>for &lt;'a&gt; fn(ParameterizedOver&lt;'a&gt;) -&gt; AlsoOver&lt;'a&gt;</code>, etc ?</p>",
        "id": 178275365,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571220822
    },
    {
        "content": "<p>(that bit of magic does not seem as \"easy\" to prototype)</p>",
        "id": 178275421,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571220844
    },
    {
        "content": "<p>(but it does seem plausible to add support for this to the compiler. I.e. rustc presumably could dive into <code>for &lt;'a&gt; ...</code> (recursively over repeated <code>for &lt;'b&gt;</code> etc) until it find a fn-ptr and can then say \"Okay, done, its an <code>FnPointer</code>!)</p>",
        "id": 178275531,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571220970
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> would your hypothetical <code>trait FnPointer</code>  also get magically implemented by the type <code>for &lt;'a&gt; fn(&amp;'a u32)</code>, and <code>for &lt;'a&gt; fn(ParameterizedOver&lt;'a&gt;) -&gt; AlsoOver&lt;'a&gt;</code>, etc ?</p>\n</blockquote>\n<p>I'm not sure what's hard about that, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 178752690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571749153
    },
    {
        "content": "<p>oh, for <em>prototyping</em>, you are saying</p>",
        "id": 178752712,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571749174
    },
    {
        "content": "<p>I mean the \"prototype\" would presuamably be implemented for <code>fn(A)</code>, <code>fn(A, B)</code> etc</p>",
        "id": 178752751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571749202
    },
    {
        "content": "<p>just as we do today for many traits</p>",
        "id": 178752793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571749208
    },
    {
        "content": "<p>which means it wouldn't handle higher-ranked things</p>",
        "id": 178752802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571749214
    },
    {
        "content": "<p>which is the primary thing I think I want addressed here</p>",
        "id": 178752819,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571749228
    },
    {
        "content": "<p>I guess we probably do <code>impl&lt;A, R&gt; Trait for fn(A) -&gt; R</code> or something now?</p>",
        "id": 178752821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571749231
    },
    {
        "content": "<p>yeah so the point of prototyping would just be to check if the fundamental trait setup gives problems</p>",
        "id": 178752834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571749243
    },
    {
        "content": "<p>the higher-ranked stuff would come from making it a lang item</p>",
        "id": 178752843,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1571749249
    },
    {
        "content": "<p>I guess that makes sense</p>",
        "id": 178752851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571749256
    },
    {
        "content": "<p>make sure the overall design doesnt have fundamntal problems before adding the new feature</p>",
        "id": 178752879,
        "sender_full_name": "pnkfelix",
        "timestamp": 1571749269
    }
]