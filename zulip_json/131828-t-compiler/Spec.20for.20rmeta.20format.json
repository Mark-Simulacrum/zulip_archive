[
    {
        "content": "<p>Hi,</p>\n<p>I was looking for some tooling to work  with the rlib/dylib meta data but there doesn't seem to be any. Furthermore, the <code>rust_metadata</code> crate and other helpers are not available for use outside the core, it seems. I might oversee something, what are today the tools to research on the Rust artifacts? Excluding objdump and readelf, as they don't seem relevant for rmeta.</p>\n<p>Thanks</p>",
        "id": 237823847,
        "sender_full_name": "weltling",
        "timestamp": 1620394707
    },
    {
        "content": "<p>you can link against <code>rustc_metadata</code> with <code>#![feature(rustc_private)]</code></p>",
        "id": 237824813,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620395061
    },
    {
        "content": "<p>but the format is completely unspecified and will likely remain like that for the forseeable future</p>",
        "id": 237824844,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620395080
    },
    {
        "content": "<p>Thanks for checking. I've just tried to <code>cargo new</code> a crate and put there</p>\n<div class=\"codehilite\"><pre><span></span><code>extern crate rustc_metadata;\n\n\nfn main() {\n    println!(&quot;Hello, world!&quot;);\n}\n</code></pre></div>\n<p>but it tells</p>\n<p><code>error[E0463]: can't find crate for </code>rustc_metadata`</p>\n<p>Still seems not possible to use outside core. Or what i miss?</p>\n<p>Thanks!</p>",
        "id": 237825854,
        "sender_full_name": "weltling",
        "timestamp": 1620395439
    },
    {
        "content": "<p>you need to add the rustc-dev component, iirc</p>",
        "id": 237825888,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395454
    },
    {
        "content": "<p>or rust-dev? not sure</p>",
        "id": 237825897,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395457
    },
    {
        "content": "<p>I think it's rustc</p>",
        "id": 237825907,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395462
    },
    {
        "content": "<p><code>rustc-dev</code> it is and have to be on nightly. I've got a toy to play now, thanks!</p>",
        "id": 237826610,
        "sender_full_name": "weltling",
        "timestamp": 1620395723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Spec.20for.20rmeta.20format/near/237825897\">said</a>:</p>\n<blockquote>\n<p>or rust-dev? not sure</p>\n</blockquote>\n<p>rust-dev is llvm</p>",
        "id": 237826931,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620395847
    },
    {
        "content": "<p>/me grumbles about how he warned <span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> and <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> it would be confusing</p>",
        "id": 237826958,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620395861
    },
    {
        "content": "<p>One more question perhaps, if permitted. Why it is unlikely to be specified? There are more or less universal formats around that can be used without much burden (eg DWARF). Nevertheless, having the specific crate even from nightly seems better for the start at least than writing some parser from stratch :)</p>\n<p>Thanks</p>",
        "id": 237827084,
        "sender_full_name": "weltling",
        "timestamp": 1620395904
    },
    {
        "content": "<p>specifying the format means we  can't change it</p>",
        "id": 237827396,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620396031
    },
    {
        "content": "<p>DWARF stores very different information than rmeta</p>",
        "id": 237827588,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620396107
    },
    {
        "content": "<p>DWARF is meant as a common format used by compilers and debugging tools, so there isn't really any way around specifying it</p>",
        "id": 237827738,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620396154
    },
    {
        "content": "<p>Yeah, it's only to give an example. In most case it's about 'field=value` or a table, etc., no? It's not something like an growable virtual drive image format that needs a very complex implementation, thread safety and so on. Maybe i see it wrong, but the current interfaces are more or less stable. And also, there's such a thing like a versioning .</p>\n<p>Thanks</p>",
        "id": 237828503,
        "sender_full_name": "weltling",
        "timestamp": 1620396437
    },
    {
        "content": "<p>I don't think the format is currently that simply</p>",
        "id": 237828881,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620396563
    },
    {
        "content": "<p>ACK, thanks a lot for the pointers, at least it is possible to play and discover it.</p>",
        "id": 237829788,
        "sender_full_name": "weltling",
        "timestamp": 1620396926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Spec.20for.20rmeta.20format/near/237827396\">said</a>:</p>\n<blockquote>\n<p>specifying the format means we  can't change it</p>\n</blockquote>\n<p>No, it just means that you have to bump the version when you do</p>",
        "id": 237868700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620411883
    },
    {
        "content": "<p>which is probably a good thing to do anyway if you want compatibility across multiple versions</p>",
        "id": 237868765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620411917
    },
    {
        "content": "<p>I don't think it's a contradiction to have a format which is well specified but changes frequently with short notice</p>",
        "id": 237868988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620412009
    }
]