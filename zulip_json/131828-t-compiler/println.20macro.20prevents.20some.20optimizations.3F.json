[
    {
        "content": "<p>Hi,<br>\nI would've imagined that rustc will optimize this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Hi</span><span class=\"p\">([</span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">]);</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">hi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Hi</span><span class=\"p\">([</span><span class=\"mi\">1337</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2048</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1974</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4235432543</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">hi</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Into:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1337</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>It seems that it doesn't optimize out all the dead stores and constants, but if I replace <code>println</code> with <code>printf</code>(or any other function for that matter) it actually does manage to optimize this<br>\n<a href=\"https://godbolt.org/z/61Ydhj\">https://godbolt.org/z/61Ydhj</a></p>",
        "id": 206354389,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1596903969
    },
    {
        "content": "<p>The formatting infrastructure does not optimize well in general</p>",
        "id": 206355002,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596904968
    },
    {
        "content": "<p>(somewhat intentionally, we try to avoid inlining etc. Good for some use cases but not all)</p>",
        "id": 206358004,
        "sender_full_name": "simulacrum",
        "timestamp": 1596910361
    },
    {
        "content": "<p>So I guess I should abstain from doing operations in the println macro? (and instead assign to a variable everything first)</p>",
        "id": 206358304,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1596910911
    },
    {
        "content": "<p>That shouldn't matter</p>",
        "id": 206360516,
        "sender_full_name": "simulacrum",
        "timestamp": 1596914516
    },
    {
        "content": "<p>It looks like it does matter<br>\n<a href=\"https://godbolt.org/z/v73bG7\">https://godbolt.org/z/v73bG7</a></p>",
        "id": 206363704,
        "sender_full_name": "Elichai Turkel",
        "timestamp": 1596920071
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/issues/50519\">https://github.com/rust-lang/rust/issues/50519</a>, I guess</p>",
        "id": 206366543,
        "sender_full_name": "simulacrum",
        "timestamp": 1596925318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"249222\">@Elichai Turkel</span> You can also put the operation inside braces (<a href=\"https://godbolt.org/z/9W7Gqc\">https://godbolt.org/z/9W7Gqc</a>) to <a href=\"https://bluss.github.io/rust/fun/2015/10/11/stuff-the-identity-function-does/#rust-has-dedicated-syntax-for-this\">force a move</a>.</p>",
        "id": 206529996,
        "sender_full_name": "scottmcm",
        "timestamp": 1597106576
    }
]