[
    {
        "content": "<p>A friend pointed me to <a href=\"https://rust-unofficial.github.io/patterns/patterns/fold.html\">https://rust-unofficial.github.io/patterns/patterns/fold.html</a> since there seems to be a bit of confusion there regarding fold vs map. Looking at traits <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/fold/trait.TypeFolder.html\">like this</a>, I tend to agree with the author of that page that this is a map, not a fold -- in a map, the closure has type <code>T -&gt; T</code>; in a fold it's <code>(A, T) -&gt; A</code>. So this is a map. It's a map with an <code>FnMut</code> closure (due to the <code>&amp;mut self</code>), but the fact that I have to return something of the original type still squarely makes this a map IMO.<br>\nDoes anyone know why the terminology is so strange here?</p>",
        "id": 222280966,
        "sender_full_name": "RalfJ",
        "timestamp": 1610361450
    },
    {
        "content": "<p>Ah there's an (old) issue for it: <a href=\"https://github.com/rust-unofficial/patterns/issues/54\">https://github.com/rust-unofficial/patterns/issues/54</a></p>",
        "id": 222281456,
        "sender_full_name": "RalfJ",
        "timestamp": 1610361771
    },
    {
        "content": "<p>Well, if we look at what the <code>syn</code> crate does, it does showcase a trait with that API it calls <code>fold</code>: <a href=\"https://docs.rs/syn/1.0.58/syn/fold/index.html\">https://docs.rs/syn/1.0.58/syn/fold/index.html</a> . That trait, however, modulo <code>mem::replace</code> / <code>take()</code>, is equivalent to its <code>visit_mut</code> alternative: <a href=\"https://docs.rs/syn/1.0.58/syn/visit_mut/index.html\">https://docs.rs/syn/1.0.58/syn/visit_mut/index.html</a> (and FWIW, I've found the latter more ergonomic thanks to <code>syn</code>'s data types being \"<code>Default</code>-constructible or some equivalent version of it\").<br>\nSo, if anything, this whole thing is a slightly stronger generalization / variant of the <code>VisitMut</code> pattern, whereby we get (and have to yield) owned access to the visited nodes (<code>map_in_place</code>). Calling it <code>fold</code> seems misleading to me too.</p>",
        "id": 222282323,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1610362323
    },
    {
        "content": "<p>Indeed I'd say that <code>syn</code> thing should be called \"map\" as well.</p>",
        "id": 222284343,
        "sender_full_name": "RalfJ",
        "timestamp": 1610363648
    },
    {
        "content": "<p><code>Folder</code> in chalk: <a href=\"http://rust-lang.github.io/chalk/book/types/operations/fold.html\">http://rust-lang.github.io/chalk/book/types/operations/fold.html</a></p>",
        "id": 222309955,
        "sender_full_name": "Charles Lew",
        "timestamp": 1610378363
    },
    {
        "content": "<p><code>Folder</code> in chalk: <a href=\"http://rust-lang.github.io/chalk/book/types/operations/fold.html\">http://rust-lang.github.io/chalk/book/types/operations/fold.html</a></p>",
        "id": 222310002,
        "sender_full_name": "Charles Lew",
        "timestamp": 1610378382
    },
    {
        "content": "<p>What <em>is</em> type folding by the way?</p>",
        "id": 222385114,
        "sender_full_name": "Noah Lev",
        "timestamp": 1610418493
    },
    {
        "content": "<p>A way to traverse types and create new ones by replacing components</p>",
        "id": 222421670,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610453167
    },
    {
        "content": "<p>Kinda like the visitor pattern but where each method may change the thing it visits</p>",
        "id": 222421720,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610453206
    },
    {
        "content": "<p>Hm, I thought it was more than this. What you seem to describe is a type-changing map, ie <code>fn map&lt;T,U&gt;(vec: Vec&lt;T&gt;, f: FnMut(T) -&gt; U) -&gt; Vec&lt;U&gt;</code>. What I would call a fold more like \"reduce\" (in map-reduce), i.e. it's a function that gets called at every node of your structure and accumulates some result. Typically <code>Iterator::fold</code> is a fold.</p>",
        "id": 222491624,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610484245
    },
    {
        "content": "<p>A personal criterion is that a <code>fold</code> function should look like <code>fn fold&lt;T, R&gt;(input: Whatever&lt;T&gt;, f: SomeFunction&lt;T,R&gt;) -&gt; R</code>; importantly the output type is fully controlled by the user of the function.</p>",
        "id": 222491673,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610484273
    },
    {
        "content": "<p>So, re. \"fold\" vs \"map\", it's actually on wg-traits' radar to rename <code>Fold</code> to <code>Map</code>. See \"General Work Items\" in <a href=\"https://github.com/rust-lang/wg-traits/issues/16\">https://github.com/rust-lang/wg-traits/issues/16</a></p>",
        "id": 222491977,
        "sender_full_name": "Jack Huey",
        "timestamp": 1610484410
    },
    {
        "content": "<p>Where it can be subtle is that in some cases the overlap is non-trivial. Often <code>map</code> can be implemented in terms of <code>fold</code>. For example, using <code>Iterator::fold</code> you can implement <code>collect</code>, so you could write <code>fn map&lt;T,U&gt;(vec: Vec&lt;T&gt;, f: FnMut(T) -&gt; U) -&gt; Vec&lt;U&gt;</code> using only <code>Iterator::fold</code> and <code>Vec::into_iter</code>.</p>",
        "id": 222492248,
        "sender_full_name": "Nadrieril",
        "timestamp": 1610484538
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.22Folder.22.3F/near/222491624\">said</a>:</p>\n<blockquote>\n<p>Hm, I thought it was more than this. What you seem to describe is a type-changing map, ie <code>fn map&lt;T,U&gt;(vec: Vec&lt;T&gt;, f: FnMut(T) -&gt; U) -&gt; Vec&lt;U&gt;</code>. What I would call a fold more like \"reduce\" (in map-reduce), i.e. it's a function that gets called at every node of your structure and accumulates some result. Typically <code>Iterator::fold</code> is a fold.</p>\n</blockquote>\n<p>yes that's exactly what I mean.^^ The thing the compiler calls <code>fold</code> is way more like a <code>map</code> than a <code>fold</code>.</p>",
        "id": 222983349,
        "sender_full_name": "RalfJ",
        "timestamp": 1610806457
    },
    {
        "content": "<blockquote>\n<p>Where it can be subtle is that in some cases the overlap is non-trivial</p>\n</blockquote>\n<p>I'd say a <code>fold</code> permits structure-changing operations. e.g. I can fold a <code>Vec</code> into a binary tree or whatever. In contrast, <code>map</code> is a \"functor\", it preserves the original structure.</p>",
        "id": 222983405,
        "sender_full_name": "RalfJ",
        "timestamp": 1610806530
    },
    {
        "content": "<p>these <code>Fold</code> visitors require turning <code>Expr</code> into <code>Expr</code> and so on, so (some of) the original structure is preserved -- hence it's more of a <code>map</code></p>",
        "id": 222983434,
        "sender_full_name": "RalfJ",
        "timestamp": 1610806562
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.22Folder.22.3F/near/222491977\">said</a>:</p>\n<blockquote>\n<p>So, re. \"fold\" vs \"map\", it's actually on wg-traits' radar to rename <code>Fold</code> to <code>Map</code>. See \"General Work Items\" in <a href=\"https://github.com/rust-lang/wg-traits/issues/16\">https://github.com/rust-lang/wg-traits/issues/16</a></p>\n</blockquote>\n<p>That's great to hear. :)<br>\nAdjusting the \"patterns\" document seems orthogonal to that though... I wonder if a PR to simply remove that page would be accepted? Currently, I think it is more confusing than helpful. I don't have time to rewrite the page but I could prepare a quick PR removing it.</p>",
        "id": 222983504,
        "sender_full_name": "RalfJ",
        "timestamp": 1610806615
    }
]