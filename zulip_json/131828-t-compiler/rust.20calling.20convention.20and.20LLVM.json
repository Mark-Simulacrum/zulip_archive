[
    {
        "content": "<p>How does the concept of the <code>\"Rust\"</code> calling convention make its way into LLVM? LLVM has built-in concepts for other types of calling conventions / ABIs like <code>\"C\"</code> or <code>\"stdcall\"</code>, but not one for <code>\"Rust\"</code>.</p>",
        "id": 135611607,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539267968
    },
    {
        "content": "<p>its just \"unspecified\", which in LLVM case can translate into any of <em>its</em> calling conventions</p>",
        "id": 135611699,
        "sender_full_name": "nagisa",
        "timestamp": 1539268079
    },
    {
        "content": "<p>but what also matters is types of arguments</p>",
        "id": 135611744,
        "sender_full_name": "nagisa",
        "timestamp": 1539268090
    },
    {
        "content": "<p>which in <code>Rust</code> cc are just unspecified and chosen fairly arbitrarily</p>",
        "id": 135611756,
        "sender_full_name": "nagisa",
        "timestamp": 1539268108
    },
    {
        "content": "<p>hm, <a href=\"https://github.com/rust-lang/rust/blob/fddcd316af98583ebebfc40f6a25bec3f4e5fccc/src/librustc_codegen_llvm/abi.rs#L338-L340\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/fddcd316af98583ebebfc40f6a25bec3f4e5fccc/src/librustc_codegen_llvm/abi.rs#L338-L340\">https://github.com/rust-lang/rust/blob/fddcd316af98583ebebfc40f6a25bec3f4e5fccc/src/librustc_codegen_llvm/abi.rs#L338-L340</a> seems to indicate it's \"C\" to LLVM?</p>",
        "id": 135611796,
        "sender_full_name": "simulacrum",
        "timestamp": 1539268143
    },
    {
        "content": "<p>(but maybe that's the wrong place to look)</p>",
        "id": 135611809,
        "sender_full_name": "simulacrum",
        "timestamp": 1539268151
    },
    {
        "content": "<blockquote>\n<p>its just \"unspecified\", which in LLVM case can translate into any of <em>its</em> calling conventions</p>\n</blockquote>\n<p>Well let me correct myself. If the calling convention in LLVM is unspecified, it is usually just the prevailing calling convention for the platform.</p>",
        "id": 135611810,
        "sender_full_name": "nagisa",
        "timestamp": 1539268155
    },
    {
        "content": "<p>but like I said, how arguments are passed also matters. To get actual \"C\", the arguments should be passed around in a very specific manner. This does not apply to the rust calling convention</p>",
        "id": 135611841,
        "sender_full_name": "nagisa",
        "timestamp": 1539268196
    },
    {
        "content": "<p>which is how it becomes unspecified and arbitrary.</p>",
        "id": 135611884,
        "sender_full_name": "nagisa",
        "timestamp": 1539268203
    },
    {
        "content": "<p>This is in the context of the AVR port, where people are working on the actual LLVM side of it as well, FWIW.</p>",
        "id": 135612589,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539268715
    },
    {
        "content": "<p>Well yeah, then whatever AVR does with \"unspecified\" calling convention on its side is correct.</p>",
        "id": 135612637,
        "sender_full_name": "nagisa",
        "timestamp": 1539268767
    },
    {
        "content": "<p>which can be compatible with C (and will most likely be) for all its worth</p>",
        "id": 135612650,
        "sender_full_name": "nagisa",
        "timestamp": 1539268783
    },
    {
        "content": "<p>So it seems likely that <code>\"Rust\"</code> will set up some concoction of arguments and hand that off to LLVM, which is most likely going to try to align with what GCC outputs</p>",
        "id": 135612657,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539268792
    },
    {
        "content": "<p>possibly. It is however a case that Rust often gives LLVM arguments in a manner that C would never do</p>",
        "id": 135612733,
        "sender_full_name": "nagisa",
        "timestamp": 1539268835
    },
    {
        "content": "<p>passing large arrays by value is one example of such case.</p>",
        "id": 135612762,
        "sender_full_name": "nagisa",
        "timestamp": 1539268868
    },
    {
        "content": "<p>Is there any concrete thing (that wouldn't take too much of your time to explain) you could show as an example of how the arguments...</p>",
        "id": 135612771,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539268875
    },
    {
        "content": "<p>oh, hmm, apparently we now pass larger arrays by reference…</p>",
        "id": 135612910,
        "sender_full_name": "nagisa",
        "timestamp": 1539268955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> in that case a good example is probably 2-element tuples and fat pointers</p>",
        "id": 135612948,
        "sender_full_name": "nagisa",
        "timestamp": 1539268991
    },
    {
        "content": "<p>which Rust will split into two separate arguments in some cases, despite it really being just one</p>",
        "id": 135612966,
        "sender_full_name": "nagisa",
        "timestamp": 1539269008
    },
    {
        "content": "<p>that’s probably the best example to give as it is most commonplace too.</p>",
        "id": 135612987,
        "sender_full_name": "nagisa",
        "timestamp": 1539269028
    },
    {
        "content": "<p>then there’s also i128, which C on <em>avr</em> will definitely not support, and thus won’t ever pass as an argument <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 135613089,
        "sender_full_name": "nagisa",
        "timestamp": 1539269088
    },
    {
        "content": "<p>(it usually ends up becoming a literal <code>i128</code> in LLVM)</p>",
        "id": 135613142,
        "sender_full_name": "nagisa",
        "timestamp": 1539269128
    },
    {
        "content": "<p>(and very likely a pointer with some sort of platform-specific ABI in C)</p>",
        "id": 135613161,
        "sender_full_name": "nagisa",
        "timestamp": 1539269145
    },
    {
        "content": "<p>Whereas Rust-on-AVR will support <code>i128</code> (we will just generate some code that uses up all of your registers, most likely)</p>",
        "id": 135613172,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539269158
    },
    {
        "content": "<blockquote>\n<p>we now pass larger arrays by reference</p>\n</blockquote>\n<p>And that's part of what makes it the <code>\"Rust\"</code> ABI as well, the fact that these things can change without warning.</p>",
        "id": 135613270,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539269219
    },
    {
        "content": "<p>definitely.</p>",
        "id": 135613394,
        "sender_full_name": "nagisa",
        "timestamp": 1539269308
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">&quot;Rust&quot;</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"c1\">// &quot;Rust&quot; =&gt; define void @_ZN10playground3foo17hb3200a9d2844f1a1E(i32, i32)</span>\n<span class=\"c1\">// &quot;C&quot;    =&gt; define void @_ZN10playground3foo17h740a1913e9510d11E(i64)</span>\n</pre></div>\n\n\n<p>Is that what you were talking about? (I'd bet that using a tuple in <code>extern \"C\"</code> is invalid, but it demonstrates it)</p>",
        "id": 135613463,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539269385
    },
    {
        "content": "<p>Yes, this is one of the scenarios. It will end up using different number of registers etc.</p>",
        "id": 135613724,
        "sender_full_name": "nagisa",
        "timestamp": 1539269575
    },
    {
        "content": "<p>So the C frontend would see the equivalent of <code>void foo(i128 bar)</code> and emit LLVM like <code>define void foo(* i128)</code>. </p>\n<p>Rust would see <code> fn foo(bar: i128)</code> and emit <code>define void foo( i128)</code>, but if it saw <code>extern \"C\" fn foo(bar: i128)</code>, it would emit <code>define void foo(* i128)</code>, as C did.</p>",
        "id": 135613983,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539269789
    },
    {
        "content": "<p>Is this the difference between a calling convention and an ABI?</p>",
        "id": 135614003,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539269814
    },
    {
        "content": "<p>I guess, yes. It would be more appropriate to call those \"convention\" annotations on top of LLVM functions as influencing ABI instead</p>",
        "id": 135614057,
        "sender_full_name": "nagisa",
        "timestamp": 1539269867
    },
    {
        "content": "<p>and then compilers are responsible ensuring that both ABI and the way the arguments are passed match.</p>",
        "id": 135614106,
        "sender_full_name": "nagisa",
        "timestamp": 1539269892
    },
    {
        "content": "<p>Thank you both very much! It's always nice to learn that I was wrong and now I can correct myself going forward.</p>",
        "id": 135615197,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1539270778
    }
]