[
    {
        "content": "<p>The <code>mir_const_qualif</code> query computes the value of <code>NeedsDrop</code>, <code>HasMutInterior</code> etc. on the final value of a <code>const</code> so we know whether e.g. <code>&amp;CONST</code> is promotable. However it also returns a second value, a bitset of promotable locals, that is not used anywhere except promotion.</p>\n<p>I want to make the qualifs in the final value an output of <code>mir_validated</code> instead and remove <code>mir_const_qualif</code>. This will make the code that does promotion more regular across <code>const</code>, <code>static</code>, <code>const fn</code>, etc. and will save a bit of space in the query cache. It will also help me fix a bug with <code>[expr; 2]</code> promotion in <code>const</code>s (<a href=\"https://github.com/rust-lang/rust/issues/65732\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65732\">#65732</a>), since the logic for promotion in a <code>const</code> will have full access to the list of promotion <code>Candidate</code>s instead of just a bitset of  promotable locals with no context.</p>\n<p>Does anyone foresee a problem with this? This is my first time modifying queries. The only difference in evaluation order is that <code>mir_validated</code> will be called on a <code>const</code> if  a reference to it is encountered in another MIR body. I don't think this can result in a query cycle where one did not exist before, and we should be doing the same amount of work minus a few arena allocations.</p>",
        "id": 179130347,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572103998
    },
    {
        "content": "<p><code>as_local_hir_id</code> is returning <code>None</code> for <code>MaybeUninitialized::UNINIT</code> on the following query stack. Is there something I need to make sure gets executed first?</p>\n<div class=\"codehilite\"><pre><span></span>query stack during panic:\n#0 [mir_built] processing `core::mem::MaybeUninit::&lt;T&gt;::UNINIT`\n#1 [unsafety_check_result] processing `core::mem::MaybeUninit::&lt;T&gt;::UNINIT`\n#2 [mir_const] processing `core::mem::MaybeUninit::&lt;T&gt;::UNINIT`\n#3 [mir_validated] processing `core::mem::MaybeUninit::&lt;T&gt;::UNINIT`\n#4 [mir_validated] processing `collections::btree::node::LeafNode::&lt;K, V&gt;::new`\n#5 [mir_borrowck] processing `collections::btree::node::LeafNode::&lt;K, V&gt;::new`\n#6 [analysis] running analysis passes on this crate\n</pre></div>",
        "id": 179144490,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572129657
    },
    {
        "content": "<p>Ah, I guess it's because one is in a different crate from the other.</p>",
        "id": 179144541,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572129772
    },
    {
        "content": "<p>So what I really want is for one function to generate the results for two queries, specifically <code>mir_validated</code> and <code>mir_const_qualif</code>. The result of <code>mir_validated</code> is a <code>Steal</code>, which is not <code>Rustc{En,De}codable</code>, but I need to cache the result of <code>mir_const_qualif</code> on disk I think? This means I can't combine the two?</p>",
        "id": 179145140,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572130891
    },
    {
        "content": "<p>After re-reading the rustc guide, I think this is an external vs local provider issue?</p>",
        "id": 179149967,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572141183
    },
    {
        "content": "<p>You could have <code>mir_const_qualif</code> get the qualifs from <code>mir_validated</code> and then you would only have to encode that.</p>",
        "id": 179163514,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1572169009
    },
    {
        "content": "<p>Ah, yes, I'll give this a try. Thank you!</p>",
        "id": 179179053,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572196871
    },
    {
        "content": "<p>that's... one way, I guess? in general, I wish we had first-class support for \"one provider, multiple queries\" (cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>)</p>",
        "id": 179427554,
        "sender_full_name": "eddyb",
        "timestamp": 1572439816
    },
    {
        "content": "<p>Yes -- we had some thoughts about this related to how we handle MIR lowering as well  that might actually be relevant</p>",
        "id": 179527992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572526459
    },
    {
        "content": "<p>I should try to write them down</p>",
        "id": 179527994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1572526462
    },
    {
        "content": "<p>BTW, removing <code>mir_const_qualif</code> was an attempt to fix some bugs around promotion for array initializers in consts while keeping the existing const-checking/promotion pass. Once the combined pass is removed, two separate queries will once again be the best strategy.</p>",
        "id": 179557005,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1572544073
    }
]