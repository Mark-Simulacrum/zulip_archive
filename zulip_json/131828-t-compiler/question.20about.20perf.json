[
    {
        "content": "<p>Good morning/afternoon/evening.</p>\n<p>Something i was wondering, i saw on the rust 2020 survey results that compiler perf will be a big focus. However, has rustc not gotten to the point that it being slow is due to the sheer amount of stuff it has to do? What are some examples of big-ish improvements that have yet to be done? id love to understand more, thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 220384416,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608305029
    },
    {
        "content": "<ul>\n<li>rustdoc and rustc have exponential behavior on blanket impls: <a href=\"https://github.com/rust-lang/rustc-perf/pull/807#issuecomment-746005967\">https://github.com/rust-lang/rustc-perf/pull/807#issuecomment-746005967</a>, <a href=\"https://github.com/rust-lang/rust/issues/79103\">https://github.com/rust-lang/rust/issues/79103</a></li>\n<li>rustc recompiles generic functions each time they're instantiated: <a href=\"https://github.com/rust-lang/rust/issues/77960\">https://github.com/rust-lang/rust/issues/77960</a> (see also <a href=\"https://github.com/rust-lang/rust/pull/75185\">https://github.com/rust-lang/rust/pull/75185</a> and work around that)</li>\n<li>deriving traits is slower than implementing them yourself: <a href=\"https://github.com/rust-lang/rust/issues/80118\">https://github.com/rust-lang/rust/issues/80118</a></li>\n<li>the entire compiler is single-threaded: <a href=\"https://github.com/rust-lang/rust/pull/79706\">https://github.com/rust-lang/rust/pull/79706</a></li>\n</ul>",
        "id": 220386469,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608305956
    },
    {
        "content": "<p>there's a bunch more stuff if you look under <a href=\"https://github.com/rust-lang/rust/labels/I-compiletime\">https://github.com/rust-lang/rust/labels/I-compiletime</a></p>",
        "id": 220386493,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608305969
    },
    {
        "content": "<p>see <a class=\"stream\" data-stream-id=\"247081\" href=\"/#narrow/stream/247081-t-compiler.2Fperformance\">#t-compiler/performance</a> if you want to learn more</p>",
        "id": 220386689,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608306039
    },
    {
        "content": "<ul>\n<li>coherence checks are <code>O(n²)</code> and can dominate compile time for large generated code bases</li>\n</ul>",
        "id": 220386706,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608306048
    },
    {
        "content": "<p>oh and rustdoc does basically all computation twice: <a href=\"https://github.com/rust-lang/rust/issues/76382\">https://github.com/rust-lang/rust/issues/76382</a></p>",
        "id": 220387787,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608306482
    },
    {
        "content": "<p>Interesting, what are coherence checks exactly? do you have any resources on what they are?<br>\nI have a decently large (75kloc+) codebase and its about 1:44m to 2m to compile from clean, but in some of my other projects its a lot slower despite having less code, could that be a part of it?</p>",
        "id": 220388574,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608306866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"276242\">@Riccardo D'Ambrosio</span> the best way to tell why your code is slow is <code>-Z self-profile</code></p>",
        "id": 220388724,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608306943
    },
    {
        "content": "<p>or if you don't want to mess with <code>summarize</code>, <code>-Z time-passes</code></p>",
        "id": 220388750,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608306956
    },
    {
        "content": "<p>impossible to tell without measuring, you can try running with <code>-Zself-profile</code> to get more insight (<a href=\"https://github.com/rust-lang/measureme/blob/master/summarize/Readme.md\">https://github.com/rust-lang/measureme/blob/master/summarize/Readme.md</a>)</p>",
        "id": 220388817,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608306969
    },
    {
        "content": "<p>coherence checks are 'do these impls overlap'</p>",
        "id": 220388823,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608306971
    },
    {
        "content": "<p>like orphan rule</p>",
        "id": 220388832,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608306975
    },
    {
        "content": "<p>Oh i see, how come they are <code>O(n^2)</code>?</p>",
        "id": 220388887,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608306998
    },
    {
        "content": "<p>specifically the overlap check is what's <code>O(n²)</code>, not checking for orphan rule violations</p>",
        "id": 220388915,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307008
    },
    {
        "content": "<p>because the easiest way to check for overlap between <code>N</code> elements is to take each pair and see if they overlap</p>",
        "id": 220388966,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307034
    },
    {
        "content": "<p>Oh makes sense</p>",
        "id": 220388991,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307047
    },
    {
        "content": "<p>assuming each overlap check is constant-time, this results in quadratic runtime</p>",
        "id": 220389021,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307059
    },
    {
        "content": "<p>Is it really possible to do that faster than <code>O(n²)</code> however? isnt it inherently <code>O(n²)</code>?</p>",
        "id": 220389065,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307077
    },
    {
        "content": "<p>That's the question :)</p>",
        "id": 220389133,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307092
    },
    {
        "content": "<p>Also where in rustc is this done? id like to take a look</p>",
        "id": 220389175,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307110
    },
    {
        "content": "<p>I think we've actually fixed the worst cases of this recently, so maybe it doesn't cause practical issues anymore</p>",
        "id": 220389222,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307131
    },
    {
        "content": "<p>also, where would you use parallel compilation in rustc? compilation is highly sequential as far as i know</p>",
        "id": 220389343,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307183
    },
    {
        "content": "<p>A lot of work was put into parallelizing the query engine, and it does work in practice</p>",
        "id": 220389447,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307211
    },
    {
        "content": "<p>As in looking up query results in parallel?</p>",
        "id": 220389527,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307243
    },
    {
        "content": "<p>I recommend reading about the query system</p>",
        "id": 220389794,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307354
    },
    {
        "content": "<p><code>specialization_graph.rs</code> is where trait impl overlap is checked</p>",
        "id": 220389811,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307361
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/query.html\">https://rustc-dev-guide.rust-lang.org/query.html</a></p>",
        "id": 220389824,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307364
    },
    {
        "content": "<p>Yeah i understand how queries in rustc work, i just dont understand where you would use parallelism in there</p>",
        "id": 220389852,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307375
    },
    {
        "content": "<p>Often you want to run a query on all items in a crate</p>",
        "id": 220389919,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307398
    },
    {
        "content": "<p><code>rg parallel_compiler compiler/</code> will give you some ideas</p>",
        "id": 220389939,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307406
    },
    {
        "content": "<p>That's what this work will allow doing in parallel</p>",
        "id": 220389957,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307410
    },
    {
        "content": "<p>I see</p>",
        "id": 220389975,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307415
    },
    {
        "content": "<p>For example, type checking, borrow checking, MIR building, etc.</p>",
        "id": 220390025,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307432
    },
    {
        "content": "<p>But don't all of those (except maybe mir building) require sequential processing of all the data? Ive never heard of a parallelized type checker</p>",
        "id": 220390168,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307477
    },
    {
        "content": "<p>not really? because queries are on-demand they don't really care about the order things are run</p>",
        "id": 220390246,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307509
    },
    {
        "content": "<p>imagine the way <code>make</code> works</p>",
        "id": 220390253,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307513
    },
    {
        "content": "<p>you have order-based dependencies, but many things can be run in parallel if they're not strictly related</p>",
        "id": 220390293,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307528
    },
    {
        "content": "<p>Every function can be type-checked in parallel, but they might invoke the same query at some point (which the implemented system handles)</p>",
        "id": 220390308,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307532
    },
    {
        "content": "<p>Yeah crates can be compiled in parallel if they dont depend on eachother, i meant in a single crate environment however</p>",
        "id": 220390441,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307570
    },
    {
        "content": "<p>(by \"in parallel\" I mean independently of any other function, minus the common queries they depend on)</p>",
        "id": 220390442,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/131828-t-compiler/topic/question.20about.20perf/near/220390441\">said</a>:</p>\n<blockquote>\n<p>Yeah crates can be compiled in parallel if they dont depend on eachother, i meant in a single crate environment however</p>\n</blockquote>\n<p>right I mean that too</p>",
        "id": 220390476,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307585
    },
    {
        "content": "<p>queries get to decide for themselves what the unit of compilation is, like type checking the body of a function doesn't depend on typechecking other function bodies</p>",
        "id": 220390549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307618
    },
    {
        "content": "<p>(only function signatures)</p>",
        "id": 220390558,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307623
    },
    {
        "content": "<p>Hmm i've never heard of that, since if you have something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>how do you decide if the return type is correct if you havent type checked bar yet?</p>",
        "id": 220390606,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307646
    },
    {
        "content": "<p>you type check <code>fn bar() -&gt; usize</code> without type checking <code>6</code></p>",
        "id": 220390694,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307682
    },
    {
        "content": "<p>(since usually the body takes much longer)</p>",
        "id": 220390738,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307691
    },
    {
        "content": "<p>Yeah, item signatures are decoupled from item bodies</p>",
        "id": 220390810,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307721
    },
    {
        "content": "<p>but wouldnt looking at the return type require more checks if you tell it <code>Vec&lt;str&gt;</code> for example, which is incorrect?</p>",
        "id": 220390830,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307727
    },
    {
        "content": "<p>Or will that be checked in a \"full\" pass through bar?</p>",
        "id": 220390874,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307744
    },
    {
        "content": "<p>Callers of <code>bar</code> only need to know its signature</p>",
        "id": 220390876,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307745
    },
    {
        "content": "<p>Then when <code>bar</code>'s body is checked, the type mismatch will be detected</p>",
        "id": 220390904,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307760
    },
    {
        "content": "<p>But <em>callers</em> of <code>bar</code> don't care about that, they just look at its signature</p>",
        "id": 220390950,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307781
    },
    {
        "content": "<p>I see, so you only need to look at the return type and dont have to care if its a \"wrong\" type?</p>",
        "id": 220390953,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307783
    },
    {
        "content": "<p>well you assume it's correct and that only the implementation can be wrong</p>",
        "id": 220391042,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307804
    },
    {
        "content": "<p>although this all gets tricky with <code>impl Trait</code>, I don't know how that works</p>",
        "id": 220391093,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307821
    },
    {
        "content": "<p>This feels difficult to get \"right\" as in do it without potentially missing issuing some errors and have it be accurate</p>",
        "id": 220391112,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307825
    },
    {
        "content": "<p>well that's why the query system is complicated <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 220391137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307836
    },
    {
        "content": "<p>but it does work</p>",
        "id": 220391151,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307844
    },
    {
        "content": "<p>yeah ive seen the big query file <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span></p>",
        "id": 220391166,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307853
    },
    {
        "content": "<p>All of this complexity is in the query system, not the rest of the compiler</p>",
        "id": 220391188,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307862
    },
    {
        "content": "<p>interesting</p>",
        "id": 220391401,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307914
    },
    {
        "content": "<p><code>impl Trait</code> is indeed a form of global inference, so that \"breaks\" the parallel model (in that it introduces some sequential steps)</p>",
        "id": 220391413,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307916
    },
    {
        "content": "<p>Somewhat unrelated, what is the status of cranelift being used by default for debug builds or with a <code>-Z</code> flag?</p>",
        "id": 220391567,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608307940
    },
    {
        "content": "<p>I don't think we currently get too much of a speedup, because a lot of things are still sequential</p>",
        "id": 220391638,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307953
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/131828-t-compiler/topic/question.20about.20perf/near/220391567\">said</a>:</p>\n<blockquote>\n<p>Somewhat unrelated, what is the status of cranelift being used by default for debug builds or with a <code>-Z</code> flag?</p>\n</blockquote>\n<p>Still requires custom rustc build AFAIK</p>",
        "id": 220391665,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608307968
    },
    {
        "content": "<p>yeah, let me pull up the blog post</p>",
        "id": 220391695,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307988
    },
    {
        "content": "<p><a href=\"https://blog.rust-lang.org/inside-rust/2020/11/15/Using-rustc_codegen_cranelift.html\">https://blog.rust-lang.org/inside-rust/2020/11/15/Using-rustc_codegen_cranelift.html</a></p>",
        "id": 220391714,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608307998
    },
    {
        "content": "<p>Time to light my cpu on fire trying to compile rustc <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 220391952,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608308106
    },
    {
        "content": "<p>For now building it from <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/\">https://github.com/bjorn3/rustc_codegen_cranelift/</a> may be a better idea. That doesn't require building a whole compiler.</p>",
        "id": 220392470,
        "sender_full_name": "bjorn3",
        "timestamp": 1608308336
    },
    {
        "content": "<p>I see, ill try that. My project uses std::arch x86 intrinsics in one spot, i remember simd being an issue for cg_clif, has that been fixed?</p>",
        "id": 220392669,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608308410
    },
    {
        "content": "<p>Which intrinsics does it use? Simd support has got a bit better but there are still many intrinsics that are unimplemented.</p>",
        "id": 220392755,
        "sender_full_name": "bjorn3",
        "timestamp": 1608308450
    },
    {
        "content": "<p>This is all of the code: <a href=\"https://github.com/rslint/rslint/blob/master/crates/rslint_core/src/groups/errors/no_irregular_whitespace.rs#L113\">https://github.com/rslint/rslint/blob/master/crates/rslint_core/src/groups/errors/no_irregular_whitespace.rs#L113</a></p>\n<p>It uses loadu, set1_epi8, cmpeq, and movemask</p>",
        "id": 220392874,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608308506
    },
    {
        "content": "<p><code>_mm256_loadu_si256</code> uses <code>ptr::copy_nonoverlapping</code>. <code>_mm256_set1_epi8</code> directly constructs the simd value without intrinsic. <code>_mm256_cmpeq_epi8</code> uses the <code>simd_eq</code> platform intrinsic and <code>_mm_movemask_epi8</code> uses <code>pmovmskb</code>. All of them are implemented in cg_clif.</p>",
        "id": 220393682,
        "sender_full_name": "bjorn3",
        "timestamp": 1608308843
    },
    {
        "content": "<p>Cool</p>",
        "id": 220393748,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608308872
    },
    {
        "content": "<p>If you have any issues, please open an issue and I will take a look.</p>",
        "id": 220393846,
        "sender_full_name": "bjorn3",
        "timestamp": 1608308904
    },
    {
        "content": "<p>Also wont future projects like std::simd have issues since they directly link to llvm functions?</p>",
        "id": 220393848,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608308905
    },
    {
        "content": "<p>The goal for <code>std::simd</code> is precisely to not directly link to llvm intrinsics but instead to use the backend and target independent <code>extern \"platform-intrinsic\"</code>.</p>",
        "id": 220394012,
        "sender_full_name": "bjorn3",
        "timestamp": 1608308970
    },
    {
        "content": "<p>Ah ok, i must have remembered it wrong then <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 220394075,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608308994
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/131828-t-compiler/topic/question.20about.20perf/near/220390606\">said</a>:</p>\n<blockquote>\n<p>how do you decide if the return type is correct if you havent type checked bar yet?</p>\n</blockquote>\n<p>I'll emphasize that being able to check other things against the signature without looking at the body is essentially <em>why</em> rust requires that the signature have all the types on it.  (It <em>could</em> do more inference, but that's worse for compiler perf, for error messages, for human readability, and for change-the-code debugging.)</p>",
        "id": 220417938,
        "sender_full_name": "scottmcm",
        "timestamp": 1608319891
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/131828-t-compiler/topic/question.20about.20perf/near/220394075\">said</a>:</p>\n<blockquote>\n<p>Ah ok, i must have remembered it wrong then <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>\n</blockquote>\n<p>You might have noticed that the implementation still calls them as <code>llvm::simd_add</code>, but the actual declarations of those have moved off using <code>link_llvm_intrinsics</code>.</p>",
        "id": 220418126,
        "sender_full_name": "scottmcm",
        "timestamp": 1608319975
    },
    {
        "content": "<p>To elaborate on dependencies between functions during type checking:</p>",
        "id": 220424506,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1608323369
    },
    {
        "content": "<p>The parallel query system is set up such that a query can block if it depends on the result of another in-progress query</p>",
        "id": 220424589,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1608323403
    },
    {
        "content": "<p>If you have two completely independent functions, then a parallel build of rustc should be able to type-check them in parallel</p>",
        "id": 220424644,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1608323437
    },
    {
        "content": "<p>If one depends on the other in some way, then you'll get less parallelism</p>",
        "id": 220424669,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1608323455
    },
    {
        "content": "<p>Ah ok, so you just run queries in parallel then stuff blocks if it needs to?</p>",
        "id": 220425729,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324137
    },
    {
        "content": "<p>Thats pretty smart, is the issue about enabling that by default?</p>",
        "id": 220425768,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324174
    },
    {
        "content": "<p>well the issue is about running in parallel</p>",
        "id": 220426079,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608324367
    },
    {
        "content": "<p>currently everything still runs on-demand</p>",
        "id": 220426105,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608324383
    },
    {
        "content": "<p>Is it because parallel execution has <span aria-label=\"bug\" class=\"emoji emoji-1f41b\" role=\"img\" title=\"bug\">:bug:</span> ?</p>",
        "id": 220426193,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324458
    },
    {
        "content": "<p>well, more that the perf situation is complicated</p>",
        "id": 220426273,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608324497
    },
    {
        "content": "<p>It has minor bugs and severely impacts performance when only running with one thread, from what I understand</p>",
        "id": 220426278,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324502
    },
    {
        "content": "<p>I recommend reading the PR, it's more up to date</p>",
        "id": 220426279,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608324503
    },
    {
        "content": "<p>oh interesting, how come it butchers performance with one thread?</p>",
        "id": 220426297,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324518
    },
    {
        "content": "<p>Ah ok, where is it?</p>",
        "id": 220426303,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324523
    },
    {
        "content": "<p>It replaces a lot of simple data structures with full-blown locks and mutexes</p>",
        "id": 220426342,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324547
    },
    {
        "content": "<p>Oh no</p>",
        "id": 220426349,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324554
    },
    {
        "content": "<p>that makes sense</p>",
        "id": 220426358,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324561
    },
    {
        "content": "<p>Would it be possible to dynamically switch between the query system used based on the threads available? or is that too difficult/incurs too much size overhead?</p>",
        "id": 220426541,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324666
    },
    {
        "content": "<p>hmm, unsure</p>",
        "id": 220426568,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324692
    },
    {
        "content": "<p>the query system already takes like 10 minutes to compile <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 220426577,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608324700
    },
    {
        "content": "<p>I'd hate to compile it twice</p>",
        "id": 220426585,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608324707
    },
    {
        "content": "<p>I think before we go down that route we need to be sure that the overhead absolutely can't be reduced further</p>",
        "id": 220426593,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324711
    },
    {
        "content": "<p>Well i feel like a higher compile time for rustc is definitely worth it if it means a significant-ish compilation time decrease</p>",
        "id": 220426735,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324788
    },
    {
        "content": "<p>Hmm, maybe <a href=\"https://github.com/salsa-rs/salsa\">salsa</a> is the right place to experiment with this? Though it already allows some parallelism, so not sure how relevant this is.</p>",
        "id": 220426740,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324790
    },
    {
        "content": "<p>Even if my cpu will hate me for it</p>",
        "id": 220426757,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/131828-t-compiler/topic/question.20about.20perf/near/220426735\">said</a>:</p>\n<blockquote>\n<p>Well i feel like a higher compile time for rustc is definitely worth it if it means a significant-ish compilation time decrease</p>\n</blockquote>\n<p>compile times are already like half an hour :/</p>",
        "id": 220426783,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608324818
    },
    {
        "content": "<p>I really don't think this is worth it unless there's no other way</p>",
        "id": 220426806,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608324832
    },
    {
        "content": "<p><em>cries in 50 minute stage 1 compile times</em></p>",
        "id": 220426816,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324838
    },
    {
        "content": "<p>this is also a lot of contributor time to get it to work somehow</p>",
        "id": 220426824,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608324841
    },
    {
        "content": "<p>Ah, rust-analyzer also can do type checking in parallel (and scales <em>very</em> well with the number of cores), so looking at that setup might be helpful</p>",
        "id": 220426867,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324845
    },
    {
        "content": "<p>wouldnt you be looking at chalk since its the engine behind it? or does RA itself do it somehow?</p>",
        "id": 220426906,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324870
    },
    {
        "content": "<p>Ive noticed RA is lightning fast when you change something and its pretty cool</p>",
        "id": 220426932,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324889
    },
    {
        "content": "<p>chalk only does trait solving</p>",
        "id": 220426958,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324903
    },
    {
        "content": "<p>The entire type inference engine is (re-)implemented in rust-analyzer itself</p>",
        "id": 220426987,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324921
    },
    {
        "content": "<p>So does RA do the bulk of the type checking work?</p>",
        "id": 220426994,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324924
    },
    {
        "content": "<p>Oh wow</p>",
        "id": 220426995,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324926
    },
    {
        "content": "<p>And I don't think chalk is parallel by itself</p>",
        "id": 220427006,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324932
    },
    {
        "content": "<p>But we'll run multiple chalk queries in parallel if you tell rust-analyzer to typecheck in parallel</p>",
        "id": 220427067,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324964
    },
    {
        "content": "<p>Isnt the goal to eventually merge the two systems and just have a really fast type checker RA can use?</p>",
        "id": 220427085,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608324972
    },
    {
        "content": "<p>Unfortunately it doesn't do this during normal usage</p>",
        "id": 220427087,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324975
    },
    {
        "content": "<p>Yeah, to some extent</p>",
        "id": 220427106,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608324992
    },
    {
        "content": "<p>Integrating chalk into rustc is a big step towards that goal</p>",
        "id": 220427121,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608325006
    },
    {
        "content": "<p>And there's also work on the way to making a shared library for representing Rust types</p>",
        "id": 220427144,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608325023
    },
    {
        "content": "<p>Because to me it seems like RA reimplements some really big parts of rustc, to my knowledge it reimplements parsing, macro expansion, type checking, and type inference, right?</p>",
        "id": 220427165,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608325035
    },
    {
        "content": "<p>Which would be used by chalk, rustc and rust-analyzer</p>",
        "id": 220427166,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608325035
    },
    {
        "content": "<p>yup</p>",
        "id": 220427189,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608325053
    },
    {
        "content": "<p>That's interesting, the next few years will be interesting to see, itll be interesting how RA and rustc evolve since they do a lot of the same things in different implementations</p>",
        "id": 220427317,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608325134
    },
    {
        "content": "<p>And also name resolution</p>",
        "id": 220427318,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608325135
    },
    {
        "content": "<p>so thats why RA is like 100kloc+ <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 220427480,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608325208
    },
    {
        "content": "<p>oh how is WG-parselib coming btw?</p>",
        "id": 220427515,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608325228
    },
    {
        "content": "<p>I haven't seen any refactors by <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> in a while :/</p>",
        "id": 220427528,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1608325241
    },
    {
        "content": "<p>Not aware of any progress there at the moment, I'm focusing on rust-analyzer itself</p>",
        "id": 220427598,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608325274
    },
    {
        "content": "<p>From what i know it would be an absolute ton of work because they use way different concepts for the tree</p>",
        "id": 220427617,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608325284
    },
    {
        "content": "<p>RA uses rowan which is amazing for IDEs and static analysis but rustc uses a traditional struct-based AST. I dont see how you could combine that without a lot of rework, right?</p>",
        "id": 220427719,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608325326
    },
    {
        "content": "<p>ra's parser is event-driven, you can use it without rowan</p>",
        "id": 220427896,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608325439
    },
    {
        "content": "<p>in fact someone made rustc use r-a's parser once</p>",
        "id": 220427949,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608325449
    },
    {
        "content": "<p>and it worked (kinda)</p>",
        "id": 220427963,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608325465
    },
    {
        "content": "<p>Yeah i implemented a derivative of it for my project which parses js and ts, but it still seems difficult to convert</p>",
        "id": 220427979,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608325476
    },
    {
        "content": "<p>though that might have used rowan as an intermediate IR, don't remember</p>",
        "id": 220427992,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1608325484
    },
    {
        "content": "<p>Because from the events you just receive the start of nodes and the tokens, youd have to manually convert the tokens received to info in the ast structs, also not sure how painful stuff like forward parents would be</p>",
        "id": 220428058,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608325526
    },
    {
        "content": "<p>Not to mention in struct based ASTs it's difficult to convert rowan's tree representation because if a field expects something like a block expression then you can't just give it nothing if the rowan node doesnt include it, but the RA tree doesnt care because everything is optional</p>",
        "id": 220428331,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608325684
    },
    {
        "content": "<p>It seems doable but painful to implement, maybe matklad has some mad scientist trick up his sleeve to do it <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 220428423,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1608325771
    }
]