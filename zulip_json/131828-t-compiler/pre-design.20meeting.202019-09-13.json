[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, you around? So I had hoped to chat with you more in advance of proposed meeting today but .. yeah, life. Are you around at the moment? I have a bit of time. Anyway so we created <a href=\"https://hackmd.io/_ixQrAr5TKafV9m8eSU_VA\" target=\"_blank\" title=\"https://hackmd.io/_ixQrAr5TKafV9m8eSU_VA\">this hackmd</a> capturing a lot of our thinking. It seems useful to try and put that before folks and ask them about. But what I'm wondering is... is there some central <em>question</em> we would prefer to extract? That doc obviously covers a lot of ground.</p>",
        "id": 175607558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568366966
    },
    {
        "content": "<p>yep, I am around</p>",
        "id": 175607575,
        "sender_full_name": "matklad",
        "timestamp": 1568366992
    },
    {
        "content": "<p>rewriting our name resolution again :D</p>",
        "id": 175607618,
        "sender_full_name": "matklad",
        "timestamp": 1568367003
    },
    {
        "content": "<p>So, the central question I think is \"what are immediate action items?\"</p>",
        "id": 175607653,
        "sender_full_name": "matklad",
        "timestamp": 1568367043
    },
    {
        "content": "<p>The hypothesis is that it's \"complete library-ification of chalk and surrounding infra\"</p>",
        "id": 175607697,
        "sender_full_name": "matklad",
        "timestamp": 1568367099
    },
    {
        "content": "<p>but it would be great to get more feedback on this</p>",
        "id": 175607706,
        "sender_full_name": "matklad",
        "timestamp": 1568367120
    },
    {
        "content": "<p>Yeah so</p>",
        "id": 175607785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367194
    },
    {
        "content": "<p>I guess I think it depends a bit on your scope</p>",
        "id": 175607791,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367208
    },
    {
        "content": "<p>Like, I feel we need a social/ideologial question, and not necessary a technical one: are we ready to do BIG CHANGES to make ide GO FAST?</p>",
        "id": 175607792,
        "sender_full_name": "matklad",
        "timestamp": 1568367210
    },
    {
        "content": "<p>I remember now that I had hoped to lay out some kind of chalk timeline, and I can try to edit the doc to at least give a <em>loose</em> one. I think my current thinking would be that this might be a good first step:</p>\n<ul>\n<li>use rust-analyzer as a testbed to push chalk to a working model<br>\n    - it has already exposed some questions around lazy norm, for example<br>\n    - and this will also require refining the interface between chalk and its environment</li>\n</ul>",
        "id": 175607877,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367291
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> , I've seen you around</p>",
        "id": 175607880,
        "sender_full_name": "matklad",
        "timestamp": 1568367304
    },
    {
        "content": "<p>other steps, maybe part of that:</p>\n<ul>\n<li>try to extract a shared definition of types + unification</li>\n</ul>",
        "id": 175607952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367367
    },
    {
        "content": "<p>I guess the point is, to sort of prototype the proposed libraries with rust-analyzer as first consumer</p>",
        "id": 175607958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367381
    },
    {
        "content": "<p>but keeping rustc in mind</p>",
        "id": 175607963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367388
    },
    {
        "content": "<p>and where possible trying to integrate with rustc and/or maybe have follow-up meetings to describe how things are looking and what that might mean for rustc</p>",
        "id": 175607977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367412
    },
    {
        "content": "<p>well meetings and/or blog posts whatever</p>",
        "id": 175607981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367420
    },
    {
        "content": "<blockquote>\n<p>Like, I feel we need a social/ideologial question, and not necessary a technical one: are we ready to do BIG CHANGES to make ide GO FAST?</p>\n</blockquote>\n<p>I do agree that ultimately what we need most of all is a sort of ... consensus around this point. I worry that talking this abstractly will not get something useful.</p>",
        "id": 175608011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367465
    },
    {
        "content": "<blockquote>\n<p>and where possible trying to integrate with rustc </p>\n</blockquote>\n<p>I feel like finding an integration point with rustc is one specific question I'd love to know the answer to</p>",
        "id": 175608081,
        "sender_full_name": "matklad",
        "timestamp": 1568367516
    },
    {
        "content": "<blockquote>\n<p>but keeping rustc in mind</p>\n</blockquote>\n<p>( my main concern here is that rustc has immediate needs too :) I think that we need to be exploring those in tandem, and I'm worried about spreading too thin. )</p>",
        "id": 175608084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367519
    },
    {
        "content": "<p>Continuing experiments feels good, but I fear that, unless it is integrated in production rustc, there's always a risk of loosing momentum and just not finishing stuff</p>",
        "id": 175608111,
        "sender_full_name": "matklad",
        "timestamp": 1568367558
    },
    {
        "content": "<p>/me thinks</p>",
        "id": 175608133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367587
    },
    {
        "content": "<p>there's also the question of what integration .. means</p>",
        "id": 175608194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367622
    },
    {
        "content": "<p>e.g., chalk is integrated into rustc</p>",
        "id": 175608196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367626
    },
    {
        "content": "<p>I think if we can do \"libraryfication by refactoring\" that would be good</p>",
        "id": 175608203,
        "sender_full_name": "centril",
        "timestamp": 1568367630
    },
    {
        "content": "<p>but there's room for improvement</p>",
        "id": 175608213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367646
    },
    {
        "content": "<p>the overall aim being cleaner code than the messes that we sometimes have in the compiler today</p>",
        "id": 175608214,
        "sender_full_name": "centril",
        "timestamp": 1568367647
    },
    {
        "content": "<p>anyway, maybe this <em>is</em> the conversation we want to be having in said meeting :)</p>",
        "id": 175608233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367661
    },
    {
        "content": "<p>I think there's a natural contradiction between \"immediate goals\" and \"we badly need to refactor this\". Can we agree on the subset of immediate goals that we do, and, more importantnly, on the subset we <em>don't</em> do, until the foundation is in the better shape?</p>",
        "id": 175608246,
        "sender_full_name": "matklad",
        "timestamp": 1568367669
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> not necessarily -- you refactored the lexer and extracted it, I did some of the same with the parser and it is more amenable to library-fication now?</p>",
        "id": 175608289,
        "sender_full_name": "centril",
        "timestamp": 1568367721
    },
    {
        "content": "<p>(thus satisfying the immediate goals...?)</p>",
        "id": 175608332,
        "sender_full_name": "centril",
        "timestamp": 1568367732
    },
    {
        "content": "<p>I agree it is good to refactor in place where possible</p>",
        "id": 175608350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568367754
    },
    {
        "content": "<p>I was able to refactor lexer only because no one else was touching it, and I feel like I've tanked at least one \"let's improve error recovering in raw string literals\" PR with my effort.</p>",
        "id": 175608379,
        "sender_full_name": "matklad",
        "timestamp": 1568367781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> ah well... folks touch the parser very often and I was able to push splitting a 8k line file apart in the bors queue nonetheless ;)</p>",
        "id": 175608426,
        "sender_full_name": "centril",
        "timestamp": 1568367824
    },
    {
        "content": "<blockquote>\n<p>Continuing experiments feels good, but I fear that, unless it is integrated in production rustc, there's always a risk of loosing momentum and just not finishing stuff</p>\n</blockquote>\n<p>I'm thinking about this <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span></p>",
        "id": 175608638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568368028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  Aside: I found <a href=\"https://www.youtube.com/watch?v=x3evzO8O9e8\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=x3evzO8O9e8\">https://www.youtube.com/watch?v=x3evzO8O9e8</a> a most excellent watch.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"x3evzO8O9e8\" href=\"https://www.youtube.com/watch?v=x3evzO8O9e8\" target=\"_blank\" title=\"https://www.youtube.com/watch?v=x3evzO8O9e8\"><img src=\"https://i.ytimg.com/vi/x3evzO8O9e8/default.jpg\"></a></div>",
        "id": 175608645,
        "sender_full_name": "centril",
        "timestamp": 1568368041
    },
    {
        "content": "<p>I'm trying to make it more concrete</p>",
        "id": 175608651,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568368056
    },
    {
        "content": "<p>I guess this is not a <em>question</em> so much as a statement from \"our\" side</p>",
        "id": 175608702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568368085
    },
    {
        "content": "<p>That is, the proposal is basically that we want to work more aggressively on creating libraries that are integrated into rustc, and these are a few candidates</p>",
        "id": 175608725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568368125
    },
    {
        "content": "<p>I worry simultaneously that we'll get lost in technical details on those libraries or that we'll be so high-level it's meaningless, so maybe we should just see where it goes :) 50/50 nobody even shows up :P</p>",
        "id": 175608744,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568368151
    },
    {
        "content": "<p>But yeah it seems like a reasonably good plan for meeting to say: here are some ideas for those libraries, let's discuss some of what it might mean to try and extract from rustc in detail..? I think that chalk is actually not the most interesting bit here, since a lot of that is understood, but rather trying to go a bit more outside current rustc-chalk-integration, notably to include the lowering code and/or def'n of types.</p>",
        "id": 175608846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568368225
    },
    {
        "content": "<p>so maybe I'll refocus that part of document to talk a bit about that</p>",
        "id": 175608848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568368235
    },
    {
        "content": "<p>Yeah... I sort of feel that the md doc we've created covers technical side of things pretty well, so I see most value in dispersing info and maybe exciting some folks to help out :)</p>",
        "id": 175608850,
        "sender_full_name": "matklad",
        "timestamp": 1568368240
    },
    {
        "content": "<p>and to give rust-analyzer as an example of where we have gone a bit further, though not as far as I'd like</p>",
        "id": 175608856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568368252
    },
    {
        "content": "<p>ok, this is helpful, i'm going to try and tweak some of the content in/around chalk</p>",
        "id": 175608874,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568368270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> to add to the technical side of things, I think you noted that using visibility to have clear public interfaces to lotsa private details is helpful for library-ifiction. I basically agree -- that's what I was going for in e.g. typeck/lowering/parser</p>",
        "id": 175609110,
        "sender_full_name": "centril",
        "timestamp": 1568368517
    },
    {
        "content": "<p>I think we can do a lot more of that</p>",
        "id": 175609112,
        "sender_full_name": "centril",
        "timestamp": 1568368527
    },
    {
        "content": "<p>Yeah, reducing visibility is a low-hanging fruit. It doesn't help with cutting dependenies per se, but it helps with identifying dependency edges that shouldn't be there. </p>\n<p>Another good mechanical thing is removing state.</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/0a842e8c7a18ac609c3c7c60563e8e6bc7d917c6/src/libsyntax/parse/lexer/mod.rs#L45-L77\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/0a842e8c7a18ac609c3c7c60563e8e6bc7d917c6/src/libsyntax/parse/lexer/mod.rs#L45-L77\">before</a></p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/f43ac065347ccbd80d0465489f51408fd907bcf7/src/libsyntax/parse/lexer/mod.rs#L32-L43\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f43ac065347ccbd80d0465489f51408fd907bcf7/src/libsyntax/parse/lexer/mod.rs#L32-L43\">after</a></p>",
        "id": 175609306,
        "sender_full_name": "matklad",
        "timestamp": 1568368713
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/f43ac065347ccbd80d0465489f51408fd907bcf7/src/libsyntax/parse/lexer/mod.rs#L32-L43\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/f43ac065347ccbd80d0465489f51408fd907bcf7/src/libsyntax/parse/lexer/mod.rs#L32-L43\">after</a></p>\n</blockquote>\n<p>Oh that's just beautiful!</p>",
        "id": 175609593,
        "sender_full_name": "centril",
        "timestamp": 1568369041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> question about chalk-rustc integration: is <code>chalk-engine</code> behind a feature flag, or is it the actual thing that's being used for trait solving?</p>",
        "id": 175610017,
        "sender_full_name": "matklad",
        "timestamp": 1568369471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>  it's a flag (<code>-Zchalk</code>)-- also, I'll be gone for ~1.5 hours or so, I'll try to wrap up the additions. I was trying to create a top section like \"main questions\" to try and guide overall discusison, feel free to edit if you like</p>",
        "id": 175611507,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568371127
    },
    {
        "content": "<blockquote>\n<p>Another good mechanical thing is removing state.</p>\n</blockquote>\n<p>(where \"removing\" may be removal from code base entirely, or may be factoring into a different struct tailored to certain purposes. I note this mainly because I was curious about where e.g. the <code>open_braces</code> field went.</p>",
        "id": 175618175,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568377561
    },
    {
        "content": "<p>(it occurs to me <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> we're looking over another obvious candidate, which is merging rustc's query system with salsa)</p>",
        "id": 175620318,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568379233
    },
    {
        "content": "<p>but right now the gulf there is large enough I dont' want to go there :)</p>",
        "id": 175620376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568379262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I want to encourage that thinking :P rustc's query system feels very inscrutable to use</p>",
        "id": 175620447,
        "sender_full_name": "centril",
        "timestamp": 1568379338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yeah! Another great example of state factoring is <a href=\"https://github.com/rust-lang/rust/pull/63400\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63400\">https://github.com/rust-lang/rust/pull/63400</a></p>",
        "id": 175620466,
        "sender_full_name": "matklad",
        "timestamp": 1568379354
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> might be possible to do some of that for the <code>Parser</code></p>",
        "id": 175620544,
        "sender_full_name": "centril",
        "timestamp": 1568379392
    },
    {
        "content": "<blockquote>\n<p>(it occurs to me <span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> we're looking over another obvious candidate, which is merging rustc's query system with salsa)</p>\n</blockquote>\n<p>(I'm reminded that I have 25 messages sitting in <a href=\"https://salsa.zulipchat.com/\" target=\"_blank\" title=\"https://salsa.zulipchat.com/\">the salsa zulip</a> I have yet follow up on,  dang it -- I've been spending my \"free morning hours\" <a href=\"https://github.com/rayon-rs/rfcs/pull/5\" target=\"_blank\" title=\"https://github.com/rayon-rs/rfcs/pull/5\">on rayon</a> lately)</p>",
        "id": 175620752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568379575
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> might be possible to do some of that for the <code>Parser</code></p>\n</blockquote>\n<p>In particular, I think a great improvement would be to remove ParseSess almost entirely, if we have Parser it's a bit weird to have something that persists across multiple parses</p>",
        "id": 175621166,
        "sender_full_name": "simulacrum",
        "timestamp": 1568379864
    },
    {
        "content": "<p>and we often use it as sort of \"implicit output\" from parser which means locks and such</p>",
        "id": 175621193,
        "sender_full_name": "simulacrum",
        "timestamp": 1568379887
    },
    {
        "content": "<p>pre-expansion gating is such an implicit ouput but it's probably going to be hard to ditch</p>",
        "id": 175621762,
        "sender_full_name": "centril",
        "timestamp": 1568380293
    },
    {
        "content": "<p>(and I want to add more pre-exp gating...)</p>",
        "id": 175621773,
        "sender_full_name": "centril",
        "timestamp": 1568380302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> another huge, but mostly orthogonal thing, is the overall strategy of rls vs rls2.0</p>",
        "id": 175622125,
        "sender_full_name": "matklad",
        "timestamp": 1568380545
    },
    {
        "content": "<p>Do we support both? Are we switching to one?</p>",
        "id": 175622138,
        "sender_full_name": "matklad",
        "timestamp": 1568380558
    },
    {
        "content": "<p>Pre-expansion gating can just generate errors on a passed in handler I'd imagine?</p>",
        "id": 175625901,
        "sender_full_name": "simulacrum",
        "timestamp": 1568383089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yea I suppose; -- not exactly sure why we use state for this atm</p>",
        "id": 175625968,
        "sender_full_name": "centril",
        "timestamp": 1568383131
    },
    {
        "content": "<p>oh wait... I do know why... <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> we haven't done cfg expansion during parsing</p>",
        "id": 175626019,
        "sender_full_name": "centril",
        "timestamp": 1568383167
    },
    {
        "content": "<p>so it's time travel to emit those errors</p>",
        "id": 175626029,
        "sender_full_name": "centril",
        "timestamp": 1568383173
    },
    {
        "content": "<p>I'm fine with time travel :)</p>",
        "id": 175626055,
        "sender_full_name": "simulacrum",
        "timestamp": 1568383197
    },
    {
        "content": "<p>there could be a <code>#![cfg_attr(feature \"unstable\", feature(or_patterns)]</code></p>",
        "id": 175626056,
        "sender_full_name": "centril",
        "timestamp": 1568383199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> so am I, in theory ;)</p>",
        "id": 175626128,
        "sender_full_name": "centril",
        "timestamp": 1568383217
    },
    {
        "content": "<p>we'd need to do some amount of cfg-expansion before full parsing to fix it</p>",
        "id": 175626190,
        "sender_full_name": "centril",
        "timestamp": 1568383273
    },
    {
        "content": "<p>which means we'd need to do some amount of parsing first</p>",
        "id": 175626216,
        "sender_full_name": "centril",
        "timestamp": 1568383286
    },
    {
        "content": "<p>Seems like expanding crate level attributes makes sense. This also interestingly intersects with why we made editions CLI flag only</p>",
        "id": 175626338,
        "sender_full_name": "simulacrum",
        "timestamp": 1568383347
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  right; but then you need to parse those crate level attrs first that is</p>",
        "id": 175626375,
        "sender_full_name": "centril",
        "timestamp": 1568383372
    },
    {
        "content": "<p>In theory we could do the same for features though it would be quite painful</p>",
        "id": 175626376,
        "sender_full_name": "simulacrum",
        "timestamp": 1568383372
    },
    {
        "content": "<p>Seems plausible to parse them first.</p>",
        "id": 175626446,
        "sender_full_name": "simulacrum",
        "timestamp": 1568383415
    },
    {
        "content": "<p>yea, probably not very difficult to do</p>",
        "id": 175626452,
        "sender_full_name": "centril",
        "timestamp": 1568383423
    },
    {
        "content": "<p>mainly plumbing changes</p>",
        "id": 175626471,
        "sender_full_name": "centril",
        "timestamp": 1568383433
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> another huge, but mostly orthogonal thing, is the overall strategy of rls vs rls2.0</p>\n</blockquote>\n<p>omg yes we need to make a separate meeting on this, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span></p>",
        "id": 175631179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1568386158
    }
]