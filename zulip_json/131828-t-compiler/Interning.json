[
    {
        "content": "<p>I find the interning code in <code>compiler/rustc_middle/src/ty/context.rs</code> quite confusing. Particularly the <code>Interned</code> type. All its impls (<code>PartialEq</code>, <code>Hash</code>, etc.) work on the inner type's contents, when it seems like they can work on just the pointer.</p>",
        "id": 268773203,
        "sender_full_name": "nnethercote",
        "timestamp": 1642721354
    },
    {
        "content": "<p>Hashing the pointer would introduce non-determinism.</p>",
        "id": 268773385,
        "sender_full_name": "bjorn3",
        "timestamp": 1642721463
    },
    {
        "content": "<p>But a major point of interning is to allow equality and hashing of a pointer. It's done for other interned types like <code>List&lt;T&gt;</code> and <code>TyS</code></p>",
        "id": 268774204,
        "sender_full_name": "nnethercote",
        "timestamp": 1642722042
    },
    {
        "content": "<p>Only a HashStable impl needs to avoid hashing a pointer value</p>",
        "id": 268774789,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642722431
    },
    {
        "content": "<p>It's fine for Hash to hash the address of an interned pointer</p>",
        "id": 268774820,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642722455
    },
    {
        "content": "<p>Anyway, I'm totally confused by <code>Interned</code>, if someone knows what it's for</p>",
        "id": 268775422,
        "sender_full_name": "nnethercote",
        "timestamp": 1642722934
    },
    {
        "content": "<p>(I understand interning in general, just not the specific purpose of the <code>Interned</code> type)</p>",
        "id": 268775451,
        "sender_full_name": "nnethercote",
        "timestamp": 1642722956
    },
    {
        "content": "<p>Using interning to allow comparing pointers is fine. It is hashing I have a problem with.</p>",
        "id": 268776310,
        "sender_full_name": "bjorn3",
        "timestamp": 1642723447
    },
    {
        "content": "<p>It introduces noise in the perf results and if someone accidentally depends on iteration order that will result in non-determinism even without incremental compilation. Normally it would just make it more sensitive to compiler and source changes, but when hashing pointers it will change every time the aslr seed changes.</p>",
        "id": 268776527,
        "sender_full_name": "bjorn3",
        "timestamp": 1642723575
    },
    {
        "content": "<p>Aw geez, I was confused by <code>Interned</code> last month and eventually <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/List.3CTy.3E/near/263952437\">worked it out</a> and then forgot about that. Ok, definitely gonna rename this confusing type this time</p>",
        "id": 268787732,
        "sender_full_name": "nnethercote",
        "timestamp": 1642731754
    },
    {
        "content": "<p>I just learned about the requirements on <code>Eq</code> and <code>Hash</code> for types the implement <code>Borrow</code>, interesting.</p>",
        "id": 268791238,
        "sender_full_name": "nnethercote",
        "timestamp": 1642735325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> I appreciate the point about the non-determinism. I did some measurements and found that the pointer hashing has a sizeable effect on performance, though. I only measured <code>check full</code>runs:</p>\n<div class=\"codehilite\"><pre><span></span><code>Benchmark &amp; Profile     Scenario    % Change    Significance Factor ?\nctfe-stress-4 check     full    9.84%   49.18x\nprojection-caching check    full    9.75%   48.73x\nwg-grammar check    full    7.34%   36.69x\ndeeply-nested check     full    7.22%   36.11x\nregression-31157 check  full    6.78%   33.90x\nrepro_crate check   full    4.71%   23.57x\ndiesel check    full    4.60%   23.02x\nclap-rs check   full    4.45%   22.26x\nfutures check   full    4.35%   21.76x\nserde check     full    4.14%   20.68x\nhyper-2 check   full    3.81%   19.03x\ntokio-webpush-simple check  full    3.57%   17.83x\npiston-image check  full    3.46%   17.30x\ncargo check     full    3.27%   16.33x\nwebrender-wrench check  full    3.21%   16.05x\nwebrender check     full    3.19%   15.95x\nripgrep check   full    3.14%   15.69x\ncranelift-codegen check     full    3.13%   15.67x\nregex check     full    3.05%   15.25x\ncoercions check     full    3.01%   15.03x\n</code></pre></div>",
        "id": 269062873,
        "sender_full_name": "nnethercote",
        "timestamp": 1643003745
    },
    {
        "content": "<p>That's the slowdowns I got when I changed <code>TyS</code>, <code>List</code>, <code>Predicate</code>, and <code>LintId</code> to hash their contents instead of the pointer</p>",
        "id": 269062927,
        "sender_full_name": "nnethercote",
        "timestamp": 1643003795
    }
]