[
    {
        "content": "<p>spawned off T-compiler meeting discussion</p>",
        "id": 182674053,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575561951
    },
    {
        "content": "<p>context: there's discussion of breakage injected by PR <a href=\"https://github.com/rust-lang/rust/issues/59752\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59752\">#59752</a></p>",
        "id": 182674192,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562022
    },
    {
        "content": "<p>see e.g. this comment: <a href=\"https://github.com/rust-lang/rust/pull/59752#issuecomment-554628486\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59752#issuecomment-554628486\">https://github.com/rust-lang/rust/pull/59752#issuecomment-554628486</a></p>",
        "id": 182674201,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562025
    },
    {
        "content": "<p>which links to a number of issues that provide examples of things that \"broke\"</p>",
        "id": 182674223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562043
    },
    {
        "content": "<p>but some (perhaps all?) of these were using unsupported use cases</p>",
        "id": 182674256,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562061
    },
    {
        "content": "<p>I've self-assigned <a href=\"https://github.com/rust-lang/rust/issues/65610\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65610\">#65610</a> to myself for further investigation</p>",
        "id": 182674382,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562111
    },
    {
        "content": "<p>it would be interesting to know if there is any public documentation that specifies what Rust dylib is?</p>",
        "id": 182674403,
        "sender_full_name": "mw",
        "timestamp": 1575562125
    },
    {
        "content": "<p>I've been <em>dying</em> to research this</p>",
        "id": 182674421,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562136
    },
    {
        "content": "<p>I can feel it ... its coming ... I might have to draft yet another  <strong>epic</strong> blog post</p>",
        "id": 182674451,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562153
    },
    {
        "content": "<p>as far as I know, we don't even guarantee that it is a proper shared library/DLL</p>",
        "id": 182674457,
        "sender_full_name": "mw",
        "timestamp": 1575562158
    },
    {
        "content": "<p>AFAIK, we have not only no public documentation but we don't even have internal documentation (i.e., not even in our heads)</p>",
        "id": 182674464,
        "sender_full_name": "simulacrum",
        "timestamp": 1575562162
    },
    {
        "content": "<p>/me cannot wait to interview graydon</p>",
        "id": 182674490,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562176
    },
    {
        "content": "<p>Yes, I think there are lots of unknowns, but I'm not entirely comfortable with the breakage we're seeing</p>",
        "id": 182674491,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562177
    },
    {
        "content": "<p>I thnk <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> might have \"the best\" picture of the history here?</p>",
        "id": 182674512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562194
    },
    {
        "content": "<p>I guess I feel like:</p>",
        "id": 182674517,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562199
    },
    {
        "content": "<p>similar to RLIBs where we reserve the right to make them MIR-only at some point</p>",
        "id": 182674562,
        "sender_full_name": "mw",
        "timestamp": 1575562203
    },
    {
        "content": "<p>I'd be <em>more</em> comfortable with the breakage if we had an RFC or an announced plan</p>",
        "id": 182674570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562210
    },
    {
        "content": "<p>that we had \"designed\"</p>",
        "id": 182674576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562214
    },
    {
        "content": "<p>or at least that we were evolving</p>",
        "id": 182674608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562242
    },
    {
        "content": "<p>so we could point people at it</p>",
        "id": 182674617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562246
    },
    {
        "content": "<p>something other than \"we'll keep the use of dylib in rustc working, by some means. The rest of you are on your own\"</p>",
        "id": 182674625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562249
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>'s comments on <a href=\"https://github.com/rust-lang/rust/issues/65610\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65610\">https://github.com/rust-lang/rust/issues/65610</a>  made it sound like a lot of crates would be affected?</p>",
        "id": 182674661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562278
    },
    {
        "content": "<p>not really sure what a lot is here</p>",
        "id": 182674679,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562288
    },
    {
        "content": "<p>and I wasn't clear if this was limited to windows-gnu?</p>",
        "id": 182674694,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562297
    },
    {
        "content": "<p>well its already landed, as a stable-to-stable regression</p>",
        "id": 182674703,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562301
    },
    {
        "content": "<p>ok, s/would be/are/</p>",
        "id": 182674713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562310
    },
    {
        "content": "<p>so presumably we're already seeing the fallout</p>",
        "id": 182674719,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562314
    },
    {
        "content": "<p>I'm referring to this comment:</p>\n<blockquote>\n<p>Okay, that’s somewhat bad, then, because libraries that rely exclusively on arguments emitted by cc for linking purposes are very abound in the ecosystem.</p>\n</blockquote>",
        "id": 182674766,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562323
    },
    {
        "content": "<p>well, some part of the fallout anyway</p>",
        "id": 182674770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562328
    },
    {
        "content": "<p>anyway the truth is I have no idea what the right behavior is here</p>",
        "id": 182674793,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562346
    },
    {
        "content": "<p>but I bet folks like <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> etc might have some instincts for it</p>",
        "id": 182674802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562355
    },
    {
        "content": "<p>This sort of change falls in line with how we don't in general give a ton of control to users about symbols and such, and it may be best solved by adding a flag or something like that to disable the behavior. I think it's true though that <code>dylib</code> has generally been designed historically as \"so long as rustc keeps working, anything else goes\"</p>",
        "id": 182674873,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1575562409
    },
    {
        "content": "<p>Me neither ;) I always thought <code>#[link]</code> was optional, and based on what I’ve seen in ecosystem, others did so too. The largest problem with that notion is that things mostly work most of the time and only start failing in certain scenarios when you omit it.</p>",
        "id": 182674874,
        "sender_full_name": "nagisa",
        "timestamp": 1575562409
    },
    {
        "content": "<p>hmm. I wonder if the scope of the \"parity with C\" working group is solely restricted to cdylibs, or if they are interested in dylibs too</p>",
        "id": 182674901,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575562433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> can you confirm whether this fallout is specific to windows-gnu?</p>",
        "id": 182674905,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562436
    },
    {
        "content": "<p>The breakage is not windows-gnu specific.</p>",
        "id": 182674973,
        "sender_full_name": "nagisa",
        "timestamp": 1575562463
    },
    {
        "content": "<p>does C++ have shared libraries?</p>",
        "id": 182674982,
        "sender_full_name": "mw",
        "timestamp": 1575562469
    },
    {
        "content": "<p>or do they all go through a C interface?</p>",
        "id": 182674994,
        "sender_full_name": "mw",
        "timestamp": 1575562480
    },
    {
        "content": "<p>/me has to run too</p>",
        "id": 182675102,
        "sender_full_name": "mw",
        "timestamp": 1575562554
    },
    {
        "content": "<blockquote>\n<p>It is not windows-gnu specific.</p>\n</blockquote>\n<p>how does that come about, when the PR in question only changes the behavior of windows-gnu? Or is the PR description misleading me?</p>\n<blockquote>\n<p>This makes windows-gnu match the behavior of windows-msvc. It probably doesn't make sense to export these symbols on other platforms either.</p>\n</blockquote>",
        "id": 182675166,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562576
    },
    {
        "content": "<p>I guess, reading the code, that it is, it certainly seems to make more general changes.</p>",
        "id": 182675195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562600
    },
    {
        "content": "<p>It was changed to affect all platforms.</p>",
        "id": 182675206,
        "sender_full_name": "Zoxc",
        "timestamp": 1575562608
    },
    {
        "content": "<p>OK I see I see</p>",
        "id": 182675375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575562730
    },
    {
        "content": "<p>We can probably count extern functions as being exported to avoid having using <code>link</code> attributes, assuming linkers allow you to specify functions which don't exist to be exported.</p>",
        "id": 182675753,
        "sender_full_name": "Zoxc",
        "timestamp": 1575562964
    },
    {
        "content": "<p>(at least extern functions used by any methods that are not marked <code>#[inline(never)]</code> ...?)</p>",
        "id": 182676212,
        "sender_full_name": "pnkfelix",
        "timestamp": 1575563239
    },
    {
        "content": "<p>OK. I don't really have a strong opinion as to the proper answer here, as I said, but I kind of feel like we should try to write-up an RFC with a plan and decide that way (personally). Making arbitrary changes at this point without having had public discussion feels not great.</p>",
        "id": 182676641,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1575563483
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Parity with C would only apply to cdylib or staticlib.</p>",
        "id": 182679300,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1575564926
    },
    {
        "content": "<blockquote>\n<p>OK. I don't really have a strong opinion as to the proper answer here, as I said, but I kind of feel like we should try to write-up an RFC with a plan and decide that way (personally). Making arbitrary changes at this point without having had public discussion feels not great.</p>\n</blockquote>\n<p>Yes, I want to second that. I'm sure there are ways to rejigger things until most of the reported problems go away but the real issue is that don't have a specification of what is and what isn't supported and there is no public documentation of the fact that nothing at all can be expected from Rust dylibs.</p>",
        "id": 182742462,
        "sender_full_name": "mw",
        "timestamp": 1575624453
    }
]