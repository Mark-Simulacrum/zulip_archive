[
    {
        "content": "<p>I don't think this issue is a bug, so I closed it, but I would appreciate someone else taking a look just to double-check! <a href=\"https://github.com/rust-lang/rust/issues/78240\">#78240</a></p>",
        "id": 214234818,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603394075
    },
    {
        "content": "<p>My explanation from the issue:</p>\n<p>Here's my reasoning:</p>\n<p>This code</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>is equivalent to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">range</span>: <span class=\"nc\">RangeFrom</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>. The type of <code>range</code> is <code>RangeFrom&lt;i32&gt;</code>; even if it <em>were</em> <code>!</code>, the type of the <code>for</code> expression should not depend on the type of the value it is iterating over.</p>\n<p>And the same reasoning for <code>while { panic!(); false } {}</code>.</p>",
        "id": 214235715,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603394455
    },
    {
        "content": "<p>I personally do think we want to allow for things like that but I am not completely sure about that. cc <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span></p>",
        "id": 214236000,
        "sender_full_name": "lcnr",
        "timestamp": 1603394595
    },
    {
        "content": "<p>Your reasoning makes sense to me.  (It omits the <code>IntoIterator</code> step, but that's an identity for <code>Range</code> so it doesn't matter.)</p>",
        "id": 214236170,
        "sender_full_name": "scottmcm",
        "timestamp": 1603394650
    },
    {
        "content": "<p>If there's a feature request here, it's that somebody wants <code>{ !; T }</code> to be <code>!</code> and not <code>T</code>, not anything to do with <code>for</code>.</p>",
        "id": 214236292,
        "sender_full_name": "scottmcm",
        "timestamp": 1603394715
    },
    {
        "content": "<p>You don't need any loops to reproduce this, just a block</p>",
        "id": 214236442,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603394789
    },
    {
        "content": "<p>But that's at least an inference-breaking change.  It might be a feasible one, though, since it only happens in cases with unreachable code.</p>\n<p>Actually, thinking again, it might be weird for generics.  if you have <code>{ T; U }</code> it'd have to always be <code>U</code> even if <code>T</code> happens to be <code>!</code> sometimes.  So probably not a good idea to change the type in the concrete case.</p>",
        "id": 214236546,
        "sender_full_name": "scottmcm",
        "timestamp": 1603394847
    },
    {
        "content": "<p>Yeah, I don't think this should be changed.</p>",
        "id": 214237021,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603395079
    },
    {
        "content": "<p>If you have a panic in your code, that's a runtime thing. And rustc will warn you.</p>",
        "id": 214237056,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603395094
    },
    {
        "content": "<p>It seems like that would be something for dependent types, which we don't have <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 214237103,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603395115
    },
    {
        "content": "<p>I do think something inconsistent is going on, because the following works, but doesn't if you uncomment the <code>()</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ()</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214240211,
        "sender_full_name": "varkor",
        "timestamp": 1603396561
    },
    {
        "content": "<p>Shouldn't any statement have type <code>()</code>, and therefore the two snippets should be equivalent?</p>",
        "id": 214240280,
        "sender_full_name": "varkor",
        "timestamp": 1603396581
    },
    {
        "content": "<p><del><code>return</code> isn't type-dependent, so it might be because of the control flow instead of the type.</del></p>",
        "id": 214240467,
        "sender_full_name": "scottmcm",
        "timestamp": 1603396669
    },
    {
        "content": "<p><del><code>'a: { break panic!(); () }</code> being different from <code>{ panic!(); () }</code> doesn't seem unreasonable.</del></p>",
        "id": 214240587,
        "sender_full_name": "scottmcm",
        "timestamp": 1603396714
    },
    {
        "content": "<p><del>Err, ignore that.</del></p>\n<p>I guess something special-cased a final <code>return foo;</code> so that the semicolon was allowed</p>",
        "id": 214240654,
        "sender_full_name": "scottmcm",
        "timestamp": 1603396746
    },
    {
        "content": "<p>afaik we have some special casing re <code>stmt.diverges</code> or something</p>",
        "id": 214240819,
        "sender_full_name": "lcnr",
        "timestamp": 1603396818
    },
    {
        "content": "<p>but that's something I never really looked into too much</p>",
        "id": 214240856,
        "sender_full_name": "lcnr",
        "timestamp": 1603396833
    },
    {
        "content": "<p>I personally think it's nice to be clever about diverging code like this, but it tends only to occur in weird scenarios anyway, so it's not a big deal either way.</p>",
        "id": 214241937,
        "sender_full_name": "varkor",
        "timestamp": 1603397338
    },
    {
        "content": "<p>I think there may have been a time when <code>!</code> anywhere was treated as diverging, but I think it's less enthusiastic about that now.</p>",
        "id": 214242175,
        "sender_full_name": "varkor",
        "timestamp": 1603397456
    }
]