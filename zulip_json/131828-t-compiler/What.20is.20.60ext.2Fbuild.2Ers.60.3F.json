[
    {
        "content": "<p>I am looking at <code>ext/build.rs</code> and I am not sure what it does. I've tried commenting out it's method (<code>item_use_list</code>), but <code>cargo check</code> passed successfully after that. Is this something related to old syntax-based compiler plugins, which we want to remove anyway? Could we get rid of this thing or trim it down? ^^ cc  <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>, I think you've recently touched this code</p>",
        "id": 176275903,
        "sender_full_name": "matklad",
        "timestamp": 1569091312
    },
    {
        "content": "<p>I believe it's the helper code that's used by the built-in derives and macros for expansion...</p>",
        "id": 176275961,
        "sender_full_name": "simulacrum",
        "timestamp": 1569091381
    },
    {
        "content": "<p>Probably some of it isn't necessarily currently used though (not sure if I'd delete it; we might want it again)</p>",
        "id": 176275971,
        "sender_full_name": "simulacrum",
        "timestamp": 1569091426
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> hm, actually, that module might be entirely unused now</p>",
        "id": 176276034,
        "sender_full_name": "simulacrum",
        "timestamp": 1569091524
    },
    {
        "content": "<p>aha, no, I do get at least one error if I delete it entirely...</p>",
        "id": 176276115,
        "sender_full_name": "simulacrum",
        "timestamp": 1569091646
    },
    {
        "content": "<p>and if you commment it out, there's a bunch of usages</p>",
        "id": 176276131,
        "sender_full_name": "matklad",
        "timestamp": 1569091676
    },
    {
        "content": "<p>deriving/generic/mod.rs for one</p>",
        "id": 176276171,
        "sender_full_name": "matklad",
        "timestamp": 1569091688
    },
    {
        "content": "<p>I guess, long term, we want to transition built-in macros to token model and remove the thing?</p>",
        "id": 176276186,
        "sender_full_name": "matklad",
        "timestamp": 1569091740
    },
    {
        "content": "<p>hm, probably? It seems like most of it is basically just helpers -- probably replaceable with e.g. <code>quote!</code> or something like it from syn</p>",
        "id": 176276197,
        "sender_full_name": "simulacrum",
        "timestamp": 1569091763
    },
    {
        "content": "<p>I suspect it's probably mostly removable today</p>",
        "id": 176276204,
        "sender_full_name": "simulacrum",
        "timestamp": 1569091784
    },
    {
        "content": "<p>and it can definitely be decoupled from ExtCtxt I think</p>",
        "id": 176276269,
        "sender_full_name": "simulacrum",
        "timestamp": 1569091845
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> Do you ask for just \"cleanup\" or with some goal in mind?</p>",
        "id": 176276275,
        "sender_full_name": "simulacrum",
        "timestamp": 1569091860
    },
    {
        "content": "<p>just cleanup</p>",
        "id": 176276288,
        "sender_full_name": "matklad",
        "timestamp": 1569091876
    },
    {
        "content": "<p>yeah I'd probably leave it for now -- we can move it into src/libsyntax_ext though as free standing functions, though it's probably just needless churn</p>",
        "id": 176276300,
        "sender_full_name": "simulacrum",
        "timestamp": 1569091912
    },
    {
        "content": "<p>(but which probably would be required for long-term goal of syntax librarification: seems like making sure that everything uses token streams as much as possible should make extraction easier, as token streams are much simpler than AST)</p>",
        "id": 176276347,
        "sender_full_name": "matklad",
        "timestamp": 1569091943
    },
    {
        "content": "<p>I think a good first step to removing it would be to 'inline' portions of it -- particularly where it's pretty useless</p>",
        "id": 176276383,
        "sender_full_name": "simulacrum",
        "timestamp": 1569092012
    },
    {
        "content": "<p>e.g. most of the attr methods are just calling <code>attr::&lt;same name&gt;(&lt;same args&gt;)</code> which is largely unnecessary IMO</p>",
        "id": 176276389,
        "sender_full_name": "simulacrum",
        "timestamp": 1569092031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> If you don't mind, I could take a look at some clean up to it?</p>",
        "id": 176276665,
        "sender_full_name": "simulacrum",
        "timestamp": 1569092464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> sure, feel free do go ahead! I've just read this by accident: the thing I really want to do is to make sure that macro by example doesn't loose jointness info</p>",
        "id": 176276718,
        "sender_full_name": "matklad",
        "timestamp": 1569092531
    },
    {
        "content": "<p>(poking into various bits of libsyntax make me feel like those blind philosophers touching an elephant, but with a yak instead of an elephant)</p>",
        "id": 176276782,
        "sender_full_name": "matklad",
        "timestamp": 1569092669
    },
    {
        "content": "<p>The goal is to eventually migrate built-in macros in <code>libsytnax_ext</code> to token-based model and use some form of <code>quote!</code> for building their output (probably generating internal libsyntax <code>TokenStream</code>, rather than <code>proc_macro::TokenStream</code>, at least for a start.)<br>\nAfter that we'll be able to remove <code>syntax/ext/build.rs</code>, which kind of serves the same goal as <code>quote!</code>, but in AST-based world.</p>",
        "id": 176278819,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569096172
    }
]