[
    {
        "content": "<p>I have a (closed source) program where upgrading from 1.58 to 1.59 (making no changes to the program) increased the size of the stack frame of one of my key functions by 20KB. What can I do to help debug this?</p>",
        "id": 276806457,
        "sender_full_name": "Kyle Huey",
        "timestamp": 1648413342
    },
    {
        "content": "<p>it's not even clear to me how to bisect builds usefully here, so instructions for that would be nice, but perhaps there are other ways to attack this too</p>",
        "id": 276806507,
        "sender_full_name": "Kyle Huey",
        "timestamp": 1648413375
    },
    {
        "content": "<p>If you want to try to determine which change in rustc caused the change, typically we use <a href=\"https://github.com/rust-lang/cargo-bisect-rustc/\"><code>cargo-bisect-rustc</code></a>.  You'll need to either write a script that determines if the stack size is a regression, or use the <code>--prompt</code> option and do it manually.</p>\n<p>You'll probably use date ranges to set the initial range of commits to test.  I think the range between those two versions is 2021-11-29 to 2022-01-13.</p>",
        "id": 276809078,
        "sender_full_name": "Eric Huss",
        "timestamp": 1648416732
    },
    {
        "content": "<p>It would be really cool if we could tell bisect-rustc \"start at 1.59 and end at 1.60\" somehow instead of having to look up the dates manually</p>",
        "id": 276809176,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1648416906
    },
    {
        "content": "<p>Yea, I've wanted that many times.  I opened <a href=\"https://github.com/rust-lang/cargo-bisect-rustc/issues/146\">https://github.com/rust-lang/cargo-bisect-rustc/issues/146</a> for that.  I think it should be a pretty simple change if someone wants to try.</p>",
        "id": 276810597,
        "sender_full_name": "Eric Huss",
        "timestamp": 1648418853
    },
    {
        "content": "<p>thanks, with those dates I was able to bisect it to the regressing PR</p>",
        "id": 276823820,
        "sender_full_name": "Kyle Huey",
        "timestamp": 1648438197
    },
    {
        "content": "<p>Just out of curiosity, what PR is it?</p>",
        "id": 276836055,
        "sender_full_name": "oli",
        "timestamp": 1648452555
    },
    {
        "content": "<p>I'd say <a href=\"https://github.com/rust-lang/rust/issues/90737\">#90737</a> because of <a href=\"https://github.com/rust-lang/rust/issues/67982#issuecomment-1080125015\">this comment</a></p>",
        "id": 276836540,
        "sender_full_name": "lqd",
        "timestamp": 1648452955
    },
    {
        "content": "<p>It says for debug builds. I don't think we don't really optimize much for stack sizes in debug builds. There's a lot of small functions that don't get inlined in debug.</p>",
        "id": 276848379,
        "sender_full_name": "The 8472",
        "timestamp": 1648460300
    },
    {
        "content": "<p>That said, the blanket impl for <code>IntoIterator</code> has an <code>#[inline]</code> which helps with <code>opt-level=1</code> at least<br>\nMaybe the same could be done for the <code>IntoFuture</code> blanket impl. <a href=\"https://doc.rust-lang.org/src/core/future/into_future.rs.html#25\">https://doc.rust-lang.org/src/core/future/into_future.rs.html#25</a></p>",
        "id": 276848900,
        "sender_full_name": "The 8472",
        "timestamp": 1648460602
    },
    {
        "content": "<p>Without optimizations the stack coloring is disabled altogether.</p>",
        "id": 276849505,
        "sender_full_name": "tm",
        "timestamp": 1648461002
    },
    {
        "content": "<p>yeah it was <a href=\"https://github.com/rust-lang/rust/issues/90737\">#90737</a></p>",
        "id": 277087315,
        "sender_full_name": "Kyle Huey",
        "timestamp": 1648606972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/131828-t-compiler/topic/20K.20stack.20frame.20size.20regression.20from.201.2E58.20to.201.2E59/near/276848900\">said</a>:</p>\n<blockquote>\n<p>That said, the blanket impl for <code>IntoIterator</code> has an <code>#[inline]</code> which helps with <code>opt-level=1</code> at least<br>\nMaybe the same could be done for the <code>IntoFuture</code> blanket impl. <a href=\"https://doc.rust-lang.org/src/core/future/into_future.rs.html#25\">https://doc.rust-lang.org/src/core/future/into_future.rs.html#25</a></p>\n</blockquote>\n<p>I don't think we have an MCVE yet, so I've launched a try build of that in <a href=\"https://github.com/rust-lang/rust/pull/95465\">https://github.com/rust-lang/rust/pull/95465</a> so people can try it on fuchsia and closed-source projects</p>",
        "id": 277102155,
        "sender_full_name": "lqd",
        "timestamp": 1648624290
    },
    {
        "content": "<p>let us know if that helps <span class=\"user-mention\" data-user-id=\"452469\">@Kyle Huey</span> and if it does I'll make an actual PR</p>",
        "id": 277186218,
        "sender_full_name": "lqd",
        "timestamp": 1648664416
    },
    {
        "content": "<p>that does not help</p>",
        "id": 277197563,
        "sender_full_name": "Kyle Huey",
        "timestamp": 1648670256
    },
    {
        "content": "<p>probably only helps at opt-level=1 then</p>",
        "id": 277197660,
        "sender_full_name": "lqd",
        "timestamp": 1648670321
    },
    {
        "content": "<p>thanks for trying it out!</p>",
        "id": 277197669,
        "sender_full_name": "lqd",
        "timestamp": 1648670332
    }
]