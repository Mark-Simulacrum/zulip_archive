[
    {
        "content": "<p>I am <strong>not</strong> advocating for changes. I think that their are some advantages to the current design that I fail to understand, and I would like to get enlighten!</p>\n<p>In MIR, you have the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/visit/trait.Visitor.html#method.visit_rvalue\"><code>Visitor</code></a> trait. This traits is extremely useful to visit MIR. But I don't understand why it's a trait with overwriddable methods instead of being free function that takes a closure.</p>\n<p>Let's take an example: extracting all the constant used in a function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">extract_constant</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">mir</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">mir</span>::<span class=\"n\">Body</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">HashSet</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">tcx</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">Const</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[derive(Default)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">Constants</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">constants</span>: <span class=\"nc\">HashSet</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">tcx</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">Const</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">mir</span>::<span class=\"n\">visit</span>::<span class=\"n\">Visitor</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Constants</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">visit_constant</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constant</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mir</span>::<span class=\"n\">Constant</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">mir</span>::<span class=\"n\">Location</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">constants</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">constant</span><span class=\"p\">.</span><span class=\"n\">literal</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">search_constants</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Constants</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">search_constants</span><span class=\"p\">.</span><span class=\"n\">visit_body</span><span class=\"p\">(</span><span class=\"n\">mir</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">search_constants</span><span class=\"p\">.</span><span class=\"n\">constants</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This example is relatively simple. For example it doesn't capture any variable from <code>extract_constant</code>. If instead <code>mir::Body</code> had <code>visit_*</code> methods that took a closure, it would become:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">extract_constant</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">mir</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">mir</span>::<span class=\"n\">Body</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">HashSet</span><span class=\"o\">&lt;&amp;'</span><span class=\"na\">tcx</span><span class=\"w\"> </span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">Const</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">constants</span>: <span class=\"nc\">HashSet</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">rustc_middle</span>::<span class=\"n\">ty</span>::<span class=\"n\">Const</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">HashSet</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">visit_constant</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">constant</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mir</span>::<span class=\"n\">Constant</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">mir</span>::<span class=\"n\">Location</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">constants</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">constant</span><span class=\"p\">.</span><span class=\"n\">literal</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">constants</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In addition to being much shorter, and (IMHO) readable, it's also much easier to capture variables from <code>extract_body</code> since you don't have to create a new field in the <code>Constant</code> struct, then pass them in its constructor.</p>\n<p>Given how much more simple to use the closure version seems to be, what are the advantages of implementing a trait?</p>",
        "id": 217380994,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605866442
    },
    {
        "content": "<p>how would the closure API work if I want to visit both statements and terminators?</p>",
        "id": 217395574,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605876105
    },
    {
        "content": "<p>If you need to visit both at the same time, it doesn't work with this simplistic API. If you just want to extract something from the statement then from the terminators you can always visit it two times. But I guess that some performance is left on the table.</p>\n<p>A more powerful closure-based API would be based on the builder pattern. This would allow to visit both at the same time.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">create_visitor</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">constants</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">constant</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mir</span>::<span class=\"n\">Constant</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">mir</span>::<span class=\"n\">Location</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">terminators</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">terminator</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mir</span>::<span class=\"n\">Terminator</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span>: <span class=\"nc\">mir</span>::<span class=\"n\">Location</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">visit</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217399387,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605878404
    },
    {
        "content": "<p>But it wouldn't let you share mutable state between the closures</p>",
        "id": 217399579,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605878524
    },
    {
        "content": "<p>The issue is <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=dfc32eb4f2a588b5bfb80365d56fe551\">this</a>, isn't it? I guess there is currently no way to tell the borrow checker that both closure can't be run at the same time on two different threads? I tried to play with <code>?Sync</code> without success.</p>",
        "id": 217402374,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605880024
    },
    {
        "content": "<p>There's also the issue of not being able to precisely control which nested data is processed by the visitor</p>",
        "id": 217402593,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605880157
    },
    {
        "content": "<p>You might want to visit MIR locals, but skip a few statements or terminators whose local usage you aren't interested in</p>",
        "id": 217402641,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605880195
    },
    {
        "content": "<p>Could this \"simple\" API be built around the current <code>Visitor</code> trait?</p>",
        "id": 217403671,
        "sender_full_name": "marmeladema",
        "timestamp": 1605880731
    },
    {
        "content": "<p>I've definitely wanted a simpler API than having to create a struct and implement the trait before. Not sure if it's worth it. We'd have to look at all impls of <code>Visitor</code> to see whether a large enough percentage could be replaced. I mean, all it takes is to implement the trait for a struct that wraps a closure and reexpose that struct (or a helper function using that struct). We could probably even autogenerate these from the trait definition</p>",
        "id": 217404191,
        "sender_full_name": "oli",
        "timestamp": 1605880940
    },
    {
        "content": "<p>but yea, when you want multiple closures, you should just move to using a struct instead</p>",
        "id": 217404248,
        "sender_full_name": "oli",
        "timestamp": 1605880970
    },
    {
        "content": "<blockquote>\n<p>There's also the issue of not being able to precisely control which nested data is processed by the visitor. You might want to visit MIR locals, but skip a few statements or terminators whose local usage you aren't interested in</p>\n</blockquote>\n<p>I'm not sure I understand, how does the current API helps in that regards.</p>\n<blockquote>\n<p>Could this \"simple\" API be built around the current Visitor trait?</p>\n</blockquote>\n<p>Definitively yes, and it's even relatively simple to do. You just need to create a structure that takes a closure at parameter, then create a structure with this closure as a field, and then implement the <code>Visitor</code> trait for this struct that delegate the work to the closure. (I  didn't saw that <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> already explained it).</p>\n<blockquote>\n<p>but yea, when you want multiple closures, you should just move to using a struct instead</p>\n</blockquote>\n<p>Only if you want to borrow the same thing mutably in multiple closures. Otherwise we can use the builder pattern that I described above.</p>",
        "id": 217406186,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605881983
    },
    {
        "content": "<p>To capture common <code>&amp;mut</code> state:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">mir</span><span class=\"p\">.</span><span class=\"n\">create_visitor</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">with_state</span><span class=\"p\">(</span><span class=\"mi\">0_</span><span class=\"k\">usize</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">constants</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">constant</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mir</span>::<span class=\"n\">Constant</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">mir</span>::<span class=\"n\">Location</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">terminators</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">state</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">terminator</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mir</span>::<span class=\"n\">Terminator</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">location</span>: <span class=\"nc\">mir</span>::<span class=\"n\">Location</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">visit</span><span class=\"p\">()</span><span class=\"cm\">/* : State */</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li>(This looks awfully close to folding).</li>\n</ul>\n<p>I don't know if the generalized visitor builder is really worth it, but I think that having <code>impl Visitor</code> for <em>some</em> closures that only one to visit one specific node type is already quite useful and ergonomic <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 217426579,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605890596
    },
    {
        "content": "<p>That's amazing! (for those interested: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=44c16ff4273d8e54341e115d2d8d9a2b\">playground</a>).</p>",
        "id": 217431284,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605892554
    },
    {
        "content": "<p>It would be even better with structural records <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 217436518,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605894972
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">count_1</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">count_2</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Visit</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">state</span>: <span class=\"nc\">__</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">count_1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">count_2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f1</span>: <span class=\"o\">|</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s1</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">S1</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">count_1</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">count_2</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">s1</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">f2</span>: <span class=\"o\">|</span><span class=\"n\">state</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">s2</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">S2</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">count_1</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">count_2</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">s2</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"p\">}.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">data</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">count_1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">110</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">count_2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1010</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<ul>\n<li><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=0a03fea18a9ff4bd511f75d5607d1f93\">Playground</a></li>\n</ul>",
        "id": 217437148,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605895286
    },
    {
        "content": "<p>It took me way too much time to understand what you did with that macro, but it's amazing!<br>\nIs your macro available somewhere on <a href=\"http://crates.io\">crates.io</a>? Searching \"structural record\" on <a href=\"http://lib.rs\">lib.rs</a> does returns anything.</p>",
        "id": 217448734,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1605900898
    },
    {
        "content": "<p>I have just stumbled upon <a href=\"https://lib.rs/crates/anon\">https://lib.rs/crates/anon</a>, which is, modulo the optional (<code>: val</code>) specifier, literally the same as my macro, but from 2016 <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> For more advanced ones that allow to express in the type / trait system that a structure contains some field (so as to be able to have a function accept all the structures with the same named fields), there is <a href=\"https://docs.rs/structural\">https://docs.rs/structural</a>, and, related to it, there is also <a href=\"https://docs.rs/frunk\">https://docs.rs/frunk</a>.</p>",
        "id": 217475753,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1605918930
    },
    {
        "content": "<p>Btw, if I create a PR to rustc, can I add a dependency to such crate?</p>",
        "id": 217540717,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606033075
    },
    {
        "content": "<p>I guess it can depend on a case by case basis, but IMO it's probably better not to add dependencies if you can avoid it: there's a higher bar, costs, and risks than on a regular project (licensing, maintenance, repo and <a href=\"http://crates.io\">crates.io</a> access, security, etc)</p>",
        "id": 217543201,
        "sender_full_name": "lqd",
        "timestamp": 1606037674
    },
    {
        "content": "<p>Does this include dev-dependencies to give better examples in the documentation?</p>",
        "id": 217544336,
        "sender_full_name": "Robin Moussu",
        "timestamp": 1606039809
    }
]