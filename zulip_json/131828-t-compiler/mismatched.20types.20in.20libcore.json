[
    {
        "content": "<p>Hi, any ideas why <code>./x.py check</code>  works but <code>./x.py clippy</code> errors while checking libcore:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0308]: mismatched types\n   --&gt; src/libcore/macros/mod.rs:418:49\n    |\n417 | /  macro_rules! write {\n418 | |      ($dst:expr, $($arg:tt)*) =&gt; ($dst.write_fmt($crate::format_args!($($arg)*)))\n    | |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    | |                                                  |\n    | |                                                  expected enum `fmt::rt::v1::Position`, found `usize`\n    | |                                                  help: try using a variant of the expected enum: `fmt::rt::v1::Position::At($crate::format_args!($($arg)*))`\n    | |                                                  in this macro invocation (#3)\n419 | |  }\n    | |__- in this expansion of `write!` (#2)\n...\n792 | /      macro_rules! format_args {\n793 | |          ($fmt:expr) =&gt; {{ /* compiler built-in */ }};\n794 | |          ($fmt:expr, $($args:tt)*) =&gt; {{ /* compiler built-in */ }};\n795 | |      }\n    | |______- in this expansion of `$crate::format_args!` (#3)\n    |\n   ::: src/libcore/num/bignum.rs:100:1\n    |\n100 |  / macro_rules! define_bignum {\n101 |  |     ($name:ident: type=$ty:ty, n=$n:expr) =&gt; {\n102 |  |         /// Stack-allocated arbitrary-precision (up to certain limit) integer.\n103 |  |         ///\n...    |\n470 |  |                 write!(f, &quot;{:#x}&quot;, self.base[sz - 1])?;\n    |  |                 ------------------------------------- in this macro invocation (#2)\n...    |\n477 |  |     };\n478 |  | }\n    |  |_- in this expansion of `define_bignum!` (#1)\n...\n483 |    define_bignum!(Big32x40: type=Digit32, n=40);\n    |    --------------------------------------------- in this macro invocation (#1)\n</pre></div>",
        "id": 186514271,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1579887267
    },
    {
        "content": "<p>you need to use a beta clippy and pass <code>--cfg=bootstrap</code></p>",
        "id": 186519356,
        "sender_full_name": "simulacrum",
        "timestamp": 1579890330
    },
    {
        "content": "<p>there was some discussion in Discord I believe</p>",
        "id": 186519362,
        "sender_full_name": "simulacrum",
        "timestamp": 1579890336
    },
    {
        "content": "<p>right, so I can set my default clippy to beta but then the beta-clippy will choke on features that were stabilized on features that were enabled on nightly only<br>\n<code>RUSTC_BOOTSTRAP=1 RUSTFLAGS=\"--cfg=bootstrap\" RUST_BACKTRACE=full  ./x.py clippy</code></p>\n<div class=\"codehilite\"><pre><span></span>error[E0658]: use of unstable library feature &#39;matches_macro&#39;\n   --&gt; src/librustc_span/lib.rs:313:9\n    |\n313 |         matches!(self.ctxt().outer_expn_data().kind, ExpnKind::Macro(MacroKind::Derive, _))\n    |         ^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/65721\n    = help: add `#![feature(matches_macro)]` to the crate attributes to enable\n</pre></div>",
        "id": 186544384,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1579908288
    },
    {
        "content": "<p>oh... yea, so it seems like <code>x.py clippy</code> runs with the beta libstd, but it should be using the just-built libstd</p>",
        "id": 186544876,
        "sender_full_name": "oli",
        "timestamp": 1579908688
    },
    {
        "content": "<p>I'm not sure what <code>x.py clippy</code> is doing differntly from <code>x.py check</code>, but it using the downloaded libstd instead of the built libstd would give exactly this kind of problem</p>",
        "id": 186544988,
        "sender_full_name": "oli",
        "timestamp": 1579908743
    },
    {
        "content": "<p>I don't have time to fix x.py clippy I'm afraid nor to really help out much -- even review will be a stretch</p>",
        "id": 186545037,
        "sender_full_name": "simulacrum",
        "timestamp": 1579908806
    },
    {
        "content": "<p>otoh, if it only affects clippy, I'm happy to just merge things in without too close of review</p>",
        "id": 186545047,
        "sender_full_name": "simulacrum",
        "timestamp": 1579908820
    },
    {
        "content": "<p>I tried again with the beta clippy and the bootstrap compiler being the same version now but that didn't help, I still get <code> use of unstable library feature</code> :/</p>",
        "id": 186565330,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1579943914
    },
    {
        "content": "<p>I don't think you're going to get around fixing x.py to actually give clippy the freshly built libstd</p>",
        "id": 186566151,
        "sender_full_name": "oli",
        "timestamp": 1579945468
    },
    {
        "content": "<p>Although it may be possible to set the sysroot env vars to the correct libstd without touching x.py. check the clippy driver source code for that swash of env vars that allow you to manipulate the sysroot.</p>",
        "id": 186566218,
        "sender_full_name": "oli",
        "timestamp": 1579945579
    },
    {
        "content": "<p>I wonder if something like <code>RUSTFLAGS=\"--cap-lints warn\"  RUSTC_WRAPPER=\"stage2-clippy-driver\" ./x.py check</code> could actually work. but it seems I can't simply override the output/target dir mh</p>",
        "id": 186644334,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1580083936
    },
    {
        "content": "<p>rustc-wrapper is not going to work well with how we do things in rustbuild</p>",
        "id": 186646629,
        "sender_full_name": "simulacrum",
        "timestamp": 1580088506
    },
    {
        "content": "<p>or at least, I suspect it wouldn't</p>",
        "id": 186646631,
        "sender_full_name": "simulacrum",
        "timestamp": 1580088520
    },
    {
        "content": "<p>Hm, I've been using RUSTC_WRAPPER=sccache to successfully bootstrap rustc</p>",
        "id": 186670470,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1580121882
    },
    {
        "content": "<p>it might work in theory but I think it may fail in unexpected ways (e.g. cache too much)</p>",
        "id": 186693640,
        "sender_full_name": "simulacrum",
        "timestamp": 1580139627
    },
    {
        "content": "<p>since I believe sccache won't know that we're switching compilers under the hood</p>",
        "id": 186693658,
        "sender_full_name": "simulacrum",
        "timestamp": 1580139643
    },
    {
        "content": "<p>looks like the problem was --cfg=bootstrap at last.....</p>",
        "id": 187116336,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1580499613
    },
    {
        "content": "<p>I found out after accidentally reading <a href=\"https://github.com/rust-lang/rust/pull/68708/files#diff-4d152d5bfb85f6d41ee9a8a7988c1064\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/68708/files#diff-4d152d5bfb85f6d41ee9a8a7988c1064\">https://github.com/rust-lang/rust/pull/68708/files#diff-4d152d5bfb85f6d41ee9a8a7988c1064</a> , heh</p>",
        "id": 187116653,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1580499797
    }
]