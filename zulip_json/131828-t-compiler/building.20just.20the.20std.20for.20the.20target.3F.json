[
    {
        "content": "<p>I am building for OpenWrt, I currently build out the toolchain dist and generate the following files:</p>\n<div class=\"codehilite\"><pre><span></span><code>cargo-nightly-x86_64-unknown-linux-gnu.tar.xz          rust-analyzer-nightly-x86_64-unknown-linux-gnu.tar.xz\nclippy-nightly-x86_64-unknown-linux-gnu.tar.xz         rust-nightly-x86_64-unknown-linux-gnu.tar.xz\nllvm-tools-nightly-x86_64-unknown-linux-gnu.tar.xz     rust-std-nightly-aarch64-openwrt-linux-musl.tar.xz\nmiri-nightly-x86_64-unknown-linux-gnu.tar.xz           rust-std-nightly-x86_64-unknown-linux-gnu.tar.xz\nrls-nightly-x86_64-unknown-linux-gnu.tar.xz            rustc-nightly-x86_64-unknown-linux-gnu.tar.xz\nrust-analysis-nightly-x86_64-unknown-linux-gnu.tar.xz  rustfmt-nightly-x86_64-unknown-linux-gnu.tar.xz\n</code></pre></div>\n<p>I am building for multiple targets from the same host.  So, in reality, changing the target and rebuilding the toolchain really only generates a single file (<code>rust-std-nightly-aarch64-openwrt-linux-musl.tar.xz</code> in the list above).</p>\n<p>Right now I'm building everything out, and dividing the host dist tarballs from the target ones.  The goal is to re-use the host binary tarballs and generate new std for the targets if needed.  I can generate the entire thing again if necessary and process out the std for the target.</p>\n<p>Is there a way to generate (from source) just the stage 0/1/2 that are needed to create just the target std, or using the installed host installed rustc/cargo?</p>",
        "id": 231435365,
        "sender_full_name": "Grommish",
        "timestamp": 1616487699
    },
    {
        "content": "<p>There's potentially hacks you could use, but I don't think there's an easy way to do it today. It should be possible to build for any number of hosts and targets at the same time, though.</p>",
        "id": 231467391,
        "sender_full_name": "simulacrum",
        "timestamp": 1616505235
    },
    {
        "content": "<p>The issue is that there is no way to tell before hand what triples is going to be called.  But, I found that if I <code>x.py dist std</code> it is significantly shorter and seems to have the std lib for the target triple, so that worked out :)</p>",
        "id": 231544061,
        "sender_full_name": "Grommish",
        "timestamp": 1616533709
    }
]