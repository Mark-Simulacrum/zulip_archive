[
    {
        "content": "<p>I think the intrinsics named <code>simd_*</code> should directly accept the repeat type as a parameter, instead of manually creating a new structure to encapsulate.</p>",
        "id": 266892568,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1641351826
    },
    {
        "content": "<p>At present, if I want to use these intrinsics, I must create a new struct, like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>#[repr(simd)]\npub struct MySIMD&lt;T&gt;([T; SIMD_LEN]);\n</code></pre></div>",
        "id": 266892799,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1641352058
    },
    {
        "content": "<p><code>[T; SIMD_LEN]</code> is not a vector type, so trying to use vector operations on it won't work at LLVM level.</p>",
        "id": 266911685,
        "sender_full_name": "bjorn3",
        "timestamp": 1641373355
    },
    {
        "content": "<p>If we want to use vector operations on [T; SIMD_LEN], we only need to change the <code>abi</code> and <code>align</code> in the layout it generates, right?</p>",
        "id": 266913243,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1641374661
    },
    {
        "content": "<p>Of course I don't mean to change the current mechanism for generating layout.</p>",
        "id": 266914287,
        "sender_full_name": "Sparrow Li",
        "timestamp": 1641375349
    },
    {
        "content": "<p>No, you also need to transform the array into a vector. Arrays and vectors in LLVM are simply not the same type.</p>",
        "id": 271203249,
        "sender_full_name": "Jubilee",
        "timestamp": 1644360586
    }
]