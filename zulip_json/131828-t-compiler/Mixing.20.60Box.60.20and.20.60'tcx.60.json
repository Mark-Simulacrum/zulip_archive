[
    {
        "content": "<p>Consider this snippet:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub enum StatementKind&lt;&#39;tcx&gt; {\n    /// Write the RHS Rvalue to the LHS Place.\n    Assign(Box&lt;(Place&lt;&#39;tcx&gt;, Rvalue&lt;&#39;tcx&gt;)&gt;),\n</code></pre></div>\n<p>It seems weird to mix <code>Box</code> and <code>'tcx</code> (which means arena allocation).</p>",
        "id": 261880357,
        "sender_full_name": "nnethercote",
        "timestamp": 1637204395
    },
    {
        "content": "<p>Should there be an <code>ArenaBox</code> type that's a bit like <code>List</code>, but containing a single element?</p>",
        "id": 261880475,
        "sender_full_name": "nnethercote",
        "timestamp": 1637204435
    },
    {
        "content": "<p>Having a <code>Box</code> within a <code>&lt;'tcx&gt;</code> type means it requires <code>drop</code>. Avoiding that seems like it can only help performance.</p>",
        "id": 261880522,
        "sender_full_name": "nnethercote",
        "timestamp": 1637204497
    },
    {
        "content": "<p>Are you suggesting that we intern all combinations of <code>Place</code> and <code>Rvalue</code> that appear in a program?</p>",
        "id": 261880597,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637204558
    },
    {
        "content": "<p>Or do them separately?</p>",
        "id": 261880602,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637204572
    },
    {
        "content": "<p>(I assume the reason it's in a <code>Box</code> is to make<code>StatementKind</code> smaller)</p>",
        "id": 261880649,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637204614
    },
    {
        "content": "<p>I think interning is a separate question; I don't know if that would be worthwhile</p>",
        "id": 261880740,
        "sender_full_name": "nnethercote",
        "timestamp": 1637204717
    },
    {
        "content": "<p>Just generally, having types that are a mixture of arena allocation and vanilla heap allocation seems odd</p>",
        "id": 261880757,
        "sender_full_name": "nnethercote",
        "timestamp": 1637204745
    },
    {
        "content": "<p>Arena allocation is an optimization for when you have lots of objects that can be freed at the same time, which allows for cheaper allocation <em>and</em> deallocation. So why not use it for everything you can...</p>",
        "id": 261880832,
        "sender_full_name": "nnethercote",
        "timestamp": 1637204817
    },
    {
        "content": "<p><code>StatementKind</code> is just one of a number of types for which this observation applies.</p>",
        "id": 261880867,
        "sender_full_name": "nnethercote",
        "timestamp": 1637204866
    },
    {
        "content": "<p>Similar story for <code>Vec</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub struct BasicBlockData&lt;&#39;tcx&gt; {\n    /// List of statements in this block.\n    pub statements: Vec&lt;Statement&lt;&#39;tcx&gt;&gt;,\n</code></pre></div>",
        "id": 261881017,
        "sender_full_name": "nnethercote",
        "timestamp": 1637205012
    },
    {
        "content": "<p>The number of <code>BasicBlockData</code> instances will be much less than the number of <code>StatementKind</code> instances, so the potential benefit in that case is smaller.</p>",
        "id": 261881034,
        "sender_full_name": "nnethercote",
        "timestamp": 1637205047
    },
    {
        "content": "<p>And maybe the flexibilty of <code>Vec</code> (allowing growth) might be required, an <code>ArenaVec</code> may well lack that flexibility</p>",
        "id": 261881058,
        "sender_full_name": "nnethercote",
        "timestamp": 1637205090
    },
    {
        "content": "<p>Makes sense. Do we do non-interned arena allocated types right now?</p>",
        "id": 261881068,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637205117
    },
    {
        "content": "<p>Yes</p>",
        "id": 261881113,
        "sender_full_name": "nnethercote",
        "timestamp": 1637205132
    },
    {
        "content": "<p>I'm thinking about this stuff because the other day I tried shrinking one arena-allocated type by using a <code>Box</code> within it (to shrink a variant). I noticed that it went from being allocated in a <code>DroplessArena</code> (used for multiple types that don't impl <code>Drop</code>) to a <code>TypedArena</code> (used for an individual type that does impl <code>Drop</code>).</p>",
        "id": 261881173,
        "sender_full_name": "nnethercote",
        "timestamp": 1637205223
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/arena.rs\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/arena.rs</a> shows one set of arenas, there are lots of non-interned types in there. Even things like <code>FxHashSet</code>.</p>",
        "id": 261881275,
        "sender_full_name": "nnethercote",
        "timestamp": 1637205330
    },
    {
        "content": "<p><code>Statement</code>s get added and removed pretty frequently during MIR transformation, so their lifetime isn't quite the lifetime of the program. Also, arena allocating means you don't have unique ownership, right? So to update an assignment you'd have to allocate a new one?</p>",
        "id": 261881362,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637205432
    },
    {
        "content": "<p>Could still be worth it though. I don't know.</p>",
        "id": 261881377,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637205454
    },
    {
        "content": "<p>Yes, I think you're right on both counts.</p>",
        "id": 261881524,
        "sender_full_name": "nnethercote",
        "timestamp": 1637205600
    },
    {
        "content": "<p>I'm wrong btw. Bumpalo doesn't require interior mutability.</p>",
        "id": 261881567,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637205614
    },
    {
        "content": "<p>Maybe <code>rustc</code> does though.</p>",
        "id": 261881577,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637205638
    },
    {
        "content": "<p><code>Arena::alloc</code> (and similar functions) returns a <code>&amp;mut T</code></p>",
        "id": 261881673,
        "sender_full_name": "nnethercote",
        "timestamp": 1637205740
    },
    {
        "content": "<p>Ah, okay. Wrong everywhere.</p>",
        "id": 261881722,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637205808
    },
    {
        "content": "<p>For interned values that are arena-allocated, they must be immutable</p>",
        "id": 261881808,
        "sender_full_name": "nnethercote",
        "timestamp": 1637205877
    },
    {
        "content": "<p>Yeah, clearly I'm stuck in the interning mindset.</p>",
        "id": 261881823,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637205902
    },
    {
        "content": "<p>If you can mutate through the <code>ArenaBox</code>, I kind of doubt that we delete and then recreate a bunch of <code>StatementKind::Assign</code>s, even during MIR optimization. Arena allocation might be a good fit.</p>",
        "id": 261881853,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637205957
    },
    {
        "content": "<p>I think you are right about <code>Statement</code> lifetimes possibly being shorter than the arena lifetime, though</p>",
        "id": 261881854,
        "sender_full_name": "nnethercote",
        "timestamp": 1637205957
    },
    {
        "content": "<p>Nice to have you back by the way!</p>",
        "id": 261881902,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637205977
    },
    {
        "content": "<p>Thanks! It's good to be back <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 261881905,
        "sender_full_name": "nnethercote",
        "timestamp": 1637205987
    },
    {
        "content": "<p>Right, so here's an example where we do a vanilla arena-allocation without interning:</p>\n<div class=\"codehilite\"><pre><span></span><code>pub enum AggregateKind&lt;&#39;tcx&gt; {\n    ...\n    Adt2(&amp;&#39;tcx AdtDef, VariantIdx, SubstsRef&lt;&#39;tcx&gt;, Option&lt;UserTypeAnnotationIndex&gt;, Option&lt;usize&gt;),\n    ...\n}\n</code></pre></div>",
        "id": 261882940,
        "sender_full_name": "nnethercote",
        "timestamp": 1637207339
    },
    {
        "content": "<p>And the allocation happens here: <a href=\"https://github.com/rust-lang/rust/blob/efd0483949496b067cd5f7569d1b28cd3d5d3c72/compiler/rustc_middle/src/ty/context.rs#L1075-L1083\">https://github.com/rust-lang/rust/blob/efd0483949496b067cd5f7569d1b28cd3d5d3c72/compiler/rustc_middle/src/ty/context.rs#L1075-L1083</a></p>",
        "id": 261883046,
        "sender_full_name": "nnethercote",
        "timestamp": 1637207499
    },
    {
        "content": "<p>This makes me realize we don't need a <code>BoxArena&lt;T&gt;</code> type, <code>&amp;'tcx T</code> is exactly that</p>",
        "id": 261883096,
        "sender_full_name": "nnethercote",
        "timestamp": 1637207528
    },
    {
        "content": "<p>This comment suggests that other people also have some expectation that \"arena-allocated\" == \"interned\": <a href=\"https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler/rustc_middle/src/ty/adt.rs#L60\">https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler/rustc_middle/src/ty/adt.rs#L60</a>. In this case the <code>AdtDef</code> is <em>not</em> interned</p>",
        "id": 261883134,
        "sender_full_name": "nnethercote",
        "timestamp": 1637207586
    },
    {
        "content": "<p>At least, not in the sense of \"guaranteed only one in existence and therefore we can use pointer equality\"</p>",
        "id": 261883149,
        "sender_full_name": "nnethercote",
        "timestamp": 1637207612
    },
    {
        "content": "<p>Well, I think we use 'tcx for lifetime purposes so that interned types can be referenced. Sticking in more 'tcx wouldn't help readability, and arena allocation isn't as easy to use as a Box (and couldn't be matched in pattern directly)</p>",
        "id": 261883156,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637207618
    },
    {
        "content": "<p>Well, not exactly that. <code>&amp;'tcx</code> doesn't allow mutation</p>",
        "id": 261883161,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637207625
    },
    {
        "content": "<p><code>&amp;'tcx</code> means it couldn't be deallocated.</p>",
        "id": 261883225,
        "sender_full_name": "Gary Guo",
        "timestamp": 1637207698
    },
    {
        "content": "<p>I think <code>bumpalo</code> works by keeping a reference count for the entire arena?</p>",
        "id": 261883230,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637207703
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Mixing.20.60Box.60.20and.20.60'tcx.60/near/261883134\">said</a>:</p>\n<blockquote>\n<p>This comment suggests that other people also have some expectation that \"arena-allocated\" == \"interned\": <a href=\"https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler/rustc_middle/src/ty/adt.rs#L60\">https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler/rustc_middle/src/ty/adt.rs#L60</a>. In this case the <code>AdtDef</code> is <em>not</em> interned</p>\n</blockquote>\n<p>It was interned in the distant past, but that was changed at some point</p>",
        "id": 261883444,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637207898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">Dylan MacKenzie (ecstatic-morse)</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Mixing.20.60Box.60.20and.20.60'tcx.60/near/261883230\">said</a>:</p>\n<blockquote>\n<p>I think <code>bumpalo</code> works by keeping a reference count for the entire arena?</p>\n</blockquote>\n<p>Oh, no <code>Box</code> has a lifetime parameter, duh.</p>",
        "id": 261883495,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637207969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Mixing.20.60Box.60.20and.20.60'tcx.60/near/261883096\">said</a>:</p>\n<blockquote>\n<p>This makes me realize we don't need a <code>BoxArena&lt;T&gt;</code> type, <code>&amp;'tcx T</code> is exactly that</p>\n</blockquote>\n<p><code>&amp;'tcx mut T</code> is exactly that though. But I haven't seen that pattern in the compiler much. Not sure why.</p>",
        "id": 261883741,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637208126
    },
    {
        "content": "<p>I'm experimenting with changing one <code>Box&lt;Place&lt;'tcx&gt;&gt;</code>with <code>&amp;'tcx mut T</code>, in <code>StatementKind::Retag</code>.</p>",
        "id": 261884303,
        "sender_full_name": "nnethercote",
        "timestamp": 1637208749
    },
    {
        "content": "<p>First problem:</p>\n<div class=\"codehilite\"><pre><span></span><code>1552 |       Retag(RetagKind, &amp;&#39;tcx mut Place&lt;&#39;tcx&gt;),\n     |                        ^^^^^^^^^^^^^^^^^^^^^ the trait `std::clone::Clone` is not implemented for `&amp;mut mir::Place&lt;&#39;_&gt;`\n</code></pre></div>",
        "id": 261884312,
        "sender_full_name": "nnethercote",
        "timestamp": 1637208771
    },
    {
        "content": "<p>So you'd have add a <code>CloneIntoArena</code> abstraction. Looks like that would be compatible with <code>TypeFoldable</code> (which requires <code>Clone</code>), since <code>TypeFolder</code> provides access to the <code>TyCtxt&lt;'tcx&gt;</code>.</p>",
        "id": 261884911,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637209527
    },
    {
        "content": "<blockquote>\n<p>So you'd have add a CloneIntoArena abstraction.</p>\n</blockquote>\n<p>Can you elaborate? I'm having trouble picturing exactly what this means</p>",
        "id": 261885080,
        "sender_full_name": "nnethercote",
        "timestamp": 1637209712
    },
    {
        "content": "<p>Well, the <code>Clone</code> impl for <code>StatementKind</code> creates a deep copy of the boxed <code>Place</code>. We'd want to emulate that behavior by creating a second arena allocated place equal to the first one.</p>",
        "id": 261885166,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637209809
    },
    {
        "content": "<p>Alternatively, I doubt the <code>Retag</code> place is ever actually mutated, so it could probably be a shared reference.</p>",
        "id": 261885184,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637209846
    },
    {
        "content": "<p>But that won't work for <code>StatementKind::Assign</code>, which I'm sure does get mutated.</p>",
        "id": 261885217,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637209876
    },
    {
        "content": "<p><code>StatementKind</code> currently derives <code>Clone</code>, and I'd prefer to keep it that way, so I guess I need to introduce a new type that wraps the <code>&amp;'tcx mut T</code> and implement <code>Clone</code> on that</p>",
        "id": 261885413,
        "sender_full_name": "nnethercote",
        "timestamp": 1637210080
    },
    {
        "content": "<p>Hmm, I'm skeptical <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>. A shallow copy would create two mutable references to the same <code>T</code>, but a deep copy requires access to an arena to allocate into.</p>",
        "id": 261885525,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637210248
    },
    {
        "content": "<p>mmm</p>",
        "id": 261885774,
        "sender_full_name": "nnethercote",
        "timestamp": 1637210526
    }
]