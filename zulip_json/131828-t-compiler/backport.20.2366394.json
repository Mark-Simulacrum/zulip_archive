[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <a href=\"https://github.com/rust-lang/rust/issues/66394\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66394\">#66394</a> doesn't seem to backport cleanly onto beta, could you prepare a commit that merges that into beta appropriately (no need to post a PR, I can fetch directly from your repo if you just push up a branch or so)</p>",
        "id": 182689308,
        "sender_full_name": "simulacrum",
        "timestamp": 1575571321
    },
    {
        "content": "<p>Specifically I'm seeing this conflict:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --cc src/librustc_mir/transform/const_prop.rs</span>\n<span class=\"gh\">index f411dfed064,979d109aa05..00000000000</span>\n<span class=\"gd\">--- a/src/librustc_mir/transform/const_prop.rs</span>\n<span class=\"gi\">+++ b/src/librustc_mir/transform/const_prop.rs</span>\n<span class=\"gu\">@@@ -22,9 -22,10 +22,9 @@@ use rustc::ty::subst::InternalSubsts</span>\n  use rustc_data_structures::fx::FxHashMap;\n  use rustc_index::vec::IndexVec;\n  use rustc::ty::layout::{\n<span class=\"gd\">-     LayoutOf, TyLayout, LayoutError, HasTyCtxt, TargetDataLayout, HasDataLayout,</span>\n<span class=\"gi\">+     LayoutOf, TyLayout, LayoutError, HasTyCtxt, TargetDataLayout, HasDataLayout, Size,</span>\n  };\n\n -use crate::rustc::ty::subst::Subst;\n  use crate::interpret::{\n      self, InterpCx, ScalarMaybeUndef, Immediate, OpTy,\n      StackPopCleanup, LocalValue, LocalState, AllocId, Frame,\n<span class=\"gu\">@@@ -308,11 -310,23 +311,37 @@@ impl&lt;&#39;mir, &#39;tcx&gt; ConstPropagator&lt;&#39;mir,</span>\n          let mut ecx = InterpCx::new(tcx.at(span), param_env, ConstPropMachine, ());\n          let can_const_prop = CanConstProp::check(body);\n\n<span class=\"gi\">++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span>\n<span class=\"gi\">++||||||| parent of d389f64cdb5... Fix spurious CI filures due to OOM</span>\n<span class=\"gi\">++        let substs = &amp;InternalSubsts::identity_for_item(tcx, def_id);</span>\n<span class=\"gi\">++</span>\n<span class=\"gi\">++        let ret =</span>\n<span class=\"gi\">++            ecx</span>\n<span class=\"gi\">++                .layout_of(body.return_ty().subst(tcx, substs))</span>\n<span class=\"gi\">++                .ok()</span>\n<span class=\"gi\">++                // Don&#39;t bother allocating memory for ZST types which have no values.</span>\n<span class=\"gi\">++                .filter(|ret_layout| !ret_layout.is_zst())</span>\n<span class=\"gi\">++                .map(|ret_layout| ecx.allocate(ret_layout, MemoryKind::Stack));</span>\n<span class=\"gi\">++</span>\n<span class=\"gi\">++=======</span>\n<span class=\"gi\">+         let substs = &amp;InternalSubsts::identity_for_item(tcx, def_id);</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">+         let ret =</span>\n<span class=\"gi\">+             ecx</span>\n<span class=\"gi\">+                 .layout_of(body.return_ty().subst(tcx, substs))</span>\n<span class=\"gi\">+                 .ok()</span>\n<span class=\"gi\">+                 // Don&#39;t bother allocating memory for ZST types which have no values</span>\n<span class=\"gi\">+                 // or for large values.</span>\n<span class=\"gi\">+                 .filter(|ret_layout| !ret_layout.is_zst() &amp;&amp;</span>\n<span class=\"gi\">+                                      ret_layout.size &lt; Size::from_bytes(MAX_ALLOC_LIMIT))</span>\n<span class=\"gi\">+                 .map(|ret_layout| ecx.allocate(ret_layout, MemoryKind::Stack));</span>\n<span class=\"gi\">+</span>\n<span class=\"gi\">++&gt;&gt;&gt;&gt;&gt;&gt;&gt; d389f64cdb5... Fix spurious CI filures due to OOM</span>\n          ecx.push_stack_frame(\n -            Instance::new(def_id, substs),\n +            Instance::new(def_id, &amp;InternalSubsts::identity_for_item(tcx, def_id)),\n              span,\n              dummy_body,\n -            ret.map(Into::into),\n +            None,\n              StackPopCleanup::None {\n                  cleanup: false,\n              },\n</pre></div>",
        "id": 182689368,
        "sender_full_name": "simulacrum",
        "timestamp": 1575571360
    },
    {
        "content": "<p>when cherry picking <a href=\"https://github.com/rust-lang/rust/commit/d389f64cdb5b4a99075030131378b52ee791d8be\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/d389f64cdb5b4a99075030131378b52ee791d8be\">d389f64cdb5b4a99075030131378b52ee791d8be</a></p>",
        "id": 182689409,
        "sender_full_name": "simulacrum",
        "timestamp": 1575571383
    },
    {
        "content": "<p>Sure! I'll try to do that tonight.</p>",
        "id": 182689426,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575571393
    },
    {
        "content": "<p>Thanks! Please ping me here once that's done so I can get the backport PR rolling</p>",
        "id": 182689815,
        "sender_full_name": "simulacrum",
        "timestamp": 1575571611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> The backport for <a href=\"https://github.com/rust-lang/rust/issues/66394\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66394\">#66394</a> is in <a href=\"https://github.com/rust-lang/rust/commit/ea9878be3f89052388aaa2c3ef6f1933ab99f1a5\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/ea9878be3f89052388aaa2c3ef6f1933ab99f1a5\">https://github.com/rust-lang/rust/commit/ea9878be3f89052388aaa2c3ef6f1933ab99f1a5</a></p>",
        "id": 182717780,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575591111
    },
    {
        "content": "<p>Thanks! I'm away from a keyboard right now but will merge that in tonight.</p>",
        "id": 182717835,
        "sender_full_name": "simulacrum",
        "timestamp": 1575591147
    },
    {
        "content": "<p>Cool! LMK if you run into any issues</p>",
        "id": 182717851,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575591162
    },
    {
        "content": "<p>That squashed everything into one commit, right?</p>",
        "id": 182717872,
        "sender_full_name": "simulacrum",
        "timestamp": 1575591179
    },
    {
        "content": "<p>Yeah</p>",
        "id": 182717883,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1575591183
    },
    {
        "content": "<p>Perfect, thanks!</p>",
        "id": 182717894,
        "sender_full_name": "simulacrum",
        "timestamp": 1575591194
    }
]