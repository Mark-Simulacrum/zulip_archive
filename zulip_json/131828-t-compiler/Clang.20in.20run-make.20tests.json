[
    {
        "content": "<p>How hard would it be to make clang available for run-make tests? What would it take?</p>",
        "id": 151272722,
        "sender_full_name": "mw",
        "timestamp": 1544448995
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125254\">@kennytm</span> <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>)</p>",
        "id": 151272771,
        "sender_full_name": "mw",
        "timestamp": 1544449047
    },
    {
        "content": "<p>I'm talking about the clang that we already build for LLDB, i.e. a version that matches rustc's LLVM</p>",
        "id": 151272894,
        "sender_full_name": "mw",
        "timestamp": 1544449123
    },
    {
        "content": "<p>must it be \"clang\"? you could already use <code>$(CC)</code></p>",
        "id": 151272899,
        "sender_full_name": "kennytm",
        "timestamp": 1544449132
    },
    {
        "content": "<p>Yes, it must be Clang</p>",
        "id": 151272908,
        "sender_full_name": "mw",
        "timestamp": 1544449143
    },
    {
        "content": "<p>the use case would be testing cross-language optimizations</p>",
        "id": 151272930,
        "sender_full_name": "mw",
        "timestamp": 1544449161
    },
    {
        "content": "<p>If it's already built, should be quite easy... we don't have the budget to build it though</p>",
        "id": 151273352,
        "sender_full_name": "simulacrum",
        "timestamp": 1544449631
    },
    {
        "content": "<p>time wise</p>",
        "id": 151273365,
        "sender_full_name": "simulacrum",
        "timestamp": 1544449642
    },
    {
        "content": "<p>I think it should cache very well via sccache. I don't know if we build the final executable currently, but we are building libclang for the LLDB component.</p>",
        "id": 151275521,
        "sender_full_name": "mw",
        "timestamp": 1544451751
    },
    {
        "content": "<p>I don't think it'd be too too hard b/c we're already compiling the compiler's LLVM with clang on most builders</p>",
        "id": 151294125,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1544466866
    },
    {
        "content": "<p>I suspect we'd probably add an opt-in flag to enable the tests but we could enable that on the bots</p>",
        "id": 151294131,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1544466875
    },
    {
        "content": "<p>It would have to be a clang that matches the LLVM version of rustc though.</p>",
        "id": 151432229,
        "sender_full_name": "mw",
        "timestamp": 1544519728
    },
    {
        "content": "<p>OK, I just did some testing and it seems that clang is already available in <code>run-make-fulldeps</code> because it ends up in the <code>llvm/bin</code> directory with the other LLVM tools. It's only built if <code>rust.lldb</code> is set in <code>config.toml</code>.</p>",
        "id": 151449311,
        "sender_full_name": "mw",
        "timestamp": 1544538718
    },
    {
        "content": "<p>I guess we don't want to build clang by default together with LLVM, so I'm wondering what the best option would be here.</p>",
        "id": 151449390,
        "sender_full_name": "mw",
        "timestamp": 1544538783
    },
    {
        "content": "<p>one thing we could do is:<br>\n 1. provide a simple way for run-make tests to check whether clang is available and has the right version, and then<br>\n 2. enable building lldb for some of the CI jobs</p>",
        "id": 151449550,
        "sender_full_name": "mw",
        "timestamp": 1544538901
    },
    {
        "content": "<p>that's a bit brittle though since if someone disables building lldb for some reason, tests would go ignored and no one would notice...</p>",
        "id": 151449599,
        "sender_full_name": "mw",
        "timestamp": 1544538934
    },
    {
        "content": "<p>is there a way to build clang \"lazily\", i.e. only when run-make-fulldeps is executed?</p>",
        "id": 151449815,
        "sender_full_name": "mw",
        "timestamp": 1544539083
    },
    {
        "content": "<p>You can probably make sure that <a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L733\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L733\">https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L733</a> gets a <code>ensure</code> method call for <code>clang</code> only when running <code>run-make-fulldeps</code></p>",
        "id": 151450042,
        "sender_full_name": "oli",
        "timestamp": 1544539285
    },
    {
        "content": "<p>I don't think that quite works because we already need to know whether LLDB/Clang needs to be built when LLVM is being built. At least it looks like that in the current setup.</p>",
        "id": 151451277,
        "sender_full_name": "mw",
        "timestamp": 1544540305
    },
    {
        "content": "<p>see: <a href=\"https://github.com/rust-lang/rust/blob/3a3121337122637fa11f0e5d42aec67551e8c125/src/bootstrap/native.rs#L201\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/3a3121337122637fa11f0e5d42aec67551e8c125/src/bootstrap/native.rs#L201\">https://github.com/rust-lang/rust/blob/3a3121337122637fa11f0e5d42aec67551e8c125/src/bootstrap/native.rs#L201</a></p>",
        "id": 151451328,
        "sender_full_name": "mw",
        "timestamp": 1544540359
    }
]