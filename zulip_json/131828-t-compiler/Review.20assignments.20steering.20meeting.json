[
    {
        "content": "<p>I've put together some preliminary notes for this week's steering meeting on review assignments. I would appreciate feedback &amp; content from anyone interested in the highfive rotation or other reviewer topics. </p>\n<p>CC'ing a few people that I think might be interested: <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> </p>\n<p><a href=\"https://hackmd.io/LDKtEI-rTXKOw0PJKaeVcg\">https://hackmd.io/LDKtEI-rTXKOw0PJKaeVcg</a></p>\n<p>Feel free to leave discussion/comments here or in the hackmd and I will process them before the meeting.</p>",
        "id": 249900434,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1629315001
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>!</p>",
        "id": 249901948,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629315755
    },
    {
        "content": "<p>Some thoughts:</p>",
        "id": 249901958,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629315761
    },
    {
        "content": "<p>First, I'd really like to see some discussion about adding more \"teams\" to the highfive config. I could imagine things like traits, incremental, codegen, etc. each getting a separate team that includes people that feel comfortable reviewing those \"areas\". Not necessarily sure if they need to be added to specific directories (they <em>could</em>), but I feel like they would be greatly beneficial in cases like \"this is heavy on the trait system, I'd like someone knowledgeable there to take a look <code>r? rust-lang/wg-traits</code>\"</p>",
        "id": 249902334,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629315958
    },
    {
        "content": "<p>Second, I <em>really</em> think we should encourage (strongly) all members of compiler/compiler-contributors to be in the review queue. I understand some people are busy, but more people = less reviews per person. and if someone is <em>so</em> busy that they can't be in the \"main\" queue, being on \"teams\" can still help. Along the same lines, we should encourage everyone that <em>any</em> kind of review helps (this is especially true for new compiler-contributors). This means something like \"this looks a lot like codegen, let me reassign to someone knowledgeable\" or \"I have some comments, but I don't feel comfortable signing off, so reassigning to someone random\" <em>are</em> helpful.</p>",
        "id": 249902876,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629316257
    },
    {
        "content": "<p>I'm not really sure about delaying assigning a reviewer until a PR passes CI.</p>\n<blockquote>\n<p>New contributors often need more help getting CI to pass and the reviewer can be helpful for that.</p>\n</blockquote>\n<p>This is so true. I would feel awful if we had someone new try to make a PR just to find they can't get it passing CI and nobody to ask.</p>",
        "id": 249903321,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629316456
    },
    {
        "content": "<p>Which leads me to:<br>\nAnother thing I like seeing is when people \"jump in\" to review PRs if the main reviewer isn't available at the time or they are more knowledgeable on the PR.</p>\n<p>To extend this, and his is less only compiler/compiler-contributors, but I would love to see us encourage people that are around/somewhat active on the project to feel like they can give feedback.</p>",
        "id": 249903796,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629316723
    },
    {
        "content": "<blockquote>\n<p>I'm not really sure about delaying assigning a reviewer until a PR passes CI.</p>\n</blockquote>\n<p>One thing that <em>could</em> help though is not setting <code>waiting-on-review</code> until CI passes. (Of course, it could be manually set). Or even maybe for <code>WIP</code> PRs too.</p>",
        "id": 249904061,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629316826
    },
    {
        "content": "<p>Yeah, FWIW, I'm pretty strongly -1 on the waiting for CI idea, because it's both often super useful to get reviews even <em>with</em> broken CI (e.g., the reviewer can help you fix it if you're struggling) and generally the impact of a waiting-on-review PR that's also CI broken at least for my review queue is minimal; I can either give helpful feedback or not, and adjusting the label ~once is easy if necessary.</p>",
        "id": 249907510,
        "sender_full_name": "simulacrum",
        "timestamp": 1629318609
    },
    {
        "content": "<p>One thing that I don't really have the time to do, but I think could be helpful, is to try to survey the list of open PRs for T-compilerish, with something like <a href=\"https://github.com/rust-lang/rust/pulls?q=is%3Aopen+is%3Apr+label%3AS-waiting-on-review+sort%3Acreated-asc+-label%3AT-libs+-label%3AT-libs-api\">https://github.com/rust-lang/rust/pulls?q=is%3Aopen+is%3Apr+label%3AS-waiting-on-review+sort%3Acreated-asc+-label%3AT-libs+-label%3AT-libs-api</a> as a possible query.</p>\n<p>Some of the questions I'd have:</p>\n<ul>\n<li>Are PRs waiting on review doing so for the <em>first</em> review? Or are PRs just large/unwieldy and review takes many iterations and discussion?</li>\n<li>What is the distribution of assigned reviewers to open PRs?</li>\n<li>What review latency can we expect from our current reviewer pool (e.g., for me I likely don't do more than once a week these days, but do most of mine in one sitting then) -- likely an informal quick survey might be good here<ul>\n<li>This can help us understand if e.g. reviewer rotations or otherwise would be good. It would also help with \"X person has 30 PRs assigned to them, is that something where we need to load balance, or are they just reviewing only once every 2 weeks?\"</li>\n</ul>\n</li>\n<li>How many PRs are labeled as S-waiting-on-review out of the ~200, but aren't actually waiting? (Say, maybe they're looking for perf data, crater, just author iterating but don't actually need a review yet, ...)</li>\n</ul>",
        "id": 249908953,
        "sender_full_name": "simulacrum",
        "timestamp": 1629319410
    },
    {
        "content": "<p>Good feedback, thanks! The \"delay assigning reviewer\" idea didn't seem that useful to me either so I've removed it.</p>",
        "id": 249908969,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1629319427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Review.20assignments.20steering.20meeting/near/249908953\">said</a>:</p>\n<blockquote>\n<p>One thing that I don't really have the time to do, but I think could be helpful, is to try to survey the list of open PRs for T-compilerish, with something like <a href=\"https://github.com/rust-lang/rust/pulls?q=is%3Aopen+is%3Apr+label%3AS-waiting-on-review+sort%3Acreated-asc+-label%3AT-libs+-label%3AT-libs-api\">https://github.com/rust-lang/rust/pulls?q=is%3Aopen+is%3Apr+label%3AS-waiting-on-review+sort%3Acreated-asc+-label%3AT-libs+-label%3AT-libs-api</a> as a possible query.</p>\n<p>Some of the questions I'd have:</p>\n<ul>\n<li>Are PRs waiting on review doing so for the <em>first</em> review? Or are PRs just large/unwieldy and review takes many iterations and discussion?</li>\n<li>What is the distribution of assigned reviewers to open PRs?</li>\n<li>What review latency can we expect from our current reviewer pool (e.g., for me I likely don't do more than once a week these days, but do most of mine in one sitting then) -- likely an informal quick survey might be good here<ul>\n<li>This can help us understand if e.g. reviewer rotations or otherwise would be good. It would also help with \"X person has 30 PRs assigned to them, is that something where we need to load balance, or are they just reviewing only once every 2 weeks?\"</li>\n</ul>\n</li>\n<li>How many PRs are labeled as S-waiting-on-review out of the ~200, but aren't actually waiting? (Say, maybe they're looking for perf data, crater, just author iterating but don't actually need a review yet, ...)</li>\n</ul>\n</blockquote>\n<p>These are really good questions. I've definitely gone through (at least some of the older PRs) and looked to see if there are reviews that I personally can help on and if there are any that seem mislabeled.</p>",
        "id": 249909677,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629319784
    },
    {
        "content": "<p>I'm very much in favor of having more fine-grained teams in the highfive bot. That should probably replace or be merged with the <a href=\"https://rust-lang.github.io/compiler-team/experts/\">experts map</a></p>",
        "id": 249961319,
        "sender_full_name": "mw",
        "timestamp": 1629364872
    },
    {
        "content": "<p>Side note: the mapping between area and source directory can only ever be a heuristic and will need some human intervention in many cases. Making it easy for the person who does the mapping to re-assign a PR to area experts should be one of our goals. More granular highfive teams would achieve that, I think.</p>",
        "id": 249961619,
        "sender_full_name": "mw",
        "timestamp": 1629365103
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Review.20assignments.20steering.20meeting/near/249961319\">said</a>:</p>\n<blockquote>\n<p>I'm very much in favor of having more fine-grained teams in the highfive bot. That should probably replace or be merged with the <a href=\"https://rust-lang.github.io/compiler-team/experts/\">experts map</a></p>\n</blockquote>\n<p>I've thought about how the expert map plays into things. In theory, that map is very useful. In practice, I'm not sure I've ever once pulled it up to consult it. Picking a solid subset of \"areas\" from that as highfive teams would be nice.</p>\n<p>The only concern I have is how we address the \"directories\" bit. We probably want to add the teams to the directories in the highfive config, but also have the general teams too (unless there are certain bits of code that need extra care from the team only, but I don't imagine there will be many/any cases of that)</p>",
        "id": 249991152,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629381904
    },
    {
        "content": "<blockquote>\n<p>In theory, that map is very useful. In practice, I'm not sure I've ever once pulled it up to consult it. Picking a solid subset of \"areas\" from that as highfive teams would be nice.</p>\n</blockquote>\n<p>I've pulled it up once or twice, but the last time I tried to use it, it didn't have the section I needed (general codegen stuff), so I just did the best I could based on <code>git log</code>.</p>",
        "id": 250237942,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629581245
    },
    {
        "content": "<p>Now that it's been updated, I may be able to use it more, but at this point I know from seeing different people's PRs what they're experts in.</p>",
        "id": 250237988,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629581293
    },
    {
        "content": "<p>Highfive PR adding groups from expert map: <a href=\"https://github.com/rust-lang/highfive/pull/356\">https://github.com/rust-lang/highfive/pull/356</a></p>",
        "id": 250380697,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629738229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> thoughts appreciated</p>",
        "id": 250380799,
        "sender_full_name": "Jack Huey",
        "timestamp": 1629738259
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Review.20assignments.20steering.20meeting/near/250237988\">said</a>:</p>\n<blockquote>\n<p>Now that it's been updated, I may be able to use it more, but at this point I know from seeing different people's PRs what they're experts in.</p>\n</blockquote>\n<p>This is an interesting point: Maybe we should have tooling that actively monitors PR’s, and if it sees evidence that someone has “significant” contribution to an area who is not currently recognized in experts map, the tool suggests that they add themselves to it in that section?</p>",
        "id": 250399935,
        "sender_full_name": "pnkfelix",
        "timestamp": 1629746938
    },
    {
        "content": "<p>That's a good idea! It would be interesting to try that and see how it works.</p>",
        "id": 250652951,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629912876
    },
    {
        "content": "<p>Semi-related: There have been several occasions where I would have liked to use the new <code>r? @rust-lang/&lt;team&gt;</code>, e.g. <code>r? @rust-lang/compiler</code> to pick a random member of the compiler team, but haven't because I don't want to ping the whole team unnecessarily. Perhaps the feature could be changed such that GitHub doesn't ping the team?</p>",
        "id": 250653382,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629913063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> you can do it without adding an @ in front</p>",
        "id": 250653706,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629913177
    },
    {
        "content": "<p>(and I would recommend it actually, since sometimes the highfive config doesn't match the team name on github)</p>",
        "id": 250653754,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629913195
    },
    {
        "content": "<p>Ah, I didn't realize that! Good to know, thanks :)</p>",
        "id": 250657216,
        "sender_full_name": "Noah Lev",
        "timestamp": 1629914652
    }
]