[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> here is a variation of the current strategy I was just musing about</p>",
        "id": 198455586,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590161721
    },
    {
        "content": "<p>I'll start with an assumption that we have, or can build, a graph between cgu's representing reference relationships</p>",
        "id": 198455626,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590161748
    },
    {
        "content": "<p>e.g. if cgu A calls a method defined by cgu B, then there's an edge there</p>",
        "id": 198455741,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590161784
    },
    {
        "content": "<p>so now here's the idea: label each edge with the sum of the estimated code size for each side of the edge</p>",
        "id": 198455773,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590161808
    },
    {
        "content": "<p>and then, instead of merging the absolute lowest sized pairs of cgu's</p>",
        "id": 198455805,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590161825
    },
    {
        "content": "<p>instead, take the edge with the lowest value and merge its ends together. Then update the sums on the other edges accordingly</p>",
        "id": 198455872,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590161865
    },
    {
        "content": "<p>the intention here is that we would be trying to merge together things that would actually <em>benefit</em> from being in the same cgu</p>",
        "id": 198455976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590161907
    },
    {
        "content": "<p>In that they use many of the same functions so they can share definitions?</p>",
        "id": 198456075,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590161963
    },
    {
        "content": "<p>Now, to be fair, this may not yield a compile-time win. In fact, the only way I could imagine it yielding a compile-time win would be if it shifts effort being done by LTO</p>",
        "id": 198456077,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590161964
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.5BCGU.20Partitioning.5D.20merge.20strategy/near/198456075\">said</a>:</p>\n<blockquote>\n<p>In that they use many of the same functions so they can share definitions?</p>\n</blockquote>\n<p>no, as in A uses a function from B</p>",
        "id": 198456109,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590161986
    },
    {
        "content": "<p>Isn’t this the same algorithm just only considering pairs with edges between them?</p>",
        "id": 198456113,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1590161988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"225949\">Nathan Corbyn</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.5BCGU.20Partitioning.5D.20merge.20strategy/near/198456113\">said</a>:</p>\n<blockquote>\n<p>Isn’t this the same algorithm just only considering pairs with edges between them?</p>\n</blockquote>\n<p>yes it is</p>",
        "id": 198456135,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590161998
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.5BCGU.20Partitioning.5D.20merge.20strategy/near/198456109\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.5BCGU.20Partitioning.5D.20merge.20strategy/near/198456075\">said</a>:</p>\n<blockquote>\n<p>In that they use many of the same functions so they can share definitions?</p>\n</blockquote>\n<p>no, as in A uses a function from B</p>\n</blockquote>\n<p>I mean, yes, A will be able to use the definition from B</p>",
        "id": 198456196,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590162019
    },
    {
        "content": "<p>the main reason why I am thinking along these lines</p>",
        "id": 198456249,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590162044
    },
    {
        "content": "<p>Intuitively, this makes sense to me.</p>",
        "id": 198456253,
        "sender_full_name": "davidtwco",
        "timestamp": 1590162048
    },
    {
        "content": "<p>So this shouldn’t be too much work on top of the current impl as long as we can build the graph?</p>",
        "id": 198456264,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1590162052
    },
    {
        "content": "<p>That’s cool</p>",
        "id": 198456299,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1590162064
    },
    {
        "content": "<p>is that longer term, I think we will want to experiment with finer-grained cgu's (like letting someone try per-fn cgu)</p>",
        "id": 198456304,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590162066
    },
    {
        "content": "<p>but per-fn cgu will be <em>terrible</em> in the current merging scheme</p>",
        "id": 198456332,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590162079
    },
    {
        "content": "<p>(I think)</p>",
        "id": 198456342,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590162082
    },
    {
        "content": "<p>Yeah, I had to disable the merging in my hacky branch.</p>",
        "id": 198456382,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590162101
    },
    {
        "content": "<p>Does rustc build a call graph for MIR already?</p>",
        "id": 198456503,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1590162149
    },
    {
        "content": "<p>I’m not sure I understand why we don’t do this already</p>",
        "id": 198456522,
        "sender_full_name": "Nathan Corbyn",
        "timestamp": 1590162160
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.5BCGU.20Partitioning.5D.20merge.20strategy/near/198456077\">said</a>:</p>\n<blockquote>\n<p>Now, to be fair, this may not yield a compile-time win. In fact, the only way I could imagine it yielding a compile-time win would be if it shifts effort being done by LTO</p>\n</blockquote>\n<p>Oh, I see what you're saying. Yeah, that would make a lot of sense.</p>",
        "id": 198457083,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590162434
    },
    {
        "content": "<p>I've been focusing on trying to make <code>cargo build</code> faster so I didn't even consider it from the code-quality perspective.</p>",
        "id": 198457232,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590162497
    },
    {
        "content": "<p>by the way, <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> , do you know why the <code>cargo-debug</code> incr-patched println benchmark regressed by 50% with your branch (<a href=\"https://github.com/rust-lang/rust/issues/71349\">#71349</a>) to make one-cgu-per-item (that is what it did, right? I'm trying to infer based on a skim of the diff...)</p>",
        "id": 198465881,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590166393
    },
    {
        "content": "<p>That's what I was trying to do but from looking at the trace data, I can see that I didn't quite hit the mark.</p>",
        "id": 198466393,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590166637
    },
    {
        "content": "<p>I think this was the main issue <a href=\"https://github.com/rust-lang/rust/pull/71349/files#diff-d8017c239ab8ef69c6c46e6035930e01R612\">https://github.com/rust-lang/rust/pull/71349/files#diff-d8017c239ab8ef69c6c46e6035930e01R612</a></p>",
        "id": 198466554,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590166692
    },
    {
        "content": "<p>I wasn't able to figure out exactly what I needed to do to get non-local items to link against a different CGU</p>",
        "id": 198466630,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590166739
    },
    {
        "content": "<p>I have another branch where I think I resolved that by making everything <code>Linkage::LinkOnce</code> and <code>Visibility::Default</code> but IIRC that had bad performance because we spent a lot longer linking.</p>",
        "id": 198466874,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1590166850
    }
]