[
    {
        "content": "<p>It appears to be fairly commonplace for the compiler to segfault lately (<a href=\"https://github.com/rust-lang/rust/issues/53149\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53149\">#53149</a>, <a href=\"https://github.com/rust-lang/rust/issues/53099\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53099\">#53099</a>, <a href=\"https://github.com/rust-lang/rust/issues/53083\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53083\">#53083</a>, <a href=\"https://github.com/rust-lang/rust/issues/52884\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52884\">#52884</a>). My bet is on LLVM assertion firing, but since they are not enabled, it is not clear what it is that we’re dealing with.</p>",
        "id": 131035078,
        "sender_full_name": "nagisa",
        "timestamp": 1533637299
    },
    {
        "content": "<p>we probbaly should have an easier method to try LLVM with assertions, possibly as a separate codegen backend <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 131035128,
        "sender_full_name": "nagisa",
        "timestamp": 1533637336
    },
    {
        "content": "<p>In the period leading up to an LLVM upgrade and immediate following it, we probably should enable LLVM assertions, no?</p>",
        "id": 131036140,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533638789
    },
    {
        "content": "<p>At least, it seems like it would be a good way to try to catch issues.</p>",
        "id": 131036150,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533638808
    },
    {
        "content": "<p>but then again, for all I know people <em>do</em> re-enable LLVM assertions when testing an upgrade locally</p>",
        "id": 131036161,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533638824
    },
    {
        "content": "<p>I usually have them enabled for all my local builds</p>",
        "id": 131038229,
        "sender_full_name": "mw",
        "timestamp": 1533641309
    },
    {
        "content": "<p>i think I used to do that, but then I got frustrated because the ones that were asserting on master weren't getting fixed</p>",
        "id": 131038331,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533641463
    },
    {
        "content": "<p>We do have CI runners with LLVM assertions enabled though, don't we?</p>",
        "id": 131038619,
        "sender_full_name": "RalfJ",
        "timestamp": 1533641820
    },
    {
        "content": "<blockquote>\n<p>It appears to be fairly commonplace for the compiler to segfault lately (<a href=\"https://github.com/rust-lang/rust/issues/53149\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53149\">#53149</a>, <a href=\"https://github.com/rust-lang/rust/issues/53099\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53099\">#53099</a>, <a href=\"https://github.com/rust-lang/rust/issues/53083\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53083\">#53083</a>, <a href=\"https://github.com/rust-lang/rust/issues/52884\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52884\">#52884</a>). My bet is on LLVM assertion firing, but since they are not enabled, it is not clear what it is that we’re dealing with.</p>\n</blockquote>\n<p>seems bad... I wonder how we can test this theory most effectively?</p>",
        "id": 131038977,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533642278
    },
    {
        "content": "<p>is there an easy way for us to tell people to enable assertions?</p>",
        "id": 131038986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533642289
    },
    {
        "content": "<p>No, but we could have one by building a codegen backend that has assertions enabled, in addition to our current backend that doesn’t. Since the backend is just a shared library, conceiving a method for swapping it out should be not too hard.</p>",
        "id": 131040497,
        "sender_full_name": "nagisa",
        "timestamp": 1533644245
    },
    {
        "content": "<p>Alas, the backend is full of <code>extern \"Rust\"</code> functions IIRC, which makes it not really portable.</p>",
        "id": 131040552,
        "sender_full_name": "nagisa",
        "timestamp": 1533644303
    },
    {
        "content": "<blockquote>\n<p>No, but we could have one by building a codegen backend that has assertions enabled, in addition to our current backend that doesn’t. Since the backend is just a shared library, conceiving a method for swapping it out should be not too hard.</p>\n</blockquote>\n<p>interesting</p>",
        "id": 131041217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533645077
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> portable in what sense?</p>",
        "id": 131041227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533645095
    },
    {
        "content": "<p>in a sense of having a single .so for a single version of LLVM that can be used across many versions of rustc.</p>",
        "id": 131041538,
        "sender_full_name": "nagisa",
        "timestamp": 1533645492
    },
    {
        "content": "<p>ah ok</p>",
        "id": 131041564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533645546
    },
    {
        "content": "<p>We have 64bit linux binaries with LLVM asserts for each commit</p>",
        "id": 131046609,
        "sender_full_name": "simulacrum",
        "timestamp": 1533650983
    },
    {
        "content": "<p>No good way to get them via rustup but <a href=\"https://crates.io/crates/rustup-toolchain-install-master\" target=\"_blank\" title=\"https://crates.io/crates/rustup-toolchain-install-master\">https://crates.io/crates/rustup-toolchain-install-master</a> can do it (--alt flag I believe)</p>",
        "id": 131046625,
        "sender_full_name": "simulacrum",
        "timestamp": 1533651001
    },
    {
        "content": "<p>I think we might be able to ship two backends like we do with emscripten and normal LLVM, adding a assertions-enabled backend that can be enabled via some environment variable or compiler flag</p>",
        "id": 131046706,
        "sender_full_name": "simulacrum",
        "timestamp": 1533651056
    },
    {
        "content": "<p>but we don’t really want to do that, could as well just ship assertion enabled nightlies in that case</p>",
        "id": 131059244,
        "sender_full_name": "nagisa",
        "timestamp": 1533664577
    },
    {
        "content": "<p>There are many reasons we disabled assertions in nightlies in the first place and shipping multiple llvms just for assertions would defeat about 99% of those reasons.</p>",
        "id": 131059264,
        "sender_full_name": "nagisa",
        "timestamp": 1533664612
    },
    {
        "content": "<p>I think most had to do with performance so a switch-enabled assertion build might not be too bad</p>",
        "id": 131060264,
        "sender_full_name": "simulacrum",
        "timestamp": 1533665475
    },
    {
        "content": "<p>I thought it was primarily driven by perf, yeah</p>",
        "id": 131062334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533667799
    },
    {
        "content": "<p>that said, how certain are we that LLVM assertions are relevant here?</p>",
        "id": 131062395,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533667810
    },
    {
        "content": "<p>is there a way to test that hypothesis?</p>",
        "id": 131062400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533667819
    },
    {
        "content": "<p>Well, I know for sure that LLVM, when assertions are disabled, just replaces them with a trap. So, usually, when I see a SIGSEGV or SIGILL in LLVM somewhere (some of those issues have LLVM in their backtraces) I’m fairly confident in it being an assert.</p>",
        "id": 131062510,
        "sender_full_name": "nagisa",
        "timestamp": 1533667999
    },
    {
        "content": "<p>I guess what I meant is, is there some mechanism (e.g., alt-builds?) we can use today to reproduce this?</p>",
        "id": 131066167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533672382
    },
    {
        "content": "<p>We do have alt builds for every commit, which have LLVM asserts enabled. I'm not sure how much that helps, though...</p>",
        "id": 131066426,
        "sender_full_name": "simulacrum",
        "timestamp": 1533672723
    }
]