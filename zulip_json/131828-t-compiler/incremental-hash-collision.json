[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> I'm getting</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"na\">&#39;main</span><span class=\"err\">&#39;</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"na\">&#39;Forcing</span><span class=\"w\"> </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">already</span><span class=\"w\"> </span><span class=\"n\">existing</span><span class=\"w\"> </span><span class=\"n\">DepNode</span><span class=\"p\">.]</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"o\">/</span><span class=\"mi\">30</span>: <span class=\"nc\">core</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">query</span><span class=\"o\">-</span><span class=\"n\">key</span>: <span class=\"nc\">Canonical</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">variables</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">ParamEnvAnd</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">param_env</span>: <span class=\"nc\">ParamEnv</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">caller_bounds</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">reveal</span>: <span class=\"nc\">UserFacing</span><span class=\"w\"> </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Binder</span><span class=\"p\">(</span><span class=\"n\">TraitPredicate</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">marker</span>::<span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">dep</span><span class=\"o\">-</span><span class=\"n\">node</span>: <span class=\"nc\">EvaluateObligation</span><span class=\"p\">(</span><span class=\"n\">fa1a5a9b41e70025</span><span class=\"o\">-</span><span class=\"mi\">8629</span><span class=\"n\">dce568141d82</span><span class=\"p\">)</span><span class=\"err\">&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">librustc</span><span class=\"o\">/</span><span class=\"n\">ty</span><span class=\"o\">/</span><span class=\"n\">query</span><span class=\"o\">/</span><span class=\"n\">plumbing</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">531</span>:<span class=\"mi\">9</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>on a branch of mine. Following the assert to the code leads me to a message stating that either the dep graph code is broken (which I did not touch), or that there's a hash collision. I did touch <code>ConstValue</code>, which is the <code>10</code> in <code>[u32; 10]</code> in the above error. All I did was remove a variant from the <code>ConstValue</code> enum, meaning the stable hash code also removed the arm handling it.</p>\n<p>Do you have any tips for debugging this ICE? (it's happening direcltly when compiling core, and during wellformedness checks of a static item's type, which is the array type you see above)</p>",
        "id": 136175073,
        "sender_full_name": "oli",
        "timestamp": 1540052654
    },
    {
        "content": "<p>Another datapoint speaking for hash collision: <a href=\"https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src/libcore/num/flt2dec/strategy/dragon.rs#L26\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src/libcore/num/flt2dec/strategy/dragon.rs#L26\">https://github.com/rust-lang/rust/blob/7db82ccd765cbfe55c3d8a2c434bc6f9b986843d/src/libcore/num/flt2dec/strategy/dragon.rs#L26</a> is failing to typeck the type <code>[u32; 10]</code> but according to my logging, the item right before that, with the same type, does typeck</p>",
        "id": 136207806,
        "sender_full_name": "oli",
        "timestamp": 1540117440
    },
    {
        "content": "<p>So.... I presume that the issue is that we get a hash collision because they are the same, but since their alloc IDs differ, we don't get equality by the <code>Eq</code> impl</p>",
        "id": 136207807,
        "sender_full_name": "oli",
        "timestamp": 1540117440
    },
    {
        "content": "<p>Jup, i figured it out. Stable hash equality implies hash equality... how did we manage to keep constants working at all you may ask... well, we didn't use any constants containing allocids inside query keys</p>",
        "id": 136229985,
        "sender_full_name": "oli",
        "timestamp": 1540156563
    },
    {
        "content": "<p>great that you figured it out!</p>",
        "id": 136254427,
        "sender_full_name": "mw",
        "timestamp": 1540198803
    }
]