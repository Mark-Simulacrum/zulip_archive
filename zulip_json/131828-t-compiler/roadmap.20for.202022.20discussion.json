[
    {
        "content": "<p>this topic is for spitballing areas that we want to put on a 2022 roadmap</p>",
        "id": 268705238,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642691146
    },
    {
        "content": "<p>As usual, I’d like to see investment in our debugging support.</p>",
        "id": 268713379,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642694082
    },
    {
        "content": "<p>we don’t have enough local expertise in debuginfo formats nor in integration options with lldb/gdb.</p>",
        "id": 268713431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642694102
    },
    {
        "content": "<p>\"finish\" large trait system features: gats, const generics, potentially marker traits</p>",
        "id": 268713660,
        "sender_full_name": "lcnr",
        "timestamp": 1642694179
    },
    {
        "content": "<p>Chalk things: Chalk itself (there's a list, but it's been a bit), more Chalk integration into rustc</p>",
        "id": 268713749,
        "sender_full_name": "Jack Huey",
        "timestamp": 1642694218
    },
    {
        "content": "<p>this is somwhat selfish: open up more of the typechecker &amp; borrow checker through the rustc api. could be summarized as 'continue librarification'</p>",
        "id": 268713870,
        "sender_full_name": "Xavier Denis",
        "timestamp": 1642694266
    },
    {
        "content": "<p>I’ve definitely heard that landing Chalk would unblock a lot of things. Am I correct that it some of the things that Chalk opens up will lead to us closing some long-standing I-unsound issues, <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> ?</p>",
        "id": 268713946,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642694283
    },
    {
        "content": "<p>incremental perf + stability feel fairly important to me</p>",
        "id": 268713968,
        "sender_full_name": "lcnr",
        "timestamp": 1642694290
    },
    {
        "content": "<p>Related: better testing for incremental compilation</p>",
        "id": 268714026,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642694310
    },
    {
        "content": "<p>some version of 'apply to sequence of commits', and verify that the result is the same as compiling the final commit</p>",
        "id": 268714084,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642694335
    },
    {
        "content": "<p>Move NLL towards stabilization (this is blocked on review of some of my diagnostic PRs, and some unspecified change related to the leak check)</p>",
        "id": 268714214,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642694389
    },
    {
        "content": "<p>Specifically, I'm talking about turning off migration mode</p>",
        "id": 268714443,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642694435
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714084\">said</a>:</p>\n<blockquote>\n<p>some version of 'apply to sequence of commits', and verify that the result is the same as compiling the final commit</p>\n</blockquote>\n<p>My understanding is that <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> ’s original implementation used github repos of existing rust projects to do such testing. I.e., checking that for each commit, the from-scratch build was binary identical to an incremental build against the previous commit</p>",
        "id": 268714579,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642694485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268713870\">said</a>:</p>\n<blockquote>\n<p>this is somwhat selfish: open up more of the typechecker &amp; borrow checker through the rustc api. could be summarized as 'continue librarification'</p>\n</blockquote>\n<p>I <em>think</em> leveraging Chalk more aligns with this. Unless I misunderstand what you are asking for? (And Chalk admittedly doesn’t cover borrowck)</p>",
        "id": 268714732,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642694532
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268713946\">said</a>:</p>\n<blockquote>\n<p>I’ve definitely heard that landing Chalk would unblock a lot of things. Am I correct that it some of the things that Chalk opens up will lead to us closing some long-standing I-unsound issues, <span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> ?</p>\n</blockquote>\n<p>Uh, in theory and in a perfect world, yes. In practice, I imagine there will be some backwards-compatibility things that will make some things tricky. There are still big \"feature\" holes - like specialization and const eval - that need design work. There's also more practical things to think about e.g. performance and diagnostics that haven't had much thought into them at all. So, I don't think Chalk landing as default trait solver is anywhere close. But it <em>is</em> (still) at the point that integration works. And I'd like to get more and more tests passing (that don't use unimplemented features)</p>",
        "id": 268714733,
        "sender_full_name": "Jack Huey",
        "timestamp": 1642694533
    },
    {
        "content": "<p>Does that implementation still work with current rustc?</p>",
        "id": 268714749,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1642694539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714749\">said</a>:</p>\n<blockquote>\n<p>Does that implementation still work with current rustc?</p>\n</blockquote>\n<p>This I do not know.</p>",
        "id": 268714762,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642694547
    },
    {
        "content": "<p>Yes</p>",
        "id": 268714775,
        "sender_full_name": "Jack Huey",
        "timestamp": 1642694552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714749\">said</a>:</p>\n<blockquote>\n<p>Does that implementation still work with current rustc?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> ^ ? (was asking about test infra described <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714579\">here</a>)</p>",
        "id": 268714820,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642694571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714749\">said</a>:</p>\n<blockquote>\n<p>Does that implementation still work with current rustc?</p>\n</blockquote>\n<p>oh that was to a separate thing</p>",
        "id": 268714881,
        "sender_full_name": "Jack Huey",
        "timestamp": 1642694596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714732\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"312719\">Xavier Denis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268713870\">said</a>:</p>\n<blockquote>\n<p>this is somwhat selfish: open up more of the typechecker &amp; borrow checker through the rustc api. could be summarized as 'continue librarification'</p>\n</blockquote>\n<p>I <em>think</em> leveraging Chalk more aligns with this. Unless I misunderstand what you are asking for? (And Chalk admittedly doesn’t cover borrowck)</p>\n</blockquote>\n<p>Yes! rustc-type-ir/chalk-ir! The big blocking thing here (at least from when I've tried to move things forward) is variance of associated types</p>",
        "id": 268715063,
        "sender_full_name": "Jack Huey",
        "timestamp": 1642694653
    },
    {
        "content": "<p>In theory, Chalk can work without merging the APIs (as it does currently), but the translation layer is unfortunate</p>",
        "id": 268715226,
        "sender_full_name": "Jack Huey",
        "timestamp": 1642694707
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268713379\">said</a>:</p>\n<blockquote>\n<p>As usual, I’d like to see investment in our debugging support.</p>\n</blockquote>\n<p>This is on the MS team roadmap for 2022 so it will likely be a significant focus for <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> and I's efforts this year.</p>",
        "id": 268716808,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1642695287
    },
    {
        "content": "<p>Faster compilation is a perennial favorite roadmap item as well. <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 268721250,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1642697116
    },
    {
        "content": "<p>Overall, I think I'm less concerned with <em>what</em> goes on the roadmap than on how we think that work will be accomplished. </p>\n<p>I would love to see if we can find groups of people interested in working on the same things. Even if it's just two people, knowing that someone else is interested in the same thing you are makes it easier to have discussions about the feature, issues, etc and also gives you an obvious reviewer. </p>\n<p>At that point, maybe we can find some \"themes\" in what people want to work on and put together a coherent roadmap that way.</p>",
        "id": 268721837,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1642697375
    },
    {
        "content": "<p>well, the claim from <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> was that <em>if</em> we say “we need help with X”, we will get some amount of human resources on X</p>",
        "id": 268726272,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642699117
    },
    {
        "content": "<p>which is what drives my interesting in <em>what</em> rather than how. Or rather, the two are intertwined.</p>",
        "id": 268726342,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642699146
    },
    {
        "content": "<p>since obviously the things that would rely on newcomers need to be tasks that we can effectively mentor with low overhead</p>",
        "id": 268726371,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642699161
    },
    {
        "content": "<p>the foundation may have some muscle too in the grants program, if specific tasks are identified</p>",
        "id": 268726583,
        "sender_full_name": "cuviper",
        "timestamp": 1642699236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268721837\">said</a>:</p>\n<blockquote>\n<p>At that point, maybe we can find some \"themes\" in what people want to work on and put together a coherent roadmap that way.</p>\n</blockquote>\n<p>I don't know if that qualifies as a theme, but sometimes I look at the list of <a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AI-compiletime\">issues labeled <code>I-compiletime</code></a> and wonder if there are \"themes\" that can be identified and tackled to improve on this topic. Improving compile times is maybe implicit in some of the previous comments (e.g. <span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> comments).<br>\n(my point of view being from someone that scrolls weekly the issue tracker)</p>",
        "id": 268727757,
        "sender_full_name": "apiraino",
        "timestamp": 1642699686
    },
    {
        "content": "<p>parallel compiler?</p>",
        "id": 268740104,
        "sender_full_name": "The 8472",
        "timestamp": 1642704803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> More precisely, if we say \"these are our top priorities that would have substantial impact (or would be if we had enough bandwidth)\", some companies looking to have a major impact in Rust will align their roadmaps accordingly.</p>",
        "id": 268740510,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642704966
    },
    {
        "content": "<p>I don't know if this is \"big enough\", but it would be great if someone could tackle having a MIR fallback for intrinsics.  Without something like that we're going to have huge process complexity in a multiple-backend world, since every intrinsic would need to get implemented for every backend immediately.</p>",
        "id": 268745537,
        "sender_full_name": "scottmcm",
        "timestamp": 1642707238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714579\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714084\">said</a>:</p>\n<blockquote>\n<p>some version of 'apply to sequence of commits', and verify that the result is the same as compiling the final commit</p>\n</blockquote>\n<p>My understanding is that <span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> ’s original implementation used github repos of existing rust projects to do such testing. I.e., checking that for each commit, the from-scratch build was binary identical to an incremental build against the previous commit</p>\n</blockquote>\n<p>I think that was <a href=\"https://github.com/nikomatsakis/cargo-incremental/\">https://github.com/nikomatsakis/cargo-incremental/</a> right ? I recall seeing talk about it having issues, but maybe they can fixed to help improve testing and reliability of incremental compilation</p>",
        "id": 268752547,
        "sender_full_name": "lqd",
        "timestamp": 1642710504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268745537\">said</a>:</p>\n<blockquote>\n<p>I don't know if this is \"big enough\", but it would be great if someone could tackle having a MIR fallback for intrinsics.  Without something like that we're going to have huge process complexity in a multiple-backend world, since every intrinsic would need to get implemented for every backend immediately.</p>\n</blockquote>\n<p>Is there an issue associated with this request on rust repo?</p>",
        "id": 268787751,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642731807
    },
    {
        "content": "<p>I don't know of one, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, so I just wrote up <a href=\"https://github.com/rust-lang/rust/issues/93145\">https://github.com/rust-lang/rust/issues/93145</a></p>",
        "id": 268790827,
        "sender_full_name": "scottmcm",
        "timestamp": 1642734885
    },
    {
        "content": "<p>(I just realized it probably belongs in MCP process. But I can port it over there.)</p>",
        "id": 268790958,
        "sender_full_name": "pnkfelix",
        "timestamp": 1642735039
    },
    {
        "content": "<p>Agree, but I can't commit to working on it so it didn't seem like something I should put in MCP, since AFAIK those get announced immediately, no?</p>",
        "id": 268792765,
        "sender_full_name": "scottmcm",
        "timestamp": 1642737232
    },
    {
        "content": "<p>FYI: we also have some survey data that could potentially be useful for this discussion. We likely won't have time to make a well formed report in time to help with this discussion, but perhaps <span class=\"user-mention\" data-user-id=\"256841\">@Nick Cameron</span> and I can work finding data that would be useful for this discussion.</p>",
        "id": 268827308,
        "sender_full_name": "rylev",
        "timestamp": 1642763464
    },
    {
        "content": "<p>(unfortunately, we don't currently have a way to give folks access to raw aggregate data as it's mixed with PII which would require signing an NDA and which we naturally want to limit)</p>",
        "id": 268827372,
        "sender_full_name": "rylev",
        "timestamp": 1642763514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714820\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714749\">said</a>:</p>\n<blockquote>\n<p>Does that implementation still work with current rustc?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> ^ ? (was asking about test infra described <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714579\">here</a>)</p>\n</blockquote>\n<p>We'd need to try. IIRC, we added some knobs to rustc to allow generating the exact same object files in incremental and non-incremental mode. Since the tool (<a href=\"https://github.com/nikomatsakis/cargo-incremental\">https://github.com/nikomatsakis/cargo-incremental</a>) has not been used for a few years now, it's quite possible that those knobs have been removed.</p>",
        "id": 269378667,
        "sender_full_name": "mw",
        "timestamp": 1643187192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268716808\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268713379\">said</a>:</p>\n<blockquote>\n<p>As usual, I’d like to see investment in our debugging support.</p>\n</blockquote>\n<p>This is on the MS team roadmap for 2022 so it will likely be a significant focus for <span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> and I's efforts this year.</p>\n</blockquote>\n<p>This is something I'm hoping to spend some time on this year too, I enjoyed working on Split DWARF so will likely be picking up tasks in this area.</p>",
        "id": 269379622,
        "sender_full_name": "davidtwco",
        "timestamp": 1643187673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/269379622\">said</a>:</p>\n<blockquote>\n<p>This is something I'm hoping to spend some time on this year too, I enjoyed working on Split DWARF so will likely be picking up tasks in this area.</p>\n</blockquote>\n<p>Nice! :)</p>",
        "id": 269417360,
        "sender_full_name": "mw",
        "timestamp": 1643206486
    },
    {
        "content": "<p>Awesome! Sounds like there is a fair amount of interest in debugging so perhaps we should try to spin up a working group and coordinate our efforts?</p>",
        "id": 269423015,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1643208636
    },
    {
        "content": "<p>I think it sounds like we have a number of people who have both time and interest in driving debugging efforts forward, yes!</p>",
        "id": 269441454,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643215157
    },
    {
        "content": "<p>And I’ve been in conversations with <span class=\"user-mention\" data-user-id=\"473134\">@Greg Clayton</span> , one of the original authors of LLDB. They have a lot of interest in making the Rust+lldb experience better</p>",
        "id": 269441649,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643215215
    },
    {
        "content": "<p>(it also seems like a wg-debugging may mesh well with certain other efforts, such as the <a href=\"https://github.com/rust-lang/async-crashdump-debugging-initiative\">async crashdump initiative</a> that <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> is driving.)</p>",
        "id": 269441796,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643215285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268714214\">said</a>:</p>\n<blockquote>\n<p>Move NLL towards stabilization (this is blocked on review of some of my diagnostic PRs, and some unspecified change related to the leak check)</p>\n</blockquote>\n<p>by the way, <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> , would you be willing to summarize the status here at the top of <a href=\"https://github.com/rust-lang/rust/issues/43234\">#43234</a> (the NLL tracking issue) ? I think its fair to say that people who are not currently in the weeds of NLL find it hard to determine what the open remaining problems are.</p>",
        "id": 269462325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643223232
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/269423015\">said</a>:</p>\n<blockquote>\n<p>Awesome! Sounds like there is a fair amount of interest in debugging so perhaps we should try to spin up a working group and coordinate our efforts?</p>\n</blockquote>\n<p>That sounds like a great idea.</p>",
        "id": 269517652,
        "sender_full_name": "davidtwco",
        "timestamp": 1643250114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116107\">davidtwco</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/269517652\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/269423015\">said</a>:</p>\n<blockquote>\n<p>Awesome! Sounds like there is a fair amount of interest in debugging so perhaps we should try to spin up a working group and coordinate our efforts?</p>\n</blockquote>\n<p>That sounds like a great idea.</p>\n</blockquote>\n<p>I am new to Rust, and love to help with debugging and testing as well : )</p>",
        "id": 269682208,
        "sender_full_name": "f-87",
        "timestamp": 1643340881
    },
    {
        "content": "<p>I think a wg-debuginfo would be great for improving a number of things:</p>\n<ul>\n<li>Coordination with debuginfo consumers (debuggers and other tooling), especially around changes to what the compiler emits</li>\n<li>More stable testing of various debuggers in CI</li>\n<li>Direct testing of the DWARF debuginfo we generate (in a format that serves as actual documentation)</li>\n<li>Discussion of what debuginfo should ideally look like at some point (i.e. what updates we would want to propose to DWARF at some point)</li>\n<li>Discussion of debugging support beyond classic debuginfo</li>\n</ul>",
        "id": 269713118,
        "sender_full_name": "mw",
        "timestamp": 1643364620
    },
    {
        "content": "<p>A fix for <a href=\"https://github.com/rust-lang/rust/issues/65487\">#65487</a> would be wonderful, along these lines <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 269956408,
        "sender_full_name": "nnethercote",
        "timestamp": 1643575733
    },
    {
        "content": "<p>Could those be DUMMY_SPAN?</p>",
        "id": 269956490,
        "sender_full_name": "bjorn3",
        "timestamp": 1643575811
    },
    {
        "content": "<p>I don't know what DUMMY_SPAN is</p>",
        "id": 269956518,
        "sender_full_name": "nnethercote",
        "timestamp": 1643575862
    },
    {
        "content": "<p>Never mind. Just read the issue discussion and it seems to not be coming from rustc, but from llvm.</p>",
        "id": 269956604,
        "sender_full_name": "bjorn3",
        "timestamp": 1643575954
    },
    {
        "content": "<p>DUMMY_SPAN is a <code>rustc_span::Span</code> that can be used when there is no sensible <code>Span</code> for something.</p>",
        "id": 269956629,
        "sender_full_name": "bjorn3",
        "timestamp": 1643576010
    },
    {
        "content": "<p>Oh right, I thought it was a DWARF thing</p>",
        "id": 269958232,
        "sender_full_name": "nnethercote",
        "timestamp": 1643577613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268792765\">said</a>:</p>\n<blockquote>\n<p>Agree, but I can't commit to working on it so it didn't seem like something I should put in MCP, since AFAIK those get announced immediately, no?</p>\n</blockquote>\n<p>Well, much like RFC’s, the proposal gets announced and then spends some time in limbo while people discuss it (or fail to discuss it). Its not something that would need to be rushed. And furthermore, the act of proposing it and getting it seconded might encourage a contributor to try their hand at implementing it, <em>especially</em> if you volunteered to mentor someone on it, rather than try to implement it yourself.</p>",
        "id": 270249777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1643736036
    },
    {
        "content": "<p>Support in rustc for switching to a specific built-in codegen backend with a simple flag, better ways to pass args to codegen backends (llvm-args, pain), overall just better custom codegen backend support. And naturally my own personal goal of upstreaming cg_cuda :)</p>",
        "id": 270256909,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1643738467
    },
    {
        "content": "<blockquote>\n<p>Support in rustc for switching to a specific built-in codegen backend with a simple flag</p>\n</blockquote>\n<p>That is <code>-Zcodegen-backend</code> already. Even has cargo support for builtin backends. (external backends aren't allowed)</p>",
        "id": 270257738,
        "sender_full_name": "bjorn3",
        "timestamp": 1643738741
    },
    {
        "content": "<p>ah since when does cargo have support for that? i didnt notice</p>",
        "id": 270257952,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1643738808
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/pull/9118\">https://github.com/rust-lang/cargo/pull/9118</a></p>",
        "id": 270258080,
        "sender_full_name": "bjorn3",
        "timestamp": 1643738859
    },
    {
        "content": "<p>It is per-profile though as I wanted for cg_clif, and not per-target like you would probably want for cg_cuda.</p>",
        "id": 270258231,
        "sender_full_name": "bjorn3",
        "timestamp": 1643738896
    },
    {
        "content": "<p>Yeah eventually we'd want per-target codegen support, but initially making it opt-in is fine</p>",
        "id": 270258331,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1643738931
    },
    {
        "content": "<p>It looks like NLL stabilization didn't make it into the hackmd - was that intentional?</p>",
        "id": 271223491,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644374506
    },
    {
        "content": "<p>I think I took it out because I wasn't sure how best to describe it, in terms of how to get people to understand what value it will provide</p>",
        "id": 271225296,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644376333
    },
    {
        "content": "<p>but oh I now see you say you've started filling in the status on <a href=\"https://github.com/rust-lang/rust/issues/43234\">#43234</a> ?</p>",
        "id": 271225356,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644376395
    },
    {
        "content": "<p>(I have to admit, I'm also not sure whether it ends up being a cross-cutting issue with lang-team. I don't remember off hand where we landed on two-phase borrows.)</p>",
        "id": 271225474,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644376474
    },
    {
        "content": "<p>Ah, are there still crates relying on <code>#[feature(nll)]</code> ?</p>",
        "id": 271225528,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644376526
    },
    {
        "content": "<p>that would be a way to sell it</p>",
        "id": 271225533,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644376531
    },
    {
        "content": "<p>okay, I see much dialogue from end of last year in issue <a href=\"https://github.com/rust-lang/rust/issues/58781\">#58781</a></p>",
        "id": 271225633,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644376599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> would you call this an Aspirational goal, or one that you think we have resources already allocated to land this year? I'm currently thinking its Aspirational.</p>",
        "id": 271225664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644376654
    },
    {
        "content": "<p>The major unknown is 'the leak check'</p>",
        "id": 271226080,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644377169
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> said that there needs to be further integration of the leak check into NLL, but I'm not really sure what that means :)</p>",
        "id": 271226100,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644377204
    },
    {
        "content": "<p>Other than that, I think things are looking pretty good</p>",
        "id": 271226113,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644377227
    },
    {
        "content": "<p>My opaque type diag PR is in the merge queue</p>",
        "id": 271226124,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644377243
    },
    {
        "content": "<p>which should eliminate the last of the 'higher-ranked subtype' error messages in favor of more descriptive errors on par with migrate mode</p>",
        "id": 271226151,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1644377276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/271225474\">said</a>:</p>\n<blockquote>\n<p>(I have to admit, I'm also not sure whether it ends up being a cross-cutting issue with lang-team. I don't remember off hand where we landed on two-phase borrows.)</p>\n</blockquote>\n<p>the 2PB and <code>mutable_borrow_reservation_conflict</code> lint don't seem to be a blocker for turning off the migrate mode indeed. So there's probably still some diagnostics to check (and the worse case of that was the higher-ranked subtype error blocker, and that's fixed thanks to aaron &amp; matthew) that would be blockers for esteban, and the leak check + <a href=\"https://github.com/rust-lang/rust/issues/73154\">#73154</a> area that could need some clarification from Niko.</p>",
        "id": 271248995,
        "sender_full_name": "lqd",
        "timestamp": 1644398572
    },
    {
        "content": "<p>I'd also really like to push to get NLL fully stabilized. I think probably the best way to move forward is to schedule a meeting with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> to ensure some sync time to talk about this :)</p>",
        "id": 271286294,
        "sender_full_name": "Jack Huey",
        "timestamp": 1644417201
    },
    {
        "content": "<p>okay. Lets make sure NLL gets back on the roadmap then. The decision about whether its an Initiative or Aspirational will need to be resolved via a conversation with <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 271294685,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644420513
    },
    {
        "content": "<p>NLL isn't fully stabilized?</p>",
        "id": 271488480,
        "sender_full_name": "nnethercote",
        "timestamp": 1644524315
    },
    {
        "content": "<p>I believe that's referring to <a href=\"https://github.com/rust-lang/rust/issues/57895\">https://github.com/rust-lang/rust/issues/57895</a></p>",
        "id": 271488716,
        "sender_full_name": "bstrie",
        "timestamp": 1644524432
    },
    {
        "content": "<p>Cross posting for visibility:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/.5Bweekly.5D.202022-02-10.20.2354818/near/271452969\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Hi y'all, T-compiler and T-compiler-contributors!</p>\n<p>As mentioned in Zulip recently, Wesley and I have been trying to put together a document laying out the team's thoughts on initiatives for this year.</p>\n<p>Here's the draft:</p>\n<p><a href=\"https://hackmd.io/Hrl30lX9Q0mbLIT4VkR_UA?view\">https://hackmd.io/Hrl30lX9Q0mbLIT4VkR_UA?view</a></p>\n<p>As noted in the doc, our intent is to post this on the Inside Rust blog in the near future, circa February 18th. You can consider it an early preview; we want feedback from the members of T-compiler and T-compiler-contributors before we circulate it more broadly.</p>\n<p>You can post feedback as a hackmd margin comment, or or send us an email, or write in a Zulip thread ( <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion\">#t-compiler &gt; roadmap for 2022 discussion</a> )</p>\n<p>Looking forward to what you all think!</p>\n<p>Cheers,<br>\nFelix and Wesley</p>\n</blockquote>\n</blockquote>\n<p><span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span> and compiler-contributors should have received an email from Felix.</p>",
        "id": 271490954,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1644525584
    },
    {
        "content": "<p>Please give the HackMD a read. We're happy to take suggestions and feedback on this proposed roadmap!</p>",
        "id": 271491064,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1644525630
    },
    {
        "content": "<p>Especially if there is something important you know is being worked on and isn't mentioned, we should make sure it's been considered for inclusion.</p>",
        "id": 271491152,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1644525692
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> AIUI, NLL is stable and shipped and the default, but the non-NLL mode is still in the compiler for a few reasons.</p>",
        "id": 271501814,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644530610
    },
    {
        "content": "<p>For more details, see: <a href=\"https://github.com/rust-lang/rust/issues/58781\">https://github.com/rust-lang/rust/issues/58781</a></p>",
        "id": 271502032,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644530719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Is that \"unsettled question\" still unsettled, or is it just that we need to figure out what to do as a result?</p>",
        "id": 271502399,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1644530909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/271248995\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/271225474\">said</a>:</p>\n<blockquote>\n<p>(I have to admit, I'm also not sure whether it ends up being a cross-cutting issue with lang-team. I don't remember off hand where we landed on two-phase borrows.)</p>\n</blockquote>\n<p>the 2PB and <code>mutable_borrow_reservation_conflict</code> lint don't seem to be a blocker for turning off the migrate mode indeed. [...]</p>\n</blockquote>\n<p>^ <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span></p>",
        "id": 271502458,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644530952
    },
    {
        "content": "<p>i.e., my <em>understanding</em> is that two-phase borrows are not settled, but also do not block turning off migrate mode</p>",
        "id": 271502518,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644530989
    },
    {
        "content": "<p>the comment thread for <a href=\"https://github.com/rust-lang/rust/issues/56254\">#56254</a> has pretty good discussion of the issues around two-phase borrows.</p>",
        "id": 271502710,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644531102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/268713431\">said</a>:</p>\n<blockquote>\n<p>we don’t have enough local expertise in debuginfo formats nor in integration options with lldb/gdb.</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/269713118\">said</a>:</p>\n<blockquote>\n<p>I think a wg-debuginfo would be great for improving a number of things:</p>\n<ul>\n<li>Coordination with debuginfo consumers (debuggers and other tooling), especially around changes to what the compiler emits</li>\n<li>More stable testing of various debuggers in CI</li>\n<li>Direct testing of the DWARF debuginfo we generate (in a format that serves as actual documentation)</li>\n<li>Discussion of what debuginfo should ideally look like at some point (i.e. what updates we would want to propose to DWARF at some point)</li>\n<li>Discussion of debugging support beyond classic debuginfo</li>\n</ul>\n</blockquote>\n<p>Recently I was learning <code>gdb</code> debugging. Seeing how the new working group is being discussed, I would like to offer a few suggestions.</p>\n<ol>\n<li>\n<p>I think <code>RUSTFLAGS='-C link-arg=-s' cargo build --release</code> should preserve symbol information for subsequent debugging. <code>https://github.com/rust-lang/rust/issues/93406</code></p>\n</li>\n<li>\n<p>In my work, I sometimes need to debug a process when the process is uninterrupted (release mode). But it doesn't seem to be possible to debug the release mode right now, as I asked here: <code>https://users.rust-lang.org/t/how-do-i-use-the-gdb-to-debug-the-release-service-process/71617</code></p>\n</li>\n</ol>",
        "id": 271537449,
        "sender_full_name": "Heisenberg",
        "timestamp": 1644561994
    },
    {
        "content": "<p>by the way, I'll be reaching out to people 1:1 about this, but as a general note: Some contributors who are mentioned by username in the doc are given time by their employer to work on Rust. And some subset of those contributors (and their employer) would <em>like it</em> if the employer's name were mentioned in tandem with the contributor.</p>",
        "id": 271855887,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644858019
    },
    {
        "content": "<p>So, like I said: I'll be reaching out 1:1 to each person mentioned to ask them if they want their employer's name written next to where they are mentioned, potentially under specific initiatives. (E.g. something like \"improving Rust's debuginfo quality (mw, wesleywiser, both at Microsoft)\")</p>",
        "id": 271856315,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644858201
    },
    {
        "content": "<p>(linking to a sponsorship page is another obvious thing I can do for those who have one.)</p>",
        "id": 271856785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1644858420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/271855887\">said</a>:</p>\n<blockquote>\n<p>by the way, I'll be reaching out to people 1:1 about this, but as a general note: Some contributors who are mentioned by username in the doc are given time by their employer to work on Rust. And some subset of those contributors (and their employer) would <em>like it</em> if the employer's name were mentioned in tandem with the contributor.</p>\n</blockquote>\n<p>To what degree is this document only for people on T-compiler? Because my boss is highly motivated to allot some of my time to polishing certain Rust features, is that something that you want to note or would that be noise? Maybe that would be better for a broader \"Rust in 2022\" document that isn't tightly-scoped to T-compiler?</p>",
        "id": 271997774,
        "sender_full_name": "bstrie",
        "timestamp": 1644941871
    },
    {
        "content": "<p>The audience is going to be anyone interested in what's happening in the compiler, especially people who can help with that.</p>",
        "id": 272162588,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645038293
    },
    {
        "content": "<p>but I deliberately did not want to try to tackle questions in T-lang nor T-libs</p>",
        "id": 272162627,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645038314
    },
    {
        "content": "<p>because it took long enough to make this doc with the \"narrow\" scope that it already has</p>",
        "id": 272162652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645038328
    },
    {
        "content": "<p>Just a note -- <span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> has started throwing together a roadmap doc for perf wg (<a href=\"https://hackmd.io/YJQSj_nLSZWl2sbI84R1qA\">https://hackmd.io/YJQSj_nLSZWl2sbI84R1qA</a>), might be interesting for folks to take a look at</p>",
        "id": 272162965,
        "sender_full_name": "simulacrum",
        "timestamp": 1645038454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"256342\">@bstrie</span> the \"polishing certain Rust features\", I assume you're talking about features that are not covered on this list somewhere? Are we talking about language design stuff that really belongs with T-lang? Or are you just saying \"there's a feature that's been approved to be implemented, and I'd like to work on it, and I'll have an easier time getting support to work on it if it is included in a document like this\" ?</p>",
        "id": 272162966,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645038454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> I am looking at the draft here in light of today's discussion on disabling incremental for 1.59 and I feel like we might need/should say something about the stability of incremental</p>",
        "id": 272722040,
        "sender_full_name": "simulacrum",
        "timestamp": 1645468319
    },
    {
        "content": "<p>There's an aspirations section on <em>improving</em> (e.g., perf) but not on making it less buggy which seems flawed - maybe that should be a larger priority or we should signal that help really is needed?</p>",
        "id": 272722119,
        "sender_full_name": "simulacrum",
        "timestamp": 1645468369
    },
    {
        "content": "<p>(the section focuses on performance more so than stability, anyway)</p>",
        "id": 272722160,
        "sender_full_name": "simulacrum",
        "timestamp": 1645468412
    },
    {
        "content": "<p>hmm</p>",
        "id": 272734431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645477109
    },
    {
        "content": "<p>There's a devil on one of my shoulders that suggests incremental should just be removed entirely <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 272734671,
        "sender_full_name": "nnethercote",
        "timestamp": 1645477273
    },
    {
        "content": "<p>(it may be that the current section is fine, but I could well imagine a comment on Thursday's release post saying \"why did the compiler team not prioritize this\", which maybe we can try to head off a little with some slight language for tomorrow)</p>",
        "id": 272734710,
        "sender_full_name": "simulacrum",
        "timestamp": 1645477301
    },
    {
        "content": "<p>we could augment this text: </p>\n<blockquote>\n<p>In addition, there is a significant amount of work that could be done to improve our testing infrastructure for incremental compiliation which does not require deep knowledge of the compiler.</p>\n</blockquote>\n<p>to say</p>\n<blockquote>\n<p>In addition, there is a significant amount of work that could be done to improve our testing infrastructure for incremental compiliation which does not require deep knowledge of the compiler. We have had to disable and subsequently reenable incremental compilation on the stable release; we want to expand our validation strategies so that we know about problems in incremental compilation well before they come close to the stable channel.</p>\n</blockquote>",
        "id": 272734809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645477355
    },
    {
        "content": "<p>That phrasing would have worked last week before we were talking about disabling incr-comp, and it still would work this week, I think.</p>",
        "id": 272734972,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645477494
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ^ ?</p>",
        "id": 272734973,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645477497
    },
    {
        "content": "<p>Seems good to me</p>",
        "id": 272734995,
        "sender_full_name": "simulacrum",
        "timestamp": 1645477518
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> from me</p>",
        "id": 272735016,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1645477538
    },
    {
        "content": "<p>I think it might be good to say a little more about 'well before'</p>",
        "id": 272735023,
        "sender_full_name": "simulacrum",
        "timestamp": 1645477545
    },
    {
        "content": "<p>in some sense, we want to not just detect problems before they hit stable, but eliminate the class of bugs (or at least detect it immediately)</p>",
        "id": 272735066,
        "sender_full_name": "simulacrum",
        "timestamp": 1645477563
    },
    {
        "content": "<p>but that's harder to phrase.</p>",
        "id": 272735087,
        "sender_full_name": "simulacrum",
        "timestamp": 1645477583
    },
    {
        "content": "<p>Well that's certainly a higher aspiration</p>",
        "id": 272735110,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645477609
    },
    {
        "content": "<p>Anyway I'm hesitant to try to give too much detail in this post on \"What to do about incr-comp\". Its something we need to talk about, not commit to guesswork here.</p>",
        "id": 272735177,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645477677
    },
    {
        "content": "<p>yeah, sure</p>",
        "id": 272735237,
        "sender_full_name": "simulacrum",
        "timestamp": 1645477694
    },
    {
        "content": "<p>I'll go add this text to the PR, but I also welcome other suggestions</p>",
        "id": 272735275,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645477742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/272734671\">said</a>:</p>\n<blockquote>\n<p>There's a devil on one of my shoulders that suggests incremental should just be removed entirely :/</p>\n</blockquote>\n<p>heh :) I have wanted to experiment with dropping all the incremental-related code and seeing how much of a win that is for non-incr builds, not so much to land it, but to at least get a sense of the trade off at this point</p>",
        "id": 272737946,
        "sender_full_name": "simulacrum",
        "timestamp": 1645479943
    },
    {
        "content": "<p>It seems reasonable to suggest, even if incr comp is not removed, that it, err, seems to need some structural redesign.</p>",
        "id": 272739173,
        "sender_full_name": "Jubilee",
        "timestamp": 1645481001
    },
    {
        "content": "<p>don’t we somewhat see the tradeoff in the full vs incr-full benchmarks, or are you talking about testing without memoization or without the query system altogether ?</p>",
        "id": 272741694,
        "sender_full_name": "lqd",
        "timestamp": 1645483352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/272737946\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/272734671\">said</a>:</p>\n<blockquote>\n<p>There's a devil on one of my shoulders that suggests incremental should just be removed entirely :/</p>\n</blockquote>\n<p>heh :) I have wanted to experiment with dropping all the incremental-related code and seeing how much of a win that is for non-incr builds, not so much to land it, but to at least get a sense of the trade off at this point</p>\n</blockquote>\n<p>I'd love to see the numbers.</p>",
        "id": 272741718,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645483387
    },
    {
        "content": "<p>Maybe the \"automatically clean and retry\" idea should be reconsidered?</p>",
        "id": 272741759,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645483433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/272737946\">said</a>:</p>\n<blockquote>\n<p>heh <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> I have wanted to experiment with dropping all the incremental-related code</p>\n</blockquote>\n<p>It would simplify perf analysis a lot too -- four scenarios would drop down to one scenario.</p>",
        "id": 272742692,
        "sender_full_name": "nnethercote",
        "timestamp": 1645484297
    },
    {
        "content": "<blockquote>\n<p>There's a devil on one of my shoulders that suggests incremental should just be removed entirely</p>\n</blockquote>\n<p>I've had the same thought at times - the current system is just so complicated, and 'infects' so much of the compiler</p>",
        "id": 272742747,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1645484393
    },
    {
        "content": "<p>And problems like \"insert a line at the top of the file and all the spans get changed\" have never been properly solved, right?</p>",
        "id": 272742885,
        "sender_full_name": "nnethercote",
        "timestamp": 1645484453
    },
    {
        "content": "<p>cjgillot has done some work on that with 'relative span' encoding</p>",
        "id": 272742968,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1645484528
    },
    {
        "content": "<p>While we're thinking heretical thoughts: is the query system only for incremental?</p>",
        "id": 272742970,
        "sender_full_name": "nnethercote",
        "timestamp": 1645484530
    },
    {
        "content": "<p>It's not enabled by default at the moment</p>",
        "id": 272742972,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1645484532
    },
    {
        "content": "<p>Yes, but incremental includes LLVM module re-use tracking</p>",
        "id": 272742991,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1645484562
    },
    {
        "content": "<p>So, I've had an idea for a while that seems like it might speed up Rust compilation, and I wonder to what extent it would use the same infrastructure that incremental does.<br>\nWith a \"pull-oriented\"/query-based compiler, we can only compile what's actually needed. If we extend that past the crate boundary, we could do as little work as possible in a first pass, then start compiling depending crates, and only compile the bits of each crate that are actually <em>used</em>.</p>",
        "id": 272742998,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645484570
    },
    {
        "content": "<p>which is incredibly important for performance when LTO is involved</p>",
        "id": 272743008,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1645484583
    },
    {
        "content": "<p>For instance, suppose you have a crate A with ten-thousand functions, and a crate B depending on A but only calling one function; in theory we could <em>just</em> compile the one function.</p>",
        "id": 272743028,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645484613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/272742885\">said</a>:</p>\n<blockquote>\n<p>And problems like \"insert a line at the top of the file and all the spans get changed\" have never been properly solved, right?</p>\n</blockquote>\n<p>Curiosity: Does debug info have good solutions for this?  Or is a newline always cursed to re-emit line info for the rest of the file?</p>",
        "id": 272743694,
        "sender_full_name": "scottmcm",
        "timestamp": 1645485134
    },
    {
        "content": "<blockquote>\n<p>If we extend that past the crate boundary, we could do as little work as possible in a first pass, then start compiling depending crates, and only compile the bits of each crate that are actually <em>used</em>.</p>\n</blockquote>\n<p>Isn't that basically mir only rlibs? It has been benchmarked before and found to regress performance a lot in some cases. It also needs incr comp to avoid compiling everything every time. In addition it breaks <code>--emit obj</code>.</p>",
        "id": 272743975,
        "sender_full_name": "bjorn3",
        "timestamp": 1645485398
    },
    {
        "content": "<p>Should this be moved to its own topic</p>",
        "id": 272744001,
        "sender_full_name": "Jack Huey",
        "timestamp": 1645485429
    },
    {
        "content": "<p>Debuginfo could theoretically be handled by patching the object files.</p>",
        "id": 272744010,
        "sender_full_name": "bjorn3",
        "timestamp": 1645485447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/272743975\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>If we extend that past the crate boundary, we could do as little work as possible in a first pass, then start compiling depending crates, and only compile the bits of each crate that are actually <em>used</em>.</p>\n</blockquote>\n<p>Isn't that basically mir only rlibs? It has been benchmarked before and found to regress performance a lot in some cases. It also needs incr comp to avoid compiling everything every time. In addition it breaks <code>--emit obj</code>.</p>\n</blockquote>\n<p>No, this would go a step further, and not even emit MIR for things that aren't needed. Just figure out potentially visible items, feed that list forward, and don't do anything more until one of those items is asked for.</p>",
        "id": 272745463,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1645486979
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/272743694\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/272742885\">said</a>:</p>\n<blockquote>\n<p>And problems like \"insert a line at the top of the file and all the spans get changed\" have never been properly solved, right?</p>\n</blockquote>\n<p>Curiosity: Does debug info have good solutions for this?  Or is a newline always cursed to re-emit line info for the rest of the file?</p>\n</blockquote>\n<p>One answer for how to handle this that is used by some compilers is to not have a specific index into the actual source file string, but rather have each span have a length and a position relative to <strong>other</strong> spans, so that, like with most more \"linked list\" style data structures, changing one span only means rewriting 3 items at most (prev, self, next).</p>",
        "id": 272750535,
        "sender_full_name": "Jubilee",
        "timestamp": 1645492736
    },
    {
        "content": "<p>I learned about this while reading about how Roslyn, the C# compiler/code analysis/refactoring toolchain, handles things. So as you might imagine it's an approach that strongly pays off in incremental modes... at the cost of having to potentially build up significantly more upkeep in the first place, but</p>",
        "id": 272750853,
        "sender_full_name": "Jubilee",
        "timestamp": 1645493147
    },
    {
        "content": "<p>&lt;sillymode&gt;what if rustc was two compilers, a slow one and a fast one, and if the fast one catches up with the slow one that's how you know it's a circular compilation&lt;/sillymode&gt;</p>",
        "id": 272751043,
        "sender_full_name": "Jubilee",
        "timestamp": 1645493389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/272734671\">said</a>:</p>\n<blockquote>\n<p>There's a devil on one of my shoulders that suggests incremental should just be removed entirely :/</p>\n</blockquote>\n<p>Incr. comp. certainly seems to be the biggest maintenance burden we have. The query system is mostly there for incremental and doesn't carry its weight on its own, I'd say. <br>\nI've been dreaming about rewriting the compiler to be much simpler and geared more towards taking advantage of multicore machines. Rust as a language helps us a lot with parallel programming but it doesn't help us much with upholding the invariants that incr. comp. requires.</p>\n<p>Also, there might be ways to get some incrementality that are much simpler (albeit less fine-grained), like making the compiler emit self-contained intermediate files (like we already do for LLVM bitcode) and then hashing them verbatim (like LLVM's incremental ThinLTO does). That is, we might want to have some incrementality, but only if it is impossible to break accidentally and doesn't creep into every aspect of the compiler. </p>\n<p>What also might be interesting: Could we have a compiler based on rust-analyzer that only supports debug builds (rust-analyzer was built with the Salsa model from the get-go and I suspect it has much fewer incr. comp. related problems).</p>\n<p>Maybe we should indeed think about re-architecting the compiler in the medium term.</p>",
        "id": 272777093,
        "sender_full_name": "mw",
        "timestamp": 1645521400
    },
    {
        "content": "<p>The query system is also necessary for handling cycles between compilation phases for as long as here are no cycles between individual queries. This is essential for allowing a const fn to be used during typeck of another function.</p>",
        "id": 272777782,
        "sender_full_name": "bjorn3",
        "timestamp": 1645521875
    },
    {
        "content": "<p>Also I believe rust-analyzer has had incremental issues before too. For example it assumed proc macros are deterministic at some point and evict macro evaluations from the cache if not used for a while. To fix this macro evaluations are now only evicted if the input changes, which increases memory usage.</p>",
        "id": 272778079,
        "sender_full_name": "bjorn3",
        "timestamp": 1645522037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/roadmap.20for.202022.20discussion/near/272777782\">said</a>:</p>\n<blockquote>\n<p>The query system is also necessary for handling cycles between compilation phases for as long as here are no cycles between individual queries. This is essential for allowing a const fn to be used during typeck of another function.</p>\n</blockquote>\n<p>Yeah, I think some kind of on-demand evaluation will always be necessary -- and doing that in an ad-hoc fashion for each individual case sounds like a recipe for disaster :)</p>",
        "id": 272778712,
        "sender_full_name": "mw",
        "timestamp": 1645522407
    },
    {
        "content": "<p>But doing on-demand evaluation with caching still should be a lot easier to maintain when the system only has to work for the current compilation session.</p>",
        "id": 272778906,
        "sender_full_name": "mw",
        "timestamp": 1645522520
    },
    {
        "content": "<p>Sure. I just wouldn't like incr comp gone. It helps a lot with compile time for me.</p>",
        "id": 272779505,
        "sender_full_name": "bjorn3",
        "timestamp": 1645522823
    },
    {
        "content": "<p>Yes, I agree we'd need to have a replacement that performs at least roughly the same.</p>",
        "id": 272782545,
        "sender_full_name": "mw",
        "timestamp": 1645524577
    },
    {
        "content": "<p>I agree that the current setup for on-demand incr comp is incredibly complicated, and that dropping the on-demand scheme should be investigated. That does not mean we have to completely drop incr comp: we could find a way to still reuse past typechecking and LLVM.<br>\nOne benefit would be the high simplification potential. Instead of intertwined queries accessing information all over, we could go (back?) to a stage-based compilation: AST (fragments) -&gt; macro expansion + resolution -&gt; AST (full crate) -&gt; late resolution -&gt; HIR (per item-like) -&gt; type collection (per module) -&gt; typechecking (per body) -&gt; THIR (per body) -&gt; MIR (per body) -&gt; borrowck + optimization -&gt; LLVM.<br>\nThis stage-based compilation is still compatible with the recursion required by const-generics, with a priori definition of the dependency edges. It may even be simpler than the current scheme (no need for WithOptConstParam?).<br>\nAs said earlier, we may keep an incr-comp potential by strictly identifying which information can be accessed by which stage. For LLVM cgu reuse, we pretty much need to track which optimized MIR has been monomorphized and what it looked like. For typechecking, we will still have the hard problem of identifying dependencies inside of trait selection.</p>",
        "id": 272787448,
        "sender_full_name": "cjgillot",
        "timestamp": 1645527714
    },
    {
        "content": "<p>would you say we should hold off the existing work on end-to-end queries, e.g. the in-progress AST to HIR lowering incrementalization, for a while until we have a plan for the future of incremental compilation and the query system ?</p>\n<p>that being said, we'll also need a plan for the <em>present</em> of incremental compilation and the query system: to better test it, reproduce and fix existing issues, and prevent new ones (a lot of work seems in-progress here IIRC, like making the non-hashstable data inaccessible).</p>",
        "id": 272788972,
        "sender_full_name": "lqd",
        "timestamp": 1645528581
    },
    {
        "content": "<p>post is up, thanks <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ! and I've tweeted about it: <a href=\"https://twitter.com/pnkfelix/status/1496172078940176392\">https://twitter.com/pnkfelix/status/1496172078940176392</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/pnkfelix/status/1496172078940176392\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/d481cd182b8f1b51780eee2728ea0a624dbecbcd/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3337383830303030303334393736343032352f62396537363762326535656263363331383738323633623732613832313631655f6e6f726d616c2e706e67\"></a><p>The Rust compiler team wants you to know what its working on this year, and how you can help us make Rust better! #rustlang \n<a href=\"https://t.co/kiuXDWOTJw\">https://blog.rust-lang.org/inside-rust/2022/02/22/compiler-team-ambitions-2022.html</a></p><span>- Felix S K II (@pnkfelix)</span></div></div>",
        "id": 272835983,
        "sender_full_name": "pnkfelix",
        "timestamp": 1645550222
    }
]