[
    {
        "content": "<p>I'm working on implementing support for unwinding on OOM in <a href=\"https://github.com/rust-lang/rust/issues/88098\">#88098</a>. It works fine on the library side by just removing <code>#[rustc_allocator_nounwind]</code>, but currently the compiler assumes that <code>box</code> never unwinds. At the moment<code>box</code> is implemented as a <code>NullaryOp</code> in MIR, how can we change this to make it support unwinding?</p>",
        "id": 250424583,
        "sender_full_name": "Amanieu",
        "timestamp": 1629760716
    },
    {
        "content": "<p>We'll need to make it a Terminator</p>",
        "id": 250425707,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629761616
    },
    {
        "content": "<p>Are there any plans to ever stabilize <code>box</code> syntax? If not then we could just remove the MIR operator.</p>",
        "id": 250431249,
        "sender_full_name": "Amanieu",
        "timestamp": 1629766562
    },
    {
        "content": "<p><code>Box::new</code> internally uses <code>box</code>. There is an attempt to remove <code>box</code> entirely <a href=\"https://github.com/rust-lang/rust/issues/87781\">#87781</a> but there are very significant regressions (<a href=\"https://perf.rust-lang.org/compare.html?start=5ad7389bdd1abe7d2c6f73a233af1a7a69e96285&amp;end=baae8d273e7fd688eac0a28c89fe73c2a3e504da\">perf link</a>). So that PR ended up only removing <code>box</code> usage within compiler, but keep its usage within libraries.</p>",
        "id": 250431452,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629766777
    },
    {
        "content": "<p>If <code>box</code> is going to be a terminator in MIR anyways, can we just lower it to a function call directly in HIR-&gt;MIR?</p>",
        "id": 250432200,
        "sender_full_name": "Amanieu",
        "timestamp": 1629767421
    },
    {
        "content": "<p>I suppose a function call will cause the compiler to assume the box is initialized.</p>",
        "id": 250432314,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629767526
    },
    {
        "content": "<p>I had a look at the MIR, and it seems that it'll be a major change. Currently <code>Box</code> is the only possible way to shallow init a thing. Function will <code>InitKind::NonPanicPathOnly</code> init its destination place. We'll need something like <code>InitKind::ShallowNonPanicPathOnly</code> for the terminator that creates a <code>Box</code>, whether a new terminator or a function/intrinsic call.</p>",
        "id": 250433388,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629768747
    },
    {
        "content": "<p>I can have a try about the MIR change but I suppose that'll need a compiler-team MCP.</p>",
        "id": 250434147,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629769684
    }
]