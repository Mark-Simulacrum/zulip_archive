[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> eddyb told me to ask you would have more clues than him on this behavior. to make a test for issue <a href=\"https://github.com/rust-lang/rust/issues/65401\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/65401\">#65401</a>, I changed the attribute <code>rustc_error</code> to be able to take <code>rustc_error(delayed)</code> that calls <code>tcx.sess.delay_span_bug(tcx.def_span(def_id), \"compilation successful\");</code>, but when trying to compile twice some code with this attribute is does not exhibit the issue the snippet eddyb provided showed, do you have any idea why ?</p>",
        "id": 179444603,
        "sender_full_name": "traxys",
        "timestamp": 1572449708
    },
    {
        "content": "<p>hmm maybe the problem is more subtle, in that not <em>every</em> delay_span_bug is hidden?</p>",
        "id": 179446413,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572450662
    },
    {
        "content": "<p>I don't know if I'll have time to give your code a spin, but if I manage to allocate more time I'll try.</p>",
        "id": 179446496,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572450717
    },
    {
        "content": "<p>The <code>check_for_rustc_errors_attr</code> is called in the first line of <code>codegen_crate</code> in <code>src/librustc_codegen_ssa/base.rs</code>, could it mean that no codegen is done ?</p>",
        "id": 179447268,
        "sender_full_name": "traxys",
        "timestamp": 1572451108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237671\">@traxys</span> does the test case containing the attributes generate any other errors that might \"shadow\" the delayed bug?</p>",
        "id": 179447283,
        "sender_full_name": "mw",
        "timestamp": 1572451113
    },
    {
        "content": "<p>make sure you are compiling a library with some code in it.</p>",
        "id": 179447379,
        "sender_full_name": "mw",
        "timestamp": 1572451167
    },
    {
        "content": "<p>the test case is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_error(delayed)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179448272,
        "sender_full_name": "traxys",
        "timestamp": 1572451572
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>: <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> suggested that the problem is that <code>check_for_rustc_errors_attr</code> is properly not behind a query, and told me to ask you what should be the proper way to do it</p>",
        "id": 179449111,
        "sender_full_name": "traxys",
        "timestamp": 1572452081
    },
    {
        "content": "<p>It does not look like queries should have an influence on this.</p>",
        "id": 179511843,
        "sender_full_name": "mw",
        "timestamp": 1572512114
    },
    {
        "content": "<p>I don't see the test case in your PR. Do you use revisions?</p>",
        "id": 179511923,
        "sender_full_name": "mw",
        "timestamp": 1572512199
    },
    {
        "content": "<p>i.e. the test needs to be compiled twice in order for the problem to show</p>",
        "id": 179511945,
        "sender_full_name": "mw",
        "timestamp": 1572512227
    },
    {
        "content": "<p>I am compiling this twice by hand, calling the built rustc. The problem is that the attribute I wrote in the PR does not trigger the issue even though it triggers a delay_span_bug</p>",
        "id": 179516785,
        "sender_full_name": "traxys",
        "timestamp": 1572516548
    },
    {
        "content": "<p>did you make sure to use incremental compilation? when using <code>rustc</code>directly, you have to pass the <code>-Cincremental</code> commandline arg explicitly.</p>",
        "id": 179518344,
        "sender_full_name": "mw",
        "timestamp": 1572517701
    },
    {
        "content": "<p>both invocations must specify the same incremental cache directory.</p>",
        "id": 179518380,
        "sender_full_name": "mw",
        "timestamp": 1572517746
    },
    {
        "content": "<p>as in:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># invocation 1</span>\nrustc -Cincremental<span class=\"o\">=</span>/tmp/xyz lib.rs\n\n<span class=\"c1\"># invocation 2</span>\nrustc -Cincremental<span class=\"o\">=</span>/tmp/xyz lib.rs\n</pre></div>",
        "id": 179518481,
        "sender_full_name": "mw",
        "timestamp": 1572517819
    },
    {
        "content": "<p>maybe the better place to start is: <span class=\"user-mention\" data-user-id=\"237671\">@traxys</span> , you are able to observe the bug as originally documented, right?</p>",
        "id": 179518675,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572517984
    },
    {
        "content": "<p>(in other words, I don't want to be asking them to check (metaphorically) if their computer is plugged in if there's obvious evidence that it is)</p>",
        "id": 179518692,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572518013
    },
    {
        "content": "<p>Yes with the snippet provided by eddyb</p>",
        "id": 179519232,
        "sender_full_name": "traxys",
        "timestamp": 1572518473
    },
    {
        "content": "<p>(Also I think I have some correct code for turning the function into a query, should I put in the PR ?)</p>",
        "id": 179519865,
        "sender_full_name": "traxys",
        "timestamp": 1572519037
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> without a query the <code>delay_span_bug</code> would run every time, but inside a query, the query would be cached on the first run</p>",
        "id": 179520125,
        "sender_full_name": "eddyb",
        "timestamp": 1572519306
    },
    {
        "content": "<p>@mw yes <code> ../build/x86_64-unknown-linux-gnu/stage1/bin/rustc error.rs -Cincremental=foo</code> is exactly the invocation<br>\nI do it twice, and it fails, but with a correct snippet I see the issue</p>",
        "id": 179520226,
        "sender_full_name": "traxys",
        "timestamp": 1572519393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I am unsure of the code I wrote turning it into a query, but it still does not exihibit the issue</p>",
        "id": 179520249,
        "sender_full_name": "traxys",
        "timestamp": 1572519436
    },
    {
        "content": "<p>can you push to a branch, or gist a diff?</p>",
        "id": 179520264,
        "sender_full_name": "eddyb",
        "timestamp": 1572519454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237671\">@traxys</span> something very important is that the query shouldn't have <code>eval_always</code></p>",
        "id": 179520277,
        "sender_full_name": "eddyb",
        "timestamp": 1572519473
    },
    {
        "content": "<p>because then I think you get the behavior that the query is never cached</p>",
        "id": 179520334,
        "sender_full_name": "eddyb",
        "timestamp": 1572519490
    },
    {
        "content": "<p>tbh at this point it might be good to just fix the issue and not add a test - this is about ICEs, after all</p>",
        "id": 179520379,
        "sender_full_name": "eddyb",
        "timestamp": 1572519552
    },
    {
        "content": "<p>seems like producing an ICE with just the right problems attached to it is hard</p>",
        "id": 179520388,
        "sender_full_name": "eddyb",
        "timestamp": 1572519566
    },
    {
        "content": "<p>I have really few ideas on what I did, I have no knowledge of the query structure. <a href=\"https://github.com/traxys/rust/tree/rustc_error_delayed\" target=\"_blank\" title=\"https://github.com/traxys/rust/tree/rustc_error_delayed\">https://github.com/traxys/rust/tree/rustc_error_delayed</a> but the three last commits are what I did, sorry for the poor names it is my testing branch</p>",
        "id": 179520497,
        "sender_full_name": "traxys",
        "timestamp": 1572519664
    },
    {
        "content": "<p>if you use <code>git gui</code> then you can switch it to amend mode and keep modifying the last commit, to avoid needing many small commits</p>",
        "id": 179520521,
        "sender_full_name": "eddyb",
        "timestamp": 1572519708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237671\">@traxys</span> that looks fine</p>",
        "id": 179520600,
        "sender_full_name": "eddyb",
        "timestamp": 1572519760
    },
    {
        "content": "<p>I wonder if you need <code>cache_on_disk_if { true }</code> or something</p>",
        "id": 179520633,
        "sender_full_name": "eddyb",
        "timestamp": 1572519797
    },
    {
        "content": "<p>I there somwhere all the attributes are described ?</p>",
        "id": 179520760,
        "sender_full_name": "traxys",
        "timestamp": 1572519887
    },
    {
        "content": "<p>(I'll have the results in twenty minutes when rustc finishes compiling, I am not near my best computer, I need to setup SSH on it)</p>",
        "id": 179521013,
        "sender_full_name": "traxys",
        "timestamp": 1572520129
    },
    {
        "content": "<p>Wouldn't it also need <code>load_cached(tcx, something)</code> ?</p>",
        "id": 179521116,
        "sender_full_name": "traxys",
        "timestamp": 1572520220
    },
    {
        "content": "<p>some queries only have <code>cache_on_disk_if</code>, I think the <code>load_cached</code> is only for unsupported types or something</p>",
        "id": 179521919,
        "sender_full_name": "eddyb",
        "timestamp": 1572520942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> It worked ! It shows the bug</p>",
        "id": 179523627,
        "sender_full_name": "traxys",
        "timestamp": 1572522733
    },
    {
        "content": "<p>Oh, right we want the delayed bug to happen in something that gets skipped in the second run...</p>",
        "id": 179523787,
        "sender_full_name": "mw",
        "timestamp": 1572522917
    },
    {
        "content": "<p>Does the <code>tcx.span_err</code> stay between runs, or did it break the bare <code>#[rustc_error]</code> for incremental compilation ?</p>",
        "id": 179523944,
        "sender_full_name": "traxys",
        "timestamp": 1572523065
    },
    {
        "content": "<p>the behavior of the regular <code>#[rustc_error]</code> should not change</p>",
        "id": 179524072,
        "sender_full_name": "mw",
        "timestamp": 1572523172
    },
    {
        "content": "<p>so it still needs to be triggered outside of a query</p>",
        "id": 179524085,
        "sender_full_name": "mw",
        "timestamp": 1572523189
    },
    {
        "content": "<p>That would bring code duplication wouldn't it ? Because to check for <code>#[rustc_error(delay_span_bug)]</code> I first need to find the <code>rustc_error</code> and then check if there is the <code>delay_span_bug</code> ident</p>",
        "id": 179524243,
        "sender_full_name": "traxys",
        "timestamp": 1572523312
    },
    {
        "content": "<p>You should also be able to use <code>tcx.ensure().check_for_rustc_errors_attr()</code> instead of <code>tcx.check_for_rustc_errors_attr()</code>. Then the query result does not need to be cached on disk.</p>",
        "id": 179524246,
        "sender_full_name": "mw",
        "timestamp": 1572523315
    },
    {
        "content": "<blockquote>\n<p>That would bring code duplication wouldn't it ? Because to check for <code>#[rustc_error(delay_span_bug)]</code> I first need to find the <code>rustc_error</code> and then check if there is the <code>delay_span_bug</code> ident</p>\n</blockquote>\n<p>finding the attribute can still happen outside of any query. It's just the triggering of <code>delay_span_bug</code> that needs to happen inside the query</p>",
        "id": 179524407,
        "sender_full_name": "mw",
        "timestamp": 1572523444
    },
    {
        "content": "<p>So a query named <code>rustc_error_delay_span_bug</code> for example ? That just calls delay_span_bug ?</p>",
        "id": 179524462,
        "sender_full_name": "traxys",
        "timestamp": 1572523523
    },
    {
        "content": "<p>so I would:</p>\n<ul>\n<li>create a query called <code>trigger_delay_span_bug</code> and</li>\n<li>rename <code>#[rustc_error(delayed)]</code> to <code>#[rustc_error(delayed_from_inside_query)]</code></li>\n</ul>",
        "id": 179524489,
        "sender_full_name": "mw",
        "timestamp": 1572523553
    },
    {
        "content": "<p>then this code can just call the <code>trigger_delay_span_bug</code> query:<br>\n<a href=\"https://github.com/traxys/rust/commit/31a7cc84d038f355860d2e627ef14104f0432335#diff-9a36a3f0dd5416d91736e46c7c1cb614R45\" target=\"_blank\" title=\"https://github.com/traxys/rust/commit/31a7cc84d038f355860d2e627ef14104f0432335#diff-9a36a3f0dd5416d91736e46c7c1cb614R45\">https://github.com/traxys/rust/commit/31a7cc84d038f355860d2e627ef14104f0432335#diff-9a36a3f0dd5416d91736e46c7c1cb614R45</a></p>",
        "id": 179524599,
        "sender_full_name": "mw",
        "timestamp": 1572523622
    },
    {
        "content": "<p>I had renamed to <code>delay_span_bug</code> (eddyb told it made more sense because span_bug was not called before), so <code>delay_span_bug_from_query</code> on <code>delayed_from_inside_query</code> ?</p>",
        "id": 179524626,
        "sender_full_name": "traxys",
        "timestamp": 1572523653
    },
    {
        "content": "<p><code>delay_span_bug_from_inside_query</code> sounds good</p>",
        "id": 179524697,
        "sender_full_name": "mw",
        "timestamp": 1572523695
    },
    {
        "content": "<p>it's fine if it's a verbose name</p>",
        "id": 179524712,
        "sender_full_name": "mw",
        "timestamp": 1572523710
    },
    {
        "content": "<p>better to be explicit</p>",
        "id": 179524717,
        "sender_full_name": "mw",
        "timestamp": 1572523723
    },
    {
        "content": "<p>I don't see many other uses for it than this test</p>",
        "id": 179524723,
        "sender_full_name": "traxys",
        "timestamp": 1572523730
    },
    {
        "content": "<p>for some context about \"ensuring\" a query:</p>",
        "id": 179524765,
        "sender_full_name": "mw",
        "timestamp": 1572523790
    },
    {
        "content": "<p>it's the same as calling a query but then throwing away the result</p>",
        "id": 179524820,
        "sender_full_name": "mw",
        "timestamp": 1572523811
    },
    {
        "content": "<p>you only use it when you really only care about the side effects of a query (like emitting errors)</p>",
        "id": 179524853,
        "sender_full_name": "mw",
        "timestamp": 1572523850
    },
    {
        "content": "<p>(hm, now I wonder if this would actually work in that case, let me take a look...)</p>",
        "id": 179524889,
        "sender_full_name": "mw",
        "timestamp": 1572523893
    },
    {
        "content": "<p>yes, it should work</p>",
        "id": 179525082,
        "sender_full_name": "mw",
        "timestamp": 1572524070
    },
    {
        "content": "<p>what should be the query input ? the CrateNum ?</p>",
        "id": 179525256,
        "sender_full_name": "traxys",
        "timestamp": 1572524228
    },
    {
        "content": "<p>yes, CrateNum is fine</p>",
        "id": 179525370,
        "sender_full_name": "mw",
        "timestamp": 1572524338
    },
    {
        "content": "<p>btw, <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> I was thinking we should have a <code>LocalCrate</code> ZST that we use instead of <code>CrateNum</code> for queries where it's always <code>LOCAL_CRATE</code> (I'd rather not use <code>()</code> because that somewhat obscures the intent)</p>",
        "id": 179526693,
        "sender_full_name": "eddyb",
        "timestamp": 1572525458
    },
    {
        "content": "<p>kinda like <code>LocalDefId</code> (which I'm using to replace <code>DefIndex</code> in a few places as we speak)</p>",
        "id": 179526716,
        "sender_full_name": "eddyb",
        "timestamp": 1572525482
    },
    {
        "content": "<p>Yes, that has been suggested before I think it's a good idea</p>",
        "id": 179526808,
        "sender_full_name": "mw",
        "timestamp": 1572525543
    },
    {
        "content": "<p>it's on my \"at some point in the next decade\" TODO list</p>",
        "id": 179526832,
        "sender_full_name": "eddyb",
        "timestamp": 1572525566
    },
    {
        "content": "<p>My PRs which moves the queries earlier added a <code>LocalCrate</code> type, but I changed it to <code>()</code> =P</p>",
        "id": 179531819,
        "sender_full_name": "Zoxc",
        "timestamp": 1572529288
    },
    {
        "content": "<p>Where should the test be ? <code>src/test/ui/throw_incorrect_artifacts.rs</code> ?</p>",
        "id": 179531825,
        "sender_full_name": "traxys",
        "timestamp": 1572529297
    },
    {
        "content": "<p><code>src/test/incremental/delayed_span_bug.rs</code> maybe?</p>",
        "id": 179532126,
        "sender_full_name": "mw",
        "timestamp": 1572529510
    },
    {
        "content": "<p>Also the <code>//~ ERROR</code> annotation won't work with an ICE won't it ? I'll need to manually specify stderr ? (Not very fluent with tests)</p>",
        "id": 179532710,
        "sender_full_name": "traxys",
        "timestamp": 1572529943
    },
    {
        "content": "<p>there should be some ICE tests already, probably added by <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> to test some CTFE-related edge cases</p>",
        "id": 179534440,
        "sender_full_name": "eddyb",
        "timestamp": 1572531052
    },
    {
        "content": "<p>just grep for part of the ICE message (some part that always shows up) in <code>src/test/ui</code></p>",
        "id": 179534483,
        "sender_full_name": "eddyb",
        "timestamp": 1572531087
    },
    {
        "content": "<p>the only tests that match <code>stderr</code> are the <code>ui</code> tests ? So I should just check for any error in both passes in <code>incremental</code> ?</p>",
        "id": 179536045,
        "sender_full_name": "traxys",
        "timestamp": 1572532026
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// revisions: cfail1 fail2</span>\n<span class=\"c1\">// rustc-env:RUST_BACKTRACE=0</span>\n<span class=\"c1\">// failure-status: 101</span>\n<span class=\"c1\">// should-fail</span>\n\n<span class=\"cp\">#![feature(rustc_attrs)]</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[rustc_error(delay_span_bug)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This is my test so far, but the problem is that is passes on a branch where the issue is not fixed, as though the incremental state is not saved<br>\nShould I pass a flag <code>-Cincremental=foo</code> ?</p>",
        "id": 179536744,
        "sender_full_name": "traxys",
        "timestamp": 1572532486
    },
    {
        "content": "<p>oh huh I didn't think about incremental vs UI</p>",
        "id": 179536891,
        "sender_full_name": "eddyb",
        "timestamp": 1572532564
    },
    {
        "content": "<p>I think the problem here is that <code>should-fail</code> does not check that both revision fail, only the first one</p>",
        "id": 179537888,
        "sender_full_name": "traxys",
        "timestamp": 1572533215
    },
    {
        "content": "<p>I see a lot of <code>rustc_partition_reused</code>, is it needed ?</p>",
        "id": 179538696,
        "sender_full_name": "traxys",
        "timestamp": 1572533671
    },
    {
        "content": "<p>I checked the code for <code>cfail</code>, and it checks that there was no panic, should I add a header to disable this check ?</p>",
        "id": 179577491,
        "sender_full_name": "traxys",
        "timestamp": 1572556523
    },
    {
        "content": "<p>After looking at the doc and code of compiletest I really see no other way than to add either a revision kind <code>cice</code> or a flag along the lines of <code>// expect-ice</code></p>",
        "id": 179630257,
        "sender_full_name": "traxys",
        "timestamp": 1572618394
    },
    {
        "content": "<p>hmm. You cannot use <code>error-pattern</code> here?</p>",
        "id": 179630403,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618497
    },
    {
        "content": "<p>that is sort of our catch-all when you cannot make a nice UI test...</p>",
        "id": 179630429,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572618528
    },
    {
        "content": "<p>I'll look I'm very unfamilliar with the test harness</p>",
        "id": 179631528,
        "sender_full_name": "traxys",
        "timestamp": 1572619280
    },
    {
        "content": "<p>(Because it is not a UI but incremental test)</p>",
        "id": 179631694,
        "sender_full_name": "traxys",
        "timestamp": 1572619437
    },
    {
        "content": "<p>The problem I have I think is this function</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">run_cfail_test</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">proc_res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">compile_test</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">check_if_test_should_compile</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">proc_res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">check_no_compiler_crash</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">proc_res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">...</span><span class=\"w\"></span>\n</pre></div>",
        "id": 179632054,
        "sender_full_name": "traxys",
        "timestamp": 1572619674
    },
    {
        "content": "<p>ah, and this is definitely a compiler \"crash\"</p>",
        "id": 179632168,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572619713
    },
    {
        "content": "<p>Yes</p>",
        "id": 179632174,
        "sender_full_name": "traxys",
        "timestamp": 1572619720
    },
    {
        "content": "<p>So I would think I would need a way to disable a part of the check if a certain header is present</p>",
        "id": 179632227,
        "sender_full_name": "traxys",
        "timestamp": 1572619781
    },
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"237671\">@traxys</span></p>",
        "id": 179632262,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572619803
    },
    {
        "content": "<p>i think <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> suggested yesterday that we might want to land the effect of your PR <em>without</em> a test</p>",
        "id": 179632320,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572619824
    },
    {
        "content": "<p>because the change is important enough that we may not want to delay on resolving the questions surrounding how to test it properly</p>",
        "id": 179632345,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572619849
    },
    {
        "content": "<p>Yes, so I should put the commits for creating the test in another PR ?</p>",
        "id": 179632388,
        "sender_full_name": "traxys",
        "timestamp": 1572619887
    },
    {
        "content": "<p>And let this one be merged ?</p>",
        "id": 179632410,
        "sender_full_name": "traxys",
        "timestamp": 1572619904
    },
    {
        "content": "<p>(the bug fix)</p>",
        "id": 179632417,
        "sender_full_name": "traxys",
        "timestamp": 1572619910
    },
    {
        "content": "<p>I think so. <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> , did I summarize your viewpoint accurately?</p>",
        "id": 179632477,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572619938
    },
    {
        "content": "<p>yeah, we can land the very tiny fix even if we have no way to test it</p>",
        "id": 179632552,
        "sender_full_name": "eddyb",
        "timestamp": 1572620007
    },
    {
        "content": "<p>How do I revert properly the test commits on the PR ? with a local git revert and then rebase ?</p>",
        "id": 179632680,
        "sender_full_name": "traxys",
        "timestamp": 1572620098
    },
    {
        "content": "<p>testing around ICEs is cool/interesting in general, but I doubt it's as important</p>",
        "id": 179632694,
        "sender_full_name": "eddyb",
        "timestamp": 1572620109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"237671\">@traxys</span> it's simpler than that</p>",
        "id": 179632705,
        "sender_full_name": "eddyb",
        "timestamp": 1572620119
    },
    {
        "content": "<p>you can <code>git checkout some-commit-hash -b new-branch-name</code></p>",
        "id": 179632711,
        "sender_full_name": "eddyb",
        "timestamp": 1572620135
    },
    {
        "content": "<p>The commit hash being the place I want the PR to be at ?</p>",
        "id": 179632825,
        "sender_full_name": "traxys",
        "timestamp": 1572620196
    },
    {
        "content": "<p>or <code>git checkout HEAD~15 -b new-branch-name</code> if you want to make a new branch without the last 15 commits in it</p>",
        "id": 179632826,
        "sender_full_name": "eddyb",
        "timestamp": 1572620197
    },
    {
        "content": "<p>Ok so I need to switch the PR from one branch to another ?</p>",
        "id": 179632859,
        "sender_full_name": "traxys",
        "timestamp": 1572620225
    },
    {
        "content": "<p>wait, do you want to make a new PR without the test changes, or do you want the current one to not have the test changes?</p>",
        "id": 179632861,
        "sender_full_name": "eddyb",
        "timestamp": 1572620226
    },
    {
        "content": "<p>The second one I would think, but I could leave them in and wait for the PR to be merged to implement the rest of the test</p>",
        "id": 179632907,
        "sender_full_name": "traxys",
        "timestamp": 1572620266
    },
    {
        "content": "<p>you can also do <code>git branch new-branch-name</code> to save the current branch to a new name, and then you can do whatever you want with the current branch</p>",
        "id": 179632969,
        "sender_full_name": "eddyb",
        "timestamp": 1572620290
    },
    {
        "content": "<p>oh, since you mentioned revert+rebase: there's a simpler way to do that thing too: in the file <code>git rebase -i</code> opens up you can just remove some of the <code>pick</code> lines</p>",
        "id": 179633010,
        "sender_full_name": "eddyb",
        "timestamp": 1572620336
    },
    {
        "content": "<p>(or comment them out I think?)</p>",
        "id": 179633017,
        "sender_full_name": "eddyb",
        "timestamp": 1572620343
    },
    {
        "content": "<p>and that will mean those commits will be gone after the rebase</p>",
        "id": 179633050,
        "sender_full_name": "eddyb",
        "timestamp": 1572620374
    },
    {
        "content": "<p>sorry for offering several options, and I didn't even mention <code>git reset</code> :P</p>",
        "id": 179633062,
        "sender_full_name": "eddyb",
        "timestamp": 1572620390
    },
    {
        "content": "<p><code>git reset --hard</code>, even ...</p>",
        "id": 179633121,
        "sender_full_name": "pnkfelix",
        "timestamp": 1572620409
    },
    {
        "content": "<p>(<code>git</code> is really bad at having one single good way to do any one common task, sadly)</p>",
        "id": 179633122,
        "sender_full_name": "eddyb",
        "timestamp": 1572620409
    },
    {
        "content": "<p>I never worked with a large project on git so I never had to use those options before x)</p>",
        "id": 179633155,
        "sender_full_name": "traxys",
        "timestamp": 1572620434
    },
    {
        "content": "<p>I removed the changes for the test and put them in another branch, <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> suggested that the fix is good</p>",
        "id": 179633766,
        "sender_full_name": "traxys",
        "timestamp": 1572620855
    },
    {
        "content": "<p>testing it by hand on that one ICE that's not fixed yet (or any others that might be hinted at in <code>src/test/ui</code>), should be good</p>",
        "id": 179634083,
        "sender_full_name": "eddyb",
        "timestamp": 1572621068
    },
    {
        "content": "<p>So for creating the test should I add a flag to disable the panic test ? like <code>// should-ice</code> ?</p>",
        "id": 179654448,
        "sender_full_name": "traxys",
        "timestamp": 1572634791
    },
    {
        "content": "<p>or <code> // error-as-ice</code> ?</p>",
        "id": 179654521,
        "sender_full_name": "traxys",
        "timestamp": 1572634814
    }
]