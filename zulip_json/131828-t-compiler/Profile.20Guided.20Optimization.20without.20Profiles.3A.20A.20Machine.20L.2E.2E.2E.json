[
    {
        "content": "<p>This paper was published to arxiv a couple of week ago: <a href=\"https://arxiv.org/abs/2112.14679\">https://arxiv.org/abs/2112.14679</a> It uses machine learning instead of profiling to estimate branch probabilities for PGO. Could we try it on rustc? If it doesn't regress runtime performance this may save CI time by avoiding the need to run rustc on several programs to gather profiles. I don't know if it is possible out of the box, but maybe it could even avoid having to compile rustc twice. Instead adding an llvm pass that runs this system to insert the branch probabilities before PGO runs.</p>",
        "id": 266635882,
        "sender_full_name": "bjorn3",
        "timestamp": 1641161947
    },
    {
        "content": "<p>Wait, does Rust use PGO profiles to build rustc releases? Are those profiles available for those that compile their own rustc?</p>",
        "id": 266638237,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1641165460
    },
    {
        "content": "<p>In theory yes, though I don't think we've ever checked or verified they're actually usable locally - they are uploaded though.</p>",
        "id": 266639010,
        "sender_full_name": "simulacrum",
        "timestamp": 1641166657
    },
    {
        "content": "<p>(both for the llvm and rustc builds)</p>",
        "id": 266639013,
        "sender_full_name": "simulacrum",
        "timestamp": 1641166667
    },
    {
        "content": "<p>Just on x86_64-unknown-linux-gnu currently.</p>",
        "id": 266639053,
        "sender_full_name": "simulacrum",
        "timestamp": 1641166684
    },
    {
        "content": "<p>Any chance you could point me to where?</p>",
        "id": 266639281,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1641167067
    },
    {
        "content": "<p>Yeah, in a bit</p>",
        "id": 266639383,
        "sender_full_name": "simulacrum",
        "timestamp": 1641167223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"435059\">@Ben Reeves</span> <a href=\"https://static.rust-lang.org/dist/2021-10-10/reproducible-artifacts-nightly-x86_64-unknown-linux-gnu.tar.xz\">https://static.rust-lang.org/dist/2021-10-10/reproducible-artifacts-nightly-x86_64-unknown-linux-gnu.tar.xz</a> for example for nightlies</p>",
        "id": 266639533,
        "sender_full_name": "simulacrum",
        "timestamp": 1641167499
    },
    {
        "content": "<p>should be at <a href=\"http://ci-artifacts.rust-lang.org/rustc-builds/$commit_hash/reproducible-artifacts-nightly-x86_64-unknown-linux-gnu.tar.xz\">ci-artifacts.rust-lang.org/rustc-builds/$commit_hash/reproducible-artifacts-nightly-x86_64-unknown-linux-gnu.tar.xz</a> for by-commit artifacts, though those are only kept for ~180 days</p>",
        "id": 266639620,
        "sender_full_name": "simulacrum",
        "timestamp": 1641167605
    },
    {
        "content": "<p>Sorry for continuing to hijack this thread, but where can I find out the \"test suite\" used to generate those PGO profiles? Is it just like a crater run, compiling a bunch of Rust code from GitHub?</p>\n<p>I ask because I'm contemplating trying to use them for compiling our fork of rustc at work, so it'd be useful to know what the dataset is and therefore if the PGO profile is maybe not general enough</p>",
        "id": 266736962,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1641244158
    },
    {
        "content": "<p>this should help: <a href=\"https://github.com/rust-lang/rust/blob/master/src/ci/pgo.sh\">https://github.com/rust-lang/rust/blob/master/src/ci/pgo.sh</a></p>",
        "id": 266737709,
        "sender_full_name": "lqd",
        "timestamp": 1641244613
    },
    {
        "content": "<p>Yeah, that's the place. It's not very solidly put together, but in practice seems to see good wins on the ~many benchmarks in perf.rlo beyond those added into the PGO data directly, so it seems fairly ok</p>",
        "id": 266741064,
        "sender_full_name": "simulacrum",
        "timestamp": 1641246855
    }
]