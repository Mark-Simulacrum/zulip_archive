[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> is there a chance I got it wrong and the unstable fingerprints error is actually in 1.52?</p>",
        "id": 237713386,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328315
    },
    {
        "content": "<p>we're seeing a few bug reports that suggest that</p>",
        "id": 237713395,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328322
    },
    {
        "content": "<p>I guess I should go track down the PR that added it</p>",
        "id": 237713436,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328328
    },
    {
        "content": "<p>it definitely is, yeah</p>",
        "id": 237713543,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620328388
    },
    {
        "content": "<p>I ran into it on my second <code>cargo build</code> on 1.52.0</p>",
        "id": 237713562,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620328402
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/83007\">https://github.com/rust-lang/rust/pull/83007</a></p>",
        "id": 237713579,
        "sender_full_name": "lqd",
        "timestamp": 1620328414
    },
    {
        "content": "<p>hmm</p>",
        "id": 237713605,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328428
    },
    {
        "content": "<p>well</p>",
        "id": 237713612,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328431
    },
    {
        "content": "<p>oops</p>",
        "id": 237713615,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328434
    },
    {
        "content": "<p>I can't reproduce the <code>syn</code> crash on 1.52.0 for some reason</p>",
        "id": 237713617,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620328434
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span></p>",
        "id": 237713639,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328443
    },
    {
        "content": "<p>but yeah, it looks like the PR itself is in 1.52.0 :/</p>",
        "id": 237713681,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620328455
    },
    {
        "content": "<p>I guess we might want to fast-track the 'nice error message' PR and then do a point release perhaps?</p>",
        "id": 237713709,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328467
    },
    {
        "content": "<p>gah</p>",
        "id": 237713732,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1620328483
    },
    {
        "content": "<p>will it be possible to disable the ICH verification somehow?</p>",
        "id": 237713750,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620328491
    },
    {
        "content": "<p>we don't want to do that, this is finding real bugs in incremental</p>",
        "id": 237713777,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328502
    },
    {
        "content": "<p>I'm strongly opposed to doing that</p>",
        "id": 237713789,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620328508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I'd say let's shoot for a point release next thu?</p>",
        "id": 237713792,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1620328510
    },
    {
        "content": "<p>there was already one miscompilation due to the lack of this option</p>",
        "id": 237713807,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620328518
    },
    {
        "content": "<p>and we were really lucky to find that one</p>",
        "id": 237713818,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620328522
    },
    {
        "content": "<p>if we disabled it, people would likely get occasional weird results, run <code>cargo clean</code>, and then never report anything</p>",
        "id": 237713865,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620328542
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237713792\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> I'd say let's shoot for a point release next thu?</p>\n</blockquote>\n<p>yeah, I mean, it's just a better error, not anything truly ground breaking, but I think that sounds right</p>",
        "id": 237713894,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328556
    },
    {
        "content": "<p>I'm going to try to minimize the <code>evaluate_obligation</code> issue further, so that we can hopefully get an actual fix soon</p>",
        "id": 237714065,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620328622
    },
    {
        "content": "<p>so that it doesn't keep lingering across future releases</p>",
        "id": 237714076,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620328628
    },
    {
        "content": "<p>yeah, I mean, ultimately the bug isn't new</p>",
        "id": 237714131,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328656
    },
    {
        "content": "<p>so I think it's still \"right\"</p>",
        "id": 237714152,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328664
    },
    {
        "content": "<p>just pretty unfortunate</p>",
        "id": 237714157,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328667
    },
    {
        "content": "<p>yeah - a lot of people have been hitting it</p>",
        "id": 237714179,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620328676
    },
    {
        "content": "<p>for the stable point release we'll probably want to backport any fixes we do have in hand, and the diagnostic fix</p>",
        "id": 237714815,
        "sender_full_name": "simulacrum",
        "timestamp": 1620328927
    },
    {
        "content": "<p>do you remember if the <code>evaluate_obligation</code> issue that chalk hit in <a href=\"https://github.com/rust-lang/rust/issues/83115\">#83115</a> (and which we can probably close) and was fixed in <a href=\"https://github.com/rust-lang/rust/issues/83220\">#83220</a> for 1.53 is the same as the one that syn hits ? could the fix have caused this new one, hence why it doesn't reproduce on 1.52 ?</p>",
        "id": 237714828,
        "sender_full_name": "lqd",
        "timestamp": 1620328933
    },
    {
        "content": "<p>It's definitely a different issue</p>",
        "id": 237715112,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620329079
    },
    {
        "content": "<p>I don't <em>think</em> the fix could have caused the syn issue</p>",
        "id": 237715123,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620329090
    },
    {
        "content": "<p>but I'm not 100% certain</p>",
        "id": 237715131,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620329093
    },
    {
        "content": "<p>and it's super hard to analyze without minimization</p>",
        "id": 237715602,
        "sender_full_name": "lqd",
        "timestamp": 1620329298
    },
    {
        "content": "<p>I've been making progress on the <code>syn</code> crate</p>",
        "id": 237715708,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620329366
    },
    {
        "content": "<p>I may have a nicer example later today</p>",
        "id": 237715720,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620329372
    },
    {
        "content": "<p>let us know if/how we can help</p>",
        "id": 237716426,
        "sender_full_name": "lqd",
        "timestamp": 1620329664
    },
    {
        "content": "<p>I'll nominate <a href=\"https://github.com/rust-lang/rust/issues/83220\">#83220</a> for stable backport then, since I'm hitting the chalk issue on almost every build while working on rust-analyzer</p>",
        "id": 237719918,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620331334
    },
    {
        "content": "<p>Ugh, someone just hit the <code>predicates_of</code> issue on stable: <a href=\"https://github.com/rust-lang/rust/issues/85004\">https://github.com/rust-lang/rust/issues/85004</a></p>",
        "id": 237742077,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341204
    },
    {
        "content": "<p>The fix in <a href=\"https://github.com/rust-lang/rust/pull/84233\">https://github.com/rust-lang/rust/pull/84233</a> only landed a week ago</p>",
        "id": 237742088,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341214
    },
    {
        "content": "<p>Wow, there's <em>another</em> case: <a href=\"https://github.com/rust-lang/rust/issues/85010\">https://github.com/rust-lang/rust/issues/85010</a></p>",
        "id": 237742211,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341288
    },
    {
        "content": "<p>this is going to be a bad release for incr comp :/</p>",
        "id": 237742290,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341363
    },
    {
        "content": "<p>I think we should make a blog post about this</p>",
        "id": 237742485,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341506
    },
    {
        "content": "<p>I think that's a good idea</p>",
        "id": 237742544,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341526
    },
    {
        "content": "<p>I'm happy to review one, probably won't have time to work on one tonight - we can publish tomorrow though</p>",
        "id": 237742620,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> do you have a read on whether if we waited, say, 2 weeks we'd have a full set of fixes? I'm interested in seeing if there's mitigations we can deploy safely, e.g. marking all known queries with problems to not be cached on disk</p>",
        "id": 237742742,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341658
    },
    {
        "content": "<p>This only affects queries that <em>aren't</em> cached on disk</p>",
        "id": 237742762,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341684
    },
    {
        "content": "<p>I think a performance hit may not be terrible for now at least</p>",
        "id": 237742763,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341685
    },
    {
        "content": "<p>What we could do is mark them as <code>eval_always</code></p>",
        "id": 237742799,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341711
    },
    {
        "content": "<p>Ah that was it</p>",
        "id": 237742812,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341720
    },
    {
        "content": "<p>unfortunately, the performance hit for <code>evaluate_obligation</code> was awful</p>",
        "id": 237742817,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341721
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/84280\">https://github.com/rust-lang/rust/pull/84280</a></p>",
        "id": 237742821,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341725
    },
    {
        "content": "<p>and that's one of the tricky issues</p>",
        "id": 237742865,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341756
    },
    {
        "content": "<p>Hmm</p>",
        "id": 237742922,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341774
    },
    {
        "content": "<p>I didn't dig too deeply into why the performance was so bad</p>",
        "id": 237742925,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341776
    },
    {
        "content": "<p>what I suspect is that we have a long query chain</p>",
        "id": 237742942,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341784
    },
    {
        "content": "<p><code>evaliate_obligation</code> -&gt; <code>query_a</code> -&gt; <code>query_b</code></p>",
        "id": 237742956,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341795
    },
    {
        "content": "<p>Yeah that does seem pretty bad - basically we could just disable incremental</p>",
        "id": 237742964,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341803
    },
    {
        "content": "<p>where some of the queries in that chain are also not cached on disk</p>",
        "id": 237742965,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341804
    },
    {
        "content": "<p>normally, everything is green, so we don't have to do anything</p>",
        "id": 237742978,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341815
    },
    {
        "content": "<p>but with <code>eval_always</code>, we actually need the inputs to the query available</p>",
        "id": 237742987,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341824
    },
    {
        "content": "<p>so we have to actually compute a bunch of non-cached queries that we could have skipped</p>",
        "id": 237743009,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341842
    },
    {
        "content": "<p>Mhm</p>",
        "id": 237743019,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341853
    },
    {
        "content": "<p>since so many people are hitting this, I have to wonder how many miscompilations have been caused by hidden incr comp bugs</p>",
        "id": 237743038,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341869
    },
    {
        "content": "<p>other than the one we know about</p>",
        "id": 237743048,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341878
    },
    {
        "content": "<p>It's off by default in release mode, right?</p>",
        "id": 237743093,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341888
    },
    {
        "content": "<p>So probably not too many into production at least</p>",
        "id": 237743114,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341896
    },
    {
        "content": "<p>Unless this affects disabled incr too?</p>",
        "id": 237743128,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341909
    },
    {
        "content": "<p>no, only incr enabled</p>",
        "id": 237743147,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620341920
    },
    {
        "content": "<p>Ok, yeah</p>",
        "id": 237743165,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341930
    },
    {
        "content": "<p>I was debating earlier today if we should just disable it</p>",
        "id": 237743174,
        "sender_full_name": "simulacrum",
        "timestamp": 1620341939
    },
    {
        "content": "<p>Maybe only disable it for stable releases? Then we still get feedback on whether the fixes work</p>",
        "id": 237744218,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620342507
    },
    {
        "content": "<p>The perf hit is a shame but better than ICEs everywhere :/</p>",
        "id": 237744255,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620342534
    },
    {
        "content": "<p>Hmm actually I think it would be better to only disable it by default, which I think is a cargo change and not rustc</p>",
        "id": 237744307,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620342588
    },
    {
        "content": "<p>I think writing a blog post is a good idea. I assume the target here would be the main Rust blog, <em>not</em> “Inside Rust”, right?</p>",
        "id": 237821981,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620393996
    },
    {
        "content": "<p>I think so, yes</p>",
        "id": 237822061,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394026
    },
    {
        "content": "<p>I'm not yet sure what message we want to send</p>",
        "id": 237822077,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394033
    },
    {
        "content": "<p>In particular, if we opt to disable incremental in a point release, that would be something we should say</p>",
        "id": 237822157,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394075
    },
    {
        "content": "<p>but I don't know yet whether I feel that's the right solution</p>",
        "id": 237822237,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394089
    },
    {
        "content": "<p>It's definitely true that <em>many</em> people are hitting the bugs here</p>",
        "id": 237822263,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394100
    },
    {
        "content": "<p>(which is worrying, given their soundness implications)</p>",
        "id": 237822282,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394108
    },
    {
        "content": "<p>Well, we’re operating on the assumption that one only hit the soundness issues when doing incremental, which means (if you’re not opting into explicitly) then only in debug builds, right?</p>",
        "id": 237822352,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394146
    },
    {
        "content": "<p>(that was the same point you made up above, no?)</p>",
        "id": 237822397,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394161
    },
    {
        "content": "<p>Sure, I mean, I don't think it means we're likely to ship broken code</p>",
        "id": 237822400,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394162
    },
    {
        "content": "<p>And that's probably worth saying</p>",
        "id": 237822442,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394179
    },
    {
        "content": "<p>So we probably <em>should</em> decide whether we are going to turn off incremental by default or not</p>",
        "id": 237822545,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394209
    },
    {
        "content": "<p>before trying to write the post</p>",
        "id": 237822557,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394214
    },
    {
        "content": "<p>I mean, I could try to write a post where the language works  regardless of that choice</p>",
        "id": 237822599,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394228
    },
    {
        "content": "<p>(In case its not clear, I am willing to have a go at writing the post here.)</p>",
        "id": 237822636,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394243
    },
    {
        "content": "<p>yeah... I think it'd be stronger if we just come right out and a) admit the bug b) indicate that we do not believe it affects release builds, unless users have explicitly opt'd in to incremental c) immediately indicate what you can do to prevent ICEs locally, pending the point release - that is, CARGO_INCREMENTAL=0 I believe and d) suggest a timeline on the point release, currently aiming for Thursday next week</p>",
        "id": 237822828,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394322
    },
    {
        "content": "<p>And I think I'm increasingly feeling that we should just disable incremental</p>",
        "id": 237822904,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394341
    },
    {
        "content": "<p>Oh, one other thing we should definitely include - \"Why should users not stay on 1.51?\"</p>",
        "id": 237822940,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394358
    },
    {
        "content": "<p>Okay. Let me get started using those bullets as a baseline</p>",
        "id": 237822981,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394384
    },
    {
        "content": "<p>(obviously feel free to push back on any of those, they're just my intuition, no strong feeling)</p>",
        "id": 237823050,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394400
    },
    {
        "content": "<p>Its hard to know whether to disable incremental</p>",
        "id": 237823110,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394425
    },
    {
        "content": "<p>when you say that, do you mean not even allow someone to opt into using it?</p>",
        "id": 237823138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394442
    },
    {
        "content": "<p>(which I really assume means, force someone to pass <code>-Z unstable-features</code> or whatever to get access to it, since we obviously want to be able to opt-into using it on nightly)</p>",
        "id": 237823272,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394484
    },
    {
        "content": "<p>I mean just by default</p>",
        "id": 237823285,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394491
    },
    {
        "content": "<p>i.e., cargo defaults change</p>",
        "id": 237823309,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394502
    },
    {
        "content": "<p>Okay. I have mixed feelings there</p>",
        "id": 237823334,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394507
    },
    {
        "content": "<p>We don’t have good way to measure harm that would cause vs how many issues it would resolve</p>",
        "id": 237823396,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394533
    },
    {
        "content": "<p>I am also not sure - we could go harder, and basically hard disable without some -Z flag (but perhaps silently, so as to not break buidls)</p>",
        "id": 237823413,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394538
    },
    {
        "content": "<p>It would mostly \"only\" make builds slower</p>",
        "id": 237823447,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394554
    },
    {
        "content": "<p>right</p>",
        "id": 237823460,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394559
    },
    {
        "content": "<p>and the pain of having to <code>cargo clean</code> or whatever in response to the ICE, that’s not a good UX</p>",
        "id": 237823529,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394580
    },
    {
        "content": "<p>by our benchmarks, roughly 2-2.5x slower</p>",
        "id": 237823534,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394582
    },
    {
        "content": "<p>in the \"happy\" incremental case, at least</p>",
        "id": 237823571,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394597
    },
    {
        "content": "<p>obviously incremental is sometimes not faster</p>",
        "id": 237823588,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394604
    },
    {
        "content": "<p>but on the other hand, we’re getting real data right now about where its broken. :)</p>",
        "id": 237823603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394613
    },
    {
        "content": "<p>Maybe the answer is the turn it off by default</p>",
        "id": 237823626,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394626
    },
    {
        "content": "<p>hm, yeah, I don't know how much that data is exposing <em>new</em> bugs, though</p>",
        "id": 237823640,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394630
    },
    {
        "content": "<p>and focus some real effort on making it easier to turn a ICE into a usable bug report</p>",
        "id": 237823660,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394641
    },
    {
        "content": "<p>the ideal would be to be able to continue working after detecting it, but I don't know if that's possible</p>",
        "id": 237823689,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394652
    },
    {
        "content": "<p>I think no</p>",
        "id": 237823707,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394656
    },
    {
        "content": "<p>(i.e. stashing source artifacts and making it nearly trivial for users to upload the diff that exposes teh bug)</p>",
        "id": 237823721,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394663
    },
    {
        "content": "<p>because without that in place, these bug reports don’t necessarily help us all that much</p>",
        "id": 237823804,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394687
    },
    {
        "content": "<p>Right?</p>",
        "id": 237823809,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394688
    },
    {
        "content": "<p>hm</p>",
        "id": 237823833,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> might be able to say more</p>",
        "id": 237823841,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394706
    },
    {
        "content": "<p>My impression is we're not seeing too many <em>new</em> bug reports</p>",
        "id": 237823858,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394713
    },
    {
        "content": "<p>Right, I’m just saying: <em>If</em> we disable incremental now</p>",
        "id": 237823905,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394737
    },
    {
        "content": "<p>what the the criteria we’d use for re-enabling?</p>",
        "id": 237823920,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394745
    },
    {
        "content": "<p>One easy answer is “When all the known bugs are fixed\"</p>",
        "id": 237823957,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394759
    },
    {
        "content": "<p>and I’m suggesting that might not be good enough</p>",
        "id": 237823969,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394764
    },
    {
        "content": "<p>fixing the known bugs? We have a list</p>",
        "id": 237823983,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394772
    },
    {
        "content": "<p>yeah</p>",
        "id": 237823993,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394778
    },
    {
        "content": "<p>I guess, I feel like we're not actually seeing that many new ones</p>",
        "id": 237824011,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394787
    },
    {
        "content": "<p>most of them look like they're hitting the same queries at least</p>",
        "id": 237824095,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394807
    },
    {
        "content": "<p>Hmm, this one <a href=\"https://github.com/rust-lang/rust/issues/85019\">#85019</a> panicked while trying to print the query stack. That’s unfortunate.</p>",
        "id": 237824220,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394849
    },
    {
        "content": "<p>Anyway, if a point release won’t happen until next week at the earliest, at least based on this bug alone, then I feel like I can write a blog post right now</p>",
        "id": 237824321,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394891
    },
    {
        "content": "<p>without waiting for too many details on that decision</p>",
        "id": 237824354,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394901
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/84970#issuecomment-833180651\">https://github.com/rust-lang/rust/issues/84970#issuecomment-833180651</a> has the list fwiw</p>",
        "id": 237824396,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394918
    },
    {
        "content": "<p>item children is on it, so my guess is we know about the <a href=\"https://github.com/rust-lang/rust/issues/85019\">#85019</a> cause</p>",
        "id": 237824452,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394930
    },
    {
        "content": "<p>We'll probably need to make a decision today or by tuesday EOD roughly on what we do for the release, it's still not clear</p>",
        "id": 237824540,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394963
    },
    {
        "content": "<p>I also don't really know <em>who</em> should be involved in that</p>",
        "id": 237824562,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394969
    },
    {
        "content": "<p>(or how we make such a decision)</p>",
        "id": 237824585,
        "sender_full_name": "simulacrum",
        "timestamp": 1620394978
    },
    {
        "content": "<p>At the very least, I want <span class=\"user-group-mention\" data-user-group-id=\"3282\">@wg-incr-comp</span> to be aware of this conversation. ^</p>",
        "id": 237824620,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620394991
    },
    {
        "content": "<p>So after taking a breath and thinking about it</p>",
        "id": 237824777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395047
    },
    {
        "content": "<p>I’m trying to imagine the worst case scenario for turning off incremental by default (which, again, to my knowledge will only affect debug builds)</p>",
        "id": 237824826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395068
    },
    {
        "content": "<p>like you said, if the time impact is 2x - 2.5x</p>",
        "id": 237824856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395086
    },
    {
        "content": "<p>debug and check builds, by default</p>",
        "id": 237824888,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395101
    },
    {
        "content": "<p>then at <em>worst</em>, people will report “compile times got slower\"</p>",
        "id": 237824894,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395103
    },
    {
        "content": "<p>(will they potentially see an uptick in memory usage? It would correspond to whatever they get from a clean build; I cannot see that being a big source of complaints <em>in this context</em>, compared to the time issues.)</p>",
        "id": 237824989,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395137
    },
    {
        "content": "<p>and really, that will give us data too, I think</p>",
        "id": 237825060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395164
    },
    {
        "content": "<p>hmmm yeah I suspect it's not a big deal, they <em>did</em> have a higher memory usage for the incremental full compile (i.e. on their first build)</p>",
        "id": 237825076,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395165
    },
    {
        "content": "<p>(i.e. if we see bug reports about the “compile times got slower”, that will give us data about harm done. Would I prefer to have this be provided instead via automatic telemetry? Yes. Yes I would. But I’ll accept whatever I can get.)</p>",
        "id": 237825195,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395211
    },
    {
        "content": "<p>Are you imagining the point release would <em>also</em> have the improved error messaging for the ICE?</p>",
        "id": 237825288,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395245
    },
    {
        "content": "<p>(so that people who <em>are</em> opting into incremental mode can get better feedback about what’s going on?)</p>",
        "id": 237825342,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395266
    },
    {
        "content": "<p>I think my expectation is we would:</p>\n<ul>\n<li>Improve error message</li>\n<li>Change cargo defaults to disable incremental</li>\n<li>Maybe also require a -Z flag or env variable that's not CARGO_INCREMENTAL, if we're saying 'it's actually quite broken and you probably <em>don't</em> want to opt in unless you're specifically testing'</li>\n</ul>",
        "id": 237825467,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395296
    },
    {
        "content": "<p>That’s the thing, I don’t know if I’d go that far as to say that its only for testing</p>",
        "id": 237825549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395325
    },
    {
        "content": "<p>I’d prefer an attitude more like “you should only do this if you’re prepared to have to manually <code>cargo clean</code> when this error arises…\"</p>",
        "id": 237825601,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395350
    },
    {
        "content": "<p>because at that point, what is harm of providing it?</p>",
        "id": 237825642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395369
    },
    {
        "content": "<p>yeah, maybe</p>",
        "id": 237825647,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395370
    },
    {
        "content": "<p>(as an opt-in option, i mean)</p>",
        "id": 237825670,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395379
    },
    {
        "content": "<p>I.. have a hard time imagining people wanting that</p>",
        "id": 237825674,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395382
    },
    {
        "content": "<p>but it's possible</p>",
        "id": 237825679,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395384
    },
    {
        "content": "<p>Really?</p>",
        "id": 237825684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395389
    },
    {
        "content": "<p>I guess it again depends on how often this error is arising</p>",
        "id": 237825776,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395413
    },
    {
        "content": "<p>people are reporting that in some cases it's pretty much on every build for them, plausibly because of in-the-background rust-analyzer builds</p>",
        "id": 237825787,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395417
    },
    {
        "content": "<p>hmm</p>",
        "id": 237825812,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395425
    },
    {
        "content": "<p>how prevalent that is, I don't know</p>",
        "id": 237825820,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395427
    },
    {
        "content": "<p>if you're working on a project where these bugs don't show up, it seems strange to <em>prevent</em> you from enabling incremental</p>",
        "id": 237825822,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620395427
    },
    {
        "content": "<p>(turning it off by default seems fine)</p>",
        "id": 237825867,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620395446
    },
    {
        "content": "<p>that could also count as a breaking change depending on how you want to look at it</p>",
        "id": 237825924,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620395470
    },
    {
        "content": "<p>well, \"prevent\" vs. \"require you to knowingly opt-in\"</p>",
        "id": 237825956,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395485
    },
    {
        "content": "<p>We can certainly give the new env variable name in the blog post, for example</p>",
        "id": 237825979,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395499
    },
    {
        "content": "<p>I'm responding to</p>\n<blockquote>\n<p>Maybe also require a -Z flag or env variable that's not CARGO_INCREMENTAL, if we're saying 'it's actually quite broken and you probably don't want to opt in unless you're specifically testing'</p>\n</blockquote>",
        "id": 237825982,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620395501
    },
    {
        "content": "<p>making that -Z on stable is the same as preventing you from using it</p>",
        "id": 237826011,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620395514
    },
    {
        "content": "<p>oh, sure, I mean I don't mean <em>destabilize</em> necessarily</p>",
        "id": 237826082,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395531
    },
    {
        "content": "<p>e.g., we could require CARGO_INCREMENTAL=reallyyes</p>",
        "id": 237826129,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395548
    },
    {
        "content": "<p>I see, you’re mostly thinking “we should require people to opt in with some marker that shows that they’ve read the fine print about the issues here” ?</p>",
        "id": 237826424,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395660
    },
    {
        "content": "<p>sort of like how x.py is loud about new versions until you update the marker in config.toml</p>",
        "id": 237826486,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395680
    },
    {
        "content": "<p>Right, yeah - I guess if they don't hit the bug, maybe you don't actually care</p>",
        "id": 237826510,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395694
    },
    {
        "content": "<p>and the error message would additionally tell you how to <em>optout</em></p>",
        "id": 237826567,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395709
    },
    {
        "content": "<p>I think if the diagnostic is written properly, that level of opting-in should not be necessary</p>",
        "id": 237826586,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395715
    },
    {
        "content": "<p>Yeah I think that's true</p>",
        "id": 237826654,
        "sender_full_name": "simulacrum",
        "timestamp": 1620395738
    },
    {
        "content": "<p>there are some people who are (or were) very involved with incr-comp yet are not on wg-incr-comp</p>",
        "id": 237827169,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620395944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237827169\">said</a>:</p>\n<blockquote>\n<p>there are some people who are (or were) very involved with incr-comp yet are not on wg-incr-comp</p>\n</blockquote>\n<p>that seems like an issue in itself :/</p>",
        "id": 237827436,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620396046
    },
    {
        "content": "<p>so I’m going to try to CC them on the fly right now: <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> , <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> are the ones that most immediately come to mind</p>",
        "id": 237827462,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620396054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237827436\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237827169\">said</a>:</p>\n<blockquote>\n<p>there are some people who are (or were) very involved with incr-comp yet are not on wg-incr-comp</p>\n</blockquote>\n<p>that seems like an issue in itself :/</p>\n</blockquote>\n<p>yes I know</p>",
        "id": 237827482,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620396060
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237827169\">said</a>:</p>\n<blockquote>\n<p>there are some people who are (or were) very involved with incr-comp yet are not on wg-incr-comp</p>\n</blockquote>\n<p>also <span class=\"user-mention\" data-user-id=\"281739\">@oliver</span></p>",
        "id": 237827692,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620396138
    },
    {
        "content": "<p>fwiw there are definitely cases of people reverting to 1.51 to fix this - <a href=\"https://github.com/influxdata/influxdb_iox/pull/1449\">https://github.com/influxdata/influxdb_iox/pull/1449</a></p>",
        "id": 237829563,
        "sender_full_name": "simulacrum",
        "timestamp": 1620396836
    },
    {
        "content": "<p>which is kind of reasonable without knowing about the problems, but we should definitely address this and have a strong recommendation to not do that I think</p>",
        "id": 237829960,
        "sender_full_name": "simulacrum",
        "timestamp": 1620396983
    },
    {
        "content": "<p>or at least, not to do it once we have 1.52.1 out, right?</p>",
        "id": 237830718,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620397305
    },
    {
        "content": "<p>well, I mean, either way the right fix <em>right now</em> is IMO CARGO_INCREMENTAL=0 for most users</p>",
        "id": 237830825,
        "sender_full_name": "simulacrum",
        "timestamp": 1620397336
    },
    {
        "content": "<p>true</p>",
        "id": 237830837,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620397341
    },
    {
        "content": "<p>going back to 1.51 really just introduces silent bugs, seems 'worse'</p>",
        "id": 237830858,
        "sender_full_name": "simulacrum",
        "timestamp": 1620397349
    },
    {
        "content": "<p>If someone can figure out <em>how</em> to do <code>CARGO_INCREMENTAL=0</code> for their build setup, then yes, that’s absolutely better</p>",
        "id": 237831509,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620397614
    },
    {
        "content": "<p>I’m just saying that I can understand people taking the seemingly easier route</p>",
        "id": 237831538,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620397625
    },
    {
        "content": "<p>Oh for sure</p>",
        "id": 237831559,
        "sender_full_name": "simulacrum",
        "timestamp": 1620397633
    },
    {
        "content": "<p>especially without an explanation for what’s happening here.</p>",
        "id": 237831583,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620397648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> Silly question: The miscompilations that result from unstable fingerprints, those are always due to <em>collisions</em>, right? As in, the source code changed, but due to fingerprint instability, the changed code is accidentally mapped to the same fingerprint as an earlier build, and so we incorrectly reuse a build artifact from a previous  compile?</p>",
        "id": 237834146,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620398640
    },
    {
        "content": "<p>(And the above issue is different from the second kind of problem that I believe can result from unstable fingerprints is a <em>failure to reuse</em> incremental build products. I.e., cases where source artifact did <em>not</em> change, but fingerprint instability led to a miscategorization of that, and so we do more work in a rebuild.)</p>",
        "id": 237834411,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620398742
    },
    {
        "content": "<p>I think that's true, but I'm not sure.</p>",
        "id": 237834483,
        "sender_full_name": "simulacrum",
        "timestamp": 1620398765
    },
    {
        "content": "<p>The main reason why I pose these questions is that I, intuitively, would imagine that the first case is <strong>very</strong> rare, and the second case is what we were originally trying to catch with the ICH check</p>",
        "id": 237834551,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620398797
    },
    {
        "content": "<p>(and thus, I would actually expect the number of miscompilations to be quite small. We should obviously still advise people not to downgrade the compiler, but I also don’t want to scare people too much here.)</p>",
        "id": 237834625,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620398833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>  I’d love one of you to double-check my hypothesis  above.</p>",
        "id": 237834752,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620398881
    },
    {
        "content": "<p>let me try to catch up on the discussion so far</p>",
        "id": 237835318,
        "sender_full_name": "mw",
        "timestamp": 1620399109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> I think the dangerous case is when some query result changes but it's fingerprint does not change, thus making the tracking system think that it can re-use a cached value that should actually be re-computed</p>",
        "id": 237838866,
        "sender_full_name": "mw",
        "timestamp": 1620400417
    },
    {
        "content": "<p>“it’s fingerprint does not change” — is that not the same as a hash-collision?</p>",
        "id": 237839052,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400483
    },
    {
        "content": "<p>yes</p>",
        "id": 237839088,
        "sender_full_name": "mw",
        "timestamp": 1620400499
    },
    {
        "content": "<p>Or let me try again</p>",
        "id": 237839153,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400521
    },
    {
        "content": "<p>\"it's fingerprint does not change” — when that happens, there are two causes we tend to expect: 1. the hash function is skipping over state that it should be including, or 2. some part of the input is not stable from run-to-run, and thus causes a hash collision</p>",
        "id": 237839582,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400607
    },
    {
        "content": "<p>is <em>that</em> a correct statement?</p>",
        "id": 237839687,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400627
    },
    {
        "content": "<p>(1) is correct, (2) I'm not sure</p>",
        "id": 237839917,
        "sender_full_name": "mw",
        "timestamp": 1620400676
    },
    {
        "content": "<p>the input not being stable should lead to different hash values, but the probability of a collision should be just as small as ever, right?</p>",
        "id": 237840117,
        "sender_full_name": "mw",
        "timestamp": 1620400720
    },
    {
        "content": "<p>Yeah that’s the same reasoning I was applying above when I said “this should be very rare\"</p>",
        "id": 237840155,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400741
    },
    {
        "content": "<p>i.e. instability would lead to false positives rather than false negatives during change detection</p>",
        "id": 237840186,
        "sender_full_name": "mw",
        "timestamp": 1620400751
    },
    {
        "content": "<p>i.e. too much being recomputed rather than too little</p>",
        "id": 237840230,
        "sender_full_name": "mw",
        "timestamp": 1620400773
    },
    {
        "content": "<p>which is harmless</p>",
        "id": 237840244,
        "sender_full_name": "mw",
        "timestamp": 1620400780
    },
    {
        "content": "<p>(except for performance)</p>",
        "id": 237840258,
        "sender_full_name": "mw",
        "timestamp": 1620400791
    },
    {
        "content": "<p>wait, it can lead to either, but  the too littel case is expected to happen almost never, right?</p>",
        "id": 237840272,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400796
    },
    {
        "content": "<p>I want to try to be clear, at least in our conversation here, about things that are truly impossible versus having ~zero prob</p>",
        "id": 237840358,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400820
    },
    {
        "content": "<p>so I had thought this was provided as an example: <a href=\"https://github.com/rust-lang/rust/issues/82920#issuecomment-796476702\">https://github.com/rust-lang/rust/issues/82920#issuecomment-796476702</a></p>",
        "id": 237840439,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400851
    },
    {
        "content": "<p>of an instability that led to a hash collision that led to too little being recompiled.</p>",
        "id": 237840501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400873
    },
    {
        "content": "<p>a hash collision, whatever the cause, will lead to a false negative, i.e. something being re-used although it should be recomputed</p>",
        "id": 237840502,
        "sender_full_name": "mw",
        "timestamp": 1620400873
    },
    {
        "content": "<p>hmm</p>",
        "id": 237840517,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400884
    },
    {
        "content": "<p>okay</p>",
        "id": 237840524,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400889
    },
    {
        "content": "<p>the collision probability is very low (but not zero) if the inputs to the hash function are sound</p>",
        "id": 237840538,
        "sender_full_name": "mw",
        "timestamp": 1620400896
    },
    {
        "content": "<p>maybe I need to re-read <a href=\"https://github.com/rust-lang/rust/issues/82920\">#82920</a> more carefully</p>",
        "id": 237840561,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620400906
    },
    {
        "content": "<p>so there is always a non-zero but very small probability that incr. comp. misses a change</p>",
        "id": 237840652,
        "sender_full_name": "mw",
        "timestamp": 1620400930
    },
    {
        "content": "<p>but I have to say that I don't have a clear handle right now of what  exactly was going wrong in that miscompilation bug</p>",
        "id": 237840763,
        "sender_full_name": "mw",
        "timestamp": 1620400985
    },
    {
        "content": "<p>I think we're actually not including some state, so we're seeing \"very likely\" to collide, in some sense, right?</p>",
        "id": 237840831,
        "sender_full_name": "simulacrum",
        "timestamp": 1620401016
    },
    {
        "content": "<p>i.e., if we're just not hashing some input, and that input changes, we're guaranteed to collide</p>",
        "id": 237840854,
        "sender_full_name": "simulacrum",
        "timestamp": 1620401034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237840502\">said</a>:</p>\n<blockquote>\n<p>a hash collision, whatever the cause, will lead to a false negative, i.e. something being re-used although it should be recomputed</p>\n</blockquote>\n<p>Oh I misread this message. Your point here is that a false negative very well <em>could</em> yield a miscompilation</p>",
        "id": 237840955,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620401054
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> yes</p>",
        "id": 237841009,
        "sender_full_name": "mw",
        "timestamp": 1620401080
    },
    {
        "content": "<p>Maybe <a href=\"https://github.com/rust-lang/rust/issues/82920\">#82920</a> was caused by a variation of feeding something wrong to the hash function? i.e. we often sort things before stable-hashing so that the input is deterministic</p>",
        "id": 237841192,
        "sender_full_name": "mw",
        "timestamp": 1620401163
    },
    {
        "content": "<p>that is only valid for things where the order does not matter, like hash-sets or hash-maps</p>",
        "id": 237841273,
        "sender_full_name": "mw",
        "timestamp": 1620401186
    },
    {
        "content": "<p>I’m re-reading <a href=\"https://github.com/rust-lang/rust/issues/82920\">#82920</a> more carefully now</p>",
        "id": 237841329,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620401213
    },
    {
        "content": "<p>so is the point that the fingerprint computation was taking in a sorted list, but the sort function itself was based on a key that was derived from unstable state</p>",
        "id": 237841462,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620401281
    },
    {
        "content": "<p>but did that then lead to a hash collision =&gt; false negative =&gt; incorrect reuse =&gt; miscompilation?</p>",
        "id": 237841708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620401370
    },
    {
        "content": "<p>I think so, based on <a href=\"https://github.com/rust-lang/rust/issues/82920#issuecomment-797852633\">https://github.com/rust-lang/rust/issues/82920#issuecomment-797852633</a></p>",
        "id": 237841851,
        "sender_full_name": "simulacrum",
        "timestamp": 1620401413
    },
    {
        "content": "<p>and the point here is that a hash collision is not absurd to expect in a case like this, because we were not sound in our handling of the input?</p>",
        "id": 237841864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620401417
    },
    {
        "content": "<p>(I really do wish I had a better grip on the probabillty functions involved here.)</p>",
        "id": 237841917,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620401436
    },
    {
        "content": "<p>Anyway: Okay. I’ll go back to writing the blog post.</p>",
        "id": 237842056,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620401495
    },
    {
        "content": "<p>OK I think I understand what's going on now:</p>\n<ul>\n<li>the result of <code>super_predicates_that_define_assoc_type</code> depends on something that is not tracked by the tracking system (i.e. the numerical values of <code>DefId</code>s) -- so when another query that depends on it wants to check if its cache entry is still valid, the tracking system tells them: nothing has changed, go ahead and re-use your cached entry.</li>\n<li>but <code>super_predicates_that_define_assoc_type</code> itself is <em>not</em>  cached on disk so when we later need the actual result of that query, we have to re-compute it -- but re-computation will produce a different value than the one that has been hashed.</li>\n<li>in the end we are left with some value X loaded from disk that depended on  <code>super_predicates_that_define_assoc_type</code> to be in the original state, and then another value Y that will use the new value of <code>super_predicates_that_define_assoc_type</code>, thus creating a mismatch.</li>\n</ul>",
        "id": 237844841,
        "sender_full_name": "mw",
        "timestamp": 1620402496
    },
    {
        "content": "<p><code>-Zverify_incremental_ich</code> will help here because it will observe the value having changed unexpectedly</p>",
        "id": 237845078,
        "sender_full_name": "mw",
        "timestamp": 1620402596
    },
    {
        "content": "<p>does that help, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>?</p>",
        "id": 237845551,
        "sender_full_name": "mw",
        "timestamp": 1620402747
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237827692\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237827169\">said</a>:</p>\n<blockquote>\n<p>there are some people who are (or were) very involved with incr-comp yet are not on wg-incr-comp</p>\n</blockquote>\n<p>also <span class=\"user-mention silent\" data-user-id=\"281739\">oliver</span></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 237846411,
        "sender_full_name": "oliver",
        "timestamp": 1620403075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> The unstable fingerprint issues aren't caused by hash collisions</p>",
        "id": 237859154,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620407929
    },
    {
        "content": "<p>Here's what happens:</p>",
        "id": 237859192,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620407946
    },
    {
        "content": "<p>(Is mw’s summary above accurate?)</p>",
        "id": 237859272,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620407981
    },
    {
        "content": "<p>Yes</p>",
        "id": 237859407,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620408022
    },
    {
        "content": "<p>I haven't observed a miscompilation with any of the other queries - but they would happen in a similar way</p>",
        "id": 237859508,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620408060
    },
    {
        "content": "<p>Okay.  I was narrowly thinking of “accidental reuse” as being the only kind of codegen miscompilation, and also thinking that accidental reuse would only result from hash collisions. But I think mw’s explanation shows how that narrow thinking is wrong.</p>",
        "id": 237859610,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620408103
    },
    {
        "content": "<p>Some cached result depends on the old value of an uncached query, and is not recomputed despite the uncached query xhqnging</p>",
        "id": 237859614,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620408105
    },
    {
        "content": "<p>(I’m still curious about the <em>likelihood</em> of miscompilations, but I can see that the probabilities there are not just about hash collision probabilities, but rather about query infrastructure artifacts, as you state.)</p>",
        "id": 237859850,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620408179
    },
    {
        "content": "<p>This will help the blog post be more accurate, in any case. (I don’t intend to get into this level of detail there. I just want to make sure that my high-level summary is not misleading.)</p>",
        "id": 237859907,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620408205
    },
    {
        "content": "<p>Blog post PR: <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/836\">https://github.com/rust-lang/blog.rust-lang.org/pull/836</a></p>",
        "id": 237878435,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620416051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> if you all have time, I’d love to have your eyeballs on it.</p>",
        "id": 237878622,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620416132
    },
    {
        "content": "<p>\"When loading a value from the cache, it recomputes the fingerprint,\"</p>",
        "id": 237878892,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620416277
    },
    {
        "content": "<p>That's not correct - the enabled check is only run when we need to re-run the query</p>",
        "id": 237878985,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620416305
    },
    {
        "content": "<p>Since it's not stored on disk</p>",
        "id": 237879011,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620416314
    },
    {
        "content": "<p>We explicitly do <em>not</em> re-verify the hash for results loaded from disk, due to performance concerns</p>",
        "id": 237879380,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620416485
    },
    {
        "content": "<p>(though it would be good to do that as well if we can improve performance)</p>",
        "id": 237879383,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620416487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> in broad strokes looks good (I guess <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> rightfully points out a problem), I'm happy to merge once that's resolved - I think it's more important we get this published so there's something out there for users.</p>",
        "id": 237879416,
        "sender_full_name": "simulacrum",
        "timestamp": 1620416510
    },
    {
        "content": "<p>hmm I thought I even looked at the source code when I was writing that section</p>",
        "id": 237879430,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620416516
    },
    {
        "content": "<p>let me go see where I misperception arose</p>",
        "id": 237879497,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620416530
    },
    {
        "content": "<p>The overall message is good though</p>",
        "id": 237879720,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620416641
    },
    {
        "content": "<p>and users don't really need to know the distinction</p>",
        "id": 237879721,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620416641
    },
    {
        "content": "<p>The important points are: it's a compiler bug, and previously releases silently allowed it</p>",
        "id": 237879722,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620416641
    },
    {
        "content": "<p>Which are both well-described in the post</p>",
        "id": 237879789,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620416657
    },
    {
        "content": "<p>okay anyway the comments in the code make it clear that I was wrong</p>",
        "id": 237879976,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620416756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> is a better phrasing something like this: “The compiler even stores fingerprints even for uncached values. Then, every time we compute an uncached value, we double-check its newly computed fingerprint against the fingerprint stored in the cache.” ?</p>",
        "id": 237880555,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620416997
    },
    {
        "content": "<p>(this also makes a bit more sense to me, in terms of why the check even <em>worked</em> in the context of <a href=\"https://github.com/rust-lang/rust/issues/82920\">#82920</a> )</p>",
        "id": 237880729,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620417061
    },
    {
        "content": "<p>Sounds good to me</p>",
        "id": 237880900,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620417138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> any objections to the filename? “caught-red-handed.md”</p>",
        "id": 237880968,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620417181
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 237880986,
        "sender_full_name": "simulacrum",
        "timestamp": 1620417189
    },
    {
        "content": "<p>my dad-joke nature might be getting the better of me there</p>",
        "id": 237881007,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620417201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> one other thing: I would probably remove the user name from the error output under \"How does this show up\"</p>",
        "id": 237881953,
        "sender_full_name": "Jack Huey",
        "timestamp": 1620417554
    },
    {
        "content": "<p>I was rightfully told that that merging this tonight may look like we're hiding it, as it's a friday afternoon</p>",
        "id": 237884879,
        "sender_full_name": "simulacrum",
        "timestamp": 1620418977
    },
    {
        "content": "<p>so I think we'll aim for Monday 11am ET, or so</p>",
        "id": 237885077,
        "sender_full_name": "simulacrum",
        "timestamp": 1620419095
    },
    {
        "content": "<p>I will pin an issue with roughly a copy/paste of the blog post to rust-lang/rust for now</p>",
        "id": 237885107,
        "sender_full_name": "simulacrum",
        "timestamp": 1620419113
    },
    {
        "content": "<p>alright, did that</p>",
        "id": 237885510,
        "sender_full_name": "simulacrum",
        "timestamp": 1620419305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237881953\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> one other thing: I would probably remove the user name from the error output under \"How does this show up\"</p>\n</blockquote>\n<p>okay let me do somthing along those lines. (Including that spew of output doesn’t really buy us all that much anyway; I just wanted to point out that one doesn’t always see the concrete fingerprint values)</p>",
        "id": 237890156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620421593
    },
    {
        "content": "<p>would it be possible to turn this ICE into a warning, by using the newly recomputed result for the query result?</p>",
        "id": 237891659,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620422339
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237891659\">said</a>:</p>\n<blockquote>\n<p>would it be possible to turn this ICE into a warning, by using the newly recomputed result for the query result?</p>\n</blockquote>\n<p>this doesn't fix the issue, see above: <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237844841\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237844841</a><br>\nin particular</p>\n<blockquote>\n<p>in the end we are left with some value X loaded from disk that depended on super_predicates_that_define_assoc_type to be in the original state, and then another value Y that will use the new value of super_predicates_that_define_assoc_type, thus creating a mismatch.</p>\n</blockquote>",
        "id": 237891748,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620422393
    },
    {
        "content": "<p>(unless there's some complicated logic for invalidating red/green nodes, but I don't think that can work because it could have been cached before we found the new hash)</p>",
        "id": 237891866,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620422446
    },
    {
        "content": "<p>but in order to know that we can use X, we first have to mark the query that computed it as green (and thus all of its inputs)</p>",
        "id": 237891929,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620422471
    },
    {
        "content": "<p>your idea is to calculate the hash while marking it as green?</p>",
        "id": 237891976,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620422500
    },
    {
        "content": "<p>and if the recomputed value for super_predicates_that_define_assoc_type changes we just wouldn't mark that query as green</p>",
        "id": 237891979,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620422502
    },
    {
        "content": "<p>(and thus recompute all dependent query results)</p>",
        "id": 237891995,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620422516
    },
    {
        "content": "<p>hmm I don't know enough about the query system to know if that would work - maybe <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> or <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> have ideas</p>",
        "id": 237892046,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620422526
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 237892667,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620422882
    },
    {
        "content": "<p>I don't know why that previous message was sent</p>",
        "id": 237892765,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620422929
    },
    {
        "content": "<p>That's an interesting idea</p>",
        "id": 237892790,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620422947
    },
    {
        "content": "<p>My concern would be that it might have some unexpected side effects</p>",
        "id": 237892814,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620422967
    },
    {
        "content": "<p>and that normally, we'd want such a change to get tested through nightly and beta first</p>",
        "id": 237892843,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620422994
    },
    {
        "content": "<p>But for it to be useful here, we'd want to stable backport it</p>",
        "id": 237892910,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423014
    },
    {
        "content": "<p>Since otherwise, we might as well just fix the underlying bugs on time for the next release</p>",
        "id": 237892973,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237892973\">said</a>:</p>\n<blockquote>\n<p>Since otherwise, we might as well just fix the underlying bugs on time for the next release</p>\n</blockquote>\n<p>well, \"just\" here is a bit of a tall order <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 237893010,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620423072
    },
    {
        "content": "<p>especially since it's already been I think almost 12 weeks since verify-ich was turned on by default</p>",
        "id": 237893044,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620423099
    },
    {
        "content": "<p>yeah, this isn't necessarily a stable-backport-ready idea</p>",
        "id": 237893375,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620423264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237893375\">said</a>:</p>\n<blockquote>\n<p>yeah, this isn't necessarily a stable-backport-ready idea</p>\n</blockquote>\n<p>I do like it in general though :)</p>",
        "id": 237893397,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620423278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237891979\">said</a>:</p>\n<blockquote>\n<p>and if the recomputed value for super_predicates_that_define_assoc_type changes we just wouldn't mark that query as green</p>\n</blockquote>\n<p>This looks very much like making super_predicates_that_define_assoc_type an eval_always query. Didn't <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> show that was a sizeable perf regression?</p>",
        "id": 237893587,
        "sender_full_name": "cjgillot",
        "timestamp": 1620423376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> not quite - it would only have to be evaluated once per compiler invocation</p>",
        "id": 237893662,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620423430
    },
    {
        "content": "<p>The key different would be that <code>eval_always</code> forces us to re-run the query, even if all the inputs are green</p>",
        "id": 237893725,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423473
    },
    {
        "content": "<p>This approach would mean that we try to 'recover' from the query producing a bad result <em>when it was already being re-run</em></p>",
        "id": 237893787,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423489
    },
    {
        "content": "<p>before we started verifying the hash, we would assume that the query was still green</p>",
        "id": 237893830,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> eval_always queries are only run once per compiler invocation.</p>",
        "id": 237893835,
        "sender_full_name": "cjgillot",
        "timestamp": 1620423528
    },
    {
        "content": "<p>this would make us mark it red</p>",
        "id": 237893843,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423531
    },
    {
        "content": "<p>/me stops talking about things he doesn't understand</p>",
        "id": 237893859,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620423547
    },
    {
        "content": "<p>Doing this would probably reintroduce the miscompilation verify-ich wanted to avoid, but with a warning.</p>",
        "id": 237894022,
        "sender_full_name": "cjgillot",
        "timestamp": 1620423617
    },
    {
        "content": "<p>no, I think it could avoid the miscompilation entirely</p>",
        "id": 237894070,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423636
    },
    {
        "content": "<p>at least the one we know about</p>",
        "id": 237894090,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423644
    },
    {
        "content": "<p>that miscompilation was caused by us incorrectly re-using a query result that depended on <code>predicates_of</code></p>",
        "id": 237894115,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423660
    },
    {
        "content": "<p>specifically, we were re-using a query that computed the order of methods in the vtable</p>",
        "id": 237894135,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423674
    },
    {
        "content": "<p>since we weren't verifying the hash, we assumed that <code>predicates_of</code> was green, so we didn't re-compute that other query</p>",
        "id": 237894158,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423691
    },
    {
        "content": "<p>With this change, we would mark <code>predicates_of</code> as red when we detected the mismatch</p>",
        "id": 237894182,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423704
    },
    {
        "content": "<p>which would cause the vtable-related query to get re-run</p>",
        "id": 237894205,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423716
    },
    {
        "content": "<p>I'm pretty sure that this would avoid any other miscompilations that would be induced by 'recovering' from a hash mismatch</p>",
        "id": 237894269,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423737
    },
    {
        "content": "<p>but I'm not 100% certain</p>",
        "id": 237894272,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237893859\">said</a>:</p>\n<blockquote>\n<p>/me stops talking about things he doesn't understand</p>\n</blockquote>\n<p>For your defense, the terminology is not straightforward: <code>eval_always</code> means that we compute the query the first time we need to know whether it is red or green. The result is then cached for later access, like all queries.</p>",
        "id": 237894273,
        "sender_full_name": "cjgillot",
        "timestamp": 1620423741
    },
    {
        "content": "<p>we might want to rename it to <code>always_recompute</code> or something</p>",
        "id": 237894325,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423772
    },
    {
        "content": "<p>because I also thought that <code>eval_always</code> meant 'run the query every time it's called' at first</p>",
        "id": 237894344,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423788
    },
    {
        "content": "<p>when it really only affects incr-comp</p>",
        "id": 237894361,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620423801
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237894205\">said</a>:</p>\n<blockquote>\n<p>which would cause the vtable-related query to get re-run</p>\n</blockquote>\n<p>We may still end up in an inconsistent state. Consider the following:<br>\nQuery A is cached on disk. When calling A, it checks that predicates_of is green. It is (erroneously). A is loaded from disk.<br>\nQuery B is not cached on disk. When calling B, it computes predicates_of, and finds it red. It issues a warning, then proceeds to computing B.<br>\nAs a consequence, A and B are computed with a inconsistent values of predicates_of.</p>",
        "id": 237894693,
        "sender_full_name": "cjgillot",
        "timestamp": 1620423965
    },
    {
        "content": "<p>I don't know which of A or B is the vtable-related query.</p>",
        "id": 237894734,
        "sender_full_name": "cjgillot",
        "timestamp": 1620423992
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 237894858,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424041
    },
    {
        "content": "<p>hmm, why would <code>predicates_of</code> be green in the first but not the second case?</p>",
        "id": 237894860,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620424041
    },
    {
        "content": "<p>We only need to actually recompute <code>predicate_of</code> if we need its value</p>",
        "id": 237894908,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424067
    },
    {
        "content": "<p>In the first case, the incr-comp engine assumes a query is green if all its dependencies are.</p>",
        "id": 237894923,
        "sender_full_name": "cjgillot",
        "timestamp": 1620424076
    }
]