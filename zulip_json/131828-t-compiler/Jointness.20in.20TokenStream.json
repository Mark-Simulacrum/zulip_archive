[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> while working on jointness-preserving mbe, I've noticed that proc macro tt stores jointness as a field of <code>Token</code>, while <code>libsyntax::TokenStream</code> stores jointness as <code>TreeAndJoin</code>. Do you think it might make sense to move jointness to the <code>Token</code> in libsyntax as well? That certainly would make it harder to lose jointness along the way, and should be easier to work with, as matching <code>(tree, is_joint)</code> tuple is awkward.</p>",
        "id": 176543650,
        "sender_full_name": "matklad",
        "timestamp": 1569400041
    },
    {
        "content": "<blockquote>\n<p>Do you think it might make sense to move jointness to the Token in libsyntax as well?</p>\n</blockquote>\n<p>Yes, I think that makes sense.</p>",
        "id": 176550220,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569405835
    },
    {
        "content": "<p>I thought about it when implementing <a href=\"https://github.com/rust-lang/rust/issues/61541\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/61541\">#61541</a>, and wanted to do it myself later, but it didn't happen.</p>",
        "id": 176550412,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569405973
    },
    {
        "content": "<p>IIRC, it doesn't even increase the size of <code>Token</code>, but I'm not sure.</p>",
        "id": 176550469,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1569406065
    }
]