[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> -- design meeting in <strong>10 minutes</strong>.</p>",
        "id": 183365647,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576248641
    },
    {
        "content": "<p>As a reminder, the topic is <a href=\"https://github.com/rust-lang/compiler-team/issues/222\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/222\">compiler-team#222</a>, or \"IDE/library-ification\" plans. We have a <a href=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ\" target=\"_blank\" title=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ\">hackmd</a> that was prepared in advance which has some notes, questions, etc.</p>",
        "id": 183365728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576248714
    },
    {
        "content": "<p>Please feel free to review and add things to the end.</p>",
        "id": 183365789,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576248727
    },
    {
        "content": "<p>oh hey i guess this is maybe a pre-announcement: There is a beta-nom that needs to be resolved (approved or denied) asap.</p>",
        "id": 183365851,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576248791
    },
    {
        "content": "<p>beta-nom: \"Stabilize attribute macros on inline modules\" <a href=\"https://github.com/rust-lang/rust/issues/64273\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64273\">#64273</a></p>",
        "id": 183365862,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576248801
    },
    {
        "content": "<p>I assume we can allocate a couple minutes at the start to discuss it. (I don't want to discuss it until the meeting starts.)</p>",
        "id": 183365890,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576248826
    },
    {
        "content": "<p>there are three I think?</p>",
        "id": 183365966,
        "sender_full_name": "simulacrum",
        "timestamp": 1576248847
    },
    {
        "content": "<p>I thought we had a general policy of not backporting stabilizations</p>",
        "id": 183365968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576248850
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/64273\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64273\">https://github.com/rust-lang/rust/pull/64273</a> is one, but also <a href=\"https://github.com/rust-lang/rust/pull/66983\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/66983\">https://github.com/rust-lang/rust/pull/66983</a> and <a href=\"https://github.com/rust-lang/rust/pull/67134\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67134\">https://github.com/rust-lang/rust/pull/67134</a></p>",
        "id": 183365983,
        "sender_full_name": "simulacrum",
        "timestamp": 1576248866
    },
    {
        "content": "<blockquote>\n<p>I thought we had a general policy of not backporting stabilizations</p>\n</blockquote>\n<p>I agree with this and was planning on saying so at the meeting.</p>",
        "id": 183365995,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576248875
    },
    {
        "content": "<p>OK, I see <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>  has a <a href=\"https://github.com/rust-lang/rust/pull/64273#issuecomment-565170114\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/64273#issuecomment-565170114\">comment</a> explaining their reasoning for why to stabilize faster</p>",
        "id": 183366000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576248877
    },
    {
        "content": "<p>uh wait did I somehow just contradict myself ... ?</p>",
        "id": 183366029,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576248898
    },
    {
        "content": "<p>Nope, sorry, my bad. Edited my comment. :)</p>",
        "id": 183366047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576248910
    },
    {
        "content": "<p>Welp, let's setup a place for people to leave responses. There are some last minute backport nominations, add emojis:</p>",
        "id": 183366222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249051
    },
    {
        "content": "<ul>\n<li>Ensure that we get a hard error on generic ZST constants if their body causes an error during evaluation <a href=\"https://github.com/rust-lang/rust/issues/67134\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67134\">#67134</a></li>\n</ul>",
        "id": 183366233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249064
    },
    {
        "content": "<ul>\n<li>Fix <code>unused_parens</code> triggers on macro by example code <a href=\"https://github.com/rust-lang/rust/issues/66983\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66983\">#66983</a></li>\n</ul>",
        "id": 183366247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249076
    },
    {
        "content": "<ul>\n<li>Stabilize attribute macros on inline modules <a href=\"https://github.com/rust-lang/rust/issues/64273\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64273\">#64273</a></li>\n</ul>",
        "id": 183366291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249086
    },
    {
        "content": "<p>(I will do the next round of backports today, most likely, fwiw)</p>",
        "id": 183366497,
        "sender_full_name": "simulacrum",
        "timestamp": 1576249223
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> -- design meeting starting <strong>now</strong>! As a special treat, we have some backporting nominations, see above.</p>",
        "id": 183366501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249233
    },
    {
        "content": "<h1>Announcements or comments on backports</h1>",
        "id": 183366508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249242
    },
    {
        "content": "<ul>\n<li>Uh did anybody make minutes from the last meeting? I think I forgot to do so, sigh.</li>\n</ul>",
        "id": 183366519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249258
    },
    {
        "content": "<p>you mean yesterday's meeting?</p>",
        "id": 183366580,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576249306
    },
    {
        "content": "<p>or last week's?</p>",
        "id": 183366584,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576249310
    },
    {
        "content": "<p>I meant <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-12-06\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-12-06\">last week's design meeting</a></p>",
        "id": 183366652,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249338
    },
    {
        "content": "<p>IIRC I felt there were a lot of interesting points made back and forth but I was unable to keep a hackmd up to date in the moment</p>",
        "id": 183366703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"129457\">@Florian Diebold</span> are you around by any chance?</p>",
        "id": 183366821,
        "sender_full_name": "matklad",
        "timestamp": 1576249446
    },
    {
        "content": "<p>so regarding the back ports: I personally don't find petrochenkov's arguments for back porting <a href=\"https://github.com/rust-lang/rust/issues/64273\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64273\">#64273</a> compelling. I know they had <em>wanted</em> all the macro enhancements to be released in sync, but I don't see a big reason to do so</p>",
        "id": 183366822,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576249446
    },
    {
        "content": "<p>I agree with that</p>",
        "id": 183366828,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249459
    },
    {
        "content": "<p>At least, I think the value of having a general rule to make our live's easier is higher :)</p>",
        "id": 183366842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249469
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"129457\">Florian Diebold</span> are you around by any chance?</p>\n</blockquote>\n<p>yes, more or less</p>",
        "id": 183366858,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576249482
    },
    {
        "content": "<p>It seems like 1.41 can be that \"flag release\" instead that authors can cite and rely on</p>",
        "id": 183366866,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249490
    },
    {
        "content": "<p>to be clear, I really don't have anything against this particular stabilization. But I also don't see much compelling me to deviate from our rule</p>",
        "id": 183366876,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576249499
    },
    {
        "content": "<p>I have another backport candidate: <a href=\"https://github.com/rust-lang/rust/pull/67278\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67278\">https://github.com/rust-lang/rust/pull/67278</a></p>",
        "id": 183366900,
        "sender_full_name": "centril",
        "timestamp": 1576249512
    },
    {
        "content": "<p>(FWIW here's agenda for today's meeting <a href=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ\" target=\"_blank\" title=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ\">https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ</a>)</p>",
        "id": 183366916,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576249525
    },
    {
        "content": "<p>(especially since in this case, a beta backport is implicitly a stable backport, in the sense that the beta-&gt;stable transition is imminent)</p>",
        "id": 183366924,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576249533
    },
    {
        "content": "<blockquote>\n<p>I have another backport candidate: <a href=\"https://github.com/rust-lang/rust/pull/67278\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/67278\">https://github.com/rust-lang/rust/pull/67278</a></p>\n</blockquote>\n<p>that's just a stable-to-stable right? I feel like it's too late and risky to backport it now</p>",
        "id": 183367045,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1576249593
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/issues/67278\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67278\">#67278</a> can ride the trains</p>",
        "id": 183367057,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576249602
    },
    {
        "content": "<p>or at least wait until after the beta-&gt;stable transition</p>",
        "id": 183367100,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576249626
    },
    {
        "content": "<p>The last time we backported a stabilization was uniform_paths in 1.32.0 and we had a damn good reason for it then</p>",
        "id": 183367103,
        "sender_full_name": "centril",
        "timestamp": 1576249628
    },
    {
        "content": "<blockquote>\n<p>that's just a stable-to-stable right? I feel like it's too late and risky to backport it now</p>\n</blockquote>\n<p>it is yes, in error code; it's in an error path, so it's not risky, I'd say</p>",
        "id": 183367225,
        "sender_full_name": "centril",
        "timestamp": 1576249690
    },
    {
        "content": "<p>Seems like we are <span aria-label=\"back\" class=\"emoji emoji-1f519\" role=\"img\" title=\"back\">:back:</span> on <a href=\"https://github.com/rust-lang/rust/issues/67134\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67134\">#67134</a> and <a href=\"https://github.com/rust-lang/rust/issues/66983\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/66983\">#66983</a> but not <a href=\"https://github.com/rust-lang/rust/issues/64273\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/64273\">#64273</a></p>",
        "id": 183367278,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249729
    },
    {
        "content": "<p>(the actual diff is only <code>expected</code> =&gt; <code>self.expected_ty()</code>, literally)</p>",
        "id": 183367312,
        "sender_full_name": "centril",
        "timestamp": 1576249745
    },
    {
        "content": "<p>I would prefer to avoid backporting PRs that have not yet landed unless they have a clear reason to be backported</p>",
        "id": 183367339,
        "sender_full_name": "simulacrum",
        "timestamp": 1576249768
    },
    {
        "content": "<p>And <a href=\"https://github.com/rust-lang/rust/issues/67278\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67278\">#67278</a> is a bit less clear, but there's at least some objection, I think based mostly on the fact that it hasn't landed yet (c?) and doesn't seem that urgent</p>",
        "id": 183367343,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249771
    },
    {
        "content": "<p>yeah not urgent</p>",
        "id": 183367363,
        "sender_full_name": "centril",
        "timestamp": 1576249789
    },
    {
        "content": "<p>OK.</p>",
        "id": 183367546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249900
    },
    {
        "content": "<p>I adjusted the labels and left comments on proposed PRs</p>",
        "id": 183367560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249909
    },
    {
        "content": "<p>I'd say that even with the ICE the output is fairly clear anyways</p>",
        "id": 183367562,
        "sender_full_name": "centril",
        "timestamp": 1576249910
    },
    {
        "content": "<p>Shall we get started with the meeting proper?</p>",
        "id": 183367621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249933
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> noted, there is a <a href=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ\" target=\"_blank\" title=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ\">hackmd</a> with notes that we prepared</p>",
        "id": 183367633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249947
    },
    {
        "content": "<p>I think my goal for this meeting would be:</p>",
        "id": 183367656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249962
    },
    {
        "content": "<ul>\n<li>To lay out the reasoning and proposed path forward for the RLS, rust-analyzer, and rustc</li>\n</ul>",
        "id": 183367684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576249981
    },
    {
        "content": "<ul>\n<li>Presuming we sort of agree on that, to talk about some of the bigger picture maintenance and milestone questions maybe? I'm not entirely sure which topics are best to focus on, except that I think it's clear that deeper teechnical discussions (e.g., details of library-ification) should probably have their own design meetings</li>\n</ul>",
        "id": 183367765,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250033
    },
    {
        "content": "<ul>\n<li>But e.g. talking about what work to prioritize first, or which things <em>want</em> design meetings, seems to make sense</li>\n</ul>",
        "id": 183367827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250058
    },
    {
        "content": "<p>Anyway in the doc we proposed to start by summarizing the plans and logic behind them, so maybe we should start there</p>",
        "id": 183367840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250075
    },
    {
        "content": "<p>The question at hand is what to do about the fact that we have:</p>\n<ul>\n<li>two implementations of a lot of the compiler logic, one in rustc and one in rust-analyzer</li>\n</ul>",
        "id": 183367921,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250139
    },
    {
        "content": "<ul>\n<li>two semi-competing IDE platforms (even if the authors are collaborating :) -- that is, LSP implementations</li>\n</ul>",
        "id": 183367938,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250152
    },
    {
        "content": "<p>We were considering I think two major options:</p>\n<ul>\n<li>keep rust-analyzer going and try to extract out shared code base over time, meaning that we are sort of maintaining the two compilers, but gradually eliminating the distinctions</li>\n</ul>",
        "id": 183368055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250220
    },
    {
        "content": "<ul>\n<li>stop rust-analyzer and try to take the lessons from it and re-implement them in rustc code base</li>\n</ul>",
        "id": 183368084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250239
    },
    {
        "content": "<p>The conclusion we came to was that the first option was preferable, for a number of reasons. This is sort of the path we've <em>been</em> taking anyway, that we've sometimes called \"library-ification\"</p>",
        "id": 183368131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250279
    },
    {
        "content": "<p>The reasoning is (I think) outlined in the doc, I'm not sure how much time to spend on it</p>",
        "id": 183368182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250293
    },
    {
        "content": "<p>Yeah, it's in the <a href=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ#Alternatives-considered\" target=\"_blank\" title=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ#Alternatives-considered\">alternatives considered</a> section</p>",
        "id": 183368225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250327
    },
    {
        "content": "<p>should we review the potential discussion topics (written post overview in <a href=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ#Discussion-agenda\" target=\"_blank\" title=\"https://hackmd.io/w8OIoc7iQsuTrBlRV1xKMQ#Discussion-agenda\">agenda</a>) and maybe let people vote on which are most important to talk about first?</p>",
        "id": 183368264,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576250355
    },
    {
        "content": "<p>(The short version is that while this version does have a kind of maintenance cost, it lets us deliver value faster and also makes it easier for us to iterate)</p>",
        "id": 183368286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250373
    },
    {
        "content": "<p>or do you want to just decide, without overhead of voting?</p>",
        "id": 183368291,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576250376
    },
    {
        "content": "<p>Agree with first option; second seems unrealistic as a practical matter</p>",
        "id": 183368298,
        "sender_full_name": "centril",
        "timestamp": 1576250382
    },
    {
        "content": "<p>well, before we do that I wanted to say one other thing <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 183368315,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250398
    },
    {
        "content": "<p>one of the questions that's <em>not</em> addressed above is how to integrate RLS + rust-analyzer</p>",
        "id": 183368366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250406
    },
    {
        "content": "<p>agreeing with <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> , was going to raise the high cost of 2nd approach</p>",
        "id": 183368378,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250414
    },
    {
        "content": "<p>we probably don't have to go into the deatils but it's worth summarizing the current thoughts</p>",
        "id": 183368388,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250419
    },
    {
        "content": "<p>integrate save-analysis you mean?</p>",
        "id": 183368423,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576250453
    },
    {
        "content": "<p>in terms of feature set, RLS offers two main things over rust-analyzer right now:</p>\n<ul>\n<li>find all usages / rename</li>\n<li>precise error reporting</li>\n</ul>\n<p>both of these work by executing the compiler and using save-analysis data</p>",
        "id": 183368441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250465
    },
    {
        "content": "<p>I think it's worth rebranding RLS to LSP serving static index using save-analysis while focusing on RA to be the \"IDE\" (low latency, incremental)</p>",
        "id": 183368457,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250476
    },
    {
        "content": "<p>the thought is to extend rust-analyzer so that (by default) it works in a similar way</p>",
        "id": 183368458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250476
    },
    {
        "content": "<p>while also having its own, from scratch versions of these things using the shared library-ification codebase</p>",
        "id": 183368476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250487
    },
    {
        "content": "<p>that users can opt-in to</p>",
        "id": 183368500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250501
    },
    {
        "content": "<p>there are some details of how this might be done, e.g. <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> was advocating for standalone executable tools that rust-analyzer can invoke</p>",
        "id": 183368519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250515
    },
    {
        "content": "<p>I'm not sure if there's been much experimentation in that direction but anyway that's the big picture from <em>my</em> perspective</p>",
        "id": 183368570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250528
    },
    {
        "content": "<p>would this new \"save-analysis\"-like thing be an AST or HIR based analysis?</p>",
        "id": 183368580,
        "sender_full_name": "centril",
        "timestamp": 1576250535
    },
    {
        "content": "<p>I mean I think to start it would literally be save-analysis</p>",
        "id": 183368605,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250551
    },
    {
        "content": "<p>I don't think we need to reinvent save-analysis as of now</p>",
        "id": 183368613,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250559
    },
    {
        "content": "<p>the goal is to bring rust-analyzer up to \"parity\" as quickly as possible</p>",
        "id": 183368615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250561
    },
    {
        "content": "<p>(we could, but that might not give us much benefit initially)</p>",
        "id": 183368628,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250572
    },
    {
        "content": "<p>save-analysis is... suboptimal though</p>",
        "id": 183368629,
        "sender_full_name": "eddyb",
        "timestamp": 1576250575
    },
    {
        "content": "<p>^--- very much this</p>",
        "id": 183368642,
        "sender_full_name": "centril",
        "timestamp": 1576250582
    },
    {
        "content": "<p>Agreed on this</p>",
        "id": 183368663,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250591
    },
    {
        "content": "<p>I wouldn't argue with that</p>",
        "id": 183368664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250592
    },
    {
        "content": "<p>I just dont' know how it's relevant :P</p>",
        "id": 183368673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250598
    },
    {
        "content": "<p>However as <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> outlined I think it's more about feature parity</p>",
        "id": 183368676,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250601
    },
    {
        "content": "<p>and make one IDE tool \"official\"</p>",
        "id": 183368694,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250611
    },
    {
        "content": "<p>or blessed or other</p>",
        "id": 183368710,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250626
    },
    {
        "content": "<p>I'm joking of course, it's relevant, but I think in terms of priorities it doesn't make sense to be focusing on re-implementing save-analysis (over, say, <del>extending the IDE part of things</del> libraryification efforts)</p>",
        "id": 183368716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250631
    },
    {
        "content": "<p>and to converge the effort, so to speak (and not confuse the users about \"competing\" platforms)</p>",
        "id": 183368778,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250645
    },
    {
        "content": "<p>my two cents on this is that RLS would be simpler and smaller if it just used the compiler APIs on the fly</p>",
        "id": 183368815,
        "sender_full_name": "eddyb",
        "timestamp": 1576250662
    },
    {
        "content": "<p>and there was no save-analysis between in-memory compiler state and the IDE</p>",
        "id": 183368854,
        "sender_full_name": "eddyb",
        "timestamp": 1576250689
    },
    {
        "content": "<p>but maybe save-analysis serves some function that this can't work with?</p>",
        "id": 183368873,
        "sender_full_name": "eddyb",
        "timestamp": 1576250701
    },
    {
        "content": "<p>offline code index format is a good use case</p>",
        "id": 183368898,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250712
    },
    {
        "content": "<p>(ignoring the MXR/DXR efforts that spawned it in the first place)</p>",
        "id": 183368907,
        "sender_full_name": "eddyb",
        "timestamp": 1576250717
    },
    {
        "content": "<p>although technically RLS could invoke compiler queries right now, yes</p>",
        "id": 183368919,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250726
    },
    {
        "content": "<p>This is basically what we're talking about -- another option, presumably, might be to extend rust-analyzer to not use <em>save-analysis</em> but rather to communicate directly with rustc</p>",
        "id": 183368920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250726
    },
    {
        "content": "<p>Well, I think there's some tricky bits there</p>",
        "id": 183369016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250764
    },
    {
        "content": "<p>some kind of pre-computed database like the save-analysis data is probably a good idea</p>",
        "id": 183369020,
        "sender_full_name": "mw",
        "timestamp": 1576250769
    },
    {
        "content": "<p>For one thing, I think that we really want to invoke <em>cargo</em> a lot of the times</p>",
        "id": 183369025,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250775
    },
    {
        "content": "<p>i.e., you want to handle things like <code>build.rs</code> and friends</p>",
        "id": 183369050,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250792
    },
    {
        "content": "<p>since RLS already runs rustc in-process, why don't we experiment with short-circuiting the data collection process there?</p>",
        "id": 183369057,
        "sender_full_name": "eddyb",
        "timestamp": 1576250797
    },
    {
        "content": "<p>For another, rustc is presently focused on a crate at a time, but we need to incorporate many crates into the workspace and so forth</p>",
        "id": 183369107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250827
    },
    {
        "content": "<p>save-analysis is some ~4kloc; honestly not that crazy to rewrite the whole thing</p>",
        "id": 183369116,
        "sender_full_name": "centril",
        "timestamp": 1576250836
    },
    {
        "content": "<p>also, even today, rust-analyzer could just run RLS in the background and provide some of that functionality by using LSP, no? if we want one tool that can do multiple things</p>",
        "id": 183369117,
        "sender_full_name": "eddyb",
        "timestamp": 1576250836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I don't think that code has any reason to exist</p>",
        "id": 183369130,
        "sender_full_name": "eddyb",
        "timestamp": 1576250856
    },
    {
        "content": "<p>I'm worried that for doing references we need to do the entire lex -&gt;  parse -&gt; expand -&gt; name resolve pass</p>",
        "id": 183369132,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250856
    },
    {
        "content": "<p>so I'm not sure if in terms of engineering effort it'd be easier to reuse save-analysis for now</p>",
        "id": 183369144,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250868
    },
    {
        "content": "<p>I'm trying to decide whether this is a rathole or <em>the</em> question to be answered :)</p>",
        "id": 183369145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250868
    },
    {
        "content": "<p>like, I don't think what it does is useful, let alone it does it right now</p>",
        "id": 183369148,
        "sender_full_name": "eddyb",
        "timestamp": 1576250869
    },
    {
        "content": "<p>Running RLS in background is technically complicated, b/c it's <code>rustc_private</code>. Reading save-analysis from disk is technically trivial</p>",
        "id": 183369163,
        "sender_full_name": "matklad",
        "timestamp": 1576250880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> run it like VSCode does</p>",
        "id": 183369229,
        "sender_full_name": "eddyb",
        "timestamp": 1576250905
    },
    {
        "content": "<p>not some library</p>",
        "id": 183369233,
        "sender_full_name": "eddyb",
        "timestamp": 1576250908
    },
    {
        "content": "<blockquote>\n<p>I'm worried that for doing references we need to do the entire lex -&gt;  parse -&gt; expand -&gt; name resolve pass</p>\n</blockquote>\n<p>can you explain a bit more?</p>",
        "id": 183369271,
        "sender_full_name": "eddyb",
        "timestamp": 1576250942
    },
    {
        "content": "<p>having data instead of a runtime API as the common interface seems like a good idea to me</p>",
        "id": 183369275,
        "sender_full_name": "mw",
        "timestamp": 1576250943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I was thinking that for rust-analyzer to do all that we'd need to set up basically the compilation ourselves, which I'm not sure it's easier than to spawn <code>rustc -Zsave-analysis</code> and read the JSON</p>",
        "id": 183369335,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576250988
    },
    {
        "content": "<p>it would be good to make that data incrementally updateable though</p>",
        "id": 183369339,
        "sender_full_name": "mw",
        "timestamp": 1576250990
    },
    {
        "content": "<p>I'm a bit confused <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> -- you're proposing that rust-analyzer runs RLS and (e.g.) forwards some LSP queries to it? We did discuss this, I think, it seems potentially plausible to me, though I think what you <em>really</em> want is probably a stripped down version of RLS. It's kind of the \"competitor\" to having command-line utilities that execute.</p>",
        "id": 183369342,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576250991
    },
    {
        "content": "<blockquote>\n<p>I don't think that code has any reason to exist</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yea sure; -- would also add that I wouldn't trust the correctness of save-analysis in general at least given my past experience of tweaking it</p>",
        "id": 183369344,
        "sender_full_name": "centril",
        "timestamp": 1576250993
    },
    {
        "content": "<p>but I was just saying that from engineering PoV and initial cost</p>",
        "id": 183369357,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251000
    },
    {
        "content": "<p>incremental updates of index files would be a great benefit, that's true</p>",
        "id": 183369490,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251046
    },
    {
        "content": "<p>Another factor that I recall <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> raising was being able to handle \"custom setups\" that don't use cargo; i.e., the more our interface is \"run this command with some extra rustflags\", the easier that will be to handle.</p>",
        "id": 183369528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576251068
    },
    {
        "content": "<p>(I believe this is currently a weakness of the RLS today, but I'm not sure of the details there)</p>",
        "id": 183369551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576251084
    },
    {
        "content": "<p>we can feed the build plan to RLS and it can work in that environment, but by default we run cargo initially to fetch that plan</p>",
        "id": 183369623,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251118
    },
    {
        "content": "<p>In any case, am I correct that at the moment we are not arguing with the \"overall plan\" but more about the details of how one might augment rust-analyzer to bring it up to parity?</p>",
        "id": 183369675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576251127
    },
    {
        "content": "<ol>\n<li>I consider save-analysis to be a complete hack</li>\n<li>LSP forward is also a JSON hack, but presumably requires less work</li>\n</ol>",
        "id": 183369676,
        "sender_full_name": "eddyb",
        "timestamp": 1576251129
    },
    {
        "content": "<p>this is why I prefer LSP over spreading the save-analysis misdesign further</p>",
        "id": 183369712,
        "sender_full_name": "eddyb",
        "timestamp": 1576251151
    },
    {
        "content": "<p>regarding lsp, there's an LSIF (<a href=\"https://github.com/microsoft/language-server-protocol/issues/623\" target=\"_blank\" title=\"https://github.com/microsoft/language-server-protocol/issues/623\">https://github.com/microsoft/language-server-protocol/issues/623</a>) floating around</p>",
        "id": 183369755,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251179
    },
    {
        "content": "<p>then parts of RLS can be rewritten to bypass save-analysis and just use the compiler state</p>",
        "id": 183369759,
        "sender_full_name": "eddyb",
        "timestamp": 1576251181
    },
    {
        "content": "<p>\"LSP forward\" ?</p>",
        "id": 183369760,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576251181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> agree with 1, disagree with 2: it means that we need to maintain RLS as a separate binary at all. </p>\n<p>The idea is that rust-analyzer gets save analysis directly from compiler, by running <code>cargo check -Zsave-analyzis</code></p>",
        "id": 183369762,
        "sender_full_name": "matklad",
        "timestamp": 1576251181
    },
    {
        "content": "<p>which is an LSP save-analysis</p>",
        "id": 183369779,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251189
    },
    {
        "content": "<p>to be clear, nobody is proposing to keep save-analysis exactly the way it is forever here, right?</p>",
        "id": 183369797,
        "sender_full_name": "mw",
        "timestamp": 1576251202
    },
    {
        "content": "<p>which I'd probably vote to move save-analysis to (in terms of the format/serving)</p>",
        "id": 183369799,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> but that's not forward-compatible with in-memory resident rustc</p>",
        "id": 183369804,
        "sender_full_name": "eddyb",
        "timestamp": 1576251207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> I think <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> is to some extent otherwise his suggestion can't work</p>",
        "id": 183369826,
        "sender_full_name": "eddyb",
        "timestamp": 1576251222
    },
    {
        "content": "<p>just the approach of \"the compiler generates a per-crate \"database\" for consumption elsewhere\"</p>",
        "id": 183369898,
        "sender_full_name": "mw",
        "timestamp": 1576251249
    },
    {
        "content": "<p>I don't think that's true; the idea would be that save-analysis is a temporary crutch to be used while we improve rust-analyzer and make progress on library-ification, though I think it's a crutch that might last a year or two.</p>",
        "id": 183369912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576251256
    },
    {
        "content": "<p>if you want something temporary, forward LSP to RLS, which already exists and most people have installed</p>",
        "id": 183369919,
        "sender_full_name": "eddyb",
        "timestamp": 1576251260
    },
    {
        "content": "<p>if you want something permanent, an offline database is not it IMO</p>",
        "id": 183369954,
        "sender_full_name": "eddyb",
        "timestamp": 1576251283
    },
    {
        "content": "<blockquote>\n<p>if you want something permanent, an offline database is not it IMO</p>\n</blockquote>\n<p>why not? that could be cached for <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> stuff for example</p>",
        "id": 183370004,
        "sender_full_name": "mw",
        "timestamp": 1576251315
    },
    {
        "content": "<p>oh god please let's not have something like that wasm proc macro thing happen again</p>",
        "id": 183370039,
        "sender_full_name": "eddyb",
        "timestamp": 1576251340
    },
    {
        "content": "<p>ah: <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> , are you saying that instead of filling in the gaps in rust-analyzer with save-analysis in short-term, we should instead fill in gaps in rust-analyzer by having it call out to RLS ?</p>",
        "id": 183370042,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576251341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> yes and no, we'd have to initialize RLS on the side in order to 'forward LSP'</p>",
        "id": 183370045,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251342
    },
    {
        "content": "<p>if we want to cache something, it should be the incremental data</p>",
        "id": 183370067,
        "sender_full_name": "eddyb",
        "timestamp": 1576251355
    },
    {
        "content": "<p>so this is the same approach as 'run both things at the same time' (which we did consider)</p>",
        "id": 183370074,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> pretty much yeah</p>",
        "id": 183370128,
        "sender_full_name": "eddyb",
        "timestamp": 1576251370
    },
    {
        "content": "<p>I'm not sure this is a right approach</p>",
        "id": 183370182,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251399
    },
    {
        "content": "<p>rather, I wouldn't forward LSP</p>",
        "id": 183370189,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251403
    },
    {
        "content": "<p>but use 'rls cli'</p>",
        "id": 183370194,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251410
    },
    {
        "content": "<p>So, what <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> specifically was proposing, I think, is to have some command-line tools that could execute and respond to queries. The fact that they used \"save-analysis\"  to communicate was, I think, going to be an implementation detail of these tools. Is that right, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>?</p>",
        "id": 183370232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576251430
    },
    {
        "content": "<p>to forward LSP we'd have to maintain state on both sides, we'd duplicate memory usage only to feed find usages data</p>",
        "id": 183370243,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251436
    },
    {
        "content": "<p>tbh I'm considering the fact that I should probably not be in this meeting, since I have strong feelings about this, feeling like a Cassandra and all (I had a demo before 1.0 which used rustc as a library to do things like show types of expressions on hover, and RLS still can't do anything like that, despite having had mountains of efforts just sank into it)</p>",
        "id": 183370268,
        "sender_full_name": "eddyb",
        "timestamp": 1576251454
    },
    {
        "content": "<p>so in terms of engineering it makes more sense to temporarily spawn RLS to answer one-off queries (find all refs isn't that common)</p>",
        "id": 183370269,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251455
    },
    {
        "content": "<p>with save-analysis, rust-analyzer could probably use that to supplement its analysis for other requests, instead of just blindly forwarding the LSP requests that  RLS supports</p>",
        "id": 183370276,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576251461
    },
    {
        "content": "<p>(current example, implementing call hierarchy)</p>",
        "id": 183370355,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1576251489
    },
    {
        "content": "<p>this addresses the main con of rust-analyzer, namely lack of rustc parity</p>",
        "id": 183370400,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251514
    },
    {
        "content": "<p>with save-analysis we'd know what compiler knows</p>",
        "id": 183370407,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251520
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I'm not sure whether you want us to tease apart that last message</p>",
        "id": 183370431,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576251536
    },
    {
        "content": "<p>(which could only be generated for those queries like find all refs or call hierarchy)</p>",
        "id": 183370436,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sort-of. But I'd consider the tools themselves implementation detail, at least for the time being</p>",
        "id": 183370448,
        "sender_full_name": "matklad",
        "timestamp": 1576251546
    },
    {
        "content": "<p>Implementation details of rust-analyzer, in other words</p>",
        "id": 183370475,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576251560
    },
    {
        "content": "<p>Yes, I agree</p>",
        "id": 183370478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576251561
    },
    {
        "content": "<p>There are many levels of \"impl details\"</p>",
        "id": 183370486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576251569
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>   it seems clear to me that your knowledge of rustc's architecture and potential future seems like a valuable part of the conversation here. But I also think that it can be hard to reach common ground for communication</p>",
        "id": 183370596,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576251614
    },
    {
        "content": "<p>this is not about communication. this is about the history of the RLS and decisions taken in the past. I can explain more in PM if people are curious</p>",
        "id": 183370629,
        "sender_full_name": "eddyb",
        "timestamp": 1576251639
    },
    {
        "content": "<p>I'm talking about failure to communicate here and now in the meeting, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 183370710,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576251692
    },
    {
        "content": "<p>sometimes I think I'm the only one who doesn't understand what youi</p>",
        "id": 183370754,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576251721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  perhaps it would be best to lay this out as a text</p>",
        "id": 183370785,
        "sender_full_name": "centril",
        "timestamp": 1576251722
    },
    {
        "content": "<p>you are sayingh</p>",
        "id": 183370804,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576251725
    },
    {
        "content": "<p>so one thing that makes me feel positive about an offline database approach is that <code>rustc</code> is probably going to stay optimized for one-off invocations (as opposed to becoming a long-running process)</p>",
        "id": 183370819,
        "sender_full_name": "mw",
        "timestamp": 1576251733
    },
    {
        "content": "<p>but I'm willing to <strong>say</strong> i don</p>",
        "id": 183370826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576251736
    },
    {
        "content": "<p>t understand</p>",
        "id": 183370828,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576251737
    },
    {
        "content": "<blockquote>\n<p>so one thing that makes me feel positive about an offline database approach is that <code>rustc</code> is probably going to stay optimized for one-off invocations (as opposed to becoming a long-running process)</p>\n</blockquote>\n<p>this is different from what I thought we've all been agreeing for years</p>",
        "id": 183370858,
        "sender_full_name": "eddyb",
        "timestamp": 1576251759
    },
    {
        "content": "<p>isn't this what end-to-end querifyication was for?</p>",
        "id": 183370880,
        "sender_full_name": "eddyb",
        "timestamp": 1576251772
    },
    {
        "content": "<p>I don't think it's a discussion either-or</p>",
        "id": 183370916,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> okay I'll admit I'm confused by some of <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>'s statements</p>",
        "id": 183370924,
        "sender_full_name": "eddyb",
        "timestamp": 1576251794
    },
    {
        "content": "<p>I think offline database has very much its uses</p>",
        "id": 183370931,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251798
    },
    {
        "content": "<p>but we shouldn't just use it as main driver for IDE/compilation purposes</p>",
        "id": 183370951,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251810
    },
    {
        "content": "<p>and I don't think anyone here wants to keep save-analysis as-is</p>",
        "id": 183370977,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251822
    },
    {
        "content": "<blockquote>\n<p>I think offline database has very much its uses</p>\n</blockquote>\n<p>can you summarize?</p>",
        "id": 183370980,
        "sender_full_name": "centril",
        "timestamp": 1576251823
    },
    {
        "content": "<p>I love the GitHub pre-computed navigation feature</p>",
        "id": 183370999,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251840
    },
    {
        "content": "<p>which could be powered using the same approach</p>",
        "id": 183371063,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576251855
    },
    {
        "content": "<p>I feel both offline database, and long-running rustc are in the <strong>far</strong> future, and it probably doesn't make a lot of sense to discuss thouse in details</p>",
        "id": 183371071,
        "sender_full_name": "matklad",
        "timestamp": 1576251861
    },
    {
        "content": "<p>I think what <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> is saying (which I'm sympathetic to) is that there may well be a need to have two \"drivers\", one for \"batch compilation\" and one for \"IDE\". I imagine they would both be based around the same set of core libaries and share 99% of the same code, but might make some choices differently (e.g., batch compilation might be based on arenas and use the disk to cache incremental state, IDEs would likely not)</p>",
        "id": 183371074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576251864
    },
    {
        "content": "<p>to clarify: I thought that the RLS + rust-analyzer approach included:</p>\n<ul>\n<li>keep rustc as batch compiler</li>\n<li>optimize rust-analyzer for being a long-running process</li>\n<li>share code at a library level between those two</li>\n</ul>",
        "id": 183371111,
        "sender_full_name": "mw",
        "timestamp": 1576251893
    },
    {
        "content": "<p>But I also agree with <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> -- one thing that I feel maybe got lost is that I <em>think</em> we're all aiming to build a \"responsive\" IDE design, much like the one that <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has been advocating for (which I found quite inspiring), and the question is more charting out the course to get there</p>",
        "id": 183371137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576251913
    },
    {
        "content": "<p>yes, what Niko said</p>",
        "id": 183371144,
        "sender_full_name": "mw",
        "timestamp": 1576251918
    },
    {
        "content": "<p>I don't consider any of this as set in stone</p>",
        "id": 183371203,
        "sender_full_name": "mw",
        "timestamp": 1576251958
    },
    {
        "content": "<p>the only caveat I would give <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> is that I think it would be <em>amazing</em> if we can unify rustc+rust-analyzer, but I'm not sure it makes sense; luckily in the short term the question feels moot, since we have to kind of do the same work either way.</p>",
        "id": 183371251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576251969
    },
    {
        "content": "<p>time check, 14 min left</p>",
        "id": 183371300,
        "sender_full_name": "centril",
        "timestamp": 1576252001
    },
    {
        "content": "<p>but I see us doing a lot of optimizations (e.g., streaming the dep-graph to disk) that seem to be useful, but don't make sense for IDEs, which is what gives me a bit of pause to think that the we may want to have two kinds of \"implementations\" of the same query system, with different trade-offs</p>",
        "id": 183371307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252005
    },
    {
        "content": "<p>We haven't touched on:</p>\n<blockquote>\n<h3>Library-ification priorities</h3>\n</blockquote>\n<p>at all yet.</p>",
        "id": 183371317,
        "sender_full_name": "centril",
        "timestamp": 1576252017
    },
    {
        "content": "<p>moving end-to-end queries (or at least moving queries more towards the beginning of the pipeline) is useful for a batch compiler too</p>",
        "id": 183371338,
        "sender_full_name": "mw",
        "timestamp": 1576252031
    },
    {
        "content": "<p>just as a side note</p>",
        "id": 183371354,
        "sender_full_name": "mw",
        "timestamp": 1576252040
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> for the time check :)</p>",
        "id": 183371384,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252065
    },
    {
        "content": "<p>I'm not really sure where we stand at the moment</p>",
        "id": 183371436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252084
    },
    {
        "content": "<blockquote>\n<p>two kinds of \"implementations\" of the same query system, with different trade-offs</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> this does have the drawback of fragility? (e.g. wrt. the test suite and whatnot?)</p>",
        "id": 183371444,
        "sender_full_name": "centril",
        "timestamp": 1576252089
    },
    {
        "content": "<p>I think we need several meetings :P</p>",
        "id": 183371489,
        "sender_full_name": "centril",
        "timestamp": 1576252118
    },
    {
        "content": "<p>these would differ in optimizations but the end 'result' would be the same from test pov, no?</p>",
        "id": 183371527,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576252138
    },
    {
        "content": "<p>(such as streaming I/O or caches)</p>",
        "id": 183371540,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576252148
    },
    {
        "content": "<p>OK, well, we're at 10 minutes left, why don't we discuss follow-up meetings?</p>",
        "id": 183371551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> assuming opts don't change end result</p>",
        "id": 183371569,
        "sender_full_name": "centril",
        "timestamp": 1576252172
    },
    {
        "content": "<p>One thing I was thinking is that I'd like to try to have a meeting to talk about the work we're pursuing on chalk and type-system \"library-ification\"</p>",
        "id": 183371572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252177
    },
    {
        "content": "<p>I imagine such a discussion migfht help to make some of this debate more concrete</p>",
        "id": 183371578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252187
    },
    {
        "content": "<p>so, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, my comments from before were meant to explore a design branch that takes what Niko listed as given. they were not meant as, I consider other approaches, branching off earlier, unfeasible or something.</p>",
        "id": 183371596,
        "sender_full_name": "mw",
        "timestamp": 1576252197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> oh you mean like \"fuel/resource\"-limited queries?</p>",
        "id": 183371650,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576252212
    },
    {
        "content": "<p>I'm sure chalk and macro would need separate meetings in terms of librarification</p>",
        "id": 183371706,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576252253
    },
    {
        "content": "<blockquote>\n<p>so, <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span>, my comments from before were meant to explore a design branch that takes what Niko listed as given. they were not meant as, I consider other approaches, branching off earlier, unfeasible or something.</p>\n</blockquote>\n<p>so did you mean that rustc will <em>for now</em> remain a batch compiler? I read it as \"for the indefinite future\"</p>",
        "id": 183371747,
        "sender_full_name": "eddyb",
        "timestamp": 1576252286
    },
    {
        "content": "<p>So yeah that's kind of one set of meetings: on specific library-ification topics</p>",
        "id": 183371752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> more like basic \"the choices made for the infrastructure are not dependent upon implicitly for correctness purposes of tests\"</p>",
        "id": 183371777,
        "sender_full_name": "centril",
        "timestamp": 1576252307
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>so, <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span>, my comments from before were meant to explore a design branch that takes what Niko listed as given. they were not meant as, I consider other approaches, branching off earlier, unfeasible or something.</p>\n</blockquote>\n<p>so did you mean that rustc will <em>for now</em> remain a batch compiler? I read it as \"for the indefinite future\"</p>\n</blockquote>\n<p>I meant, in the scenario that Niko described, it would remain a batch compiler</p>",
        "id": 183371834,
        "sender_full_name": "mw",
        "timestamp": 1576252324
    },
    {
        "content": "<p>For the parser stuff, me, <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span>, <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, other people who are interested, should probably discuss</p>",
        "id": 183371846,
        "sender_full_name": "centril",
        "timestamp": 1576252331
    },
    {
        "content": "<p>one thing that I think we're also not touching upon would be multi-crate compilation</p>",
        "id": 183371855,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576252338
    },
    {
        "content": "<p>I'm in the process of doing large scale refactorings of the parser</p>",
        "id": 183371867,
        "sender_full_name": "centril",
        "timestamp": 1576252346
    },
    {
        "content": "<p>which may or may not impact some decisions here</p>",
        "id": 183371873,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576252351
    },
    {
        "content": "<p>huh why can't I find niko's message</p>",
        "id": 183371880,
        "sender_full_name": "eddyb",
        "timestamp": 1576252354
    },
    {
        "content": "<p>I'll be happy as long as we have \"parity\" in observed behavior</p>",
        "id": 183371902,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1576252368
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-12-13/near/183371074\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-12-13/near/183371074\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-12-13/near/183371074</a></p>",
        "id": 183371909,
        "sender_full_name": "mw",
        "timestamp": 1576252373
    },
    {
        "content": "<p>niko's message: <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-12-13/near/183371074\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-12-13/near/183371074\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-12-13/near/183371074</a></p>",
        "id": 183371910,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576252375
    },
    {
        "content": "<p>oh yeah</p>",
        "id": 183371915,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576252380
    },
    {
        "content": "<p>oh I could've sworn it had bullet points or numbers in it, whoops</p>",
        "id": 183371945,
        "sender_full_name": "eddyb",
        "timestamp": 1576252399
    },
    {
        "content": "<blockquote>\n<p>I think what <span class=\"user-mention silent\" data-user-id=\"124287\">mw</span> is saying (which I'm sympathetic to) is that there may well be a need to have two \"drivers\", one for \"batch compilation\" and one for \"IDE\". I imagine they would both be based around the same set of core libaries and share 99% of the same code, but might make some choices differently (e.g., batch compilation might be based on arenas and use the disk to cache incremental state, IDEs would likely not)</p>\n</blockquote>\n<p>I think this is <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-12-13/near/183371074\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202019-12-13/near/183371074\">the message <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> was referring to</a>, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 183371947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252399
    },
    {
        "content": "<blockquote>\n<p>I'll be happy as long as we have \"parity\" in observed behavior</p>\n</blockquote>\n<ul>\n<li>crucially not regressing the ability to reason about the grammar</li>\n</ul>",
        "id": 183371972,
        "sender_full_name": "centril",
        "timestamp": 1576252419
    },
    {
        "content": "<p>e.g. not having a formal grammar is sub-optimal if we want to re-architecture things</p>",
        "id": 183372006,
        "sender_full_name": "centril",
        "timestamp": 1576252439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> I think what would make sense is to start with some private discussion to hammer out rough design and then a larger meeting to help fill the rest of us in</p>",
        "id": 183372008,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252440
    },
    {
        "content": "<p>I can see having multiple \"policies\" for how to approach compilation and how much RAM vs disk space to use</p>",
        "id": 183372081,
        "sender_full_name": "eddyb",
        "timestamp": 1576252470
    },
    {
        "content": "<p>Sure; I believe we have a thread somewhere in this stream about the parser</p>",
        "id": 183372094,
        "sender_full_name": "centril",
        "timestamp": 1576252483
    },
    {
        "content": "<p>What we'll ideally have is someone familiar with both ra and libsyntax :)</p>",
        "id": 183372098,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1576252484
    },
    {
        "content": "<p>in fact I think I suggested a long time ago that RLS could interleave compiling the crate and querying</p>",
        "id": 183372105,
        "sender_full_name": "eddyb",
        "timestamp": 1576252487
    },
    {
        "content": "<blockquote>\n<p>What we'll ideally have is someone familiar with both ra and libsyntax <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n</blockquote>\n<p>not sure who that is</p>",
        "id": 183372128,
        "sender_full_name": "centril",
        "timestamp": 1576252504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> that might be me (only me <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> ?)</p>",
        "id": 183372136,
        "sender_full_name": "matklad",
        "timestamp": 1576252509
    },
    {
        "content": "<p>because you can more or less \"just\" stop from e.g. type-checking all the functions (between two functions, that is) and run some query</p>",
        "id": 183372143,
        "sender_full_name": "eddyb",
        "timestamp": 1576252515
    },
    {
        "content": "<blockquote>\n<p>I can see having multiple \"policies\" for how to approach compilation and how much RAM vs disk space to use</p>\n</blockquote>\n<p>yes, I think in my ideal world we probably land here; it may take us some time to get there</p>",
        "id": 183372239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252571
    },
    {
        "content": "<p>so what you're talking about doesn't seem implausible or undesirable for me</p>",
        "id": 183372273,
        "sender_full_name": "eddyb",
        "timestamp": 1576252597
    },
    {
        "content": "<p>I just don't think there is a need for persisting something <em>other</em> than incremental caches</p>",
        "id": 183372291,
        "sender_full_name": "eddyb",
        "timestamp": 1576252613
    },
    {
        "content": "<p>So let's put this another way</p>",
        "id": 183372321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I can't say I got a clear impression of what \"event\" based means; If you could provide an example &amp; also point me towards whatever RA uses that would be good. And I need to read up on whatever Swift is doing</p>",
        "id": 183372325,
        "sender_full_name": "centril",
        "timestamp": 1576252641
    },
    {
        "content": "<p>Actually, let's not put this another way, because we have 2 minutes left here.</p>",
        "id": 183372418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252686
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119031\">Esteban Küber</span> that might be me (only me <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span> ?)</p>\n</blockquote>\n<p>we better do something to change that</p>",
        "id": 183372421,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1576252689
    },
    {
        "content": "<p>But I think I would like to break out a separate topic to chat with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>, and <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> (and others who wish) about the best way to have rust-analyzer leverage rustc for precise queries</p>",
        "id": 183372454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> could you organize a parser meeting? <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> ?</p>",
        "id": 183372457,
        "sender_full_name": "matklad",
        "timestamp": 1576252722
    },
    {
        "content": "<p>Or put another way, that's clearly a follow-up item</p>",
        "id": 183372466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252730
    },
    {
        "content": "<p>And it seems to have been the heart of what we discussed here, though perhaps we went round about?</p>",
        "id": 183372503,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252755
    },
    {
        "content": "<p>I think we went somewhat off-topic on that to be honest</p>",
        "id": 183372649,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576252836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I think it would make sense to start with collecting some resources and reading material before organizing a meeting</p>",
        "id": 183372658,
        "sender_full_name": "centril",
        "timestamp": 1576252841
    },
    {
        "content": "<p>it'd be good to come back to that</p>",
        "id": 183372661,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576252843
    },
    {
        "content": "<p>so this sounds like the RLS would slowly merge into rustc over time, and libraries would be extracted to be used by both rustc and RA</p>",
        "id": 183372665,
        "sender_full_name": "mw",
        "timestamp": 1576252847
    },
    {
        "content": "<p>Otherwise it's hard to make informed conversations in the meeting</p>",
        "id": 183372692,
        "sender_full_name": "centril",
        "timestamp": 1576252862
    },
    {
        "content": "<p>I could see half of RLS remaining external to drive Cargo</p>",
        "id": 183372701,
        "sender_full_name": "eddyb",
        "timestamp": 1576252867
    },
    {
        "content": "<p>Well, I'm not sure about the RLS part -- at least, our hope was that the RLS gets deprecated fairly quickly.</p>",
        "id": 183372705,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252871
    },
    {
        "content": "<p>or merging into Cargo somehow?</p>",
        "id": 183372707,
        "sender_full_name": "eddyb",
        "timestamp": 1576252871
    },
    {
        "content": "<p>But replaced I guess with some other more targeted bits of tooling</p>",
        "id": 183372729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> since you seem to have ideas about what direction to go in it would be good to elaborate on that + provide some resources</p>",
        "id": 183372737,
        "sender_full_name": "centril",
        "timestamp": 1576252894
    },
    {
        "content": "<p>That are used for the time being (but not externally \"known\")</p>",
        "id": 183372751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252904
    },
    {
        "content": "<p>so I think it'd make sense to make RA the primary investment in the IDE space</p>",
        "id": 183372754,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576252905
    },
    {
        "content": "<p>I guess <code>cargo rustc -- --lsp localhost:35487</code> would \"just\" work heh</p>",
        "id": 183372758,
        "sender_full_name": "eddyb",
        "timestamp": 1576252909
    },
    {
        "content": "<p>which needs parity with RLS as of now</p>",
        "id": 183372831,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576252926
    },
    {
        "content": "<p>we can discuss how to do that separately (as an implementation detail)</p>",
        "id": 183372848,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576252935
    },
    {
        "content": "<p>OK, well, I have to go do some errands, it seems clear we'll need to do some follow-ups, but I'm debating what shape they take</p>",
        "id": 183372891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576252967
    },
    {
        "content": "<p>this is what I noted in the hackmd at the end:</p>\n<ul>\n<li>\n<p>What is the best architecture to use to have rust-analyzer leverage rustc for precise queries, notably \"find all usages\"?<br>\n    * Folks: eddyb, matklad, xanewok, maybe flodiebold etc<br>\n    * This was a topic we spent a lot of the meeting on</p>\n</li>\n<li>\n<p>Library-ification specifics<br>\n    * Parsers<br>\n    * Chalk / type extraction</p>\n</li>\n</ul>",
        "id": 183372943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576253006
    },
    {
        "content": "<p>Maybe some elaborations from various parties in the form of \"opinion pieces\" would be helpful</p>",
        "id": 183372958,
        "sender_full_name": "centril",
        "timestamp": 1576253011
    },
    {
        "content": "<p>yeah</p>",
        "id": 183372968,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576253022
    },
    {
        "content": "<p>Like <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> can give their take on things in a write-up</p>",
        "id": 183372983,
        "sender_full_name": "centril",
        "timestamp": 1576253033
    },
    {
        "content": "<p>I'll write some notes and share them here later on</p>",
        "id": 183372984,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1576253034
    },
    {
        "content": "<p>also: please distinguish short-term vs long-term strategies</p>",
        "id": 183373074,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576253086
    },
    {
        "content": "<blockquote>\n<p>Like <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> can give their take on things in a write-up</p>\n</blockquote>\n<p>every time someone says that, I wonder if they underestimate the effort/time involved :P</p>",
        "id": 183373083,
        "sender_full_name": "eddyb",
        "timestamp": 1576253096
    },
    {
        "content": "<p>re shape, I must say that the present meeting was too high energy/velocity for me.</p>",
        "id": 183373090,
        "sender_full_name": "matklad",
        "timestamp": 1576253101
    },
    {
        "content": "<p>Yeah, it was very hard to keep up.</p>",
        "id": 183373112,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576253112
    },
    {
        "content": "<p>there are a lot of things where if I can dedicate time to it I would rather spend time on implementing it</p>",
        "id": 183373116,
        "sender_full_name": "eddyb",
        "timestamp": 1576253114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> same, and I didn't help, sorry about that :/</p>",
        "id": 183373149,
        "sender_full_name": "eddyb",
        "timestamp": 1576253137
    },
    {
        "content": "<p>but this is the problem <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> : you implement it but then noone else knows what it is?</p>",
        "id": 183373156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1576253140
    },
    {
        "content": "<p>OK, I have to step out. Thanks all <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 183373226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1576253179
    },
    {
        "content": "<p>Thanks for leading the meeting <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> !</p>",
        "id": 183373241,
        "sender_full_name": "matklad",
        "timestamp": 1576253197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that happens with design documents I've written too :P (but really, I wish I had that problem - of needing to document an implementation - more often)</p>",
        "id": 183373265,
        "sender_full_name": "eddyb",
        "timestamp": 1576253216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I want to watch the parser discussion, where is this going to happen?</p>",
        "id": 183373271,
        "sender_full_name": "qmx",
        "timestamp": 1576253219
    },
    {
        "content": "<p>I don't think we're ready for that discussion yet</p>",
        "id": 183373309,
        "sender_full_name": "centril",
        "timestamp": 1576253242
    },
    {
        "content": "<p>I mean, even the research material pre-meeting</p>",
        "id": 183373321,
        "sender_full_name": "qmx",
        "timestamp": 1576253257
    },
    {
        "content": "<p>oh yeah wg-grammar should probably make a working parser testing rig too, shouldn't it?</p>",
        "id": 183373405,
        "sender_full_name": "eddyb",
        "timestamp": 1576253297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> well we're very much no-where near that</p>",
        "id": 183373461,
        "sender_full_name": "centril",
        "timestamp": 1576253344
    },
    {
        "content": "<p>like we don't have a way to disambiguate grammars so... ^^</p>",
        "id": 183373501,
        "sender_full_name": "centril",
        "timestamp": 1576253379
    },
    {
        "content": "<p>idk why people keep thinking that matters</p>",
        "id": 183373511,
        "sender_full_name": "eddyb",
        "timestamp": 1576253396
    },
    {
        "content": "<p>first off, we could be comparing syn and libsyntax (and ra-syntax? not sure what that looks like yet), and we could've all along</p>",
        "id": 183373591,
        "sender_full_name": "eddyb",
        "timestamp": 1576253431
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> ah you mean just comparing different impls</p>",
        "id": 183373613,
        "sender_full_name": "centril",
        "timestamp": 1576253452
    },
    {
        "content": "<p>secondly, once we have that we can just check that what everyone else agrees on, happens to be one of the possible parse trees</p>",
        "id": 183373616,
        "sender_full_name": "eddyb",
        "timestamp": 1576253455
    },
    {
        "content": "<p>not against a formal grammar</p>",
        "id": 183373619,
        "sender_full_name": "centril",
        "timestamp": 1576253456
    },
    {
        "content": "<p>we've been talking about this for a year, I'm starting to suspect we don't have the free time between us combined to move forward :P (and in the meanwhile we keep forgetting what we can/should do)</p>",
        "id": 183373673,
        "sender_full_name": "eddyb",
        "timestamp": 1576253497
    },
    {
        "content": "<p>but also this is not #wg-grammar, sorry for offtopic</p>",
        "id": 183373682,
        "sender_full_name": "eddyb",
        "timestamp": 1576253505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116013\">@qmx</span> , <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> I've opened <a href=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Parser\" title=\"#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Parser\">https://rust-lang.zulipchat.com/#narrow/stream/185405-t-compiler.2Fwg-rls-2.2E0/topic/Parser</a> for discussing parser</p>",
        "id": 183373804,
        "sender_full_name": "matklad",
        "timestamp": 1576253568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I would like to have that in #t-compiler; not subscribed to wg-rls-2.0</p>",
        "id": 183373844,
        "sender_full_name": "centril",
        "timestamp": 1576253598
    },
    {
        "content": "<p>(and we already have a topic in that)</p>",
        "id": 183373851,
        "sender_full_name": "centril",
        "timestamp": 1576253605
    },
    {
        "content": "<p>Could you give a link?</p>",
        "id": 183373999,
        "sender_full_name": "matklad",
        "timestamp": 1576253696
    },
    {
        "content": "<p><a href=\"#narrow/stream/131828-t-compiler/topic/frontend.20library-ification\" title=\"#narrow/stream/131828-t-compiler/topic/frontend.20library-ification\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/frontend.20library-ification</a></p>",
        "id": 183374028,
        "sender_full_name": "centril",
        "timestamp": 1576253711
    }
]