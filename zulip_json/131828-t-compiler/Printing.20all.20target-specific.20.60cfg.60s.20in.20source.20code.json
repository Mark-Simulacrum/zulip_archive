[
    {
        "content": "<p>Is there a way to print all the <code>cfg</code> specific to a target for a given crate? I see <code>--print=cfg</code>, but that prints the cfgs that are <em>defined</em>, not the ones that are <em>used</em>. If this doesn't exist yet, would it be easy to add?</p>\n<p>For context, <a href=\"http://docs.rs\">docs.rs</a> thinking of switching away from building all tier-one targets by default and this would let it detect exactly which targets it should build: <a href=\"https://internals.rust-lang.org/t/pre-rfc-build-only-one-target-by-default-on-docs-rs/12804/5?u=jyn514\">https://internals.rust-lang.org/t/pre-rfc-build-only-one-target-by-default-on-docs-rs/12804/5?u=jyn514</a></p>",
        "id": 205350483,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596026453
    },
    {
        "content": "<p>It seems like that would inherently need to run before expansion.  One option is to use <code>syn</code> to extract the <code>cfg</code> attributes, and then parse the <code>cfg</code> expressions (there are several crates for that).  Unfortunately since it is pre-expansion, it can be difficult to follow the module hierarchy.  I don't see anything in rustc's expansion pass that collects any information that might be useful.  Also, IIRC, once a part of the tree is pruned by a non-passing cfg, the rest of that tree is not processed, so something like <code>#[cfg(feature=\"foo\")] mod stuff;</code> where <code>foo</code> isn't enabled means <code>mod</code> wouldn't get processed, so any target-specific <code>cfg</code> inside would be missed.  </p>\n<p>I'd imagine what you want to do would be difficult to do perfectly.</p>",
        "id": 205361543,
        "sender_full_name": "Eric Huss",
        "timestamp": 1596031886
    },
    {
        "content": "<p>yes and indeed <code>mod foo;</code> in that scenario might not even exist (or could contain non-Rust code, hypothetically)</p>",
        "id": 205362773,
        "sender_full_name": "simulacrum",
        "timestamp": 1596032416
    },
    {
        "content": "<p>well fortunately it doesn't have to be perfect, if it runs into some error <a href=\"http://docs.rs\">docs.rs</a> could always fall back to building all the targets</p>",
        "id": 205364243,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596033103
    },
    {
        "content": "<p>I like the idea of syn + cfg expressions. <a href=\"https://crates.io/crates/parse_cfg\">https://crates.io/crates/parse_cfg</a> looks useful for that.</p>",
        "id": 205364374,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1596033158
    }
]