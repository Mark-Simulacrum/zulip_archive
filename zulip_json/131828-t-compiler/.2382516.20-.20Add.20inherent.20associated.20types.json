[
    {
        "content": "<p>Mentored by <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>, see github issue for details</p>",
        "id": 227768203,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614260554
    },
    {
        "content": "<p>Anyway, once the initial part passes CI (hopefully), I think the obvious next step is to fix <code>let x : Foo::Bar;</code></p>",
        "id": 227768334,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614260621
    },
    {
        "content": "<p>CI passes \\o/</p>",
        "id": 227769019,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614260923
    },
    {
        "content": "<p>Okay, so thinking out loud about next steps:</p>\n<ul>\n<li>I know the diagnostic is emitted from <code>fn report_ambiguous_associated_type</code></li>\n<li>I should probably get a callstack with that \"throw on compile error\" flag</li>\n<li>Figure out how the code handles resolution and stuff, I guess.</li>\n</ul>",
        "id": 227783664,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614266473
    },
    {
        "content": "<p>the flag you're looking for is <code>-Ztreat-err-as-bug=1</code> (or another number to choose a later error)</p>",
        "id": 227784019,
        "sender_full_name": "oli",
        "timestamp": 1614266597
    },
    {
        "content": "<p>Yeah, I just found it</p>",
        "id": 227784077,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614266623
    },
    {
        "content": "<p>Is there a way to pass it to x.py?</p>",
        "id": 227784094,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614266631
    },
    {
        "content": "<p>I think you should also compare this with how associated consts are resolved, as these already work both for traits and inherent impls</p>",
        "id": 227784095,
        "sender_full_name": "oli",
        "timestamp": 1614266631
    },
    {
        "content": "<p>nope, but when your test fails, it will tell you its command line</p>",
        "id": 227784160,
        "sender_full_name": "oli",
        "timestamp": 1614266646
    },
    {
        "content": "<p>you can then copy that and add the new flag</p>",
        "id": 227784188,
        "sender_full_name": "oli",
        "timestamp": 1614266653
    },
    {
        "content": "<p>though you'll lose any nice diagnostics because of the =json flag that emits diagnostics as json, so remove that</p>",
        "id": 227784247,
        "sender_full_name": "oli",
        "timestamp": 1614266679
    },
    {
        "content": "<p>aaaaand we should probably make this a better experience</p>",
        "id": 227784269,
        "sender_full_name": "oli",
        "timestamp": 1614266687
    },
    {
        "content": "<p>Add that to the next sprint, I guess</p>",
        "id": 227784381,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614266719
    },
    {
        "content": "<p>Also, the \"crash on error\" trick isn't that helpful with delayed errors =/</p>",
        "id": 227785398,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614267095
    },
    {
        "content": "<p>huh... delayed errors also use that flag</p>",
        "id": 227785823,
        "sender_full_name": "oli",
        "timestamp": 1614267239
    },
    {
        "content": "<p>Yeah, but I think once they produce a crash the control flow has already left the part that interests me, so the crash's call stack isn't super useful</p>",
        "id": 227785981,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614267293
    },
    {
        "content": "<p>hmm</p>",
        "id": 227786688,
        "sender_full_name": "oli",
        "timestamp": 1614267550
    },
    {
        "content": "<p>I thought we were able to crash at the delaying site</p>",
        "id": 227786725,
        "sender_full_name": "oli",
        "timestamp": 1614267567
    },
    {
        "content": "<p>I wonder if, when <code>-Ztreat-err-as-bug</code> is called, we could just avoid delaying errors at all.</p>",
        "id": 227786735,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614267573
    },
    {
        "content": "<p>maybe that was a different flag?</p>",
        "id": 227786739,
        "sender_full_name": "oli",
        "timestamp": 1614267575
    },
    {
        "content": "<p>Try removing =1, it sounds like the flag isn't having any effect</p>",
        "id": 227786993,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614267683
    },
    {
        "content": "<p>You can use <code>-Z report-delayed-bugs</code> to change delayed bugs to errors (which <code>-Ztreat-err-as-bug</code> will then change to immedicate ICEs)</p>",
        "id": 227787199,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614267763
    },
    {
        "content": "<p>Not working. I think I'm using an argument incorrectly</p>",
        "id": 227789250,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614268482
    },
    {
        "content": "<p>Honestly what I'd like is a way to say \"Screw it, just print a stack trace for every single error you emit\"</p>",
        "id": 227789349,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614268515
    },
    {
        "content": "<p>(to be clear, I <em>am</em> displaying a stack trace, but that trace doesn't include <code>report_ambiguous_associated_type</code> for some reason)</p>",
        "id": 227789431,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614268547
    },
    {
        "content": "<p>I'm currently trying to wrap my head around <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_hir/src/def.rs#L206-L217\">this enum</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">Res</span><span class=\"o\">&lt;</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">HirId</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Def</span><span class=\"p\">(</span><span class=\"n\">DefKind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DefId</span><span class=\"p\">),</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Type namespace</span>\n<span class=\"w\">    </span><span class=\"n\">PrimTy</span><span class=\"p\">(</span><span class=\"n\">hir</span>::<span class=\"n\">PrimTy</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// `Self`, with both an optional trait and impl `DefId`. (...)</span>\n<span class=\"w\">    </span><span class=\"n\">SelfTy</span><span class=\"p\">(</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">DefId</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"cm\">/* trait */</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"cm\">/* impl */</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ToolMod</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// e.g., `rustfmt` in `#[rustfmt::skip]`</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Value namespace</span>\n<span class=\"w\">    </span><span class=\"n\">SelfCtor</span><span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"w\"> </span><span class=\"cm\">/* impl */</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// `DefId` refers to the impl</span>\n<span class=\"w\">    </span><span class=\"n\">Local</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"p\">),</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Macro namespace</span>\n<span class=\"w\">    </span><span class=\"n\">NonMacroAttr</span><span class=\"p\">(</span><span class=\"n\">NonMacroAttrKind</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// e.g., `#[inline]` or `#[rustfmt::skip]`</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// All namespaces</span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Could someone break down what the different variants represent for me? I get that the enum itself represents a path item (eg in <code>A::B::C</code> it represents both A, B and C), and a DefId is the id of a HIR item, but I can still figure out what some of the branches refer to.</p>",
        "id": 227914819,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614339184
    },
    {
        "content": "<p>Specific notes/questions:</p>\n<ul>\n<li><code>ToolMod</code>, <code>NonMacroAttr</code> and <code>Err</code> are easy, I think. Like, in <code>#[rustfmt::skip]</code>, <code>rustfmt</code> is a ToolMod and <code>skip</code> in a NonMacroAttr. I assume Err is a poison.</li>\n<li>What's the difference between <code>SelfTy</code> and <code>SelfCtor</code>? I get that they both refer to <code>Self</code>, but what are the extra params? Is it something like, <code>SelfTy</code> means <code>Self::something</code> and <code>SelfCtor</code> means <code>Self(value, value)</code>? What do <code>Option&lt;DefId&gt; /* trait */, Option&lt;(DefId, bool)&gt; /* impl */</code> and <code>DefId /* impl */</code> refer to?</li>\n<li>I was going to ask what's the difference between Def and PrimTy, but I found the answer by looking into the rustc_middle and rustc_hir docs, so I guess I rubber-ducked myself on that one.</li>\n</ul>",
        "id": 227915669,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614339677
    },
    {
        "content": "<p><code>Local</code> is a local variable, <code>PrimTy</code> is one of the int or float primitive types or <code>bool</code>, <code>char</code> or <code>str</code>. <code>SelfTy</code> is <code>Self</code> used as a type <code>SelfCtor</code> is <code>Self</code> used as a (tuple) constructor (<code>impl A { fn new() -&gt; A { Self(123)  }</code>) <code>Def</code> is almost  everything else.</p>",
        "id": 227915710,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614339710
    },
    {
        "content": "<p>Thanks!</p>\n<blockquote>\n<p>is Self used as a (tuple) constructor (<code>impl A { fn new() -&gt; A { Self(123)  }</code>)</p>\n</blockquote>\n<p>Not just a tuple constructor, I assume, since you can do <code>impl A { fn new() -&gt; A { Self { field: 0 } } }</code></p>",
        "id": 227915953,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614339843
    },
    {
        "content": "<p>That might be <code>SelfTy</code></p>",
        "id": 227916068,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614339897
    },
    {
        "content": "<p>Ok</p>",
        "id": 227916087,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614339907
    },
    {
        "content": "<p>So the big question is have left is, you have these two variants:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">SelfTy</span><span class=\"p\">(</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">DefId</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"cm\">/* trait */</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"cm\">/* impl */</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">SelfCtor</span><span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"w\"> </span><span class=\"cm\">/* impl */</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"c1\">// `DefId` refers to the impl</span>\n</code></pre></div>\n<p>What does the <code>/* impl */</code> field of the tuple represent, in both cases?</p>",
        "id": 227916240,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614339988
    },
    {
        "content": "<p>For <code>SelfCtor</code> it's the DefId of the impl.</p>",
        "id": 227916280,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614340022
    },
    {
        "content": "<p>For <code>SelfTy</code> it's <code>None</code> if it's in a trait item...</p>",
        "id": 227916309,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614340038
    },
    {
        "content": "<p>So the two <code>Option</code>s in <code>SelfTy</code> are mutually exclusive?</p>",
        "id": 227916364,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614340079
    },
    {
        "content": "<p>No, trait impls set both</p>",
        "id": 227916810,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614340363
    },
    {
        "content": "<p>So when is one not set?</p>",
        "id": 227916855,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614340397
    },
    {
        "content": "<p>I guess it wouldn't be set in the trait declaration itself</p>",
        "id": 227916883,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614340431
    },
    {
        "content": "<p>The trait declaration does set the impl id, inherent impls don't set the trait.</p>",
        "id": 227917067,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614340535
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227917093,
        "sender_full_name": "lcnr",
        "timestamp": 1614340559
    },
    {
        "content": "<p>So just to be clear, in this code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The first Self is a <code>SelfTy</code>, the second is a <code>SelfCtor</code>; in both cases they refer to the id of <code>impl A</code>?</p>",
        "id": 227917156,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614340571
    },
    {
        "content": "<p>(in my example) the trait declaration is <code>Some, None</code>, the impl of the trait is <code>Some, Some</code> afaik</p>",
        "id": 227917196,
        "sender_full_name": "lcnr",
        "timestamp": 1614340599
    },
    {
        "content": "<p>Right, that makes sense</p>",
        "id": 227917212,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614340611
    },
    {
        "content": "<p>Ok, I think I'm good to go, thanks!</p>",
        "id": 227917271,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614340649
    },
    {
        "content": "<p>I have another pretty technical question: in ast_ty_to_ty_inner, there's <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_typeck/src/astconv/mod.rs#L2217\">a match arm</a> where Hir types go when processing the associated type of a type param:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">ast_ty</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"n\">hir</span>::<span class=\"n\">TyKind</span>::<span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">hir</span>::<span class=\"n\">QPath</span>::<span class=\"n\">TypeRelative</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">qself</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">segment</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227964340,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614361729
    },
    {
        "content": "<p>So for instance, this match arm will apply to <code>fn foobar&lt;T : MyTrait&gt;(...) {    T::SomeType    }</code></p>",
        "id": 227964638,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614361834
    },
    {
        "content": "<p>However, it doesn't apply to <code>&lt;T as MyTrait&gt;::SomeType</code> and... I can't understand why?</p>",
        "id": 227964761,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614361874
    },
    {
        "content": "<p>I think part of my confusion is I'm a little fuzzy on <code>hir::Ty</code> vs <code>ty::TyS</code>, so I tend to be confused when code switches a lot between the two1</p>",
        "id": 227965028,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614361962
    },
    {
        "content": "<p><code>&lt;T as MyTrait&gt;::SomeType</code> is <code>QPath::Resolved(Some(\"T\"), \"MyTrait::SomeType\")</code></p>",
        "id": 227987150,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1614370843
    },
    {
        "content": "<p>I kind of don't get the abstraction at work here.</p>",
        "id": 227996239,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614374570
    },
    {
        "content": "<p>Like, depending on whether you have <code>T::AssociatedType</code> or <code>&lt;T&gt;::AssociatedType</code> or <code>&lt;T as MyTrait&gt;::AssociatedType</code>, the HIR representation is different, and the method for resolving it is completely different, even though in all three cases the compiler has exactly the same information as its disposal.</p>",
        "id": 227996530,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614374691
    },
    {
        "content": "<p>To give another example that confuses me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foo</span>: <span class=\"nc\">MyTrait1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">take_my_trait</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nc\">MyTrait2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">T</span>::<span class=\"n\">Foo</span>::<span class=\"n\">Bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 227996846,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614374838
    },
    {
        "content": "<p>This gives me a compile error, but if I replace the last line with <code>let x: &lt;T::Foo as MyTrait1&gt;::TheBar;</code>, it works.</p>\n<p>And looking at the <code>ast_ty_to_ty_inner</code> function, they take two completely different paths in the code; with different information \"available\" to the resolver; even though, intuitively, it feels like they should both be passed to the same function, with one or two parameters changed.</p>",
        "id": 227997125,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614374977
    },
    {
        "content": "<p>Like... I'm not sure exactly what I'm asking, but... it feels like there isn't one canonical way to get the type information of an associated type given the HIR type info of its \"parent\", but there really should be one?</p>",
        "id": 227997467,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614375105
    },
    {
        "content": "<p>Actually, I'm wondering the same thing about associated consts/methods. Is there a single, canonical way to the <code>Res</code> of a method, given its path and the type info of its parents? Or is it several method, depending on whether we have an inherent impl, an implicit trait bound, or an explicit <code>&lt;T as SomeTrait&gt;::</code> expression?</p>",
        "id": 227997938,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614375292
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.2382516.20-.20Add.20inherent.20associated.20types/near/227996530\">said</a>:</p>\n<blockquote>\n<p>Like, depending on whether you have <code>T::AssociatedType</code> or <code>&lt;T&gt;::AssociatedType</code> or <code>&lt;T as MyTrait&gt;::AssociatedType</code>, the HIR representation is different, and the method for resolving it is completely different, even though in all three cases the compiler has exactly the same information as its disposal.</p>\n</blockquote>\n<p>The compiler only <em>really</em> knows what you want in the third case. If we permitted the first two cases, then implementing another trait that has an associated type named <code>AssociatedType</code> would now make the resolution unresolvable, as we don't know which one you meant</p>",
        "id": 228200193,
        "sender_full_name": "oli",
        "timestamp": 1614590405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.2382516.20-.20Add.20inherent.20associated.20types/near/227997125\">said</a>:</p>\n<blockquote>\n<p>This gives me a compile error, but if I replace the last line with <code>let x: &lt;T::Foo as MyTrait1&gt;::TheBar;</code>, it works.</p>\n</blockquote>\n<p>Since <code>T</code> is known to only implement <code>MyTrait2</code>, we can directly look for <code>Foo</code> in the <code>impl Foo for WhateverTActuallyIs</code> block, because you can't possibly mean any other <code>Foo</code></p>",
        "id": 228200295,
        "sender_full_name": "oli",
        "timestamp": 1614590474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"263609\">Olivier FAURE</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.2382516.20-.20Add.20inherent.20associated.20types/near/227997938\">said</a>:</p>\n<blockquote>\n<p>Actually, I'm wondering the same thing about associated consts/methods. Is there a single, canonical way to the <code>Res</code> of a method, given its path and the type info of its parents? Or is it several method, depending on whether we have an inherent impl, an implicit trait bound, or an explicit <code>&lt;T as SomeTrait&gt;::</code> expression?</p>\n</blockquote>\n<p>Yes, this is what I remember. The rules are different in so many cases, it's mostly easier to run some different logic entirely when in another situation.</p>",
        "id": 228200457,
        "sender_full_name": "oli",
        "timestamp": 1614590578
    },
    {
        "content": "<blockquote>\n<p>If we permitted the first two cases, then implementing another trait that has an associated type named AssociatedType would now make the resolution unresolvable, as we don't know which one you meant</p>\n</blockquote>\n<p>That's what I thought at first, but the compiler is pretty capable of resolving these cases</p>",
        "id": 228213956,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614597719
    },
    {
        "content": "<p>The method <code>one_bound_for_assoc_type</code> takes care of making sure the associated type only has one resolution</p>",
        "id": 228214324,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614597941
    },
    {
        "content": "<p>Like, from a conceptual standpoint, there's not much difference between:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foobar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foobar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTraitParentTrait</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Associated</span>: <span class=\"nc\">MyTrait1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">MyTrait2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foobar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">MyTraitParentTrait</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">T</span>::<span class=\"n\">Associated</span>::<span class=\"n\">Foobar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait1</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foobar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">MyTrait2</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Foobar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foobar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">MyTrait1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">MyTrait2</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">T</span>::<span class=\"n\">Foobar</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>They're both ambiguous in the same way.</p>",
        "id": 228214839,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614598272
    },
    {
        "content": "<p>You can say that the difference is that, in the first case, <code>MyTraitParentTrait</code> could be defined in an external crate, that could add a new bound in a new version and break compilation that way. But in any case I'd think adding a bound to an associated type is a semver-breaking change anyway.</p>",
        "id": 228215212,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614598464
    },
    {
        "content": "<p>This is a bit of a tangent from the subject of inherent associated types, though. My main point the was the whole resolution system feels a bit brittle, because it handles a few specific use-cases in a non-principled way. So the simplest way to implement inherent associated types would be to monkey-patch in another use case, but I'm worried it would add to the technical debt.</p>",
        "id": 228215695,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614598767
    },
    {
        "content": "<p>I might look at the code in-depth again and do a write-up of what I think the principled solution would be.</p>",
        "id": 228215815,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1614598827
    }
]