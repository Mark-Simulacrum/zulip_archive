[
    {
        "content": "<p>Working on <a href=\"https://github.com/rust-lang/rust/issues/72129#issuecomment-627208767\">https://github.com/rust-lang/rust/issues/72129#issuecomment-627208767</a></p>\n<p>I have the following snippet:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(lazy_normalization_consts)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"o\">&gt;</span>::<span class=\"n\">C</span><span class=\"p\">]</span>: <span class=\"nb\">Default</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Which ends up with the following ICE:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">internal</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">librustc_typeck</span><span class=\"o\">/</span><span class=\"n\">check</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">689</span>:<span class=\"mi\">13</span>: <span class=\"nc\">escaping</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"n\">vars</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">predicate</span><span class=\"w\"> </span><span class=\"n\">Obligation</span><span class=\"p\">(</span><span class=\"n\">predicate</span><span class=\"o\">=</span><span class=\"n\">WellFormed</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">depth</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">lcnr</span><span class=\"o\">/</span><span class=\"n\">rust3</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">__check</span><span class=\"o\">/</span><span class=\"k\">const</span><span class=\"o\">-</span><span class=\"n\">ty</span><span class=\"o\">-</span><span class=\"n\">hrtb</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">16</span>:<span class=\"mi\">19</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"o\">&gt;</span>::<span class=\"n\">C</span><span class=\"p\">]</span>: <span class=\"nb\">Default</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                   </span><span class=\"o\">^^^^^^^</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203492409,
        "sender_full_name": "lcnr",
        "timestamp": 1594377577
    },
    {
        "content": "<p>Looks like I have to look into why the following already works fine, even if <code>'b</code> is not bound in the type of <code>Foo&lt;'b&gt;</code> here</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(lazy_normalization_consts)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">T</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">Zero</span><span class=\"o\">&gt;</span>::<span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203492896,
        "sender_full_name": "lcnr",
        "timestamp": 1594377973
    },
    {
        "content": "<p>Minimized:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#![feature(lazy_normalization_consts)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ok</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">6</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Bar</span>::<span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span>::<span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}]</span>:<span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203498732,
        "sender_full_name": "lcnr",
        "timestamp": 1594382980
    },
    {
        "content": "<p>I think it is kind of dangerous to just not emit WF predicates here <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 203498953,
        "sender_full_name": "lcnr",
        "timestamp": 1594383132
    },
    {
        "content": "<p>Do we have to refactor wf_check to currently deal with hrtb and change <code>Predicate::WellFormed</code> to use a binder?</p>",
        "id": 203499034,
        "sender_full_name": "lcnr",
        "timestamp": 1594383188
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/lazy.20norm.20higher.20ranked.20paths/near/203499034\">said</a>:</p>\n<blockquote>\n<p>Do we have to refactor wf_check to currently deal with hrtb and change <code>Predicate::WellFormed</code> to use a binder?</p>\n</blockquote>\n<p>yeah, there are also some other problems <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> seems like I can't just fix this in a few hours.</p>",
        "id": 203499573,
        "sender_full_name": "lcnr",
        "timestamp": 1594383543
    },
    {
        "content": "<p>The problem here is that</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Bar</span>::<span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span>::<span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}]</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>becomes</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">Anon</span><span class=\"p\">]</span>: <span class=\"nb\">Sized</span>\n<span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">Anon</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">Bar</span>::<span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span>::<span class=\"n\">ok</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// `&#39;a` is not in scope!</span>\n</code></pre></div>\n\n\n<p>impl Trait also has this problem and works around it by adding a generic to the opaque type. For constants this would look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">Anon</span>::<span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>: <span class=\"nb\">Sized</span>\n<span class=\"nc\">const</span><span class=\"w\"> </span><span class=\"n\">Foo</span>::<span class=\"n\">Anon</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\">  </span><span class=\"n\">Bar</span>::<span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span>::<span class=\"n\">ok</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// `&#39;a` is a `ReEarlyBound` here</span>\n</code></pre></div>",
        "id": 203499970,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1594383825
    },
    {
        "content": "<p>Is this something I could help fix, or is it a bit advanced for me right now?</p>",
        "id": 210131753,
        "sender_full_name": "Hameer Abbasi",
        "timestamp": 1600177862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> is there something stopping us from treating higher ranked lifetimes as free regions in the constant?</p>",
        "id": 217553422,
        "sender_full_name": "lcnr",
        "timestamp": 1606054884
    },
    {
        "content": "<p>I'm not sure what you mean.</p>",
        "id": 217553618,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1606055113
    },
    {
        "content": "<p>so when we have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Bar</span>::<span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span>::<span class=\"n\">ok</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}]</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217553634,
        "sender_full_name": "lcnr",
        "timestamp": 1606055133
    },
    {
        "content": "<p>my idea was to treat <code>'a</code> in the anon const as a latebound lifetime so that we don't have to explicitly add a new generic param to the anon const</p>",
        "id": 217553694,
        "sender_full_name": "lcnr",
        "timestamp": 1606055197
    },
    {
        "content": "<p>i am not yet sure if that idea even makes sense though, mostly looking into this rn and still a bit overwhelmed</p>",
        "id": 217553718,
        "sender_full_name": "lcnr",
        "timestamp": 1606055263
    },
    {
        "content": "<p>ok, so I think I know how to go forward here...</p>",
        "id": 217555296,
        "sender_full_name": "lcnr",
        "timestamp": 1606057374
    },
    {
        "content": "<ol>\n<li>add a <code>generics: Generics&lt;'hir&gt;</code> field to <code>hir::AnonConst</code></li>\n</ol>",
        "id": 217555304,
        "sender_full_name": "lcnr",
        "timestamp": 1606057390
    },
    {
        "content": "<ol start=\"2\">\n<li>use that in <code>generics_of</code></li>\n</ol>",
        "id": 217555322,
        "sender_full_name": "lcnr",
        "timestamp": 1606057399
    },
    {
        "content": "<ol start=\"3\">\n<li>in ast_lowering, pretty much copy what we are doing for async return types and add all lifetimes as generic params when lowering consts</li>\n</ol>",
        "id": 217555345,
        "sender_full_name": "lcnr",
        "timestamp": 1606057436
    },
    {
        "content": "<p>That sounds plausible.</p>",
        "id": 217555481,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1606057616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span>  opened <a href=\"https://github.com/rust-lang/rust/issues/79313\">#79313</a> but that still has quite a few bugs and issues.</p>\n<p>I intend to work on this for the next few weeks during which I hopefully get this ready.</p>",
        "id": 217564572,
        "sender_full_name": "lcnr",
        "timestamp": 1606071627
    },
    {
        "content": "<p>assigned you for review but it really isn't finished yet, so there's no pressure for you to look at it for now</p>",
        "id": 217564599,
        "sender_full_name": "lcnr",
        "timestamp": 1606071708
    },
    {
        "content": "<p>will ping you once it's fairly ready</p>",
        "id": 217564627,
        "sender_full_name": "lcnr",
        "timestamp": 1606071723
    },
    {
        "content": "<p>well, looks like it works, still have to do some cleanup and there are some remaining issues here</p>",
        "id": 217645513,
        "sender_full_name": "lcnr",
        "timestamp": 1606147013
    },
    {
        "content": "<p>one annoyance is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">whatever</span><span class=\"p\">()]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217645575,
        "sender_full_name": "lcnr",
        "timestamp": 1606147037
    },
    {
        "content": "<p>we now lower this to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ANON_CT</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">whatever</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ANON_CT</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217645648,
        "sender_full_name": "lcnr",
        "timestamp": 1606147076
    },
    {
        "content": "<p>meaning that <code>'a</code> is suddenly used</p>",
        "id": 217645705,
        "sender_full_name": "lcnr",
        "timestamp": 1606147086
    },
    {
        "content": "<p>we also lower</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217645815,
        "sender_full_name": "lcnr",
        "timestamp": 1606147131
    },
    {
        "content": "<p>to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ANON_CT</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ANON_CT</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217646082,
        "sender_full_name": "lcnr",
        "timestamp": 1606147219
    },
    {
        "content": "<p>which doesn't really matter but feels a bit suboptimal</p>",
        "id": 217646122,
        "sender_full_name": "lcnr",
        "timestamp": 1606147233
    },
    {
        "content": "<p>oh well, looks like the second example still has a bug</p>",
        "id": 217646465,
        "sender_full_name": "lcnr",
        "timestamp": 1606147362
    },
    {
        "content": "<p>f</p>",
        "id": 217646468,
        "sender_full_name": "lcnr",
        "timestamp": 1606147362
    },
    {
        "content": "<p>oh well, looks like the second example was actually fine, I just forgot to add <code>feature(const_generics)</code></p>",
        "id": 217652609,
        "sender_full_name": "lcnr",
        "timestamp": 1606150063
    },
    {
        "content": "<p>this still fails :/</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// check-pass</span>\n<span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"cp\">#![allow(incomplete_features)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">b</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">c</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">b</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"o\">&lt;'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Baz</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">Bar</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">b</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">c</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}]</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"p\">}]</span>: <span class=\"nb\">Sized</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 217654277,
        "sender_full_name": "lcnr",
        "timestamp": 1606150832
    },
    {
        "content": "<p>because wf tries to add a const evaluatable predicate for the inner array which is inside of a binder</p>",
        "id": 217655296,
        "sender_full_name": "lcnr",
        "timestamp": 1606151277
    },
    {
        "content": "<p>well, mostly looking good now</p>\n<p>still want to refactor lifetime resolution and now have to deal with some bug regarding typechecking which i still have to look into.</p>",
        "id": 217762907,
        "sender_full_name": "lcnr",
        "timestamp": 1606229192
    },
    {
        "content": "<p>ok, ready for review</p>",
        "id": 217796448,
        "sender_full_name": "lcnr",
        "timestamp": 1606243238
    }
]