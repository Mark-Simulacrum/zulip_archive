[
    {
        "content": "<p>Is there an alternative to <code>Rc</code> that is just like <code>Rc</code> but without the weak count? I have a suspicion (based on a single profile) that it could save a small but non-trivial amount of memory use in the compiler. Also, because the compiler already uses <code>Lrc</code> everywhere instead of <code>Rc</code>, if there is such a thing, changing the compiler to use it would be really easy.</p>",
        "id": 278098402,
        "sender_full_name": "nnethercote",
        "timestamp": 1649286581
    },
    {
        "content": "<p>For just getting memory numbers, maybe you could change <code>Rc</code> to use <code>u32</code> instead of <code>usize</code>?  A quick scan suggests that might be a ≈8 line change.</p>",
        "id": 278099014,
        "sender_full_name": "scottmcm",
        "timestamp": 1649287006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266526\">@Jakub Beránek</span> Interested in trying this?  <code>deep-vector</code> is the benchmark that I would start with, I know it'll have a measurable effect there, esp. if you use DHAT and look at the <code>gmax</code> (global max == peak heap memory) numbers.</p>",
        "id": 278100859,
        "sender_full_name": "nnethercote",
        "timestamp": 1649288367
    },
    {
        "content": "<p>If there are unforeseen complications of temporarily shrinking the field sizes, it might be easier to just temporarily duplicate <code>Rc</code> and then remove everything relating to the weak count</p>",
        "id": 278102090,
        "sender_full_name": "nnethercote",
        "timestamp": 1649289389
    },
    {
        "content": "<p>there's <a href=\"https://crates.io/crates/strong_rc\">https://crates.io/crates/strong_rc</a></p>",
        "id": 278102235,
        "sender_full_name": "cuviper",
        "timestamp": 1649289500
    },
    {
        "content": "<p>but it looks abandoned and unused</p>",
        "id": 278102247,
        "sender_full_name": "cuviper",
        "timestamp": 1649289507
    },
    {
        "content": "<p>it was an open question as of Rust 1.0 if the stdlib should support both an Rc that supports weak and an Rc that didn't support weak, so that you could take up less space if you didn't need weak refs. if this does show a significant effect then maybe it's worth adding it to std</p>",
        "id": 278105693,
        "sender_full_name": "bstrie",
        "timestamp": 1649292818
    },
    {
        "content": "<p>We could make weakness a generic parameter</p>",
        "id": 278118728,
        "sender_full_name": "oli",
        "timestamp": 1649308826
    },
    {
        "content": "<p>for <code>Lrc</code> maybe we could do both: a smaller width for the strong count and removing the weak count ?</p>",
        "id": 278123933,
        "sender_full_name": "lqd",
        "timestamp": 1649314690
    },
    {
        "content": "<p>That will only help if the <code>T</code> within the <code>Lrc</code> has an alignment of 4 or less. I would guess that's not so common?</p>",
        "id": 278124950,
        "sender_full_name": "nnethercote",
        "timestamp": 1649315433
    },
    {
        "content": "<p>ah yes unlikely</p>",
        "id": 278125106,
        "sender_full_name": "lqd",
        "timestamp": 1649315574
    },
    {
        "content": "<p>(the quick test scott suggested looks to be around -1.6% on <code>deep-vector</code> at t-gmax)</p>",
        "id": 278125125,
        "sender_full_name": "lqd",
        "timestamp": 1649315595
    },
    {
        "content": "<p>is <code>deep-vector</code> the most affected benchmark? if so, <code>-1.6%</code> doesn't sound that stellar. <span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> do you want me to try something else?</p>\n<p>On a slightly related note, I was also experimenting with using thinner versions of <code>Vec</code> and <code>Box&lt;[]&gt;</code> in places where the data doesn't grow in <code>rustdoc</code>. I suppose that there are more places in the compiler where this might make sense. But so far the results have been mostly underwhelming.</p>",
        "id": 278127185,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1649317131
    },
    {
        "content": "<p>Ok, 1.6% on deep-vector isn't great.</p>",
        "id": 278133269,
        "sender_full_name": "nnethercote",
        "timestamp": 1649320961
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266526\">@Jakub Beránek</span> There is already this: <a href=\"https://github.com/rust-lang/rust/blob/b5da80871d5e22401e03ce5ed73200ece8bdc7a6/compiler/rustc_data_structures/src/thin_vec.rs#L9\">https://github.com/rust-lang/rust/blob/b5da80871d5e22401e03ce5ed73200ece8bdc7a6/compiler/rustc_data_structures/src/thin_vec.rs#L9</a></p>",
        "id": 278133302,
        "sender_full_name": "nnethercote",
        "timestamp": 1649320987
    },
    {
        "content": "<p>Which is a quick and dirty version</p>",
        "id": 278133311,
        "sender_full_name": "nnethercote",
        "timestamp": 1649320996
    },
    {
        "content": "<p><a href=\"https://docs.rs/thin-vec/latest/thin_vec/\">https://docs.rs/thin-vec/latest/thin_vec/</a> is a better version</p>",
        "id": 278133330,
        "sender_full_name": "nnethercote",
        "timestamp": 1649321013
    },
    {
        "content": "<p>Might be worth replacing the compiler's sub-optimal ThinVec with the proper one</p>",
        "id": 278133432,
        "sender_full_name": "nnethercote",
        "timestamp": 1649321051
    },
    {
        "content": "<p>I know, but in the <code>rustdoc</code> case, the vecs weren't usually empty, they just were immutable after build. So I was just trying to shorten the size from <code>24</code> (<code>Vec&lt;T&gt;</code>) bytes to <code>16</code>(<code>Box&lt;[T]&gt;</code>), and potentially to <code>8</code> (<code>Box&lt;TypeThatStoresSliceAndSizeOnHeap&gt;</code>).</p>",
        "id": 278133748,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1649321257
    },
    {
        "content": "<p>Ok, that sounds like a plan - trying to replace <code>rustc</code> thin_vec with the <code>thin_vec</code> crate. I'll try.</p>",
        "id": 278134015,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1649321435
    },
    {
        "content": "<p>Current ThinVec  in <code>rustc</code> allows for cheap converstion to/from Vec. <code>thinvec</code> crate doesn't, but it could be modified to support at least cheap <code>to_vec</code> and then almost-always-cheap <code>from_vec</code>, if the len+cap were stored at the end of the allocation (currently they are stored at the begining). There was a discussion about that some time ago. Not sure how relevant this is for <code>rustc</code>, though.</p>",
        "id": 278138996,
        "sender_full_name": "panstromek",
        "timestamp": 1649324558
    },
    {
        "content": "<p>I tried to convert it, out of the box it has a small negative effect (up to 1 % regression in icounts and memory). As <span class=\"user-mention\" data-user-id=\"208862\">@panstromek</span> mentioned, the conversions are not zero-cost, which might explain the regression. However, a more important fact is that <code>ThinVec</code> isn't used almost anywhere.. aside from one usage in rustdoc and one in some query diagnostics, the only real usage that I found is for attributes of expressions. And I guess that 99.9 % of all expressions don't have any attributes. So maybe first a more impactful change would be to actually try to find places where something like a <code>ThinVec</code> might be useful. It should basically be <code>Vec</code>s that are contained in things that are instantiated a lot of times and most of the time the <code>Vec</code> is empty. It would be useful to have some instrumentation framework to find these cases <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 278203513,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1649354561
    },
    {
        "content": "<p>Oh! Here's one I prepared earlier.</p>",
        "id": 278240381,
        "sender_full_name": "nnethercote",
        "timestamp": 1649374886
    },
    {
        "content": "<p>You can do this with the \"ad hoc profiling\" feature of <code>dhat-rs</code>.</p>",
        "id": 278240389,
        "sender_full_name": "nnethercote",
        "timestamp": 1649374894
    },
    {
        "content": "<p>Here's a diff where I used it to profile all the places where symbols were getting interned:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_driver</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_driver</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"></span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">ce3a3f5a3a2</span><span class=\"o\">..</span><span class=\"mi\">1972</span><span class=\"n\">ae3e083</span><span class=\"w\"> </span><span class=\"mi\">100644</span><span class=\"w\"></span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_driver</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_driver</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"o\">-</span><span class=\"k\">type</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"dylib\"</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">dependencies</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"n\">dhat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"/home/njn/dev/dhat-rs\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">libc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.2\"</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">atty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.2\"</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">tracing</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.28\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_driver</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_driver</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"n\">ff94341142</span><span class=\"o\">..</span><span class=\"mi\">6</span><span class=\"n\">c8a1d8e14a</span><span class=\"w\"> </span><span class=\"mi\">100644</span><span class=\"w\"></span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_driver</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_driver</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1354</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">1354</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">super</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">install</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">profiler</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dhat</span>::<span class=\"n\">Profiler</span>::<span class=\"n\">builder</span><span class=\"p\">().</span><span class=\"n\">ad_hoc</span><span class=\"p\">().</span><span class=\"n\">trim_backtraces</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)).</span><span class=\"n\">file_name</span><span class=\"p\">(</span><span class=\"s\">\"/home/njn/rustc-ad-hoc.json\"</span><span class=\"p\">).</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start_time</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instant</span>::<span class=\"n\">now</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">start_rss</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_resident_set_size</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">init_rustc_env_logger</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1380</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">1381</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">print_time_passes_entry</span><span class=\"p\">(</span><span class=\"s\">\"total\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">start_time</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">start_rss</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end_rss</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">profiler</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">process</span>::<span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">exit_code</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_span</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_span</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"></span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">781</span><span class=\"n\">fb8c1e5d</span><span class=\"o\">..</span><span class=\"mi\">72</span><span class=\"n\">b2a6d96bf</span><span class=\"w\"> </span><span class=\"mi\">100644</span><span class=\"w\"></span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_span</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_span</span><span class=\"o\">/</span><span class=\"n\">Cargo</span><span class=\"p\">.</span><span class=\"n\">toml</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">doctest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">dependencies</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"n\">dhat</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"/home/njn/dev/dhat-rs\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">rustc_serialize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"../rustc_serialize\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">rustc_macros</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"../rustc_macros\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">rustc_data_structures</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"../rustc_data_structures\"</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_span</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">symbol</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_span</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">symbol</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">309</span><span class=\"n\">c305293f</span><span class=\"o\">..</span><span class=\"mi\">1</span><span class=\"n\">fcb50a9f48</span><span class=\"w\"> </span><span class=\"mi\">100644</span><span class=\"w\"></span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_span</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">symbol</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">compiler</span><span class=\"o\">/</span><span class=\"n\">rustc_span</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">symbol</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1641</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">1641</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n\n<span class=\"w\">     </span><span class=\"sd\">/// Maps a string to its interned representation.</span>\n<span class=\"w\">     </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">intern</span><span class=\"p\">(</span><span class=\"n\">string</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">        </span><span class=\"n\">dhat</span>::<span class=\"n\">ad_hoc_event</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">         </span><span class=\"n\">with_session_globals</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">session_globals</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">session_globals</span><span class=\"p\">.</span><span class=\"n\">symbol_interner</span><span class=\"p\">.</span><span class=\"n\">intern</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 278240450,
        "sender_full_name": "nnethercote",
        "timestamp": 1649374934
    },
    {
        "content": "<p>You can reuse most of this, but move the <code>dhat::ad_hoc_event(1)</code> call to the <code>drop</code> fn for <code>Vec</code>, <em>if the length is zero</em>.</p>",
        "id": 278240767,
        "sender_full_name": "nnethercote",
        "timestamp": 1649375158
    },
    {
        "content": "<p>(This assumes that there aren't too many vecs that have a non-zero length and then get trimmed down to zero.)</p>",
        "id": 278240854,
        "sender_full_name": "nnethercote",
        "timestamp": 1649375215
    },
    {
        "content": "<p>Then you'll get a profile that shows the locations most responsible for dropping empty vecs</p>",
        "id": 278240877,
        "sender_full_name": "nnethercote",
        "timestamp": 1649375233
    },
    {
        "content": "<p>That's really cool! I was thinking of heavyweights solutions (Valgrind, Pin, LLVM instrumentation), but something simple like this might actually be enough. I hit a roadblock though, because depending on <code>dhat-rs</code> in <code>alloc</code> (where <code>Vec</code> is located) creates a cycle, since <code>dhat-rs</code> also depends on <code>alloc</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 278319866,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1649431425
    },
    {
        "content": "<p>But I suppose that I can just use backtrace manually and gather this data by some quick little hack.</p>",
        "id": 278320317,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1649431633
    },
    {
        "content": "<p>Hmm, <code>backtrace</code> can't be used in <code>no_std</code> environments easily. The plot thickens.</p>",
        "id": 278321086,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1649431980
    },
    {
        "content": "<p>Does anyone have an idea how to (easily) get a backtrace from inside the <code>alloc</code>crate?</p>",
        "id": 278324154,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1649433323
    },
    {
        "content": "<p>as a hack maybe you could define some public C function in std and then refer to it as extern function in alloc</p>",
        "id": 278325633,
        "sender_full_name": "The 8472",
        "timestamp": 1649433901
    },
    {
        "content": "<p>not sure if that'd work out at link time</p>",
        "id": 278325853,
        "sender_full_name": "The 8472",
        "timestamp": 1649433986
    },
    {
        "content": "<p>You can define an <code>Option&lt;fn()&gt;</code> that exists in alloc that is called by code in alloc, but is assigned by code outside alloc.</p>",
        "id": 278377246,
        "sender_full_name": "Ahmed Charles",
        "timestamp": 1649464111
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"336395\">@Ahmed Charles</span> thanks, that has worked! it seems that using <code>dhat</code> in the <code>Drop</code> of <code>Vec</code> is not a good idea though, the compilation then gets super slow (like waiting 5 minutes for first output from the compiler). but that should be solvable with another approach.</p>",
        "id": 278422836,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1649527637
    },
    {
        "content": "<p>Thanks for the hints, I managed to get the instrumentation working and put its description <a href=\"#narrow/stream/247081-t-compiler.2Fperformance/topic/Rust.20instrumentation.20data/near/278571548\">here</a>.</p>",
        "id": 278571609,
        "sender_full_name": "Jakub Beránek",
        "timestamp": 1649691063
    }
]