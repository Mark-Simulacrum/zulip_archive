[
    {
        "content": "<p>I just noticed something, and I'd like to know whether this is intentional behavior or is accidental.</p>\n<p>I was debugging rustc.exe (on Windows, but all of this repros on Linux, too), and I noticed that there was more than one symbol (function) that had the exact same signature. It was a generic function, <code>feature_err_issue</code>, although the specific function isn't important. I verified that the type arguments were the same (they were) and that I was looking at a non-inlined instance of the function. (There were also inlined copies of this function, but I'm ignore that for now.).</p>\n<p>So I looked at the undecorated symbol names, which are:</p>\n<div class=\"codehilite\"><pre><span></span><code>_ZN13rustc_session5parse17feature_err_issue17h9fe8fee81990e8abE\n_ZN13rustc_session5parse17feature_err_issue17hfb08b04cceac9a60E\n_ZN13rustc_session5parse17feature_err_issue17h320ef2c1e4daeaeeE\n_ZN13rustc_session5parse17feature_err_issue17he074cef53958c416E\n</code></pre></div>\n<p>The thing that keeps these symbols from being the same is that they have different SVH suffixes. I checked the actual function bodies, and they are identical (even down to register allocator choices), so it's not like there was some subtle difference in compiler settings in each of the dependent crates.</p>\n<p>So it looks like <code>rustc_session::parse::feature_err_issue</code> is defined in <code>rustc_session</code>, and used in a variety of other crates. So during monomorphization, is the SVH of the crate which triggered the instantiation of the function the thing that is being used to tag this symbol, rather than the SVH of the crate that contains the definition of the symbol?</p>",
        "id": 216919461,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605554906
    },
    {
        "content": "<p>I created a minimal repro (4 crates) and verified that the same thing happens for those crates. I checked optimized, LTO optimized, both have same behavior.</p>",
        "id": 216921095,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605555729
    },
    {
        "content": "<p>I think this is intentional. You can try building with <code>-Zshare-generics=on</code>.</p>",
        "id": 216921803,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605556167
    },
    {
        "content": "<p>Ok. Why would we ever not want to share generics?</p>",
        "id": 216922263,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605556388
    },
    {
        "content": "<p>It produces code that is quite a lot slower</p>",
        "id": 216922422,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605556457
    },
    {
        "content": "<p>Because inlining becomes impossible without LTO</p>",
        "id": 216922451,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1605556470
    },
    {
        "content": "<p>In this case, though, the compiler has already decided not to inline a function. So there's going to be a non-inlined function body. I'm curious why we wouldn't want COMDAT-folding (or similar techniques on other platforms) to combine these into a single function body, at link time.</p>",
        "id": 216922620,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605556551
    },
    {
        "content": "<p>This seems orthogonal to the decision of whether or not to inline a generic function.</p>",
        "id": 216922692,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605556569
    },
    {
        "content": "<p>Why not build things as they are now, but use the SVH suffix of the crate that defines the generic function, rather than the crates that trigger its instantiation, and mark the generated function as \"multiple defs are OK, use any\"?</p>",
        "id": 216923383,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605556869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"274471\">Arlie Davis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Generics.20duplication.20across.20crate.20boundaries/near/216922620\">said</a>:</p>\n<blockquote>\n<p>In this case, though, the compiler has already decided not to inline a function.</p>\n</blockquote>\n<p>It hasn't at when deciding the codegen unit partitioning. It is LLVM that decides this after all mono items have be translated into LLVM-ir.<br>\n<span class=\"user-mention silent\" data-user-id=\"274471\">Arlie Davis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Generics.20duplication.20across.20crate.20boundaries/near/216922620\">said</a>:</p>\n<blockquote>\n<p>I'm curious why we wouldn't want COMDAT-folding (or similar techniques on other platforms) to combine these into a single function body, at link time.</p>\n</blockquote>\n<p>This used to be used by rustc, but it was changed. I don't quite remember why, but it may be related to linker problems. (maybe it got much slower?) Also COMDAT-folding inhibits certain optimizations around atomics. LLVM may decide to strengthen the atomic orderings of same function in different incompatible ways in different codegen units depending on which functions call them. Also LLVM may decide that all functions that could call a certain function use the same constant as an argument and replace that argument with the constant <strong>without</strong> inlining. If this constant happens to be different in different codegen units, that would be a problem. For this reason COMDAT-folding prevents this optimization.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"274471\">Arlie Davis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Generics.20duplication.20across.20crate.20boundaries/near/216923383\">said</a>:</p>\n<blockquote>\n<p>Why not build things as they are now, but use the SVH suffix of the crate that defines the generic function, rather than the crates that trigger its instantiation</p>\n</blockquote>\n<p>It already does this as far as I know, but <code>feature_err_issue</code> has a generic parameter <code>span: impl Into&lt;MultiSpan&gt;</code> which probably gets passed different types.</p>",
        "id": 216980253,
        "sender_full_name": "bjorn3",
        "timestamp": 1605604631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> , thanks for the background on this. I know it's a complex topic, so I'm asking to learn, not to impugn any decisions that have been made.</p>\n<blockquote>\n<p>It already does this as far as I know, but feature_err_issue has a generic parameter span: impl Into&lt;MultiSpan&gt; which probably gets passed different types.</p>\n</blockquote>\n<p>In this case, I'm certain that there are duplicates, even for the same generic type args. That's what prompted me to start this thread.</p>",
        "id": 217187792,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1605729166
    },
    {
        "content": "<p>If you use <code>-Zsymbol-mangling-version=v0</code>, the generic parameters should be encoded.</p>",
        "id": 217241352,
        "sender_full_name": "bjorn3",
        "timestamp": 1605775389
    }
]