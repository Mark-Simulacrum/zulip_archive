[
    {
        "content": "<p>I'm trying to figure out under what circumstances rust can optimize away bounds checks if it knows an index is in bounds. I wrote a very simple test case, and can't seem to get rust to omit the bounds checks, even if I use <code>assert!</code>. (I know that I could trivially write it using iterators instead, but I'm trying to figure out rust's ability to optimize here.)</p>",
        "id": 196842021,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588893332
    },
    {
        "content": "<p>I wrote this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">slice</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u64</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">start</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">end</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"o\">..</span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">total</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">total</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 196842037,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588893349
    },
    {
        "content": "<p>I put that into the compiler explorer, with <code>-O</code>, and the resulting assembly looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>f:\n        push    rax\n        cmp     rsi, rdx\n        jbe     .LBB5_6\n        cmp     rdx, rcx\n        jae     .LBB5_6\n        xor     eax, eax\n.LBB5_3:\n        cmp     rdx, rsi\n        jae     .LBB5_7\n        add     rax, qword ptr [rdi + 8*rdx]\n        add     rdx, 1\n        cmp     rcx, rdx\n        jne     .LBB5_3\n        pop     rcx\n        ret\n.LBB5_7:\n        lea     rax, [rip + .L__unnamed_5]\n        mov     rdi, rdx\n        mov     rdx, rax\n        call    qword ptr [rip + core::panicking::panic_bounds_check@GOTPCREL]\n        ud2\n.LBB5_6:\n        call    std::panicking::begin_panic\n        ud2\n</code></pre></div>",
        "id": 196842141,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588893411
    },
    {
        "content": "<p>Based on the x86 calling convention, rdi contains the slice base address, rsi contains the slice length, rdx contains <code>start</code>, and rcx contains <code>end</code>.</p>",
        "id": 196842249,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588893486
    },
    {
        "content": "<p>So, the first two comparisons verify the assertion and jump to <code>.LBB5_6</code> if it fails, to panic.</p>",
        "id": 196842284,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588893524
    },
    {
        "content": "<p>Then inside the loop, there's still a comparison of rdx to rsi, and a jump to <code>.LBB5_7</code> to panic if out of bounds.</p>",
        "id": 196842324,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588893561
    },
    {
        "content": "<p>That's <em>exactly the same comparison</em>.</p>",
        "id": 196842345,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588893584
    },
    {
        "content": "<p>Should rustc be able to optimize away that bounds check?</p>",
        "id": 196842417,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588893619
    },
    {
        "content": "<p>Submitted as <a href=\"https://github.com/rust-lang/rust/issues/71997\" title=\"https://github.com/rust-lang/rust/issues/71997\">https://github.com/rust-lang/rust/issues/71997</a> .</p>",
        "id": 196844575,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588895316
    },
    {
        "content": "<p>it would be good, <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>, to create comparable C code and compare with clang</p>",
        "id": 196890838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588942028
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> What would be the equivalent of a bounds-checked slice in C?</p>",
        "id": 196926603,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588959498
    },
    {
        "content": "<p>manually checking for <code>idx &lt; len</code> I guess <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 196927732,
        "sender_full_name": "lcnr",
        "timestamp": 1588960036
    },
    {
        "content": "<p>If you're fine with C++, you could use std::vector and its at(i) method, I guess?</p>",
        "id": 196929243,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588960765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@Hanna Kruppe</span> That works. I'm not even slightly experienced with <em>modern</em> C++, but I know how to use STL.</p>",
        "id": 196931755,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588961976
    },
    {
        "content": "<p>I meant more like, if C++ is as good as C as point of comparison :p</p>",
        "id": 196931867,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1588962037
    },
    {
        "content": "<p>Ah, fair.</p>",
        "id": 196931973,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588962094
    },
    {
        "content": "<p>Worth trying regardless.</p>",
        "id": 196931981,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588962098
    },
    {
        "content": "<p>Heh, a fair question, I think C++ with <code>at</code> would be fair</p>",
        "id": 196933424,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588962860
    },
    {
        "content": "<p>I'm not so interested in comparing against <em>languages</em></p>",
        "id": 196933433,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588962866
    },
    {
        "content": "<p>as I am in checking whether clang/LLVM does this sort of optimization in ideal cases</p>",
        "id": 196933449,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588962876
    },
    {
        "content": "<p>and trying to see what aspect of Rust's translation is preventing it from doing so, if so</p>",
        "id": 196933461,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588962888
    },
    {
        "content": "<p>in other words, <em>rustc</em> wouldn't be doing this optimization, llvm would</p>",
        "id": 196933478,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588962900
    },
    {
        "content": "<p>but... but... what if wg-mir-opt does it and then noone notices? :P</p>",
        "id": 196933695,
        "sender_full_name": "oli",
        "timestamp": 1588963016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I didn't mean that to imply rustc <em>couldn't</em> :)</p>",
        "id": 196934102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588963236
    },
    {
        "content": "<p>or <em>shouldn't</em></p>",
        "id": 196934109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588963240
    },
    {
        "content": "<p>Language comparisons aside, it turns out that Rust will do this optimization in some cases, but there's what appears to be an off-by-one issue preventing it from doing so in this case.</p>",
        "id": 196934310,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588963335
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/issues/71997#issuecomment-625958662\" title=\"https://github.com/rust-lang/rust/issues/71997#issuecomment-625958662\">https://github.com/rust-lang/rust/issues/71997#issuecomment-625958662</a> and the comment above it.</p>",
        "id": 196934333,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588963350
    },
    {
        "content": "<p>(That's leaving aside that the <code>assert!</code> should be enough, without the <code>min</code>.)</p>",
        "id": 196934399,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588963384
    },
    {
        "content": "<p>I just confirmed that naively translated test cases in C++ have about the same effect.</p>",
        "id": 196936665,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588964472
    },
    {
        "content": "<p>clang with C++ can't eliminate the bounds check for <code>.at(i)</code> with just the assert, nor can it with <code>if (end &gt; slice.size()) end = slice.size();</code>, but it <em>can</em> if I change that to <code>&gt;=</code>.</p>",
        "id": 196936818,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588964546
    },
    {
        "content": "<p>And the generated code looks approximately the same, modulo how C++ spells the \"panic on bounds check failure\".</p>",
        "id": 196936851,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1588964564
    },
    {
        "content": "<p>I poked at the C++ case a bit. The bounds check gets hoisted out of the loop (this is a new \"loop exit predication\" feature in LLVM 10), but not optimized away. (It would be possible to get a pretty good result by performing a loop unswitch after induction variable simplification, which would keep only a single unnecessary check before the loop.)</p>",
        "id": 197006332,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1589050244
    },
    {
        "content": "<p>Neither SCEV nor InstCombine manage to fold the hoisted check. On the SCEV level we need to prove that <code>(((-1 * %start) + (%slice_len umax %start)) umin (-1 + (-1 * %start) + %end)) &lt; ((-1 * %start) + (%slice_len umax %start))</code>, which is not so easy. The <code>%slice_len umax %start</code> parts really should get folded, but don't, because only non-recursive reasoning is used for that, while loop-entry-guard reasoning is needed to simplify.</p>",
        "id": 197006395,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1589050370
    },
    {
        "content": "<p>For the rest, things would go well if we could eliminate the (-1 * %start) part from both sides, but that's only possible under nowrap conditions. Which we do have here, but that requires reasoning about multiple conditions at the same time.</p>",
        "id": 197006465,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1589050502
    },
    {
        "content": "<p>When I tested with godbolt and LLVM trunk, it didn't pull the bounds check out of the lop.</p>",
        "id": 197011747,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1589056726
    }
]