[
    {
        "content": "<p>I'm trying to define a gigabyte large static via <code>MaybeUninit::uninit()</code> which leads to extreme memory usage and long compilation times in <code>rustc</code> (1GB array ~ 20GB memory) Similarly when declaring such a large static array. Somewhat understadable. But is there a way and would it be interesting to not make it do that?<br>\nNote that the resulting binary is in fact very small, at least for elf, and whatever <code>ld</code> gets poses no problem to it (<code>ld</code> finishes extremely fast). The result binary merely contains a symbol for which the <em>program loader</em> needs to allocate memory, it does not contain the gigabytes of zeroed/uninitialized data. I wanted to utilize this trick for tricking a bootloader into allocating static memory for a unikernel without requiring memory management in that unikernel itself (yeah, kind of dirty hack, back to doing the same with ASM/linker script).<br>\nTestable code: <a href=\"https://github.com/HeroicKatora/static-alloc/blob/master/tests/huuuuuge.rs\" target=\"_blank\" title=\"https://github.com/HeroicKatora/static-alloc/blob/master/tests/huuuuuge.rs\">https://github.com/HeroicKatora/static-alloc/blob/master/tests/huuuuuge.rs</a><br>\n<span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> I was told to maybe ping you.</p>",
        "id": 170671686,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1562878485
    },
    {
        "content": "<p>also pinging <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 170699954,
        "sender_full_name": "eddyb",
        "timestamp": 1562915081
    },
    {
        "content": "<p>I'm pretty sure this has been brought up before, we can probably make accesses slightly more expensive by lazily allocating the data</p>",
        "id": 170699977,
        "sender_full_name": "eddyb",
        "timestamp": 1562915120
    },
    {
        "content": "<p>the undef bitset is 1/8 the size, but I guess that could also be lazy in the same way</p>",
        "id": 170700368,
        "sender_full_name": "eddyb",
        "timestamp": 1562915617
    },
    {
        "content": "<p>All zeros or all undef is easy, if everyone is OK with adding optimizations for these special cases I can write mentoring instructions</p>",
        "id": 170715266,
        "sender_full_name": "oli",
        "timestamp": 1562932163
    },
    {
        "content": "<p>I just always gave up when thinking about sparsely initialized statics</p>",
        "id": 170715273,
        "sender_full_name": "oli",
        "timestamp": 1562932185
    },
    {
        "content": "<p>All undef would be sufficient. And it's more consistently justifiable instead of all zeroes where it might be more surprising why to allow exactly that case and not other repeating constant arrays like <code>[1; 1 &lt;&lt; 30]</code>. Also, would that entail being able to <code>[(0, 0); 1 &lt;&lt; 30]</code>? Maybe better to stick to undef for the moment. Maybe you can give a different view with insights from the compiler implementatino?<br>\nIf the mentoring instructions make it seem reasonably small and contained, I could maybe try to implement it also.</p>",
        "id": 170719318,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1562936356
    },
    {
        "content": "<p>I believe that it would suffice to move the bytes and the undefmask fields of Allocation into a custom Struct and add a field of that new type to Allocation. Then once everything compiles again, make a separate commit that makes that field an Option. This will require some changes, most notably in librustc_mir/interpret. Any writes should init the option any reads should emit an undef read error if None</p>",
        "id": 170719964,
        "sender_full_name": "oli",
        "timestamp": 1562936832
    },
    {
        "content": "<p>That sound pretty clear cut, I'll see what I can do <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 170721926,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1562938275
    },
    {
        "content": "<p>(seems like all undef and all zeroes are going to be pretty common to me, so I would be <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> to special casing them for now)</p>",
        "id": 170724425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1562940248
    },
    {
        "content": "<p>Problematically, there seem to be <code>get</code> calls that expect being able to access the bytes despite undef. In particlar, <code>copy_repeatedly</code> in memory seems to be ok with that and even has an <code>unsafe</code> block depending on getting a byte-slice of correct length back. And <code>read_c_str</code> also tries to access the bytes directly <em>before</em> ensuring they are defined. Not sure what would break if it were to check beforehand.</p>",
        "id": 170752062,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1562962308
    },
    {
        "content": "<p>My idea would be to introduce an enum <code>BytesOrUndef&lt;'a&gt; { Bytes(&amp;'a[u8]), Undef }</code> to differentiate between these two situations where that difference is of interest. Not sure what to do with all direct accesses though. Should I post this as PR for tracking and for more comments etc?</p>",
        "id": 170753351,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1562963423
    },
    {
        "content": "<p>Oh right. read_c_str can just be changed, but copy repeatedly should just not do anything if there are no defined bytes, so get can return None imo</p>",
        "id": 170776116,
        "sender_full_name": "oli",
        "timestamp": 1562997888
    },
    {
        "content": "<p>Yea opening a PR is a good idea</p>",
        "id": 170776133,
        "sender_full_name": "oli",
        "timestamp": 1562997953
    },
    {
        "content": "<p>Or, if you wanna prep for zeroed being special, instead of using an option for get's return type and the field type, use a generic enum like you described, but make the arbitrary data field have a generic value so you can reuse the enum for the field and return type and possibly elsewhere</p>",
        "id": 170776233,
        "sender_full_name": "oli",
        "timestamp": 1562998086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@Andreas Molzer</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> with the current infrastructure however, even a 1GB static shouldnt take 20GB of memory... data + undef mask should be more like &lt;2GB, right? Doesn't this indicate we are keeping several needless copies of this data somewhere?</p>",
        "id": 170779624,
        "sender_full_name": "RalfJ",
        "timestamp": 1563003912
    },
    {
        "content": "<p>Well... there may be multiple locals each reserving the needed memory</p>",
        "id": 170779889,
        "sender_full_name": "oli",
        "timestamp": 1563004544
    },
    {
        "content": "<p>But 20gb is excessive</p>",
        "id": 170779891,
        "sender_full_name": "oli",
        "timestamp": 1563004561
    },
    {
        "content": "<p>In that specific initial example it's not a simple static but an uninit static that's being created as part of a wrapping struct with another member. It is running through const-eval shortly.</p>",
        "id": 170788755,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563022539
    },
    {
        "content": "<p>It could also be that the usage is from llvm. Is there an existing way that creates an undef version of a <em>complex type</em> in the llvm interface, I only found a special code path for for integer types. Instead the allocated zeroed-bytes are copied from the Allocator directly as a <code>const_bytes</code>?</p>",
        "id": 170788950,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563022903
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> why <code>Option</code> and not just growing the backing <code>Vec</code>s as needed?</p>",
        "id": 170789253,
        "sender_full_name": "eddyb",
        "timestamp": 1563023381
    },
    {
        "content": "<p>or does too much rely on them being of an exact size?</p>",
        "id": 170789385,
        "sender_full_name": "eddyb",
        "timestamp": 1563023556
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> If there's supposed to be another state for constants, i.e. zeroed, then some wrapper enum is necessary. I tried out both, I had started with growing as needed before the suggestion. It seems several instances index into the vector directly and may get very confused if it is not full length. However, that could be changed as well, growing might also be doable.</p>",
        "id": 170789407,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563023632
    },
    {
        "content": "<p>okay</p>",
        "id": 170789466,
        "sender_full_name": "eddyb",
        "timestamp": 1563023703
    },
    {
        "content": "<p>I had to add another <code>size: Size</code> attribute either way to properly track the length of lazy allocation, so <code>.len</code> queries shouldn't be the problem</p>",
        "id": 170789479,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563023745
    },
    {
        "content": "<p>one kinda cool thing is that you could use this to have uninitialized &gt; 4GB arrays on 32-bit rustc</p>",
        "id": 170789548,
        "sender_full_name": "eddyb",
        "timestamp": 1563023831
    },
    {
        "content": "<p>(by using <code>Size</code> instead of <code>usize</code>)</p>",
        "id": 170789551,
        "sender_full_name": "eddyb",
        "timestamp": 1563023843
    },
    {
        "content": "<p>Didn't really think of this, but maybe? I'm not sure because even an access into <code>uninit</code> goes through a range check that only handles up to the host architecture length. But that might be rewritten as well.</p>",
        "id": 170789607,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563023911
    },
    {
        "content": "<p>It's up here: <a href=\"https://github.com/rust-lang/rust/pull/62655\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62655\">#62655</a> (Do links work like that here?)</p>",
        "id": 170789621,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563023946
    },
    {
        "content": "<p>yeah</p>",
        "id": 170789624,
        "sender_full_name": "eddyb",
        "timestamp": 1563023954
    },
    {
        "content": "<p>Patch seems to work: Down to 4gb allocated and 1.9gb residual now. The good question is how to best put this into a compile test.</p>",
        "id": 171273334,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563554958
    },
    {
        "content": "<p>However, the memory usage of the raw <code>static A: MaybeUninit&lt;[u8; 1 &lt;&lt; EXP]&gt; = MaybeUninit::uninit();</code> is nowhere close to zero. I'm not sure why.</p>",
        "id": 171302958,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563582161
    },
    {
        "content": "<p>The memory usage of an array of <code>1 &lt;&lt; EXP</code> bytes should be 2&lt;sup&gt;EXP&lt;/sup&gt; bytes, whether they've been initialized or not.</p>",
        "id": 171305661,
        "sender_full_name": "Tom Phinney",
        "timestamp": 1563587260
    },
    {
        "content": "<p>Its about memory usage of such a static <em>in the compiler</em> (that is, within mir) not in the running program. Uninitialized memory has the choice of choosing any value when it is accessed, and hence it is not necessary allocate bytes for keeping track of a current value.</p>",
        "id": 171306022,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563588002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"229913\">@Andreas Molzer</span> you can try panicking if an allocation is done that is larger than EXP and then compile your program and backtrace the panic</p>",
        "id": 171314097,
        "sender_full_name": "oli",
        "timestamp": 1563603338
    },
    {
        "content": "<p>Must be bigger than anything from libcore/libstd otherwise you can't get to your test</p>",
        "id": 171314139,
        "sender_full_name": "oli",
        "timestamp": 1563603371
    },
    {
        "content": "<p>I think the answer might just be 'somewhere in llvm'. I've tried to add a panic and it didn't trigger.</p>",
        "id": 171327916,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563630043
    },
    {
        "content": "<p>Being able to compile with usage of a static <code>MaybeUninit&lt;[u8; 30]&gt;</code> (raw and in in a const function) is already a major win so I wouldn't worry too much.</p>",
        "id": 171327930,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563630098
    },
    {
        "content": "<p>Running the slightly less ridiculous <code>[u8; 1 &lt;&lt; 34]</code> works fine until I hit: <code>LLVM ERROR: out of memory</code></p>",
        "id": 171328604,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563631234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Can I get another review? I'm done with the main work on mir and llvm, but there are apparently two target-specific workarounds that depend on the byte representation and for which I am not completely sure on how to adjust them.</p>",
        "id": 171585592,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563954779
    },
    {
        "content": "<p>we can always default to the previous behaviour irrelevant of the memory usage and correctness of the previous behaviour for these targets</p>",
        "id": 171597187,
        "sender_full_name": "oli",
        "timestamp": 1563967137
    },
    {
        "content": "<p>The wasm code requires a pointer, probably to a region of the allocation length. Since we can't simply allocate into the <code>&amp;Allocation</code> (requires  mutable) I'm just unsure if an entirely new allocation (<code>vec![0; length]</code>) would also suffice or if it requires a lifetime beyond the pointer use.</p>",
        "id": 171599751,
        "sender_full_name": "HeroicKatora",
        "timestamp": 1563969874
    },
    {
        "content": "<p>I don't think it requires a lifetime longer than the function call</p>",
        "id": 171600085,
        "sender_full_name": "oli",
        "timestamp": 1563970211
    },
    {
        "content": "<p>this is one of the places where the duplication comes from</p>",
        "id": 171600112,
        "sender_full_name": "oli",
        "timestamp": 1563970239
    }
]