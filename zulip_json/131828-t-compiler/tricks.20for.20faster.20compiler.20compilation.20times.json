[
    {
        "content": "<p>I wanted to know some trick to make compilation times faster when working on the compiler and what's the explanation for each of those</p>",
        "id": 156617649,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174364
    },
    {
        "content": "<p>maybe we should document those? I've asked <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> several times and keep forgeting</p>",
        "id": 156617671,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174392
    },
    {
        "content": "<p>so my usual compilation command is ...</p>",
        "id": 156617675,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174400
    },
    {
        "content": "<p><code>./x.py build -i --stage 1 src/libstd</code></p>",
        "id": 156617687,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174415
    },
    {
        "content": "<p>then there's a little trick which is</p>",
        "id": 156617706,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174435
    },
    {
        "content": "<p><code>./x.py build -i --stage 1 --keep-stage 1 src/libstd</code></p>",
        "id": 156617708,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174437
    },
    {
        "content": "<p>/me uses a widely known trick of a-lot-of-cores.</p>",
        "id": 156617724,
        "sender_full_name": "nagisa",
        "timestamp": 1548174450
    },
    {
        "content": "<p>:D</p>",
        "id": 156617730,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174459
    },
    {
        "content": "<p>I've seen Niko use <code>./x.py check</code> but in cases where compilation fails it's telling me that everything is ok</p>",
        "id": 156617795,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174486
    },
    {
        "content": "<p>can someone explain those two commands and what check exactly does?</p>",
        "id": 156617809,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174505
    },
    {
        "content": "<p>I guess I can take the compromise to push something to rustc guides in exchange ;)</p>",
        "id": 156617829,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174527
    },
    {
        "content": "<p>well <code>--stage 1</code> relates to bootstrapping. Since to fully bootstrap a compiler you need to compile it twice over, there’s a lot of unnecessary time spent compiling a kind-of unnecessary compiler as far as local development goes.</p>",
        "id": 156617868,
        "sender_full_name": "nagisa",
        "timestamp": 1548174557
    },
    {
        "content": "<p><code>check</code> is the equivalent of <code>cargo check</code>. It just type checks your code but doesn't actually build anything</p>",
        "id": 156617878,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548174565
    },
    {
        "content": "<p>so <code>--stage=1</code> makes it compile only once.</p>",
        "id": 156617879,
        "sender_full_name": "nagisa",
        "timestamp": 1548174565
    },
    {
        "content": "<p>As I understand it, check doesn't run codegen, just type check and borrow check. I'm not sure if <a href=\"https://github.com/rust-lang/rust/issues/52565\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52565\">#52565</a> has been fixed though - stopping me from using check.</p>",
        "id": 156617895,
        "sender_full_name": "davidtwco",
        "timestamp": 1548174578
    },
    {
        "content": "<p>I also use <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>'s lots of cores technique though.</p>",
        "id": 156617970,
        "sender_full_name": "davidtwco",
        "timestamp": 1548174609
    },
    {
        "content": "<blockquote>\n<p>well <code>--stage 1</code> relates to bootstrapping. Since to fully bootstrap a compiler you need to compile it twice over, there’s a lot of unnecessary time spent compiling a kind-of unnecessary compiler as far as local development goes.</p>\n</blockquote>\n<p>yeah, that's the part I know :)</p>",
        "id": 156617978,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174620
    },
    {
        "content": "<p><code>--keep-stage=1</code> meanwhile avoids invalidating/rebuilding some artifacts that would otherwise be invalidated and rebuilt unnecessarily.</p>",
        "id": 156617984,
        "sender_full_name": "nagisa",
        "timestamp": 1548174630
    },
    {
        "content": "<p>(again, for local development purposes)</p>",
        "id": 156617997,
        "sender_full_name": "nagisa",
        "timestamp": 1548174639
    },
    {
        "content": "<blockquote>\n<p><code>check</code> is the equivalent of <code>cargo check</code>. It just type checks your code but doesn't actually build anything</p>\n</blockquote>\n<p>for some reason <code>build</code> fails and <code>check</code> pass so my guess is that's not exactly true? in a couple of tries I did</p>",
        "id": 156618003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174648
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><code>check</code> is the equivalent of <code>cargo check</code>. It just type checks your code but doesn't actually build anything</p>\n</blockquote>\n<p>for some reason <code>build</code> fails and <code>check</code> pass so my guess is that's not exactly true?</p>\n</blockquote>\n<p>That generally shouldn't happen. What is the build failing with?</p>",
        "id": 156618032,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548174675
    },
    {
        "content": "<p><code>-i</code> enables incremental compilation. and <code>src/libstd</code> makes <code>libstd</code> the build target. Normally (with <code>src/libstd</code> being absent) there’s more stuff to be built afterwards, but not that much.</p>",
        "id": 156618051,
        "sender_full_name": "nagisa",
        "timestamp": 1548174697
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p><code>check</code> is the equivalent of <code>cargo check</code>. It just type checks your code but doesn't actually build anything</p>\n</blockquote>\n<p>for some reason <code>build</code> fails and <code>check</code> pass so my guess is that's not exactly true?</p>\n</blockquote>\n<p>That generally shouldn't happen. What is the build failing with?</p>\n</blockquote>\n<p>ahh maybe is because of what <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> have said <a href=\"https://github.com/rust-lang/rust/issues/52565\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52565\">https://github.com/rust-lang/rust/issues/52565</a></p>",
        "id": 156618065,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174721
    },
    {
        "content": "<blockquote>\n<p><code>--keep-stage=1</code> meanwhile avoids invalidating/rebuilding some artifacts that would otherwise be invalidated and rebuilt unnecessarily.</p>\n</blockquote>\n<p>What confuses me is the combination of <code>--stage 1</code> and <code>--keep-stage=1</code>. That reads to me like nothing would be compiled.</p>",
        "id": 156618130,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548174749
    },
    {
        "content": "<p>Oh, I think <code>cargo</code> has the same issue.</p>",
        "id": 156618157,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548174776
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/52565\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/52565\">#52565</a> wouldn't make a <code>x.py build</code> fail where an <code>x.py check</code> didn't, I don't think.</p>",
        "id": 156618160,
        "sender_full_name": "davidtwco",
        "timestamp": 1548174778
    },
    {
        "content": "<p>Generally, I do <code>./x.py check</code> until it all compiles and I'm ready to test it and then I do <code>./x.py build --stage 1</code></p>",
        "id": 156618193,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548174803
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><code>--keep-stage=1</code> meanwhile avoids invalidating/rebuilding some artifacts that would otherwise be invalidated and rebuilt unnecessarily.</p>\n</blockquote>\n<p>What confuses me is the combination of <code>--stage 1</code> and <code>--keep-stage=1</code>. That reads to me like nothing would be compiled.</p>\n</blockquote>\n<p>yeah, I remember seeing <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> and <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> discussing about this and believe me that makes sense, it's just that doesn't read nicely :)</p>",
        "id": 156618199,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174808
    },
    {
        "content": "<p>currently for me, check and incremental collide a bit: after a check everything is rebuilt</p>",
        "id": 156618203,
        "sender_full_name": "lqd",
        "timestamp": 1548174814
    },
    {
        "content": "<p>I generally develop compiler by running <code>x.py --stage 1 test src/test/whateversuiteisappropriate</code> and going to do my thing meanwhile</p>",
        "id": 156618266,
        "sender_full_name": "nagisa",
        "timestamp": 1548174854
    },
    {
        "content": "<p>I guess <code>--keep-stage=1</code> means \"keep the dependencies for stage 1\"?</p>",
        "id": 156618271,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548174861
    },
    {
        "content": "<blockquote>\n<p><code>-i</code> enables incremental compilation. and <code>src/libstd</code> makes <code>libstd</code> the build target. Normally (with <code>src/libstd</code> being absent) there’s more stuff to be built afterwards, but not that much.</p>\n</blockquote>\n<p>yeah, also knew about -i, so passing <code>src/libstd</code> avoids compiling something? what would that be?</p>",
        "id": 156618275,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548174872
    },
    {
        "content": "<p>Not \"keep the results of stage 1\"</p>",
        "id": 156618278,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548174878
    },
    {
        "content": "<p>At some point <code>--stage=1</code> meant something else.</p>",
        "id": 156618499,
        "sender_full_name": "nagisa",
        "timestamp": 1548175057
    },
    {
        "content": "<p>and then <code>--keep-stage</code> made more sense.</p>",
        "id": 156618510,
        "sender_full_name": "nagisa",
        "timestamp": 1548175067
    },
    {
        "content": "<p>Along the lines of the many cores trick. Has anyone tried compiling rust with sccache?</p>",
        "id": 156618651,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548175164
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<p><code>check</code> is the equivalent of <code>cargo check</code>. It just type checks your code but doesn't actually build anything</p>\n</blockquote>\n<p>for some reason <code>build</code> fails and <code>check</code> pass so my guess is that's not exactly true?</p>\n</blockquote>\n<p>That generally shouldn't happen. What is the build failing with?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span>[santiago@archlinux rust2 (place2b)]$ RUST_BACKTRACE=full ./x.py check -i --stage 1 --keep-stage 1 src/libstd\nUpdating only changed submodules\nSubmodules updated in 0.04 seconds\n    Finished dev [unoptimized] target(s) in 0.50s\nChecking std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.35s\nBuild completed successfully in 0:00:02\n[santiago@archlinux rust2 (place2b)]$ RUST_BACKTRACE=full ./x.py build -i --stage 1 --keep-stage 1 src/libstd\nUpdating only changed submodules\nSubmodules updated in 0.03 seconds\n    Finished dev [unoptimized] target(s) in 0.28s\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.33s\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding stage0 test artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.29s\nCopying stage0 test from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n   Compiling rustc_mir v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_mir)\n   Compiling rustc_allocator v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_allocator)\n   Compiling rustc_lint v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_lint)\n   Compiling rustc_traits v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_traits)\n   Compiling rustc_resolve v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_resolve)\n   Compiling rustc_plugin v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_plugin)\nerror[E0614]: type `rustc::mir::Local` cannot be dereferenced=&gt;      ] 115/127: rustc_mir, rustc_traits, rustc_resolve, rustc_plugin\n   --&gt; src/librustc_mir/borrow_check/place_ext.rs:100:74\n    |\n100 |                         let ignore = !has_storage_dead_or_moved.contains(*index) &amp;&amp;\n    |                                                                          ^^^^^^\n\nerror[E0614]: type `rustc::mir::Local` cannot be dereferenced\n   --&gt; src/librustc_mir/borrow_check/place_ext.rs:101:45\n    |\n101 |                             mir.local_decls[*index].mutability == Mutability::Not;\n    |                                             ^^^^^^\n\n   Compiling rustc_privacy v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_privacy)\nerror: aborting due to 2 previous errors========================&gt;    ] 119/127: rustc_mir\n\nFor more information about this error, try `rustc --explain E0614`.\nerror: Could not compile `rustc_mir`.\n\nTo learn more, run the command again with --verbose.\ncommand did not execute successfully: &quot;/home/santiago/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;-j&quot; &quot;4&quot; &quot;--release&quot; &quot;--features&quot; &quot;&quot; &quot;--manifest-path&quot; &quot;/home/santiago/src/oss/rust2/src/rustc/Cargo.toml&quot; &quot;--message-format&quot; &quot;json&quot;\nexpected success, got: exit code: 101\nfailed to run: /home/santiago/src/oss/rust2/build/bootstrap/debug/bootstrap build -i --stage 1 --keep-stage 1 src/libstd\nBuild completed unsuccessfully in 0:00:14\n</pre></div>",
        "id": 156618674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175190
    },
    {
        "content": "<p>I thought I remember reading that Firefox uses it for compiling the rust crates used there</p>",
        "id": 156618675,
        "sender_full_name": "dlrobertson",
        "timestamp": 1548175192
    },
    {
        "content": "<p>I'd love to have a diagram showing the interactions between <code>--stage x</code> and <code>--keep-stage=y</code>. As it is, I never use <code>--keep-stage</code> because I don't really understand what it's keeping and therefore when I can or can't use it.</p>",
        "id": 156618752,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548175214
    },
    {
        "content": "<p>i think that the travis builders use sccache for llvm?</p>",
        "id": 156618765,
        "sender_full_name": "QuietMisdreavus",
        "timestamp": 1548175228
    },
    {
        "content": "<blockquote>\n<p>./x.py check -i --stage 1 --keep-stage 1</p>\n</blockquote>\n<p>That looks kind of suspicious to me. Do you get the same error if you just run <code>./x.py check -i --stage 1</code>?</p>",
        "id": 156618841,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548175319
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>[santiago@archlinux rust2 (place2b)]$ RUST_BACKTRACE=full ./x.py check -i --stage 1 src/libstd\nUpdating only changed submodules\nSubmodules updated in 0.04 seconds\n    Finished dev [unoptimized] target(s) in 0.31s\nChecking std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.34s\nBuild completed successfully in 0:00:02\n</pre></div>",
        "id": 156618926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175365
    },
    {
        "content": "<p>it shouldn't build but builds</p>",
        "id": 156618929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175372
    },
    {
        "content": "<p>I need to remove <code>-i</code></p>",
        "id": 156618971,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175411
    },
    {
        "content": "<p>The error is in <code>librustc_mir</code> which I wouldn't expect to be built when you ask for <code>src/libstd</code></p>",
        "id": 156618974,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548175412
    },
    {
        "content": "<p>well removing <code>-i</code> still builds</p>",
        "id": 156618981,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175424
    },
    {
        "content": "<p>Oh it works when you remove <code>-i</code>?</p>",
        "id": 156618982,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548175427
    },
    {
        "content": "<p>Try  just <code>./x.py check --stage 1</code></p>",
        "id": 156618992,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1548175437
    },
    {
        "content": "<p>no no, it still compiles</p>",
        "id": 156618993,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175437
    },
    {
        "content": "<p>What is the error you get?</p>",
        "id": 156619057,
        "sender_full_name": "Zoxc",
        "timestamp": 1548175450
    },
    {
        "content": "<p>fwiw, <code>-i</code> is prone to break as the compiler structures get changed</p>",
        "id": 156619065,
        "sender_full_name": "nagisa",
        "timestamp": 1548175457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> running <code>build</code> gives an error and <code>check</code> is fine</p>",
        "id": 156619078,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175471
    },
    {
        "content": "<blockquote>\n<blockquote>\n<blockquote>\n<blockquote>\n<p><code>check</code> is the equivalent of <code>cargo check</code>. It just type checks your code but doesn't actually build anything</p>\n</blockquote>\n<p>for some reason <code>build</code> fails and <code>check</code> pass so my guess is that's not exactly true?</p>\n</blockquote>\n<p>That generally shouldn't happen. What is the build failing with?</p>\n</blockquote>\n</blockquote>\n<p>[santiago@archlinux rust2 (place2b)]$ RUST_BACKTRACE=full ./x.py check -i --stage 1 --keep-stage 1 src/libstd<br>\nUpdating only changed submodules<br>\nSubmodules updated in 0.04 seconds<br>\n    Finished dev [unoptimized] target(s) in 0.50s<br>\nChecking std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)<br>\n    Finished release [optimized] target(s) in 0.35s<br>\nBuild completed successfully in 0:00:02<br>\n[santiago@archlinux rust2 (place2b)]$ RUST_BACKTRACE=full ./x.py build -i --stage 1 --keep-stage 1 src/libstd<br>\nUpdating only changed submodules<br>\nSubmodules updated in 0.03 seconds<br>\n    Finished dev [unoptimized] target(s) in 0.28s<br>\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)<br>\n    Finished release [optimized] target(s) in 0.33s<br>\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)<br>\nBuilding stage0 test artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)<br>\n    Finished release [optimized] target(s) in 0.29s<br>\nCopying stage0 test from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)<br>\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)<br>\n   Compiling rustc_mir v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_mir)<br>\n   Compiling rustc_allocator v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_allocator)<br>\n   Compiling rustc_lint v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_lint)<br>\n   Compiling rustc_traits v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_traits)<br>\n   Compiling rustc_resolve v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_resolve)<br>\n   Compiling rustc_plugin v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_plugin)<br>\nerror[E0614]: type <code>rustc::mir::Local</code> cannot be dereferenced=&gt;      ] 115/127: rustc_mir, rustc_traits, rustc_resolve, rustc_plugin                                          <br>\n   --&gt; src/librustc_mir/borrow_check/place_ext.rs:100:74<br>\n    |<br>\n100 |                         let ignore = !has_storage_dead_or_moved.contains(*index) &amp;&amp;<br>\n    |                                                                          ^^^^^^</p>\n<p>error[E0614]: type <code>rustc::mir::Local</code> cannot be dereferenced<br>\n   --&gt; src/librustc_mir/borrow_check/place_ext.rs:101:45<br>\n    |<br>\n101 |                             mir.local_decls[*index].mutability == Mutability::Not;<br>\n    |                                             ^^^^^^</p>\n<p>Compiling rustc_privacy v0.0.0 (/home/santiago/src/oss/rust2/src/librustc_privacy)<br>\nerror: aborting due to 2 previous errors========================&gt;    ] 119/127: rustc_mir                                                                                     </p>\n<p>For more information about this error, try <code>rustc --explain E0614</code>.<br>\nerror: Could not compile <code>rustc_mir</code>.</p>\n<p>To learn more, run the command again with --verbose.<br>\ncommand did not execute successfully: \"/home/santiago/src/oss/rust2/build/x86_64-unknown-linux-gnu/stage0/bin/cargo\" \"build\" \"--target\" \"x86_64-unknown-linux-gnu\" \"-j\" \"4\" \"--release\" \"--features\" \"\" \"--manifest-path\" \"/home/santiago/src/oss/rust2/src/rustc/Cargo.toml\" \"--message-format\" \"json\"<br>\nexpected success, got: exit code: 101<br>\nfailed to run: /home/santiago/src/oss/rust2/build/bootstrap/debug/bootstrap build -i --stage 1 --keep-stage 1 src/libstd<br>\nBuild completed unsuccessfully in 0:00:14</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> ^^^</p>",
        "id": 156619091,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175486
    },
    {
        "content": "<p>That is fine though. If <code>x.py check</code> fails, so should <code>x.py build</code>, not the other way around. <code>x.py check</code> checks fewer things than <code>x.py build</code></p>",
        "id": 156619161,
        "sender_full_name": "Zoxc",
        "timestamp": 1548175545
    },
    {
        "content": "<p><code>-i</code> is not prone to break as compiler structures change. It can however break due to hash collisions</p>",
        "id": 156619237,
        "sender_full_name": "Zoxc",
        "timestamp": 1548175581
    },
    {
        "content": "<blockquote>\n<p><code>-i</code> is not prone to break as compiler structures change. It can however break due to hash collisions</p>\n</blockquote>\n<p>/me shrugs and notes down to try -i again sometime</p>",
        "id": 156619300,
        "sender_full_name": "nagisa",
        "timestamp": 1548175664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> Do <code>x.py clean</code> and try again <code>x.py build</code> and <code>x.py check</code> again without using <code>--keep-stage</code></p>",
        "id": 156619363,
        "sender_full_name": "Zoxc",
        "timestamp": 1548175691
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"+1\">:+1:</span></p>",
        "id": 156619415,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175739
    },
    {
        "content": "<p>takes ages though :)</p>",
        "id": 156619422,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175744
    },
    {
        "content": "<p>one of the tricks I know I should apply is to buy a new machine ;)</p>",
        "id": 156619450,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175769
    },
    {
        "content": "<p>I want one of AMD's new 12 cores =P</p>",
        "id": 156619473,
        "sender_full_name": "Zoxc",
        "timestamp": 1548175796
    },
    {
        "content": "<p>/me wants one of AMD’s new 64-cores...</p>",
        "id": 156619551,
        "sender_full_name": "nagisa",
        "timestamp": 1548175825
    },
    {
        "content": "<p>I was looking to something a bit simpler :), going after Systems76 Galago Pro probably with 32GB</p>",
        "id": 156619572,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175851
    },
    {
        "content": "<p>By the way there is a <a href=\"https://cfarm.tetaneutral.net/munin/gccfarm/gcc68/index.html\" target=\"_blank\" title=\"https://cfarm.tetaneutral.net/munin/gccfarm/gcc68/index.html\">2700 on the GCC Farm</a>, you could play with it and try how it feels before making a decision.</p>",
        "id": 156619604,
        "sender_full_name": "nagisa",
        "timestamp": 1548175876
    },
    {
        "content": "<p>For a few months I've been using a dedicated server for my Rust development with a \"AMD Ryzen 7 1700X (16) @ 3.400GHz\", 64GB of RAM and a 512GB SSD - mostly for the convenience of being able to jump between machines and reconnect, attach to tmux and continue where I left off, but the performance is nice too.</p>",
        "id": 156619687,
        "sender_full_name": "davidtwco",
        "timestamp": 1548175943
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> what dedicated server specifically?</p>",
        "id": 156619709,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175978
    },
    {
        "content": "<p>I've looked into that too</p>",
        "id": 156619716,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1548175983
    },
    {
        "content": "<p>The 12 core will hopefully be a drop in replacement for R7 1700, which is what I'm on now</p>",
        "id": 156619719,
        "sender_full_name": "Zoxc",
        "timestamp": 1548175983
    },
    {
        "content": "<p>From <a href=\"https://www.hetzner.com/?country=en\" target=\"_blank\" title=\"https://www.hetzner.com/?country=en\">Hetzner</a>.</p>",
        "id": 156619750,
        "sender_full_name": "davidtwco",
        "timestamp": 1548176006
    },
    {
        "content": "<blockquote>\n<p>The 12 core will hopefully be a drop in replacement for R7 1700, which is what I'm on now</p>\n</blockquote>\n<p>the socket will be the same, but depending on your board the VRMs may be insufficient</p>",
        "id": 156619891,
        "sender_full_name": "nagisa",
        "timestamp": 1548176097
    },
    {
        "content": "<p>especially if a 16-core is released and you decided to step up to that</p>",
        "id": 156619917,
        "sender_full_name": "nagisa",
        "timestamp": 1548176120
    },
    {
        "content": "<p>That's why I'm eyeing the 12 core instead =P</p>",
        "id": 156619950,
        "sender_full_name": "Zoxc",
        "timestamp": 1548176157
    },
    {
        "content": "<blockquote>\n<p>That's why I'm eyeing the 12 core instead =P</p>\n</blockquote>\n<p>what’s your board?</p>",
        "id": 156620000,
        "sender_full_name": "nagisa",
        "timestamp": 1548176168
    },
    {
        "content": "<p>ASUS PRIME X370-PRO</p>",
        "id": 156620151,
        "sender_full_name": "Zoxc",
        "timestamp": 1548176310
    },
    {
        "content": "<p>re: <code>--keep-stage</code>, another pattern that works is:</p>\n<div class=\"codehilite\"><pre><span></span>./x.py build -i src/libstd # first time\n./x.py build -i src/libstd --keep-stage 0 # second, third, etc time\n</pre></div>",
        "id": 156620168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548176323
    },
    {
        "content": "<p>you have to re-run the first command post rebase and/or if \"weird stuff happens\"</p>",
        "id": 156620186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548176338
    },
    {
        "content": "<p>(one thing I am very interested in is if we can come up with a way to make a safe version of <code>keep-stage</code>...)</p>",
        "id": 156620220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548176361
    },
    {
        "content": "<p>the plus-side of this pattern is that it gives you a fully functional compiler (not a stage1 version). The downside is it takes a bit longer.</p>",
        "id": 156620235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548176384
    },
    {
        "content": "<blockquote>\n<p>nagisa uses a widely known trick of a-lot-of-cores.</p>\n</blockquote>\n<p>This is how I solve the problem as well, more or less.<br>\nSSD + CPU with good single-thread performance + many cores make world of difference.</p>",
        "id": 156644574,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1548195011
    },
    {
        "content": "<p>I never use <code>--keep-stage</code> because it's not guaranteed to be correct.</p>",
        "id": 156644602,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1548195062
    },
    {
        "content": "<p>I also usually build without debuginfo because \"builds for running tests\" happen much more often than \"builds for getting a backtrace\".</p>",
        "id": 156644696,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1548195127
    },
    {
        "content": "<p>Oh, also <code>-C target-cpu=native</code>, although it made very little difference for rustc the last time I measured it (default -&gt; haswell).</p>",
        "id": 156644913,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1548195331
    },
    {
        "content": "<p>Also disabling CPU hyper-threading helped in my case, IIRC.</p>",
        "id": 156645288,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1548195645
    },
    {
        "content": "<p>(Need to remeasure this one though.)</p>",
        "id": 156645309,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1548195666
    },
    {
        "content": "<p>I remember being a bit disappointed when my shiny new 8C/16T R7 1700X was only slightly faster than 4C/8T Xeon in my laptop. Back then I concluded that single-thread performance was still key for a fast bootstrap. Although that was more than a year ago. Things might have changed a bit since then.</p>",
        "id": 156677667,
        "sender_full_name": "mw",
        "timestamp": 1548238584
    },
    {
        "content": "<p>and I certainly want to change things :) compiling the compiler should scale with the number of cores and not so much with clockspeeds.</p>",
        "id": 156677718,
        "sender_full_name": "mw",
        "timestamp": 1548238633
    },
    {
        "content": "<blockquote>\n<p>Along the lines of the many cores trick. Has anyone tried compiling rust with sccache?</p>\n</blockquote>\n<p>I would definitely like to hear more about this. I read that <code>sccache</code> has (<em>experimental</em>) rust support. It would be pretty cool if we could apply it to the <code>rustc</code> builds in some fashion; I've used <code>ccache</code> for LLVM a lot in the past, but I'd like to see the idea generalized.</p>",
        "id": 161747701,
        "sender_full_name": "pnkfelix",
        "timestamp": 1553595528
    }
]