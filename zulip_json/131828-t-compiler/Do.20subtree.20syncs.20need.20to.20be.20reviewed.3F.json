[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> opened <a href=\"https://github.com/rust-lang/rust/pull/78624\">https://github.com/rust-lang/rust/pull/78624</a> syncing codegen_cranelift - does that actually need review? Or can I <code>r+</code> it without looking too closely?</p>",
        "id": 215399590,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604364855
    },
    {
        "content": "<p>Subtree bumps do not need review if they don't touch something other than the submodule</p>",
        "id": 215400353,
        "sender_full_name": "simulacrum",
        "timestamp": 1604365493
    },
    {
        "content": "<p>Indeed, policy is generally to self approve I think (since they're conflict prone IIRC). Cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 215400388,
        "sender_full_name": "simulacrum",
        "timestamp": 1604365529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  doesn't have r+ privileges though :/</p>",
        "id": 215405296,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604369073
    },
    {
        "content": "<p>yea, subtree bumps can be r+ed without review of the content. I usually just check whether the commits are something actually merged in the upstream repo</p>",
        "id": 215438004,
        "sender_full_name": "oli",
        "timestamp": 1604401117
    },
    {
        "content": "<p>I'm curious, now that it's merged, what is the advantage of keeping it out of tree and merging it as a subtree, versus just developing the additional codegen backend directly in tree?</p>",
        "id": 215472597,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1604419071
    },
    {
        "content": "<p>Developing in tree requires me to build a full rustc rather than just use a prebuilt rustc using rustup. In addition my development process is way too messy for rust pull requests. For example on a single day I may implement a new feature, make a tiny change, refactor something else and then implement yet another feature and a while later refactor the implementation of that new feature.</p>",
        "id": 215473265,
        "sender_full_name": "bjorn3",
        "timestamp": 1604419321
    },
    {
        "content": "<p>Another thing is that I will lose track of issues when they would be filed against rust-lang/rust instead of bjorn3/rustc_codegen_cranelift.</p>",
        "id": 215473485,
        "sender_full_name": "bjorn3",
        "timestamp": 1604419413
    },
    {
        "content": "<p>Lastly it was decided that CI won't run any of the tests of cg_clif. It will only check if it still compiles.</p>",
        "id": 215473671,
        "sender_full_name": "bjorn3",
        "timestamp": 1604419494
    },
    {
        "content": "<p>The separate issue tracker and PR queue is also a big reason for clippy.</p>",
        "id": 215473718,
        "sender_full_name": "oli",
        "timestamp": 1604419516
    },
    {
        "content": "<p>We'll get cg_clif tests on CI at some point, we started out with clippy the same way: first gate on compiling, wait a few months, then gate on tests</p>",
        "id": 215473852,
        "sender_full_name": "oli",
        "timestamp": 1604419568
    },
    {
        "content": "<p>FWIW I will note that I am somewhat wary of the pollution to git history subtree syncs have, but I'm in practice not concerned all that much because it's not like we're strict about it in regular PRs either :)</p>",
        "id": 215473855,
        "sender_full_name": "simulacrum",
        "timestamp": 1604419569
    }
]