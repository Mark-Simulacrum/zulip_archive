[
    {
        "content": "<p>Is it expected that lowering generators to state machines happens <em>after inlining</em>? I'd think MIR generation should be basically done before we do any interesting optimizations, and this lowering seems to conceptually be part of MIR construction.</p>",
        "id": 148038745,
        "sender_full_name": "RalfJ",
        "timestamp": 1542720571
    },
    {
        "content": "<p>and then we have the deaggregator turning things like </p>\n<div class=\"codehilite\"><pre><span></span>_1 = [generator@test.rs:6:25: 15:6] { $state: const 0u32 };\n</pre></div>\n\n\n<p>into</p>\n<div class=\"codehilite\"><pre><span></span>(_1.0: u32) = const 0u32;\n</pre></div>\n\n\n<p>which is a problem because now only the first field of the struct actually gets initialized...</p>",
        "id": 148039686,
        "sender_full_name": "RalfJ",
        "timestamp": 1542721436
    },
    {
        "content": "<p>so the <code>Retag(_1)</code> that got inserted right after this sees uninitialized data</p>",
        "id": 148039736,
        "sender_full_name": "RalfJ",
        "timestamp": 1542721457
    },
    {
        "content": "<p>hm, actually none of this pass ordering can possibly help</p>",
        "id": 148040050,
        "sender_full_name": "RalfJ",
        "timestamp": 1542721777
    },
    {
        "content": "<p>would it be reasonable to say that the fields of a generator (all but the first, with the state) are implicitly wrapped in a <code>MaybeUninit</code>?</p>",
        "id": 148040079,
        "sender_full_name": "RalfJ",
        "timestamp": 1542721800
    },
    {
        "content": "<p>because that seems how things are actually being used...</p>",
        "id": 148040134,
        "sender_full_name": "RalfJ",
        "timestamp": 1542721807
    },
    {
        "content": "<p>yea, that sounds about like how I understand generators work</p>",
        "id": 148041308,
        "sender_full_name": "oli",
        "timestamp": 1542722890
    },
    {
        "content": "<blockquote>\n<p>Is it expected that lowering generators to state machines happens <em>after inlining</em>? I'd think MIR generation should be basically done before we do any interesting optimizations, and this lowering seems to conceptually be part of MIR construction.</p>\n</blockquote>\n<p>sounds wrong</p>",
        "id": 148043260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542724820
    },
    {
        "content": "<blockquote>\n<p>would it be reasonable to say that the fields of a generator (all but the first, with the state) are implicitly wrapped in a <code>MaybeUninit</code>?</p>\n</blockquote>\n<p>but yes, sounds right</p>",
        "id": 148043279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542724846
    },
    {
        "content": "<p>PR with a workaround/fix for miri: <a href=\"https://github.com/rust-lang/rust/pull/56100\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/56100\">https://github.com/rust-lang/rust/pull/56100</a></p>",
        "id": 148043433,
        "sender_full_name": "oli",
        "timestamp": 1542725021
    },
    {
        "content": "<p>yeah, I saw it</p>",
        "id": 148043670,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542725224
    },
    {
        "content": "<blockquote>\n<p>sounds wrong</p>\n</blockquote>\n<p>seems like that got introduced with <a href=\"https://github.com/rust-lang/rust/commit/6e5dacbd5e8aab43cdc4c2f1d4ec66fe0b8d4bed\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/6e5dacbd5e8aab43cdc4c2f1d4ec66fe0b8d4bed\">https://github.com/rust-lang/rust/commit/6e5dacbd5e8aab43cdc4c2f1d4ec66fe0b8d4bed</a> by <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 148047071,
        "sender_full_name": "RalfJ",
        "timestamp": 1542728250
    },
    {
        "content": "<p>well, actually before that the pass was <em>even later</em>^^</p>",
        "id": 148047078,
        "sender_full_name": "RalfJ",
        "timestamp": 1542728267
    },
    {
        "content": "<p>this goes back <em>all the way</em> to the initial commit <a href=\"https://github.com/rust-lang/rust/commit/d861982ca6a1fa5773373362771aa08b9f732de0#diff-698522bf32a92da4331b4bd3f6ed31c6\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/d861982ca6a1fa5773373362771aa08b9f732de0#diff-698522bf32a92da4331b4bd3f6ed31c6\">https://github.com/rust-lang/rust/commit/d861982ca6a1fa5773373362771aa08b9f732de0#diff-698522bf32a92da4331b4bd3f6ed31c6</a> by <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>. Should I, uh, file an issue or so?</p>",
        "id": 148047322,
        "sender_full_name": "RalfJ",
        "timestamp": 1542728492
    },
    {
        "content": "<p>I moved <code>StateTransform</code> earlier because it has some asserts that break</p>",
        "id": 148047777,
        "sender_full_name": "eddyb",
        "timestamp": 1542728828
    },
    {
        "content": "<p>but the intention is to do it as late as possible so we optimize generators</p>",
        "id": 148047802,
        "sender_full_name": "eddyb",
        "timestamp": 1542728849
    },
    {
        "content": "<p>including inlining generators</p>",
        "id": 148047872,
        "sender_full_name": "eddyb",
        "timestamp": 1542728889
    },
    {
        "content": "<p>I think maybe the asserts should be done early and the <code>StateTransform</code> moved late</p>",
        "id": 148047906,
        "sender_full_name": "eddyb",
        "timestamp": 1542728935
    },
    {
        "content": "<blockquote>\n<p>including inlining generators</p>\n</blockquote>\n<p>but can't we better inline them after generator lowering because then they are just normal functions?</p>",
        "id": 148048830,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729665
    },
    {
        "content": "<p>currently inlining has to know how to special-case generators</p>",
        "id": 148048837,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729673
    },
    {
        "content": "<p>no, because the normal functions are already state-transformed</p>",
        "id": 148048860,
        "sender_full_name": "eddyb",
        "timestamp": 1542729700
    },
    {
        "content": "<p>yes that's exactly what I am saying</p>",
        "id": 148048878,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729717
    },
    {
        "content": "<p>if you inline after, you can't merge the state</p>",
        "id": 148048925,
        "sender_full_name": "eddyb",
        "timestamp": 1542729726
    },
    {
        "content": "<p>\"merge\"?</p>",
        "id": 148048942,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729739
    },
    {
        "content": "<p>flatten</p>",
        "id": 148048951,
        "sender_full_name": "eddyb",
        "timestamp": 1542729744
    },
    {
        "content": "<p>not have nested state tags</p>",
        "id": 148048958,
        "sender_full_name": "eddyb",
        "timestamp": 1542729754
    },
    {
        "content": "<p>oh</p>",
        "id": 148048960,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729757
    },
    {
        "content": "<p>I see</p>",
        "id": 148048964,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729760
    },
    {
        "content": "<p>now I don't think inlining is properly set up for this</p>",
        "id": 148048973,
        "sender_full_name": "eddyb",
        "timestamp": 1542729774
    },
    {
        "content": "<p>it probably isn't^^</p>",
        "id": 148048984,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729784
    },
    {
        "content": "<p>it would need to query the untransformed generators, and <code>optimized_mir</code> is after the transformation</p>",
        "id": 148049000,
        "sender_full_name": "eddyb",
        "timestamp": 1542729798
    },
    {
        "content": "<p>hm. this pretty much means a formal spec for MIR has to spec generators</p>",
        "id": 148049006,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729808
    },
    {
        "content": "<p>however, given that borrowck happens before generator lowering, that might be better anyway</p>",
        "id": 148049016,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729822
    },
    {
        "content": "<p>that's already true and the surface area is pretty small</p>",
        "id": 148049018,
        "sender_full_name": "eddyb",
        "timestamp": 1542729823
    },
    {
        "content": "<p>yeah, generators have a special relationship with borrowck</p>",
        "id": 148049032,
        "sender_full_name": "eddyb",
        "timestamp": 1542729838
    },
    {
        "content": "<p>that's the best reason for understanding all of this state stuff before LLVM IR</p>",
        "id": 148049086,
        "sender_full_name": "eddyb",
        "timestamp": 1542729858
    },
    {
        "content": "<p>I guess that and guaranteed unboxing</p>",
        "id": 148049093,
        "sender_full_name": "eddyb",
        "timestamp": 1542729869
    },
    {
        "content": "<p>if it happens after borrowck anyway, why care if it is done in MIR or LLVM?</p>",
        "id": 148049119,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729891
    },
    {
        "content": "<p>(miri is happy that it's done in MIR though because it means it doesn't have to care^^)</p>",
        "id": 148049151,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729922
    },
    {
        "content": "<p>wait I was confusing</p>",
        "id": 148049159,
        "sender_full_name": "eddyb",
        "timestamp": 1542729930
    },
    {
        "content": "<p>what I mean is having any sort of language-level understanding of generators</p>",
        "id": 148049193,
        "sender_full_name": "eddyb",
        "timestamp": 1542729961
    },
    {
        "content": "<p>yeah I agree with that</p>",
        "id": 148049239,
        "sender_full_name": "RalfJ",
        "timestamp": 1542729970
    },
    {
        "content": "<p>C++ can leave it all to LLVM because it doesn't need to type-check based on state that's live across yields</p>",
        "id": 148049283,
        "sender_full_name": "eddyb",
        "timestamp": 1542730004
    },
    {
        "content": "<p>or anything like that</p>",
        "id": 148049286,
        "sender_full_name": "eddyb",
        "timestamp": 1542730007
    },
    {
        "content": "<p>hm yeah</p>",
        "id": 148049321,
        "sender_full_name": "RalfJ",
        "timestamp": 1542730035
    },
    {
        "content": "<p>I will wonder how to best think about MIR with and without the extra statements I introduced. basically currently we have one syntax for two languages</p>",
        "id": 148049344,
        "sender_full_name": "RalfJ",
        "timestamp": 1542730056
    },
    {
        "content": "<p>heh</p>",
        "id": 148049369,
        "sender_full_name": "eddyb",
        "timestamp": 1542730073
    },
    {
        "content": "<p>well, \"syntax\"</p>",
        "id": 148049371,
        "sender_full_name": "RalfJ",
        "timestamp": 1542730076
    },
    {
        "content": "<p>before <code>Retag</code> is added, the semantics implicitly does that stuff, while after introducing these things it is explicit. or so.</p>",
        "id": 148049429,
        "sender_full_name": "RalfJ",
        "timestamp": 1542730091
    },
    {
        "content": "<p>there's some danger here of considering the \"wrong\" one so it might be worth generating them early some day, like, together with initial MIR building? or reflecting this change in semantics in the type somehow? <code>Mir&lt;ImplicitRetag&gt;</code> or so...</p>",
        "id": 148049476,
        "sender_full_name": "RalfJ",
        "timestamp": 1542730136
    },
    {
        "content": "<p>there might be an interesting angle here where lowering to a different IR, that maybe loses some of the typedness of MIR, adds this information</p>",
        "id": 148049516,
        "sender_full_name": "eddyb",
        "timestamp": 1542730158
    },
    {
        "content": "<p>so you convert complexity instead of strictly adding</p>",
        "id": 148049547,
        "sender_full_name": "eddyb",
        "timestamp": 1542730186
    },
    {
        "content": "<p>a twist of that is to use the same syntax/datatype for all these IRs</p>",
        "id": 148049613,
        "sender_full_name": "RalfJ",
        "timestamp": 1542730208
    },
    {
        "content": "<p>\"compilation/lowering to a subset\" or so, I saw that somewhere recently</p>",
        "id": 148049623,
        "sender_full_name": "RalfJ",
        "timestamp": 1542730216
    },
    {
        "content": "<p>generators actually do that -- they lower from full MIR to MIR\\Generators</p>",
        "id": 148049637,
        "sender_full_name": "RalfJ",
        "timestamp": 1542730232
    },
    {
        "content": "<p>Cranelift also uses the same IR for the higher-level input and for the heavily transformed version that contains e.g. register allocation, spills, expanded operations when the original didn't have a native encoding on the target, etc., and then it does a straight-forward instruction selection pass on the result, without having to use target-specific instructions for most things</p>",
        "id": 148049805,
        "sender_full_name": "eddyb",
        "timestamp": 1542730391
    },
    {
        "content": "<p>miri is, kinda interestingly, on-the-fly monomorphization and lowering to more primitive ops, and execution of those ops</p>",
        "id": 148049827,
        "sender_full_name": "eddyb",
        "timestamp": 1542730425
    },
    {
        "content": "<p>one could split those up, into something that looks like a codegen backend, and a separate \"abstract memory machine\"</p>",
        "id": 148049939,
        "sender_full_name": "eddyb",
        "timestamp": 1542730519
    },
    {
        "content": "<p>LLVM IR is gnarly, but e.g. Cranelift IR could be emulated on the lower half of miri just fine!</p>",
        "id": 148049983,
        "sender_full_name": "eddyb",
        "timestamp": 1542730560
    },
    {
        "content": "<p>/me pokes <span class=\"user-mention\" data-user-id=\"130125\">@Dan Gohman</span></p>",
        "id": 148050030,
        "sender_full_name": "eddyb",
        "timestamp": 1542730572
    },
    {
        "content": "<blockquote>\n<p>I will wonder how to best think about MIR with and without the extra statements I introduced. basically currently we have one syntax for two languages</p>\n</blockquote>\n<p>this has been true for a long time, I've been wondering if we want to make this split more explicit</p>",
        "id": 148056842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542737704
    },
    {
        "content": "<p>(but I'm sort of inclined not to yet)</p>",
        "id": 148056864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542737728
    },
    {
        "content": "<p>Time for HMIR, MMIR, and LMIR</p>",
        "id": 148084120,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542768055
    }
]