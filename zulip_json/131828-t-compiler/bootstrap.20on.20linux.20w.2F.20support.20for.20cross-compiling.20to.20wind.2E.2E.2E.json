[
    {
        "content": "<p>do you know off hand, if I attempt to make a local rust build with support for that target, is that going to work on Linux as well?</p>",
        "id": 205913591,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596551372
    },
    {
        "content": "<p>i.e. is it just a matter of adding the appropriate target to a line in my <code>config.toml</code> for Rust?</p>",
        "id": 205913656,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596551399
    },
    {
        "content": "<p>uuh, that's... a good question</p>",
        "id": 205913704,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596551404
    },
    {
        "content": "<p>haven't had to do that yet</p>",
        "id": 205913733,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596551416
    },
    {
        "content": "<p>but do you need to build a compiler? I thought at this point generating LLVM IR and using the LLVM tools to further reduce might be sufficient</p>",
        "id": 205913824,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1596551460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/channel.20bug.3A.20.22Instruction.20does.20not.20dominate.20all.20uses.22.20.2372470/near/205913591\">said</a>:</p>\n<blockquote>\n<p>do you know off hand, if I attempt to make a local rust build with support for that target, is that going to work on Linux as well?</p>\n</blockquote>\n<p>Maybe it would work when building Rlibs only, you cannot build DLLs without the linker and libs.</p>",
        "id": 205913912,
        "sender_full_name": "mati865",
        "timestamp": 1596551511
    },
    {
        "content": "<p>yes, I just was going to try to get the \"right\" LLVM by building the compiler itself</p>",
        "id": 205913982,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596551526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/channel.20bug.3A.20.22Instruction.20does.20not.20dominate.20all.20uses.22.20.2372470/near/205913656\">said</a>:</p>\n<blockquote>\n<p>i.e. is it just a matter of adding the appropriate target to a line in my <code>config.toml</code> for Rust?</p>\n</blockquote>\n<p>This did not work out of the box:</p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;main&#39; panicked at &#39;\ncmake does not support Visual Studio generators.\n\nThis is likely due to it being an msys/cygwin build of cmake,\nrather than the required windows version, built using MinGW\nor Visual Studio.\n\nIf you are building under msys2 try installing the mingw-w64-x86_64-cmake\npackage instead of cmake:\n</code></pre></div>",
        "id": 205914089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596551581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/channel.20bug.3A.20.22Instruction.20does.20not.20dominate.20all.20uses.22.20.2372470/near/205913982\">said</a>:</p>\n<blockquote>\n<p>yes, I just was going to try to get the \"right\" LLVM by building the compiler itself</p>\n</blockquote>\n<p>(and also, I figured it would be useful in the future, when I might want to make local compiler hacks and then test them against this same cross-compiling scenario)</p>",
        "id": 205914150,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596551612
    },
    {
        "content": "<p>There is no \"right\" LLVM. LLVM is cross compiler so as long as you don't link the binaries it doesn't matter whether you target MSVC from Linux or Windows.</p>",
        "id": 205914199,
        "sender_full_name": "mati865",
        "timestamp": 1596551635
    },
    {
        "content": "<p>well I had figured at the very least I need to ensure I'm using the right version of LLVM</p>",
        "id": 205914295,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596551669
    },
    {
        "content": "<p>but its not a problem; I already got plenty of experience compiling LLVM itself when I was playing around with trying to fix <a href=\"https://bugs.llvm.org/show_bug.cgi?id=46943\">https://bugs.llvm.org/show_bug.cgi?id=46943</a></p>",
        "id": 205914400,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596551736
    },
    {
        "content": "<p>I think we're probably over eager on our sanity checking -- I doubt we actually care about cmake if you're just cross-compiling std</p>",
        "id": 205914587,
        "sender_full_name": "simulacrum",
        "timestamp": 1596551820
    },
    {
        "content": "<p>it seems likely that you can just comment out <a href=\"https://github.com/rust-lang/rust/blob/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11/src/bootstrap/sanity.rs#L221\">https://github.com/rust-lang/rust/blob/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11/src/bootstrap/sanity.rs#L221</a></p>",
        "id": 205914621,
        "sender_full_name": "simulacrum",
        "timestamp": 1596551842
    },
    {
        "content": "<p>UNIX builds of CMake don't support creating MSVC style projects so this check is correct.</p>",
        "id": 205915764,
        "sender_full_name": "mati865",
        "timestamp": 1596552348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119581\">@mati865</span> my point is that we shouldn't need cmake at all for a cross-compile of std?</p>",
        "id": 205915887,
        "sender_full_name": "simulacrum",
        "timestamp": 1596552389
    },
    {
        "content": "<p>its a rabbit hole in any case; downgrading that panic to a warning and then rebuilding yields this</p>\n<div class=\"codehilite\"><pre><span></span><code> ...\n cargo:warning=cc: error: /Zl: No such file or directory\n ...\n</code></pre></div>",
        "id": 205915889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596552392
    },
    {
        "content": "<p>oh, I guess you need to link std perhaps or something like that? not sure</p>",
        "id": 205915926,
        "sender_full_name": "simulacrum",
        "timestamp": 1596552412
    },
    {
        "content": "<p>so there's clearly other stuff that we pull in for that target that's going to assume that the host is windows too</p>",
        "id": 205915934,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596552417
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/channel.20bug.3A.20.22Instruction.20does.20not.20dominate.20all.20uses.22.20.2372470/near/205915887\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119581\">mati865</span> my point is that we shouldn't need cmake at all for a cross-compile of std?</p>\n</blockquote>\n<p>True, this shouldn't trigger when building target only MSVC. Probably should be limited to trigger only if LLVM is going to be built.</p>",
        "id": 205916227,
        "sender_full_name": "mati865",
        "timestamp": 1596552560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/channel.20bug.3A.20.22Instruction.20does.20not.20dominate.20all.20uses.22.20.2372470/near/205915889\">said</a>:</p>\n<blockquote>\n<p>its a rabbit hole in any case; downgrading that panic to a warning and then rebuilding yields this</p>\n<div class=\"codehilite\"><pre><span></span><code> ...\n cargo:warning=cc: error: /Zl: No such file or directory\n ...\n</code></pre></div>\n\n\n</blockquote>\n<p>Maybe you are trying to build dylib std?</p>",
        "id": 205916286,
        "sender_full_name": "mati865",
        "timestamp": 1596552585
    },
    {
        "content": "<p>Seems like that is the default, yes?</p>",
        "id": 205916395,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596552619
    },
    {
        "content": "<p>or wait, I was looking at wrong line in <code>config.toml</code> ...</p>",
        "id": 205916417,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596552635
    },
    {
        "content": "<p>okay, it is the default, so I changed to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>crt-static = true\n</code></pre></div>\n\n\n<p>and things seem to progress further</p>",
        "id": 205916677,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596552746
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/channel.20bug.3A.20.22Instruction.20does.20not.20dominate.20all.20uses.22.20.2372470/near/205916395\">said</a>:</p>\n<blockquote>\n<p>Seems like that is the default, yes?</p>\n</blockquote>\n<p>Try changing <code>crate-type = [\"dylib\", \"rlib\"]</code> to <code>crate-type = [\"rlib\"]</code> in all <code>/library</code> crates.</p>",
        "id": 205916690,
        "sender_full_name": "mati865",
        "timestamp": 1596552753
    },
    {
        "content": "<p>but no</p>",
        "id": 205916703,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596552761
    },
    {
        "content": "<p>You cannot produce dylibs unless you have the linker.</p>",
        "id": 205916732,
        "sender_full_name": "mati865",
        "timestamp": 1596552767
    },
    {
        "content": "<p>okay</p>",
        "id": 205916739,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596552769
    },
    {
        "content": "<p>but I also need to not build LLVM, right?</p>",
        "id": 205916955,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596552861
    },
    {
        "content": "<p>(which is probably going to defeat the purpose of this exercise anyway)</p>",
        "id": 205917035,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596552898
    },
    {
        "content": "<p>but, wait, no, I <em>should</em> be able to build LLVM...</p>",
        "id": 205917488,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596553101
    },
    {
        "content": "<p>(the reason why I thought I might not be able to is that I still saw the same <code>/Zl</code> problem while building <code>compiler-rt</code> during bootstrap)</p>",
        "id": 205917532,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596553127
    },
    {
        "content": "<p>maybe I'll just file a bug about this and leave it for later. This does seem like  a use case we should support</p>",
        "id": 205917603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596553166
    },
    {
        "content": "<p>I'm going to alpha-rename this fork of the original topic (the portion about building locally on linux with windows as one of the targets.)</p>",
        "id": 205917668,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596553199
    },
    {
        "content": "<p>You should be using host LLVM. I thought <code>compiler-rt</code> is build without using CMake.<br>\nAnyway I'll be away for 15 min.</p>",
        "id": 205917747,
        "sender_full_name": "mati865",
        "timestamp": 1596553218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119581\">mati865</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrap.20on.20linux.20w.2F.20support.20for.20cross-compiling.20to.20windows/near/205916227\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/channel.20bug.3A.20.22Instruction.20does.20not.20dominate.20all.20uses.22.20.2372470/near/205915887\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119581\">mati865</span> my point is that we shouldn't need cmake at all for a cross-compile of std?</p>\n</blockquote>\n<p>True, this shouldn't trigger when building target only MSVC. Probably should be limited to trigger only if LLVM is going to be built.</p>\n</blockquote>\n<p>Is part of fixing this (in addition to checking if LLVM is going to be built) to also change the condition here: <a href=\"https://github.com/rust-lang/rust/blob/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11/src/bootstrap/sanity.rs#L221\">https://github.com/rust-lang/rust/blob/5f6bd6ec0ac422991b89bb8643eaa5d9d46eed11/src/bootstrap/sanity.rs#L221</a> to instead say <code>if host.contains(\"msvc\")</code> instead of <code>target</code>?</p>",
        "id": 205920947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596554555
    },
    {
        "content": "<p>imo the sanity check should just be moved to the llvm step, I think the sanity checks in <a href=\"http://sanity.rs\">sanity.rs</a> should be limited to things we really want to check up front</p>",
        "id": 205921184,
        "sender_full_name": "simulacrum",
        "timestamp": 1596554657
    },
    {
        "content": "<p>but this seems like something that's best checked right before we build llvm rather than trying to simulate the conditions that cause such a build to happen</p>",
        "id": 205921235,
        "sender_full_name": "simulacrum",
        "timestamp": 1596554683
    },
    {
        "content": "<p>(e.g., if you provide your own llvm, we shouldn't do this check either probably)</p>",
        "id": 205921263,
        "sender_full_name": "simulacrum",
        "timestamp": 1596554696
    },
    {
        "content": "<p>I'm still confused by your points above: I had thought that by default we do our own local build of LLVM?</p>",
        "id": 205921310,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596554716
    },
    {
        "content": "<p>is your point that in addition to the other changes, I should also be setting the <code>llvm-config</code> thing in <code>config.toml</code> ?</p>",
        "id": 205921347,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596554731
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119581\">mati865</span> <a href=\"#narrow/stream/131828-t-compiler/topic/bootstrap.20on.20linux.20w.2F.20support.20for.20cross-compiling.20to.20wind.2E.2E.2E/near/205917747\">said</a>:</p>\n<blockquote>\n<p>You should be using host LLVM. I thought <code>compiler-rt</code> is build without using CMake.</p>\n</blockquote>\n<p>that is, this is the remark I was confused by.</p>",
        "id": 205921475,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596554787
    },
    {
        "content": "<p>By host LLVM I meant LLVM built for the host system, doesn't matter if it's local build or installed from the distro.</p>",
        "id": 205921954,
        "sender_full_name": "mati865",
        "timestamp": 1596555018
    },
    {
        "content": "<p>okay okay, that makes sense then</p>",
        "id": 205922011,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596555044
    },
    {
        "content": "<p>I was under impression you are building LLVM for windows-msvc which is not possible on Linux.</p>",
        "id": 205922016,
        "sender_full_name": "mati865",
        "timestamp": 1596555046
    },
    {
        "content": "<p>yeah, I'm not <em>trying</em> to do that</p>",
        "id": 205922031,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596555055
    },
    {
        "content": "<p>I just am trying to make the most \"obvious\" changes to <code>config.toml</code> to get support for cross-compiling to windows-msvc in the <code>x.py dist</code> output</p>",
        "id": 205922101,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596555096
    },
    {
        "content": "<p>I have confirmed that <code>compiler-rt</code> is built without CMake via <code>cc-rs</code> crate but I'm not sure if building for msvc will work on Linux.</p>",
        "id": 205922147,
        "sender_full_name": "mati865",
        "timestamp": 1596555122
    },
    {
        "content": "<p>I'll file a bug shortly, this has enough pitfalls that we should probably try to address it, especially if it makes it easier for people to debug problems that only arise when targeting windows-msvc</p>",
        "id": 205922208,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596555137
    },
    {
        "content": "<p>filed: \"support for boostraping on linux with <code>target = [\"x86_64-unknown-linux-gnu\", \"x86_64-pc-windows-msvc\"]</code>\" <a href=\"https://github.com/rust-lang/rust/issues/75154\">#75154</a></p>",
        "id": 205934591,
        "sender_full_name": "pnkfelix",
        "timestamp": 1596561745
    }
]