[
    {
        "content": "<p>On Linux, the maximum stack size of the main thread is typically set by the OS. On Windows, it's requested by the application via a value in the executable's header.</p>\n<p>Currently Rust does not specify a value for the main thread so, on Windows, the linker falls back to requesting only 1 MiB. I think it would be reasonable to raise this value to 4 or 8 MiB by default to be more in line with the default size of other threads. But if a default is set then it should overrideable somehow (a <code>-C</code> option maybe?).</p>\n<p>Does this sound sensible so far? If so I might open an issue for it.</p>",
        "id": 238514333,
        "sender_full_name": "Chris Denton",
        "timestamp": 1620841141
    },
    {
        "content": "<p>If the linker sets it, <code>-Clink-arg</code> should already be able to configure it</p>",
        "id": 238514856,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620841337
    },
    {
        "content": "<p>Sure. But I mean if Rust set a default then it should also have a way to override that default. Otherwise it'll be setting the argument twice, which could have unpredictable results.</p>",
        "id": 238515192,
        "sender_full_name": "Chris Denton",
        "timestamp": 1620841457
    },
    {
        "content": "<p>ah, true</p>",
        "id": 238516495,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620841976
    },
    {
        "content": "<p>on fuchsia we had a lot of problems with the stack size of the main thread differing from the default stack size of spawned threads, so we made the main thread match the spawned thread size (2MiB by default)</p>",
        "id": 238795729,
        "sender_full_name": "tmandry",
        "timestamp": 1621010940
    },
    {
        "content": "<p>the problem was you’d move code from a worker thread to the main thread and suddenly you’d get stack overflows</p>",
        "id": 238795786,
        "sender_full_name": "tmandry",
        "timestamp": 1621010980
    },
    {
        "content": "<p>this happened a lot with async</p>",
        "id": 238795887,
        "sender_full_name": "tmandry",
        "timestamp": 1621011011
    },
    {
        "content": "<p>there’s a linker flag to set it. let me dig it up</p>",
        "id": 238795967,
        "sender_full_name": "tmandry",
        "timestamp": 1621011055
    },
    {
        "content": "<p><code>-Clink-args=-zstack-size=0x200000</code></p>",
        "id": 238796294,
        "sender_full_name": "tmandry",
        "timestamp": 1621011230
    },
    {
        "content": "<p>it does seem like main's default should <em>at least</em> be as much as we give threads</p>",
        "id": 238796665,
        "sender_full_name": "cuviper",
        "timestamp": 1621011394
    },
    {
        "content": "<p>Linux gives you more -- dynamically growing, unless rlimit says otherwise</p>",
        "id": 238796757,
        "sender_full_name": "cuviper",
        "timestamp": 1621011446
    },
    {
        "content": "<p>oh, I didn't know spawned threads get more, that seems odd?</p>",
        "id": 238803914,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1621014418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Windows.3A.20main.20thread.20stack.20size/near/238796757\">said</a>:</p>\n<blockquote>\n<p>Linux gives you more -- dynamically growing, unless rlimit says otherwise</p>\n</blockquote>\n<p>Windows has two values an application can set: the amount of virtual memory to reserve for the stack and the amount of physical memory to commit immediately. Both will be rounded up to the nearest page size. So the stack can grow dynamically from the committed amount to the reserved amount.</p>",
        "id": 238822865,
        "sender_full_name": "Chris Denton",
        "timestamp": 1621023021
    },
    {
        "content": "<p>Tbh I'm not sure there's really any downside to setting something large like 16 MiB or more for a 64-bit target. Though on 32-bit virtual memory is more limited. In any case, I do think it should at least match the default for new threads. I'll open an issue.</p>",
        "id": 238823526,
        "sender_full_name": "Chris Denton",
        "timestamp": 1621023372
    },
    {
        "content": "<p>On Windows both commited and reserved amount counts towards your \"total\" RAM utilization, I believe, so with a larger reserved stack you'd be able to run fewer binaries, either way?</p>",
        "id": 238826992,
        "sender_full_name": "nagisa",
        "timestamp": 1621025022
    },
    {
        "content": "<p>I think the difference is that windows wouldn't page out the other allocated pages into the pagefile in low memory situations.</p>",
        "id": 238827070,
        "sender_full_name": "nagisa",
        "timestamp": 1621025056
    },
    {
        "content": "<p>I'm not sure I understand you? If it's only reserved then it doesn't count for anything important. The memory doesn't actually exist yet. It's just taking a bite out of your application's own personal virtual memory.  If it does get committed then standard rules apply. Some pages of memory may be in actual memory or in the page file.</p>",
        "id": 238830422,
        "sender_full_name": "Chris Denton",
        "timestamp": 1621026669
    },
    {
        "content": "<p>Hm, okay. Though I'm confused as to who's responsible for actually committing it in that case.</p>",
        "id": 238830958,
        "sender_full_name": "nagisa",
        "timestamp": 1621026881
    },
    {
        "content": "<p>Windows is generally fairly inside the camp of not having hidden allocations that can fail without you invoking _some_ API to request memory.</p>",
        "id": 238831062,
        "sender_full_name": "nagisa",
        "timestamp": 1621026934
    },
    {
        "content": "<p>Hm, well I just experimented with spawning multiple processes with insanely large stack size (and a pause to keep them open). There does seem to be a maximum amount you can reserve per application, which on my system is roughly <code>0x7DCED9C9FFF7</code>. I was able to build and run multiple of these applications at once.</p>",
        "id": 238833277,
        "sender_full_name": "Chris Denton",
        "timestamp": 1621028247
    },
    {
        "content": "<p>Maybe I should try running them in a loop and see when I hit a limit.</p>",
        "id": 238833380,
        "sender_full_name": "Chris Denton",
        "timestamp": 1621028318
    },
    {
        "content": "<p>I happened to find this while looking for something else memory related: <a href=\"http://proof%20that%20Windows%20is%20overcommitting%20stacks\">https://superuser.com/questions/1194263/will-microsoft-windows-10-overcommit-memory/1546584#1546584</a>. Admittedly I haven't check their working.</p>",
        "id": 238915323,
        "sender_full_name": "Chris Denton",
        "timestamp": 1621102010
    },
    {
        "content": "<p>that's my understanding as well- you can reserve more than your physical memory but you can't reserve more than your physical memory+swap space. uncommitted reserved memory doesn't need to be backed by any <em>specific</em> page of ram or disk but once you touch it the kernel will give you ram, possibly by paging something else out (which is guaranteed to succeed because of the reserve limit).</p>",
        "id": 238923636,
        "sender_full_name": "rpjohnst",
        "timestamp": 1621110866
    },
    {
        "content": "<p>On windows \"reserve\" only reserves address space, not physical memory. It's commit that actually allocates physical memory and that's when you can hit the commit limit.</p>",
        "id": 238925318,
        "sender_full_name": "Amanieu",
        "timestamp": 1621112640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Windows.3A.20main.20thread.20stack.20size/near/238925318\">said</a>:</p>\n<blockquote>\n<p>On windows \"reserve\" only reserves address space, not physical memory. It's commit that actually allocates physical memory and that's when you can hit the commit limit.</p>\n</blockquote>\n<p>In general yes, but i don't think it can possibly work that way for the stack, can it?</p>",
        "id": 239124407,
        "sender_full_name": "rpjohnst",
        "timestamp": 1621270661
    },
    {
        "content": "<p>Because there's no commit call to signal errors when you grow into the reserved portion of the stack</p>",
        "id": 239124478,
        "sender_full_name": "rpjohnst",
        "timestamp": 1621270684
    },
    {
        "content": "<p>Or hmm, maybe i'm missing something here- it looks like accessing a guard page raises an SEH exception, which is normally what commits more stack, though i can't find very detailed documentation... so perhaps an OOM there would just be like an ordinary stack overflow?</p>",
        "id": 239127220,
        "sender_full_name": "rpjohnst",
        "timestamp": 1621271814
    }
]