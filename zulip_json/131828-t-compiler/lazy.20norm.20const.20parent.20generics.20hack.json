[
    {
        "content": "<p>IIRC always enabling <a href=\"https://github.com/rust-lang/rust/blob/2002ebacfbca288830a3c308ddc8189705c608fe/src/librustc_typeck/collect.rs#L1178-L1183\">this hack</a> previously prevented the compiler from compiling itself.</p>\n<p>I just tested this again and it is now possible to self host this way and most UI tests which fail are due to <a href=\"https://github.com/rust-lang/rust/issues/74159\">#74159</a>.<br>\nDo we have an example (which works on stable rn) which fundamentally requires lazy norm if we use the parent generics here?</p>",
        "id": 203899955,
        "sender_full_name": "lcnr",
        "timestamp": 1594768679
    },
    {
        "content": "<p>I forgot this existed while writing <a href=\"https://internals.rust-lang.org/t/stabilizing-a-const-generics-mvp/12727/3?u=lcnr\">https://internals.rust-lang.org/t/stabilizing-a-const-generics-mvp/12727/3?u=lcnr</a> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 203900152,
        "sender_full_name": "lcnr",
        "timestamp": 1594768811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> the two positions are <code>where</code> clauses and <code>impl</code> headers</p>",
        "id": 203925638,
        "sender_full_name": "eddyb",
        "timestamp": 1594799756
    },
    {
        "content": "<p>just write <code>[(); 1+1]</code> in either and watch everything fall apart</p>",
        "id": 203925733,
        "sender_full_name": "eddyb",
        "timestamp": 1594799814
    },
    {
        "content": "<p>e.g. a <code>T: Into&lt;[U; 1+1]&gt;</code> bound</p>",
        "id": 203925759,
        "sender_full_name": "eddyb",
        "timestamp": 1594799849
    },
    {
        "content": "<p>or <code>impl From&lt;[u8; 1+1]&gt; for Foo&lt;u16&gt;</code></p>",
        "id": 203925772,
        "sender_full_name": "eddyb",
        "timestamp": 1594799871
    },
    {
        "content": "<p>(<code>impl</code> headers behave as if the trait being implemented is another bound in scope, IIRC, and that's what would cause the problem)</p>",
        "id": 203925832,
        "sender_full_name": "eddyb",
        "timestamp": 1594799898
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> note that if you enable this through lazy normalization, it probably just works, or at least the important thing is eager normalization is what causes the cycle. but you probably already know that?</p>",
        "id": 203925890,
        "sender_full_name": "eddyb",
        "timestamp": 1594799967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">value</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>This compiles without lazy norm and with parent generics, do you know what's going on here?</p>",
        "id": 203951726,
        "sender_full_name": "lcnr",
        "timestamp": 1594818056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I'd say try <code>where</code> clauses (on e.g. a <code>fn</code>) instead</p>",
        "id": 203951828,
        "sender_full_name": "eddyb",
        "timestamp": 1594818101
    },
    {
        "content": "<p>we may have changed how <code>impl</code>s do that</p>",
        "id": 203951843,
        "sender_full_name": "eddyb",
        "timestamp": 1594818108
    },
    {
        "content": "<p>it's also possible the \"lazy normalization\" toggle isn't actually what makes most stuff work, lol</p>",
        "id": 203951937,
        "sender_full_name": "eddyb",
        "timestamp": 1594818143
    },
    {
        "content": "<p>e.g. <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> may have made some stuff lazy without being behind any feature-gates</p>",
        "id": 203951959,
        "sender_full_name": "eddyb",
        "timestamp": 1594818152
    },
    {
        "content": "<p>It should be <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I implemented it myself</p>",
        "id": 203951972,
        "sender_full_name": "lcnr",
        "timestamp": 1594818161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/lazy.20norm.20const.20parent.20generics.20hack/near/203951959\">said</a>:</p>\n<blockquote>\n<p>e.g. <span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> may have made some stuff lazy without being behind any feature-gates</p>\n</blockquote>\n<p><span aria-label=\"ghost\" class=\"emoji emoji-1f47b\" role=\"img\" title=\"ghost\">:ghost:</span></p>",
        "id": 203951992,
        "sender_full_name": "lcnr",
        "timestamp": 1594818172
    },
    {
        "content": "<p>and it might be enough to make these examples work</p>",
        "id": 203951995,
        "sender_full_name": "eddyb",
        "timestamp": 1594818174
    },
    {
        "content": "<p><span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 203952038,
        "sender_full_name": "oli",
        "timestamp": 1594818198
    },
    {
        "content": "<p>like do we even try to evaluate constants anymore?</p>",
        "id": 203952194,
        "sender_full_name": "eddyb",
        "timestamp": 1594818271
    },
    {
        "content": "<p>yes</p>",
        "id": 203952238,
        "sender_full_name": "oli",
        "timestamp": 1594818298
    },
    {
        "content": "<p>okay so maybe <code>impl</code> headers changed for whatever reason, and we should try <code>where</code> clauses instead</p>",
        "id": 203952258,
        "sender_full_name": "eddyb",
        "timestamp": 1594818318
    },
    {
        "content": "<p>This still breaks as expected</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">break_me</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"nb\">From</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 203952325,
        "sender_full_name": "lcnr",
        "timestamp": 1594818355
    },
    {
        "content": "<p>okay so we did something to <code>impl</code>s</p>",
        "id": 203952383,
        "sender_full_name": "eddyb",
        "timestamp": 1594818365
    },
    {
        "content": "<p>may have been Chalk-related</p>",
        "id": 203952406,
        "sender_full_name": "eddyb",
        "timestamp": 1594818378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> do you know if we did a crater run with the kind of mode you're testing with locally now?</p>",
        "id": 203952456,
        "sender_full_name": "eddyb",
        "timestamp": 1594818418
    },
    {
        "content": "<p>might be useful to see what breaks :P</p>",
        "id": 203952471,
        "sender_full_name": "eddyb",
        "timestamp": 1594818423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/lazy.20norm.20const.20parent.20generics.20hack/near/203952456\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> do you know if we did a crater run with the kind of mode you're testing with locally now?</p>\n</blockquote>\n<p>I know and we did not</p>",
        "id": 203952483,
        "sender_full_name": "lcnr",
        "timestamp": 1594818434
    },
    {
        "content": "<p>especially if <code>impl</code>s are fine, which used to be the worst part</p>",
        "id": 203952503,
        "sender_full_name": "eddyb",
        "timestamp": 1594818445
    },
    {
        "content": "<p>at least not in the last 3 months</p>",
        "id": 203952521,
        "sender_full_name": "lcnr",
        "timestamp": 1594818450
    },
    {
        "content": "<p>feel free to, I guess :D</p>",
        "id": 203952543,
        "sender_full_name": "eddyb",
        "timestamp": 1594818466
    },
    {
        "content": "<p>or wait 4 I think, when did I start contributing <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 203952552,
        "sender_full_name": "lcnr",
        "timestamp": 1594818469
    },
    {
        "content": "<p>Hmm, I am somwhat more intested in what happens if we always use lazy normalization <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span></p>",
        "id": 203952689,
        "sender_full_name": "lcnr",
        "timestamp": 1594818523
    },
    {
        "content": "<p>I guess both are interesting</p>",
        "id": 203952754,
        "sender_full_name": "eddyb",
        "timestamp": 1594818567
    },
    {
        "content": "<p>I know that lazy norm currently ICEs  when dealing with hrtb</p>",
        "id": 203952856,
        "sender_full_name": "lcnr",
        "timestamp": 1594818612
    },
    {
        "content": "<p>kind of funny, because before deferring const eval was brought up, lazy normalization was originally about making associated type normalization work  with HRTBs</p>",
        "id": 203955137,
        "sender_full_name": "eddyb",
        "timestamp": 1594819871
    }
]