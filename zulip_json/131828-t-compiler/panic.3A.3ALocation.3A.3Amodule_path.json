[
    {
        "content": "<p>Hi, is this the right place to discuss feasibility of a panic::Location method that does the equivalent of the <code>module_path!</code> macro? Asked at project-error-handling first but was told to try here. (<a href=\"#narrow/stream/257204-project-error-handling/topic/panic.3A.3ALocation.20module_path\">https://rust-lang.zulipchat.com/#narrow/stream/257204-project-error-handling/topic/panic.3A.3ALocation.20module_path</a>)</p>",
        "id": 253165144,
        "sender_full_name": "jplatte",
        "timestamp": 1631569295
    },
    {
        "content": "<p>Adding <code>module_path</code> to <code>PanicInfo</code> is not too hard, but I strongly suspect that it'd have a negative perf impact on unaffected code.</p>",
        "id": 253168368,
        "sender_full_name": "nagisa",
        "timestamp": 1631570890
    },
    {
        "content": "<p>the only way is to implement this and see.</p>",
        "id": 253168389,
        "sender_full_name": "nagisa",
        "timestamp": 1631570905
    },
    {
        "content": "<p><code>rg get_caller_location</code> is a good starting point, I'd say.</p>",
        "id": 253168439,
        "sender_full_name": "nagisa",
        "timestamp": 1631570948
    },
    {
        "content": "<p>I actually would prefer a item path rather than module path</p>",
        "id": 253169450,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631571511
    },
    {
        "content": "<p>That'd be <a href=\"https://github.com/rust-lang/rfcs/pull/2818\">https://github.com/rust-lang/rfcs/pull/2818</a>, <a href=\"https://github.com/rust-lang/rfcs/pull/1719\">https://github.com/rust-lang/rfcs/pull/1719</a> and <a href=\"https://github.com/rust-lang/rfcs/pull/466\">https://github.com/rust-lang/rfcs/pull/466</a></p>",
        "id": 253170432,
        "sender_full_name": "nagisa",
        "timestamp": 1631572126
    },
    {
        "content": "<p>I'm actually curious that we have the first two despite the third having been merged...</p>",
        "id": 253170456,
        "sender_full_name": "nagisa",
        "timestamp": 1631572139
    },
    {
        "content": "<p>My own take on this was always that we should have a structural view of the path to the item, including its generics etc exposed to the user.</p>",
        "id": 253170603,
        "sender_full_name": "nagisa",
        "timestamp": 1631572216
    },
    {
        "content": "<p>I would very much rather we don't expose to the users \"just\" a string that they have to parse themselves in some way.</p>",
        "id": 253170643,
        "sender_full_name": "nagisa",
        "timestamp": 1631572250
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/panic.3A.3ALocation.3A.3Amodule_path/near/253170456\">said</a>:</p>\n<blockquote>\n<p>I'm actually curious that we have the first two despite the third having been merged...</p>\n</blockquote>\n<p>I think it's a display issue. It isn't merged.</p>",
        "id": 253171189,
        "sender_full_name": "Gary Guo",
        "timestamp": 1631572576
    },
    {
        "content": "<p>FYI <span class=\"user-mention\" data-user-id=\"198047\">@jplatte</span> I <a href=\"#narrow/stream/131828-t-compiler/topic/function.20names.20in.20.60.23.5Btrack_caller.5D.60\">brought up</a> the same thing but for function names instead of module paths. I would be interested in collaborating on a solution to both of these problems.</p>",
        "id": 253701224,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1631863302
    },
    {
        "content": "<p>Hm, not sure that I can dedicate much time to this. I changed the original function where I wanted this to a macro already.</p>",
        "id": 253739741,
        "sender_full_name": "jplatte",
        "timestamp": 1631884431
    },
    {
        "content": "<p>What are you thinking of in terms of collaboration?</p>",
        "id": 253739865,
        "sender_full_name": "jplatte",
        "timestamp": 1631884472
    },
    {
        "content": "<p>Oh if you don't have the bandwidth, then don't worry about it. I will likely get around to tinkering with it on my own time. If I get function names working maybe I'll try module names too.</p>",
        "id": 253778427,
        "sender_full_name": "Ben Reeves",
        "timestamp": 1631900022
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/panic.3A.3ALocation.3A.3Amodule_path/near/253170643\">said</a>:</p>\n<blockquote>\n<p>I would very much rather we don't expose to the users \"just\" a string that they have to parse themselves in some way.</p>\n</blockquote>\n<p>a compromise here could be the mangled name, though I'm not aware of a structural parser for it (I'm not sure <span class=\"user-mention\" data-user-id=\"124287\">@mw</span>'s AST implementation was updated)</p>",
        "id": 253827373,
        "sender_full_name": "eddyb",
        "timestamp": 1631927796
    },
    {
        "content": "<p>This crate is more up-to-date than mine, I think: <a href=\"https://github.com/EFanZh/ast-demangle\">https://github.com/EFanZh/ast-demangle</a></p>",
        "id": 254015992,
        "sender_full_name": "mw",
        "timestamp": 1632127668
    },
    {
        "content": "<p>oh, cute, <code>nom</code></p>",
        "id": 254084545,
        "sender_full_name": "eddyb",
        "timestamp": 1632158021
    },
    {
        "content": "<p>I didn't consider it but the LL(1) style definitely seems to benefit <code>nom</code> combinators heh</p>",
        "id": 254084586,
        "sender_full_name": "eddyb",
        "timestamp": 1632158039
    }
]