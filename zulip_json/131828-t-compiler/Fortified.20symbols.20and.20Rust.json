[
    {
        "content": "<p>hi all, I recently bumped into an issue where the automated security checks at my company (which primarily target C) are complaining that our executable lost some fortified symbols. from the research I've done, it seems like fortified symbols are primarily a C concept so I'm curious how Rust handles this. does the compiler have guidelines around when it generates fortified symbols? is this done more on a case by case basis?</p>",
        "id": 222000435,
        "sender_full_name": "John Baublitz",
        "timestamp": 1610053407
    },
    {
        "content": "<p>the closest thing I found was <a href=\"https://wiki.debian.org/Hardening#DEB_BUILD_HARDENING_FORTIFY_.28gcc.2Fg.2B-.2B-_-D_FORTIFY_SOURCE.3D2.29\">https://wiki.debian.org/Hardening#DEB_BUILD_HARDENING_FORTIFY_.28gcc.2Fg.2B-.2B-_-D_FORTIFY_SOURCE.3D2.29</a>, which looks entirely unrelated to rust</p>",
        "id": 222000674,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610053520
    },
    {
        "content": "<p>buffer overruns can't happen in safe rust (without some serious unsoundness bugs in the compiler or standard library)</p>",
        "id": 222000806,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610053571
    },
    {
        "content": "<p>my understanding is that this is related to symbols used by the standard library (it appears to be something related to readlink, etc.)</p>",
        "id": 222001074,
        "sender_full_name": "John Baublitz",
        "timestamp": 1610053707
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"228098\">@John Baublitz</span> -- I'm <code>jistone</code> from our IRC, if you didn't know</p>",
        "id": 222001687,
        "sender_full_name": "cuviper",
        "timestamp": 1610054022
    },
    {
        "content": "<p>it is entirely expected that Rust std isn't using those fortified symbols</p>",
        "id": 222001794,
        "sender_full_name": "cuviper",
        "timestamp": 1610054062
    },
    {
        "content": "<p>they depend on <code>__builtin_object_size</code> tracking implemented in GCC and Clang (not LLVM)</p>",
        "id": 222001927,
        "sender_full_name": "cuviper",
        "timestamp": 1610054123
    },
    {
        "content": "<p>gotcha! from our conversation, it sounded like this was evaluated on a case by case basis so I just wanted to get some more info beyond \"this seems like a C thing\"</p>",
        "id": 222002189,
        "sender_full_name": "John Baublitz",
        "timestamp": 1610054238
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> in case you're curious about <code>_FORTIFY_SOURCE</code>, Red Hat has some detailed articles too:<br>\n<a href=\"https://access.redhat.com/blogs/766093/posts/1976213\">https://access.redhat.com/blogs/766093/posts/1976213</a><br>\n<a href=\"https://access.redhat.com/blogs/766093/posts/3606481\">https://access.redhat.com/blogs/766093/posts/3606481</a></p>",
        "id": 222004316,
        "sender_full_name": "cuviper",
        "timestamp": 1610055298
    },
    {
        "content": "<p>and more recent work on Clang: <a href=\"https://developers.redhat.com/blog/2020/02/11/toward-_fortify_source-parity-between-clang-and-gcc/\">https://developers.redhat.com/blog/2020/02/11/toward-_fortify_source-parity-between-clang-and-gcc/</a></p>",
        "id": 222004635,
        "sender_full_name": "cuviper",
        "timestamp": 1610055455
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"n\">__fortify_function</span> <span class=\"n\">__wur</span> <span class=\"kt\">char</span> <span class=\"o\">*</span>\n<span class=\"n\">fgets</span> <span class=\"p\">(</span><span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">__restrict</span> <span class=\"n\">__s</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">__n</span><span class=\"p\">,</span> <span class=\"kt\">FILE</span> <span class=\"o\">*</span><span class=\"n\">__restrict</span> <span class=\"n\">__stream</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">__bos</span> <span class=\"p\">(</span><span class=\"n\">__s</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"p\">)</span> <span class=\"mi\">-1</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">__builtin_constant_p</span> <span class=\"p\">(</span><span class=\"n\">__n</span><span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"n\">__n</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span> <span class=\"n\">__fgets_chk</span> <span class=\"p\">(</span><span class=\"n\">__s</span><span class=\"p\">,</span> <span class=\"n\">__bos</span> <span class=\"p\">(</span><span class=\"n\">__s</span><span class=\"p\">),</span> <span class=\"n\">__n</span><span class=\"p\">,</span> <span class=\"n\">__stream</span><span class=\"p\">);</span>\n\n      <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"kt\">size_t</span><span class=\"p\">)</span> <span class=\"n\">__n</span> <span class=\"o\">&gt;</span> <span class=\"n\">__bos</span> <span class=\"p\">(</span><span class=\"n\">__s</span><span class=\"p\">))</span>\n  <span class=\"k\">return</span> <span class=\"n\">__fgets_chk_warn</span> <span class=\"p\">(</span><span class=\"n\">__s</span><span class=\"p\">,</span> <span class=\"n\">__bos</span> <span class=\"p\">(</span><span class=\"n\">__s</span><span class=\"p\">),</span> <span class=\"n\">__n</span><span class=\"p\">,</span> <span class=\"n\">__stream</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"k\">return</span> <span class=\"n\">__fgets_alias</span> <span class=\"p\">(</span><span class=\"n\">__s</span><span class=\"p\">,</span> <span class=\"n\">__n</span><span class=\"p\">,</span> <span class=\"n\">__stream</span><span class=\"p\">);</span>\n<span class=\"p\">}</span> <span class=\"c1\">//*</span>\n</code></pre></div>\n<p>I forgot what reading glibc is like :(</p>",
        "id": 222005975,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610056101
    },
    {
        "content": "<p>oh yay, hard tabs they assume are 8 spaces too</p>",
        "id": 222006003,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610056118
    },
    {
        "content": "<p>seems preferable to memory freeze/thaw schemes</p>",
        "id": 222008325,
        "sender_full_name": "oliver",
        "timestamp": 1610057176
    }
]