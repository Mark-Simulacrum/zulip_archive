[
    {
        "content": "<p>Hey @eddyb I wanted to get your feedback on something here (<span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> may have opinions too?)</p>",
        "id": 130785333,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533224156
    },
    {
        "content": "<p>the supposed goal is to include impl's that occur underneath <code>fn</code> bodies</p>",
        "id": 130785396,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533224187
    },
    {
        "content": "<p>but those <code>impl's</code> might be implementing traits that are only defined in those <code>fn</code> bodies, or in <code>mod</code>s that are only in those <code>fn</code> bodies, etc</p>",
        "id": 130785407,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533224214
    },
    {
        "content": "<p>IMHO it is not correct for rustdoc to be collecting items with a visitor.</p>",
        "id": 130785451,
        "sender_full_name": "nagisa",
        "timestamp": 1533224264
    },
    {
        "content": "<p>A couple different options I see here are: 1. punt: If you impl a trait that was declared under <code>fn</code>, then you lose (as in, <code>rustdoc</code> might break in some way for you),</p>",
        "id": 130785453,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533224266
    },
    {
        "content": "<p>And even then, it should be possible for rustdoc to make a visitor that does <em>not</em> visit bodies?</p>",
        "id": 130785502,
        "sender_full_name": "nagisa",
        "timestamp": 1533224286
    },
    {
        "content": "<p>AST is a tree after all.</p>",
        "id": 130785520,
        "sender_full_name": "nagisa",
        "timestamp": 1533224293
    },
    {
        "content": "<p>I guess we can categorize @nagisa's note as Option 2: tell <code>rustdoc</code> to stop doing it whatever way they're doing it now, and instead write a different visitor/folder implementation specialized totheir needs?</p>",
        "id": 130785571,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533224367
    },
    {
        "content": "<p>option 3: make <code>-Z everybody_loop</code> include all sorts of items underneath <code>fn</code> bodies, beyond <code>impl</code> items. I would assume to be robust (in the sense that output from <code>-Z everybody_loop</code> is meant to be accepted by <code>rustc</code> whenever the original code was accepted) that we would have to include pretty much every kind of item.  (And instead the filtering would be based on inspecting what kind of <code>StmtKind</code> we are looking at.)</p>",
        "id": 130785759,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533224551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> assertly earlier (correctly, I think) that <code>rustdoc</code> is the only serious client of <code>-Z unpretty=everybody_loops</code>. Even I haven't used it in quite some time.</p>",
        "id": 130785999,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533224837
    },
    {
        "content": "<p>I personally wanted to help with any adjustment that happened to it, in part because I feel responsible for whatever damage it has done, and also because I want to make sure that it keeps working for my own needs in the future.</p>",
        "id": 130786012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533224880
    },
    {
        "content": "<p>Having said that, I think I would be totally fine with having it include the items under fn bodies.</p>",
        "id": 130786057,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533224897
    },
    {
        "content": "<p>(and effectively it would \"just\" be filtering out all expressions instead of the more invasive rewrite that it did before.)</p>",
        "id": 130786092,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533224937
    },
    {
        "content": "<p>But either way, I don't think the relatively simple \"block accumulation\" strategy that <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> recommended last night on Discord is <em>quite</em> good enough ...</p>",
        "id": 130786129,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533224981
    },
    {
        "content": "<p>There might also be things like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Struct</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">}];</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>which is not an item but contains an impl</p>",
        "id": 130786388,
        "sender_full_name": "oli",
        "timestamp": 1533225258
    },
    {
        "content": "<p>could the rustdoc driver just stop before item collection and do its stuff there? Without compiling everything we can basically never guarantee that we found everything.</p>",
        "id": 130786542,
        "sender_full_name": "oli",
        "timestamp": 1533225447
    },
    {
        "content": "<p>we might even prevent the generation of most MIR (of constants and const fn we'd still need it)</p>",
        "id": 130786605,
        "sender_full_name": "oli",
        "timestamp": 1533225498
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> if you don't tab-complete me you won't ping me (e.g. @pnkfelix wouldn't ping you either)</p>",
        "id": 130786874,
        "sender_full_name": "eddyb",
        "timestamp": 1533225821
    },
    {
        "content": "<p>Arg yes I should know that by now</p>",
        "id": 130786928,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533225862
    },
    {
        "content": "<p>and I assumed that the only sane thing to do is collect all items</p>",
        "id": 130786929,
        "sender_full_name": "eddyb",
        "timestamp": 1533225865
    },
    {
        "content": "<p>including the block nesting around them</p>",
        "id": 130786931,
        "sender_full_name": "eddyb",
        "timestamp": 1533225873
    },
    {
        "content": "<p>to not break <code>{ fn foo() {} } { fn foo() {} }</code></p>",
        "id": 130786934,
        "sender_full_name": "eddyb",
        "timestamp": 1533225883
    },
    {
        "content": "<p>Youâ€™d be surprised how far one might get with insane approaches</p>",
        "id": 130852504,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533318154
    },
    {
        "content": "<p>This is the problem with a short user name</p>",
        "id": 130852505,
        "sender_full_name": "pnkfelix",
        "timestamp": 1533318154
    }
]