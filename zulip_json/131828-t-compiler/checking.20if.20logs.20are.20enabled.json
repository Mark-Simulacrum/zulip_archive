[
    {
        "content": "<p>How do you check if logs are enabled again?</p>",
        "id": 250396811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745462
    },
    {
        "content": "<p>e.g., I want something like</p>",
        "id": 250396820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745467
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">logs_enabld_in</span><span class=\"o\">-</span><span class=\"n\">this_module</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"cm\">/* some debug that are kind of expensive */</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 250396846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745480
    },
    {
        "content": "<p>You'd go through Dispatch::is_enabled i think.</p>",
        "id": 250397182,
        "sender_full_name": "nagisa",
        "timestamp": 1629745605
    },
    {
        "content": "<p><a href=\"https://docs.rs/tracing/0.1.5/tracing/dispatcher/struct.Dispatch.html#method.enabled\">https://docs.rs/tracing/0.1.5/tracing/dispatcher/struct.Dispatch.html#method.enabled</a></p>",
        "id": 250397291,
        "sender_full_name": "nagisa",
        "timestamp": 1629745646
    },
    {
        "content": "<p>Possibly with some fake span that you don't enter to obtain metadata to test with?</p>",
        "id": 250397499,
        "sender_full_name": "nagisa",
        "timestamp": 1629745724
    },
    {
        "content": "<p>bah</p>",
        "id": 250397524,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745738
    },
    {
        "content": "<p>that sounds hard and annoying :)</p>",
        "id": 250397535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745744
    },
    {
        "content": "<p>I don't see any examples using it, more to the point</p>",
        "id": 250397561,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745757
    },
    {
        "content": "<p>lol I guess I could write an evil helper function like <code>debug!(\"{}\", { is_enabled = true; () })</code></p>",
        "id": 250397615,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745787
    },
    {
        "content": "<p>maybe I'll cheat and make it conditional on <code>-Zverbose</code></p>",
        "id": 250397716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745821
    },
    {
        "content": "<p>Not sure if that would work in general case. There are a couple ways logs can be disabled. Your case would only cover compile time i think.</p>",
        "id": 250397761,
        "sender_full_name": "nagisa",
        "timestamp": 1629745849
    },
    {
        "content": "<p>yeah. that might be enough.</p>",
        "id": 250397786,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745866
    },
    {
        "content": "<p>Or maybe I'm wrong idk.</p>",
        "id": 250397792,
        "sender_full_name": "nagisa",
        "timestamp": 1629745868
    },
    {
        "content": "<p>I'm using verbose anyway</p>",
        "id": 250397797,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745874
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/checking.20if.20logs.20are.20enabled/near/250397792\">said</a>:</p>\n<blockquote>\n<p>Or maybe I'm wrong idk.</p>\n</blockquote>\n<p>well, I think you're wrong</p>",
        "id": 250397811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745880
    },
    {
        "content": "<p>I don't think that the arguments to <code>debug!</code> are evaluated</p>",
        "id": 250397820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745887
    },
    {
        "content": "<p>if logs are not enabled</p>",
        "id": 250397824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745890
    },
    {
        "content": "<p>but regardless, <code>-Zverbose</code> is probably \"good enough\"</p>",
        "id": 250397840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745896
    },
    {
        "content": "<p>I'm adding some code that dumps out the text of expressions during type-checking</p>",
        "id": 250397880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745916
    },
    {
        "content": "<p>dont' want to slow down bootstrap time</p>",
        "id": 250397892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1629745920
    },
    {
        "content": "<p>So this is what I would do. <code>tracing::dispatch::get_default(|d| d.enabled(debug_span!(\"enable_check\").metadata()))</code></p>",
        "id": 250398284,
        "sender_full_name": "nagisa",
        "timestamp": 1629746100
    },
    {
        "content": "<p>Typing code on phone is haaard</p>",
        "id": 250398315,
        "sender_full_name": "nagisa",
        "timestamp": 1629746114
    },
    {
        "content": "<p>You could also use event! macro to construct test metadata but i don't think we ever filter on span vs. Event distinction.</p>",
        "id": 250398502,
        "sender_full_name": "nagisa",
        "timestamp": 1629746206
    },
    {
        "content": "<p>Or you could also construct event with empty fields, test for enableness and record the fields after. I can write that down once I'm back at computer.</p>",
        "id": 250398698,
        "sender_full_name": "nagisa",
        "timestamp": 1629746294
    },
    {
        "content": "<p>Ah hm not sure you can do that with events actually. Might be specific to spans.</p>",
        "id": 250398965,
        "sender_full_name": "nagisa",
        "timestamp": 1629746431
    }
]