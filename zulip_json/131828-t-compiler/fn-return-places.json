[
    {
        "content": "<p>Is it true that the return place for function calls is always a local, never a compound path (with projections) or so? Would it be worth encoding that in the type? I plan to rely on that for my Stacked Borrows implementation. (The reason being a local is helpful is that it means I know the place this path evaluates to will be the same after the fn call. If the call is <code>_local[idx] = foo(something)</code>, it might be that <code>foo</code> can mutate <code>idx</code>.)</p>",
        "id": 136392578,
        "sender_full_name": "RalfJ",
        "timestamp": 1540367376
    },
    {
        "content": "<p>I don't think that will be true once we stop being very dumb about return value optimizations, e.g. I think <code>return Foo { x: a(), y: b() }</code> should lower to something like <code>_0.x = a(); _0.y = b();</code> to avoid temporaries</p>",
        "id": 136392716,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540367574
    },
    {
        "content": "<p>hm also I found a <code>*_1 = foo()</code></p>",
        "id": 136396955,
        "sender_full_name": "RalfJ",
        "timestamp": 1540373009
    },
    {
        "content": "<p>all of these are fine though, the one thing that does not work is array indices...</p>",
        "id": 136397011,
        "sender_full_name": "RalfJ",
        "timestamp": 1540373045
    },
    {
        "content": "<p>Array indices will definitely show up (e.g., <code>return [foo(), bar()]</code> should write to <code>_0[0]</code> and <code>_0[1]</code>). <em>variable</em> array indices are a bit harder to imagine but could show up in combination with a move forwarding optimization, consider <code>fn foo() -&gt; [i32; 500] { let mut a = [0; 500]; for i in 0..500 { a[i] = f(i); } a }</code> and suppose we eliminate the copy from <code>a</code> into the return place</p>",
        "id": 136397467,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1540373684
    },
    {
        "content": "<p>I'll just not retag behind array indices for now</p>",
        "id": 136398174,
        "sender_full_name": "RalfJ",
        "timestamp": 1540374574
    },
    {
        "content": "<p>which means the compiler wouldnt be allowed to track aliasing of references stored in arrays as precisely as it does for locals that are directly of ref type</p>",
        "id": 136398235,
        "sender_full_name": "RalfJ",
        "timestamp": 1540374608
    },
    {
        "content": "<p>not perfect, but a start I guess...</p>",
        "id": 136398241,
        "sender_full_name": "RalfJ",
        "timestamp": 1540374617
    }
]