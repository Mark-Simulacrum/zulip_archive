[
    {
        "content": "<p>It's a common knowledge that something like</p>\n<div class=\"codehilite\"><pre><span></span><code>[target.x86_64-unknown-linux-gnu]\nlinker = &quot;/run/current-system/sw/bin/clang&quot;\nrustflags = [ &quot;-Clink-arg=-fuse-ld=lld&quot; ]\n</code></pre></div>\n\n\n<p>makes rust compile (linking) time faster</p>",
        "id": 206939359,
        "sender_full_name": "matklad",
        "timestamp": 1597417862
    },
    {
        "content": "<p>Can I somehow opt into this optimization for compiling rustc itself?</p>",
        "id": 206939438,
        "sender_full_name": "matklad",
        "timestamp": 1597417878
    },
    {
        "content": "<p>Or does it already use the fast linker?</p>",
        "id": 206939467,
        "sender_full_name": "matklad",
        "timestamp": 1597417888
    },
    {
        "content": "<p>I don't think our defaults are any different than other Rust projects</p>",
        "id": 206939501,
        "sender_full_name": "simulacrum",
        "timestamp": 1597417906
    },
    {
        "content": "<p>but you can set <code>use-lld = true</code> in Cargo.toml and that should work</p>",
        "id": 206939639,
        "sender_full_name": "simulacrum",
        "timestamp": 1597417981
    },
    {
        "content": "<p>er, config.toml</p>",
        "id": 206939653,
        "sender_full_name": "simulacrum",
        "timestamp": 1597417987
    },
    {
        "content": "<p>I think I always used <code>RUSTFLAGS=-Clinker=clang -Clink-arg=-fuse-ld=lld ./x.py build</code> for that</p>",
        "id": 206940725,
        "sender_full_name": "mw",
        "timestamp": 1597418598
    },
    {
        "content": "<p>there's a setting in <code>config.toml</code> for using LLD during LLVM builds which greatly helps when you have to rebuild LLVM</p>",
        "id": 206940784,
        "sender_full_name": "mw",
        "timestamp": 1597418640
    },
    {
        "content": "<p>there's both llvm lld and rust lld</p>",
        "id": 206941236,
        "sender_full_name": "simulacrum",
        "timestamp": 1597418881
    },
    {
        "content": "<p>Yeah, I recently fixed <code>use-lld</code> to pass <code>-fuse-ld=lld</code> so in order to get fast compile times you ideally should set <code>llvm.use-linker = \"lld\"</code>, <code>rust.use-lld = true</code>, <code>cc=clang</code>, <code>cxx=clang++</code>, <code>ar=llvm-ar</code>, <code>ranlib=llvm-ranlib</code>, <code>linker=clang</code>.</p>",
        "id": 206951872,
        "sender_full_name": "mati865",
        "timestamp": 1597424333
    },
    {
        "content": "<p>In <code>config.toml</code> ofc.</p>",
        "id": 206952093,
        "sender_full_name": "mati865",
        "timestamp": 1597424425
    },
    {
        "content": "<p>is llvm-ar faster than gnu ar ?</p>",
        "id": 206999197,
        "sender_full_name": "lzutao",
        "timestamp": 1597455324
    },
    {
        "content": "<p>rustc does not use external archiver directly, it creates archives directly in-memory, using the same underlying code llvm-ar does.</p>",
        "id": 207000838,
        "sender_full_name": "nagisa",
        "timestamp": 1597458079
    },
    {
        "content": "<p>AFAIK it's used for compiling C/C++ code.<br>\nDon't know if it's faster though.</p>",
        "id": 207016488,
        "sender_full_name": "mati865",
        "timestamp": 1597488878
    },
    {
        "content": "<p>Hm, so I set <code>use-lld</code>, and I have the following problem</p>",
        "id": 207131953,
        "sender_full_name": "matklad",
        "timestamp": 1597663746
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Î» ldd ./build/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/rust-lld\n    linux-vdso.so.1 (0x00007ffc76f1f000)\n    libpthread.so.0 =&gt; /nix/store/xg6ilb9g9zhi2zg1dpi4zcp288rhnvns-glibc-2.30/lib/libpthread.so.0 (0x00007f4457d23000)\n    libLLVM-10-rust-1.46.0-beta.so =&gt; not found\n</code></pre></div>",
        "id": 207131961,
        "sender_full_name": "matklad",
        "timestamp": 1597663755
    },
    {
        "content": "<p>Note that I use system LLVM</p>",
        "id": 207131975,
        "sender_full_name": "matklad",
        "timestamp": 1597663783
    },
    {
        "content": "<p>So my guess is that <code>use-lld</code> requires one to build LLVM, and is incompatible with system llvm. Is this guess correct?</p>",
        "id": 207132119,
        "sender_full_name": "matklad",
        "timestamp": 1597663917
    },
    {
        "content": "<p>bootstrap rust-lld is linked against the same LLVM as the bootstrap rustc.</p>",
        "id": 207132177,
        "sender_full_name": "bjorn3",
        "timestamp": 1597663951
    },
    {
        "content": "<p>Bootstrap should automatically set <code>LD_LIBRARY_PATH</code> to include all libraries shipped with rustc. (<code>libLLVM-*.so</code>, <code>libstd-*.so</code> and <code>librustc_driver-*.so</code>)</p>",
        "id": 207132218,
        "sender_full_name": "bjorn3",
        "timestamp": 1597664011
    },
    {
        "content": "<p>If you want to manually invoke rust-lld you have to use <code>LD_LIBRARY_PATH=\"./build/x86_64-unknown-linux-gnu/stage0/lib\"</code> I think.</p>",
        "id": 207132285,
        "sender_full_name": "bjorn3",
        "timestamp": 1597664055
    },
    {
        "content": "<p>Hm, so the actual error I get is</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling memchr v2.3.3\nerror: linker `/home/matklad/projects/rust/1/build/x86_64-unknown-linux-gnu/stage0/lib/rustlib/x86_64-unknown-linux-gnu/bin/rust-lld` not found\n  |\n  = note: No such file or directory (os error 2)\n\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 207132337,
        "sender_full_name": "matklad",
        "timestamp": 1597664101
    },
    {
        "content": "<p>You are using NixOS, right? Did you patchelf <code>rust-lld</code>?</p>",
        "id": 207132447,
        "sender_full_name": "bjorn3",
        "timestamp": 1597664181
    },
    {
        "content": "<p>Yup, I am on NixOs, no, I didn't patchelf, let me check this...</p>",
        "id": 207132468,
        "sender_full_name": "matklad",
        "timestamp": 1597664202
    },
    {
        "content": "<p>It works!</p>",
        "id": 207133604,
        "sender_full_name": "matklad",
        "timestamp": 1597665076
    },
    {
        "content": "<p><code>  = note: rust-lld: error: unable to find library -ldl</code></p>",
        "id": 207133607,
        "sender_full_name": "matklad",
        "timestamp": 1597665078
    },
    {
        "content": "<p>Kinda :D gotta find those libraries somewhere...</p>",
        "id": 207133620,
        "sender_full_name": "matklad",
        "timestamp": 1597665092
    },
    {
        "content": "<p>on nixos the stdenv <code>gcc</code> will be wrapped up to provide paths to glibc sysroot implicitly. You gotta do that same thing yourself and/or adjust environment to the same effect.</p>",
        "id": 207134102,
        "sender_full_name": "nagisa",
        "timestamp": 1597665453
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">rust</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">codegen</span><span class=\"o\">-</span><span class=\"n\">units</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"o\">-</span><span class=\"n\">lld</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"></span>\n\n<span class=\"p\">[</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">llvm</span><span class=\"o\">-</span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;llvm-config&quot;</span><span class=\"w\"></span>\n<span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">&quot;clang&quot;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>The following seems not to break immediately for me</p>",
        "id": 207134244,
        "sender_full_name": "matklad",
        "timestamp": 1597665564
    },
    {
        "content": "<p>All that <code>use-lld</code> does on non MSVC targets is passing <code>-fuse-ld=lld</code> to the linker so it definitely uses system LLD.</p>",
        "id": 207144906,
        "sender_full_name": "mati865",
        "timestamp": 1597671644
    }
]