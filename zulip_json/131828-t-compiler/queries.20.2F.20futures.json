[
    {
        "content": "<p>Based on the talk of queries over in the steering meeting, I'm curious if:</p>\n<p>1. Could the compiler's query system be written in terms of futures<br>\n2. Would there be any benefit to it, if so?</p>",
        "id": 147825603,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542383943
    },
    {
        "content": "<blockquote>\n<p>1. Could the compiler's query system be written in terms of futures</p>\n</blockquote>\n<p>Dubious, almost no work compiler does is asynchronous.</p>",
        "id": 147825673,
        "sender_full_name": "nagisa",
        "timestamp": 1542383999
    },
    {
        "content": "<p>yeah, the compiler would have to have something useful to do while it's waiting for a future to finish.</p>",
        "id": 147825766,
        "sender_full_name": "mw",
        "timestamp": 1542384040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> / <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> \"smaller\" queries were mentioned during the meeting</p>",
        "id": 147826577,
        "sender_full_name": "nagisa",
        "timestamp": 1542384647
    },
    {
        "content": "<p>can you elaborate on what was meant by “smaller”?</p>",
        "id": 147826587,
        "sender_full_name": "nagisa",
        "timestamp": 1542384658
    },
    {
        "content": "<p>finer-grained, I assume?</p>",
        "id": 147826692,
        "sender_full_name": "eddyb",
        "timestamp": 1542384725
    },
    {
        "content": "<p>yes, esp. since we want to make at least some of them \"larger\"</p>",
        "id": 147826698,
        "sender_full_name": "mw",
        "timestamp": 1542384728
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/next-steps-for-reducing-overall-compilation-time/8429/4?u=michaelwoerister\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/next-steps-for-reducing-overall-compilation-time/8429/4?u=michaelwoerister\">https://internals.rust-lang.org/t/next-steps-for-reducing-overall-compilation-time/8429/4?u=michaelwoerister</a></p>",
        "id": 147826728,
        "sender_full_name": "mw",
        "timestamp": 1542384760
    },
    {
        "content": "<p>So, for example I’m making a query currently to collect <code>#[optimize]</code> attributes from all the items in a crate, which essentially ends up touching all the items in a crate.</p>",
        "id": 147826773,
        "sender_full_name": "nagisa",
        "timestamp": 1542384805
    },
    {
        "content": "<p>how would one make it more fine-grained?</p>",
        "id": 147826776,
        "sender_full_name": "nagisa",
        "timestamp": 1542384810
    },
    {
        "content": "<p>I can’t see us being able to avoid such queries any way…</p>",
        "id": 147826889,
        "sender_full_name": "nagisa",
        "timestamp": 1542384872
    },
    {
        "content": "<p>what exactly is the purpose of this query?</p>",
        "id": 147827650,
        "sender_full_name": "mw",
        "timestamp": 1542385495
    },
    {
        "content": "<p>Don't we usually have a query to get such info for just one item and then have the collector run that query on all items yo cache the result if the result can only be computed in the current query</p>",
        "id": 147828489,
        "sender_full_name": "oli",
        "timestamp": 1542386246
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> yes, that makes sense if each individual query is expensive</p>",
        "id": 147828678,
        "sender_full_name": "mw",
        "timestamp": 1542386432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> I think the main reason to do that would be as part of parallel execution — if you have two threads that both want to compute the type-check of X at the same time, you presently have to block (or else duplicate the work). I don't think it's worthwhile though.</p>",
        "id": 147840593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397117
    },
    {
        "content": "<p>but once we have a working parallel compilation implementation this is the kind of thing we can explore</p>",
        "id": 147840616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397143
    },
    {
        "content": "<p>(that is, trying to get some data on how much these sorts of conflicts arise in practice)</p>",
        "id": 147840628,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542397161
    },
    {
        "content": "<p>parallel queries already provides asynchronous execution of queries -- I guess it wouldn't be too hard to provide a futures-like api in addition to the blocking one. But I also think that the rayon-like par_iter() api covers 95% of the use-cases pretty well.</p>",
        "id": 147851663,
        "sender_full_name": "mw",
        "timestamp": 1542408384
    }
]