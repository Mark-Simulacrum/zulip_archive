[
    {
        "content": "<p>When working on improving support for custom attributes on statements, I discovered that the <code>unused_doc_comments</code> lint is currently not firing for inner items.</p>\n<p>For example, <a href=\"https://github.com/rust-lang/rust/blob/07a63e6d1fabf3560e8e1e17c1d56b10a06152d9/library/core/src/ptr/mod.rs#L1148-L1157\">https://github.com/rust-lang/rust/blob/07a63e6d1fabf3560e8e1e17c1d56b10a06152d9/library/core/src/ptr/mod.rs#L1148-L1157</a></p>\n<p>This is due to the way that we handle attributes on statements internally, and will be fixed by my branch.</p>\n<p>However, I'm not sure if we want to start linting things like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">outer</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// My doc comment</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">some_inner_fn</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>One one hand, the lint description is 'rustdoc does not generate documentation for X', which certainly applies in this case. However, this feels different from writing a doc comment on, for exampe, a 'let' statement:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// This comment does nothing</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">25</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>Even if a doc comment on a nested item isn't rendered, it can still trigger formatting by an IDE. It also allows keeping the same style of comments across all functions, which seems nice for consistency.</p>",
        "id": 214317449,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603461967
    },
    {
        "content": "<p>that seems like something I would handle with an <code>allow(unused_doc_comments)</code> IMO</p>",
        "id": 214319055,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603462751
    },
    {
        "content": "<p>rustdoc should warn if documentation is being ignored</p>",
        "id": 214319068,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603462757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Do you think it would make sense to convert those to normal comments?</p>",
        "id": 214332638,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469391
    },
    {
        "content": "<p>Yes, I think so</p>",
        "id": 214332653,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603469400
    },
    {
        "content": "<p>but you said you liked the symmetry with doc-comments</p>",
        "id": 214332725,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603469419
    },
    {
        "content": "<p>I don't have a strong opinon on it</p>",
        "id": 214332746,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469429
    },
    {
        "content": "<p>my branch found several cases of it in the stdlib, so I thought it would be good to come up with an overall policy</p>",
        "id": 214332781,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469457
    },
    {
        "content": "<p>this seems like a t-libs question IMO, but my opinion is that the rustdoc behavior of warning on the comments is correct</p>",
        "id": 214332923,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603469530
    },
    {
        "content": "<p>As a side note, applying <code>#[allow(unused_doc_comments)]</code> doesn't work the way you might initially expect</p>",
        "id": 214332933,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469537
    },
    {
        "content": "<p>applying it to a function affects things <em>inside</em> the function</p>",
        "id": 214332946,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469549
    },
    {
        "content": "<p>it doesn't affect doc comments on the function itself, since you can't have attributes on attributes</p>",
        "id": 214332963,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469562
    },
    {
        "content": "<p>oh that is confusing :/</p>",
        "id": 214332986,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603469574
    },
    {
        "content": "<p>e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(unused_doc_comments)]</span><span class=\"w\"></span>\n<span class=\"sd\">/// This is a doc comment</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>will still warn on the doc comment</p>",
        "id": 214333019,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469595
    },
    {
        "content": "<p>does it make sense to fix that? I would expect it to apply to both the function and the attributes on the function</p>",
        "id": 214333055,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603469614
    },
    {
        "content": "<p>I think that would make sense - I think that's what users will expect. However, it does introduce something that looks sort of like 'attributes on attributes', so I think it would need an FCP</p>",
        "id": 214333227,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469693
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span></p>",
        "id": 214333294,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603469728
    },
    {
        "content": "<p>the downside is that it makes <code>unused_doc_comments</code> special w.r.t to how lint level scoping works</p>",
        "id": 214333461,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469794
    },
    {
        "content": "<p>I don't know how much complexity that will introduce into the linting infrastructure</p>",
        "id": 214333477,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469806
    },
    {
        "content": "<p>if we decide to keep the current behavior, I think we should add a note to 'unused_doc_comments' warnings when there's a <code>#[allow(unused_doc_comments)]</code> that doesn't actually apply</p>",
        "id": 214333545,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469844
    },
    {
        "content": "<p>Since</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(unused_doc_comments)]</span><span class=\"w\"></span>\n<span class=\"sd\">/// A doc comment</span>\n</code></pre></div>\n\n<p>really looks like it should be allowing that doc comment</p>",
        "id": 214333641,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469887
    },
    {
        "content": "<p>I was actually suggesting that we <em>always</em> make <code>allow</code> apply to the attributes</p>",
        "id": 214333668,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603469911
    },
    {
        "content": "<p>not special case <code>unused_doc_comments</code></p>",
        "id": 214333684,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603469921
    },
    {
        "content": "<p>hmm</p>",
        "id": 214333692,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469929
    },
    {
        "content": "<p>are there other attributes that make sense when applied to attributes</p>",
        "id": 214333702,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469939
    },
    {
        "content": "<p>I guess there's 'unknown lint'</p>",
        "id": 214333742,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603469962
    },
    {
        "content": "<p>huh - it looks like that already has the expected behavior</p>",
        "id": 214333920,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603470042
    },
    {
        "content": "<p>This doesn't warn:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[allow(unknown_lints)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(something)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214333966,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603470070
    },
    {
        "content": "<p>but it does warn if you swap the order:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"cp\">#[allow(something)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unknown_lints)]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 214334029,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603470106
    },
    {
        "content": "<p>so, I guess we already have some form of 'attributes on attributes' (semantically, not syntactically)</p>",
        "id": 214334048,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603470122
    },
    {
        "content": "<p>I don't know if that's a bug, or a behavior we want to extend to unused_doc_comments</p>",
        "id": 214334246,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603470219
    },
    {
        "content": "<p>personally I'd like to extend it</p>",
        "id": 214336021,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603471078
    },
    {
        "content": "<p>To make things even more confusing, <code>#[allow(unused_attributes)]</code> applies to sibiling attributes in any order</p>",
        "id": 214350562,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603478357
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unused_attributes)]</span><span class=\"w\"> </span><span class=\"cp\">#[inline]</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">first</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"> </span><span class=\"cp\">#[allow(unused_attributes)]</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">second</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">#[inline]</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">third</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>only the last function produces a warning</p>",
        "id": 214350622,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603478397
    },
    {
        "content": "<p>It turns out that this was caused by an inconsistency in how some of the lint visitors handle statements</p>",
        "id": 214363327,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603485577
    },
    {
        "content": "<p>The any-order behavior in the above snippet looks like the behavior we want for <code>#[allow(unused_doc_comments)]</code> as well</p>",
        "id": 214363416,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603485612
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/rust-lang/rust/pull/78306\">https://github.com/rust-lang/rust/pull/78306</a> to fix this</p>",
        "id": 214367371,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603487874
    },
    {
        "content": "<p>FWIW, I find doc-comments to be useful besides <code>rustdoc</code>-rendering. If <code>mod private { /** doc-comment */ pub fn __ () {} }</code> does not fire a warning, then neither should <code>fn private () { /** doc-comment */ pub fn __ () {} }</code>. I like the way these kind of comments \"have direction\" in that they are an attribute applied to the item below.<br>\nSo, <em>personally</em>, it would bother me if these kind of things started to be linted. So, if that were the case, there should, at least. be a dedicated special lint. Otherwise I _know_ I'd simply end up slapping <code>#![allow(unused_doc_comments)]</code> at the root of my crates <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 214429223,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603547762
    },
    {
        "content": "<p>I guess I'm a little confused - when would this warn that you <em>want</em> to know about it? What lint would we be splitting out?</p>",
        "id": 214435706,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603556401
    },
    {
        "content": "<p>I'm fine with making this allow by default FWIW</p>",
        "id": 214435760,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603556438
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> Are you referring to my comment on the pull request? I was just splitting out internal rustc changes that have nothing to do with the lint</p>",
        "id": 214436427,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603557266
    },
    {
        "content": "<p>those changes are what exposed this behavior in the first place</p>",
        "id": 214436434,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1603557279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> I'm referring to <span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> 's comment:</p>\n<blockquote>\n<p>there should, at least. be a dedicated special lint. Otherwise I _know_ I'd simply end up slapping #![allow(unused_doc_comments)] at the root of my crates</p>\n</blockquote>",
        "id": 214436525,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603557384
    },
    {
        "content": "<p>I'm asking if we don't lint on statements what <em>would</em> be linted</p>",
        "id": 214436532,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603557399
    },
    {
        "content": "<blockquote>\n<p>If <code>mod private { /** doc-comment */ pub fn __ () {} }</code> does not fire a warning, then neither should <code>fn private () { /** doc-comment */ pub fn __ () {} }</code>. </p>\n</blockquote>\n<p>FWIW I don't like that <code>mod private</code> silences all lints inside it either, that exposes rustdoc internals a little. <code>Strip</code> should only affect the rendered docs IMO, not the warnings themselves.</p>",
        "id": 214436619,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603557485
    },
    {
        "content": "<p>I see, then I had interpreted <code>unused_doc_comments</code> differently (as one warning against docstrings on <em>statements</em>). If private items get linted, then items inside non-type-namespace scopes should get linted too <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 214436910,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603557864
    },
    {
        "content": "<p>sorry - I was talking about the world I <em>want</em> to see, not as it is. Currently <code>mod -&gt; pub fn</code> does not lint, because the private module is completely stripped.</p>",
        "id": 214436946,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603557937
    },
    {
        "content": "<p>I'm still not sure what <code>unused_doc_comments</code> <em>does</em> without the changes in <a href=\"https://github.com/rust-lang/rust/pull/78306\">https://github.com/rust-lang/rust/pull/78306</a>, though.</p>",
        "id": 214436998,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603557973
    },
    {
        "content": "<p>What I mean is that after consideration, the world you want to see for that attribute makes more sense than mine <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 214437316,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603558338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232018\">Daniel Henry-Mantilla</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Doc.20comments.20on.20nested.20items/near/214429223\">said</a>:</p>\n<blockquote>\n<p>If <code>mod private { /** doc-comment */ pub fn __ () {} }</code> does not fire a warning</p>\n</blockquote>\n<p>But you can skip the <a href=\"https://doc.rust-lang.org/rustdoc/passes.html#strip-private\">https://doc.rust-lang.org/rustdoc/passes.html#strip-private</a> pass and get comments for that one.  (Which is handy in local.)</p>",
        "id": 214463154,
        "sender_full_name": "scottmcm",
        "timestamp": 1603592954
    },
    {
        "content": "<p>I never thought of customizing the passes themselves, interesting; I personally use <code>--document-private-items</code> and the yet unstable <code>--document-hidden-items</code>. From a recent shell history:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nv\">RUSTDOCFLAGS</span><span class=\"o\">=</span><span class=\"s1\">'-Zunstable-options --document-hidden-items'</span> <span class=\"nv\">RUSTC_BOOTSTRAP</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"se\">\\</span>\ncargo doc --document-private-items --open\n</code></pre></div>",
        "id": 214467744,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1603600080
    },
    {
        "content": "<blockquote>\n<p>RUSTC_BOOTSTRAP=1</p>\n</blockquote>\n<p><span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 214470208,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603603688
    },
    {
        "content": "<p>Also you can get better caching with <code>cargo rustdoc -- -Z unstable-options ..\n</code> which doesn't have to recompile things when you change RUSTFLAGS</p>",
        "id": 214470229,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603603750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232018\">@Daniel Henry-Mantilla</span> Ah, I thought there was a flag for that, but couldn't find it :P  <code>--document-private-items</code> is definitely the way to go.</p>",
        "id": 214526066,
        "sender_full_name": "scottmcm",
        "timestamp": 1603678544
    }
]