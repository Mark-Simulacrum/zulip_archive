[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> following up from <a href=\"https://github.com/rust-lang/compiler-team/issues/177#issuecomment-582653660\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/177#issuecomment-582653660\">https://github.com/rust-lang/compiler-team/issues/177#issuecomment-582653660</a> -- I agree it would be good to keep discussion out of those threads:</p>\n<p>I wonder why you think self-calls a problem in practice. I would expect us to always lint on that today, with something like this error -- maybe that lint is not yet powerful enough to catch the self-call via trait dispatch though? I wonder if we could detect that.</p>\n<p>I imagine self-calls are sufficiently easy to detect and rare enough that we could also add sideeffect calls to them... </p>\n<div class=\"codehilite\"><pre><span></span>warning: function cannot return without recursing\n --&gt; src/main.rs:1:1\n  |\n1 | fn main() {\n  | ^^^^^^^^^ cannot return without recursing\n2 |     main();\n  |     ------ recursive call site\n  |\n  = note: `#[warn(unconditional_recursion)]` on by default\n  = help: a `loop` may express intention better if this is on purpose\n</pre></div>",
        "id": 187508046,
        "sender_full_name": "simulacrum",
        "timestamp": 1580946990
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> </p>\n<p>We do lint on it, I agree, but people may not fix the lint. It seems like if we can lint on it, we could also prevent UB. =) </p>\n<p>Anyway, I'm not sure if it'll be a problem in practice, but as I said it's the only case of this bug in practice that I've encountered. In general, the fact that a function recurses on itself is less obvious and more likely to happen by accident than (I think) writing a purposefully infinite loop that has no side effects (which .. isn't really a very common thing to do?)</p>",
        "id": 187555464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581001511
    },
    {
        "content": "<p>Hm, yes, I would agree. Though I think writing a infinite loop is more likely to be actually what you wanted</p>",
        "id": 187555686,
        "sender_full_name": "simulacrum",
        "timestamp": 1581001644
    },
    {
        "content": "<p>But I think we would not want to ban this, right?</p>",
        "id": 187555711,
        "sender_full_name": "simulacrum",
        "timestamp": 1581001663
    },
    {
        "content": "<p>i.e., we're adding side effect because it is not UB according to \"Rust\", just UB according to LLVM</p>",
        "id": 187555728,
        "sender_full_name": "simulacrum",
        "timestamp": 1581001678
    },
    {
        "content": "<p>Correct</p>",
        "id": 187557016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581002505
    },
    {
        "content": "<p>I also don't know how literally you mean <code>loop { }</code></p>",
        "id": 187557100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581002538
    },
    {
        "content": "<p>I mean it quite literally :)</p>",
        "id": 187557117,
        "sender_full_name": "simulacrum",
        "timestamp": 1581002547
    },
    {
        "content": "<p>It seems like we could do better than that -- basically any <code>loop</code> without function calls</p>",
        "id": 187557122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581002550
    },
    {
        "content": "<p>or something like that</p>",
        "id": 187557125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581002552
    },
    {
        "content": "<p>er, I mean any loop that doesn't have an exit branch</p>",
        "id": 187557155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581002576
    },
    {
        "content": "<p>well, to be exact, any unconditional backedges</p>",
        "id": 187557158,
        "sender_full_name": "simulacrum",
        "timestamp": 1581002578
    },
    {
        "content": "<p>without function calls</p>",
        "id": 187557160,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581002578
    },
    {
        "content": "<p>yeah</p>",
        "id": 187557179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581002598
    },
    {
        "content": "<p>I guess any loop whose head node postdominates itself</p>",
        "id": 187557187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581002605
    },
    {
        "content": "<p>er, that's wrong, all nodes postdominate themselves :)</p>",
        "id": 187557196,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1581002614
    },
    {
        "content": "<p>okay, I've (finally) drafted an initial post here <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/534\" target=\"_blank\" title=\"https://github.com/rust-lang/blog.rust-lang.org/pull/534\">https://github.com/rust-lang/blog.rust-lang.org/pull/534</a></p>",
        "id": 189847234,
        "sender_full_name": "simulacrum",
        "timestamp": 1583449779
    },
    {
        "content": "<p>please provide feedback!</p>",
        "id": 189847242,
        "sender_full_name": "simulacrum",
        "timestamp": 1583449785
    }
]