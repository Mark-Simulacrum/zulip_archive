[
    {
        "content": "<p>What piece of the grammar causes this exciting error message?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nb\">String</span> <span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">Thing</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>error[E0308]: mismatched types\n --&gt; src/lib.rs:5:17\n  |\n5 |     let Thing { foo } = t;\n  |                 ^^^ expected struct `std::string::String`, found struct `foo`\n  |\n  = note: expected type `std::string::String`\n             found type `foo`\n</pre></div>",
        "id": 136436107,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540414873
    },
    {
        "content": "<p>That's a fun error.</p>",
        "id": 136436194,
        "sender_full_name": "davidtwco",
        "timestamp": 1540414989
    },
    {
        "content": "<p>Right? Like, I'd think it'd prefer an ident over a type, but I'm guessing its a pattern thing.</p>",
        "id": 136436272,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540415072
    },
    {
        "content": "<p>This compiles...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">foo</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">Thing</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136436637,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540415528
    },
    {
        "content": "<p>but this doesn't</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">foo</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">example</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nc\">Thing</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">Thing</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136436673,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1540415612
    },
    {
        "content": "<p>when you name a constant (and <code>struct foo;</code> declares a constant)</p>",
        "id": 136438076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417220
    },
    {
        "content": "<p>you are not producing a binding</p>",
        "id": 136438078,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417223
    },
    {
        "content": "<p>you are matching that value</p>",
        "id": 136438081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417228
    },
    {
        "content": "<p><code>let Thing { foo }</code> is of course shorthand for <code>let Thing { foo: foo }</code></p>",
        "id": 136438084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417239
    },
    {
        "content": "<p>so it says \"match the value of the field <code>foo</code> with the constant <code>foo</code>\"</p>",
        "id": 136438093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417248
    },
    {
        "content": "<p><code>mut foo</code> doesn't make sense, this is not a binding</p>",
        "id": 136438096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417252
    },
    {
        "content": "<p>it's like saying <code>match x { mut None =&gt; .. }</code></p>",
        "id": 136438098,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417258
    },
    {
        "content": "<p>As an aside, in Ye Olde Rust of Yore, you had to write a <code>.</code> after constants</p>",
        "id": 136438116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417282
    },
    {
        "content": "<p>e.g., <code>alt foo { Some(x) { value }, None. { other_value } }</code> (in those days, we didn't write <code>=&gt;</code> either, and <code>match</code> was called <code>alt</code>)</p>",
        "id": 136438138,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417310
    },
    {
        "content": "<p>also, we walked uphill both ways.</p>",
        "id": 136438142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417314
    },
    {
        "content": "<p>oh I and think that was before the capitalization conventions that made this largely a non-issue</p>",
        "id": 136438203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417341
    },
    {
        "content": "<p><code>alt foo { some(x) { value } none. { other_value } }</code>?</p>",
        "id": 136438216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417360
    },
    {
        "content": "<p>something like that</p>",
        "id": 136438221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417363
    },
    {
        "content": "<p>I remember you would write <code>option::t&lt;t&gt;</code> instead of <code>Option&lt;T&gt;</code> :) (such ocaml)</p>",
        "id": 136438225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417374
    },
    {
        "content": "<p>/me stops rambling now</p>",
        "id": 136438228,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540417378
    },
    {
        "content": "<blockquote>\n<p>the capitalization conventions</p>\n</blockquote>\n<p>I think that's a key thing here. That and the fact that it's a unit struct. If either of those were different, this likely wouldn't pop up in real code.</p>",
        "id": 136479751,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540476904
    },
    {
        "content": "<p>This is ultimately from Diesel, which generates a bunch of those lower-cased unit structs to represent column names.</p>",
        "id": 136479785,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540476934
    },
    {
        "content": "<p>I still sometimes wonder if we should have done <code>Some(let x)</code> instead of <code>Some(x)</code></p>",
        "id": 136479790,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540476941
    },
    {
        "content": "<p>It seemed too verbose but Swift did it and .. it seems fine</p>",
        "id": 136479801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540476956
    },
    {
        "content": "<p>And someone had a table with a column called <code>title</code> that they were trying to destructure.</p>",
        "id": 136479808,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540476962
    },
    {
        "content": "<p>I see</p>",
        "id": 136479862,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540476979
    },
    {
        "content": "<p><code>Some(let x)</code> certainly has some consistency benefits</p>",
        "id": 136479865,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540476982
    },
    {
        "content": "<p>water under the bridge now, at least until Rust 2021 :P</p>",
        "id": 136479884,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540477011
    },
    {
        "content": "<p>we could allow <code>Some(let x)</code> for explicitness and add an autofixable lint for it</p>",
        "id": 136479897,
        "sender_full_name": "oli",
        "timestamp": 1540477026
    },
    {
        "content": "<blockquote>\n<p>This is ultimately from Diesel, which generates a bunch of those lower-cased unit structs to represent column names.</p>\n</blockquote>\n<p>I suspect it's a hygiene issue first of all.</p>",
        "id": 136479898,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1540477027
    },
    {
        "content": "<p>no reason for breaking changes</p>",
        "id": 136479900,
        "sender_full_name": "oli",
        "timestamp": 1540477031
    },
    {
        "content": "<p>true</p>",
        "id": 136479904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540477038
    },
    {
        "content": "<blockquote>\n<p>allow Some(let x) for explicitness</p>\n</blockquote>\n<p>Rather like <code>dyn Foo</code> in that case.</p>",
        "id": 136480028,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540477196
    },
    {
        "content": "<p>jop</p>",
        "id": 136480084,
        "sender_full_name": "oli",
        "timestamp": 1540477207
    },
    {
        "content": "<p><code>let MyStruct { let member, let mut other, .. } = s</code></p>",
        "id": 136480130,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1540477272
    },
    {
        "content": "<p>this may make <code>let let r#let = \"let\";</code> a valid syntax <span class=\"emoji emoji-1f643\" title=\"upside down\">:upside_down:</span></p>",
        "id": 136483511,
        "sender_full_name": "kennytm",
        "timestamp": 1540479881
    },
    {
        "content": "<p>We already have <code>x @ _</code> for unambiguously making identifier pattern a fresh binding.</p>",
        "id": 136484250,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1540480428
    },
    {
        "content": "<p>But it still can't shadow unit structs for other reasons. Ha-ha.</p>",
        "id": 136484324,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1540480461
    },
    {
        "content": "<p>(But that's fixable.)</p>",
        "id": 136484529,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1540480658
    },
    {
        "content": "<blockquote>\n<p>We already have <code>x @ _</code> for unambiguously making identifier pattern a fresh binding.</p>\n</blockquote>\n<p>interesting, I hadn't thought of that :) kind of a hack though</p>",
        "id": 136488145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540483458
    },
    {
        "content": "<p>I was going to suggest that dealing with this particular case wasn't required until I read this...<br>\nThis indeed will be unlikely to occur on human written code, but it is very likely to happen in macros.</p>\n<p>Should I create a ticket to handle this in the same way we handle the following?</p>\n<div class=\"codehilite\"><pre><span></span>error[E0530]: let bindings cannot shadow tuple structs\n --&gt; src/lib.rs:5:17\n  |\n1 | struct foo();\n  | ------------- a tuple struct `foo` is defined here\n...\n5 |     let Thing { foo } = t;\n  |                 ^^^ cannot be named the same as a tuple struct\n</pre></div>",
        "id": 137073932,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1541183837
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span> that looks nice</p>",
        "id": 137080719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541190865
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/rust-lang/rust/issues/55631\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55631\">https://github.com/rust-lang/rust/issues/55631</a></p>",
        "id": 137086052,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1541196838
    }
]