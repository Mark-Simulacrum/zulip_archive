[
    {
        "content": "<p>Currently, bootstrap sets RUSTC_BOOTSTRAP in the following places:</p>\n<div class=\"codehilite\"><pre><span></span><code>&gt; rg RUSTC_BOOTSTRAP src/bootstrap/\nsrc/bootstrap/builder.rs\n734:            .env(&quot;RUSTC_BOOTSTRAP&quot;, &quot;1&quot;)\n1170:        cargo.env(&quot;RUSTC_BOOTSTRAP&quot;, &quot;1&quot;);\n\nsrc/bootstrap/test.rs\n605:            .env(&quot;RUSTC_BOOTSTRAP&quot;, &quot;1&quot;);\n1261:        cmd.env(&quot;RUSTC_BOOTSTRAP&quot;, &quot;1&quot;);\n1523:    cmd.env(&quot;RUSTC_BOOTSTRAP&quot;, &quot;1&quot;);\n2035:            .env(&quot;RUSTC_BOOTSTRAP&quot;, &quot;1&quot;)\n\nsrc/bootstrap/bootstrap.py\n1091:    env[&quot;RUSTC_BOOTSTRAP&quot;] = &#39;1&#39;\n\nsrc/bootstrap/compile.rs\n442:                    cmd.env(&quot;RUSTC_BOOTSTRAP&quot;, &quot;1&quot;)\n</code></pre></div>\n<p>This is almost certainly more than necessary (e.g. I found that Python setting RUSTC_BOOTSTRAP was entirely unused: <a href=\"https://github.com/jyn514/rust/commit/76c2973808366ec86ebc6a91cd9c17bc81d7dfec\">https://github.com/jyn514/rust/commit/76c2973808366ec86ebc6a91cd9c17bc81d7dfec</a>)</p>\n<p>I tried getting rid of some of these to avoid issues like <a href=\"https://github.com/rust-lang/rust/pull/81063#discussion_r558982774\">https://github.com/rust-lang/rust/pull/81063#discussion_r558982774</a> where tools can depend on unstable features from beta, which means they are only supported for that version of beta: <a href=\"https://github.com/rust-lang/rust/issues/59264\">https://github.com/rust-lang/rust/issues/59264</a>. Unfortunately, cargo itself needs RUSTC_BOOTSTRAP for unstable flags that are unconditionally enabled:</p>\n<div class=\"codehilite\"><pre><span></span><code>Checking std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\nerror: the `-Z` flag is only accepted on the nightly channel of Cargo, but this is the `beta` channel\nSee https://doc.rust-lang.org/book/appendix-07-nightly-rust.html for more information about Rust release channels.\ncommand did not execute successfully: &quot;/home/joshua/rustc3/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot; &quot;check&quot; &quot;--target&quot; &quot;x86_64-unknown-linux-gnu&quot; &quot;-Zbinary-dep-depinfo&quot; &quot;-j&quot; &quot;8&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind backtrace compiler-builtins-c&quot; &quot;--manifest-path&quot; &quot;/home/joshua/rustc3/library/test/Cargo.toml&quot; &quot;--message-format&quot; &quot;json-render-diagnostics&quot;\n</code></pre></div>\n<p>Is there a way to pass RUSTC_BOOTSTRAP <em>only</em> to cargo and not to the library being compiled? Maybe with some hackery around the <code>rustc</code> bootstrap shim?</p>",
        "id": 222996259,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610820318
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> , I think this what you meant by \"Probably even more than strictly necessary, but that's a separate battle.\" in <a href=\"https://github.com/rust-lang/rust/pull/76423#discussion_r484135330\">https://github.com/rust-lang/rust/pull/76423#discussion_r484135330</a></p>",
        "id": 222996356,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610820395
    },
    {
        "content": "<p>ah, well, I don't know exactly - I guess I personally consider the costs here fairly high (to narrowing the scope) and the benefits fairly low, within rust-lang/rust</p>",
        "id": 222996489,
        "sender_full_name": "simulacrum",
        "timestamp": 1610820549
    },
    {
        "content": "<p>the benefit I see is that if RUSTC_BOOTSTRAP is set selectively, we can make sure it's only set when compiling with ToolStd, not ToolBootstrap</p>",
        "id": 222996523,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610820600
    },
    {
        "content": "<p>so things like <a href=\"https://github.com/rust-lang/rust/issues/59264\">https://github.com/rust-lang/rust/issues/59264</a> <em>can't</em> happen</p>",
        "id": 222996570,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610820610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I believe there's a cargo-specific environment variable equivalent to <code>RUSTC_BOOTSTRAP</code>.</p>",
        "id": 222996595,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610820652
    },
    {
        "content": "<p>I don't remember the exact name. You can find it in cargo's testsuite.</p>",
        "id": 222996621,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610820694
    },
    {
        "content": "<p>I searched <code>BOOTSTRAP</code> and I only see RUSTC_BOOTSTRAP</p>",
        "id": 222996622,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610820695
    },
    {
        "content": "<p>Yeah, I guess, but realistically things like that are not yet entirely possible - compiletest, for example, has feature(test)</p>",
        "id": 222996625,
        "sender_full_name": "simulacrum",
        "timestamp": 1610820701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Removing.20unnecessary.20RUSTC_BOOTSTRAP/near/222996625\">said</a>:</p>\n<blockquote>\n<p>Yeah, I guess, but realistically things like that are not yet entirely possible - compiletest, for example, has feature(test)</p>\n</blockquote>\n<p>this is exactly my point though - compiletest is built against master libstd instead of beta libstd so that it can be built with either the beta or master rustc</p>",
        "id": 222996683,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610820739
    },
    {
        "content": "<p>there's not one we should use for cargo, IMO</p>",
        "id": 222996685,
        "sender_full_name": "simulacrum",
        "timestamp": 1610820740
    },
    {
        "content": "<p>Just thought of another way to solve this that's probably cleaner...</p>",
        "id": 222996689,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610820746
    },
    {
        "content": "<p>the one that exists is __CARGO_TEST_CHANNEL_OVERRIDE_DO_NOT_USE_THIS but I don't want to use that</p>",
        "id": 222996692,
        "sender_full_name": "simulacrum",
        "timestamp": 1610820759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I knew about that one, but I thought there was another for command line options.</p>",
        "id": 222996709,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610820799
    },
    {
        "content": "<p>Not that I can see, but I may have looked in the wrong place.</p>",
        "id": 222996722,
        "sender_full_name": "simulacrum",
        "timestamp": 1610820813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> We now have the mechanism to target RUSTC_BOOTSTRAP at specific crates. What if we taught cargo the same thing, and made it look for a specific token if the value isn't just <code>1</code>?</p>",
        "id": 222996784,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610820861
    },
    {
        "content": "<p><code>@cargo</code> for instance.</p>",
        "id": 222996809,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610820890
    },
    {
        "content": "<p>I thought cargo didn't like inspecting variables it passes to rustc?</p>",
        "id": 222996815,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610820896
    },
    {
        "content": "<p>seems easier to add CARGO_BOOTSTRAP</p>",
        "id": 222996817,
        "sender_full_name": "simulacrum",
        "timestamp": 1610820898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Removing.20unnecessary.20RUSTC_BOOTSTRAP/near/222996815\">said</a>:</p>\n<blockquote>\n<p>I thought cargo didn't like inspecting variables it passes to rustc?</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/cargo/pull/8422#issuecomment-651144736\">https://github.com/rust-lang/cargo/pull/8422#issuecomment-651144736</a></p>",
        "id": 222996854,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610820944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> It isn't needed for bootstrapping cargo, though; it's needed for bootstrapping Rust. ;)</p>",
        "id": 222996858,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610820961
    },
    {
        "content": "<p>well, DESTABILIZE_CARGO=1, sure :)</p>",
        "id": 222996915,
        "sender_full_name": "simulacrum",
        "timestamp": 1610820989
    },
    {
        "content": "<p>fyi there is a <em>lot</em> more breakage even with <code>__TEST_CHANNEL_OVERRIDE</code> set</p>",
        "id": 222996928,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610821013
    },
    {
        "content": "<p>so I don't think we should change cargo until it works with that first</p>",
        "id": 222996934,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610821024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> is there something like -Z treat-err-as-bug for commands that bootstrap runs?</p>",
        "id": 222996961,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610821079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> That's saying we don't want to inspect <code>RUSTFLAGS</code>, which makes perfect sense. I don't think it'd be unreasonable to look for a cargo-specific bootstrap token in <code>RUSTC_BOOTSTRAP</code>.</p>",
        "id": 222996962,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610821081
    },
    {
        "content": "<p>I want to see a backtrace for bootstrap itself</p>",
        "id": 222997000,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610821090
    },
    {
        "content": "<p>well, the override needs to be set to dev or nightly probably</p>",
        "id": 222997013,
        "sender_full_name": "simulacrum",
        "timestamp": 1610821120
    },
    {
        "content": "<p>Specifically, I think that's reasonable because cargo already looks at that variable, to see if the value is 1.</p>",
        "id": 222997015,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1610821125
    },
    {
        "content": "<p>not sure what you set it to</p>",
        "id": 222997016,
        "sender_full_name": "simulacrum",
        "timestamp": 1610821126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Removing.20unnecessary.20RUSTC_BOOTSTRAP/near/222997016\">said</a>:</p>\n<blockquote>\n<p>not sure what you set it to</p>\n</blockquote>\n<p>oh no the error was from rustc, not cargo</p>\n<div class=\"codehilite\"><pre><span></span><code>error: failed to run `rustc` to learn about target-specific information\n\nCaused by:\n  process didn&#39;t exit successfully: `/home/joshua/rustc3/build/bootstrap/debug/rustc - --crate-name ___ --print=file-names --cfg=bootstrap -Zmacro-backtrace &#39;-Clink-args=-Wl,-rpath,$ORIGIN/../lib&#39; -Cprefer-dynamic -Cllvm-args=-import-instr-limit=10 --target x86_64-unknown-linux-gnu --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro --print=sysroot --print=cfg` (exit code: 1)\n  --- stderr\n  error: the option `Z` is only accepted on the nightly compiler\n</code></pre></div>",
        "id": 222997035,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610821166
    },
    {
        "content": "<p>bootstrap in general always assumes it can use unstable features :/</p>",
        "id": 222997047,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610821199
    },
    {
        "content": "<p>I wonder if I can add <code>RUSTC_BOOTSTRAP=\"{{cli-args}}\"</code> or something</p>",
        "id": 222997192,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610821348
    },
    {
        "content": "<p>as long as it's not a valid crate name it wouldn't conflict</p>",
        "id": 222997198,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610821359
    },
    {
        "content": "<p>anyway, I won't have time to get to this today. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you think this worth pursuing? I can open an issue if so.</p>",
        "id": 222997611,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610821806
    },
    {
        "content": "<p>imo, the support for rustc_bootstrap to take a list of crates vs. just one is good for external usage (e.g., by firefox) if there's an absolute need in those codebases to use unstable features</p>",
        "id": 222997669,
        "sender_full_name": "simulacrum",
        "timestamp": 1610821873
    },
    {
        "content": "<p>within rust-lang/rust I'm much less worried about that though, because we can directly fix things as needed</p>",
        "id": 222997677,
        "sender_full_name": "simulacrum",
        "timestamp": 1610821893
    },
    {
        "content": "<p>so \"no\" I guess</p>",
        "id": 222997683,
        "sender_full_name": "simulacrum",
        "timestamp": 1610821901
    },
    {
        "content": "<p>that is, I would accept a patch, but not if it required going to great lengths, and right now it sounds like it would</p>",
        "id": 222997740,
        "sender_full_name": "simulacrum",
        "timestamp": 1610821929
    },
    {
        "content": "<p>hmm, fair enough</p>",
        "id": 222998040,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610822219
    }
]