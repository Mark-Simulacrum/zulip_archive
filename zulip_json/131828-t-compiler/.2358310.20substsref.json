[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> would you mind have a bors retrying?<br>\nit's strange that <code>Substs</code> already imported.</p>",
        "id": 158892070,
        "sender_full_name": "csmoe",
        "timestamp": 1550591622
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/58321#issuecomment-465138251\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58321#issuecomment-465138251\">https://github.com/rust-lang/rust/pull/58321#issuecomment-465138251</a></p>",
        "id": 158892154,
        "sender_full_name": "csmoe",
        "timestamp": 1550591670
    },
    {
        "content": "<p>@oli rebased again. may I request a \"early\" merging as the comment said?</p>",
        "id": 159228946,
        "sender_full_name": "csmoe",
        "timestamp": 1550927599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 159267704,
        "sender_full_name": "csmoe",
        "timestamp": 1550998033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> just to confirm, so you mean we will have <code>type Substs = &amp;'tcx List[Kind]</code> finally?</p>",
        "id": 159281946,
        "sender_full_name": "csmoe",
        "timestamp": 1551025719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> yes</p>",
        "id": 159281958,
        "sender_full_name": "oli",
        "timestamp": 1551025754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> step 1 done.</p>",
        "id": 159437925,
        "sender_full_name": "csmoe",
        "timestamp": 1551199352
    },
    {
        "content": "<p>if this is going to interact with <a href=\"https://github.com/rust-lang/rust/pull/58583\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/58583\">https://github.com/rust-lang/rust/pull/58583</a> much, I'd appreciate it if the next steps could be delayed until after that PR is merged, because it's going to be troublesome enough to rebase it as it is :)</p>",
        "id": 159453193,
        "sender_full_name": "varkor",
        "timestamp": 1551211282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> okay I'll wait for you</p>",
        "id": 159471742,
        "sender_full_name": "csmoe",
        "timestamp": 1551227871
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> this PR broke the RLS as high-five said, and she requested a PR to rls. but what's the work flow for such kind of fixes?</p>",
        "id": 159535362,
        "sender_full_name": "csmoe",
        "timestamp": 1551289179
    },
    {
        "content": "<p>Well, create a PR that fixes rls, then a PR that updates the rls submodulr in the rustc repo</p>",
        "id": 159538460,
        "sender_full_name": "oli",
        "timestamp": 1551291318
    },
    {
        "content": "<p>Probably needs a clippy submodule update</p>",
        "id": 159538494,
        "sender_full_name": "oli",
        "timestamp": 1551291348
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> 's PR was merged, so step next.</p>",
        "id": 160628527,
        "sender_full_name": "csmoe",
        "timestamp": 1552442565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> need help to impl <code>ToStableHashKey</code> for <code>SubstsRef</code>, what's the <code>KeyType</code> should be?</p>",
        "id": 164179834,
        "sender_full_name": "csmoe",
        "timestamp": 1556205624
    },
    {
        "content": "<p>isn't <code>SubstsRef</code> <code>&amp;'tcx List&lt;...&gt;</code>?</p>",
        "id": 164180563,
        "sender_full_name": "oli",
        "timestamp": 1556206085
    },
    {
        "content": "<p>oh, that would require a <code>HashStable</code> impl for the <code>...</code></p>",
        "id": 164180589,
        "sender_full_name": "oli",
        "timestamp": 1556206112
    },
    {
        "content": "<blockquote>\n<p>isn't <code>SubstsRef</code> <code>&amp;'tcx List&lt;...&gt;</code>?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">SubstsRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">inner</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Kind</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 164181000,
        "sender_full_name": "csmoe",
        "timestamp": 1556206359
    },
    {
        "content": "<p>ah heheh, Yea, so I think you can just forward to the &amp;'tcx List impl. so <code>type KeyType = &lt;&amp;'tcx List&lt;Kind&gt; as ToStableHashKey&gt;::KeyType;</code></p>",
        "id": 164181295,
        "sender_full_name": "oli",
        "timestamp": 1556206531
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> and during the refactoring trip, I saw some usages of <code>&amp;[Kind]</code>, should them be replaced with <code>SubstsRef</code> too?</p>",
        "id": 164181451,
        "sender_full_name": "csmoe",
        "timestamp": 1556206622
    },
    {
        "content": "<p>hmm... not sure, do you have a link to an example?</p>",
        "id": 164181498,
        "sender_full_name": "oli",
        "timestamp": 1556206651
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/imIl-26EMKenZ3758TJuWyKh/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/imIl-26EMKenZ3758TJuWyKh/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/4715/imIl-26EMKenZ3758TJuWyKh/pasted_image.png\"></a></div>",
        "id": 164181674,
        "sender_full_name": "csmoe",
        "timestamp": 1556206734
    },
    {
        "content": "<p>hmm... can you try modifying them and see which callers exist? It seems to me like <code>SubstsRef</code> is indeed right here, but the callers may disagree</p>",
        "id": 164181834,
        "sender_full_name": "oli",
        "timestamp": 1556206808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> yep, I tried to replace them with <code>SubstsRef</code>. but stuck by how to convert <code>[Kind]</code> to <code>List&lt;Kind&gt;</code>.</p>",
        "id": 164181950,
        "sender_full_name": "csmoe",
        "timestamp": 1556206898
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/59312/files#r267297677\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59312/files#r267297677\">https://github.com/rust-lang/rust/pull/59312/files#r267297677</a></p>",
        "id": 164182043,
        "sender_full_name": "csmoe",
        "timestamp": 1556206939
    },
    {
        "content": "<p>where's the <code>[Kind]</code> from? we need to find the root caller, all the forwarding calls should be the same and not convert</p>",
        "id": 164182048,
        "sender_full_name": "oli",
        "timestamp": 1556206941
    },
    {
        "content": "<p>wait a moment, I'd paste a case.</p>",
        "id": 164182082,
        "sender_full_name": "csmoe",
        "timestamp": 1556206980
    },
    {
        "content": "<p>Oh that is a caller? But we do have a <code>SubstsRef</code> here, right?</p>",
        "id": 164182084,
        "sender_full_name": "oli",
        "timestamp": 1556206982
    },
    {
        "content": "<p>ah, this is happening because of the <code>Deref</code> impl on <code>SubstsRef</code></p>",
        "id": 164182358,
        "sender_full_name": "oli",
        "timestamp": 1556207146
    },
    {
        "content": "<p>yea I think you can just replace <code>&amp;'tcx [Kind]</code> with <code>SubstsRef&lt;'tcx&gt;</code></p>",
        "id": 164182424,
        "sender_full_name": "oli",
        "timestamp": 1556207172
    },
    {
        "content": "<blockquote>\n<p>yea I think you can just replace <code>&amp;'tcx [Kind]</code> with <code>SubstsRef&lt;'tcx&gt;</code></p>\n</blockquote>\n<p>okay.<br>\n(hmmm, failed to find out that case)</p>",
        "id": 164182878,
        "sender_full_name": "csmoe",
        "timestamp": 1556207489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> I was trying to convert a slice <code>substs[...]: [Kind]</code> into <code>SubstsRef</code> with <code>tcx.mk_substs()</code>, that's why tcx came in.</p>",
        "id": 164385442,
        "sender_full_name": "csmoe",
        "timestamp": 1556455503
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/59312#discussion_r279187806\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59312#discussion_r279187806\">https://github.com/rust-lang/rust/pull/59312#discussion_r279187806</a></p>",
        "id": 164385456,
        "sender_full_name": "csmoe",
        "timestamp": 1556455518
    },
    {
        "content": "<p>right, but isn't <code>SubstsRef</code> just <code>SubstsRef { sth: &amp;[Kind] }</code>?</p>",
        "id": 164385461,
        "sender_full_name": "oli",
        "timestamp": 1556455536
    },
    {
        "content": "<p>the only time you need a <code>tcx</code> is if you don't start with a <code>'tcx</code> lifetime</p>",
        "id": 164385505,
        "sender_full_name": "oli",
        "timestamp": 1556455563
    },
    {
        "content": "<blockquote>\n<p>right, but isn't <code>SubstsRef</code> just <code>SubstsRef { sth: &amp;[Kind] }</code>?</p>\n</blockquote>\n<p>inner is <code>List&lt;Kind&gt;</code></p>",
        "id": 164385513,
        "sender_full_name": "csmoe",
        "timestamp": 1556455572
    },
    {
        "content": "<p>ah</p>",
        "id": 164385516,
        "sender_full_name": "oli",
        "timestamp": 1556455589
    },
    {
        "content": "<p>slightly uncool. Why do we even start with a <code>&amp;'tcx [Kind]</code>, can't that also be <code>SubstsRef&lt;'tcx&gt;</code>?</p>",
        "id": 164385547,
        "sender_full_name": "oli",
        "timestamp": 1556455672
    },
    {
        "content": "<blockquote>\n<p>slightly uncool. Why do we even start with a <code>&amp;'tcx [Kind]</code>, can't that also be <code>SubstsRef&lt;'tcx&gt;</code>?</p>\n</blockquote>\n<p>yes, but I'm not sure can <code>&amp;[Kind]</code> be optimized as the original issue planned?</p>",
        "id": 164385616,
        "sender_full_name": "csmoe",
        "timestamp": 1556455779
    },
    {
        "content": "<p>wait I'm confused, we're trying to reduce the number of <code>&amp;[Kind]</code> and have more <code>SubstsRef</code> (which can have optimizations)</p>",
        "id": 164385759,
        "sender_full_name": "oli",
        "timestamp": 1556455982
    },
    {
        "content": "<p>ok, so <a href=\"https://github.com/rust-lang/rust/pull/59312/files#diff-239d31f6f959d7140a4da7f011fd08afR134\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59312/files#diff-239d31f6f959d7140a4da7f011fd08afR134\">https://github.com/rust-lang/rust/pull/59312/files#diff-239d31f6f959d7140a4da7f011fd08afR134</a> starts out with a <code>SubstsRef</code>, but we then want a \"subslice\" of that <code>SubstsRef</code></p>",
        "id": 164385900,
        "sender_full_name": "oli",
        "timestamp": 1556456212
    },
    {
        "content": "<p>the old code just subsliced it and it worked</p>",
        "id": 164385907,
        "sender_full_name": "oli",
        "timestamp": 1556456222
    },
    {
        "content": "<p>now we are creating a duplicate of the subslice</p>",
        "id": 164385919,
        "sender_full_name": "oli",
        "timestamp": 1556456231
    },
    {
        "content": "<p>same in <a href=\"https://github.com/rust-lang/rust/pull/59312/files#diff-239d31f6f959d7140a4da7f011fd08afR202\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59312/files#diff-239d31f6f959d7140a4da7f011fd08afR202\">https://github.com/rust-lang/rust/pull/59312/files#diff-239d31f6f959d7140a4da7f011fd08afR202</a></p>",
        "id": 164385925,
        "sender_full_name": "oli",
        "timestamp": 1556456262
    },
    {
        "content": "<p>oh, nevermind, we have some invariants to keep up: <a href=\"https://github.com/rust-lang/rust/blob/517fb1b06f8b481d559285d1c3c665e143ad8156/src/librustc/ty/mod.rs#L603\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/517fb1b06f8b481d559285d1c3c665e143ad8156/src/librustc/ty/mod.rs#L603\">https://github.com/rust-lang/rust/blob/517fb1b06f8b481d559285d1c3c665e143ad8156/src/librustc/ty/mod.rs#L603</a></p>",
        "id": 164385985,
        "sender_full_name": "oli",
        "timestamp": 1556456342
    },
    {
        "content": "<p><span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 164385994,
        "sender_full_name": "oli",
        "timestamp": 1556456345
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> we're running into a space vs perf optimization issue. Taking subslices of <code>List&lt;Subst&gt;</code> should be a O(1) operation imo and not take up any additional interning space, but at the same time we have the invariant that any <code>List&lt;Subst&gt;</code> is unique, so comparing two <code>List&lt;T&gt;</code>s is just a pointer equality check</p>",
        "id": 164386122,
        "sender_full_name": "oli",
        "timestamp": 1556456548
    },
    {
        "content": "<p>if you see <code>&amp;[Kind&lt;'tcx&gt;]</code> it's intentional</p>",
        "id": 164512232,
        "sender_full_name": "eddyb",
        "timestamp": 1556601581
    },
    {
        "content": "<p>at least most of the time</p>",
        "id": 164512234,
        "sender_full_name": "eddyb",
        "timestamp": 1556601585
    },
    {
        "content": "<p>maybe I should've added a comment on all of the places</p>",
        "id": 164512286,
        "sender_full_name": "eddyb",
        "timestamp": 1556601618
    },
    {
        "content": "<p>specifically, substituting and printing necessarily need to work without a full <code>Substs</code></p>",
        "id": 164512290,
        "sender_full_name": "eddyb",
        "timestamp": 1556601645
    },
    {
        "content": "<p>substituting, because creating a <code>Substs</code> needs to be able to substitute in defaults, and printing because of all the slicing going on</p>",
        "id": 164512304,
        "sender_full_name": "eddyb",
        "timestamp": 1556601686
    },
    {
        "content": "<p>I don't know why you might want to replace <code>[Kind]</code> with <code>Substs</code>, but you should avoid it unless necessary for something</p>",
        "id": 164512363,
        "sender_full_name": "eddyb",
        "timestamp": 1556601777
    },
    {
        "content": "<blockquote>\n<p>I don't know why you might want to replace <code>[Kind]</code> with <code>Substs</code>, but you should avoid it unless necessary for something</p>\n</blockquote>\n<p><code>Substs</code> derefs to <code>[Kind]</code>, so I need to write <code>&amp;substs</code> in some cases, but <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> felt uncool about those additional <code>&amp;</code>.</p>",
        "id": 164512456,
        "sender_full_name": "csmoe",
        "timestamp": 1556601916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"https://github.com/rust-lang/rust/pull/59312#discussion_r267297677\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/59312#discussion_r267297677\">https://github.com/rust-lang/rust/pull/59312#discussion_r267297677</a></p>",
        "id": 164512477,
        "sender_full_name": "csmoe",
        "timestamp": 1556601955
    },
    {
        "content": "<p>are we making <code>Subst</code> a <code>struct</code>?</p>",
        "id": 164515916,
        "sender_full_name": "eddyb",
        "timestamp": 1556607013
    },
    {
        "content": "<p>is that why?</p>",
        "id": 164515925,
        "sender_full_name": "eddyb",
        "timestamp": 1556607040
    },
    {
        "content": "<p>[Quoting…]<br>\nyes <code>SubstsRref { inner: &amp;List&lt;Kind&gt; }</code></p>",
        "id": 164515940,
        "sender_full_name": "csmoe",
        "timestamp": 1556607074
    },
    {
        "content": "<p>if so, is there any chance you could keep the <code>&amp;</code> on the outside of an unsized <code>struct</code>? I guess not without another type alias....</p>",
        "id": 164515944,
        "sender_full_name": "eddyb",
        "timestamp": 1556607088
    },
    {
        "content": "<p>any reason why?</p>",
        "id": 164515948,
        "sender_full_name": "eddyb",
        "timestamp": 1556607102
    },
    {
        "content": "<p>if this isn't about the optimization <span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> proposed at the allhands, then I don't see why we're doing it</p>",
        "id": 164515999,
        "sender_full_name": "eddyb",
        "timestamp": 1556607135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116773\">@csmoe</span> <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> if you want to make it more explicit, you can use <code>&amp;substs[..]</code></p>",
        "id": 164516439,
        "sender_full_name": "eddyb",
        "timestamp": 1556607713
    },
    {
        "content": "<p>and make the <code>subst</code> method take a <code>Substs</code></p>",
        "id": 164516494,
        "sender_full_name": "eddyb",
        "timestamp": 1556607733
    },
    {
        "content": "<p>(and have it call another method that does the actual substitution)</p>",
        "id": 164516505,
        "sender_full_name": "eddyb",
        "timestamp": 1556607758
    },
    {
        "content": "<p>I assume that's where most of the <code>&amp;</code> would've come from</p>",
        "id": 164516511,
        "sender_full_name": "eddyb",
        "timestamp": 1556607768
    },
    {
        "content": "<p>Question (perhaps off-topic): Why <code>SubstsRef</code> is named <code>SubstsRef</code> and not <code>Substs</code>?<br>\nFor interned / arena-allocated data the reference to it is the primarily used type and naming the data type itself is more rare.<br>\nSo it's natural to use a short name for the reference and a long name for the data type (like <code>Span</code> and <code>SpanData</code>).<br>\nFor substs that would be <code>Substs</code> and <code>SubstsData</code> or something.</p>",
        "id": 164517250,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1556608702
    },
    {
        "content": "<p>the <code>Ref</code> thing is transitionary, I believe</p>",
        "id": 164517254,
        "sender_full_name": "eddyb",
        "timestamp": 1556608714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126804\">@Ariel Ben-Yehuda</span> wanted to optimize single-element substs so I think he did a name split to make refactoring easier</p>",
        "id": 164517263,
        "sender_full_name": "eddyb",
        "timestamp": 1556608737
    },
    {
        "content": "<p>it's relatively recent and the PR might have more information</p>",
        "id": 164517283,
        "sender_full_name": "eddyb",
        "timestamp": 1556608764
    }
]