[
    {
        "content": "<p>we were talking with <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> about how to properly lower the resulting associated type</p>",
        "id": 262640532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788018
    },
    {
        "content": "<p>for instance</p>",
        "id": 262640555,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788038
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 262640556,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788041
    },
    {
        "content": "<p>would lower into ...</p>",
        "id": 262640569,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788049
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"cp\">$</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"cp\">$</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 262640581,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788064
    },
    {
        "content": "<p>but we would really need something like ...</p>",
        "id": 262640666,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788095
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"cp\">$</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span>::<span class=\"cp\">$</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 262640669,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788098
    },
    {
        "content": "<p>so if we were to follow that scheme we would need to \"copy\" all generic bounds from the fn to the associated type</p>",
        "id": 262640717,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788126
    },
    {
        "content": "<p>the other possibility is to make that associated type a child of <code>foo</code></p>",
        "id": 262640751,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788145
    },
    {
        "content": "<p>something like ...</p>",
        "id": 262640782,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788169
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">foo</span>::<span class=\"n\">rpit</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">foo</span>::<span class=\"n\">rpit</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 262640868,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> told me that we should also ask you <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span></p>",
        "id": 262640890,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637788238
    },
    {
        "content": "<p>I would prefer something like the child approach (it's similar to how <code>impl trait</code> in impls works). It might be easier to override the parent in <code>generics_of</code> that actually change the HIR while prototyping because the compiler assumes that associated items have either a trait or an impl as their parent.</p>",
        "id": 262641233,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1637788524
    },
    {
        "content": "<p>Duplicating the generics in HIR is maybe possible, but HIR is pretty deliberately hard to copy.</p>",
        "id": 262641641,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1637788838
    },
    {
        "content": "<p>So, by patching up the parent in <code>generics_of</code>, we can get rid of the copying generic type/const parameters?</p>",
        "id": 262641967,
        "sender_full_name": "cjgillot",
        "timestamp": 1637789055
    },
    {
        "content": "<p>I think so</p>",
        "id": 262642008,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1637789082
    },
    {
        "content": "<p>Great!</p>",
        "id": 262642057,
        "sender_full_name": "cjgillot",
        "timestamp": 1637789110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116118\">Matthew Jasper</span> <a href=\"#narrow/stream/131828-t-compiler/topic/impl.20trait.20in.20traits.20associated.20type.20lowering/near/262641233\">said</a>:</p>\n<blockquote>\n<p>I would prefer something like the child approach (it's similar to how <code>impl trait</code> in impls works). It might be easier to override the parent in <code>generics_of</code> that actually change the HIR while prototyping because the compiler assumes that associated items have either a trait or an impl as their parent.</p>\n</blockquote>\n<p>so you meant that in <code>generics_of</code> we would need to switch the parent on the fly from the function to the trait/trait impl?</p>",
        "id": 262703057,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1637845430
    },
    {
        "content": "<p>That trait would be the actual parent in the HIR, the parent in <code>generics_of</code> would be changed to the method</p>",
        "id": 262709674,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1637849329
    }
]