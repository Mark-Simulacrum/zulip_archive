[
    {
        "content": "<p>Just scrolling through some code, and I noticed that Rust Analyzer was flagging a <code>match</code> as an error, but <code>rustc</code> compiles it without errors.</p>\n<p>In <code>compiler/rustc_target/src/asm/mod.rs</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl InlineAsmReg {\n    pub fn name(self) -&gt; &amp;&#39;static str {\n        match self {\n            Self::X86(r) =&gt; r.name(),\n            Self::Arm(r) =&gt; r.name(),\n            Self::AArch64(r) =&gt; r.name(),\n            Self::RiscV(r) =&gt; r.name(),\n            Self::Hexagon(r) =&gt; r.name(),\n            Self::Mips(r) =&gt; r.name(),\n        }\n    }\n</code></pre></div>\n<p>But <code>InlineAsmReg</code> defines other variants that aren't included in this <code>match</code>, like <code>Nvptx</code>. Why does this compile?</p>",
        "id": 217824927,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606258646
    },
    {
        "content": "<p>Because those enums are uninhabited <a href=\"https://github.com/rust-lang/rust/blob/74459930a951db7a68b3ecd86f3b796339e59fe5/compiler/rustc_target/src/asm/nvptx.rs#L48\">https://github.com/rust-lang/rust/blob/74459930a951db7a68b3ecd86f3b796339e59fe5/compiler/rustc_target/src/asm/nvptx.rs#L48</a></p>",
        "id": 217825363,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606258941
    },
    {
        "content": "<p>...and that crate uses <code>#![feature(exhaustive_patterns)]</code></p>",
        "id": 217825384,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606258966
    },
    {
        "content": "<p>Ahhh, ok.  So RA just has a different view of things than rustc does.</p>",
        "id": 217825399,
        "sender_full_name": "Arlie Davis",
        "timestamp": 1606258981
    },
    {
        "content": "<p>r-a does not implement the unstable exhaustiveness checks</p>",
        "id": 217825436,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606258997
    },
    {
        "content": "<p>or at least not all of them, it has a partial/buggy implementation of or-patterns</p>",
        "id": 217825460,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1606259025
    }
]