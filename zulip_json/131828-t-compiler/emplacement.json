[
    {
        "content": "<p>I’ve been thinking about emplacement lately and how we could \"fix\" the optimisation-related issue that led to us removing the feature altogether. I’ve come to a conclusion that it is necessary for the whole call graph starting at a function, which is RHS of the emplacement operator, to return its result via an <code>sret</code> for emplacement to work. This can be done either by:</p>\n<p>1. Implicitly creating copies of functions that use the desired calling convention;<br>\n2. Requiring users to explicitly annotate functions that are able to participate in emplacement;<br>\n3. Changing the \"Rust\" ABI to always be emplacement-capable.</p>\n<p>All of the solutions have their problems, namely: (1) results in a binary bloat; (2) is just inconvenient to use; (3) has a cost when emplacement is not used.</p>",
        "id": 133749841,
        "sender_full_name": "nagisa",
        "timestamp": 1536689432
    },
    {
        "content": "<p>Oh, and in addition to all that, it is also fairly critical that we do not copy all over our stack in debug mode somehow (which requires some sort of a MIR-level propagation to finally happen)</p>",
        "id": 133749884,
        "sender_full_name": "nagisa",
        "timestamp": 1536689504
    },
    {
        "content": "<p>Although this specific lack of optimisation is slightly orthogonal IME.</p>",
        "id": 133749936,
        "sender_full_name": "nagisa",
        "timestamp": 1536689532
    },
    {
        "content": "<p>I'm not sure I understand what trade-off you're getting at. What's the cost with (3), are you talking about small return values that are more profitable to return in registers?</p>",
        "id": 133750097,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1536689729
    },
    {
        "content": "<p>Sure. That’s specifically a tradeoff for the \"solution number 3\"</p>",
        "id": 133750447,
        "sender_full_name": "nagisa",
        "timestamp": 1536690085
    },
    {
        "content": "<p>oh, another problem with number 3 is that it won’t work if there's a non extern-Rust function call anywhere in the callgraph</p>",
        "id": 133750472,
        "sender_full_name": "nagisa",
        "timestamp": 1536690118
    },
    {
        "content": "<p>I don't understand why we'd force an out-pointer based ABI on functions returning register-sized data. If the data is this small, storing it to the destination it <em>in the caller</em>, if necessary, is basically just as good as storing it there in the callee to begin with</p>",
        "id": 133750553,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1536690186
    },
    {
        "content": "<p>the problem we want to avoid is repeatedly memcpy'ing aggregates of significant size, not moving any data at all twice</p>",
        "id": 133750581,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1536690229
    },
    {
        "content": "<p>This is the orthogonal problem to the emplacement feature itself that I’ve mentioned above.</p>",
        "id": 133750682,
        "sender_full_name": "nagisa",
        "timestamp": 1536690319
    },
    {
        "content": "<p>Also, in my personal opinion being able to avoid moving any data at all twice is a very, very useful property</p>",
        "id": 133750836,
        "sender_full_name": "nagisa",
        "timestamp": 1536690462
    },
    {
        "content": "<p>Its just that achieving this in C++ is super involved, and I’d like to have something better for Rust.</p>",
        "id": 133750897,
        "sender_full_name": "nagisa",
        "timestamp": 1536690494
    },
    {
        "content": "<p>I am not even talking about avoiding memcpy's in code like <code>let x = foo(); let y = x;</code>. I'm saying, for something like <code>place &lt;- (foo(), bar());</code> we'd generally want <code>foo</code> and <code>bar</code> to write their return values directly to space allocated for the tuple, without any large memcpy's, <em>but</em> no change in ABI is needed if they return something small like <code>i32</code> because <code>call foo; mov DWORD PTR [tuple.0], eax</code> is basically as good as <code>lea rdi, [tuple.0]; call foo</code></p>",
        "id": 133751056,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1536690684
    }
]