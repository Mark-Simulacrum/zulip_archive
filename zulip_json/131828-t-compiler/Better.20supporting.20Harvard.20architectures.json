[
    {
        "content": "<p>For those interested, there's a PR that helps rustc track different address spaces better. This is needed to support AVR. Notably, AVR is the first Harvard architecture that rustc supports (to my knowledge).</p>\n<p><a href=\"https://github.com/rust-lang/rust/pull/73270\">https://github.com/rust-lang/rust/pull/73270</a></p>",
        "id": 201395082,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592575840
    },
    {
        "content": "<p>Interesting. How does the AVR support handle data in Flash vs. RAM? Like if I wrote <code>fn f(data: &amp;[u8]) { ... }</code>, what happens if I call that with a slice in RAM and one in Flash? To my knowledge the function would have no way to find out if the pointer points into Flash or RAM.</p>",
        "id": 201396665,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1592576587
    },
    {
        "content": "<p>Honestly, I've avoided thinking about flash <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> I think that the general answer there is \"it doesn't\". I think you have to use special instructions to read/write from flash. In the C code, there are functions like <code>{Read,Write}Flash{Byte,Page}</code>.</p>",
        "id": 201400494,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592578372
    },
    {
        "content": "<p>GCC has a concept of pointer address spaces. In addition to using that for hardware differences, people also use that to tag pointers as requiring special handling.</p>",
        "id": 201409273,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592582399
    },
    {
        "content": "<p>Such as requiring special functions to handle them.</p>",
        "id": 201409386,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1592582432
    },
    {
        "content": "<p>LLVM has something similar</p>",
        "id": 201534560,
        "sender_full_name": "RalfJ",
        "timestamp": 1592746358
    },
    {
        "content": "<p>If you check the PR, it’s “just” having rustc (more) correctly instruct LLVM what address space to use.</p>",
        "id": 201536021,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592749051
    },
    {
        "content": "<p>makes sense. I suppose that is similar to how C frontends work?</p>",
        "id": 201537721,
        "sender_full_name": "RalfJ",
        "timestamp": 1592751536
    },
    {
        "content": "<p>they have the same problem in that the source language does not actually support multiple address spaces</p>",
        "id": 201537736,
        "sender_full_name": "RalfJ",
        "timestamp": 1592751556
    },
    {
        "content": "<p>I believe it's similar in concept to what the C frontend would do, but I'm not sure.</p>",
        "id": 201544054,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1592759673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> <span class=\"user-mention\" data-user-id=\"314884\">@Dylan McKay</span> the PR is giving me a bad feeling, there's too many changes in places that have nothing to do with functions</p>",
        "id": 202043069,
        "sender_full_name": "eddyb",
        "timestamp": 1593133396
    },
    {
        "content": "<p>does LLVM not allow passing around a function pointer as a regular pointer (basically an unnecessarily typed <code>usize</code>) as long as you cast it before you call it?</p>",
        "id": 202043133,
        "sender_full_name": "eddyb",
        "timestamp": 1593133467
    },
    {
        "content": "<p>I guess I can leave a comment?</p>",
        "id": 202043223,
        "sender_full_name": "eddyb",
        "timestamp": 1593133573
    },
    {
        "content": "<p>Hm… I think having the address space attached throughout the IR is desirable…</p>",
        "id": 202043255,
        "sender_full_name": "nagisa",
        "timestamp": 1593133639
    },
    {
        "content": "<p>I wonder there are any harvard implementations that allow executing from data addrspaces.</p>",
        "id": 202043269,
        "sender_full_name": "nagisa",
        "timestamp": 1593133675
    },
    {
        "content": "<p>(to enable e.g. jit?)</p>",
        "id": 202043285,
        "sender_full_name": "nagisa",
        "timestamp": 1593133682
    },
    {
        "content": "<p>actually this is another example of LLVM shooting itself in the foot by putting information into types as opposed to into instructions</p>",
        "id": 202043322,
        "sender_full_name": "eddyb",
        "timestamp": 1593133710
    },
    {
        "content": "<p>possibly ^^</p>",
        "id": 202043345,
        "sender_full_name": "nagisa",
        "timestamp": 1593133746
    },
    {
        "content": "<p>the only thing the address space could matter for when it's not loaded from/stored to/called, is the pointer size</p>",
        "id": 202043358,
        "sender_full_name": "eddyb",
        "timestamp": 1593133774
    },
    {
        "content": "<p>and I suppose LLVM could just have <code>ptr32</code>, <code>ptr64</code>, etc. (or even just <code>p32</code>, <code>p64</code>, etc. :P)</p>",
        "id": 202043367,
        "sender_full_name": "eddyb",
        "timestamp": 1593133800
    },
    {
        "content": "<p>left a comment with a suggestion</p>",
        "id": 202043819,
        "sender_full_name": "eddyb",
        "timestamp": 1593134497
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I now strongly suspect all of their troubles are from us using <code>pointercast</code> \"because it looks nicer\" when <code>bitcast</code> would be able to change the address space, not just the pointee type</p>",
        "id": 202043865,
        "sender_full_name": "eddyb",
        "timestamp": 1593134532
    },
    {
        "content": "<p>I wonder how much of the abandoned attempts to support AMDGPU or w/e could be replaced with just using <code>bitcast</code> everywhere...</p>",
        "id": 202043894,
        "sender_full_name": "eddyb",
        "timestamp": 1593134605
    },
    {
        "content": "<p>although if they actually have multiple data address spaces, there isn't really any way to tell them apart for load/store</p>",
        "id": 202043900,
        "sender_full_name": "eddyb",
        "timestamp": 1593134634
    },
    {
        "content": "<p>yeh, and that’s why I feel like doing it the way is done in the PR is fairly simple way to get something right, as in pointers just end up carrying their actual addrspace through all sorts of casts…</p>",
        "id": 202043980,
        "sender_full_name": "nagisa",
        "timestamp": 1593134714
    },
    {
        "content": "<p>I do wonder what happens if you cast to usize and then back tho</p>",
        "id": 202043986,
        "sender_full_name": "nagisa",
        "timestamp": 1593134725
    },
    {
        "content": "<p>probably bad things, _somewhere_ in the stack.</p>",
        "id": 202043994,
        "sender_full_name": "nagisa",
        "timestamp": 1593134755
    },
    {
        "content": "<p>I don't like preserving address spaces like done in the PR though</p>",
        "id": 202044315,
        "sender_full_name": "eddyb",
        "timestamp": 1593135176
    },
    {
        "content": "<p>anything that relies on preservation is bound to break</p>",
        "id": 202044323,
        "sender_full_name": "eddyb",
        "timestamp": 1593135189
    },
    {
        "content": "<p>and to me seems to assume that values live in a vacuum, ignoring the loss of information from e.g. storing a pointer into memory then reading it again later</p>",
        "id": 202044341,
        "sender_full_name": "eddyb",
        "timestamp": 1593135223
    },
    {
        "content": "<p>I can say it does <em>work</em>, as I just got my async serial port example code to actually work on device</p>",
        "id": 202044388,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593135245
    },
    {
        "content": "<p>if you have some time to waste, can you try my suggestion as a replacement to that PR?</p>",
        "id": 202044405,
        "sender_full_name": "eddyb",
        "timestamp": 1593135270
    },
    {
        "content": "<p>lemme find the line to change</p>",
        "id": 202044412,
        "sender_full_name": "eddyb",
        "timestamp": 1593135279
    },
    {
        "content": "<p>replace this <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/builder.rs#L696\">https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_llvm/builder.rs#L696</a></p>\n<p>with <code>self.bitcast(val, dest_ty)</code></p>",
        "id": 202044443,
        "sender_full_name": "eddyb",
        "timestamp": 1593135321
    },
    {
        "content": "<p>Would be happy, although I'm down to 18% battery so I don't know I'll make it through a rustc compile cycle</p>",
        "id": 202044452,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593135335
    },
    {
        "content": "<p>oh lord</p>",
        "id": 202044454,
        "sender_full_name": "eddyb",
        "timestamp": 1593135340
    },
    {
        "content": "<p>brings me back to highschool</p>",
        "id": 202044458,
        "sender_full_name": "eddyb",
        "timestamp": 1593135349
    },
    {
        "content": "<p>anyway that's the suggestion, feel free to try it when you have the time/battery</p>",
        "id": 202044506,
        "sender_full_name": "eddyb",
        "timestamp": 1593135379
    },
    {
        "content": "<p>to be clear, you want me to not have any of Dylan's patch, and <em>just</em> change that line?</p>",
        "id": 202044516,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1593135424
    },
    {
        "content": "<p>yes</p>",
        "id": 202044574,
        "sender_full_name": "eddyb",
        "timestamp": 1593135487
    },
    {
        "content": "<p>if it works that means there's no reason to use <code>pointercast</code>, it may look nicer but it's a trap</p>",
        "id": 202044595,
        "sender_full_name": "eddyb",
        "timestamp": 1593135559
    },
    {
        "content": "<p>if it doesn't... I'll have to <del>eat my hat</del> go look at the actual definitions in LLVM</p>",
        "id": 202044605,
        "sender_full_name": "eddyb",
        "timestamp": 1593135578
    }
]