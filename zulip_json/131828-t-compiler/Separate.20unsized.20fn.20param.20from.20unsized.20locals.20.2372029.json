[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> opening this thread here to talk about <a href=\"https://github.com/rust-lang/rust/issues/72029\" title=\"https://github.com/rust-lang/rust/issues/72029\">#72029</a></p>",
        "id": 196992433,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589032052
    },
    {
        "content": "<p>won't be around today</p>",
        "id": 196992437,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589032067
    },
    {
        "content": "<p>just wanted to mention this part ...</p>",
        "id": 196992444,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589032081
    },
    {
        "content": "<p>There's a problem right now, I'm getting the following error ...</p>\n<div class=\"codehilite\"><pre><span></span><code> Expected a gate test for the feature &#39;unsized_fn_params&#39;.\nHint: create a failing test file named &#39;feature-gate-unsized_fn_params.rs&#39;\n      in the &#39;ui&#39; test suite, with its failures due to\n      missing usage of `#![feature(unsized_fn_params)]`.\nHint: If you already have such a test and don&#39;t want to rename it,\n      you can also add a // gate-test-unsized_fn_params line to the test file.\n</code></pre></div>\n\n\n<p>But I'm not sure how can I add this test given that this thing is turned on, in liballoc and used there so unsure how I can create a test that doesn't use the flag and produce an error.</p>",
        "id": 196992494,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589032120
    },
    {
        "content": "<p>or if I should just do something to ignore this check or what</p>",
        "id": 196992502,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589032138
    },
    {
        "content": "<p>also cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 196992507,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589032154
    },
    {
        "content": "<p>I don't see the problem? Lots of feature are turned on in libcore/alloc/std and none of them should \"leak\" into other crates. In this case liballoc uses the feature gate to provide an impl that can be used on stable, but IIUC the feature gate controls the ability to <em>declare</em> e.g. <code>fn foo(x: dyn SomeTrait) {}</code>, and this should be testable.</p>",
        "id": 196992757,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1589032531
    },
    {
        "content": "<p>ping <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> : I was looking over PR <a href=\"https://github.com/rust-lang/rust/issues/72029\">#72029</a></p>",
        "id": 198120154,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919100
    },
    {
        "content": "<p>hey</p>",
        "id": 198120189,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589919120
    },
    {
        "content": "<p>From the most recent comments you've posted there, it seems like you are not certain on why enabling<code>feature(unsized_fn_params)</code> is not \"fixing\" one of the tests?</p>",
        "id": 198120275,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919154
    },
    {
        "content": "<p>I checked out your branch and did a grep of the code</p>",
        "id": 198120303,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919174
    },
    {
        "content": "<p>one thing that may be worth noting: fn arguments are a special case of pattern bindings</p>",
        "id": 198120325,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919188
    },
    {
        "content": "<p>and so I noticed a code path guarded by <code>unsized_locals</code></p>",
        "id": 198120382,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919216
    },
    {
        "content": "<p>within a <code>fn visit_pat</code> method</p>",
        "id": 198120399,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919229
    },
    {
        "content": "<p>and that may need to <em>also</em> be enabled by your <code>feature(unsized_fn_params)</code> code. Or you may need to revise that bit of code to make sure that your new feature enables that path if <em>and only if</em> you are looking at a pat that happens to be a fn param</p>",
        "id": 198120521,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919285
    },
    {
        "content": "<p>I'm speaking of <a href=\"https://github.com/rust-lang/rust/blob/88e2b96b3b415709fea3629d23625e5e199ea850/src/librustc_typeck/check/mod.rs#L1239\">this line here</a></p>",
        "id": 198120601,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919345
    },
    {
        "content": "<p>yeah, I thought that that may have been involved</p>",
        "id": 198120756,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589919414
    },
    {
        "content": "<p>see also <a href=\"https://github.com/rust-lang/rust/blob/88e2b96b3b415709fea3629d23625e5e199ea850/src/librustc_typeck/check/mod.rs#L1370\">this other line here</a></p>",
        "id": 198120767,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919421
    },
    {
        "content": "<p>(of course if one goes too far down this path, all you'll manage to do is rename <code>unsized_locals</code> to a new name, without actually <em>splitting</em> it. <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 198120850,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919459
    },
    {
        "content": "<p>hehe yeah</p>",
        "id": 198120880,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589919472
    },
    {
        "content": "<p>anyway I think I'll mark this PR as waiting-on-author if you don't mind</p>",
        "id": 198120889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919476
    },
    {
        "content": "<p>sure, go ahead</p>",
        "id": 198120944,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589919486
    },
    {
        "content": "<p>maybe first I'll transcribe this same note into the PR itself for people in general to see</p>",
        "id": 198120957,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Separate.20unsized.20fn.20param.20from.20unsized.20locals.20.2372029/near/198120767\">said</a>:</p>\n<blockquote>\n<p>see also <a href=\"https://github.com/rust-lang/rust/blob/88e2b96b3b415709fea3629d23625e5e199ea850/src/librustc_typeck/check/mod.rs#L1370\">this other line here</a></p>\n</blockquote>\n<p>what about this line in particular, sorry?</p>",
        "id": 198120996,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589919512
    },
    {
        "content": "<p>unsure if I got exactly what you meant</p>",
        "id": 198121006,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589919520
    },
    {
        "content": "<p>that other line is another case where the <code>unsized_locals</code> feature is being checked</p>",
        "id": 198121437,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919726
    },
    {
        "content": "<p>but it is specifically about the inputs to some <code>fn</code></p>",
        "id": 198121464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919743
    },
    {
        "content": "<p>(although I'll admit I'm not sure what the impact of the <code>.simple_ident().is_none()</code> check is there)</p>",
        "id": 198121498,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919779
    },
    {
        "content": "<p>anyway my point is that its another spot you might need to inspect.</p>",
        "id": 198121539,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919801
    },
    {
        "content": "<p>I imagine you <em>did</em> already inspect all of these points</p>",
        "id": 198121553,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919811
    },
    {
        "content": "<p>but the fact that this code is specifically about the handling of formal fn params led me to think that it might be relevant.</p>",
        "id": 198121593,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589919835
    },
    {
        "content": "<p>yep, thanks for those pointers</p>",
        "id": 198123005,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589920479
    },
    {
        "content": "<p>(You know, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> , one way to get unblocked here, and maybe just \"the right thing\" over all, could be to force the developer to opt into both flags. I.e., if you turn <code>#[feature(unsized_fn_params)]</code> on, maybe you have to turn on <code>#[feature(unsized_locals)]</code> too ...)</p>",
        "id": 198225188,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589992994
    },
    {
        "content": "<p>I'm not sure how much I actually <em>believe</em> in the aforementioned approach, but it might be worth considering...</p>",
        "id": 198225270,
        "sender_full_name": "pnkfelix",
        "timestamp": 1589993037
    },
    {
        "content": "<p>this was my first attempt</p>",
        "id": 198228036,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589994299
    },
    {
        "content": "<p>but I believe this is not really splitting things as we want</p>",
        "id": 198228068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589994312
    },
    {
        "content": "<p>I'm going to investigate on this issue tomorrow probably</p>",
        "id": 198228162,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589994346
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> : I just wanted to confirm: in the current state of your branch, you haven't added <code>#[feature(unsized_fn_params)]</code> to <em>any</em> of the tests, right?</p>",
        "id": 198255161,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590007600
    },
    {
        "content": "<p>(nor even replaced <code>#[feature(unsized_locals)]</code> with <code>#[feature(unsized_fn_params)]</code> in any of the tests)</p>",
        "id": 198255236,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590007644
    },
    {
        "content": "<p>also I think I have a straight-forward way to deal with the \"am I within a pat that is part of a fn param\" issue: add a flag to the visitor that is set/unset by an overridden <code>fn visit_param</code> on that same visitor. Something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">visit_param</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">hir</span>::<span class=\"n\">Param</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">within_fn_param</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">intravisit</span>::<span class=\"n\">walk_param</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">within_fn_param</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 198260041,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590010489
    },
    {
        "content": "<p>(I am playing with a local copy of your branch and may be able to post a suggestion commit in the near future)</p>",
        "id": 198260474,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590010716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Separate.20unsized.20fn.20param.20from.20unsized.20locals.20.2372029/near/198255236\">said</a>:</p>\n<blockquote>\n<p>(nor even replaced <code>#[feature(unsized_locals)]</code> with <code>#[feature(unsized_fn_params)]</code> in any of the tests)</p>\n</blockquote>\n<p>nope</p>",
        "id": 198319868,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590067500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Separate.20unsized.20fn.20param.20from.20unsized.20locals.20.2372029/near/198260474\">said</a>:</p>\n<blockquote>\n<p>(I am playing with a local copy of your branch and may be able to post a suggestion commit in the near future)</p>\n</blockquote>\n<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 198319880,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590067504
    },
    {
        "content": "<p>today I may have time for this</p>",
        "id": 198319888,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590067511
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> , I have put some commits illustrating ways you can try to address your problems over here: <a href=\"https://github.com/pnkfelix/rust/tree/separate-unsized-locals\">https://github.com/pnkfelix/rust/tree/separate-unsized-locals</a></p>",
        "id": 198399007,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590112099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>, one question though, why did you added <code>unsized_fn_params</code> to <code>INCOMPLETE_FEATURES</code> <a href=\"https://github.com/pnkfelix/rust/commit/a4e76f830b23e035a542f2fef808a9ba4ab90f47#diff-9e39c9410dacf4c689a770a17b8f9813R588\">here</a>?</p>",
        "id": 198439011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590153026
    },
    {
        "content": "<p>I thought we were just making <code>unsized_params</code> an <code>INCOMPLETE_FEATURE</code> but not <code>unsized_fn_params</code></p>",
        "id": 198439068,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590153063
    },
    {
        "content": "<p>because I don't know which one is the incomplete feature</p>",
        "id": 198442644,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590155203
    },
    {
        "content": "<p>changing that back should reduce the size of the diff, since the tests won't need to be changed as much</p>",
        "id": 198442683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590155248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I'll let you take care of changing that back</p>",
        "id": 198442839,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590155336
    },
    {
        "content": "<p>(or feel free to adapt whatever parts of my commits that you like. In any case, we definitely need more tests.)</p>",
        "id": 198442873,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590155362
    },
    {
        "content": "<p>(since all this does is adapt existing tests; there are new cases that need to be tested specifically, I think...)</p>",
        "id": 198443012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590155417
    },
    {
        "content": "<p>I'm going to take care of this today</p>",
        "id": 198451650,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590159738
    },
    {
        "content": "<p>thanks for the investigation</p>",
        "id": 198451658,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590159742
    },
    {
        "content": "<p>at the very least, I did manage to do a bootstrap build and test with the branch I linked above</p>",
        "id": 198451702,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159775
    },
    {
        "content": "<p>also, by the way</p>",
        "id": 198451782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159813
    },
    {
        "content": "<p><del>we should consider still adding <code>unsized_fn_params</code> to <code>INCOMPLETE_FEATURES</code></del></p>",
        "id": 198451818,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159831
    },
    {
        "content": "<p><del>and have taking it out of <code>INCOMPLETE_FEATURES</code> be a separate PR</del></p>",
        "id": 198451875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159844
    },
    {
        "content": "<p>or ... well</p>",
        "id": 198451881,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159847
    },
    {
        "content": "<p>was <code>unsized_locals</code> already in <code>INCOMPLETE_FEATURES</code> ?</p>",
        "id": 198451893,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159857
    },
    {
        "content": "<p>oh it wasn't</p>",
        "id": 198451948,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159885
    },
    {
        "content": "<p>okay then never mind</p>",
        "id": 198451954,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590159888
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 198462929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590164904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> just had some minutes for this and should be ready now</p>",
        "id": 198485590,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590176229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> did you want to remove the draft tag from the PR?</p>",
        "id": 198486485,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590176706
    },
    {
        "content": "<p>yes and I'm rebasing</p>",
        "id": 198486517,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590176724
    },
    {
        "content": "<p>there are conflicts with master</p>",
        "id": 198486542,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590176738
    },
    {
        "content": "<p>running tests again on ui and all that :)</p>",
        "id": 198486569,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590176748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> this is ready for review</p>",
        "id": 198495597,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590181898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Separate.20unsized.20fn.20param.20from.20unsized.20locals.20.2372029/near/198439068\">said</a>:</p>\n<blockquote>\n<p>I thought we were just making <code>unsized_params</code> an <code>INCOMPLETE_FEATURE</code> but not <code>unsized_fn_params</code></p>\n</blockquote>\n<p>what is <code>unsized_params</code>, I thought there is just <code>unsized_locals</code> and <code>unsized_fn_params</code>?</p>",
        "id": 198527479,
        "sender_full_name": "RalfJ",
        "timestamp": 1590226823
    },
    {
        "content": "<p>I meant <code>unsized_locals</code> :)</p>",
        "id": 198532705,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590235934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> addessed your comments but didn't get the one about enabling the feature in <code>liballoc</code> and <code>libcore</code>,  tests should also be passing now. Let's wait for the CI.</p>",
        "id": 198552236,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590268216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> did you want to talk about the PR here?</p>",
        "id": 198802119,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590517773
    },
    {
        "content": "<p>yes</p>",
        "id": 198802345,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590517873
    },
    {
        "content": "<p>couldn't read and think about Ralf's comments yet</p>",
        "id": 198802373,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590517887
    },
    {
        "content": "<p>let me check those again</p>",
        "id": 198802383,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590517890
    },
    {
        "content": "<p>I don't think I have bandwidth to try to look at the code itself</p>",
        "id": 198802399,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590517898
    },
    {
        "content": "<p>but it seems that this is close modulo Ralf last comment</p>",
        "id": 198802419,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590517912
    },
    {
        "content": "<p>but what I would recommend, perhaps, is some methodologies for narrowing down which part of the change was wrong</p>",
        "id": 198802482,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590517923
    },
    {
        "content": "<p>namely, if you add a Z flag (or set of Z flags) for controlling how each changed boolean test is handled</p>",
        "id": 198802521,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590517944
    },
    {
        "content": "<p>then you will be able to quickly experiment, on the command line, with different semantics</p>",
        "id": 198802560,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590517961
    },
    {
        "content": "<p>without having to wait for a rebuild in between each one</p>",
        "id": 198802570,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590517968
    },
    {
        "content": "<p>Its sort of overkill, arguably. Like using a bazooka to kill a moth</p>",
        "id": 198802620,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590517992
    },
    {
        "content": "<p>hehehe</p>",
        "id": 198802676,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590518020
    },
    {
        "content": "<p>Usually I would prefer to try to sit down and understand the code directly, perhaps with some <code>debug!</code> instrumentation added. But sometimes the best option is to add <em>some way</em> to do the kind of direct experimentation I am suggesting.</p>",
        "id": 198802757,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590518044
    },
    {
        "content": "<p>Like, there are something like five or six <code>if</code> statements that were modified here to look at a different feature flag. And my memory is that there weren't that many others that were left unchanged</p>",
        "id": 198802956,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590518162
    },
    {
        "content": "<p>so if you add a <code>-Z take-control-of-tests=&lt;number&gt;</code>, and then use the individual bits of <code>&lt;number&gt;</code> to dictate whether each of those <code>if</code>-statements (including the ones currently unchanged) use <code>.unsized_locals</code> alone, or <code>.unsized_fn_params</code> alone, or the OR of them, then you can feed things like <code>-Z take-control-of-tests=0x2cafe</code> or some such to control them.</p>",
        "id": 198803265,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590518318
    },
    {
        "content": "<p>(am I unhappy that I'm making this suggestion? Yes, I am. I would prefer if the rebuild time were fast enough that such a suggestion would be laughable...)</p>",
        "id": 198803338,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590518367
    },
    {
        "content": "<p>hehehe</p>",
        "id": 198803901,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590518632
    },
    {
        "content": "<p>but yeah good points</p>",
        "id": 198803913,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590518639
    },
    {
        "content": "<p>alternatively, you could just start by adding <code>debug!</code> instrumentation to all of the aforementioned points, and then try to dissect the log on the cases of interest</p>",
        "id": 198804060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1590518698
    },
    {
        "content": "<p>yep</p>",
        "id": 198807345,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590520087
    },
    {
        "content": "<p>will try that as soon as I finish other stuff I'm doing</p>",
        "id": 198807420,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1590520112
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>, I did not forget about this issue :)</p>",
        "id": 200231956,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591711394
    },
    {
        "content": "<p>just coming back to it</p>",
        "id": 200231970,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591711400
    },
    {
        "content": "<p>to understand a bit more about this issue, one thing I guess I'm not 100% sure is the whole picture of <code>unsized_locals</code></p>",
        "id": 200232159,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591711470
    },
    {
        "content": "<p>I meant, it seems that we were using that flag to enable unsized locals to be used in Rust code in general but given that is kind of half baked, now we want to have <code>unsized_fn_params</code> for unsized fn arguments, but what is not very clear is what <code>unsized_locals</code> is representing now</p>",
        "id": 200232318,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591711541
    },
    {
        "content": "<p>my assumption is that it's representing half baked support for unsized locals in general without unsized fn arguments in it</p>",
        "id": 200232577,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591711629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Separate.20unsized.20fn.20param.20from.20unsized.20locals.20.2372029/near/200232577\">said</a>:</p>\n<blockquote>\n<p>my assumption is that it's representing half baked support for unsized locals in general without unsized fn arguments in it</p>\n</blockquote>\n<p>yes that was my reading as well. It represents the unfinished (buggy) part of the feature</p>",
        "id": 200259378,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591721688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> right, so after my change ... <code>unsized_locals</code> would be some parts of some parts of an unsized locals working system, right? :)</p>",
        "id": 200263466,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591723683
    },
    {
        "content": "<p>?</p>",
        "id": 200263526,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591723715
    },
    {
        "content": "<p>I don't know, I thought it represented all <code>unsized_locals</code></p>",
        "id": 200263587,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591723737
    },
    {
        "content": "<p>unless you are consider fn params to be a special case of a local?</p>",
        "id": 200263620,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591723754
    },
    {
        "content": "<p>what I'm trying to understand is ... <code>unsized_locals</code> did have some meaning at the beginning which was a feature flag to enable unsized locals in Rust code</p>",
        "id": 200263676,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591723786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Separate.20unsized.20fn.20param.20from.20unsized.20locals.20.2372029/near/200263620\">said</a>:</p>\n<blockquote>\n<p>unless you are consider fn params to be a special case of a local?</p>\n</blockquote>\n<p>yes</p>",
        "id": 200263685,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591723789
    },
    {
        "content": "<p>okay so sure, I would interpret <code>unsized_locals</code> to now be talking about non-fn-param locals</p>",
        "id": 200263788,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591723814
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Separate.20unsized.20fn.20param.20from.20unsized.20locals.20.2372029/near/200263676\">said</a>:</p>\n<blockquote>\n<p>what I'm trying to understand is ... <code>unsized_locals</code> did have some meaning at the beginning which was a feature flag to enable unsized locals in Rust code</p>\n</blockquote>\n<p>and now it seems like the semantics of it looks more like left overs of something half baked rather than something with some meaning?</p>",
        "id": 200263791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591723815
    },
    {
        "content": "<p>things introduced e.g. via <code>let</code></p>",
        "id": 200263799,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591723818
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 200263831,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591723829
    },
    {
        "content": "<p>ok, right</p>",
        "id": 200263838,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591723831
    },
    {
        "content": "<p>sounds like what I was thinking :)</p>",
        "id": 200263858,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591723838
    },
    {
        "content": "<p>anyway, makes sense, I was trying to understand if my assumptions were right</p>",
        "id": 200263938,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591723874
    },
    {
        "content": "<p>What alternative interpretation were you considering? Maybe to have <code>unsized_locals</code> include fn params?</p>",
        "id": 200264125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591723948
    },
    {
        "content": "<p>(i.e. effectively <code>unsized_locals</code> would <em>imply</em> <code>unsized_fn_params</code> ?)</p>",
        "id": 200264158,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591723960
    },
    {
        "content": "<p>I wasn't considering any particular alternative, I was just considering that I may have been misunderstanding something</p>",
        "id": 200265363,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591724565
    },
    {
        "content": "<p>just wanted to check if my assumptions were right</p>",
        "id": 200265384,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591724575
    },
    {
        "content": "<p>part of my doubt was raised by the comment <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> has made, that <code>unsized_locals</code> feature is unsound and shouldn't be used in libcore/liballoc</p>",
        "id": 200265643,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591724707
    },
    {
        "content": "<p>my reasoning was ... ok, it shouldn't be used, but it is used in current master. If <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> is saying that it shouldn't be used, I guess that implies that the only thing from <code>unsized_locals</code> that was used on libcore/liballoc is what it's included right now in <code>unsized_fn_params</code></p>",
        "id": 200265835,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591724792
    },
    {
        "content": "<p>I'm making this reasoning and reaching that conclusion from their comment because I have no idea what liballoc/libcore is using and why</p>",
        "id": 200265891,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591724821
    },
    {
        "content": "<p>well maybe we should review what part is unsound</p>",
        "id": 200272284,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591727966
    },
    {
        "content": "<p>note specifically that when <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> registered their concern, they later did an experiment and <a href=\"https://github.com/rust-lang/rust/issues/71416#issuecomment-617575672\">determined</a> that, at that time, the <em>particular</em> use of the feature within <code>libstd</code> never generated the code that <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> is worried about being unsound</p>",
        "id": 200272510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591728075
    },
    {
        "content": "<p>its LLVM's <code>alloca</code> that do not uphold alignment guarantees. I am assuming that fn params do not use <code>alloca</code>, right?</p>",
        "id": 200272688,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591728171
    },
    {
        "content": "<p>(I assume instead that fn params can rely on the parameter stack being aligned to a certain boundary when the arguments are placed on it, and also that it inserts any necessary padding to ensure required alignments of those arguments. I haven't checked any of these claims myself; its just what I'm assuming based on the conversation.)</p>",
        "id": 200273005,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591728315
    },
    {
        "content": "<p>For <code>extern \"Rust\" fn</code> any types that are <code>Abi::ByRef</code> are passed as pointer argument. The actual argument is not copied to a different place. For <code>extern \"C\" fn</code> any types that are <code>Abi::ByRef</code> are copied to the argument part of the stack. In this case there can be a misalignment.</p>",
        "id": 200273177,
        "sender_full_name": "bjorn3",
        "timestamp": 1591728393
    },
    {
        "content": "<p>that's interesting; I didn't know about <code>Abi::ByRef</code> having different interpretations depending on which calling convention is specified.</p>",
        "id": 200273319,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591728463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> has this detail of <code>extern \"C\" fn</code> arguments being potentially misaligned also been discussed already? Do we e.g. lint against using types with alignment constraints in those contexts? I am now worried whether we have started down the wrong path of how to implement this feature.</p>",
        "id": 200273500,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591728554
    },
    {
        "content": "<p>By \"implement\", I really mean \"how to work around (in the short-term) the shortcomings in this feature\"</p>",
        "id": 200273563,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591728585
    },
    {
        "content": "<p>I only know this because I found an ABI incompatibility with cg_llvm in cg_clif for <code>extern \"C\" fn</code>. I just always passed a pointer for <code>Abi::ByRef</code>. Cranelift unfortunately doesn't have support for struct argument passing.</p>",
        "id": 200273575,
        "sender_full_name": "bjorn3",
        "timestamp": 1591728589
    },
    {
        "content": "<blockquote>\n<p>has this detail of extern \"C\" fn arguments being potentially misaligned also been discussed already?</p>\n</blockquote>\n<p>Not that I know of. I just realized it myself when I wrote my reply.</p>",
        "id": 200273693,
        "sender_full_name": "bjorn3",
        "timestamp": 1591728627
    },
    {
        "content": "<p>(I can just hear <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> in the back of my head saying \"why didn't we just fix it to do the right thing in the short term by doing the manual realignment trick\")</p>",
        "id": 200273700,
        "sender_full_name": "pnkfelix",
        "timestamp": 1591728632
    },
    {
        "content": "<p>Unsized fn params are supported by cg_clif, but unsized locals won't be supported until Cranelift implements <code>alloca</code> support. Because of this I am fine with eventual stabilization of unsized fn params, but for unsized locals I prefer if they are not stabilized (yet).</p>",
        "id": 200273992,
        "sender_full_name": "bjorn3",
        "timestamp": 1591728766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Separate.20unsized.20fn.20param.20from.20unsized.20locals.20.2372029/near/200265835\">said</a>:</p>\n<blockquote>\n<p>my reasoning was ... ok, it shouldn't be used, but it is used in current master. If <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> is saying that it shouldn't be used, I guess that implies that the only thing from <code>unsized_locals</code> that was used on libcore/liballoc is what it's included right now in <code>unsized_fn_params</code></p>\n</blockquote>\n<p>yes that's indeed the case :) or rather, it better should be. everything else would be a critical soundness bug. the entire point og separating the featrues is to make sure that we do not have this critical soundness bug.</p>",
        "id": 200289500,
        "sender_full_name": "RalfJ",
        "timestamp": 1591736332
    },
    {
        "content": "<p>as far as I am concerned that is literally the only reason to split this feature^^</p>",
        "id": 200289531,
        "sender_full_name": "RalfJ",
        "timestamp": 1591736347
    },
    {
        "content": "<p>so if we cannot do both of<br>\na) make libstd use <code>unsized_fn_params</code> (and nothing else), and<br>\nb) ensure that <code>unsized_fn_params</code> is sound<br>\nthen I dont know what any of this would buy us</p>",
        "id": 200289577,
        "sender_full_name": "RalfJ",
        "timestamp": 1591736377
    },
    {
        "content": "<p>what is confusing me is that I thought that was clear to everyone, because why else would we want to do this split? clearly I miscommunicated somewhere.</p>",
        "id": 200289694,
        "sender_full_name": "RalfJ",
        "timestamp": 1591736408
    },
    {
        "content": "<p>now with what <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> says I guess we have to further restrict <code>unsized_fn_params</code> to ABI \"Rust\" functions</p>",
        "id": 200289758,
        "sender_full_name": "RalfJ",
        "timestamp": 1591736443
    },
    {
        "content": "<p>I have no idea what the pass-unsized-params-wthout-copy hack currently does for ABI \"C\" functions... maybe the best option is to just entirely disallow unsized params for any non-\"Rust\" ABI</p>",
        "id": 200289844,
        "sender_full_name": "RalfJ",
        "timestamp": 1591736491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Separate.20unsized.20fn.20param.20from.20unsized.20locals.20.2372029/near/200289531\">said</a>:</p>\n<blockquote>\n<p>as far as I am concerned that is literally the only reason to split this feature^^</p>\n</blockquote>\n<p>yeah so, my reasoning at the beginning wasn't exactly this one. I thought the idea was that we wanted to disallow the usage of something that is just incomplete (<code>unsized_locals</code>) and only allow the complete feature (<code>unsized_fn_params</code>). But good to know that is also related to what you're describing</p>",
        "id": 200425285,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1591800156
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217081\">@Yuki Okushi</span> just saw some comments on <a href=\"https://github.com/rust-lang/rust/pull/74971#discussion_r464056617\">https://github.com/rust-lang/rust/pull/74971#discussion_r464056617</a></p>",
        "id": 206055748,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596649943
    },
    {
        "content": "<p>let me know if you're going to tackle those, more than happy to leave everything up to you here :)</p>",
        "id": 206055801,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596649969
    },
    {
        "content": "<p>yeah, I'll address the comments and come up with some tests, but <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> or <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>, I'd appreciate it if you could help the test part to improve coverage!</p>",
        "id": 206073103,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1596658802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"217081\">Yuki Okushi</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Separate.20unsized.20fn.20param.20from.20unsized.20locals.20.2372029/near/206073103\">said</a>:</p>\n<blockquote>\n<p>yeah, I'll address the comments and come up with some tests, but <span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> or <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span>, I'd appreciate it if you could help the test part to improve coverage!</p>\n</blockquote>\n<p>what do you meant exactly with help the test part to improve coverage? do you want me to think about test cases or what exactly?</p>",
        "id": 206078316,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1596661587
    },
    {
        "content": "<p><code>RalfJung</code> said on the PR:</p>\n<blockquote>\n<p>The key test for this PR is a file that enables <code>unsized_fn_params</code> but not <code>unsized_locals</code>, and then checks that all uses of unsizd locals except for fn params error.</p>\n</blockquote>\n<p>well, I'm thinking about it a bit, we have some tests which enable <code>unsized_locals</code> and <code>unsized_fn_params</code> both<br>\nremoving <code>unsized_locals</code> from there (and having them as separate tests) is enough for the above point?</p>",
        "id": 206083173,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1596664624
    },
    {
        "content": "<p>I would expect something like a single test file with only <code>unsized_fn_params</code> and plenty of functions in it that should <em>not</em> work and <code>//~ ERROR</code> annotations for all of them</p>",
        "id": 206113511,
        "sender_full_name": "RalfJ",
        "timestamp": 1596700798
    },
    {
        "content": "<p>and <code>library/</code> should stop using <code>unsized_locals</code></p>",
        "id": 206113597,
        "sender_full_name": "RalfJ",
        "timestamp": 1596700848
    },
    {
        "content": "<p>the latter and the existing tests you have I think cover pretty well that we still <em>accept</em> enough code with the respective feature flags; the former is necessary to ensure that we also <em>reject</em> enough code.</p>",
        "id": 206113623,
        "sender_full_name": "RalfJ",
        "timestamp": 1596700867
    },
    {
        "content": "<p>so <a href=\"https://github.com/rust-lang/rust/issues/74971\">#74971</a> accepts <code>fn a(box box b: Box&lt;Box&lt;[u8]&gt;&gt;) {}</code> with <code>unsized_fn_params</code>, not <code>unsized_locals</code> but it should be gated on the latter.<br>\nit seems we check non-trivial patterns like this: <a href=\"https://github.com/rust-lang/rust/pull/74971/files#diff-1d1b0d29a2e8da97c6bfb6e364d920c7R1378-R1381\">https://github.com/rust-lang/rust/pull/74971/files#diff-1d1b0d29a2e8da97c6bfb6e364d920c7R1378-R1381</a><br>\nI'm... not sure we could use it here, I haven't found the best way yet</p>",
        "id": 206139345,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1596720089
    },
    {
        "content": "<p>context: <a href=\"https://github.com/rust-lang/rust/pull/74971#discussion_r464056617\">https://github.com/rust-lang/rust/pull/74971#discussion_r464056617</a></p>",
        "id": 206139350,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1596720095
    },
    {
        "content": "<p>Ping from triage :) What's the status of this?</p>",
        "id": 209800132,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599840216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"217081\">@Yuki Okushi</span> do you plan to keep working on this?</p>",
        "id": 209825889,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1599853143
    },
    {
        "content": "<p>I have no idea what's left to be done and if you have time to continue but if you don't have the time I may be able to pick it up at some point</p>",
        "id": 209825952,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1599853200
    },
    {
        "content": "<p>i can take over if needed <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 209844139,
        "sender_full_name": "DPC",
        "timestamp": 1599864410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> unfortunately I don't have enough bandwidth to resolve the above point currently, sorry! Feel free to take it over :)</p>",
        "id": 209932186,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1600004569
    },
    {
        "content": "<p>if you can leave a note on the state in which the PR is in, and what's missing, would be helpful</p>",
        "id": 209933461,
        "sender_full_name": "DPC",
        "timestamp": 1600006519
    }
]