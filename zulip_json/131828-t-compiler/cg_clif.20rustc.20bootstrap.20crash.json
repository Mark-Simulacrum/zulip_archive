[
    {
        "content": "<p>I got rustc bootstrapping using cg_clif. Unfortunately the rustc built using cg_clif crashes when you try to use it. So far I have been able to pin point that <code>make_input</code> returns an <code>io::Error</code>. When trying to <code>.to_string()</code> it it turns out that the <code>io::Error</code> has an invalid discriminant.</p>\n<p><strong>How do I continue debugging from this point on?</strong> I normally just removed code piece by piece and added printf for values I suspected to be corrupted. However for rustc this is not feasible, as the recompilation takes way too long.</p>\n<p>Rust fork: <a href=\"https://github.com/bjorn3/rust/commit/e5c309197bf97c12c5d0782b9300417a52c80f66\" title=\"https://github.com/bjorn3/rust/commit/e5c309197bf97c12c5d0782b9300417a52c80f66\">https://github.com/bjorn3/rust/commit/e5c309197bf97c12c5d0782b9300417a52c80f66</a> (branch cg_clif_subtree)<br>\ncg_clif commit: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/commit/f7eb36070c602f0dccca26ccec83f1c003cb27dd\" title=\"https://github.com/bjorn3/rustc_codegen_cranelift/commit/f7eb36070c602f0dccca26ccec83f1c003cb27dd\">https://github.com/bjorn3/rustc_codegen_cranelift/commit/f7eb36070c602f0dccca26ccec83f1c003cb27dd</a> (branch wip_proc_macro_fixes, clone it to <code>src/rustc_codegen_cranelift</code> in the rust source repo)<br>\nCranelift commit: <a href=\"https://github.com/bjorn3/wasmtime/commit/2d60da466dc375b0cb08ad62e49879927f176619\" title=\"https://github.com/bjorn3/wasmtime/commit/2d60da466dc375b0cb08ad62e49879927f176619\">https://github.com/bjorn3/wasmtime/commit/2d60da466dc375b0cb08ad62e49879927f176619</a> (pr <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1559\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1559\">bytecodealliance/wasmtime#1559</a>, clone it to the parent dir of the rust repo, or edit Cargo.toml of the rust repo to point to it in the patch section)</p>\n<p>config.toml:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">[rust]</span>\n<span class=\"n\">codegen-backends</span> <span class=\"o\">=</span> <span class=\"k\">[&quot;cranelift&quot;]</span>\n<span class=\"n\">deny-warnings</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n</pre></div>",
        "id": 194721462,
        "sender_full_name": "bjorn3",
        "timestamp": 1587410781
    },
    {
        "content": "<p>^ any suggestions?</p>",
        "id": 194723696,
        "sender_full_name": "bjorn3",
        "timestamp": 1587412076
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> you can try to use <code>rr</code> to find the code that last wrote the memory address containing the bad discriminant</p>",
        "id": 195380024,
        "sender_full_name": "eddyb",
        "timestamp": 1587971703
    },
    {
        "content": "<p>Good idea!</p>",
        "id": 195388507,
        "sender_full_name": "bjorn3",
        "timestamp": 1587977294
    }
]