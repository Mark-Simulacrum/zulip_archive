[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> hi! should've contacted you here sooner. anyway, I'm still trying to fix the fallout from some of my changes and I keep finding bugs :(</p>",
        "id": 131219497,
        "sender_full_name": "eddyb",
        "timestamp": 1533882602
    },
    {
        "content": "<p>so what I noticed is the <code>use $crate;</code> warning doesn't fire for <code>use $crate::{self};</code> <a href=\"http://play.rust-lang.org/?gist=b4cf86e1f8bf5b2007165912f38afc57&amp;version=stable&amp;mode=debug&amp;edition=2015\" target=\"_blank\" title=\"http://play.rust-lang.org/?gist=b4cf86e1f8bf5b2007165912f38afc57&amp;version=stable&amp;mode=debug&amp;edition=2015\">http://play.rust-lang.org/?gist=b4cf86e1f8bf5b2007165912f38afc57&amp;version=stable&amp;mode=debug&amp;edition=2015</a></p>",
        "id": 131219552,
        "sender_full_name": "eddyb",
        "timestamp": 1533882707
    },
    {
        "content": "<p>I'm assuming I can just move that around so it always fires if the final path is just one <code>$crate</code> segment</p>",
        "id": 131219593,
        "sender_full_name": "eddyb",
        "timestamp": 1533882729
    },
    {
        "content": "<p>also, <code>use $crate;</code> was converted into <code>use crate_name as crate_name;</code> <em>not</em> <code>use $crate as crate_name;</code> which meant things could go wrong if the <code>extern crate</code> the macro came from was renamed :/ (also, it doesn't work same-crate <em>at all</em>)</p>",
        "id": 131219603,
        "sender_full_name": "eddyb",
        "timestamp": 1533882792
    },
    {
        "content": "<p>I made it a bit more uniform so now it can resolve same-crate (but if you don't rename the import you can't access it because it picks up the crate name from the root module and that's empty for the current crate). <code>use $crate as foo;</code> seems... reasonable IMO, it's only <code>use $crate;</code> that's bad because of the rename to <code>$crate</code></p>",
        "id": 131219676,
        "sender_full_name": "eddyb",
        "timestamp": 1533882924
    },
    {
        "content": "<p>so one weird thing is I broke <code>import-crate-var</code>, it gives me:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0425]: cannot find function `f` in module `import_crate_var`\n  --&gt; /home/eddy/Projects/rust-2/src/test/compile-fail/import-crate-var.rs:22:5\n   |\nLL |     m!();\n   |     ^^^^^ not found in `import_crate_var`\n   |\n   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\nhelp: possible candidate is found in another module, you can import it into scope\n   |\nLL | use import_crate_var::f;\n   |\n</pre></div>",
        "id": 131219784,
        "sender_full_name": "eddyb",
        "timestamp": 1533883086
    },
    {
        "content": "<p>so what sort of weird module with <code>f</code> missing, is that? ohhhhhh it's not hitting the cross-crate code path, which means it's not getting populated, hah! (I'm rubber ducking now, I guess)</p>",
        "id": 131219806,
        "sender_full_name": "eddyb",
        "timestamp": 1533883184
    },
    {
        "content": "<p>hmm <code>populate_module_if_necessary</code> is not enough to be able to access items from the \"module\"</p>",
        "id": 131221048,
        "sender_full_name": "eddyb",
        "timestamp": 1533885210
    },
    {
        "content": "<p>ugh <code>use $crate;</code> probably only worked because it was basically <code>use \"\" as \"\";</code> which is cyclical</p>",
        "id": 131221622,
        "sender_full_name": "eddyb",
        "timestamp": 1533885991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I'm not sure how often <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> comes online here; internals is maybe best?</p>",
        "id": 131224666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533890222
    },
    {
        "content": "<blockquote>\n<p>I'm not sure how often @Vadim Petrochenkov comes online here</p>\n</blockquote>\n<p>Twice a day, in the morning and in the evening (GMT+3), same for internals.</p>",
        "id": 131227756,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1533894387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <br>\nYes, single segment imports were already buggy for all special segment (self, super, $crate, now crate) - e.g. <a href=\"https://github.com/rust-lang/rust/issues/37156\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/37156\">https://github.com/rust-lang/rust/issues/37156</a>, <a href=\"https://github.com/rust-lang/rust/issues/35612\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/35612\">https://github.com/rust-lang/rust/issues/35612</a>.<br>\nI wanted to fix it this summer, but other stuff was higher priority.</p>\n<p><code>use $crate;</code> was a warning long enough, I think it can be made an error now if necessary.<br>\nThe intended (at least by me, but it was also discussed in one of the module rfc threads with the same conclusion), but not yet implemented rule is that every import must have a name</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// BAD, same for $crate</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// GOOD, same for $crate</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// BAD</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// GOOD</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// BAD</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">name</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// GOOD, name can come from a previous segment for `self`</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"c1\">// Also GOOD</span>\n</pre></div>\n\n\n<p>and that implicit naming like <code>use $crate</code> -&gt; <code>use crate_name</code> should never be done.</p>",
        "id": 131228155,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1533894968
    },
    {
        "content": "<p>I agree, although I think for now I'll try to do the simplest thing that works, since this is taking way too long</p>",
        "id": 131228404,
        "sender_full_name": "eddyb",
        "timestamp": 1533895381
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> do you have an opinion on <a href=\"https://github.com/rust-lang/rust/issues/53128#issuecomment-411991950\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53128#issuecomment-411991950\">https://github.com/rust-lang/rust/issues/53128#issuecomment-411991950</a>? I have the \"force <code>extern_prelude</code> on everyone\" in my PR but I think I need to take it out to avoid having to rewrite all the tests, and I think I'll go with the second thing (i.e. <code>test::foo</code> doesn't imply <code>::test::foo</code> unless <code>test</code> is in <code>extern_prelude</code>, for both ambiguity checking and actual resolution)</p>",
        "id": 131230494,
        "sender_full_name": "eddyb",
        "timestamp": 1533898621
    },
    {
        "content": "<p>I finally figured out how <code>edition-lint-paths</code> is supposed to work, heh, so you turn on <em>some</em> features from the new edition, <em>without</em> switching to it (so <code>#![feature(rust_2018_preview)]</code>is only a subset of <code>--edition 2018</code>'s effects), and then you get a bunch of lints</p>",
        "id": 131230634,
        "sender_full_name": "eddyb",
        "timestamp": 1533898832
    },
    {
        "content": "<blockquote>\n<p>Alternatively, we can make ::crate_name not work for any crate not in the extern_prelude, and still require extern crate</p>\n</blockquote>\n<p>I think we can do that, at least initially.<br>\nThis mostly affects proc_macros and private rustc crates, so this should be rare and shouldn't affect new users.</p>",
        "id": 131231221,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1533899796
    },
    {
        "content": "<p>also bench stuff I guess</p>",
        "id": 131231254,
        "sender_full_name": "eddyb",
        "timestamp": 1533899883
    },
    {
        "content": "<p>we can land it but maybe we should do it separately from the main PR, whereas everything else is needed for <code>#![feature(uniform_paths)]</code> to even <em>work at all</em></p>",
        "id": 131231285,
        "sender_full_name": "eddyb",
        "timestamp": 1533899937
    },
    {
        "content": "<p>In the \"true uniform path\" model imports are resolved as any non-imports, so local modules shadow extern crates and <code>::test</code> vs <code>self::test</code> is not an error.<br>\nWhen it's implemented we can allow <code>::my_crate</code> to refer to non-prelude crates again.</p>",
        "id": 131231305,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1533899997
    },
    {
        "content": "<p>FWIW I... have that implemented</p>",
        "id": 131231354,
        "sender_full_name": "eddyb",
        "timestamp": 1533900034
    },
    {
        "content": "<p>or, well, with one tiny caveat, single-segment imports have the preference order flipped</p>",
        "id": 131231374,
        "sender_full_name": "eddyb",
        "timestamp": 1533900086
    },
    {
        "content": "<p>(Also, I should go right now, will answer later.)</p>",
        "id": 131231382,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1533900120
    },
    {
        "content": "<p>but the main part of the resolution involves treating import paths as relative paths</p>",
        "id": 131231421,
        "sender_full_name": "eddyb",
        "timestamp": 1533900133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> so uhhh I think I actually implemented \"try in self and only if it's not in there try an external crate\". I'll put it in a separate commit from the ambiguity canary thing</p>",
        "id": 131233117,
        "sender_full_name": "eddyb",
        "timestamp": 1533902568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> while I'm waiting for another build, I came up with this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"nn\">test</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">test</span>::<span class=\"n\">Foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I don't know yet if <code>#![feature(uniform_paths)]</code> allows it (assuming the ambiguity canary doesn't trip, e.g. due to <code>--extern test=...</code> - cause that has explicit <code>self</code> which shouldn't allow reaching the inner module) but <em>it might</em>, and I think I know how to solve it:</p>\n<p>Add another argument to <code>resolve_path</code> for the initial value of <code>module</code>, and pass <code>Some(UniformRoot)</code> for imports, <em>in all editions</em>.<br>\nThis will ensure that single-segment imports don't go through a different codepath than the first segment of a multi-segment import.</p>",
        "id": 131236409,
        "sender_full_name": "eddyb",
        "timestamp": 1533906834
    },
    {
        "content": "<p>hmm <code>resolve_ident_in_lexical_scope</code> is a pretty bad thing to hit because it resolves absolutely if there are no ribs</p>",
        "id": 131239363,
        "sender_full_name": "eddyb",
        "timestamp": 1533910172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>  see the edit here: <a href=\"https://github.com/rust-lang/rust/pull/52923#issuecomment-412120808\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52923#issuecomment-412120808\">https://github.com/rust-lang/rust/pull/52923#issuecomment-412120808</a> - basically, since (I think) I'm much closer to your intended \"uniform approach\", we can probably get rid of the hacky ambiguity detection and instead <em>just check</em> if both things we wanted to resolve to, exist, while resolving them</p>\n<p>maybe the <code>UniformRoot(keywords::Invalid.name())</code> hack is too much of a hack and we should have two variants (or <code>Option</code> around the name), one for the \"absolute mode\" (<code>use ::x::...;</code>) and one for the \"maybe-relative mode\" (<code>use x::...;</code>), but other than that...</p>",
        "id": 131836462,
        "sender_full_name": "eddyb",
        "timestamp": 1533922311
    },
    {
        "content": "<blockquote>\n<p>I'm much closer to your intended \"uniform approach\", we can probably get rid of the hacky ambiguity detection and instead just check if both things we wanted to resolve to, exist, while resolving them</p>\n</blockquote>\n<p>The key issue with import (and macro) paths is that \"whether they exist\" is not a well-formed question.<br>\nIt may be nonexistent at one moment of time when we check it, but then start to exist at later moment of time.<br>\nThat's why <code>resolve_lexical_macro_path_segment</code> has to track all these \"potentially ambiguous results\" and work in two passes - one for initial resolution and another for validation (in <code>fn finalize_current_module_macro_resolutions</code>).</p>\n<p>The <code>self.resolve_ident_in_module_unadjusted(...).is_ok()</code> in <a href=\"https://github.com/rust-lang/rust/pull/52923/commits/5e24cb92245ae7f124a55f5413c2e8b4ba25c12c\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/52923/commits/5e24cb92245ae7f124a55f5413c2e8b4ba25c12c\">https://github.com/rust-lang/rust/pull/52923/commits/5e24cb92245ae7f124a55f5413c2e8b4ba25c12c</a> falls exactly into this trap - is_ok can return false at one moment of time, but the local module can be defined <em>after</em> that.</p>",
        "id": 131929275,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1533946623
    },
    {
        "content": "<p>The scheme with <code>use</code> cloning was supposed to avoid dealing with this more tricky stuff to get the result quicker, even if it's more conservative than strictly necessary.</p>",
        "id": 131929450,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1533946982
    },
    {
        "content": "<p>I think the conclusion from this is that the canaries are still useful to conservatively error in all weird cases when <code>resolve_ident_in_module_unadjusted</code> returns false negative.</p>",
        "id": 131929526,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1533947147
    },
    {
        "content": "<p>Okay, thanks, that means I'll keep the current version of the canaries and note the fact that they're needed <em>because</em> the implementation isn't sophisticated enough to <em>always</em> pick <code>self::x</code> over <code>::x</code> if the former <em>eventually</em> exists, wrt macro expansion</p>",
        "id": 131938521,
        "sender_full_name": "eddyb",
        "timestamp": 1533963648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> heh, funnily enough this works as expected:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">std</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"p\">{</span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">m</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>(even though there's the ambiguity error, only <code>Bar</code> <em>also</em> gets a resolution failure, <code>Foo</code> succeeds)<br>\nSo I'm guessing a problematic testcase would be more involved?</p>",
        "id": 131941308,
        "sender_full_name": "eddyb",
        "timestamp": 1533968638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Hmm I think I came up with a simpler ambiguity canary scheme: since we rely on <code>extern_prelude</code> for checking if we're supposed to resolve to <code>::x</code>, <em>ever</em>, we can have only one canary import, for <code>self::x</code>, and in <code>finalize_imports</code>, ignore errors for these canaries and treat their success as ambiguity errors, instead of relying on a pair of them coexisting</p>",
        "id": 131944699,
        "sender_full_name": "eddyb",
        "timestamp": 1533975380
    },
    {
        "content": "<p>Furthermore, if we do it this way, it should be possible to have one canary for each of the non-module scopes (\"non-normal modules\" in <code>rustc_resolve</code> terminology) around the , to <em>also</em> error in a case like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">enum</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"cm\">/*self::*/</span><span class=\"n\">Foo</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 131944755,
        "sender_full_name": "eddyb",
        "timestamp": 1533975510
    },
    {
        "content": "<p>As one might expect that not writing <code>self</code> there, with <code>#![feature(uniform_paths)]</code>, would resolve to the inner <code>Foo</code>, but <code>self</code> always resolves in the \"normal module\"</p>",
        "id": 131944761,
        "sender_full_name": "eddyb",
        "timestamp": 1533975566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> woo, it landed! and it broke clippy &amp; rls, sadly. r? <a href=\"https://github.com/rust-lang/rust/pull/53335\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53335\">https://github.com/rust-lang/rust/pull/53335</a></p>",
        "id": 132097989,
        "sender_full_name": "eddyb",
        "timestamp": 1534236265
    },
    {
        "content": "<p>Should bugs be filed for things like uniform-paths? I'm <em>fairly</em> sure this is a bug. At the very least It's confusing to me.  Enabling uniform_paths, there's a detected ambiguous <code>use</code> for <code>log</code>. But I can't figure out <em>where</em> the non-crate <code>log</code> is coming from. Furthermore, if I change <code>use log;</code> to <code>use self::log;</code>, just to see if it'll work, the compiler claims there's no <code>log</code> module in the root. Weird, maybe?</p>\n<p><a href=\"https://play.rust-lang.org/?gist=f749f38540242c143f2e4c41e2f1625c&amp;version=nightly&amp;mode=debug&amp;edition=2018\" target=\"_blank\" title=\"https://play.rust-lang.org/?gist=f749f38540242c143f2e4c41e2f1625c&amp;version=nightly&amp;mode=debug&amp;edition=2018\">https://play.rust-lang.org/?gist=f749f38540242c143f2e4c41e2f1625c&amp;version=nightly&amp;mode=debug&amp;edition=2018</a></p>\n<div class=\"codehilite\"><pre><span></span>error: import from `log` is ambiguous\n --&gt; src/main.rs:3:5\n  |\n3 | use log;\n  |     ^^^\n  |     |\n  |     could refer to external crate `::log`\n  |     could also refer to `self::log`\n  |\n  = help: write `::log` or `self::log` explicitly instead\n  = note: relative `use` paths enabled by `#![feature(uniform_paths)]`\n</pre></div>",
        "id": 132200550,
        "sender_full_name": "Josh Huber",
        "timestamp": 1534368187
    },
    {
        "content": "<p>after changing to <code>use self::log;</code>:</p>\n<div class=\"codehilite\"><pre><span></span>error[E0432]: unresolved import `self::log`\n --&gt; src/main.rs:3:5\n  |\n3 | use self::log;\n  |     ^^^^^^^^^ no `log` in the root\n</pre></div>\n\n\n<p>:)</p>",
        "id": 132200620,
        "sender_full_name": "Josh Huber",
        "timestamp": 1534368277
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120512\">@wootsuit</span> Yes, if there's problems or inconsistencies please do file bugs</p>",
        "id": 132201893,
        "sender_full_name": "simulacrum",
        "timestamp": 1534370012
    },
    {
        "content": "<p>Ok, I will! Thanks!</p>",
        "id": 132202117,
        "sender_full_name": "Josh Huber",
        "timestamp": 1534370292
    },
    {
        "content": "<p>Ok, makes sense now (thanks @eddyb :), and still surprising to me! Turns out, it's that the <code>log</code> crate has a <code>log</code> name exported, so it's the act of using  <code>log</code>, or even <code>log::log</code> that's creating the ambiguity!  <a href=\"https://github.com/rust-lang/rust/issues/53408\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53408\">https://github.com/rust-lang/rust/issues/53408</a></p>",
        "id": 132204304,
        "sender_full_name": "Josh Huber",
        "timestamp": 1534372857
    },
    {
        "content": "<p>oh sorry I didn't see this here (you need to write @eddyb <em>and</em> press enter to let it complete to <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> - only the latter notifies me)</p>",
        "id": 132207139,
        "sender_full_name": "eddyb",
        "timestamp": 1534376802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120512\">@uberjay</span> ^^</p>",
        "id": 132207155,
        "sender_full_name": "eddyb",
        "timestamp": 1534376844
    },
    {
        "content": "<p>Ah, I didn’t realize! Thanks, again!</p>",
        "id": 132209882,
        "sender_full_name": "Josh Huber",
        "timestamp": 1534381193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120512\">@uberjay</span> fix is up! <a href=\"https://github.com/rust-lang/rust/pull/53427\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53427\">https://github.com/rust-lang/rust/pull/53427</a></p>",
        "id": 132239408,
        "sender_full_name": "eddyb",
        "timestamp": 1534425802
    },
    {
        "content": "<p>So fast! I just tried it out (yes I am recreationally building the compiler :), and it seems to work well! <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 132248855,
        "sender_full_name": "Josh Huber",
        "timestamp": 1534435277
    },
    {
        "content": "<p>Update: nightly now includes these Rust 2018 changes:</p>\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust/pull/53427\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53427\">#53427 rustc_resolve: overhaul <code>#![feature(uniform_paths)]</code> error reporting.</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/53347\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53347\">#53347 rustc_resolve: don't allow paths starting with <code>::crate</code>.</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/pull/53413\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/53413\">#53413 Warn that <code>#![feature(rust_2018_preview)]</code> is implied when the edition is set to Rust 2018.</a></li>\n</ul>",
        "id": 132344814,
        "sender_full_name": "eddyb",
        "timestamp": 1534569616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120512\">@uberjay</span> so you should be able to use nightly :D</p>",
        "id": 132344825,
        "sender_full_name": "eddyb",
        "timestamp": 1534569637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> ugh, I just realized <code>pub use crate_name;</code> doesn't work with uniform_paths and that seems a bit bad</p>",
        "id": 132408233,
        "sender_full_name": "eddyb",
        "timestamp": 1534689737
    },
    {
        "content": "<p>yeah, that is what I was worried about</p>",
        "id": 132530272,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534872640
    },
    {
        "content": "<p>Part of me wants to say that you shouldn't be doing that anyway because it's better to depend directly, in most cases.</p>\n<p>This should work though, right? So there is <em>a</em> replacement:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">crate_name</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span>::<span class=\"n\">crate_name</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 132544565,
        "sender_full_name": "simulacrum",
        "timestamp": 1534889305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <code>pub use ::crate_name</code> also works</p>",
        "id": 132545844,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534891324
    },
    {
        "content": "<p>it's just awkward</p>",
        "id": 132545849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534891326
    },
    {
        "content": "<p>not.. too bad, though; I'd sort of presume that sort of thing is fairly rare</p>",
        "id": 132545852,
        "sender_full_name": "simulacrum",
        "timestamp": 1534891348
    },
    {
        "content": "<p>I wonder how difficult it would be to get statistics</p>",
        "id": 132545854,
        "sender_full_name": "simulacrum",
        "timestamp": 1534891358
    },
    {
        "content": "<p>presumably</p>",
        "id": 132545857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534891367
    },
    {
        "content": "<p>it's a bit annoying because it's a \"false ambiguity\", in a way</p>",
        "id": 132545861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534891379
    },
    {
        "content": "<p>sure, yeah -- the problem is that crate_name is already imported, right?</p>",
        "id": 132545869,
        "sender_full_name": "simulacrum",
        "timestamp": 1534891401
    },
    {
        "content": "<p>In theory we could ignore that for crates? We'd need to special-case it I guess</p>",
        "id": 132545870,
        "sender_full_name": "simulacrum",
        "timestamp": 1534891417
    },
    {
        "content": "<p>I haven't really thought that deeply about it, tbh</p>",
        "id": 132545920,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534891471
    },
    {
        "content": "<p>feels like we should model it with prolog and let a slg solver loose on it :P</p>",
        "id": 132545922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534891482
    },
    {
        "content": "<p>/me only half joking</p>",
        "id": 132545924,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1534891488
    },
    {
        "content": "<blockquote>\n<p>the problem is that crate_name is already imported, right?</p>\n</blockquote>\n<p>That's implementation details leaking, not a fundamental restriction.</p>",
        "id": 132549348,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534896344
    },
    {
        "content": "<p>In theory I think the std prelude today is <code>use std::prelude::*</code> so I wonder if we can't do the same treatment here (redefining prelude imports is fine)</p>",
        "id": 132550621,
        "sender_full_name": "simulacrum",
        "timestamp": 1534898398
    },
    {
        "content": "<p>Yeah this is fine, it's just the ambiguity canary that's externally visible.</p>",
        "id": 132553547,
        "sender_full_name": "eddyb",
        "timestamp": 1534903207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Do you think we should \"just\" detect the case where the <code>use self::x;</code> canary detected the import itself, and omit the canary error? That would allow <code>use crate_name;</code> but not <code>use crate_name::{self};</code> (because of different ID)</p>",
        "id": 132553688,
        "sender_full_name": "eddyb",
        "timestamp": 1534903530
    },
    {
        "content": "<p>we can warn that it's unnecessary or whatever, if private, but at least it wouldn't  error</p>",
        "id": 132553731,
        "sender_full_name": "eddyb",
        "timestamp": 1534903585
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> Do you think we should \"just\" detect the case where the <code>use self::x;</code> canary detected the import itself, and omit the canary error? That would allow <code>use crate_name;</code> but not <code>use crate_name::{self};</code> (because of different ID)</p>\n</blockquote>\n<p>I think we can do that in short term.</p>",
        "id": 132553997,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1534904253
    },
    {
        "content": "<p>I kept trying to come up with nice ways of catching the relevant cases but allowing them seems easier than having any sort of coherent error (and the errors don't make sense if there's a re-export - for whatever reason)</p>",
        "id": 132554043,
        "sender_full_name": "eddyb",
        "timestamp": 1534904300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> what if we inject the canaries on Rust2015 with <code>#![feature(uniform_paths)]</code> and warn about writing <code>use ::crate_name</code> when they'd get an ambiguity error after they switch version? they don't create name conflicts anymore, and have their own error reporting, so on non-Rust2018 we can just emit a lint instead, <em>including</em> automatically applicable diagnostics, I <em>think</em> (in the case where you wrote <code>use name::...</code> and not <code>use {name:::</code> - wait, hang on, <code>use {::std::io}</code> works with uniform_paths lol, that's nice)</p>",
        "id": 132621648,
        "sender_full_name": "eddyb",
        "timestamp": 1535007182
    },
    {
        "content": "<p>we do need a way to know whether <code>rustfix</code> needs to add <code>::</code> or not, to refer to crates, so it's actually a must. and we have to fix <code>rustfmt</code> to not strip leading <code>::</code> if <code>uniform_paths</code> is enabled</p>\n<p>we could also add canaries for <code>::foo</code> and <code>self::foo</code> and basically check whether an ambiguity error <em>would</em> be emitted and just suggest removing the <code>::</code> / <code>self::</code> if they don't trigger, so you can just run <code>rustfix</code>!</p>",
        "id": 132622102,
        "sender_full_name": "eddyb",
        "timestamp": 1535008115
    },
    {
        "content": "<p>hang on, how did I not notice this before: because of how the canaries work now, we gather N of them, plus an implicit <code>external_prelude</code> one and then require that only one succeeds. if we make the <code>external_prelude</code> one an explicit <code>::name</code> canary, then we can actually have <code>uniform_paths</code> on Rust2015, modulo ambiguities from macro expansion shenanigans (but the canaries <em>would</em> catch those!).</p>\n<p>We just have to be careful to not do explicit <code>::name</code> in Rust2018 because that would forcefully load an <code>extern crate</code>.</p>\n<p>Also, maybe only <code>use ::foo;</code> should do the \"forceful\" thing, and <code>::foo</code> paths elsewhere. I know it's not consistent but it's closer to requiring <code>--extern foo</code> and having to put that in <code>Cargo.toml</code>. <em>although</em>, we <em>could just</em> implement the <code>Cargo.toml</code> thing <em>now</em>. does <code>rustfix</code> know how to edit <code>Cargo.toml</code>? Because that <em>would be</em> grand :D</p>",
        "id": 132622238,
        "sender_full_name": "eddyb",
        "timestamp": 1535008425
    },
    {
        "content": "<p>awww just saw <a href=\"https://github.com/rust-lang/rust/issues/53130#issuecomment-415217754\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/53130#issuecomment-415217754\">https://github.com/rust-lang/rust/issues/53130#issuecomment-415217754</a></p>",
        "id": 132622404,
        "sender_full_name": "eddyb",
        "timestamp": 1535008689
    }
]