[
    {
        "content": "<p>Hi. I’m implementing <a href=\"https://github.com/rust-lang/rfcs/pull/2580\">https://github.com/rust-lang/rfcs/pull/2580</a> which involves <code>align_of</code> and <code>size_of</code> methods on <code>DynMetadata</code>, a vtable pointer for trait objects, without a data pointer. I could add two intrinsics similar to <code>align_of_val</code> and <code>size_of_val</code>, but the only thing they’d apparently do is access fields at fixed offsets. Having a libcore-private <code>#[repr(C)]</code> struct that has the expected layout prefix of vtables seems to work and looks much simpler: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=45db553cde7c07e4322ede1f6e75f939\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=45db553cde7c07e4322ede1f6e75f939</a>. What do you think of this strategy?</p>",
        "id": 222554913,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1610530421
    },
    {
        "content": "<p>We also have <a href=\"https://github.com/rust-lang/rust/blob/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library/core/src/ptr/mod.rs#L223-L234\">https://github.com/rust-lang/rust/blob/9f3998b4aa9d0eea3249fdd48b8b719185673d16/library/core/src/ptr/mod.rs#L223-L234</a> which hard-codes the layout of slices. We may just as well have an equivalent for trait objects.</p>",
        "id": 222564885,
        "sender_full_name": "bjorn3",
        "timestamp": 1610536276
    },
    {
        "content": "<p>Yes that’s what I already do in my upcoming PR for decomposing wide pointers</p>",
        "id": 222617931,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1610559603
    },
    {
        "content": "<p>This gives access to the vtable pointer. Here I’m asking about accessing fields of the vtable, behind that pointer</p>",
        "id": 222618020,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1610559638
    },
    {
        "content": "<p>A <code>#[repr(C)]</code> struct makes sense here.</p>",
        "id": 222618316,
        "sender_full_name": "bjorn3",
        "timestamp": 1610559756
    }
]