[
    {
        "content": "<p>Has anybody looked into what exactly causes us to use <em>so much disk space</em> when building rustc?</p>\n<div class=\"codehilite\"><pre><span></span>&gt; du -h -s rust-*\n25G     rust-0\n12G     rust-1\n29G     rust-2\n57G     rust-3\n46G     rust-4\n21G     rust-5\n15G     rust-6\n</pre></div>",
        "id": 191661450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078371
    },
    {
        "content": "<p>it seems a bit wild that I regularly run out of disk space on my linux desktop, even though it is quite old and the disk admittedly \"only\" 512GB or something</p>",
        "id": 191661481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078395
    },
    {
        "content": "<p>/me tempted to talk about the days of floppy disks and \"kids today not appreciated what they have\"</p>",
        "id": 191661544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078437
    },
    {
        "content": "<p>Is that with debuginfo enabled? That tends to take a lot of space</p>",
        "id": 191661629,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1585078470
    },
    {
        "content": "<p>I don't <em>think</em> so, but I should check</p>",
        "id": 191661638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078481
    },
    {
        "content": "<p>in some cases it is doing an incremental build</p>",
        "id": 191661654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078490
    },
    {
        "content": "<p>it might be debuginfo-lines or something</p>",
        "id": 191661663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078496
    },
    {
        "content": "<p>ok I guess <code>debuginfo-level=1</code></p>",
        "id": 191661685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078511
    },
    {
        "content": "<p>Ah, line tables only still generates heaps of type descriptions according to <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 191661754,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1585078562
    },
    {
        "content": "<p>hmm ok</p>",
        "id": 191661809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078572
    },
    {
        "content": "<p>interesting</p>",
        "id": 191661840,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078587
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/69074\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69074\">https://github.com/rust-lang/rust/issues/69074</a></p>",
        "id": 191661889,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1585078611
    },
    {
        "content": "<p>I guess I could do some experiments and turn off debuginfo</p>",
        "id": 191661951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078656
    },
    {
        "content": "<p>though that'd be pretty useless</p>",
        "id": 191661960,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078661
    },
    {
        "content": "<p>from an actual \"debug the compiler\" POV</p>",
        "id": 191661963,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078666
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/191661951\" title=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/191661951\">said</a>:</p>\n<blockquote>\n<p>I guess I could do some experiments and turn off debuginfo</p>\n</blockquote>\n<p>in order to verify the hypothesis, I mean</p>",
        "id": 191662020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585078683
    },
    {
        "content": "<p>Most of the space in my experience is stuff from old builds - if I delete a directory and re-build, it isn't <em>that</em> large. It's when I've been rebuilding in a directory for a while that there's a build-up.</p>",
        "id": 191662123,
        "sender_full_name": "davidtwco",
        "timestamp": 1585078758
    },
    {
        "content": "<p>I was wondering about that, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span></p>",
        "id": 191662612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079063
    },
    {
        "content": "<p>if we were leaking space</p>",
        "id": 191662634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585079079
    },
    {
        "content": "<p>Cargo doesn't cleanup artifacts compiled using an older compiler, so every time there is a bootstrap bump, disk usage will increase if rustbuild doesn't remove all target dirs.</p>",
        "id": 191662845,
        "sender_full_name": "bjorn3",
        "timestamp": 1585079200
    },
    {
        "content": "<p>(and we indeed do not)</p>",
        "id": 191662961,
        "sender_full_name": "simulacrum",
        "timestamp": 1585079279
    },
    {
        "content": "<p>mostly because people complain when we delete their caches, and we don't know if it's really old (really same reason why cargo doesn't in some sense)</p>",
        "id": 191663035,
        "sender_full_name": "simulacrum",
        "timestamp": 1585079309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> FWIW <a href=\"https://github.com/rust-lang/rust/issues/69080\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69080\">#69080</a> landed</p>",
        "id": 191663136,
        "sender_full_name": "eddyb",
        "timestamp": 1585079388
    },
    {
        "content": "<p>ah, nice</p>",
        "id": 191663225,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1585079407
    },
    {
        "content": "<blockquote>\n<p>went from just over 1GiB (1019MiB) down to 402MiB</p>\n</blockquote>",
        "id": 191663236,
        "sender_full_name": "eddyb",
        "timestamp": 1585079410
    },
    {
        "content": "<p>(this is one file specifically :P)</p>",
        "id": 191663249,
        "sender_full_name": "eddyb",
        "timestamp": 1585079420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/191663035\" title=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/191663035\">said</a>:</p>\n<blockquote>\n<p>mostly because people complain when we delete their caches, and we don't know if it's really old (really same reason why cargo doesn't in some sense)</p>\n</blockquote>\n<p>I'm unconvinced by this argument :P</p>",
        "id": 191803663,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166510
    },
    {
        "content": "<p>is the idea that people might rebase their working directory to some older branch, basically?</p>",
        "id": 191803735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166531
    },
    {
        "content": "<p>it'd be nice to at least have an option in config.toml</p>",
        "id": 191803748,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/191803748\" title=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/191803748\">said</a>:</p>\n<blockquote>\n<p>it'd be nice to at least have an option in config.toml</p>\n</blockquote>\n<p>or a <code>./x.py give-me-my-disk-space-back</code> command that could be run when it's a issue.</p>",
        "id": 191804139,
        "sender_full_name": "davidtwco",
        "timestamp": 1585166748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm also unconvinced -- but I would strongly prefer that the disk space clearing on compiler change was implemented in cargo, not rustbuild</p>",
        "id": 191804340,
        "sender_full_name": "simulacrum",
        "timestamp": 1585166849
    },
    {
        "content": "<p>i.e. if we feel that it should have different behavior, then that seems like a change for cargo</p>",
        "id": 191804381,
        "sender_full_name": "simulacrum",
        "timestamp": 1585166872
    },
    {
        "content": "<p>it seems equally important there</p>",
        "id": 191804436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166883
    },
    {
        "content": "<p>I agree</p>",
        "id": 191804441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166886
    },
    {
        "content": "<p>like, if we expect people to keep up with our releases, we're ..</p>",
        "id": 191804451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166895
    },
    {
        "content": "<p>it feels like we can just have an LRU cache</p>",
        "id": 191804454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166899
    },
    {
        "content": "<p>something like \"keep the last N toolchains\"</p>",
        "id": 191804466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166905
    },
    {
        "content": "<p>and people can configure N</p>",
        "id": 191804490,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166916
    },
    {
        "content": "<p>maybe it is 3 by default or something, idk</p>",
        "id": 191804509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166933
    },
    {
        "content": "<p>Sure. I think most people would be happy if we even just said N=1</p>",
        "id": 191804511,
        "sender_full_name": "simulacrum",
        "timestamp": 1585166934
    },
    {
        "content": "<p>yes, I suspect so</p>",
        "id": 191804521,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166939
    },
    {
        "content": "<p>it's got to be the minority that are pinging around between toolchains</p>",
        "id": 191804535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166949
    },
    {
        "content": "<p>but I can imagine that people want stable/nightly</p>",
        "id": 191804541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166954
    },
    {
        "content": "<p>at minimum</p>",
        "id": 191804546,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166956
    },
    {
        "content": "<p>(or perhaps N=1 but within a \"channel\" i.e. you could share beta/stable/nightly)</p>",
        "id": 191804550,
        "sender_full_name": "simulacrum",
        "timestamp": 1585166957
    },
    {
        "content": "<p>so maybe N=2 :)</p>",
        "id": 191804552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166957
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/191804550\" title=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/191804550\">said</a>:</p>\n<blockquote>\n<p>(or perhaps N=1 but within a \"channel\" i.e. you could share beta/stable/nightly)</p>\n</blockquote>\n<p>yeah, that</p>",
        "id": 191804565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585166962
    },
    {
        "content": "<p>N=2 seems eminently reasonable</p>",
        "id": 191805412,
        "sender_full_name": "centril",
        "timestamp": 1585167393
    },
    {
        "content": "<p>How about \"keep everything that corresponds to a toolchain still available by rustup or system path\"?</p>",
        "id": 192041050,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585325547
    },
    {
        "content": "<p>If you no longer have the toolchain you're unlikely to want the cache.</p>",
        "id": 192041096,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1585325570
    },
    {
        "content": "<p>I imagine that would be quite costly for cargo -- you'd need to run all possible toolchains on each \"run\"</p>",
        "id": 192052712,
        "sender_full_name": "simulacrum",
        "timestamp": 1585330156
    },
    {
        "content": "<p>otherwise e.g. nightly is never going to get cleared out because it's always at the same on-disk location</p>",
        "id": 192052740,
        "sender_full_name": "simulacrum",
        "timestamp": 1585330173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/192052712\" title=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/192052712\">said</a>:</p>\n<blockquote>\n<p>I imagine that would be quite costly for cargo -- you'd need to run all possible toolchains on each \"run\"</p>\n</blockquote>\n<p>by \"run all possible toolchains\", do you mean invoke them with <code>--version</code> to observe what version of the compiler they correspond to (which sounds lightweight to me, at least for <code>cargo</code>'s purposes)?</p>",
        "id": 192057574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585332420
    },
    {
        "content": "<p>or do you mean actually feed the crate source into each of the toolchain, which does sound absurdly expensive.</p>",
        "id": 192057599,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585332439
    },
    {
        "content": "<p>no, I mean just --version</p>",
        "id": 192060124,
        "sender_full_name": "simulacrum",
        "timestamp": 1585333525
    },
    {
        "content": "<p>that takes around 100ms -- very noticeable on no-op builds</p>",
        "id": 192060154,
        "sender_full_name": "simulacrum",
        "timestamp": 1585333544
    },
    {
        "content": "<p>cargo does a lot to try to avoid that</p>",
        "id": 192060164,
        "sender_full_name": "simulacrum",
        "timestamp": 1585333549
    },
    {
        "content": "<p>well okay locally I'm seeing 25ms, but that's still quite costly</p>",
        "id": 192060493,
        "sender_full_name": "simulacrum",
        "timestamp": 1585333702
    },
    {
        "content": "<p>/me wonders if <code>rustup</code> could keep this info in a separate file, locally</p>",
        "id": 192061032,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585333975
    },
    {
        "content": "<p>then you'd just pay to read from one file, rather than invoking a bunch of commands.</p>",
        "id": 192061062,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585333992
    },
    {
        "content": "<p>(but it would also be an extra source of complexity and potential inconsistency within <code>rustup</code>...)</p>",
        "id": 192061099,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585334014
    },
    {
        "content": "<p>yeah, I guess, though it wouldn't help in rustbuild (where we constantly swap out e.g. stage1 compilers)</p>",
        "id": 192063179,
        "sender_full_name": "simulacrum",
        "timestamp": 1585334873
    },
    {
        "content": "<p>and relatively frequently -- every 6 weeks at least -- get a new bootstrap compiler</p>",
        "id": 192063262,
        "sender_full_name": "simulacrum",
        "timestamp": 1585334893
    },
    {
        "content": "<p>Personally, I would be fine with some sort of <code>cargo clean --cache</code> that just does whatever the expensive thing and agressively clears out things it doesn't think we will need later</p>",
        "id": 192077762,
        "sender_full_name": "mark-i-m",
        "timestamp": 1585342137
    },
    {
        "content": "<p>We have an issue for this, and I sketched a solution here: <a href=\"https://github.com/rust-lang/cargo/issues/5026#issuecomment-444967785\" title=\"https://github.com/rust-lang/cargo/issues/5026#issuecomment-444967785\">https://github.com/rust-lang/cargo/issues/5026#issuecomment-444967785</a>.  The idea is to use a single hash for the \"nightly\" channel (and \"beta\"), so there wouldn't need to be any cleanup when you switch nightly versions, and Cargo would keep the full version in the fingerprint so it would get recompiled when you get a new nightly.  I was concerned mostly that this would disrupt some workflows, but I can't think of any specific problems (not sure if people swap between different nightlies).  I could try it out if you'd like (maybe a -Z flag)?  I also wasn't sure if rustc's incremental files somehow know which version they are for, or if that directory would also grow without bounds. (maybe one of the smart people here can answer that)</p>",
        "id": 192133885,
        "sender_full_name": "Eric Huss",
        "timestamp": 1585417521
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> IIRC, I've been historically told that incremental is not guaranteed to work, but should be able to auto-detect itself being stale. I imagine if it's just a -Z flag then I think we can shake out problems as we go.</p>",
        "id": 192142900,
        "sender_full_name": "simulacrum",
        "timestamp": 1585431832
    },
    {
        "content": "<p>I <em>believe</em> the toolchain info is in the hash</p>",
        "id": 192323509,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585606033
    },
    {
        "content": "<p>but if not, we ought to be able to fix that</p>",
        "id": 192323514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1585606037
    },
    {
        "content": "<p>off topic ish, but as newish person contributing to rustc, it wasn't super fun when I ran out of disk space and my computer stopped working. Incremental builds seemed to massively magnify the issue -- it's called out in forge, but I at least didn't expect \"a lot of disk space\" to be &gt;35GB</p>",
        "id": 192330766,
        "sender_full_name": "Russell Cohen",
        "timestamp": 1585611714
    },
    {
        "content": "<p>could be worth calling it out louder in the docs, or even having x.py monitor how much disk space you've used and warn / abort if you're running out</p>",
        "id": 192330811,
        "sender_full_name": "Russell Cohen",
        "timestamp": 1585611741
    },
    {
        "content": "<p>on Linux at least, my desktop environment does that, and I think recent Windows versions have started doing it too</p>",
        "id": 192345031,
        "sender_full_name": "eddyb",
        "timestamp": 1585629993
    },
    {
        "content": "<p>it's worse on servers, and I have had that happen</p>",
        "id": 192345037,
        "sender_full_name": "eddyb",
        "timestamp": 1585630008
    },
    {
        "content": "<p>my non-incremental build dirs are 4GB</p>",
        "id": 192345104,
        "sender_full_name": "eddyb",
        "timestamp": 1585630098
    },
    {
        "content": "<p>my incremental ones... lol the worst one is 76GB</p>",
        "id": 192345130,
        "sender_full_name": "eddyb",
        "timestamp": 1585630154
    },
    {
        "content": "<p>oh wait no there's another difference: the non-incremental ones also don't have debuginfo or debug-assertions (they're basically nightly-like)</p>",
        "id": 192345215,
        "sender_full_name": "eddyb",
        "timestamp": 1585630254
    },
    {
        "content": "<p>hmm debuginfo+debug-assertions build seems to have 20GB in stage0-rustc <em>outside</em> of the incremental dir</p>",
        "id": 192345294,
        "sender_full_name": "eddyb",
        "timestamp": 1585630334
    },
    {
        "content": "<p>it's gonna be a while before <a href=\"https://github.com/rust-lang/rust/pull/69080\" title=\"https://github.com/rust-lang/rust/pull/69080\">https://github.com/rust-lang/rust/pull/69080</a> reaches beta</p>",
        "id": 192345332,
        "sender_full_name": "eddyb",
        "timestamp": 1585630394
    },
    {
        "content": "<p>kind of sad, I should've gotten it merged when I opened it</p>",
        "id": 192345340,
        "sender_full_name": "eddyb",
        "timestamp": 1585630405
    },
    {
        "content": "<p>hmm looking in the incremental dir, I have up to 4 copies for some crates</p>",
        "id": 192345589,
        "sender_full_name": "eddyb",
        "timestamp": 1585630784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> oh this is that silly thing where incremental keeps a duplicate of the <code>.o</code> files in the <code>rlib</code>...</p>",
        "id": 192345724,
        "sender_full_name": "eddyb",
        "timestamp": 1585630959
    },
    {
        "content": "<p>we should've stopped doing that years ago</p>",
        "id": 192345727,
        "sender_full_name": "eddyb",
        "timestamp": 1585630973
    },
    {
        "content": "<p>and here I was thinking there was 1GB of <code>librustc_middle</code> and 1GB of <code>librustc_mir</code> cached query data..</p>",
        "id": 192345734,
        "sender_full_name": "eddyb",
        "timestamp": 1585631007
    },
    {
        "content": "<p><code>rust-1/build/x86_64-unknown-linux-gnu/stage0-rustc/x86_64-unknown-linux-gnu/release/incremental/rustc_middle-vbnouhhfsdso/s-fm1o95587b-13ujuvc-tq0tgxcz60na/*.bin</code>:</p>\n<div class=\"codehilite\"><pre><span></span>134M    dep-graph.bin\n116M    query-cache.bin\n49K     thin-lto-past-imports.bin\n25K     work-products.bin\n</pre></div>",
        "id": 192345795,
        "sender_full_name": "eddyb",
        "timestamp": 1585631102
    },
    {
        "content": "<p>so only about 1/5 of the directory is actually not duplicated</p>",
        "id": 192345863,
        "sender_full_name": "eddyb",
        "timestamp": 1585631186
    },
    {
        "content": "<p>across the entire incremental dir, which has up to 4 stale copies by the looks of it, only 4.5G of 29G are .bin files</p>",
        "id": 192346003,
        "sender_full_name": "eddyb",
        "timestamp": 1585631426
    },
    {
        "content": "<p>there's also <a href=\"https://github.com/rust-lang/rust/issues/66961\" title=\"https://github.com/rust-lang/rust/issues/66961\">https://github.com/rust-lang/rust/issues/66961</a></p>",
        "id": 192346165,
        "sender_full_name": "eddyb",
        "timestamp": 1585631717
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/192345332\" title=\"#narrow/stream/131828-t-compiler/topic/excessive.20disk.20usage/near/192345332\">said</a>:</p>\n<blockquote>\n<p>it's gonna be a while before <a href=\"https://github.com/rust-lang/rust/pull/69080\" title=\"https://github.com/rust-lang/rust/pull/69080\">https://github.com/rust-lang/rust/pull/69080</a> reaches beta</p>\n</blockquote>\n<p>maybe we should consider backporting it...</p>",
        "id": 192389469,
        "sender_full_name": "pnkfelix",
        "timestamp": 1585661547
    },
    {
        "content": "<p>feel free to nominate it, I guess</p>",
        "id": 192393420,
        "sender_full_name": "eddyb",
        "timestamp": 1585663231
    },
    {
        "content": "<p>Just ran into this again, btw:</p>\n<div class=\"codehilite\"><pre><span></span>86G     ./rust\n91G     ./rust2\n75G     ./rust3\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>$ du -hsc ./build/*\n7.2G    ./build/bootstrap\n2.0G    ./build/cache\n6.4M    ./build/tmp\n188K    ./build/tmp-dry-run\n812K    ./build/tmp-rustbuild-tests\n66G     ./build/x86_64-unknown-linux-gnu\n75G     total\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>$ du -hsc ./build/x86_64-unknown-linux-gnu/*\n4.0K    ./build/x86_64-unknown-linux-gnu/compiler-doc\n225M    ./build/x86_64-unknown-linux-gnu/crate-docs\n112M    ./build/x86_64-unknown-linux-gnu/doc\n1.4G    ./build/x86_64-unknown-linux-gnu/llvm\n1.6M    ./build/x86_64-unknown-linux-gnu/md-doc\n44K     ./build/x86_64-unknown-linux-gnu/native\n377M    ./build/x86_64-unknown-linux-gnu/stage0\n1.9G    ./build/x86_64-unknown-linux-gnu/stage0-bootstrap-tools\n12G     ./build/x86_64-unknown-linux-gnu/stage0-rustc\n214M    ./build/x86_64-unknown-linux-gnu/stage0-std\n145M    ./build/x86_64-unknown-linux-gnu/stage0-sysroot\n2.3G    ./build/x86_64-unknown-linux-gnu/stage0-tools\n4.0K    ./build/x86_64-unknown-linux-gnu/stage0-tools-bin\n5.2G    ./build/x86_64-unknown-linux-gnu/stage1\n29G     ./build/x86_64-unknown-linux-gnu/stage1-rustc\n70M     ./build/x86_64-unknown-linux-gnu/stage1-std\n2.0G    ./build/x86_64-unknown-linux-gnu/stage1-tools\n145M    ./build/x86_64-unknown-linux-gnu/stage2\n61M     ./build/x86_64-unknown-linux-gnu/stage2-std\n600M    ./build/x86_64-unknown-linux-gnu/stage2-tools\n4.0K    ./build/x86_64-unknown-linux-gnu/stage2-tools-bin\n11G     ./build/x86_64-unknown-linux-gnu/test\n66G     total\n</pre></div>",
        "id": 192556876,
        "sender_full_name": "mark-i-m",
        "timestamp": 1585759386
    },
    {
        "content": "<p>I'm glad to provide more data if it's helpful</p>",
        "id": 192556895,
        "sender_full_name": "mark-i-m",
        "timestamp": 1585759399
    },
    {
        "content": "<p>that's similar to what I'm seeing</p>",
        "id": 192556960,
        "sender_full_name": "eddyb",
        "timestamp": 1585759439
    },
    {
        "content": "<p>if you nuke non-LLVM dirs you can recover some of the space usage</p>",
        "id": 192557046,
        "sender_full_name": "eddyb",
        "timestamp": 1585759459
    },
    {
        "content": "<p>I usually use <code>rm -rf build/*/stage*</code> for this</p>",
        "id": 192557088,
        "sender_full_name": "eddyb",
        "timestamp": 1585759478
    },
    {
        "content": "<p>almost forgot about the duplication between incremental and regular artifacts, opened <a href=\"https://github.com/rust-lang/rust/issues/70823\" title=\"https://github.com/rust-lang/rust/issues/70823\">#70823</a> just now</p>",
        "id": 192974442,
        "sender_full_name": "eddyb",
        "timestamp": 1586115599
    },
    {
        "content": "<p>I posted <a href=\"https://github.com/rust-lang/cargo/pull/8073\" title=\"https://github.com/rust-lang/cargo/pull/8073\">https://github.com/rust-lang/cargo/pull/8073</a> to use the same filenames between nightly versions.  From my tests, I think it should be safe, though it can always be reverted or put behind a config option if it is a problem.  Ofc this won't help rustc development until the next release.</p>",
        "id": 192979193,
        "sender_full_name": "Eric Huss",
        "timestamp": 1586122221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> will Cargo still rebuild artifacts correctly?</p>",
        "id": 192979280,
        "sender_full_name": "eddyb",
        "timestamp": 1586122332
    },
    {
        "content": "<p>i.e. does it still use the full version <em>elsewhere</em>?</p>",
        "id": 192979285,
        "sender_full_name": "eddyb",
        "timestamp": 1586122340
    },
    {
        "content": "<p>Yes, the full version is in the fingerprint.</p>",
        "id": 192979289,
        "sender_full_name": "Eric Huss",
        "timestamp": 1586122349
    },
    {
        "content": "<p>does your PR passes the same <code>-C metadata</code> for all nightlies?</p>",
        "id": 192979293,
        "sender_full_name": "eddyb",
        "timestamp": 1586122365
    },
    {
        "content": "<p>yes</p>",
        "id": 192979296,
        "sender_full_name": "Eric Huss",
        "timestamp": 1586122379
    },
    {
        "content": "<p>because uhhh this might fix a perf nightmare in a simpler way, no <code>-Z build-std</code> hacks</p>",
        "id": 192979300,
        "sender_full_name": "eddyb",
        "timestamp": 1586122385
    },
    {
        "content": "<p>what is that?</p>",
        "id": 192979305,
        "sender_full_name": "Eric Huss",
        "timestamp": 1586122408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> <a href=\"https://github.com/rust-lang/rust/issues/69060#issuecomment-604928032\" title=\"https://github.com/rust-lang/rust/issues/69060#issuecomment-604928032\">https://github.com/rust-lang/rust/issues/69060#issuecomment-604928032</a></p>",
        "id": 192979313,
        "sender_full_name": "eddyb",
        "timestamp": 1586122423
    },
    {
        "content": "<p>the compiler is non-deterministic in <code>-C metadata</code> content</p>",
        "id": 192979321,
        "sender_full_name": "eddyb",
        "timestamp": 1586122434
    },
    {
        "content": "<p>because crate hashes are sort of the \"roots\" of all hashes and they are used to sort things in incrementally-stable ways</p>",
        "id": 192979363,
        "sender_full_name": "eddyb",
        "timestamp": 1586122456
    },
    {
        "content": "<p>so when we compare two compilers, the simple fact <em>that they accurately report their versions</em> is enough to cause, through Cargo, up to 3% or so noise on syn-opt, and a bit less on other crates</p>",
        "id": 192979378,
        "sender_full_name": "eddyb",
        "timestamp": 1586122517
    },
    {
        "content": "<p>results are much more stable if the compiler is built with the <code>dev</code> instead of <code>nightly</code> channel</p>",
        "id": 192979391,
        "sender_full_name": "eddyb",
        "timestamp": 1586122548
    },
    {
        "content": "<p>Hm.  Well let me know if it causes a problem.  I'm not sure if it is relevant, but I also noticed that the incremental cache fingerprint includes the full release version (with git hash).  I'm not sure if that's relevant to what you're talking about, but could be part of why <code>-dev</code> works better (because it doesn't have a git hash).</p>",
        "id": 192979626,
        "sender_full_name": "Eric Huss",
        "timestamp": 1586122863
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> nah we know it's <code>-C metadata</code></p>",
        "id": 192979695,
        "sender_full_name": "eddyb",
        "timestamp": 1586122952
    },
    {
        "content": "<p>without it there's no change in hashes inside the compiler and no order differences</p>",
        "id": 192979705,
        "sender_full_name": "eddyb",
        "timestamp": 1586122980
    },
    {
        "content": "<p>the version the compiler knows doesn't flow into any hashes AFAIK, it's just used for sanity checks</p>",
        "id": 192979789,
        "sender_full_name": "eddyb",
        "timestamp": 1586123134
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> anyway whenever we start shipping a Cargo with your changes, <a href=\"http://perf.rust-lang.org\" title=\"http://perf.rust-lang.org\">perf.rust-lang.org</a> should stop being so noisy</p>",
        "id": 192980015,
        "sender_full_name": "eddyb",
        "timestamp": 1586123441
    }
]