[
    {
        "content": "<p>Hi everyone! I'm totally new to the Rust compiler. I've just stumbled upon a bug with GAT (supposedly): <a href=\"https://github.com/rust-lang/rust/issues/88526\">https://github.com/rust-lang/rust/issues/88526</a><br>\nI'd be grateful if anyone could confirm that it's really a bug and what kind of bug that is. I assume that the thing that I was trying to do wasn't correct either, so it might be a diagnostic issue as well. I'd also be happy to try to fix that, so I'll appreciate any explanations of what is wrong exactly and directions to the source code where I should start looking.</p>\n<p>Meanwhile, I'm finishing reading through <a href=\"https://rustc-dev-guide.rust-lang.org/getting-started.html\">https://rustc-dev-guide.rust-lang.org/getting-started.html</a>, after that I'll look at random PRs related to GAT, to get an idea of where the related code might be. Thanks!</p>",
        "id": 251358285,
        "sender_full_name": "mvlabat",
        "timestamp": 1630403389
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"211913\">@mvlabat</span>! So, <a href=\"https://github.com/rust-lang/rust/issues/87735\">#87735</a> is related. This isn't necessarily a bug as much as a  weird design quirk and bad diagnostics. The issue is that <code>'q</code> isn't constrained, so <code>I</code> is stopped being constrained. I think you can get around this by changing it to be <code>for&lt;'q&gt; A&lt;I&lt;'q&gt; = &amp;'q I&gt;</code>, but I realize if this is a minimization that might be difficult with more code.</p>",
        "id": 251371680,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630410752
    },
    {
        "content": "<p>I was talking to <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about this before, but I think we likely should revisit this. I'm wondering if we should be considering the GAT substs as \"inputs\" when checking if a projection is constrained</p>",
        "id": 251371996,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630410918
    },
    {
        "content": "<p>If you're interested in helping out, maybe the most helpful \"correct\" thing that can be done would be to add some diagnostics to point to <code>'q</code> as being the problem and maybe suggesting a <code>for&lt;'q&gt;</code> if possible. If you need some help getting started, feel free to message me or head over to <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a></p>",
        "id": 251372488,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630411152
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span>! Thanks for the response. Btw, is passing a generic parameter into a GAT any different in terms of constraints logic from assigning it to an associated type? For example,</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;&#39;a, G&gt; ...\nwhere G: SomeTrait&lt;Item&lt;&#39;a&gt;=()&gt;\n</code></pre></div>\n<p>vs</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;G, T&gt; ...\nwhere G: SomeTrait&lt;Item=T&gt;\n</code></pre></div>\n<p>Or are both of these cases related to the design quirk that you've mentioned? I'm curious whether it would make sense to treat them differently.</p>",
        "id": 251440875,
        "sender_full_name": "mvlabat",
        "timestamp": 1630437182
    },
    {
        "content": "<p>Right, so in</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">G</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">G</span>: <span class=\"nc\">SomeTrait</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p><code>T</code> is constrained in <code>G</code> is (because the substs of the projection is <code>[G]</code>)<br>\nIf you had</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">G</span><span class=\"p\">,</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">G</span>: <span class=\"nc\">SomeTrait</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;=</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>then <code>T</code> is only constrained if <em>both</em> <code>'a</code> and <code>G</code> are (because the substs are <code>[G, 'a]</code>)<br>\n(I'll have to find where this logic is later, but it's easy enough to find searching back from the emitted error)</p>",
        "id": 251441970,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630437599
    },
    {
        "content": "<p>So, in this, they are treated the same</p>",
        "id": 251442029,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630437606
    },
    {
        "content": "<p>But the idea behind this logic is essentially that we want to make sure that each impl only applies once for each self type for each trait</p>",
        "id": 251442856,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630437894
    },
    {
        "content": "<p>Now, with GATs, do we need to require that <code>'a</code> has to be constrained here?</p>",
        "id": 251443003,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630437942
    },
    {
        "content": "<p>I have to think about it a bit more, but the reason why I think the current rules aren't <em>exactly</em> correct is that when the GAT is constructed, in can be constructed with any <code>'a</code> (that satisfy the where clauses)</p>",
        "id": 251443302,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630438037
    },
    {
        "content": "<p>and they don't affect the impl picked</p>",
        "id": 251443332,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630438052
    },
    {
        "content": "<p>But I have yet to fully wrap my head around this. <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would be a good person to butt in here</p>",
        "id": 251443498,
        "sender_full_name": "Jack Huey",
        "timestamp": 1630438104
    },
    {
        "content": "<p>Oh, I didn't realize that <code>T</code> is constrained in the first example. Thanks for pointing that out</p>",
        "id": 251443682,
        "sender_full_name": "mvlabat",
        "timestamp": 1630438178
    },
    {
        "content": "<p>my comparison doesn't quite make sense then</p>",
        "id": 251443803,
        "sender_full_name": "mvlabat",
        "timestamp": 1630438209
    }
]