[
    {
        "content": "<p>Hey, out of curiosity, what IDE do you guys use? I'm currently using VSCode and it's being super slow to show the types of variables and stuff. Doesn't seem to work well for large repos. Any suggestions on a better IDE?</p>",
        "id": 197264784,
        "sender_full_name": "Rakshith Ravi",
        "timestamp": 1589284967
    },
    {
        "content": "<p>Have you tried out rust-analyzer? You're probably using RLS, right?</p>",
        "id": 197266254,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1589285828
    },
    {
        "content": "<p>Yeah, RLS</p>",
        "id": 197269492,
        "sender_full_name": "Rakshith Ravi",
        "timestamp": 1589287566
    },
    {
        "content": "<p>OMG rust-analyzer is so good!</p>",
        "id": 197270004,
        "sender_full_name": "Rakshith Ravi",
        "timestamp": 1589287843
    },
    {
        "content": "<p>Btw, the vscode rust plugin supports basic rust-analyzer as of today, apparently...</p>",
        "id": 197296206,
        "sender_full_name": "mark-i-m",
        "timestamp": 1589298383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"297754\">@Rakshith Ravi</span> if you're hacking on rustc, you can configure rust-analyzer to run <code>x.py check</code> to get the list of problems</p>",
        "id": 197315300,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589306796
    },
    {
        "content": "<p>I'm not sure how well documented that is</p>",
        "id": 197315317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589306803
    },
    {
        "content": "<p>you want to put</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;rust-analyzer.checkOnSave.overrideCommand&quot;: [\n        &quot;./x.py&quot;,\n        &quot;check&quot;,\n        &quot;--json-output&quot;\n    ],\n    &quot;editor.formatOnSave&quot;: true\n}\n</code></pre></div>\n\n\n<p>into <code>.vscode/settings.json</code></p>",
        "id": 197315417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589306851
    },
    {
        "content": "<p>I at least find that very convenient</p>",
        "id": 197315437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589306863
    },
    {
        "content": "<p>now if only I could get the formatter to use whatever random rustfmt <code>x.py fmt</code> does...</p>",
        "id": 197315458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589306875
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> is it possible to configure the rustfmt binary that is used by vscode rust plugin, btw?</p>",
        "id": 197315532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589306895
    },
    {
        "content": "<p>oh cool! I'll check that out. Thanks!</p>",
        "id": 197315647,
        "sender_full_name": "Rakshith Ravi",
        "timestamp": 1589306962
    },
    {
        "content": "<p>Thank u for that snippet <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, that's very useful!!</p>",
        "id": 197331540,
        "sender_full_name": "FÃ©lix Fischer",
        "timestamp": 1589314246
    },
    {
        "content": "<p>need to add that to rustc-dev-guide</p>",
        "id": 197337815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589316816
    },
    {
        "content": "<p>if one of you wants to make a PR, it would be most welcome (presuming it's not in there already...)</p>",
        "id": 197337842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589316828
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1380\">@WG-rustc-dev-guide</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 197337865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589316839
    },
    {
        "content": "<p>oh we were literally talking about this in a meeting with <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span></p>",
        "id": 197337980,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589316877
    },
    {
        "content": "<p>And I also created this issue: <a href=\"https://github.com/rust-lang/rustc-dev-guide/issues/703\">https://github.com/rust-lang/rustc-dev-guide/issues/703</a></p>",
        "id": 197338027,
        "sender_full_name": "mark-i-m",
        "timestamp": 1589316898
    },
    {
        "content": "<p>I think we want a getting started section in rustc-dev-guide part 1, which has some info on how to setup your environment, how to build rustc, how to run tests, how to setup editor, etc</p>",
        "id": 197338108,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589316957
    },
    {
        "content": "<p>Tying that into the \"so you want to do {x}\" documentation I've seen mentioned would be great as well. A lot of contributions do not need to build the compiler at all and the vast majority of contributions don't need a stage 2 compiler. Having specific workflows that make contributing as fast as possible would be excellent.</p>",
        "id": 197339101,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1589317398
    },
    {
        "content": "<p><del>btw</del></p>",
        "id": 197341122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589318390
    },
    {
        "content": "<p>Yup, it's possible to fully override rustfmt with this option: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/23cc6908a7d6547bddf779227e3e1d5c5912861e/editors/code/package.json#L251-L262\">https://github.com/rust-analyzer/rust-analyzer/blob/23cc6908a7d6547bddf779227e3e1d5c5912861e/editors/code/package.json#L251-L262</a></p>",
        "id": 197346349,
        "sender_full_name": "matklad",
        "timestamp": 1589321275
    },
    {
        "content": "<p><code>rust-analyzer.rustfmt.overrideCommand</code></p>",
        "id": 197346406,
        "sender_full_name": "matklad",
        "timestamp": 1589321295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/IDE/near/197315417\">said</a>:</p>\n<blockquote>\n<p>you want to put</p>\n<div class=\"codehilite\"><pre><span></span><code>{\n    &quot;rust-analyzer.checkOnSave.overrideCommand&quot;: [\n        &quot;./x.py&quot;,\n        &quot;check&quot;,\n        &quot;--json-output&quot;\n    ],\n    &quot;editor.formatOnSave&quot;: true\n}\n</code></pre></div>\n\n\n<p>into <code>.vscode/settings.json</code></p>\n</blockquote>\n<p>is someone doing something like this on vim?</p>",
        "id": 197348054,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589322329
    },
    {
        "content": "<p>I'm using coc, and placed a .vim/coc-settings.json with the following ...</p>",
        "id": 197348083,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589322360
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>{\n        &quot;rust-analyzer.checkOnSave.overrideCommand&quot;: [\n                &quot;./x.py&quot;,\n                &quot;check&quot;,\n                &quot;--stage 1&quot;,\n                &quot;--json-output&quot;\n        ]\n}\n</code></pre></div>",
        "id": 197348130,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589322368
    },
    {
        "content": "<p>but doesn't seem to work</p>",
        "id": 197348135,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1589322372
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/131828-t-compiler/topic/IDE/near/197346349\">said</a>:</p>\n<blockquote>\n<p>Yup, it's possible to fully override rustfmt with this option: <a href=\"https://github.com/rust-analyzer/rust-analyzer/blob/23cc6908a7d6547bddf779227e3e1d5c5912861e/editors/code/package.json#L251-L262\">https://github.com/rust-analyzer/rust-analyzer/blob/23cc6908a7d6547bddf779227e3e1d5c5912861e/editors/code/package.json#L251-L262</a></p>\n</blockquote>\n<p>ah, nice, so we could link it to stage0/bin/rustfmt or whatever...</p>",
        "id": 197348619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1589322704
    },
    {
        "content": "<p>/me is reminded that we likely want to create a build/bin directory that's symlinked to the \"real\" stage0 bin or just drop the build triple (and not support multiple build triples at once)</p>",
        "id": 197352386,
        "sender_full_name": "simulacrum",
        "timestamp": 1589325512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198054\">mark-i-m</span> <a href=\"#narrow/stream/131828-t-compiler/topic/IDE/near/197296206\">said</a>:</p>\n<blockquote>\n<p>Btw, the vscode rust plugin supports basic rust-analyzer as of today, apparently...</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> keep in mind that \"supports\" means that it doesn't crash on start-up :-) There's a ton of extra features in rust-analyzer own plugin at the moment, the most notable one being code actions</p>",
        "id": 197519759,
        "sender_full_name": "matklad",
        "timestamp": 1589442441
    }
]