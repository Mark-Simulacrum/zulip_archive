[
    {
        "content": "<p>What is the process for agreeing on \"code style\" for the compiler? Do we have/need this process at all?</p>\n<p>A specific issue I am facing right now:</p>\n<p>I need to decide between </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">bar</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>Looking at the compiler's source, both versions exist (<code>cosnt_eval/mod.rs</code> vs <code>parser/mod.rs</code>), so it's unclear to me how to proceed.</p>",
        "id": 207623752,
        "sender_full_name": "matklad",
        "timestamp": 1598009382
    },
    {
        "content": "<p>For any question that also applies to arbitrary Rust code, you might bring it to the style team.</p>",
        "id": 207631643,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598015292
    },
    {
        "content": "<p>all <code>use</code> before other stuff is also a fair rule to stick to I think. (but I'm not the style team)</p>",
        "id": 207632090,
        "sender_full_name": "Lokathor",
        "timestamp": 1598015565
    },
    {
        "content": "<p>I personally prefer to put a mod statement before a use from the same mod.</p>",
        "id": 207632427,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598015762
    },
    {
        "content": "<p>But for any other use, yeah, I prefer all use statements before all mod statements.</p>",
        "id": 207632484,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598015788
    },
    {
        "content": "<p>FWIW, I personally feel moderately strongly that \"all mod before any use\" is a good rule</p>\n<ol>\n<li>it doesn't have same-mod exception (this is a big one)</li>\n<li>set of submodules is the most important thing when you look at the module impl file, so it's good if it is on top.</li>\n<li>in <code>2018</code>, mods are a kind of import anyway, as there's no need for <code>self::</code></li>\n</ol>\n<p>Putting <code>mod</code>s first does feel weird and counter-intuitive at the first glance, but, after I've tried this, I can not go back (unless I am overriden by project's style guide)</p>",
        "id": 207826978,
        "sender_full_name": "matklad",
        "timestamp": 1598264153
    },
    {
        "content": "<p>most of my mod statements live inside macro invocations.</p>",
        "id": 207867192,
        "sender_full_name": "Lokathor",
        "timestamp": 1598288059
    },
    {
        "content": "<p>so i basically always do:</p>\n<ul>\n<li>out of crate <code>use</code></li>\n<li>private macros needed in sub-modules</li>\n<li>sub-module declarations</li>\n<li>possibly code in <a href=\"http://lib.rs\">lib.rs</a> if needed</li>\n</ul>\n<p>and then all sub-modules are generally just <code>use super::*;</code> and then their code.</p>",
        "id": 207867698,
        "sender_full_name": "Lokathor",
        "timestamp": 1598288357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> I tend to use \"all uses other than uses from mods declared here, then all mods, then all uses of mods\".</p>",
        "id": 207875251,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598292126
    },
    {
        "content": "<p>I already tend to do three blocks of <code>use</code> statements: std/core, third-party crates, this crate. mod statements go between the second and third of those, for me.</p>",
        "id": 207875365,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598292173
    },
    {
        "content": "<p>Because someone gave the eyes react, here ya go:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">macro_rules</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"n\">submodule</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"cp\">$v</span>:<span class=\"nc\">vis</span><span class=\"w\"> </span><span class=\"cp\">$name</span>:<span class=\"nc\">ident</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"cp\">$name</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$v</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"cp\">$name</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"cp\">$v</span>:<span class=\"nc\">vis</span><span class=\"w\"> </span><span class=\"cp\">$name</span>:<span class=\"nc\">ident</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$($content</span>:<span class=\"nc\">tt</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">mod</span> <span class=\"cp\">$name</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cp\">$($content</span><span class=\"p\">)</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cp\">$v</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"cp\">$name</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>\"you may not like it, but this is what peak performance really looks like.\"</p>",
        "id": 207877192,
        "sender_full_name": "Lokathor",
        "timestamp": 1598293011
    },
    {
        "content": "<p>So you just want to split modules into separate files without logically partitioning the namespace?</p>",
        "id": 207877409,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598293084
    },
    {
        "content": "<p>that is one reason, though a totally flat crate isn't always the best and I change the macro as appropriate.</p>\n<p>the other reason is that it there's now only one #[cfg()] required instead of one on the <code>mod</code> and a separate one on it's associated <code>use</code> statement.</p>",
        "id": 207877733,
        "sender_full_name": "Lokathor",
        "timestamp": 1598293238
    }
]