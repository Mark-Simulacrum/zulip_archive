[
    {
        "content": "<p>I'd like to resolve <a href=\"https://github.com/rust-lang/rust/issues/43364\">#43364</a> somehow to get <code>cbindgen</code> working on stable.</p>\n<p>What do you think about guaranteed that the pretty-printed code should provide?<br>\nI think we can guarantee that the code parses (but not necessarily resolves), and stabilize as is.</p>",
        "id": 211830447,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1601501783
    },
    {
        "content": "<p>modulo unstable implementation details (e.g., it might not parse on stable due to feature use by std macros that get expanded away)</p>",
        "id": 211838946,
        "sender_full_name": "simulacrum",
        "timestamp": 1601503011
    },
    {
        "content": "<p>well \"parse\" might be the wrong word there, I guess, but not sure what you mean by parse :)</p>",
        "id": 211838978,
        "sender_full_name": "simulacrum",
        "timestamp": 1601503032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> looking at bindgen internal docs, <a href=\"https://github.com/eqrion/cbindgen/blob/master/internals.md\">https://github.com/eqrion/cbindgen/blob/master/internals.md</a>, it doesn't look like that's anything beyond proc macro at crate level abilities - and maybe less than that. I'm thinking maybe it's worth trying to push this through as a proc macro with the eager expansion rfcs? That would also feel more \"first class\" I imagine. I'm not opposed to stabilizing expanded, though, I guess.</p>",
        "id": 211840702,
        "sender_full_name": "simulacrum",
        "timestamp": 1601504206
    },
    {
        "content": "<blockquote>\n<p>modulo unstable implementation details (e.g., it might not parse on stable due to feature use by std macros that get expanded away)</p>\n</blockquote>\n<p>Yes, that's an issue.<br>\ncbindgen will see the potentially unstable syntax no matter what is the source of its input - pretty printing or eager expansion.<br>\nHowever, that syntax is going to be parsed by ~<code>syn</code> rather than  by rustc parser, which isn't mandated to report stability errors.</p>",
        "id": 212910007,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1602326464
    },
    {
        "content": "<p>I'm not actually sure what is it's policy regarding this, but I suspect that changes in expanded code will be addressed in the same way as new language features that may appear in code with time - by bumping the <code>syn</code>'s version.</p>",
        "id": 212910079,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1602326593
    },
    {
        "content": "<blockquote>\n<p>I'm thinking maybe it's worth trying to push this through as a proc macro with the eager expansion rfcs?</p>\n</blockquote>\n<p>The difference is that eager expansion will take ~years to get to stable, and pretty-printing can be stabilized right away.<br>\nThat pretty much mirrors the situation with custom derives which were initially stabilized as working solely through pretty-printing, and then migrated to tokens in a couple of years.</p>",
        "id": 212910183,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1602326747
    },
    {
        "content": "<p>One more alternative: <code>--emit expanded</code> can actually produce serialized tokens instead of text, in the same format as used in <code>.rmeta</code>.<br>\nThen a new function in the <code>proc_macro</code> crate can read them back into a token stream, like <code>let tokens = proc_macro::deserialize_tokens(\"my_crate.rmeta\")</code>.</p>",
        "id": 212910473,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1602327167
    },
    {
        "content": "<p>You actually may need a full crate metadata to decode tokens, due to all the hygiene structures etc.<br>\nSo <code>--emit expanded</code> could actually perform regular compilation, produce a regular <code>my_crate.rmeta</code> or <code>my_crate.rlib</code>, and just encode one more token stream into the metadata.<br>\nThen you can load it as a regular crate with <code>extern crate my_crate;</code> or through <code>Cargo.toml</code>, but the loaded crate will contain one additional function - <code>my_crate::deserialize_tokens()</code> (or equivalent), through which its tokens can be obtained.</p>",
        "id": 212910910,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1602327876
    }
]