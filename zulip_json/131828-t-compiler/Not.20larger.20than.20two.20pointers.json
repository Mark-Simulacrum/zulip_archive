[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// At least on 64 bit systems, `PlaceElem` should not be larger than two pointers.</span>\n<span class=\"cp\">#[cfg(target_arch = </span><span class=\"s\">\"x86_64\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"n\">static_assert_size</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">PlaceElem</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Hmm...</p>",
        "id": 232965671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617407897
    },
    {
        "content": "<p>4cc2cabee25a looks like it.</p>",
        "id": 232966113,
        "sender_full_name": "nagisa",
        "timestamp": 1617408287
    },
    {
        "content": "<p>Oh, I was just about to propose the reverse of that commit</p>",
        "id": 232966236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617408387
    },
    {
        "content": "<p>Surely slice patterns can't have indices that large?</p>",
        "id": 232966244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617408403
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/75893#issuecomment-680214520\">https://github.com/rust-lang/rust/pull/75893#issuecomment-680214520</a></p>",
        "id": 232966254,
        "sender_full_name": "nagisa",
        "timestamp": 1617408414
    },
    {
        "content": "<p>2³² elements seems perfectly reasonable nowadays.</p>",
        "id": 232966270,
        "sender_full_name": "nagisa",
        "timestamp": 1617408455
    },
    {
        "content": "<p>No one seems to have pointed out that in the original bug:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">([(),</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()]</span>: <span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>that should be a <code>1, -1</code> slice pattern instead of <code>1, 1&lt;&lt;40 - 1</code></p>",
        "id": 232966387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617408559
    },
    {
        "content": "<p>although it's possible some code is relying on the assumption that arrays never set <code>from_end</code></p>",
        "id": 232966443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617408608
    },
    {
        "content": "<p>I actually meant that you would need a 2^32 large source file (or macro expansion) to hit this limit using slice patterns, and I'm pretty sure rustc can't handle files that large</p>",
        "id": 232966551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617408755
    },
    {
        "content": "<p>Oh, I guess it's more complicated for <code>ConstantIndex</code>, since the comment says \"For arrays is always the exact length\", so it wouldn't work for very large arrays if it was a u32. But I guess it could just not be the exact length and just treat array patterns with <code>..</code> the same as slice patterns</p>",
        "id": 232966868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1617409136
    }
]