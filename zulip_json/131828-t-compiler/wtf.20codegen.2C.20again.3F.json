[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">define</span> <span class=\"k\">i32</span> <span class=\"vg\">@caller</span><span class=\"p\">()</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv nv-Anonymous\">%0</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"k\">i1</span> <span class=\"vg\">@llvm.expect.i1</span><span class=\"p\">(</span><span class=\"k\">i1</span> <span class=\"k\">false</span><span class=\"p\">,</span> <span class=\"k\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n  <span class=\"k\">br</span> <span class=\"k\">i1</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%panic.i</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%callee.exit</span>\n\n<span class=\"nl\">panic.i:</span>                                          <span class=\"c\">; preds = %start</span>\n<span class=\"c\">; call core::panicking::panic</span>\n  <span class=\"k\">call</span> <span class=\"kt\">void</span> <span class=\"vg\">@_ZN4llvm9panicking5panic17h58fdea4fa7a9abc8E</span><span class=\"p\">({</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i64</span><span class=\"p\">],</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*,</span> <span class=\"k\">i64</span> <span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i64</span><span class=\"p\">],</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*,</span> <span class=\"k\">i64</span> <span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i32</span><span class=\"p\">],</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i32</span><span class=\"p\">],</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i32</span><span class=\"p\">]</span> <span class=\"p\">}*</span> <span class=\"k\">noalias</span> <span class=\"k\">readonly</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">40</span><span class=\"p\">)</span> <span class=\"k\">bitcast</span> <span class=\"p\">({</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*,</span> <span class=\"k\">i64</span> <span class=\"p\">},</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*,</span> <span class=\"k\">i64</span> <span class=\"p\">},</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"k\">i32</span> <span class=\"p\">}*</span> <span class=\"vg\">@panic_loc.2</span> <span class=\"k\">to</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i64</span><span class=\"p\">],</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*,</span> <span class=\"k\">i64</span> <span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i64</span><span class=\"p\">],</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">]*,</span> <span class=\"k\">i64</span> <span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i32</span><span class=\"p\">],</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i32</span><span class=\"p\">],</span> <span class=\"k\">i32</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i32</span><span class=\"p\">]</span> <span class=\"p\">}*))</span>\n  <span class=\"k\">unreachable</span>\n\n<span class=\"nl\">callee.exit:</span>                                      <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">br</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb1</span>\n\n<span class=\"nl\">bb1:</span>                                              <span class=\"c\">; preds = %callee.exit</span>\n  <span class=\"k\">ret</span> <span class=\"k\">i32</span> <span class=\"m\">8</span>\n</pre></div>",
        "id": 150686820,
        "sender_full_name": "nagisa",
        "timestamp": 1543677322
    },
    {
        "content": "<p>does another run of <code>-instcombine -simplifycfg</code> clean that up?</p>",
        "id": 150686864,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543677370
    },
    {
        "content": "<p>now that’s some weird codegen haha, though note that this occurs with <code>-Copt-level=0</code> only for code as such:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#[inline(always)]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">callee</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">caller</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 150686873,
        "sender_full_name": "nagisa",
        "timestamp": 1543677431
    },
    {
        "content": "<blockquote>\n<p>does another run of <code>-instcombine -simplifycfg</code> clean that up?</p>\n</blockquote>\n<p>I’m sure it would, but the point is that we end up with some weird IR <em>without</em> optimisations… well, I’ve been told we run inliner at <code>-Copt-level=0</code>, but still...</p>",
        "id": 150686939,
        "sender_full_name": "nagisa",
        "timestamp": 1543677567
    },
    {
        "content": "<p>Ok I thought this was after -O2 and thus a pass ordering issue. -O0 is weird (what's the assume for anyway?) but I could see it happening from a combinations of MIR optz not finishing the job and IRBuilder constant folding</p>",
        "id": 150686987,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543677630
    },
    {
        "content": "<p>oh derp, expect, not assume, so it's expecting the integer overflow to not happen. and IRBuilder constant folds it to not happen, I guess</p>",
        "id": 150687036,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1543677731
    }
]