[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> figured it'd be a good idea to slowly separate a topic for this work - is that fine?</p>",
        "id": 155002545,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1547332512
    },
    {
        "content": "<p>I spent some time to understand the code and slowly tried to convert more stuff on the expansion/hir/analysis boundary only to just now understand recent's <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> (e.g. allocating HIR on arena, pushing more checks to incremental infra) great work <span class=\"emoji emoji-1f601\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 155002732,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1547332831
    },
    {
        "content": "<p>so I decided not to touch much stuff from those PRs and instead slowly chip at Session/pass-based code elsewhere</p>",
        "id": 155002747,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1547332869
    },
    {
        "content": "<p>I have a question - I decided to at first querify <code>Session::proc_macro_decls_static</code> which worked out okay but I found out there's a <code>proc_macro_decls_static</code> query that is defined for the external crates via cstore, in the librustc_metadata crate</p>",
        "id": 155002803,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1547332944
    },
    {
        "content": "<p>and so I created a separate <code>proc_macro_decls_static_local</code> crate, which only works for <code>LOCAL_CRATE</code> - is there a way to combine those into a single query, where for <code>LOCAL_CRATE</code> key it traverses the AST like before but for other crate nums it tries to pull them from the externally loaded crates?</p>",
        "id": 155002818,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1547333015
    },
    {
        "content": "<p>or is such split still beneficial from data flow visualization/analysis point of view?</p>",
        "id": 155002866,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1547333051
    },
    {
        "content": "<p>for the context, this is my current diff: <a href=\"https://github.com/rust-lang/rust/commit/16bd7050b53f95882eaef0aa2f975316e969b081\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/commit/16bd7050b53f95882eaef0aa2f975316e969b081\">https://github.com/rust-lang/rust/commit/16bd7050b53f95882eaef0aa2f975316e969b081</a></p>",
        "id": 155002885,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1547333103
    },
    {
        "content": "<p>You should be able to use the <code>proc_macro_decls_static</code> query. It will dispatch to the metadata if the crate is external, otherwise it will run the regular provider</p>",
        "id": 155005140,
        "sender_full_name": "Zoxc",
        "timestamp": 1547337360
    },
    {
        "content": "<p>oooh, since this exists on <code>Providers</code> but we can specify functions there separately either locally or via extern providers</p>",
        "id": 155005773,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1547338378
    },
    {
        "content": "<p>makes sense, thank you!</p>",
        "id": 155005775,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1547338381
    },
    {
        "content": "<p>Sorry <span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> just saw this message, but yeah -- \"what <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> said\", basically =)</p>",
        "id": 155255955,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547648008
    },
    {
        "content": "<p>I now have a concrete plan on how to bring the queries I defined in <a href=\"https://internals.rust-lang.org/t/making-the-compiler-interface-on-demand-driven/9099/6\" target=\"_blank\" title=\"https://internals.rust-lang.org/t/making-the-compiler-interface-on-demand-driven/9099/6\">https://internals.rust-lang.org/t/making-the-compiler-interface-on-demand-driven/9099/6</a> into the proper query system without causing performance regressions.<br>\nBy using <code>no_hash</code> (added in <a href=\"https://github.com/rust-lang/rust/pull/57770\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57770\">https://github.com/rust-lang/rust/pull/57770</a>) and <code>eval_always</code> on the queries, we can avoid the overhead of incremental compilation. We also avoid the need to introduce <code>HashStable</code> impls.<br>\nCreating the HIR map will be a single query, which also sets up the <code>Krate</code>, <code>HirBody</code> and Hir dep nodes. These will no longer be treated as inputs and forcing them will result in the HIR map query being run.<br>\nWe can think of this as the HIR map query producting multiple return value from the perspective of incremental compilation.<br>\nCalling <code>tcx.hir()</code> will invoke the HIR map in an ignore context and return a reference to the HIR map. Accessing the HIR map will add the required read edges to the dep graph. Since the HIR map is accessed frequently, it will be cached in <code>GlobalCtxt</code> to avoid the overhead of the query system.</p>\n<p>This won't make anything more incremental, but when this is in place we can start splitting these larger queries into smaller incremental ones.</p>",
        "id": 156612443,
        "sender_full_name": "Zoxc",
        "timestamp": 1548170413
    },
    {
        "content": "<p>So <code>hir_map</code> would be a <code>no_hash</code> query and then there would be additional, regular queries for specific lookups?</p>",
        "id": 156615787,
        "sender_full_name": "mw",
        "timestamp": 1548172930
    },
    {
        "content": "<p>(kind of like the codegen_units query?)</p>",
        "id": 156615808,
        "sender_full_name": "mw",
        "timestamp": 1548172951
    },
    {
        "content": "<p>@mw No. We'd just use the HIR map as is (when returned by the query which creates it), as it does it's own dependency tracking.</p>",
        "id": 156616226,
        "sender_full_name": "Zoxc",
        "timestamp": 1548173261
    },
    {
        "content": "<p>Yeah, that would work too. But it would be nice to get rid of the special casing in the medium term.</p>",
        "id": 156616585,
        "sender_full_name": "mw",
        "timestamp": 1548173520
    },
    {
        "content": "<p>hm, although, how would that work?</p>",
        "id": 156616686,
        "sender_full_name": "mw",
        "timestamp": 1548173605
    },
    {
        "content": "<p>a query would do something like <code>let hir_map = tcx.hir_map();</code> and then <code>hir_map.expect_item(...)</code> or something like that.</p>",
        "id": 156616787,
        "sender_full_name": "mw",
        "timestamp": 1548173674
    },
    {
        "content": "<p>but <code>tcx.hir_map()</code> is a <code>no_hash</code> query, so every query calling it would always be re-evaluated.</p>",
        "id": 156616837,
        "sender_full_name": "mw",
        "timestamp": 1548173721
    },
    {
        "content": "<p>or maybe I am misunderstanding something?</p>",
        "id": 156616979,
        "sender_full_name": "mw",
        "timestamp": 1548173803
    },
    {
        "content": "<p>No query will actually call <code>hir_map</code> though, they'll use <code>tcx.hir()</code> instead, which calls <code>hir_map</code> in an ignore context, so no dependency to the <code>hir_map</code> query will be added</p>",
        "id": 156617818,
        "sender_full_name": "Zoxc",
        "timestamp": 1548174517
    },
    {
        "content": "<p>wait what :)</p>",
        "id": 156627690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182199
    },
    {
        "content": "<p>why do we need an ignore context exactly?</p>",
        "id": 156627735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182238
    },
    {
        "content": "<p>you could also imagine that the hir-map is just treated as 'always dirty'</p>",
        "id": 156627741,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182248
    },
    {
        "content": "<p>(right?)</p>",
        "id": 156627747,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182252
    },
    {
        "content": "<p>so that it is always constructed?</p>",
        "id": 156627755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182262
    },
    {
        "content": "<p>is that the same thing?</p>",
        "id": 156627811,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182283
    },
    {
        "content": "<p>(in general, I'd definitely prefer to have fewer \"exceptions\" where possible)</p>",
        "id": 156627823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182295
    },
    {
        "content": "<p>If there's no change to the crate, the HIR map will be green, but still executed since we don't save the result</p>",
        "id": 156627856,
        "sender_full_name": "Zoxc",
        "timestamp": 1548182329
    },
    {
        "content": "<p>I'm not entirely convinced the HIR map makes a ton of sense, but it seems like if we move the HIR map methods to queries, we can avoid having any exceptions at all, no? (except maybe a \"volatile\" flag on the base map, purely for efficiency and/or to avoid adding impls / serialization?) maybe it results in some overhead, that is the fear?</p>",
        "id": 156627861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548182333
    },
    {
        "content": "<p>We need an ignore context since any change to the crate will result in the HIR map query dep node being red. Any queries which has a dependency on it will need to be executed again.</p>",
        "id": 156628083,
        "sender_full_name": "Zoxc",
        "timestamp": 1548182502
    },
    {
        "content": "<p>that seems like it's sort of \"by design\"</p>",
        "id": 156629135,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183325
    },
    {
        "content": "<p>that is, most things should not <em>directly</em> interact with the HIR map</p>",
        "id": 156629143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183335
    },
    {
        "content": "<p>but rather queries on the HIR map</p>",
        "id": 156629150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183341
    },
    {
        "content": "<p>but ok I see, you are aiming not to modify the code that is doing <code>tcx.hir().foo()</code></p>",
        "id": 156629163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183352
    },
    {
        "content": "<p>I feel like I'd rather that the HIR map as an entity goes away, at least eventually, and we just move to <code>tcx.foo()</code></p>",
        "id": 156629217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548183368
    },
    {
        "content": "<p>I am aiming to not modify existing code and also avoid the performance overhead of adding queries which just forward information from the HIR map.</p>",
        "id": 156629304,
        "sender_full_name": "Zoxc",
        "timestamp": 1548183462
    },
    {
        "content": "<p>it feels like those queries potentially play an important role, though, in terms of helping to propagate changes</p>",
        "id": 156637282,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548189434
    },
    {
        "content": "<p>right now, at least IIRC, we have special dep-nodes for sub-parts of the HIR map, basically, but we could sort of remove that whole concept and instead just be talking about the results of queries</p>",
        "id": 156637363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548189496
    },
    {
        "content": "<p>(but cost is obviously a concern, we may indeed want some special treatment for optimization purposes -- though I feel like I'd sort of prefer if these still \"feel like\" queries in the end, just specially implemented ones)</p>",
        "id": 156637428,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548189574
    },
    {
        "content": "<p>it might be workable temporary solution but I really want to avoid the hir map having to duplicate all the dep-tracking and hashing logic.</p>",
        "id": 156676100,
        "sender_full_name": "mw",
        "timestamp": 1548236875
    },
    {
        "content": "<p>regarding existing code: <code>tcx.hir()</code> could return small wrapper struct that provides the interface of the hir map but forwards to regular queries.</p>",
        "id": 156676178,
        "sender_full_name": "mw",
        "timestamp": 1548236967
    },
    {
        "content": "<p>I imagine it things to look kind of like this: there's an <code>[no_hash]</code> <code>hir_map()</code> query that does all the mapping for the crate. then there is a regular <code>item_hir_map(DefIndex)</code> that returns a map from <code>LocalId</code> to the actual HIR. and then there's the mentioned wrapper behind <code>tcx.hir()</code> that keeps providing the existing interface. Something like that. There might have to be a separate query for bodies?</p>",
        "id": 156676974,
        "sender_full_name": "mw",
        "timestamp": 1548237895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've been thinking about Lark's \"fast\" parse that was described in the video and was wondering how we might apply the laziness in our case and how expansion comes into play</p>",
        "id": 156866819,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1548435906
    },
    {
        "content": "<p>I imagine we could do a fast parse without doing macro expansion to get a guaranteed, but incomplete set of 'definitions' per given file but when we get to a name resolution on a definition not on that list (meaning it must've been produced during expansion) we might then try to macro-expand a given file and cache any intermediate results?</p>",
        "id": 156866902,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1548435981
    },
    {
        "content": "<p>(I hope this topic is good for general idea/discussion and not specifically the existing query system details <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> )</p>",
        "id": 156866958,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1548436035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"153740\">@Igor Matuszewski</span> applying to Rust definitely seems harder in some ways. Something I hadn't fully appreciated before is how having had an \"IDE-focused compiler\" earlier on might have affected the language design in various ways -- closures, impls, and nested items are all examples of things I might have done differently.</p>",
        "id": 156875813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548443178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> so I was thinking more about this. I agree that as a temporary measure, what <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> proposed makes sense, but for a longer term plan I definitely think we should not be doing anything \"fancy\" but just leveraging the incremental system.</p>\n<p>I am not convinced we want a <code>hir_map</code> query at all longer term. We should see if we can make HIR lowering more \"targeted\" -- e.g., I think you can get the HIR for a struct without having to also create the HIR for its sibling items.</p>",
        "id": 156881259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548447307
    },
    {
        "content": "<p>I guess that we always have to lower an entire \"hir owner\" at a time so that we can properly assign <code>LocalId</code>s?</p>",
        "id": 157028495,
        "sender_full_name": "mw",
        "timestamp": 1548685732
    },
    {
        "content": "<p>I would be OK with doing <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span>'s proposal as an intermediate step, but I'd really want to get rid of the manual dep-tracking for the HIR soon thereafter.</p>",
        "id": 157033112,
        "sender_full_name": "mw",
        "timestamp": 1548689430
    },
    {
        "content": "<p>I'd prefer to even skip this intermediate step but that might mean maintaining a branch for the refactoring for quite a while.</p>",
        "id": 157033175,
        "sender_full_name": "mw",
        "timestamp": 1548689479
    },
    {
        "content": "<p>I think we should remove NodeIds before trying to split the HIR map up. We also need some way to deal with non-item local things like <code>impl Trait</code>.</p>",
        "id": 157033430,
        "sender_full_name": "Zoxc",
        "timestamp": 1548689683
    },
    {
        "content": "<p>Agreed, it’d be good to move <a href=\"https://github.com/rust-lang/rust/pull/57578\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/57578\">https://github.com/rust-lang/rust/pull/57578</a> over the finish line and merge</p>",
        "id": 157038584,
        "sender_full_name": "Igor Matuszewski",
        "timestamp": 1548693799
    },
    {
        "content": "<p>removing <code>NodeId</code> and other such refactorings makes sense</p>",
        "id": 157056194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548708515
    },
    {
        "content": "<p>I found yet another reason to want my end-to-end queries PR. I should make a to do list of things blocking on it</p>",
        "id": 163109424,
        "sender_full_name": "Zoxc",
        "timestamp": 1554996067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> actually, that would be a good idea :) (a list of things blocked etc)</p>",
        "id": 163210592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555090817
    }
]