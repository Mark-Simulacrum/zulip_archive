[
    {
        "content": "<p>If method call is in <code>Needs::MutPlace</code> context (e.g. <code>*(foo.bar()) = 1;</code>), Needs::MutPlace is propagated to receiver expression <code>foo</code> (see <code>check_method_call</code>).<br>\nBut then, if autoref to <code>&amp;mut</code> occurs, such <code>Needs</code> (effectively) reconsidered in <code>convert_place_derefs_to_mutable</code>. So why <code>Needs</code> is propagated to a receiver in <code>check_method_call</code>? It looks like it just shouldn't. </p>\n<p>I made an example when such propagation leads to using <code>index_mut</code> when it does not need and to false-positive E0596.</p>\n<p>Setup:</p>\n<div class=\"codehilite\"><pre><span></span>struct S;\nimpl S {\n    // Note `&amp;self`, not `&amp;mut self`!\n    fn foo(&amp;self) -&gt; &amp;&#39;static mut i32 {\n        Box::leak(Box::new(1))\n    }\n}\n\nstruct Indexable;\n\nimpl std::ops::Index&lt;u8&gt; for Indexable {\n    type Output = S;\n\n    fn index(&amp;self, index: u8) -&gt; &amp;Self::Output {\n        println!(&quot;non mut&quot;);\n        Box::leak(Box::new(S))\n    }\n}\nimpl std::ops::IndexMut&lt;u8&gt; for Indexable {\n    fn index_mut(&amp;mut self, index: u8) -&gt; &amp;mut Self::Output {\n        println!(&quot;mut&quot;);\n        Box::leak(Box::new(S))\n    }\n}\n</pre></div>\n\n\n<p>This code uses <code>index_mut</code> (why?)</p>\n<div class=\"codehilite\"><pre><span></span>fn main() {\n    let a = &amp;mut Indexable;\n    *(a[0].foo()) = 1;\n}\n</pre></div>\n\n\n<p>This code produces <code>E0596</code> (but looks it shouldn't)</p>\n<div class=\"codehilite\"><pre><span></span>fn main() {\n    let a = &amp;Indexable;\n    *(a[0].foo()) = 1;\n}\n</pre></div>\n\n\n<p>This can be compiled if write</p>\n<div class=\"codehilite\"><pre><span></span>fn main() {\n    let a = &amp;Indexable;\n    *((&amp;a[0]).foo()) = 1;\n}\n</pre></div>",
        "id": 187009539,
        "sender_full_name": "Vlad",
        "timestamp": 1580405187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 188361795,
        "sender_full_name": "Vlad",
        "timestamp": 1581930238
    }
]