[
    {
        "content": "<p><code>Session.used_attrs</code> is one of the main remaining sources of untracked global state in the compiler. However, we only ever update it for several hardcoded builtin attributes (e..g deprecation, stability, and a few others) in a few parts of the compiler.</p>\n<p>I think it would be feasible to remove it entirely, and just lint when those attributes are used in the wrong place. We already have logic to do this in <code>CheckAttrVisitor</code> - we would just emit a lint instead of a hard error</p>",
        "id": 247536349,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627522673
    },
    {
        "content": "<p>This didn't seem big enough to warrant an MCP, but I wanted to get some feedback, in case anyone is planning to add new <code>mark_attr_used</code> calls</p>",
        "id": 247536397,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627522707
    },
    {
        "content": "<p>I think that whever an attribute is 'used' (for the purpose of linting) can be determined entirely by its position in the HIR</p>",
        "id": 247536417,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627522746
    },
    {
        "content": "<p>so 'dynamically' marking an attr used is not necessary</p>",
        "id": 247536473,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627522806
    },
    {
        "content": "<p>That doesn't work for tool lints. Those are unknown to rustc before they are registered using <code>#![register_tool]</code> or <code>#![register_attribute]</code>.</p>",
        "id": 247546767,
        "sender_full_name": "bjorn3",
        "timestamp": 1627537680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> Can you give me an example? <code>CheckAttrVisitor</code> is run after we've constructed a <code>TyCtxt</code>, so we should have registered all tool lints by that point</p>",
        "id": 247587992,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627567781
    },
    {
        "content": "<p>I mean that every tool may have its own rules unknown to rustc around what attributes are used where.</p>",
        "id": 247591731,
        "sender_full_name": "bjorn3",
        "timestamp": 1627569283
    },
    {
        "content": "<p>Tools aren't really integrated with the query system, right (they can't define new queries)? I think it would be straightforward for a tool to re-implmenet the current logic themselves if they really want it</p>",
        "id": 247592010,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627569400
    },
    {
        "content": "<p>Tools can (and do) overwrite existing queries.</p>",
        "id": 247592064,
        "sender_full_name": "bjorn3",
        "timestamp": 1627569425
    },
    {
        "content": "<p>hmm - do you know of any tools using <code>mark_attr_used</code>?</p>",
        "id": 247592126,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627569456
    },
    {
        "content": "<p>I would really like to get rid of this untracked global state</p>",
        "id": 247592239,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627569499
    },
    {
        "content": "<p>and have tools move to something like <code>CheckAttrVisitor</code></p>",
        "id": 247592261,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627569509
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/facebookexperimental/MIRAI\">https://github.com/facebookexperimental/MIRAI</a> doesn't use it</p>",
        "id": 247592387,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627569566
    },
    {
        "content": "<p>nor does <a href=\"https://github.com/model-checking/rmc\">https://github.com/model-checking/rmc</a></p>",
        "id": 247592584,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627569632
    },
    {
        "content": "<p>is this even something that tools need at all?</p>",
        "id": 247592761,
        "sender_full_name": "oli",
        "timestamp": 1627569699
    },
    {
        "content": "<p>by default tool attributes are not causing unused attribute lints</p>",
        "id": 247592860,
        "sender_full_name": "oli",
        "timestamp": 1627569727
    },
    {
        "content": "<p>If a tool wanted to re-use our existing infrastructure for marking attributes as used</p>",
        "id": 247592862,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627569727
    },
    {
        "content": "<p>not sure what/whether the tool attribute RFC said something about that</p>",
        "id": 247592930,
        "sender_full_name": "oli",
        "timestamp": 1627569753
    },
    {
        "content": "<p>but I don't think any tools are doing that now, so seems fine to change it and require using a different scheme</p>",
        "id": 247593032,
        "sender_full_name": "oli",
        "timestamp": 1627569793
    },
    {
        "content": "<p>The rustfmt and clippy tool namespaces are hard coded in rustc. Rust-gpu uses <code>#![register_attr(spirv)]</code>. This attribute can only be used on functions I think. It needed to overwrite the <code>check_mod_attrs</code> query though as unused attribute errors are reported before codegen happens (which would use them).</p>\n<p><a href=\"https://github.com/EmbarkStudios/rust-gpu/blob/b9867d0e84d29d6e60ad62427f453b4829abda56/examples/shaders/compute-shader/src/lib.rs#L41\">https://github.com/EmbarkStudios/rust-gpu/blob/b9867d0e84d29d6e60ad62427f453b4829abda56/examples/shaders/compute-shader/src/lib.rs#L41</a></p>",
        "id": 247593084,
        "sender_full_name": "bjorn3",
        "timestamp": 1627569813
    },
    {
        "content": "<p><a href=\"https://github.com/EmbarkStudios/rust-gpu/pull/461/files#diff-94a279ab4b4b26c27eb846eab23c59bebf583779e89391953c0fe2bffe179fc3R309\">https://github.com/EmbarkStudios/rust-gpu/pull/461/files#diff-94a279ab4b4b26c27eb846eab23c59bebf583779e89391953c0fe2bffe179fc3R309</a></p>",
        "id": 247593104,
        "sender_full_name": "bjorn3",
        "timestamp": 1627569821
    },
    {
        "content": "<p>We could skip all tool attributes when emitting warnings in our <code>UnusedAttributes</code> pass, and leave it up to the tool to determine how they want to emit the lint</p>",
        "id": 247593613,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627569972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Remove.20.60mark_attr_used.60.20and.20move.20logic.20to.20.60CheckAttrVisitor.60/near/247593613\">said</a>:</p>\n<blockquote>\n<p>We could skip all tool attributes when emitting warnings in our <code>UnusedAttributes</code> pass, and leave it up to the tool to determine how they want to emit the lint</p>\n</blockquote>\n<p>this is how I thought it was already happening</p>",
        "id": 247593710,
        "sender_full_name": "oli",
        "timestamp": 1627570004
    },
    {
        "content": "<p>Looking at what rust-gpu does, it seems like a <code>CheckAttrVisitor</code>-like approach would work fine</p>",
        "id": 247593717,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627570006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> It looks like we only skip <code>AssumedUsed</code> builtin attrs: <a href=\"https://github.com/rust-lang/rust/blob/5fb3394cbdf0622c9d0c292feb55db0f4c828dc3/compiler/rustc_lint/src/unused.rs#L398-L407\">https://github.com/rust-lang/rust/blob/5fb3394cbdf0622c9d0c292feb55db0f4c828dc3/compiler/rustc_lint/src/unused.rs#L398-L407</a></p>",
        "id": 247593856,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627570056
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> - <code>rust-gpu</code> is currently using <code>mark_attr_used</code> on the custom <code>#[spirv]</code> attribute. I'm considering removing <code>mark_attr_used</code> (which is a source of untracked global state), and moving the relevant logic to <code>CheckAttrVisitor</code>.  Would this interfere with <code>rust-gpu</code>?</p>",
        "id": 247594368,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627570241
    },
    {
        "content": "<p>We could also refactor <code>CheckAttrVisitor</code> to make it easy for custom tools to re-use some of the logic</p>",
        "id": 247595207,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627570574
    },
    {
        "content": "<p>e.g. allow overriding <code>check_attributes</code> in some way</p>",
        "id": 247595257,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627570593
    },
    {
        "content": "<p>I don't know if this is related, but I changed <code>unknown_lints</code> a few months ago to also check tool lints (by assuming than if at least one tool attribute is registered, then all attributes are registered for that tool). Not sure if that interacts with mark_attr_used in any way.</p>",
        "id": 247614379,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1627579470
    },
    {
        "content": "<p>That doesn't seem to use <code>used_attrs</code> at all</p>",
        "id": 247614507,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627579538
    },
    {
        "content": "<p>Actually, it looks like <code>CheckSpirvAttrVisitor</code> is basically a copy of <code>CheckAttrVisitor</code>, so removing <code>mark_attr_used</code> won't interfere with anything</p>",
        "id": 247773509,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1627688178
    }
]