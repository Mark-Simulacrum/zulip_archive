[
    {
        "content": "<p>I'm back on this. Is there a reason to not send that patch upstream? There's plenty of caselaw for non-C++ stuff in LLVM (eg Swift) and it seems like it might make sense to just land this patch there. I'm happy to try and have that discussion with LLVM folks if there's not a compelling reason to keep it Rust-local.</p>",
        "id": 247370657,
        "sender_full_name": "durin42",
        "timestamp": 1627409840
    },
    {
        "content": "<p>LLVM hardcoding those symbols would effectively mean they're stable and we can't fix them</p>",
        "id": 247426192,
        "sender_full_name": "eddyb",
        "timestamp": 1627453705
    },
    {
        "content": "<p>I've been meaning to switch them for a while to something more \"mangled\" to avoid them looking like C symbols</p>",
        "id": 247426209,
        "sender_full_name": "eddyb",
        "timestamp": 1627453738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316805\">@durin42</span> also, as the PR linked above (<a href=\"https://github.com/rust-lang/llvm-project/pull/89\">https://github.com/rust-lang/llvm-project/pull/89</a>) makes it clear, <em>the signatures have changed</em>, so we'd also need some kind of versioning in the symbol name</p>",
        "id": 247426300,
        "sender_full_name": "eddyb",
        "timestamp": 1627453833
    },
    {
        "content": "<p>it would be useful to be able to use attributes or something to pass this information to LLVM, so we don't need LLVM to know about Rust symbols <em>at all</em></p>",
        "id": 247426389,
        "sender_full_name": "eddyb",
        "timestamp": 1627453943
    },
    {
        "content": "<p>maybe metadata connecting alloc/realloc/free functions together</p>",
        "id": 247426485,
        "sender_full_name": "eddyb",
        "timestamp": 1627454100
    },
    {
        "content": "<p>The signatures are unlikely to change nowadays as <code>GlobalAlloc</code> has been stabilized and the <code>__rust_*</code> allocator methods have a 1-to-1 correspondence with <code>GlobalAlloc</code> methods. They only happen to expand <code>Layout</code> into a separate size and align argument.</p>",
        "id": 247431351,
        "sender_full_name": "bjorn3",
        "timestamp": 1627459024
    },
    {
        "content": "<p>I just don't want to bake any assumptions about <em>unstable Rust std internals</em> into LLVM</p>",
        "id": 247434689,
        "sender_full_name": "eddyb",
        "timestamp": 1627461610
    },
    {
        "content": "<p>sure, the API wrapping those symbols might be stable, but the linking/call ABI isn't</p>",
        "id": 247434752,
        "sender_full_name": "eddyb",
        "timestamp": 1627461675
    },
    {
        "content": "<p>in fact it's probably broken if you try to mix multiple Rust versions into one process...</p>",
        "id": 247434781,
        "sender_full_name": "eddyb",
        "timestamp": 1627461715
    },
    {
        "content": "<p>The ABI is set to \"C\", so it doesn't change unless the allocator shim is explicitly changed.</p>",
        "id": 247435193,
        "sender_full_name": "bjorn3",
        "timestamp": 1627462027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/upstreaming.20LLVM.20patch.20recognizing.20.60__rust_*.60.20allocator.20.20.2E.2E.2E/near/247434689\">said</a>:</p>\n<blockquote>\n<p>I just don't want to bake any assumptions about <em>unstable Rust std internals</em> into LLVM</p>\n</blockquote>\n<p>If anything I would like it to be stabilized. That would allow C code to use the rust allocator to say allocate a <code>Box</code> or <code>Vec</code> without requiring everyone to write wrappers in rust. For example <code>cxx</code> has a lot of rust wrappers like <a href=\"https://github.com/dtolnay/cxx/blob/9c1737feff7208cd4825984614beaf09a27aefcf/src/symbols/rust_vec.rs#L15-L56\">https://github.com/dtolnay/cxx/blob/9c1737feff7208cd4825984614beaf09a27aefcf/src/symbols/rust_vec.rs#L15-L56</a> that are called from C++ when trying to do anything with a <code>rust::Vec&lt;T&gt;</code> which is a C++ type that can be converted from and to a rust <code>Vec&lt;T&gt;</code> without reallocating.</p>",
        "id": 247435798,
        "sender_full_name": "bjorn3",
        "timestamp": 1627462474
    },
    {
        "content": "<p>that just makes me want to try to hide the symbols more</p>",
        "id": 247435806,
        "sender_full_name": "eddyb",
        "timestamp": 1627462494
    },
    {
        "content": "<p>they are a way for two crates to communicate. they <em>should never</em> be accessible through other means</p>",
        "id": 247435832,
        "sender_full_name": "eddyb",
        "timestamp": 1627462522
    },
    {
        "content": "<p>also, it's not really about what changes we make today, that I'm worried about, but about baking in something that we might later find a reason to want to change</p>",
        "id": 247435869,
        "sender_full_name": "eddyb",
        "timestamp": 1627462553
    },
    {
        "content": "<p>Why would you want to change it? There are literally zero alternative implementation methods. <code>__rust_*</code> is effectively exposed to stable as <code>alloc::Global</code>.</p>",
        "id": 247435870,
        "sender_full_name": "bjorn3",
        "timestamp": 1627462553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> currently if you try to use custom global allocators from multiple <em>independently compiled</em> Rust <code>cdylib</code>s, aren't they broken? if C can see the symbol, doesn't that mean one of the allocators will be ignored?</p>",
        "id": 247436003,
        "sender_full_name": "eddyb",
        "timestamp": 1627462654
    },
    {
        "content": "<p>that's, for example, something that should IMO be fixed</p>",
        "id": 247436071,
        "sender_full_name": "eddyb",
        "timestamp": 1627462686
    },
    {
        "content": "<p>One allocator has to be ignored either way. Imagine two cdylibs depend on the same <code>libstd.so</code>. Which allocator should <code>libstd.so</code> use?</p>",
        "id": 247436082,
        "sender_full_name": "bjorn3",
        "timestamp": 1627462703
    },
    {
        "content": "<p>my point is a situation in which <em>they don't</em></p>",
        "id": 247436107,
        "sender_full_name": "eddyb",
        "timestamp": 1627462720
    },
    {
        "content": "<p>sorry, I forgot to say \"multiple versions of Rust\" too</p>",
        "id": 247436110,
        "sender_full_name": "eddyb",
        "timestamp": 1627462730
    },
    {
        "content": "<p>(or <code>-Z build-std</code> I guess)</p>",
        "id": 247436135,
        "sender_full_name": "eddyb",
        "timestamp": 1627462742
    },
    {
        "content": "<p>If <code>__rust_*</code> becomes stabilized, there is no problem with using the same allocator from multiple versions of rust.</p>",
        "id": 247436181,
        "sender_full_name": "bjorn3",
        "timestamp": 1627462775
    },
    {
        "content": "<p>I think panicking is similarly broken, and even worse since the ABI is nowhere near as unchanging</p>",
        "id": 247436255,
        "sender_full_name": "eddyb",
        "timestamp": 1627462805
    },
    {
        "content": "<p>Probably.</p>",
        "id": 247436328,
        "sender_full_name": "bjorn3",
        "timestamp": 1627462834
    },
    {
        "content": "<p>anyway, I think stabilizing any of these <em>implementation details</em> requires an RFC, and until such a thing gets accepted, I'd rather make these \"oh we just hardcoded some symbol names\" things more hidden and less predictable</p>",
        "id": 247436361,
        "sender_full_name": "eddyb",
        "timestamp": 1627462857
    },
    {
        "content": "<p>Add the rustc version to the symbol name?</p>",
        "id": 247436385,
        "sender_full_name": "bjorn3",
        "timestamp": 1627462876
    },
    {
        "content": "<p>if we can avoid LLVM hardcoding them, then we can probably fully mangle them (since the crate defining these symbols always depends on the crate declaring them <em>anyway</em>, so they can come from the latter)</p>",
        "id": 247436481,
        "sender_full_name": "eddyb",
        "timestamp": 1627462949
    },
    {
        "content": "<p>i.e. weak lang items would require exactly one declaration and one definition, and the definition cannot be supplied unless the declaration already exists in an upstream crate</p>",
        "id": 247436517,
        "sender_full_name": "eddyb",
        "timestamp": 1627462987
    },
    {
        "content": "<p>then, you just use the declaration's mangling as the symbol name</p>",
        "id": 247436538,
        "sender_full_name": "eddyb",
        "timestamp": 1627463010
    },
    {
        "content": "<p>this could potentially allow e.g. incompatible panic runtimes from separate <code>-Z build-std</code>, to avoid interfering with eachother in the same process (but Cargo may make this non-trivial)</p>",
        "id": 247436663,
        "sender_full_name": "eddyb",
        "timestamp": 1627463102
    },
    {
        "content": "<p>That would require renaming the personality function too I think.</p>",
        "id": 247436696,
        "sender_full_name": "bjorn3",
        "timestamp": 1627463140
    },
    {
        "content": "<p>It is currently hard coded as <code>rust_eh_personality</code>. Not even with an <code>__</code> prefix.</p>",
        "id": 247436797,
        "sender_full_name": "bjorn3",
        "timestamp": 1627463218
    },
    {
        "content": "<p><em>yikes</em></p>",
        "id": 247436810,
        "sender_full_name": "eddyb",
        "timestamp": 1627463230
    },
    {
        "content": "<p>This is the full list of unmangled symbols exported by a rust dylib:</p>\n<ul>\n<li>__rust_alloc</li>\n<li>__rust_alloc_zeroed</li>\n<li>__rust_realloc</li>\n<li>__rust_dealloc</li>\n<li>rust_oom</li>\n<li>__rdl_oom</li>\n</ul>\n<hr>\n<ul>\n<li>rust_begin_unwind (deliberately unmangled to allow breakpoint placing)</li>\n</ul>\n<hr>\n<ul>\n<li>rust_panic</li>\n<li>rust_eh_personality</li>\n<li>__rust_start_panic</li>\n<li>__rust_drop_panic</li>\n<li>__rust_foreign_exception</li>\n<li>__rust_panic_cleanup</li>\n</ul>",
        "id": 247437382,
        "sender_full_name": "bjorn3",
        "timestamp": 1627463650
    },
    {
        "content": "<p>so yeah I think we need mandatory mangling + using some other method to inform LLVM of any global allocator entry-points (such as custom attributes, that we could upstream later, and which could perhaps be usable from C or C++ through Clang custom attributes)</p>",
        "id": 247437438,
        "sender_full_name": "eddyb",
        "timestamp": 1627463696
    },
    {
        "content": "<p>I still think the allocator methods should stay this way. Mangling the panic related symbols (except <code>rust_begin_unwind</code>) is a good idea.</p>",
        "id": 247437665,
        "sender_full_name": "bjorn3",
        "timestamp": 1627463864
    },
    {
        "content": "<p>even if we decide to stabilize them, I don't think they should look <em>anything</em> like C symbols</p>",
        "id": 247438234,
        "sender_full_name": "eddyb",
        "timestamp": 1627464291
    },
    {
        "content": "<p><em>and</em> they need to be versioned (whether tied to Rust version or not)</p>",
        "id": 247438268,
        "sender_full_name": "eddyb",
        "timestamp": 1627464315
    },
    {
        "content": "<p>to avoid backtraces looking terrible, one earlier idea of mine was using v0 mangling but with a special hashless crate root</p>",
        "id": 247438389,
        "sender_full_name": "eddyb",
        "timestamp": 1627464393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/upstreaming.20LLVM.20patch.20for.20__rust_.20alloc.20functions/near/247438234\">said</a>:</p>\n<blockquote>\n<p>even if we decide to stabilize them, I don't think they should look <em>anything</em> like C symbols</p>\n</blockquote>\n<p>If they don't, you can't call them from C.</p>",
        "id": 247438395,
        "sender_full_name": "bjorn3",
        "timestamp": 1627464399
    },
    {
        "content": "<p>I mean they'd still be interfaceable with C, they should just not follow any existing naming conventions</p>",
        "id": 247438416,
        "sender_full_name": "eddyb",
        "timestamp": 1627464420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/upstreaming.20LLVM.20patch.20for.20__rust_.20alloc.20functions/near/247438268\">said</a>:</p>\n<blockquote>\n<p><em>and</em> they need to be versioned (whether tied to Rust version or not)</p>\n</blockquote>\n<p><code>alloc::Global</code> isn't versioned either.</p>",
        "id": 247438432,
        "sender_full_name": "bjorn3",
        "timestamp": 1627464427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/upstreaming.20LLVM.20patch.20for.20__rust_.20alloc.20functions/near/247438416\">said</a>:</p>\n<blockquote>\n<p>I mean they'd still be interfaceable with C, they should just not follow any existing naming conventions</p>\n</blockquote>\n<p>In what way?</p>",
        "id": 247438477,
        "sender_full_name": "bjorn3",
        "timestamp": 1627464468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/upstreaming.20LLVM.20patch.20for.20__rust_.20alloc.20functions/near/247438389\">said</a>:</p>\n<blockquote>\n<p>to avoid backtraces looking terrible, one earlier idea of mine was using v0 mangling but with a special hashless crate root</p>\n</blockquote>\n<p>this, for example</p>",
        "id": 247438506,
        "sender_full_name": "eddyb",
        "timestamp": 1627464483
    },
    {
        "content": "<p>I see. That would work I guess.</p>",
        "id": 247438575,
        "sender_full_name": "bjorn3",
        "timestamp": 1627464516
    },
    {
        "content": "<p>e.g. <code>_RNvNtC4rust5alloc7realloc</code> would demangle as <code>rust::alloc::realloc</code></p>",
        "id": 247438577,
        "sender_full_name": "eddyb",
        "timestamp": 1627464517
    },
    {
        "content": "<p>and unlike a C-looking or C++-mangled symbol, it's <em>distinctly Rust</em></p>",
        "id": 247438729,
        "sender_full_name": "eddyb",
        "timestamp": 1627464621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> the nice thing is that if we use \"the symbol name of the declaration\", <code>#[link_name = \"...\"]</code> is all it takes to \"stabilize\" any of them</p>",
        "id": 247438950,
        "sender_full_name": "eddyb",
        "timestamp": 1627464790
    },
    {
        "content": "<p>Almost, but not quite. The allocator methods are generated directly by the backend, not as part of any standard library crate.</p>",
        "id": 247439058,
        "sender_full_name": "bjorn3",
        "timestamp": 1627464864
    },
    {
        "content": "<p>I wrote a Pre-RFC: <a href=\"https://hackmd.io/@bjorn3/B18MVoRR_\">https://hackmd.io/@bjorn3/B18MVoRR_</a> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> do you have any feedback before I post it on i.r-l.o?</p>",
        "id": 247444191,
        "sender_full_name": "bjorn3",
        "timestamp": 1627469459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/upstreaming.20LLVM.20patch.20for.20__rust_.20alloc.20functions/near/247439058\">said</a>:</p>\n<blockquote>\n<p>Almost, but not quite. The allocator methods are generated directly by the backend, not as part of any standard library crate.</p>\n</blockquote>\n<p>they're still \"imported\" somewhere in <code>alloc</code>, so that could serve as the \"source of truth\"</p>",
        "id": 247444439,
        "sender_full_name": "eddyb",
        "timestamp": 1627469679
    },
    {
        "content": "<p>I guess so. There is currently no direction connection between the two though. <code>liballoc</code> simply uses <code>extern \"C\" { fn __rust_alloc(...</code> without a lang item.</p>",
        "id": 247444498,
        "sender_full_name": "bjorn3",
        "timestamp": 1627469753
    },
    {
        "content": "<p>right, but that's trivially fixable</p>",
        "id": 247444530,
        "sender_full_name": "eddyb",
        "timestamp": 1627469763
    },
    {
        "content": "<p><a href=\"https://internals.rust-lang.org/t/pre-rfc-support-using-the-rust-allocator-from-c/15097\">https://internals.rust-lang.org/t/pre-rfc-support-using-the-rust-allocator-from-c/15097</a></p>",
        "id": 247448169,
        "sender_full_name": "bjorn3",
        "timestamp": 1627472693
    },
    {
        "content": "<p>oh no I didn't finish writing and sending my message, found this in Zulip:</p>\n<blockquote>\n<p>anyway, I have no feedback on the Pre-RFC, other that some kind of versioning might be desirable, tho most choices we might make for the names still allow to add some kind of extra information later - tho either way, stabilizing means that whatever usecases we allow have to always be supported (which, yes, as you've mentioned, would</p>\n</blockquote>",
        "id": 247449692,
        "sender_full_name": "eddyb",
        "timestamp": 1627473809
    },
    {
        "content": "<p>not sure what I wanted to say more, I guess that while it would always be <em>possible</em> to support today's exact set of functions and ABI, we may not want that if we e.g. add another method to the trait, with a default implementation, that we do want to allow it being overriden by a global allocator, and which we'd proxy through the symbols that would be stabilized</p>",
        "id": 247449957,
        "sender_full_name": "eddyb",
        "timestamp": 1627473974
    },
    {
        "content": "<p>we couldn't do that if we promised C code could implement an allocator, because they'd be missing the function</p>",
        "id": 247449985,
        "sender_full_name": "eddyb",
        "timestamp": 1627473997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/upstreaming.20LLVM.20patch.20for.20__rust_.20alloc.20functions/near/247449985\">said</a>:</p>\n<blockquote>\n<p>we couldn't do that if we promised C code could implement an allocator, because they'd be missing the function</p>\n</blockquote>\n<p>Promising this would require more than my Pre-RFC as currently there is no way to tell rustc that you wrote a global allocator without actually defining it at the same place, so rustc will either error out due to no global allocator existing in it's view or try to generate an allocator shim for libstd's default allocator.</p>",
        "id": 247450126,
        "sender_full_name": "bjorn3",
        "timestamp": 1627474088
    },
    {
        "content": "<p>instead of upstreaming rust details, could LLVM get a new API for registering allocator details?</p>",
        "id": 247488374,
        "sender_full_name": "cuviper",
        "timestamp": 1627492604
    },
    {
        "content": "<p>That's probably worth discussing with upstream. I'm happy to try and shake a tree on my side and see if there's anyone from our stable of LLVM hackers that would be interested in having the conversation. Let me know?</p>",
        "id": 247495312,
        "sender_full_name": "durin42",
        "timestamp": 1627495674
    },
    {
        "content": "<p>just to be clear, \"registering\" might not be necessary if we can have attributes/metadata instead, to annotate functions directly</p>",
        "id": 247499311,
        "sender_full_name": "eddyb",
        "timestamp": 1627497494
    },
    {
        "content": "<p>idk how willing LLVM is to retire their hacky symbol hardcoding practices</p>",
        "id": 247499371,
        "sender_full_name": "eddyb",
        "timestamp": 1627497536
    },
    {
        "content": "<p>I'll try and shake a tree and see if they're willing to consider something.</p>",
        "id": 247501269,
        "sender_full_name": "durin42",
        "timestamp": 1627498360
    },
    {
        "content": "<p>I recall there being some effort around making allocation optimization agnostic to specific symbol names.</p>",
        "id": 247502936,
        "sender_full_name": "nagisa",
        "timestamp": 1627499051
    },
    {
        "content": "<p>not sure where it was, but there was definitely some discussion about that before.</p>",
        "id": 247502956,
        "sender_full_name": "nagisa",
        "timestamp": 1627499063
    },
    {
        "content": "<p>and yes, I believe it was a metadata annotation on the declaration or somesuch.</p>",
        "id": 247503016,
        "sender_full_name": "nagisa",
        "timestamp": 1627499093
    },
    {
        "content": "<p>Similar to GCC's <code>__attribute((malloc))</code>?</p>",
        "id": 247503289,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1627499228
    },
    {
        "content": "<p>Sort of. I don't know offhand if there are other requirements imposed by LLVM for allocation functions than just no-aliases.</p>",
        "id": 247503646,
        "sender_full_name": "nagisa",
        "timestamp": 1627499391
    },
    {
        "content": "<p>So, my LLVM experts say it's plausible that we could implement more attributes in LLVM, and thread that through. I might give that a shot.</p>",
        "id": 247602894,
        "sender_full_name": "durin42",
        "timestamp": 1627574048
    }
]