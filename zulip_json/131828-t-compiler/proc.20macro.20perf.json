[
    {
        "content": "<p>Yes, I’ve been reading it! Though I’ll admit I can only really claim to have skimmed a lot of it so far :)</p>",
        "id": 260860780,
        "sender_full_name": "Alexis King",
        "timestamp": 1636491780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456123\">@Alexis King</span> HIR lowering needs to be incremental before it's possible for resolving to be incremental. See most of the PRs by <span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> : <a href=\"https://github.com/rust-lang/rust/pulls/cjgillot\">https://github.com/rust-lang/rust/pulls/cjgillot</a></p>\n<p>If resolving were incremental it would fix quite a lot of rustdoc's problems, but that's still probably several years out. <a href=\"https://github.com/rust-lang/rust/issues/83761\">https://github.com/rust-lang/rust/issues/83761</a></p>",
        "id": 260861075,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636491911
    },
    {
        "content": "<p>I wouldn't expect the time saved from not running the resolver to be significant, but it might cause downstream queries not to be rerun, which could save a lot of time</p>",
        "id": 260861233,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636491973
    },
    {
        "content": "<blockquote>\n<p>Do you know if this causes meaningful compile-time perf issues in real programs?</p>\n</blockquote>\n<p>It depends a lot on the program. For some programs, link time is the largest factor especially in incremental scenarios. Other programs lean heavily into type-level programming and trait resolution takes a significant amount of time. </p>\n<p>Usually macro expansion isn't a significant amount of time because if it does a while to run, it's usually generating a lot of code which then takes much longer to type check, codegen, etc.</p>",
        "id": 260861307,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1636492010
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/The.20state.20of.20proc.20macros/near/260861075\">said</a>:</p>\n<blockquote>\n<p>HIR lowering needs to be incremental before it's possible for resolving to be incremental.</p>\n</blockquote>\n<p>Ah, that makes sense, thanks… I don’t think I understand the rustdoc issue you linked, but I think that’s probably okay for now, haha</p>",
        "id": 260861800,
        "sender_full_name": "Alexis King",
        "timestamp": 1636492253
    },
    {
        "content": "<p>yeah it's quite complicated <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> and not really related to macros</p>",
        "id": 260861854,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636492286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/131828-t-compiler/topic/The.20state.20of.20proc.20macros/near/260861307\">said</a>:</p>\n<blockquote>\n<p>Usually macro expansion isn't a significant amount of time because if it does a while to run, it's usually generating a lot of code which then takes much longer to type check, codegen, etc.</p>\n</blockquote>\n<p>But the typechecking, codegen, etc. can be incrementalized, right? Whereas the macroexpansion currently cannot be, so I don’t immediately see how it would necessarily be in the margins</p>",
        "id": 260861948,
        "sender_full_name": "Alexis King",
        "timestamp": 1636492323
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"456123\">@Alexis King</span> consider running <code>-Ztime-passes</code> on a rust crate and seeing how long it takes in practice</p>",
        "id": 260862031,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636492366
    },
    {
        "content": "<p>Sure—is there a particular crate that would be a good test here/uses a lot of proc macros? I am afraid I am not very familiar at all with the Rust ecosystem</p>",
        "id": 260862227,
        "sender_full_name": "Alexis King",
        "timestamp": 1636492448
    },
    {
        "content": "<p>here's a random one for cargo: <a href=\"https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=incr-patched:%20println&amp;benchmark=cargo-opt\">https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=incr-patched:%20println&amp;benchmark=cargo-opt</a></p>",
        "id": 260862526,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636492577
    },
    {
        "content": "<p>notice how codegen vastly dominates the time</p>",
        "id": 260862547,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636492590
    },
    {
        "content": "<p>wow it really just be all LLVM huh <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 260862589,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636492617
    },
    {
        "content": "<p>here's one from the same commit for diesel, which is extremely trait heavy: <a href=\"https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=full&amp;benchmark=diesel-opt\">https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=full&amp;benchmark=diesel-opt</a></p>",
        "id": 260862647,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636492648
    },
    {
        "content": "<p>is <code>expand_crate</code> macro stuff</p>",
        "id": 260862685,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636492674
    },
    {
        "content": "<p>yeah, macro expansion + resolution (they happen at the same time)</p>",
        "id": 260862741,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636492685
    },
    {
        "content": "<p>I've noticed that <code>expand_crate</code> takes up a significant percentage of rustdoc doc runs (although perhaps that's resolution as Joshua said)</p>",
        "id": 260862820,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636492734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> rustdoc also does a lot less work than the compiler usually</p>",
        "id": 260862884,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636492760
    },
    {
        "content": "<p>Yeah, but it's still worth improving rustdoc run times :)</p>",
        "id": 260862942,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636492788
    },
    {
        "content": "<p>I would rather reduce the amount of memory resolution uses; <a href=\"https://github.com/microsoft/windows-docs-rs/pull/6#issuecomment-904022881\">https://github.com/microsoft/windows-docs-rs/pull/6#issuecomment-904022881</a> has some truly horrifying numbers lol</p>",
        "id": 260863112,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636492857
    },
    {
        "content": "<p>(reducing memory usage will probably make it faster anyway since malloc is doing less work)</p>",
        "id": 260863218,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636492907
    },
    {
        "content": "<blockquote>\n<p>(for the curious, here is the output of -Ztime-passes on bindings, I hope to take a closer look at it this weekend)</p>\n</blockquote>\n<p>oof</p>",
        "id": 260863247,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636492916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/The.20state.20of.20proc.20macros/near/260862547\">said</a>:</p>\n<blockquote>\n<p>notice how codegen vastly dominates the time</p>\n</blockquote>\n<p>what I’d really like to see are the numbers for an incremental rebuild after a trivial change (i.e. one that invalidates almost nothing in the cache) with no LTO and no optimizations… which I can try myself, ofc, I was just curious if anyone was already complaining about this</p>",
        "id": 260863449,
        "sender_full_name": "Alexis King",
        "timestamp": 1636492996
    },
    {
        "content": "<p>You can get those numbers from rustc-perf as well</p>",
        "id": 260863506,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636493024
    },
    {
        "content": "<p>that <em>was</em> incremental :P</p>",
        "id": 260863536,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493041
    },
    {
        "content": "<p>it says \"incr-patched\" at the top</p>",
        "id": 260863576,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493045
    },
    {
        "content": "<p>Yeah, I just noticed that <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 260863589,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636493050
    },
    {
        "content": "<p>Although that's an opt build</p>",
        "id": 260863621,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636493067
    },
    {
        "content": "<p>debug: <a href=\"https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=incr-patched:%20println&amp;benchmark=cargo-debug\">https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=incr-patched:%20println&amp;benchmark=cargo-debug</a><br>\ncheck: <a href=\"https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=incr-patched:%20println&amp;benchmark=cargo-check\">https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=incr-patched:%20println&amp;benchmark=cargo-check</a></p>",
        "id": 260863646,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493080
    },
    {
        "content": "<p>Here's a debug build: <a href=\"https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=incr-patched:%20println&amp;benchmark=cargo-debug\">https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=incr-patched:%20println&amp;benchmark=cargo-debug</a></p>",
        "id": 260863651,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636493081
    },
    {
        "content": "<p>Yes, I did say “with no LTO and no optimizations” for a reason :) So thanks!</p>",
        "id": 260863669,
        "sender_full_name": "Alexis King",
        "timestamp": 1636493091
    },
    {
        "content": "<p>whats the <code>check:</code> one from?</p>",
        "id": 260863714,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636493116
    },
    {
        "content": "<p>it doesnt seem to actually say the crate</p>",
        "id": 260863726,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636493122
    },
    {
        "content": "<p>Cargo</p>",
        "id": 260863734,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636493127
    },
    {
        "content": "<blockquote>\n<p>07acdb48a0: Self profile results for <strong>cargo</strong>-check run incr-patched: println</p>\n</blockquote>",
        "id": 260863756,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636493140
    },
    {
        "content": "<p>(The benchmark <em>is</em> cargo)</p>",
        "id": 260863772,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636493151
    },
    {
        "content": "<p>i thought that was the command being run...</p>",
        "id": 260863775,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636493152
    },
    {
        "content": "<p>lol</p>",
        "id": 260863780,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636493156
    },
    {
        "content": "<p>Yeah, the UI could be improved</p>",
        "id": 260863858,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636493177
    },
    {
        "content": "<p>okay wow then.. so cargo also spends most of its time doing macro expansion?</p>",
        "id": 260863873,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636493185
    },
    {
        "content": "<p>What is the actual patch being applied before the incremental rebuild here?</p>",
        "id": 260863879,
        "sender_full_name": "Alexis King",
        "timestamp": 1636493188
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rustc-perf/blob/master/collector/benchmarks/cargo/0-println.patch\">https://github.com/rust-lang/rustc-perf/blob/master/collector/benchmarks/cargo/0-println.patch</a></p>",
        "id": 260863925,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493215
    },
    {
        "content": "<p>Ah cool, thanks… that’s definitely still a lot of time in codegen, then, haha</p>",
        "id": 260863985,
        "sender_full_name": "Alexis King",
        "timestamp": 1636493252
    },
    {
        "content": "<p>do we have these benches setup to also give timings with cg-cranelift</p>",
        "id": 260864123,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636493316
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456123\">Alexis King</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proc.20macro.20perf/near/260863985\">said</a>:</p>\n<blockquote>\n<p>Ah cool, thanks… that’s definitely still a lot of time in codegen, then, haha</p>\n</blockquote>\n<p>see also <a href=\"https://github.com/rust-lang/rust/issues/82685\">https://github.com/rust-lang/rust/issues/82685</a> and <a href=\"https://github.com/rust-lang/rust/issues/89308\">https://github.com/rust-lang/rust/issues/89308</a></p>",
        "id": 260864131,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326176\">@Boxy [she/her]</span> no, not to my knowledge</p>",
        "id": 260864137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493324
    },
    {
        "content": "<p>we should land <a href=\"https://github.com/rust-lang/rust/pull/81746\">https://github.com/rust-lang/rust/pull/81746</a> first IMO</p>",
        "id": 260864217,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493360
    },
    {
        "content": "<p>the expansion time does still seem less trivial to me than one would probably hope given how little has changed, but it does seem like probably small potatoes relatively speaking, I guess</p>",
        "id": 260864226,
        "sender_full_name": "Alexis King",
        "timestamp": 1636493367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proc.20macro.20perf/near/260863646\">said</a>:</p>\n<blockquote>\n<p>check: <a href=\"https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=incr-patched:%20println&amp;benchmark=cargo-check\">https://perf.rust-lang.org/detailed-query.html?sort_idx=-2&amp;commit=07acdb48a0e0b22d08a45e3ced0378e0027b40eb&amp;run_name=incr-patched:%20println&amp;benchmark=cargo-check</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"456123\">@Alexis King</span> FWIW it's pretty large in the <code>check</code> build</p>",
        "id": 260864274,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493386
    },
    {
        "content": "<p>but also, that's counting resolution <em>and</em> MBE expansion <em>and</em> running proc-macros</p>",
        "id": 260864467,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493472
    },
    {
        "content": "<p>plus things like <code>include_str</code> which touch disk</p>",
        "id": 260864484,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493479
    },
    {
        "content": "<p>unsure if out-of-line modules are loaded from disk during parsing or not</p>",
        "id": 260864530,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493503
    },
    {
        "content": "<p>this thread is a rollercoaster</p>",
        "id": 260864533,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636493504
    },
    {
        "content": "<p>yeah, I saw that… I was thinking maybe that wasn’t a huge deal because it wasn’t clear to me how important that was, but I guess that’s a bit of a stupid thought in retrospect, given all the tooling support needs to pay that time but doesn’t need to do any codegen</p>",
        "id": 260864541,
        "sender_full_name": "Alexis King",
        "timestamp": 1636493510
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"326176\">Boxy [she/her]</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proc.20macro.20perf/near/260864533\">said</a>:</p>\n<blockquote>\n<p>this thread is a rollercoaster</p>\n</blockquote>\n<p>josh's top tip for recruiting people to work on rustc: flood them with information until they find some of it interesting <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 260864677,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"456123\">Alexis King</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proc.20macro.20perf/near/260864541\">said</a>:</p>\n<blockquote>\n<p>yeah, I saw that… I was thinking maybe that wasn’t a huge deal because it wasn’t clear to me how important that was, but I guess that’s a bit of a stupid thought in retrospect, given all the tooling support needs to pay that time but doesn’t need to do any codegen</p>\n</blockquote>\n<p>yeah I would say <code>check</code> time is pretty important; there's a reason it started being measured way before rustdoc</p>",
        "id": 260864793,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493617
    },
    {
        "content": "<p>yeah I am coming from a haskell background where all our tooling is broken anyway so all that matters is <code>-O0</code> build times <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 260864929,
        "sender_full_name": "Alexis King",
        "timestamp": 1636493655
    },
    {
        "content": "<p>That sure is what i recall of Haskell</p>",
        "id": 260864982,
        "sender_full_name": "Lokathor",
        "timestamp": 1636493679
    },
    {
        "content": "<p>(sort of joking, it’s gotten better in recent years, but it’s still fun to laugh about it)</p>",
        "id": 260864984,
        "sender_full_name": "Alexis King",
        "timestamp": 1636493680
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proc.20macro.20perf/near/260864484\">said</a>:</p>\n<blockquote>\n<p>plus things like <code>include_str</code> which touch disk</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proc.20macro.20perf/near/260864530\">said</a>:</p>\n<blockquote>\n<p>unsure if out-of-line modules are loaded from disk during parsing or not</p>\n</blockquote>\n<p>if someone wants to work on expansion perf, measuring this and other built-in macros separately might be a good first step</p>",
        "id": 260865216,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493776
    },
    {
        "content": "<p>is <code>check</code> a good thing to measure if you want to measure like... \"IDE response time\" of spitting out errors</p>",
        "id": 260865322,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636493836
    },
    {
        "content": "<p>yeah, I’d be interested in trying to measure the cost a bit more carefully eventually, but for now I’m mostly just trying to get a vague intuition for where the problem points of the current impl are</p>",
        "id": 260865337,
        "sender_full_name": "Alexis King",
        "timestamp": 1636493840
    },
    {
        "content": "<p>I'm not actually sure how separate rust-analyser is from rustc...</p>",
        "id": 260865346,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636493846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"326176\">@Boxy [she/her]</span> depends on the IDE? rust-analyzer does its own lints but also runs <code>cargo check</code> in the background</p>",
        "id": 260865378,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493858
    },
    {
        "content": "<p>it's a separate implementation right now unfortunately, only the lexer is shared</p>",
        "id": 260865388,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493868
    },
    {
        "content": "<p>only RLS is super duper reliant on <code>cargo check</code> to my knowledge</p>",
        "id": 260865464,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636493884
    },
    {
        "content": "<p>I've been thinking of trying to add more fine-grained measurements for <code>expand_crate</code> for a while now; I think that'd definitely be helpful</p>",
        "id": 260865506,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636493910
    },
    {
        "content": "<p>I've certainly managed to crash the RA suggestions box a lot lately by having 5000+ constants</p>",
        "id": 260865589,
        "sender_full_name": "Lokathor",
        "timestamp": 1636493967
    },
    {
        "content": "<p>My general experience of working on macros and macro-related things has been that everyone is extremely skeptical all the time about them making compile times and error messages terrible, so I would like to at least know roughly where the bar is currently set before I consider subjecting myself to any of that scrutiny :)</p>",
        "id": 260865740,
        "sender_full_name": "Alexis King",
        "timestamp": 1636494023
    },
    {
        "content": "<p>oh heh that's quite funny given that the immediate reaction at the top of the topic was \"macros don't take that long to expand\"</p>",
        "id": 260865831,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494076
    },
    {
        "content": "<p>yeah i won't count the number of code crimes I've done in the name of avoiding a macro \"because they slow the build\"</p>",
        "id": 260865857,
        "sender_full_name": "Lokathor",
        "timestamp": 1636494092
    },
    {
        "content": "<p>oh my god</p>",
        "id": 260865900,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636494117
    },
    {
        "content": "<p>macros <em>destroy</em> compile times of ECS lol</p>",
        "id": 260865908,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636494122
    },
    {
        "content": "<p>I should go bench one and see if its macro expansion or the volume of generated code that causes issues</p>",
        "id": 260866029,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1636494162
    },
    {
        "content": "<p>yeah I think it would be nice to find a way to make that somehow not be such a point of extreme suspicion</p>",
        "id": 260866159,
        "sender_full_name": "Alexis King",
        "timestamp": 1636494233
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proc.20macro.20perf/near/260865216\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proc.20macro.20perf/near/260864484\">said</a>:</p>\n<blockquote>\n<p>plus things like <code>include_str</code> which touch disk</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proc.20macro.20perf/near/260864530\">said</a>:</p>\n<blockquote>\n<p>unsure if out-of-line modules are loaded from disk during parsing or not</p>\n</blockquote>\n<p>if someone wants to work on expansion perf, measuring this and other built-in macros separately might be a good first step</p>\n</blockquote>\n<p>:P</p>",
        "id": 260866236,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494260
    },
    {
        "content": "<p>I've even started to avoid <code>write!</code> when possible</p>",
        "id": 260866290,
        "sender_full_name": "Lokathor",
        "timestamp": 1636494297
    },
    {
        "content": "<p>Racket compilation is, in fact, pretty slow, but it’s sort of an extreme point on various spectra, so I don’t think it necessarily suggests all uses of macros have to be meaningfully slower than just parsing and compiling the code they expand to</p>",
        "id": 260866303,
        "sender_full_name": "Alexis King",
        "timestamp": 1636494303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/proc.20macro.20perf/near/260866290\">said</a>:</p>\n<blockquote>\n<p>I've even started to avoid <code>write!</code> when possible</p>\n</blockquote>\n<p>that's because <code>write!</code> generates slow code though, not because write is slow to expand</p>",
        "id": 260866323,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494312
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76490\">https://github.com/rust-lang/rust/issues/76490</a></p>",
        "id": 260866462,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636494373
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> to <a class=\"stream-topic\" data-stream-id=\"247081\" href=\"/#narrow/stream/247081-t-compiler.2Fperformance/topic/proc.20macro.20perf\">#t-compiler/performance &gt; proc macro perf</a></p>",
        "id": 260867013,
        "sender_full_name": "Notification Bot",
        "timestamp": 1636494676
    }
]