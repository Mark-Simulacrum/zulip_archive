[
    {
        "content": "<p>It seems that the implementation in rustc to allow rustfix to remove unused imports was in <a href=\"https://github.com/rust-lang/rust/issues/56645\">#56645</a>. But there's a limitation in the JSON error format that prevents rustfix from applying the suggestions in all cases (<a href=\"https://github.com/rust-lang/rust/issues/53934\">#53934</a>). However, I ran <code>cargo fix</code> using a master version of rustc (because I'm working on clippy) and none of the imports were fixed. The warnings in this case are:</p>\n<div class=\"codehilite\"><pre><span></span><code>warning: unused import: `crate::utils::paths`\n --&gt; clippy_lints/src/assertions_on_constants.rs:2:5\n  |\n2 | use crate::utils::paths;\n  |     ^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nwarning: unused import: `match_function_call`\n --&gt; clippy_lints/src/assertions_on_constants.rs:4:36\n  |\n4 |     is_direct_expn_of, is_expn_of, match_function_call, match_panic_call, snippet_opt, span_lint_and_help,\n  |                                    ^^^^^^^^^^^^^^^^^^^\n\nwarning: unused imports: `match_def_path`, `paths`\n --&gt; clippy_lints/src/attrs.rs:4:47\n  |\n4 |     first_line_of_span, is_present_in_source, match_def_path, match_panic_def_id, paths, snippet_opt, span_lint,\n  |                                               ^^^^^^^^^^^^^^                      ^^^^^\n\nwarning: unused imports: `BEGIN_PANIC_FMT`, `BEGIN_PANIC`\n --&gt; clippy_lints/src/fallible_impl_from.rs:1:27\n  |\n1 | use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT};\n  |                           ^^^^^^^^^^^  ^^^^^^^^^^^^^^^\n\nwarning: unused imports: `BEGIN_PANIC_FMT`, `BEGIN_PANIC`, `match_def_path`\n --&gt; clippy_lints/src/implicit_return.rs:2:33\n  |\n2 |     fn_has_unsatisfiable_preds, match_def_path, match_panic_def_id,\n  |                                 ^^^^^^^^^^^^^^\n3 |     paths::{BEGIN_PANIC, BEGIN_PANIC_FMT},\n  |             ^^^^^^^^^^^  ^^^^^^^^^^^^^^^\n\nwarning: unused imports: `match_function_call`, `paths`\n --&gt; clippy_lints/src/panic_unimplemented.rs:1:51\n  |\n1 | use crate::utils::{is_direct_expn_of, is_expn_of, match_function_call, match_panic_call, paths, span_lint};\n  |                                                   ^^^^^^^^^^^^^^^^^^^                    ^^^^^\n\nwarning: 6 warnings emitted\n</code></pre></div>\n<p>Why isn't it working?</p>",
        "id": 216030617,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604877411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> are you sure they're marked as <code>MachineApplicable</code>?</p>",
        "id": 216030629,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604877449
    },
    {
        "content": "<p>you can apply suggestions that aren't with <code>__CARGO_FIX_YOLO=1</code></p>",
        "id": 216030635,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604877463
    },
    {
        "content": "<p>Nope, that env var didn't do anything</p>",
        "id": 216030682,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604877490
    },
    {
        "content": "<p>And also the PR that introduced this (<a href=\"https://github.com/rust-lang/rust/issues/56645\">#56645</a>) showed an example of using <code>cargo fix</code> to auto-remove the imports</p>",
        "id": 216030696,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604877527
    },
    {
        "content": "<p>not sure then, sorry</p>",
        "id": 216030706,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604877536
    },
    {
        "content": "<p>Yeah, it's kind of weird</p>",
        "id": 216030713,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604877549
    },
    {
        "content": "<p>Perhaps <span class=\"user-mention silent\" data-user-id=\"121055\">Pietro Albini</span> will know, since they're the one who implemented that PR.</p>",
        "id": 216030724,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604877593
    },
    {
        "content": "<p>(I wish there were a way to ping with low priority or something)</p>",
        "id": 216030769,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604877619
    },
    {
        "content": "<p>haha you can go ahead and ping</p>",
        "id": 216030773,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1604877637
    },
    {
        "content": "<p>Ok :)</p>",
        "id": 216030887,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604877753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> do you know why this isn't working?</p>",
        "id": 216030892,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604877764
    },
    {
        "content": "<p>oooh</p>",
        "id": 216031011,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604877957
    },
    {
        "content": "<p>this is a <em>deep</em> rabbit hole</p>",
        "id": 216031018,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604877962
    },
    {
        "content": "<p>you sure you want to go down it? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 216031055,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604877974
    },
    {
        "content": "<p>Perhaps a little ways down :)</p>",
        "id": 216031064,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604878022
    },
    {
        "content": "<p>so, we need to do multiple replaces in order for rustfixing unused imports to work</p>",
        "id": 216031090,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878075
    },
    {
        "content": "<p>but that's currently impossible in the current json output representation</p>",
        "id": 216031132,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878089
    },
    {
        "content": "<p>Hmm, why multiple replaces?</p>",
        "id": 216031141,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604878115
    },
    {
        "content": "<p>we had like a full session during 2019 all hands but we were not able to get to a definitive solution for it</p>",
        "id": 216031143,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878116
    },
    {
        "content": "<p>And also, why did <code>cargo fix</code> work in your PR?</p>",
        "id": 216031151,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604878134
    },
    {
        "content": "<p>for example, in<br>\nuse foo::{<strong>bar, </strong>baz<strong>, foobar</strong>};<br>\nboth the bold parts need to be removed, and those are two separate replaces</p>",
        "id": 216031179,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878174
    },
    {
        "content": "<p>Hmm, I see.</p>",
        "id": 216031181,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604878183
    },
    {
        "content": "<p>it was supposed to work when there was only one part to remove</p>",
        "id": 216031228,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878216
    },
    {
        "content": "<p>but that was a while ago when I implemented the PR</p>",
        "id": 216031230,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878227
    },
    {
        "content": "<p>dunno why that's not working for single parts to remove right now</p>",
        "id": 216031237,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878253
    },
    {
        "content": "<p>Hmm</p>",
        "id": 216031251,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604878276
    },
    {
        "content": "<p>We could just try to fix one import at a time :)</p>",
        "id": 216031273,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604878312
    },
    {
        "content": "<p>that would emit a warning for each import you want to report</p>",
        "id": 216031360,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878395
    },
    {
        "content": "<p>it would regress the compiler errors UX a lot</p>",
        "id": 216031378,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878418
    },
    {
        "content": "<p>also cc <span class=\"user-mention\" data-user-id=\"119031\">@Esteban KÃ¼ber</span> on this, as a throwback to that all hands session</p>",
        "id": 216031387,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878440
    },
    {
        "content": "<p>Yeah, I didn't mean that way. I realized that I don't know what the error format looks like currently, so I should look at that first before I make any suggestions <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 216031430,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604878463
    },
    {
        "content": "<p>it's basically a json dump of the output you see</p>",
        "id": 216031444,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878501
    },
    {
        "content": "<p>the issue is, the json format supports multiple replacements</p>",
        "id": 216031453,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878525
    },
    {
        "content": "<p>but there is no way to tell if it's a single suggestion with multiple replacements (like in this case) or multiple suggestions with a single replacement like this:</p>\n<p>use std::collections::HashMap;<br>\nuse hashbrown::HashMap;</p>",
        "id": 216031514,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878572
    },
    {
        "content": "<p>I see</p>",
        "id": 216031524,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604878591
    },
    {
        "content": "<p>at the moment all the tools interpret multiple replacements as multiple suggestions with a single replacement each</p>",
        "id": 216031534,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878611
    },
    {
        "content": "<p>so we can't implement this without either silently breaking all the tools, or implementing a json format v2</p>",
        "id": 216031553,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878638
    },
    {
        "content": "<p>Could we instead have a single suggestion that replaces the whole line with a fixed line? Or something like that?</p>",
        "id": 216031575,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604878680
    },
    {
        "content": "<p>iirc that messed up some things, but I don't remember exactly what</p>",
        "id": 216031626,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1604878740
    },
    {
        "content": "<p>Yeah, it's been in my queue to actually address this for ages. I might be able to get to it in the short term, depending on some personal changes.</p>",
        "id": 216034246,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1604882701
    },
    {
        "content": "<p>I really want to make this work better.</p>",
        "id": 216034252,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1604882710
    },
    {
        "content": "<p>Thanks for making so many diagnostics better!</p>",
        "id": 216039781,
        "sender_full_name": "Noah Lev",
        "timestamp": 1604891015
    }
]