[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> this <a href=\"https://github.com/rust-lang/rust/issues/67000\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67000\">#67000</a> is now ready</p>",
        "id": 183360741,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1576245455
    },
    {
        "content": "<p>it sits on top of <a href=\"https://github.com/rust-lang/rust/issues/67192\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67192\">#67192</a></p>",
        "id": 183360761,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1576245479
    },
    {
        "content": "<p>which you were discussing with <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 183360828,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1576245519
    },
    {
        "content": "<p>I need to check that PR again but at some point saw that <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> was asking for some motivation about the PR, well if it helps a bit <a href=\"https://github.com/rust-lang/rust/issues/67000\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67000\">#67000</a> is part of the motivation <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 183360893,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1576245599
    },
    {
        "content": "<p>So the problem with <a href=\"https://github.com/rust-lang/rust/issues/67000\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67000\">#67000</a> is that since we now make all promoteds essentially <code>let tmp = promoted; &amp;tmp</code>, the addr-of-zst-promoted-becomes-integer-pointer logic in codegen isn't triggered anymore, thus causing test failures where we compare the address <code>&amp;()</code> with <code>1</code>. While we could fix this just in codegen, this would severely complicate codegen, and also cause the weird situation where <code>assert!(&amp;() as *const () as usize == 1)</code> fails at compile-time but works at runtime</p>",
        "id": 183361356,
        "sender_full_name": "oli",
        "timestamp": 1576245900
    },
    {
        "content": "<p>I am questioning those tests, Is there an RFC/FCP that we guarantee the address of temporary 1-ZSTs to be 1?</p>",
        "id": 184060744,
        "sender_full_name": "RalfJ",
        "timestamp": 1577032554
    },
    {
        "content": "<p>nope</p>",
        "id": 184066382,
        "sender_full_name": "oli",
        "timestamp": 1577043133
    },
    {
        "content": "<p>should we just brick them all?</p>",
        "id": 184066387,
        "sender_full_name": "oli",
        "timestamp": 1577043142
    },
    {
        "content": "<p>Hmm, interesting</p>",
        "id": 184099123,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577101325
    },
    {
        "content": "<p>I'm trying to remember. I certainly don't recall <em>guaranteeing</em> the address of a ZST to be anything other than \"not null\"</p>",
        "id": 184099161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577101427
    },
    {
        "content": "<p>we don't afaict, but we have done some work to make the addresses whatever <code>std::ptr::dangling</code> returns: <a href=\"https://github.com/rust-lang/rust/pull/62487\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62487\">https://github.com/rust-lang/rust/pull/62487</a></p>",
        "id": 184099312,
        "sender_full_name": "oli",
        "timestamp": 1577101678
    },
    {
        "content": "<p>Yeah, I had a vague memory of that</p>",
        "id": 184100221,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577102977
    },
    {
        "content": "<p>We should I guess clarify exactly <em>what</em> we are specifying; there may be de facto reliance on <code>dangling</code></p>",
        "id": 184100232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577102996
    },
    {
        "content": "<p>( cc <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> )</p>",
        "id": 184100284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577103024
    },
    {
        "content": "<p>but I didn't interpret that PR as any form of \"guarantee\" for sure</p>",
        "id": 184100291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577103038
    },
    {
        "content": "<p>I didnt' <em>quite</em> understand where the various perf/compiler wins came from there, I guess maybe it had more to do with however we were compiling things before..?</p>",
        "id": 184100301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1577103058
    },
    {
        "content": "<p>the perf wins came from llvm not creating allocations</p>",
        "id": 184103097,
        "sender_full_name": "oli",
        "timestamp": 1577106641
    },
    {
        "content": "<p>I don't think any code <em>can</em> be relying on it, because <code>let x: [i32; 0] = []; let y = &amp;[x]</code> will not give <code>y</code> a dangling address</p>",
        "id": 184103382,
        "sender_full_name": "oli",
        "timestamp": 1577106893
    }
]