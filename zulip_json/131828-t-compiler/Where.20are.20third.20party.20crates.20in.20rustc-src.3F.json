[
    {
        "content": "<p>Rust stdlib uses certain external crates internally: <a href=\"https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/library/std/src/os/mod.rs#L6\">https://github.com/rust-lang/rust/blob/5565241f65cf402c3dbcb55dd492f172c473d4ce/library/std/src/os/mod.rs#L6</a></p>\n<p>However, those crates seem to be missing from the rustc-src component:</p>\n<div class=\"codehilite\"><pre><span></span><code>λ exa -l (rustc --print sysroot)/lib/rustlib/src/rust/library\ndrwxr-xr-x - matklad 11 Oct 18:21 alloc\ndrwxr-xr-x - matklad 11 Oct 18:21 backtrace\ndrwxr-xr-x - matklad 11 Oct 18:21 core\ndrwxr-xr-x - matklad 11 Oct 18:21 panic_abort\ndrwxr-xr-x - matklad 11 Oct 18:21 panic_unwind\ndrwxr-xr-x - matklad 11 Oct 18:21 proc_macro\ndrwxr-xr-x - matklad 11 Oct 18:21 profiler_builtins\ndrwxr-xr-x - matklad 11 Oct 18:21 rtstartup\ndrwxr-xr-x - matklad 11 Oct 18:21 rustc-std-workspace-alloc\ndrwxr-xr-x - matklad 11 Oct 18:21 rustc-std-workspace-core\ndrwxr-xr-x - matklad 11 Oct 18:21 rustc-std-workspace-std\ndrwxr-xr-x - matklad 11 Oct 18:21 std\ndrwxr-xr-x - matklad 11 Oct 18:21 stdarch\ndrwxr-xr-x - matklad 11 Oct 18:21 term\ndrwxr-xr-x - matklad 11 Oct 18:21 test\ndrwxr-xr-x - matklad 11 Oct 18:21 unwind\n</code></pre></div>\n\n\n<p>Are they present anywhere else?</p>",
        "id": 213309921,
        "sender_full_name": "matklad",
        "timestamp": 1602690423
    },
    {
        "content": "<p>IDEs would need those to analyzer everything properly...</p>",
        "id": 213309986,
        "sender_full_name": "matklad",
        "timestamp": 1602690447
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> , I think you've looked a bit into this</p>",
        "id": 213310028,
        "sender_full_name": "matklad",
        "timestamp": 1602690462
    },
    {
        "content": "<p>Yeah, this part looks intentional to me – we might not want to vendor every dependency</p>",
        "id": 213310113,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602690489
    },
    {
        "content": "<p>They're already locked in by Cargo.lock</p>",
        "id": 213310164,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602690510
    },
    {
        "content": "<p>Hm.... Seems more logical to bundle everything into rust-src -- I don't think there should be fundamental differnece between library crates in rust-lang/rust and library crates elsewhere</p>",
        "id": 213310380,
        "sender_full_name": "matklad",
        "timestamp": 1602690604
    },
    {
        "content": "<p>Maybe, yeah</p>",
        "id": 213310434,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602690629
    },
    {
        "content": "<p>Would be nice not to have to do network requests to download them</p>",
        "id": 213310482,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602690646
    },
    {
        "content": "<p>Yeah...</p>",
        "id": 213310497,
        "sender_full_name": "matklad",
        "timestamp": 1602690653
    },
    {
        "content": "<p>Might be more of a T-infra question though</p>",
        "id": 213310567,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602690683
    },
    {
        "content": "<p>OTOH, running <code>cargo metadat</code> from withing rust-analyzer would be organizationally less painful than patching dist</p>",
        "id": 213310601,
        "sender_full_name": "matklad",
        "timestamp": 1602690698
    },
    {
        "content": "<p>But that'd require <code>RUSTC_BOOTSTRAP</code>, as ws crates might use nightly cargo features</p>",
        "id": 213310777,
        "sender_full_name": "matklad",
        "timestamp": 1602690749
    },
    {
        "content": "<p>even for <code>cargo metadata</code>?</p>",
        "id": 213310831,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602690771
    },
    {
        "content": "<p>Hm, maybe not? Quick testing works, but I remember this not working a while ago...</p>",
        "id": 213310984,
        "sender_full_name": "matklad",
        "timestamp": 1602690841
    },
    {
        "content": "<p>THis also seems like another argument in favor of moving std to a separate workspace.</p>",
        "id": 213311091,
        "sender_full_name": "matklad",
        "timestamp": 1602690869
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 213311120,
        "sender_full_name": "matklad",
        "timestamp": 1602690882
    },
    {
        "content": "<p>There's a rust-src component which vendors everything</p>",
        "id": 213311482,
        "sender_full_name": "simulacrum",
        "timestamp": 1602691016
    },
    {
        "content": "<p>We can vendor just std deps but iirc there's no easy way to subset a cargo.lock</p>",
        "id": 213311567,
        "sender_full_name": "simulacrum",
        "timestamp": 1602691060
    },
    {
        "content": "<p>Or I guess subgraph</p>",
        "id": 213311592,
        "sender_full_name": "simulacrum",
        "timestamp": 1602691073
    },
    {
        "content": "<p>Cc <span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span></p>",
        "id": 213311608,
        "sender_full_name": "simulacrum",
        "timestamp": 1602691085
    },
    {
        "content": "<p>Hm, <code>rust-src</code> is what I am talking about, and it doesn't have 3rd party crates</p>",
        "id": 213313448,
        "sender_full_name": "matklad",
        "timestamp": 1602691777
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>18:09:32|~/projects/rust-analyzer|master✓\nλ rustup component add rustc-dev\ninfo: component &#39;rustc-dev&#39; for target &#39;x86_64-unknown-linux-gnu&#39; is up to date\n\n18:09:41|~/projects/rust-analyzer|master✓\nλ rustup component add rust-src\ninfo: component &#39;rust-src&#39; is up to date\n\n18:09:47|~/projects/rust-analyzer|master✓\nλ fd -e toml . (rustc --print sysroot) | rg cfg\n</code></pre></div>",
        "id": 213313555,
        "sender_full_name": "matklad",
        "timestamp": 1602691804
    },
    {
        "content": "<p>I think you're talking about different things (locking dependency versions in the lockfile vs. copying the sources of all dependencies into the rust-src component)</p>",
        "id": 213313645,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1602691834
    },
    {
        "content": "<p>Yea, I don't think <code>cargo vendor</code> can do just a partial vendor.  <code>bootstrap</code> would need to collect the dependencies.  How much larger would that make the rust-src component?  I would be concerned about it getting too bloated, but I suspect it's not too much.  I don't know anything about ra, but can it use whatever mechanism it uses for normal user dependencies to access the source? Or does it need rmeta files or something?</p>",
        "id": 213313984,
        "sender_full_name": "Eric Huss",
        "timestamp": 1602691959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120518\">@Eric Huss</span> if there are <code>Cargo.toml</code> and <code>Cargo.lock</code> in <code>rust-src</code> and stable <code>cargo metadata</code> would work for those, that'll work</p>",
        "id": 213317459,
        "sender_full_name": "matklad",
        "timestamp": 1602693426
    },
    {
        "content": "<p>The drawbacks would be:</p>\n<ul>\n<li>internet access required to get full completions for std</li>\n<li>we'd have to manually prune the <code>cargo metadata</code> graph to separate <code>library</code> from <code>compiler</code></li>\n<li>no super-bullet-proof guarantee that we use the same sources that were used to compile the library</li>\n</ul>",
        "id": 213317681,
        "sender_full_name": "matklad",
        "timestamp": 1602693514
    },
    {
        "content": "<p>I see.  We've talked about making a synthetic <code>Cargo.toml</code> (<a href=\"https://github.com/rust-lang/wg-cargo-std-aware/issues/27\">https://github.com/rust-lang/wg-cargo-std-aware/issues/27</a>), but it might be tricky.</p>",
        "id": 213318171,
        "sender_full_name": "Eric Huss",
        "timestamp": 1602693746
    }
]