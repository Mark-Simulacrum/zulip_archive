[
    {
        "content": "<p>Currently, <code>rustc</code> does not optimize out simple occasions such as <code>Box::new(*ptr)</code> where <code>ptr</code> is a <code>Box&lt;T&gt;</code>. The compiler still emits a deallocation and an allocation in optimization build. Is there any reason for not optimizing out the memory allocations?</p>",
        "id": 272374489,
        "sender_full_name": "Sirui Mu",
        "timestamp": 1645173745
    },
    {
        "content": "<p>There is actually an LLVM optimization just for this case, but it's never worked reliably I think</p>",
        "id": 272375469,
        "sender_full_name": "oli",
        "timestamp": 1645174374
    },
    {
        "content": "<p>LLVM doesn't know about the size of the original allocation. It may be bigger than the new allocation, in which case optimizing the alloc and dealloc away would increase memory usage.</p>",
        "id": 272375478,
        "sender_full_name": "bjorn3",
        "timestamp": 1645174382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> There is an optimization for the opposite case. (alloc then dealloc the same allocation)</p>",
        "id": 272375534,
        "sender_full_name": "bjorn3",
        "timestamp": 1645174428
    },
    {
        "content": "<p>I think this optimization can be done on the MIR. Does it worth implementing?</p>",
        "id": 272376054,
        "sender_full_name": "Sirui Mu",
        "timestamp": 1645174774
    },
    {
        "content": "<p>How common is it? I don't think it is really common.</p>",
        "id": 272376230,
        "sender_full_name": "bjorn3",
        "timestamp": 1645174855
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"347308\">Sirui Mu</span> <a href=\"#narrow/stream/131828-t-compiler/topic/erase.20unnecessary.20heap.20allocations/near/272374489\">said</a>:</p>\n<blockquote>\n<p>The compiler still emits a deallocation and an allocation in optimization build. Is there any reason for not optimizing out the memory allocations?</p>\n</blockquote>\n<p>I opened an issue about this about 2 weeks ago, actually: <a href=\"https://github.com/rust-lang/rust/issues/93707\">https://github.com/rust-lang/rust/issues/93707</a></p>\n<p>With <code>free</code> this would be hard, but since rust's dealloc is passed the layout, I think this would be completely doable.  The LLVM currently looks like</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"w\">  </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">void</span><span class=\"w\"> </span><span class=\"vg\">@__rust_dealloc</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span><span class=\"w\"> </span><span class=\"k\">nonnull</span><span class=\"w\"> </span><span class=\"nv\">%_2.i.i.i.i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"vg\">#4</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nv nv-Anonymous\">%0</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"k\">tail</span><span class=\"w\"> </span><span class=\"k\">call</span><span class=\"w\"> </span><span class=\"k\">dereferenceable_or_null</span><span class=\"p\">(</span><span class=\"m\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">i8</span><span class=\"p\">*</span><span class=\"w\"> </span><span class=\"vg\">@__rust_alloc</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"m\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"vg\">#4</span><span class=\"w\"></span>\n</code></pre></div>\n<p>so it can see that both are size-4-align-4 and thus the allocation could be re-used.</p>",
        "id": 272377954,
        "sender_full_name": "scottmcm",
        "timestamp": 1645175976
    },
    {
        "content": "<p>(I don't know if it's actually <em>common</em> that this would be applicable, though.)</p>",
        "id": 272378028,
        "sender_full_name": "scottmcm",
        "timestamp": 1645176009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/erase.20unnecessary.20heap.20allocations/near/272376230\">said</a>:</p>\n<blockquote>\n<p>How common is it? I don't think it is really common.</p>\n</blockquote>\n<p>I have not taken a research about how common it is. I just come across this problem in one of my projects and it surprises me since rustc can do pretty many optimizations on <code>Box</code>.</p>",
        "id": 272383845,
        "sender_full_name": "Sirui Mu",
        "timestamp": 1645179721
    }
]