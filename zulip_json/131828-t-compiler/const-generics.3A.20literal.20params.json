[
    {
        "content": "<p>I currently want to implement literals as const params without requiring a block.</p>\n<p>This implements the following <code>FIXME</code>:  <a href=\"https://github.com/rust-lang/rust/blob/2fbb07525e2f07a815e780a4268b11916248b5a9/src/librustc_parse/parser/path.rs#L440-L442\" title=\"https://github.com/rust-lang/rust/blob/2fbb07525e2f07a815e780a4268b11916248b5a9/src/librustc_parse/parser/path.rs#L440-L442\">https://github.com/rust-lang/rust/blob/2fbb07525e2f07a815e780a4268b11916248b5a9/src/librustc_parse/parser/path.rs#L440-L442</a></p>\n<p>Do we want to support arbitrary paths as const params without needing blocks or only identifiers.</p>\n<p>i.e. should this be valid</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">mod</span> <span class=\"nn\">inner</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">inner</span>::<span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 191939991,
        "sender_full_name": "lcnr",
        "timestamp": 1585252454
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"256759\">@boats</span></p>",
        "id": 191941309,
        "sender_full_name": "lcnr",
        "timestamp": 1585253045
    },
    {
        "content": "<p>I thought something like this was implemented already?</p>",
        "id": 191941402,
        "sender_full_name": "eddyb",
        "timestamp": 1585253101
    },
    {
        "content": "<p>it's in <code>librustc_ast_lowering</code> IIRC</p>",
        "id": 191941445,
        "sender_full_name": "eddyb",
        "timestamp": 1585253124
    },
    {
        "content": "<p>(but limited to single segment paths, I think?)</p>",
        "id": 191941470,
        "sender_full_name": "eddyb",
        "timestamp": 1585253139
    },
    {
        "content": "<p>There was some problem,  give me a second</p>",
        "id": 191941574,
        "sender_full_name": "lcnr",
        "timestamp": 1585253182
    },
    {
        "content": "<p>This only works if the identifier does not exist in the type namespace: <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7853b8ddb6eba2a9b2ca1c857411776f\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7853b8ddb6eba2a9b2ca1c857411776f\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=7853b8ddb6eba2a9b2ca1c857411776f</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">C</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">type</span> <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"o\">&lt;</span><span class=\"n\">C</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>this fail atm</p>",
        "id": 191941756,
        "sender_full_name": "lcnr",
        "timestamp": 1585253281
    },
    {
        "content": "<p>I think that's intentional?</p>",
        "id": 191941999,
        "sender_full_name": "eddyb",
        "timestamp": 1585253398
    },
    {
        "content": "<p>not entirely sure though, I think <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> mentored the implementation</p>",
        "id": 191942069,
        "sender_full_name": "eddyb",
        "timestamp": 1585253417
    },
    {
        "content": "<p>I've seen this mentioned in some issues at least and I would be quite disappointed if this were true. <del>Especially since it would prevent us from using unit structs in const generics</del> it doesnt</p>",
        "id": 191942220,
        "sender_full_name": "lcnr",
        "timestamp": 1585253491
    },
    {
        "content": "<blockquote>\n<p>I think that's intentional?</p>\n</blockquote>\n<p>it wasn't intentional, but it was suggested that fixing this would be difficult</p>",
        "id": 191942469,
        "sender_full_name": "varkor",
        "timestamp": 1585253618
    },
    {
        "content": "<p>let me try to remember what the problem was</p>",
        "id": 191942506,
        "sender_full_name": "varkor",
        "timestamp": 1585253640
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/67075\" title=\"https://github.com/rust-lang/rust/issues/67075\">https://github.com/rust-lang/rust/issues/67075</a> and <a href=\"https://github.com/rust-lang/rust/issues/66615\" title=\"https://github.com/rust-lang/rust/issues/66615\">https://github.com/rust-lang/rust/issues/66615</a> are the relevant issues</p>",
        "id": 191942880,
        "sender_full_name": "varkor",
        "timestamp": 1585253829
    },
    {
        "content": "<p>and have similar fixes, I imagine</p>",
        "id": 191942892,
        "sender_full_name": "varkor",
        "timestamp": 1585253836
    },
    {
        "content": "<p>the second issue has some more context</p>",
        "id": 191943019,
        "sender_full_name": "varkor",
        "timestamp": 1585253891
    },
    {
        "content": "<p>the problem is that, currently, we disambiguate between a const generic path and a type path during name resolution</p>",
        "id": 191943051,
        "sender_full_name": "varkor",
        "timestamp": 1585253913
    },
    {
        "content": "<p>if we find a type with that name, we treat the parameter as a type parameter; if we find a const with that name, we treat the parameter as a const parameter</p>",
        "id": 191943082,
        "sender_full_name": "varkor",
        "timestamp": 1585253934
    },
    {
        "content": "<p>however, if we manage to find <em>both</em> names, we have a bit of a problem</p>",
        "id": 191943121,
        "sender_full_name": "varkor",
        "timestamp": 1585253948
    },
    {
        "content": "<p>because we've got no way of telling yet what it's supposed to be</p>",
        "id": 191943144,
        "sender_full_name": "varkor",
        "timestamp": 1585253960
    },
    {
        "content": "<p>we won't know until type checking</p>",
        "id": 191943164,
        "sender_full_name": "varkor",
        "timestamp": 1585253971
    },
    {
        "content": "<p>so I suspect the way to fix this is to have a combined type/const parameter, which could be either, and then disambiguate once we get to type checking</p>",
        "id": 191943218,
        "sender_full_name": "varkor",
        "timestamp": 1585254001
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"218608\">@yodal</span> who worked on the initial implementation</p>",
        "id": 191943436,
        "sender_full_name": "varkor",
        "timestamp": 1585254079
    },
    {
        "content": "<p>I would really like to see this fixed, but I don't think it'll be easy</p>",
        "id": 191943553,
        "sender_full_name": "varkor",
        "timestamp": 1585254131
    },
    {
        "content": "<p>maybe if you're still keen, <span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span>, fixing the <code>()</code> problem could be tried first?<br>\nthis is simpler, as it doesn't need name resolution at all</p>",
        "id": 191943618,
        "sender_full_name": "varkor",
        "timestamp": 1585254179
    },
    {
        "content": "<p>but would give you some idea of the effort involved</p>",
        "id": 191943632,
        "sender_full_name": "varkor",
        "timestamp": 1585254187
    },
    {
        "content": "<p>as keen as can be. Will look into this</p>",
        "id": 191944560,
        "sender_full_name": "lcnr",
        "timestamp": 1585254668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  I'd like for <a href=\"https://github.com/rust-lang/rust/pull/70261\" title=\"https://github.com/rust-lang/rust/pull/70261\">https://github.com/rust-lang/rust/pull/70261</a> to land first before making the parser changes</p>",
        "id": 191945879,
        "sender_full_name": "centril",
        "timestamp": 1585255276
    },
    {
        "content": "<p>cause I'll have some ungreat merge conflicts otherwise</p>",
        "id": 191945920,
        "sender_full_name": "centril",
        "timestamp": 1585255304
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> Won't touch the parser for now.</p>",
        "id": 191945991,
        "sender_full_name": "lcnr",
        "timestamp": 1585255333
    },
    {
        "content": "<p>parser changes should be minimal if necessary at all, so that shouldn't be a problem</p>",
        "id": 191946044,
        "sender_full_name": "varkor",
        "timestamp": 1585255375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> even small changes in the middle of refactoring a function can be a headache ^^</p>",
        "id": 191946568,
        "sender_full_name": "centril",
        "timestamp": 1585255649
    },
    {
        "content": "<p>sorry, I meant shouldn't be a problem to let <a href=\"https://github.com/rust-lang/rust/issues/70261\" title=\"https://github.com/rust-lang/rust/issues/70261\">#70261</a> land first</p>",
        "id": 191946658,
        "sender_full_name": "varkor",
        "timestamp": 1585255684
    },
    {
        "content": "<p>ah <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 191946693,
        "sender_full_name": "centril",
        "timestamp": 1585255697
    },
    {
        "content": "<p>hir::intravisit::Visitor uses one lifetime for both outer and inner references. <a href=\"https://github.com/rust-lang/rust/blob/2fbb07525e2f07a815e780a4268b11916248b5a9/src/librustc_hir/intravisit.rs#L221\" title=\"https://github.com/rust-lang/rust/blob/2fbb07525e2f07a815e780a4268b11916248b5a9/src/librustc_hir/intravisit.rs#L221\">https://github.com/rust-lang/rust/blob/2fbb07525e2f07a815e780a4268b11916248b5a9/src/librustc_hir/intravisit.rs#L221</a></p>\n<p>This means that I can't save storage by biilding hir tys and constants  on the fly <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> <br>\nWill look into fixing this later on and just having some duplicate fields for now</p>",
        "id": 191956402,
        "sender_full_name": "lcnr",
        "timestamp": 1585261249
    },
    {
        "content": "<p>Should this be forbidden?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arg</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 192005875,
        "sender_full_name": "lcnr",
        "timestamp": 1585309371
    },
    {
        "content": "<p>compiles rn, even if the default arg can't actually be skipped. <code>type B = A&lt;7&gt;</code> does not work</p>",
        "id": 192005916,
        "sender_full_name": "lcnr",
        "timestamp": 1585309403
    },
    {
        "content": "<p>hmm… I think I would expect the declaration, but also <code>type B = A&lt;7&gt;</code> to be accepted</p>",
        "id": 192008663,
        "sender_full_name": "varkor",
        "timestamp": 1585311423
    },
    {
        "content": "<p>it's definitely a case we should explicitly consider though; it's worth opening an issue about</p>",
        "id": 192008679,
        "sender_full_name": "varkor",
        "timestamp": 1585311440
    },
    {
        "content": "<p>e want to allow const default parameters, which afaict are planned like this: <code>struct A&lt;T, U = u32, const N: usize, const M: usize = 7&gt;</code>. </p>\n<p>This makes using ambiguous generic args even more cumbersome.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// occupy both the ty and the value namespace.</span>\n<span class=\"k\">struct</span> <span class=\"nc\">BadBoi</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">field</span>: <span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BadBoi</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BadBoi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// this would end up as `Type, Ambiguous, Const`.</span>\n<span class=\"c1\">// Which allows for both `T, U, N`</span>\n<span class=\"c1\">// and `T, N, M`</span>\n</pre></div>\n\n\n<p>zulip code blocks don't have uniform character width <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span></p>",
        "id": 192164986,
        "sender_full_name": "lcnr",
        "timestamp": 1585473780
    },
    {
        "content": "<p>I made some decent progress here. But currently get mir failures on consts which are completely unused after type resolution.<br>\nIs there a way to not build mir for some NodeId?</p>",
        "id": 192191861,
        "sender_full_name": "lcnr",
        "timestamp": 1585512600
    },
    {
        "content": "<p>hmm but you want to build MIR</p>",
        "id": 192191915,
        "sender_full_name": "eddyb",
        "timestamp": 1585512631
    },
    {
        "content": "<p>my current implementation works like this:<br>\nfor every ambiguous generic arg, pretend that it is both a const and a type.<br>\nOnce it is clear what the arg is, discard the unused interpretation.</p>",
        "id": 192191935,
        "sender_full_name": "lcnr",
        "timestamp": 1585512713
    },
    {
        "content": "<p>who disambiguates?</p>",
        "id": 192191984,
        "sender_full_name": "eddyb",
        "timestamp": 1585512732
    },
    {
        "content": "<p>if it's typeck, I don't think that's accepetable</p>",
        "id": 192191993,
        "sender_full_name": "eddyb",
        "timestamp": 1585512745
    },
    {
        "content": "<p>hmm apparently librustc_ast_lowering</p>",
        "id": 192192068,
        "sender_full_name": "lcnr",
        "timestamp": 1585512860
    },
    {
        "content": "<p>wait a sec</p>",
        "id": 192192072,
        "sender_full_name": "lcnr",
        "timestamp": 1585512869
    },
    {
        "content": "<p>that should be fine</p>",
        "id": 192192073,
        "sender_full_name": "eddyb",
        "timestamp": 1585512871
    },
    {
        "content": "<p><code>librustc_ast_lowering</code> should be able to discard the const side if it's a type</p>",
        "id": 192192075,
        "sender_full_name": "eddyb",
        "timestamp": 1585512884
    },
    {
        "content": "<p>never mind, it's not ast_lowering. I can't find the file which does the disambiguation rn. DID I ACCIDENTALLY REVERT THESE CHANGES <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span></p>",
        "id": 192192155,
        "sender_full_name": "lcnr",
        "timestamp": 1585513016
    },
    {
        "content": "<p>wtf did I do</p>",
        "id": 192192223,
        "sender_full_name": "lcnr",
        "timestamp": 1585513113
    },
    {
        "content": "<p>it's <code>librustc_typeck::astconv</code> instead, <a href=\"https://github.com/rust-lang/rust/blob/285519d412ef9c65df3bcd2de2b1a3d6ca16a255/src/librustc_typeck/astconv.rs#L584-L618\" title=\"https://github.com/rust-lang/rust/blob/285519d412ef9c65df3bcd2de2b1a3d6ca16a255/src/librustc_typeck/astconv.rs#L584-L618\">https://github.com/rust-lang/rust/blob/285519d412ef9c65df3bcd2de2b1a3d6ca16a255/src/librustc_typeck/astconv.rs#L584-L618</a></p>",
        "id": 192192332,
        "sender_full_name": "lcnr",
        "timestamp": 1585513267
    },
    {
        "content": "<p>Meaning thait is after typeck. Considering that we don't know what params we need before this I doubt that we can do it any other way without requiring a different syntax.</p>",
        "id": 192192881,
        "sender_full_name": "lcnr",
        "timestamp": 1585514040
    },
    {
        "content": "<p>that's why there are braces</p>",
        "id": 192193121,
        "sender_full_name": "eddyb",
        "timestamp": 1585514382
    },
    {
        "content": "<p>for arbitrary expressions</p>",
        "id": 192193157,
        "sender_full_name": "eddyb",
        "timestamp": 1585514402
    },
    {
        "content": "<p>anyway you should get <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> on-board with this</p>",
        "id": 192193175,
        "sender_full_name": "eddyb",
        "timestamp": 1585514414
    },
    {
        "content": "<p>it may still be possible to do in AST-&gt;HIR lowering</p>",
        "id": 192193178,
        "sender_full_name": "eddyb",
        "timestamp": 1585514432
    },
    {
        "content": "<p>That's disheartening, especially since this approach was previously mentioned by @varkor.<br>\nI do agree that it causes a lot of complexity for a smallish improvement, even if it would work.</p>\n<p>Afaict at least type inference is required for this to work for all paths. Another approach would be to do this on a best effort basis<br>\nand improve diagnostics in places where it is ambiguous, which would be easier to implement, even if it is unfortunate.</p>\n<p>Will stop working on this problem until some kind of decision is made here.</p>",
        "id": 192194740,
        "sender_full_name": "lcnr",
        "timestamp": 1585516718
    },
    {
        "content": "<p>There's not much that can be done here before type checking.</p>",
        "id": 192196625,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1585519703
    },
    {
        "content": "<p>(I'm talking only about paths, not additional stuff like <code>()</code> type vs <code>()</code> expr.)</p>",
        "id": 192196631,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1585519738
    },
    {
        "content": "<p>First, <a href=\"https://github.com/rust-lang/rust/pull/66104#discussion_r344450671\" title=\"https://github.com/rust-lang/rust/pull/66104#discussion_r344450671\">https://github.com/rust-lang/rust/pull/66104#discussion_r344450671</a> could potentially be fixed to support disambiguating <code>ident&lt;Args&gt;</code> in addition to just <code>ident</code>.</p>",
        "id": 192196647,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1585519793
    },
    {
        "content": "<p>Second, <em>some</em> multi-segment paths can be disambiguated, e.g. for <code>module::Name</code> it's clear before type checking whether <code>Name</code> is a type, or value, or both (assuming <code>module</code> is a module), but for paths potentially involving associated items we cannot disambiguate until type checking.</p>",
        "id": 192196786,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1585519924
    },
    {
        "content": "<p>If someone prototypes the disambiguation during type checking, that would be great, I think it should be pretty realistic?</p>",
        "id": 192196816,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1585520028
    },
    {
        "content": "<p>You'll have to keep something like two paths in HIR until then though.</p>",
        "id": 192196861,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1585520098
    },
    {
        "content": "<p>hmm, but you can't resolve an associated value (const/fn) outside of a body, and associated types are, well, terribly supported</p>",
        "id": 192197049,
        "sender_full_name": "eddyb",
        "timestamp": 1585520403
    },
    {
        "content": "<p>there are some cases you can't disambiguate before type checking, because it's ambiguous</p>",
        "id": 192197730,
        "sender_full_name": "varkor",
        "timestamp": 1585521570
    },
    {
        "content": "<p>these are the cases I was suggesting to <span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> we wanted to be fixed</p>",
        "id": 192197735,
        "sender_full_name": "varkor",
        "timestamp": 1585521591
    },
    {
        "content": "<p>for example, if we have a const and a type with the same name, we can't distinguish between them until type checking, because we don't know which it's supposed to be</p>",
        "id": 192197775,
        "sender_full_name": "varkor",
        "timestamp": 1585521620
    },
    {
        "content": "<p>there are definitely some improvements we can make before type checking, e.g. the improvements <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> suggests, but these aren't going to cover all cases</p>",
        "id": 192197787,
        "sender_full_name": "varkor",
        "timestamp": 1585521661
    },
    {
        "content": "<blockquote>\n<p>that's why there are braces</p>\n</blockquote>\n<p>asking a user to use braces <em>only if</em> there's a type with the same name is very confusing, I think</p>",
        "id": 192197804,
        "sender_full_name": "varkor",
        "timestamp": 1585521716
    },
    {
        "content": "<p>especially as it isn't ambiguous</p>",
        "id": 192197847,
        "sender_full_name": "varkor",
        "timestamp": 1585521745
    },
    {
        "content": "<blockquote>\n<p>this would end up as <code>Type, Ambiguous, Const</code>.</p>\n</blockquote>\n<p>okay, this is unfortunate</p>",
        "id": 192197890,
        "sender_full_name": "varkor",
        "timestamp": 1585521818
    },
    {
        "content": "<p>but this is a design problem more than an implementation problem</p>",
        "id": 192197894,
        "sender_full_name": "varkor",
        "timestamp": 1585521841
    },
    {
        "content": "<p>I think the sensible thing is to default to types if possible</p>",
        "id": 192197936,
        "sender_full_name": "varkor",
        "timestamp": 1585521871
    },
    {
        "content": "<p>e.g. we only try it as a const if we would get an error otherwise</p>",
        "id": 192197938,
        "sender_full_name": "varkor",
        "timestamp": 1585521884
    },
    {
        "content": "<p>this should be consistent and fairly intuitive</p>",
        "id": 192197939,
        "sender_full_name": "varkor",
        "timestamp": 1585521891
    },
    {
        "content": "<p>it's also an edge case</p>",
        "id": 192197941,
        "sender_full_name": "varkor",
        "timestamp": 1585521896
    },
    {
        "content": "<p>yeah and {} is the override</p>",
        "id": 192199286,
        "sender_full_name": "eddyb",
        "timestamp": 1585524228
    },
    {
        "content": "<p>to pick the value instead</p>",
        "id": 192199303,
        "sender_full_name": "eddyb",
        "timestamp": 1585524240
    },
    {
        "content": "<p>yes, but if it's unambiguous, I don't think you should have to override</p>",
        "id": 192199611,
        "sender_full_name": "varkor",
        "timestamp": 1585524797
    },
    {
        "content": "<p>depends where the context is coming from, idk</p>",
        "id": 192200388,
        "sender_full_name": "eddyb",
        "timestamp": 1585526155
    },
    {
        "content": "<p>overall it's pretty finicky rn</p>",
        "id": 192200431,
        "sender_full_name": "eddyb",
        "timestamp": 1585526178
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> not to mention that once the WF checks are properly in place, most examples will start to fall apart regardless</p>",
        "id": 192200436,
        "sender_full_name": "eddyb",
        "timestamp": 1585526201
    },
    {
        "content": "<p>like e.g. <code>Foo&lt;{T::CONST}&gt;</code></p>",
        "id": 192200439,
        "sender_full_name": "eddyb",
        "timestamp": 1585526212
    },
    {
        "content": "<p>I'm interested in cases where we have a struct <code>S</code> and we want to pass the value <code>S</code> as a const argument</p>",
        "id": 192200465,
        "sender_full_name": "varkor",
        "timestamp": 1585526270
    },
    {
        "content": "<p>this is WF, but only works if we allow disambiguation during type checking</p>",
        "id": 192200512,
        "sender_full_name": "varkor",
        "timestamp": 1585526299
    },
    {
        "content": "<p>because otherwise we interpret it as the type <code>S</code></p>",
        "id": 192200518,
        "sender_full_name": "varkor",
        "timestamp": 1585526316
    },
    {
        "content": "<p>(which is the same problem as accepting <code>()</code>)</p>",
        "id": 192200523,
        "sender_full_name": "varkor",
        "timestamp": 1585526334
    },
    {
        "content": "<blockquote>\n<p>If someone prototypes the disambiguation during type checking, that would be great, I think it should be pretty realistic?</p>\n</blockquote>\n<p>I have a (not yet working) prototype which pretends like ambiguous args are both a type and a const and then discards the unused one after typeck.</p>\n<p>I can try and get this to work. But I don't believe that it's worth my time if eddyb is this strongly against this.<br>\n@eddyb:</p>\n<blockquote>\n<p>if it's typeck, I don't think that's accepetable</p>\n</blockquote>",
        "id": 192222834,
        "sender_full_name": "lcnr",
        "timestamp": 1585555468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> AST lowering happens before we start using queries queries, doesn't it <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> </p>\n<p>If not, we could use the same approach as <a href=\"https://github.com/rust-lang/rust/pull/71154\" title=\"https://github.com/rust-lang/rust/pull/71154\">https://github.com/rust-lang/rust/pull/71154</a> for ambiguous generic arguments,<br>\nwhich would be a fairly clean solution.</p>",
        "id": 195350507,
        "sender_full_name": "lcnr",
        "timestamp": 1587931859
    },
    {
        "content": "<p>i.e. <code>lower_generic_arg(arg)</code> -&gt; <code>typeck_tables_of(surrounding_body)</code>-&gt; <code>lower_generic_arg_with_kind(arg, ArgKind::Const/Type)</code></p>",
        "id": 195350665,
        "sender_full_name": "lcnr",
        "timestamp": 1587932112
    },
    {
        "content": "<p>as we only need to use generic arguments during typeck once we know the corresponding context</p>",
        "id": 195350724,
        "sender_full_name": "lcnr",
        "timestamp": 1587932164
    },
    {
        "content": "<p>as I understand it, the plan has always been to pull queries back as early as possible (I believe this was something <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> was working on), but I'm not sure how far it got</p>",
        "id": 195400025,
        "sender_full_name": "varkor",
        "timestamp": 1587984393
    },
    {
        "content": "<p>This PR might be of interest to the people in this topic: <a href=\"https://github.com/rust-lang/rust/pull/71592\" title=\"https://github.com/rust-lang/rust/pull/71592\">https://github.com/rust-lang/rust/pull/71592</a><br>\nIt starts parsing unambiguous const expressions without braces (things that start with a literal and are simple expressions). It also adds some partial recovery and suggestion for some common missing braces errors. It should inform a bit of what changes would be required to accept things like <code>A + B</code>, <code>A - B</code> and <code>A::B()</code> without changing anything else. It seems doable, but don't know if it is worth it to complicate the semantics to do so.</p>",
        "id": 195453305,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1588010179
    }
]