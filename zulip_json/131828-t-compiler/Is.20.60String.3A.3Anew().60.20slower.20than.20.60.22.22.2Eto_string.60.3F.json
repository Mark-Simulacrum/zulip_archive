[
    {
        "content": "<p>I was just comparing some assembly out of curiousity and came across this: &lt;<a href=\"https://rust.godbolt.org/z/P53MMG4W6\">https://rust.godbolt.org/z/P53MMG4W6</a>&gt;. It appears that <code>String::new()</code> does a bit more than <code>\"\".to_string()</code>. Why is that? Is this a known bug, or is it even a bug? I believe they should do the same thing.</p>",
        "id": 241801014,
        "sender_full_name": "ruster",
        "timestamp": 1623082337
    },
    {
        "content": "<p>The problem is probably because it copies its value from the constant <a href=\"https://github.com/rust-lang/rust/blob/d620ae10709ca3669cda89db8b29afcd9accc188/library/alloc/src/raw_vec.rs#L64\">https://github.com/rust-lang/rust/blob/d620ae10709ca3669cda89db8b29afcd9accc188/library/alloc/src/raw_vec.rs#L64</a> instead of immediately creating the appropriate value</p>",
        "id": 241801470,
        "sender_full_name": "oli",
        "timestamp": 1623082554
    },
    {
        "content": "<p>so... probably a problem in our const codegen logic that causes LLVM to produce worse code than if the value is built from scratch</p>",
        "id": 241801547,
        "sender_full_name": "oli",
        "timestamp": 1623082581
    },
    {
        "content": "<p>I see. Is this worth creating an issue for?</p>",
        "id": 241801682,
        "sender_full_name": "ruster",
        "timestamp": 1623082669
    },
    {
        "content": "<p>any hard to find codegen bug seems worth creating an issue for</p>",
        "id": 241801762,
        "sender_full_name": "Lokathor",
        "timestamp": 1623082690
    },
    {
        "content": "<p>I think it is also not too complex to build a codegen test for it. This way we'll notice if it changes by accident, or when we actually fix it</p>",
        "id": 241802257,
        "sender_full_name": "oli",
        "timestamp": 1623082927
    },
    {
        "content": "<p>fwiw the behavior has been changed since 1.52.0 according to the godbolt</p>",
        "id": 241802733,
        "sender_full_name": "Yuki Okushi",
        "timestamp": 1623083155
    },
    {
        "content": "<p>Hmm, that looks like const promotion, but that's not a place where that would happen.</p>",
        "id": 241811202,
        "sender_full_name": "scottmcm",
        "timestamp": 1623086733
    },
    {
        "content": "<p>Oh, there's a const for <code>RawVec::NEW</code> in <a href=\"https://github.com/rust-lang/rust/blob/e4a60327063e82413eed50a10df3b7d19b77bda0/library/alloc/src/vec/mod.rs#L419-L421\">https://github.com/rust-lang/rust/blob/e4a60327063e82413eed50a10df3b7d19b77bda0/library/alloc/src/vec/mod.rs#L419-L421</a> -- maybe that's why it's doing this.</p>",
        "id": 241811381,
        "sender_full_name": "scottmcm",
        "timestamp": 1623086801
    },
    {
        "content": "<p>But that's been there since 2019 (<a href=\"https://github.com/rust-lang/rust/pull/64028\">https://github.com/rust-lang/rust/pull/64028</a>) so I guess it's a difference somewhere more subtle.</p>",
        "id": 241811593,
        "sender_full_name": "scottmcm",
        "timestamp": 1623086888
    },
    {
        "content": "<p>for the people following at home, an issue was indeed created to track this: <a href=\"https://github.com/rust-lang/rust/issues/86106\">#86106</a></p>",
        "id": 241947628,
        "sender_full_name": "lqd",
        "timestamp": 1623169950
    }
]