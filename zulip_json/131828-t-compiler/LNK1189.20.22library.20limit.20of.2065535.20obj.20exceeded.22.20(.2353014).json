[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> The code here already supports shrinking the number of CGUs to a defined value:</p>",
        "id": 162534041,
        "sender_full_name": "mw",
        "timestamp": 1554390186
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/e43f99ce576152d4b2f7315d491c4210211228d6/src/librustc_mir/monomorphize/partitioning.rs#L235-L241\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e43f99ce576152d4b2f7315d491c4210211228d6/src/librustc_mir/monomorphize/partitioning.rs#L235-L241\">https://github.com/rust-lang/rust/blob/e43f99ce576152d4b2f7315d491c4210211228d6/src/librustc_mir/monomorphize/partitioning.rs#L235-L241</a></p>",
        "id": 162534056,
        "sender_full_name": "mw",
        "timestamp": 1554390196
    },
    {
        "content": "<p>does that readily generalize to incremental ?</p>",
        "id": 162534120,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554390225
    },
    {
        "content": "<p>yes</p>",
        "id": 162534142,
        "sender_full_name": "mw",
        "timestamp": 1554390235
    },
    {
        "content": "<p>k</p>",
        "id": 162534212,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554390247
    },
    {
        "content": "<p>you basically just need to adjust the policy</p>",
        "id": 162534227,
        "sender_full_name": "mw",
        "timestamp": 1554390255
    },
    {
        "content": "<p>if you set only an upper limit then test cases should not be affected</p>",
        "id": 162534271,
        "sender_full_name": "mw",
        "timestamp": 1554390275
    },
    {
        "content": "<p>it might make sense to <em>generally</em> set a limit of X here</p>",
        "id": 162534339,
        "sender_full_name": "mw",
        "timestamp": 1554390308
    },
    {
        "content": "<p>okay. so maybe I'll even have something we can readily beta-backport, soon</p>",
        "id": 162534350,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554390315
    },
    {
        "content": "<p>1000?</p>",
        "id": 162534352,
        "sender_full_name": "mw",
        "timestamp": 1554390316
    },
    {
        "content": "<p>10000?</p>",
        "id": 162534366,
        "sender_full_name": "mw",
        "timestamp": 1554390322
    },
    {
        "content": "<p>666!</p>",
        "id": 162534398,
        "sender_full_name": "mw",
        "timestamp": 1554390334
    },
    {
        "content": "<p>seems like a sensible choice</p>",
        "id": 162534412,
        "sender_full_name": "mw",
        "timestamp": 1554390342
    },
    {
        "content": "<p>I'm a bit surprised though that we reach 65536 rust modules in a single crate</p>",
        "id": 162534560,
        "sender_full_name": "mw",
        "timestamp": 1554390393
    },
    {
        "content": "<p>that seems like a lot, even for <code>librustc</code></p>",
        "id": 162534591,
        "sender_full_name": "mw",
        "timestamp": 1554390410
    },
    {
        "content": "<blockquote>\n<p>that seems like a lot, even for <code>librustc</code></p>\n</blockquote>\n<p>yes. it makes me wonder if there is something else going on.</p>",
        "id": 162554453,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554402806
    },
    {
        "content": "<p>but we will see.</p>",
        "id": 162554456,
        "sender_full_name": "pnkfelix",
        "timestamp": 1554402809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> I'm pretty sure objects refer to symbols here. I'll try to bisect the cause of this for debug builds (takes soo long though). I do know that release builds have fewer than 64k symbols in librustc.</p>",
        "id": 162575149,
        "sender_full_name": "Zoxc",
        "timestamp": 1554416740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> yes, that makes sense. In that case, reducing the number of object files won't help.</p>",
        "id": 162603863,
        "sender_full_name": "mw",
        "timestamp": 1554453397
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span>  I bisected the debug build regression to <a href=\"https://github.com/rust-lang/rust/pull/48779\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/48779\">https://github.com/rust-lang/rust/pull/48779</a>.<br>\nrustc.dll exports goes from 3980 symbols to 3992 symbols.</p>",
        "id": 162686773,
        "sender_full_name": "Zoxc",
        "timestamp": 1554530872
    },
    {
        "content": "<p>Doing a current release build with <code>-Z share-generics=on</code> bumps it to 57658</p>",
        "id": 162698270,
        "sender_full_name": "Zoxc",
        "timestamp": 1554550979
    },
    {
        "content": "<p>mingw release builds have 45964 symbols for rustc.dll, it kind of seems like <code>-Z share-generics</code> is forced on somehow?</p>",
        "id": 162701431,
        "sender_full_name": "Zoxc",
        "timestamp": 1554556350
    },
    {
        "content": "<p>I don't see any overrides for mingw. Maybe we set the wrong symbol visibility for it?</p>",
        "id": 162701636,
        "sender_full_name": "Zoxc",
        "timestamp": 1554556727
    },
    {
        "content": "<p>It seems like mingw + incremental compilation causes generic functions to be exported from dlls even without <code>-Z share-generics</code>. I had incremental off when building rustc, so there's some other cause to this too.</p>",
        "id": 162704156,
        "sender_full_name": "Zoxc",
        "timestamp": 1554560898
    },
    {
        "content": "<p>I think this due to us explictly listing which functions we want to export, but only on msvc</p>",
        "id": 162705746,
        "sender_full_name": "Zoxc",
        "timestamp": 1554563499
    }
]