[
    {
        "content": "<p>I asked this last week in t-compiler/help and didn't get an answer, so trying my luck here <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>According to the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.ProjectionElem.html#variant.Downcast\">compiler docs</a>, downcast projections are only in the case of multi-variant enums. However it seems like we <a href=\"https://github.com/sexxi-goose/rust/blob/master/compiler/rustc_mir_build/src/build/matches/simplify.rs#L254-L269\">add a downcast projection</a> in case of irreuftable patterns(which would include single-variant enums).</p>\n<p>Are the docs outdated or am I misinterpretting them or should the pattern not add a Downcast? </p>\n<p>I tested a sample program</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">SingleVariant</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SingleVariant</span>::<span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">SingleVariant</span>::<span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">point</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// L1</span>\n<span class=\"w\">        </span><span class=\"o\">*</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and the MIR builder  on <code>L1</code> contains the projection</p>\n<div class=\"codehilite\"><pre><span></span><code>[[\n    Downcast(\n        Some(\n            &quot;Point&quot;,\n        ),\n        0,\n    ),\n    Field(\n        field[0],\n        i32,\n    ),\n]]\n</code></pre></div>",
        "id": 228083591,
        "sender_full_name": "Aman Arora",
        "timestamp": 1614460488
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"307184\">@rocksand</span></p>",
        "id": 228083643,
        "sender_full_name": "Aman Arora",
        "timestamp": 1614460562
    },
    {
        "content": "<p>Hmm</p>",
        "id": 228472336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614714105
    },
    {
        "content": "<p>I think the docs are wrong</p>",
        "id": 228472397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614714124
    },
    {
        "content": "<p>I guess I don't know 100% for sure</p>",
        "id": 228472441,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614714136
    },
    {
        "content": "<p>I suspect the answer is that they are optional</p>",
        "id": 228472458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614714146
    },
    {
        "content": "<p>but that's a bad idea</p>",
        "id": 228472470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614714153
    },
    {
        "content": "<p>we'd have to audit the borrow check a bit perhaps</p>",
        "id": 228472483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614714158
    },
    {
        "content": "<p>I wonder if things would go wrong if you had a combination of paths with downcast and paths without, I suspect so</p>",
        "id": 228472508,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614714170
    },
    {
        "content": "<p>probably we should just dcument the current behavior -- downcast is used for enums and not for structs, I guess?</p>",
        "id": 228472559,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1614714188
    }
]