[
    {
        "content": "<p>We currently store trait objects as <code>Dynamic(Binder&lt;&amp;'tcx List&lt;ExistentialPredicate&lt;'tcx&gt;&gt;&gt;, Region&lt;'tcx&gt;)</code>.</p>\n<p>Would it make sense to instead use something like the following here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"cp\">#[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]</span><span class=\"w\"></span>\n<span class=\"cp\">#[derive(HashStable, TypeFoldable)]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">DynamicTy</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">principal</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">ExistentialTraitRef</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">projection_bounds</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">ExistentialProjection</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">auto_traits</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;tcx</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">DefId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>This would allow us to solve <a href=\"https://github.com/rust-lang/rust/issues/73815\">#73815</a> in a more cleaner way, which would be nice</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 209483134,
        "sender_full_name": "lcnr",
        "timestamp": 1599639438
    },
    {
        "content": "<p>we currently have the <del>somewhat unchecked</del>(they are checked, I don't think there's a bug here, but the check is quite far away from the construction) invariants that there is only one principal type and at most one <code>projection</code> for every <code>DefId</code></p>",
        "id": 209483270,
        "sender_full_name": "lcnr",
        "timestamp": 1599639536
    },
    {
        "content": "<p>IIRC for the \"one principal type\" we wanted to avoid a construction that required one, because we eventually want to support multiple</p>",
        "id": 209500929,
        "sender_full_name": "simulacrum",
        "timestamp": 1599652608
    },
    {
        "content": "<p>This'll also increase the size of that value quite a bit - I think 3x, roughly?</p>",
        "id": 209501052,
        "sender_full_name": "simulacrum",
        "timestamp": 1599652689
    }
]