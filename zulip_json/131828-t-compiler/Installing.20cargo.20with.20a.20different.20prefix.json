[
    {
        "content": "<p>I want to install cargo to a different prefix than rustc itself. We currently build the rust package for Guix with the following commands:</p>\n<div class=\"codehilite\"><pre><span></span><code>./x.py build\n./x.py build src/tools/cargo\n./x.py -j1 test -vv\n./x.py -j1 test src/tools/cargo\n./x.py install\n# change the prefix variable in config.toml\n./x.py install cargo\n</code></pre></div>\n\n\n<p>For Rust 1.33 and earlier, this last commands <a href=\"http://ci.guix.gnu.org/log/w9zd0qn05hbs778agw2pxcvpvxdw3ycd-rust-1.33.0\">builds barely anything</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>Building stage0 codegen artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu, llvm)\n   Compiling rustc_codegen_llvm v0.0.0 (/tmp/guix-build-rust-1.33.0.drv-0/rustc-1.33.0-src/src/librustc_codegen_llvm)\n    Finished release [optimized] target(s) in 33.42s\n...\nBuilding stage1 codegen artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu, llvm)\n   Compiling rustc_codegen_llvm v0.0.0 (/tmp/guix-build-rust-1.33.0.drv-0/rustc-1.33.0-src/src/librustc_codegen_llvm)\n    Finished release [optimized] target(s) in 31.30s\n</code></pre></div>\n\n\n<p>However, following <a href=\"https://github.com/rust-lang/rust/pull/57680\">PR 57680</a>, the whole stage1 <a href=\"http://ci.guix.gnu.org/log/imiv2bahk5vfmxs1wrws37rx7rx431qm-rust-1.34.1\">is built again</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code>Building stage0 codegen artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu, llvm)\n   Compiling rustc_codegen_llvm v0.0.0 (/tmp/guix-build-rust-1.34.1.drv-0/rustc-1.34.1-src/src/librustc_codegen_llvm)\n    Finished release [optimized] target(s) in 32.60s\nAssembling stage1 compiler (x86_64-unknown-linux-gnu)\nBuilding stage1 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n   Compiling core v0.0.0 (/tmp/guix-build-rust-1.34.1.drv-0/rustc-1.34.1-src/src/libcore)\n   Compiling libc v0.2.46\n   Compiling compiler_builtins v0.1.5\n...\n</code></pre></div>\n\n\n<p>Because of this, I think that the approach we are taking is not the intended method of installing cargo to a different prefix than the compiler itself. I tested <code>./x.py install cargo --keep-stage 1</code>, and while it stops the rebuild, it doesn't feel like a clean solution.</p>",
        "id": 204292181,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1595062627
    },
    {
        "content": "<p>I don't think there <em>is</em> an intended method of installing cargo to a different prefix than rustc. At least, I don't think it's a use case anyone has considered.</p>",
        "id": 204640165,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595405806
    },
    {
        "content": "<p>People package them separately, but I don't think anyone considered the use case of different prefixes.</p>",
        "id": 204640216,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595405873
    },
    {
        "content": "<p>(I do understand why guix and nix do so though. Although I wonder if the two could be in the same package.)</p>",
        "id": 204640288,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595405911
    },
    {
        "content": "<p>I don't <em>think</em> cargo currently cares about its prefix, so you might be able to just move the cargo binary to the prefix you want.</p>",
        "id": 204640345,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1595405968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281536\">@Jakub Kądziołka</span> do you need the prefix, or can you use <code>DESTDIR</code> with the install command?</p>",
        "id": 204645521,
        "sender_full_name": "eddyb",
        "timestamp": 1595409855
    },
    {
        "content": "<p>AFAIK we don't really use the prefix, e.g. <code>rustc</code> finds the <code>lib/rustlib</code> dir relative to itself</p>",
        "id": 204645559,
        "sender_full_name": "eddyb",
        "timestamp": 1595409897
    },
    {
        "content": "<p>so you might get away with just installing them in separate dirs</p>",
        "id": 204645580,
        "sender_full_name": "eddyb",
        "timestamp": 1595409917
    },
    {
        "content": "<p>also presumably using <code>./configure</code> is easier than creating your own <code>config.toml</code> but that's another story. I'm guessing you can't use <code>make install</code> because that won't give you control over cargo or something else</p>",
        "id": 204645667,
        "sender_full_name": "eddyb",
        "timestamp": 1595409987
    },
    {
        "content": "<p>Well, the codegen backend uses <code>CFG_PREFIX</code>, I'm not entirely sure why. What is that for?<br>\nI guess I could set prefix to <code>/</code> and use <code>DESTDIR</code>, but, ehh...</p>",
        "id": 204715384,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1595448162
    },
    {
        "content": "<p>(the 'proper' variable to set here would be the prefix and not destdir, since the binaries <em>will</em> run at the path in question when they get installed)</p>",
        "id": 204715570,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1595448245
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281536\">@Jakub Kądziołka</span> looks like it's for <code>-C rpath</code> only</p>",
        "id": 204759742,
        "sender_full_name": "eddyb",
        "timestamp": 1595478522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> anyway Cargo doesn't use the prefix AFAICT so you can set it to the value <code>rustc</code> might need and then use <code>DESTDIR</code> to install Cargo separately</p>",
        "id": 204759774,
        "sender_full_name": "eddyb",
        "timestamp": 1595478600
    },
    {
        "content": "<p>Wrong Josh ;)</p>",
        "id": 204759821,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595478633
    },
    {
        "content": "<p>ARGH</p>",
        "id": 204759824,
        "sender_full_name": "eddyb",
        "timestamp": 1595478637
    },
    {
        "content": "<p>wrong Jo!</p>",
        "id": 204759825,
        "sender_full_name": "eddyb",
        "timestamp": 1595478639
    },
    {
        "content": "<p>not even. wrong J</p>",
        "id": 204759828,
        "sender_full_name": "eddyb",
        "timestamp": 1595478644
    },
    {
        "content": "<p>Maybe I need to change my name so it's easier for you to mention the right person <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 204759843,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595478679
    },
    {
        "content": "<p>why is Zulip's @ bad? it defaults to <em>something</em> that's neither alphabetical nor based on the topic you're in</p>",
        "id": 204759844,
        "sender_full_name": "eddyb",
        "timestamp": 1595478680
    },
    {
        "content": "<p>It's probably something dumb like 'previous times mentioned'</p>",
        "id": 204759851,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595478700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> there's 2 other people between you and <span class=\"user-mention\" data-user-id=\"281536\">@Jakub Kądziołka</span></p>",
        "id": 204759852,
        "sender_full_name": "eddyb",
        "timestamp": 1595478704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281536\">@Jakub Kądziołka</span> anyway it looks like the rpath thing, which isn't even on by default, is why. presumably some distros want absolute RPATHs on Rust binaries/dylibs? the fallback one that uses <code>CFG_PREFIX</code> is only for, like, dynamically linking libstd mostly?</p>",
        "id": 204760036,
        "sender_full_name": "eddyb",
        "timestamp": 1595479003
    }
]