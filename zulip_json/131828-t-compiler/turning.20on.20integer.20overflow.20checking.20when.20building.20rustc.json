[
    {
        "content": "<p>How do I build a <code>rustc</code> that has integer overflow checking enabled?<br>\nI tried setting <code>debug=true</code> in my <code>config.toml</code>, but that doesn't seem to do it.</p>",
        "id": 234606737,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618453585
    },
    {
        "content": "<p>I have this code:</p>\n<div class=\"codehilite\"><pre><span></span><code>        if self.err_count() &lt; old_count {\n            dbg!(self.err_count());\n            dbg!(old_count);\n        } else {\n            dbg!(&quot;it&#39;s fine&quot;);\n        }\n        let errors = self.err_count() - old_count;\n        dbg!(errors);\n</code></pre></div>\n<p>and it's outputting this:</p>\n<div class=\"codehilite\"><pre><span></span><code>[compiler/rustc_session/src/session.rs:478] self.err_count() = 12\n[compiler/rustc_session/src/session.rs:479] old_count = 13\n[compiler/rustc_session/src/session.rs:484] errors = 18446744073709551615\n</code></pre></div>\n<p>but I expect it to panic, because I have debug assertions enabled.</p>",
        "id": 234607274,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618454048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"258831\">@David Renshaw</span> if you set <code>debug-assertions = true</code>, does that change anything?</p>",
        "id": 234607313,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618454095
    },
    {
        "content": "<p>I'm already doing that</p>",
        "id": 234607331,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618454113
    },
    {
        "content": "<p><code>debug = true</code> and <code>debug-assertions = true</code></p>",
        "id": 234607355,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618454138
    },
    {
        "content": "<p>hmm I'm not sure then</p>",
        "id": 234607364,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618454148
    },
    {
        "content": "<p>I'm only building stage 1. Could that have anything to do with it?</p>",
        "id": 234607431,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618454188
    },
    {
        "content": "<p>I wouldn't expect that to be related, no</p>",
        "id": 234607439,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618454199
    },
    {
        "content": "<p>(I did verify that <code>debug_assert!(false)</code> does indeed panic.)</p>",
        "id": 234607452,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618454213
    },
    {
        "content": "<p>rustbuild uses <code>--release</code> almost always - maybe it forgets to turn wrapping arithmetic back off?</p>",
        "id": 234607460,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618454221
    },
    {
        "content": "<p><code>overflow-checks</code> are normally a separate flag from <code>debug-assertions</code></p>",
        "id": 234607832,
        "sender_full_name": "Lokathor",
        "timestamp": 1618454556
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>failed to parse TOML configuration &#39;config.toml&#39;: unknown field `overflow-checks`, expected one of `optimize`, `debug`, `codegen-units`, `codegen-units-std`, `debug-assertions`, `debug-assertions-std`, `debug-logging`, `debuginfo-level`, `debuginfo-level-rustc`, `debuginfo-level-std`, `debuginfo-level-tools`, `debuginfo-level-tests`, `run-dsymutil`, `backtrace`, `incremental`, `parallel-compiler`, `default-linker`, `channel`, `description`, `musl-root`, `rpath`, `verbose-tests`, `optimize-tests`, `codegen-tests`, `ignore-git`, `dist-src`, `save-toolstates`, `codegen-backends`, `lld`, `use-lld`, `llvm-tools`, `deny-warnings`, `backtrace-on-ice`, `verify-llvm-ir`, `thin-lto-import-instr-limit`, `remap-debuginfo`, `jemalloc`, `test-compare-mode`, `llvm-libunwind`, `control-flow-guard`, `new-symbol-mangling`, `profile-generate`, `profile-use`, `download-rustc` for key `rust` at line 667 column 1\n</code></pre></div>",
        "id": 234608647,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618455299
    },
    {
        "content": "<p>overflow checks cannot be turned on with the config.</p>",
        "id": 234608658,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618455314
    },
    {
        "content": "<p>how can they be turned on?</p>",
        "id": 234608669,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618455324
    },
    {
        "content": "<p>You have to set it in Cargo.toml (or environment variable)</p>",
        "id": 234608670,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618455325
    },
    {
        "content": "<p>It was detected just recently that some tests will fail: <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/Test.20failures.20with.20.60overflow-checks.20.3D.20true.60/near/233977266\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Test.20failures.20with.20.60overflow-checks.20.3D.20true.60/near/233977266</a></p>",
        "id": 234608686,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618455340
    },
    {
        "content": "<p>I don't think anyone ever tests it with rustc, and it isn't tested on CI, so it might be a bumpy road if you try.</p>",
        "id": 234608751,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618455376
    },
    {
        "content": "<p>heh, yep, that's the same overflow I'm hitting</p>",
        "id": 234608787,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618455428
    },
    {
        "content": "<p>it happens on this tiny program:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">M</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 234608866,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618455485
    },
    {
        "content": "<p>In <code>track_errors</code>?  I have no idea what that function does. Might be worth investigating it.</p>",
        "id": 234608954,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618455584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/131828-t-compiler/topic/turning.20on.20integer.20overflow.20checking.20when.20building.20rustc/near/234608954\">said</a>:</p>\n<blockquote>\n<p>In <code>track_errors</code>?  I have no idea what that function does. Might be worth investigating it.</p>\n</blockquote>\n<p>I think it's used to count the number of errors for <code>-Ztreat-err-as-bug</code></p>",
        "id": 234609014,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618455608
    },
    {
        "content": "<p>I was hoping to bisect the overflow</p>",
        "id": 234609022,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618455620
    },
    {
        "content": "<p>but first I need to be able to actually make it happen (outside of my fuzzing setup)</p>",
        "id": 234609046,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618455634
    },
    {
        "content": "<p>ahhh I knew I'd seen you before <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> you run the rustc fuzzer</p>",
        "id": 234609089,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618455657
    },
    {
        "content": "<p>aha, this seems to have done it:</p>\n<div class=\"codehilite\"><pre><span></span><code>RUSTFLAGS=&quot;-C overflow-checks=on&quot; ./x.py build --stage 1\n</code></pre></div>",
        "id": 234610147,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618456476
    },
    {
        "content": "<p>It seems like a lot of this code dealing with \"were errors generated\" doesn't handle stashed diagnostics correctly, since those can come and go at various times.   (It's failing because an error gets stashed, and then stolen.)  The comment <code>Remove this method, it should never be needed.</code> isn't really clear why it shouldn't be needed.</p>",
        "id": 234613895,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618459484
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/84219\">https://github.com/rust-lang/rust/issues/84219</a></p>",
        "id": 234664362,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618489043
    },
    {
        "content": "<p>^ I wrote up a bug report</p>",
        "id": 234664393,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618489058
    },
    {
        "content": "<p>I'm curious, why the issue title states the panic location is at line 478, the issue description states it at line 475, and it's at line 477 on my machine...</p>",
        "id": 234667613,
        "sender_full_name": "hyd-dev",
        "timestamp": 1618490541
    },
    {
        "content": "<p>Oh I see, it's at line 475 in 1.51.0.</p>",
        "id": 234668063,
        "sender_full_name": "hyd-dev",
        "timestamp": 1618490737
    },
    {
        "content": "<p>I assume line 478 is due to some <code>dbg!</code>s.</p>",
        "id": 234668330,
        "sender_full_name": "hyd-dev",
        "timestamp": 1618490857
    },
    {
        "content": "<p>The error message I reported in the issue is from when I ran it at exactly the regressing commit</p>",
        "id": 234669352,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618491306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120518\">Eric Huss</span> <a href=\"#narrow/stream/131828-t-compiler/topic/turning.20on.20integer.20overflow.20checking.20when.20building.20rustc/near/234608658\">said</a>:</p>\n<blockquote>\n<p>overflow checks cannot be turned on with the config.</p>\n</blockquote>\n<p>This sounds like a bug in rustbuild to me. At the very least, I would expect <code>debug = true</code> to include overflow checks.</p>",
        "id": 234694551,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618499389
    },
    {
        "content": "<p>Hm, I think I find that surprising; debug = true isn't the same as profile = dev in cargo</p>",
        "id": 234698615,
        "sender_full_name": "simulacrum",
        "timestamp": 1618500675
    },
    {
        "content": "<p>(maybe it should be)</p>",
        "id": 234698647,
        "sender_full_name": "simulacrum",
        "timestamp": 1618500682
    },
    {
        "content": "<p>but we don't e.g. turn incremental on with debug = true either.</p>",
        "id": 234698688,
        "sender_full_name": "simulacrum",
        "timestamp": 1618500691
    },
    {
        "content": "<p>yea, my suggestion earlier was to turn on overflow checks if debug-assertions are enabled.  I don't know what kind of performance hit that would be, though.  (And of course the existing bugs will need to be fixed first.)  IIUC, debug-assertions are enabled on all builders except macos.</p>",
        "id": 234702717,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618501959
    },
    {
        "content": "<p>That seems not unreasonable, but I'd want to make sure we match the behavior in Cargo - does turning debug-assertions on there turn on overflow-checks as well? Otherwise, even though it seems reasonable, it feels confusing to not match.</p>",
        "id": 234711072,
        "sender_full_name": "simulacrum",
        "timestamp": 1618504866
    },
    {
        "content": "<p>I don't think debug-assertions are the right comparison, I think this should be part of <code>debug = true</code></p>",
        "id": 234711184,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618504912
    },
    {
        "content": "<p>cargo treats debug-assertions and overflow-checks independently <a href=\"https://doc.rust-lang.org/cargo/reference/profiles.html\">https://doc.rust-lang.org/cargo/reference/profiles.html</a></p>",
        "id": 234711279,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618504941
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/turning.20on.20integer.20overflow.20checking.20when.20building.20rustc/near/234711184\">said</a>:</p>\n<blockquote>\n<p>I don't think debug-assertions are the right comparison, I think this should be part of <code>debug = true</code></p>\n</blockquote>\n<p>(and we could always add an independent toggle for it, the same way there's a toggle for specifically debug-assertions)</p>",
        "id": 234711387,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618504991
    },
    {
        "content": "<p>in rustc debug assertions change the default for overflow checks</p>",
        "id": 234711776,
        "sender_full_name": "tm",
        "timestamp": 1618505145
    },
    {
        "content": "<p><span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I don't feel strongly either way. I do think <code>debug = true</code> likely is confusing in terms of affecting a lot more than someone might intend.</p>",
        "id": 234712451,
        "sender_full_name": "simulacrum",
        "timestamp": 1618505381
    },
    {
        "content": "<p>I think <code>debug</code> should be a profile setting, the same way <code>--release</code> and <code>--debug</code> are profile settings. If you want to change something specific, you can update one of the more granular settings, like debug-assertions or debug-info.</p>",
        "id": 234712624,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618505424
    },
    {
        "content": "<p>What confused me is that this is sufficient to enable overflow checking when I run fuzzing: <a href=\"https://github.com/dwrensha/fuzz-rustc/blob/425385b14457aede0a009c89a4b80744b37bc342/run-fuzzer.sh#L25\">https://github.com/dwrensha/fuzz-rustc/blob/425385b14457aede0a009c89a4b80744b37bc342/run-fuzzer.sh#L25</a></p>\n<div class=\"codehilite\"><pre><span></span><code>export RUSTFLAGS=&quot;$RUSTFLAGS -C debug-assertions=on&quot;\n</code></pre></div>",
        "id": 234732146,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618512773
    },
    {
        "content": "<p>well yes, because that skips cargo and x.py altogether and passes it straight to the compiler</p>",
        "id": 234732231,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618512814
    },
    {
        "content": "<p>so when I saw <code>debug-assertions</code> in <code>config.toml</code>, I expected it to do the same thing</p>",
        "id": 234732346,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618512859
    },
    {
        "content": "<p>(The fuzzer script does use <code>cargo</code>, but it does not use <code>x.py</code>.)</p>",
        "id": 234732488,
        "sender_full_name": "David Renshaw",
        "timestamp": 1618512930
    },
    {
        "content": "<p>oh oh I see I misread</p>",
        "id": 234732553,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618512953
    },
    {
        "content": "<p>yeah I'm not sure</p>",
        "id": 234732563,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1618512955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/turning.20on.20integer.20overflow.20checking.20when.20building.20rustc/near/234711072\">said</a>:</p>\n<blockquote>\n<p>I'd want to make sure we match the behavior in Cargo - does turning debug-assertions on there turn on overflow-checks as well? Otherwise, even though it seems reasonable, it feels confusing to not match.</p>\n</blockquote>\n<p>in cargo, <code>debug-assertions</code> and <code>overflow-checks</code> are totally independent. By default they always match each other in all four profiles, but you can set them individually.</p>",
        "id": 234800415,
        "sender_full_name": "Lokathor",
        "timestamp": 1618554189
    },
    {
        "content": "<p>sounds to me like we could just add <code>overflow-checks</code> to the <code>x.py</code> config.toml. Is this even worthy of an MCP ?</p>",
        "id": 234897845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618596543
    },
    {
        "content": "<p>(it sounds like an oversight, if anything, in our <code>debug=true</code> coverage)</p>",
        "id": 234897874,
        "sender_full_name": "pnkfelix",
        "timestamp": 1618596554
    },
    {
        "content": "<p>I would just make this change and see how much it affects performance:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/src/bootstrap/builder.rs b/src/bootstrap/builder.rs</span>\n<span class=\"gh\">index 38901a35296..986945f63bb 100644</span>\n<span class=\"gd\">--- a/src/bootstrap/builder.rs</span>\n<span class=\"gi\">+++ b/src/bootstrap/builder.rs</span>\n<span class=\"gu\">@@ -1140,14 +1140,13 @@ pub fn cargo(</span>\n             }\n         };\n         cargo.env(profile_var(\"DEBUG\"), debuginfo_level.to_string());\n<span class=\"gd\">-        cargo.env(</span>\n<span class=\"gd\">-            profile_var(\"DEBUG_ASSERTIONS\"),</span>\n<span class=\"gd\">-            if mode == Mode::Std {</span>\n<span class=\"gd\">-                self.config.rust_debug_assertions_std.to_string()</span>\n<span class=\"gd\">-            } else {</span>\n<span class=\"gd\">-                self.config.rust_debug_assertions.to_string()</span>\n<span class=\"gd\">-            },</span>\n<span class=\"gd\">-        );</span>\n<span class=\"gi\">+        let debug_assert = if mode == Mode::Std {</span>\n<span class=\"gi\">+            self.config.rust_debug_assertions_std.to_string()</span>\n<span class=\"gi\">+        } else {</span>\n<span class=\"gi\">+            self.config.rust_debug_assertions.to_string()</span>\n<span class=\"gi\">+        };</span>\n<span class=\"gi\">+        cargo.env(profile_var(\"DEBUG_ASSERTIONS\"), &amp;debug_assert);</span>\n<span class=\"gi\">+        cargo.env(profile_var(\"OVERFLOW_CHECKS\"), &amp;debug_assert);</span>\n\n         // `dsymutil` adds time to builds on Apple platforms for no clear benefit, and also makes\n         // it more difficult for debuggers to find debug info. The compiler currently defaults to\n</code></pre></div>\n<p>Do you see situations where it would be necessary to control it independently?</p>",
        "id": 234904424,
        "sender_full_name": "Eric Huss",
        "timestamp": 1618599547
    }
]