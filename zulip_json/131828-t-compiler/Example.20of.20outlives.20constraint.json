[
    {
        "content": "<p>Hello all -</p>\n<p>I'm continuing my journey deep into the internals of the Rust compiler.  Right now I'm working on region inference and constraint propogation.  It's pretty straightforward to come up with a practical example that violates the liveness constraint, but I'm having a hard time coming up with a real world example of the outlives constraint. I understand what it's doing based on the pseudocode included here <a href=\"https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/constraint_propagation.html\">https://rustc-dev-guide.rust-lang.org/borrow_check/region_inference/constraint_propagation.html</a> here, but I'm having a hard time coming up with an example I can use when presenting.</p>\n<p>Does anyone have or know of an example of code that illustrates the outlives constraint?</p>",
        "id": 204726816,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595454579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> part of the problem is that if you write <code>&amp;'long &amp;'short T</code>, most positions you can write that in will require that <code>'long</code> is shorter than (or equal to) <code>'short</code> automatically, so if you already have the opposite constraint, you end up with effectively a constraint that they're equal instead</p>",
        "id": 204759157,
        "sender_full_name": "eddyb",
        "timestamp": 1595477650
    },
    {
        "content": "<p>you probably need associated types in weird positions, to observe this</p>",
        "id": 204759162,
        "sender_full_name": "eddyb",
        "timestamp": 1595477672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> ah no I was misremembering, you just need to write the type in a <code>where</code> clause or equivalent e.g. <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a3a5adf915d5345de490d4f3e04f9d33\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a3a5adf915d5345de490d4f3e04f9d33</a></p>",
        "id": 204759202,
        "sender_full_name": "eddyb",
        "timestamp": 1595477746
    },
    {
        "content": "<p>we theoretically could <em>also</em> infer the constraint from that, idk why we don't, it might be arbitrary</p>",
        "id": 204759247,
        "sender_full_name": "eddyb",
        "timestamp": 1595477765
    },
    {
        "content": "<p>I don't know how you would get a borrowck error from this though</p>",
        "id": 204759261,
        "sender_full_name": "eddyb",
        "timestamp": 1595477801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> maybe this? <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c1048e7e7a73a684a721a3b2373edd6d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c1048e7e7a73a684a721a3b2373edd6d</a></p>",
        "id": 204759337,
        "sender_full_name": "eddyb",
        "timestamp": 1595477889
    },
    {
        "content": "<p>lol you get wild results if you try to get an outlives error <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e7db58988a9e3393d4a6b2e6366e108d\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e7db58988a9e3393d4a6b2e6366e108d</a></p>",
        "id": 204759448,
        "sender_full_name": "eddyb",
        "timestamp": 1595478045
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"225192\">@Nell Shamrell-Harrington</span> so I guess I'd say \"outlives\" constraints are not generally observed as such because they feed into inference and you generally get a different error <em>elsewhere</em>. but <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> would know more</p>",
        "id": 204759467,
        "sender_full_name": "eddyb",
        "timestamp": 1595478112
    },
    {
        "content": "<p>like in this case it thinks <code>y</code> may borrow <code>x</code> due to the signature of <code>foo</code></p>",
        "id": 204759515,
        "sender_full_name": "eddyb",
        "timestamp": 1595478154
    },
    {
        "content": "<p><code>&amp;x</code> creates a <code>&amp;'b i32</code> that has to outlive <code>'a</code> which means <code>'b</code> has to outlive <code>'a</code> (which would be <code>'static</code> if I could actually feed that requirement in)</p>",
        "id": 204759574,
        "sender_full_name": "eddyb",
        "timestamp": 1595478252
    },
    {
        "content": "<p>I can do this but it doesn't really do anything useful <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a649676eacea5e6b26e619e7e5ffa1da\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=a649676eacea5e6b26e619e7e5ffa1da</a></p>",
        "id": 204759601,
        "sender_full_name": "eddyb",
        "timestamp": 1595478331
    },
    {
        "content": "<p>or different, I should say</p>",
        "id": 204759610,
        "sender_full_name": "eddyb",
        "timestamp": 1595478340
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 204824439,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1595523653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Example.20of.20outlives.20constraint/near/204759261\">said</a>:</p>\n<blockquote>\n<p>I don't know how you would get a borrowck error from this though</p>\n</blockquote>\n<p>you never would <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span> <a href=\"https://github.com/rust-lang/rust/issues/25860\">https://github.com/rust-lang/rust/issues/25860</a></p>",
        "id": 204825492,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1595524180
    }
]