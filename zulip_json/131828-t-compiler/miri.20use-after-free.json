[
    {
        "content": "<p>Why does Miri not detect the user-after-free in <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=212a1f4acdea6428e83b74b33f2fb0b6\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=212a1f4acdea6428e83b74b33f2fb0b6</a>?</p>",
        "id": 219144099,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607378234
    },
    {
        "content": "<p>cc <a href=\"https://github.com/rust-lang/rust/issues/79808\">#79808</a></p>",
        "id": 219144119,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607378242
    },
    {
        "content": "<p>It detects a double-free if you use <code>Box</code>es instead of <code>i32</code>s, but the use-after-free with <code>i32</code>s is also UB/unsafe.</p>",
        "id": 219144233,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607378296
    },
    {
        "content": "<p>was the backing buffer actually freed or did the elements just get destructed?</p>",
        "id": 219144274,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378328
    },
    {
        "content": "<p>I'm not sure; the <code>std</code> code that's causing the UB is way beyond my knowledge</p>",
        "id": 219144367,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607378390
    },
    {
        "content": "<p>Here it is if you want to take a look:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// impl VecDeque</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">make_contiguous</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">is_contiguous</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tail</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">buffer_as_mut_slice</span><span class=\"p\">()[</span><span class=\"n\">tail</span><span class=\"o\">..</span><span class=\"n\">head</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cap</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">cap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">free</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tail_len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cap</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tail</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">free</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">tail_len</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// there is enough free space to copy the tail in one go,</span>\n<span class=\"w\">            </span><span class=\"c1\">// this means that we first shift the head backwards, and then</span>\n<span class=\"w\">            </span><span class=\"c1\">// copy the tail to the correct position.</span>\n<span class=\"w\">            </span><span class=\"c1\">//</span>\n<span class=\"w\">            </span><span class=\"c1\">// from: DEFGH....ABC</span>\n<span class=\"w\">            </span><span class=\"c1\">// to:   ABCDEFGH....</span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ptr</span>::<span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">tail_len</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// ...DEFGH.ABC</span>\n<span class=\"w\">                </span><span class=\"n\">ptr</span>::<span class=\"n\">copy_nonoverlapping</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tail</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tail_len</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// ABCDEFGH....</span>\n\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">free</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// there is enough free space to copy the head in one go,</span>\n<span class=\"w\">            </span><span class=\"c1\">// this means that we first shift the tail forwards, and then</span>\n<span class=\"w\">            </span><span class=\"c1\">// copy the head to the correct position.</span>\n<span class=\"w\">            </span><span class=\"c1\">//</span>\n<span class=\"w\">            </span><span class=\"c1\">// from: FGH....ABCDE</span>\n<span class=\"w\">            </span><span class=\"c1\">// to:   ...ABCDEFGH.</span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ptr</span>::<span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tail</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">tail_len</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// FGHABCDE....</span>\n<span class=\"w\">                </span><span class=\"n\">ptr</span>::<span class=\"n\">copy_nonoverlapping</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">tail_len</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// ...ABCDEFGH.</span>\n\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// free is smaller than both head and tail,</span>\n<span class=\"w\">            </span><span class=\"c1\">// this means we have to slowly \"swap\" the tail and the head.</span>\n<span class=\"w\">            </span><span class=\"c1\">//</span>\n<span class=\"w\">            </span><span class=\"c1\">// from: EFGHI...ABCD or HIJK.ABCDEFG</span>\n<span class=\"w\">            </span><span class=\"c1\">// to:   ABCDEFGHI... or ABCDEFGHIJK.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">left_edge</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">right_edge</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tail</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"c1\">// The general problem looks like this</span>\n<span class=\"w\">                </span><span class=\"c1\">// GHIJKLM...ABCDEF - before any swaps</span>\n<span class=\"w\">                </span><span class=\"c1\">// ABCDEFM...GHIJKL - after 1 pass of swaps</span>\n<span class=\"w\">                </span><span class=\"c1\">// ABCDEFGHIJM...KL - swap until the left edge reaches the temp store</span>\n<span class=\"w\">                </span><span class=\"c1\">//                  - then restart the algorithm with a new (smaller) store</span>\n<span class=\"w\">                </span><span class=\"c1\">// Sometimes the temp store is reached when the right edge is at the end</span>\n<span class=\"w\">                </span><span class=\"c1\">// of the buffer - this means we've hit the right order with fewer swaps!</span>\n<span class=\"w\">                </span><span class=\"c1\">// E.g</span>\n<span class=\"w\">                </span><span class=\"c1\">// EF..ABCD</span>\n<span class=\"w\">                </span><span class=\"c1\">// ABCDEF.. - after four only swaps we've finished</span>\n<span class=\"w\">                </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">left_edge</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">right_edge</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">cap</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">right_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">left_edge</span><span class=\"o\">..</span><span class=\"n\">right_edge</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">right_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">left_edge</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">cap</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">right_edge</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">src</span>: <span class=\"kt\">isize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">right_edge</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">right_offset</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">ptr</span>::<span class=\"n\">swap</span><span class=\"p\">(</span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">buf</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n_ops</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">right_edge</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">left_edge</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">left_edge</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">n_ops</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">right_edge</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">right_offset</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tail</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">head</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">head</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">buffer_as_mut_slice</span><span class=\"p\">()[</span><span class=\"n\">tail</span><span class=\"o\">..</span><span class=\"n\">head</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219144480,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607378427
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.make_contiguous\">https://doc.rust-lang.org/std/collections/struct.VecDeque.html#method.make_contiguous</a></p>",
        "id": 219144519,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607378447
    },
    {
        "content": "<p>that method shouldn't deallocate anything</p>",
        "id": 219144614,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378504
    },
    {
        "content": "<p>the UB is because you can read value multiple times, i.e., drop it twice for example</p>",
        "id": 219144956,
        "sender_full_name": "tm",
        "timestamp": 1607378648
    },
    {
        "content": "<p>i.e., later from pop_front</p>",
        "id": 219145003,
        "sender_full_name": "tm",
        "timestamp": 1607378680
    },
    {
        "content": "<p>if you box your i32s miri will detect it IIUC</p>",
        "id": 219145067,
        "sender_full_name": "lqd",
        "timestamp": 1607378718
    },
    {
        "content": "<p>with copy types everything works fine :D</p>",
        "id": 219145118,
        "sender_full_name": "tm",
        "timestamp": 1607378754
    },
    {
        "content": "<p>But something unsound is still going on even with copy types, no? Or is it not unsound, but just a bug?</p>",
        "id": 219145209,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607378786
    },
    {
        "content": "<p>the implementation is unsound, but I don't see where it would cause UB with copy types</p>",
        "id": 219145351,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378862
    },
    {
        "content": "<p>Hmm. What's the difference between 'unsound' and 'UB' here?</p>",
        "id": 219145376,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607378880
    },
    {
        "content": "<p>an unsound API allows causing UB from safe code</p>",
        "id": 219145451,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378899
    },
    {
        "content": "<p>UB is specified in the nomicon</p>",
        "id": 219145496,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378926
    },
    {
        "content": "<p>and is specific operations that are not allowed</p>",
        "id": 219145536,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607378941
    },
    {
        "content": "<p>Okay, that makes sense. So what do you call the fact that you can pop copy types from an empty vecdeque? Is that just 'a bug'?</p>",
        "id": 219146213,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607379213
    },
    {
        "content": "<p>that's unsound, like I said</p>",
        "id": 219147031,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607379722
    },
    {
        "content": "<p>Or a \"soundness bug\"? Or is that something completely different again? :D</p>",
        "id": 219147175,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607379797
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20use-after-free/near/219147031\">said</a>:</p>\n<blockquote>\n<p>that's unsound, like I said</p>\n</blockquote>\n<p>Oops :P</p>",
        "id": 219148259,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607380431
    },
    {
        "content": "<p>Okay, I think I understand now.</p>",
        "id": 219148317,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607380443
    },
    {
        "content": "<p>So why isn't Miri able to catch that? Or is it unsound, but the use of it doesn't cause UB?</p>",
        "id": 219148600,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607380618
    },
    {
        "content": "<p>miri catches UB</p>",
        "id": 219148727,
        "sender_full_name": "lcnr",
        "timestamp": 1607380697
    },
    {
        "content": "<p>the existence of unsoundness can only be proven using tests</p>",
        "id": 219148753,
        "sender_full_name": "lcnr",
        "timestamp": 1607380721
    },
    {
        "content": "<p>So using the API with copy types does not cause UB?</p>",
        "id": 219148772,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607380735
    },
    {
        "content": "<p>it[the existence of unsoundness] can not be disproven</p>",
        "id": 219148775,
        "sender_full_name": "lcnr",
        "timestamp": 1607380739
    },
    {
        "content": "<p>not language UB</p>",
        "id": 219148825,
        "sender_full_name": "lcnr",
        "timestamp": 1607380783
    },
    {
        "content": "<p>so it won't cause any miscompilations</p>",
        "id": 219148899,
        "sender_full_name": "lcnr",
        "timestamp": 1607380808
    },
    {
        "content": "<p>it's still incorrect <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 219148911,
        "sender_full_name": "lcnr",
        "timestamp": 1607380816
    },
    {
        "content": "<p>Wow, this stuff is confusing <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 219148920,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607380823
    },
    {
        "content": "<p>Basically: using the unsound code with copy types isn't UB because it won't make the compiler do weird things, but it <em>is</em> incorrect</p>",
        "id": 219148982,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607380864
    },
    {
        "content": "<p>I guess I'll understand better once we figure out what's causing the unsoundness.</p>",
        "id": 219148998,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607380877
    },
    {
        "content": "<p>i already know what does</p>",
        "id": 219149012,
        "sender_full_name": "lcnr",
        "timestamp": 1607380886
    },
    {
        "content": "<p>currently testing the fix</p>",
        "id": 219149019,
        "sender_full_name": "lcnr",
        "timestamp": 1607380891
    },
    {
        "content": "<p>naim94a said:</p>\n<blockquote>\n<p>Yes, It's still a use-after-free regardless</p>\n</blockquote>\n<p>wrt using it with copy types. I guess that's not correct?</p>",
        "id": 219149106,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607380930
    },
    {
        "content": "<p>I guess because you don't \"free\" copy types</p>",
        "id": 219149129,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607380952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20use-after-free/near/219144274\">said</a>:</p>\n<blockquote>\n<p>was the backing buffer actually freed or did the elements just get destructed?</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span> <a href=\"#narrow/stream/131828-t-compiler/topic/miri.20use-after-free/near/219144614\">said</a>:</p>\n<blockquote>\n<p>that method shouldn't deallocate anything</p>\n</blockquote>",
        "id": 219149208,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607381015
    },
    {
        "content": "<p>I think this is what was meant there?</p>",
        "id": 219149227,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1607381032
    },
    {
        "content": "<p>Maybe?</p>",
        "id": 219149327,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607381099
    },
    {
        "content": "<p>this method doesn't deallocate anything</p>",
        "id": 219149614,
        "sender_full_name": "lcnr",
        "timestamp": 1607381311
    },
    {
        "content": "<p>the backing buffer was not freed, so yeah. That was what is meant here i think</p>",
        "id": 219149631,
        "sender_full_name": "lcnr",
        "timestamp": 1607381327
    },
    {
        "content": "<p>So does that mean there's also a memory leak? Or am I just not understanding :)</p>",
        "id": 219149846,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607381472
    },
    {
        "content": "<p>no. <code>make_contiguous</code> does not deallocate anything.</p>",
        "id": 219149872,
        "sender_full_name": "lcnr",
        "timestamp": 1607381491
    },
    {
        "content": "<p>this means that for <code>Copy</code> types there isn't really a use after free</p>",
        "id": 219149892,
        "sender_full_name": "lcnr",
        "timestamp": 1607381506
    },
    {
        "content": "<p>because we never actually free anything in that case</p>",
        "id": 219149938,
        "sender_full_name": "lcnr",
        "timestamp": 1607381523
    },
    {
        "content": "<p>this is a use after free bug when using <code>VecDeque&lt;Box&lt;i32&gt;&gt;</code></p>",
        "id": 219149965,
        "sender_full_name": "lcnr",
        "timestamp": 1607381537
    },
    {
        "content": "<p>Actually, I just realized: why is anything being freed at all? Is that the root bug?</p>",
        "id": 219149995,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607381558
    },
    {
        "content": "<p>Because it's just rearranging things; it shouldn't be dropping them</p>",
        "id": 219150003,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607381569
    },
    {
        "content": "<p>I don't think it is</p>",
        "id": 219150019,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607381580
    },
    {
        "content": "<p>You don't think it is <em>what</em>?</p>",
        "id": 219150032,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607381589
    },
    {
        "content": "<p>It looks like it is just duplicating items</p>",
        "id": 219150044,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607381608
    },
    {
        "content": "<p>That's weird...</p>",
        "id": 219150081,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607381637
    },
    {
        "content": "<p>When the VecDeque is dropped, all elements (except Copy) are dropped again (the queue should be empty)</p>",
        "id": 219150133,
        "sender_full_name": "Naim A.",
        "timestamp": 1607381646
    },
    {
        "content": "<p>Basically, it's not a use-after-free <em>in the queue implementation</em>, but it allows performing a use-after-free outside of it, in safe code, and is hence unsound</p>",
        "id": 219150216,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1607381711
    },
    {
        "content": "<p>Huh. Well, I'm looking forward to seeing lcnr's PR so I get a better understanding :)</p>",
        "id": 219150265,
        "sender_full_name": "Noah Lev",
        "timestamp": 1607381755
    },
    {
        "content": "<p>it looks like head index is not reduced modulo size - 1, which leaves VecDeq in inconsistent state (is_empty works under assumption that head &amp; tail are reduced already)</p>",
        "id": 219151317,
        "sender_full_name": "tm",
        "timestamp": 1607382371
    },
    {
        "content": "<p>yeah</p>",
        "id": 219151339,
        "sender_full_name": "lcnr",
        "timestamp": 1607382394
    },
    {
        "content": "<p>modulo <code>size</code>, not <code>size - 1</code> though</p>",
        "id": 219151359,
        "sender_full_name": "lcnr",
        "timestamp": 1607382414
    },
    {
        "content": "<p>it may be a sign calling for more stateful/model-based property-based testing of the stdlib :)</p>",
        "id": 219152879,
        "sender_full_name": "lqd",
        "timestamp": 1607383580
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/79814\">#79814</a></p>\n<p>and yeah, we really need to do a better job testing <code>VecDeque</code></p>",
        "id": 219153207,
        "sender_full_name": "lcnr",
        "timestamp": 1607383873
    },
    {
        "content": "<p>FWIW, it's not (currently) considered UB to use a value after it was moved (such as in the call to <code>drop</code>); see <a href=\"https://github.com/rust-lang/unsafe-code-guidelines/issues/188\">https://github.com/rust-lang/unsafe-code-guidelines/issues/188</a><br>\n(UB can still arise as a side-effect of the destructor doi</p>",
        "id": 219813804,
        "sender_full_name": "RalfJ",
        "timestamp": 1607936124
    },
    {
        "content": "<p>ng something destructive, though)</p>\n<p>[Zulip suddenly stopped letting me edit that message mid-way through^^]</p>",
        "id": 219819538,
        "sender_full_name": "RalfJ",
        "timestamp": 1607939765
    },
    {
        "content": "<p>that's some perfect timing <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 219819760,
        "sender_full_name": "lcnr",
        "timestamp": 1607939886
    },
    {
        "content": "<p>the destructor did something destructive <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 219819828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607939933
    },
    {
        "content": "<p>Race condition due to a non-atomic write <span aria-label=\"ok\" class=\"emoji emoji-1f44c\" role=\"img\" title=\"ok\">:ok:</span></p>",
        "id": 219831076,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1607947221
    }
]