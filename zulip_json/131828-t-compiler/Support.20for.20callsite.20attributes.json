[
    {
        "content": "<h1>Intro</h1>\n<p>LLVM has support for <a href=\"https://llvm.org/docs/LangRef.html#call-site-attributes\">callsite attributes</a>, attributes that modify the code generation of function calls. There are associated functions to activate them in the Rust code base under the names <code>LLVMRustAddCallSiteAttr*</code>. As far as I know, they are only used internally by the compiler for some specific attributes (I might be wrong!).<br>\nMore generally, I don't think there are today any attribute that can be used in Rust code on function calls to trigger LLVM call site attributes. Things like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">toto</span><span class=\"p\">(</span><span class=\"n\">arg</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">tata</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"cp\">#[callsite_attribute]</span><span class=\"w\"> </span><span class=\"n\">toto</span><span class=\"p\">)(</span><span class=\"mi\">56</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And to be fair, I don't know if there are any call site attributes that would be useful today in Rust (so that's probably why it's not supported).</p>\n<h1>Some context</h1>\n<p>The reason why I am interested in callsite attribute is to add support to one in particular, <code>cmse_nonsecure_call</code>.<br>\nThis attribute is specific to the Armv8-M architecture profiles (<code>thumbv8m*</code> targets) to support part of the TrustZone-M extension. Very shortly, this extension defines Secure and Non-Secure worlds and this attribute marks a call to a Non-Secure function from the Secure code so that code generation is modified to have the registers cleared (to not leak possible confidential data) and some other things. If you are interested, <a href=\"https://developer.arm.com/documentation/ecm0359818/latest\">here</a> are the specs and <a href=\"https://reviews.llvm.org/D71129\">here</a> is the commit implementing it in LLVM.</p>\n<p>Now, the finality of supporting this attribute in Rust is a LLVM call to <code>LLVMRustAddCallSiteAttr</code> to add the <code>cmse_nonsecure_call</code> attribute to the callsite.<br>\nI have been prototyping and made it work by checking in the HIR, when building the MIR terminator Call node, if the attribute is set and decorate the MIR Call structure with the information of the presence of that attribute or not (as a <code>bool</code>). At code generation, if the field is set to <code>true</code>, then the LLVM function will be called. This caters for the previously described syntax, where the attribute is directly set on the function name with parenthesis (other syntaxes do not seem to work, the attribute is lost).</p>\n<p>In C, this is done through a typedef to declare a new function pointer <em>type</em> which will apply the attribute everytime the pointed function is called:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"k\">typedef</span> <span class=\"kt\">void</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">cmse_nonsecure_call</span><span class=\"p\">))</span> <span class=\"n\">nsfunc</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>I was not sure on how to transpose that in Rust, and just doing <code>(#[cmse_nonsecure_call] toto)()</code> was also easier to implement :D</p>\n<p>It was also proposed for this attribute to be implemented through a new ABI. I am open to any option at this point as long as we do not deviate too much from the spec (but which was written with C in mind only).</p>\n<h1>About callsite attribute in general</h1>\n<p>If using a callsite attribute is the chosen path to implement <code>cmse_nonsecure_call</code> then it might make sense to add this as a feature? As in instead of just checking if the <code>cmse_nonsecure_call</code> attribute is there, check for a subset of attributes that are allowed and encode them in a field in the MIR Call node. This can be similar (or actually equal) to the <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/middle/codegen_fn_attrs/struct.CodegenFnAttrFlags.html\">CodegenFnAttrFlags</a> for example. Then at code generation check for all attributes set in the bitflags and apply them.</p>",
        "id": 223054928,
        "sender_full_name": "Hugues de Valon",
        "timestamp": 1610906238
    },
    {
        "content": "<p>Hmm, if even C makes this part of the function's type, why shouldn't Rust?</p>",
        "id": 223056553,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610908706
    },
    {
        "content": "<p>I imagine you'd use either a different abi or give a symbol different path through extern {}.</p>",
        "id": 223056645,
        "sender_full_name": "nagisa",
        "timestamp": 1610908863
    },
    {
        "content": "<p>Either way probably needs an rfc</p>",
        "id": 223056655,
        "sender_full_name": "nagisa",
        "timestamp": 1610908878
    },
    {
        "content": "<p>(actually I think adding an abi wouldn't be too contraversial)</p>",
        "id": 223056722,
        "sender_full_name": "nagisa",
        "timestamp": 1610908960
    },
    {
        "content": "<p>Adding an ABI for this is what I suggested in the past as well</p>",
        "id": 223056733,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610908991
    },
    {
        "content": "<p>Would be happy to review a PR that does that</p>",
        "id": 223056740,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610909001
    },
    {
        "content": "<p>But I'd also be interested in knowing why a call-site attribute would be superior. Is there any situation in which users sometimes want to do a non-secure call to a function only some of the time?</p>",
        "id": 223056797,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610909054
    },
    {
        "content": "<p><code>Is there any situation in which users sometimes want to do a non-secure call to a function only some of the time?</code> - for the most part there are  2  kinds of <code>secure-to-non secure</code> calls  </p>\n<ul>\n<li>The very first call that's needed after bootup and TrustZone hardware initialization, when we want to pass execution-control to the non-secure firmware and</li>\n<li>When the secure world wants to explicitly call into the non-secure world. For ex: Secure world could be running something like a <code>system integrity checker</code> that passively monitors  the non-secure world  with periodic calls.</li>\n</ul>",
        "id": 223088812,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1610955742
    },
    {
        "content": "<blockquote>\n<p>if even C makes this part of the function's type, why shouldn't Rust?</p>\n</blockquote>\n<p>Yes agree that ideally it would be easier and safer (so that the secure code writers do not forget it) to have the attribute on the function's type.</p>\n<blockquote>\n<p>But I'd also be interested in knowing why a call-site attribute would be superior. Is there any situation in which users sometimes want to do a non-secure call to a function only some of the time?</p>\n</blockquote>\n<p>For the user I am not sure that it would be superior. I started doing it that way in my prototype because I was simply copying C and creating a new call site attribute.<br>\nAgree with <span class=\"user-mention\" data-user-id=\"360867\">@Nihal Pasham</span> here about the two cases. I can add that the second one can be generalised to any kind of callback the Non-Secure side wants to register to the Secure side (for example for a periodic interrupt). When it's time for the Secure side to call the callback, it will have to do it with this attribute.<br>\nOn those two cases, the Secure side only has an address of a Non-Secure function it wants to call (because it does not link to the Non-Secure code) and so it has to <em>cast</em> this address to a function pointer type to call it. In the first case, this address is the one of the Non-Secure reset handler and in the second case this address can be anything in the Non-Secure address space.</p>\n<p>If we go the ABI route, is it possible to specify an ABI on a function pointer and then to cast an address to that?</p>\n<p>Looking at <a href=\"https://doc.rust-lang.org/reference/items/functions.html#extern-function-qualifier\">this</a> it looks like it might be possible to do something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">non_secure_function</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"cmse_nonsecure_call\"</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mh\">0x10000004</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>(I am not sure of the cast syntax at all from the top of my head).</p>\n<p>Then it would be nice because every call to <code>non_secure_function</code> would set the callsite attribute in LLVM.</p>\n<p>Also, similarly to what we discussed on the other <a href=\"https://github.com/rust-lang/rust/pull/75810#discussion_r475220877\">PR</a>, we will need to restrict to a C ABI and only passing arguments by registers (this is checked by LLVM as well).</p>\n<p>To summarize, the new <code>cmse_nonsecure_call</code> ABI would:</p>\n<ul>\n<li>be a C ABI</li>\n<li>setting a callsite <code>cmse_nonsecure_call</code> attribute on every call</li>\n<li>restrict the number of parameters/return value to only use registers (that can probably be a follow-up task to be done in Rust side as this is currently checked in LLVM)</li>\n</ul>",
        "id": 223107899,
        "sender_full_name": "Hugues de Valon",
        "timestamp": 1610968882
    },
    {
        "content": "<p>Sounds reasonable!</p>",
        "id": 223117615,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1610975488
    },
    {
        "content": "<p>FYI, the PR is here: <a href=\"https://github.com/rust-lang/rust/pull/81346\">https://github.com/rust-lang/rust/pull/81346</a><br>\nI assumed it was OK not to go through a RFC but can change :)</p>",
        "id": 223824758,
        "sender_full_name": "Hugues de Valon",
        "timestamp": 1611509185
    },
    {
        "content": "<p>Woo, nice!</p>",
        "id": 223825772,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1611510512
    }
]