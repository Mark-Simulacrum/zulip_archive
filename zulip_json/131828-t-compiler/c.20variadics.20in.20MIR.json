[
    {
        "content": "<p>I'm working on implementing C variadics in Rust and I'm having a hard time figuring out the best way to generate the correct MIR</p>",
        "id": 152299732,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545353868
    },
    {
        "content": "<p>I currently see three approaches</p>",
        "id": 152299795,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545353936
    },
    {
        "content": "<p>1) create a new <code>TyKind</code> for C variadic arguments. This gets a bit hard in <code>typeck</code> method resolution because we need to adjust it to be the type of the <code>va_list</code> language item</p>",
        "id": 152299877,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545354019
    },
    {
        "content": "<p>2) Change <code>FnType</code>s <code>variadic</code> boolean to the name of the user provided argument and when generating the function signature remove the last argument. (I need the name to generate <code>va_start</code>/<code>va_end</code> correctly)</p>",
        "id": 152299988,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545354182
    },
    {
        "content": "<p>3) Rely on <code>FnSig</code>s <code>variadic</code> boolean and somehow hack stuff so that the input signature is something like <code>fn (i32, VaList, ...)</code> but in codegen we generate <code>fn (i32, ...)</code>.</p>",
        "id": 152300069,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545354254
    },
    {
        "content": "<p>Suggestions on code and/or documentation to read would be appreciated!</p>",
        "id": 152300111,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545354312
    },
    {
        "content": "<p>I'm currently just trying things and spending some quality time in <code>gdb</code> <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 152300137,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545354351
    },
    {
        "content": "<p>For reference the RFC is here <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2137-variadic.md\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/blob/master/text/2137-variadic.md\">https://github.com/rust-lang/rfcs/blob/master/text/2137-variadic.md</a></p>",
        "id": 152300193,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545354387
    },
    {
        "content": "<p>to 1) I think it would be best not to have a custom <code>TyKind</code>, but instead wherever you are currently producing your <code>TyKind::Variadic</code> value, obtain the <code>va_list</code> lang item's <code>DefId</code> via <code>tcx.language_items().va_list</code> and yield a <code>TyKind::Adt</code> with the given <code>DefId</code> and empty substs</p>",
        "id": 152319792,
        "sender_full_name": "oli",
        "timestamp": 1545386129
    },
    {
        "content": "<p>This is what my current attempts at 2 and 3 do, but then we generate the function signature <code>fn (i32, VaList, ...)</code>.</p>",
        "id": 152328888,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545397482
    },
    {
        "content": "<p>So then when we generate the MIR I guess I need to remove the <code>VaList</code> from the argument list after it is added to the <code>local_decls</code>, but remove it from the function input?</p>",
        "id": 152329064,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545397674
    },
    {
        "content": "<p>Can you show me the code where you generate new function signatures?</p>",
        "id": 152330577,
        "sender_full_name": "oli",
        "timestamp": 1545399204
    },
    {
        "content": "<p>What's your goal in this situation? have the function signature be <code>fn(i32, VaList)</code>?</p>",
        "id": 152330645,
        "sender_full_name": "oli",
        "timestamp": 1545399244
    },
    {
        "content": "<p>ah, so you want typeck to treat it as <code>fn(i32, VaList)</code> and mir generation to treat it as <code>fn(i32, ...)</code>?</p>",
        "id": 152330702,
        "sender_full_name": "oli",
        "timestamp": 1545399317
    },
    {
        "content": "<p>hmm... reading the RFC suggests to me that you would want the <code>VaList</code> argument in typeck and MIR generation and everything, and only make codegen forget about that argument</p>",
        "id": 152330908,
        "sender_full_name": "oli",
        "timestamp": 1545399504
    },
    {
        "content": "<p>or am I misinterpreting something here?</p>",
        "id": 152330924,
        "sender_full_name": "oli",
        "timestamp": 1545399522
    },
    {
        "content": "<blockquote>\n<p>ah, so you want typeck to treat it as fn(i32, VaList) and mir generation to treat it as fn(i32, ...)?</p>\n</blockquote>",
        "id": 152332472,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545401215
    },
    {
        "content": "<p>exactly</p>",
        "id": 152332475,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545401219
    },
    {
        "content": "<blockquote>\n<p>you would want the VaList argument in typeck and MIR generation and everything, and only make codegen forget about that argument</p>\n</blockquote>\n<p>I think that could work...</p>",
        "id": 152332650,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545401432
    },
    {
        "content": "<p>I might need to add a boolean on <code>ArgType</code> to indicate to <code>codegen</code> that the arg is indeed a variadic argument</p>",
        "id": 152332662,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545401456
    },
    {
        "content": "<blockquote>\n<p>or am I misinterpreting something here?</p>\n</blockquote>\n<p>nope</p>",
        "id": 152332746,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545401524
    },
    {
        "content": "<blockquote>\n<p>I might need to add a boolean on <code>ArgType</code> to indicate to <code>codegen</code> that the arg is indeed a variadic argument</p>\n</blockquote>\n<p>it could also be a new variant in the <code>PassMode</code> enum</p>",
        "id": 152339459,
        "sender_full_name": "oli",
        "timestamp": 1545407862
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/059e6a6f57f4e80d527a3cd8a8afe7f51f01af8e/src/librustc_target/abi/call/mod.rs#L37\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/059e6a6f57f4e80d527a3cd8a8afe7f51f01af8e/src/librustc_target/abi/call/mod.rs#L37\">https://github.com/rust-lang/rust/blob/059e6a6f57f4e80d527a3cd8a8afe7f51f01af8e/src/librustc_target/abi/call/mod.rs#L37</a></p>",
        "id": 152339460,
        "sender_full_name": "oli",
        "timestamp": 1545407862
    },
    {
        "content": "<p>Ah nice!</p>",
        "id": 152339536,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545407928
    },
    {
        "content": "<p>Thanks I'll check that out</p>",
        "id": 152339543,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545407941
    },
    {
        "content": "<p>I haven't looked into PassMode yet, so I'll have to read the code</p>",
        "id": 152339567,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545407969
    },
    {
        "content": "<p>FWIW my current progress is here <a href=\"https://github.com/dlrobertson/rust/tree/varargs0\" target=\"_blank\" title=\"https://github.com/dlrobertson/rust/tree/varargs0\">https://github.com/dlrobertson/rust/tree/varargs0</a></p>",
        "id": 152341762,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545410117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> After looking at <code>PassMode</code>, it definitely seems like the right direction. Thanks</p>",
        "id": 152344312,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545412873
    },
    {
        "content": "<p>In retrospect it seems so obvious to look at what is done for zst's <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 152344325,
        "sender_full_name": "dlrobertson",
        "timestamp": 1545412904
    }
]