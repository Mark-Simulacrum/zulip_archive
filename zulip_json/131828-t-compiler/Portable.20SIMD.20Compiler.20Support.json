[
    {
        "content": "<p>Hello all. I'm here on behalf of the Portable SIMD Project. We're investigating the best way to implement the Portable SIMD API's internals.</p>\n<p>Currently we're using <code>repr(simd)</code>, some of the <code>simd_foo</code> intrinsics when available (eg: <code>simd_add</code>, <code>simd_mul</code>, etc), and also directly linking to LLVM intrinisics when a particular <code>simd_foo</code> doesn't exist. The complication is that the Cranelift project is getting to closer to being a usable backend for Rust, and directly calling LLVM intrinsics doesn't work with Cranelift. We're currently going to continue implementing and developing the API using LLVM, but we want to get a plan for where the project will be moving in the longer term.</p>\n<p>The current best idea is that if vector support was moved into the MIR layer, then the MIR could be lowered into appropriate codegen IR during the normal lowering process. Any vector operations that don't exist on a target platform can be converted to standard scalar operations on each lane, as if the vector was an array instead. Rust code would access the MIR vector ops via rustc intrinsics, without directly relying on a particular codegen backend.</p>\n<p>This would also potentially allow both MIR optimizations and MIRI to work with vectors as well, always a good bonus.</p>\n<p>So what I'm asking you is: Given that yall actually work on the compiler, does this sound like a good plan? Or would some other approach be better?</p>",
        "id": 213847415,
        "sender_full_name": "Lokathor",
        "timestamp": 1603142227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> would be the one to ask about how this interacts with cranelift</p>",
        "id": 213855354,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603147134
    },
    {
        "content": "<p>and maybe <span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> or <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> for mir-opts and codegen</p>",
        "id": 213855403,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603147192
    },
    {
        "content": "<p>Hmm, so does this basically propose to copy the SIMD-related LLVM intrinsics you're currently using into rustc? That doesn't seem terrible, but it means that we have to essentially duplicate them (or at least their signature).</p>",
        "id": 213855649,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603147351
    },
    {
        "content": "<p>Or do you want first-class support for SIMD operations in MIR itself?</p>",
        "id": 213855928,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603147561
    },
    {
        "content": "<p>We'd need first class support for SIMD within MIR <em>or</em> we'd need some other system for using <code>cfg</code> to use LLVM or Cranelift intrinsic linking during compilation based on codegen system used.</p>\n<p>Simulacrum and others indicated that using <code>cfg</code> to detect Cranelift or LLVM would probably be a poor solution, and I agree. So we're hoping that we can get full SIMD support into MIR. Then the <em>source code</em> for SIMD would be codegen unaware, and only rustc would think about how different codegen backends interact with SIMD.</p>",
        "id": 213857615,
        "sender_full_name": "Lokathor",
        "timestamp": 1603148774
    },
    {
        "content": "<p>Though, if all simd operations can be done as rustc intrinisics <em>without</em> affecting MIR that's fine too I guess.</p>",
        "id": 213857705,
        "sender_full_name": "Lokathor",
        "timestamp": 1603148844
    },
    {
        "content": "<p>I'm not sure why you'd need SIMD operations in MIR for that, it seems to me that rustc intrinsics could do that job just fine</p>",
        "id": 213857712,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603148852
    },
    {
        "content": "<p>That would allow us to keep almost everything unchanged, except that we lift the LLVM intrinsics you need to rustc intrinsics, and add a mapping to LLVM intrinsics to <code>rustc_codegen_llvm</code></p>",
        "id": 213857783,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603148895
    },
    {
        "content": "<p>I don't fully recall why we landed on MIR. Looking back at <a href=\"#narrow/stream/257879-project-portable-simd/topic/Portable.20pure-Rust.20implementation\">the conversation here</a>, it seems like <span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> proposed the MIR part of things.</p>",
        "id": 213858181,
        "sender_full_name": "Lokathor",
        "timestamp": 1603149242
    },
    {
        "content": "<p>I don't think we necessarily need first-class MIR support; intrinsics are probably sufficient.  (Though maybe some of the basics would make sense in mir, like having MIR's <code>+</code> support vector types too.)</p>\n<p>IIRC the core of the MIR idea was that it could be nice to do the \"scalarize\" step in MIR so it would be usable across backends and targets.  It's possible that doing it in the cranelift backend would also be fine.</p>",
        "id": 213863467,
        "sender_full_name": "scottmcm",
        "timestamp": 1603153588
    },
    {
        "content": "<p>I see, yeah that makes sense. I don't think there's too much of a benefit of having the MIR-level operators work with vectors, but we could still write a MIR pass that scalarizes the intrinsic calls.</p>",
        "id": 213863569,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603153681
    },
    {
        "content": "<p>(Or maybe just replace the intrinsic calls with <code>compiler-builtin</code> calls -- I don't remember what the linking details for compiler-builtins are.)</p>",
        "id": 213863918,
        "sender_full_name": "scottmcm",
        "timestamp": 1603154008
    },
    {
        "content": "<p>what is an example of a vector operation that is not supported and would require scalar conversion when lowering to llvm-ir?</p>",
        "id": 213918871,
        "sender_full_name": "nagisa",
        "timestamp": 1603200730
    },
    {
        "content": "<p>scalarizing some of the ops (shuffles for instance) can be non-trivial</p>",
        "id": 213918933,
        "sender_full_name": "nagisa",
        "timestamp": 1603200766
    },
    {
        "content": "<p>None, but Cranelift might require this</p>",
        "id": 213918940,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603200770
    },
    {
        "content": "<p>Basically we want a situation where the relative amount of support that a codegen backend offers for actually doing the codegen we want does not have to affect our API in a visible fashion and also does not block those codegen backends from being added. Then if LLVM, or even Cranelift, supports something the other doesn't, we can just go ahead and use it internally to rustc. Making the commits to scalarize what we need scalarized is OK, we're actually pretty ready to do that, but we will need to develop a framework for doing so.</p>",
        "id": 213961129,
        "sender_full_name": "Jubilee",
        "timestamp": 1603218756
    },
    {
        "content": "<p>Ops on a SIMD vector are morally equivalent to manipulations on an array once you politely ignore the vector register and instead treat it as something that should be handled in a normal fashion by scalar registers. There's some sneaky tricks that you can do actually, with a scalar register, that make it imitate a vector register, but we're looking for a basic abstraction boundary more than anything, so any such silliness would not be in scope of this initial step.</p>",
        "id": 213961916,
        "sender_full_name": "Jubilee",
        "timestamp": 1603219141
    },
    {
        "content": "<p>Because they were mentioned, I'll note that the shuffle ops in scalar code are actually fairly simple. You just form a new array from the old array, and you're done.</p>",
        "id": 213972873,
        "sender_full_name": "Lokathor",
        "timestamp": 1603224472
    },
    {
        "content": "<p>Well it might not have been element-wise shuffle specifically, but I distinctly remember triggering scalar fallback for a single vector LLVM DAG instruction and it generated a couple dozen pages of scalar code.</p>",
        "id": 213996872,
        "sender_full_name": "nagisa",
        "timestamp": 1603241178
    },
    {
        "content": "<p>don't remember what exactly it was tho</p>",
        "id": 213996882,
        "sender_full_name": "nagisa",
        "timestamp": 1603241198
    },
    {
        "content": "<p>and ultimately when considering the complexity of such a functionality, the lowering of the complicated instructions is exactly what matters, not obvious/trivial things like pairwise multiply or, I guess, shuffle (which is just shuffle of virtual registers, indeed)</p>",
        "id": 213996999,
        "sender_full_name": "nagisa",
        "timestamp": 1603241338
    },
    {
        "content": "<p>So thinking about it, it is entirely unclear to me if MIR is at all an appropriate place for such lowerings. It does not have any knowledge about the target machine for one, with the exception of its datalayout.</p>",
        "id": 213997039,
        "sender_full_name": "nagisa",
        "timestamp": 1603241393
    },
    {
        "content": "<p>not entirely clear what it should do if target machine were to support a specific instruction after some legalization (dropping down to scalar code in that case would be a pessimisation, but trying to figure this out in MIR also seems wrong; and hard too)</p>",
        "id": 213997184,
        "sender_full_name": "nagisa",
        "timestamp": 1603241503
    },
    {
        "content": "<p>But I do concur that having MIR _understand_ vector operations is useful – it would at very least be a prerequisite for const-evaluation of simd code, I think?</p>",
        "id": 213997272,
        "sender_full_name": "nagisa",
        "timestamp": 1603241573
    },
    {
        "content": "<p>Alright, so<br>\n1) adding vectors to MIR might be a good idea for various reasons,<br>\n2) but as a place to provide a scalar lowering it doesn't seem to make sense.</p>\n<p>Mmm, do you have any recommendations on next steps then? We need the ability to furnish a pure Rust scalar lowering <em>somewhere</em> that a codegen backend can opt to use if necessary.</p>",
        "id": 214110283,
        "sender_full_name": "Jubilee",
        "timestamp": 1603312078
    },
    {
        "content": "<p>If we resort to doing this in rustc code it'd have to live in the lowering-to-backend code, there isn't really anywhere else for it to be as rustc's job ends after that step. But to achieve best bang-for-buck it'd be better for it to live in the layer that generates assembly, pretty much.</p>",
        "id": 214126120,
        "sender_full_name": "nagisa",
        "timestamp": 1603321645
    }
]