[
    {
        "content": "<p>In <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>'s PR for making v0 symbol mangling the default, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> <a href=\"https://github.com/rust-lang/rust/pull/89917#issuecomment-945888574\">asked for a list of trade offs</a> that switching to v0 mangling implies. Maybe we can compile the list here so that <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> can update the PR text before merging.</p>\n<p>The main trade offs that I am aware of are: </p>\n<ul>\n<li>\n<p>Symbol names become longer because they contain more information. It would be good to have some numbers on how this affects actual artifact sizes. Maybe we want to wait until perf.rlo can provide these numbers which hopefully should happen this month (assuming @rylev and I find the time to work on it). It would also be good to list the scenarios in which this makes a difference. Not all artifacts will contain (all) symbol names.</p>\n</li>\n<li>\n<p>Compile times increase. The <a href=\"https://perf.rust-lang.org/compare.html?start=af9b508e1d6c83a8f0e6f5c0b2b75598aa37ed27&amp;end=d6cf5a91f80fba50e1594bddce52ee42486468c6\">perf run in the PR</a> shows regressions up to 9.45%. However, on closer inspection it looks like only very linker-heavy workloads are affected that much (e.g. webrender-wrench which spends 85.13% in the linker). Generating the symbol names in the FE seems to be too much of a problem. My assumption is that compile time regressions are mostly due to the linker (and sometimes LLVM) having to shovel more data around due to the longer names. It would be great to have some numbers for different linkers here. And to group regressions by scenario (i.e. check builds vs rlib builds vs builds that actually invoke a linker).</p>\n</li>\n</ul>\n<p>Are there other trade offs?</p>",
        "id": 259844437,
        "sender_full_name": "mw",
        "timestamp": 1635760480
    },
    {
        "content": "<p>Ideally this is a disadvantage that would be temporary and we've mostly dealt with, but support for symbols in third party tools is going to be worse with the new scheme than the old scheme.</p>",
        "id": 259844859,
        "sender_full_name": "davidtwco",
        "timestamp": 1635760762
    },
    {
        "content": "<p>Yes, no harm in listing that as a trade off too.</p>",
        "id": 259845305,
        "sender_full_name": "mw",
        "timestamp": 1635760952
    },
    {
        "content": "<p>As a side note: Now that v0 is the default for the compiler code itself, it gets a lot more testing than it used, especially around new features that may require extensions to the scheme. I think the pressure to stabilize is lowered a bit by that so that there will be more time for external tools to add support.</p>",
        "id": 259845545,
        "sender_full_name": "mw",
        "timestamp": 1635761108
    },
    {
        "content": "<p>Also, making v0 the default on nightly as <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> <a href=\"https://github.com/rust-lang/rust/pull/89917#issuecomment-951009529\">suggested</a> will make the new scheme more visible to end-users -- which should also be good for external tooling adoption.</p>",
        "id": 259845778,
        "sender_full_name": "mw",
        "timestamp": 1635761227
    },
    {
        "content": "<p>So ... Those all sound like downsides. What are the benefits of v0 mangling?</p>",
        "id": 259846051,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1635761402
    },
    {
        "content": "<p>Oh never mind, they're listed in the PR description</p>",
        "id": 259846143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1635761440
    },
    {
        "content": "<p>The legacy mangling scheme was at some point changed to include full substitutions for <code>drop_in_place</code>, but since legacy mangling has no back references, those symbols can be orders of magnitude longer in legacy scheme than in v0 scheme.</p>",
        "id": 259848690,
        "sender_full_name": "tm",
        "timestamp": 1635763216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352985\">@tm</span>, interesting. So that would be an advantage of the v0 scheme, right?</p>",
        "id": 259859931,
        "sender_full_name": "mw",
        "timestamp": 1635771415
    },
    {
        "content": "<p>@mw yeah, back references doing their job. I noticed this when doing some basic comparison legacy vs v0 and observing that length of maximum length symbol decreased in v0, which seemed surprising initially. But I don't have any numbers offhand.</p>",
        "id": 259866053,
        "sender_full_name": "tm",
        "timestamp": 1635774929
    },
    {
        "content": "<p>Unlikely, but is it possible that <a href=\"https://github.com/rust-lang/rust/pull/89836\">https://github.com/rust-lang/rust/pull/89836</a> might have some bearing on this discussion?</p>",
        "id": 259875603,
        "sender_full_name": "pierwill",
        "timestamp": 1635779418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"316352\">@pierwill</span> Not directly related, I'd say</p>",
        "id": 259882147,
        "sender_full_name": "mw",
        "timestamp": 1635782510
    },
    {
        "content": "<p>Another advantage of the new mangling scheme: The backtraces we get from the production compiler contain generic arguments now. Eg. <a href=\"https://github.com/rust-lang/rust/issues/90715\">https://github.com/rust-lang/rust/issues/90715</a> </p>\n<p>(Although the default demangler setting should probably not print the full crate disambiguator)</p>",
        "id": 260777151,
        "sender_full_name": "mw",
        "timestamp": 1636452853
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> was just mentioning in another thread that the generic parameters make the compiler much easier to profile :)</p>",
        "id": 260777228,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636452929
    },
    {
        "content": "<p>I didn't say it was easier! There's more information, which is typically good, but it's <em>very</em> verbose, which makes the profiles harder to skim. I'm not yet decided on whether it's an improvement from a profiling POV.</p>",
        "id": 260777671,
        "sender_full_name": "nnethercote",
        "timestamp": 1636453224
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span>  Note that the syntax of mangled names is defined by the RFC but how a demangler displays them is not defined. It can do whatever is most useful in a given context. It just has more information to work with.</p>",
        "id": 260778532,
        "sender_full_name": "mw",
        "timestamp": 1636453783
    },
    {
        "content": "<p>(see <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2603-rust-symbol-name-mangling-v0.md#appendix-a---suggested-demangling\">https://github.com/rust-lang/rfcs/blob/master/text/2603-rust-symbol-name-mangling-v0.md#appendix-a---suggested-demangling</a>)</p>",
        "id": 260778749,
        "sender_full_name": "mw",
        "timestamp": 1636453915
    },
    {
        "content": "<p>Having generics makes it more useful when search through the the functions in a profile with hotspot in my experience</p>",
        "id": 260785652,
        "sender_full_name": "The 8472",
        "timestamp": 1636458122
    },
    {
        "content": "<p>although being able to remove them to aggregate monomorphizations would be nice.</p>",
        "id": 260785803,
        "sender_full_name": "The 8472",
        "timestamp": 1636458207
    }
]