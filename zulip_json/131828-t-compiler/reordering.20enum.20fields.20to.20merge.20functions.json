[
    {
        "content": "<p>Is rustc allowed to reorder enum fields?</p>\n<p>I found that for code like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">True</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">False</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">af</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">bool</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">char</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"sc\">'X'</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"sc\">'F'</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bf</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">A</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">char</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">A</span>::<span class=\"n\">True</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"sc\">'X'</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">A</span>::<span class=\"n\">False</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"sc\">'F'</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>We would have two functions </p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">example:</span><span class=\"err\">:</span><span class=\"nl\">af:</span>\n        <span class=\"nf\">test</span>    <span class=\"no\">edi</span><span class=\"p\">,</span> <span class=\"no\">edi</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">ecx</span><span class=\"p\">,</span> <span class=\"mi\">88</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"mi\">70</span>\n        <span class=\"nf\">cmovne</span>  <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"no\">ecx</span>\n        <span class=\"nf\">ret</span>\n\n<span class=\"nl\">example:</span><span class=\"err\">:</span><span class=\"nl\">bf:</span>\n        <span class=\"nf\">test</span>    <span class=\"no\">edi</span><span class=\"p\">,</span> <span class=\"no\">edi</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">ecx</span><span class=\"p\">,</span> <span class=\"mi\">70</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"mi\">88</span>\n        <span class=\"nf\">cmovne</span>  <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"no\">ecx</span>\n        <span class=\"nf\">ret</span>\n</code></pre></div>\n<p>But if I change the enum into  <code>False, True</code>, it is recognized that the functions are identical ..? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"nl\">example:</span><span class=\"err\">:</span><span class=\"nl\">af:</span>\n        <span class=\"nf\">test</span>    <span class=\"no\">edi</span><span class=\"p\">,</span> <span class=\"no\">edi</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">ecx</span><span class=\"p\">,</span> <span class=\"mi\">88</span>\n        <span class=\"nf\">mov</span>     <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"mi\">70</span>\n        <span class=\"nf\">cmovne</span>  <span class=\"no\">eax</span><span class=\"p\">,</span> <span class=\"no\">ecx</span>\n        <span class=\"nf\">ret</span>\n</code></pre></div>\n<p><a href=\"https://rust.godbolt.org/z/dzj4KKP1h\">https://rust.godbolt.org/z/dzj4KKP1h</a></p>",
        "id": 267357277,
        "sender_full_name": "matthiaskrgr",
        "timestamp": 1641733446
    },
    {
        "content": "<p>For fieldless enums the ability to cast them to their discriminant via <code>as</code> implies that they can't be reordered.</p>",
        "id": 267358052,
        "sender_full_name": "The 8472",
        "timestamp": 1641734607
    },
    {
        "content": "<p>I wonder if LLVM could learn to do a kind of tail merging there: toggle the argument (changing 0 to 1 and vice versa) then fall through to the other function.</p>",
        "id": 267368560,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641749899
    },
    {
        "content": "<p>Well, <code>as</code> has the opportunity to run code, so it's not directly true that it prevents reordering.  The <code>discriminant_value</code> intrinsic can recover the original discriminant despite layout optimization.</p>\n<p>I'm not sure if <code>transmute(A::True)</code> is required to be <code>0</code> when there's no <code>repr</code>...</p>",
        "id": 267635444,
        "sender_full_name": "scottmcm",
        "timestamp": 1641930667
    },
    {
        "content": "<p>FWIW, I find it surprising that you can cast enums to numbers when they have no repr and no explicit discriminants...</p>",
        "id": 267635671,
        "sender_full_name": "Noah Lev",
        "timestamp": 1641930770
    },
    {
        "content": "<p>I'm hoping that the new <code>AsRepr</code> stuff will help change the conventions so a future edition can reasonably start adding some extra restrictions to such things.</p>",
        "id": 267636017,
        "sender_full_name": "scottmcm",
        "timestamp": 1641930948
    },
    {
        "content": "<p>I agree. And I'm hoping that we add <code>.truncate()</code> methods on integer types, and otherwise take steps to differentiate and make explicit all the uses of <code>as</code>.</p>",
        "id": 267641197,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1641933296
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/reordering.20enum.20fields.20to.20merge.20functions/near/267635444\">said</a>:</p>\n<blockquote>\n<p>Well, <code>as</code> has the opportunity to run code, so it's not directly true that it prevents reordering.  The <code>discriminant_value</code> intrinsic can recover the original discriminant despite layout optimization.</p>\n<p>I'm not sure if <code>transmute(A::True)</code> is required to be <code>0</code> when there's no <code>repr</code>...</p>\n</blockquote>\n<p>I'm really hoping it isn't. Rust should not prevent itself from one day being able to layout optimize</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">A</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">W</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"k\">enum</span> <span class=\"nc\">B</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Y</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">enum</span> <span class=\"nc\">E</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 267676173,
        "sender_full_name": "Jake",
        "timestamp": 1641955750
    }
]