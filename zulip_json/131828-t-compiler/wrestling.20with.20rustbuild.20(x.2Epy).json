[
    {
        "content": "<p>I feel like I’m living in a Kafka novella. What flags do I need to pass to <code>x.py</code> to actually <em>see</em> the output issues via <code>eprintln!</code> in the <code>rustc.rs</code>shim?</p>",
        "id": 227281753,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614007110
    },
    {
        "content": "<p>Actually, let me revise that; I’m staring at the <code>if verbose &gt; 1 { eprintln!(…); … }</code> stuff, but I haven’t checked if I do see <code>eprintln!</code>’s outside of that <code>if verbose</code> guard</p>",
        "id": 227281875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614007157
    },
    {
        "content": "<p>okay, I <em>do</em> see RUSTC-TIMING output. So the problem isn’t <code>eprintln!</code>; it must be how the verbosity is handled.</p>",
        "id": 227281965,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614007201
    },
    {
        "content": "<p>can the <code>verbose</code> setting <em>only</em> be established in the <code>config.toml</code>, not via command lines?</p>",
        "id": 227282299,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614007320
    },
    {
        "content": "<p>hmm. or maybe my mistake was that I was seeing RUSTC-TIMING output from a different file, and <em>thought</em> it was from <code>rustc.rs</code> ? (At this point I <em>have</em> managed to observe the <code>eprintln!</code> lines I was expecting, but I have not figured out why I wasn’t seeing them before.)</p>",
        "id": 227283133,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614007619
    },
    {
        "content": "<p>I think <a href=\"http://rustc.rs\">rustc.rs</a> might get e.g. verbose level - 1 or something like that?</p>",
        "id": 227288639,
        "sender_full_name": "simulacrum",
        "timestamp": 1614009524
    },
    {
        "content": "<p>notably, verbose &gt; 1 might mean anything of -vv or -vvv</p>",
        "id": 227288660,
        "sender_full_name": "simulacrum",
        "timestamp": 1614009536
    },
    {
        "content": "<p>yeah I’m not sure what was happening</p>",
        "id": 227294427,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614011167
    },
    {
        "content": "<p>but I’ve managed to see the output now</p>",
        "id": 227294449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614011175
    },
    {
        "content": "<p>my current best guess is that I hadn’t touched any of the compiler source</p>",
        "id": 227294488,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614011192
    },
    {
        "content": "<p>during my initial test runs of the changes to <code>rustc.rs</code></p>",
        "id": 227294506,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614011200
    },
    {
        "content": "<p>and I was assuming that I would see it get invoked nonetheless</p>",
        "id": 227294542,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614011215
    },
    {
        "content": "<p>though in hindsight, I can see how that assumption is flawed.</p>",
        "id": 227294564,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614011225
    },
    {
        "content": "<p>(i.e. it is probably a feature, not a bug, that we do not rebuild the world in response to changes to <code>rustc.rs</code> shim.)</p>",
        "id": 227294613,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614011242
    },
    {
        "content": "<p>(this does not explain why I was seeing <code>[RUSTC-TIMING]</code> output though. As far as I can tell, that is <em>only</em> emitted via <code>rustc.rs</code> So, still pretty confused.)</p>",
        "id": 227294751,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614011287
    },
    {
        "content": "<p>by the way, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> , since you’re here: This is a trivial rustbuild PR that you had previously said you’d be willing to review: PR <a href=\"https://github.com/rust-lang/rust/issues/82403\">#82403</a></p>",
        "id": 227294934,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614011353
    },
    {
        "content": "<p>yeah will do later today</p>",
        "id": 227294956,
        "sender_full_name": "simulacrum",
        "timestamp": 1614011362
    },
    {
        "content": "<p>thanks!</p>",
        "id": 227294967,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614011367
    },
    {
        "content": "<p>(CI for that PR is failing btw)</p>",
        "id": 227296524,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614011970
    },
    {
        "content": "<p>(fixed, hopefully. time to put <code>x.py test src/tools/tidy</code> back into my M-x compile runs.)</p>",
        "id": 227297445,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614012310
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/81833\">https://github.com/rust-lang/rust/pull/81833</a> should hopefully make that less painful</p>",
        "id": 227297516,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614012344
    },
    {
        "content": "<p>Hey, rustbuild experts: Do we cache the output from the rustc runs during rustbuild, and replay it when the file is unchanged?</p>",
        "id": 227506546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614115779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ^ ?</p>",
        "id": 227506679,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614115814
    },
    {
        "content": "<p>cargo does that, not x.py</p>",
        "id": 227506752,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614115846
    },
    {
        "content": "<p>Cargo does that if you mean stdio</p>",
        "id": 227506766,
        "sender_full_name": "simulacrum",
        "timestamp": 1614115852
    },
    {
        "content": "<p>but yes</p>",
        "id": 227506768,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614115852
    },
    {
        "content": "<p>In particular, I’m noticing that when I do a rebuild right now on my Mac, it finishes in less than two seconds, but it still includes all the same <code>[RUSTC-TIMING]</code> output</p>",
        "id": 227506777,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614115854
    },
    {
        "content": "<p>okay all this now makes <em>so</em> much sense</p>",
        "id": 227506801,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614115866
    },
    {
        "content": "<p>see also <a href=\"https://github.com/rust-lang/cargo/issues/8374\">https://github.com/rust-lang/cargo/issues/8374</a>; cargo is not very good at validating the output cache IMO</p>",
        "id": 227506847,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614115886
    },
    {
        "content": "<p>I guess I did know that <code>cargo</code> cached the output. For some reason I thought output for e.g. <code>[RUSTC-TIMING]</code> would not get cached.</p>",
        "id": 227506874,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614115897
    },
    {
        "content": "<p>(I mean, its great for seeing a reminder of what happened on the last run. But its also super confusing. :) )</p>",
        "id": 227506962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614115927
    },
    {
        "content": "<p>I think cargo does just fine personally with the information it has.</p>",
        "id": 227506993,
        "sender_full_name": "simulacrum",
        "timestamp": 1614115944
    },
    {
        "content": "<p>I don’t think I blame <code>cargo</code> here</p>",
        "id": 227507008,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614115954
    },
    {
        "content": "<p>I don’t know what I blame. Maybe myself.</p>",
        "id": 227507021,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614115964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> could we move the timing info out of <code>rustc.rs</code> somehow so it doesn't get cached? Maybe use <code>cargo -Z timings</code> and parse the streaming output?</p>",
        "id": 227507131,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614116010
    },
    {
        "content": "<p>I want it cached personally.</p>",
        "id": 227507337,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116085
    },
    {
        "content": "<p>hmm, why?</p>",
        "id": 227507399,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614116109
    },
    {
        "content": "<p>Maybe its fine as long as its clear when it came from</p>",
        "id": 227507546,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116165
    },
    {
        "content": "<p>/me muses about emitting a timestamp on the line</p>",
        "id": 227507571,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116176
    },
    {
        "content": "<p>I don't know if it's because I exactly know where the output comes from, but I find it really nice that any build comes with easy to access slowness</p>",
        "id": 227507778,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116283
    },
    {
        "content": "<p>Rather than having to invalidate some cache and wait</p>",
        "id": 227507846,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116306
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/wrestling.20with.20rustbuild.20(x.2Epy)/near/227507778\">said</a>:</p>\n<blockquote>\n<p>[…] I find it really nice that any build comes with easy to access slowness</p>\n</blockquote>\n<p>I don’t understand what this means.</p>",
        "id": 227507947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116361
    },
    {
        "content": "<p>do you mean that its nice to be able to query that log, even when the build was already done?</p>",
        "id": 227507979,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116386
    },
    {
        "content": "<p>that’s only true if you had thought to turn on build.print_step_timings in the first place, but I guess that’s a given for the cases you are interested in?</p>",
        "id": 227508068,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116410
    },
    {
        "content": "<p>Yeah, basically I always have it on</p>",
        "id": 227508368,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116534
    },
    {
        "content": "<p>And it's not surprising to me</p>",
        "id": 227508411,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116558
    },
    {
        "content": "<p>would you object to some form of timestamp being included in the output?</p>",
        "id": 227508430,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116565
    },
    {
        "content": "<p>I say this, while thinking “_I_ would be annoyed by that.\"</p>",
        "id": 227508469,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116587
    },
    {
        "content": "<p>No, not really</p>",
        "id": 227508471,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116587
    },
    {
        "content": "<p>I wouldn't find it useful</p>",
        "id": 227508488,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116592
    },
    {
        "content": "<p>right, but you already know what to expect here</p>",
        "id": 227508512,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116603
    },
    {
        "content": "<p>The idea of integrating your work into -Ztimings might be better though</p>",
        "id": 227508532,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116614
    },
    {
        "content": "<p>a timestamp would have told me: “Hey, dummy, these runs aren’t happening right now.\"</p>",
        "id": 227508544,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116621
    },
    {
        "content": "<p>IIRC that prints the time in sort of cargo native format</p>",
        "id": 227508557,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116629
    },
    {
        "content": "<p>Timestamps are helpful if you know what time it is</p>",
        "id": 227508632,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116644
    },
    {
        "content": "<p>I usually don't</p>",
        "id": 227508657,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/wrestling.20with.20rustbuild.20(x.2Epy)/near/227508557\">said</a>:</p>\n<blockquote>\n<p>IIRC that prints the time in sort of cargo native format</p>\n</blockquote>\n<p>here's an example:</p>\n<div class=\"codehilite\"><pre><span></span><code>(bash@joshua-ThinkPad-P51s) ~/.../rust/rand [16:44:09]\n&gt; cargo build -Z timings\n   Compiling libc v0.2.81\n   Compiling getrandom v0.2.0\n   Compiling ppv-lite86 v0.2.10\n   Completed ppv-lite86 v0.2.10 in 1.0s\n   Completed libc v0.2.81 custom-build in 1.0s\n   Completed getrandom v0.2.0 custom-build in 1.0s\n   Completed getrandom v0.2.0 custom-build (run) in 0.0s\n   Completed libc v0.2.81 custom-build (run) in 0.1s\n   Completed libc v0.2.81 in 0.7s\n   Compiling rand_core v0.5.1 (/home/joshua/src/rust/rand/rand_core)\n   Completed getrandom v0.2.0 in 0.4s\n   Compiling rand_chacha v0.2.3 (/home/joshua/src/rust/rand/rand_chacha)\n   Compiling rand_hc v0.2.1 (/home/joshua/src/rust/rand/rand_hc)\n   Completed rand_core v0.5.1 in 0.6s\n   Compiling rand v0.7.4 (/home/joshua/src/rust/rand)\n   Completed rand_hc v0.2.1 in 0.6s\n   Completed rand_chacha v0.2.3 in 1.4s\n   Completed rand v0.7.4 in 1.9s\n      Timing report saved to /home/joshua/src/rust/rand/cargo-timing-20210223T214412Z.html\n    Finished dev [unoptimized + debuginfo] target(s) in 5.23s\n</code></pre></div>",
        "id": 227508686,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614116668
    },
    {
        "content": "<p>mm. I include the time in my prompt.</p>",
        "id": 227508693,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116672
    },
    {
        "content": "<p>Yeah I have it in my prompt too</p>",
        "id": 227508723,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116689
    },
    {
        "content": "<p>… and yet \"simulacrum: Timestamps are helpful if you know what time it is. I usually don’t\"</p>",
        "id": 227508816,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116719
    },
    {
        "content": "<p>But it's not like I read that, so helpful for looking at backscroll but when I'm reading rustc output I won't react to a line with 4:40 as \"oh that's just now\"</p>",
        "id": 227508835,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116730
    },
    {
        "content": "<p>Or \"no that's an hour ago\"</p>",
        "id": 227508869,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116745
    },
    {
        "content": "<p>Maybe I'm weird - information on my screen doesn't mean I can intuitively say whether it's recent or not</p>",
        "id": 227508947,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116768
    },
    {
        "content": "<p>I suppose if my dummy brain didn’t react to “gee its so weird that I keep getting exactly the same numbers over and over”, then why would it react to an out-of-date time stamp.</p>",
        "id": 227508994,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116794
    },
    {
        "content": "<p>Right that's basically my point with the times</p>",
        "id": 227509076,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116828
    },
    {
        "content": "<p>Like if I was thinking about it I'd definitely say \"wait this is from yesterday\"</p>",
        "id": 227509118,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116851
    },
    {
        "content": "<p>But I probably won't be if I'm not thinking</p>",
        "id": 227509143,
        "sender_full_name": "simulacrum",
        "timestamp": 1614116861
    },
    {
        "content": "<p>maybe we could ask cargo to print a warning if it's using cached output?</p>",
        "id": 227509263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614116896
    },
    {
        "content": "<p>or add our own somehow?</p>",
        "id": 227509280,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614116901
    },
    {
        "content": "<p>I was just musing about that. Does it say something in any of its <code>—verbose</code> modes about it?</p>",
        "id": 227509307,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116920
    },
    {
        "content": "<p>I’d probably be satisfied with that</p>",
        "id": 227509330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116931
    },
    {
        "content": "<p>It does say things if you ask it for json output, that I'm sure about.</p>",
        "id": 227509387,
        "sender_full_name": "nagisa",
        "timestamp": 1614116960
    },
    {
        "content": "<p>I suspect it doesn’t mention it, because I’d be pretty surprised if I overlooked such output when I was wrestling with this yesteday</p>",
        "id": 227509405,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614116970
    },
    {
        "content": "<p>says something like <code>\"state\": \"fresh\"</code> IIRC (among many many other things).</p>",
        "id": 227509409,
        "sender_full_name": "nagisa",
        "timestamp": 1614116971
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>&gt; RUSTC=./loud-rustc.sh cargo build -v\n       Fresh cfg-if v0.1.10\n       Fresh ppv-lite86 v0.2.10\n       Fresh libc v0.2.81\n       Fresh getrandom v0.2.0\n       Fresh rand_core v0.5.1 (/home/joshua/src/rust/rand/rand_core)\n       Fresh rand_hc v0.2.1 (/home/joshua/src/rust/rand/rand_hc)\n       Fresh rand_chacha v0.2.3 (/home/joshua/src/rust/rand/rand_chacha)\n       Fresh rand v0.7.4 (/home/joshua/src/rust/rand)\noops some output\n    Finished dev [unoptimized + debuginfo] target(s) in 0.01s\n</code></pre></div>",
        "id": 227509553,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614117023
    },
    {
        "content": "<p>I guess \"Fresh\" is an indicator that it's not actually being rebuilt</p>",
        "id": 227509590,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1614117040
    },
    {
        "content": "<blockquote>\n<p>Kafka novella</p>\n</blockquote>\n<p>Heh, I saw that and for a second thought \"a novella about Apache Kafka?\"</p>",
        "id": 228149117,
        "sender_full_name": "Noah Lev",
        "timestamp": 1614538546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/wrestling.20with.20rustbuild.20(x.2Epy)/near/227509590\">said</a>:</p>\n<blockquote>\n<p>I guess \"Fresh\" is an indicator that it's not actually being rebuilt</p>\n</blockquote>\n<p>Hmm. I'll go review. If that is the indicator, then I guess I overlooked it.</p>",
        "id": 228248004,
        "sender_full_name": "pnkfelix",
        "timestamp": 1614611985
    }
]