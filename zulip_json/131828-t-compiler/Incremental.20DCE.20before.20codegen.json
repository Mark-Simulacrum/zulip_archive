[
    {
        "content": "<p>This is something ive been wondering, cg_ssa seems to codegen absolutely everything in a crate, despite it not being used by anything upstream.<br>\nHas there ever been work on eliminating dead functions before they actually get to be codegenned by LLVM? This would have to be fully<br>\nquery based and incremental, but it may yield some gains since LLVM/the linker is doing less work. Or would this be too slow and complex compared to just letting something else handle it?</p>",
        "id": 254883940,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1632617535
    },
    {
        "content": "<p>we only codegen functions that are transitively used by an entry point of the crate (which can be \"any public function\" in an rlib)</p>",
        "id": 254884068,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632617682
    },
    {
        "content": "<p>thats odd, i had to implement my own DCE in a codegen im working on because rustc was trying to codegen everything inside of every crate</p>",
        "id": 254884118,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1632617745
    },
    {
        "content": "<p>oh i misunderstood, yeah i was talking about global DCE, only codegenning functions used by upstream crates</p>",
        "id": 254884283,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1632617906
    },
    {
        "content": "<p>although this would be odd to implement, because you may have to recompile the entire crate and regenerate the rlib if a function usage changes, either that or modifying the object file itself inside the rlib... it would be a mess</p>",
        "id": 254884340,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1632617982
    },
    {
        "content": "<p>oh, across crates? I'm not sure how that would work, given that rustc is only invoked to compile one crate at a time</p>",
        "id": 254884347,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632617990
    },
    {
        "content": "<p>seems like mir-only rlibs would be more effective at addressing that problem</p>",
        "id": 254884408,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632618009
    },
    {
        "content": "<p>although they have the drawback of redoing a lot of work when there are many leaf crates that all use similar subsets of code, which I think is still unsolved</p>",
        "id": 254884486,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1632618051
    },
    {
        "content": "<p>with mir-only rlibs youd kinda defeat the point, no? since youd have to recompile basically... everything (albeit only whats used) every time a function becomes used... which may trigger more functions to be used... so on and so on</p>",
        "id": 254884529,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1632618104
    },
    {
        "content": "<p>well, not recompile, recodegen it i guess, pass the new mir through llvm</p>",
        "id": 254884546,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1632618121
    },
    {
        "content": "<p>modifying the object file could be possible albeit a bit odd, but you would only want to do this in debug because llvm would generate worse code because it doesn't have access to other functions' LLVMIR</p>",
        "id": 254884624,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1632618186
    },
    {
        "content": "<blockquote>\n<p>rustc is only invoked to compile one crate at a time</p>\n</blockquote>\n<p>yeah thats another big issue, you would need to codegen all the crates at the end instead of one at a time, it wouldnt yield perf drawbacks because you could do it in parallel but it would be a huge change from what rustc currently does</p>",
        "id": 254884751,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1632618298
    },
    {
        "content": "<p>Incremental would mitigate the everything problem</p>",
        "id": 254919093,
        "sender_full_name": "nagisa",
        "timestamp": 1632651070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> i dont really see how, since codegen is not very incremental, wouldnt you have to only recompile certain mir functions then patch the object file?</p>",
        "id": 254944783,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1632674960
    },
    {
        "content": "<p>There are plenty of codegen units by default.</p>",
        "id": 254949491,
        "sender_full_name": "nagisa",
        "timestamp": 1632679212
    },
    {
        "content": "<p>oh right i totally forgot about cgus <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 254949719,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1632679372
    }
]