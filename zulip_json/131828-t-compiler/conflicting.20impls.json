[
    {
        "content": "<p>do we have a way to silence this warning for types in <code>core</code>/<code>std</code>?</p>",
        "id": 239302522,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621362450
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0119]: conflicting implementations of trait `core::convert::From&lt;&amp;str&gt;` for type `boxed::Box&lt;dyn core::error::Error + core::marker::Send + core::marker::Sync&gt;`:\n    --&gt; library/alloc/src/boxed.rs:1807:1\n     |\n1705 | impl&lt;&#39;a, E: Error + Send + Sync + &#39;a&gt; From&lt;E&gt; for Box&lt;dyn Error + Send + Sync + &#39;a&gt; {\n     | ----------------------------------------------------------------------------------- first implementation here\n...\n1807 | impl&lt;&#39;a&gt; From&lt;&amp;str&gt; for Box&lt;dyn Error + Send + Sync + &#39;a&gt; {\n     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `boxed::Box&lt;dyn core::error::Error + core::marker::Send + core::marker::Sync&gt;`\n     |\n     = note: upstream crates may add a new impl of trait `core::error::Error` for type `str` in future versions\n</code></pre></div>",
        "id": 239302527,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621362452
    },
    {
        "content": "<p>I had expected the <code>downcast</code> method to be the real exciting part but From&lt;&amp;str&gt; for Box&lt;dyn Error&gt; is really putting in work (causing problems)</p>",
        "id": 239302664,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621362505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> it's not a warning, but <code>#[fundamental]</code> should work</p>",
        "id": 239303344,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621362752
    },
    {
        "content": "<p>uh, well, that is likely not what you want, even if it removes the error. in this case it looks like you're trying to specialize the from impl for a specific type? I think usually we do that via something like spec_extend on Vec, see e.g. <a href=\"https://github.com/rust-lang/rust/blob/master/library/alloc/src/vec/spec_extend.rs#L8\">https://github.com/rust-lang/rust/blob/master/library/alloc/src/vec/spec_extend.rs#L8</a></p>",
        "id": 239303683,
        "sender_full_name": "simulacrum",
        "timestamp": 1621362858
    },
    {
        "content": "<p>which is used <a href=\"https://github.com/rust-lang/rust/blob/master/library/alloc/src/vec/mod.rs#L2519\">https://github.com/rust-lang/rust/blob/master/library/alloc/src/vec/mod.rs#L2519</a></p>",
        "id": 239303753,
        "sender_full_name": "simulacrum",
        "timestamp": 1621362878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/conflicting.20impls/near/239303683\">said</a>:</p>\n<blockquote>\n<p>uh, well, that is likely not what you want, even if it removes the error. in this case it looks like you're trying to specialize the from impl for a specific type? I think usually we do that via something like spec_extend on Vec, see e.g. <a href=\"https://github.com/rust-lang/rust/blob/master/library/alloc/src/vec/spec_extend.rs#L8\">https://github.com/rust-lang/rust/blob/master/library/alloc/src/vec/spec_extend.rs#L8</a></p>\n</blockquote>\n<p>I don't think that helps because the overlapping impl isn't one that actually overlaps, it's one that potentially overlaps, the issue being that <code>&amp;str</code> _might_ implement <code>Error</code> in the future</p>",
        "id": 239313762,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621366908
    },
    {
        "content": "<p>and we're never going to implement <code>Error</code> for <code>&amp;str</code> so we can't just lean on the <code>From&lt;E&gt;</code> impl for Box and specialize it internally</p>",
        "id": 239313891,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621366973
    },
    {
        "content": "<p>oh, oh</p>",
        "id": 239313900,
        "sender_full_name": "simulacrum",
        "timestamp": 1621366978
    },
    {
        "content": "<p>you might be able to impl !error for &amp;str, i'm not sure that will help though</p>",
        "id": 239313923,
        "sender_full_name": "simulacrum",
        "timestamp": 1621366990
    },
    {
        "content": "<p>I know the support in theory exists for some pin shenanigans, but not sure it carried through to trait solving/coherence; <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> might remember.</p>",
        "id": 239313972,
        "sender_full_name": "simulacrum",
        "timestamp": 1621367027
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/conflicting.20impls/near/239313923\">said</a>:</p>\n<blockquote>\n<p>you might be able to impl !error for &amp;str, i'm not sure that will help though</p>\n</blockquote>\n<p>that doesn't seem to help</p>",
        "id": 239314518,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621367239
    },
    {
        "content": "<p>yeah, I think the support for coherence using that info isn't implemented then</p>",
        "id": 239314857,
        "sender_full_name": "simulacrum",
        "timestamp": 1621367381
    },
    {
        "content": "<p>it's probably not <em>too</em> hard, but still work.</p>",
        "id": 239314885,
        "sender_full_name": "simulacrum",
        "timestamp": 1621367396
    },
    {
        "content": "<p>yea</p>",
        "id": 239314891,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621367399
    },
    {
        "content": "<p>I think that's a hard blocker on <code>Error</code> in <code>core</code></p>",
        "id": 239314962,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621367414
    },
    {
        "content": "<p>so I should probably touch base with niko or whoever to confirm that using negative impls is the right path forward and to get an idea of how to implement the missing logic</p>",
        "id": 239315098,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621367480
    },
    {
        "content": "<p>I'd suspect it is not the wrong path, at least, given we'd not necessarily need to stabilize them and seem intuitive enough</p>",
        "id": 239315483,
        "sender_full_name": "simulacrum",
        "timestamp": 1621367655
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/68004\">https://github.com/rust-lang/rust/pull/68004</a></p>",
        "id": 239315888,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621367820
    },
    {
        "content": "<p>specifically calls out how negative impls aren't considered for coherence</p>",
        "id": 239315930,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621367842
    },
    {
        "content": "<p>Conceptually I really like it and especially I think a negative impl is way cleaner than the existing hack of doing things like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// from library/core/src/ops/function.rs</span>\n<span class=\"cp\">#[fundamental]</span><span class=\"w\"> </span><span class=\"c1\">// so that regex can rely that `&amp;str: !FnMut`</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">Args</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 239316096,
        "sender_full_name": "scottmcm",
        "timestamp": 1621367912
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/131828-t-compiler/topic/conflicting.20impls/near/239315930\">said</a>:</p>\n<blockquote>\n<p>specifically calls out how negative impls aren't considered for coherence</p>\n</blockquote>\n<p>unless I'm forgetting/missing it now, it just doesn't implement it, not that there's a reason it couldn't happen</p>",
        "id": 239316167,
        "sender_full_name": "simulacrum",
        "timestamp": 1621367949
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"220273\">Jane Lusby</span> <a href=\"#narrow/stream/131828-t-compiler/topic/conflicting.20impls/near/239315930\">said</a>:</p>\n<blockquote>\n<p>specifically calls out how negative impls aren't considered for coherence</p>\n</blockquote>\n<p>But it also says</p>\n<blockquote>\n<p>It should eventually mean that you can rely on the impl not existing for the purposes of negative reasoning in coherence, though this PR doesn't implement that.</p>\n</blockquote>",
        "id": 239316181,
        "sender_full_name": "scottmcm",
        "timestamp": 1621367957
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/coherence.rs#L247\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_trait_selection/src/traits/coherence.rs#L247</a> I think is roughly where such an impl would go, though I'm no expert</p>",
        "id": 239316382,
        "sender_full_name": "simulacrum",
        "timestamp": 1621368018
    },
    {
        "content": "<p>I just remember being told that negative impls somehow negatively impacting the trait solver</p>",
        "id": 239317263,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621368336
    },
    {
        "content": "<p>something about changing it from a closed set to an open set</p>",
        "id": 239317295,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621368350
    },
    {
        "content": "<p>so i've been pretty careful to avoid any changes relying on negative impls</p>",
        "id": 239317376,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621368369
    },
    {
        "content": "<p><em>in general</em> I think e.g. inference would be hard to make rely on this</p>",
        "id": 239317967,
        "sender_full_name": "simulacrum",
        "timestamp": 1621368611
    },
    {
        "content": "<p>but from what I know, which is not much, I suspect that coherence in particular is the 'easy' thing here.</p>",
        "id": 239317989,
        "sender_full_name": "simulacrum",
        "timestamp": 1621368624
    },
    {
        "content": "<p>Yeah, my recollection is that the critical thing to avoid is things like <code>impl Copy for Foo where Bar: !Copy</code>.</p>\n<p>You might be able to look at how <code>#[marker]</code> (feature <code>marker_trait_attr</code>) works, since that's also about changing overlap restrictions.</p>",
        "id": 239318875,
        "sender_full_name": "scottmcm",
        "timestamp": 1621369013
    },
    {
        "content": "<p>aaah</p>",
        "id": 239319551,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621369318
    },
    {
        "content": "<p>Hmm, though if one is in core and one is in alloc then it's a \"real\" coherence question, not just a same-crate overlap one, so it might be slightly more complicated.</p>",
        "id": 239326693,
        "sender_full_name": "scottmcm",
        "timestamp": 1621372301
    },
    {
        "content": "<p>(Of course, you also don't need a perfect implementations -- something feature-gated that's good enough to turn on for alloc is sufficient <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 239327062,
        "sender_full_name": "scottmcm",
        "timestamp": 1621372436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> So---</p>",
        "id": 239375172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407312
    },
    {
        "content": "<p>we don't have \"proper\" support for negative impls <em>but</em></p>",
        "id": 239375180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407318
    },
    {
        "content": "<p>that is a feature I have been wanting to pursue</p>",
        "id": 239375193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407325
    },
    {
        "content": "<p>I would be up for working with you if you wanted to make it happen</p>",
        "id": 239375211,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407334
    },
    {
        "content": "<p>Yes</p>",
        "id": 239375229,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621407342
    },
    {
        "content": "<p>specifically what I mean is:</p>",
        "id": 239375235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407345
    },
    {
        "content": "<ul>\n<li>you are able to declare a negative impl</li>\n</ul>",
        "id": 239375240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407353
    },
    {
        "content": "<p>I will probably spend Friday working on this</p>",
        "id": 239375253,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621407359
    },
    {
        "content": "<ul>\n<li>coherence takes it account</li>\n</ul>",
        "id": 239375255,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407360
    },
    {
        "content": "<ul>\n<li>there are no negative where clauses</li>\n</ul>",
        "id": 239375308,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407371
    },
    {
        "content": "<p>we might at some point consider adding negative where clauses, there are variants that are ok and variants that are problematic</p>",
        "id": 239375336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407388
    },
    {
        "content": "<p>but I don't think they are as useful as saying \"I promise I will never implement that\"</p>",
        "id": 239375347,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407398
    },
    {
        "content": "<p>Makes sense</p>",
        "id": 239375395,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621407440
    },
    {
        "content": "<p>I think we would eventually need an RFC, but we could start by creating a quick 'project' and fleshing out the ideas</p>",
        "id": 239375530,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407517
    },
    {
        "content": "<p>I'm trying to remember if/when I've written out my thinking on this :)</p>",
        "id": 239375582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621407569
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/conflicting.20impls/near/239375582\">said</a>:</p>\n<blockquote>\n<p>I'm trying to remember if/when I've written out my thinking on this :)</p>\n</blockquote>\n<p>did you manage to find your past posts about this?</p>",
        "id": 239624147,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621529603
    },
    {
        "content": "<p>some thinking here - <a href=\"https://internals.rust-lang.org/t/explicit-negative-impls-to-fix-pin-soundness-hole/11587\">https://internals.rust-lang.org/t/explicit-negative-impls-to-fix-pin-soundness-hole/11587</a></p>",
        "id": 239630636,
        "sender_full_name": "simulacrum",
        "timestamp": 1621532162
    },
    {
        "content": "<blockquote>\n<p>In terms of going forward, e.g. creating interactions with coherence, I think it's important to base this work on Chalk -- in particular, on Chalk's definition of the trait system in terms of a \"lowering\" to logical predicates. I was thinking that it would be good to write-up the existing work we've done on handling coherence and then try to frame negative impls in that context.</p>\n</blockquote>",
        "id": 239816156,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621633144
    },
    {
        "content": "<p>just to double check <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , is this comment you made in the pin thread back in jan 2020 still accurate?</p>",
        "id": 239816170,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621633156
    },
    {
        "content": "<p>reading through the rustc dev guide on trait selection and familiarizing myself with how the code works before I start working on the impl, but I haven't gotten to the section on chalk yet and don't otherwise know how well integrated it is with rustc atm.</p>",
        "id": 239816229,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621633204
    },
    {
        "content": "<p>I think that comment is still accurate</p>",
        "id": 239829932,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621643674
    },
    {
        "content": "<p>It's not so much the integration itself, but moreso how we think about rust features in a more fundamental logic system, in this case Chalk's predicates</p>",
        "id": 239830038,
        "sender_full_name": "Jack Huey",
        "timestamp": 1621643780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"220273\">@Jane Lusby</span> seems accurate, I'd be up to work with you around that</p>",
        "id": 240069836,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621871321
    },
    {
        "content": "<p>sounds good, I'll bother you tomorrow when I'm working on this again if I find the time, might have to be delayed until friday though</p>",
        "id": 240091185,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621880835
    },
    {
        "content": "<p>or i guess, more accurately I'll be in touch if I have questions when I'm working on this</p>",
        "id": 240091229,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621880862
    },
    {
        "content": "<p>if you have time and want to write up a brief explanation of how you expect the implementation to look mentorship instruction style that might save a bit of time</p>",
        "id": 240091380,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621880929
    },
    {
        "content": "<p>my plan atm is to figure out where negative impls are currently tracked in the compiler, then explore the APIs available inside the <code>trait_is_knowable</code> or w/e its called function that mark linked earlier</p>",
        "id": 240091489,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621880983
    },
    {
        "content": "<p>to see if any of them already intersect with the parts of the compiler that already track negative impls</p>",
        "id": 240091525,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621881000
    },
    {
        "content": "<p>and assuming they aren't connected I expect I'll need to use chalk to record/expose/query the info in the aforementioned function</p>",
        "id": 240091631,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621881030
    },
    {
        "content": "<p>and I'm hoping that the chalk section in the rustc dev guide gives me enough info about how to use chalk to help me figure out how to use it here</p>",
        "id": 240091762,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1621881087
    },
    {
        "content": "<p>what does it mean for a trait to be \"knowable\"?</p>",
        "id": 240529510,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622148614
    },
    {
        "content": "<p>decided to push my first pass implementation that doesn't work at all in case someone can quickly identify the problem for me, in the mean time I'm still reading and trying to figure out how to do this properly.</p>",
        "id": 240537919,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622152866
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/85764\">https://github.com/rust-lang/rust/pull/85764</a></p>",
        "id": 240537923,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622152869
    },
    {
        "content": "<p>pretty sure this is because I tried looking up the polarity of a traitref on accident, but I need to look it up on a trait impl instead</p>",
        "id": 240541153,
        "sender_full_name": "Jane Lusby",
        "timestamp": 1622155308
    }
]