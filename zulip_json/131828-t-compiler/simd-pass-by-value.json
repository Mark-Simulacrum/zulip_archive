[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> would you be up to review <a href=\"https://github.com/rust-lang/rust/issues/55073\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55073\">#55073</a>? It's a PR by <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> to ensure we pass SIMD arguments by value</p>",
        "id": 135902307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539699019
    },
    {
        "content": "<p>Not sure who would be a good choice, it's basically a big blob of C++ code</p>",
        "id": 135902310,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539699031
    },
    {
        "content": "<p>I'd volunteer but I am not sure I'll have the time to do it in the next few days</p>",
        "id": 135902713,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1539699480
    },
    {
        "content": "<p>I skimmed it but I don't really know much about LLVM IR</p>",
        "id": 135903302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539699967
    },
    {
        "content": "<p>From skimming it seems like the exact sort of fiddly IR manipulation which I'm accustomed to, but that doesn't free me from having to read it very carefully, which takes time =/</p>",
        "id": 135903446,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1539700092
    },
    {
        "content": "<p>I did give it a pass.</p>",
        "id": 135904114,
        "sender_full_name": "nagisa",
        "timestamp": 1539700590
    },
    {
        "content": "<p>I’d rather an alternative approach <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 135904124,
        "sender_full_name": "nagisa",
        "timestamp": 1539700595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124289\">@rkruppe</span> do you know if it is possible to have arbitrary attributes on functions/arguments/etc?</p>",
        "id": 135905077,
        "sender_full_name": "nagisa",
        "timestamp": 1539701491
    },
    {
        "content": "<p>It is!</p>",
        "id": 135905082,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1539701499
    },
    {
        "content": "<p>You can create an attribute out of an arbitrary string</p>",
        "id": 135905089,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1539701511
    },
    {
        "content": "<p>hmm… <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> would you mind looking into whether the promotion strips those arbitrary \"strings\"?</p>",
        "id": 135905206,
        "sender_full_name": "nagisa",
        "timestamp": 1539701636
    },
    {
        "content": "<p>I’d be entrely fine with r+ing that PR if it didn’t also demote that \"#[nomangle] extern\" function</p>",
        "id": 135905266,
        "sender_full_name": "nagisa",
        "timestamp": 1539701667
    },
    {
        "content": "<p>Promotion (and other passes that fiddle with the signature) should copy over function attributes. Many of them are important for semantics, and many others should be preserved because they are really important for optimizations.</p>",
        "id": 135905301,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1539701721
    },
    {
        "content": "<p>if LLVM does not end up stripping our custom attribute you then could selectively demote only the arguments with our attribute (i.e. we know for sure it is fine to demote those)</p>",
        "id": 135905323,
        "sender_full_name": "nagisa",
        "timestamp": 1539701746
    },
    {
        "content": "<p>Oh do you mean a function attribute or a parameter attribute? The latter can't be blindly copied over so I'm less sure what arg promotion does to it</p>",
        "id": 135905438,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1539701831
    },
    {
        "content": "<p>Since this is really about Rust ABI vs other ABIs, a function attribute should be sufficient</p>",
        "id": 135905449,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1539701856
    },
    {
        "content": "<blockquote>\n<p>Oh do you mean a function attribute or a parameter attribute? The latter can't be blindly copied over so I'm less sure what arg promotion does to it</p>\n</blockquote>\n<p>I meant parameter one, but I think argument one would be just fine as well, I think</p>",
        "id": 135905459,
        "sender_full_name": "nagisa",
        "timestamp": 1539701864
    },
    {
        "content": "<p>During argument promotion <a href=\"https://github.com/llvm-mirror/llvm/blob/0f096ec04e276fa55a493238b33b1ea10982f3d5/lib/Transforms/IPO/ArgumentPromotion.cpp#L199\" target=\"_blank\" title=\"https://github.com/llvm-mirror/llvm/blob/0f096ec04e276fa55a493238b33b1ea10982f3d5/lib/Transforms/IPO/ArgumentPromotion.cpp#L199\">argument parameters are lost</a></p>",
        "id": 135905465,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1539701870
    },
    {
        "content": "<p>I think though we can probably skip all non-internal functions in demotion</p>",
        "id": 135905512,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1539701887
    },
    {
        "content": "<p>at least I cannot immediately think of a case where for our use-case there would be any difference between two.</p>",
        "id": 135905515,
        "sender_full_name": "nagisa",
        "timestamp": 1539701892
    },
    {
        "content": "<p>and that should skip the boundary and not affect the correctness at all</p>",
        "id": 135905517,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1539701896
    },
    {
        "content": "<p>A lot of Rust-ABI functions are external, but I guess those wouldn't get their arguments promoted in the first place?</p>",
        "id": 135905530,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1539701926
    },
    {
        "content": "<p>correct</p>",
        "id": 135905573,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1539701955
    },
    {
        "content": "<p>Right. I would be fine with skipping the external functions as well.</p>",
        "id": 135905576,
        "sender_full_name": "nagisa",
        "timestamp": 1539701958
    },
    {
        "content": "<p>argument promotion only runs on internal functions</p>",
        "id": 135905578,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1539701960
    },
    {
        "content": "<p>It's hypothetically possible that a function is internal when argument promotion runs and is made external afterwards. I don't think that would actually happen though.</p>",
        "id": 135905682,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1539702045
    },
    {
        "content": "<p>One nice thing about the attribute route, though, is that we could also patch argument promotion to not promote functions with that attribute (would be a small patch)</p>",
        "id": 135905714,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1539702082
    },
    {
        "content": "<p>We should really avoid patching our own LLVM like that, though, because there are users with their own LLVM versions patched to various degrees.</p>",
        "id": 135905802,
        "sender_full_name": "nagisa",
        "timestamp": 1539702145
    },
    {
        "content": "<p>but yeah.</p>",
        "id": 135905808,
        "sender_full_name": "nagisa",
        "timestamp": 1539702154
    },
    {
        "content": "<p>I wouldn't want to rely <em>solely</em> on that, even when building with our LLVM fork, since there might be other passes that do a similar transformation, but it would be almost-free defense-in-depth</p>",
        "id": 135905828,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1539702221
    }
]