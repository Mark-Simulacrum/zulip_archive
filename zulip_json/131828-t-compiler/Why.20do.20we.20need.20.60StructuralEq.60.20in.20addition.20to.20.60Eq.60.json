[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> there's multiple topics being discussed in the other thread, so I thought I'd ask in a separate one: why do we need a separate <code>StructuralEq</code>?</p>",
        "id": 193075247,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1586194549
    },
    {
        "content": "<p>its in the docs, isn't it?</p>",
        "id": 193075353,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194591
    },
    {
        "content": "<p>the issue is that there was a case where the constant in question does not implement <code>Eq</code></p>",
        "id": 193075379,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194605
    },
    {
        "content": "<p>The docs say:</p>\n<blockquote>\n<p>(The problem in the above code is that Wrap&lt;fn(&amp;())&gt; does not implement PartialEq, nor Eq, because for&lt;'a&gt; fn(&amp;'a _) does not implement those traits.)</p>\n</blockquote>",
        "id": 193075402,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1586194613
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/std/marker/trait.StructuralEq.html\" title=\"https://doc.rust-lang.org/nightly/std/marker/trait.StructuralEq.html\">https://doc.rust-lang.org/nightly/std/marker/trait.StructuralEq.html</a></p>",
        "id": 193075410,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1586194619
    },
    {
        "content": "<p>but we needed to still encode the fact that it <em>did</em> derive <code>Eq</code></p>",
        "id": 193075424,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194622
    },
    {
        "content": "<p>i.e., the derived <code>Eq</code> has bounds that are not satisfied</p>",
        "id": 193075451,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> the docs sound confused</p>",
        "id": 193075462,
        "sender_full_name": "eddyb",
        "timestamp": 1586194642
    },
    {
        "content": "<p>but we still need to mark it as usuable in a pattern</p>",
        "id": 193075467,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194646
    },
    {
        "content": "<p>Do function pointers not implement <code>PartialEq</code>?</p>",
        "id": 193075490,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1586194657
    },
    {
        "content": "<p>I've already answered this: <code>#[derive(PartialEq, Eq)]</code> needs to be detected but the derives <em>can't know about eachother</em></p>",
        "id": 193075509,
        "sender_full_name": "eddyb",
        "timestamp": 1586194670
    },
    {
        "content": "<p>function pointers that have lifetimes do not</p>",
        "id": 193075510,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194671
    },
    {
        "content": "<p>so <em>the only thing they can do</em> is each implement a different trait</p>",
        "id": 193075573,
        "sender_full_name": "eddyb",
        "timestamp": 1586194683
    },
    {
        "content": "<p>that is tested later</p>",
        "id": 193075583,
        "sender_full_name": "eddyb",
        "timestamp": 1586194689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> in an ideal world we would just have <code>StrucutralPartialEq</code> and not <em>need</em> the derive of <code>Eq</code></p>",
        "id": 193075588,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194691
    },
    {
        "content": "<p>because <code>Eq</code> has no methods</p>",
        "id": 193075595,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194700
    },
    {
        "content": "<p>so we in theory should be able to just test that <code>Eq</code> is <em>implemented</em></p>",
        "id": 193075611,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194712
    },
    {
        "content": "<p>but it could have the wrong bounds</p>",
        "id": 193075622,
        "sender_full_name": "eddyb",
        "timestamp": 1586194721
    },
    {
        "content": "<p>hence why I think the docs are confused</p>",
        "id": 193075630,
        "sender_full_name": "eddyb",
        "timestamp": 1586194726
    },
    {
        "content": "<p>the <code>Eq</code> impl <em>must fundamentally</em> be a <code>#[derive(Eq)]</code> impl</p>",
        "id": 193075656,
        "sender_full_name": "eddyb",
        "timestamp": 1586194742
    },
    {
        "content": "<p>well I suppose it depends on what the goals are</p>",
        "id": 193075662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194743
    },
    {
        "content": "<p>those are special in that they test the fields</p>",
        "id": 193075675,
        "sender_full_name": "eddyb",
        "timestamp": 1586194748
    },
    {
        "content": "<p>the generated impl <em>is not</em> <code>impl Eq for Foo {}</code></p>",
        "id": 193075694,
        "sender_full_name": "eddyb",
        "timestamp": 1586194762
    },
    {
        "content": "<p>maybe this is the point of confusion?</p>",
        "id": 193075713,
        "sender_full_name": "eddyb",
        "timestamp": 1586194775
    },
    {
        "content": "<p>I don't know.</p>",
        "id": 193075724,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194783
    },
    {
        "content": "<p>\"it has no methods\" is irrelevant and I think actually false</p>",
        "id": 193075733,
        "sender_full_name": "eddyb",
        "timestamp": 1586194792
    },
    {
        "content": "<p>/me is not sure where the code to assert <code>Eq</code> on fields is generated. a method would make sense</p>",
        "id": 193075821,
        "sender_full_name": "eddyb",
        "timestamp": 1586194810
    },
    {
        "content": "<p>Let me try a different tack on this question</p>",
        "id": 193075903,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194828
    },
    {
        "content": "<p>yeah <code>Eq</code> has a method <a href=\"https://github.com/rust-lang/rust/blob/master/src/libcore/cmp.rs#L271-L281\" title=\"https://github.com/rust-lang/rust/blob/master/src/libcore/cmp.rs#L271-L281\">https://github.com/rust-lang/rust/blob/master/src/libcore/cmp.rs#L271-L281</a></p>",
        "id": 193076006,
        "sender_full_name": "eddyb",
        "timestamp": 1586194857
    },
    {
        "content": "<p>The hypothetical check is one where we just look for an impl of <code>StructuralPartialEq</code> and an impl of <code>Eq</code></p>",
        "id": 193076014,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194859
    },
    {
        "content": "<p>what is the scenario, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> , where you are envisaging that causing breakage for the structural-equality analysis?</p>",
        "id": 193076099,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194883
    },
    {
        "content": "<p>you mean because the fields are recursively checked?</p>",
        "id": 193076163,
        "sender_full_name": "eddyb",
        "timestamp": 1586194910
    },
    {
        "content": "<p>apart from the one documented in the docs, which is due to the (I think we all agree) compiler bug that <code>for &lt;'a&gt; fn (&amp;'a _)</code> does not impl <code>Eq</code></p>",
        "id": 193076173,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> right. What's the problem with relying on the <code>Eq</code> impl alone? So what if it adds that extra condition?</p>",
        "id": 193076290,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586194965
    },
    {
        "content": "<p>I think requiring <code>#[derive(PartialEq, Eq)]</code> should remain the <em>only</em> opt-in and changing that is a completely different discussion from why both traits are needed <em>right now</em></p>",
        "id": 193076327,
        "sender_full_name": "eddyb",
        "timestamp": 1586194984
    },
    {
        "content": "<p>I don't <em>mind</em> that outcome</p>",
        "id": 193076380,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195012
    },
    {
        "content": "<p>but I'm still confused as to why you are so militant about it</p>",
        "id": 193076402,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195024
    },
    {
        "content": "<p>that is, the example in the docs seems to ignore the fact that we were using <code>#[structural_match]</code> gated on <em>both</em> traits being auto-derived <em>before</em> we ever had to switch to these extra traits</p>",
        "id": 193076485,
        "sender_full_name": "eddyb",
        "timestamp": 1586195053
    },
    {
        "content": "<p>My memory is that the <code>#[structural_match]</code> wasn't gated on the traits. It was gated on the derives.</p>",
        "id": 193076560,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195090
    },
    {
        "content": "<p>or sorry</p>",
        "id": 193076565,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195093
    },
    {
        "content": "<p>that's what you said</p>",
        "id": 193076570,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195097
    },
    {
        "content": "<p>sorry yes I mean on the traits in the derive list</p>",
        "id": 193076574,
        "sender_full_name": "eddyb",
        "timestamp": 1586195100
    },
    {
        "content": "<p>so yes, if the goal is to preserve the exact semantcs that we had before</p>",
        "id": 193076603,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195115
    },
    {
        "content": "<p>it just feels like there's a lot of confusion here</p>",
        "id": 193076607,
        "sender_full_name": "eddyb",
        "timestamp": 1586195119
    },
    {
        "content": "<p>then sure, you'd need to have two traits</p>",
        "id": 193076608,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195121
    },
    {
        "content": "<p>and a lot of factors that don't help</p>",
        "id": 193076620,
        "sender_full_name": "eddyb",
        "timestamp": 1586195132
    },
    {
        "content": "<p>but that wasn't even the original goal when I first started working on switching to a trait</p>",
        "id": 193076623,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195134
    },
    {
        "content": "<p>mechanically, <code>Structural{Partial,}Eq</code> are <em>attributes</em></p>",
        "id": 193076648,
        "sender_full_name": "eddyb",
        "timestamp": 1586195145
    },
    {
        "content": "<p>and IMO that's what the docs should describe</p>",
        "id": 193076708,
        "sender_full_name": "eddyb",
        "timestamp": 1586195164
    },
    {
        "content": "<p>and the names are wrong</p>",
        "id": 193076714,
        "sender_full_name": "eddyb",
        "timestamp": 1586195168
    },
    {
        "content": "<p>apart from the case where we manually implement them (for <code>PhantomData</code>)</p>",
        "id": 193076739,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195182
    },
    {
        "content": "<p>which arguably is just another instance of an attribute encoded as a trait</p>",
        "id": 193076769,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195196
    },
    {
        "content": "<p>that's just <code>#[derive(PartialEq, Eq)]</code> for <code>PhantomData</code> but w/o the bounds</p>",
        "id": 193076774,
        "sender_full_name": "eddyb",
        "timestamp": 1586195199
    },
    {
        "content": "<p>(because there are no fields)</p>",
        "id": 193076785,
        "sender_full_name": "eddyb",
        "timestamp": 1586195210
    },
    {
        "content": "<p>and because it would break things to have the bounds, yes</p>",
        "id": 193076810,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195231
    },
    {
        "content": "<p>it's only necessary because the derive-generated bounds don't match the fields</p>",
        "id": 193076817,
        "sender_full_name": "eddyb",
        "timestamp": 1586195234
    },
    {
        "content": "<p>as in, they use the generic parameters, not the fields, right? You're just talking about how <code>derive</code> works in that remark?</p>",
        "id": 193076898,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195280
    },
    {
        "content": "<p>yeah</p>",
        "id": 193077021,
        "sender_full_name": "eddyb",
        "timestamp": 1586195329
    },
    {
        "content": "<p>So okay</p>",
        "id": 193077035,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195334
    },
    {
        "content": "<p>I 100% agree that the traits here effectively are attributes</p>",
        "id": 193077057,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195346
    },
    {
        "content": "<p>and that they are encoded as traits for ... reasons ...</p>",
        "id": 193077107,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195364
    },
    {
        "content": "<p>this explains, for example, why <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> was confused about libcore not having impls of these traits</p>",
        "id": 193077134,
        "sender_full_name": "eddyb",
        "timestamp": 1586195377
    },
    {
        "content": "<p>for primitives</p>",
        "id": 193077146,
        "sender_full_name": "eddyb",
        "timestamp": 1586195382
    },
    {
        "content": "<p>and that's because they only make sense where <code>#[structural_match]</code> did</p>",
        "id": 193077181,
        "sender_full_name": "eddyb",
        "timestamp": 1586195402
    },
    {
        "content": "<p>but I still don't understand why you are insisting it would be <em>wrong</em> to check for <code>StructuralPartialEq</code> and <code>Eq</code> directly instead of <code>StructuralEq</code></p>",
        "id": 193077233,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195408
    },
    {
        "content": "<p>there's no extra semantics involved</p>",
        "id": 193077248,
        "sender_full_name": "eddyb",
        "timestamp": 1586195413
    },
    {
        "content": "<p>it would be a change in the semantics for structural-match, yes</p>",
        "id": 193077287,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195435
    },
    {
        "content": "<p>but I don't yet see where it causes things to go wrong</p>",
        "id": 193077309,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195446
    },
    {
        "content": "<p>I'm sorry if you feel like we are talking in circles, but I'm just not getting it</p>",
        "id": 193077414,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195495
    },
    {
        "content": "<p>if we've value-based and allow things like <code>None::&lt;T&gt;</code> always being structurally matchable no matter, then we can't be checking <code>Option&lt;T&gt;: Eq</code>, since that might be false, whereas <code>Option&lt;T&gt;: AutoDerivedEq</code> would fit</p>",
        "id": 193077431,
        "sender_full_name": "eddyb",
        "timestamp": 1586195506
    },
    {
        "content": "<p>unless you're talking about <em>looking for an <code>impl</code></em> outside of the trait system?</p>",
        "id": 193077450,
        "sender_full_name": "eddyb",
        "timestamp": 1586195517
    },
    {
        "content": "<p>without the bounds being met</p>",
        "id": 193077496,
        "sender_full_name": "eddyb",
        "timestamp": 1586195524
    },
    {
        "content": "<p>frankly it would make more sense to me to just use <code>AutoDerivedPartialEq</code> and that's it. no <code>Eq</code> check (assuming all fields are recursively checked by the analysis)</p>",
        "id": 193077599,
        "sender_full_name": "eddyb",
        "timestamp": 1586195572
    },
    {
        "content": "<p>if you check for <code>Eq</code> it should be consistent with <code>PartialEq</code></p>",
        "id": 193077624,
        "sender_full_name": "eddyb",
        "timestamp": 1586195586
    },
    {
        "content": "<p>Ah, okay, so now you're looping in the ... \"value-based\" system (historically I've thought of it as expression-based, but I suppose this depends on whether one implements it as a traversal of the AST, or as a compile-time evaluation of a const-expression)</p>",
        "id": 193077629,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195590
    },
    {
        "content": "<p>and yes, <em>that</em> may well be an area where we are better off sticking with the system as written. I wasn't thinking about that.</p>",
        "id": 193077682,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195621
    },
    {
        "content": "<p>I mean \"value\" in the broad sense of \"a value being constructed\" (by a HIR expression or a series of MIR statements)</p>",
        "id": 193077688,
        "sender_full_name": "eddyb",
        "timestamp": 1586195626
    },
    {
        "content": "<p>\"dataflow\" might be more appropriate I suppose</p>",
        "id": 193077784,
        "sender_full_name": "eddyb",
        "timestamp": 1586195662
    },
    {
        "content": "<p>okay thank you for the clarification, both of the local terminology and of your thinking more broadly.</p>",
        "id": 193077889,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586195719
    },
    {
        "content": "<p>my priority was untangling the confusion that the traits have apparently created</p>",
        "id": 193077953,
        "sender_full_name": "eddyb",
        "timestamp": 1586195750
    },
    {
        "content": "<p>because we weren't understanding eachother (I mean the 4 of us) very well at first</p>",
        "id": 193077982,
        "sender_full_name": "eddyb",
        "timestamp": 1586195763
    },
    {
        "content": "<p>I didn't realize there was a shortcoming around function pointers with lifetimes, but the second half of the conversation was also helpful.</p>",
        "id": 193078497,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1586195988
    },
    {
        "content": "<p>I think the <code>fn</code> pointer thing is a bit of a red herring, the clear breakdown for me is in something like <code>None::&lt;String&gt;</code> (which I think we allow today?)</p>",
        "id": 193078774,
        "sender_full_name": "eddyb",
        "timestamp": 1586196095
    },
    {
        "content": "<p>yeah, I probably should have called out that aspect of the example in the docs</p>",
        "id": 193078812,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586196112
    },
    {
        "content": "<p>We allow some cases like <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> describes, but the indirect_structural_match lint (which is allow by default) will trigger on some that we would prefer not to...</p>",
        "id": 193078909,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586196151
    },
    {
        "content": "<p>namely <a href=\"https://github.com/rust-lang/rust/issues/62614\" title=\"https://github.com/rust-lang/rust/issues/62614\">#62614</a> is an example I can cite</p>",
        "id": 193078987,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586196189
    },
    {
        "content": "<p>oh and of course <a href=\"https://github.com/rust-lang/rust/issues/65466\" title=\"https://github.com/rust-lang/rust/issues/65466\">#65466</a> is the really bad one ....</p>",
        "id": 193079156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586196263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20do.20we.20need.20.60StructuralEq.60.20in.20addition.20to.20.60Eq.60/near/193078909\" title=\"#narrow/stream/131828-t-compiler/topic/Why.20do.20we.20need.20.60StructuralEq.60.20in.20addition.20to.20.60Eq.60/near/193078909\">said</a>:</p>\n<blockquote>\n<p>We allow some cases like <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> describes, but the indirect_structural_match lint (which is allow by default) will trigger on some that we would prefer not to...</p>\n</blockquote>\n<p>The RFC states otherwise btw; It seems like \"we would prefer not to\" was not a decision that was made as a team</p>",
        "id": 193161800,
        "sender_full_name": "centril",
        "timestamp": 1586252536
    },
    {
        "content": "<p>That is, the RFC encodes a fully type-based set of rules</p>",
        "id": 193161850,
        "sender_full_name": "centril",
        "timestamp": 1586252566
    },
    {
        "content": "<p>I recommended replacing <code>#[structural_match]</code> with traits under assumption that no dataflow analysis happens and all the analysis is based on the <code>StructuralPartialEq</code> traits, which are regular traits and not attributes in any way.</p>",
        "id": 193167886,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1586256272
    },
    {
        "content": "<p>I was calling them \"attributes\" because their bounds don't matter AFAIK</p>",
        "id": 193167939,
        "sender_full_name": "eddyb",
        "timestamp": 1586256305
    },
    {
        "content": "<p>or at least I think they use no bounds?</p>",
        "id": 193167957,
        "sender_full_name": "eddyb",
        "timestamp": 1586256314
    },
    {
        "content": "<p>(And types of all fields in the constant must satisfy the <code>StructuralPartialEq</code> bound recursively.)</p>",
        "id": 193167960,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1586256317
    },
    {
        "content": "<p>(For the constant to be usable in patterns.)</p>",
        "id": 193167978,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1586256336
    },
    {
        "content": "<p>so they work effectively as an attribute on the <code>struct</code>/<code>enum</code></p>",
        "id": 193167986,
        "sender_full_name": "eddyb",
        "timestamp": 1586256344
    },
    {
        "content": "<p>how about an attribute on the <code>impl StructuralPartialEq for TheType</code>?</p>",
        "id": 193178736,
        "sender_full_name": "oli",
        "timestamp": 1586262466
    },
    {
        "content": "<p>do you mean on the <code>PartialEq</code> impl?</p>",
        "id": 193178953,
        "sender_full_name": "eddyb",
        "timestamp": 1586262577
    },
    {
        "content": "<p>there might already be an \"automatically derived\" attribute</p>",
        "id": 193178971,
        "sender_full_name": "eddyb",
        "timestamp": 1586262587
    },
    {
        "content": "<p>right... so we can just use that?</p>",
        "id": 193179002,
        "sender_full_name": "oli",
        "timestamp": 1586262601
    },
    {
        "content": "<p>the problem is that you'd have to manually search for the <code>impl</code></p>",
        "id": 193179036,
        "sender_full_name": "eddyb",
        "timestamp": 1586262602
    },
    {
        "content": "<p>but that's not that bad</p>",
        "id": 193179068,
        "sender_full_name": "eddyb",
        "timestamp": 1586262616
    },
    {
        "content": "<p>you can rely on the <code>fast_reject</code> mechanism</p>",
        "id": 193179108,
        "sender_full_name": "eddyb",
        "timestamp": 1586262636
    },
    {
        "content": "<p>we could make <code>automatically_derived</code> a field on the ast/hir structures for impls</p>",
        "id": 193179119,
        "sender_full_name": "oli",
        "timestamp": 1586262648
    },
    {
        "content": "<p>that's not the interesting bit</p>",
        "id": 193179139,
        "sender_full_name": "eddyb",
        "timestamp": 1586262658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> <code>Span</code> also has the derive info and I don't think you can forge that :P</p>",
        "id": 193179203,
        "sender_full_name": "eddyb",
        "timestamp": 1586262705
    },
    {
        "content": "<p>although I wonder if you could make your own derives with the same names that create the same impls</p>",
        "id": 193179230,
        "sender_full_name": "eddyb",
        "timestamp": 1586262716
    },
    {
        "content": "<p>anyway the tricky bit is finding the impls</p>",
        "id": 193179275,
        "sender_full_name": "eddyb",
        "timestamp": 1586262728
    },
    {
        "content": "<p>because you can't use the trait system like you can with the Structural traits</p>",
        "id": 193179298,
        "sender_full_name": "eddyb",
        "timestamp": 1586262744
    },
    {
        "content": "<p>ah</p>",
        "id": 193179327,
        "sender_full_name": "oli",
        "timestamp": 1586262750
    },
    {
        "content": "<p>right</p>",
        "id": 193179334,
        "sender_full_name": "oli",
        "timestamp": 1586262752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20do.20we.20need.20.60StructuralEq.60.20in.20addition.20to.20.60Eq.60/near/193161800\" title=\"#narrow/stream/131828-t-compiler/topic/Why.20do.20we.20need.20.60StructuralEq.60.20in.20addition.20to.20.60Eq.60/near/193161800\">said</a>:</p>\n<blockquote>\n<p>The RFC states otherwise btw; It seems like \"we would prefer not to\" was not a decision that was made as a team</p>\n</blockquote>\n<p>The lang team <em>has</em> discussed the matter, at least tangentially. See for example the meeting from <a href=\"https://github.com/rust-lang/lang-team/blob/master/minutes/2020-01-02.md#nominated-prs\" title=\"https://github.com/rust-lang/lang-team/blob/master/minutes/2020-01-02.md#nominated-prs\">January of this year</a>, where we discussed PR <a href=\"https://github.com/rust-lang/rust/issues/67088\" title=\"https://github.com/rust-lang/rust/issues/67088\">#67088</a>.</p>",
        "id": 193188032,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586266539
    },
    {
        "content": "<p>The type-based check is simply too conservative to be deployed in practice.</p>",
        "id": 193188175,
        "sender_full_name": "pnkfelix",
        "timestamp": 1586266581
    }
]