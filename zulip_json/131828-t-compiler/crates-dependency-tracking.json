[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> / <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> -- I'd like to discuss <a href=\"https://github.com/rust-lang/rust/pull/55613\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55613\">https://github.com/rust-lang/rust/pull/55613</a>. I can't decide if I think the dependency tracking change will be a problem or not. =)</p>",
        "id": 155255592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547647689
    },
    {
        "content": "<p>(existing discussion on Zulip <a href=\"#narrow/stream/131828-t-compiler/topic/.2354618.20extern.20crates.20trait.20suggestions\" title=\"#narrow/stream/131828-t-compiler/topic/.2354618.20extern.20crates.20trait.20suggestions\">is here</a>)</p>",
        "id": 155255641,
        "sender_full_name": "davidtwco",
        "timestamp": 1547647750
    },
    {
        "content": "<p>I'm happy to make any changes, not invested in that solution - it's just all I could find that worked.</p>",
        "id": 155255668,
        "sender_full_name": "davidtwco",
        "timestamp": 1547647787
    },
    {
        "content": "<p>from a first glance, it looks like this could be trouble since there are several pieces of data that go untracked with these changes.</p>",
        "id": 155255838,
        "sender_full_name": "mw",
        "timestamp": 1547647918
    },
    {
        "content": "<p>why exactly is the list of crates not a query anymore?</p>",
        "id": 155255943,
        "sender_full_name": "mw",
        "timestamp": 1547647993
    },
    {
        "content": "<p>When a new crate was a loaded after the query was first run (for diagnostic purposes) and the results cached then subsequent invocations of the query don't contain those crates.</p>",
        "id": 155256051,
        "sender_full_name": "davidtwco",
        "timestamp": 1547648067
    },
    {
        "content": "<p>I see... I would have expected that all crates are loaded before the query engine starts anyway.</p>",
        "id": 155256135,
        "sender_full_name": "mw",
        "timestamp": 1547648135
    },
    {
        "content": "<p>I imagine other code relies on that too.</p>",
        "id": 155256194,
        "sender_full_name": "mw",
        "timestamp": 1547648164
    },
    {
        "content": "<p>Do you have a link to an example? I.e. something that shows which crates are loaded so late?</p>",
        "id": 155256225,
        "sender_full_name": "mw",
        "timestamp": 1547648191
    },
    {
        "content": "<p>All the crates that get used are loaded - but the PR aims to load all those that have an <code>--extern</code> flag (including those that aren't used) so that we can suggest things from them.</p>",
        "id": 155256227,
        "sender_full_name": "davidtwco",
        "timestamp": 1547648195
    },
    {
        "content": "<p>ie. when a trait is implemented for a <code>u32</code> in an extern crate and you use a function defined by that trait on a <code>u32</code> without having used anything else from that crate - then it wouldn't say <code>try importing external_crate::TraitWithFunctionYouUsed</code>.</p>",
        "id": 155256279,
        "sender_full_name": "davidtwco",
        "timestamp": 1547648258
    },
    {
        "content": "<p>Could you add an additional query that contains the used crate-nums + any other crate nums that have to be loaded?</p>",
        "id": 155256351,
        "sender_full_name": "mw",
        "timestamp": 1547648291
    },
    {
        "content": "<p>that query would then only be called when an error message is produced</p>",
        "id": 155256500,
        "sender_full_name": "mw",
        "timestamp": 1547648421
    },
    {
        "content": "<p>This is what I was thinking tooâ€”</p>",
        "id": 155256571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547648510
    },
    {
        "content": "<p>that we definitely want a single answer to the query, but we perhaps need a \"maximal\" query</p>",
        "id": 155256586,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547648520
    },
    {
        "content": "<p>i.e., what are all the crate nums that <em>could</em> be loaded</p>",
        "id": 155256630,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547648525
    },
    {
        "content": "<p>and we use that in diagnostic cases</p>",
        "id": 155256633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547648532
    },
    {
        "content": "<p>(vs a \"minimal\" query: what are all the crate nums that were needed to resolve names)</p>",
        "id": 155256650,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547648543
    },
    {
        "content": "<p>(which is what we have now)</p>",
        "id": 155256656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547648549
    },
    {
        "content": "<p>well, sort of</p>",
        "id": 155256661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547648553
    },
    {
        "content": "<p>yes, that</p>",
        "id": 155256828,
        "sender_full_name": "mw",
        "timestamp": 1547648672
    },
    {
        "content": "<p>There are a handful of places throughout the compiler that this alternate query would need to be used. </p>\n<p>Initially, I did something similar - I speculatively loaded the crates and then created a set with those new numbers and the existing ones - but there are a bunch of places in the compiler that eventually get called to verify that traits exist with the correct functions that call <code>crates</code> themselves and they'd need adjusted too - adjusting just the place where candidates for suggestions are found isn't enough.</p>\n<p>I guess I could create a query that does that - which calls <code>crates</code> as it is now and then does the speculative loading - returning and caching the maximal set of crate nums. I'd need to then find the handful of places where <code>crates</code> is called elsewhere that would be required for this suggestion  and then change those too?</p>",
        "id": 155257058,
        "sender_full_name": "davidtwco",
        "timestamp": 1547648815
    },
    {
        "content": "<p>(I think I understand what you are suggesting, I started writing that message before niko's comments which clarified that slightly)</p>",
        "id": 155257260,
        "sender_full_name": "davidtwco",
        "timestamp": 1547648960
    },
    {
        "content": "<p>ah, right, I remember that now</p>",
        "id": 155257459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547649113
    },
    {
        "content": "<p>that there are parts of the code that kind of 'don't know' the purpose for which they are invoked</p>",
        "id": 155257532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547649152
    },
    {
        "content": "<p>though I'm a bit surprised that invoke this crates query in the end</p>",
        "id": 155257537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547649158
    },
    {
        "content": "<p>do you happen to remember any examples? I guess I could ripgrep around</p>",
        "id": 155257557,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547649173
    },
    {
        "content": "<p>I can find one of them where I realized that was the issue.</p>",
        "id": 155257576,
        "sender_full_name": "davidtwco",
        "timestamp": 1547649187
    },
    {
        "content": "<p>that'd be help[ful</p>",
        "id": 155257598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547649203
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/041254b81495a5aa67af839e00b890e78ed0cbeb/src/librustc/ty/trait_def.rs#L185\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/041254b81495a5aa67af839e00b890e78ed0cbeb/src/librustc/ty/trait_def.rs#L185\">right here</a></p>",
        "id": 155257636,
        "sender_full_name": "davidtwco",
        "timestamp": 1547649236
    },
    {
        "content": "<p>(and I tried changing that location to try get the speculative crate numbers in case it was just those two locations, but that caused ICEs)</p>",
        "id": 155257727,
        "sender_full_name": "davidtwco",
        "timestamp": 1547649279
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/55613/files#diff-45ff4c3ed02cc75f5b8162af5d9c782bR784\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55613/files#diff-45ff4c3ed02cc75f5b8162af5d9c782bR784\">this was the initial location</a> where I do the speculative loading, changing just this to have those extra crate numbers doesn't ICE but misses an error.</p>",
        "id": 155257905,
        "sender_full_name": "davidtwco",
        "timestamp": 1547649412
    },
    {
        "content": "<p>(that is, it either suggests traits that are implemented but not in scope OR traits that can be implemented and aren't in scope - I forget which, it was a while ago)</p>",
        "id": 155257942,
        "sender_full_name": "davidtwco",
        "timestamp": 1547649447
    },
    {
        "content": "<p>(it does both now, with this change)</p>",
        "id": 155258121,
        "sender_full_name": "davidtwco",
        "timestamp": 1547649573
    },
    {
        "content": "<p>How much of a performance hit would it be to load all known crates eagerly? I imagine that usually most crates <em>are</em> used, right?</p>",
        "id": 155258517,
        "sender_full_name": "mw",
        "timestamp": 1547649845
    },
    {
        "content": "<p>not necessarily</p>",
        "id": 155258704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547649983
    },
    {
        "content": "<p>I'm not sure. It'd probably affect the playground worst - since it has 100 crates with <code>--extern</code> flags that most often aren't used. There is only a hit in the error case with the current approach.</p>",
        "id": 155258706,
        "sender_full_name": "davidtwco",
        "timestamp": 1547649984
    },
    {
        "content": "<p>certainly things like example and test crates don't fit that trend</p>",
        "id": 155258717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650000
    },
    {
        "content": "<p>(I haven't looked <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> at the links you sent yet, sorry)</p>",
        "id": 155258728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650015
    },
    {
        "content": "<p>ok, looking now. interesting.</p>",
        "id": 155258809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650085
    },
    {
        "content": "<p>I mean I guess another option is just to \"not do this\"</p>",
        "id": 155258823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650105
    },
    {
        "content": "<p>I wanted it but I'm not sure how much pain it's worth :)</p>",
        "id": 155258833,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650115
    },
    {
        "content": "<p>and/or maybe we can provide less precise diagnostics</p>",
        "id": 155258849,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650135
    },
    {
        "content": "<p>we're using this test to decide whether the trait is implemented for the receiver type, right?</p>",
        "id": 155258872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650156
    },
    {
        "content": "<p>conceivably we could just tell the user \"this method exists in this trait which is not imported\"</p>",
        "id": 155258889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650185
    },
    {
        "content": "<p>and not specify basically whether it is implemented or not</p>",
        "id": 155258901,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650194
    },
    {
        "content": "<p>(I personally don't get much value from knowing whether it is implemented -- usually I have a trait in mind, and if it is not implemented, I often want to fix that)</p>",
        "id": 155258970,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650218
    },
    {
        "content": "<blockquote>\n<p>we're using this test to decide whether the trait is implemented for the receiver type, right?</p>\n</blockquote>\n<p>Yeah. But I'm fairly sure it's called in other places too because changing just that location and the original one caused ICEs.</p>",
        "id": 155259019,
        "sender_full_name": "davidtwco",
        "timestamp": 1547650271
    },
    {
        "content": "<p>well</p>",
        "id": 155259056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650310
    },
    {
        "content": "<p>not sure quite what you mean</p>",
        "id": 155259066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650321
    },
    {
        "content": "<p>that is, not sure quite which changes you made :)</p>",
        "id": 155259117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650334
    },
    {
        "content": "<p>If I only made sure that the new crate numbers were present in both those locations then other parts of the compiler would start to ICE.</p>",
        "id": 155259128,
        "sender_full_name": "davidtwco",
        "timestamp": 1547650354
    },
    {
        "content": "<p>I see. What I meant was more that:</p>",
        "id": 155259314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650536
    },
    {
        "content": "<p>if we don't <em>try</em> to verify that the trait is implemented, maybe it works out</p>",
        "id": 155259320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650547
    },
    {
        "content": "<p>After I read your message against I was confused as to why I pointed that out.</p>",
        "id": 155259382,
        "sender_full_name": "davidtwco",
        "timestamp": 1547650567
    },
    {
        "content": "<p>I understand what you mean now.</p>",
        "id": 155259386,
        "sender_full_name": "davidtwco",
        "timestamp": 1547650572
    },
    {
        "content": "<p>like I said, it may not be worth it at this point...</p>",
        "id": 155259408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650593
    },
    {
        "content": "<p>...though I still feel like it's helpful</p>",
        "id": 155259411,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650599
    },
    {
        "content": "<p>and this is a particular point where people get confused</p>",
        "id": 155259413,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650601
    },
    {
        "content": "<p>(the need to import a trait)</p>",
        "id": 155259415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547650604
    },
    {
        "content": "<p>There was at least one person that voiced objection to the other change that was similar to this.</p>",
        "id": 155259428,
        "sender_full_name": "davidtwco",
        "timestamp": 1547650620
    },
    {
        "content": "<p><a href=\"https://github.com/integer32llc/rust-playground/issues/445\" target=\"_blank\" title=\"https://github.com/integer32llc/rust-playground/issues/445\">https://github.com/integer32llc/rust-playground/issues/445</a></p>",
        "id": 155259454,
        "sender_full_name": "davidtwco",
        "timestamp": 1547650648
    },
    {
        "content": "<p>yeah, true</p>",
        "id": 155274541,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547662396
    },
    {
        "content": "<p>playground is sort of an extreme case</p>",
        "id": 155274545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547662400
    }
]