[
    {
        "content": "<p>We currently forbid const generics in const fn:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR const parameters are not permitted in const functions</span>\n<span class=\"w\">    </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This rationale for this is explain in the doc comment for <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast_passes/ast_validation/struct.AstValidator.html#method.check_const_fn_const_generic\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast_passes/ast_validation/struct.AstValidator.html#method.check_const_fn_const_generic\">fn AstValidator::check_const_fn_const_generic</a>:</p>\n<div class=\"codehilite\"><pre><span></span>We currently do not permit const generics in const fn, as this is tantamount to allowing compile-time dependent typing.\n\nFIXME(const_generics): Is this really true / necessary? Discuss with @varkor. At any rate, the restriction feels too syntactic. Consider moving it to e.g. typeck.\n</pre></div>\n\n\n<p>We can use the const param of an impl to circumvent this.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Indirect</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Indirect</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Indirect</span>::<span class=\"o\">&lt;</span><span class=\"mi\">7</span><span class=\"o\">&gt;</span>::<span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Is there a case where <code>foo::&lt;value&gt;()</code> can be used while <code>Indirect::&lt;value&gt;::foo()</code> is unusable?<br>\n<span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 193809394,
        "sender_full_name": "lcnr",
        "timestamp": 1586805411
    },
    {
        "content": "<p>that comment doesn't make sense to me</p>",
        "id": 193809565,
        "sender_full_name": "eddyb",
        "timestamp": 1586805486
    },
    {
        "content": "<p>you should be able to just remove the restriction</p>",
        "id": 193809574,
        "sender_full_name": "eddyb",
        "timestamp": 1586805492
    },
    {
        "content": "<p>I had no idea we had it</p>",
        "id": 193809583,
        "sender_full_name": "eddyb",
        "timestamp": 1586805494
    },
    {
        "content": "<p>also btw you need 0 <code>const fn</code> to compute consts from other consts</p>",
        "id": 193809640,
        "sender_full_name": "eddyb",
        "timestamp": 1586805528
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Indirect</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Indirect</span><span class=\"o\">&lt;</span><span class=\"n\">N</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;{}&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Indirect</span>::<span class=\"o\">&lt;</span><span class=\"mi\">7</span><span class=\"o\">&gt;</span>::<span class=\"n\">FOO</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193809691,
        "sender_full_name": "eddyb",
        "timestamp": 1586805561
    },
    {
        "content": "<p>this just works :P</p>",
        "id": 193809704,
        "sender_full_name": "eddyb",
        "timestamp": 1586805571
    },
    {
        "content": "<p>(or I assume it does, I haven't tried it)</p>",
        "id": 193809728,
        "sender_full_name": "eddyb",
        "timestamp": 1586805588
    },
    {
        "content": "<p>Will try and go ahead with removing it them. <code>git blame</code> points to  <span class=\"user-mention\" data-user-id=\"126931\">@centril</span></p>",
        "id": 193809940,
        "sender_full_name": "lcnr",
        "timestamp": 1586805717
    },
    {
        "content": "<p>this just works :P <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=532a4d3d70bf6a5630175384a3c2d3a9\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=532a4d3d70bf6a5630175384a3c2d3a9\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=532a4d3d70bf6a5630175384a3c2d3a9</a></p>\n<p>(I know it does, I have tried it)<br>\n<span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 193810101,
        "sender_full_name": "lcnr",
        "timestamp": 1586805789
    },
    {
        "content": "<p>I also think we can just remove the restriction</p>",
        "id": 193814054,
        "sender_full_name": "centril",
        "timestamp": 1586807892
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/71109\" title=\"https://github.com/rust-lang/rust/pull/71109\">https://github.com/rust-lang/rust/pull/71109</a></p>",
        "id": 193818484,
        "sender_full_name": "lcnr",
        "timestamp": 1586810313
    },
    {
        "content": "<p>allowing const generics on const fn was deliberately not permitted for the initial version of const generics, cc <span class=\"user-mention\" data-user-id=\"256759\">@boats</span></p>",
        "id": 193820183,
        "sender_full_name": "varkor",
        "timestamp": 1586811336
    },
    {
        "content": "<p>it <em>may</em> be safe to allow at some point, but it's not trivially safe, so we ought not to be so cavalier about it</p>",
        "id": 193820459,
        "sender_full_name": "varkor",
        "timestamp": 1586811494
    },
    {
        "content": "<p>na√Øvely, a const function with a const generic parameter is a function whose type depends on a value in the same stage of compilation as it is executed, i.e. a dependent function</p>",
        "id": 193820536,
        "sender_full_name": "varkor",
        "timestamp": 1586811551
    },
    {
        "content": "<p>I may have had a specific example I was concerned about, but I would have to think about it/try to find it</p>",
        "id": 193820644,
        "sender_full_name": "varkor",
        "timestamp": 1586811603
    },
    {
        "content": "<p>at the very least, this is certainly a decision question ‚Äî¬†not something to accidentally permit without thinking through the consequences</p>",
        "id": 193820791,
        "sender_full_name": "varkor",
        "timestamp": 1586811645
    },
    {
        "content": "<p>it may be that as long as we push the obligations to the callers to verify correctness, as with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>'s WF bounds for consts, that this is okay ‚Äî¬†but even the WF bounds are an open design question at the moment</p>",
        "id": 193821053,
        "sender_full_name": "varkor",
        "timestamp": 1586811764
    },
    {
        "content": "<p>I don't understand what you're saying</p>",
        "id": 193821105,
        "sender_full_name": "eddyb",
        "timestamp": 1586811797
    },
    {
        "content": "<p>how is this more dependent typing than anything else?</p>",
        "id": 193821118,
        "sender_full_name": "eddyb",
        "timestamp": 1586811804
    },
    {
        "content": "<p>did you see the examples that use only associated consts?</p>",
        "id": 193821139,
        "sender_full_name": "eddyb",
        "timestamp": 1586811815
    },
    {
        "content": "<p>in facts, by replacing const generics with types that implement a trait with associated consts, you can make examples that compile on stable</p>",
        "id": 193821170,
        "sender_full_name": "eddyb",
        "timestamp": 1586811835
    },
    {
        "content": "<p>I don't understand the argument: the type of the function is not special at all, it's just another struct</p>",
        "id": 193821275,
        "sender_full_name": "eddyb",
        "timestamp": 1586811881
    },
    {
        "content": "<p>there may be some confusion with <em>higher-ranked</em> things?</p>",
        "id": 193821359,
        "sender_full_name": "eddyb",
        "timestamp": 1586811934
    },
    {
        "content": "<p>but we don't have <code>for&lt;const N: usize&gt;</code> or w/e yet, so that's not a concern</p>",
        "id": 193821394,
        "sender_full_name": "eddyb",
        "timestamp": 1586811956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> okay so trying to understand this, is the concern that an argument of a <code>const fn</code> may be used in a type?</p>",
        "id": 193821490,
        "sender_full_name": "eddyb",
        "timestamp": 1586812006
    },
    {
        "content": "<p>e.g. <code>const fn(n: usize) -&gt; [T; n]</code>?</p>",
        "id": 193821510,
        "sender_full_name": "eddyb",
        "timestamp": 1586812017
    },
    {
        "content": "<p>because 1. this is impossible today 2. this is impossible in general without full dependent typing, because <code>const fn</code>s are just <code>fn</code>s you can <em>also</em> call at compile-time</p>",
        "id": 193821571,
        "sender_full_name": "eddyb",
        "timestamp": 1586812059
    },
    {
        "content": "<p>they still have to work with runtime values</p>",
        "id": 193821582,
        "sender_full_name": "eddyb",
        "timestamp": 1586812065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> dependent typing doesn't have anything to do with \"stages of compilation\", that's something else entirely</p>",
        "id": 193821712,
        "sender_full_name": "eddyb",
        "timestamp": 1586812139
    },
    {
        "content": "<p>it's all about universes</p>",
        "id": 193821723,
        "sender_full_name": "eddyb",
        "timestamp": 1586812147
    },
    {
        "content": "<p>or kinds, in Haskell terms</p>",
        "id": 193821781,
        "sender_full_name": "eddyb",
        "timestamp": 1586812190
    },
    {
        "content": "<p>dependent typing at compile-time would be this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\">  </span><span class=\"o\">&amp;</span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">};</span><span class=\"w\"></span>\n</pre></div>",
        "id": 193821942,
        "sender_full_name": "eddyb",
        "timestamp": 1586812279
    },
    {
        "content": "<p>and this is not something we allow or <em>could</em> allow any time soon</p>",
        "id": 193821971,
        "sender_full_name": "eddyb",
        "timestamp": 1586812300
    },
    {
        "content": "<p>sorry, I'll think about this soon</p>",
        "id": 193821995,
        "sender_full_name": "varkor",
        "timestamp": 1586812319
    },
    {
        "content": "<p>any type-level constants must come from <em>separate compile-time evaluation</em>. the separation is the important part, the compile-time is just because we're type-checking while compiling and the separation imposes a \"happens before\" relationship</p>",
        "id": 193822185,
        "sender_full_name": "eddyb",
        "timestamp": 1586812417
    },
    {
        "content": "<p>and the separation can be modeled as lifting to kinds</p>",
        "id": 193822207,
        "sender_full_name": "eddyb",
        "timestamp": 1586812431
    },
    {
        "content": "<p><code>const N: T</code> becomes <code>N: ConstValue&lt;T&gt;</code></p>",
        "id": 193822275,
        "sender_full_name": "eddyb",
        "timestamp": 1586812461
    },
    {
        "content": "<p>using <code>N</code> becomes <code>N::VALUE</code></p>",
        "id": 193822285,
        "sender_full_name": "eddyb",
        "timestamp": 1586812470
    },
    {
        "content": "<p>(Haskell can use kinds for this, we can only mess around with traits :P)</p>",
        "id": 193822324,
        "sender_full_name": "eddyb",
        "timestamp": 1586812503
    },
    {
        "content": "<p>wow I got really worked up about dependent typing huh</p>",
        "id": 193822490,
        "sender_full_name": "eddyb",
        "timestamp": 1586812595
    },
    {
        "content": "<p>I guess seeing that explanation broke my brain a bit the second time since the first time I thought it was some confusion</p>",
        "id": 193822607,
        "sender_full_name": "eddyb",
        "timestamp": 1586812677
    },
    {
        "content": "<p>or misunderstanding</p>",
        "id": 193822659,
        "sender_full_name": "eddyb",
        "timestamp": 1586812690
    },
    {
        "content": "<p>I admit: I had a knee-jerk reaction because I remember having a worry about this setting; but I need to think about what exactly the issue was ‚Äî I thought it was better to delay bors for an hour or two than to have to back a change out because something was actually unsound</p>",
        "id": 193823085,
        "sender_full_name": "varkor",
        "timestamp": 1586812955
    },
    {
        "content": "<p>it could well be that the case I was worried about is not possible without interacting with another feature we don't have</p>",
        "id": 193823118,
        "sender_full_name": "varkor",
        "timestamp": 1586812978
    },
    {
        "content": "<p>but I'm in the middle of something at the moment, so it'll take me a little while to concentrate on this</p>",
        "id": 193823140,
        "sender_full_name": "varkor",
        "timestamp": 1586812994
    },
    {
        "content": "<p>yeah no worries</p>",
        "id": 193823319,
        "sender_full_name": "eddyb",
        "timestamp": 1586813104
    },
    {
        "content": "<p>I'm happy with delaying until we can figure out how that reasoning came to be</p>",
        "id": 193823372,
        "sender_full_name": "eddyb",
        "timestamp": 1586813161
    },
    {
        "content": "<p>it just struck me as not meaning anything. if anything, any restriction should be for the benefit of <code>min_const_fn</code> (which bans e.g. trait bounds), not  <code>const</code> generics</p>",
        "id": 193823489,
        "sender_full_name": "eddyb",
        "timestamp": 1586813209
    },
    {
        "content": "<p>I imagine the rationale was that <code>const fn foo&lt;const X: usize&gt;() -&gt; [(); X]</code> corresponds to something like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>‚àè</mo><mrow><mi>x</mi><mo>:</mo><mrow><mi mathvariant=\"normal\">u</mi><mi mathvariant=\"normal\">s</mi><mi mathvariant=\"normal\">i</mi><mi mathvariant=\"normal\">z</mi><mi mathvariant=\"normal\">e</mi></mrow></mrow></msub><mrow><mi mathvariant=\"normal\">A</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">r</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">y</mi></mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\prod_{x : \\mathrm{usize}} \\mathrm{Array}(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">‚àè</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16779199999999994em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span><span class=\"mrel mtight\">:</span><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">u</span><span class=\"mord mathrm mtight\">s</span><span class=\"mord mathrm mtight\">i</span><span class=\"mord mathrm mtight\">z</span><span class=\"mord mathrm mtight\">e</span></span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">A</span><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\" style=\"margin-right:0.01389em;\">y</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 193823731,
        "sender_full_name": "varkor",
        "timestamp": 1586813377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> well it does, but of course there's a compile time restriction on the <code>usize</code> there</p>",
        "id": 193825755,
        "sender_full_name": "centril",
        "timestamp": 1586814538
    },
    {
        "content": "<p>I thought when we last discussed this in private that there was no problem</p>",
        "id": 193825776,
        "sender_full_name": "centril",
        "timestamp": 1586814550
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> except you can write that without <code>const fn</code></p>",
        "id": 193825818,
        "sender_full_name": "eddyb",
        "timestamp": 1586814575
    },
    {
        "content": "<p>I don't remember; everything is so out of cache, I need to try to reconstruct it to make sure my worries are unfounded</p>",
        "id": 193825840,
        "sender_full_name": "varkor",
        "timestamp": 1586814587
    },
    {
        "content": "<p>that's just an associated <code>const</code></p>",
        "id": 193825845,
        "sender_full_name": "eddyb",
        "timestamp": 1586814590
    },
    {
        "content": "<p>At any rate, the syntactic condition in AST validation is insufficient -- it does not consider <code>impl</code>s and whatnot -- if you actually want to enforce this you should move it to <code>rustc_typeck</code></p>",
        "id": 193825856,
        "sender_full_name": "centril",
        "timestamp": 1586814596
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>: right, that's what I'm currently thinking about</p>",
        "id": 193825861,
        "sender_full_name": "varkor",
        "timestamp": 1586814600
    },
    {
        "content": "<p>there's no <em>actual</em> \\Pi, since that would work with any values</p>",
        "id": 193825947,
        "sender_full_name": "eddyb",
        "timestamp": 1586814633
    },
    {
        "content": "<p>(well I suppose you can enforce it in AST validation as well, but you'll need a more elaborate check)</p>",
        "id": 193825948,
        "sender_full_name": "centril",
        "timestamp": 1586814633
    },
    {
        "content": "<p>it's more like <code>x: const usize</code></p>",
        "id": 193825991,
        "sender_full_name": "eddyb",
        "timestamp": 1586814659
    },
    {
        "content": "<p>where <code>const usize</code> is an universe/kind of lifted values of type <code>usize</code></p>",
        "id": 193826011,
        "sender_full_name": "eddyb",
        "timestamp": 1586814675
    },
    {
        "content": "<p>I think the Haskell analogue of const generics is <code>{-# LANGUAGE DataKinds #-}</code></p>",
        "id": 193826042,
        "sender_full_name": "centril",
        "timestamp": 1586814698
    },
    {
        "content": "<p>yupp</p>",
        "id": 193826050,
        "sender_full_name": "eddyb",
        "timestamp": 1586814703
    },
    {
        "content": "<p>that's what I'm referring to</p>",
        "id": 193826057,
        "sender_full_name": "eddyb",
        "timestamp": 1586814707
    },
    {
        "content": "<p>Yeah <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193826063,
        "sender_full_name": "centril",
        "timestamp": 1586814713
    },
    {
        "content": "<p>I just always forget they're <em>data</em> kinds since I think of this as \"const kinds\" :P</p>",
        "id": 193826072,
        "sender_full_name": "eddyb",
        "timestamp": 1586814720
    },
    {
        "content": "<p>anyway you can lift every value to type-encoded ADTs</p>",
        "id": 193826153,
        "sender_full_name": "eddyb",
        "timestamp": 1586814758
    },
    {
        "content": "<p>basically what <code>typenum</code> does but formalized</p>",
        "id": 193826164,
        "sender_full_name": "eddyb",
        "timestamp": 1586814766
    },
    {
        "content": "<p>this is why we need structurally matcheable ADT constructor trees with integer leaves</p>",
        "id": 193826217,
        "sender_full_name": "eddyb",
        "timestamp": 1586814804
    },
    {
        "content": "<p>and integers are only allowable because of the <code>Nat</code> ADT :P</p>",
        "id": 193826243,
        "sender_full_name": "eddyb",
        "timestamp": 1586814827
    },
    {
        "content": "<p>What we have is basically a new kind constructor <code>Const : Type_Const -&gt; Kind</code></p>",
        "id": 193826390,
        "sender_full_name": "centril",
        "timestamp": 1586814914
    },
    {
        "content": "<p>where <code>_Const</code> denotes the lifting</p>",
        "id": 193826399,
        "sender_full_name": "centril",
        "timestamp": 1586814921
    },
    {
        "content": "<p>I suppose something like this is what I had previously been thinking of:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">X</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">X</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[();</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>sorry, my mind is somewhere else right now, so I'm not thinking entirely clearly</p>",
        "id": 193827650,
        "sender_full_name": "varkor",
        "timestamp": 1586815724
    },
    {
        "content": "<p>what is currently preventing this code from compiling if the const generics in <code>const fn</code> check is removed?</p>",
        "id": 193827728,
        "sender_full_name": "varkor",
        "timestamp": 1586815772
    },
    {
        "content": "<p>that looks like correct code to me, I don't know what you mean</p>",
        "id": 193827881,
        "sender_full_name": "eddyb",
        "timestamp": 1586815855
    },
    {
        "content": "<p>this is entirely possible in an associated <code>const</code></p>",
        "id": 193827908,
        "sender_full_name": "eddyb",
        "timestamp": 1586815873
    },
    {
        "content": "<p><code>bar(X)</code> is not at the value level of <code>foo</code></p>",
        "id": 193827951,
        "sender_full_name": "eddyb",
        "timestamp": 1586815891
    },
    {
        "content": "<p>it's lifted</p>",
        "id": 193827956,
        "sender_full_name": "eddyb",
        "timestamp": 1586815895
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ed8aaace308dec4475c1b46d5337cd99\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ed8aaace308dec4475c1b46d5337cd99\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=ed8aaace308dec4475c1b46d5337cd99</a></p>",
        "id": 193827961,
        "sender_full_name": "centril",
        "timestamp": 1586815903
    },
    {
        "content": "<p>oh lmao</p>",
        "id": 193827986,
        "sender_full_name": "eddyb",
        "timestamp": 1586815922
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error[E0308]: mismatched types\n  --&gt; src/lib.rs:11:9\n   |\n10 |     const fn foo() -&gt; [(); X] {\n   |                       ------- expected `[(); _]` because of return type\n11 |         [(); bar(X)]\n   |         ^^^^^^^^^^^^ expected `X`, found `bar(X)`\n   |\n   = note: expected array `[(); _]`\n              found array `[(); _]`\n</pre></div>",
        "id": 193828028,
        "sender_full_name": "centril",
        "timestamp": 1586815925
    },
    {
        "content": "<p>right, we don't simplify <code>bar(X)</code> to <code>X</code></p>",
        "id": 193828037,
        "sender_full_name": "eddyb",
        "timestamp": 1586815931
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> so as you see, the current check isn't actually enforcing anything <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193828091,
        "sender_full_name": "centril",
        "timestamp": 1586815974
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=33b2deb1b5946d98d8f204e9882d3626\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=33b2deb1b5946d98d8f204e9882d3626\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=33b2deb1b5946d98d8f204e9882d3626</a></p>",
        "id": 193828119,
        "sender_full_name": "eddyb",
        "timestamp": 1586815994
    },
    {
        "content": "<p>okay, let's leave aside that the current check is flawed: obviously that's a bug with the check, unrelated to the intention</p>",
        "id": 193828237,
        "sender_full_name": "varkor",
        "timestamp": 1586816045
    },
    {
        "content": "<p>not only are <code>const fn</code>s w/o arguments isomorphic to associated <code>const</code>s with <code>#[feature(const_fn)]</code>, they're actually more restricted thanks to <code>min_const_fn</code> :P</p>",
        "id": 193828245,
        "sender_full_name": "eddyb",
        "timestamp": 1586816047
    },
    {
        "content": "<p>I don't know why you'd even bother with <code>const fn</code>s when associated <code>const</code>s exist</p>",
        "id": 193828285,
        "sender_full_name": "eddyb",
        "timestamp": 1586816078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193828037\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193828037\">said</a>:</p>\n<blockquote>\n<p>right, we don't simplify <code>bar(X)</code> to <code>X</code></p>\n</blockquote>\n<p>right, but this is a restriction with const generics at the moment</p>",
        "id": 193828295,
        "sender_full_name": "varkor",
        "timestamp": 1586816084
    },
    {
        "content": "<p>surely if there is a problem in having const-generic constants, that would be it?</p>",
        "id": 193828298,
        "sender_full_name": "eddyb",
        "timestamp": 1586816087
    },
    {
        "content": "<p>we don't always intend to have a completely syntactic check</p>",
        "id": 193828304,
        "sender_full_name": "varkor",
        "timestamp": 1586816090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193828298\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193828298\">said</a>:</p>\n<blockquote>\n<p>surely if there is a problem in having const-generic constants, that would be it?</p>\n</blockquote>\n<p>I could believe that we're too liberal with associated constants and const generics at the moment</p>",
        "id": 193828376,
        "sender_full_name": "varkor",
        "timestamp": 1586816132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193828285\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193828285\">said</a>:</p>\n<blockquote>\n<p>I don't know why you'd even bother with <code>const fn</code>s when associated <code>const</code>s exist</p>\n</blockquote>\n<p>Convenience and code reuse?</p>",
        "id": 193828377,
        "sender_full_name": "centril",
        "timestamp": 1586816132
    },
    {
        "content": "<p>no, I mean the checks needed from <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>'s PoV</p>",
        "id": 193828401,
        "sender_full_name": "eddyb",
        "timestamp": 1586816155
    },
    {
        "content": "<p>why would you bother banning <code>const</code> generics in scope of <code>const fn</code>s when they can also exist in scope of associated <code>const</code>s</p>",
        "id": 193828467,
        "sender_full_name": "eddyb",
        "timestamp": 1586816175
    },
    {
        "content": "<p>yeah, I agree</p>",
        "id": 193828503,
        "sender_full_name": "varkor",
        "timestamp": 1586816206
    },
    {
        "content": "<p>I think maybe we should ban const generics in associated constants</p>",
        "id": 193828514,
        "sender_full_name": "varkor",
        "timestamp": 1586816215
    },
    {
        "content": "<p>okay now you have to convince me there is a reason to :)</p>",
        "id": 193828532,
        "sender_full_name": "eddyb",
        "timestamp": 1586816227
    },
    {
        "content": "<p>okay, so I don't think there is any fear of this causing unsoundness</p>",
        "id": 193828590,
        "sender_full_name": "varkor",
        "timestamp": 1586816276
    },
    {
        "content": "<p>I was worried you had something complicated involving <em>arguments</em> but if you think this restriction is needed by associated <code>const</code>s, I think I can safely say I believe you're mistaken :P</p>",
        "id": 193828596,
        "sender_full_name": "eddyb",
        "timestamp": 1586816281
    },
    {
        "content": "<p>this is a safe underapproximation</p>",
        "id": 193828645,
        "sender_full_name": "varkor",
        "timestamp": 1586816288
    },
    {
        "content": "<p>but if we ever lift the syntactic restriction, i.e. the two terms must be identical, then we have issues with type checking</p>",
        "id": 193828670,
        "sender_full_name": "varkor",
        "timestamp": 1586816316
    },
    {
        "content": "<p>we have to rely on a limited form of symbolic execution</p>",
        "id": 193828694,
        "sender_full_name": "varkor",
        "timestamp": 1586816333
    },
    {
        "content": "<p>this is fine with me even if <code>bar(X)</code> normalizes to <code>X</code></p>",
        "id": 193828695,
        "sender_full_name": "eddyb",
        "timestamp": 1586816333
    },
    {
        "content": "<p>how so?</p>",
        "id": 193828703,
        "sender_full_name": "eddyb",
        "timestamp": 1586816341
    },
    {
        "content": "<p><code>bar(X)</code> is not part of the parent body</p>",
        "id": 193828710,
        "sender_full_name": "eddyb",
        "timestamp": 1586816348
    },
    {
        "content": "<p>because imagine <code>bar</code> is more complicated than the identity</p>",
        "id": 193828721,
        "sender_full_name": "varkor",
        "timestamp": 1586816353
    },
    {
        "content": "<p>it's some arbitrary function</p>",
        "id": 193828733,
        "sender_full_name": "varkor",
        "timestamp": 1586816358
    },
    {
        "content": "<p><code>let x = bar(X); [(); x]</code> will never work</p>",
        "id": 193828736,
        "sender_full_name": "eddyb",
        "timestamp": 1586816360
    },
    {
        "content": "<p>we can't work out what it will return</p>",
        "id": 193828745,
        "sender_full_name": "varkor",
        "timestamp": 1586816365
    },
    {
        "content": "<p>are you saying <code>[(); bar(X)]</code> will never work?</p>",
        "id": 193828780,
        "sender_full_name": "varkor",
        "timestamp": 1586816387
    },
    {
        "content": "<p>no</p>",
        "id": 193828785,
        "sender_full_name": "eddyb",
        "timestamp": 1586816390
    },
    {
        "content": "<p>right</p>",
        "id": 193828796,
        "sender_full_name": "varkor",
        "timestamp": 1586816394
    },
    {
        "content": "<p>okay, I suppose this issue already exists, because we can have arbitrary expressions in the repeat parameter</p>",
        "id": 193828874,
        "sender_full_name": "varkor",
        "timestamp": 1586816418
    },
    {
        "content": "<p>if it starts working, it will work all the same whether <code>const fn</code> or regular <code>fn</code></p>",
        "id": 193828880,
        "sender_full_name": "eddyb",
        "timestamp": 1586816421
    },
    {
        "content": "<p>there is nothing about \"this code may execute at compile-time\" that changes any of this</p>",
        "id": 193828907,
        "sender_full_name": "eddyb",
        "timestamp": 1586816441
    },
    {
        "content": "<p>if <code>unify(bar(X), X)</code> will ever work it will be something mostly-syntactic on MIR most likely</p>",
        "id": 193828966,
        "sender_full_name": "eddyb",
        "timestamp": 1586816473
    },
    {
        "content": "<p>symbolic evaluation is hard :P</p>",
        "id": 193828985,
        "sender_full_name": "eddyb",
        "timestamp": 1586816483
    },
    {
        "content": "<p>maybe‚Ä¶</p>",
        "id": 193829016,
        "sender_full_name": "varkor",
        "timestamp": 1586816499
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> we'd need to RFC some sort of definitional equality or so</p>",
        "id": 193829023,
        "sender_full_name": "centril",
        "timestamp": 1586816504
    },
    {
        "content": "<p>for \"mostly syntactic on MIR\"</p>",
        "id": 193829044,
        "sender_full_name": "centril",
        "timestamp": 1586816514
    },
    {
        "content": "<p>yeah sure, my point is</p>",
        "id": 193829051,
        "sender_full_name": "eddyb",
        "timestamp": 1586816520
    },
    {
        "content": "<p>none of this has anything to do with <code>const fn</code>s or associated <code>const</code>s</p>",
        "id": 193829103,
        "sender_full_name": "eddyb",
        "timestamp": 1586816532
    },
    {
        "content": "<p>I agree with your point <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193829111,
        "sender_full_name": "centril",
        "timestamp": 1586816537
    },
    {
        "content": "<p>I thought you were talking as if <code>bar(X)</code> is part of the parent body</p>",
        "id": 193829118,
        "sender_full_name": "eddyb",
        "timestamp": 1586816543
    },
    {
        "content": "<p>otherwise none of this \"dependent typing\" talk makes any sense</p>",
        "id": 193829140,
        "sender_full_name": "eddyb",
        "timestamp": 1586816553
    },
    {
        "content": "<p>I think that my main issue was that type-checking could become (even more) undecidable, but I think this boils down to <code>unify(bar(X), X)</code>, as you say, which was already an existing issue already</p>",
        "id": 193829153,
        "sender_full_name": "varkor",
        "timestamp": 1586816560
    },
    {
        "content": "<p><code>let x = bar(X); [(); x]</code> is dependent typing</p>",
        "id": 193829161,
        "sender_full_name": "eddyb",
        "timestamp": 1586816565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> but you can just remove the <code>const</code> from the <code>const fn</code> and now it's not a <code>const fn</code></p>",
        "id": 193829186,
        "sender_full_name": "eddyb",
        "timestamp": 1586816585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  what does \"even more undecidable\" mean lol? :D</p>",
        "id": 193829194,
        "sender_full_name": "centril",
        "timestamp": 1586816596
    },
    {
        "content": "<p>and nothing changes about type-checking it</p>",
        "id": 193829196,
        "sender_full_name": "eddyb",
        "timestamp": 1586816597
    },
    {
        "content": "<p><code>[(); { expression }]</code> is dependent typing</p>",
        "id": 193829209,
        "sender_full_name": "varkor",
        "timestamp": 1586816612
    },
    {
        "content": "<p>ah that's where your confusion stems from</p>",
        "id": 193829223,
        "sender_full_name": "eddyb",
        "timestamp": 1586816625
    },
    {
        "content": "<p>it's only if <code>expression</code> can refer to non-generics</p>",
        "id": 193829233,
        "sender_full_name": "eddyb",
        "timestamp": 1586816634
    },
    {
        "content": "<p>I think \"dependent typing\" isn't one thing; you can have degrees of dependent typing...</p>",
        "id": 193829243,
        "sender_full_name": "centril",
        "timestamp": 1586816641
    },
    {
        "content": "<p>but it can't</p>",
        "id": 193829273,
        "sender_full_name": "eddyb",
        "timestamp": 1586816642
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829194\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829194\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span>  what does \"even more undecidable\" mean lol? :D</p>\n</blockquote>\n<p>I thought you would correct me if I said \"make it undecidable\", as it already is</p>",
        "id": 193829286,
        "sender_full_name": "varkor",
        "timestamp": 1586816646
    },
    {
        "content": "<p>that's why I'm saying <code>let x = bar(X); [(); x]</code> and <code>[(); bar(X)]</code> are <em>very different</em></p>",
        "id": 193829306,
        "sender_full_name": "eddyb",
        "timestamp": 1586816671
    },
    {
        "content": "<p>the former is dependent-typing, no matter when <code>let x</code> may be evaluated</p>",
        "id": 193829323,
        "sender_full_name": "eddyb",
        "timestamp": 1586816691
    },
    {
        "content": "<p>And Haskell via DataKinds certainly have some sorta dependent typing; <a href=\"https://www.youtube.com/watch?v=wNa3MMbhwS4\" title=\"https://www.youtube.com/watch?v=wNa3MMbhwS4\">https://www.youtube.com/watch?v=wNa3MMbhwS4</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"wNa3MMbhwS4\" href=\"https://www.youtube.com/watch?v=wNa3MMbhwS4\" title=\"https://www.youtube.com/watch?v=wNa3MMbhwS4\"><img src=\"https://i.ytimg.com/vi/wNa3MMbhwS4/default.jpg\"></a></div>",
        "id": 193829333,
        "sender_full_name": "centril",
        "timestamp": 1586816701
    },
    {
        "content": "<p>the latter is just data kinds</p>",
        "id": 193829336,
        "sender_full_name": "eddyb",
        "timestamp": 1586816702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829233\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829233\">said</a>:</p>\n<blockquote>\n<p>it's only if <code>expression</code> can refer to non-generics</p>\n</blockquote>\n<p>the generics can be arbitrary values, which means the type depends on some computation, whose value is not known without running some arbitrary code</p>",
        "id": 193829340,
        "sender_full_name": "varkor",
        "timestamp": 1586816706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> but you can lift <em>all of that</em> to types</p>",
        "id": 193829369,
        "sender_full_name": "eddyb",
        "timestamp": 1586816724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829306\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829306\">said</a>:</p>\n<blockquote>\n<p>that's why I'm saying <code>let x = bar(X); [(); x]</code> and <code>[(); bar(X)]</code> are <em>very different</em></p>\n</blockquote>\n<p>I agree they are, and the former is much worse ‚Äî but to some extend the latter is still dependent</p>",
        "id": 193829374,
        "sender_full_name": "varkor",
        "timestamp": 1586816733
    },
    {
        "content": "<p>if you couldn't, <em>then</em> it would be dependent</p>",
        "id": 193829384,
        "sender_full_name": "eddyb",
        "timestamp": 1586816741
    },
    {
        "content": "<p>it's very important to understand where the value-level boundary lies</p>",
        "id": 193829399,
        "sender_full_name": "eddyb",
        "timestamp": 1586816757
    },
    {
        "content": "<p><code>X</code> is <em>not</em> in the value level!</p>",
        "id": 193829448,
        "sender_full_name": "eddyb",
        "timestamp": 1586816764
    },
    {
        "content": "<p>I understand your distinction</p>",
        "id": 193829464,
        "sender_full_name": "varkor",
        "timestamp": 1586816775
    },
    {
        "content": "<p>okay then you should understand there is no concern here :P</p>",
        "id": 193829479,
        "sender_full_name": "eddyb",
        "timestamp": 1586816784
    },
    {
        "content": "<p>and no dependent typing</p>",
        "id": 193829486,
        "sender_full_name": "eddyb",
        "timestamp": 1586816788
    },
    {
        "content": "<p>and I realise that it makes a practical difference</p>",
        "id": 193829487,
        "sender_full_name": "varkor",
        "timestamp": 1586816789
    },
    {
        "content": "<p>there is a theoretical name for what const generics are but I've forgotten it</p>",
        "id": 193829498,
        "sender_full_name": "eddyb",
        "timestamp": 1586816806
    },
    {
        "content": "<p>but now I'm just thinking about the terminological difference :P</p>",
        "id": 193829501,
        "sender_full_name": "varkor",
        "timestamp": 1586816811
    },
    {
        "content": "<p>brb bugging eternaleye about it</p>",
        "id": 193829502,
        "sender_full_name": "eddyb",
        "timestamp": 1586816812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829286\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829286\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829194\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829194\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span>  what does \"even more undecidable\" mean lol? :D</p>\n</blockquote>\n<p>I thought you would correct me if I said \"make it undecidable\", as it already is</p>\n</blockquote>\n<p>Just thought it a bit funny in the sense of \"infinity + 1\"</p>",
        "id": 193829508,
        "sender_full_name": "centril",
        "timestamp": 1586816817
    },
    {
        "content": "<p>:P</p>",
        "id": 193829518,
        "sender_full_name": "varkor",
        "timestamp": 1586816824
    },
    {
        "content": "<p>\"add more ways for it to be undecidable\"</p>",
        "id": 193829529,
        "sender_full_name": "varkor",
        "timestamp": 1586816829
    },
    {
        "content": "<p>inb4 this becomes ordinals vs cardinals</p>",
        "id": 193829533,
        "sender_full_name": "eddyb",
        "timestamp": 1586816834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> maybe \"more conveniently undecidable\" ;)</p>",
        "id": 193829552,
        "sender_full_name": "centril",
        "timestamp": 1586816849
    },
    {
        "content": "<p><em>\"In this release of Rust, we have made undecidability at the type level more accessible to all users\"</em></p>",
        "id": 193829690,
        "sender_full_name": "centril",
        "timestamp": 1586816942
    },
    {
        "content": "<p>also I don't think MIR-driven unification is undecidable, only CTFE is</p>",
        "id": 193829697,
        "sender_full_name": "eddyb",
        "timestamp": 1586816944
    },
    {
        "content": "<p>my only interest in MIR-driven unification is treating two constant expressions written and type-checked the same, but in two different places, like they're equal</p>",
        "id": 193829751,
        "sender_full_name": "eddyb",
        "timestamp": 1586816989
    },
    {
        "content": "<p>okay, eternaleye replied</p>",
        "id": 193829831,
        "sender_full_name": "eddyb",
        "timestamp": 1586817018
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829751\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193829751\">said</a>:</p>\n<blockquote>\n<p>my only interest in MIR-driven unification is treating two constant expressions written and type-checked the same, but in two different places, like they're equal</p>\n</blockquote>\n<p>I personally would quite like symbolic execution, but I can see that that's a more contentious issue</p>",
        "id": 193829853,
        "sender_full_name": "varkor",
        "timestamp": 1586817040
    },
    {
        "content": "<p>we can start simple <em>shrug</em></p>",
        "id": 193829867,
        "sender_full_name": "eddyb",
        "timestamp": 1586817055
    },
    {
        "content": "<p>oh god now I can't find it</p>",
        "id": 193830046,
        "sender_full_name": "eddyb",
        "timestamp": 1586817163
    },
    {
        "content": "<p>no I don't want spirituality results</p>",
        "id": 193830079,
        "sender_full_name": "eddyb",
        "timestamp": 1586817185
    },
    {
        "content": "<p>awww apparently it's only in talks</p>",
        "id": 193830241,
        "sender_full_name": "eddyb",
        "timestamp": 1586817303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193830079\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193830079\">said</a>:</p>\n<blockquote>\n<p>no I don't want spirituality results</p>\n</blockquote>\n<p>what? :P</p>",
        "id": 193830345,
        "sender_full_name": "varkor",
        "timestamp": 1586817393
    },
    {
        "content": "<p>something about having contacts in the spirit world</p>",
        "id": 193830373,
        "sender_full_name": "eddyb",
        "timestamp": 1586817427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  are we talking McBride's spirit world?</p>",
        "id": 193830478,
        "sender_full_name": "centril",
        "timestamp": 1586817523
    },
    {
        "content": "<p>anyway <a href=\"https://personal.cis.strath.ac.uk/conor.mcbride/pub/hasochism.pdf\" title=\"https://personal.cis.strath.ac.uk/conor.mcbride/pub/hasochism.pdf\">https://personal.cis.strath.ac.uk/conor.mcbride/pub/hasochism.pdf</a> is kind of interesting</p>",
        "id": 193830480,
        "sender_full_name": "eddyb",
        "timestamp": 1586817524
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> oh yeah I haven't said his name yet</p>",
        "id": 193830499,
        "sender_full_name": "eddyb",
        "timestamp": 1586817541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193830373\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193830373\">said</a>:</p>\n<blockquote>\n<p>something about having contacts in the spirit world</p>\n</blockquote>\n<p>I never thought spirits would be relevant to Rust :P</p>",
        "id": 193830578,
        "sender_full_name": "varkor",
        "timestamp": 1586817586
    },
    {
        "content": "<p>it's how McBride refers to the kind of lifting here, apparently</p>",
        "id": 193830627,
        "sender_full_name": "eddyb",
        "timestamp": 1586817604
    },
    {
        "content": "<p>I was just hoping for something easier to point at, like a blog post or paper :P</p>",
        "id": 193830645,
        "sender_full_name": "eddyb",
        "timestamp": 1586817617
    },
    {
        "content": "<p>I see :P</p>",
        "id": 193830649,
        "sender_full_name": "varkor",
        "timestamp": 1586817622
    },
    {
        "content": "<p><em>sigh</em></p>",
        "id": 193830697,
        "sender_full_name": "eddyb",
        "timestamp": 1586817682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> actually, I just got a flashback</p>",
        "id": 193830790,
        "sender_full_name": "eddyb",
        "timestamp": 1586817727
    },
    {
        "content": "<p>were you maybe concerned about <em>calling</em> <code>const fn</code>s in <code>AnonConst</code>s used in types?</p>",
        "id": 193830822,
        "sender_full_name": "eddyb",
        "timestamp": 1586817762
    },
    {
        "content": "<p>as this would make more sense overall IMO</p>",
        "id": 193830844,
        "sender_full_name": "eddyb",
        "timestamp": 1586817783
    },
    {
        "content": "<p>even regular <code>const fn</code>, not necessarily ones parameterized by <code>const</code> generics, even completely monomorphic</p>",
        "id": 193830877,
        "sender_full_name": "eddyb",
        "timestamp": 1586817815
    },
    {
        "content": "<p>was surprised to see you bring up const unification but this would explain it</p>",
        "id": 193830897,
        "sender_full_name": "eddyb",
        "timestamp": 1586817839
    },
    {
        "content": "<p>this is not an unreasonable way to limit <code>const</code> unification, if we had it :P</p>",
        "id": 193830970,
        "sender_full_name": "eddyb",
        "timestamp": 1586817880
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> that is something like <code>TypeCtor&lt;{const_fn::&lt;ConstExpr&gt;()}&gt;</code>?</p>",
        "id": 193830975,
        "sender_full_name": "centril",
        "timestamp": 1586817886
    },
    {
        "content": "<p>even <code>TypeCtor&lt;{const_fn(V)}&gt;</code>, assuming <code>V</code> is a <code>const</code> param</p>",
        "id": 193831022,
        "sender_full_name": "eddyb",
        "timestamp": 1586817925
    },
    {
        "content": "<p>don't have those (outside of the intrinsics), and doesn't matter?</p>",
        "id": 193831046,
        "sender_full_name": "centril",
        "timestamp": 1586817947
    },
    {
        "content": "<p>don't have what?</p>",
        "id": 193831057,
        "sender_full_name": "eddyb",
        "timestamp": 1586817957
    },
    {
        "content": "<p>non-implied <code>const</code> params</p>",
        "id": 193831122,
        "sender_full_name": "centril",
        "timestamp": 1586817983
    },
    {
        "content": "<p>I'm talking about literally <code>Array&lt;T, {add(N, 1)}&gt;</code></p>",
        "id": 193831127,
        "sender_full_name": "eddyb",
        "timestamp": 1586817988
    },
    {
        "content": "<p>being disallowed but <code>Array&lt;T, {N+1}&gt;</code> allowed</p>",
        "id": 193831137,
        "sender_full_name": "eddyb",
        "timestamp": 1586818005
    },
    {
        "content": "<p>oh</p>",
        "id": 193831138,
        "sender_full_name": "centril",
        "timestamp": 1586818005
    },
    {
        "content": "<p>this is the only way I can understand <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>'s protests wrt the <code>bar(X)</code> example</p>",
        "id": 193831165,
        "sender_full_name": "eddyb",
        "timestamp": 1586818025
    },
    {
        "content": "<p>since clearly where that array shows up is unimportant: type-check works the same way</p>",
        "id": 193831181,
        "sender_full_name": "eddyb",
        "timestamp": 1586818048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193830822\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193830822\">said</a>:</p>\n<blockquote>\n<p>were you maybe concerned about <em>calling</em> <code>const fn</code>s in <code>AnonConst</code>s used in types?</p>\n</blockquote>\n<p>yes</p>",
        "id": 193831190,
        "sender_full_name": "varkor",
        "timestamp": 1586818054
    },
    {
        "content": "<p>/me gives out a sigh of relief</p>",
        "id": 193831207,
        "sender_full_name": "eddyb",
        "timestamp": 1586818071
    },
    {
        "content": "<p>oh, actually, you're right: it is of course different to consider functions rather than expressions</p>",
        "id": 193831258,
        "sender_full_name": "varkor",
        "timestamp": 1586818085
    },
    {
        "content": "<p>and yeah right now such expressions are quite useless so they're implicitly banned anyway :P</p>",
        "id": 193831270,
        "sender_full_name": "eddyb",
        "timestamp": 1586818092
    },
    {
        "content": "<p>sorry, my sleeping schedule has gone out the window recently, and my mind obviously hasn't benefited from that :P</p>",
        "id": 193831285,
        "sender_full_name": "varkor",
        "timestamp": 1586818106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  but what does <code>add(N, 1)</code> here have to do with the check in AST validation?</p>",
        "id": 193831290,
        "sender_full_name": "centril",
        "timestamp": 1586818110
    },
    {
        "content": "<p>nothing!</p>",
        "id": 193831300,
        "sender_full_name": "eddyb",
        "timestamp": 1586818119
    },
    {
        "content": "<p>that check is still confused IMO</p>",
        "id": 193831303,
        "sender_full_name": "eddyb",
        "timestamp": 1586818126
    },
    {
        "content": "<p>but I just found the link between <code>const fn</code>s and <code>const</code> generics :P</p>",
        "id": 193831322,
        "sender_full_name": "eddyb",
        "timestamp": 1586818142
    },
    {
        "content": "<p>right; so we should nix it</p>",
        "id": 193831325,
        "sender_full_name": "centril",
        "timestamp": 1586818143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> same and I've been meaning to sleep even before all of this kept me awake :P</p>",
        "id": 193831361,
        "sender_full_name": "eddyb",
        "timestamp": 1586818176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193830970\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193830970\">said</a>:</p>\n<blockquote>\n<p>this is not an unreasonable way to limit <code>const</code> unification, if we had it :P</p>\n</blockquote>\n<p>right, I think you've managed to decipher my incoherent thought patterns, thank you <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 193831391,
        "sender_full_name": "varkor",
        "timestamp": 1586818199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193831303\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193831303\">said</a>:</p>\n<blockquote>\n<p>that check is still confused IMO</p>\n</blockquote>\n<p>I'm pretty sure it was added as an afterthought, so this doesn't surprise me</p>",
        "id": 193831479,
        "sender_full_name": "varkor",
        "timestamp": 1586818250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  not sure why we would disallow <code>add(N, 1)</code> though</p>",
        "id": 193831694,
        "sender_full_name": "centril",
        "timestamp": 1586818424
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193831391\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193831391\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193830970\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193830970\">said</a>:</p>\n<blockquote>\n<p>this is not an unreasonable way to limit <code>const</code> unification, if we had it :P</p>\n</blockquote>\n<p>right, I think you've managed to decipher my incoherent thought patterns, thank you <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>it literally came to me in a flashback so maybe I remembered a previous discussion</p>",
        "id": 193831698,
        "sender_full_name": "eddyb",
        "timestamp": 1586818430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> only once we get <code>const</code> unification, and maybe we won't ban it</p>",
        "id": 193831750,
        "sender_full_name": "eddyb",
        "timestamp": 1586818452
    },
    {
        "content": "<p>you'd need to expose the body of the <code>const fn</code> to look inside it if you e.g., want to unify <code>add(N, 1) ~ add(1, N)</code></p>",
        "id": 193831822,
        "sender_full_name": "centril",
        "timestamp": 1586818546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> so our conclusion is to r+ the PR again?</p>",
        "id": 193831879,
        "sender_full_name": "centril",
        "timestamp": 1586818574
    },
    {
        "content": "<p>btw <code>add(1, 3)</code> is clearly fine, it's only the \"dependence\" on <code>const</code> parameters that's dubious :P</p>",
        "id": 193831905,
        "sender_full_name": "eddyb",
        "timestamp": 1586818610
    },
    {
        "content": "<p>yeah</p>",
        "id": 193831914,
        "sender_full_name": "centril",
        "timestamp": 1586818624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  btw, \"<code>const</code> parameters\" is highly ambiguous :P</p>",
        "id": 193831920,
        "sender_full_name": "centril",
        "timestamp": 1586818648
    },
    {
        "content": "<p>how so?</p>",
        "id": 193831928,
        "sender_full_name": "eddyb",
        "timestamp": 1586818658
    },
    {
        "content": "<p>I use backticks to mean <code>const X: T</code></p>",
        "id": 193831940,
        "sender_full_name": "eddyb",
        "timestamp": 1586818668
    },
    {
        "content": "<p>I would call it \"<code>const</code> arguments\"</p>",
        "id": 193831941,
        "sender_full_name": "centril",
        "timestamp": 1586818669
    },
    {
        "content": "<p>its the argument that is a constant; not the parameter?</p>",
        "id": 193831997,
        "sender_full_name": "centril",
        "timestamp": 1586818690
    },
    {
        "content": "<p>but that's not in the definition</p>",
        "id": 193831999,
        "sender_full_name": "eddyb",
        "timestamp": 1586818690
    },
    {
        "content": "<p>uhhhhh</p>",
        "id": 193832012,
        "sender_full_name": "eddyb",
        "timestamp": 1586818703
    },
    {
        "content": "<p>I mean generic parameters declared with the keyword <code>const</code></p>",
        "id": 193832030,
        "sender_full_name": "eddyb",
        "timestamp": 1586818719
    },
    {
        "content": "<p>I wouldn't use <code>this style</code> if I meant \"const\" more informally</p>",
        "id": 193832048,
        "sender_full_name": "eddyb",
        "timestamp": 1586818735
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  oh, <code>fn foo(const N: usize)</code>?</p>",
        "id": 193832052,
        "sender_full_name": "centril",
        "timestamp": 1586818736
    },
    {
        "content": "<p>no</p>",
        "id": 193832057,
        "sender_full_name": "eddyb",
        "timestamp": 1586818740
    },
    {
        "content": "<p><code>fn foo&lt;const N: usize&gt;</code></p>",
        "id": 193832077,
        "sender_full_name": "eddyb",
        "timestamp": 1586818751
    },
    {
        "content": "<p>or <code>struct Foo&lt;const N: usize&gt;;</code></p>",
        "id": 193832093,
        "sender_full_name": "eddyb",
        "timestamp": 1586818766
    },
    {
        "content": "<p>oh; dependence on const parameters... never mind me</p>",
        "id": 193832097,
        "sender_full_name": "centril",
        "timestamp": 1586818770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193831879\" title=\"#narrow/stream/131828-t-compiler/topic/const.20generics.20in.20const.20fn/near/193831879\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> so our conclusion is to r+ the PR again?</p>\n</blockquote>\n<p>yes, I think this is fine<br>\nwe should record a note about const unification and calling const functions somewhere ‚Äî do we have anywhere we're tracking comments about unification yet?</p>",
        "id": 193832690,
        "sender_full_name": "varkor",
        "timestamp": 1586819078
    },
    {
        "content": "<p>there was a lot of discussion on the tracking issue that's probably lost now :(</p>",
        "id": 193832719,
        "sender_full_name": "eddyb",
        "timestamp": 1586819101
    },
    {
        "content": "<p>including some of my ideas</p>",
        "id": 193832727,
        "sender_full_name": "eddyb",
        "timestamp": 1586819104
    },
    {
        "content": "<p>well, \"lost\" unless you dare to press the \"show 9000 comments\" button</p>",
        "id": 193832742,
        "sender_full_name": "eddyb",
        "timestamp": 1586819117
    },
    {
        "content": "<p>anyway I don't think we have to ban it directly, we can just handle it by unification limitations</p>",
        "id": 193833133,
        "sender_full_name": "eddyb",
        "timestamp": 1586819356
    },
    {
        "content": "<p>the WF conditions we're adding will require that you somehow request that <em>someone else</em> evaluate it</p>",
        "id": 193833195,
        "sender_full_name": "eddyb",
        "timestamp": 1586819400
    },
    {
        "content": "<p>and unification won't work except in the identity case (but we have to be careful with <code>Unevaluated</code> unification)</p>",
        "id": 193833266,
        "sender_full_name": "eddyb",
        "timestamp": 1586819420
    },
    {
        "content": "<p>yeah, I think these two facts protect us from anything unsavoury</p>",
        "id": 193833276,
        "sender_full_name": "varkor",
        "timestamp": 1586819425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> <a href=\"https://www.youtube.com/watch?v=21bUrFEX4jI&amp;t=1h2m17s\" title=\"https://www.youtube.com/watch?v=21bUrFEX4jI&amp;t=1h2m17s\">https://www.youtube.com/watch?v=21bUrFEX4jI&amp;t=1h2m17s</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"21bUrFEX4jI\" href=\"https://www.youtube.com/watch?v=21bUrFEX4jI&amp;t=1h2m17s\" title=\"https://www.youtube.com/watch?v=21bUrFEX4jI&amp;t=1h2m17s\"><img src=\"https://i.ytimg.com/vi/21bUrFEX4jI/default.jpg\"></a></div>",
        "id": 193833990,
        "sender_full_name": "eddyb",
        "timestamp": 1586819968
    },
    {
        "content": "<p>I think I've seen this lecture at some point</p>",
        "id": 193834071,
        "sender_full_name": "centril",
        "timestamp": 1586820017
    },
    {
        "content": "<p>adjusted timestamp</p>",
        "id": 193834118,
        "sender_full_name": "eddyb",
        "timestamp": 1586820066
    },
    {
        "content": "<p>also wow, I am being informed GHC went an interesting route</p>",
        "id": 193834707,
        "sender_full_name": "eddyb",
        "timestamp": 1586820488
    },
    {
        "content": "<ul>\n<li>tired: <a href=\"https://downloads.haskell.org/~ghc/7.4.1/docs/html/users_guide/kind-polymorphism-and-promotion.html#promotion\" title=\"https://downloads.haskell.org/~ghc/7.4.1/docs/html/users_guide/kind-polymorphism-and-promotion.html#promotion\">https://downloads.haskell.org/~ghc/7.4.1/docs/html/users_guide/kind-polymorphism-and-promotion.html#promotion</a></li>\n<li>wired: <a href=\"https://downloads.haskell.org/~ghc/8.0.1/docs/html/users_guide/glasgow_exts.html#overview-of-type-in-type\" title=\"https://downloads.haskell.org/~ghc/8.0.1/docs/html/users_guide/glasgow_exts.html#overview-of-type-in-type\">https://downloads.haskell.org/~ghc/8.0.1/docs/html/users_guide/glasgow_exts.html#overview-of-type-in-type</a></li>\n</ul>",
        "id": 193834719,
        "sender_full_name": "eddyb",
        "timestamp": 1586820500
    },
    {
        "content": "<blockquote>\n<p>&lt;eternaleye&gt; So yeah, GHC 7 had spirit mediums, but GHC 8 decided that we've all been dead all along</p>\n</blockquote>",
        "id": 193834741,
        "sender_full_name": "eddyb",
        "timestamp": 1586820526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  yeah, TypeInType is part of the move towards Dependent Haskell</p>",
        "id": 193835035,
        "sender_full_name": "centril",
        "timestamp": 1586820725
    },
    {
        "content": "<p>I'd recommend taking a look at Richard Eisenberg's thesis</p>",
        "id": 193835039,
        "sender_full_name": "centril",
        "timestamp": 1586820734
    },
    {
        "content": "<p>ahhhhh GHC is attempting to die and go to heaven</p>",
        "id": 193835046,
        "sender_full_name": "eddyb",
        "timestamp": 1586820750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> what does that mean?</p>",
        "id": 193835101,
        "sender_full_name": "centril",
        "timestamp": 1586820794
    },
    {
        "content": "<p>just trying to stretch eternaleye's joke even further :P</p>",
        "id": 193835111,
        "sender_full_name": "eddyb",
        "timestamp": 1586820807
    },
    {
        "content": "<p>ah</p>",
        "id": 193835122,
        "sender_full_name": "centril",
        "timestamp": 1586820813
    },
    {
        "content": "<p>GHC doubled down on inconsistency there instead of going with cumulative universes or whatnot</p>",
        "id": 193835190,
        "sender_full_name": "centril",
        "timestamp": 1586820856
    },
    {
        "content": "<p>inconsistency in a UX or semantics sense?</p>",
        "id": 193835208,
        "sender_full_name": "varkor",
        "timestamp": 1586820879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  \"inconsistency as a logic\" sense, given <code>Type :: Type</code></p>",
        "id": 193835236,
        "sender_full_name": "centril",
        "timestamp": 1586820920
    },
    {
        "content": "<p><a href=\"/user_uploads/4715/CyIIk3NXH3fE7xK67m2PPka9/image.png\" title=\"image.png\">eternaleye made this</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/CyIIk3NXH3fE7xK67m2PPka9/image.png\" title=\"eternaleye made this\"><img src=\"/user_uploads/4715/CyIIk3NXH3fE7xK67m2PPka9/image.png\"></a></div>",
        "id": 193839952,
        "sender_full_name": "eddyb",
        "timestamp": 1586825144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ^^</p>",
        "id": 193840096,
        "sender_full_name": "eddyb",
        "timestamp": 1586825263
    },
    {
        "content": "<p>\"What would Girard say\" :D</p>",
        "id": 193840174,
        "sender_full_name": "centril",
        "timestamp": 1586825328
    }
]