[
    {
        "content": "<p>I've never wrapped my head around <code>ast::GLOBALS</code> and <code>span::GLOBALS</code>. Why do they used <code>scoped_thread_local!</code> instead of something more obviously global, like <code>lazy_static!</code>?</p>",
        "id": 202944032,
        "sender_full_name": "njn",
        "timestamp": 1593994056
    },
    {
        "content": "<p>The code setting this stuff up in librustc_interface/utils.rs doesn't have many comments, which makes understanding it hard</p>",
        "id": 202944149,
        "sender_full_name": "njn",
        "timestamp": 1593994272
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> \"global\" here is wrt a compilation session, which is isolated to a thread (or a set of threads)</p>",
        "id": 202944475,
        "sender_full_name": "eddyb",
        "timestamp": 1593994851
    },
    {
        "content": "<p>So the name is misleading? Should perhaps be \"SessionGlobal\" or something?</p>",
        "id": 202944491,
        "sender_full_name": "njn",
        "timestamp": 1593994912
    },
    {
        "content": "<p>I know \"thread-local\" and \"global\" may seem antithetical but \"global\" can mean \"global to a thread\" just fine</p>",
        "id": 202944492,
        "sender_full_name": "eddyb",
        "timestamp": 1593994919
    },
    {
        "content": "<p>I think the name is just used because they're available without being passed around explicitly</p>",
        "id": 202944529,
        "sender_full_name": "eddyb",
        "timestamp": 1593994947
    },
    {
        "content": "<p>\"implicit context\" might make more sense although I think there's something using that terminology elsewhere</p>",
        "id": 202944536,
        "sender_full_name": "eddyb",
        "timestamp": 1593994962
    },
    {
        "content": "<p>\"global to a thread\" is nonsensical, IMO. Takes a perfectly common and well-understood word and gives it a subtly different meaning, which is asking for trouble.</p>",
        "id": 202944545,
        "sender_full_name": "njn",
        "timestamp": 1593994984
    },
    {
        "content": "<p>well it's \"global\" in the sense that it's not local to a function</p>",
        "id": 202944549,
        "sender_full_name": "eddyb",
        "timestamp": 1593995004
    },
    {
        "content": "<p>they're \"global variables\" even if thread-scoped</p>",
        "id": 202944552,
        "sender_full_name": "eddyb",
        "timestamp": 1593995015
    },
    {
        "content": "<p>Let's agree to disagree on that and move on, we could spend all day on this.</p>",
        "id": 202944566,
        "sender_full_name": "njn",
        "timestamp": 1593995042
    },
    {
        "content": "<p>Do multiple compiler sessions run in parallel in practice?</p>",
        "id": 202944597,
        "sender_full_name": "njn",
        "timestamp": 1593995050
    },
    {
        "content": "<p>meant to say earlier that it would have to be an explicit design decision to disallow them</p>",
        "id": 202944600,
        "sender_full_name": "eddyb",
        "timestamp": 1593995076
    },
    {
        "content": "<p>off the top of my head, <code>rustdoc</code> uses that to build doc tests, and it's possible <code>rls</code> might rely on it too</p>",
        "id": 202944602,
        "sender_full_name": "eddyb",
        "timestamp": 1593995095
    },
    {
        "content": "<p>\"disallow them\" -- what is \"them\"?</p>",
        "id": 202944609,
        "sender_full_name": "njn",
        "timestamp": 1593995113
    },
    {
        "content": "<p>multiple rustc instances in the same process</p>",
        "id": 202944612,
        "sender_full_name": "eddyb",
        "timestamp": 1593995128
    },
    {
        "content": "<p>ok, thanks</p>",
        "id": 202944615,
        "sender_full_name": "njn",
        "timestamp": 1593995138
    },
    {
        "content": "<p>in general, good citizenship in Rust is avoiding process-global state to not restrict the user of a library, and rustc executing isolated inside thread(s) that use thread-local state was sort of a natural fit</p>",
        "id": 202944661,
        "sender_full_name": "eddyb",
        "timestamp": 1593995216
    },
    {
        "content": "<p>that doesn't mean we can't break that in order to gain some performance, but if a thread-local is slower than a process-global <code>static</code> when mutation may be involved, that doesn't feel right</p>",
        "id": 202944726,
        "sender_full_name": "eddyb",
        "timestamp": 1593995358
    },
    {
        "content": "<p>why not?</p>",
        "id": 202944776,
        "sender_full_name": "njn",
        "timestamp": 1593995420
    },
    {
        "content": "<p>my expectation is that the cost of synchronization would outweigh the cost of thread-local accesses but it's possible that the linking model may screw with that</p>",
        "id": 202944792,
        "sender_full_name": "eddyb",
        "timestamp": 1593995482
    },
    {
        "content": "<p>for immutable data (whether computed at compile-time or <code>lazy_static!</code> w/o any locks inside), I can see why <code>static</code> would be faster, but I don't think we have anything like that</p>",
        "id": 202944852,
        "sender_full_name": "eddyb",
        "timestamp": 1593995583
    },
    {
        "content": "<p>What on earth is <a href=\"https://github.com/rust-lang/rust/blob/9e6fb538f9254884ca9f958fdce413d6c3f2016c/src/librustc_errors/json/tests.rs#L44\">this line</a> doing</p>",
        "id": 202945254,
        "sender_full_name": "njn",
        "timestamp": 1593996339
    },
    {
        "content": "<p><code>rustc_span::GLOBALS.set(&amp;globals, || rustc_span::GLOBALS.set(&amp;globals, f))</code></p>",
        "id": 202945258,
        "sender_full_name": "njn",
        "timestamp": 1593996355
    },
    {
        "content": "<p>uhhhhh</p>",
        "id": 202945306,
        "sender_full_name": "eddyb",
        "timestamp": 1593996407
    },
    {
        "content": "<p>that's just asking for <code>git blame</code> :P</p>",
        "id": 202945308,
        "sender_full_name": "eddyb",
        "timestamp": 1593996420
    },
    {
        "content": "<p>huh? <a href=\"https://github.com/rust-lang/rust/commit/c31a8754e3f3a9274759cb429aad4ae594d39e29#diff-edeef66fe728ac5916e68f32eb5f0a13R42-R48\">https://github.com/rust-lang/rust/commit/c31a8754e3f3a9274759cb429aad4ae594d39e29#diff-edeef66fe728ac5916e68f32eb5f0a13R42-R48</a></p>",
        "id": 202945312,
        "sender_full_name": "eddyb",
        "timestamp": 1593996466
    },
    {
        "content": "<p>I was expecting to see a rename of one of them</p>",
        "id": 202945315,
        "sender_full_name": "eddyb",
        "timestamp": 1593996472
    },
    {
        "content": "<p>looks like it was copied from <code>src/libsyntax/lib.rs</code> at least</p>",
        "id": 202945359,
        "sender_full_name": "eddyb",
        "timestamp": 1593996522
    },
    {
        "content": "<p>okay yeah <a href=\"https://github.com/rust-lang/rust/blob/c31a8754e3f3a9274759cb429aad4ae594d39e29/src/libsyntax/lib.rs#L61-L62\">https://github.com/rust-lang/rust/blob/c31a8754e3f3a9274759cb429aad4ae594d39e29/src/libsyntax/lib.rs#L61-L62</a></p>",
        "id": 202945365,
        "sender_full_name": "eddyb",
        "timestamp": 1593996553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> so yeah it's a mistake, should just have one <code>syntax_pos::GLOBALS.set(...)</code></p>",
        "id": 202945370,
        "sender_full_name": "eddyb",
        "timestamp": 1593996577
    },
    {
        "content": "<p>the current line should say:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rustc_span</span>::<span class=\"n\">GLOBALS</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">globals</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 202945411,
        "sender_full_name": "eddyb",
        "timestamp": 1593996612
    },
    {
        "content": "<p>I think somebody got confused by the fact that <code>rustc_span::GLOBALS</code> is nested within <code>rustc_ast::GLOBALS</code>, and so there are other lines that do look a bit like that, but which refer to two different <code>GLOBALS</code></p>",
        "id": 202945593,
        "sender_full_name": "njn",
        "timestamp": 1593997034
    },
    {
        "content": "<p>/me is gonna fix that, too</p>",
        "id": 202945595,
        "sender_full_name": "njn",
        "timestamp": 1593997043
    },
    {
        "content": "<p>/me files <a href=\"https://github.com/rust-lang/rust/pull/74079\">https://github.com/rust-lang/rust/pull/74079</a></p>",
        "id": 202946549,
        "sender_full_name": "njn",
        "timestamp": 1593998852
    },
    {
        "content": "<p>Hmm, <code>./x.py test</code> does not run the tests in <code>librustc_span/symbol/tests.rs</code>, it seems</p>",
        "id": 202950521,
        "sender_full_name": "njn",
        "timestamp": 1594005816
    },
    {
        "content": "<p>Why does the compiler have both the (session-specific) <code>Globals</code> and also <code>ImplicitCtxt</code>? Seems like they are similar things</p>",
        "id": 202953846,
        "sender_full_name": "njn",
        "timestamp": 1594011878
    },
    {
        "content": "<p>but <code>Globals</code> can only be accessed via TLS, but <code>ImplicitCtxt</code> is a way of getting the <code>GlobalCtxt</code> via TLS, but the <code>GlobalCtxt</code> can also be gotten by passing it around?</p>",
        "id": 202953932,
        "sender_full_name": "njn",
        "timestamp": 1594012059
    },
    {
        "content": "<p>the amount of plumbing around this stuff and all the other top-level compiler stuff... yikes</p>",
        "id": 202954274,
        "sender_full_name": "njn",
        "timestamp": 1594012609
    },
    {
        "content": "<p>all these various <code>enter</code> functions</p>",
        "id": 202954350,
        "sender_full_name": "njn",
        "timestamp": 1594012714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> this used to be really simple but then people started copying the one thing I did and it devolved into this, lol</p>",
        "id": 202955898,
        "sender_full_name": "eddyb",
        "timestamp": 1594015318
    },
    {
        "content": "<p>IIRC the important part is that <code>ImplicitCtxt</code> carries more information than the <code>TyCtxt</code>, but maybe it doesn't anymore?</p>",
        "id": 202955962,
        "sender_full_name": "eddyb",
        "timestamp": 1594015400
    },
    {
        "content": "<p>I thought it was important to parallel queries</p>",
        "id": 202955968,
        "sender_full_name": "eddyb",
        "timestamp": 1594015414
    },
    {
        "content": "<p>It has a little bit extra, compared to <code>TyCtxt</code></p>",
        "id": 202955977,
        "sender_full_name": "njn",
        "timestamp": 1594015433
    },
    {
        "content": "<p>that extra is why it exists as opposed to just being \"<code>TyCtxt</code> in TLS for the odd thing that can't get it any other way\"</p>",
        "id": 202956024,
        "sender_full_name": "eddyb",
        "timestamp": 1594015461
    },
    {
        "content": "<p>there are so many layers of closure wrapping in this startup code I can't even work out a notation to write them down</p>",
        "id": 202957334,
        "sender_full_name": "njn",
        "timestamp": 1594017533
    },
    {
        "content": "<p>AFAIK the other reason for having multiple sessions in one process would be parallel compilation.</p>",
        "id": 202958279,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594018731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> my understanding is that parallel compilation occurs within a Session</p>",
        "id": 202959150,
        "sender_full_name": "njn",
        "timestamp": 1594019730
    },
    {
        "content": "<p>e.g. a single session might have multiple threads</p>",
        "id": 202959159,
        "sender_full_name": "njn",
        "timestamp": 1594019738
    },
    {
        "content": "<p>Ah, interesting, I didn't realize that.</p>",
        "id": 202959671,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594020282
    },
    {
        "content": "<p>You might have two sessions running at the same time, one for normal compilation, one for rustdocs</p>",
        "id": 202964360,
        "sender_full_name": "njn",
        "timestamp": 1594024045
    },
    {
        "content": "<p>I wonder if it's possible to keep all data from those globals in a <code>ParseSess</code>, or <code>Session</code>, or some new session type and provide TLS-based access to the <em>whole session</em> type for exceptional cases like <code>Debug</code> impls, etc.</p>",
        "id": 203028236,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1594062258
    },
    {
        "content": "<p>Something like <code>ImplicitCtxt</code> but for early compilation.</p>",
        "id": 203028252,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1594062269
    },
    {
        "content": "<p>Without a sensible and documented design here things gradually descent into chaos with PRs like <a href=\"https://github.com/rust-lang/rust/pull/72618\">https://github.com/rust-lang/rust/pull/72618</a>, which do bring some specific improvements but bring equal or perhaps larger amount of harm to the general  compiler architecture health (cc <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> ).</p>",
        "id": 203028546,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1594062449
    },
    {
        "content": "<p>I'm curious, is the use of TLS here a performance win or a performance loss?</p>",
        "id": 203030650,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594063729
    },
    {
        "content": "<p>Hypothetically, would passing it around as a parameter help or hurt?</p>",
        "id": 203030676,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1594063751
    },
    {
        "content": "<p>purely from a performance POV, not taking developer ergonomics into account?</p>",
        "id": 203031957,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594064530
    },
    {
        "content": "<p>~A performance loss.<br>\nHere's a specific example of moving the current edition from globals to <code>ParseSess</code> - <a href=\"https://github.com/rust-lang/rust/pull/59742\">https://github.com/rust-lang/rust/pull/59742</a>.</p>",
        "id": 203031993,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1594064552
    },
    {
        "content": "<p>The problem is that it's sometime impossible or really impractical to carry the session around as an argument (such cases are not common though).</p>",
        "id": 203032082,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1594064624
    },
    {
        "content": "<p>A nice thing is that things like <code>ParseSess</code> are already carried around in majority of code (you need it to report compiler errors, for example), so you don't even need to do any extra work.</p>",
        "id": 203032326,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1594064766
    },
    {
        "content": "<p>to be clear, the <em>only</em> usecases I had in mind for TLS <code>TyCtxt</code> were <code>fmt::Debug</code>/<code>fmt::Display</code> impls and <code>bug!(...)</code> / <code>span_bug!(...)</code> ICEs (but it's optional there, and just improves the output quality slightly. if it's even a thing anymore)</p>",
        "id": 203033622,
        "sender_full_name": "eddyb",
        "timestamp": 1594065549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <a href=\"https://github.com/rust-lang/rust/issues/59472\">#59472</a> is something I was looking at yesterday. It seems like that setting of the source map could be done as part of the standard Globals initialization, just by moving things around a bit. I'm going to try to do that now</p>",
        "id": 203033786,
        "sender_full_name": "njn",
        "timestamp": 1594065620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> so it was mostly intended for cases in which you more or less can't pass contexts around due to (libstd) APIs, but there were some deviations from that sadly</p>",
        "id": 203033827,
        "sender_full_name": "eddyb",
        "timestamp": 1594065638
    },
    {
        "content": "<p>IIRC the way I did <code>fmt::Debug</code> impls when the type is defined in a crate which can't access the TLS content directly is have a TLS var that holds a <code>fn</code> pointer for the <code>fmt::Debug</code> implementation. this was before any <code>GLOBALS</code> variables were added, although I think we might've had the string interner in TLS since forever</p>",
        "id": 203033975,
        "sender_full_name": "eddyb",
        "timestamp": 1594065718
    },
    {
        "content": "<p>maybe we can scope access to the TLS vars that refer to contexts in such a way that only <code>fmt::Debug</code> type stuff has access to it</p>",
        "id": 203034168,
        "sender_full_name": "eddyb",
        "timestamp": 1594065791
    },
    {
        "content": "<p>sadly due to HRTB lifetime interactions with associated types, I'm not sure it's possible to make a generic function that handles any type that implements <code>ty::Print</code>, which would probably be the easy way to hide the TLS <code>TyCtxt</code></p>",
        "id": 203034466,
        "sender_full_name": "eddyb",
        "timestamp": 1594065930
    },
    {
        "content": "<p><code>Decode</code> impls are a similar case</p>",
        "id": 203035061,
        "sender_full_name": "njn",
        "timestamp": 1594066256
    },
    {
        "content": "<p>Here's my attempt to capture all the layers of wrapping within<code>run_compiler</code>: <a href=\"https://paste.mozilla.org/gJeRK82j/raw\">https://paste.mozilla.org/gJeRK82j/raw</a></p>",
        "id": 203036786,
        "sender_full_name": "njn",
        "timestamp": 1594067247
    },
    {
        "content": "<p>we call <code>with_globals</code>, then create a <code>Compiler</code> and <code>Session</code>, then set the <code>source_map</code>. Seems like that could be done more nicely</p>",
        "id": 203036877,
        "sender_full_name": "njn",
        "timestamp": 1594067294
    },
    {
        "content": "<p>ugh we should get around to implementing our own serialization traits already so we can stop having to do unsound specialization hacks</p>",
        "id": 203037503,
        "sender_full_name": "eddyb",
        "timestamp": 1594067677
    },
    {
        "content": "<p>TLS shouldn't be needed at all, either way, for deserialization</p>",
        "id": 203037554,
        "sender_full_name": "eddyb",
        "timestamp": 1594067706
    },
    {
        "content": "<p>@eddyb: what about symbol interning?</p>",
        "id": 203037796,
        "sender_full_name": "njn",
        "timestamp": 1594067833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <a href=\"https://github.com/rust-lang/rust/pull/73851\">https://github.com/rust-lang/rust/pull/73851</a> gets rid of most of the specialization for serialization</p>",
        "id": 203039029,
        "sender_full_name": "simulacrum",
        "timestamp": 1594068530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> we can still require that <code>Symbol</code> is decoded with a contextful decoder, should be fine for most situations</p>",
        "id": 203040060,
        "sender_full_name": "eddyb",
        "timestamp": 1594069210
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> thanks</p>",
        "id": 203040108,
        "sender_full_name": "eddyb",
        "timestamp": 1594069250
    },
    {
        "content": "<p>oh it actually introduces new derives</p>",
        "id": 203040584,
        "sender_full_name": "eddyb",
        "timestamp": 1594069531
    },
    {
        "content": "<p>Could <a href=\"https://github.com/rust-lang/rust/blob/0c04344d86f9598f20d9ec86fe87ea2a5d6ff8e6/src/librustc_interface/interface.rs#L190-L196\">this code</a> just be written as:</p>\n<div class=\"codehilite\"><pre><span></span><code>let r = f(&amp;compiler);\ncompiler.sess.finish_diagnostics(registry);\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 203040626,
        "sender_full_name": "njn",
        "timestamp": 1594069554
    },
    {
        "content": "<p>whenever you see that pattern, it's almost always because of panics</p>",
        "id": 203040728,
        "sender_full_name": "eddyb",
        "timestamp": 1594069610
    },
    {
        "content": "<p>based on the name <code>_sess_abort_error</code> I'd say  it needs to be like that</p>",
        "id": 203040776,
        "sender_full_name": "eddyb",
        "timestamp": 1594069643
    },
    {
        "content": "<p>how are panics relevant?</p>",
        "id": 203040787,
        "sender_full_name": "njn",
        "timestamp": 1594069651
    },
    {
        "content": "<p>fatal errors and ICEs are panics</p>",
        "id": 203040810,
        "sender_full_name": "eddyb",
        "timestamp": 1594069669
    },
    {
        "content": "<p>does it ensure that finish_diagnostics is run on a panic?</p>",
        "id": 203040869,
        "sender_full_name": "njn",
        "timestamp": 1594069690
    },
    {
        "content": "<p>there's not really any other way to stop compilation (short of <code>process::exit</code>)</p>",
        "id": 203040879,
        "sender_full_name": "eddyb",
        "timestamp": 1594069701
    },
    {
        "content": "<p>yes, that's the idea</p>",
        "id": 203040884,
        "sender_full_name": "simulacrum",
        "timestamp": 1594069704
    },
    {
        "content": "<p>yeah that's what I meant earlier, \"drop guards\" like that are almost always for panics</p>",
        "id": 203040910,
        "sender_full_name": "eddyb",
        "timestamp": 1594069725
    },
    {
        "content": "<p>ok, thanks</p>",
        "id": 203040916,
        "sender_full_name": "njn",
        "timestamp": 1594069731
    },
    {
        "content": "<p>hmm, the source_map isn't set up for each rayon thread in a parallel rustc</p>",
        "id": 203050100,
        "sender_full_name": "njn",
        "timestamp": 1594075873
    },
    {
        "content": "<p>Ah, this is such spaghetti. I want to simplify it but I can't find the first loose piece to start tugging on</p>",
        "id": 203050295,
        "sender_full_name": "njn",
        "timestamp": 1594076039
    },
    {
        "content": "<p>The fact that rustdoc calls into all this startup stuff in a different way to the main compiler is a real complication</p>",
        "id": 203050362,
        "sender_full_name": "njn",
        "timestamp": 1594076065
    },
    {
        "content": "<p>Hmm, why do we spin up a separate thread for compilation in the non-parallel rustc?</p>",
        "id": 203052424,
        "sender_full_name": "njn",
        "timestamp": 1594077637
    },
    {
        "content": "<p>IIRC, the lack of control over the stack size in the main thread</p>",
        "id": 203054768,
        "sender_full_name": "eddyb",
        "timestamp": 1594079866
    },
    {
        "content": "<p>What's wrong with the default size?</p>",
        "id": 203057284,
        "sender_full_name": "njn",
        "timestamp": 1594082573
    },
    {
        "content": "<p>/me wonders the difference between <code>scoped_thread</code> and a more normal thread spawning</p>",
        "id": 203061300,
        "sender_full_name": "njn",
        "timestamp": 1594087986
    },
    {
        "content": "<p>hmm, no <code>'static</code> bounds</p>",
        "id": 203063114,
        "sender_full_name": "njn",
        "timestamp": 1594091097
    },
    {
        "content": "<p>hmm, maybe that's what the \"scoped\" means... it's known to be joined to immediately after spawning</p>",
        "id": 203063246,
        "sender_full_name": "njn",
        "timestamp": 1594091310
    },
    {
        "content": "<p>Great fodder for a comment, methinks</p>",
        "id": 203063254,
        "sender_full_name": "njn",
        "timestamp": 1594091326
    },
    {
        "content": "<p>With stacker, we should be able to remove that thread</p>",
        "id": 203073831,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1594107116
    },
    {
        "content": "<p>What is stacker?</p>",
        "id": 203082400,
        "sender_full_name": "njn",
        "timestamp": 1594113830
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/stacker\">https://github.com/rust-lang/stacker</a>, presumably</p>",
        "id": 203082484,
        "sender_full_name": "njn",
        "timestamp": 1594113885
    },
    {
        "content": "<p>Yes</p>",
        "id": 203083829,
        "sender_full_name": "bjorn3",
        "timestamp": 1594114967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> hmm for some reason I thought the main thread would make that hard but I guess not necessarily</p>",
        "id": 203140688,
        "sender_full_name": "eddyb",
        "timestamp": 1594146424
    },
    {
        "content": "<p>so we replace <code>thread::spawn</code> by <code>catch_unwind</code>?</p>",
        "id": 203140704,
        "sender_full_name": "eddyb",
        "timestamp": 1594146435
    },
    {
        "content": "<p>(well, scoped threads because threads pools etc.)</p>",
        "id": 203140724,
        "sender_full_name": "eddyb",
        "timestamp": 1594146447
    },
    {
        "content": "<p>I wonder if there are soundness issues regarding things that don't have lifetime parameters but can't be sent between threads, I remember one aspect of having \"subordinate\" threads meant that we could own something in the parent thread, and the child thread could never UAF it</p>",
        "id": 203140882,
        "sender_full_name": "eddyb",
        "timestamp": 1594146520
    },
    {
        "content": "<p>whereas with <code>thread_local!</code> you can't guarantee that</p>",
        "id": 203140901,
        "sender_full_name": "eddyb",
        "timestamp": 1594146529
    },
    {
        "content": "<p>(because you could have a different <code>thread_local!</code> that has a destructor with a value that would be UAF if it's ran after the destructor of the <code>thread_local!</code> that owns the actual data)</p>",
        "id": 203141024,
        "sender_full_name": "eddyb",
        "timestamp": 1594146600
    },
    {
        "content": "<p>You could use <code>scoped_thread_local!</code> combined with requiring a <code>Send</code> bound for the closure that would otherwise run in a new thread.</p>",
        "id": 203141117,
        "sender_full_name": "bjorn3",
        "timestamp": 1594146639
    },
    {
        "content": "<p>no, you can't, for this situation</p>",
        "id": 203141141,
        "sender_full_name": "eddyb",
        "timestamp": 1594146651
    },
    {
        "content": "<p>this is about something like using a non-Sync/Send wrapper around a <code>&amp;'static str</code> to represent an interned string</p>",
        "id": 203141225,
        "sender_full_name": "eddyb",
        "timestamp": 1594146698
    },
    {
        "content": "<p>where there is no connection between the owner of the data and users of the values</p>",
        "id": 203141312,
        "sender_full_name": "eddyb",
        "timestamp": 1594146724
    },
    {
        "content": "<p>That is why the <code>Send</code> bound for the closure is necessary despite not running in a different thread.</p>",
        "id": 203141345,
        "sender_full_name": "bjorn3",
        "timestamp": 1594146739
    },
    {
        "content": "<p>one \"fun\" way in which you can handle this is have the <code>rustc</code> executable start <code>rustc_driver</code> in a specific way that leaks an object (basically creating a <code>&amp;'static mut Foo</code>) and anything that uses multiple threads would take a different path to spawning the compiler threads</p>",
        "id": 203141444,
        "sender_full_name": "eddyb",
        "timestamp": 1594146796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span> the problem is that there is nothing preventing you from sticking this <code>BadInternedString</code> into a thread-local, which will outlive the backing storage</p>",
        "id": 203141556,
        "sender_full_name": "eddyb",
        "timestamp": 1594146850
    },
    {
        "content": "<p>I can write an example if you want?</p>",
        "id": 203141584,
        "sender_full_name": "eddyb",
        "timestamp": 1594146868
    },
    {
        "content": "<p>I get it.</p>",
        "id": 203141606,
        "sender_full_name": "bjorn3",
        "timestamp": 1594146879
    },
    {
        "content": "<p>this is basically a sketchy pattern that only is sound (maybe not even then, not sure0 if you have a separate thread</p>",
        "id": 203141627,
        "sender_full_name": "eddyb",
        "timestamp": 1594146892
    },
    {
        "content": "<p>because then there is no way to escape such a value outside of that thread, and you have a point at which you know it's all dead</p>",
        "id": 203141661,
        "sender_full_name": "eddyb",
        "timestamp": 1594146909
    },
    {
        "content": "<p>you could imagine using threads as \"global arenas\" where you don't have to use lifetimes but you also can't pass data between threads</p>",
        "id": 203141779,
        "sender_full_name": "eddyb",
        "timestamp": 1594146970
    },
    {
        "content": "<p>but anyway it's possible we don't do anything like this anymore (if we ever did? I think we did)</p>",
        "id": 203141801,
        "sender_full_name": "eddyb",
        "timestamp": 1594146983
    },
    {
        "content": "<p>I just don't know how to properly check for it</p>",
        "id": 203141823,
        "sender_full_name": "eddyb",
        "timestamp": 1594146999
    },
    {
        "content": "<p>presumably look for non-<code>Sync</code>/<code>Send</code> wrappers around pointers/references?</p>",
        "id": 203141841,
        "sender_full_name": "eddyb",
        "timestamp": 1594147016
    },
    {
        "content": "<p>that don't have lifetime parameters</p>",
        "id": 203141855,
        "sender_full_name": "eddyb",
        "timestamp": 1594147026
    },
    {
        "content": "<p>so they're effectively \"<code>'static</code> within a thread\"</p>",
        "id": 203141876,
        "sender_full_name": "eddyb",
        "timestamp": 1594147039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Thread-local.20.60GLOBALS.60/near/203141801\">said</a>:</p>\n<blockquote>\n<p>but anyway it's possible we don't do anything like this anymore (if we ever did? I think we did)</p>\n</blockquote>\n<p>I you mean <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/symbol/struct.SymbolStr.html\"><code>SymbolStr</code></a>.</p>",
        "id": 203142018,
        "sender_full_name": "bjorn3",
        "timestamp": 1594147109
    },
    {
        "content": "<p>lol <a href=\"https://github.com/rust-lang/rust/blob/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src/librustc_span/symbol.rs#L1401-L1402\">https://github.com/rust-lang/rust/blob/e1beee4992ad4b235fc700bf7af1ee86f894ea53/src/librustc_span/symbol.rs#L1401-L1402</a></p>",
        "id": 203142145,
        "sender_full_name": "eddyb",
        "timestamp": 1594147195
    },
    {
        "content": "<p>anyway yeah I should've just looked this up, seems like this is the only instance</p>",
        "id": 203142224,
        "sender_full_name": "eddyb",
        "timestamp": 1594147219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> so if you want to get rid of a separate thread in some cases, you have to make sure that one of two things happen:</p>\n<ol>\n<li>a separate thread (which you'd have anyway if you were running multiple rustc threads, I think?) owns the interner</li>\n<li>the interner lives forever (only really doable for the <code>rustc</code> executable. <code>Box::leak</code> is an easy way to do that, at least)</li>\n</ol>",
        "id": 203142446,
        "sender_full_name": "eddyb",
        "timestamp": 1594147334
    },
    {
        "content": "<p>@eddyb: thanks for the info, I don't think it's worth it, the potential clean-up here isn't that big.</p>",
        "id": 203211219,
        "sender_full_name": "njn",
        "timestamp": 1594160934
    },
    {
        "content": "<p>The unsafety of that interner setup has always bothered me. It's part of the reason I spent some time cleaning up the symbol stuff, greatly reducing the capabitilies and use of <code>SymbolStr</code>.</p>",
        "id": 203211255,
        "sender_full_name": "njn",
        "timestamp": 1594160975
    },
    {
        "content": "<p>Didn't manage to get rid of it completely, alas.</p>",
        "id": 203211265,
        "sender_full_name": "njn",
        "timestamp": 1594160983
    },
    {
        "content": "<p>It's possible to eliminate it in theory, and just use <code>Symbol::with()</code> every time we need access to the chars themselves. But in practice it's a huge pain, introducing tons of annoying closures.</p>",
        "id": 203211484,
        "sender_full_name": "njn",
        "timestamp": 1594161124
    }
]