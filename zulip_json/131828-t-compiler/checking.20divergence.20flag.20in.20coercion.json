[
    {
        "content": "<p>there's this comment in <a href=\"https://github.com/rust-lang/rust/blob/a51e004e1bf7f9bba151dd9104a217c1ace6a0a2/src/librustc_typeck/check/demand.rs#L114-L116\" title=\"https://github.com/rust-lang/rust/blob/a51e004e1bf7f9bba151dd9104a217c1ace6a0a2/src/librustc_typeck/check/demand.rs#L114-L116\">demand.rs</a>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// N.B., this code relies on `self.diverges` to be accurate. In</span>\n<span class=\"w\">    </span><span class=\"c1\">// particular, assignments to `!` will be permitted if the</span>\n<span class=\"w\">    </span><span class=\"c1\">// diverges flag is currently &quot;always&quot;.</span>\n</code></pre></div>\n\n\n<p>is that actually still true? I couldn't find any reference to <code>diverges</code> in the coercion code, but maybe I'm just missing it</p>",
        "id": 196906217,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588950151
    },
    {
        "content": "<p>hmm</p>",
        "id": 196907188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588950566
    },
    {
        "content": "<p>I remember adding that flag</p>",
        "id": 196907195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588950570
    },
    {
        "content": "<p>but I could imagine it became outdated</p>",
        "id": 196907208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588950574
    },
    {
        "content": "<p>I feel like we may have opted against the approach we were trying there</p>",
        "id": 196907363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588950631
    },
    {
        "content": "<p>sigh, the long and tortured history of <code>!</code></p>",
        "id": 196907376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588950636
    },
    {
        "content": "<p>I mean, the flag is being checked elsewhere -- <code>check_block_with_expected</code> handles it. So maybe that's where those cases are handled now</p>",
        "id": 196911577,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588952435
    },
    {
        "content": "<p>hmm</p>",
        "id": 196911601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952448
    },
    {
        "content": "<p>that sounds right</p>",
        "id": 196911622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952457
    },
    {
        "content": "<p>sorry, I've not had a sec to grep the codebase myself</p>",
        "id": 196911644,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952469
    },
    {
        "content": "<p>I do remember there being some logic like \"if the block diverges, then we ignore the type of the tail expression, but else we don't\"</p>",
        "id": 196911707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952500
    },
    {
        "content": "<p>in order to accommodate</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"o\">!</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n\n<p>and not give type errors</p>",
        "id": 196911732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952513
    },
    {
        "content": "<p>or at least, if the block diverges and has an implicit <code>()</code> tail</p>",
        "id": 196911746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952520
    },
    {
        "content": "<p>yeah, that's in <code>check_block_with_expected</code></p>",
        "id": 196911831,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588952543
    },
    {
        "content": "<p>I <em>believe</em> this is what the comment was referring to</p>",
        "id": 196911856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952557
    },
    {
        "content": "<p>I think we <em>used</em> to maybe have more general logic there</p>",
        "id": 196911872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952565
    },
    {
        "content": "<p>I was just worried I was missing some edge case ;)</p>",
        "id": 196911885,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588952571
    },
    {
        "content": "<p>er, sorry</p>",
        "id": 196911889,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952573
    },
    {
        "content": "<p>I believe the comment may have been referring to some <em>older</em> logic that I stripped down</p>",
        "id": 196911914,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952584
    },
    {
        "content": "<p>I could do a bit of digging to find the issues where we dug into this... but I won't unels you really need it</p>",
        "id": 196911950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1588952606
    },
    {
        "content": "<p>I think that won't be necessary :)</p>",
        "id": 196912096,
        "sender_full_name": "Florian Diebold",
        "timestamp": 1588952653
    }
]