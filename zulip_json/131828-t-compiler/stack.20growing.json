[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> btw I have thought of a way to have virtually unlimited stacks in a fairly portable manner that also properly supports stack guards.</p>",
        "id": 137058912,
        "sender_full_name": "nagisa",
        "timestamp": 1541173886
    },
    {
        "content": "<p>on any plaform that has a virtual/physical memory distinction, which is, I believe, everything we care about</p>",
        "id": 137059022,
        "sender_full_name": "nagisa",
        "timestamp": 1541173908
    },
    {
        "content": "<p>Basically <code>mmap</code> without commiting a huge area of address space and then commit pages explicitly on specifically annotated points.</p>",
        "id": 137059321,
        "sender_full_name": "nagisa",
        "timestamp": 1541173972
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span></p>",
        "id": 137059346,
        "sender_full_name": "nagisa",
        "timestamp": 1541173977
    },
    {
        "content": "<p>If windows did overcommit like posixes, then the explicit points of commit would not be necessary even</p>",
        "id": 137059548,
        "sender_full_name": "nagisa",
        "timestamp": 1541174032
    },
    {
        "content": "<p>I was planning to develop a crate around that concept as soon as I was done with <code>optimize</code> attribute PR, but I got stuck with testing <code>optimize</code> and now I have a headache too <span class=\"emoji emoji-1f641\" title=\"frown\">:frown:</span></p>",
        "id": 137060420,
        "sender_full_name": "nagisa",
        "timestamp": 1541174237
    },
    {
        "content": "<p>I have partially understood what you are saying, but the last time I came in contact with mmap and paging was in uni. I can start reading up on it, but it'll take me a while to get up to speed. If you have it in the cache, I'd rather wait for your concept crate and see how to integrate that. Now that we have an entry point in librustc, we can replace the implementation at any time</p>",
        "id": 137068294,
        "sender_full_name": "oli",
        "timestamp": 1541178649
    },
    {
        "content": "<p>Indeed. I want to make a prototype myself anyway.</p>",
        "id": 137068486,
        "sender_full_name": "nagisa",
        "timestamp": 1541178868
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> that still requires -- iiuc -- some sort of \"maximum size\", right?</p>",
        "id": 137073109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183123
    },
    {
        "content": "<p>I remember, at a company I worked at, somebody added a buffer that would reallocate automatically on overflow by intercepting the segv handler</p>",
        "id": 137073140,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183152
    },
    {
        "content": "<p>this worked great until we ran into problems where we had to relocate the base address</p>",
        "id": 137073195,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183170
    },
    {
        "content": "<blockquote>\n<p>I remember, at a company I worked at, somebody added a buffer that would reallocate automatically on overflow by intercepting the segv handler</p>\n</blockquote>\n<p>that is, it would allocate the page once you overflowed</p>",
        "id": 137073204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183185
    },
    {
        "content": "<p>(by putting a guard page at the end)</p>",
        "id": 137073209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183192
    },
    {
        "content": "<p>these days, overcommit will kind of do it for you...</p>",
        "id": 137073222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183212
    },
    {
        "content": "<p>anyway maybe I didn't really understand what you are saying</p>",
        "id": 137073245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> </p>\n<blockquote>\n<p>Basically <code>mmap</code> without commiting a huge area of address space and then commit pages explicitly on specifically annotated points.</p>\n</blockquote>\n<p>What do you mean by committing, do you mean write something on the page so that system is bound to allocate you the memory as linux will lazily allocate memory ?</p>",
        "id": 137092840,
        "sender_full_name": "blitzerr",
        "timestamp": 1541206404
    },
    {
        "content": "<p>Yes, that would still require a maximum size of some sort… And, indeed, since we must support 32-bit systems, we’d have to be careful about virtual address space exhaustion… hmm.</p>",
        "id": 137100129,
        "sender_full_name": "nagisa",
        "timestamp": 1541221560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> Windows does not support overcommit, so it is necessary to \"reserve\" the virtual memory and \"commit\" it in two separate calls of <code>VirtualAllocEx</code>. \"commit\" here refers to reserving actual physical space in RAM and the page file.</p>",
        "id": 137100228,
        "sender_full_name": "nagisa",
        "timestamp": 1541221767
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I did not intend to require use of a sigv signal handler (but I would not prohibit it, as long as <code>mmap</code> is signal safe) and I specifically want to avoid reallocation by making users to allocate all of the necessary virtual address space up-front.</p>",
        "id": 137100277,
        "sender_full_name": "nagisa",
        "timestamp": 1541221894
    },
    {
        "content": "<p>At first I wasn’t thinking of 32-bit systems, and figured that something like 128GB of stack limit ought to be enough to everyone <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 137100320,
        "sender_full_name": "nagisa",
        "timestamp": 1541221977
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> that the 'main thread' linux stack already operates in this way, right? -- though the compiler runs on a thread, of course.</p>",
        "id": 147307417,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541691594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> that’s right.</p>",
        "id": 147307639,
        "sender_full_name": "nagisa",
        "timestamp": 1541691733
    },
    {
        "content": "<p>Seems like a good solution for 64 bit processes (I want to do something like that for serialization buffers too some time)</p>",
        "id": 147307677,
        "sender_full_name": "mw",
        "timestamp": 1541691775
    },
    {
        "content": "<p>It might be sensible to implement some sort of hybrid between what stacker does and what I’m suggesting, so that we would not use too much of virtual memory on 32-bit while also virtually never hitting the turns-out-pretty-expensive stacker code paths on 64-bit targets.</p>",
        "id": 147307711,
        "sender_full_name": "nagisa",
        "timestamp": 1541691813
    },
    {
        "content": "<p>we could also just make 32 bit rustc just use stacker?</p>",
        "id": 147307787,
        "sender_full_name": "mw",
        "timestamp": 1541691863
    },
    {
        "content": "<p>Sure, but implementing a common API would still be desirable.</p>",
        "id": 147307823,
        "sender_full_name": "nagisa",
        "timestamp": 1541691904
    },
    {
        "content": "<p>but yeah, if there's a good hybrid solution, that would be even better</p>",
        "id": 147307837,
        "sender_full_name": "mw",
        "timestamp": 1541691918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> well, one difference that comes to mind is that \"growing\" the stack would still be manual</p>",
        "id": 147309336,
        "sender_full_name": "nagisa",
        "timestamp": 1541693087
    },
    {
        "content": "<p>from the API standpoint</p>",
        "id": 147309340,
        "sender_full_name": "nagisa",
        "timestamp": 1541693090
    },
    {
        "content": "<p>even if on Linux that is not necessary it may be necessary on the other targets.</p>",
        "id": 147309345,
        "sender_full_name": "nagisa",
        "timestamp": 1541693100
    },
    {
        "content": "<p>(such as Windows)</p>",
        "id": 147309359,
        "sender_full_name": "nagisa",
        "timestamp": 1541693109
    },
    {
        "content": "<p>And that conveniently also allows easily integrating hybrid approaches as well.</p>",
        "id": 147309375,
        "sender_full_name": "nagisa",
        "timestamp": 1541693133
    },
    {
        "content": "<p>ah <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> so the idea would be that we \"reserve\" space for things to grow \"in place\" but not actually <em>allocate</em> that space until later? (essentially doing \"overcommitment\" of a sort?)</p>",
        "id": 147310199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541693762
    },
    {
        "content": "<blockquote>\n<p>the turns-out-pretty-expensive stacker code paths</p>\n</blockquote>",
        "id": 147315452,
        "sender_full_name": "oli",
        "timestamp": 1541698395
    },
    {
        "content": "<p>I'm working on figuring this out</p>",
        "id": 147315458,
        "sender_full_name": "oli",
        "timestamp": 1541698402
    },
    {
        "content": "<p>it might not be as bad as projected in the perf run, as that was using the most naive algorithm available</p>",
        "id": 147315523,
        "sender_full_name": "oli",
        "timestamp": 1541698444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> yes, my plan was to allocate a dozen gigs of virtual memory on 64-bit systems and only back it with physical pages on demand.</p>",
        "id": 147364917,
        "sender_full_name": "nagisa",
        "timestamp": 1541761855
    },
    {
        "content": "<p>making the stack… ahem, virtually unlimited</p>",
        "id": 147364926,
        "sender_full_name": "nagisa",
        "timestamp": 1541761884
    },
    {
        "content": "<p>doesn’t work on 32-bit of course, as there ain’t that much virtual memory there</p>",
        "id": 147364934,
        "sender_full_name": "nagisa",
        "timestamp": 1541761913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> the first thing I’m doing right now is making a cross-platform stack manipulation library that could replace the stacker’s <code>arch</code> module</p>",
        "id": 147443791,
        "sender_full_name": "nagisa",
        "timestamp": 1541875748
    },
    {
        "content": "<p>this should end up unblocking at least the \"only x86\" part of the problem that stacker has.</p>",
        "id": 147443796,
        "sender_full_name": "nagisa",
        "timestamp": 1541875775
    },
    {
        "content": "<p>I had hoped to circumvent this issue altoghether by not needing to switch stacks at all, ever, but that is unfeasible (1) on 32-bit targets as discussed above; and (2) there’s nothing that can avoid switching stacks while also integrating nicely with the std’s thread and everything that is built on it.</p>",
        "id": 147443856,
        "sender_full_name": "nagisa",
        "timestamp": 1541875884
    },
    {
        "content": "<p>(2) is because you cannot simply provide your own stack buffer when creating a thread.</p>",
        "id": 147443912,
        "sender_full_name": "nagisa",
        "timestamp": 1541876002
    },
    {
        "content": "<p>Is 2 fixable by changing the internal thread API?</p>",
        "id": 147470579,
        "sender_full_name": "oli",
        "timestamp": 1541928461
    },
    {
        "content": "<p>Maybe? we use rayon though, which has another layer of API over the std's Thread.</p>",
        "id": 147471018,
        "sender_full_name": "nagisa",
        "timestamp": 1541929404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> which is the PR that uses stacker?</p>",
        "id": 147540820,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542045343
    },
    {
        "content": "<blockquote>\n<p>Maybe? we use rayon though, which has another layer of API over the std's Thread.</p>\n</blockquote>\n<p>we need to revisit this</p>",
        "id": 147540895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542045380
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/55617\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55617\">https://github.com/rust-lang/rust/pull/55617</a> is the PR, but I need to update it to use the less-stack-thrashing PR I made to stacker and rerun perf</p>",
        "id": 147576839,
        "sender_full_name": "oli",
        "timestamp": 1542097078
    },
    {
        "content": "<p>Where can I learn more about the <em>why</em> behind all this?</p>",
        "id": 147789722,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542334264
    },
    {
        "content": "<p>What kind of <em>why</em> are you interested in? I made a list of issues in the PR that are fixed by it. Or are you wondering how those issues came to be?</p>",
        "id": 147804042,
        "sender_full_name": "oli",
        "timestamp": 1542357760
    },
    {
        "content": "<blockquote>\n<p>I made a list of issues in the PR that are fixed by it. </p>\n</blockquote>\n<p>That's a good start for me, thank you</p>",
        "id": 147820010,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1542378672
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> so you know why your fix didn’t help?</p>",
        "id": 150929265,
        "sender_full_name": "nagisa",
        "timestamp": 1544018112
    },
    {
        "content": "<p>nope</p>",
        "id": 150929274,
        "sender_full_name": "oli",
        "timestamp": 1544018118
    },
    {
        "content": "<p>because the stack that is overflowing for mach is… <em>intense drumming</em></p>",
        "id": 150929287,
        "sender_full_name": "nagisa",
        "timestamp": 1544018133
    },
    {
        "content": "<p>for the main thread! <em>ba dum tsh</em></p>",
        "id": 150929301,
        "sender_full_name": "nagisa",
        "timestamp": 1544018145
    },
    {
        "content": "<p>huh</p>",
        "id": 150929356,
        "sender_full_name": "oli",
        "timestamp": 1544018166
    },
    {
        "content": "<p>and that is obviously not affected by the stack size stuff, because that only affects the threads, not main stack</p>",
        "id": 150929362,
        "sender_full_name": "nagisa",
        "timestamp": 1544018171
    },
    {
        "content": "<p>if it was a proper rustc thread the error message would say <code>thread 'rustc' overflowed stack</code> or something not <code>thread 'main' overflowed stack</code>.</p>",
        "id": 150929391,
        "sender_full_name": "nagisa",
        "timestamp": 1544018209
    },
    {
        "content": "<p>This is related to <a href=\"https://github.com/rust-lang/rust/pull/48575\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/48575\">https://github.com/rust-lang/rust/pull/48575</a></p>",
        "id": 150929465,
        "sender_full_name": "nagisa",
        "timestamp": 1544018265
    },
    {
        "content": "<p>I even saw that PR after it got merged... I guess it's revert time (+adding a flag)</p>",
        "id": 150929707,
        "sender_full_name": "oli",
        "timestamp": 1544018429
    },
    {
        "content": "<p>ugh, and we backported the increase to 1.31.0</p>",
        "id": 150929752,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1544018470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> it is not harmful in most ways though</p>",
        "id": 150930608,
        "sender_full_name": "nagisa",
        "timestamp": 1544019179
    },
    {
        "content": "<p>sure</p>",
        "id": 150930621,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1544019188
    },
    {
        "content": "<p>other than just being an observable increase in memory usage</p>",
        "id": 150930622,
        "sender_full_name": "nagisa",
        "timestamp": 1544019189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> omg I dread having to deal with delay slots for mips in its implementation of stack manipulation :D</p>",
        "id": 151196014,
        "sender_full_name": "nagisa",
        "timestamp": 1544305129
    },
    {
        "content": "<p>(good news are is that I have all ARMs and x86(_64) covered)</p>",
        "id": 151196028,
        "sender_full_name": "nagisa",
        "timestamp": 1544305153
    },
    {
        "content": "<p>(I believe, anyway)</p>",
        "id": 151196030,
        "sender_full_name": "nagisa",
        "timestamp": 1544305163
    },
    {
        "content": "<p>(MIPS also has like 20 different ABIs...)</p>",
        "id": 151196101,
        "sender_full_name": "nagisa",
        "timestamp": 1544305278
    },
    {
        "content": "<p>/me goes to re-learn how powerpc assembly works</p>",
        "id": 151196151,
        "sender_full_name": "nagisa",
        "timestamp": 1544305375
    },
    {
        "content": "<p>FWIW I made a PR against stacker that implements support for all the platforms I could muster so far and some interesting questions regarding the maintainership of the crate arose</p>",
        "id": 154666649,
        "sender_full_name": "nagisa",
        "timestamp": 1546973264
    },
    {
        "content": "<p>See <a href=\"https://github.com/alexcrichton/stacker/pull/13\" target=\"_blank\" title=\"https://github.com/alexcrichton/stacker/pull/13\">https://github.com/alexcrichton/stacker/pull/13</a> for the discussion</p>",
        "id": 154666764,
        "sender_full_name": "nagisa",
        "timestamp": 1546973352
    },
    {
        "content": "<p>but in summary, if it seems that rustc will become the primary user of the crate… then perhaps it should be maintained by T-compiler?</p>",
        "id": 154666796,
        "sender_full_name": "nagisa",
        "timestamp": 1546973379
    },
    {
        "content": "<p>however we do not per-se have a nice place to put crates like these anywhere, other than in the compiler’s own tree</p>",
        "id": 154666861,
        "sender_full_name": "nagisa",
        "timestamp": 1546973404
    },
    {
        "content": "<p>which I would rather not do.</p>",
        "id": 154666874,
        "sender_full_name": "nagisa",
        "timestamp": 1546973411
    },
    {
        "content": "<p>Also <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I’d love to see your comment on the matter (both the maintainership &amp; the idea of psm itself)</p>",
        "id": 154666914,
        "sender_full_name": "nagisa",
        "timestamp": 1546973448
    },
    {
        "content": "<p>Perhaps the ideal solution in my eyes currently is to have a repository in a nursery or a similar group that would contain the crates we end up developing to manipulate the stack as directories</p>",
        "id": 154667232,
        "sender_full_name": "nagisa",
        "timestamp": 1546973680
    },
    {
        "content": "<p>with everyone on T-compiler as maintainer of it.</p>",
        "id": 154667237,
        "sender_full_name": "nagisa",
        "timestamp": 1546973690
    },
    {
        "content": "<p>i'm really curious what this \"infinite stack\" idea you have is</p>",
        "id": 154667597,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546973999
    },
    {
        "content": "<p>but i guess that's unrelated to the maintainership question you're asking ;)</p>",
        "id": 154667704,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546974041
    },
    {
        "content": "<p>On that note, it seems like it would be a worthwhile thing to pull into the nursery at least</p>",
        "id": 154667781,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546974076
    },
    {
        "content": "<blockquote>\n<p>i'm really curious what this \"infinite stack\" idea you have is</p>\n</blockquote>\n<p>My plan is to abuse virtual memory and allocate enough virtual memory to be virtually (ahem…) infinite for anybody involved…</p>",
        "id": 154668062,
        "sender_full_name": "nagisa",
        "timestamp": 1546974264
    },
    {
        "content": "<p>of course there are considerations and issues to solve on 32-bit, but the idea is very sound for 64-bit systems.</p>",
        "id": 154668075,
        "sender_full_name": "nagisa",
        "timestamp": 1546974282
    },
    {
        "content": "<p>That should get rid of almost any overhead that the original stacker aproach might have.</p>",
        "id": 154668139,
        "sender_full_name": "nagisa",
        "timestamp": 1546974344
    },
    {
        "content": "<p>hmm</p>",
        "id": 154668926,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546974996
    },
    {
        "content": "<p>I'm a bit skeptical</p>",
        "id": 154668929,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546974999
    },
    {
        "content": "<p>but maybe I'm missing info</p>",
        "id": 154668935,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546975004
    },
    {
        "content": "<p>so on modern 64-bit hardware the actual address space is usually still limited to 48 bits or so, right?</p>",
        "id": 154668957,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546975025
    },
    {
        "content": "<p>which is something like 280 terabytes</p>",
        "id": 154669055,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546975093
    },
    {
        "content": "<p>if each thread grabs a terabyte stack</p>",
        "id": 154669064,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546975101
    },
    {
        "content": "<p>you're not that far off from running out</p>",
        "id": 154669071,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546975111
    },
    {
        "content": "<p>Recently it has been bumped to 57 on x86_64, and other architectures may or may not have their own limits as well</p>",
        "id": 154669086,
        "sender_full_name": "nagisa",
        "timestamp": 1546975127
    },
    {
        "content": "<p>I don’t see a reason to leave the user of such solution out of the decision on what size to use, and also a combination of multiple approaches may be used too.</p>",
        "id": 154669129,
        "sender_full_name": "nagisa",
        "timestamp": 1546975180
    },
    {
        "content": "<p>For a 100MB-sized stack that <em>might</em> in some very rare cases get stacker-switched to another 100MB-sized virtual memory region still amortizes the costs of stack switching greatly</p>",
        "id": 154669241,
        "sender_full_name": "nagisa",
        "timestamp": 1546975250
    },
    {
        "content": "<p>oh, cool-- i'd be curious how many of the platforms we build rustc for have 57-bit</p>",
        "id": 154669255,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546975263
    },
    {
        "content": "<p>but yeah, the idea of grabbing 100MB chunks for a known program like rustc where you can specifically limit the number of per-process threads seems pretty sound</p>",
        "id": 154669291,
        "sender_full_name": "Taylor Cramer",
        "timestamp": 1546975296
    },
    {
        "content": "<p>The most important tidbit here is that it ought to grab virtual memory, commiting actual pages on access.</p>",
        "id": 154669387,
        "sender_full_name": "nagisa",
        "timestamp": 1546975358
    },
    {
        "content": "<p>which would not impact the resident-set for your usual-case.</p>",
        "id": 154669410,
        "sender_full_name": "nagisa",
        "timestamp": 1546975381
    },
    {
        "content": "<p>I’m still hazy on how to make that work on Windows as well… but I’ll figure something out</p>",
        "id": 154669458,
        "sender_full_name": "nagisa",
        "timestamp": 1546975428
    },
    {
        "content": "<p>You only need to allocate enough virtual address space to exhaust physical memory, so you don't need terabyte stacks unless you also have a terabyte of RAM</p>",
        "id": 154670034,
        "sender_full_name": "Zoxc",
        "timestamp": 1546975854
    },
    {
        "content": "<p>wouldn’t be good if we couldn’t spawn more than a single thread on one of those supercomputers that are running out of those 48 bits for actual physical memory <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 154670192,
        "sender_full_name": "nagisa",
        "timestamp": 1546975989
    },
    {
        "content": "<p>I forked off a discussion about where the crate should live into <a href=\"#narrow/stream/131828-t-compiler/topic/rust-lang.20crates.20owned.20by.20t-compiler\" title=\"#narrow/stream/131828-t-compiler/topic/rust-lang.20crates.20owned.20by.20t-compiler\">the \"rust-lang crates owned by compiler\" topic</a></p>",
        "id": 154757954,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547068207
    },
    {
        "content": "<p>One question: what do we do about the procedural macros? We cannot possibly tell people to \"invoke this awesome function to make your stack problems go away\", right?</p>",
        "id": 156378345,
        "sender_full_name": "nagisa",
        "timestamp": 1547827019
    },
    {
        "content": "<p>weren’t there an idea to run procedural macros in some sort of isolated environment or something, so that it does not crash compiler accidently etc?</p>",
        "id": 156378398,
        "sender_full_name": "nagisa",
        "timestamp": 1547827071
    },
    {
        "content": "<p>I guess it would be less of a problem with <code>stacker</code> being an independent thing... but then it would be ideal if procedural macro authors didn’t need to think about it at all</p>",
        "id": 156378528,
        "sender_full_name": "nagisa",
        "timestamp": 1547827160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> did that work, I believe, but we wound up with the same process for perf reasons</p>",
        "id": 156379950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547828334
    },
    {
        "content": "<blockquote>\n<p>wound up with the same process for perf reasons</p>\n</blockquote>\n<p>Not even same process, same <em>thread</em>.</p>",
        "id": 156380397,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1547828665
    },
    {
        "content": "<p>Right, so it would definitely benefit from at least having a fresh stack</p>",
        "id": 156380424,
        "sender_full_name": "nagisa",
        "timestamp": 1547828706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I don't remember, what are the next steps for <a href=\"https://github.com/rust-lang/rust/pull/55617\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55617\">https://github.com/rust-lang/rust/pull/55617</a> ? Are you still planning to implement basic windows support in <a href=\"https://github.com/alexcrichton/stacker/pull/13\" target=\"_blank\" title=\"https://github.com/alexcrichton/stacker/pull/13\">https://github.com/alexcrichton/stacker/pull/13</a> ?</p>",
        "id": 161060726,
        "sender_full_name": "oli",
        "timestamp": 1552918610
    },
    {
        "content": "<p>Or should we preemptively start moving stacker and psm into one repo and then into the <code>rust-lang</code> org?</p>",
        "id": 161060770,
        "sender_full_name": "oli",
        "timestamp": 1552918643
    },
    {
        "content": "<p>The Windows support is there... technically the only thing that does not work is 32-bit windows which can be emulated by using fibers still</p>",
        "id": 161069632,
        "sender_full_name": "nagisa",
        "timestamp": 1552924278
    },
    {
        "content": "<p>The things to do are to figure out why the CI does not pass and merge everything together, move it into the T-compiler purview...</p>",
        "id": 161069656,
        "sender_full_name": "nagisa",
        "timestamp": 1552924302
    },
    {
        "content": "<p>I still am currently adapting to my new job, and dealing with finishing my involvement with the previous one</p>",
        "id": 161069746,
        "sender_full_name": "nagisa",
        "timestamp": 1552924363
    },
    {
        "content": "<p>so I don’t really have much time to dedicate to anything open source currently</p>",
        "id": 161069756,
        "sender_full_name": "nagisa",
        "timestamp": 1552924381
    },
    {
        "content": "<p>What are you using instead of fibers on x64 Windows?</p>",
        "id": 161069757,
        "sender_full_name": "Zoxc",
        "timestamp": 1552924383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> Nothing, the code just carefully preserves the SEH unwinding information, so it \"just works\".</p>",
        "id": 161069802,
        "sender_full_name": "nagisa",
        "timestamp": 1552924424
    },
    {
        "content": "<p>on 64-bit anyway.</p>",
        "id": 161069804,
        "sender_full_name": "nagisa",
        "timestamp": 1552924426
    },
    {
        "content": "<p>Are you just allocating a large stack? =P</p>",
        "id": 161069871,
        "sender_full_name": "Zoxc",
        "timestamp": 1552924463
    },
    {
        "content": "<p>Oh, currently we are still allocating stack in chunks, like before. The windows code properly implements <code>rust_psm_on_stack</code> (which switches the stack to a new one) in a way that works on 64-bit windows.</p>",
        "id": 161069929,
        "sender_full_name": "nagisa",
        "timestamp": 1552924520
    },
    {
        "content": "<p>You can't switch stacks on Windows without fibers though</p>",
        "id": 161070029,
        "sender_full_name": "Zoxc",
        "timestamp": 1552924602
    },
    {
        "content": "<p>You very much can, you just need to maintain the necessary information in TIB updated and correct.</p>",
        "id": 161070100,
        "sender_full_name": "nagisa",
        "timestamp": 1552924628
    },
    {
        "content": "<p>i.e. the regular <code>mov %rax, %rsp</code> is not enough.</p>",
        "id": 161070123,
        "sender_full_name": "nagisa",
        "timestamp": 1552924651
    },
    {
        "content": "<p>No, that doesn't work. I've tried. Leads to fun subtle bugs.</p>",
        "id": 161070130,
        "sender_full_name": "Zoxc",
        "timestamp": 1552924659
    },
    {
        "content": "<p>What kinds of bugs have you encountered?</p>",
        "id": 161070227,
        "sender_full_name": "nagisa",
        "timestamp": 1552924714
    },
    {
        "content": "<p>Either way windows fiber code is not gone, so it is always possible to make stacker switch to either method</p>",
        "id": 161070247,
        "sender_full_name": "nagisa",
        "timestamp": 1552924732
    },
    {
        "content": "<p>I’m fine with the cost of fibers if that means we are sure that stuff works.</p>",
        "id": 161070295,
        "sender_full_name": "nagisa",
        "timestamp": 1552924764
    },
    {
        "content": "<p>but I’m fairly confident in my implementation of 64-bit stack switching -- it was made after reverse-engineering the fibers after all ;)</p>",
        "id": 161070316,
        "sender_full_name": "nagisa",
        "timestamp": 1552924787
    },
    {
        "content": "<p>Well it's possible I missed something, but MS can break it when they want to anyway.</p>",
        "id": 161070416,
        "sender_full_name": "Zoxc",
        "timestamp": 1552924846
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> one interesting thing that I managed to make work is regular stack unwinding for backtraces -- it works fully and very well as well</p>",
        "id": 161070418,
        "sender_full_name": "nagisa",
        "timestamp": 1552924846
    },
    {
        "content": "<p>So instead of getting the backtrace for just the \"current\" stack you get the backtrace for the whole chain.</p>",
        "id": 161070462,
        "sender_full_name": "nagisa",
        "timestamp": 1552924876
    },
    {
        "content": "<p>I wonder how you managed that? MS added security checks which stops unwinding outside the current stack.</p>",
        "id": 161070472,
        "sender_full_name": "Zoxc",
        "timestamp": 1552924886
    },
    {
        "content": "<p>Err, backtraces should work, actual SEH unwinding won't</p>",
        "id": 161070501,
        "sender_full_name": "Zoxc",
        "timestamp": 1552924918
    },
    {
        "content": "<p>yeah, SEH won’t look past the current stack</p>",
        "id": 161070561,
        "sender_full_name": "nagisa",
        "timestamp": 1552924939
    },
    {
        "content": "<p>I still need to put a catch-all handler that restores the stack and reinvokes SEH unwinding...</p>",
        "id": 161070574,
        "sender_full_name": "nagisa",
        "timestamp": 1552924953
    },
    {
        "content": "<p>Ok, gotta run to walk doggo</p>",
        "id": 161070663,
        "sender_full_name": "nagisa",
        "timestamp": 1552925022
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> fwiw I fixed psm, should be good to just rebase the repo and update the dep for the PR</p>",
        "id": 180741280,
        "sender_full_name": "nagisa",
        "timestamp": 1573745474
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> do you remember why you split out parens in ast lowering (<a href=\"https://github.com/rust-lang/rust/pull/55617#discussion_r391689040\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/55617#discussion_r391689040\">https://github.com/rust-lang/rust/pull/55617#discussion_r391689040</a>)?</p>",
        "id": 190719016,
        "sender_full_name": "nagisa",
        "timestamp": 1584364034
    },
    {
        "content": "<p>Also I would love to get somebody’s r+ otherwise I’m just gonna spend my time rebasing this admittedly nasty case of bitrot every day.</p>",
        "id": 190719072,
        "sender_full_name": "nagisa",
        "timestamp": 1584364065
    },
    {
        "content": "<p>It was split out because it does not work as a thing returning <code>ExprKind</code>, it needs to configure the <code>Expr</code> directly.</p>",
        "id": 190719292,
        "sender_full_name": "oli",
        "timestamp": 1584364164
    },
    {
        "content": "<p>I basically split it to keep the original code</p>",
        "id": 190719306,
        "sender_full_name": "oli",
        "timestamp": 1584364171
    },
    {
        "content": "<p>any refactorings there should happen outside the PR</p>",
        "id": 190719321,
        "sender_full_name": "oli",
        "timestamp": 1584364177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I guess <code>r=oli-obk,nagisa</code> after the next rebase? You're right in that we should land this soon, so it has a lot of time to bake. I also did another review pass, lgtm and impl wise let's address any further review-questions later.</p>",
        "id": 190719959,
        "sender_full_name": "oli",
        "timestamp": 1584364517
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> ^</p>",
        "id": 190729036,
        "sender_full_name": "nagisa",
        "timestamp": 1584368992
    },
    {
        "content": "<p>ok as long as someone is available to answer why e.g. for loops were separated from the rest</p>",
        "id": 190729596,
        "sender_full_name": "centril",
        "timestamp": 1584369164
    },
    {
        "content": "<p>this needs comments in the code itself</p>",
        "id": 190729621,
        "sender_full_name": "centril",
        "timestamp": 1584369174
    },
    {
        "content": "<p>or we will get bus-factor=1</p>",
        "id": 190729660,
        "sender_full_name": "centril",
        "timestamp": 1584369187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> so can you follow up with adding those comments to the code?</p>",
        "id": 190729735,
        "sender_full_name": "centril",
        "timestamp": 1584369219
    },
    {
        "content": "<p>this was already separated before my PR</p>",
        "id": 190729749,
        "sender_full_name": "oli",
        "timestamp": 1584369225
    },
    {
        "content": "<p>I don't know why</p>",
        "id": 190729758,
        "sender_full_name": "oli",
        "timestamp": 1584369228
    },
    {
        "content": "<p>it's not separated on master</p>",
        "id": 190729850,
        "sender_full_name": "centril",
        "timestamp": 1584369254
    },
    {
        "content": "<p>look at the diff, Parens is handled separately</p>",
        "id": 190729933,
        "sender_full_name": "oli",
        "timestamp": 1584369293
    },
    {
        "content": "<p>I just kept it like that</p>",
        "id": 190729953,
        "sender_full_name": "oli",
        "timestamp": 1584369300
    },
    {
        "content": "<p>oh you mean the early returns</p>",
        "id": 190730057,
        "sender_full_name": "centril",
        "timestamp": 1584369324
    },
    {
        "content": "<p>So we should be able to have <code>lower_expr_mut_inner</code> and include the parens and for loops in that, and then in <code>lower_expr_mut</code> we do the recursion thing</p>",
        "id": 190730366,
        "sender_full_name": "centril",
        "timestamp": 1584369419
    },
    {
        "content": "<p>yes we can do that, but not in this PR or maybe not ever, the current code works just fine</p>",
        "id": 190730421,
        "sender_full_name": "oli",
        "timestamp": 1584369441
    },
    {
        "content": "<p>if we can reasonably avoid <code>bug!(...)</code>s we should; and I need to follow up to remove the <code>rustc::middle</code> import at any rate</p>",
        "id": 190730588,
        "sender_full_name": "centril",
        "timestamp": 1584369513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> so I had plans to move <code>rustc::middle::limits</code> into <code>rustc_passes</code>, but now lowering needs functionality added to that module... so I will need to either split that module apart or move it to rustc_session</p>",
        "id": 190731262,
        "sender_full_name": "centril",
        "timestamp": 1584369788
    },
    {
        "content": "<p>(I'm planning on removing lowering's dependency on the rustc crate)</p>",
        "id": 190731297,
        "sender_full_name": "centril",
        "timestamp": 1584369806
    },
    {
        "content": "<p>rustc_session is probably better for \"make this functionality widely reachable\", but I'm not a huge fan of moving code to that crate either</p>",
        "id": 190731444,
        "sender_full_name": "centril",
        "timestamp": 1584369864
    },
    {
        "content": "<p>I don’t particularly care where that helper ends up being, but it does need to be accessible by any code that does recursion. We can even duplicate the definition, if necessary. its not that large. Or error prone.</p>",
        "id": 190922694,
        "sender_full_name": "nagisa",
        "timestamp": 1584486480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> that location would be rustc_data_structures then</p>",
        "id": 190966232,
        "sender_full_name": "centril",
        "timestamp": 1584530262
    },
    {
        "content": "<p>psm and stacker don't seem like they carry that much compile time burden</p>",
        "id": 190966245,
        "sender_full_name": "centril",
        "timestamp": 1584530275
    },
    {
        "content": "<p>yeah, those are fairly small, the largest dependency is probably <code>cc</code> which we already include everywhere else.</p>",
        "id": 190974754,
        "sender_full_name": "nagisa",
        "timestamp": 1584535744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> any suggestions for the name of the new module in rustc_data_structures?</p>",
        "id": 190974891,
        "sender_full_name": "centril",
        "timestamp": 1584535814
    },
    {
        "content": "<p><code>rustc_data_structures::stack::ensure_sufficient</code> would make sense to me.</p>",
        "id": 190974947,
        "sender_full_name": "nagisa",
        "timestamp": 1584535870
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 190974981,
        "sender_full_name": "centril",
        "timestamp": 1584535889
    },
    {
        "content": "<p>especially because <code>stack</code> is a data structure of sorts if you squint hard enough :D</p>",
        "id": 190974983,
        "sender_full_name": "nagisa",
        "timestamp": 1584535890
    },
    {
        "content": "<p>I had the same module name in mind, so since we reached the same conclusion \"it must be right\" :P</p>",
        "id": 190975032,
        "sender_full_name": "centril",
        "timestamp": 1584535918
    },
    {
        "content": "<p>I’m planning to circle around and do some clean-ups on the weekends but you’re welcome to do them yourself if you want to get it done faster.</p>",
        "id": 190975137,
        "sender_full_name": "nagisa",
        "timestamp": 1584535960
    },
    {
        "content": "<p>I might get to it today if your PR has landed</p>",
        "id": 190975195,
        "sender_full_name": "centril",
        "timestamp": 1584535993
    },
    {
        "content": "<p>Although I had hoped <a href=\"https://github.com/rust-lang/rust/pull/69920\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/69920\">https://github.com/rust-lang/rust/pull/69920</a> would have landed by now</p>",
        "id": 190975237,
        "sender_full_name": "centril",
        "timestamp": 1584536028
    },
    {
        "content": "<p>I can branch of that PR though =)</p>",
        "id": 190975253,
        "sender_full_name": "centril",
        "timestamp": 1584536038
    }
]