[
    {
        "content": "<p>I'm catching up on the switch from legacy demanging to v0 demangling. In binaries produced by a stage1 compiler I see that the standard library symbols are legacy encoded (start with <code>_ZN</code>) and the compiler's own symbols are v0 encoded (start with <code>_R</code>). Is that expected?</p>",
        "id": 260615023,
        "sender_full_name": "njn",
        "timestamp": 1636346941
    },
    {
        "content": "<p>Valgrind is also failing to demangle the v0 symbols, even though I'm using a post 3.18 version, which supposedly does support v0 encoding.</p>",
        "id": 260615035,
        "sender_full_name": "njn",
        "timestamp": 1636346969
    },
    {
        "content": "<p>Valgrind is successfully decoding the legacy symbols</p>",
        "id": 260615081,
        "sender_full_name": "njn",
        "timestamp": 1636347008
    },
    {
        "content": "<blockquote>\n<p>In binaries produced by a stage1 compiler I see that the standard library symbols are legacy encoded (start with _ZN) and the compiler's own symbols are v0 encoded (start with _R). Is that expected?</p>\n</blockquote>\n<p>IIRC, it was intentional to only enable v0 demangling for the compiler, not std yet. But I'm not certain.</p>",
        "id": 260615271,
        "sender_full_name": "Noah Lev",
        "timestamp": 1636347357
    },
    {
        "content": "<p>The real problem here is that Valgrind isn't decoded symbols it should be able to decode</p>",
        "id": 260615547,
        "sender_full_name": "njn",
        "timestamp": 1636347700
    },
    {
        "content": "<p>OMG</p>",
        "id": 260616496,
        "sender_full_name": "njn",
        "timestamp": 1636348990
    },
    {
        "content": "<p>There is code in Valgrind to do v0 demangling.</p>",
        "id": 260616499,
        "sender_full_name": "njn",
        "timestamp": 1636348996
    },
    {
        "content": "<p>But it's preceded by this test:</p>\n<div class=\"codehilite\"><pre><span></span><code>    if (do_cxx_demangling &amp;&amp; VG_(clo_demangle)\n       &amp;&amp; orig != NULL &amp;&amp; orig[0] == &#39;_&#39; &amp;&amp; orig[1] == &#39;Z&#39;) {\n</code></pre></div>",
        "id": 260616573,
        "sender_full_name": "njn",
        "timestamp": 1636349065
    },
    {
        "content": "<p>If I change that last line to this:</p>\n<div class=\"codehilite\"><pre><span></span><code>&amp;&amp; orig != NULL &amp;&amp; orig[0] == &#39;_&#39; &amp;&amp; (orig[1] == &#39;Z&#39; || orig[1] == &#39;R&#39;))\n {\n</code></pre></div>",
        "id": 260616582,
        "sender_full_name": "njn",
        "timestamp": 1636349084
    },
    {
        "content": "<p>it works</p>",
        "id": 260616583,
        "sender_full_name": "njn",
        "timestamp": 1636349085
    },
    {
        "content": "<p>... which will only be hit for the legacy encoding?</p>",
        "id": 260616585,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636349090
    },
    {
        "content": "<p>yeah :(</p>",
        "id": 260616590,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1636349102
    },
    {
        "content": "<p>C++ mangling also uses <code>_Z</code></p>",
        "id": 260616596,
        "sender_full_name": "njn",
        "timestamp": 1636349109
    },
    {
        "content": "<p>Clearly nobody ever tested this :(</p>",
        "id": 260616604,
        "sender_full_name": "njn",
        "timestamp": 1636349124
    },
    {
        "content": "<p>I will submit a fix for this to Valgrind tomorrow. It's a shame that Valgrind 3.18 came out just 3 weeks ago</p>",
        "id": 260616683,
        "sender_full_name": "njn",
        "timestamp": 1636349227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span> It looks like you added the v0 demangling support to Valgrind in <a href=\"https://bugs.kde.org/show_bug.cgi?id=431306\">https://bugs.kde.org/show_bug.cgi?id=431306</a>.</p>",
        "id": 260616908,
        "sender_full_name": "njn",
        "timestamp": 1636349538
    },
    {
        "content": "<p>The commit added new code for the v0 demangling, and modified one test where a symbol was no longer demangled because it is too long. But I don't, for example, see any tests added for the v0 encoding. Did you test this?</p>",
        "id": 260616944,
        "sender_full_name": "njn",
        "timestamp": 1636349612
    },
    {
        "content": "<p>Even with my change, Valgrind still fails to demangle some symbols like this one:</p>\n<div class=\"codehilite\"><pre><span></span><code>_RINvNtCsjj22Phx58mM_4core3ptr13drop_in_placeNtNtCs3EfPVfRM4MK_14rustc_borrowck12region_infer22RegionInferenceContextEBK_.llvm.14431053312260283512\n</code></pre></div>",
        "id": 260617434,
        "sender_full_name": "njn",
        "timestamp": 1636350282
    },
    {
        "content": "<p>I'm suspicious about the '.' chars.</p>",
        "id": 260617440,
        "sender_full_name": "njn",
        "timestamp": 1636350298
    },
    {
        "content": "<p>The demangling code in Valgrind has these comments:</p>\n<div class=\"codehilite\"><pre><span></span><code>  /* Rust symbols (v0) use only [_0-9a-zA-Z] characters. */\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>      /* Legacy Rust symbols can also contain [.:$] characters. */\n</code></pre></div>",
        "id": 260617472,
        "sender_full_name": "njn",
        "timestamp": 1636350350
    }
]