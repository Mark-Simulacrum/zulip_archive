[
    {
        "content": "<p>Here is a topic that I am going to point the people in <a class=\"stream\" data-stream-id=\"238009\" href=\"/#narrow/stream/238009-t-compiler.2Fmeetings\">#t-compiler/meetings</a> at</p>",
        "id": 209104106,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599231823
    },
    {
        "content": "<p>the issue of compile times being an impediment for contributors (new and old) came up (once again) during todays' planning meeting.</p>",
        "id": 209104365,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599231941
    },
    {
        "content": "<p>the whole meeting was in <a class=\"stream-topic\" data-stream-id=\"238009\" href=\"/#narrow/stream/238009-t-compiler.2Fmeetings/topic/planning.20meeting.202020.2E09.2E04\">#t-compiler/meetings &gt; planning meeting 2020.09.04</a></p>",
        "id": 209104393,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599231956
    },
    {
        "content": "<p>the specific spot where we had some detailed discussion started around <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/planning.20meeting.202020.2E09.2E04/near/209102415\">here</a> I think</p>",
        "id": 209104457,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599231972
    },
    {
        "content": "<p>I wanted to allocate this topic to have a place to continue analysis and brainstorming</p>",
        "id": 209104530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198054\">mark-i-m</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/planning.20meeting.202020.2E09.2E04/near/209103100\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/planning.20meeting.202020.2E09.2E04/near/209102909\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"198054\">mark-i-m</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/planning.20meeting.202020.2E09.2E04/near/209102890\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/238009-t-compiler.2Fmeetings/topic/planning.20meeting.202020.2E09.2E04/near/209102696\">said</a>:</p>\n<blockquote>\n<p>if you're adding new functionality check is not enough, you need to make sure it <em>works</em></p>\n</blockquote>\n<p>If you have good tests, then the CI does make sure it \"works\"</p>\n</blockquote>\n<p>15 minute turnaround times are too slow</p>\n</blockquote>\n<p>It's better than 30 minutes or more ... :/</p>\n</blockquote>\n<p>right, this is sort of my point</p>",
        "id": 209104532,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232014
    },
    {
        "content": "<p>the compile times are so bad you <em>have</em> to use CI, and CI is not really fast enough for working on features</p>",
        "id": 209104567,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232035
    },
    {
        "content": "<p>even if you ahve appropriate tests, etc. it's hard to use logging</p>",
        "id": 209104584,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232043
    },
    {
        "content": "<p>yes so there are a couple different issues there</p>",
        "id": 209104613,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232056
    },
    {
        "content": "<p>one is whether \"just push to CI\" could <em>ever</em> be a reasonable option, e.g. if we got its turnaround time to 0</p>",
        "id": 209104654,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232077
    },
    {
        "content": "<p>and I think its reasonable to say that it would never be anyone's first choice</p>",
        "id": 209104715,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232091
    },
    {
        "content": "<p>it's never going to be zero though, unless you have a way to cache the stage 1 build</p>",
        "id": 209104766,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232109
    },
    {
        "content": "<p>that's the main benefit of local builds, you have great caching</p>",
        "id": 209104783,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232117
    },
    {
        "content": "<p>CI is roughly 7 minutes to get x.py check results and ~35 for a full test run</p>",
        "id": 209104828,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232136
    },
    {
        "content": "<p>I don't think it's feasible to improve that by too much without reducing the work done (not just adding more hardware)</p>",
        "id": 209105033,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232214
    },
    {
        "content": "<p>I could imagine having a separate builder that did cache stuff</p>",
        "id": 209105059,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232227
    },
    {
        "content": "<p>i.e. when I build locally it's ~30 seconds of turnaround for compiling librustdoc</p>",
        "id": 209105068,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232233
    },
    {
        "content": "<p>specifically for the purpose of getting near 0 turn around time</p>",
        "id": 209105082,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232241
    },
    {
        "content": "<p>but if that would <em>still</em> be an unattractive development option</p>",
        "id": 209105125,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232259
    },
    {
        "content": "<p>then I don't think we'd want to dedicate the effort to creating it</p>",
        "id": 209105157,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232269
    },
    {
        "content": "<p>Yes?</p>",
        "id": 209105163,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232272
    },
    {
        "content": "<p>I think we should ask <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span></p>",
        "id": 209105194,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232279
    },
    {
        "content": "<p>and <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span></p>",
        "id": 209105214,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232283
    },
    {
        "content": "<p>I don't use CI to develop currently</p>",
        "id": 209105263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232292
    },
    {
        "content": "<p>nor do I</p>",
        "id": 209105287,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232298
    },
    {
        "content": "<p>but when I had only my laptop</p>",
        "id": 209105370,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232312
    },
    {
        "content": "<p>(which is quite under-powered compared to my desktop workstation)</p>",
        "id": 209105485,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232330
    },
    {
        "content": "<p>I probably should have leveraged CI <strong>more</strong></p>",
        "id": 209105526,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232341
    },
    {
        "content": "<p>but that brings up another piont</p>",
        "id": 209105626,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232397
    },
    {
        "content": "<p>On really beefy (32T 3950X) I can get a stage 1 build after x.py clean in roughly 4:32. Probably most contributors have way less powerful hardware, but that seems like our \"best case\" for CI builds, without caching.</p>",
        "id": 209105628,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> specifically said in the other meeting that this workflow would be an abuse of CI</p>",
        "id": 209105663,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232418
    },
    {
        "content": "<p>which is something that I know I've worried myself about in the past</p>",
        "id": 209105726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232441
    },
    {
        "content": "<p>in terms of not being sure whether a certain activity would overly tax our CI</p>",
        "id": 209105793,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232453
    },
    {
        "content": "<p>and so I can imagine our contributors having a similar worry, unless it were explicitly stated to be an encouraged workflow</p>",
        "id": 209105834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232472
    },
    {
        "content": "<p>related: <a href=\"https://github.com/rust-lang/rust/issues/67357\">https://github.com/rust-lang/rust/issues/67357</a></p>",
        "id": 209105856,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232485
    },
    {
        "content": "<p>I think we should encourage use of CI for this, if contributors need to</p>",
        "id": 209105969,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232519
    },
    {
        "content": "<p>I am not worried right now about it being an abuse</p>",
        "id": 209105982,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232525
    },
    {
        "content": "<p>so I think the infra team needs to be on the same page about that. Or maybe they are</p>",
        "id": 209106038,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232558
    },
    {
        "content": "<p>I just noted <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> 's response and so it concerned me.</p>",
        "id": 209106087,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232567
    },
    {
        "content": "<p>but nonetheless</p>",
        "id": 209106094,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232570
    },
    {
        "content": "<p>(I say that with an infra hat, though we've not talked about it)</p>",
        "id": 209106116,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232577
    },
    {
        "content": "<p>even <strong>if</strong> we did encourage use of CI for this</p>",
        "id": 209106122,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232579
    },
    {
        "content": "<p>it still isn't what we should consider \"the solution\"</p>",
        "id": 209106142,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232591
    },
    {
        "content": "<p>because the <em>experience</em> of pushing to CI is not the ideal workflow for learning about the code base</p>",
        "id": 209106214,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232620
    },
    {
        "content": "<p>yes</p>",
        "id": 209106259,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232642
    },
    {
        "content": "<p>it's also hard to find things in CI logs</p>",
        "id": 209106283,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232657
    },
    {
        "content": "<p>(and requires you to publish to the world your WIP work which is .. well, sometimes not what you want to do)</p>",
        "id": 209106286,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232658
    },
    {
        "content": "<p>(because of everything <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> said above. You want logging. You want to be able to use a debugger. You want to use a performance monitor. You want an IDE. etc)</p>",
        "id": 209106293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232661
    },
    {
        "content": "<p>because they're so long</p>",
        "id": 209106296,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198054\">mark-i-m</span> said that it takes 2 hours for them to build the compiler</p>",
        "id": 209106444,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232707
    },
    {
        "content": "<p>I don't know if that included a from-scratch LLVM build</p>",
        "id": 209106486,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232726
    },
    {
        "content": "<p>they use system llvm I'm pretty sure</p>",
        "id": 209106539,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232752
    },
    {
        "content": "<p>but comparing 4m32s to 2h is pretty amazing</p>",
        "id": 209106561,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232764
    },
    {
        "content": "<p>that excludes llvm building, btw</p>",
        "id": 209106611,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232802
    },
    {
        "content": "<p>it would not be too hard to ship pre-built llvms or recommend system llvm</p>",
        "id": 209106673,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232812
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209106673\">said</a>:</p>\n<blockquote>\n<p>it would not be too hard to ship pre-built llvms or recommend system llvm</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/797\">https://github.com/rust-lang/rustc-dev-guide/pull/797</a></p>",
        "id": 209106688,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> that was on a 32 <em>thread</em> machine, right? One of the 16 core 2 threads/core thing?</p>",
        "id": 209106689,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> correct</p>",
        "id": 209106699,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> had objections to that PR</p>",
        "id": 209106702,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232831
    },
    {
        "content": "<p>I think for debugging llvm</p>",
        "id": 209106716,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232839
    },
    {
        "content": "<p>but if people can't build it in the first place <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> I feel like we should recommend it</p>",
        "id": 209106728,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232851
    },
    {
        "content": "<p>my point is we can ship llvm-assert enabled llvms to people easily</p>",
        "id": 209106736,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232861
    },
    {
        "content": "<p>\"easily\" =&gt; you tell me to get this done and I can get it done</p>",
        "id": 209106758,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232874
    },
    {
        "content": "<p>I think we should prefer shipping our own to using system LLVM</p>",
        "id": 209106770,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232881
    },
    {
        "content": "<p>if we can do it</p>",
        "id": 209106797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232891
    },
    {
        "content": "<p>it's just never been a priority because <em>I</em> don't need it, having beefy hardware everywhere</p>",
        "id": 209106802,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232894
    },
    {
        "content": "<p>since I want to retain the capabiilty to patch LLVM when necessary</p>",
        "id": 209106808,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232902
    },
    {
        "content": "<p>I mean, we already have the artifacts, it's mostly a matter of downloading them</p>",
        "id": 209106838,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232922
    },
    {
        "content": "<p>right</p>",
        "id": 209106887,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209106838\">said</a>:</p>\n<blockquote>\n<p>I mean, we already have the artifacts, it's mostly a matter of downloading them</p>\n</blockquote>\n<p>this would be great to have then</p>",
        "id": 209106891,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232933
    },
    {
        "content": "<p>(at least for common platforms. but I'm not too worried about people trying to do this on like sparc)</p>",
        "id": 209106898,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232938
    },
    {
        "content": "<p>this is another major blocker I see for new contributors, building llvm</p>",
        "id": 209106911,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232943
    },
    {
        "content": "<p>I point to system llvm as much as I can but like <span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> said that doesn't have the patches</p>",
        "id": 209106952,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599232960
    },
    {
        "content": "<p>so if this is a priority for the compiler team, then I can invest time in doing this</p>",
        "id": 209106960,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232964
    },
    {
        "content": "<p>most peoples internet pipe will be wide-enough that's they'd prefer a download over a local build, I imagine.</p>",
        "id": 209106974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232970
    },
    {
        "content": "<p>but how much of a gain will it reap</p>",
        "id": 209107001,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232986
    },
    {
        "content": "<p>they're already downloading <em>an</em> LLVM for the beta compiler</p>",
        "id": 209107010,
        "sender_full_name": "simulacrum",
        "timestamp": 1599232991
    },
    {
        "content": "<p>(true)</p>",
        "id": 209107021,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599232999
    },
    {
        "content": "<p>so, really, it'll just be one more</p>",
        "id": 209107023,
        "sender_full_name": "simulacrum",
        "timestamp": 1599233001
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209106974\">said</a>:</p>\n<blockquote>\n<p>most peoples internet pipe will be wide-enough that's they'd prefer a download over a local build, I imagine.</p>\n</blockquote>\n<p>while we're at it, could we set bootstrap not to download the llvm git repo if it's already downloading artifacts?</p>",
        "id": 209107034,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233006
    },
    {
        "content": "<p>that takes like 10 minutes on my connection</p>",
        "id": 209107048,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233013
    },
    {
        "content": "<p>I am not too worried about one-time costs -- maybe I should be?</p>",
        "id": 209107072,
        "sender_full_name": "simulacrum",
        "timestamp": 1599233024
    },
    {
        "content": "<p>one time costs hurt &lt; 1 contribution a month the most</p>",
        "id": 209107108,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233042
    },
    {
        "content": "<p>Well, I know my workflow <em>used</em> to be to proactively make new local clones of rust.git</p>",
        "id": 209107138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233047
    },
    {
        "content": "<p>frequent contributors don't run into them as much</p>",
        "id": 209107173,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233065
    },
    {
        "content": "<p>and for a while there I had various hacky scripts to make copies of locally downloaded artifacts within my rust.git</p>",
        "id": 209107177,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233066
    },
    {
        "content": "<p>specifically because the download times hurt when building each of those fresh clones</p>",
        "id": 209107202,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209107138\">said</a>:</p>\n<blockquote>\n<p>Well, I know my workflow <em>used</em> to be to proactively make new local clones of rust.git</p>\n</blockquote>\n<p><a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html#working-on-multiple-branches-at-the-same-time\">https://rustc-dev-guide.rust-lang.org/building/suggested.html#working-on-multiple-branches-at-the-same-time</a></p>",
        "id": 209107205,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233088
    },
    {
        "content": "<p>I know it isn't the standard recommended practice</p>",
        "id": 209107271,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233115
    },
    {
        "content": "<p>oh actually I didn't even use worktrees in teh first place</p>",
        "id": 209107310,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233134
    },
    {
        "content": "<p>hmm</p>",
        "id": 209107314,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233135
    },
    {
        "content": "<p>/me will have to look more at that link later.</p>",
        "id": 209107348,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233156
    },
    {
        "content": "<p>It still doesn't solve the \"I end up downloading a fresh beta\" etc</p>",
        "id": 209107430,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233178
    },
    {
        "content": "<p>right?</p>",
        "id": 209107434,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233180
    },
    {
        "content": "<p>right</p>",
        "id": 209107445,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233186
    },
    {
        "content": "<p>worktrees are a pain but less of a pain than redownloading teh repo</p>",
        "id": 209107459,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233194
    },
    {
        "content": "<p>oh and submodules don't get shared</p>",
        "id": 209107463,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233197
    },
    {
        "content": "<p>so that doesn't actually resolve the problem</p>",
        "id": 209107472,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233203
    },
    {
        "content": "<p>right?</p>",
        "id": 209107478,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233204
    },
    {
        "content": "<p>yeah worktrees don't help too much I think</p>",
        "id": 209107488,
        "sender_full_name": "simulacrum",
        "timestamp": 1599233215
    },
    {
        "content": "<p>the git trees for submodules are shared</p>",
        "id": 209107490,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233217
    },
    {
        "content": "<p>i.e. my clones will freshly download new llvm checkouts</p>",
        "id": 209107494,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233218
    },
    {
        "content": "<p>but not the build cache</p>",
        "id": 209107497,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233219
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209107490\">said</a>:</p>\n<blockquote>\n<p>the git trees for submodules are shared</p>\n</blockquote>\n<p>that's not what the thing you linked says...</p>",
        "id": 209107524,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233234
    },
    {
        "content": "<p>but this should be easy to double-check</p>",
        "id": 209107553,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233257
    },
    {
        "content": "<p>I'll look at it more later</p>",
        "id": 209107561,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233265
    },
    {
        "content": "<p>I need to step away in a little bit, but I did want to bring up something else</p>",
        "id": 209107592,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233281
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> are you setting incremental=true in your config.toml ?</p>",
        "id": 209107665,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233299
    },
    {
        "content": "<p>yes</p>",
        "id": 209107678,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233304
    },
    {
        "content": "<p>okay</p>",
        "id": 209107684,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233307
    },
    {
        "content": "<p>and rustc-dev-guide suggests that as a default</p>",
        "id": 209107718,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233330
    },
    {
        "content": "<p>I suspect its not working well enough (for various reasons)</p>",
        "id": 209107720,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233331
    },
    {
        "content": "<p>to be clear: compile times <em>for me</em> are ok. not great, but ok</p>",
        "id": 209107748,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233346
    },
    {
        "content": "<p>some of that is general issues that wg-incr-comp will tackle</p>",
        "id": 209107755,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233349
    },
    {
        "content": "<p>it's people building the first time that run into these issues</p>",
        "id": 209107773,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233360
    },
    {
        "content": "<p>but I'm a little curious if there's anything specific to our bootstrap system that we need to address</p>",
        "id": 209107785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233365
    },
    {
        "content": "<p>or with not very beefy hardware</p>",
        "id": 209107788,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233366
    },
    {
        "content": "<p>So I'm not sure I want to work <strong>too</strong> hard to address the first-time builds</p>",
        "id": 209107803,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233379
    },
    {
        "content": "<p>it's not just first time, it also hurts rebasing</p>",
        "id": 209107838,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233395
    },
    {
        "content": "<p>because to me its a long edit-compile-debug  that really kills productivity</p>",
        "id": 209107839,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233395
    },
    {
        "content": "<p>I'm very careful about rebasing because it requires recompiling rustc middle</p>",
        "id": 209107896,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233404
    },
    {
        "content": "<p>yes I can understand that rebasing runs into the issue</p>",
        "id": 209107929,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233417
    },
    {
        "content": "<p>and thus I would typically rebase only once-per-day</p>",
        "id": 209107948,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233429
    },
    {
        "content": "<p>and fire off a build and go do something else for a while</p>",
        "id": 209107978,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233440
    },
    {
        "content": "<p>(that was back when I was restricted to my laptop)</p>",
        "id": 209107999,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233449
    },
    {
        "content": "<p>but you can see what I mean when I say if the edit-compile-debug cycle is long, then we've lost the war?</p>",
        "id": 209108047,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233471
    },
    {
        "content": "<p>yes, definitely</p>",
        "id": 209108093,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233497
    },
    {
        "content": "<p>that's what impacts me the most for sure</p>",
        "id": 209108104,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233504
    },
    {
        "content": "<p>(and I only work on librustdoc <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> )</p>",
        "id": 209108119,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209107592\">said</a>:</p>\n<blockquote>\n<p>I need to step away in a little bit, but I did want to bring up something else</p>\n</blockquote>\n<p>okay now that time has arrived. Sorry we didn't identify any silver bullets.</p>",
        "id": 209108330,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233626
    },
    {
        "content": "<p>I think the caching builder was a great idea as a workaround</p>",
        "id": 209108400,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233653
    },
    {
        "content": "<p>but we should hear from <span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> and <span class=\"user-mention\" data-user-id=\"120823\">@DPC</span> before implementing it</p>",
        "id": 209108422,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233665
    },
    {
        "content": "<p>my biggest worry there</p>",
        "id": 209108443,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233672
    },
    {
        "content": "<p>is false negatives</p>",
        "id": 209108454,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233675
    },
    {
        "content": "<p>that's what bors is for, no?</p>",
        "id": 209108467,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233686
    },
    {
        "content": "<p>i.e. cases where the caching/incremental stuff flags an error</p>",
        "id": 209108491,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233697
    },
    {
        "content": "<p>that isn't a true error</p>",
        "id": 209108502,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233703
    },
    {
        "content": "<p>but a cache artifact</p>",
        "id": 209108508,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233706
    },
    {
        "content": "<p>ahh false negatives, not false positives</p>",
        "id": 209108513,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233710
    },
    {
        "content": "<p>yeah hmm I don't know what to do about those</p>",
        "id": 209108533,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233719
    },
    {
        "content": "<p>I would not have a cache builder I think, we should invest as much as we can in local compile times first</p>",
        "id": 209108544,
        "sender_full_name": "simulacrum",
        "timestamp": 1599233725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> do you see it as a waste of human effort, or of compute resources?</p>",
        "id": 209108602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233752
    },
    {
        "content": "<p>human effort</p>",
        "id": 209108673,
        "sender_full_name": "simulacrum",
        "timestamp": 1599233772
    },
    {
        "content": "<p>I don't think optimizing cache builder will be easy</p>",
        "id": 209108686,
        "sender_full_name": "simulacrum",
        "timestamp": 1599233782
    },
    {
        "content": "<p>okay</p>",
        "id": 209108696,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233787
    },
    {
        "content": "<p>and it's never as nice as good local builds</p>",
        "id": 209108705,
        "sender_full_name": "simulacrum",
        "timestamp": 1599233793
    },
    {
        "content": "<p>plus, any improvements we make to compile times locally will have an effect on raw CI times too probably</p>",
        "id": 209108723,
        "sender_full_name": "simulacrum",
        "timestamp": 1599233812
    },
    {
        "content": "<p>providing LLVM artifact downloads by default may be most obvious next step</p>",
        "id": 209108726,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233813
    },
    {
        "content": "<p>it won't address edit-compile-cycle that concerns me</p>",
        "id": 209108749,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233826
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209108422\">said</a>:</p>\n<blockquote>\n<p>but we should hear from <span class=\"user-mention silent\" data-user-id=\"198054\">mark-i-m</span> and <span class=\"user-mention silent\" data-user-id=\"120823\">DPC</span> before implementing it</p>\n</blockquote>\n<p>i'm still fine tuning my workflow on working on rustc at the moment, so part of it could be because of me not setting up stuff properly locally <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 209108753,
        "sender_full_name": "DPC",
        "timestamp": 1599233828
    },
    {
        "content": "<p>but it will be good for first-timers</p>",
        "id": 209108758,
        "sender_full_name": "pnkfelix",
        "timestamp": 1599233833
    },
    {
        "content": "<p>anyway I will spend some time today on the LLVM thing</p>",
        "id": 209108886,
        "sender_full_name": "simulacrum",
        "timestamp": 1599233897
    },
    {
        "content": "<p>I would also like to start tracking some of this on perf.rlo or similar, so I'll be looking at that</p>",
        "id": 209108919,
        "sender_full_name": "simulacrum",
        "timestamp": 1599233917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120823\">DPC</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209108753\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209108422\">said</a>:</p>\n<blockquote>\n<p>but we should hear from <span class=\"user-mention silent\" data-user-id=\"198054\">mark-i-m</span> and <span class=\"user-mention silent\" data-user-id=\"120823\">DPC</span> before implementing it</p>\n</blockquote>\n<p>i'm still fine tuning my workflow on working on rustc at the moment, so part of it could be because of me not setting up stuff properly locally :D</p>\n</blockquote>\n<p>(let me know if you want tips, lots of suggestions at <a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html\">https://rustc-dev-guide.rust-lang.org/building/suggested.html</a>)</p>",
        "id": 209108935,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599233924
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/issues/65031\">https://github.com/rust-lang/rust/issues/65031</a> would be a good start on the compiler end too</p>",
        "id": 209109177,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599234039
    },
    {
        "content": "<p>to make incremental better and memory usage lower</p>",
        "id": 209109203,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599234055
    },
    {
        "content": "<p>If we shorten compile times I won't have an excuse to get next gen Ryzen once they are released <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 209110926,
        "sender_full_name": "mati865",
        "timestamp": 1599235001
    },
    {
        "content": "<p>Depends on if we shorten them by making them take better advantage of parallelism.</p>",
        "id": 209114845,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599237246
    },
    {
        "content": "<p>I really want to blog about this, but my plan for improving compile times would be:</p>\n<ol start=\"0\">\n<li>by default, just fail the build if there's no system-provided llvm. Building llvm from-source should require explicit descision in config.toml. </li>\n<li>split <code>library</code> into a seaprate workspace. Put <code>.rustup-toolchain</code> with <code>beta-xx-xx-xxxx</code> into the <code>library/</code> and make <code>cd library &amp; cargo test</code> just work. This should fix problems with contributing to stdlib. This also involves solving libtest problem.</li>\n<li>make <code>rustc</code> build with beta stdlib. This means you need to wait 4 weeks before introducing feature into std and using it in the compiler, but this removes bootstrap. </li>\n<li>Now that <code>rustc</code> itself doesn't need special stdlib, uplift <code>.rustup-toolchain</code> to the root of the repository and make <code>cd compiler &amp;&amp; cargo test</code> work.</li>\n<li>split <code>compiler</code> into <code>analysis</code> and <code>emit</code>. <code>analysis</code> doesn't depend on linkers and codegen, contains the builk of the compiler (everything up to and including mir-opt), can run <code>check</code> builds, is mostly a sans-io pure function. <code>emit</code> is the wonderful world of LLVM and linkers, and the only part of <code>rustc</code> which genuinely <em>needs</em> weird build process.</li>\n</ol>",
        "id": 209115002,
        "sender_full_name": "matklad",
        "timestamp": 1599237360
    },
    {
        "content": "<ol start=\"5\">\n<li>(for /me specifically) find a more permanent appartment in Berlin to have a place to put a decent desktop PC in.</li>\n</ol>",
        "id": 209115119,
        "sender_full_name": "matklad",
        "timestamp": 1599237444
    },
    {
        "content": "<blockquote>\n<p>make rustc build with beta stdlib. This means you need to wait 4 weeks before introducing feature into std and using it in the compiler, but this removes bootstrap. </p>\n</blockquote>\n<p>I think the main reason for not using beta libstd is that that would mean that libstd would only work with the rustc in tree and not the beta rustc anymore. This would make life harder for libstd contributors.</p>",
        "id": 209115295,
        "sender_full_name": "bjorn3",
        "timestamp": 1599237553
    },
    {
        "content": "<p>I don't quite follow -- at the moment compiling <code>rustc</code> itself requires <code>master</code> libstd. If we loosen that requirement to <code>beta</code> libstd, that would increase the set of things which are compatible, right?</p>",
        "id": 209115507,
        "sender_full_name": "matklad",
        "timestamp": 1599237699
    },
    {
        "content": "<p>It also means that rustc cannot assume that new lang items are available</p>",
        "id": 209115514,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599237703
    },
    {
        "content": "<p>I mean, it would still require <code>master</code> libstd for compiling user code. It's just that for compiling compiler itself we'd use beta.</p>",
        "id": 209115748,
        "sender_full_name": "matklad",
        "timestamp": 1599237847
    },
    {
        "content": "<p>If the master libstd is no longer built by beta rustc by default anymore for the first stage, it's support will likely bitrot.</p>",
        "id": 209115856,
        "sender_full_name": "bjorn3",
        "timestamp": 1599237938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209115748\">said</a>:</p>\n<blockquote>\n<p>I mean, it would still require <code>master</code> libstd for compiling user code. It's just that for compiling compiler itself we'd use beta.</p>\n</blockquote>\n<p>ah, that might work</p>",
        "id": 209116048,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599238076
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209115856\">said</a>:</p>\n<blockquote>\n<p>If the master libstd is no longer built by beta rustc by default anymore for the first stage, it's support will likely bitrot.</p>\n</blockquote>\n<p>maybe we could have CI test this but not require it from contributors?</p>",
        "id": 209116160,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599238144
    },
    {
        "content": "<p>but I'm confused at the stages of bootstrapping again and not really following</p>",
        "id": 209116175,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599238155
    },
    {
        "content": "<p>A CI test would make life harder for everyone changing the contract between libstd and rustc.</p>",
        "id": 209116277,
        "sender_full_name": "bjorn3",
        "timestamp": 1599238205
    },
    {
        "content": "<p>it would still be <em>possible</em> to test locally</p>",
        "id": 209116314,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599238242
    },
    {
        "content": "<p>just not the default</p>",
        "id": 209116316,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599238244
    },
    {
        "content": "<p>changing the contract seems not exactly niche, but not super common either</p>",
        "id": 209116340,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599238262
    },
    {
        "content": "<p>I mean, it is build by beta rustc in my plan.</p>\n<p>So, we have a <code>.rust-toolchain</code> with specific beta in the root of the repository. </p>\n<p><code>cd library &amp; cargo test</code> builds and tests libstd(runtime) using rustuped beta compiler. This looks like \"just a crate\", and tests the bulk of libstd (untested parts are langitems and other integrations with compiler).</p>\n<p><code>cd analysis &amp; cargo tests</code> builds and tests rustc using rustuped beta compiler &amp; beta stdlib. It also runs all UI tests which do not require <code>// run-pass</code>. </p>\n<p><code>cd emit &amp; cargo test</code>takes <code>analysis</code> and <code>libstd</code> build previously, adds LLVM to the mix and produces a <code>rustc</code> executable capable of actually comping the programs. This finally runs the <code>// run-pass</code> / <code>full-deps</code> tests</p>",
        "id": 209116450,
        "sender_full_name": "matklad",
        "timestamp": 1599238323
    },
    {
        "content": "<p>Maaybe in the second step we  want to rely on .rmeta from libstd for the first step (so as not to stub libstd in tests)</p>",
        "id": 209116560,
        "sender_full_name": "matklad",
        "timestamp": 1599238399
    },
    {
        "content": "<p>hmm, how would <code>RUSTC_BOOTSTRAP</code> get set in that scheme?</p>",
        "id": 209116669,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599238446
    },
    {
        "content": "<p><del>build.rs</del></p>",
        "id": 209116773,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599238525
    },
    {
        "content": "<p>Just a giant hack somewhere, like checking <code>.rustc_bootstrap</code> file on disk. Or maybe just telling the user \"set RUSTC_BOOTSTRAP' env var. </p>\n<p>At worst, we can <code>cargo xtask test</code></p>",
        "id": 209116781,
        "sender_full_name": "matklad",
        "timestamp": 1599238529
    },
    {
        "content": "<p>But the core ideas are:</p>\n<ul>\n<li>there's no fundamental reason why std is not \"just a crate\"</li>\n<li>there's no fundamental reason why rustc is not \"just a crate\"</li>\n<li>the only hard bit about compilers is interfacing with external tools (llvm &amp; linkers), the rest is pure functions and text processing (should've written rustc in perl /s)</li>\n</ul>",
        "id": 209117061,
        "sender_full_name": "matklad",
        "timestamp": 1599238656
    },
    {
        "content": "<p>yeah</p>",
        "id": 209117378,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599238797
    },
    {
        "content": "<p>you can't run UI tests without the libstd from master though, since the beta libstd might be missing lang items</p>",
        "id": 209117502,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599238834
    },
    {
        "content": "<p>Yeah, I think the practical solution is to take <code>libstd</code> for building UI tests. In theory, we can stub minimal parts of libstd, like we do in rust-analyzer, but I am afraid that won't work in practice.</p>",
        "id": 209117776,
        "sender_full_name": "matklad",
        "timestamp": 1599238974
    },
    {
        "content": "<p>Hm, I think I need to think more about this.... reading <code>.rmeta</code>s adds a dependency edge from <code>analysis</code> to <code>emit</code> , and that's bad...</p>",
        "id": 209117851,
        "sender_full_name": "matklad",
        "timestamp": 1599239030
    },
    {
        "content": "<p>does it?</p>",
        "id": 209118029,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599239110
    },
    {
        "content": "<p>Even if you take <code>.rmeta</code> produced by <code>beta</code>, you'd still have to read it....</p>\n<p>Wait, I guess analysis is exactly the thing that produces <code>.rmeta</code>s (if we define <code>.rmeta</code> to be clean enough, I have zero idea what's actually incuded there today). So yeah, seems like problem solved, thanks <span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink</span>  :)</p>",
        "id": 209118202,
        "sender_full_name": "matklad",
        "timestamp": 1599239206
    },
    {
        "content": "<p>I'm still most interested in reducing <code>rustc_middle</code>'s build time. A fresh build of this crate itself takes about 1800 seconds on my machine. And incremental build it (even its code not changed at all) takes about 200 seconds. If there's anything i can help with, i'm happy to help!</p>",
        "id": 209120894,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599240782
    },
    {
        "content": "<p>Besides, i'm also interested in reducing the generation of so many small <code>.o</code> and <code>.bc.z</code> files under <code>target/incremental</code> directories. I'm on windows and i'm using disk indexing tools (everything.exe). Generating large amount of small files even slows down the whole system.</p>",
        "id": 209121328,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599241050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> You might consider turning off indexing of target and build directories.</p>",
        "id": 209122015,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599241504
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209120894\">said</a>:</p>\n<blockquote>\n<p>I'm still most interested in reducing <code>rustc_middle</code>'s build time. A fresh build of this crate itself takes about 1800 seconds on my machine. And incremental build it (even its code not changed at all) takes about 200 seconds. If there's anything i can help with, i'm happy to help!</p>\n</blockquote>\n<p>I think there was some discussion of separating it into crates in <a href=\"https://github.com/rust-lang/rust/issues/65031\">https://github.com/rust-lang/rust/issues/65031</a></p>",
        "id": 209122136,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599241576
    },
    {
        "content": "<p>that might be a good starting point</p>",
        "id": 209122143,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599241583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> also suggested 'less generics' but it would need someone familiar with that part of the compiler I think</p>",
        "id": 209122172,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599241610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  yes, i think i can give this a try... thanks for the advice</p>",
        "id": 209122233,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599241669
    },
    {
        "content": "<p>Actually i'm a little curious about \"why is compiling that crate so slow\" i've learnt about the <code>-Z self-profile</code> argument before, just haven't investigate into using that yet.</p>",
        "id": 209122435,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599241796
    },
    {
        "content": "<p>instructions for self-profile: <a href=\"https://github.com/rust-lang/measureme/blob/master/summarize/Readme.md\">https://github.com/rust-lang/measureme/blob/master/summarize/Readme.md</a></p>",
        "id": 209122526,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599241830
    },
    {
        "content": "<p>thanks!</p>",
        "id": 209122710,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599241935
    },
    {
        "content": "<p>I was about to suggest the official blog post on the feature, but this would probably be more up-to-date</p>",
        "id": 209122791,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1599241999
    },
    {
        "content": "<p>The instructions in the summarize Readme should up to to date but the blog post covers the rest of the tooling you can use as well <a href=\"https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html\">https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html</a></p>",
        "id": 209123715,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1599242546
    },
    {
        "content": "<p>Thanks, i think i need instructions on using it together with x.py. I'm installing the <code>crox flamegraph summarize</code> tools.</p>",
        "id": 209124376,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599242933
    },
    {
        "content": "<p>installation finished. now i'm using x.py to update the git submodules. downloading llvm source code now... i think it will take about 15 minutes...</p>",
        "id": 209125262,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599243476
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Updating submodule src/llvm-project\nremote: Enumerating objects: 99719, done.\nremote: Counting objects: 100% (99719/99719), done.\nReceiving objects:  53% (143721/270841), 47.39 MiB | 117.00 KiB/s\n</code></pre></div>\n\n\n<p>finished half</p>",
        "id": 209126029,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599243936
    },
    {
        "content": "<p><code>Submodules updated in 2058.72 seconds</code></p>",
        "id": 209128291,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599245254
    },
    {
        "content": "<p>finished downloading beta compiler and now building <code>bootstrap</code>.</p>",
        "id": 209128609,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599245437
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Compiling bootstrap v0.0.0 (L:\\ThirdParty\\rust\\rust-workdir\\src\\bootstrap)\n    Finished dev [unoptimized + debuginfo] target(s) in 1m 47s\n</code></pre></div>",
        "id": 209128720,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599245503
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116458\">@Charles Lew</span> IIRC, the issue with middle is the query system, which generates a <em>lot</em> of code for each of the 300 queries. Most of the codegen time is there. Refactoring it may be required at some point.</p>",
        "id": 209128724,
        "sender_full_name": "cjgillot",
        "timestamp": 1599245508
    },
    {
        "content": "<p>Oh, by the way it seems <code>ninja</code> is now recommended and there's no instructions for MSVC users on where to get and where to put it though...</p>",
        "id": 209129297,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599245813
    },
    {
        "content": "<p>Retrieved a binary exe from github and added the dir to PATH and it works fine</p>",
        "id": 209129452,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599245924
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>L:\\ThirdParty\\rust\\rust-workdir&gt;python3 x.py check compiler/rustc_middle -- -Z self-profile\nUpdating only changed submodules\nSubmodules updated in 0.20 seconds\n    Finished dev [unoptimized + debuginfo] target(s) in 0.27s\nthread &#39;main&#39; panicked at &#39;error: no rules matched -Z&#39;, src\\bootstrap\\builder.rs:235:21\nstack backtrace:\n   0: std::panicking::begin_panic_handler\n             at /rustc/0f91f5c284c72e69bb7115586b7756874c59cbbe\\/library\\std\\src\\panicking.rs:475\n</code></pre></div>",
        "id": 209129654,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599246043
    },
    {
        "content": "<p>what's the proper way to add a compile flag to <code>x.py check</code>?</p>",
        "id": 209129901,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599246168
    },
    {
        "content": "<p><code>RUSTFLAGS</code>, <code>RUSTFLAGS_BOOTSTRAP</code>, or <code>RUSTFLAGS_NOT_BOOTSTRAP</code></p>",
        "id": 209129953,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599246203
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 209130365,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599246433
    },
    {
        "content": "<p>Wow, i feel <code>x.py check</code> runs much much faster than last time i built rustc. Is this the effect of changing the default configuration of <code>debuginfo-level</code>from 2 to 1???!</p>",
        "id": 209132268,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599247587
    },
    {
        "content": "<p>I'm building llvm and will try <code>x.py build</code> out shortly.</p>",
        "id": 209132376,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599247669
    },
    {
        "content": "<p>Hmm, I wouldn't expect that to affect check, only linking</p>",
        "id": 209132741,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599247914
    },
    {
        "content": "<p>But maybe</p>",
        "id": 209132746,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599247917
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209132747,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599247917
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 209132748,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599247917
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>-- Installing: L:/ThirdParty/rust/rust-workdir/build/x86_64-pc-windows-msvc/llvm/lib/cmake/llvm/./VersionFromVCS.cmake\ncargo:root=L:\\ThirdParty\\rust\\rust-workdir\\build\\x86_64-pc-windows-msvc\\llvm\n        finished in 3096.635\n</code></pre></div>\n\n\n<p>Actually quite a large part (a quarter of it?) of llvm building is building all sorts of executables, which rust doesn't use at all, i think.</p>",
        "id": 209136478,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599250498
    },
    {
        "content": "<p>Semi related: I usually disable most of the LLVM targets. I think the set I use currently is \"ARM;AARCH64;X86;WebAssembly\"</p>",
        "id": 209137201,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1599251042
    },
    {
        "content": "<p>I am fairly confident in having the llvm build skipped for most contributors so I wouldn't try to optimize its build right now</p>",
        "id": 209137337,
        "sender_full_name": "simulacrum",
        "timestamp": 1599251121
    },
    {
        "content": "<p>I usually disable most of the LLVM targets too, just enable \"X86\".  There're three unit tests in rustc that will fall under this configuration though.</p>",
        "id": 209139263,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599252507
    },
    {
        "content": "<p>Initial build is done!</p>\n<div class=\"codehilite\"><pre><span></span><code>[RUSTC-TIMING] rustc_codegen_llvm test:false 295.645\n[RUSTC-TIMING] rustc_interface test:false 248.740\n[RUSTC-TIMING] rustc_middle test:false 1572.314\n[RUSTC-TIMING] rustc_mir test:false 712.805\n   Compiling rustc_driver v0.0.0 (L:\\ThirdParty\\rust\\rust-workdir\\compiler\\rustc_driver)\n[RUSTC-TIMING] rustc_driver test:false 181.361\n   Compiling rustc-main v0.0.0 (L:\\ThirdParty\\rust\\rust-workdir\\compiler\\rustc)\n[RUSTC-TIMING] rustc_main test:false 1.146\n    Finished release [optimized] target(s) in 33m 16s\n</code></pre></div>",
        "id": 209139301,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599252533
    },
    {
        "content": "<p>how do you get the RUSTC-TIMING output?</p>",
        "id": 209139362,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599252566
    },
    {
        "content": "<p>I remember <code>rustc_middle</code> took 1800s last time, so there're 300s improvement since my last full build.</p>",
        "id": 209139381,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599252579
    },
    {
        "content": "<p>let me see...</p>",
        "id": 209139389,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599252584
    },
    {
        "content": "<p><code>print-step-timings</code> looks right</p>",
        "id": 209139403,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599252594
    },
    {
        "content": "<p>yeah</p>",
        "id": 209139491,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599252638
    },
    {
        "content": "<p>that's it</p>",
        "id": 209139495,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599252644
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>L:\\ThirdParty\\rust\\rust-workdir&gt;summarize summarize rustc_middle-11344\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| Item                                             | Self time | % of total time | Time     | Item count |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_passes                                      | 1164.79s  | 29.627          | 1165.62s | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| codegen_crate                                    | 578.14s   | 14.705          | 1237.43s | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_module_optimize_module_passes               | 525.41s   | 13.364          | 525.41s  | 256        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_thin_lto_import                             | 260.49s   | 6.625           | 260.49s  | 256        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| finish_ongoing_codegen                           | 218.49s   | 5.557           | 218.71s  | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_lto_optimize                                | 212.26s   | 5.399           | 212.26s  | 256        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| codegen_module                                   | 189.05s   | 4.809           | 231.81s  | 256        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| LLVM_module_codegen_emit_obj                     | 133.01s   | 3.383           | 133.01s  | 256        |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| monomorphization_collector_graph_walk            | 120.19s   | 3.057           | 274.14s  | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| incr_comp_serialize_dep_graph                    | 63.82s    | 1.623           | 63.82s   | 1          |\n+--------------------------------------------------+-----------+-----------------+----------+------------+\n| free_global_ctxt                                 | 46.06s    | 1.171           | 46.06s   | 1          |\n</code></pre></div>",
        "id": 209139711,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599252779
    },
    {
        "content": "<blockquote>\n<p>LLVM_passes                                      | 1164.79s  | 29.627          | 1165.62s | 1          |</p>\n</blockquote>\n<p>ouch</p>",
        "id": 209139740,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599252806
    },
    {
        "content": "<p>To toss in my 2¢: I was on a i5-2500k from 2011 until a few months ago.  LLVM was definitely the biggest problem for getting started for me -- IIRC the build for that was up around an hour -- so I definitely avoided anything that bumped it if I could.  After that was done, <code>--incremental</code> and <code>--keep-stage N</code> made working on it tolerable.  Not amazing, but also not out of line from the kinds of builds I expect from $job.  But I also never made drastic compiler changes.</p>\n<p>(I recently splurged on a 3950x, and _wow_.  That gets a clean LLVM build down to ~5min, which is a whole new ball game.)</p>",
        "id": 209140620,
        "sender_full_name": "scottmcm",
        "timestamp": 1599253351
    },
    {
        "content": "<p>so really we should just ship 3950x's to anyone who contributes a PR, problem solved</p>",
        "id": 209140886,
        "sender_full_name": "simulacrum",
        "timestamp": 1599253547
    },
    {
        "content": "<p>Great job everyone! Rust compile times are solved ;)</p>",
        "id": 209140967,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1599253588
    },
    {
        "content": "<p>oof, those timing hurt</p>\n<blockquote>\n<p>free_global_ctxt                                 | 46.06s</p>\n</blockquote>\n<p>why does it spend 46 seconds deallocating stuff?</p>",
        "id": 209140978,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599253597
    },
    {
        "content": "<p>more seriously, I do wonder whether it makes sense to suggest e.g. gcc build farm</p>",
        "id": 209140986,
        "sender_full_name": "simulacrum",
        "timestamp": 1599253601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211727\">@Jonas Schievink</span> probably because that's dropping basically all compiler state which probably needs to walk a <em>ton</em> of memory</p>",
        "id": 209141046,
        "sender_full_name": "simulacrum",
        "timestamp": 1599253636
    },
    {
        "content": "<p>I feel like the compile times would be more tolerable if things weren't swapping to disk all the time</p>",
        "id": 209141056,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599253643
    },
    {
        "content": "<p>but also compile times are decent for me already so my opinion shouldn't count for much :P</p>",
        "id": 209141074,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599253656
    },
    {
        "content": "<p>We should probably make it a goal that compilation of the full tree with -j4 or something succeeds in 4GB</p>",
        "id": 209141162,
        "sender_full_name": "simulacrum",
        "timestamp": 1599253700
    },
    {
        "content": "<p>I also \"solved\" this with a 12-core CPU, but... we should be able to do better</p>",
        "id": 209141164,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1599253703
    },
    {
        "content": "<p>Something like \"1GB RAM per core permitted\" seems like a reasonable constraint, though we probably need at least a few gigabytes no matter how many cores you have</p>",
        "id": 209141269,
        "sender_full_name": "simulacrum",
        "timestamp": 1599253780
    },
    {
        "content": "<p>I mean, I don't think we need to make compiling with 2 GB a goal or anything like that</p>",
        "id": 209141467,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599253855
    },
    {
        "content": "<p>but people shouldn't need to buy new hardware to work on the compiler</p>",
        "id": 209141475,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599253863
    },
    {
        "content": "<p>sure, but I think compiling in 4 GB is a reasonable goal -- that's about how much free RAM an 8gb computer is likely to have at ~idle with a browser and some other stuff open</p>",
        "id": 209141615,
        "sender_full_name": "simulacrum",
        "timestamp": 1599253936
    },
    {
        "content": "<p>and 4gb/8gb computers are pretty common for entry-level hardware today</p>",
        "id": 209141637,
        "sender_full_name": "simulacrum",
        "timestamp": 1599253953
    },
    {
        "content": "<p>When I see complaints about \"2 hour\" long compiles for compiler, I have to think 1) they're going to stage 2 (which is now fixed!) and 2) they're hitting swap. Is there anyway we could detect that and just print a message at the end of the ./x.py script like \"consider lowering the concurrent job count with -j 2\"?</p>",
        "id": 209141758,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1599254047
    },
    {
        "content": "<blockquote>\n<p>2) they're hitting swap</p>\n</blockquote>\n<p>I hit swap even on my beefy machine btw</p>",
        "id": 209141940,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599254196
    },
    {
        "content": "<p>with 8 GB of RAM running nothing else</p>",
        "id": 209141960,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599254205
    },
    {
        "content": "<p>8GB of RAM in a beefy machine is probably the problem there, though</p>",
        "id": 209141996,
        "sender_full_name": "simulacrum",
        "timestamp": 1599254237
    },
    {
        "content": "<p>I wonder how hard it is to detect swap</p>",
        "id": 209142007,
        "sender_full_name": "simulacrum",
        "timestamp": 1599254255
    },
    {
        "content": "<p>you right <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 209142009,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599254256
    },
    {
        "content": "<p>Is there a way to tell cargo to forbid/limit parallelism when compiling some specific crates ?</p>",
        "id": 209142030,
        "sender_full_name": "cjgillot",
        "timestamp": 1599254271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> not to my knowledge, and it would be pretty hard to add in I think</p>",
        "id": 209142096,
        "sender_full_name": "simulacrum",
        "timestamp": 1599254296
    },
    {
        "content": "<p>That said, I guess the better solution is probably some kind of ram-use limit in addition to the CPU threads jobserver we have now</p>",
        "id": 209142124,
        "sender_full_name": "simulacrum",
        "timestamp": 1599254323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116458\">Charles Lew</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209136478\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>-- Installing: L:/ThirdParty/rust/rust-workdir/build/x86_64-pc-windows-msvc/llvm/lib/cmake/llvm/./VersionFromVCS.cmake\ncargo:root=L:\\ThirdParty\\rust\\rust-workdir\\build\\x86_64-pc-windows-msvc\\llvm\n        finished in 3096.635\n</code></pre></div>\n\n\n<p>Actually quite a large part (a quarter of it?) of llvm building is building all sorts of executables, which rust doesn't use at all, i think.</p>\n</blockquote>\n<p>Rust does use <em>some</em> of those executables.</p>",
        "id": 209142650,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599254750
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209141996\">said</a>:</p>\n<blockquote>\n<p>8GB of RAM in a beefy machine is probably the problem there, though</p>\n</blockquote>\n<p>I had a similar program with my machine which is why I'm now at 16 threads 32gb RAM. Running like 10 linker jobs while rustc_middle is compiling eats a lot of RAM.</p>",
        "id": 209143425,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1599255437
    },
    {
        "content": "<p>If someone here wants to review <a href=\"https://github.com/rust-lang/rust/pull/76332\">https://github.com/rust-lang/rust/pull/76332</a>, I'd appreciate it. It's the first step to getting CI-built LLVM usable locally (which I am able to do locally already, just posting that as a separate PR shortly).</p>",
        "id": 209146498,
        "sender_full_name": "simulacrum",
        "timestamp": 1599258353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209105834\">said</a>:</p>\n<blockquote>\n<p>and so I can imagine our contributors having a similar worry, unless it were explicitly stated to be an encouraged workflow</p>\n</blockquote>\n<p>At the moment, I think the Getting Started guide actually does mention this strategy, but it still feels a bit hacky to use CI like this...</p>",
        "id": 209147948,
        "sender_full_name": "mark-i-m",
        "timestamp": 1599259975
    },
    {
        "content": "<p>I've done that before, and always felt bad/dumb about it.</p>",
        "id": 209147962,
        "sender_full_name": "Lokathor",
        "timestamp": 1599260005
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209146498\">said</a>:</p>\n<blockquote>\n<p>If someone here wants to review <a href=\"https://github.com/rust-lang/rust/pull/76332\">https://github.com/rust-lang/rust/pull/76332</a>, I'd appreciate it. It's the first step to getting CI-built LLVM usable locally (which I am able to do locally already, just posting that as a separate PR shortly).</p>\n</blockquote>\n<p>I don't know <em>too</em> much about bootstrap but it looks reasonable. Thanks for working on this!</p>",
        "id": 209148294,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599260353
    },
    {
        "content": "<p>So I just skimmed the thread.... re: using CI as replacement for a good machine. I would agree with <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that it's not a great workaround for all the reasons mentioned in the thread. If we wanted to go this route, I would say we should instead provide a build farm (not sure how feasible/expensive that is) and some sort of command to submit tasks and get the artifacts back easily (e.g. something like bazel, I guess).</p>",
        "id": 209148711,
        "sender_full_name": "mark-i-m",
        "timestamp": 1599260746
    },
    {
        "content": "<p>Alternately, shipping precompiled versions of the different compiler crates could be a big help (and then only build what changed)... though I guess if you're working on <code>rustc_span</code> or something like that, it would be useless.</p>",
        "id": 209148791,
        "sender_full_name": "mark-i-m",
        "timestamp": 1599260826
    },
    {
        "content": "<p>I'm off for the night, probably, but I'm optimistic about getting the LLVM work ready to go this weekend for at least beta-testing (with it off by default, but we can recommend in rustc-dev-guide etc)</p>",
        "id": 209148857,
        "sender_full_name": "simulacrum",
        "timestamp": 1599260894
    },
    {
        "content": "<p>Long term, I think my vision is to have something similar to what <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> described. <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> and I had some discussion about something like this a while back. Basically, we would use the beta to build <code>std</code>/etc</p>",
        "id": 209148858,
        "sender_full_name": "mark-i-m",
        "timestamp": 1599260897
    },
    {
        "content": "<p>and then we could also try to shift towards using cargo instead of x.py</p>",
        "id": 209148868,
        "sender_full_name": "mark-i-m",
        "timestamp": 1599260912
    },
    {
        "content": "<p>This discussion I think: <a href=\"#narrow/stream/182449-t-compiler.2Fhelp/topic/why.20stage.202.3F\">https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/why.20stage.202.3F</a></p>",
        "id": 209148989,
        "sender_full_name": "mark-i-m",
        "timestamp": 1599261061
    },
    {
        "content": "<p>One thing I do think is fine for people to use CI to do: running <em>all</em> the tests.  So long as people run some related tests locally, I think it's fine for them to not run all the rest -- or at least I hope so, since I certainly don't.  (I run more than I used to now, but just running the <code>ui</code> tests will saturate all 32 hyperthreads and most of a very fast PCIe NVMe drive for a while...)</p>",
        "id": 209150381,
        "sender_full_name": "scottmcm",
        "timestamp": 1599262752
    },
    {
        "content": "<p>yes I definitely don't run all the tests locally</p>",
        "id": 209150659,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599263096
    },
    {
        "content": "<p>the thing I think is crucial is getting a <em>stage1 build</em> locally, because otherwise you can't run the debugger/use rustc_log/etc</p>",
        "id": 209150675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599263119
    },
    {
        "content": "<p>a somewhat related question: is it possible for tools to build against the latest nightly instead of building stage1 rustc from source?</p>",
        "id": 209154979,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599269336
    },
    {
        "content": "<p>I think clippy and rustfmt might already do this</p>",
        "id": 209154991,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599269353
    },
    {
        "content": "<p>but rustdoc definitely requires a stage1 build currently</p>",
        "id": 209154993,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599269361
    },
    {
        "content": "<p>I set RUSTFLAGS_BOOTSTRAP from \"<code>-Z self-profile</code>\" to \"\" and a huge rebuild was triggered... Is it possible to make it smarter here?</p>",
        "id": 209161921,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599281993
    },
    {
        "content": "<p>This time, it's an incremental build, and</p>\n<div class=\"codehilite\"><pre><span></span><code>[RUSTC-TIMING] rustc_middle test:false 364.645\n</code></pre></div>\n\n\n<p>But since there's no code change at all i do think it can be perhaps be a little faster.</p>",
        "id": 209162299,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599282630
    },
    {
        "content": "<p>build done.</p>\n<div class=\"codehilite\"><pre><span></span><code>[RUSTC-TIMING] rustc_driver test:false 176.478\n   Compiling rustc-main v0.0.0 (L:\\ThirdParty\\rust\\rust-workdir\\compiler\\rustc)\n[RUSTC-TIMING] rustc_main test:false 1.824\n    Finished release [optimized] target(s) in 15m 29s\n</code></pre></div>",
        "id": 209162365,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599282822
    },
    {
        "content": "<p>I have a machine with like 16 gig, 8 gig available (before digging through and freeing anything)<br>\n, and it still takes me forever to build (because it's an i5-3210M)</p>",
        "id": 209166917,
        "sender_full_name": "Jubilee",
        "timestamp": 1599292626
    },
    {
        "content": "<p>recently fixed-ish the screen on my machine with 32gb tho', so let's see how building rustc in a tmpfs goes. :^)</p>",
        "id": 209169124,
        "sender_full_name": "Jubilee",
        "timestamp": 1599296752
    },
    {
        "content": "<p>sorry, wrong thread.</p>",
        "id": 209170849,
        "sender_full_name": "lzutao",
        "timestamp": 1599299861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209107490\">said</a>:</p>\n<blockquote>\n<p>the git trees for submodules are shared</p>\n</blockquote>\n<p>they are not on my system... I did some special hacks to share them for llvm, but I am pretty sure it is not the default</p>",
        "id": 209171682,
        "sender_full_name": "RalfJ",
        "timestamp": 1599301419
    },
    {
        "content": "<p>big <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> for downloading precompiled LLVM; by laptop isn't beefy but also far from slow and LLVM upgrades are a major pain with builds taking 30min or so (a stage1 build otherwise is &lt;10min). Huge <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> to <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> for working on this. :)</p>",
        "id": 209171729,
        "sender_full_name": "RalfJ",
        "timestamp": 1599301480
    },
    {
        "content": "<p>re <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>'s proposals, I have to say I am rather skeptical of making rustc build with beta libstd. for things like intrinsics and lang items, I think that will be a huge pain. And it by no means removes the need for <code>cfg(bootstrap)</code>, it rather shifts it to rsutc itself -- which now needs to build with beta libstd and master libstd, and will likely require <code>cfg</code> tricks to make that work.</p>",
        "id": 209171781,
        "sender_full_name": "RalfJ",
        "timestamp": 1599301562
    },
    {
        "content": "<blockquote>\n<p>IIRC, the issue with middle is the query system, which generates a lot of code for each of the 300 queries. Most of the codegen time is there. Refactoring it may be required at some point.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span> for the reference, that was exactly the problem in rust-analyzer. We were able to get <strong>6x</strong> reduction in <code>cargo llvm-lines</code> by making the physical architecture of our query system more sound. I can't give a number for wall-clock compile times, but they also went up down significantly. </p>\n<p>I am not sure if rustc has exactly the same problem, but let me share some details about rust-analyzer's case.</p>\n<p>So, originally all query functions were generic over the \"database\". This caused two problems:</p>\n<ul>\n<li>first, no codegen happend in the crates that defined the queries. IE, the type-checker crate was pretty fast to compile, but just because it didn't bother to generate any code at all, pushing this time to the consumers. </li>\n<li>second, each query was monomorphised many times, once for each consumer (there's no -Zshared-generics in release happening). With N layers, you get N^2 of code gen, which is as bad as it sounds.</li>\n</ul>\n<p>The high-level fix was \"make sure that all the codegen happens in the upstream crate\". Or, equivalently, all <code>pub</code> functions must be non-generic. </p>\n<p>The impl of the fix was to <code>dyn</code> everything.</p>",
        "id": 209171848,
        "sender_full_name": "matklad",
        "timestamp": 1599301686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> do you have run-time performance stats on that?</p>",
        "id": 209171969,
        "sender_full_name": "simulacrum",
        "timestamp": 1599301936
    },
    {
        "content": "<blockquote>\n<p>for things like intrinsics and lang items, I think that will be a huge pain. </p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> <code>rustc</code> will use <code>master</code> <code>libstd</code> to compile user's code. That is, <code>libstd</code> we use to compiler <code>rustc</code> and <code>libstd</code>used by <code>rustc</code> to compile user code need not be related (like, we can even write <code>rustc</code> in C++).</p>",
        "id": 209171972,
        "sender_full_name": "matklad",
        "timestamp": 1599301946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> with staging they either must be related or we need to keep two stds around in tree or something</p>",
        "id": 209171984,
        "sender_full_name": "simulacrum",
        "timestamp": 1599301997
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> stage 2 rustc will use master libstd I assume? otherwise a bootstrap bump is going to be a big pain</p>",
        "id": 209171987,
        "sender_full_name": "RalfJ",
        "timestamp": 1599302022
    },
    {
        "content": "<p>(we must build rustc twice - the second time around must have in-tree std, just because you don't have any other std)</p>",
        "id": 209172033,
        "sender_full_name": "simulacrum",
        "timestamp": 1599302050
    },
    {
        "content": "<p>also, the pain I was referring to is introducing a new lang item or intrinsic, and making use of it -- which would involve waiting for 6 weeks untilt eh new thing is in beta libstd, or so?</p>",
        "id": 209172035,
        "sender_full_name": "RalfJ",
        "timestamp": 1599302054
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209154991\">said</a>:</p>\n<blockquote>\n<p>I think clippy and rustfmt might already do this</p>\n</blockquote>\n<p>Clippy just like rustdoc build only with master. It's CI downloads the latest build with <code>rustup-toolchain-install-master</code>.</p>",
        "id": 209172043,
        "sender_full_name": "mati865",
        "timestamp": 1599302089
    },
    {
        "content": "<blockquote>\n<p>also, the pain I was referring to is introducing a new lang item or intrinsic, and making use of it -- which would involve waiting for 6 weeks untilt eh new thing is in beta libstd, or so?</p>\n</blockquote>\n<p>Using intrinsic in the compiler would require waiting 6 weeks. Generated the code that uses the intrinsic does not require waiting six weeks. Using intrinsic in libstd does not require waiting six weeks.</p>",
        "id": 209172092,
        "sender_full_name": "matklad",
        "timestamp": 1599302189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> found some numbers</p>\n<ul>\n<li>wall-clock compile times, 3x decrease: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1987#issuecomment-654697310\">https://github.com/rust-analyzer/rust-analyzer/issues/1987#issuecomment-654697310</a></li>\n<li>runtime-perf difference, in the noise: <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/5242#issuecomment-654709072\">https://github.com/rust-analyzer/rust-analyzer/pull/5242#issuecomment-654709072</a></li>\n</ul>\n<p>But runtime-perf should be taken with 16.38 kilos of salt -- rust-analyzer's runtime is generally \"horribly slow\", it's a soup of <code>Arc</code>s and wasn't nearly as good optimized as <code>rustc</code>. So, the finding is \"if your code is already pretty slow, <code>dyn</code> doesn't make it slower\"</p>",
        "id": 209172163,
        "sender_full_name": "matklad",
        "timestamp": 1599302371
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> if in-tree libstd has to build with the beta compiler, it cannot use new intrinsics</p>",
        "id": 209172165,
        "sender_full_name": "RalfJ",
        "timestamp": 1599302375
    },
    {
        "content": "<p>Hm, riiight, we'd need <code>cfg(bootstrap)</code> for std for that (but we need it today anyway, right? We do build libstd with beta?)</p>",
        "id": 209172216,
        "sender_full_name": "matklad",
        "timestamp": 1599302443
    },
    {
        "content": "<p>std and rustc have a very close interaction for intrinsics and lang items, there is basically a 1:1 mapping of compatible rustc's and libstd'. I do not think there is a good way to break that apart.</p>",
        "id": 209172217,
        "sender_full_name": "RalfJ",
        "timestamp": 1599302448
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209172216\">said</a>:</p>\n<blockquote>\n<p>Hm, riiight, we'd need <code>cfg(bootstrap)</code> for std for that (but we need it today anyway, right? We do build libstd with beta?)</p>\n</blockquote>\n<p>yeah we disable new intrinsics via <code>cfg(bootstrap)</code></p>",
        "id": 209172222,
        "sender_full_name": "RalfJ",
        "timestamp": 1599302472
    },
    {
        "content": "<p>so they get included in stage 1 std only</p>",
        "id": 209172227,
        "sender_full_name": "RalfJ",
        "timestamp": 1599302489
    },
    {
        "content": "<p>with your proposal... we'd probably need to do the same for all of rustc? have <code>cfg(bootstrap)</code> to determine if this is built against the bootstrap(beta) libstd or the master one</p>",
        "id": 209172271,
        "sender_full_name": "RalfJ",
        "timestamp": 1599302536
    },
    {
        "content": "<p>so that we can use new libstd features in stage 2 at least (which would be a pain to test then)</p>",
        "id": 209172276,
        "sender_full_name": "RalfJ",
        "timestamp": 1599302561
    },
    {
        "content": "<p>not sure what you mean by \"this removes bootstrap\" but I think that's impossible unless we re-implement rustc in another language^^</p>",
        "id": 209172287,
        "sender_full_name": "RalfJ",
        "timestamp": 1599302623
    },
    {
        "content": "<blockquote>\n<p>std and rustc have a very close interaction for intrinsics and lang items,</p>\n</blockquote>\n<p>I think there's a misunderstanding here, which would be valuable to tease apart. I claim that std and rustc <em>can not</em> have close interraction for intrinsics and lang items. Proof: you can rewrite rustc in Python. </p>\n<p>I <em>think</em> the confusion stems from the fact that there are two std's in play here. One std is used to build the compiler itself. Another std is used by the code, generated by the compiler, and is compiled by the compiler. The two std's don't need to be related.</p>",
        "id": 209172348,
        "sender_full_name": "matklad",
        "timestamp": 1599302735
    },
    {
        "content": "<p>The high-level think I am pushing here is that I want rustc to be just a bog-standard rust program. Which means that it should use the <code>cargo build</code> sysroot.</p>\n<p>I guess, there is also a middle ground here by adding \"custom std\" feature to Cargo <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 209172461,
        "sender_full_name": "matklad",
        "timestamp": 1599302932
    },
    {
        "content": "<p>Hm, I've noticed that I am confused (along the axis orthogonal to the discussion). I guess, I'll investigate how exactly our bootstraping works and then try to write down something more coherent (but definitelly with a \"everything is just a crate\" in mind)</p>",
        "id": 209172967,
        "sender_full_name": "matklad",
        "timestamp": 1599303858
    },
    {
        "content": "<p>(my specific confusion: I wonder if we can get rid of <code>cfg(bootstrap)</code> in libstd? We need that to be able to build std with beta, and we need that to build <code>rustc</code> with beta, which needs <code>master</code> libstd. But if we build <code>rustc</code> with <code>beta</code> std, we compile <code>master</code> <code>std</code> with only <code>master</code> <code>rustc</code>, which would be a setup for non-bootsrapping languages. This makes contributing to std a pain, but moves us fully into the \"just a crate\" world)</p>",
        "id": 209173149,
        "sender_full_name": "matklad",
        "timestamp": 1599304121
    },
    {
        "content": "<p>For the consideration of the gathered re: <code>cargo llvm-lines</code> on rustc_middle</p>\n<div class=\"codehilite\"><pre><span></span><code>  Lines           Copies         Function name\n  -----           ------         -------------\n  7668776 (100%)  240632 (100%)  (TOTAL)\n   223241 (2.9%)    3437 (1.4%)  core::option::Option&lt;T&gt;::map\n   185588 (2.4%)   13396 (5.6%)  core::ptr::drop_in_place\n   152646 (2.0%)    1804 (0.7%)  core::iter::traits::iterator::Iterator::fold\n   151689 (2.0%)     857 (0.4%)  &lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint\n   131341 (1.7%)    1504 (0.6%)  alloc::vec::Vec&lt;T&gt;::extend_desugared\n   124009 (1.6%)    1677 (0.7%)  std::thread::local::LocalKey&lt;T&gt;::try_with\n   116431 (1.5%)    1491 (0.6%)  &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::from_iter\n   106280 (1.4%)    1504 (0.6%)  &lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend\n   105526 (1.4%)     694 (0.3%)  &lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next\n   103376 (1.3%)     568 (0.2%)  alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized\n    90200 (1.2%)     328 (0.1%)  hashbrown::raw::RawTable&lt;T&gt;::rehash_in_place\n    76125 (1.0%)     580 (0.2%)  &lt;rustc_query_system::query::caches::DefaultCache&lt;K,V&gt; as rustc_query_system::query::caches::QueryCache&gt;::iter\n    72602 (0.9%)     172 (0.1%)  rustc_query_system::dep_graph::graph::DepGraph&lt;K&gt;::with_task_impl\n    70146 (0.9%)    1290 (0.5%)  &lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold\n    69687 (0.9%)    1290 (0.5%)  core::iter::adapters::map_fold::{{closure}}\n    68782 (0.9%)     209 (0.1%)  smallvec::SmallVec&lt;A&gt;::try_grow\n    65952 (0.9%)     916 (0.4%)  core::alloc::layout::Layout::array\n</code></pre></div>\n\n\n<p>With unabridged version here: <a href=\"https://gist.githubusercontent.com/workingjubilee/54b8e28602ea5ffd4b2db748f86a6354/raw/249f24464665bc2111f91eb522865a51f1fbf56d/rustc_middle_cargo_llvm_lines.txt\">https://gist.githubusercontent.com/workingjubilee/54b8e28602ea5ffd4b2db748f86a6354/raw/249f24464665bc2111f91eb522865a51f1fbf56d/rustc_middle_cargo_llvm_lines.txt</a></p>",
        "id": 209173439,
        "sender_full_name": "Jubilee",
        "timestamp": 1599304673
    },
    {
        "content": "<p>Wow, I would never have guessed <code>flat_map</code>/<code>flatten</code>'s <code>size_hint</code>, of all things, being that far up there.</p>",
        "id": 209174122,
        "sender_full_name": "scottmcm",
        "timestamp": 1599305908
    },
    {
        "content": "<p>Just out of curiosity: <code>Option::map</code> is already <code>#[inline]</code>, why is it still taking so many lines?</p>",
        "id": 209174372,
        "sender_full_name": "Charles Lew",
        "timestamp": 1599306468
    },
    {
        "content": "<p>Like, it takes so many lines <em>because</em> it is inline.</p>\n<p>EDIT: this sounds way more confident than I am actually is, but I indeed would expect <code>inline</code>  functions to ballon the amount of code compiled</p>",
        "id": 209174414,
        "sender_full_name": "matklad",
        "timestamp": 1599306512
    },
    {
        "content": "<p>Under that thesis, _removing_ #[inline] might be a significant improvement.</p>",
        "id": 209174827,
        "sender_full_name": "Jubilee",
        "timestamp": 1599307237
    },
    {
        "content": "<p>It's already generic and getting codegen'd into any use site anyway, so inline shouldn't have significant effect I suspect. It's more likely \"rustc has a ton of different types inside option\"</p>",
        "id": 209175101,
        "sender_full_name": "simulacrum",
        "timestamp": 1599307780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119581\">mati865</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209172043\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209154991\">said</a>:</p>\n<blockquote>\n<p>I think clippy and rustfmt might already do this</p>\n</blockquote>\n<p>Clippy just like rustdoc build only with master. It's CI downloads the latest build with <code>rustup-toolchain-install-master</code>.</p>\n</blockquote>\n<p>how would I set that up? right now rustdoc requires building stage1 locally, but I'd love to install artifacts from master instead</p>",
        "id": 209175591,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599308653
    },
    {
        "content": "<p>I'm on the mobile atm, you should lookup Clippy repo.</p>",
        "id": 209176727,
        "sender_full_name": "mati865",
        "timestamp": 1599310547
    },
    {
        "content": "<p>Contributing swction</p>",
        "id": 209176769,
        "sender_full_name": "mati865",
        "timestamp": 1599310573
    },
    {
        "content": "<p>also some RUSTC-TIMING results were shared earlier and on my computer these are the big offenders.</p>\n<div class=\"codehilite\"><pre><span></span><code>[RUSTC-TIMING] rustc_infer test:false 131.036\n[RUSTC-TIMING] rustc_metadata test:false 145.150\n[RUSTC-TIMING] rustc_resolve test:false 111.723\n[RUSTC-TIMING] rustc_passes test:false 111.536\n[RUSTC-TIMING] rustc_codegen_llvm test:false 187.410\n[RUSTC-TIMING] rustc_mir_build test:false 100.226\n[RUSTC-TIMING] rustc_trait_selection test:false 196.653\n[RUSTC-TIMING] rustc_typeck test:false 263.873\n[RUSTC-TIMING] rustc_mir test:false 246.130\n[RUSTC-TIMING] rustc_middle test:false 467.649\n</code></pre></div>\n\n\n<p>So yes, rustc_middle is huge and that's a problem, but if it's _hard_ to solve rustc_middle, and these can be fixed on a scale of 4x more easily, then improvements there matter a lot.</p>",
        "id": 209182398,
        "sender_full_name": "Jubilee",
        "timestamp": 1599318623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209171848\">said</a>:</p>\n<blockquote>\n<p>The high-level fix was \"make sure that all the codegen happens in the upstream crate\". Or, equivalently, all <code>pub</code> functions must be non-generic. </p>\n<p>The impl of the fix was to <code>dyn</code> everything.</p>\n</blockquote>\n<p>There is already a trick in use so that all the query codegen happens in rustc_middle. Incidentally, this is why this crate is so painful in full builds.</p>",
        "id": 209188586,
        "sender_full_name": "cjgillot",
        "timestamp": 1599328297
    },
    {
        "content": "<p>Oh, and it went unaddressed but re: \"2 hour long compiles are stage 2\" from a while back, I have had machines which basically hit the better part of 2 hours just because LLVM would take the entire first hour plus some, so I don't think that's the case, honestly. Probably \"ship a patched LLVM with beta-rustc to bootstrap on\" will be the biggest gain as a direct result. I mostly quit trying to contribute until I fixed my computer issues, which then became... way too much of an adventure.</p>",
        "id": 209202047,
        "sender_full_name": "Jubilee",
        "timestamp": 1599352615
    },
    {
        "content": "<blockquote>\n<p>I think there's a misunderstanding here, which would be valuable to tease apart. I claim that std and rustc can not have close interraction for intrinsics and lang items. Proof: you can rewrite rustc in Python. </p>\n</blockquote>\n<p>That other rustc would have to be exactly like the real one in all sorts of private implementation details, or else it needs its own standard library.<br>\nYou can rewrite <em>any program</em> in <em>any other language</em> if you keep the observable behavior (syscall interactions) the same. So I don't see how this statement proves anything.</p>",
        "id": 209220793,
        "sender_full_name": "RalfJ",
        "timestamp": 1599391030
    },
    {
        "content": "<blockquote>\n<p>The high-level think I am pushing here is that I want rustc to be just a bog-standard rust program. Which means that it should use the cargo build sysroot.</p>\n</blockquote>\n<p>rustc uses many many nightly features both of the compiler and the standard library. that's very helpful also to figured out of those features work as intended. I think in the best possible case your proposal will add a 6 week delay between adding a feature to libstd and using it in rustc, which would be really painful.<br>\nand -- what for? building the standard library takes around 60s. I don't think all this pain and complexity is justified for saving 60s.</p>",
        "id": 209220922,
        "sender_full_name": "RalfJ",
        "timestamp": 1599391279
    },
    {
        "content": "<p>ok, writing this down so I don't forget: there are currently four major things I want do do with bootstrap:</p>\n<ol>\n<li><a href=\"https://github.com/rust-lang/rust/issues/76380\">https://github.com/rust-lang/rust/issues/76380</a>, adding a stable version for distributors and other people compiling from source without intending to make changes</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/76165\">https://github.com/rust-lang/rust/issues/76165</a>, making bootstrap even more flexible by letting you configure the stage. This would make things a lot easier for people only working on the standard library, since they can set <code>default-stage = 0</code> or whatever syntax, instead of having to pass <code>--stage 0</code> each time.</li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/76503\">https://github.com/rust-lang/rust/issues/76503</a>, applying some recommended defaults automatically, but in an opt-in way. Since changing defaults for everyone is controversial and not always possible, this makes it easier to configure bootstrap without having to go through a 600 line TOML file.</li>\n<li><a href=\"https://github.com/rust-lang/compiler-team/issues/351\">https://github.com/rust-lang/compiler-team/issues/351</a>, making <code>x.py build</code> take less time by not building tools</li>\n</ol>\n<p>I plan to work on this over the weekend and split the changes up as much as possible, but 1 would be a lot easier to do if I did 4 simultaneously so those two might end up getting merged.</p>\n<p>Another idea I had just now was to suggest running <code>x.py setup</code> the very first time you run x.py to make it more discoverable, then you don't even have to look at the documentation to find it.</p>",
        "id": 209819893,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599850062
    },
    {
        "content": "<p>a lot of these play really well with one another: if you use the stable version of bootstrap you won't get suggestions/extra output, if the default stage can be configured <code>x.py setup</code> can do that automatically</p>",
        "id": 209820018,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599850111
    },
    {
        "content": "<p>More discussion about this in <br>\n<a href=\"#narrow/stream/242791-t-infra/topic/Planning.20x.2Epy's.20future\">https://rust-lang.zulipchat.com/#narrow/stream/242791-t-infra/topic/Planning.20x.2Epy's.20future</a></p>",
        "id": 209843895,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599864138
    },
    {
        "content": "<p>See the second part of <a href=\"https://matklad.github.io/2020/09/12/rust-in-2021.html\">https://matklad.github.io/2020/09/12/rust-in-2021.html</a> for a somewhat more coherent description of \"getting rid of bootstrap\" idea</p>",
        "id": 209893136,
        "sender_full_name": "matklad",
        "timestamp": 1599934272
    },
    {
        "content": "<p>My only flag in all of this is \"don't forget the distros\"! Whatever we do to make nice defaults, it still needs to be <em>possible</em> to build with system rustc (matching rustc N-1 <em>or</em> the same N) and system LLVM, totally offline. I think Mark has a good handle on this, but please feel free to ping me if there's any question.</p>",
        "id": 209894707,
        "sender_full_name": "cuviper",
        "timestamp": 1599936713
    },
    {
        "content": "<p>yes, I'm keeping an eye on that with every patch for sure</p>",
        "id": 209894755,
        "sender_full_name": "simulacrum",
        "timestamp": 1599936747
    },
    {
        "content": "<p>it'll probably get <em>harder</em> in the sense that there will be more things to toggle as we move towards \"download more by default\", I suspect</p>",
        "id": 209894763,
        "sender_full_name": "simulacrum",
        "timestamp": 1599936794
    },
    {
        "content": "<p>as long as that's clearly communicated, fine. harder is not a problem as long as I know what to do, and can automate that in my rpm spec</p>",
        "id": 209894815,
        "sender_full_name": "cuviper",
        "timestamp": 1599936844
    },
    {
        "content": "<p>maybe something like <code>./configure --offline ...</code> can disable all areas of \"download by default\"</p>",
        "id": 209894847,
        "sender_full_name": "cuviper",
        "timestamp": 1599936950
    },
    {
        "content": "<p>yeah :)</p>",
        "id": 209894900,
        "sender_full_name": "simulacrum",
        "timestamp": 1599936990
    },
    {
        "content": "<p>we are working with <span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> to get a changelog going for changes to rustbuild which should be a big help here</p>",
        "id": 209894904,
        "sender_full_name": "simulacrum",
        "timestamp": 1599937008
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/76626\">https://github.com/rust-lang/rust/pull/76626</a></p>",
        "id": 209895267,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599937519
    },
    {
        "content": "<p>Most of the new changes I'm making are opt-in as well, the only thing that changes unconditionally is adding a warning if you don't have config.toml/haven't looked at the changelog</p>",
        "id": 209895338,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599937629
    },
    {
        "content": "<p>I can make the warning opt-out if you like as well</p>",
        "id": 209895343,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599937642
    },
    {
        "content": "<p>for my part, I'll have a <code>config.toml</code> via running <code>./configure</code></p>",
        "id": 209895903,
        "sender_full_name": "cuviper",
        "timestamp": 1599938447
    },
    {
        "content": "<p>that doesn't help the version/changelog safety checks, but that just makes it my responsibility to check that changelog when updating the distro, which is reasonable</p>",
        "id": 209896000,
        "sender_full_name": "cuviper",
        "timestamp": 1599938575
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133169\">matklad</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209893136\">said</a>:</p>\n<blockquote>\n<p>See the second part of <a href=\"https://matklad.github.io/2020/09/12/rust-in-2021.html\">https://matklad.github.io/2020/09/12/rust-in-2021.html</a> for a somewhat more coherent description of \"getting rid of bootstrap\" idea</p>\n</blockquote>\n<p>this is an interesting blog post. This point especially stood out:</p>\n<blockquote>\n<p>Third, there’s not much in a way of the unit tests in the compiler. Almost all tests require std, which means that, to test anything, one needs to rebuild everything.</p>\n</blockquote>\n<p>I guess <code>std</code> here really means <code>core</code> - I'm pretty sure you can add <code>#![no_std]</code> to most of <code>src/test/ui</code> without  a problem. But I definitely see your point - without unit tests, you <em>have</em> to compile rustc_middle for tests no matter what</p>",
        "id": 209899505,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599944063
    },
    {
        "content": "<blockquote>\n<p>Downgrade rustc’s libstd requirements to beta. Note that this refers solely to the std used to build rustc itself. rustc will use master std for building user’s code.</p>\n</blockquote>\n<p>I like this idea. This would reduce the 'mind-bending' parts of bootstrap a lot I think</p>",
        "id": 209899517,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599944083
    },
    {
        "content": "<p>I tried to explain this a little in <a href=\"https://github.com/rust-lang/rustc-dev-guide/pull/857/files#diff-a68e97a6422485e51b6bc6c8fb23f2d9R156\">https://github.com/rust-lang/rustc-dev-guide/pull/857/files#diff-a68e97a6422485e51b6bc6c8fb23f2d9R156</a></p>",
        "id": 209899533,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599944111
    },
    {
        "content": "<p>if rustc only depended on beta libstd, then this wouldn't be so confusing, because you wouldn't need to compile <code>--stage 0 library/std</code> at <em>all</em> before building the compiler</p>",
        "id": 209899547,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599944161
    },
    {
        "content": "<p>and <code>--stage 1 library/std</code> would be unambiguous: build <code>std</code> for the first time using the <code>rustc</code> that was just built</p>",
        "id": 209899607,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599944206
    },
    {
        "content": "<p>Well. I guess that second point isn't very relevant since you want <code>cargo test</code> to work, that would test the version built by beta</p>",
        "id": 209899798,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599944483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"138448\">cuviper</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209894847\">said</a>:</p>\n<blockquote>\n<p>maybe something like <code>./configure --offline ...</code> can disable all areas of \"download by default\"</p>\n</blockquote>\n<p>Is it possible we could optimize the <code>./configure</code> workflow for distros? I haven't seen anyone recommend using <code>./configure</code> for contributors in at least a few years.</p>",
        "id": 209937377,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1600012666
    },
    {
        "content": "<p>Yeah, maybe <code>./configure</code> alone is enough to signal different defaults</p>",
        "id": 209947206,
        "sender_full_name": "cuviper",
        "timestamp": 1600027061
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76619\">https://github.com/rust-lang/rust/issues/76619</a> would help with this I think</p>",
        "id": 209947252,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600027110
    },
    {
        "content": "<p>you could <code>./configure --set include=maintainer</code> and it would automatically use <code>stage = 2</code>, <code>extended = true</code>, <code>offline</code>, etc.</p>",
        "id": 209947265,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600027152
    },
    {
        "content": "<p>some more discussion about this from the library side on <a href=\"https://internals.rust-lang.org/t/contributing-changes-to-std/12829\">https://internals.rust-lang.org/t/contributing-changes-to-std/12829</a></p>",
        "id": 210943556,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600817263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209175591\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"119581\">mati865</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209172043\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209154991\">said</a>:</p>\n<blockquote>\n<p>I think clippy and rustfmt might already do this</p>\n</blockquote>\n<p>Clippy just like rustdoc build only with master. It's CI downloads the latest build with <code>rustup-toolchain-install-master</code>.</p>\n</blockquote>\n<p>how would I set that up? right now rustdoc requires building stage1 locally, but I'd love to install artifacts from master instead</p>\n</blockquote>\n<p>very long delay but I finally almost have this working <a href=\"https://github.com/rust-lang/rust/pull/79540\">https://github.com/rust-lang/rust/pull/79540</a></p>",
        "id": 221157196,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609267894
    }
]