[
    {
        "content": "<p>Hey <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> -- the next design meeting (2020-03-06) will be discussing <a href=\"https://github.com/rust-lang/compiler-team/issues/234\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/234\">compiler-team#234</a>, a proposal for a design for a shared library that defines types and can be used by rustc/chalk/rust-analyzer. There is now a <a href=\"https://hackmd.io/roRq0qHMQ6CyRJxj_FsPSQ\" target=\"_blank\" title=\"https://hackmd.io/roRq0qHMQ6CyRJxj_FsPSQ\">write-up available</a> sketching the ideas and also trying to outline what the meeting should discuss and what is out of scope. Thoughts and feedback welcome!</p>",
        "id": 189640214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583273539
    },
    {
        "content": "<p>fyi, I will mostly not be here this time but will try to leave some thoughts before then</p>",
        "id": 189644251,
        "sender_full_name": "simulacrum",
        "timestamp": 1583276810
    },
    {
        "content": "<p>(I also will not be able to attend; I hope to provide feedback  on the hackmd write-up before the meeting itself.)</p>",
        "id": 189654562,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583288038
    },
    {
        "content": "<p>The proposal looks good to me. I would like to note that the complexity feels pretty small, in particular the changes to rustc seem loosely good even if they don't end up going anywhere :)</p>\n<p>I agree with the approach to start out with the in rust-lang/rust crate, too.</p>",
        "id": 189746408,
        "sender_full_name": "simulacrum",
        "timestamp": 1583363915
    },
    {
        "content": "<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span>  One (hopefully quick) agenda item to add: We have two independent fixes for beta-regression <a href=\"https://github.com/rust-lang/rust/issues/69191\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69191\">#69191</a>. The first PR is <a href=\"https://github.com/rust-lang/rust/issues/69753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69753\">#69753</a>. The second is  <a href=\"https://github.com/rust-lang/rust/issues/69768\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69768\">#69768</a>. The question is: What to do with each PR w.r.t nightly and beta branches, given that beta is imminently going to be promoted to stable.</p>",
        "id": 189884683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583495407
    },
    {
        "content": "<p>(My personal suggestion is to land both PR's on nightly, and then backport solely PR <a href=\"https://github.com/rust-lang/rust/issues/69753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69753\">#69753</a>.)</p>",
        "id": 189884704,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583495428
    },
    {
        "content": "<p>((related  discussion over on the <a href=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189882483\" title=\"#narrow/stream/131828-t-compiler/topic/ICE.20access.20field.20of.20uninhabited.20enum.20.2369191/near/189882483\">zulip topic for the beta regression itself</a>)</p>",
        "id": 189884856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1583495541
    },
    {
        "content": "<p>well, we can just land <a href=\"https://github.com/rust-lang/rust/issues/69753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69753\">#69753</a> on beta and <a href=\"https://github.com/rust-lang/rust/issues/69768\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69768\">#69768</a> on nightly, as <a href=\"https://github.com/rust-lang/rust/issues/69768\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69768\">#69768</a> would revert <a href=\"https://github.com/rust-lang/rust/issues/69753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69753\">#69753</a> if it were already merged</p>",
        "id": 189885749,
        "sender_full_name": "oli",
        "timestamp": 1583496454
    },
    {
        "content": "<p>funnily enough I don't think they would conflict</p>",
        "id": 189885823,
        "sender_full_name": "eddyb",
        "timestamp": 1583496510
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span>! Design meeting starts in ~6 minutes. As I <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189640214\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189640214\">wrote at the start of this topic</a>:</p>\n<blockquote>\n<p>The next design meeting (2020-03-06) will be discussing <a href=\"https://github.com/rust-lang/compiler-team/issues/234\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/234\">compiler-team#234</a>, a proposal for a design for a shared library that defines types and can be used by rustc/chalk/rust-analyzer. There is now a <a href=\"https://hackmd.io/roRq0qHMQ6CyRJxj_FsPSQ\" target=\"_blank\" title=\"https://hackmd.io/roRq0qHMQ6CyRJxj_FsPSQ\">write-up available</a> sketching the ideas and also trying to outline what the meeting should discuss and what is out of scope. Thoughts and feedback welcome!</p>\n</blockquote>",
        "id": 189900374,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583506489
    },
    {
        "content": "<p>Hello <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span> -- meeting starting <strong>now</strong>! Please add <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> emoji to show you're here. We'll kick off with 5 minutes of...</p>\n<h1>Announcements</h1>",
        "id": 189900945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583506841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189884683\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189884683\">said</a>:</p>\n<blockquote>\n<p><span aria-label=\"exclamation\" class=\"emoji emoji-2757\" role=\"img\" title=\"exclamation\">:exclamation:</span>  One (hopefully quick) agenda item to add: We have two independent fixes for beta-regression <a href=\"https://github.com/rust-lang/rust/issues/69191\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69191\">#69191</a>. The first PR is <a href=\"https://github.com/rust-lang/rust/issues/69753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69753\">#69753</a>. The second is  <a href=\"https://github.com/rust-lang/rust/issues/69768\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69768\">#69768</a>. The question is: What to do with each PR w.r.t nightly and beta branches, given that beta is imminently going to be promoted to stable.</p>\n</blockquote>",
        "id": 189901198,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507009
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189884704\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189884704\">said</a>:</p>\n<blockquote>\n<p>(My personal suggestion is to land both PR's on nightly, and then backport solely PR <a href=\"https://github.com/rust-lang/rust/issues/69753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69753\">#69753</a>.)</p>\n</blockquote>",
        "id": 189901210,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507017
    },
    {
        "content": "<p>I am just seeing this now, but I see that <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> is making the suggestion because <a href=\"https://github.com/rust-lang/rust/issues/69753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69753\">#69753</a> is a very narrow fix and whatever we backport will become insta-stable. Seems reasonable to me. Does anyone object to just backporting <a href=\"https://github.com/rust-lang/rust/issues/69753\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/69753\">#69753</a>?</p>",
        "id": 189901386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507124
    },
    {
        "content": "<p>no objection, actually very much in favour of doing it this way</p>",
        "id": 189901424,
        "sender_full_name": "oli",
        "timestamp": 1583507151
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"n\">_Variant</span><span class=\"p\">(</span><span class=\"n\">Void</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_Warriont</span><span class=\"p\">(</span><span class=\"n\">Void</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">_Worrynot</span><span class=\"p\">(</span><span class=\"n\">Void</span><span class=\"p\">),</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Btw... Something about this makes me smile <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 189901528,
        "sender_full_name": "centril",
        "timestamp": 1583507220
    },
    {
        "content": "<p>OK, any final announcements?</p>",
        "id": 189901596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507282
    },
    {
        "content": "<p>OK, let's kick it off then</p>",
        "id": 189901762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507401
    },
    {
        "content": "<p>So I laid out two goals for the meeting:</p>\n<ul>\n<li>Discuss the “high-level plan” for the design</li>\n<li>Discuss the roadmap and initial steps to work towards this goal</li>\n</ul>",
        "id": 189901851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507438
    },
    {
        "content": "<p>Let's start in on the first item? I'm going to just give periodic timing reminders, I'd like to leave at least 20 minutes for the final item, so I guess that means ~20 minutes for first, ~20 minutes for second, and 10 minutes to talk about random things :)</p>",
        "id": 189901918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507483
    },
    {
        "content": "<p>but let's see</p>",
        "id": 189901928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507490
    },
    {
        "content": "<p>So yeah the big picture here is the idea of extracting out some kind of \"shared library\" that will represent Rust's types. The goal is for this library to be usable directly by rustc, rust-analyzer, and chalk, so that everyone can share a representation of Rust's types.</p>",
        "id": 189902031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507542
    },
    {
        "content": "<p>One of the tricky bits is that the different consumers have somewhat different requirements -- rustc uses interning, rust-analyzer doesn't (and probably shouldn't), and chalk wants to work with both (though it doesn't use interning in its tests)</p>",
        "id": 189902087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507595
    },
    {
        "content": "<p>This leads to the <a href=\"https://hackmd.io/roRq0qHMQ6CyRJxj_FsPSQ#Proposed-end-goal-the-basic-pattern-for-representing-types\" target=\"_blank\" title=\"https://hackmd.io/roRq0qHMQ6CyRJxj_FsPSQ#Proposed-end-goal-the-basic-pattern-for-representing-types\">proposed pattern</a> for representing types, where the actual <em>representation</em> of a type is made generic, and we just define methods for getting at a <code>TyData</code> enum that contains the variants (and some flags)</p>",
        "id": 189902143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507639
    },
    {
        "content": "<p>(Side note: <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> , we should add \"add flags\" to the list of chalk adaptation steps)</p>",
        "id": 189902201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507655
    },
    {
        "content": "<p>I won't copy and paste the whole doc here, I'm presuming most folks looked it over or are doing a bit of that now</p>",
        "id": 189902293,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507707
    },
    {
        "content": "<p>oh and cc <span class=\"user-group-mention\" data-user-group-id=\"1060\">@WG-rls2.0</span> in case those folks aren't on the meeting group</p>",
        "id": 189902330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507736
    },
    {
        "content": "<p>anway basically the way to represent types is just</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Ty</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">interned</span>: <span class=\"nc\">I</span>::<span class=\"n\">InternedType</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189902341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507745
    },
    {
        "content": "<p>but you can use <code>ty.data(interner)</code> to get access to the type data:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">enum</span> <span class=\"nc\">TyData</span><span class=\"o\">&lt;</span><span class=\"n\">I</span>: <span class=\"nc\">Interner</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Apply</span><span class=\"p\">(</span><span class=\"n\">ApplicationTy</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Placeholder</span><span class=\"p\">(</span><span class=\"n\">PlaceholderIndex</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Dyn</span><span class=\"p\">(</span><span class=\"n\">DynTy</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Alias</span><span class=\"p\">(</span><span class=\"n\">AliasTy</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"nb\">Fn</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">BoundVar</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">InferenceVar</span><span class=\"p\">(</span><span class=\"n\">InferenceVar</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 189902408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507768
    },
    {
        "content": "<p>(In Chalk today, it's <code>ty.data()</code>, but we're adding an <code>interner</code> argument to support different kinds of interning; e.g., rust-analyzer presently uses a form of interning where types are represented as an integer, and that is integrated into the incremental system to allow recycling integers when things change etc)</p>",
        "id": 189902462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507808
    },
    {
        "content": "<p>Pros with the proposed design:</p>\n<ul>\n<li>It will improve interner independence, allowing us to be generic over <code>I: TyInterner</code> in logic code, not just data definitions, although in practice you need <code>tcx</code> to get interesting info via queries.</li>\n</ul>\n<p>Cons with the proposed design:</p>\n<ul>\n<li>Some additional noise, <code>.kind</code> vs <code>.data(tcx)</code></li>\n<li><code>tcx</code> has to be passed to more places.</li>\n<li>More monomorphization needed, regressing <code>./x.py</code> compile times?</li>\n<li>We give up the ability to do deep pattern matching on <code>TyS</code></li>\n</ul>",
        "id": 189902464,
        "sender_full_name": "centril",
        "timestamp": 1583507812
    },
    {
        "content": "<p>bikeshed: <code>interner[ty].data()</code> might flow a bit better, but also <code>interner</code> could be <code>cx</code> which would make it <code>cx[ty]</code> vs <code>ty.data(cx)</code></p>",
        "id": 189902483,
        "sender_full_name": "eddyb",
        "timestamp": 1583507823
    },
    {
        "content": "<p>also I assume <code>kind</code> vs <code>data</code> is another bikeshed</p>",
        "id": 189902501,
        "sender_full_name": "eddyb",
        "timestamp": 1583507842
    },
    {
        "content": "<p>yes, I'd like to avoid the bikesheds for now, but let's note them down</p>",
        "id": 189902611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507886
    },
    {
        "content": "<p>(<code>ty.kind(cx)</code> feels more obvious)</p>",
        "id": 189902627,
        "sender_full_name": "centril",
        "timestamp": 1583507894
    },
    {
        "content": "<p>yeah if you want a method there I kind of agree</p>",
        "id": 189902651,
        "sender_full_name": "eddyb",
        "timestamp": 1583507911
    },
    {
        "content": "<p><code>kind</code> of course overlaps with other jargon, but  don't claim a strong opinion</p>",
        "id": 189902656,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507916
    },
    {
        "content": "<p>I'm interested more in two other things <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> noted</p>",
        "id": 189902673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507927
    },
    {
        "content": "<blockquote>\n<p>kind of course overlaps with other jargon, but don't claim a strong opinion</p>\n</blockquote>\n<p>(As in higher <em>kinded</em> types?)</p>",
        "id": 189902678,
        "sender_full_name": "centril",
        "timestamp": 1583507933
    },
    {
        "content": "<p>or \"parameter kinds\", etc</p>",
        "id": 189902688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507941
    },
    {
        "content": "<p>e.g., lifetime, type, const</p>",
        "id": 189902700,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507945
    },
    {
        "content": "<p>that's the same notion of \"kind\" I'm pretty sure :P</p>",
        "id": 189902733,
        "sender_full_name": "eddyb",
        "timestamp": 1583507970
    },
    {
        "content": "<p>(yes, just saying that it's relevant even if we never add HKT)</p>",
        "id": 189902746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583507980
    },
    {
        "content": "<p>but maybe I should leave before I get out-theorized</p>",
        "id": 189902753,
        "sender_full_name": "eddyb",
        "timestamp": 1583507987
    },
    {
        "content": "<p>I like abstracting more over the concrete representation of types so alternative representations could be more easily tried for performance reasons.</p>",
        "id": 189902761,
        "sender_full_name": "Zoxc",
        "timestamp": 1583507994
    },
    {
        "content": "<p>Anyhow, let's cut the bikeshed short <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 189902822,
        "sender_full_name": "centril",
        "timestamp": 1583508010
    },
    {
        "content": "<p>one of the things I wanted to point out is that you can use the generic here in interesting ways to make code a bit more generic, or enforce separations</p>",
        "id": 189902830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508014
    },
    {
        "content": "<blockquote>\n<p>More monomorphization needed</p>\n</blockquote>\n<p>Yeah, this is what I am worried about a lot. We hit repeated re-monomophizations <strong>a lot</strong> in rust-analyzer. Somehow forcing <code>-Z share_generics</code> for a specific  crate would be great</p>",
        "id": 189902837,
        "sender_full_name": "matklad",
        "timestamp": 1583508025
    },
    {
        "content": "<p>well, ok, let's turn to that :)</p>",
        "id": 189902873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508053
    },
    {
        "content": "<p>so, it's certainly true that in <em>rustc</em> you will only ever use one value for the <code>Interner</code> type</p>",
        "id": 189902897,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508066
    },
    {
        "content": "<p>I'm somewhat unhappy about the loss of pattern matching personally, given that I very recently took advantage of it to make code read nicer</p>",
        "id": 189902911,
        "sender_full_name": "centril",
        "timestamp": 1583508074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189902897\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189902897\">said</a>:</p>\n<blockquote>\n<p>so, it's certainly true that in <em>rustc</em> you will only ever use one value for the <code>Interner</code> type</p>\n</blockquote>\n<p>and to the extent that we mostly extract <em>definitions</em>, there isn't much code to monomorphize, but I do expect to also extract things like the folder,</p>",
        "id": 189902975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508119
    },
    {
        "content": "<p>but then that code is generic <em>anyway</em></p>",
        "id": 189903019,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508124
    },
    {
        "content": "<p>...but I'm sure I can learn to live with it <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 189903020,
        "sender_full_name": "centril",
        "timestamp": 1583508124
    },
    {
        "content": "<p>in short, I'm not really sure what the effect on compilation times will be, but I see no fundamental reason for them to be worse,</p>",
        "id": 189903046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508141
    },
    {
        "content": "<p>okay so this might seem offtopic, but, does Chalk do anything for interning slices? i.e. like <code>ty::List&lt;T&gt;</code> in rustc</p>",
        "id": 189903049,
        "sender_full_name": "eddyb",
        "timestamp": 1583508142
    },
    {
        "content": "<p>(it may be something we want to look at and improve)</p>",
        "id": 189903060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508149
    },
    {
        "content": "<p>there are also some potential <em>advantages</em> though</p>",
        "id": 189903066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508154
    },
    {
        "content": "<p>in that we you can write libraries that work with types but which don't depend on the details of rustc</p>",
        "id": 189903076,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508162
    },
    {
        "content": "<p>which is of course part of the whole goal here</p>",
        "id": 189903096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508177
    },
    {
        "content": "<p>i.e., we can get the point where modifying parts of rustc <em>doesn't</em> mean rebuilding the type checker, etc</p>",
        "id": 189903124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508199
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903049\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903049\">said</a>:</p>\n<blockquote>\n<p>okay so this might seem offtopic, but, does Chalk do anything for interning slices? i.e. like <code>ty::List&lt;T&gt;</code> in rustc</p>\n</blockquote>\n<p>yes</p>",
        "id": 189903132,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508204
    },
    {
        "content": "<p>I simplified things but</p>",
        "id": 189903141,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508210
    },
    {
        "content": "<p>because I realized recently that <code>ty::List&lt;T&gt;</code>'s design could easily accomodate tracking flags even for<code>T</code>s that might not have use for them (or I guess the flags could be an associated type of <code>T</code>)</p>",
        "id": 189903142,
        "sender_full_name": "eddyb",
        "timestamp": 1583508212
    },
    {
        "content": "<p>there are associated types for things like \"list of parameters\"</p>",
        "id": 189903161,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508222
    },
    {
        "content": "<p>precisely for this reason</p>",
        "id": 189903165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508225
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  hmm... without access to <code>tcx</code> or <code>fcx</code> specifically, what sort of logic can you write without access to the methods on that?</p>",
        "id": 189903167,
        "sender_full_name": "centril",
        "timestamp": 1583508227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> you take access to an <code>&amp;I</code> where <code>I: Interner</code></p>",
        "id": 189903179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508238
    },
    {
        "content": "<p>this is how all of chalk is written, for example</p>",
        "id": 189903231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508254
    },
    {
        "content": "<p>Yes, but <code>I: Interner</code> says very little</p>",
        "id": 189903233,
        "sender_full_name": "centril",
        "timestamp": 1583508255
    },
    {
        "content": "<p>it says everything you need to access type data</p>",
        "id": 189903250,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508265
    },
    {
        "content": "<p>but in chalk there is an add'l trait, <code>RustIrDatabase</code>, that gives access to select queries etc</p>",
        "id": 189903258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508280
    },
    {
        "content": "<p>Right; that's what I was after</p>",
        "id": 189903264,
        "sender_full_name": "centril",
        "timestamp": 1583508291
    },
    {
        "content": "<p>(and which gives access to an interner)</p>",
        "id": 189903275,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508300
    },
    {
        "content": "<p>yeah, so you basically declare your interface to the outside world</p>",
        "id": 189903286,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508311
    },
    {
        "content": "<p>and then there is some crate that \"knits\" things together</p>",
        "id": 189903306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508327
    },
    {
        "content": "<p>So basically more tagless final, makes sense</p>",
        "id": 189903315,
        "sender_full_name": "centril",
        "timestamp": 1583508333
    },
    {
        "content": "<p>I don't know what \"tagless final\" refers to =)</p>",
        "id": 189903327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508351
    },
    {
        "content": "<p>but it's a pretty standard pattern in many contexts</p>",
        "id": 189903375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508364
    },
    {
        "content": "<p>Is there something that requires interning in this design, or is it just named that since rustc uses interners?</p>",
        "id": 189903380,
        "sender_full_name": "Zoxc",
        "timestamp": 1583508365
    },
    {
        "content": "<p>the latter</p>",
        "id": 189903387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508373
    },
    {
        "content": "<p>we tried various names</p>",
        "id": 189903391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508376
    },
    {
        "content": "<p>but interner felt like the one that gave the most immediate intution</p>",
        "id": 189903401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508387
    },
    {
        "content": "<p>even if sometimes you aren't really <em>interning</em></p>",
        "id": 189903408,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903327\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903327\">said</a>:</p>\n<blockquote>\n<p>I don't know what \"tagless final\" refers to =)</p>\n</blockquote>\n<p>See e.g. <a href=\"http://okmij.org/ftp/tagless-final/index.html\" target=\"_blank\" title=\"http://okmij.org/ftp/tagless-final/index.html\">http://okmij.org/ftp/tagless-final/index.html</a> and <a href=\"http://okmij.org/ftp/tagless-final/course/lecture.pdf\" target=\"_blank\" title=\"http://okmij.org/ftp/tagless-final/course/lecture.pdf\">http://okmij.org/ftp/tagless-final/course/lecture.pdf</a></p>",
        "id": 189903413,
        "sender_full_name": "centril",
        "timestamp": 1583508397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903142\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903142\">said</a>:</p>\n<blockquote>\n<p>because I realized recently that <code>ty::List&lt;T&gt;</code>'s design could easily accomodate tracking flags even for<code>T</code>s that might not have use for them (or I guess the flags could be an associated type of <code>T</code>)</p>\n</blockquote>\n<p>I hope this is a significant improvement for certain kinds of workloads, that currently have to do a linear search across <code>Substs</code>, or worse, across all <code>Substs</code> embedded in <code>[Predicate]</code> (e.g. <code>.has_...()</code> methods on <code>ParamEnv</code>)</p>\n<p>but I don't know how soon I'll get to it or how long it would take to implement</p>",
        "id": 189903485,
        "sender_full_name": "eddyb",
        "timestamp": 1583508453
    },
    {
        "content": "<p>one side note that is interesting</p>",
        "id": 189903514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508475
    },
    {
        "content": "<p>and relevant maybe to that</p>",
        "id": 189903522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508480
    },
    {
        "content": "<p>in chalk today, at least, the fold trait takes two interners -- source and target.</p>",
        "id": 189903572,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508489
    },
    {
        "content": "<p>in practice, they are typically the same</p>",
        "id": 189903578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508496
    },
    {
        "content": "<p>but it lets you write code that separates out \"before\" and \"after\" types</p>",
        "id": 189903585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508504
    },
    {
        "content": "<p>one downside though is that it sometimes requires more re-interning than rustc would</p>",
        "id": 189903601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508516
    },
    {
        "content": "<p>i.e., we could shortcircuit a search</p>",
        "id": 189903611,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508527
    },
    {
        "content": "<p>regarding interners: I wonder how many \"parametric polymorphism\"-like benefits you get from using associated types instead of having a single \"interned Ty\" type that's always an integer or reference</p>",
        "id": 189903656,
        "sender_full_name": "eddyb",
        "timestamp": 1583508560
    },
    {
        "content": "<p>I sort of expect to resolve this eventually -- I'd prefer to keep the ability to write code generic over multiple interners to express logical separations, without requiring them to be represented by <em>actually different types</em>, and to add specializations or other tricks to make it efficient</p>",
        "id": 189903677,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508575
    },
    {
        "content": "<p>but I figured that we'd start by just extracting \"single Interner fold\" (like rustc has today)</p>",
        "id": 189903711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508601
    },
    {
        "content": "<p>and figure out after that if we can generalize it, I'm not sure yet how much value the \"two interner fold\" has anyway</p>",
        "id": 189903783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903656\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903656\">said</a>:</p>\n<blockquote>\n<p>regarding interners: I wonder how many \"parametric polymorphism\"-like benefits you get from using associated types instead of having a single \"interned Ty\" type that's always an integer or reference</p>\n</blockquote>\n<p>what do you mean by PP-like benefits?</p>",
        "id": 189903803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508636
    },
    {
        "content": "<p>for example, you can't even attempt to implement fmt::Debug on the generic structs by relying on TLS, without either Interner methods that let you do that, or the associated types themselves implementing fmt::Debug</p>",
        "id": 189903807,
        "sender_full_name": "eddyb",
        "timestamp": 1583508643
    },
    {
        "content": "<p>I'm not sure if that's the same thing I was just talking about or different</p>",
        "id": 189903809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903656\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903656\">said</a>:</p>\n<blockquote>\n<p>regarding interners: I wonder how many \"parametric polymorphism\"-like benefits you get from using associated types instead of having a single \"interned Ty\" type that's always an integer or reference</p>\n</blockquote>\n<p>Like theorems for free benefits?</p>",
        "id": 189903810,
        "sender_full_name": "centril",
        "timestamp": 1583508646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903807\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189903807\">said</a>:</p>\n<blockquote>\n<p>for example, you can't even attempt to implement fmt::Debug on the generic structs by relying on TLS, without either Interner methods that let you do that, or the associated types themselves implementing fmt::Debug</p>\n</blockquote>\n<p>yeah, we have some methods for customizing debug representation right now</p>",
        "id": 189903837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508671
    },
    {
        "content": "<p>like \"you can't accidentally rely too much on knowing specifics about the types involved\"</p>",
        "id": 189903849,
        "sender_full_name": "eddyb",
        "timestamp": 1583508680
    },
    {
        "content": "<p>yes, ok</p>",
        "id": 189903864,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508691
    },
    {
        "content": "<p>even if in practice there might only be one implementation in the entire crate graph</p>",
        "id": 189903871,
        "sender_full_name": "eddyb",
        "timestamp": 1583508699
    },
    {
        "content": "<p>this is similar to what I was saying, I do think there's benefits there</p>",
        "id": 189903882,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508705
    },
    {
        "content": "<p>Well... except for specialization destroying your parametricity...</p>",
        "id": 189903888,
        "sender_full_name": "centril",
        "timestamp": 1583508711
    },
    {
        "content": "<p>or at least I think there might be</p>",
        "id": 189903891,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508714
    },
    {
        "content": "<p>it's not like we use specialization in rustc <del>please ignore rustc_metadata</del></p>",
        "id": 189903953,
        "sender_full_name": "eddyb",
        "timestamp": 1583508735
    },
    {
        "content": "<p>specialization is not relevant here, we're talking more about informal benefits</p>",
        "id": 189903974,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508746
    },
    {
        "content": "<p>right, not proof assistant benefits (you would presumably not worry about interners there :P)</p>",
        "id": 189904013,
        "sender_full_name": "eddyb",
        "timestamp": 1583508770
    },
    {
        "content": "<p>but yeah if you want a theorem, add a \"given no specialization\" and call it a day :)</p>",
        "id": 189904018,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508774
    },
    {
        "content": "<p>Sure; \"theorems for free\"-ish by not actually using specialization; anyways... it's probably not a big deal either way</p>",
        "id": 189904024,
        "sender_full_name": "centril",
        "timestamp": 1583508778
    },
    {
        "content": "<p>ok, so, we're 13 minutes in, it seems like people are not too upset about the basic idea :)</p>",
        "id": 189904056,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508799
    },
    {
        "content": "<p>Basic idea seems good</p>",
        "id": 189904076,
        "sender_full_name": "centril",
        "timestamp": 1583508810
    },
    {
        "content": "<p>Details TBD, etc.</p>",
        "id": 189904090,
        "sender_full_name": "centril",
        "timestamp": 1583508820
    },
    {
        "content": "<p>right, so let's talk a bit about the \"transition plan\" because I think it's relevant then</p>",
        "id": 189904148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508842
    },
    {
        "content": "<p>anyway, that was a hunch, and it does seem interesting enough that I might try this pattern in one my side projects (if I ever get back to it), and play around with the names and APIs to see how nice I can get it (for myself)</p>",
        "id": 189904161,
        "sender_full_name": "eddyb",
        "timestamp": 1583508847
    },
    {
        "content": "<p>I think the most practical thing is to try and gradually extract this library out from rustc</p>",
        "id": 189904188,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508878
    },
    {
        "content": "<p>one of the benefits of this is we can track performance</p>",
        "id": 189904190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508883
    },
    {
        "content": "<p>so e.g. if we try to make things generic and we wind up losing out on some benefits we got from flags or whatever, we'll notice</p>",
        "id": 189904208,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508897
    },
    {
        "content": "<p>Seems tricky though to do this as a series of small PRs</p>",
        "id": 189904233,
        "sender_full_name": "centril",
        "timestamp": 1583508919
    },
    {
        "content": "<p>Do you think it might make sense to extract it from chalk-ra first? Presumably, this can be done fast enough, and could inform rustc extraction</p>",
        "id": 189904244,
        "sender_full_name": "matklad",
        "timestamp": 1583508932
    },
    {
        "content": "<p>Cause it seems fairly invasive... but maybe we can do e.g. <code>ty.kind</code> -&gt; <code>ty.kind()</code> -&gt; <code>ty.kind(tcx)</code> as a 2-PR step thing</p>",
        "id": 189904318,
        "sender_full_name": "centril",
        "timestamp": 1583508969
    },
    {
        "content": "<p>Ie, we first do <em>exploration</em> with ra/chalk, and then procede with rustc plan</p>",
        "id": 189904324,
        "sender_full_name": "matklad",
        "timestamp": 1583508973
    },
    {
        "content": "<p>problem is rustc has all of the necessary complexity, so it will ultimately impose itself onto the design</p>",
        "id": 189904326,
        "sender_full_name": "eddyb",
        "timestamp": 1583508975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904233\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904233\">said</a>:</p>\n<blockquote>\n<p>Seems tricky though to do this as a series of small PRs</p>\n</blockquote>\n<p>well, I'm not sure how <em>smal</em> said PRs will be, but I think we have to do it step by step, presumably by trying first to \"align\" the \"API\" of <code>Ty&lt;'tcx&gt;</code>,</p>",
        "id": 189904336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583508992
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904318\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904318\">said</a>:</p>\n<blockquote>\n<p>Cause it seems fairly invasive... but maybe we can do e.g. <code>ty.kind</code> -&gt; <code>ty.kind()</code> -&gt; <code>ty.kind(tcx)</code> as a 2-PR step thing</p>\n</blockquote>\n<p>right, I think there are basically a set of <em>mechanical</em> (if not <em>small</em>) Prs of this nature</p>",
        "id": 189904373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509022
    },
    {
        "content": "<p>so there's two main parts from this I'm seeing:</p>\n<ul>\n<li>reshape <code>TyKind</code> to have a Chalk-like hierarchy (especially the \"apply\" part)</li>\n<li>introduce abstraction over the interner</li>\n</ul>",
        "id": 189904385,
        "sender_full_name": "eddyb",
        "timestamp": 1583509028
    },
    {
        "content": "<p>as I wrote, I hope that we get to the point where <code>Ty&lt;'tcx&gt;</code> is basically an <em>alias</em> for <code>rustc_ty::Ty&lt;TyCtxt&lt;'tcx&gt;&gt;</code></p>",
        "id": 189904404,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509046
    },
    {
        "content": "<p>and we can probably do them relatively independently (except for the fact that they would likely conflict, diff-wise)</p>",
        "id": 189904425,
        "sender_full_name": "eddyb",
        "timestamp": 1583509062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904385\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904385\">said</a>:</p>\n<blockquote>\n<p>so there's two main parts from this I'm seeing:</p>\n<ul>\n<li>reshape <code>TyKind</code> to have a Chalk-like hierarchy (especially the \"apply\" part)</li>\n<li>introduce abstraction over the interner</li>\n</ul>\n</blockquote>\n<p>yeah, and the two are fairly independent</p>",
        "id": 189904432,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> to circle back to your question, on the chalk + rust-analyzer side, I think those too will have to migrate some. I do think it makes sense to start merging chalk + rust-analyzer's type representation</p>",
        "id": 189904518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509106
    },
    {
        "content": "<p>if it helps, we already do something like that with <code>rustc_target</code>, even if the abstraction looks nothing like <code>Interner</code>-generic types</p>",
        "id": 189904533,
        "sender_full_name": "eddyb",
        "timestamp": 1583509114
    },
    {
        "content": "<p>my proposed end-point for now was that we had a library (let's call it <code>rustc-ty</code>) that is in-tree but also published periodically to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> with meaningful semver</p>",
        "id": 189904556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509127
    },
    {
        "content": "<p>so that chalk + rust-analyzer can rely on it without using sysroot</p>",
        "id": 189904576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509140
    },
    {
        "content": "<p>(and without using unstable attributes)</p>",
        "id": 189904609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509164
    },
    {
        "content": "<p>we <em>were</em> doing something similar with libsyntax, except that the semver was \"every change is a breaking change\", and I'd prefer to do better with this library</p>",
        "id": 189904631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509186
    },
    {
        "content": "<p>(I don't know if we still are)</p>",
        "id": 189904638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509190
    },
    {
        "content": "<p>that is, <code>rustc::ty::layout</code> reexports <code>rustc_layout::abi::*</code> but shadows generic-over-typesystem parts of it like <code>TyLayout</code> with a <code>type</code> alias limited to <code>rustc::ty::Ty</code></p>",
        "id": 189904645,
        "sender_full_name": "eddyb",
        "timestamp": 1583509197
    },
    {
        "content": "<p>ah, interesting</p>",
        "id": 189904695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509208
    },
    {
        "content": "<p>I hadn't seen that pattern</p>",
        "id": 189904699,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509211
    },
    {
        "content": "<p>or maybe I did and forgot :)</p>",
        "id": 189904711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509218
    },
    {
        "content": "<p>/me waits for someone to tell him that he reviewed it</p>",
        "id": 189904729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509228
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904556\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904556\">said</a>:</p>\n<blockquote>\n<p>my proposed end-point for now was that we had a library (let's call it <code>rustc-ty</code>) that is in-tree but also published periodically to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a> with meaningful semver</p>\n</blockquote>\n<p>The name rustc_ty is already taken btw</p>",
        "id": 189904735,
        "sender_full_name": "centril",
        "timestamp": 1583509232
    },
    {
        "content": "<p>that's fine :) I'm not wedded to the name.</p>",
        "id": 189904755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509248
    },
    {
        "content": "<p>it would make even more sense if the module was <code>rustc::ty::abi</code> but that's a rename that has been pending for years, welp</p>",
        "id": 189904757,
        "sender_full_name": "eddyb",
        "timestamp": 1583509250
    },
    {
        "content": "<p>it will contain more than types anyway</p>",
        "id": 189904759,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509251
    },
    {
        "content": "<p>rustc-term...rustc-ir...?</p>",
        "id": 189904787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509263
    },
    {
        "content": "<p><code>rustc-typesystem</code></p>",
        "id": 189904802,
        "sender_full_name": "eddyb",
        "timestamp": 1583509276
    },
    {
        "content": "<p>\"term\" is PL jargon but kind of what we want...</p>",
        "id": 189904809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509279
    },
    {
        "content": "<p>let's just rename the existing rustc_ty to something else <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 189904814,
        "sender_full_name": "centril",
        "timestamp": 1583509283
    },
    {
        "content": "<p>also ok:)</p>",
        "id": 189904838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509296
    },
    {
        "content": "<p>the <code>term</code> crate is a terminal library, that might get confusing :P</p>",
        "id": 189904846,
        "sender_full_name": "eddyb",
        "timestamp": 1583509304
    },
    {
        "content": "<p>\"term\" would be fine if you want to move MIR into it too</p>",
        "id": 189904847,
        "sender_full_name": "centril",
        "timestamp": 1583509304
    },
    {
        "content": "<p>I was actually hoping we could consider the typesystem a part of MIR</p>",
        "id": 189904865,
        "sender_full_name": "eddyb",
        "timestamp": 1583509321
    },
    {
        "content": "<p>ok, time-check: 40 minutes</p>",
        "id": 189904910,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904609\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904609\">said</a>:</p>\n<blockquote>\n<p>(and without using unstable attributes)</p>\n</blockquote>\n<p>Why this? I think we should be able to take advantage of unstable features and dogfood them</p>",
        "id": 189904914,
        "sender_full_name": "centril",
        "timestamp": 1583509326
    },
    {
        "content": "<p>but that's a different pie in the sky</p>",
        "id": 189904926,
        "sender_full_name": "eddyb",
        "timestamp": 1583509333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904847\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189904847\">said</a>:</p>\n<blockquote>\n<p>\"term\" would be fine if you want to move MIR into it too</p>\n</blockquote>\n<p>so, this is actually a good point</p>",
        "id": 189904928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509334
    },
    {
        "content": "<p>I did not expet to move MIR into this, <em>but</em></p>",
        "id": 189904948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509351
    },
    {
        "content": "<p>I expected MIr to depend on it</p>",
        "id": 189904952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509356
    },
    {
        "content": "<p>and <del>perhaps</del> use the same <code>I: Interner</code> scheme to be made independent</p>",
        "id": 189904961,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509364
    },
    {
        "content": "<p>(this is more a \"down the line\" sort of thing)</p>",
        "id": 189904968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509372
    },
    {
        "content": "<p>make it <code>rustc-mir</code> and then rename all internal crates to <code>rustc_mir_something</code></p>",
        "id": 189904980,
        "sender_full_name": "eddyb",
        "timestamp": 1583509379
    },
    {
        "content": "<blockquote>\n<p>with meaningful semver</p>\n</blockquote>\n<p>But we should be explicit that the library is not considered perma-stable. Ie, we might abondon it in Rust 1.2019.0 and pursue something else.</p>",
        "id": 189904986,
        "sender_full_name": "matklad",
        "timestamp": 1583509385
    },
    {
        "content": "<p>Yes, I think we would be saying this:</p>",
        "id": 189904999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509399
    },
    {
        "content": "<ul>\n<li>we do not guarantee the library will exist</li>\n<li>we may and sometimes will introduce new major versions frequently</li>\n<li>but we will let you know when that happens and not bump major version gratuitously</li>\n</ul>",
        "id": 189905035,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509432
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.Const.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.Const.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/struct.Const.html</a> is somewhat tied to MIR</p>",
        "id": 189905039,
        "sender_full_name": "centril",
        "timestamp": 1583509433
    },
    {
        "content": "<p>Yeah, I am not sure the best way to sever the \"const and MIR\" connection,</p>",
        "id": 189905093,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509449
    },
    {
        "content": "<p>chalk doesn't have consts yet :P but</p>",
        "id": 189905137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509477
    },
    {
        "content": "<p>why are constants tied to MIR?</p>",
        "id": 189905141,
        "sender_full_name": "oli",
        "timestamp": 1583509480
    },
    {
        "content": "<p>eh, all the MIR is referred to by <code>DefId</code>s</p>",
        "id": 189905156,
        "sender_full_name": "eddyb",
        "timestamp": 1583509491
    },
    {
        "content": "<p>right, this is what I hope</p>",
        "id": 189905163,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509497
    },
    {
        "content": "<p>ah</p>",
        "id": 189905166,
        "sender_full_name": "oli",
        "timestamp": 1583509499
    },
    {
        "content": "<p>I was just reviewing <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.ConstKind.html\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/enum.ConstKind.html\">ConstKind</a></p>",
        "id": 189905174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509505
    },
    {
        "content": "<p>so that seems fine</p>",
        "id": 189905182,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509509
    },
    {
        "content": "<p>the chalk <code>Interner</code> trait, as it ahppens, also has a <code>I::DefId</code> associated type :)</p>",
        "id": 189905194,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509518
    },
    {
        "content": "<p>does seem fine</p>",
        "id": 189905195,
        "sender_full_name": "centril",
        "timestamp": 1583509518
    },
    {
        "content": "<p>though we've been debating about whether to make more of them (e.g., <code>StructDefId</code> and the lke)</p>",
        "id": 189905231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509549
    },
    {
        "content": "<p>but that's a separate thing</p>",
        "id": 189905238,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509552
    },
    {
        "content": "<p>we do have the <code>Promoted</code> index, but I think that's surmountable</p>",
        "id": 189905241,
        "sender_full_name": "oli",
        "timestamp": 1583509553
    },
    {
        "content": "<blockquote>\n<p>but we will let you know when that happens and not bump major version gratuitously</p>\n</blockquote>\n<p>I'm not a fan of providing any sort of stability / conservatism wrt. rustc internals; we should be able to change things as needed, although I don't expect that we will frequently break <code>Ty</code> internals (the query database we absolutely do however)</p>",
        "id": 189905312,
        "sender_full_name": "centril",
        "timestamp": 1583509579
    },
    {
        "content": "<p>right either it becomes an associated type, or we just include the indices, I think that's the kind of thing we can tinker with to try and find the right place to draw the lines</p>",
        "id": 189905327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509588
    },
    {
        "content": "<p>Similarly I think we should be able to use unstable features in this new library, and e.g. rustc_typeck if/when we start migrating that</p>",
        "id": 189905374,
        "sender_full_name": "centril",
        "timestamp": 1583509629
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189905312\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189905312\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>but we will let you know when that happens and not bump major version gratuitously</p>\n</blockquote>\n<p>I'm not a fan of providing any sort of stability / conservatism wrt. rustc internals; we should be able to change things as needed, although I don't expect that we will frequently break <code>Ty</code> internals (the query database we absolutely do however)</p>\n</blockquote>\n<p>This is probably worth talking about a bit more. I want rustc to be able to be divided up into more independent libraries that people can focus on. Having meaningful boundaries is an important part of that. It doesn't mean we can't change things, but at least <em>knowing</em> when we did so will be helpful.</p>",
        "id": 189905402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509654
    },
    {
        "content": "<p>I think we can have an abstract type/trait system and even MIR bodies that hide a lot of the gnarly details behind associated types / methods</p>",
        "id": 189905403,
        "sender_full_name": "eddyb",
        "timestamp": 1583509656
    },
    {
        "content": "<p>I would actually go further and say that if we are able to find meaningful and correct boundaries,</p>",
        "id": 189905511,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509695
    },
    {
        "content": "<p>it won't be much work to maintain them</p>",
        "id": 189905520,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509701
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189905402\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189905402\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"126931\">centril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189905312\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189905312\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>but we will let you know when that happens and not bump major version gratuitously</p>\n</blockquote>\n<p>I'm not a fan of providing any sort of stability / conservatism wrt. rustc internals; we should be able to change things as needed, although I don't expect that we will frequently break <code>Ty</code> internals (the query database we absolutely do however)</p>\n</blockquote>\n<p>This is probably worth talking about a bit more. I want rustc to be able to be divided up into more independent libraries that people can focus on. Having meaningful boundaries is an important part of that. It doesn't mean we can't change things, but at least <em>knowing</em> when we did so will be helpful.</p>\n</blockquote>\n<p>Sure, but typically we know via PRs that we changed things?</p>",
        "id": 189905539,
        "sender_full_name": "centril",
        "timestamp": 1583509719
    },
    {
        "content": "<p>Longer term, I'd like to be able to support people building more complex tooling for analyzing rust (think Libra's MIRAI) as well, eventually, and have them be able to use our libraries (think Roslyn)</p>",
        "id": 189905590,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509746
    },
    {
        "content": "<p>Existence of such meaningful boundaries is an open question though :D But it makes sense to at least try</p>",
        "id": 189905601,
        "sender_full_name": "matklad",
        "timestamp": 1583509753
    },
    {
        "content": "<p>Starting to maintain CHANGELOG.md and stuff feels like a hassle</p>",
        "id": 189905621,
        "sender_full_name": "centril",
        "timestamp": 1583509769
    },
    {
        "content": "<p>like MIR is relatively simple if you hide all of the builtins as pure-ish operations of various arities</p>",
        "id": 189905647,
        "sender_full_name": "eddyb",
        "timestamp": 1583509781
    },
    {
        "content": "<p>I would want to put a line of \"no unstable features\"</p>",
        "id": 189905727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509804
    },
    {
        "content": "<p>in rustc-ty</p>",
        "id": 189905731,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509806
    },
    {
        "content": "<p>basically, I think there's still some ongoing debate about the best \"shape\"</p>",
        "id": 189905757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509826
    },
    {
        "content": "<p>and I want this library to not take a side :)</p>",
        "id": 189905774,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509836
    },
    {
        "content": "<p>i.e., should rustc dev be something where people can drop in with a stable compiler and participate in much the same way as any other project?</p>",
        "id": 189905824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509876
    },
    {
        "content": "<p>I disagree with such a line; It's not something we do in the compiler, and if we start here it will definitely spread to other crates that depend on <code>rustc_ty</code></p>",
        "id": 189905825,
        "sender_full_name": "centril",
        "timestamp": 1583509877
    },
    {
        "content": "<p>It will spread to any crate that is going to be consumed by rust-analyzer and chalk :)</p>",
        "id": 189905863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509903
    },
    {
        "content": "<p>Until we decide firmly one way or the other, which I (personally) feel is too soon to do</p>",
        "id": 189905940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509927
    },
    {
        "content": "<p>And presumably that number will increase, as rust-analyzer shares more and more code, disallowing us from testing unstable features in the compiler</p>",
        "id": 189905942,
        "sender_full_name": "centril",
        "timestamp": 1583509929
    },
    {
        "content": "<p>we could do some auditing and see which unstable features we care about (e.g. <code>extern type</code> is useful in making <code>ty::List</code> work) and which not so much</p>",
        "id": 189905973,
        "sender_full_name": "eddyb",
        "timestamp": 1583509945
    },
    {
        "content": "<p>Unless we decide to require nightly, that's true.</p>",
        "id": 189905978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509949
    },
    {
        "content": "<p>But we can revisit this topic once we have more experience.</p>",
        "id": 189905986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509959
    },
    {
        "content": "<p>Personally I think that's a good trade, but I have felt differently in the past</p>",
        "id": 189905999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509970
    },
    {
        "content": "<p>(i.e., I think that dogfooding unstable features on rustc was super useful to rust during its development -- I'm less sure now, but I see the point)</p>",
        "id": 189906038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583509996
    },
    {
        "content": "<p>but yeah what I hoped for in this meeting was that we could just not decide yet :)</p>",
        "id": 189906063,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583510020
    },
    {
        "content": "<p>I'm fine with sticking with the status quo of not changing things in terms of unstable features</p>",
        "id": 189906125,
        "sender_full_name": "centril",
        "timestamp": 1583510050
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189905973\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189905973\">said</a>:</p>\n<blockquote>\n<p>we could do some auditing and see which unstable features we care about (e.g. <code>extern type</code> is useful in making <code>ty::List</code> work) and which not so much</p>\n</blockquote>\n<p>yes, I'd be interested if there are unstable features we really need, though right now that stuff is abstracted through the <code>Interner</code> trait</p>",
        "id": 189906128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583510054
    },
    {
        "content": "<p>anyway before I lose this from my clipboard:</p>\n<p>this typesystem vs/besides MIR reminds me I thought of <del>abusing</del> reusing the new mangling scheme as a def-path/type serialization system (e.g. between two users of rustc-ty/rustc-mir/whatever we're calling it), because it's already compact, has builtin compression, and it can handle some typesystem corner cases better than plain Rust syntax</p>",
        "id": 189906129,
        "sender_full_name": "eddyb",
        "timestamp": 1583510054
    },
    {
        "content": "<p>and discussing a change later</p>",
        "id": 189906136,
        "sender_full_name": "centril",
        "timestamp": 1583510064
    },
    {
        "content": "<p>(time-check: 54 minutes, so we're basically done)</p>",
        "id": 189906145,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583510077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189906129\" title=\"#narrow/stream/131828-t-compiler/topic/design.20meeting.202020-03-06/near/189906129\">said</a>:</p>\n<blockquote>\n<p>anyway before I lose this from my clipboard:</p>\n</blockquote>\n<p>I'm intrigued but not sure I'm fully following :)</p>",
        "id": 189906186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583510105
    },
    {
        "content": "<p>As for dogfooding, I think it's still very useful, both because it lets us real-world-test the benefits of a feature, but more importantly, it allows us to find bugs in a feature, since fewer people tend to use nightly these days</p>",
        "id": 189906199,
        "sender_full_name": "centril",
        "timestamp": 1583510114
    },
    {
        "content": "<p>it came up while I was discussing Ferrous Systems' \"sealed Rust\" with <span class=\"user-mention\" data-user-id=\"228912\">@James Munns</span></p>",
        "id": 189906248,
        "sender_full_name": "eddyb",
        "timestamp": 1583510147
    },
    {
        "content": "<p>(\"really need\" is highly subjective; e.g. a bunch of ergonomics features would presumably answer that with \"no\", but it's still important to test those out, and they make development nicer.)</p>",
        "id": 189906322,
        "sender_full_name": "centril",
        "timestamp": 1583510169
    },
    {
        "content": "<p>long-term they would like if the frontend and backend could be split with a (presumably human-inspectable) IR in the middle</p>",
        "id": 189906337,
        "sender_full_name": "eddyb",
        "timestamp": 1583510180
    },
    {
        "content": "<p>It is my impression that </p>\n<ul>\n<li>folks in this meeting are \"cautiously optimistic\" about this approach, and open to us trying to create PRs that move rustc in this direction</li>\n<li>ok with having a rusc-ty library that is published to <a href=\"http://crates.io\" target=\"_blank\" title=\"http://crates.io\">crates.io</a></li>\n<li>there remains disagreement about the big picture question of how stable API boundaries can/should be between libraries, whether they should live in their own repos, and whether they should use unstable  features (but that was not the direct topic of this meeting, so that's ok)</li>\n</ul>",
        "id": 189906358,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583510196
    },
    {
        "content": "<p>does that sound correct?</p>",
        "id": 189906380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1583510220
    },
    {
        "content": "<p>so it overlaps with \"MIR abstracted out of rustc\" ideas that adjacent to what we're talking about here</p>",
        "id": 189906394,
        "sender_full_name": "eddyb",
        "timestamp": 1583510226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I might want to bikeshed the name but other than that yeah :P</p>",
        "id": 189906436,
        "sender_full_name": "eddyb",
        "timestamp": 1583510251
    },
    {
        "content": "<p>Yep; <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  you might perhaps want to include this:</p>\n<blockquote>\n<p>So, a sketch for a plan in <code>rustc</code> (each step is a PR):<br>\n1. <code>ty.kind</code> -&gt; <code>ty.kind()</code><br>\n2. <code>ty.kind()</code>-&gt; <code>ty.kind(tcx)</code><br>\n3. Add a type alias and make <code>kind</code> work on <code>I: Interner</code><br>\n4. Start using <code>Ty&lt;I&gt;</code> more (This is a lot of PRs)</p>\n</blockquote>",
        "id": 189906441,
        "sender_full_name": "centril",
        "timestamp": 1583510254
    },
    {
        "content": "<p>posted minutes from this meeting in <a href=\"https://github.com/rust-lang/compiler-team/issues/255\" target=\"_blank\" title=\"https://github.com/rust-lang/compiler-team/issues/255\">compiler-team#255</a></p>",
        "id": 190379378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1584012934
    }
]