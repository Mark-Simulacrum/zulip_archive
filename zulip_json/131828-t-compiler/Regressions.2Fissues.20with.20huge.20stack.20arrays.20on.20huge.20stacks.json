[
    {
        "content": "<p>In the course of answering someone's question about huge stack arrays, I experimented with creating a thread that had a 5GB stack size (using <code>std::thread::Builder::stack_size</code>), and then creating a huge array on the stack. In doing so, I ran into several different unusual issues, at least some of which seem like regressions from stable to nightly. Some of them look like unusual code generation issues, possibly cases where something is truncating or incorrectly sign-extending a value.</p>",
        "id": 230080021,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575370
    },
    {
        "content": "<p>The base test program looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">CAP</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"kt\">u32</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">CAP</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">CAP</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">123</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">std</span>::<span class=\"n\">thread</span>::<span class=\"n\">Builder</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">stack_size</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 230080079,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575397
    },
    {
        "content": "<p>Call that the 4GB version.<br>\nI also built 2GB and 1GB versions, by changing <code>CAP</code> to <code>CAP&gt;&gt;1</code> or <code>CAP&gt;&gt;2</code> in both uses of <code>CAP</code>.</p>",
        "id": 230080205,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575451
    },
    {
        "content": "<p>I built that on stable in debug mode, on stable in release mode, and on nightly in release mode, and got three different results.</p>",
        "id": 230080323,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575485
    },
    {
        "content": "<p>On stable in release mode, it seems to work perfectly at all three sizes, and it prints 123.</p>",
        "id": 230080372,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575505
    },
    {
        "content": "<p>On stable in debug mode, it works fine at 1gb and 2gb, but the 4gb version prints a random different value every time (not 123).</p>",
        "id": 230080445,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575537
    },
    {
        "content": "<p>And on nightly in release mode, the 1GB version works fine, but the 2GB and 4GB versions both seem to allocate <em>far</em> too much, and die with a stack overflow.</p>",
        "id": 230080686,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575625
    },
    {
        "content": "<p>I think there are at least two separate issues going on here.</p>",
        "id": 230080718,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575637
    },
    {
        "content": "<p>I built all nine of those versions (stable debug, stable release, nightly release, for each of 1GB, 2GB, 4GB) and dumped the disassembly with <code>objdump -d</code>.</p>",
        "id": 230080827,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575676
    },
    {
        "content": "<p>I also filtered out a lot of noisy differences in LLVM symbol names with: <code>sed 's/anon[0-9a-f.]*llvm[0-9a-f.]*/anon-ELIDED-llvm-ELIDED/'</code></p>",
        "id": 230080904,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575710
    },
    {
        "content": "<p>Looking over the remaining differences turned up some things that seem unusual.</p>",
        "id": 230081004,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615575736
    },
    {
        "content": "<p>For example, the diff between nightly-release 1gb and 2gb is:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- nightly-release-1gb</span>\n<span class=\"gi\">+++ nightly-release-2gb</span>\n<span class=\"gu\">@@ -2468,7 +2468,7 @@</span>\n 0000000000008380 &lt;_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h12c12c27c7a85101E&gt;:\n     8380:      53                      push   %rbx\n     8381:      49 89 e3                mov    %rsp,%r11\n<span class=\"gd\">-    8384:      49 81 eb 00 00 00 40    sub    $0x40000000,%r11</span>\n<span class=\"gi\">+    8384:      49 81 eb 00 00 00 80    sub    $0xffffffff80000000,%r11</span>\n     838b:      48 81 ec 00 10 00 00    sub    $0x1000,%rsp\n     8392:      48 c7 04 24 00 00 00    movq   $0x0,(%rsp)\n     8399:      00\n<span class=\"gu\">@@ -2476,7 +2476,7 @@</span>\n     839d:      75 ec                   jne    838b &lt;_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h12c12c27c7a85101E+0xb&gt;\n     839f:      48 83 ec 40             sub    $0x40,%rsp\n     83a3:      48 8d 5c 24 40          lea    0x40(%rsp),%rbx\n<span class=\"gd\">-    83a8:      ba ff ff ff 3f          mov    $0x3fffffff,%edx</span>\n<span class=\"gi\">+    83a8:      ba ff ff ff 7f          mov    $0x7fffffff,%edx</span>\n     83ad:      48 89 df                mov    %rbx,%rdi\n     83b0:      31 f6                   xor    %esi,%esi\n     83b2:      ff 15 a0 07 04 00       callq  *0x407a0(%rip)        # 48b58 &lt;memset@GLIBC_2.2.5&gt;\n<span class=\"gu\">@@ -2497,12 +2497,11 @@</span>\n     83ff:      00 00\n     8401:      48 8d 7c 24 10          lea    0x10(%rsp),%rdi\n     8406:      ff 15 7c 0a 04 00       callq  *0x40a7c(%rip)        # 48e88 &lt;_GLOBAL_OFFSET_TABLE_+0x5b0&gt;\n<span class=\"gd\">-    840c:      48 81 c4 40 00 00 40    add    $0x40000040,%rsp</span>\n<span class=\"gd\">-    8413:      5b                      pop    %rbx</span>\n<span class=\"gd\">-    8414:      c3                      retq</span>\n<span class=\"gd\">-    8415:      66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span>\n<span class=\"gd\">-    841c:      00 00 00</span>\n<span class=\"gd\">-    841f:      90                      nop</span>\n<span class=\"gi\">+    840c:      48 81 c4 ff ff ff 7f    add    $0x7fffffff,%rsp</span>\n<span class=\"gi\">+    8413:      48 83 c4 41             add    $0x41,%rsp</span>\n<span class=\"gi\">+    8417:      5b                      pop    %rbx</span>\n<span class=\"gi\">+    8418:      c3                      retq</span>\n<span class=\"gi\">+    8419:      0f 1f 80 00 00 00 00    nopl   0x0(%rax)</span>\n\n 0000000000008420 &lt;_ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h3c355c4098361013E&gt;:\n     8420:      48 83 ec 08             sub    $0x8,%rsp\n</code></pre></div>",
        "id": 230082421,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615576366
    },
    {
        "content": "<p>That first difference looks like a sign extension issue.</p>",
        "id": 230082447,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615576377
    },
    {
        "content": "<p>Currently uploading all the dumps and diffs to a gist.</p>",
        "id": 230082522,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615576419
    },
    {
        "content": "<p>Please file an issue on github</p>",
        "id": 230084355,
        "sender_full_name": "nagisa",
        "timestamp": 1615577308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> Was planning to. I was hoping to characterize the problem a little more so I knew whether to file one issue or two, but if you think it'd be better, I could go ahead and file it and it can always be split further.</p>",
        "id": 230085030,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615577629
    },
    {
        "content": "<p>Ah okay, either way you're more comfortable with. Sounds like potentially a llvm12 regression.</p>",
        "id": 230085316,
        "sender_full_name": "nagisa",
        "timestamp": 1615577748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Regressions.2Fissues.20with.20huge.20stack.20arrays.20on.20huge.20stacks/near/230080445\">said</a>:</p>\n<blockquote>\n<p>On stable in debug mode, it works fine at 1gb and 2gb, but the 4gb version prints a random different value every time (not 123).</p>\n</blockquote>\n<p>\"random different value\" sounds problematic (I-unsound <span aria-label=\"boom\" class=\"emoji emoji-1f4a5\" role=\"img\" title=\"boom\">:boom:</span>)...</p>",
        "id": 230086073,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615578103
    },
    {
        "content": "<p>Yeah, that was my biggest concern.</p>",
        "id": 230086728,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615578415
    },
    {
        "content": "<p>Writing it up as a github issue now...</p>",
        "id": 230086920,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615578489
    },
    {
        "content": "<blockquote>\n<p>Sounds like potentially a llvm12 regression.</p>\n</blockquote>\n<p>No, I tested it and the regression can be reproduced on beta.</p>",
        "id": 230092513,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615580856
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"374396\">@hyd-dev</span> Does beta behave like current nightly or like current stable?</p>",
        "id": 230092562,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615580876
    },
    {
        "content": "<p>Like current nightly, that is, stack overflows.</p>",
        "id": 230092646,
        "sender_full_name": "hyd-dev",
        "timestamp": 1615580900
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/83060\">https://github.com/rust-lang/rust/issues/83060</a></p>",
        "id": 230093797,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615581385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"374396\">@hyd-dev</span> Thanks for the fast analysis!</p>",
        "id": 230095860,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615582445
    },
    {
        "content": "<p>This was an adventure. It started out with <a href=\"https://internals.rust-lang.org/t/u32-as-a-second-fallback-type/14219/10\">this question on internals</a>, to which my thought was \"you should be able to do that if you set up a thread with a huge stack\", and then when I tried it, I started getting random values out.</p>",
        "id": 230096929,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615582867
    },
    {
        "content": "<p>I'm glad I took the time to do the experiment.</p>",
        "id": 230096956,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615582883
    },
    {
        "content": "<p>Just to confirm, it looks like the commit you tracked this down to is indeed not included in 1.50.0 stable. So that may potentially be the cause of the regression from stable to nightly. Separate from that, there's an apparent soundness bug in 1.50.0 stable. It may be that the change in nightly is masking the soundness issue in stable.</p>",
        "id": 230097942,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615583356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> does <a href=\"https://rust.godbolt.org/z/P4oaEM\">https://rust.godbolt.org/z/P4oaEM</a> look similarly broken as your code using <code>format!</code>?</p>",
        "id": 230109799,
        "sender_full_name": "nagisa",
        "timestamp": 1615588013
    },
    {
        "content": "<p>If I'm looking right at this, the case that looks more broken is the 2GB one, because its thinking that there's a variable 2GB below <code>rsp</code> which already has been subtracted from..</p>",
        "id": 230110102,
        "sender_full_name": "nagisa",
        "timestamp": 1615588176
    },
    {
        "content": "<p>So, I <em>think</em> they're both wrong in different ways.</p>",
        "id": 230112509,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615589510
    },
    {
        "content": "<p>I just posted a comment to the issue. I think for stable-debug, diffing 1gb to 2gb may be more helpful.</p>",
        "id": 230112566,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615589532
    },
    {
        "content": "<p>1gb has large positive offsets. 2gb has large <em>negative</em> offsets that look like they've wrapped. 4gb has tiny positive offsets that look like they've truncated.</p>",
        "id": 230112594,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615589560
    },
    {
        "content": "<p>The overflow point is just under 2gb.</p>",
        "id": 230112826,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615589725
    },
    {
        "content": "<p>Note that if you play with diffs around that mark, you may see some of the offsets wrap and not others, because some of them are at different points in the stack.</p>",
        "id": 230112944,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615589806
    },
    {
        "content": "<p>I think that calculation for <code>%r11</code> is here:<br>\n<a href=\"https://github.com/rust-lang/llvm-project/blob/bbf96c9f18aa47770c4f571f714d8641ddbe86e9/llvm/lib/Target/X86/X86FrameLowering.cpp#L660-L667\">https://github.com/rust-lang/llvm-project/blob/bbf96c9f18aa47770c4f571f714d8641ddbe86e9/llvm/lib/Target/X86/X86FrameLowering.cpp#L660-L667</a></p>",
        "id": 230113123,
        "sender_full_name": "cuviper",
        "timestamp": 1615589930
    },
    {
        "content": "<p>Here's a diff close to the wrap point: <a href=\"https://rust.godbolt.org/z/rn1bPd\">https://rust.godbolt.org/z/rn1bPd</a></p>",
        "id": 230113140,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1615589944
    },
    {
        "content": "<p>(my link would only apply to inline-asm probes, so 1.51+)</p>",
        "id": 230113379,
        "sender_full_name": "cuviper",
        "timestamp": 1615590065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> the entire epilogue/prologue insertion &amp; frame finalization pass appears to be wrong</p>",
        "id": 230113733,
        "sender_full_name": "nagisa",
        "timestamp": 1615590299
    },
    {
        "content": "<p>yeah, I see now, it's not really the probing</p>",
        "id": 230113976,
        "sender_full_name": "cuviper",
        "timestamp": 1615590463
    },
    {
        "content": "<p>/me cooking up a llvm-ir reproducer to report upstream.</p>",
        "id": 230114067,
        "sender_full_name": "nagisa",
        "timestamp": 1615590504
    },
    {
        "content": "<p>I can't dig now, but count me interested... :)</p>",
        "id": 230114083,
        "sender_full_name": "cuviper",
        "timestamp": 1615590516
    },
    {
        "content": "<p><a href=\"https://bugs.llvm.org/show_bug.cgi?id=49567\">https://bugs.llvm.org/show_bug.cgi?id=49567</a></p>",
        "id": 230116677,
        "sender_full_name": "nagisa",
        "timestamp": 1615592451
    }
]