[
    {
        "content": "<p>Howdy! I'm working on getting rustc HEAD working with LLVM HEAD - the compiler builds (and has for a little over a month), but some codegen tests fail (examples <a href=\"https://buildkite.com/llvm-project/rust-llvm-integrate-prototype/builds/2719#e3b5666e-b1b7-4916-bd0f-f85b84a0af2b\">here</a> if you want to look) in a way that my local LLVM experts suggest is an optimizer bug. Is there any prior art on getting the un-optimized LLVM IR and running it through the <code>llc</code> tool to bisect where the regression hit? This won't be easy to bisect otherwise because of LLVM API changes making life more complicated.</p>",
        "id": 243947273,
        "sender_full_name": "durin42",
        "timestamp": 1624642757
    },
    {
        "content": "<p>there's some discussion here: <a href=\"https://rustc-dev-guide.rust-lang.org/backend/debugging.html\">https://rustc-dev-guide.rust-lang.org/backend/debugging.html</a></p>",
        "id": 243947791,
        "sender_full_name": "cuviper",
        "timestamp": 1624643042
    },
    {
        "content": "<p>once you have IR and you can reproduce it with llc/opt, then bugpoint can probably narrow it down</p>",
        "id": 243947843,
        "sender_full_name": "cuviper",
        "timestamp": 1624643062
    },
    {
        "content": "<p>also, bytecode is more stable than textual IR when you're trying to bisect LLVM</p>",
        "id": 243948046,
        "sender_full_name": "cuviper",
        "timestamp": 1624643177
    },
    {
        "content": "<p>Is there an easy way to get a list of passes that rustc does that I can pass into <code>llc</code> somehow?</p>",
        "id": 243948379,
        "sender_full_name": "durin42",
        "timestamp": 1624643366
    },
    {
        "content": "<p>I think <code>-Z print-llvm-passes</code> will do that.</p>",
        "id": 243948530,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1624643447
    },
    {
        "content": "<p>So in the case of <code>src/test/codegen/vec-iter-collect-len.rs</code> I'm looking at the results of the optimizer, so it sounds like I want the <code>opt</code> binary on the results of a compile using <code>--emit=llvm-ir -O -C no-prepopulate-passes</code>, probably <code>opt -S -O2</code>? Does that sound vaguely plausible?</p>\n<p>(I'm exploring this, but if I'm wrong it'd be helpful to cut off the exploration early.)</p>",
        "id": 243949725,
        "sender_full_name": "durin42",
        "timestamp": 1624643979
    },
    {
        "content": "<p>yeah that's plausible</p>",
        "id": 243949830,
        "sender_full_name": "cuviper",
        "timestamp": 1624644020
    },
    {
        "content": "<p>Thanks, I'll see if I've got it from here. Hopefully it can reduce down to a <code>git bisect</code> script that my machine can chew on.</p>",
        "id": 243949906,
        "sender_full_name": "durin42",
        "timestamp": 1624644068
    },
    {
        "content": "<p>Well this is interesting: the test also fails on the merge-base for LLVM HEAD and the stack of patches Rust has over top of LLVM 12.</p>",
        "id": 243952648,
        "sender_full_name": "durin42",
        "timestamp": 1624645531
    },
    {
        "content": "<p>alloc-optimization can't possibly succeed either as it relies on the patch that we historically have carried in-fork.</p>",
        "id": 243957758,
        "sender_full_name": "nagisa",
        "timestamp": 1624648239
    },
    {
        "content": "<p>Ah. Should we figure out some way to mark tests that depend on in-fork patches so it's easier to detect real failures against upstream LLVM HEAD?</p>",
        "id": 243957835,
        "sender_full_name": "durin42",
        "timestamp": 1624648289
    },
    {
        "content": "<p>Yes. One way to do that is to pretend LLVM is a system llvm build not a not-system one.</p>",
        "id": 243957860,
        "sender_full_name": "nagisa",
        "timestamp": 1624648312
    },
    {
        "content": "<p>Ah, that sounds like what I want!</p>",
        "id": 243957956,
        "sender_full_name": "durin42",
        "timestamp": 1624648355
    },
    {
        "content": "<p>(which would involve building LLVM separately and then directing the x.py to the separately built LLVM's llvm-config or whatever its called)</p>",
        "id": 243957972,
        "sender_full_name": "nagisa",
        "timestamp": 1624648363
    },
    {
        "content": "<p>Okay, I'll see about reworking my scripts to do that and see where we end up. Thanks!</p>",
        "id": 243958084,
        "sender_full_name": "durin42",
        "timestamp": 1624648414
    },
    {
        "content": "<p>As for passes, you can specify arbitrary commands for LLVM via <code>-Cllvm-args</code> including <code>-debug-pass=Arguments</code>.</p>",
        "id": 243958099,
        "sender_full_name": "nagisa",
        "timestamp": 1624648423
    },
    {
        "content": "<p>didn't we find that the alloc patch was broken anyway?</p>",
        "id": 243973659,
        "sender_full_name": "cuviper",
        "timestamp": 1624656826
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/llvm-project/pull/89\">https://github.com/rust-lang/llvm-project/pull/89</a></p>",
        "id": 243973662,
        "sender_full_name": "cuviper",
        "timestamp": 1624656832
    },
    {
        "content": "<p>It may be broken, but it works! (as evidenced by the codegen tests)</p>",
        "id": 243974921,
        "sender_full_name": "nagisa",
        "timestamp": 1624657664
    },
    {
        "content": "<p>FWIW, just forked further discussion of that patch into <a class=\"stream-topic\" data-stream-id=\"131828\" href=\"/#narrow/stream/131828-t-compiler/topic/upstreaming.20LLVM.20patch.20for.20__rust_.20alloc.20functions\">#t-compiler &gt; upstreaming LLVM patch for __rust_ alloc functions</a></p>",
        "id": 247435091,
        "sender_full_name": "eddyb",
        "timestamp": 1627461954
    }
]