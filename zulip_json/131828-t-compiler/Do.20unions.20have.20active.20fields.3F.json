[
    {
        "content": "<p>Not sure what channel to put this into, so using this as a fallback. The dest prop MIR opt has this comment:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//!   Subtle case: If `dest` is a, or projects through a union, then we have to make sure that there</span>\n<span class=\"sd\">//!   remains an assignment to it, since that sets the \"active field\" of the union. But if `src` is</span>\n<span class=\"sd\">//!   a ZST, it might not be initialized, so there might not be any use of it before the assignment,</span>\n<span class=\"sd\">//!   and performing the optimization would simply delete the assignment, leaving `dest`</span>\n<span class=\"sd\">//!   uninitialized.</span>\n</code></pre></div>\n<p>In particular, the claim seems to be that we can't take</p>\n<div class=\"codehilite\"><pre><span></span><code>x = ();\ny.field = x;\n</code></pre></div>\n<p>where <code>y</code> is a union having <code>field: ()</code> as one of its variants, and optimize the entire thing away (assuming <code>x</code> is unused otherwise). As far as I know though, Rust unions don't have active fields. Is this comment correct and am I missing something? Is there a worry about this interacting poorly with FFI code/C unions/LTO or something?</p>",
        "id": 272810652,
        "sender_full_name": "Jake",
        "timestamp": 1645540449
    }
]