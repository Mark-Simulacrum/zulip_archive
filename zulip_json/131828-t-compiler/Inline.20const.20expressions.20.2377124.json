[
    {
        "content": "<p>I was trying a huge hack :)</p>",
        "id": 210928610,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600807303
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// Parses constness: `const` or nothing.</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">parse_constness</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">sess</span><span class=\"p\">.</span><span class=\"n\">unstable_features</span><span class=\"p\">.</span><span class=\"n\">inline_const</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">look_ahead</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">t</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">token</span>::<span class=\"n\">OpenDelim</span><span class=\"p\">(</span><span class=\"n\">DelimToken</span>::<span class=\"n\">Brace</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">eat_keyword</span><span class=\"p\">(</span><span class=\"n\">kw</span>::<span class=\"n\">Const</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Const</span>::<span class=\"n\">Yes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">prev_token</span><span class=\"p\">.</span><span class=\"n\">uninterpolated_span</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Const</span>::<span class=\"n\">No</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210928880,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600807449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> btw, <code>self.sess.unstable_features.inline_const</code> doesn't work I was checking how to do that</p>",
        "id": 210928929,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600807483
    },
    {
        "content": "<p>but modifying <code>parse_constness</code> in that way is not the way to go I guess</p>",
        "id": 210928965,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600807507
    },
    {
        "content": "<p>aren't we only building unstable_features here</p>",
        "id": 210929005,
        "sender_full_name": "lcnr",
        "timestamp": 1600807531
    },
    {
        "content": "<p>as we first have to parse the feature annotations</p>",
        "id": 210929013,
        "sender_full_name": "lcnr",
        "timestamp": 1600807540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> sorry didn't get what you meant exactly</p>",
        "id": 210929140,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600807616
    },
    {
        "content": "<p>yeah, was some distracted rn</p>",
        "id": 210929781,
        "sender_full_name": "lcnr",
        "timestamp": 1600807957
    },
    {
        "content": "<blockquote>\n<p>self.sess.unstable_features.inline_const doesn't work</p>\n</blockquote>\n<p>What I meant to say is that I expect this to not work as we have to parse a crate to know which unstable features are active</p>",
        "id": 210929871,
        "sender_full_name": "lcnr",
        "timestamp": 1600808026
    },
    {
        "content": "<p>yeah that doesn't work but what I wonder is how do you check if the feature flag is on to \"change\" what the parser does?</p>",
        "id": 210930003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600808089
    },
    {
        "content": "<p>I'd expect the parser to be affected only if <code>#![feature(inline_const)]</code></p>",
        "id": 210930039,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600808114
    },
    {
        "content": "<p>Hmm, I don't think this is possible (once again noting that I am not an expert here)</p>",
        "id": 210930403,
        "sender_full_name": "lcnr",
        "timestamp": 1600808296
    },
    {
        "content": "<p>users can't rely on these parser changes without activating that feature though, as we emit a feature error for the <code>gated_spans</code></p>",
        "id": 210930433,
        "sender_full_name": "lcnr",
        "timestamp": 1600808327
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 210930482,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600808361
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/210928525\">said</a>:</p>\n<blockquote>\n<p><code>parse_stmt_without_recovery</code> looks like a good candidate for this disambiguation.<br>\nThings like <code>union U { ... }</code> vs <code>union { ... }</code> are already disambiguated there.</p>\n</blockquote>\n<p>by looking at the code I don't understand how there is that disambiguated</p>",
        "id": 210930736,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600808505
    },
    {
        "content": "<p>I guess we may be talking about <a href=\"https://github.com/rust-lang/rust/blob/29bdcd5575614ad9df1ae5c0c026d750aad235db/compiler/rustc_parse/src/parser/item.rs#L212\">https://github.com/rust-lang/rust/blob/29bdcd5575614ad9df1ae5c0c026d750aad235db/compiler/rustc_parse/src/parser/item.rs#L212</a></p>",
        "id": 210931196,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600808792
    },
    {
        "content": "<p>which for const end in <a href=\"https://github.com/rust-lang/rust/blob/29bdcd5575614ad9df1ae5c0c026d750aad235db/compiler/rustc_parse/src/parser/item.rs#L246\">https://github.com/rust-lang/rust/blob/29bdcd5575614ad9df1ae5c0c026d750aad235db/compiler/rustc_parse/src/parser/item.rs#L246</a></p>",
        "id": 210931225,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600808815
    },
    {
        "content": "<p>in <code>is_path_start_item</code></p>",
        "id": 210931228,
        "sender_full_name": "lcnr",
        "timestamp": 1600808818
    },
    {
        "content": "<p>we check for <code>kw ident</code></p>",
        "id": 210931248,
        "sender_full_name": "lcnr",
        "timestamp": 1600808831
    },
    {
        "content": "<p>I see</p>",
        "id": 210931304,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600808870
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/e0bc267512fc0cb49c86978192857e8187017f0b/compiler/rustc_parse/src/parser/stmt.rs#L51\">https://github.com/rust-lang/rust/blob/e0bc267512fc0cb49c86978192857e8187017f0b/compiler/rustc_parse/src/parser/stmt.rs#L51</a></p>",
        "id": 210931362,
        "sender_full_name": "lcnr",
        "timestamp": 1600808890
    },
    {
        "content": "<p>I would expect us to add a branch here above that one</p>",
        "id": 210931405,
        "sender_full_name": "lcnr",
        "timestamp": 1600808919
    },
    {
        "content": "<p>right</p>",
        "id": 210932153,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809287
    },
    {
        "content": "<p>I wasn't doing exactly that</p>",
        "id": 210932157,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809295
    },
    {
        "content": "<p>was adding it below</p>",
        "id": 210932163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809299
    },
    {
        "content": "<p>I think it's the same</p>",
        "id": 210932168,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809302
    },
    {
        "content": "<p>but neither below because I guess we want to reuse what's done later</p>",
        "id": 210932203,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809327
    },
    {
        "content": "<p>well I guess it's easier to explain with a diff :)</p>",
        "id": 210932220,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809343
    },
    {
        "content": "<p>(I just forgot that <code>const</code> is not a conditional keyword)</p>",
        "id": 210932322,
        "sender_full_name": "lcnr",
        "timestamp": 1600809404
    },
    {
        "content": "<p>go ahead <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 210932334,
        "sender_full_name": "lcnr",
        "timestamp": 1600809410
    },
    {
        "content": "<p>I'm right now fighting with the fact that I can't do <code>if !self.check_inline_const() &amp;&amp; let Some(item) = ... </code></p>",
        "id": 210932495,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809503
    },
    {
        "content": "<p>:P</p>",
        "id": 210932511,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809509
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">maybe_item</span><span class=\"p\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">check_inline_const</span><span class=\"p\">())</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210932688,
        "sender_full_name": "lcnr",
        "timestamp": 1600809605
    },
    {
        "content": "<p>if you need a oneliner <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 210932706,
        "sender_full_name": "lcnr",
        "timestamp": 1600809615
    },
    {
        "content": "<p>the problem is that once I have done maybe_item things are consumed</p>",
        "id": 210932737,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809640
    },
    {
        "content": "<p>I'd need something like this ...</p>",
        "id": 210932760,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809656
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">check_inline_const</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parse_expr_res</span><span class=\"p\">(</span><span class=\"n\">Restrictions</span>::<span class=\"n\">STMT_EXPR</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">attrs</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mk_stmt</span><span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">StmtKind</span>::<span class=\"n\">Expr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parse_item_common</span><span class=\"p\">(</span><span class=\"n\">attrs</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// FIXME: Bad copy of attrs</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mk_stmt</span><span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">StmtKind</span>::<span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">eat</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">token</span>::<span class=\"n\">Semi</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Do not attempt to parse an expression if we're done here.</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">error_outer_attrs</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">attrs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mk_stmt</span><span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">StmtKind</span>::<span class=\"n\">Empty</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">token</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">token</span>::<span class=\"n\">CloseDelim</span><span class=\"p\">(</span><span class=\"n\">token</span>::<span class=\"n\">Brace</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Remainder are line-expr stmts.</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parse_expr_res</span><span class=\"p\">(</span><span class=\"n\">Restrictions</span>::<span class=\"n\">STMT_EXPR</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">attrs</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">()))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">mk_stmt</span><span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">StmtKind</span>::<span class=\"n\">Expr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">error_outer_attrs</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">attrs</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 210932765,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809659
    },
    {
        "content": "<p>but as you can see the 1st block is identical to the 4th</p>",
        "id": 210932790,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809679
    },
    {
        "content": "<p>there are a ton of ways to sort this out, maybe better to extract functions but things that I'm being lazy to do :P</p>",
        "id": 210932845,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809721
    },
    {
        "content": "<p>why <code>parse_expr_res</code> instead of <code>parse_block</code>?</p>",
        "id": 210933077,
        "sender_full_name": "lcnr",
        "timestamp": 1600809846
    },
    {
        "content": "<p>but I don't know if I am actually helping here</p>",
        "id": 210933096,
        "sender_full_name": "lcnr",
        "timestamp": 1600809863
    },
    {
        "content": "<p>mostly guess work from my side <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210933114,
        "sender_full_name": "lcnr",
        "timestamp": 1600809872
    },
    {
        "content": "<p>your guessing + my guessing is more likely to do something useful than just my poor guessing <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 210933223,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600809944
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/210933077\">said</a>:</p>\n<blockquote>\n<p>why <code>parse_expr_res</code> instead of <code>parse_block</code>?</p>\n</blockquote>\n<p>just in case, I think you're right</p>",
        "id": 210933982,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600810421
    },
    {
        "content": "<p>I need to move the code from where it was</p>",
        "id": 210933992,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600810427
    },
    {
        "content": "<p>probably my approach is right too but it will execute a ton more code than what's needed</p>",
        "id": 210934093,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600810463
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> I'm having some doubts about the spans now</p>",
        "id": 210935522,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811268
    },
    {
        "content": "<p>?</p>",
        "id": 210935602,
        "sender_full_name": "lcnr",
        "timestamp": 1600811295
    },
    {
        "content": "<p>I'm about to test everything out</p>",
        "id": 210935621,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811308
    },
    {
        "content": "<p>but unsure if how spans are handled there are correct <a href=\"https://github.com/rust-lang/rust/compare/master...spastorino:const-exprs-rfc-2920#diff-2704c05ef6fd8b0d46631f5b5618e8e4R57-R66\">https://github.com/rust-lang/rust/compare/master...spastorino:const-exprs-rfc-2920#diff-2704c05ef6fd8b0d46631f5b5618e8e4R57-R66</a></p>",
        "id": 210935633,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811318
    },
    {
        "content": "<p>4 spans are used there and I'm not sure if those are entirely right</p>",
        "id": 210935709,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811367
    },
    {
        "content": "<p>gonna check exactly how <code>to</code> behaves</p>",
        "id": 210935720,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811377
    },
    {
        "content": "<p>for instance, without the feature flag this parse</p>",
        "id": 210935794,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811406
    },
    {
        "content": "<p>which I guess is not expected</p>",
        "id": 210935803,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811413
    },
    {
        "content": "<p>you have to add a feature check</p>",
        "id": 210935837,
        "sender_full_name": "lcnr",
        "timestamp": 1600811432
    },
    {
        "content": "<p>let me get the correct location</p>",
        "id": 210935864,
        "sender_full_name": "lcnr",
        "timestamp": 1600811455
    },
    {
        "content": "<p>ahh I thought <code>self.sess.gated_spans.gate(sym::inline_const, const_span);</code> was checking</p>",
        "id": 210935930,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811507
    },
    {
        "content": "<p>no, we have to explicitly check these spans</p>",
        "id": 210935952,
        "sender_full_name": "lcnr",
        "timestamp": 1600811519
    },
    {
        "content": "<p>ohh it's pushing :)</p>",
        "id": 210935999,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811526
    },
    {
        "content": "<p>grep gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");</p>",
        "id": 210936015,
        "sender_full_name": "lcnr",
        "timestamp": 1600811535
    },
    {
        "content": "<p>but for instance, unsure if that span is</p>",
        "id": 210936029,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811546
    },
    {
        "content": "<p><code>lo.to(self.token.span)</code> or just <code>self.token.span</code></p>",
        "id": 210936058,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811565
    },
    {
        "content": "<p>I think self.token.span would be <code>{</code> here</p>",
        "id": 210936093,
        "sender_full_name": "lcnr",
        "timestamp": 1600811592
    },
    {
        "content": "<p>so <code>lo.to(self.token.span)</code> looks correct to me</p>",
        "id": 210936120,
        "sender_full_name": "lcnr",
        "timestamp": 1600811609
    },
    {
        "content": "<p>lo it's <code>const</code>'s span?</p>",
        "id": 210936142,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811631
    },
    {
        "content": "<p>lo is </p>\n<div class=\"codehilite\"><pre><span></span><code>const {\n^^^^^\n</code></pre></div>",
        "id": 210936205,
        "sender_full_name": "lcnr",
        "timestamp": 1600811661
    },
    {
        "content": "<p>oh no, it's not</p>",
        "id": 210936213,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811675
    },
    {
        "content": "<p>really</p>",
        "id": 210936220,
        "sender_full_name": "lcnr",
        "timestamp": 1600811679
    },
    {
        "content": "<p>or well I believe it's not</p>",
        "id": 210936226,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811684
    },
    {
        "content": "<p>what's the output <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 210936233,
        "sender_full_name": "lcnr",
        "timestamp": 1600811691
    },
    {
        "content": "<p>sorry I'm wrong, it's const</p>",
        "id": 210936271,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811722
    },
    {
        "content": "<p>and what to does?</p>",
        "id": 210936315,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811753
    },
    {
        "content": "<p>something that encloses both</p>",
        "id": 210936322,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811757
    },
    {
        "content": "<p>ok ok</p>",
        "id": 210936324,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811758
    },
    {
        "content": "<p>makes sense :)</p>",
        "id": 210936332,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600811762
    },
    {
        "content": "<p>i give it up (my zulip doesn't use fixed width characters)</p>",
        "id": 210936492,
        "sender_full_name": "lcnr",
        "timestamp": 1600811846
    },
    {
        "content": "<p>I wouldn't worry about the spans for now</p>",
        "id": 210936586,
        "sender_full_name": "lcnr",
        "timestamp": 1600811899
    },
    {
        "content": "<p>we can always adjust them later, once we have working tests</p>",
        "id": 210936603,
        "sender_full_name": "lcnr",
        "timestamp": 1600811909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 210937756,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600812602
    },
    {
        "content": "<p>need to leave and have pushed but it doesn't seem to work</p>",
        "id": 210937800,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600812610
    },
    {
        "content": "<p>I meant, it parses the thing but I'm not sure why without the feature flag it doesn't fail</p>",
        "id": 210937823,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600812625
    },
    {
        "content": "<p>I need to investigate it better</p>",
        "id": 210937831,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600812631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/210936015\">said</a>:</p>\n<blockquote>\n<p>grep gate_all!(half_open_range_patterns, \"half-open range patterns are unstable\");</p>\n</blockquote>\n<p>did you do that?</p>",
        "id": 210937848,
        "sender_full_name": "lcnr",
        "timestamp": 1600812642
    },
    {
        "content": "<p>and add a line for <code>inline_consts</code> there</p>",
        "id": 210937859,
        "sender_full_name": "lcnr",
        "timestamp": 1600812654
    },
    {
        "content": "<p>yep, have done that and pushed</p>",
        "id": 210937991,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600812747
    },
    {
        "content": "<p>maybe <code>parse-only</code> doesn't actually run the pass responsible for emitting feature errors <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 210938244,
        "sender_full_name": "lcnr",
        "timestamp": 1600812944
    },
    {
        "content": "<p>if we stop before then we won't emit any errors</p>",
        "id": 210938315,
        "sender_full_name": "lcnr",
        "timestamp": 1600812973
    },
    {
        "content": "<p>possibly <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 210938905,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600813440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> just got the computer again for a minute and tried ...</p>",
        "id": 210941698,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600815708
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust3 (const-exprs-rfc-2920)]$ rustc +rust3-stage1 src/test/ui/parser/inline_const.rs\nthread &#39;rustc&#39; panicked at &#39;not implemented&#39;, compiler/rustc_ast_lowering/src/expr.rs:34:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.48.0-dev running on x86_64-unknown-linux-gnu\n\n[santiago@galago rust3 (const-exprs-rfc-2920)]$ vim src/test/ui/parser/inline_const.rs\n[santiago@galago rust3 (const-exprs-rfc-2920)]$ rustc +rust3-stage1 src/test/ui/parser/inline_const.rs\nerror[E0658]: inline-const is experimental\n --&gt; src/test/ui/parser/inline_const.rs:6:5\n  |\n6 |     const {\n  |     ^^^^^^^\n  |\n  = note: see issue #76001 &lt;https://github.com/rust-lang/rust/issues/76001&gt; for more information\n  = help: add `#![feature(inline_const)]` to the crate attributes to enable\n\nthread &#39;rustc&#39; panicked at &#39;not implemented&#39;, compiler/rustc_ast_lowering/src/expr.rs:34:21\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.48.0-dev running on x86_64-unknown-linux-gnu\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0658`.\n</code></pre></div>",
        "id": 210941706,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600815712
    },
    {
        "content": "<p>which looks exactly right :)</p>",
        "id": 210941714,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600815722
    },
    {
        "content": "<p>do we need to adjust <code>PatKind</code> in any way?</p>",
        "id": 211045803,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600886767
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span></p>",
        "id": 211045815,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600886774
    },
    {
        "content": "<p>ohh I see it on the RFC</p>",
        "id": 211045843,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600886786
    },
    {
        "content": "<p>yeah, I think we do</p>",
        "id": 211045854,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600886793
    },
    {
        "content": "<p>Yes.  If you like, you can work on just the expression variant for now, but making it parse shouldn't be too hard.</p>",
        "id": 211046022,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600886880
    },
    {
        "content": "<p>right</p>",
        "id": 211046192,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600886946
    },
    {
        "content": "<p>just in case, what's really accepted there</p>",
        "id": 211051618,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600889495
    },
    {
        "content": "<p><code>const { expr }</code></p>",
        "id": 211051621,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600889502
    },
    {
        "content": "<p>in particular, <code>expr</code> would need to be a \"literal\" I guess?</p>",
        "id": 211051641,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600889515
    },
    {
        "content": "<p>ahh no, it seems like the same block of code would be valid too</p>",
        "id": 211051829,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600889604
    },
    {
        "content": "<p>Yea, const blocks are the same everywhere</p>",
        "id": 211054245,
        "sender_full_name": "oli",
        "timestamp": 1600890935
    },
    {
        "content": "<p>That will cause ppl to write humongous patterns... but <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 211054280,
        "sender_full_name": "oli",
        "timestamp": 1600890960
    },
    {
        "content": "<p>hehe :)</p>",
        "id": 211055174,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600891393
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust3 (const-exprs-rfc-2920)]$ rustc src/test/ui/parser/keyword-const-as-identifier.rs\nerror: expected identifier, found keyword `const`\n --&gt; src/test/ui/parser/keyword-const-as-identifier.rs:4:9\n  |\n4 |     let const = &quot;foo&quot;; //~ error: expected identifier, found keyword `const`\n  |         ^^^^^ expected identifier, found keyword\n  |\nhelp: you can escape reserved keywords to use them as identifiers\n  |\n4 |     let r#const = &quot;foo&quot;; //~ error: expected identifier, found keyword `const`\n  |         ^^^^^^^\n\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 211058900,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600893390
    },
    {
        "content": "<p>vs</p>",
        "id": 211058902,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600893392
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust3 (const-exprs-rfc-2920)]$ rustc +rust3-stage1 src/test/ui/parser/keyword-const-as-identifier.rs\nerror: expected `{`, found `=`\n --&gt; src/test/ui/parser/keyword-const-as-identifier.rs:4:15\n  |\n4 |     let const = &quot;foo&quot;; //~ error: expected identifier, found keyword `const`\n  |               ^ expected `{`\n\nerror[E0658]: inline-const is experimental\n --&gt; src/test/ui/parser/keyword-const-as-identifier.rs:4:9\n  |\n4 |     let const = &quot;foo&quot;; //~ error: expected identifier, found keyword `const`\n  |         ^^^^^^^\n  |\n  = note: see issue #76001 &lt;https://github.com/rust-lang/rust/issues/76001&gt; for more information\n  = help: add `#![feature(inline_const)]` to the crate attributes to enable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0658`.\n</code></pre></div>",
        "id": 211058914,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600893401
    },
    {
        "content": "<p>I guess it is expected that the error changes</p>",
        "id": 211058948,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600893425
    },
    {
        "content": "<p>because we would not accept <code>const</code> as a pattern</p>",
        "id": 211058984,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600893447
    },
    {
        "content": "<p>in that case, I guess that test should be removed and I can add proper tests to handle a pattern there</p>",
        "id": 211059117,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600893501
    },
    {
        "content": "<p>You probably want to fall-back to parsing a simple named binding if you see anything besides <code>{</code> after <code>const</code> in a pattern..</p>",
        "id": 211061335,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600894659
    },
    {
        "content": "<p>I was going to say that</p>",
        "id": 211061375,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600894681
    },
    {
        "content": "<p>yeah</p>",
        "id": 211061414,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600894683
    },
    {
        "content": "<p>still that test should go away</p>",
        "id": 211061428,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600894694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/211061428\">said</a>:</p>\n<blockquote>\n<p>still that test should go away</p>\n</blockquote>\n<p>Why?</p>",
        "id": 211061509,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600894745
    },
    {
        "content": "<p>is testing that <code>let const = ...</code> is wrong</p>",
        "id": 211061543,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600894770
    },
    {
        "content": "<p>Can <code>const {</code> just mirror what <code>unsafe {</code> and <code>async {</code> do?<br>\nThen if we want make some improvements to error recovery, we'll do that for all of them.</p>",
        "id": 211061552,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600894774
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/211061543\">said</a>:</p>\n<blockquote>\n<p>is testing that <code>let const = ...</code> is wrong</p>\n</blockquote>\n<p>but now you should be able to do <code>let const { pattern } = something</code></p>",
        "id": 211061577,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600894794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/211061552\">said</a>:</p>\n<blockquote>\n<p>Can <code>const {</code> just mirror what <code>unsafe {</code> and <code>async {</code> do?<br>\nThen if we want make some improvements to error recovery, we'll do that for all of them.</p>\n</blockquote>\n<p>we're talking about patterns</p>",
        "id": 211061976,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600895009
    },
    {
        "content": "<p>how would mirror <code>unsafe</code> or <code>async</code> be in that context?</p>",
        "id": 211062012,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600895034
    },
    {
        "content": "<p>Ah, patterns.<br>\n<span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/211062012\">said</a>:</p>\n<blockquote>\n<p>how would mirror <code>unsafe</code> or <code>async</code> be in that context?</p>\n</blockquote>\n<p>Anyway, the answer is mostly likely \"by not doing anything special and just reporting the generic unexpected token error\", because <code>unsafe {</code> and <code>async {</code> don't do any special recovery in expressions either, AFAIK.</p>",
        "id": 211063540,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1600895882
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> sorry because my english is terrible, hehe, but I'm not following  you</p>",
        "id": 211063824,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896059
    },
    {
        "content": "<p>just in case to check if we are on the same page</p>",
        "id": 211063844,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896072
    },
    {
        "content": "<p>we want to support <code>const</code> in patterns</p>",
        "id": 211063851,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896081
    },
    {
        "content": "<p>for instance</p>",
        "id": 211063940,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896132
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">read_mmio</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">MMIO_BIT1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"FOO\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">MMIO_BIT2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"BAR\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">unreachable</span><span class=\"o\">!</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211063942,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896136
    },
    {
        "content": "<p>but I'm still wondering what would be valid there ... I guess inside <code>const { }</code> we would be accepting a sub pattern</p>",
        "id": 211064010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896195
    },
    {
        "content": "<p>and basically any sub pattern would be valid</p>",
        "id": 211064030,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896207
    },
    {
        "content": "<p>I guess even this is valid ...</p>",
        "id": 211064325,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896374
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">something</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">foo</span>::<span class=\"n\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"BAR\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">println</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"FOO\"</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211064331,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896381
    },
    {
        "content": "<p>That's not at all how I understood it</p>",
        "id": 211064394,
        "sender_full_name": "oli",
        "timestamp": 1600896428
    },
    {
        "content": "<p>The body of the const block in a pattern is an expression just like with const blocks in expression position</p>",
        "id": 211064468,
        "sender_full_name": "oli",
        "timestamp": 1600896475
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/211064468\">said</a>:</p>\n<blockquote>\n<p>The body of the const block in a pattern is an expression just like with const blocks in expression position</p>\n</blockquote>\n<p>right</p>",
        "id": 211064561,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896515
    },
    {
        "content": "<p>So your example would still work</p>",
        "id": 211064573,
        "sender_full_name": "oli",
        "timestamp": 1600896522
    },
    {
        "content": "<p>The <code>let const =</code> test should still fail to parse, but the error would now be on the <code>=</code> instead of on the <code>const</code></p>",
        "id": 211064677,
        "sender_full_name": "oli",
        "timestamp": 1600896600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/211064677\">said</a>:</p>\n<blockquote>\n<p>The <code>let const =</code> test should still fail to parse, but the error would now be on the <code>=</code> instead of on the <code>const</code></p>\n</blockquote>\n<p>right</p>",
        "id": 211064870,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896696
    },
    {
        "content": "<p>that's what happens if I'm not wrong</p>",
        "id": 211064877,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896702
    },
    {
        "content": "<p>Yea, that error looks good</p>",
        "id": 211064897,
        "sender_full_name": "oli",
        "timestamp": 1600896715
    },
    {
        "content": "<p>but the test was really about testing that const is not an ident so I guess we don't want it</p>",
        "id": 211064902,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896719
    },
    {
        "content": "<p>Though the second one is rather confusing xD</p>",
        "id": 211064958,
        "sender_full_name": "oli",
        "timestamp": 1600896735
    },
    {
        "content": "<p>(The second error)</p>",
        "id": 211064972,
        "sender_full_name": "oli",
        "timestamp": 1600896744
    },
    {
        "content": "<p>that's because the feature flag is not on</p>",
        "id": 211064994,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896768
    },
    {
        "content": "<p>You should be able to just change the test to using <code>struct const;</code>, but I think keeping the existing test is good because it shows us the error that happens on stable</p>",
        "id": 211065040,
        "sender_full_name": "oli",
        "timestamp": 1600896812
    },
    {
        "content": "<p>maybe I should open a WIP PR and we can start discussing this over the concrete code and changes ?</p>",
        "id": 211065335,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600896977
    },
    {
        "content": "<p>Wfm, but also these are all details that are probably irrelevant for an MVP. We can always add more PRs later</p>",
        "id": 211065744,
        "sender_full_name": "oli",
        "timestamp": 1600897247
    },
    {
        "content": "<p>We've merged PRs before that just added parser support and ICEd the compiler when you actually used the feature</p>",
        "id": 211065795,
        "sender_full_name": "oli",
        "timestamp": 1600897293
    },
    {
        "content": "<p>So take whatever step size you feel comfortable with</p>",
        "id": 211065809,
        "sender_full_name": "oli",
        "timestamp": 1600897308
    },
    {
        "content": "<p>hehe :)</p>",
        "id": 211065933,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600897388
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/77124\">#77124</a></p>",
        "id": 211065976,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600897425
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> there you will see the test removed but please comment saying whatever you prefer to be done with it</p>",
        "id": 211066083,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600897484
    },
    {
        "content": "<p>what kind of check do we need to do here <a href=\"https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_typeck/src/check/expr.rs\">https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_typeck/src/check/expr.rs</a> ?</p>",
        "id": 211185438,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600979177
    },
    {
        "content": "<p>like I meant, I think we're basically type checking the expression at that point</p>",
        "id": 211185497,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600979210
    },
    {
        "content": "<p>what I guess I'm asking is how does this work? :P</p>",
        "id": 211185687,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600979310
    },
    {
        "content": "<p>it says read <code>mod.rs</code> checking that</p>",
        "id": 211185713,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600979323
    },
    {
        "content": "<p>I would expect this to be the same as type checking repeat expressions</p>",
        "id": 211185751,
        "sender_full_name": "lcnr",
        "timestamp": 1600979347
    },
    {
        "content": "<p>let me find where we do that</p>",
        "id": 211185765,
        "sender_full_name": "lcnr",
        "timestamp": 1600979357
    },
    {
        "content": "<p>yeah that's what I was guessing</p>",
        "id": 211185900,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600979429
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_typeck/src/check/expr.rs#L1025\">https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_typeck/src/check/expr.rs#L1025</a></p>",
        "id": 211185903,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600979431
    },
    {
        "content": "<p>but stuff like <a href=\"https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_typeck/src/check/expr.rs#L1037\">https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_typeck/src/check/expr.rs#L1037</a> has confused me</p>",
        "id": 211185968,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600979468
    },
    {
        "content": "<p>ohh I guess there instead of unwrapping, I should just directly use <code>uty</code>?</p>",
        "id": 211186133,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600979543
    },
    {
        "content": "<p>yeah, I expect that that's what we want here</p>",
        "id": 211186290,
        "sender_full_name": "lcnr",
        "timestamp": 1600979642
    },
    {
        "content": "<p>and I guess <a href=\"https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_typeck/src/check/expr.rs#L1062\">https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_typeck/src/check/expr.rs#L1062</a></p>",
        "id": 211186659,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600979836
    },
    {
        "content": "<p>I'd need to build the expected type</p>",
        "id": 211186680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600979857
    },
    {
        "content": "<p>tcx.mk_ty(t)</p>",
        "id": 211186697,
        "sender_full_name": "lcnr",
        "timestamp": 1600979867
    },
    {
        "content": "<p>so either <code>uty</code> or a new inference variable</p>",
        "id": 211186785,
        "sender_full_name": "lcnr",
        "timestamp": 1600979907
    },
    {
        "content": "<p>right, yeah that's what I thought too</p>",
        "id": 211186879,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600979972
    },
    {
        "content": "<p>now wonder what to do here <a href=\"https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_passes/src/liveness.rs#L1041\">https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_passes/src/liveness.rs#L1041</a></p>",
        "id": 211193261,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600983711
    },
    {
        "content": "<p>I guess we would fall in this <a href=\"https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_passes/src/liveness.rs#L1312\">https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_passes/src/liveness.rs#L1312</a> case</p>",
        "id": 211193400,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1600983813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> I went to look at this and ended up filing  <a href=\"https://github.com/rust-lang/rust/issues/77169\">#77169</a>.</p>\n<p>For now, the HIR liveness pass should just ignore inline constants, same as it ignores the second element of <code>hir::ExprKind::Repeat</code>.</p>",
        "id": 211196988,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600986332
    },
    {
        "content": "<p>In the long run, we can treat them more like closure bodies, which should be correct even if they can't capture anything. Alternatively, we can spin up a new liveness checking context for each inline constant (including array length expressions).</p>",
        "id": 211197512,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1600986751
    },
    {
        "content": "<blockquote>\n<p>we can spin up a new liveness checking context for each inline constant (including array length expressions).</p>\n</blockquote>\n<p>I don't know too much about liveness, but considering that constants are separate bodies from their outer functions, wouldn't this make more sense here?</p>",
        "id": 211222786,
        "sender_full_name": "lcnr",
        "timestamp": 1601015524
    },
    {
        "content": "<p>Yes, that's most efficient. The first one may be easier to implement (like a few lines) since there's already precedent in closure bodies. I doubt performance of this code matters too much, and there's also <a href=\"https://github.com/rust-lang/rust/issues/51003\">#51003</a>.</p>",
        "id": 211286620,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601054041
    },
    {
        "content": "<p>just got back to this, but I'm checking again this <a href=\"https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_typeck/src/check/expr.rs#L1025\">https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_typeck/src/check/expr.rs#L1025</a></p>",
        "id": 211293529,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601057441
    },
    {
        "content": "<p>I'm not exactly sure what to do there</p>",
        "id": 211293538,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601057448
    },
    {
        "content": "<p>I meant in the corresponding <code>check_expr_anon_const</code> function</p>",
        "id": 211293566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601057469
    },
    {
        "content": "<p>I'd expect this signature</p>",
        "id": 211293594,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601057484
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">check_expr_anon_const</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">anon_const</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">hir</span>::<span class=\"n\">AnonConst</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">expected</span>: <span class=\"nc\">Expectation</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211293606,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601057493
    },
    {
        "content": "<p>and I guess we would need to check that the type that comes out from anon_const is the type in the expected param</p>",
        "id": 211293751,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601057557
    },
    {
        "content": "<p>?</p>",
        "id": 211293755,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601057560
    },
    {
        "content": "<p>then not 100% sure how to do that</p>",
        "id": 211293776,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601057570
    },
    {
        "content": "<p>I won't be very helpful for <code>typeck</code> code. Array length expressions always have a known type: <code>usize</code>. Inline constants should have their type inferred, just like a normal block of code or closure return type.</p>",
        "id": 211294418,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601057888
    },
    {
        "content": "<p>right</p>",
        "id": 211294639,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058007
    },
    {
        "content": "<p>checking what the rest of the code does ...</p>",
        "id": 211294667,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058021
    },
    {
        "content": "<p>there's ...</p>",
        "id": 211294749,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058072
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">check_expr_eq_type</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expr</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">tcx</span> <span class=\"nc\">hir</span>::<span class=\"n\">Expr</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span>: <span class=\"nc\">Ty</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211294758,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058076
    },
    {
        "content": "<p>I guess I may want something like that</p>",
        "id": 211294777,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058086
    },
    {
        "content": "<p>That's not type inference. How do you know what the <code>expected</code> type is?</p>",
        "id": 211294833,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601058118
    },
    {
        "content": "<p>what I'm saying is wrong :P</p>",
        "id": 211294904,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058133
    },
    {
        "content": "<p>that's exactly what I need to implement <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 211294963,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058167
    },
    {
        "content": "<p>Or maybe inference is already done at this point. I dunno <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>",
        "id": 211295036,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601058199
    },
    {
        "content": "<p>from what I see most of the code there does ...</p>",
        "id": 211295315,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058331
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">element_ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ExpectHasType</span><span class=\"p\">(</span><span class=\"n\">uty</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211295325,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058335
    },
    {
        "content": "<p>stuff like that, the expected may or may not be known I guess</p>",
        "id": 211295357,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058350
    },
    {
        "content": "<p>I see there's <code>check_block_with_expected</code></p>",
        "id": 211295640,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058481
    },
    {
        "content": "<p>Ah, so <code>expected: Ty</code> can still be an inference variable there. My bad. Yeah, I would start with <code>check_block_with_expected</code>. I think some parts of that method will not apply to inline constants, but you may not need to worry about that yet.</p>",
        "id": 211295921,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601058600
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 211296231,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> another question is there a nice stage to cut and test things?</p>",
        "id": 211296369,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058795
    },
    {
        "content": "<p>like, I first did the parsing and I was able to check with <code>-Z parse-ony</code></p>",
        "id": 211296395,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058810
    },
    {
        "content": "<p>unsure if something like that also applies when doing AST lowering</p>",
        "id": 211296427,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058835
    },
    {
        "content": "<p>or exactly when does it make sense</p>",
        "id": 211296511,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058861
    },
    {
        "content": "<p>so parse to AST and I've done tests</p>",
        "id": 211296605,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058906
    },
    {
        "content": "<p>I wonder if AST to HIR makes sense to stop for tests or go directly to THIR before going to MIR</p>",
        "id": 211296640,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601058921
    },
    {
        "content": "<p>That's a good question. I think parsing is the main point at which you can test. I would keep each lowering step in its own commit but try to get all the way to MIR in a single PR.</p>",
        "id": 211296839,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601059017
    },
    {
        "content": "<p>With liberal use of <code>unimplemented!</code>/<code>todo!</code> of course.</p>",
        "id": 211297016,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601059094
    },
    {
        "content": "<p>yeah, I'd submit a complete PR with the feature working :)</p>",
        "id": 211298838,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601059980
    },
    {
        "content": "<p>and yeah, was thinking about the same, like doing a commit per stage but was also wondering if ast -&gt; hir is testeable, if hir -&gt; thir is testeable and so on</p>",
        "id": 211298905,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601060016
    },
    {
        "content": "<p>was now wondering about the corresponding <code>Rvalue</code></p>",
        "id": 211306932,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601062463
    },
    {
        "content": "<p>I guess just making an operand would be enough?</p>",
        "id": 211307061,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601062498
    },
    {
        "content": "<p>like in <a href=\"https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_mir_build/src/build/expr/as_rvalue.rs#L235-L259\">https://github.com/rust-lang/rust/blob/18712dd42a0da7d7d005132e2105f675f7ef9aff/compiler/rustc_mir_build/src/build/expr/as_rvalue.rs#L235-L259</a></p>",
        "id": 211307064,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601062500
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> at least a basic version seems to be working</p>",
        "id": 212117089,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601666564
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust3 (const-exprs-rfc-2920)]$ cat 1.rs\n#![feature(inline_const)]\nfn foo() -&gt; i32 {\n    const {\n        let x = 5 + 10;\n        x / 3\n    }\n}\n\nfn main() {\n    println!(&quot;{}&quot;, foo());\n}\n[santiago@galago rust3 (const-exprs-rfc-2920)]$ rustc +rust3-stage1 1.rs\n[santiago@galago rust3 (const-exprs-rfc-2920)]$ ./1\n5\n</code></pre></div>",
        "id": 212117196,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601666627
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust3 (const-exprs-rfc-2920)]$ cat 2.rs\n#![feature(inline_const)]\n\nconst MMIO_BIT1: u8 = 4;\nconst MMIO_BIT2: u8 = 5;\n\nfn main() {\n    match read_mmio() {\n        0 =&gt; {}\n        const { 1 &lt;&lt; MMIO_BIT1 } =&gt; println!(&quot;FOO&quot;),\n        const { 1 &lt;&lt; MMIO_BIT2 } =&gt; println!(&quot;BAR&quot;),\n\n        _ =&gt; unreachable!(),\n    }\n}\n\nfn read_mmio() -&gt; i32 {\n    1 &lt;&lt; 5\n}\n[santiago@galago rust3 (const-exprs-rfc-2920)]$ rustc +rust3-stage1 2.rs\n[santiago@galago rust3 (const-exprs-rfc-2920)]$ ./2\nBAR\n</code></pre></div>",
        "id": 212117212,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601666636
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust3 (const-exprs-rfc-2920)]$ cat 3.rs\n#![feature(inline_const)]\nfn foo() -&gt; i32 {\n    2 * const {\n        let x = 1 + 5;\n        x / 2\n    }\n}\n\nfn main() {\n    match foo() {\n        const { 6 } =&gt; println!(&quot;6&quot;),\n        _ =&gt; {}\n    }\n}\n[santiago@galago rust3 (const-exprs-rfc-2920)]$ rustc +rust3-stage1 3.rs\nwarning: unnecessary braces around const expression\n  --&gt; 3.rs:11:15\n   |\n11 |         const { 6 } =&gt; println!(&quot;6&quot;),\n   |               ^^^^^ help: remove these braces\n   |\n   = note: `#[warn(unused_braces)]` on by default\n\nwarning: 1 warning emitted\n\n[santiago@galago rust3 (const-exprs-rfc-2920)]$ ./3\n6\n</code></pre></div>",
        "id": 212117433,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601666715
    },
    {
        "content": "<p>note the warning there and if you do <code>const 6 =&gt; println!(\"6\"),</code> without the braces it works without a warning</p>",
        "id": 212117468,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601666737
    },
    {
        "content": "<p>but I guess that's what we want, right?</p>",
        "id": 212117486,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601666746
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span></p>",
        "id": 212117536,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601666763
    },
    {
        "content": "<p>I don't think we want to allow <code>const expr</code>, afaik we only intend to allow <code>const block</code> <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 212117997,
        "sender_full_name": "lcnr",
        "timestamp": 1601667002
    },
    {
        "content": "<p>am I misremembering something here?</p>",
        "id": 212118058,
        "sender_full_name": "lcnr",
        "timestamp": 1601667019
    },
    {
        "content": "<p>did you push your most recent changes?</p>",
        "id": 212118098,
        "sender_full_name": "lcnr",
        "timestamp": 1601667047
    },
    {
        "content": "<p>I didn't push yet</p>",
        "id": 212118202,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601667116
    },
    {
        "content": "<p>was going to clean the PR a bit and push after that</p>",
        "id": 212118264,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601667135
    },
    {
        "content": "<p>also cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span></p>",
        "id": 212118270,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601667140
    },
    {
        "content": "<p>Yes. Only <code>const { ... }</code> should parse.</p>",
        "id": 212119969,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1601668010
    },
    {
        "content": "<p><code>+rust3-stage1</code>?</p>",
        "id": 212194346,
        "sender_full_name": "oliver",
        "timestamp": 1601766738
    },
    {
        "content": "<p>probably <a href=\"https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html?highlight=rustup,link#creating-a-rustup-toolchain\">https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html?highlight=rustup,link#creating-a-rustup-toolchain</a></p>",
        "id": 212195979,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601769327
    },
    {
        "content": "<p>So you'd have something like:<br>\n<code>rustup toolchain link stage1 build/&lt;host-triple&gt;/rust3-stage1</code></p>",
        "id": 212196134,
        "sender_full_name": "oliver",
        "timestamp": 1601769579
    },
    {
        "content": "<p>Is <code>rust3</code> referring to the 2021 release?</p>",
        "id": 212196213,
        "sender_full_name": "oliver",
        "timestamp": 1601769620
    },
    {
        "content": "<p><code>rustc3</code> is probably the third git worktree they have</p>",
        "id": 212196221,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601769629
    },
    {
        "content": "<p><a href=\"https://rustc-dev-guide.rust-lang.org/building/suggested.html?highlight=worktree#working-on-multiple-branches-at-the-same-time\">https://rustc-dev-guide.rust-lang.org/building/suggested.html?highlight=worktree#working-on-multiple-branches-at-the-same-time</a></p>",
        "id": 212196226,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601769635
    },
    {
        "content": "<p>I use <code>+stage1</code> for my main worktree and <code>+rustc2</code> for the second</p>",
        "id": 212196236,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601769655
    },
    {
        "content": "<p>(since I almost never build stage 2)</p>",
        "id": 212196243,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601769665
    },
    {
        "content": "<p><code>rustup toolchain link stage1 build/&lt;host-triple&gt;/stage1</code>, but otherwise yeah that looks right</p>",
        "id": 212196255,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1601769705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281739\">Oliver</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/212194346\">said</a>:</p>\n<blockquote>\n<p><code>+rust3-stage1</code>?</p>\n</blockquote>\n<p>it's called <code>rustc.2-s1</code> for me but yeah that schema looks familiar ;)</p>",
        "id": 212218262,
        "sender_full_name": "RalfJ",
        "timestamp": 1601809564
    },
    {
        "content": "<p>ohh sorry, I've just seen this, yeah I have a bunch of git worktrees <code>rust{n}-stage1</code>, where n = worktree copy number</p>",
        "id": 212350456,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1601928736
    },
    {
        "content": "<p>small status update here, just have force pushed <a href=\"https://github.com/rust-lang/rust/issues/77124\">#77124</a></p>",
        "id": 212490795,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602021179
    },
    {
        "content": "<p>I've tidy up the PR and it mostly \"works\"</p>",
        "id": 212490824,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602021203
    },
    {
        "content": "<p>I'd add more tests</p>",
        "id": 212490833,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602021209
    },
    {
        "content": "<p>but what I'm not 100% sure yet are the last 2 commits</p>",
        "id": 212490854,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602021219
    },
    {
        "content": "<p>so my fixes to clippy</p>",
        "id": 212490859,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602021227
    },
    {
        "content": "<p>and then the lints need more work, I meant, I've fixed the lints for inline consts but I've probably broke others, I still have things to fix there</p>",
        "id": 212490933,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602021257
    },
    {
        "content": "<p>the rest I guess it's mainly up for review</p>",
        "id": 212490948,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602021270
    },
    {
        "content": "<p>I meant, everything is up for review :), but I'm more convinced of the rest and not that much about my clippy fixes and neither my lint changes, anyway if someone have pointers please let me know</p>",
        "id": 212491006,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602021325
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span></p>",
        "id": 212491041,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602021341
    },
    {
        "content": "<p>Left a few comments on the parsing bits. The rest looks good I think, although I can't weigh in on the changes to inference.</p>",
        "id": 212496151,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1602025054
    },
    {
        "content": "<p>I wouldn't worry too much about clippy as long as it compiles. It's not really our job to make clippy lints the best they can be; clippy devs do just fine in that department. It's mostly about not breaking the build.</p>",
        "id": 212496274,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1602025166
    },
    {
        "content": "<p>adding the feature gate test so that CI runs longer would be sweet :)</p>",
        "id": 212496728,
        "sender_full_name": "lqd",
        "timestamp": 1602025482
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"118594\">ecstatic-morse</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/212496151\">said</a>:</p>\n<blockquote>\n<p>Left a few comments on the parsing bits. The rest looks good I think, although I can't weigh in on the changes to inference.</p>\n</blockquote>\n<p>cool, thanks, yeah I forgot about changing the parsing to not consume the const and just check for it, something that I've noticed since a while but forgot to fix, so <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 212570064,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602082470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions/near/212496728\">said</a>:</p>\n<blockquote>\n<p>adding the feature gate test so that CI runs longer would be sweet :)</p>\n</blockquote>\n<p>yeah, I've done that already :)</p>",
        "id": 212570082,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602082479
    },
    {
        "content": "<p>I need to fix tests and fix lints</p>",
        "id": 212570110,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602082491
    },
    {
        "content": "<p>and that would be all if I'm not wrong</p>",
        "id": 212570158,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602082508
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 212572975,
        "sender_full_name": "lqd",
        "timestamp": 1602083507
    },
    {
        "content": "<p>would be nice to know what kind of cases people would like to add for this feature</p>",
        "id": 212881863,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602282259
    },
    {
        "content": "<p>I'm running tests but it should be ready now I believe</p>",
        "id": 212881878,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602282275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions.20.2377124/near/212881863\">said</a>:</p>\n<blockquote>\n<p>would be nice to know what kind of cases people would like to add for this feature</p>\n</blockquote>\n<p>What do you mean by \"cases\"?</p>",
        "id": 212912733,
        "sender_full_name": "RalfJ",
        "timestamp": 1602331026
    },
    {
        "content": "<p>the classical example would be something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212912741,
        "sender_full_name": "RalfJ",
        "timestamp": 1602331068
    },
    {
        "content": "<p>the RFC should also have some examples</p>",
        "id": 212912745,
        "sender_full_name": "RalfJ",
        "timestamp": 1602331073
    },
    {
        "content": "<p>another example would be array inits:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212912791,
        "sender_full_name": "RalfJ",
        "timestamp": 1602331108
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">my_expr</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212923963,
        "sender_full_name": "Lokathor",
        "timestamp": 1602348573
    },
    {
        "content": "<p>Also <code>let x: &amp;'static _ = &amp;const{bar()};</code></p>",
        "id": 212927393,
        "sender_full_name": "oli",
        "timestamp": 1602352586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions.20.2377124/near/212912733\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions.20.2377124/near/212881863\">said</a>:</p>\n<blockquote>\n<p>would be nice to know what kind of cases people would like to add for this feature</p>\n</blockquote>\n<p>What do you mean by \"cases\"?</p>\n</blockquote>\n<p>exactly the things you all have shared :), and yeah the RFC has some examples too</p>",
        "id": 213048381,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602514324
    },
    {
        "content": "<p>gonna add some more tests later</p>",
        "id": 213048395,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602514334
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213606433,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602877998
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust3 (const-exprs-rfc-2920|REBASE 7/10)]$ rustc +rust3-stage1 src/test/ui/inline-const/const-expr-reference.rs\nerror[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n  --&gt; src/test/ui/inline-const/const-expr-reference.rs:12:12\n   |\n12 |   const { &amp;bar() }\n   |            ^^^^^\n\nerror: internal compiler error: compiler/rustc_mir/src/borrow_check/universal_regions.rs:768:36: cannot convert `ReErased` to a region vid\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, compiler/rustc_errors/src/lib.rs:945:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>",
        "id": 213606476,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878025
    },
    {
        "content": "<p>this was trying to build <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> and <span class=\"user-mention\" data-user-id=\"124288\">@oli</span>'s examples</p>",
        "id": 213606566,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878063
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"n\">Cell</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213606627,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878104
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: an inner attribute is not permitted in this context\n --&gt; src/test/ui/inline-const/const-expr-array-init.rs:5:1\n  |\n5 | #![feature(inline_const)]\n  | ^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: inner attributes, like `#![no_std]`, annotate the item enclosing them, and are usually found at the beginning of source files. Outer attributes, like `#[test]`, annotate the item following them.\n\nerror[E0658]: inline-const is experimental\n --&gt; src/test/ui/inline-const/const-expr-array-init.rs:8:15\n  |\n8 |     let _x = [const { Cell::new(0) }; 20];\n  |               ^^^^^\n  |\n  = note: see issue #76001 &lt;https://github.com/rust-lang/rust/issues/76001&gt; for more information\n  = help: add `#![feature(inline_const)]` to the crate attributes to enable\n\nerror: aborting due to 2 previous errors\n\nFor more information about this error, try `rustc --explain E0658`.\n</code></pre></div>",
        "id": 213606654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878119
    },
    {
        "content": "<p>the second one should be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"n\">Cell</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213606757,
        "sender_full_name": "lcnr",
        "timestamp": 1602878170
    },
    {
        "content": "<p>the first one is more interesting, maybe cc <span class=\"user-mention\" data-user-id=\"118594\">@ecstatic-morse</span> on that one <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 213606837,
        "sender_full_name": "lcnr",
        "timestamp": 1602878214
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions.20.2377124/near/213606757\">said</a>:</p>\n<blockquote>\n<p>the second one should be</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">cell</span>::<span class=\"n\">Cell</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Cell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>\n<p>what did I wrote?</p>",
        "id": 213606930,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878266
    },
    {
        "content": "<p>ohh the feature after the use :)</p>",
        "id": 213606957,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878278
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">const</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213607571,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878591
    },
    {
        "content": "<p>works</p>",
        "id": 213607574,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878592
    },
    {
        "content": "<p>does <code>const { bar() }</code> work?</p>",
        "id": 213607706,
        "sender_full_name": "lcnr",
        "timestamp": 1602878648
    },
    {
        "content": "<p>in the first example?, let me check</p>",
        "id": 213607752,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878680
    },
    {
        "content": "<p>it works</p>",
        "id": 213607807,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878733
    },
    {
        "content": "<p>the full example is</p>",
        "id": 213607815,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878738
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// run-pass</span>\n\n<span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">const</span><span class=\"p\">{</span><span class=\"n\">bar</span><span class=\"p\">()};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213607822,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878742
    },
    {
        "content": "<p>hmm, so only <code>const { &amp;bar() }</code> emits that nonsensical error before ending with the ICEing on the cake?</p>",
        "id": 213607931,
        "sender_full_name": "lcnr",
        "timestamp": 1602878787
    },
    {
        "content": "<p>ohh sorry, let me check again if it works</p>",
        "id": 213607964,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878810
    },
    {
        "content": "<p>I think I've run the wrong example</p>",
        "id": 213607966,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878815
    },
    {
        "content": "<p>yeah it works</p>",
        "id": 213608039,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878851
    },
    {
        "content": "<p>so to clarify</p>",
        "id": 213608080,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878874
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// run-pass</span>\n\n<span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">const</span><span class=\"p\">{</span><span class=\"n\">bar</span><span class=\"p\">()};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213608085,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878878
    },
    {
        "content": "<p>this works</p>",
        "id": 213608098,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878882
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// run-pass</span>\n\n<span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">&amp;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">const</span><span class=\"p\">{</span><span class=\"n\">bar</span><span class=\"p\">()};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213608187,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878919
    },
    {
        "content": "<p>works too</p>",
        "id": 213608193,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878921
    },
    {
        "content": "<p>but</p>",
        "id": 213608197,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878925
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// run-pass</span>\n\n<span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">const</span><span class=\"p\">{</span><span class=\"n\">bar</span><span class=\"p\">()};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213608238,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878949
    },
    {
        "content": "<p>gives</p>",
        "id": 213608246,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878953
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: compiler/rustc_mir/src/borrow_check/universal_regions.rs:768:36: cannot convert `ReErased` to a region vid\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, compiler/rustc_errors/src/lib.rs:945:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.49.0-dev running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\n#0 [mir_borrowck] borrow-checking `foo::{constant#0}`\n#1 [mir_drops_elaborated_and_const_checked] elaborating drops for `foo::{constant#0}`\nend of query stack\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 213608271,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878966
    },
    {
        "content": "<p>the difference between the last two is <code>&amp;const{ ... }</code> vs <code>const{ &amp;...}</code> and returning <code>'static</code></p>",
        "id": 213608313,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602878999
    },
    {
        "content": "<p>so the following error isn't emitted at all here?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0015</span><span class=\"p\">]</span>: <span class=\"nc\">calls</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">constants</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">limited</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"w\"> </span><span class=\"n\">structs</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">tuple</span><span class=\"w\"> </span><span class=\"n\">variants</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"n\">inline</span><span class=\"o\">-</span><span class=\"k\">const</span><span class=\"o\">/</span><span class=\"k\">const</span><span class=\"o\">-</span><span class=\"n\">expr</span><span class=\"o\">-</span><span class=\"n\">reference</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">12</span>:<span class=\"mi\">12</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">            </span><span class=\"o\">^^^^^</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213608361,
        "sender_full_name": "lcnr",
        "timestamp": 1602879005
    },
    {
        "content": "<p>what do you mean by here?</p>",
        "id": 213608412,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions.20.2377124/near/213606476\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust3 (const-exprs-rfc-2920|REBASE 7/10)]$ rustc +rust3-stage1 src/test/ui/inline-const/const-expr-reference.rs\nerror[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n  --&gt; src/test/ui/inline-const/const-expr-reference.rs:12:12\n   |\n12 |   const { &amp;bar() }\n   |            ^^^^^\n\nerror: internal compiler error: compiler/rustc_mir/src/borrow_check/universal_regions.rs:768:36: cannot convert `ReErased` to a region vid\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, compiler/rustc_errors/src/lib.rs:945:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n</code></pre></div>\n\n\n</blockquote>\n<p>is that error message outdated</p>",
        "id": 213608455,
        "sender_full_name": "lcnr",
        "timestamp": 1602879063
    },
    {
        "content": "<p>/does it actually refer to a different version of the first snippet where bar is not a <code>const fn</code></p>",
        "id": 213608511,
        "sender_full_name": "lcnr",
        "timestamp": 1602879095
    },
    {
        "content": "<p>ahh yes</p>",
        "id": 213608539,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879113
    },
    {
        "content": "<p>there's another version</p>",
        "id": 213608546,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879116
    },
    {
        "content": "<p>with const fn which gives the error you're saying now, yeah</p>",
        "id": 213608599,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879126
    },
    {
        "content": "<p>I guess ...</p>",
        "id": 213608641,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879150
    },
    {
        "content": "<ol>\n<li>the E0015 error is ok but the thing shouldn't ICE</li>\n</ol>",
        "id": 213608663,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879166
    },
    {
        "content": "<p>ah, so the only issue is on <code>const { &amp;value }</code> where we infer the lt of the reference from the outer context</p>",
        "id": 213608666,
        "sender_full_name": "lcnr",
        "timestamp": 1602879169
    },
    {
        "content": "<p>that is a bigger bug which I wouldn't try to fix before landing your pr</p>",
        "id": 213608703,
        "sender_full_name": "lcnr",
        "timestamp": 1602879193
    },
    {
        "content": "<ol start=\"2\">\n<li>the example without <code>const fn</code> should also be giving E0015</li>\n</ol>",
        "id": 213608704,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879194
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions.20.2377124/near/213608704\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>the example without <code>const fn</code> should also be giving E0015</li>\n</ol>\n</blockquote>\n<p>what do you mean by this?</p>",
        "id": 213608749,
        "sender_full_name": "lcnr",
        "timestamp": 1602879228
    },
    {
        "content": "<p>what I was saying is ... first of all nothing should be ICEing, but that's obvious :)</p>",
        "id": 213608926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879323
    },
    {
        "content": "<p>the other thing is</p>",
        "id": 213608934,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879328
    },
    {
        "content": "<p>I guess</p>",
        "id": 213608943,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879335
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// run-pass</span>\n\n<span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bar</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">const</span><span class=\"p\">{</span><span class=\"n\">bar</span><span class=\"p\">()};</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213608951,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879338
    },
    {
        "content": "<p>should be giving an error like</p>",
        "id": 213608961,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879345
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>[santiago@galago rust3 (const-exprs-rfc-2920|REBASE 7/10)]$ rustc +rust3-stage1 src/test/ui/inline-const/const-expr-reference.rs\nerror[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n  --&gt; src/test/ui/inline-const/const-expr-reference.rs:12:12\n   |\n12 |   const { &amp;bar() }\n   |            ^^^^^\n</code></pre></div>",
        "id": 213608982,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879360
    },
    {
        "content": "<p>without the ICE</p>",
        "id": 213608996,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879362
    },
    {
        "content": "<p>like the <code>const fn</code> version</p>",
        "id": 213609035,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879371
    },
    {
        "content": "<p>but why? <code>bar</code> is a <code>const fn</code></p>",
        "id": 213609042,
        "sender_full_name": "lcnr",
        "timestamp": 1602879374
    },
    {
        "content": "<p>I was thinking more about the <code>&amp;</code> than the <code>bar()</code> part</p>",
        "id": 213609172,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879475
    },
    {
        "content": "<p>but I guess it should be valid to return a reference</p>",
        "id": 213609238,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879489
    },
    {
        "content": "<p>simpler reproduction of the problem</p>",
        "id": 213609370,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879579
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213609374,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879584
    },
    {
        "content": "<p>so about the ICE on <code>const { &amp;bar() }</code> I expect the error to be the following:</p>\n<p>This is desugared to </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ANON_CONST_0</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'?</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'?</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ANON_CONST_0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>as we however need to infer the lifetime of the reference we would have to instead desugar this to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">ANON_CONST_0</span>:<span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ANON_CONST_0</span>::<span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213609390,
        "sender_full_name": "lcnr",
        "timestamp": 1602879593
    },
    {
        "content": "<p>this is not quite trivial and also an issue for const generics</p>",
        "id": 213609455,
        "sender_full_name": "lcnr",
        "timestamp": 1602879612
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> who originally explained this to me quite a while ago, I just never got to actually implementing this</p>",
        "id": 213609536,
        "sender_full_name": "lcnr",
        "timestamp": 1602879670
    },
    {
        "content": "<p>yeah I don't understand this, would be nice if someone can explain it</p>",
        "id": 213609564,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879694
    },
    {
        "content": "<p>but again, the minimal example is</p>",
        "id": 213609571,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879700
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#![feature(inline_const)]</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213609585,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879709
    },
    {
        "content": "<p>which gives</p>",
        "id": 213609588,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879711
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: internal compiler error: compiler/rustc_mir/src/borrow_check/universal_regions.rs:768:36: cannot convert `ReErased` to a region vid\n\nthread &#39;rustc&#39; panicked at &#39;Box&lt;Any&gt;&#39;, compiler/rustc_errors/src/lib.rs:945:9\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&amp;template=ice.md\n\nnote: rustc 1.49.0-dev running on x86_64-unknown-linux-gnu\n\nquery stack during panic:\n#0 [mir_borrowck] borrow-checking `foo::{constant#0}`\n#1 [mir_drops_elaborated_and_const_checked] elaborating drops for `foo::{constant#0}`\nend of query stack\nerror: aborting due to previous error\n</code></pre></div>",
        "id": 213609595,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602879719
    },
    {
        "content": "<p>yeah, that should be exactly that issue. I think it's best to just ignore this for now</p>",
        "id": 213609681,
        "sender_full_name": "lcnr",
        "timestamp": 1602879760
    },
    {
        "content": "<p>To fix this, you can either wait for me to do it this once i finished my exams and am mentally well enough to dive into this or get <span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> to mentor here if they can.</p>",
        "id": 213609733,
        "sender_full_name": "lcnr",
        "timestamp": 1602879793
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 213610249,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602880118
    },
    {
        "content": "<p>this PR is up with tests, with all the things addressed so should be ready to r+, cc <span class=\"user-mention\" data-user-id=\"124288\">@oli</span></p>",
        "id": 213610264,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602880137
    },
    {
        "content": "<p>We can merge the PR even with that ICE, just mark the feature gate as incomplete so it gets the warning</p>",
        "id": 213610289,
        "sender_full_name": "oli",
        "timestamp": 1602880157
    },
    {
        "content": "<p>Lol I just caught up and was typing when you pinged me</p>",
        "id": 213610308,
        "sender_full_name": "oli",
        "timestamp": 1602880172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> told me to <code>r=oli-obk</code> but given that I've added more tests and stuff it may be good to review again I guess</p>",
        "id": 213610326,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602880189
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"124288\">oli</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions.20.2377124/near/213610289\">said</a>:</p>\n<blockquote>\n<p>We can merge the PR even with that ICE, just mark the feature gate as incomplete so it gets the warning</p>\n</blockquote>\n<p>ok, so last thing is to mark this as incomplete?</p>",
        "id": 213610389,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602880210
    },
    {
        "content": "<p>Yes</p>",
        "id": 213610409,
        "sender_full_name": "oli",
        "timestamp": 1602880216
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 213610417,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1602880220
    },
    {
        "content": "<p>And then r=me</p>",
        "id": 213610440,
        "sender_full_name": "oli",
        "timestamp": 1602880231
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/77124#issuecomment-711135046\">https://github.com/rust-lang/rust/pull/77124#issuecomment-711135046</a></p>",
        "id": 213706865,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603028341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 213811573,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603125090
    },
    {
        "content": "<p>going to check the parser to see how to fix this but tips are welcome</p>",
        "id": 213811731,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603125139
    },
    {
        "content": "<p>btw, the PR has landed :)</p>",
        "id": 213812802,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603125643
    },
    {
        "content": "<p>Answered on the issue thread.</p>",
        "id": 213824052,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603131021
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/78108\">https://github.com/rust-lang/rust/issues/78108</a></p>",
        "id": 213824059,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603131024
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> you around?</p>",
        "id": 213830924,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603134484
    },
    {
        "content": "<p>I can't make the end range parse</p>",
        "id": 213830962,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603134507
    },
    {
        "content": "<p>the start expression works in the range with the code I've added</p>",
        "id": 213830988,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603134519
    },
    {
        "content": "<p>but I was expecting this ...</p>",
        "id": 213831011,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603134535
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>     fn parse_pat_range_end(&amp;mut self) -&gt; PResult&lt;'a, P&lt;Expr&gt;&gt; {\n<span class=\"gd\">-        if self.check_path() {</span>\n<span class=\"gi\">+        if self.check_inline_const() {</span>\n<span class=\"gi\">+            self.parse_const_expr(self.token.span)</span>\n<span class=\"gi\">+        } else if self.check_path() {</span>\n</code></pre></div>",
        "id": 213831019,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603134538
    },
    {
        "content": "<p>to make the trick</p>",
        "id": 213831028,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603134544
    },
    {
        "content": "<p>ohh I see</p>",
        "id": 213831181,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603134620
    },
    {
        "content": "<p>it works for this case</p>",
        "id": 213831185,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603134623
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">..=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213831188,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603134627
    },
    {
        "content": "<p>but doesn't for</p>",
        "id": 213831208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603134643
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">..=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213831211,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603134645
    },
    {
        "content": "<p>fixed</p>",
        "id": 213832063,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603135077
    },
    {
        "content": "<p>unsure if in the best way, opening a PR</p>",
        "id": 213832110,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603135085
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/78116\">#78116</a></p>",
        "id": 213832517,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603135312
    },
    {
        "content": "<p>what is exactly an <code>NtBlock</code>?</p>",
        "id": 213833846,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603135999
    },
    {
        "content": "<p>non terminal block but unsure what's meant by non terminal there</p>",
        "id": 213833883,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603136026
    },
    {
        "content": "<p>A non terminal is an already parsed thing instead of a bunch of raw tokens.</p>",
        "id": 213835252,
        "sender_full_name": "bjorn3",
        "timestamp": 1603136765
    },
    {
        "content": "<p><a href=\"https://en.m.wikipedia.org/wiki/Parse_tree#Nomenclature\">https://en.m.wikipedia.org/wiki/Parse_tree#Nomenclature</a></p>",
        "id": 213835322,
        "sender_full_name": "bjorn3",
        "timestamp": 1603136809
    },
    {
        "content": "<p>can you give a concrete example?</p>",
        "id": 213837514,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603137815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> you were asking for a test here <a href=\"https://github.com/rust-lang/rust/pull/78118#discussion_r508027638\">https://github.com/rust-lang/rust/pull/78118#discussion_r508027638</a></p>",
        "id": 213837661,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603137869
    },
    {
        "content": "<p>I guess that's exactly what I was trying to ask here by a concrete example :)</p>",
        "id": 213837690,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603137883
    },
    {
        "content": "<p>This happens when you do <code>$a:block</code> in a macro pattern matcher and then <code>$a</code> in the body.</p>",
        "id": 213837777,
        "sender_full_name": "bjorn3",
        "timestamp": 1603137925
    },
    {
        "content": "<p>ya, that's what I was guessing</p>",
        "id": 213838010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603138027
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 213838014,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603138029
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> the open range test fails</p>",
        "id": 213844831,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603141084
    },
    {
        "content": "<p>taking a look at what could be the problem</p>",
        "id": 213844926,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603141097
    },
    {
        "content": "<p>getting</p>",
        "id": 213846077,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603141628
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error: expected one of `=&gt;`, `if`, or `|`, found keyword `const`\n  --&gt; /home/santiago/src/oss/rust1/src/test/ui/inline-const/const-match-pat-range.rs:25:12\n   |\nLL |         .. const { N + 1 } =&gt; {},\n   |            ^^^^^ expected one of `=&gt;`, `if`, or `|`\n</code></pre></div>",
        "id": 213846081,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603141631
    },
    {
        "content": "<p>I guess this may be a check that I'm missing but unsure where is this happening</p>",
        "id": 213846131,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603141656
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/78116/files#diff-659e114fec89a1207d1dd2ceb40bcf6058d3e27dc5b6f529e22de5854b5f9d6dL294-L297\">https://github.com/rust-lang/rust/pull/78116/files#diff-659e114fec89a1207d1dd2ceb40bcf6058d3e27dc5b6f529e22de5854b5f9d6dL294-L297</a></p>",
        "id": 213847994,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603142519
    },
    {
        "content": "<p>This is where the check happens, but looks like you have already updated <code>is_pat_range_end_start</code>.</p>",
        "id": 213848104,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603142561
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions.20.2377124/near/213847994\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/pull/78116/files#diff-659e114fec89a1207d1dd2ceb40bcf6058d3e27dc5b6f529e22de5854b5f9d6dL294-L297\">https://github.com/rust-lang/rust/pull/78116/files#diff-659e114fec89a1207d1dd2ceb40bcf6058d3e27dc5b6f529e22de5854b5f9d6dL294-L297</a></p>\n</blockquote>\n<p>the link doesn't take me to the place you're trying to point</p>",
        "id": 213849539,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603143380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Inline.20const.20expressions.20.2377124/near/213848104\">said</a>:</p>\n<blockquote>\n<p>This is where the check happens, but looks like you have already updated <code>is_pat_range_end_start</code>.</p>\n</blockquote>\n<p>I see what's going on and I've fixed a part of the problem</p>",
        "id": 213849564,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603143399
    },
    {
        "content": "<p>what's not working now is <code>const { } .. =&gt;</code></p>",
        "id": 213849596,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603143427
    },
    {
        "content": "<p>because I'm doing ...</p>",
        "id": 213849623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603143448
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">check_inline_const</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Parse `const pat`</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">const_expr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parse_const_expr</span><span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"p\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">token</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">re</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parse_range_end</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">end</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">parse_pat_range_end</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">PatKind</span>::<span class=\"n\">Range</span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">const_expr</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">end</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">re</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">PatKind</span>::<span class=\"n\">Lit</span><span class=\"p\">(</span><span class=\"n\">const_expr</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213849629,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603143451
    },
    {
        "content": "<p>I should have a way to avoid the end part</p>",
        "id": 213849657,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603143471
    },
    {
        "content": "<p>and pass <code>None</code></p>",
        "id": 213849666,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603143478
    },
    {
        "content": "<p>I should just look ahead and try to see if there's <code>=&gt;</code>?</p>",
        "id": 213849722,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603143493
    },
    {
        "content": "<p>seems a bit hacky to me</p>",
        "id": 213849733,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603143502
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> you around?</p>",
        "id": 213984570,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603231006
    },
    {
        "content": "<p>Not really, it's 1 AM here.</p>",
        "id": 213984786,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603231105
    },
    {
        "content": "<p>I'll look tomorrow.</p>",
        "id": 213984806,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1603231120
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 213985974,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603231845
    },
    {
        "content": "<p>about this <a href=\"https://github.com/rust-lang/rust/pull/78116#discussion_r508851636\">https://github.com/rust-lang/rust/pull/78116#discussion_r508851636</a></p>",
        "id": 213986003,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603231871
    },
    {
        "content": "<p>I'm getting</p>",
        "id": 213986029,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603231892
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0029]: only `char` and numeric types are allowed in range patterns\n  --&gt; /home/santiago/src/oss/rust1/src/test/ui/inline-const/const-match-pat-range.rs:35:13\n   |\nLL |         ..= const { .. } =&gt; {},\n   |             ^^^^^ this is of type `RangeFull` but it should be `char` or numeric\n</code></pre></div>",
        "id": 213986037,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603231894
    },
    {
        "content": "<p>That seems correct, no? You have a range whose endpoint is another range. Unless that's supported and I haven't heard about it?</p>",
        "id": 213986192,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603231975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> maybe I misunderstood <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span>'s, unsure, but I'm not sure what's the test I need to add there</p>",
        "id": 213986888,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232455
    },
    {
        "content": "<p>I think he meant adding <code>..= const { FOO }</code> where <code>FOO</code> is some expression. <code>..</code> as in \"fill in here\"</p>",
        "id": 213986965,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232509
    },
    {
        "content": "<p><em>Not</em> <code>..</code> literally as <code>RangeFull</code></p>",
        "id": 213987045,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232545
    },
    {
        "content": "<p>yeah I wasn't unsure what was meant by <code>..</code> given that that test already exist</p>",
        "id": 213987066,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232568
    },
    {
        "content": "<p>the one you're saying</p>",
        "id": 213987069,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232571
    },
    {
        "content": "<p>unless I'm wrong ...</p>",
        "id": 213987076,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232576
    },
    {
        "content": "<p>checking again</p>",
        "id": 213987080,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232578
    },
    {
        "content": "<p>No, it didn't already exist from what I can tell <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 213987104,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232601
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/78116/files#diff-cb295c55e959e2598c6d596286bdc823edcc7ee3aa8e3d3a5318b2a699f83ea1R25\">https://github.com/rust-lang/rust/pull/78116/files#diff-cb295c55e959e2598c6d596286bdc823edcc7ee3aa8e3d3a5318b2a699f83ea1R25</a></p>",
        "id": 213987114,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232611
    },
    {
        "content": "<p>This is the only one, and that's the one we were talking about: <a href=\"https://github.com/rust-lang/rust/pull/78116/files#diff-cb295c55e959e2598c6d596286bdc823edcc7ee3aa8e3d3a5318b2a699f83ea1R34-R37\">https://github.com/rust-lang/rust/pull/78116/files#diff-cb295c55e959e2598c6d596286bdc823edcc7ee3aa8e3d3a5318b2a699f83ea1R34-R37</a></p>",
        "id": 213987116,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232614
    },
    {
        "content": "<p>ohh are we talking about <code>..</code> vs <code>..=</code> maybe?</p>",
        "id": 213987125,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232623
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">..=</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 213987126,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232623
    },
    {
        "content": "<p>Yes, I think so</p>",
        "id": 213987135,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232628
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 213987139,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232632
    },
    {
        "content": "<p>you're probably right</p>",
        "id": 213987144,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232635
    },
    {
        "content": "<p>I didn't think that test make sense</p>",
        "id": 213987150,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232640
    },
    {
        "content": "<p>but ...</p>",
        "id": 213987176,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232642
    },
    {
        "content": "<p>Well, you want to test as much as possible in the parser :)</p>",
        "id": 213987204,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232657
    },
    {
        "content": "<blockquote>\n<p><strong>petrochenkov:</strong> [...] so all range code paths are covered?</p>\n</blockquote>",
        "id": 213987234,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232683
    },
    {
        "content": "<p>But I understand how <code>..</code> meaning \"elided\" can be confusing when you're working with ranges</p>",
        "id": 213987305,
        "sender_full_name": "Noah Lev",
        "timestamp": 1603232738
    },
    {
        "content": "<p>added those tests</p>",
        "id": 213987366,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1603232768
    }
]