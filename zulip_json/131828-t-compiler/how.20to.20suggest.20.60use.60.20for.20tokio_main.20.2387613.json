[
    {
        "content": "<p>Hey, I’m looking at <a href=\"https://github.com/rust-lang/rust/issues/87613\">#87613</a> and am flip-flopping between wildly different ways to approach the problem</p>",
        "id": 261519548,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636992837
    },
    {
        "content": "<p>Here is the heart of the problem: <code>#[tokio::main]</code> is a procedural macro (invoked as an attribute), and part of what it does is <em>delete</em> the <code>async</code> keyword from its expansion.</p>",
        "id": 261519675,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636992877
    },
    {
        "content": "<p>An unintended side-effect of this is that if you start with an <code>async fn</code>-item, you get an <code>fn</code>-item, and the spans you extract from that <code>fn</code>-item start six characters further into the stream than the original <code>async fn</code>-item. Meanwhile, the <code>UsePlacementFinder</code> in <code>rustc_resolve</code> will often end up trying to use those new spans as the basis for its suggestions of what <code>use</code>-items to insert into your code.</p>",
        "id": 261520005,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636992988
    },
    {
        "content": "<p>And because the expanded <code>fn</code>-item has a span that starts six characters later, the suggested <code>use</code>-item also starts six characters later. Notably, the <code>use</code>-item it suggests starts immediately after the <code>async</code> keyword that is still sitting around in the source text.</p>",
        "id": 261520145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993041
    },
    {
        "content": "<p>This is what ends up causing weird looking suggestions like: </p>\n<div class=\"codehilite\"><pre><span></span><code>help: consider importing one of these items\n  |\n2 | async use std::process::Command;\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n2 | async use tokio::process::Command;\n  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 261520288,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993091
    },
    {
        "content": "<p>It feels like a better fallback for not finding any extern crate / existing use is to insert into the top of the file (well, after any <code>#![foo]</code> attributes, including module doc comments)</p>",
        "id": 261520407,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993142
    },
    {
        "content": "<p>Or the top of the module, rather</p>",
        "id": 261520445,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993158
    },
    {
        "content": "<p>sure, yeah</p>",
        "id": 261520459,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993164
    },
    {
        "content": "<p>I’ve been musing about trying to do that.</p>",
        "id": 261520461,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993166
    },
    {
        "content": "<p>Is there an expectation that users \"get wrong\" the place to put the use commonly? (That is, do we have to synthesize a line number)?</p>",
        "id": 261520571,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993205
    },
    {
        "content": "<p>It feels like a simpler fix may be to just not try to put other stuff on the same line as the suggestion</p>",
        "id": 261520628,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993227
    },
    {
        "content": "<p>i.e., find a blank line or \"create\" one or something</p>",
        "id": 261520644,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993235
    },
    {
        "content": "<p>Hmm. I don’t know. I think the main issue is exactly the case where there’s a nested module</p>",
        "id": 261520671,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993249
    },
    {
        "content": "<p>in the common case, there won’t be a nested module, and indeed, the start of the file will be just fine</p>",
        "id": 261520714,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993266
    },
    {
        "content": "<p>well, in particular, my thinking is -- the problem here is that we generate <code>async use</code> because we're trying to create a snippet from the existing line</p>",
        "id": 261520765,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993294
    },
    {
        "content": "<p>but when the <code>fn</code>-item occurs inside another module, then I think it will be best to indeed direct the user to <em>some</em> appropriate line number</p>",
        "id": 261520782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993306
    },
    {
        "content": "<p>but it's not clear to me that just using that line number but not the line's contents is a bad idea</p>",
        "id": 261520784,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993307
    },
    {
        "content": "<p>I guess that breaks down for editor suggestions?</p>",
        "id": 261520922,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993341
    },
    {
        "content": "<p>Ah I see. Take the line number from the span of the given <code>fn</code>-item, but construct a span that starts from … column zero of that line?</p>",
        "id": 261520931,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993343
    },
    {
        "content": "<p>something like that, yeah.</p>",
        "id": 261520952,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993352
    },
    {
        "content": "<p>I don’t yet know if our span operations even make such a construction easy</p>",
        "id": 261521029,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993374
    },
    {
        "content": "<p>Let me look</p>",
        "id": 261521036,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993378
    },
    {
        "content": "<p>(obviously, that fails for <code>mod foo { fn bar() { ... } }</code> or some such, all on one line)</p>",
        "id": 261521082,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993393
    },
    {
        "content": "<p>Yeah</p>",
        "id": 261521092,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993397
    },
    {
        "content": "<p>and also, editor suggestions will indeed go nuts on the column zero based suggestion when you have something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[tokio::main]</span><span class=\"w\"></span>\n<span class=\"cm\">/* multi line</span>\n<span class=\"cm\">comment */</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 261521189,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993436
    },
    {
        "content": "<p>it seems like we really want \"blank line, not in anything\" top of this module</p>",
        "id": 261521277,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993460
    },
    {
        "content": "<p>which may be complicated to actually get</p>",
        "id": 261521292,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993467
    },
    {
        "content": "<p>(re:editor suggestions, I'm not actually sure rust-analyzer uses these, at least, so maybe it's not really that important)</p>",
        "id": 261521357,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993490
    },
    {
        "content": "<p>In any case, anything that ends up making us <em>not</em> emit the <code>async</code> in the suggested <code>use</code>-item will be a huge improvement</p>",
        "id": 261521452,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993530
    },
    {
        "content": "<p>IOW, maybe not making this MachineApplicable and instead just showing the use statement and leaving it to the user to insert it seems potentially fine to me</p>",
        "id": 261521479,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993541
    },
    {
        "content": "<p>(still with a decent-ish line number, but without any surrounding context)</p>",
        "id": 261521506,
        "sender_full_name": "simulacrum",
        "timestamp": 1636993555
    },
    {
        "content": "<p>yeah</p>",
        "id": 261521515,
        "sender_full_name": "pnkfelix",
        "timestamp": 1636993560
    },
    {
        "content": "<p>BTW, there are some similar duplicates for that issue (<a href=\"https://github.com/rust-lang/rust/issues/89810\">#89810</a> and <a href=\"https://github.com/rust-lang/rust/issues/86241\">#86241</a>), you may want to consolidate them.</p>\n<p>I like the idea of:  if there are other <code>use</code> items, group with them.  If not, place at the top of the module (after any inner attributes).  </p>\n<p>(Ideally the <code>UsePlacementFinder</code> would be as good as rust-analyzer.  I wonder how hard it would be to have it be similar?)</p>",
        "id": 261565469,
        "sender_full_name": "Eric Huss",
        "timestamp": 1637013478
    },
    {
        "content": "<p>after some exploration of the design space here, my current preferred approach is this: continue falling back on a span derived from the given item where the resolution error occurred (the macro-generated <code>fn main</code> in this case), <em>but</em>, when generating the suggestion, uee a new output mode that avoids transcribing the surrounding text, replacing all non-whitespace with space characters.</p>",
        "id": 261593517,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637033297
    },
    {
        "content": "<p>so for my current unit test, this currently produces the following output:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0433]: failed to resolve: use of undeclared type `Command`\n  --&gt; /home/ubuntu/Dev/Rust/rust-87613/src/test/ui/proc-macro/amputate-span.rs:48:5\n   |\n48 |     Command::new(&quot;git&quot;);\n   |     ^^^^^^^ not found in this scope\n   |\nhelp: consider importing this struct\n   |\n47 |              use std::process::Command;\n   |\n</code></pre></div>",
        "id": 261593606,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637033401
    },
    {
        "content": "<p>the reasoning behind this: <em>any</em> choice of indentation is going to be a heuristic. The current system actually yields a very effective heuristic much of the time, since most of  the time, the span of the item has a <code>.lo</code> field that corresponds perfectly to the indentation you want to use.</p>",
        "id": 261593702,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637033487
    },
    {
        "content": "<p>the other options that we’re exploring above, of trying to place it at the top of the module, are going to be hard to get the indentation right, at least based on our current architecture.</p>",
        "id": 261593792,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637033557
    },
    {
        "content": "<p>(for example: when inserting into an inline module, you don’t get a span for the start of that <code>mod { … }</code>; it is a span that instead starts covers the <code>…</code> alone. So you’d have to do some guessing to figure out how far to indent the <code>use</code>-item that you suggest</p>",
        "id": 261593874,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637033662
    },
    {
        "content": "<p>Another option of course is to just abandon trying to produce a suggestion that has an indentation that matches the context of where it occurs. But this seems like a strict regression in quality compared to the approach I’m prototyping now.</p>",
        "id": 261593941,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637033732
    },
    {
        "content": "<p>Anyway I should have a Pull Request up soon</p>",
        "id": 261593961,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637033747
    },
    {
        "content": "<p>PR is now up: <a href=\"https://github.com/rust-lang/rust/issues/90941\">#90941</a></p>",
        "id": 261596850,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637037107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/how.20to.20suggest.20.60use.60.20for.20tokio_main.20.2387613/near/261593792\">said</a>:</p>\n<blockquote>\n<p>the other options that we’re exploring above, of trying to place it at the top of the module, are going to be hard to get the indentation right, at least based on our current architecture.</p>\n</blockquote>\n<p>(they would also  run afoul of inline attributes. You’d want to try to skip over those. Seems easier to just go with what I’ve proposed in PR <a href=\"https://github.com/rust-lang/rust/issues/90941\">#90941</a>)</p>",
        "id": 261597241,
        "sender_full_name": "pnkfelix",
        "timestamp": 1637037492
    }
]