[
    {
        "content": "<p>I am fiddling with the <code>Region</code> type, for <a href=\"https://github.com/rust-lang/rust/issues/93148\">#93148</a>. I have two ui test failures, but they seem like the new form of the errors may be acceptable, or even preferable?</p>\n<div class=\"codehilite\"><pre><span></span><code>---- [ui] ui/issues/issue-35570.rs stdout ----\ndiff of stderr:\n\n1   error[E0277]: the trait bound `for&lt;&#39;a&gt; (): Trait2&lt;&#39;a&gt;` is not satisfied\n-     --&gt; $DIR/issue-35570.rs:8:4\n+     --&gt; $DIR/issue-35570.rs:8:40\n3      |\n4   LL | fn _ice(param: Box&lt;dyn for &lt;&#39;a&gt; Trait1&lt;&lt;() as Trait2&lt;&#39;a&gt;&gt;::Ty&gt;&gt;) {\n-      |    ^^^^ the trait `for&lt;&#39;a&gt; Trait2&lt;&#39;a&gt;` is not implemented for `()`\n+      |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `for&lt;&#39;a&gt; Trait2&lt;&#39;a&gt;` is not implemented for `()`\n6\n7   error: aborting due to previous error\n8\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\"><pre><span></span><code>---- [ui] ui/regions/regions-implied-bounds-projection-gap-hr-1.rs stdout ----\ndiff of stderr:\n\n1   error[E0277]: the trait bound `for&lt;&#39;z&gt; T: Trait2&lt;&#39;y, &#39;z&gt;` is not satisfied\n-     --&gt; $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:4\n+     --&gt; $DIR/regions-implied-bounds-projection-gap-hr-1.rs:21:49\n3      |\n4   LL | fn callee&lt;&#39;x, &#39;y, T&gt;(t: &amp;&#39;x dyn for&lt;&#39;z&gt; Trait1&lt; &lt;T as Trait2&lt;&#39;y, &#39;z&gt;&gt;::Foo &gt;)\n-      |    ^^^^^^ the trait `for&lt;&#39;z&gt; Trait2&lt;&#39;y, &#39;z&gt;` is not implemented for `T`\n+      |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `for&lt;&#39;z&gt; Trait2&lt;&#39;y, &#39;z&gt;` is not implemented for `T`\n6      |\n7   help: consider restricting type parameter `T`\n8      |\n</code></pre></div>\n<p>Anyone have opinions about this?</p>",
        "id": 269974364,
        "sender_full_name": "nnethercote",
        "timestamp": 1643597780
    },
    {
        "content": "<p>I don't know how the change occurred, my refactoring is supposed to not affect behaviour...</p>",
        "id": 269978076,
        "sender_full_name": "nnethercote",
        "timestamp": 1643602421
    },
    {
        "content": "<p>The diagnostic code extracts information in ways that can be very fragile. It may be simply that you fixed an obligation span from a dummy span to something useful. cc <span class=\"user-group-mention\" data-user-group-id=\"1187\">@WG-diagnostics</span> this change def seems good to me</p>",
        "id": 270004798,
        "sender_full_name": "oli",
        "timestamp": 1643622812
    },
    {
        "content": "<p>Agree, this change is a fix</p>",
        "id": 270058767,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1643645976
    },
    {
        "content": "<p>I'm glad to hear it, though I have no idea how my change touches spans <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 270097287,
        "sender_full_name": "nnethercote",
        "timestamp": 1643659965
    },
    {
        "content": "<p>Thanks for the info</p>",
        "id": 270097313,
        "sender_full_name": "nnethercote",
        "timestamp": 1643659973
    },
    {
        "content": "<p>My guess would be that you ended up changing the eq/hash behavior of something</p>",
        "id": 270101829,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1643661899
    },
    {
        "content": "<p>which affected some of the diagnostic that does a hashmap lookup to determine what kind of diagnostic it should emit</p>",
        "id": 270101886,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1643661947
    },
    {
        "content": "<p>oh, wait, that looks like an error message created by the HIR wf check</p>",
        "id": 270102564,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1643662261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@nnethercote</span> Can you push your latest code? I can take a look and try to figure out where the diagnostic change is coming from</p>",
        "id": 270102650,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1643662321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> Good guess, this change very much does change the Eq/Hash behaviour of <code>Region</code></p>",
        "id": 270108907,
        "sender_full_name": "nnethercote",
        "timestamp": 1643664937
    },
    {
        "content": "<p>I've updated the code in <a href=\"https://github.com/rust-lang/rust/issues/93148\">#93148</a>, it's the 3rd commit that changes the error message</p>",
        "id": 270109062,
        "sender_full_name": "nnethercote",
        "timestamp": 1643664991
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120989\">nnethercote</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Region-related.20error.20messages/near/269978076\">said</a>:</p>\n<blockquote>\n<p>I don't know how the change occurred, my refactoring is supposed to not affect behaviour...</p>\n</blockquote>\n<p>Perhaps something is hashing region (<code>as *const RegionKind</code> instead of by reference) to associate regions with spans for that diagnostic, which now collide because the regions are pointer-equal?</p>\n<p>edit: did not refresh to see Aaron's message, hehe, sorry for the spam.</p>",
        "id": 270127822,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1643673699
    },
    {
        "content": "<p>It might be <code>GenericArg</code>, which hashes according to pointer according to its <code>derive(Hash, PartialEq, Eq)</code>?</p>",
        "id": 270128053,
        "sender_full_name": "Michael Goulet (compiler-errors)",
        "timestamp": 1643673773
    }
]