[
    {
        "content": "<p>So, i have an interesting problem on my hands. I am writing a codegen for NVVM IR to allow users to write extremely fast cuda gpu kernels in rust. Its been going <del>painfully</del> great, although im running into an issue, libnvvm takes in LLVM 7 - style bitcode, which is great, except that it seemingly does not accept i128, this seems undocumented to me, there is nothing saying it shouldnt support it, but anyways. When i try to compile stuff that uses i128, i get verifier errors that it does not allow i128 on simple math intrinsics (which are supported for non-i128):</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code><span class=\"c\">; &lt;u128 as core$$ops$$arith$$Add$GT$::add</span>\n<span class=\"c\">; Function Attrs: inlinehint</span>\n<span class=\"k\">define</span> <span class=\"k\">internal</span> <span class=\"kt\">i128</span> <span class=\"vg\">@\"_ZN46_$LT$u128$u20$as$u20$core$$ops$$arith$$Add$GT$3add17h3dcc50c21ba312f0E\"</span><span class=\"p\">(</span><span class=\"kt\">i128</span><span class=\"p\">,</span> <span class=\"kt\">i128</span><span class=\"p\">)</span> <span class=\"k\">unnamed_addr</span> <span class=\"vg\">#0</span> <span class=\"p\">{</span>\n<span class=\"nl\">start:</span>\n  <span class=\"nv nv-Anonymous\">%2</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"kt\">i128</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">16</span>\n  <span class=\"nv nv-Anonymous\">%3</span> <span class=\"p\">=</span> <span class=\"k\">alloca</span> <span class=\"kt\">i128</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">16</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i128</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"kt\">i128</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%3</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">16</span>\n  <span class=\"k\">store</span> <span class=\"kt\">i128</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">,</span> <span class=\"kt\">i128</span><span class=\"p\">*</span> <span class=\"nv nv-Anonymous\">%2</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">16</span>\n  <span class=\"nv nv-Anonymous\">%4</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"p\">{</span> <span class=\"kt\">i128</span><span class=\"p\">,</span> <span class=\"kt\">i1</span> <span class=\"p\">}</span> <span class=\"vg\">@llvm.uadd.with.overflow.i128</span><span class=\"p\">(</span><span class=\"kt\">i128</span> <span class=\"nv nv-Anonymous\">%0</span><span class=\"p\">,</span> <span class=\"kt\">i128</span> <span class=\"nv nv-Anonymous\">%1</span><span class=\"p\">)</span>\n  <span class=\"nv nv-Anonymous\">%5</span> <span class=\"p\">=</span> <span class=\"k\">extractvalue</span> <span class=\"p\">{</span> <span class=\"kt\">i128</span><span class=\"p\">,</span> <span class=\"kt\">i1</span> <span class=\"p\">}</span> <span class=\"nv nv-Anonymous\">%4</span><span class=\"p\">,</span> <span class=\"m\">0</span>\n  <span class=\"nv nv-Anonymous\">%6</span> <span class=\"p\">=</span> <span class=\"k\">extractvalue</span> <span class=\"p\">{</span> <span class=\"kt\">i128</span><span class=\"p\">,</span> <span class=\"kt\">i1</span> <span class=\"p\">}</span> <span class=\"nv nv-Anonymous\">%4</span><span class=\"p\">,</span> <span class=\"m\">1</span>\n  <span class=\"nv nv-Anonymous\">%7</span> <span class=\"p\">=</span> <span class=\"k\">call</span> <span class=\"kt\">i1</span> <span class=\"vg\">@llvm.expect.i1</span><span class=\"p\">(</span><span class=\"kt\">i1</span> <span class=\"nv nv-Anonymous\">%6</span><span class=\"p\">,</span> <span class=\"kt\">i1</span> <span class=\"k\">false</span><span class=\"p\">)</span>\n  <span class=\"k\">br</span> <span class=\"kt\">i1</span> <span class=\"nv nv-Anonymous\">%7</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%panic</span><span class=\"p\">,</span> <span class=\"kt\">label</span> <span class=\"nv\">%bb1</span>\n\n<span class=\"nl\">bb1:</span>                                              <span class=\"c\">; preds = %start</span>\n  <span class=\"k\">ret</span> <span class=\"kt\">i128</span> <span class=\"nv nv-Anonymous\">%5</span>\n\n<span class=\"nl\">panic:</span>                                            <span class=\"c\">; preds = %start</span>\n<span class=\"c\">; call core::panicking::panic</span>\n  <span class=\"k\">call</span> <span class=\"k\">void</span> <span class=\"vg\">@_ZN4core9panicking5panic17hdc84aeb16cf0e2cbE</span><span class=\"p\">([</span><span class=\"m\">0</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"k\">nonnull</span> <span class=\"k\">align</span> <span class=\"m\">1</span> <span class=\"k\">bitcast</span> <span class=\"p\">([</span><span class=\"m\">28</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"vg\">@str.3</span> <span class=\"k\">to</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*),</span> <span class=\"kt\">i64</span> <span class=\"m\">28</span><span class=\"p\">,</span> <span class=\"nv\">%\"rustc_std_workspace_core::panic::Location\"</span><span class=\"p\">*</span> <span class=\"k\">align</span> <span class=\"m\">8</span> <span class=\"k\">dereferenceable</span><span class=\"p\">(</span><span class=\"m\">24</span><span class=\"p\">)</span> <span class=\"k\">bitcast</span> <span class=\"p\">(&lt;{</span> <span class=\"kt\">i8</span><span class=\"p\">*,</span> <span class=\"p\">[</span><span class=\"m\">16</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"p\">}&gt;*</span> <span class=\"vg\">@alloc1171</span> <span class=\"k\">to</span> <span class=\"nv\">%\"rustc_std_workspace_core::panic::Location\"</span><span class=\"p\">*))</span>\n  <span class=\"k\">unreachable</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>It rightfully refuses to compile:</p>\n<div class=\"codehilite\"><pre><span></span><code>- Error: :  Function `_ZN46_$LT$u128$u20$as$u20$core$$ops$$arith$$Add$GT$3add17h3dcc50c21ba312f0E&#39; Basic Block `start&#39;:\n  context:   %4 = call { i128, i1 } @llvm.uadd.with.overflow.i128(i128 %0, i128 %1)\n  Invalid type for arithmetic overflow intrinsic, need i16, i32, or i64\n</code></pre></div>\n<p>Now, im not quite sure how to handle this. Should i silently represent i128 as a union of two i64s then emulate operations somehow, or should i identify the functions that use i128 and trap inside them? Im not quite sure how i'd go about doing that since im using the ssa codegen, maybe a pre-pass on the MIR? idk.</p>",
        "id": 246531314,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626740811
    },
    {
        "content": "<p>perhaps i could emulate the i128 intrinsics with other intrinsics? that might work, because it seems like i128 itself is supported, but intrinsics with i128 are not</p>",
        "id": 246531766,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626741278
    },
    {
        "content": "<p>libnvvm even codegens it right using a 16 x 8 bit array</p>\n<div class=\"codehilite\"><pre><span></span><code>.visible .func  (.param .align 8 .b8 func_retval0[16]) foo(\n    .param .align 8 .b8 foo_param_0[16],\n    .param .align 8 .b8 foo_param_1[16]\n)\n</code></pre></div>",
        "id": 246531872,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626741423
    },
    {
        "content": "<p>Rust requires backends to know how to legalize operations that are not natively supported at the machine level.</p>",
        "id": 246653118,
        "sender_full_name": "nagisa",
        "timestamp": 1626816244
    },
    {
        "content": "<p>i128 is one of those things.</p>",
        "id": 246653150,
        "sender_full_name": "nagisa",
        "timestamp": 1626816258
    },
    {
        "content": "<p>compiler-builtins has some functions that implement i128 operations fwiw, so emitting a function call may be sufficient.</p>",
        "id": 246653210,
        "sender_full_name": "nagisa",
        "timestamp": 1626816302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> oh compiler-builtins has functions i can link to to handle this automatically? that would be great.</p>",
        "id": 246664191,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626824842
    },
    {
        "content": "<p>oh i see, it does contain functions to do that, in this case i'll just link to that, although not sure about how considering they are mangled...</p>",
        "id": 246664422,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626825087
    },
    {
        "content": "<p>oh wait im dumb, theres no_mangle versions of the functions <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 246664998,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1626825625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> has marked this topic as resolved.</p>",
        "id": 246667354,
        "sender_full_name": "Notification Bot",
        "timestamp": 1626827922
    }
]