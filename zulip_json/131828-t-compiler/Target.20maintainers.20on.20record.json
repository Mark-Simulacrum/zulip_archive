[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> The Target Tier RFC mentioned that we ought to have developers on record who would be on the hook for maintaining these targets. Do we have this record yet? If not I think the obvious location would probably be to add a column to <a href=\"https://doc.rust-lang.org/rustc/platform-support.html\">https://doc.rust-lang.org/rustc/platform-support.html</a>?</p>",
        "id": 240622222,
        "sender_full_name": "nagisa",
        "timestamp": 1622216468
    },
    {
        "content": "<p>I'm happy to propose the changes necessary to implement this if there isn't anywhere else that we keep track right now.</p>",
        "id": 240622494,
        "sender_full_name": "nagisa",
        "timestamp": 1622216600
    },
    {
        "content": "<p>We don't have this record yet</p>",
        "id": 240623780,
        "sender_full_name": "simulacrum",
        "timestamp": 1622217142
    },
    {
        "content": "<p>There's one useful place.</p>",
        "id": 240623887,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622217192
    },
    {
        "content": "<p>We have some target maintainers recorded in rustbot so they can be pinged.</p>",
        "id": 240623926,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622217217
    },
    {
        "content": "<p>I'm not sure if putting it in-tree (where changes have to go through bors) makes the most sense; I'm not sure but maybe ping groups like we have for e.g. windows make more sense, and then we can store the mapping of target to group in-tree. (For example, it may make sense to have a single group for all windows targets, and then a separate group for all ARM targets, rather than distinct groups per target).</p>",
        "id": 240623929,
        "sender_full_name": "simulacrum",
        "timestamp": 1622217219
    },
    {
        "content": "<p>ping groups are like this: <a href=\"https://github.com/rust-lang/team/blob/master/teams/windows.toml\">https://github.com/rust-lang/team/blob/master/teams/windows.toml</a></p>",
        "id": 240623980,
        "sender_full_name": "simulacrum",
        "timestamp": 1622217241
    },
    {
        "content": "<p>and then <a href=\"https://github.com/rust-lang/rust/blob/master/triagebot.toml#L40-L49\">https://github.com/rust-lang/rust/blob/master/triagebot.toml#L40-L49</a></p>",
        "id": 240624071,
        "sender_full_name": "simulacrum",
        "timestamp": 1622217269
    },
    {
        "content": "<p>OTOH, preserving a per-commit history of target maintainers also likely has some value. <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> I recall the kernel as a subsystem maintainers file, though some recentish articles suggested it may not be well-updated -- is there sufficiently low turbulence that maintenance there when someone leaves is not a problem? In particular, newish contributors presumably fork their work off of a potentially old commit (e.g., the previous stable release?) I don't quite know what is typical there, but it seems a similar concept</p>",
        "id": 240624867,
        "sender_full_name": "simulacrum",
        "timestamp": 1622217621
    },
    {
        "content": "<p>I'm not sure if this is in relation to <a href=\"https://github.com/rust-lang/rust/pull/85781\">https://github.com/rust-lang/rust/pull/85781</a>.</p>\n<p>Regarding that PR, I think it's great to have that information, but I'm concerned that listing that out for <em>every</em> target will get unwieldy (or at least hard to organize in mdbook).  I don't know how else to manage it, and I was curious if others had thoughts on it.</p>",
        "id": 240626773,
        "sender_full_name": "Eric Huss",
        "timestamp": 1622218468
    },
    {
        "content": "<p>I was reviewing a BPF target when this came up.</p>",
        "id": 240630183,
        "sender_full_name": "nagisa",
        "timestamp": 1622220273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> The kernel maintainers file is used for a very similar purpose, namely that there are tools to help you figure who you should CC on a patch.</p>",
        "id": 240635276,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622222619
    },
    {
        "content": "<p>Those tools look at both \"who nominally owns this area\" and \"who has recently done work in this area\".</p>",
        "id": 240635321,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622222642
    },
    {
        "content": "<p>Ah, recently done is interesting. Can you share if there are problems with that model in terms of maintaining it?</p>",
        "id": 240635705,
        "sender_full_name": "simulacrum",
        "timestamp": 1622222820
    },
    {
        "content": "<p>The MAINTAINERS file is mostly up-to-date; there's definitely outdated information in it, but in the cases where it's outdated, it tends to be \"nobody is maintaining this area\" rather than \"this file records person A but it's really person B\".</p>",
        "id": 240635768,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622222862
    },
    {
        "content": "<p>So, it won't point you to the wrong person and fail to point you to the right one; the failure mode is \"the file encouraged me to CC someone, but they're not actually active anymore\".</p>",
        "id": 240635877,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622222896
    },
    {
        "content": "<p>Given that the main point of the list is to CC people, and CCs are cheap, it pretty much serves its function.</p>",
        "id": 240635908,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622222913
    },
    {
        "content": "<p>\"recently done\" on the other hand is a mixed bag.</p>",
        "id": 240635932,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622222924
    },
    {
        "content": "<p>It has a tendency to mean that people who do tree-wide fixes and cleanups get a <em>lot</em> of random CCs.</p>",
        "id": 240635952,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622222936
    },
    {
        "content": "<p>On things they don't actually care about or have the ability or inclination to review.</p>",
        "id": 240635982,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622222947
    },
    {
        "content": "<p>And it makes people grumpy (or, grumpier than usual). ;)</p>",
        "id": 240636071,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622222991
    },
    {
        "content": "<p>It's possible it might work better in Rust, at least for the time being. It may or may not scale.</p>",
        "id": 240636183,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1622223016
    },
    {
        "content": "<p>Interesting. Thanks!</p>",
        "id": 240636905,
        "sender_full_name": "simulacrum",
        "timestamp": 1622223368
    },
    {
        "content": "<p>is there room for a sort of backup maintainer in this concept? like, I would be interested in all <code>linux-gnu</code> arches that ship Fedora and RHEL, and I'm willing to get involved with maintenance related to those, but I wouldn't claim to <strong>own</strong> them.</p>",
        "id": 240653534,
        "sender_full_name": "cuviper",
        "timestamp": 1622231909
    }
]