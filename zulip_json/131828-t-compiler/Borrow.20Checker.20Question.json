[
    {
        "content": "<p>Hello!</p>\n<p>I'm working on a talk that, among other things, covers some of the internals of the borrow checker.</p>\n<p>I have a question re: move paths and places when the checker is tracing moves and initializations. I know that an MIR visitor called the Gatherer walks the MIR and looks at how each Place is accessed. Then, for each place, the Gatherer constructs a MovePathIndex.</p>\n<p>When I am looking at the MIR output and I see something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>StorageLive(_20);                // bb6[8]: scope 2 at src/main.rs:5:14: 5:18\n        StorageLive(_21);                // bb6[9]: scope 2 at src/main.rs:5:14: 5:18\n        _21 = _22;                       // bb6[13]: scope 2 at src/main.rs:5:14: 5:18\n        _20 = move _21 as &amp;[&amp;str] (Pointer(Unsize)); // bb6[14]: scope 2 at src/main.rs:5:14: 5:18\n</code></pre></div>\n\n\n<p>are the values designated as _20, _21, etc. the places that the Gatherer checks?</p>",
        "id": 203437321,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1594327167
    },
    {
        "content": "<p><code>_123</code> are locals</p>",
        "id": 203442385,
        "sender_full_name": "eddyb",
        "timestamp": 1594329714
    },
    {
        "content": "<p>a place is a local and optionally projections into that local (like field accesses)</p>",
        "id": 203442516,
        "sender_full_name": "eddyb",
        "timestamp": 1594329735
    },
    {
        "content": "<p>so <code>(_123[4].5.x as Variant).variant_field</code> is an extreme example</p>",
        "id": 203442565,
        "sender_full_name": "eddyb",
        "timestamp": 1594329763
    },
    {
        "content": "<p>in your example all the places are as simple as they can be (just locals)</p>",
        "id": 203442606,
        "sender_full_name": "eddyb",
        "timestamp": 1594329797
    },
    {
        "content": "<p>if you look at the top of the function in the MIR, you'll see on <code>let</code> per local (except arguments which are listed between the parens of <code>fn foo(....)</code>)</p>",
        "id": 203442666,
        "sender_full_name": "eddyb",
        "timestamp": 1594329833
    },
    {
        "content": "<p>ty!</p>",
        "id": 203448527,
        "sender_full_name": "Nell Shamrell-Harrington",
        "timestamp": 1594332967
    }
]