[
    {
        "content": "<blockquote>\n<p>even better if you can invite <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span></p>\n</blockquote>\n<p>(that was about <a href=\"https://github.com/rust-lang/rust/issues/63450\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/63450\">https://github.com/rust-lang/rust/issues/63450</a>)<br>\nNot sure what I could contribute here? All I want is for <a href=\"https://github.com/rust-lang/rust/pull/63448\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63448\">https://github.com/rust-lang/rust/pull/63448</a> to get merged, and at this point I think it is not appropriate to block that on resolving our enum discriminant story.</p>",
        "id": 175797635,
        "sender_full_name": "RalfJ",
        "timestamp": 1568626975
    },
    {
        "content": "<p>that PR fixes incorrect evaluation behavior in the Miri engine, meaning CTFE and Miri currently just evaluate programs incorrect -- a critical bug.</p>",
        "id": 175797647,
        "sender_full_name": "RalfJ",
        "timestamp": 1568627000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> given that your PR didn't move in a few weeks, what is your rationale for blocking a critical bug fix on that?</p>",
        "id": 175797682,
        "sender_full_name": "RalfJ",
        "timestamp": 1568627033
    },
    {
        "content": "<p><em>aaaaaa</em></p>",
        "id": 175797732,
        "sender_full_name": "eddyb",
        "timestamp": 1568627060
    },
    {
        "content": "<p>sorry I completely forgot about it</p>",
        "id": 175797738,
        "sender_full_name": "eddyb",
        "timestamp": 1568627072
    },
    {
        "content": "<p>I'll try to take a look at it today</p>",
        "id": 175797765,
        "sender_full_name": "eddyb",
        "timestamp": 1568627110
    },
    {
        "content": "<p>(I never wanted it to be blocked for this long)</p>",
        "id": 175797776,
        "sender_full_name": "eddyb",
        "timestamp": 1568627128
    },
    {
        "content": "<p>out of curiosity, what is an example of a scenario where we currently use a pointer for the discriminant?</p>",
        "id": 175797782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568627133
    },
    {
        "content": "<blockquote>\n<p><em>aaaaaa</em></p>\n</blockquote>\n<p>I pinged you twice on that PR, seems like I should have pinged you... on Zulip instead?^^</p>",
        "id": 175797861,
        "sender_full_name": "RalfJ",
        "timestamp": 1568627216
    },
    {
        "content": "<blockquote>\n<p>I'll try to take a look at it today</p>\n</blockquote>\n<p>thanks!</p>",
        "id": 175797866,
        "sender_full_name": "RalfJ",
        "timestamp": 1568627219
    },
    {
        "content": "<p>is it for handling e.g. <code>Option&lt;&amp;T&gt;</code> in some sort of way that LLVM likes?</p>",
        "id": 175797885,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568627245
    },
    {
        "content": "<blockquote>\n<p>out of curiosity, what is an example of a scenario where we currently use a pointer for the discriminant?</p>\n</blockquote>\n<p>no it's not about pointers at all</p>",
        "id": 175797890,
        "sender_full_name": "RalfJ",
        "timestamp": 1568627252
    },
    {
        "content": "<p>it's about overflows when computing the discriminant in case there is a niche</p>",
        "id": 175797905,
        "sender_full_name": "RalfJ",
        "timestamp": 1568627268
    },
    {
        "content": "<p>from the comments in the PR it sounded like the reason we use Primitive today rather than Integer was to handle Pointers</p>",
        "id": 175797907,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568627274
    },
    {
        "content": "<p>oh you mean pointer <em>type</em>... yeah I guess that's for <code>Option&lt;&amp;T&gt;</code> or so</p>",
        "id": 175797957,
        "sender_full_name": "RalfJ",
        "timestamp": 1568627302
    },
    {
        "content": "<p>(in Miri/CTFE we also have integer vs pointer <em>values</em> and that's somewaht orthogonal to the types so I was confused)</p>",
        "id": 175797968,
        "sender_full_name": "RalfJ",
        "timestamp": 1568627323
    },
    {
        "content": "<p>pointers are kinda easy to solve, the annoying one is signed integers</p>",
        "id": 175797971,
        "sender_full_name": "eddyb",
        "timestamp": 1568627331
    },
    {
        "content": "<p>ah here is a <a href=\"https://github.com/rust-lang/rust/issues/62138#issuecomment-520154725\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/62138#issuecomment-520154725\">concrete example</a> you had found earlier, <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 175798008,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568627394
    },
    {
        "content": "<p>namely <code>Option&lt;unsafe extern \"C\" fn(*mut u8)&gt;</code></p>",
        "id": 175798020,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568627402
    },
    {
        "content": "<p>we can try to land RalfJ's PR if this is not easily solvable: <a href=\"https://github.com/rust-lang/rust/pull/63450#issuecomment-523385921\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63450#issuecomment-523385921\">https://github.com/rust-lang/rust/pull/63450#issuecomment-523385921</a></p>",
        "id": 175798087,
        "sender_full_name": "eddyb",
        "timestamp": 1568627463
    },
    {
        "content": "<p>wow that was 26 days ago it feels like last week</p>",
        "id": 175798096,
        "sender_full_name": "eddyb",
        "timestamp": 1568627470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> do you have a plan for proceeding here? if you want I can try to fix all the signedness bugs in my PR and then we can see how bad that is</p>",
        "id": 175798873,
        "sender_full_name": "eddyb",
        "timestamp": 1568628245
    },
    {
        "content": "<p>plan? ha ha, no</p>",
        "id": 175798887,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568628261
    },
    {
        "content": "<p>To be honest, I'm not quite clear on the relative benefits of the three options you laid out in <a href=\"https://github.com/rust-lang/rust/pull/63450#issuecomment-523385921\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63450#issuecomment-523385921\">your 26 day old comment</a></p>",
        "id": 175798950,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568628343
    },
    {
        "content": "<p>My assumption is that going to Integer + signedness would be fine. But you're more deeply acquainted with the code here, so I'd like to hear you out on why you want to go all the way to Integer.</p>",
        "id": 175799048,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568628446
    },
    {
        "content": "<p>but in any case, maybe we can move this whole discussion to its own topic? I will do that now if I can</p>",
        "id": 175799058,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568628466
    },
    {
        "content": "<p>oh yeah uhh sorry</p>",
        "id": 175799159,
        "sender_full_name": "eddyb",
        "timestamp": 1568628574
    },
    {
        "content": "<p>the reason to go all the way to Integer is that signedness should matter as least as possible, IMO, but also there is no <code>(Integer, /*signed*/ bool)</code> type so it'd be an annoying refactor (but maybe less annoying than having to deal with signedness on the fly?)</p>",
        "id": 175799269,
        "sender_full_name": "eddyb",
        "timestamp": 1568628645
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> oh I'm silly there is something damning about losing signedness: these are both encoded as bytes and they both have <code>isize</code> (signed) high-level discriminants: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c140a4df209bececc5471d376fc2e3d0\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c140a4df209bececc5471d376fc2e3d0\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c140a4df209bececc5471d376fc2e3d0</a></p>",
        "id": 175799483,
        "sender_full_name": "eddyb",
        "timestamp": 1568628845
    },
    {
        "content": "<p>I guess; your PR itself says that going all the way to <code>Integer</code> only seemed like a <em>slight</em> simplification, which makes me wary of trying to push this through, in terms of effort expended vs expected value.</p>",
        "id": 175799488,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568628846
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> oh I'm silly there is something damning about losing signedness: these are both encoded as bytes and they both have <code>isize</code> (signed) high-level discriminants: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c140a4df209bececc5471d376fc2e3d0\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c140a4df209bececc5471d376fc2e3d0\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=c140a4df209bececc5471d376fc2e3d0</a></p>\n</blockquote>\n<p>eek</p>",
        "id": 175799502,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568628881
    },
    {
        "content": "<p>okay then seems like that ... answers your Question then?</p>",
        "id": 175799520,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568628906
    },
    {
        "content": "<p>yeah I somehow didn't think to check this one thing that would've made it clear...</p>",
        "id": 175799533,
        "sender_full_name": "eddyb",
        "timestamp": 1568628923
    },
    {
        "content": "<p>that is, I assume the PR you posted mishandles this case? And therefore we should go with option 2 (Integer + signedness)</p>",
        "id": 175799544,
        "sender_full_name": "pnkfelix",
        "timestamp": 1568628938
    },
    {
        "content": "<p>if we want to change the code at all</p>",
        "id": 175799549,
        "sender_full_name": "eddyb",
        "timestamp": 1568628949
    },
    {
        "content": "<p>I'm not sure how much the status quo inconvenienced <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span></p>",
        "id": 175799599,
        "sender_full_name": "eddyb",
        "timestamp": 1568628973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> it seems like you should be able to just remove this line and land the PR <em>sigh</em> &lt;<a href=\"https://github.com/rust-lang/rust/pull/63448/files#diff-47c36b7a2c9437eb6f382b25d46a3c54R688\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63448/files#diff-47c36b7a2c9437eb6f382b25d46a3c54R688\">https://github.com/rust-lang/rust/pull/63448/files#diff-47c36b7a2c9437eb6f382b25d46a3c54R688</a>&gt;</p>",
        "id": 175799839,
        "sender_full_name": "eddyb",
        "timestamp": 1568629289
    },
    {
        "content": "<p>oh there's another copy here &lt;<a href=\"https://github.com/rust-lang/rust/pull/63448/files#diff-9c5f25e0d0302fa34791d33795e30781R1061\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63448/files#diff-9c5f25e0d0302fa34791d33795e30781R1061\">https://github.com/rust-lang/rust/pull/63448/files#diff-9c5f25e0d0302fa34791d33795e30781R1061</a>&gt;</p>",
        "id": 175799844,
        "sender_full_name": "eddyb",
        "timestamp": 1568629311
    },
    {
        "content": "<p>Well I wouldn't remove it but replace it by a comment and probably want to factor that match into a helper method? what would be a good place for that method?</p>",
        "id": 175800289,
        "sender_full_name": "RalfJ",
        "timestamp": 1568629849
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> presumably in here <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L129\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L129\">https://github.com/rust-lang/rust/blob/master/src/librustc/ty/layout.rs#L129</a></p>",
        "id": 175801076,
        "sender_full_name": "eddyb",
        "timestamp": 1568630780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> wait, does the type really matter? can't you just use the size?</p>",
        "id": 175801096,
        "sender_full_name": "eddyb",
        "timestamp": 1568630816
    },
    {
        "content": "<p>I guess it matter for extending it but not for the addition</p>",
        "id": 175801116,
        "sender_full_name": "eddyb",
        "timestamp": 1568630841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> oh and I guess this is wrong <a href=\"https://github.com/rust-lang/rust/pull/63448/files#diff-47c36b7a2c9437eb6f382b25d46a3c54R706\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63448/files#diff-47c36b7a2c9437eb6f382b25d46a3c54R706\">https://github.com/rust-lang/rust/pull/63448/files#diff-47c36b7a2c9437eb6f382b25d46a3c54R706</a></p>",
        "id": 175801193,
        "sender_full_name": "eddyb",
        "timestamp": 1568630935
    },
    {
        "content": "<p><code>variants_start</code> might not fit in the discriminant</p>",
        "id": 175801216,
        "sender_full_name": "eddyb",
        "timestamp": 1568630955
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> wait, does the type really matter? can't you just use the size?</p>\n</blockquote>\n<p>size and signedess</p>",
        "id": 175801669,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631386
    },
    {
        "content": "<blockquote>\n<p><code>variants_start</code> might not fit in the discriminant</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> then this would be the wrong thing, right?<br>\n<a href=\"https://github.com/rust-lang/rust/pull/63448/files#diff-47c36b7a2c9437eb6f382b25d46a3c54R700\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63448/files#diff-47c36b7a2c9437eb6f382b25d46a3c54R700\">https://github.com/rust-lang/rust/pull/63448/files#diff-47c36b7a2c9437eb6f382b25d46a3c54R700</a><br>\nthis (at least in debug builds, not sure about release builds) will panic if it doesn't fit</p>",
        "id": 175801706,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631439
    },
    {
        "content": "<p>what should it do instead?</p>",
        "id": 175801720,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631457
    },
    {
        "content": "<p>the only operation you need to do is the subtraction</p>",
        "id": 175801789,
        "sender_full_name": "eddyb",
        "timestamp": 1568631525
    },
    {
        "content": "<p>the result of that should be an unsigned integer, so you can just zero-extend without knowing the signedness (maybe, I'm not 100% sure)</p>",
        "id": 175801843,
        "sender_full_name": "eddyb",
        "timestamp": 1568631558
    },
    {
        "content": "<blockquote>\n<p>the only operation you need to do is the subtraction</p>\n</blockquote>\n<p>I am doing two operations though?</p>",
        "id": 175801873,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631598
    },
    {
        "content": "<p>sorry, the only operation you need to do in a special way is the subtraction</p>",
        "id": 175801934,
        "sender_full_name": "eddyb",
        "timestamp": 1568631615
    },
    {
        "content": "<p>\"special\"? I am doing both using machine arithmetic right now, that seems most obvious?</p>",
        "id": 175801947,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631637
    },
    {
        "content": "<p>once you've done the subtraction <em>wrapping at the right size</em>, you get a positive (or <code>0</code>) distance from <code>variants_start</code> to the index of a variant</p>",
        "id": 175801951,
        "sender_full_name": "eddyb",
        "timestamp": 1568631641
    },
    {
        "content": "<p>and even for just doing those I need to pick a signedness and it seems preferrable to pick the right one?</p>",
        "id": 175801954,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631646
    },
    {
        "content": "<p>well addition and subtraction don't care about signedness :)</p>",
        "id": 175801969,
        "sender_full_name": "eddyb",
        "timestamp": 1568631666
    },
    {
        "content": "<p>fair</p>",
        "id": 175801974,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631676
    },
    {
        "content": "<p>still, I dont see a reason not to extract the signedness^^</p>",
        "id": 175801982,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631692
    },
    {
        "content": "<p>anyway <code>adjusted_discr</code> is badly named. it's a variant index at that point</p>",
        "id": 175802010,
        "sender_full_name": "eddyb",
        "timestamp": 1568631722
    },
    {
        "content": "<p>so you are saying I should do <code>variant_index_val - variants_start_val</code> using host, not machine, arithmetic?</p>",
        "id": 175802053,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631729
    },
    {
        "content": "<p>are we looking at a different operation?</p>",
        "id": 175802066,
        "sender_full_name": "eddyb",
        "timestamp": 1568631752
    },
    {
        "content": "<p>anyway yeah the operation with <code>variants_start</code> should just be on <code>u128</code> and it can never overflow so you don't need to use <code>wrapping_</code> either</p>",
        "id": 175802090,
        "sender_full_name": "eddyb",
        "timestamp": 1568631792
    },
    {
        "content": "<p><code>if variants_start &lt;= adjusted_discr &amp;&amp; adjusted_discr &lt;= variants_end {</code> seems wrong btw</p>",
        "id": 175802102,
        "sender_full_name": "eddyb",
        "timestamp": 1568631812
    },
    {
        "content": "<p>I forget if we've discussed this</p>",
        "id": 175802110,
        "sender_full_name": "eddyb",
        "timestamp": 1568631827
    },
    {
        "content": "<blockquote>\n<p>anyway <code>adjusted_discr</code> is badly named. it's a variant index at that point</p>\n</blockquote>\n<p>so maybe <code>variant_index_relative</code> or so?</p>",
        "id": 175802112,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631828
    },
    {
        "content": "<blockquote>\n<p>are we looking at a different operation?</p>\n</blockquote>\n<p>I looked ath the link you posted</p>",
        "id": 175802120,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631839
    },
    {
        "content": "<p>which was in the write code</p>",
        "id": 175802159,
        "sender_full_name": "RalfJ",
        "timestamp": 1568631845
    },
    {
        "content": "<p>oh whoops</p>",
        "id": 175802165,
        "sender_full_name": "eddyb",
        "timestamp": 1568631850
    },
    {
        "content": "<p>I am now staring at the read code</p>",
        "id": 175802168,
        "sender_full_name": "eddyb",
        "timestamp": 1568631855
    },
    {
        "content": "<p>(not sure how I got here tbh)</p>",
        "id": 175802174,
        "sender_full_name": "eddyb",
        "timestamp": 1568631860
    },
    {
        "content": "<p>anyway it's not even relative once you add <code>variants_start</code></p>",
        "id": 175802182,
        "sender_full_name": "eddyb",
        "timestamp": 1568631874
    },
    {
        "content": "<p>hmmm okay maybe you do need <code>wrapping_</code> ops for the host stuff since your range check handles the dataful thing</p>",
        "id": 175802209,
        "sender_full_name": "eddyb",
        "timestamp": 1568631917
    },
    {
        "content": "<p>i.e. it may overflow when it's the dataful case</p>",
        "id": 175802222,
        "sender_full_name": "eddyb",
        "timestamp": 1568631943
    },
    {
        "content": "<p>I wish I could remember any of this</p>",
        "id": 175802245,
        "sender_full_name": "eddyb",
        "timestamp": 1568631952
    },
    {
        "content": "<blockquote>\n<p>anyway it's not even relative once you add <code>variants_start</code></p>\n</blockquote>\n<p>yeah, I meant only the first intermediate value</p>",
        "id": 175802338,
        "sender_full_name": "RalfJ",
        "timestamp": 1568632033
    },
    {
        "content": "<blockquote>\n<p><code>if variants_start &lt;= adjusted_discr &amp;&amp; adjusted_discr &lt;= variants_end {</code> seems wrong btw</p>\n</blockquote>\n<p>it does?</p>",
        "id": 175802342,
        "sender_full_name": "RalfJ",
        "timestamp": 1568632038
    },
    {
        "content": "<blockquote>\n<p>hmmm okay maybe you do need <code>wrapping_</code> ops for the host stuff since your range check handles the dataful thing</p>\n</blockquote>\n<p>let me ask the other way around -- we do machine arithmetic at run-time for this, right? so, using machine arithmetic is correct?</p>",
        "id": 175802353,
        "sender_full_name": "RalfJ",
        "timestamp": 1568632069
    },
    {
        "content": "<p>I currently have no interest in optimizing this code ;)</p>",
        "id": 175802403,
        "sender_full_name": "RalfJ",
        "timestamp": 1568632084
    },
    {
        "content": "<blockquote>\n<p>anyway <code>adjusted_discr</code> is badly named. it's a variant index at that point</p>\n</blockquote>\n<p>I renamed: <a href=\"https://github.com/rust-lang/rust/pull/63448/commits/b73f1a51dcd1011129dc5c5c55a7577134410dbc\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/63448/commits/b73f1a51dcd1011129dc5c5c55a7577134410dbc\">https://github.com/rust-lang/rust/pull/63448/commits/b73f1a51dcd1011129dc5c5c55a7577134410dbc</a></p>",
        "id": 175802468,
        "sender_full_name": "RalfJ",
        "timestamp": 1568632199
    },
    {
        "content": "<p>it's not about optimization</p>",
        "id": 175802507,
        "sender_full_name": "eddyb",
        "timestamp": 1568632203
    },
    {
        "content": "<p>the runtime behavior was wrong until recently</p>",
        "id": 175802525,
        "sender_full_name": "eddyb",
        "timestamp": 1568632228
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/mir/place.rs#L294-L301\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/mir/place.rs#L294-L301\">https://github.com/rust-lang/rust/blob/master/src/librustc_codegen_ssa/mir/place.rs#L294-L301</a></p>",
        "id": 175802533,
        "sender_full_name": "eddyb",
        "timestamp": 1568632252
    },
    {
        "content": "<p>only one of the operations can be performed at the niche size, the other has to be performed at something capable of fitting all variant indices</p>",
        "id": 175802559,
        "sender_full_name": "eddyb",
        "timestamp": 1568632296
    },
    {
        "content": "<p>and whether it's a niche or dataful variant is checked not on the final variant index but on the relative one</p>",
        "id": 175802617,
        "sender_full_name": "eddyb",
        "timestamp": 1568632325
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> maybe you can use <a href=\"https://github.com/rust-lang/rust/pull/62584/files#diff-dac0b3d5a19b291538d6f171b7e8eb8b\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/62584/files#diff-dac0b3d5a19b291538d6f171b7e8eb8b\">https://github.com/rust-lang/rust/pull/62584/files#diff-dac0b3d5a19b291538d6f171b7e8eb8b</a>?</p>",
        "id": 175802654,
        "sender_full_name": "eddyb",
        "timestamp": 1568632384
    },
    {
        "content": "<p>as a miri test</p>",
        "id": 175802660,
        "sender_full_name": "eddyb",
        "timestamp": 1568632399
    },
    {
        "content": "<p>I expect miri to get this very wrong atm</p>",
        "id": 175802667,
        "sender_full_name": "eddyb",
        "timestamp": 1568632413
    },
    {
        "content": "<p>we have some tests in <a href=\"https://github.com/rust-lang/miri/pull/903\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/903\">https://github.com/rust-lang/miri/pull/903</a> that you supplied earlier</p>",
        "id": 175802962,
        "sender_full_name": "RalfJ",
        "timestamp": 1568632764
    },
    {
        "content": "<p>I can certainly add that test as well. you are saying that will still fail even with the PR?</p>",
        "id": 175802977,
        "sender_full_name": "RalfJ",
        "timestamp": 1568632801
    },
    {
        "content": "<blockquote>\n<p>only one of the operations can be performed at the niche size, the other has to be performed at something capable of fitting all variant indices</p>\n</blockquote>\n<p>and which one would that be?</p>",
        "id": 175803027,
        "sender_full_name": "RalfJ",
        "timestamp": 1568632816
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> that test case you suggested causes an ICE. good catch, I guess. ;)</p>",
        "id": 175808327,
        "sender_full_name": "RalfJ",
        "timestamp": 1568638117
    },
    {
        "content": "<p>so for writing the discriminant, I assume computing the relative variant index should happen at max precision? and only adding <code>niche_start_val</code> should happen with overflow?</p>",
        "id": 175808379,
        "sender_full_name": "RalfJ",
        "timestamp": 1568638184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I updated the PR, I think that's better now? I am still confused by your \"<code>variants_start &lt;= adjusted_discr &amp;&amp; adjusted_discr &lt;= variants_end</code> seems wrong\" though.</p>",
        "id": 175809799,
        "sender_full_name": "RalfJ",
        "timestamp": 1568639198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> does the test pass now? because at this point my pedantry has outstayed its welcome :P</p>",
        "id": 175905922,
        "sender_full_name": "eddyb",
        "timestamp": 1568727092
    },
    {
        "content": "<p>yes, the tests added in <a href=\"https://github.com/rust-lang/miri/pull/903\" target=\"_blank\" title=\"https://github.com/rust-lang/miri/pull/903\">https://github.com/rust-lang/miri/pull/903</a> all pass</p>",
        "id": 175948292,
        "sender_full_name": "RalfJ",
        "timestamp": 1568753797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I am still not sure though what you meant by <br>\n\"variants_start &lt;= adjusted_discr &amp;&amp; adjusted_discr &lt;= variants_end seems wrong\"</p>",
        "id": 175948317,
        "sender_full_name": "RalfJ",
        "timestamp": 1568753822
    },
    {
        "content": "<p>it can be fine, I just got confused and had assumed something about the operations before</p>",
        "id": 175995001,
        "sender_full_name": "eddyb",
        "timestamp": 1568806346
    },
    {
        "content": "<p>kk</p>",
        "id": 176044871,
        "sender_full_name": "RalfJ",
        "timestamp": 1568839618
    }
]