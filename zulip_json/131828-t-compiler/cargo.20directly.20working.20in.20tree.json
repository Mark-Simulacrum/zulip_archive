[
    {
        "content": "<p>Not for or against, but the main motivation I think was making <code>cargo test</code> work without having to go through bootstrap, not really the compile times themselves</p>",
        "id": 209221585,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599392478
    },
    {
        "content": "<p>FWIW I believe it mostly will work already, on nightly/latest master. I've been meaning to try and finish testing it and write up docs to that effect.</p>",
        "id": 209222400,
        "sender_full_name": "simulacrum",
        "timestamp": 1599393735
    },
    {
        "content": "<blockquote>\n<p>error: aborting due to 162 previous errors</p>\n</blockquote>\n<p>looks like it still needs more work :/ mostly errors about <code>Sized</code> not being implemented</p>",
        "id": 209222466,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599393861
    },
    {
        "content": "<p>and duplicate lang items:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">duplicate</span><span class=\"w\"> </span><span class=\"n\">lang</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">core</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">rustc_std_workspace_core</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">depends</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"p\">)</span>: <span class=\"err\">`</span><span class=\"n\">future_trait</span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"n\">lang</span><span class=\"w\"> </span><span class=\"n\">item</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">crate</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">core</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">getrandom</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">depends</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">first</span><span class=\"w\"> </span><span class=\"n\">definition</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">core</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">loaded</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">joshua</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">rustup</span><span class=\"o\">/</span><span class=\"n\">toolchains</span><span class=\"o\">/</span><span class=\"n\">nightly</span><span class=\"o\">-</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">rustlib</span><span class=\"o\">/</span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">libcore</span><span class=\"o\">-</span><span class=\"mi\">2675</span><span class=\"n\">a9a46b5cec89</span><span class=\"p\">.</span><span class=\"n\">rlib</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">second</span><span class=\"w\"> </span><span class=\"n\">definition</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">core</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">loaded</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">joshua</span><span class=\"o\">/</span><span class=\"p\">.</span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"o\">/</span><span class=\"n\">cargo</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">libcore</span><span class=\"o\">-</span><span class=\"mi\">65</span><span class=\"n\">cdd401adb8e98d</span><span class=\"p\">.</span><span class=\"n\">rmeta</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 209222477,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599393898
    },
    {
        "content": "<p>You can't just run it - there's some flags and such that need to be set. IIRC I did get it working relatively well though.</p>",
        "id": 209222490,
        "sender_full_name": "simulacrum",
        "timestamp": 1599393942
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209221585\">said</a>:</p>\n<blockquote>\n<p>Not for or against, but the main motivation I think was making <code>cargo test</code> work without having to go through bootstrap, not really the compile times themselves</p>\n</blockquote>\n<p><code>cargo test</code> for library/ or compiler/ ? if it is for library/, I don't see how making the compiler use a beta libstd is related.</p>",
        "id": 209230531,
        "sender_full_name": "RalfJ",
        "timestamp": 1599407369
    },
    {
        "content": "<p>for library/ it shouldn't be too hard indeed, I even got that to work in Miri: <a href=\"https://github.com/RalfJung/miri-test-libstd\">https://github.com/RalfJung/miri-test-libstd</a></p>",
        "id": 209230535,
        "sender_full_name": "RalfJ",
        "timestamp": 1599407389
    },
    {
        "content": "<p>for library, but cc <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span></p>",
        "id": 209230588,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599407429
    },
    {
        "content": "<p>If we can make <em>either</em> lib <strong>or</strong> rustc check and test without the entire bootstrap process, that would simplify things greatly for a vast number of PRs. It might be <em>only</em> an incremental, partial, incomplete gain compared to \"somehow we figure it out so everything is just <code>cargo build</code>\", but it would be a huge gain.</p>",
        "id": 209246157,
        "sender_full_name": "Jubilee",
        "timestamp": 1599434443
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"281757\">Jubilee</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209246157\">said</a>:</p>\n<blockquote>\n<p>If we can make <em>either</em> lib <strong>or</strong> rustc check and test without the entire bootstrap process, that would simplify things greatly for a vast number of PRs. It might be <em>only</em> an incremental, partial, incomplete gain compared to \"somehow we figure it out so everything is just <code>cargo build</code>\", but it would be a huge gain.</p>\n</blockquote>\n<p>we can already do that for the lib though? <code>./x.py test --stage 0 library/std</code> works fine and the build takes 60s (then the tests start). I use this when working on the standard library.</p>",
        "id": 209295648,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485372
    },
    {
        "content": "<p>oh but you are saying making it work outside <code>x.py</code> would help? I see. Not that I understand how that's such a big deal but I'll just believe that.^^</p>",
        "id": 209295773,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485440
    },
    {
        "content": "<p>indeed that shouldn't be too hard for the lib; <a href=\"https://github.com/RalfJung/miri-test-libstd\">https://github.com/RalfJung/miri-test-libstd</a> basically already does it</p>",
        "id": 209295790,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209295773\">said</a>:</p>\n<blockquote>\n<p>./x.py test --stage 0 library/std works fine<br>\noh but you are saying making it work outside <code>x.py</code> would help? I see. Not that I understand how that's such a big deal but I'll just believe that.^^</p>\n</blockquote>\n<p>This requires first knowing you should use <code>x.py test --stage 0 library/std</code> <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 209295907,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599485530
    },
    {
        "content": "<p>everyone already knows to use <code>cargo test</code> from other projects, this would help rustc be less special</p>",
        "id": 209295933,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599485547
    },
    {
        "content": "<p>yeah, docs can certainly be improved a lot</p>",
        "id": 209295936,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485548
    },
    {
        "content": "<p>I mean, I agree it'd be better if it \"just worked\", I just think that (assuming better docs than what we have right now) having to use <code>x.py</code> isn't bad, really.</p>",
        "id": 209296003,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485597
    },
    {
        "content": "<p>Rust basically has drilled programmers into certain almost reflexive understandings. Exploiting those drilled patterns is a desirable feature, thus <a href=\"#narrow/stream/131828-t-compiler/topic/RIIR.20contributor.20entry.20point\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/RIIR.20contributor.20entry.20point</a></p>",
        "id": 209296050,
        "sender_full_name": "Jubilee",
        "timestamp": 1599485633
    },
    {
        "content": "<p>well it is documented already (although maybe we could make it its own page): <a href=\"https://rustc-dev-guide.rust-lang.org/getting-started.html#building-and-testing-stdcorealloctestproc_macroetc\">https://rustc-dev-guide.rust-lang.org/getting-started.html#building-and-testing-stdcorealloctestproc_macroetc</a>. but I think having it be as simple as possible would be helpful</p>",
        "id": 209296052,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599485635
    },
    {
        "content": "<p>the gap between \"something to learn, to verify what it's like\" and \"you literally already know it and you've done it a thousand times\" is enormous.</p>",
        "id": 209296130,
        "sender_full_name": "Jubilee",
        "timestamp": 1599485676
    },
    {
        "content": "<p>I feel if we could make it so that the docs is \"just replace <code>cargo</code> by <code>x.py</code>\", that would be almost as good</p>",
        "id": 209296147,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485694
    },
    {
        "content": "<p>I appreciate we aren't there yet, but that seems much easier to achieve than literally using <code>cargo</code></p>",
        "id": 209296167,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485716
    },
    {
        "content": "<p>(it's what I am trying to achieve for Miri, which also needs its own build script for various reasons)</p>",
        "id": 209296196,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485732
    },
    {
        "content": "<p>for the rustc build, I am skeptical about using <code>cargo</code> directly, so maybe this is a second-best-thing that would be worked towards?</p>",
        "id": 209296281,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209296147\">said</a>:</p>\n<blockquote>\n<p>I feel if we could make it so that the docs is \"just replace <code>cargo</code> by <code>x.py</code>\", that would be almost as good</p>\n</blockquote>\n<p><code>x.py test</code> means the whole compiler though :/</p>",
        "id": 209296285,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599485777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209296285\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209296147\">said</a>:</p>\n<blockquote>\n<p>I feel if we could make it so that the docs is \"just replace <code>cargo</code> by <code>x.py</code>\", that would be almost as good</p>\n</blockquote>\n<p><code>x.py test</code> means the whole compiler though :/</p>\n</blockquote>\n<p>yeah I didn't say we are there yet</p>",
        "id": 209296301,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485790
    },
    {
        "content": "<p>right, but I'm saying even in theory I don't think we should change it</p>",
        "id": 209296315,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599485804
    },
    {
        "content": "<p>all I am saying is: IMO, it's not the existence of a wrapper script that is the problem. it's the fact that the wrapper script is so complicated to use.</p>",
        "id": 209296322,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485815
    },
    {
        "content": "<p>yeah, that's fair</p>",
        "id": 209296343,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599485824
    },
    {
        "content": "<p>in <code>x.py</code>'s fairness, it is doing a ton of things -- and specifically the \"did you mean to build/test the compiler or the lib\" distinction is a tricky one</p>",
        "id": 209296405,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485864
    },
    {
        "content": "<p>seems like anything we do there would be a divergence from cargo? except maybe using the PWD</p>",
        "id": 209296497,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485899
    },
    {
        "content": "<p>but <code>x.py</code> has to be called from the rustc root and when I tried to change this a few years back people didn't like it^^</p>",
        "id": 209296529,
        "sender_full_name": "RalfJ",
        "timestamp": 1599485920
    },
    {
        "content": "<p>Would it be possible to make <code>cargo test</code> fail in a way that points at the <code>x.py</code> docs as long as cargo doesn't work here? While I know about <code>x.py</code> I did momentarily forget about it and issued cargo commands and it took me way too long to notice why I suddenly get lots of strange errors</p>",
        "id": 209296562,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599485940
    },
    {
        "content": "<p>(not sure if it was <code>cargo test</code> or some other cargo command)</p>",
        "id": 209296619,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599485977
    },
    {
        "content": "<p>we could have a <code>build.rs</code> with <code>compile_error!(\"use x.py instead\")</code></p>",
        "id": 209297153,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599486295
    },
    {
        "content": "<p>that seems easy enough</p>",
        "id": 209297159,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599486298
    },
    {
        "content": "<p>let me work on that</p>",
        "id": 209297216,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599486334
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/76444\">https://github.com/rust-lang/rust/issues/76444</a></p>",
        "id": 209298055,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599486808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137027\">@Jannis Harder</span> what do you think of <a href=\"https://github.com/rust-lang/rust/pull/76446\">https://github.com/rust-lang/rust/pull/76446</a> ?</p>",
        "id": 209300482,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599488204
    },
    {
        "content": "<p>oh and a second question - were you running that command in <code>library/std</code> or in the top-level directory?</p>",
        "id": 209300642,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599488304
    },
    {
        "content": "<p>right now I assume you're in library/std and recommend <code>build --stage 0 library/std</code></p>",
        "id": 209300675,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599488328
    },
    {
        "content": "<p>That certainly would have made me realize what I did wrong right away :) I'm not quite sure where I ran it... what I wanted to do was a stage 2 rustc build for a local perf-run... but it was late at night and I was tired so it could have been any cargo command in any directory ^^</p>",
        "id": 209300887,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599488454
    },
    {
        "content": "<p>(not sure if it was when I wanted to do the stage 2 run or just a check for the changes I made)</p>",
        "id": 209300931,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599488488
    },
    {
        "content": "<p>gotcha, well I think pointing to x.py at least will be helpful and I'll leave it up to the contributor to figure out which stage they meant :P</p>",
        "id": 209301049,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599488533
    },
    {
        "content": "<p>but if something like that would have appeared at the top or bottom of all the error output I wouldn't have wondered if I completely broke my local clone in some strange way</p>",
        "id": 209301065,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599488543
    },
    {
        "content": "<p>yeah, this is <em>instead</em> of all the error output so even easier to find :)</p>",
        "id": 209301122,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599488579
    },
    {
        "content": "<p>yeah, that's even better :)</p>",
        "id": 209301150,
        "sender_full_name": "Jannis Harder",
        "timestamp": 1599488595
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>  Would it be too crazy having <code>x.py testlib</code> being equivalent to <code>x.py test --stage 0 library/std</code>?</p>",
        "id": 209303837,
        "sender_full_name": "pachi",
        "timestamp": 1599490344
    },
    {
        "content": "<p>or <code>x.py teststd</code></p>",
        "id": 209303861,
        "sender_full_name": "pachi",
        "timestamp": 1599490364
    },
    {
        "content": "<p>I would prefer to do everything we can to avoid new, novel subcommands</p>",
        "id": 209303868,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490367
    },
    {
        "content": "<p>I've been thinking about proposing that Cargo's support for cargo test and cargo build also gains the \"path to crate\" support</p>",
        "id": 209303911,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490406
    },
    {
        "content": "<p>like a <code>make -C</code> sort of thing? That sounds useful</p>",
        "id": 209303933,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599490422
    },
    {
        "content": "<p>/me has never used make in anything large enough to not make all</p>",
        "id": 209303958,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490438
    },
    {
        "content": "<p>it means 'change directories before running anything'</p>",
        "id": 209304028,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599490462
    },
    {
        "content": "<p>so a hypothetical <code>cargo -C library/std build</code> would mean <code>(cd library/std &amp;&amp; cargo build)</code></p>",
        "id": 209304085,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599490493
    },
    {
        "content": "<p>ah, so like git -C. Okay. Yeah, similar, though I don't know that cargo does what we want with just a  \"cd\"</p>",
        "id": 209304242,
        "sender_full_name": "simulacrum",
        "timestamp": 1599490576
    },
    {
        "content": "<p>It would certainly be nice if we could make that work.</p>",
        "id": 209305416,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599491237
    },
    {
        "content": "<p>Anyone who has worked in a workspace would find it relatively reasonable that running cargo test from a subdir would build and test that crate.</p>",
        "id": 209305509,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599491291
    },
    {
        "content": "<p>Would be even nicer if <code>cargo test -p std</code> or similar worked.</p>",
        "id": 209305617,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599491365
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> well, test -p std is more likely to work, but IMO is less discoverable than a file path</p>",
        "id": 209305842,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491498
    },
    {
        "content": "<p>In particular, if we could have something like <code>cargo run library/tests/some_particular_test.rs</code> and that intelligently did <code>cargo test</code> with the right specifier for that file, I think that'd be great</p>",
        "id": 209305969,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491551
    },
    {
        "content": "<p>I'm not sure it's less discoverable. If rust-lang/rust actually acted like one big workspace, it seems pretty intuitive.</p>",
        "id": 209306233,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599491710
    },
    {
        "content": "<p>I think x.py has just set people's expectations that rust's own repo is weird.</p>",
        "id": 209306344,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599491776
    },
    {
        "content": "<p>That is very much true :)</p>",
        "id": 209306385,
        "sender_full_name": "simulacrum",
        "timestamp": 1599491810
    },
    {
        "content": "<p>I would love to just let people run cargo as normal, in the common case.</p>",
        "id": 209306670,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599492022
    },
    {
        "content": "<p>I meant implementing this upstream in Cargo btw</p>",
        "id": 209306887,
        "sender_full_name": "simulacrum",
        "timestamp": 1599492185
    },
    {
        "content": "<p><em>nod</em></p>",
        "id": 209308872,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599493716
    },
    {
        "content": "<p>I'm trying to figure out how that might work with what cargo already does, and what minimal additions would make it work here.</p>",
        "id": 209308899,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1599493748
    },
    {
        "content": "<p>could we split out 'bootstrap should use cargo directly' into a new thread?</p>",
        "id": 209310067,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599494614
    },
    {
        "content": "<p>I think it started around <a href=\"#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209220793\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/improving.20bootstrap.20times.20for.20contributor.20fun.20and.20profit/near/209220793</a></p>",
        "id": 209310153,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599494670
    },
    {
        "content": "<p>done, hopefully</p>",
        "id": 209311752,
        "sender_full_name": "simulacrum",
        "timestamp": 1599495989
    },
    {
        "content": "<p><code>cargo run path/to/test/file.rs</code> is such a good and obvious idea i'm shocked in retrospect that it's not already how things work.</p>",
        "id": 209316265,
        "sender_full_name": "Lokathor",
        "timestamp": 1599499939
    }
]