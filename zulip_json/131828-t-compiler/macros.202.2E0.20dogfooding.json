[
    {
        "content": "<p>grep shows about 300 uses of <code>macro_rules!</code> in the compiler. Would people be receptive if I started to move those over to <code>macro</code>?</p>",
        "id": 240095997,
        "sender_full_name": "bstrie",
        "timestamp": 1621882856
    },
    {
        "content": "<p>I think macros 2.0 isn't near enough to stabilization even for internal use, but I could be wrong -- that is, my reading is that the current <code>macro</code> might get completely replaced.</p>",
        "id": 240096874,
        "sender_full_name": "simulacrum",
        "timestamp": 1621883198
    },
    {
        "content": "<p>I don't think it's worth the migration(s) to change anything now</p>",
        "id": 240096903,
        "sender_full_name": "simulacrum",
        "timestamp": 1621883211
    },
    {
        "content": "<p>It's harder to grep for but <code>macro</code> also gets used extensively; in particular the stdlib has begun stabilizing APIs that use it (<a href=\"https://doc.rust-lang.org/src/core/ptr/mod.rs.html#1538-1540\"><code>std::ptr::addr_of</code></a>, <a href=\"https://doc.rust-lang.org/src/core/task/ready.rs.html#54-61\"><code>std::task::ready</code></a>), and all the derive macros like <code>Clone</code> are using it (although they're builtins, so maybe that's cheating)</p>",
        "id": 240097875,
        "sender_full_name": "bstrie",
        "timestamp": 1621883658
    },
    {
        "content": "<p>sure, std lib has relatively fewer macros -- and making grepping harder IMO is a key reason to avoid it :)</p>",
        "id": 240097960,
        "sender_full_name": "simulacrum",
        "timestamp": 1621883714
    },
    {
        "content": "<p>Macros can be hard to find the definition of as-is, grepping being harder doesn't help</p>",
        "id": 240098009,
        "sender_full_name": "simulacrum",
        "timestamp": 1621883733
    },
    {
        "content": "<p>well it's harder to grep for all uses of \"macro\", but that's not something that anybody really needs to do regularly. in terms of finding the definition of any individual item it's just as easy to <code>grep \"macro foo\"</code> as it is to <code>grep \"macro_rules\\! foo\"</code></p>",
        "id": 240098203,
        "sender_full_name": "bstrie",
        "timestamp": 1621883813
    },
    {
        "content": "<p>and since <code>macro</code> actually supports namespaces, it makes it easier to organize them properly :P</p>",
        "id": 240098274,
        "sender_full_name": "bstrie",
        "timestamp": 1621883844
    },
    {
        "content": "<p>and due to supporting namespacing it seems likely that std will be using them for all macros going forward, which is why I wanted to dogfood them some more</p>",
        "id": 240098447,
        "sender_full_name": "bstrie",
        "timestamp": 1621883927
    },
    {
        "content": "<p>Macros 2.0 don't yet have a hygiene opt-out, so you have to pass item names to them, which makes them less convenient than <code>macro_rules</code> in maybe ~50% (?) of cases.</p>",
        "id": 240099142,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1621884245
    },
    {
        "content": "<p>They also mark all private items they can assess as reachable from outside of the crate (if the macro is public), which also may require isolating them to a separate module, which again makes them less convenient in some cases.</p>",
        "id": 240099419,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1621884374
    },
    {
        "content": "<p>So, you can certainly try to replace <code>macro_rules</code> with <code>macro</code>s, but you should be ready for some rough edges.</p>",
        "id": 240099567,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1621884444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/macros.202.2E0.20dogfooding/near/240099142\">said</a>:</p>\n<blockquote>\n<p>Macros 2.0 don't yet have a hygiene opt-out, so you have to pass item names to them, which makes them less convenient than <code>macro_rules</code> in maybe ~50% (?) of cases.</p>\n</blockquote>\n<p>hm, isn't that what the <code>#[rustc_macro_transparency]</code> attribute is used for?</p>",
        "id": 240099690,
        "sender_full_name": "bstrie",
        "timestamp": 1621884487
    },
    {
        "content": "<p>That said, the use of <code>macro</code>s in the standard library resulted in eliminating a number of bugs of their implementation.</p>",
        "id": 240099705,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1621884495
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/131828-t-compiler/topic/macros.202.2E0.20dogfooding/near/240099690\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/macros.202.2E0.20dogfooding/near/240099142\">said</a>:</p>\n<blockquote>\n<p>Macros 2.0 don't yet have a hygiene opt-out, so you have to pass item names to them, which makes them less convenient than <code>macro_rules</code> in maybe ~50% (?) of cases.</p>\n</blockquote>\n<p>hm, isn't that what the <code>#[rustc_macro_transparency]</code> attribute is used for?</p>\n</blockquote>\n<p>Well yes, except that it was supposed to be a testing tool rather than something to be used \"in production\".</p>",
        "id": 240100085,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1621884662
    },
    {
        "content": "<blockquote>\n<p>They also mark all private items they can assess as reachable from outside of the crate (if the macro is public), which also may require isolating them to a separate module, which again makes them less convenient in some cases.</p>\n</blockquote>\n<p>Last time I tried, I had to export items to make them accessible from an exported macros 2.0 macro.</p>",
        "id": 240102856,
        "sender_full_name": "bjorn3",
        "timestamp": 1621885952
    },
    {
        "content": "<p>I am using only macros 2.0 in cg_clif. I really like the single match arm shorthand and the namespacing.</p>",
        "id": 240103141,
        "sender_full_name": "bjorn3",
        "timestamp": 1621886091
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/macros.202.2E0.20dogfooding/near/240099567\">said</a>:</p>\n<blockquote>\n<p>So, you can certainly try to replace <code>macro_rules</code> with <code>macro</code>s, but you should be ready for some rough edges.</p>\n</blockquote>\n<p>I'm happy to do the work of trying, as long as the patches are welcome :)</p>",
        "id": 240121644,
        "sender_full_name": "bstrie",
        "timestamp": 1621895741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/macros.202.2E0.20dogfooding/near/240102856\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>They also mark all private items they can assess as reachable from outside of the crate (if the macro is public), which also may require isolating them to a separate module, which again makes them less convenient in some cases.</p>\n</blockquote>\n<p>Last time I tried, I had to export items to make them accessible from an exported macros 2.0 macro.</p>\n</blockquote>\n<p>I can't tell if this is refuting or supporting the prior comment... though possibly because I don't know what the intended behavior is supposed to be. :) Do you mean that something like <code>struct Foo; pub macro bar() { Foo }</code> (escaping private item) required <code>pub struct Foo</code>, and that's a good thing? Or do you mean that something like <code>struct Foo; pub macro bar() { drop(Foo); }</code> (non-escaping private item) required <code>pub struct Foo</code>, and that's a bad thing? I don't see any issue on the tracker talking about problems with private items in macros.</p>",
        "id": 240257697,
        "sender_full_name": "bstrie",
        "timestamp": 1621981284
    },
    {
        "content": "<p>I am refuting the prior comment. The prior comment said that it would work. I said it didn't when I last tried. I am not saying whether it is a good or bad thing.</p>",
        "id": 240281263,
        "sender_full_name": "bjorn3",
        "timestamp": 1622007023
    },
    {
        "content": "<p>It's supposed to work if you are not using something affected by <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2145-type-privacy.md\">*type* privacy</a> (e.g. accessing private modules, imports, type aliases - ok, private types - not ok).</p>",
        "id": 240309792,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622028677
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 240315188,
        "sender_full_name": "bjorn3",
        "timestamp": 1622031780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/macros.202.2E0.20dogfooding/near/240309792\">said</a>:</p>\n<blockquote>\n<p>It's supposed to work if you are not using something affected by <a href=\"https://github.com/rust-lang/rfcs/blob/master/text/2145-type-privacy.md\">*type* privacy</a> (e.g. accessing private modules, imports, type aliases - ok, private types - not ok).</p>\n</blockquote>\n<p>Yes, I think I've already noticed this. rustc_arena defines three macros, one of which is used outside the crate and the other two are helpers that only get used inside the first macro. If I'm reading this correctly then I would expect that the two helper macros would not have to be public, but currently they must be public. Am I correct in my interpretation? (That said, all three macros are already marked as <code>#[macro_export]</code>under macros 1.0, so it's not making it any worse.)</p>",
        "id": 240350642,
        "sender_full_name": "bstrie",
        "timestamp": 1622045848
    },
    {
        "content": "<blockquote>\n<p>If I'm reading this correctly then I would expect that the two helper macros would not have to be public, but currently they must be public.</p>\n</blockquote>\n<p>I've just checked, they are not required to be public.<br>\nThey only require <code>#[allow(unused_macros)]</code> because there's no way to know that tokens generated by the public macro refer to them.</p>",
        "id": 240380854,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622058574
    },
    {
        "content": "<p>The alternative is to consider all private items potentially accessible to public macros to be used in <code>unused</code> lints.</p>",
        "id": 240381288,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622058752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123856\">Vadim Petrochenkov</span> <a href=\"#narrow/stream/131828-t-compiler/topic/macros.202.2E0.20dogfooding/near/240380854\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>If I'm reading this correctly then I would expect that the two helper macros would not have to be public, but currently they must be public.</p>\n</blockquote>\n<p>I've just checked, they are not required to be public.<br>\nThey only require <code>#[allow(unused_macros)]</code> because there's no way to know that tokens generated by the public macro refer to them.</p>\n</blockquote>\n<p>I tried that earlier and got this:</p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0603]: macro `arena_for_type` is private\n   --&gt; /Users/bapple/Code/rust/compiler/rustc_arena/src/lib.rs:645:26\n    |\n645 |         $($name: $crate::arena_for_type!($a[$ty]),)*\n    |                          ^^^^^^^^^^^^^^ private macro\n    |\nnote: the macro `arena_for_type` is defined here\n   --&gt; /Users/bapple/Code/rust/compiler/rustc_arena/src/lib.rs:614:1\n    |\n614 | macro arena_for_type {\n    | ^^^^^^^^^^^^^^^^^^^^\n</code></pre></div>",
        "id": 240381916,
        "sender_full_name": "bstrie",
        "timestamp": 1622058984
    },
    {
        "content": "<p>I really don't like this aspect of macros 2.0, maybe it would be better to require them to declare a list of the items they want to have made available to the expanded code?</p>",
        "id": 240381970,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622059006
    },
    {
        "content": "<p>well the unused_macros lint thing isn't exclusive to macros 2.0, you get the same errors with macros 1.0</p>",
        "id": 240382521,
        "sender_full_name": "bstrie",
        "timestamp": 1622059229
    },
    {
        "content": "<p>like, with <code>local_inner_macros</code> or how?</p>",
        "id": 240382733,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1622059318
    },
    {
        "content": "<blockquote>\n<p>I tried that earlier and got this:</p>\n</blockquote>\n<p>Ah, I see, this is due to <code>#[rustc_macro_transparency = \"semitransparent\"]</code>.<br>\nSemitransparent macros do not use the macro 2.0 hygiene which is responsible for ability to access private items as well.</p>",
        "id": 240383061,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622059429
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/131828-t-compiler/topic/macros.202.2E0.20dogfooding/near/240382521\">said</a>:</p>\n<blockquote>\n<p>well the unused_macros lint thing isn't exclusive to macros 2.0, you get the same errors with macros 1.0</p>\n</blockquote>\n<p>You cannot reference anything private from a macro 1.0, and if it's not private then it will be considered \"used\".</p>",
        "id": 240383262,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622059506
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"211727\">Jonas Schievink  [he/him]</span> <a href=\"#narrow/stream/131828-t-compiler/topic/macros.202.2E0.20dogfooding/near/240381970\">said</a>:</p>\n<blockquote>\n<p>I really don't like this aspect of macros 2.0, maybe it would be better to require them to declare a list of the items they want to have made available to the expanded code?</p>\n</blockquote>\n<p>Maybe.</p>",
        "id": 240383366,
        "sender_full_name": "Vadim Petrochenkov",
        "timestamp": 1622059546
    }
]