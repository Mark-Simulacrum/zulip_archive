[
    {
        "content": "<p>I was about to file a stable-to-stable (1.34-to-1.35) regression bug (&lt;<a href=\"https://rust.godbolt.org/z/f9n6h8\">https://rust.godbolt.org/z/f9n6h8</a>&gt;), but realized that my code had actually been wrong the whole time.</p>\n<p>Should I still file something?  It kinda feels like it's not worth mentioning if it's 15-months old, but the release notes didn't mention any soundness fixes so it's unclear to me whether it was a known change...</p>",
        "id": 208418097,
        "sender_full_name": "scottmcm",
        "timestamp": 1598678214
    },
    {
        "content": "<p>The purpose would be to retroactively document it in the release notes?</p>",
        "id": 208420713,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1598683792
    },
    {
        "content": "<p>I'm not sure.  I guess if it's just a borrowck fix then it's not worth doing anything.  But if it's an accidental change to temporarily lifetimes I'd be more scared about it.  (Either one could explain the difference, since I'm unsure exactly how long the temporary pointee of <code>&amp;mut foo()</code> is supposed to live.)</p>",
        "id": 208426866,
        "sender_full_name": "scottmcm",
        "timestamp": 1598695779
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> I think documenting it in release notes would be good.</p>\n<p>Isn't 1.35 the MIR borrow check release though? Or is that 1.36? I feel like it was around there</p>",
        "id": 208430127,
        "sender_full_name": "simulacrum",
        "timestamp": 1598702052
    },
    {
        "content": "<p>Ah, it is indeed 1.36</p>",
        "id": 208430149,
        "sender_full_name": "simulacrum",
        "timestamp": 1598702134
    },
    {
        "content": "<p>TBH I do not understand why this code is rejected? these are raw pointers it is talking about, no?</p>",
        "id": 208448433,
        "sender_full_name": "RalfJ",
        "timestamp": 1598727248
    },
    {
        "content": "<p>oh wait, there's a <code>*</code>missing</p>",
        "id": 208448470,
        "sender_full_name": "RalfJ",
        "timestamp": 1598727304
    },
    {
        "content": "<p>(too much type inference^^)</p>",
        "id": 208448477,
        "sender_full_name": "RalfJ",
        "timestamp": 1598727308
    },
    {
        "content": "<p>but then this just borrows the returned temporary so this doesnt seem like a soundness fix to me?</p>",
        "id": 208448498,
        "sender_full_name": "RalfJ",
        "timestamp": 1598727346
    },
    {
        "content": "<p>I just filed <a href=\"https://github.com/rust-lang/rust/issues/76147\">https://github.com/rust-lang/rust/issues/76147</a> , whatever we should be doing about it.</p>",
        "id": 208530478,
        "sender_full_name": "scottmcm",
        "timestamp": 1598861526
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> The <a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.get_unchecked_mut\">returned</a> temporary is a <code>&amp;mut</code> lifetime-tied to <code>self.0</code>, though, right?  So I shouldn't be able to use <code>get_unchecked_mut</code> again?  (AFAICT it'd be allowed if I was <code>offset</code> the same pointer, but it's not ok here because the method deals in <code>&amp;mut</code>?)</p>",
        "id": 208530670,
        "sender_full_name": "scottmcm",
        "timestamp": 1598861699
    },
    {
        "content": "<p>why would it be tied to <code>self.0</code> in any way?</p>",
        "id": 208530765,
        "sender_full_name": "RalfJ",
        "timestamp": 1598861804
    },
    {
        "content": "<p>oh wait it doesnt return a raw pointer, but a reference. with a lifetime.</p>",
        "id": 208530780,
        "sender_full_name": "RalfJ",
        "timestamp": 1598861825
    },
    {
        "content": "<p>somehow I thought it would return a raw pointer</p>",
        "id": 208530785,
        "sender_full_name": "RalfJ",
        "timestamp": 1598861828
    },
    {
        "content": "<p>hm, going over the git log, nothing sticks out as a soundness fix related to associated types</p>",
        "id": 208530984,
        "sender_full_name": "RalfJ",
        "timestamp": 1598862018
    },
    {
        "content": "<p>it looks like a change to how coercions to rawpointers work...</p>",
        "id": 208531591,
        "sender_full_name": "lcnr",
        "timestamp": 1598862534
    },
    {
        "content": "<p>i would expect this to be a soundness fix</p>",
        "id": 208531603,
        "sender_full_name": "lcnr",
        "timestamp": 1598862544
    },
    {
        "content": "<p>can someone from <span class=\"user-group-mention\" data-user-group-id=\"491\">@WG-nll</span> take a look at <a href=\"https://github.com/rust-lang/rust/issues/76147\">#76147</a>?</p>",
        "id": 208532331,
        "sender_full_name": "lcnr",
        "timestamp": 1598863086
    },
    {
        "content": "<p>I was about to mention <a href=\"https://github.com/rust-lang/rust/issues/58673\">#58673</a> but Matthew already beat me to it (and <a href=\"https://github.com/rust-lang/rust/issues/60927\">#60927</a> mentions whether this needed documenting in the release blog post or relnotes, and a decision not to do so)</p>",
        "id": 208538481,
        "sender_full_name": "lqd",
        "timestamp": 1598867804
    }
]