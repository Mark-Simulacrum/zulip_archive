[
    {
        "content": "<p>is there a way to try compiling rustc with a more recent llvm than is in the forked repo? do i have to just manually replace the submodule?</p>",
        "id": 223024762,
        "sender_full_name": "devsnek",
        "timestamp": 1610859699
    },
    {
        "content": "<p>If you already have LLVM compiled you can specify the <code>llvm-config</code> option in <code>config.toml</code>. I believe it has to be an absolute path.</p>",
        "id": 223040658,
        "sender_full_name": "bjorn3",
        "timestamp": 1610886884
    },
    {
        "content": "<p>An absolute path, and without symbolic links I think</p>",
        "id": 223043654,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610891506
    },
    {
        "content": "<p>It may require some patching for changed LLVM APIs though. I don't think we've done any of that for LLVM 12 (main) yet.</p>",
        "id": 223050492,
        "sender_full_name": "cuviper",
        "timestamp": 1610900405
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> how does one tell which commits are rust patches? I found a few but I did it by recompiling llvm and seeing what breaks and then searching for the commit that touches that</p>",
        "id": 223053794,
        "sender_full_name": "devsnek",
        "timestamp": 1610904578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219805\">@devsnek</span> oh, I didn't mean Rust patches to LLVM. Vanilla LLVM is fine if you build it separately from rustc, but using newer than LLVM 11 may have changed some of its C++ APIs, so you'll need to adjust the calls from Rust.</p>",
        "id": 223054162,
        "sender_full_name": "cuviper",
        "timestamp": 1610905120
    },
    {
        "content": "<p>We usually start merging such changes once they branch for a new release, which will be pretty soon for LLVM 12, but I haven't looked at it yet.</p>",
        "id": 223054190,
        "sender_full_name": "cuviper",
        "timestamp": 1610905191
    },
    {
        "content": "<p>alright i'll try a separate build... still curious about how to find the patches though. a few i've found seem like they <em>should</em> be possible in upstream (in some form or another) and i'd like to look into seeing how many can be removed.</p>",
        "id": 223054426,
        "sender_full_name": "devsnek",
        "timestamp": 1610905534
    },
    {
        "content": "<p>You can use something like <code>git log releases/11.x..</code> from the current rust branch. From there, patches that have LLVM review urls are backported fixes, and otherwise it would be rust specific.</p>",
        "id": 223055573,
        "sender_full_name": "cuviper",
        "timestamp": 1610907132
    },
    {
        "content": "<p>i can probably grep with that, thanks. maybe next time they're applied they can have <code>[RUST-PATCH]</code> or smth amended into the subject?</p>",
        "id": 223056062,
        "sender_full_name": "devsnek",
        "timestamp": 1610907862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> is there a particular reason this (or something like it) wasn't upstreamed: <a href=\"https://github.com/rust-lang/llvm-project/commit/c5cf5b45023dcbb246d9fb996d15ec822b9708d7\">https://github.com/rust-lang/llvm-project/commit/c5cf5b45023dcbb246d9fb996d15ec822b9708d7</a> ? it seems like a generally useful feature. if not i'll try to upstream the functionality somehow</p>",
        "id": 223056630,
        "sender_full_name": "devsnek",
        "timestamp": 1610908818
    },
    {
        "content": "<p>We've had that a long while. I'm not sure they'd want those arrays directly exposed, but it would be nice to have that working with external LLVM too.</p>",
        "id": 223056737,
        "sender_full_name": "cuviper",
        "timestamp": 1610908998
    }
]