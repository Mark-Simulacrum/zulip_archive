[
    {
        "content": "<p>Does Cranelife make code run faster than LLVM -O0? If yes, it is incredible.<br>\nBuild faster and run faster.<br>\ncc <span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span></p>",
        "id": 204297576,
        "sender_full_name": "lzutao",
        "timestamp": 1595072962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"209117\">@lzutao</span> Unfortumately not quite yet. If you enable mir inlining and the only optimization that cg_clif has, then yes it can be a bit faster, but otherwise it is about 10-20% slower on one benchmark.</p>",
        "id": 204298300,
        "sender_full_name": "bjorn3",
        "timestamp": 1595074417
    },
    {
        "content": "<p>I haven't benchmarked how much those optimizations slow down compilation, but expect a non-neglectable slowdown. Especially from the cg_clif optimization. I don't know a lot about compiler optimizations.</p>",
        "id": 204298358,
        "sender_full_name": "bjorn3",
        "timestamp": 1595074556
    },
    {
        "content": "<p>is peepmatic the \"only\" / most prominent work for cranelift optimisations ? (and btw do we have results about the approach already ?) (the move into wasmtime has made keeping up to date with cranelift as a whole a bit tough :)</p>",
        "id": 204298388,
        "sender_full_name": "lqd",
        "timestamp": 1595074563
    },
    {
        "content": "<p>Peepmatic is a peephole optimizer. Currently the rules for it are kept in sync with the traditionally built peephole optimizer that Cranelift already had (preopt) It is by far now the only optimization work. For example the new style backends use a new regalloc that reduces spilling.</p>",
        "id": 204298455,
        "sender_full_name": "bjorn3",
        "timestamp": 1595074735
    },
    {
        "content": "<p>I have also spent quite some effort to avoid using the stack and collapse pointer arithmetic instructions together as much as possible in clif emitted by cg_clif.</p>",
        "id": 204298466,
        "sender_full_name": "bjorn3",
        "timestamp": 1595074790
    },
    {
        "content": "<p>yeah I was mostly waiting for the possibility fitzgen mentioned of adding more rules, coming from Souper and Jubi Taneja's cranelift superoptimizer (though that work has maybe been somewhat integrated into the rest of her Souper work)</p>",
        "id": 204298523,
        "sender_full_name": "lqd",
        "timestamp": 1595074861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1709#issuecomment-660216202\">https://github.com/bytecodealliance/wasmtime/issues/1709#issuecomment-660216202</a></p>",
        "id": 204298650,
        "sender_full_name": "bjorn3",
        "timestamp": 1595075054
    },
    {
        "content": "<p>very timely, thanks :)</p>",
        "id": 204298658,
        "sender_full_name": "lqd",
        "timestamp": 1595075083
    },
    {
        "content": "<p>it's already super cool that cg_clif can match -O0 combined with mir opts, when cranelift's purpose is more compilation speed than raw perf per se; great job on cg_clif !</p>",
        "id": 204298727,
        "sender_full_name": "lqd",
        "timestamp": 1595075267
    },
    {
        "content": "<p>Thank you. Your work is amazing.</p>",
        "id": 204333809,
        "sender_full_name": "lzutao",
        "timestamp": 1595135999
    }
]