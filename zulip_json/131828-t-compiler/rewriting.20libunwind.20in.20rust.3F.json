[
    {
        "content": "<p>So the mozilla low level tools team is looking at rewriting a lot of our crash handling/reporting/analyzing infra in rust (with the help of Sentry?) because breakpad is a disaster. One of the aspects of that is stackwalking, which means we might be incidentally reimplementing libunwind. Do y'all have any particular pain points with libunwind you would like addressed? Would you want to have a Rust version of libunwind? Do you have any Weird Requirements?</p>",
        "id": 229921038,
        "sender_full_name": "Gankra",
        "timestamp": 1615494811
    },
    {
        "content": "<p>(just now working through our planning for the year so I don't have much to provide in terms of details)</p>",
        "id": 229921233,
        "sender_full_name": "Gankra",
        "timestamp": 1615494890
    },
    {
        "content": "<p>Works fine in interaction with <code>psm</code>/<code>stacker</code> is way up there in my list ^^</p>",
        "id": 229922360,
        "sender_full_name": "nagisa",
        "timestamp": 1615495340
    },
    {
        "content": "<p>There is a somewhat working rust \"implementation\" called <a href=\"https://github.com/gimli-rs/unwind-rs/\">unwind-rs</a> but it only works on elf based unixes and isn't maintained.</p>",
        "id": 229925530,
        "sender_full_name": "bjorn3",
        "timestamp": 1615496679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rewriting.20libunwind.20in.20rust.3F/near/229922360\">said</a>:</p>\n<blockquote>\n<p>Works fine in interaction with <code>psm</code>/<code>stacker</code> is way up there in my list ^^</p>\n</blockquote>\n<p>That would be adding unwind info to the assembly of <code>psm</code> I guess.</p>",
        "id": 229925592,
        "sender_full_name": "bjorn3",
        "timestamp": 1615496710
    },
    {
        "content": "<p>call/cc! call/cc! call/cc!</p>",
        "id": 229934967,
        "sender_full_name": "pnkfelix",
        "timestamp": 1615500155
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rewriting.20libunwind.20in.20rust.3F/near/229925592\">said</a>:</p>\n<blockquote>\n<p>That would be adding unwind info to the assembly of <code>psm</code> I guess.</p>\n</blockquote>\n<p>It does have the <code>.cfi</code> directives in the assembly that allow production of stack traces via gdb and whatever rust uses to implement backtraces at runtime.</p>",
        "id": 229941708,
        "sender_full_name": "nagisa",
        "timestamp": 1615502632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rewriting.20libunwind.20in.20rust.3F/near/229922360\">said</a>:</p>\n<blockquote>\n<p>Works fine in interaction with <code>psm</code>/<code>stacker</code> is way up there in my list ^^</p>\n</blockquote>\n<p>could you elaborate on what this means? Is there any bugs filed about this?</p>",
        "id": 229947492,
        "sender_full_name": "Gankra",
        "timestamp": 1615505562
    },
    {
        "content": "<p>The crate does work in conjunction with today's algorithms to obtain a call-chain. But I'm also not super confident that what its assembly does is sufficiently similar to the code GCC or LLVM emits (especially for the more obscure architectures like, say, sparc). And so it'd be great if it just happens to work with psm, or I'll lose my sleep over it.</p>\n<p>(but really feel free to mostly just ignore me, I only meant to put psm-using applications forward as a different test case compared to what you'd get out of gcc/llvm)</p>",
        "id": 229947997,
        "sender_full_name": "nagisa",
        "timestamp": 1615505843
    },
    {
        "content": "<p>It would be nice if the unwinder supported unwinding across signal handler frames. This is currently supported by libgcc's unwinder but not LLVM's libunwind.</p>",
        "id": 229951612,
        "sender_full_name": "Amanieu",
        "timestamp": 1615507851
    },
    {
        "content": "<p>You need this if you want to get a backtrace from a SIGSEGV. Or at the very least you need an API to provide an initial register context to the unwinder (but then that doesn't work with nested signal handlers).</p>",
        "id": 229951828,
        "sender_full_name": "Amanieu",
        "timestamp": 1615507954
    },
    {
        "content": "<p>The unwinder implementation should be <code>#![no_std]</code> and not reliant on memory allocation: it needs to be usable from a <code>SIGSEGV</code> \"oh shit\" context where any global state may be corrupted.</p>",
        "id": 229952098,
        "sender_full_name": "Amanieu",
        "timestamp": 1615508073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"143274\">@Amanieu</span>, unclear, but isn't the <code>isSignalFrame</code> business all about supporting unwinding across signal handler frames? <a href=\"https://github.com/apple/llvm-project/blob/apple/main/libunwind/src/UnwindCursor.hpp#L437\">https://github.com/apple/llvm-project/blob/apple/main/libunwind/src/UnwindCursor.hpp#L437</a></p>",
        "id": 229994210,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1615538617
    },
    {
        "content": "<p>For what it's worth, Wasmtime/Cranelift work with the system libunwind to support unwinding (+ get support in native tooling). Unfortunately, after a few days of work for supporting Mac M1, it seems the libunwind shipped by the system is unreliable, and doesn't match what's in Apple's LLVM fork, making it largely impossible to debug too. So we will need to consider shipping our own libunwind implementation (unless Apple ships a newer version that works, which is outside our control), and if that didn't require compiling a C++ code base, that would be certainly nice to have.</p>",
        "id": 229994514,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1615538793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"389005\">Benjamin Bouvier</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rewriting.20libunwind.20in.20rust.3F/near/229994210\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"143274\">Amanieu</span>, unclear, but isn't the <code>isSignalFrame</code> business all about supporting unwinding across signal handler frames? <a href=\"https://github.com/apple/llvm-project/blob/apple/main/libunwind/src/UnwindCursor.hpp#L437\">https://github.com/apple/llvm-project/blob/apple/main/libunwind/src/UnwindCursor.hpp#L437</a></p>\n</blockquote>\n<p>Yes but it's not implemented in LLVM's libunwind.</p>",
        "id": 230043560,
        "sender_full_name": "Amanieu",
        "timestamp": 1615561562
    },
    {
        "content": "<p>It's handled internally but I guess for whatever reason they don't expose it? <a href=\"https://reviews.llvm.org/D69677\">https://reviews.llvm.org/D69677</a></p>",
        "id": 230166184,
        "sender_full_name": "Gankra",
        "timestamp": 1615645785
    },
    {
        "content": "<p>Actually I've just realized why this wasn't working for me: the sigreturn stub is in the VDSO but I'm using the bare-metal version of libunwind which only looks at the unwind info for the main binary.</p>",
        "id": 230182393,
        "sender_full_name": "Amanieu",
        "timestamp": 1615662372
    },
    {
        "content": "<p>Drive-by comment (I'm nowhere near the target audience): Might be interesting if it had a sufficiently <code>#[repr(C)]</code> API and could be used from C/C++. Would make for a neat Rust marketing thing.</p>",
        "id": 230202721,
        "sender_full_name": "moxian",
        "timestamp": 1615685028
    },
    {
        "content": "<p>There is already a standard C API for this: the libunwind API.</p>",
        "id": 230204982,
        "sender_full_name": "Amanieu",
        "timestamp": 1615687691
    },
    {
        "content": "<p>well, yes, but given that we want to _rewrite_ it in pure rust (rather than simply bind to it), i'm assuming it's somewhat unideal?</p>",
        "id": 230205038,
        "sender_full_name": "moxian",
        "timestamp": 1615687780
    },
    {
        "content": "<p>who would be the target of marketing of a pure Rust <code>libunwind</code>?</p>",
        "id": 230205753,
        "sender_full_name": "oliver",
        "timestamp": 1615688574
    },
    {
        "content": "<p>Whoever needs <code>libunwind</code> functionality, but also likes the \"guaranteed memory safety\" kool-aid.<br>\nAlthough, that would require these users to add <code>rust</code> to their toolchain, which might be too high of a cost for the benefit.<br>\nYou're right, probably not a practically useful thing beyond pure marketing.</p>",
        "id": 230206185,
        "sender_full_name": "moxian",
        "timestamp": 1615689157
    },
    {
        "content": "<p>well not entirely since I'm aware of projects which opt-in to C++ solely for direct access to libraries like Eigen</p>",
        "id": 230206259,
        "sender_full_name": "oliver",
        "timestamp": 1615689246
    },
    {
        "content": "<p>do you think projects would adopt Rust to access a future Rust <code>libunwind</code>?</p>",
        "id": 230206389,
        "sender_full_name": "oliver",
        "timestamp": 1615689383
    },
    {
        "content": "<p>like I'm sure some would love to abandon C++ if Eigen were in any other peformant language</p>",
        "id": 230206415,
        "sender_full_name": "oliver",
        "timestamp": 1615689449
    },
    {
        "content": "<p>No, now that you've mentioned that, I don't think <code>libunwind</code> is fancy enough on its own to pull in rust just for that. It's a small tool that people write once (if at all) and never again, and that doesn't usually bother.<br>\nIf we had \"an ecosystem\" of c-friendly libs [what libs exactly?] that might work, and having <code>libunwind</code> be a first of a kind might be a good idea, but.. that sounds like a pretty big stretch to me now that I'm typing this.</p>",
        "id": 230206600,
        "sender_full_name": "moxian",
        "timestamp": 1615689671
    },
    {
        "content": "<p>given enough development time, access to the worlds domain experts and funding through grants and industry partners anything is possible!!</p>",
        "id": 230206686,
        "sender_full_name": "oliver",
        "timestamp": 1615689825
    },
    {
        "content": "<p>it would be interesting to have a broader perspective of which libraries catalyze an opt-in decision</p>",
        "id": 230207077,
        "sender_full_name": "oliver",
        "timestamp": 1615690291
    },
    {
        "content": "<p>Most C users already have an implementation of the <code>_Unwind_*</code> API in libgcc and LLVM's libunwind. It literally comes with their compiler.</p>",
        "id": 230208811,
        "sender_full_name": "Amanieu",
        "timestamp": 1615692525
    },
    {
        "content": "<p>In mozilla's case our biggest constraint is the need for a stackwalker that can handle foreign ABIs for server-side minidump processing from crash reports, while also wanting to do some of that analysis on device at crash time. Using native tooling has benefits but also puts us at the mercy of inconsistencies. I'm not yt sure if writing our own crossplatform libunwind necessarily is the right solution at this point but we're definitely in the neighbourhood. (gimli's unwind-rs seems like an interesting starting point but windows is actually the most significant platform we care about)</p>",
        "id": 230244536,
        "sender_full_name": "Gankra",
        "timestamp": 1615734915
    }
]