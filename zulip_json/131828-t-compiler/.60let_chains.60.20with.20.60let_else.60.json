[
    {
        "content": "<p>Moving from #general</p>\n<p>Is anyone willing to make <code>let_chains</code> work with <code>let_else</code>?<br>\n<code>let_else</code> is kinda special and unknown/mysterious to me, therefore, I will only work on it if no one else is interested</p>",
        "id": 268737811,
        "sender_full_name": "Caio",
        "timestamp": 1642703850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"211466\">@Caio</span> The RFCs don't propose that the two interact in any way, and discussion on the later noted that that was intentional.</p>",
        "id": 268742537,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642705864
    },
    {
        "content": "<p>let else does not interact with if let.</p>",
        "id": 268742584,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642705885
    },
    {
        "content": "<p>It's an alternative to if let.</p>",
        "id": 268742603,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642705893
    },
    {
        "content": "<p>If you have a let-else, it already has a fallback for if the  pattern doesn't match, so in that sense it's always \"true\".</p>",
        "id": 268742711,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642705942
    },
    {
        "content": "<p>There was some discussion about allowing fallback patterns for let else, in future possibilities, but that would need a follow-up RFC before an implementation.</p>",
        "id": 268742826,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642706005
    },
    {
        "content": "<p>let-else desugars to a match, so it could interact via the match guards which in turn can contain if let?</p>",
        "id": 268743265,
        "sender_full_name": "The 8472",
        "timestamp": 1642706209
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.60let_chains.60.20with.20.60let_else.60/near/268742711\">said</a>:</p>\n<blockquote>\n<p>If you have a let-else, it already has a fallback for if the  pattern doesn't match, so in that sense it's always \"true\".</p>\n</blockquote>\n<p>The one time I tried <code>let-else</code>, I ended up wanting something like the chain anyway.  I had <a href=\"https://github.com/rust-lang/rust/pull/91222/files#diff-cce3a4b160762dc488191045610f3cecf7918bf8aaa710d0cea0ef810963568bR34-R47\">code like this</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Operand</span>::<span class=\"n\">Move</span><span class=\"p\">(</span><span class=\"n\">switch_place</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"o\">*</span><span class=\"n\">switch_desc</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">switch_local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">switch_place</span><span class=\"p\">.</span><span class=\"n\">as_local</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">last_statement</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">statements</span><span class=\"p\">.</span><span class=\"n\">last_mut</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">StatementKind</span>::<span class=\"n\">Assign</span><span class=\"p\">(</span><span class=\"n\">boxed_place_rvalue</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">last_statement</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">assigned_local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">boxed_place_rvalue</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">as_local</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So some way to collapse that definitely would be nice.</p>",
        "id": 268743688,
        "sender_full_name": "scottmcm",
        "timestamp": 1642706408
    },
    {
        "content": "<p>That doesn't seem like it needs collapsing, to me; that seems like really straightforward code to read.</p>",
        "id": 268745379,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642707148
    },
    {
        "content": "<p>You're wanting to factor out the \"return\" and only write it once?</p>",
        "id": 268745495,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642707212
    },
    {
        "content": "<p>I'm not sure what that could look like.</p>",
        "id": 268745631,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642707278
    },
    {
        "content": "<p>The fallback mechanism in the RFC was designed for cases of fallback patterns. I don't think it contemplated this case.</p>",
        "id": 268745729,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642707334
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Operand</span>::<span class=\"n\">Move</span><span class=\"p\">(</span><span class=\"n\">switch_place</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"o\">*</span><span class=\"n\">switch_desc</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">switch_local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">switch_place</span><span class=\"p\">.</span><span class=\"n\">as_local</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">last_statement</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">statements</span><span class=\"p\">.</span><span class=\"n\">last_mut</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">StatementKind</span>::<span class=\"n\">Assign</span><span class=\"p\">(</span><span class=\"n\">boxed_place_rvalue</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">last_statement</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">assigned_local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">boxed_place_rvalue</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">as_local</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268745862,
        "sender_full_name": "cuviper",
        "timestamp": 1642707387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.60let_chains.60.20with.20.60let_else.60/near/268745495\">said</a>:</p>\n<blockquote>\n<p>You're wanting to factor out the \"return\" and only write it once?</p>\n</blockquote>\n<p>Yeah, exactly.</p>\n<p>Something like this feels consistent with let chains:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Operand</span>::<span class=\"n\">Move</span><span class=\"p\">(</span><span class=\"n\">switch_place</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"o\">*</span><span class=\"n\">switch_desc</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">switch_local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">switch_place</span><span class=\"p\">.</span><span class=\"n\">as_local</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">last_statement</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">statements</span><span class=\"p\">.</span><span class=\"n\">last_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">StatementKind</span>::<span class=\"n\">Assign</span><span class=\"p\">(</span><span class=\"n\">boxed_place_rvalue</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">last_statement</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">assigned_local</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">boxed_place_rvalue</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">as_local</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268745914,
        "sender_full_name": "scottmcm",
        "timestamp": 1642707421
    },
    {
        "content": "<p>...and viper and I writing it at the same time seems like good anecdotal evidence <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 268746041,
        "sender_full_name": "scottmcm",
        "timestamp": 1642707480
    },
    {
        "content": "<p>(we'll argue elsewhere about how to wrap <code>&amp;&amp;</code>)</p>",
        "id": 268746156,
        "sender_full_name": "cuviper",
        "timestamp": 1642707532
    },
    {
        "content": "<p>(whatever rustfmt does already is fine; I just did the one I'm used to from work's coding standard)</p>",
        "id": 268746242,
        "sender_full_name": "scottmcm",
        "timestamp": 1642707583
    },
    {
        "content": "<p>Oh! I just reread the let-else RFC and I think I see what you mean.</p>",
        "id": 268746479,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642707688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125270\">@scottmcm</span> Based on the mention in the future possibilities section, I think that could be written mostly like that, except with <code>&amp;&amp; let</code> not just <code>&amp;&amp;</code>.</p>",
        "id": 268746596,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642707740
    },
    {
        "content": "<p>\"let this and let this and let this, else return\".</p>",
        "id": 268746623,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1642707763
    },
    {
        "content": "<p>Oh, yeah, should probably be <code>&amp;&amp; let</code> for the same reason as it's <code>&amp;&amp; let</code> in if-chain.</p>",
        "id": 268746651,
        "sender_full_name": "scottmcm",
        "timestamp": 1642707781
    },
    {
        "content": "<p>I didn't realize that either, but yes, do it the same way</p>",
        "id": 268746697,
        "sender_full_name": "cuviper",
        "timestamp": 1642707813
    },
    {
        "content": "<p>Hmm, actually, that raises the interesting question of whether you could</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"w\"></span>\n<span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268746856,
        "sender_full_name": "scottmcm",
        "timestamp": 1642707887
    },
    {
        "content": "<p>does if-let-chain allow mixed boolean conditions?</p>",
        "id": 268746990,
        "sender_full_name": "cuviper",
        "timestamp": 1642707961
    },
    {
        "content": "<p>Yes.</p>",
        "id": 268747041,
        "sender_full_name": "scottmcm",
        "timestamp": 1642707968
    },
    {
        "content": "<p>then sure, let-chain-else should as well</p>",
        "id": 268747103,
        "sender_full_name": "cuviper",
        "timestamp": 1642707993
    },
    {
        "content": "<p>But then what if you turn it up to 11?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268747259,
        "sender_full_name": "scottmcm",
        "timestamp": 1642708072
    },
    {
        "content": "<p>well ok, that's too scary</p>",
        "id": 268747551,
        "sender_full_name": "cuviper",
        "timestamp": 1642708213
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268747615,
        "sender_full_name": "cuviper",
        "timestamp": 1642708252
    },
    {
        "content": "<p>does that introduce y and z as local vars?</p>",
        "id": 268747621,
        "sender_full_name": "The 8472",
        "timestamp": 1642708258
    },
    {
        "content": "<p>I guess I can write it like this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268747645,
        "sender_full_name": "scottmcm",
        "timestamp": 1642708270
    },
    {
        "content": "<p><a href=\"http://weird_exprs.rs\">weird_exprs.rs</a> would have a field day with this</p>",
        "id": 268747789,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1642708331
    },
    {
        "content": "<p><a href=\"http://weird_stmts.rs\">weird_stmts.rs</a></p>",
        "id": 268748214,
        "sender_full_name": "cuviper",
        "timestamp": 1642708492
    },
    {
        "content": "<p>clearly we need a new syntax for this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">∀</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 268750843,
        "sender_full_name": "scottmcm",
        "timestamp": 1642709651
    },
    {
        "content": "<p>This is getting close to the <code>if_chain</code> crate <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 268752070,
        "sender_full_name": "Jack Huey",
        "timestamp": 1642710254
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/.60let_chains.60.20with.20.60let_else.60/near/268750843\">said</a>:</p>\n<blockquote>\n<p>clearly we need a new syntax for this:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">∀</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This clearly should be <code>\\bigwedge</code> instead of <code>\\forall</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 268801793,
        "sender_full_name": "Gary Guo",
        "timestamp": 1642747171
    },
    {
        "content": "<p>Sorry, I only know how to type small wedge (∨) with this compose key setup.</p>",
        "id": 268803577,
        "sender_full_name": "scottmcm",
        "timestamp": 1642749290
    }
]