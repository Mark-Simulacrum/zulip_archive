[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// check-pass</span>\n<span class=\"cp\">#![feature(const_generics)]</span><span class=\"w\"></span>\n<span class=\"c1\">//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">A</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"kt\">usize</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">().</span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>Does that need lazy nomalization?</p>",
        "id": 194004662,
        "sender_full_name": "lcnr",
        "timestamp": 1586942970
    },
    {
        "content": "<p>or rather, should it? It doesn't work at all rn  as type dependent const args aren't supported yet</p>",
        "id": 194004812,
        "sender_full_name": "lcnr",
        "timestamp": 1586943030
    },
    {
        "content": "<p>no</p>",
        "id": 194023383,
        "sender_full_name": "eddyb",
        "timestamp": 1586954646
    },
    {
        "content": "<p>lazy normalization is mostly about <code>ParamEnv</code>s</p>",
        "id": 194023418,
        "sender_full_name": "eddyb",
        "timestamp": 1586954667
    },
    {
        "content": "<p>and the constant being in its own <code>tcx.param_env(def_id)</code></p>",
        "id": 194023440,
        "sender_full_name": "eddyb",
        "timestamp": 1586954680
    },
    {
        "content": "<p>so that would require <code>{2+3}</code> to be written in <code>main</code>'s <code>where</code> clauses, I think?</p>",
        "id": 194023551,
        "sender_full_name": "eddyb",
        "timestamp": 1586954754
    },
    {
        "content": "<p>the process here, with the new plan, is that <code>().foo(...)</code> is resolved to <code>Foo::foo</code> (the <code>impl</code> <em>doesn't matter</em>)</p>",
        "id": 194023659,
        "sender_full_name": "eddyb",
        "timestamp": 1586954807
    },
    {
        "content": "<p>then the <code>DefId</code> of the <code>const N</code> <em>in the trait</em> will be placed in <code>ConstKind::Unevaluated</code></p>",
        "id": 194023701,
        "sender_full_name": "eddyb",
        "timestamp": 1586954840
    },
    {
        "content": "<p>and from there it propagates through <code>const_eval</code> -&gt; miri -&gt; MIR building -&gt; <code>typeck_tables_of</code></p>",
        "id": 194023844,
        "sender_full_name": "eddyb",
        "timestamp": 1586954925
    },
    {
        "content": "<blockquote>\n<p>then the DefId of the const N in the trait will be placed in ConstKind::Unevaluated</p>\n</blockquote>\n<p>This doesn't quite work, as it breaks diagnostics. and causes errors when trying to generate mir.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0080</span><span class=\"p\">]</span>: <span class=\"nc\">evaluation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">constant</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">programming</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">/</span><span class=\"n\">ui</span><span class=\"o\">/</span><span class=\"k\">const</span><span class=\"o\">-</span><span class=\"n\">generics</span><span class=\"o\">/</span><span class=\"n\">slice</span><span class=\"o\">-</span><span class=\"k\">const</span><span class=\"o\">-</span><span class=\"n\">param</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">10</span>:<span class=\"mi\">34</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"n\">LL</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">function_with_bytes</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">BYTES</span>: <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nb\">&#39;static</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                  </span><span class=\"o\">^^^^^</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">MIR</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DefId</span><span class=\"p\">(</span><span class=\"mi\">0</span>:<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"n\">slice_const_param</span><span class=\"p\">[</span><span class=\"mi\">317</span><span class=\"n\">d</span><span class=\"p\">]</span>::<span class=\"n\">function_with_bytes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>::<span class=\"n\">BYTES</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I am currently working on a slightly different approach which looks at least somewhat promising <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 194063023,
        "sender_full_name": "lcnr",
        "timestamp": 1586970999
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 194063273,
        "sender_full_name": "eddyb",
        "timestamp": 1586971135
    },
    {
        "content": "<p>there is no other way AFAIK</p>",
        "id": 194063286,
        "sender_full_name": "eddyb",
        "timestamp": 1586971144
    },
    {
        "content": "<blockquote>\n<p>there is no other way AFAIK</p>\n</blockquote>\n<p>I avoid calling <code>type_of</code> for consts. Not sure if it will work but it's a great way to familiarize myself with the compiler <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> <br>\ntbh it's a bodge on top of a bodge rn, so I still have a lot of cleanup to do</p>",
        "id": 194064503,
        "sender_full_name": "lcnr",
        "timestamp": 1586971771
    },
    {
        "content": "<p>you have to pass that data down</p>",
        "id": 194065057,
        "sender_full_name": "eddyb",
        "timestamp": 1586971864
    },
    {
        "content": "<p>through miri, through all the MIR stuff, through MIR building, through typeck</p>",
        "id": 194065097,
        "sender_full_name": "eddyb",
        "timestamp": 1586971884
    },
    {
        "content": "<blockquote>\n<p>through miri, through all the MIR stuff, through MIR building, through typeck</p>\n</blockquote>\n<p>aye</p>",
        "id": 194065237,
        "sender_full_name": "lcnr",
        "timestamp": 1586971926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  I currently emit errors twice. When const evaluating const args, </p>\n<p>I can either call <code>typeck_tables_of</code> here, causing cycle errors,<br>\nor <code>typeck_tables_of_const_arg</code>(a varsion of <code>typeck_tables_of</code> which correctly handles const args), which emits the same errors as <code>typeck_tables_of</code> without \"caching\" its result for <code>typeck_tables_of</code>. Causing a later call to <code>typeck_tables_of</code> to emit the same errors once more. <br>\nAny idea on how I might solve this?</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/835428c35d785733e72bfbf32fc2f8fff3e50e63/src/librustc_mir/const_eval/eval_queries.rs#L297\" title=\"https://github.com/rust-lang/rust/blob/835428c35d785733e72bfbf32fc2f8fff3e50e63/src/librustc_mir/const_eval/eval_queries.rs#L297\">https://github.com/rust-lang/rust/blob/835428c35d785733e72bfbf32fc2f8fff3e50e63/src/librustc_mir/const_eval/eval_queries.rs#L297</a></p>",
        "id": 194223521,
        "sender_full_name": "lcnr",
        "timestamp": 1586982815
    },
    {
        "content": "<p>my suggestion was to have <code>typeck_tables_of</code><em>for const args</em> look up the right <code>DefId</code> and <em>then</em> use the right <code>typeck_tables_of_const_arg</code> invocation</p>",
        "id": 194223655,
        "sender_full_name": "eddyb",
        "timestamp": 1586982876
    },
    {
        "content": "<p>so that it's only ever type-checked once</p>",
        "id": 194223685,
        "sender_full_name": "eddyb",
        "timestamp": 1586982890
    },
    {
        "content": "<blockquote>\n<p>This doesn't quite work, as it breaks diagnostics. and causes errors when trying to generate mir.</p>\n</blockquote>\n<p>We can add an <code>Option&lt;LocalDefId&gt;</code>to <code>ConstKind::Unevaluated</code> without changing its size.<br>\nConsidering that we only need to typeck local methods, we can store the <code>DefId</code> of the arg as a <code>LocalDefId</code> which we now use for diagnostics and in places where using the <code>DefId</code> of the param fails.</p>\n<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Is there a danger of breaking incremental/cross crate queries with this?</p>",
        "id": 194334155,
        "sender_full_name": "lcnr",
        "timestamp": 1587055725
    },
    {
        "content": "<p>don't be worried about increasing the size</p>",
        "id": 194334245,
        "sender_full_name": "eddyb",
        "timestamp": 1587055778
    },
    {
        "content": "<p>and the called method could be in another crate, so <code>LocalDefId</code> is not appropriate</p>",
        "id": 194334264,
        "sender_full_name": "eddyb",
        "timestamp": 1587055791
    },
    {
        "content": "<blockquote>\n<p>and the called method could be in another crate, so LocalDefId is not appropriate</p>\n</blockquote>\n<p>I store the used argument as a localdefid, shouldn't that one be local?</p>",
        "id": 194334457,
        "sender_full_name": "lcnr",
        "timestamp": 1587055862
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> but that's already there</p>",
        "id": 194335921,
        "sender_full_name": "eddyb",
        "timestamp": 1587056503
    },
    {
        "content": "<p>it's the <code>DefId</code></p>",
        "id": 194335932,
        "sender_full_name": "eddyb",
        "timestamp": 1587056507
    },
    {
        "content": "<p>or do you mean you're doing something super sneaky?</p>",
        "id": 194335957,
        "sender_full_name": "eddyb",
        "timestamp": 1587056518
    },
    {
        "content": "<p>where you're storing the param def_id in the <code>DefId</code></p>",
        "id": 194336032,
        "sender_full_name": "eddyb",
        "timestamp": 1587056536
    },
    {
        "content": "<p>and the true <code>DefId</code> in the <code>LocalDefId</code></p>",
        "id": 194336053,
        "sender_full_name": "eddyb",
        "timestamp": 1587056546
    },
    {
        "content": "<blockquote>\n<p>where you're storing the param def_id in the DefId</p>\n</blockquote>\n<p>yes</p>",
        "id": 194336066,
        "sender_full_name": "lcnr",
        "timestamp": 1587056550
    },
    {
        "content": "<p>but even then that's not correct because we need to serialize unevaluated constants cross-crate anyway</p>",
        "id": 194336083,
        "sender_full_name": "eddyb",
        "timestamp": 1587056560
    },
    {
        "content": "<p>........ why? <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span></p>",
        "id": 194336172,
        "sender_full_name": "lcnr",
        "timestamp": 1587056590
    },
    {
        "content": "<p>because they can be in a type</p>",
        "id": 194336206,
        "sender_full_name": "eddyb",
        "timestamp": 1587056603
    },
    {
        "content": "<p>there's no reason to think anything will force their normalization</p>",
        "id": 194336230,
        "sender_full_name": "eddyb",
        "timestamp": 1587056613
    },
    {
        "content": "<p>just make <code>Unevaluated</code> larger :P</p>",
        "id": 194336369,
        "sender_full_name": "eddyb",
        "timestamp": 1587056666
    },
    {
        "content": "<p>hmm, I could resubstitute the <code>DefId</code> using the <code>LocalDefId</code> during serialization <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> I doubt this would ever surprise someone</p>",
        "id": 194336382,
        "sender_full_name": "lcnr",
        "timestamp": 1587056674
    },
    {
        "content": "<p>you'll just waste your own time if you don't do this the easy way</p>",
        "id": 194336502,
        "sender_full_name": "eddyb",
        "timestamp": 1587056725
    },
    {
        "content": "<blockquote>\n<p>just make Unevaluated larger :P</p>\n</blockquote>\n<p>PREMATURE OPTIMIZATION</p>",
        "id": 194336517,
        "sender_full_name": "lcnr",
        "timestamp": 1587056730
    },
    {
        "content": "<blockquote>\n<p>just make Unevaluated larger :P</p>\n</blockquote>\n<p>We can actually use <code>DefId</code> and still not change the size <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 194349264,
        "sender_full_name": "lcnr",
        "timestamp": 1587062422
    },
    {
        "content": "<p>please I beg you</p>",
        "id": 194349289,
        "sender_full_name": "eddyb",
        "timestamp": 1587062436
    },
    {
        "content": "<p>first get it working, then worry about size penalties (if they even matter)</p>",
        "id": 194349356,
        "sender_full_name": "eddyb",
        "timestamp": 1587062470
    },
    {
        "content": "<p>I do <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span> Was just suprised that usng a <code>DefId</code> didn't actually break the static assert</p>",
        "id": 194351056,
        "sender_full_name": "lcnr",
        "timestamp": 1587063260
    },
    {
        "content": "<p>oh you mean adding a <code>DefId</code> doesn't change the size?</p>",
        "id": 194351097,
        "sender_full_name": "eddyb",
        "timestamp": 1587063281
    },
    {
        "content": "<p>Yes</p>",
        "id": 194351110,
        "sender_full_name": "lcnr",
        "timestamp": 1587063290
    },
    {
        "content": "<p>it's <code>(u32, u32)</code></p>",
        "id": 194351129,
        "sender_full_name": "eddyb",
        "timestamp": 1587063298
    },
    {
        "content": "<p>so the same size as a pointer</p>",
        "id": 194351147,
        "sender_full_name": "eddyb",
        "timestamp": 1587063307
    },
    {
        "content": "<p>jup, I thought it Unevaluated was the biggest variant and 8 byte aligned</p>",
        "id": 194351207,
        "sender_full_name": "lcnr",
        "timestamp": 1587063341
    },
    {
        "content": "<p>one of the <code>ConstValue</code> cases has an <code>u128</code>, I wonder if <code>ConstValue</code> is the largest variant of <code>ConstKind</code> :P</p>",
        "id": 194351211,
        "sender_full_name": "eddyb",
        "timestamp": 1587063343
    },
    {
        "content": "<p>yes, we may try to split data into 2 u64</p>",
        "id": 194351449,
        "sender_full_name": "lcnr",
        "timestamp": 1587063444
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/enum.Scalar.html\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/enum.Scalar.html\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_mir/interpret/enum.Scalar.html</a></p>",
        "id": 194351466,
        "sender_full_name": "lcnr",
        "timestamp": 1587063451
    },
    {
        "content": "<p>Alignment costs so much there</p>",
        "id": 194351511,
        "sender_full_name": "lcnr",
        "timestamp": 1587063469
    },
    {
        "content": "<p>OH I forgot about the <code>u8</code> haha</p>",
        "id": 194351517,
        "sender_full_name": "eddyb",
        "timestamp": 1587063472
    },
    {
        "content": "<p>although, no, just the fact that <code>Scalar</code> is an <code>enum</code> by itself makes it 24 bytes</p>",
        "id": 194351632,
        "sender_full_name": "eddyb",
        "timestamp": 1587063505
    },
    {
        "content": "<p>that means <code>ConstValue</code> is 32 bytes</p>",
        "id": 194351726,
        "sender_full_name": "eddyb",
        "timestamp": 1587063547
    },
    {
        "content": "<p>which is enough for 2 <code>DefId</code>'s, a <code>SubstsRef</code> and an <code>Option&lt;Promoted&gt;</code></p>",
        "id": 194351764,
        "sender_full_name": "eddyb",
        "timestamp": 1587063568
    },
    {
        "content": "<p>afaict it should be possible to get scalar down to 24 bytes with alignment 8. which should allow us to keep ConstKind smaller as well.<br>\nDon't know if this is that useful though <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 194352100,
        "sender_full_name": "lcnr",
        "timestamp": 1587063701
    },
    {
        "content": "<p><code>Scalar</code> <em>is</em> 24 bytes</p>",
        "id": 194352140,
        "sender_full_name": "eddyb",
        "timestamp": 1587063721
    },
    {
        "content": "<p>at least that's what it looks like to me</p>",
        "id": 194352194,
        "sender_full_name": "eddyb",
        "timestamp": 1587063728
    },
    {
        "content": "<p><code>u128</code> can't have alignment of 16 I don't think</p>",
        "id": 194352223,
        "sender_full_name": "eddyb",
        "timestamp": 1587063740
    },
    {
        "content": "<p>it actually isn't. It's 8</p>",
        "id": 194352310,
        "sender_full_name": "lcnr",
        "timestamp": 1587063782
    },
    {
        "content": "<p>mb, remembered it wrong</p>",
        "id": 194352334,
        "sender_full_name": "lcnr",
        "timestamp": 1587063792
    },
    {
        "content": "<p><code>ConstValue</code> isn't and maybe could be 24 bytes</p>",
        "id": 194352360,
        "sender_full_name": "eddyb",
        "timestamp": 1587063804
    },
    {
        "content": "<p>ah I see</p>",
        "id": 194352380,
        "sender_full_name": "eddyb",
        "timestamp": 1587063814
    },
    {
        "content": "<p><code>ConstValue</code> with size 24 is possible (or is it...) It is by abusing <code>Allocation</code> alignment <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 194352508,
        "sender_full_name": "lcnr",
        "timestamp": 1587063865
    },
    {
        "content": "<p>How relevant is the size of <code>Const</code>s?</p>",
        "id": 194353348,
        "sender_full_name": "lcnr",
        "timestamp": 1587064274
    },
    {
        "content": "<p>idk, ask <span class=\"user-mention\" data-user-id=\"120989\">@Nicholas Nethercote</span></p>",
        "id": 194353535,
        "sender_full_name": "eddyb",
        "timestamp": 1587064351
    },
    {
        "content": "<p>For all the types I've encountered where the size matters, I have added a <code>static_assert_size!</code> and a comment about it, like this: <a href=\"https://github.com/rust-lang/rust/blob/3712e11a828af2eea273a3e7300115e65833fbc5/src/librustc_infer/traits/mod.rs#L59-L61\" title=\"https://github.com/rust-lang/rust/blob/3712e11a828af2eea273a3e7300115e65833fbc5/src/librustc_infer/traits/mod.rs#L59-L61\">https://github.com/rust-lang/rust/blob/3712e11a828af2eea273a3e7300115e65833fbc5/src/librustc_infer/traits/mod.rs#L59-L61</a></p>",
        "id": 194376162,
        "sender_full_name": "njn",
        "timestamp": 1587076333
    },
    {
        "content": "<p>Both <code>Scalar</code> and <code>ConstValue</code> have <code>static_assert_size!</code>, but they lack that comment, which indicates that I didn't add the assertions.</p>",
        "id": 194376214,
        "sender_full_name": "njn",
        "timestamp": 1587076378
    },
    {
        "content": "<p><code>git blame</code> will be useful here to work out who added the assertions and why</p>",
        "id": 194376341,
        "sender_full_name": "njn",
        "timestamp": 1587076470
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/commit/2a1748834e80b2461be4e18d420503d60e687312\" title=\"https://github.com/rust-lang/rust/commit/2a1748834e80b2461be4e18d420503d60e687312\">https://github.com/rust-lang/rust/commit/2a1748834e80b2461be4e18d420503d60e687312</a></p>",
        "id": 194376675,
        "sender_full_name": "bjorn3",
        "timestamp": 1587076730
    },
    {
        "content": "<p>Big progress <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span> Now fails with a 460 stackframes deep backtrace</p>",
        "id": 194427269,
        "sender_full_name": "lcnr",
        "timestamp": 1587123787
    },
    {
        "content": "<p>f <code>thread 'rustc' panicked at 'attempt to read from stolen value', /home/programming/rust/src/librustc_middle/ty/steal.rs:42:9</code></p>",
        "id": 194437887,
        "sender_full_name": "lcnr",
        "timestamp": 1587129364
    },
    {
        "content": "<p>What is the intended use of <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/enum.TyKind.html#variant.Typeof\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/enum.TyKind.html#variant.Typeof\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/enum.TyKind.html#variant.Typeof</a></p>",
        "id": 194443846,
        "sender_full_name": "lcnr",
        "timestamp": 1587131919
    },
    {
        "content": "<p>heh</p>",
        "id": 194445748,
        "sender_full_name": "eddyb",
        "timestamp": 1587132726
    },
    {
        "content": "<p><code>typeof</code></p>",
        "id": 194445771,
        "sender_full_name": "eddyb",
        "timestamp": 1587132735
    },
    {
        "content": "<p>the funny thing is it would also be very easy to finish the implementation thereof</p>",
        "id": 194445818,
        "sender_full_name": "eddyb",
        "timestamp": 1587132753
    },
    {
        "content": "<p>but nobody made an RFC AFAIK</p>",
        "id": 194445838,
        "sender_full_name": "eddyb",
        "timestamp": 1587132759
    },
    {
        "content": "<p>maybe we should make it error, printing the type</p>",
        "id": 194445891,
        "sender_full_name": "eddyb",
        "timestamp": 1587132779
    },
    {
        "content": "<p>This? <a href=\"https://github.com/rust-lang/rust/issues/3228\" title=\"https://github.com/rust-lang/rust/issues/3228\">https://github.com/rust-lang/rust/issues/3228</a></p>",
        "id": 194446357,
        "sender_full_name": "lcnr",
        "timestamp": 1587132978
    },
    {
        "content": "<p>lmao I don't remember seeing that</p>",
        "id": 194446386,
        "sender_full_name": "eddyb",
        "timestamp": 1587132993
    },
    {
        "content": "<p>wouldn't that always be kind of a mess due to variance?</p>",
        "id": 194446501,
        "sender_full_name": "lcnr",
        "timestamp": 1587133036
    },
    {
        "content": "<p>funny you should say that</p>",
        "id": 194447352,
        "sender_full_name": "eddyb",
        "timestamp": 1587133359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> raised a similar point recently :P</p>",
        "id": 194447379,
        "sender_full_name": "eddyb",
        "timestamp": 1587133370
    },
    {
        "content": "<p>although no, not variance, outlives</p>",
        "id": 194447453,
        "sender_full_name": "eddyb",
        "timestamp": 1587133402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span>  How can I reliably get the relevant <code>Generics</code> for a const argument.  (don't care about potential cycle errors there)</p>\n<p>I currently try <code>tcx.generics_of(tcx.hir().local_def_id(tcx.hir().get_parent_node(tcx.hir().as_local_hir_id(def_id).unwrap())))</code><br>\nBut some parent nodes don't have a associated <code>DefId</code>, which causes <code>local_def_id</code> to panic</p>",
        "id": 194467919,
        "sender_full_name": "lcnr",
        "timestamp": 1587141795
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> literally just <code>tcx.generics_of(def_id)</code></p>",
        "id": 194468165,
        "sender_full_name": "eddyb",
        "timestamp": 1587141911
    },
    {
        "content": "<p>assuming the <code>def_id</code> is of an <code>AnonConst</code></p>",
        "id": 194468301,
        "sender_full_name": "eddyb",
        "timestamp": 1587141965
    },
    {
        "content": "<p>hhhhhhhhhhhhhh</p>",
        "id": 194468324,
        "sender_full_name": "lcnr",
        "timestamp": 1587141978
    },
    {
        "content": "<p>ok</p>",
        "id": 194468328,
        "sender_full_name": "lcnr",
        "timestamp": 1587141981
    },
    {
        "content": "<p>sorry for always being slow to respond: I don't keep Zulip open and so I only spot messages every so often when I check my phone :P</p>",
        "id": 194468848,
        "sender_full_name": "varkor",
        "timestamp": 1587142245
    },
    {
        "content": "<p>no worries <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> Is just too fast <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 194469116,
        "sender_full_name": "lcnr",
        "timestamp": 1587142370
    },
    {
        "content": "<p>apparently <code>tcx.generics_of(def_id)</code> doesn't work in all cases. We previously used <code>Res</code> to get a correct <code>DefId</code>.<br>\n<a href=\"https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src/librustc_typeck/collect/type_of.rs#L263-L277\" title=\"https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src/librustc_typeck/collect/type_of.rs#L263-L277\">https://github.com/rust-lang/rust/blob/8d67f576b56e8fc98a31123e5963f8d00e40611c/src/librustc_typeck/collect/type_of.rs#L263-L277</a></p>\n<p>What exactly is the use of<code>Res</code> here. I worked on this code for a few times and still have no idea tbh <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 194474609,
        "sender_full_name": "lcnr",
        "timestamp": 1587144792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> oh that's a completely different thing</p>",
        "id": 194474732,
        "sender_full_name": "eddyb",
        "timestamp": 1587144843
    },
    {
        "content": "<p>Why do we have to use the <code>parent_did</code> for <code>DefKind::Ctor</code></p>",
        "id": 194474735,
        "sender_full_name": "lcnr",
        "timestamp": 1587144843
    },
    {
        "content": "<p><code>res</code> is the resolution</p>",
        "id": 194474744,
        "sender_full_name": "eddyb",
        "timestamp": 1587144850
    },
    {
        "content": "<p><em>of the path</em></p>",
        "id": 194474753,
        "sender_full_name": "eddyb",
        "timestamp": 1587144855
    },
    {
        "content": "<p>so the <code>generics_of</code> is for the thing that <em>takes</em> const generics</p>",
        "id": 194474781,
        "sender_full_name": "eddyb",
        "timestamp": 1587144869
    },
    {
        "content": "<p>the parent for the ctor is because the params are on e.g. on the <code>struct</code></p>",
        "id": 194474862,
        "sender_full_name": "eddyb",
        "timestamp": 1587144922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> earlier I thought you were asking about getting the generics in scope of the anon const expression</p>",
        "id": 194474890,
        "sender_full_name": "eddyb",
        "timestamp": 1587144940
    },
    {
        "content": "<p>not what it's passed to</p>",
        "id": 194474902,
        "sender_full_name": "eddyb",
        "timestamp": 1587144949
    },
    {
        "content": "<p>the latter depends on what you're passing it to</p>",
        "id": 194474917,
        "sender_full_name": "eddyb",
        "timestamp": 1587144959
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"mi\">7</span><span class=\"o\">&gt;</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">              </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">want</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">N</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">DefId</span><span class=\"err\">`</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194474987,
        "sender_full_name": "lcnr",
        "timestamp": 1587144981
    },
    {
        "content": "<p>every place calling <code>to_const</code> or whatever has to supply its own depending on where the const expression is</p>",
        "id": 194474993,
        "sender_full_name": "eddyb",
        "timestamp": 1587144984
    },
    {
        "content": "<p>right so that requires you to figure out where the const args &lt;-&gt; parameters matching is checked</p>",
        "id": 194475062,
        "sender_full_name": "eddyb",
        "timestamp": 1587145030
    },
    {
        "content": "<p>basically the same place that errors when the number of generic args doesn't match the number of parameters</p>",
        "id": 194475126,
        "sender_full_name": "eddyb",
        "timestamp": 1587145069
    },
    {
        "content": "<p>and likely calls <code>to_const</code></p>",
        "id": 194475138,
        "sender_full_name": "eddyb",
        "timestamp": 1587145075
    },
    {
        "content": "<p>I previously used <a href=\"https://github.com/rust-lang/rust/blob/99c18ab8a98e1b171489cb2e0a06ea5471b9c633/src/librustc_typeck/collect/type_of.rs#L246-L272\" title=\"https://github.com/rust-lang/rust/blob/99c18ab8a98e1b171489cb2e0a06ea5471b9c633/src/librustc_typeck/collect/type_of.rs#L246-L272\">https://github.com/rust-lang/rust/blob/99c18ab8a98e1b171489cb2e0a06ea5471b9c633/src/librustc_typeck/collect/type_of.rs#L246-L272</a></p>\n<p>The get the type of the param, can this be adjusted to get its DefId?</p>",
        "id": 194475652,
        "sender_full_name": "lcnr",
        "timestamp": 1587145326
    },
    {
        "content": "<p>heh</p>",
        "id": 194475700,
        "sender_full_name": "eddyb",
        "timestamp": 1587145351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/lazy.20normalization.20example/near/194475126\" title=\"#narrow/stream/131828-t-compiler/topic/lazy.20normalization.20example/near/194475126\">said</a>:</p>\n<blockquote>\n<p>basically the same place that errors when the number of generic args doesn't match the number of parameters</p>\n</blockquote>\n<p>that's <code>check_generic_arg_count</code>, though I don't think it uses <code>to_const</code></p>",
        "id": 194475805,
        "sender_full_name": "varkor",
        "timestamp": 1587145408
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> sort of, but you need to get the <code>DefId</code> of the thing the segment refers to. <code>type_relative_defs</code> is I think the right table</p>",
        "id": 194475822,
        "sender_full_name": "eddyb",
        "timestamp": 1587145419
    },
    {
        "content": "<p>there's something like <code>qpath_res</code> maybe?</p>",
        "id": 194475912,
        "sender_full_name": "eddyb",
        "timestamp": 1587145452
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckTables.html#structfield.type_dependent_defs\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckTables.html#structfield.type_dependent_defs\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckTables.html#structfield.type_dependent_defs</a></p>",
        "id": 194476052,
        "sender_full_name": "lcnr",
        "timestamp": 1587145515
    },
    {
        "content": "<p>?</p>",
        "id": 194476059,
        "sender_full_name": "lcnr",
        "timestamp": 1587145517
    },
    {
        "content": "<p>yeah</p>",
        "id": 194476069,
        "sender_full_name": "eddyb",
        "timestamp": 1587145521
    },
    {
        "content": "<p>Thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> I believe I now have a working concept!</p>\n<p>I fear the error messages though</p>\n<div class=\"codehilite\"><pre><span></span>warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:2:12\n   |\nLL | #![feature(const_generics)]\n   |            ^^^^^^^^^^^^^^\n   |\n   = note: `#[warn(incomplete_features)]` on by default\n\nerror[E0391]: cycle detected when type-checking `main`\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:41:1\n   |\nLL | fn main() {\n   | ^^^^^^^^^\n   |\nnote: ...which requires const-evaluating + checking `main::{{constant}}#0`...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\nnote: ...which requires const-evaluating + checking `main::{{constant}}#0`...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\nnote: ...which requires const-evaluating `main::{{constant}}#0`...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\nnote: ...which requires optimizing MIR...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\nnote: ...which requires borrow-checking `main::{{constant}}#0`...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\nnote: ...which requires processing `main::{{constant}}#0`...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\nnote: ...which requires const checking `main::{{constant}}#0`...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\nnote: ...which requires processing `main::{{constant}}#0`...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\nnote: ...which requires unsafety-checking `main::{{constant}}#0`...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\nnote: ...which requires building MIR for...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\nnote: ...which requires type-checking `main::{{constant}}#0`...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\nnote: ...which requires processing `main::{{constant}}#0`...\n  --&gt; /home/programming/rust/src/test/ui/__check/issue-61936.rs:44:47\n   |\nLL |     for array in v.as_slice().array_windows::&lt;FOUR&gt;() {\n   |                                               ^^^^\n   = note: ...which again requires type-checking `main`, completing the cycle\n   = note: cycle used when type-checking all item bodies\n</pre></div>",
        "id": 194497996,
        "sender_full_name": "lcnr",
        "timestamp": 1587156600
    },
    {
        "content": "<p>A UI test requires the line in the error message and I don't know why <a href=\"https://github.com/rust-lang/rust/blob/86f765faac81d71192fa3df5466beec556b7bb58/src/test/ui/recursion/issue-26548-recursion-via-normalize.rs#L11\" title=\"https://github.com/rust-lang/rust/blob/86f765faac81d71192fa3df5466beec556b7bb58/src/test/ui/recursion/issue-26548-recursion-via-normalize.rs#L11\">https://github.com/rust-lang/rust/blob/86f765faac81d71192fa3df5466beec556b7bb58/src/test/ui/recursion/issue-26548-recursion-via-normalize.rs#L11</a></p>",
        "id": 194545303,
        "sender_full_name": "lcnr",
        "timestamp": 1587217386
    },
    {
        "content": "<p>if we already have cycle errors, another one doesn't seem particularly harmful, as long as this isn't incorrect</p>",
        "id": 194545407,
        "sender_full_name": "varkor",
        "timestamp": 1587217496
    },
    {
        "content": "<p>My problem is that <code>//~ NOTE 11:1: 11:10: cycle used when </code>main<code>[None]</code> is required</p>",
        "id": 194545430,
        "sender_full_name": "lcnr",
        "timestamp": 1587217531
    },
    {
        "content": "<p><code>//~ NOTE cycle used when main[None]</code> does not detect this error</p>",
        "id": 194545434,
        "sender_full_name": "lcnr",
        "timestamp": 1587217545
    },
    {
        "content": "<p>stderr seems normal </p>\n<div class=\"codehilite\"><pre><span></span>error[E0391]: cycle detected when computing layout of `std::option::Option&lt;S&gt;`\n   |\n   = note: ...which requires computing layout of `S`...\n   = note: ...which again requires computing layout of `std::option::Option&lt;S&gt;`, completing the cycle\nnote: cycle used when `main`[None]\n  --&gt; $DIR/issue-26548-recursion-via-normalize.rs:11:1\n   |\nLL | fn main() {\n   | ^^^^^^^^^\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0391`.\n</pre></div>",
        "id": 194545439,
        "sender_full_name": "lcnr",
        "timestamp": 1587217561
    },
    {
        "content": "<p>oh, weird</p>",
        "id": 194545564,
        "sender_full_name": "varkor",
        "timestamp": 1587217689
    },
    {
        "content": "<p>nm, it suddently works... did I mess up a whitespace or something? <span aria-label=\"surrender\" class=\"emoji emoji-1f3f3\" role=\"img\" title=\"surrender\">:surrender:</span></p>",
        "id": 194545652,
        "sender_full_name": "lcnr",
        "timestamp": 1587217876
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/dc0823a9a766ee6f72f5a7b013d7cb8288bf7b12/src/librustc_mir/borrow_check/mod.rs#L92-L100\" title=\"https://github.com/rust-lang/rust/blob/dc0823a9a766ee6f72f5a7b013d7cb8288bf7b12/src/librustc_mir/borrow_check/mod.rs#L92-L100\">https://github.com/rust-lang/rust/blob/dc0823a9a766ee6f72f5a7b013d7cb8288bf7b12/src/librustc_mir/borrow_check/mod.rs#L92-L100</a></p>\n<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> I currently check in all queries if the <code>DefId</code> is a const arg and then call the same query with the corresponding param <code>DefId</code>.<br>\nThis causes longer cycles (on potentially valid cycle errors)  than necessary though. I could try and move this check to the callsite instead, but I fear that this is even more complex</p>",
        "id": 194546601,
        "sender_full_name": "lcnr",
        "timestamp": 1587219167
    },
    {
        "content": "<p>It's worse enough to review this PR as is <span aria-label=\"unamused\" class=\"emoji emoji-1f612\" role=\"img\" title=\"unamused\">:unamused:</span></p>",
        "id": 194546631,
        "sender_full_name": "lcnr",
        "timestamp": 1587219229
    },
    {
        "content": "<p>See <a href=\"https://github.com/rust-lang/rust/pull/71154/commits/dc0823a9a766ee6f72f5a7b013d7cb8288bf7b12\" title=\"https://github.com/rust-lang/rust/pull/71154/commits/dc0823a9a766ee6f72f5a7b013d7cb8288bf7b12\">https://github.com/rust-lang/rust/pull/71154/commits/dc0823a9a766ee6f72f5a7b013d7cb8288bf7b12</a></p>",
        "id": 194546730,
        "sender_full_name": "lcnr",
        "timestamp": 1587219333
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span>: I shall try to take a look soon :)</p>",
        "id": 194547042,
        "sender_full_name": "varkor",
        "timestamp": 1587219730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> btw if the PR isn't marked as Draft, please do</p>",
        "id": 194547482,
        "sender_full_name": "eddyb",
        "timestamp": 1587220382
    },
    {
        "content": "<p>it is <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 194547486,
        "sender_full_name": "varkor",
        "timestamp": 1587220398
    },
    {
        "content": "<p>I bet when I finally get to it I will regret taking the time to get to it lol</p>",
        "id": 194547498,
        "sender_full_name": "eddyb",
        "timestamp": 1587220417
    },
    {
        "content": "<p>It is still marked as draft, will take a few more hours for me to get through this <a href=\"/user_uploads/4715/1e1Nmw9_HN7zpqne3KAw6rm0/Screenshot-from-2020-04-18-16-33-33.png\" title=\"Screenshot-from-2020-04-18-16-33-33.png\">Screenshot-from-2020-04-18-16-33-33.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/1e1Nmw9_HN7zpqne3KAw6rm0/Screenshot-from-2020-04-18-16-33-33.png\" title=\"Screenshot-from-2020-04-18-16-33-33.png\"><img src=\"/user_uploads/4715/1e1Nmw9_HN7zpqne3KAw6rm0/Screenshot-from-2020-04-18-16-33-33.png\"></a></div>",
        "id": 194547561,
        "sender_full_name": "lcnr",
        "timestamp": 1587220461
    },
    {
        "content": "<blockquote>\n<p>I bet when I finally get to it I will regret taking the time to get to it lol</p>\n</blockquote>\n<p>It is horrible</p>",
        "id": 194547576,
        "sender_full_name": "lcnr",
        "timestamp": 1587220473
    },
    {
        "content": "<p>lol</p>",
        "id": 194547762,
        "sender_full_name": "varkor",
        "timestamp": 1587220752
    },
    {
        "content": "<p>I love reviewing 1k-line PRs :)</p>",
        "id": 194547771,
        "sender_full_name": "varkor",
        "timestamp": 1587220770
    },
    {
        "content": "<p><code>crate fn mir_built(tcx: TyCtxt&lt;'_&gt;, (def_id, param_def_id): (DefId, Option&lt;DefId&gt;)) -&gt; &amp;ty::steal::Steal&lt;BodyAndCache&lt;'_&gt;&gt; {</code><br>\nWhy doesn't rustfmt split this line :O</p>",
        "id": 194547941,
        "sender_full_name": "lcnr",
        "timestamp": 1587220988
    },
    {
        "content": "<p>rustfmt is imperfect</p>",
        "id": 194548518,
        "sender_full_name": "varkor",
        "timestamp": 1587221774
    },
    {
        "content": "<p>Some tips for cleaning up this commit history? <a href=\"/user_uploads/4715/NSe5aZama0JMBx6w4hiD1Mei/Screenshot-from-2020-04-18-17-08-29.png\" title=\"Screenshot-from-2020-04-18-17-08-29.png\">Screenshot-from-2020-04-18-17-08-29.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/NSe5aZama0JMBx6w4hiD1Mei/Screenshot-from-2020-04-18-17-08-29.png\" title=\"Screenshot-from-2020-04-18-17-08-29.png\"><img src=\"/user_uploads/4715/NSe5aZama0JMBx6w4hiD1Mei/Screenshot-from-2020-04-18-17-08-29.png\"></a></div><p>The PR should now be at least somewhat coherent <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 194549163,
        "sender_full_name": "lcnr",
        "timestamp": 1587222642
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/71154\" title=\"https://github.com/rust-lang/rust/pull/71154\">https://github.com/rust-lang/rust/pull/71154</a> no draft no more</p>",
        "id": 194550066,
        "sender_full_name": "lcnr",
        "timestamp": 1587223722
    },
    {
        "content": "<p>lmao <a href=\"https://github.com/rust-lang/rust/pull/71154#issuecomment-613709634\" title=\"https://github.com/rust-lang/rust/pull/71154#issuecomment-613709634\">https://github.com/rust-lang/rust/pull/71154#issuecomment-613709634</a></p>",
        "id": 194550318,
        "sender_full_name": "eddyb",
        "timestamp": 1587224045
    },
    {
        "content": "<p>I will do that again</p>",
        "id": 194550321,
        "sender_full_name": "eddyb",
        "timestamp": 1587224049
    },
    {
        "content": "<p>please keep it \"draft\" until I can review</p>",
        "id": 194550326,
        "sender_full_name": "eddyb",
        "timestamp": 1587224056
    },
    {
        "content": "<blockquote>\n<p>btw if the PR isn't marked as Draft, please do</p>\n</blockquote>\n<p>you meant if it isn't marked as Draft, please mark it as such?</p>",
        "id": 194550348,
        "sender_full_name": "lcnr",
        "timestamp": 1587224107
    },
    {
        "content": "<p>Not \"if it isn't marked as Draft, please review it soon\"</p>",
        "id": 194550373,
        "sender_full_name": "lcnr",
        "timestamp": 1587224129
    },
    {
        "content": "<p>argh, the former</p>",
        "id": 194550381,
        "sender_full_name": "eddyb",
        "timestamp": 1587224152
    },
    {
        "content": "<p><span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 194550384,
        "sender_full_name": "lcnr",
        "timestamp": 1587224158
    },
    {
        "content": "<p>/me shouldn't use terse English constructs</p>",
        "id": 194550422,
        "sender_full_name": "eddyb",
        "timestamp": 1587224165
    },
    {
        "content": "<p>they sound fancy but they're ambiguous for everyone other than the person who wrote them</p>",
        "id": 194550430,
        "sender_full_name": "eddyb",
        "timestamp": 1587224181
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"216206\">Bastian Kauschke</span> <a href=\"#narrow/stream/131828-t-compiler/topic/lazy.20normalization.20example/near/194549163\" title=\"#narrow/stream/131828-t-compiler/topic/lazy.20normalization.20example/near/194549163\">said</a>:</p>\n<blockquote>\n<p>Some tips for cleaning up this commit history? <a href=\"/user_uploads/4715/NSe5aZama0JMBx6w4hiD1Mei/Screenshot-from-2020-04-18-17-08-29.png\" title=\"Screenshot-from-2020-04-18-17-08-29.png\">Screenshot-from-2020-04-18-17-08-29.png</a> </p>\n<p>The PR should now be at least somewhat coherent <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>\n</blockquote>\n<p>You could squash commits together, especially commits that are just random cleanup or fixes (see <code>git rebase -i</code>)</p>",
        "id": 194552505,
        "sender_full_name": "mark-i-m",
        "timestamp": 1587227049
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 194553106,
        "sender_full_name": "lcnr",
        "timestamp": 1587227918
    },
    {
        "content": "<p>My main problem is that I probably will end up with one commit containing 500 lines, as I don't know how to split it into selfcontained segments.</p>\n<p>I only changes a few lines per file. Is it better or worse to split it for each crate (i.e. change librustc_mir and then in another commit librustc_typeck) even if these individual commits don't compile?</p>",
        "id": 194553218,
        "sender_full_name": "lcnr",
        "timestamp": 1587228104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@Bastian Kauschke</span> without looking at the PR, it's hard to say. If all the changes are logically the same sort, it might be reasonable to just squash into one big commit. If there are smaller self-contained commits that could be separated out, that could also be good. Also, if eddyb (as the reviewer) has a preference, you should do that.</p>",
        "id": 194553548,
        "sender_full_name": "mark-i-m",
        "timestamp": 1587228578
    },
    {
        "content": "<p>Another trick is to <code>git reset</code> back to the head so all of the changes are unstaged. You can then do <code>git add -p</code> to stage just the parts you want and rebuild your commit history however you want.</p>",
        "id": 194553601,
        "sender_full_name": "mark-i-m",
        "timestamp": 1587228630
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/71154\" title=\"https://github.com/rust-lang/rust/pull/71154\">https://github.com/rust-lang/rust/pull/71154</a> currently still fails when using multiple crates.</p>\n<p>As <code>typeck_tables</code> now doesn't call <code>type_of(const_arg)</code> anymore, other crates ,ay call <code>type_of</code>[more accurately <code>const_param_of</code>) which must not happen, as this query requires the <code>local_hir_id</code>. <a href=\"https://github.com/rust-lang/rust/blob/c94d6b5e1807b6487c676a75e4485f9becda8e2e/src/librustc_typeck/collect/type_of.rs#L24\" title=\"https://github.com/rust-lang/rust/blob/c94d6b5e1807b6487c676a75e4485f9becda8e2e/src/librustc_typeck/collect/type_of.rs#L24\">https://github.com/rust-lang/rust/blob/c94d6b5e1807b6487c676a75e4485f9becda8e2e/src/librustc_typeck/collect/type_of.rs#L24</a></p>\n<p>Is there a way to get the corresponding generic parameter for a const argument of an external crate?</p>",
        "id": 194590251,
        "sender_full_name": "lcnr",
        "timestamp": 1587291711
    }
]