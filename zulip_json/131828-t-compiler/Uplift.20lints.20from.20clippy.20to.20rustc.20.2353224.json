[
    {
        "content": "<p>I was writing a long list of concerns before I realised that most of these can be quickly answered instead over chat</p>",
        "id": 131239575,
        "sender_full_name": "nagisa",
        "timestamp": 1533910426
    },
    {
        "content": "<p>@rfcbot concern false positives in eq_op?</p>\n<blockquote>\n<p>Checks for equal operands to comparison, logical and bitwise, difference and division binary operators (==, &gt;, etc., &amp;&amp;, ||, &amp;, |, ^, - and /).</p>\n</blockquote>\n<p><code>x ^ x</code> or <code>x - x</code> could be an easy way to get yourself a literal zero in generic code that otherwise already depends on <code>Sub</code> or <code>BitXor</code>, but does not have any other means of getting a zero yet.</p>",
        "id": 131239623,
        "sender_full_name": "nagisa",
        "timestamp": 1533910443
    },
    {
        "content": "<blockquote>\n<p>concern unclear what level lints are aiming for by default</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>deprecated_semver needs some help from cargo to weed out false positives for crates which are known to use non-semver versioning scheme</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>concern logic_bug ignores short circuiting</p>\n</blockquote>\n<p>and related</p>\n<blockquote>\n<p>concern while_immutable_condition </p>\n</blockquote>\n<p>Does this work correctly with variables marked as <code>mut</code> and modified not by the body, but by the hardware?</p>\n<p>E.g.</p>\n<div class=\"codehilite\"><pre><span></span>spi_peripheral_write(0x42);\n// SPI_PERIPHERAL_STATE_REGISTER may be changed by the hardware.\nwhile (SPI_PERIPHERAL_STATE_REGISTER &amp; READ_READY == 0) {\n}\nlet read_byte = spi_peripheral_read();\n</pre></div>",
        "id": 131239665,
        "sender_full_name": "nagisa",
        "timestamp": 1533910533
    },
    {
        "content": "<p>using <code>x ^ x</code> to get a \"zero\" where there isn't naturally a zero seems a bit hacky — there's no guarantee this has to be zero for custom traits</p>",
        "id": 131239673,
        "sender_full_name": "varkor",
        "timestamp": 1533910558
    },
    {
        "content": "<p>mut_from_ref: This lint checks for functions that take immutable references and return mutable ones.</p>\n<blockquote>\n<p>This is trivially unsound</p>\n</blockquote>\n<p>Does this complain about (because this is not exactly unsound as long as <code>ensure_exclusivity</code> does what its name says.</p>\n<div class=\"codehilite\"><pre><span></span>unsafe fn foo(x: &amp;AtomicUsize) -&gt; &amp;mut u32 {\n    static mut MY_STATIC: u32 = 0;\n    ensure_exclusivity(x);\n    &amp;mut MY_STATIC\n}\n</pre></div>",
        "id": 131239725,
        "sender_full_name": "nagisa",
        "timestamp": 1533910583
    },
    {
        "content": "<p>at the same time, this makes <code>x ^ x</code> not something you want to warn about, exactly because you don't have any guarantees</p>",
        "id": 131239742,
        "sender_full_name": "varkor",
        "timestamp": 1533910604
    },
    {
        "content": "<p>it would be easy to check that the types are integers, I imagine</p>",
        "id": 131239777,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533910632
    },
    {
        "content": "<p>seems reasonable for specific built-in types</p>",
        "id": 131239891,
        "sender_full_name": "varkor",
        "timestamp": 1533910772
    },
    {
        "content": "<blockquote>\n<p>at the same time, this makes <code>x ^ x</code> not something you want to warn about, exactly because you don't have any guarantees</p>\n</blockquote>\n<p>Yeah, you don’t want to lint against any of those in generic code, but it is unclear whether clippy takes care to check that, like for many other lints</p>",
        "id": 131239901,
        "sender_full_name": "nagisa",
        "timestamp": 1533910797
    },
    {
        "content": "<p>the clippy descriptions are very concise and not at all appropriate for making decisions like whether the lint should be included into the compiler</p>",
        "id": 131239970,
        "sender_full_name": "nagisa",
        "timestamp": 1533910830
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> ^</p>",
        "id": 131239981,
        "sender_full_name": "nagisa",
        "timestamp": 1533910852
    },
    {
        "content": "<p>it'd be nice to have clippy support on the playground to test these things out directly</p>",
        "id": 131240126,
        "sender_full_name": "varkor",
        "timestamp": 1533911012
    },
    {
        "content": "<blockquote>\n<p>it'd be nice to have clippy support on the playground to test these things out directly</p>\n</blockquote>\n<p>Oh there is!</p>",
        "id": 131240198,
        "sender_full_name": "nagisa",
        "timestamp": 1533911074
    },
    {
        "content": "<p>on the right hand side there’s a \"Tools\" dropdown</p>",
        "id": 131240200,
        "sender_full_name": "nagisa",
        "timestamp": 1533911083
    },
    {
        "content": "<p>and in it there’s clippy. I absolutely forgot about that</p>",
        "id": 131240208,
        "sender_full_name": "nagisa",
        "timestamp": 1533911099
    },
    {
        "content": "<p>Well, the <code>mut_from_ref</code> definitely fails my test.</p>",
        "id": 131240307,
        "sender_full_name": "nagisa",
        "timestamp": 1533911185
    },
    {
        "content": "<p>I do feel like some very minimal amount of false positives are ok —</p>",
        "id": 131240392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911257
    },
    {
        "content": "<p>not sure which of your examples meets that test</p>",
        "id": 131240399,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911262
    },
    {
        "content": "<p>but if you are doing something very subtle</p>",
        "id": 131240402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911266
    },
    {
        "content": "<p>to my mind, it is ok to <code>#[allow()]</code> a lint — good place to leave a comment :)</p>",
        "id": 131240415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911275
    },
    {
        "content": "<p>basically that's kind of my rule</p>",
        "id": 131240426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911282
    },
    {
        "content": "<p>if I wrote that code, would I also write a comment like <code>// Subtle: ...</code>?</p>",
        "id": 131240485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911303
    },
    {
        "content": "<p>if so, a lint makes sense, since it reminds me to write the comment :)</p>",
        "id": 131240493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911310
    },
    {
        "content": "<p>well, neither of my examples are subtle, but rather something that you wouldn’t really do on your usual hosted platform</p>",
        "id": 131240559,
        "sender_full_name": "nagisa",
        "timestamp": 1533911402
    },
    {
        "content": "<p>some of the lints seem to be fairly opionated on how exactly a platform should work. We could allow-by-default these lints on platforms which do not adhere to the opinions though.</p>",
        "id": 131240687,
        "sender_full_name": "nagisa",
        "timestamp": 1533911469
    },
    {
        "content": "<p>I consider </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">AtomicUsize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">MY_STATIC</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ensure_exclusivity</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">MY_STATIC</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>somewhat subtle.</p>",
        "id": 131240792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911535
    },
    {
        "content": "<p>I'm not convinced it even makes sense -- when/how does the \"lock\" from <code>ensure_exclusivity</code> get released?</p>",
        "id": 131240818,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911562
    },
    {
        "content": "<p>I would write such code (well, with some additional linkage attributes) on a bare metal program in a blink of an eye</p>",
        "id": 131240867,
        "sender_full_name": "nagisa",
        "timestamp": 1533911595
    },
    {
        "content": "<p>and you ought to comment it =)</p>",
        "id": 131240880,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911603
    },
    {
        "content": "<p>but yes I might be overlooking the platform specifics or something, I don't know</p>",
        "id": 131240895,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911621
    },
    {
        "content": "<p>in general I agree that compiler should be conservative when it comes to false positive..</p>",
        "id": 131240978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1533911655
    },
    {
        "content": "<p>I'm absolutely fine with making this a hosted-platform-only lint. I didn't consider embedded at all for this.</p>",
        "id": 132033972,
        "sender_full_name": "oli",
        "timestamp": 1534151442
    },
    {
        "content": "<p>wrt eq_op: we can totally ignore it if the args are of a generic type for value computing operators. I don't think comparison operators are problematic like this. While <code>x == x</code> can be false (for e.g. floats), there are definitely better ways to check constraints</p>",
        "id": 132034270,
        "sender_full_name": "oli",
        "timestamp": 1534151774
    }
]