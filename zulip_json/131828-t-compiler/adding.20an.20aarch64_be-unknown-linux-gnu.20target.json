[
    {
        "content": "<p>I've been slowly stumbling my way through adding support for arm64 big endian to rust/rustc, but I've kind of hit a wall at the moment.<br>\nWhat I'm currently doing is attempting to cross compile rust for aarch64_be.  </p>\n<p>I have a Gentoo host which has an aarch64_be cross compiler built on it.  I've added the target, and I'm currently attempting to build rust and I can build my own amd64 rustc which does have the aarch64_be-unknown-linux-gnu target in it, however I'm stuck trying to figure out how to use that built version as the one to build the aarch64_be version.</p>\n<p>The following may be overkill, but unfortunately the documentation for adding a target seems to be lacking (or at least, I couldn't find anything with my searches, aside from an issue where someone was working on the documentation but got bored with it so stopped.)</p>\n<p>My source checkout is /storage/rust/rust, and everything that is built, is in /storage/rust/build.  I run the following commands from /storage/rust.</p>\n<div class=\"codehilite\"><pre><span></span>CC_aarch64_be_unknown_linux_gnu=aarch64_be-unknown-linux-gnu-gcc AR_aarch64_be_unknown_linux_gnu=aarch64_be-unknown-linux-gnu-ar CXX_aarch64_be_unknown_linux_gnu=aarch64_be-unknown-linux-gnu-g++ LD_aarch64_be_unknown_linux_gnu=aarch64_be-unknown-linux-gnu-ld ARCH=x86_64 BUILD=x86_64-unknown-linux-gnu HOST=aarch64_be-unknown-linux-gnu PREFIX=x86_64-unknown-linux-gnu  SRC_DIR=/storage/rust/rust /storage/rust/rust/configure --enable-ccache --enable-ninja --full-bootstrap --host=$HOST\n\nnice $SRC_DIR/x.py build src/llvm --host $BUILD\n\nnice $SRC_DIR/x.py build src/rustc --host $HOST\n</pre></div>\n\n\n<p>This seems to do the correct thing, except when I get to the part where it tries to build for $HOST, the stage0 it tries to use is still the one downloaded, which doesn't have the aarch64_be-unknown-linux-gnu target in it.  What I'm trying to figure out and haven't been able to, is how to point it to the compiler I've just built?  I'm assuming I can use --local-rust-root=/storage/rust/build/$something but I'm not sure what $somethiing should be, or if I'm even along the right path.</p>\n<p>Any help would be greatly appreciated.</p>\n<p>The output I get, when I am attempting to run the above commands is:</p>\n<div class=\"codehilite\"><pre><span></span>Updating only changed submodules\nSubmodules updated in 0.08 seconds\n    Finished dev [unoptimized] target(s) in 0.37s\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.37s\nCopying stage0 std from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding stage0 test artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.35s\nCopying stage0 test from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding stage0 compiler artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.43s\nCopying stage0 rustc from stage0 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding stage0 codegen artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu, llvm)\n    Finished release [optimized] target(s) in 0.30s\nAssembling stage1 compiler (x86_64-unknown-linux-gnu)\nBuilding stage1 std artifacts (x86_64-unknown-linux-gnu -&gt; aarch64_be-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.31s\nCopying stage1 std from stage1 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / aarch64_be-unknown-linux-gnu)\nBuilding stage1 test artifacts (x86_64-unknown-linux-gnu -&gt; aarch64_be-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.35s\nCopying stage1 test from stage1 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / aarch64_be-unknown-linux-gnu)\nBuilding stage1 std artifacts (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.30s\nCopying stage1 std from stage1 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / x86_64-unknown-linux-gnu)\nBuilding stage1 compiler artifacts (x86_64-unknown-linux-gnu -&gt; aarch64_be-unknown-linux-gnu)\n    Finished release [optimized] target(s) in 0.42s\nCopying stage1 rustc from stage1 (x86_64-unknown-linux-gnu -&gt; x86_64-unknown-linux-gnu / aarch64_be-unknown-linux-gnu)\nBuilding stage1 codegen artifacts (x86_64-unknown-linux-gnu -&gt; aarch64_be-unknown-linux-gnu, llvm)\n    Finished release [optimized] target(s) in 0.34s\nAssembling stage2 compiler (aarch64_be-unknown-linux-gnu)\nUplifting stage1 std (x86_64-unknown-linux-gnu -&gt; aarch64_be-unknown-linux-gnu)\nCopying stage2 std from stage1 (x86_64-unknown-linux-gnu -&gt; aarch64_be-unknown-linux-gnu / aarch64_be-unknown-linux-gnu)\nBuilding stage0 std artifacts (x86_64-unknown-linux-gnu -&gt; aarch64_be-unknown-linux-gnu)\nerror: failed to run `rustc` to learn about target-specific information\n\nCaused by:\n  process didn&#39;t exit successfully: `/storage/rust/build/bootstrap/debug/rustc - --crate-name ___ --print=file-names --target aarch64_be-unknown-linux-gnu --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro` (exit code: 1)\n--- stderr\nerror: Error loading target specification: Could not find specification for target &quot;aarch64_be-unknown-linux-gnu&quot;\n  |\n  = help: Use `--print target-list` for a list of built-in targets\n\n\ncommand did not execute successfully: &quot;/storage/rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;aarch64_be-unknown-linux-gnu&quot; &quot;-j&quot; &quot;8&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind jemalloc backtrace&quot; &quot;--manifest-path&quot; &quot;/storage/rust/rust/src/libstd/Cargo.toml&quot; &quot;--message-format&quot; &quot;json&quot;\nexpected success, got: exit code: 101\nthread &#39;main&#39; panicked at &#39;cargo must succeed&#39;, bootstrap/compile.rs:1112:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nfailed to run: /storage/rust/build/bootstrap/debug/bootstrap build src/rustc --host=aarch64_be-unknown-linux-gnu\nBuild completed unsuccessfully in 0:00:06```\n</pre></div>",
        "id": 137072373,
        "sender_full_name": "Steev",
        "timestamp": 1541182541
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>, who <em>probably</em> knows the most about adding new targets? Certainly I would expect <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> to know the answer to this:</p>\n<blockquote>\n<p>What I'm trying to figure out and haven't been able to, is how to point it to the compiler I've just built? I'm assuming I can use --local-rust-root=/storage/rust/build/$something but I'm not sure what $somethiing should be, or if I'm even along the right path.</p>\n</blockquote>",
        "id": 137073380,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"134454\">@Steev</span> the <code>--local-rust-root</code> should be the same as <code>rustc --print sysroot</code>, aka the folder containing <code>bin</code> which in turns contains <code>rustc</code></p>",
        "id": 137073770,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1541183681
    },
    {
        "content": "<p>and that may fix your issue?</p>",
        "id": 137073796,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1541183709
    },
    {
        "content": "<p>It doesn't seem to.  I've added everything to a script here, my script looks like the following:</p>\n<div class=\"codehilite\"><pre><span></span>main() {\n    #ARCH=aarch64_be\n    ARCH=x86_64\n    BUILD=x86_64-unknown-linux-gnu\n    HOST=aarch64_be-unknown-linux-gnu\n    #HOST=x86_64-unknown-linux-gnu\n    PREFIX=x86_64-unknown-linux-gnu\n    CC_aarch64_be_unknown_linux_gnu=aarch64_be-unknown-linux-gnu-gcc\n    AR_aarch64_be_unknown_linux_gnu=aarch64_be-unknown-linux-gnu-ar\n    CXX_aarch64_be_unknown_linux_gnu=aarch64_be-unknown-linux-gnu-g++\n    LD_aarch64_be_unknown_linux_gnu=aarch64_be-unknown-linux-gnu-ld\n    RUSTC_LINKER=aarch64_be-unknown-linux-gnu-gcc\n\n   $SRC_DIR/configure \\\n       --enable-ccache \\\n       --enable-ninja \\\n       --enable-rustbuild \\\n       --local-rust-root=/storage/rust/build/x86_64-unknown-linux-gnu/stage2/ \\\n       --enable-local-rebuild \\\n       --full-bootstrap \\\n       --host=$HOST\n\n   # work around rust-lang/rust#38037\n   nice $SRC_DIR/x.py build src/llvm --host=$BUILD\n\n   # STDOUT\n   # Building LLVM for x86_64-unknown-linux-gnu\n\n   nice $SRC_DIR/x.py build src/rustc --host=$HOST\n</pre></div>\n\n\n<p>And I get </p>\n<div class=\"codehilite\"><pre><span></span>Building stage0 std artifacts (x86_64-unknown-linux-gnu -&gt; aarch64_be-unknown-linux-gnu)\nerror: failed to run `rustc` to learn about target-specific information\n\nCaused by:\n  process didn&#39;t exit successfully: `/storage/rust/build/bootstrap/debug/rustc - --crate-name ___ --print=file-names --target aarch64_be-unknown-linux-gnu --crate-type bin --crate-type rlib --crate-type dylib --crate-type cdylib --crate-type staticlib --crate-type proc-macro` (exit code: 1)\n--- stderr\nerror: Error loading target specification: Could not find specification for target &quot;aarch64_be-unknown-linux-gnu&quot;\n  |\n  = help: Use `--print target-list` for a list of built-in targets\n\n\ncommand did not execute successfully: &quot;/storage/rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;aarch64_be-unknown-linux-gnu&quot; &quot;-j&quot; &quot;8&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind jemalloc backtrace&quot; &quot;--manifest-path&quot; &quot;/storage/rust/rust/src/libstd/Cargo.toml&quot; &quot;--message-format&quot; &quot;json&quot;\nexpected success, got: exit code: 101\nthread &#39;main&#39; panicked at &#39;cargo must succeed&#39;, bootstrap/compile.rs:1112:9\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\nfailed to run: /storage/rust/build/bootstrap/debug/bootstrap build src/rustc --host=aarch64_be-unknown-linux-gnu\nBuild completed unsuccessfully in 0:00:06\n</pre></div>\n\n\n<p>Still.  Someone on discord mentioned using the cargo.toml to set the rustc to use, but I'm not sure how the interaction works between using the configure script and the cargo.toml file.</p>",
        "id": 137074896,
        "sender_full_name": "Steev",
        "timestamp": 1541184754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> so... no go.  Every time it goes to create the stage0 std artifacts, it uses the /storage/rust/build/bootstrap/debug/rustc.</p>\n<div class=\"codehilite\"><pre><span></span># Instead of downloading the src/stage0.txt version of the compiler\n# specified, use this rustc binary instead as the stage0 snapshot compiler.\nrustc = &quot;/storage/rust/build/x86_64-unknown-linux-gnu/stage2/bin/rustc&quot;\n</pre></div>\n\n\n<p>At this point, I have no idea.  I don't really understand why the bootstrapped rustc doesn't have the target in it, but the stage2 one does.</p>",
        "id": 137081054,
        "sender_full_name": "Steev",
        "timestamp": 1541191206
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"134454\">@Steev</span> oh the <code>.../bootstrap/debug/rustc</code> isn't the actual rustc that's used, it's just a thin wrapper. If you pass <code>-vv</code> to <code>./x.py build</code> you should see the real rustc being used somewhere in the output. Specifying that <code>rustc</code> should work as well though. Have you tried running the rustc manually to make sure it supports the target in question?</p>",
        "id": 137081212,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1541191410
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 137081441,
        "sender_full_name": "Steev",
        "timestamp": 1541191616
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> Okay, yes, it's still using the stage0 - </p>\n<div class=\"codehilite\"><pre><span></span>rustc command: &quot;LD_LIBRARY_PATH&quot;=&quot;/storage/rust/build/x86_64-unknown-linux-gnu/stage0-sysroot/lib:&quot; &quot;/storage/rust/build/x86_64-unknown-linux-gnu/stage0/bin/rustc&quot; &quot;-&quot; &quot;--crate-name&quot; &quot;___&quot; &quot;--print=file-names&quot; &quot;--target&quot; &quot;aarch64_be-unknown-linux-gnu&quot; &quot;--crate-type&quot; &quot;bin&quot; &quot;--crate-type&quot; &quot;rlib&quot; &quot;--crate-type&quot; &quot;dylib&quot; &quot;--crate-type&quot; &quot;cdylib&quot; &quot;--crate-type&quot; &quot;staticlib&quot; &quot;--crate-type&quot; &quot;proc-macro&quot; &quot;--cfg&quot; &quot;stage0&quot; &quot;--sysroot&quot; &quot;/storage/rust/build/x86_64-unknown-linux-gnu/stage0-sysroot&quot; &quot;-Cprefer-dynamic&quot; &quot;-Clinker=aarch64_be-unknown-linux-gnu-gcc&quot; &quot;-C&quot; &quot;debug-assertions=n&quot; &quot;-C&quot; &quot;link-args=-Wl,-rpath,$ORIGIN/../lib&quot; &quot;-Z&quot; &quot;force-unstable-if-unmarked&quot;\nsysroot: &quot;/storage/rust/build/x86_64-unknown-linux-gnu/stage0-sysroot&quot;\nlibdir: &quot;/storage/rust/build/x86_64-unknown-linux-gnu/stage0-sysroot/lib&quot;\nerror: Error loading target specification: Could not find specification for target &quot;aarch64_be-unknown-linux-gnu&quot;\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>steev@oswin /storage/rust $ ./build/x86_64-unknown-linux-gnu/stage2/bin/rustc --print target-list | grep aarch64\naarch64-fuchsia\naarch64-linux-android\naarch64-pc-windows-msvc\naarch64-unknown-cloudabi\naarch64-unknown-freebsd\naarch64-unknown-hermit\naarch64-unknown-linux-gnu\naarch64-unknown-linux-musl\naarch64-unknown-netbsd\naarch64-unknown-none\naarch64-unknown-openbsd\naarch64_be-unknown-linux-gnu\n</pre></div>\n\n\n<p>(sorry if this got sent twice, I'm still trying to figure out zulip)</p>",
        "id": 137082115,
        "sender_full_name": "Steev",
        "timestamp": 1541192209
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"134454\">@Steev</span> this may be a bug in rustbuild then?</p>",
        "id": 137083575,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1541193757
    },
    {
        "content": "<p>I'm not sure :(</p>",
        "id": 137083578,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1541193762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> so, i did something hacky and worked around the issue by taking the x86_64 rustc toolchain that i'd built, and installed it to a temporary directory and then once the install finished, moved it into the stage0 directory...  this appears to be working, so while it's not ideal, it is a bit of a workaround.</p>",
        "id": 137089598,
        "sender_full_name": "Steev",
        "timestamp": 1541201525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> i think i'm going about this the wrong way - ideally, i'd be able to point the build at my freshly built toolchain, but perhaps I should instead send a pull request enabling aarch64_be as a target first, and then deal with trying to get aarch64_be building as a host?</p>",
        "id": 137126418,
        "sender_full_name": "Steev",
        "timestamp": 1541275093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"134454\">@Steev</span> yeah adding the target first probably makes sense! We can take the other issues from there</p>",
        "id": 146806090,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1541434650
    }
]