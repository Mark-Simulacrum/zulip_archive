[
    {
        "content": "<p>Hi, I just read <a href=\"https://nnethercote.github.io/2022/02/25/how-to-speed-up-the-rust-compiler-in-2022.html\">https://nnethercote.github.io/2022/02/25/how-to-speed-up-the-rust-compiler-in-2022.html</a> witch has a comment \"Cargo’s scheduling may have room for improvement\".<br>\nMy main reaction is, Yes Yes it definitely can be improved! The other reaction, is please talk to us (the Cargo team) before putting a lot of work into a solution. We have ideas and requirements on how it can be fixed.</p>",
        "id": 273243088,
        "sender_full_name": "Eh2406",
        "timestamp": 1645802877
    },
    {
        "content": "<p>as I'm currently looking into that: noted, thanks for the heads up :)</p>",
        "id": 273243695,
        "sender_full_name": "lqd",
        "timestamp": 1645803194
    },
    {
        "content": "<p>in the meantime, is there some way I can help with <a href=\"https://github.com/rust-lang/cargo/pull/10388\">https://github.com/rust-lang/cargo/pull/10388</a> ?</p>",
        "id": 273243738,
        "sender_full_name": "lqd",
        "timestamp": 1645803220
    },
    {
        "content": "<p>It just needs reviewer time, and we have a lot of big things happening. Sorry. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 273244107,
        "sender_full_name": "Eh2406",
        "timestamp": 1645803432
    },
    {
        "content": "<p>What is your plan of attack on the scheduling front?</p>",
        "id": 273244230,
        "sender_full_name": "Eh2406",
        "timestamp": 1645803491
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/cargo/pull/8908\">https://github.com/rust-lang/cargo/pull/8908</a> already laid some groundwork by adding weights to the graph. the default weights are all 1, so what's missing is a way to feed in custom weights based on measurements (probably based on a -j1 build? or by measuring CPU cycles spent instead of wall-time?)</p>",
        "id": 273244464,
        "sender_full_name": "The 8472",
        "timestamp": 1645803606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Cargo.E2.80.99s.20scheduling.20may.20have.20room.20for.20improvement.2E/near/273244107\">said</a>:</p>\n<blockquote>\n<p>It just needs reviewer time, and we have a lot of big things happening. Sorry. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>\n</blockquote>\n<p>no worries whatsoever, focusing on the most important things first is great. this issue doesn't seem urgent anyways.</p>",
        "id": 273244588,
        "sender_full_name": "lqd",
        "timestamp": 1645803674
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"120179\">Eh2406</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Cargo.E2.80.99s.20scheduling.20may.20have.20room.20for.20improvement.2E/near/273244230\">said</a>:</p>\n<blockquote>\n<p>What is your plan of attack on the scheduling front?</p>\n</blockquote>\n<p>at first, I was looking into sorting the pending queue so that the dependency queue priorities can affect the already enqueued jobs; and I was manually hacking higher costs per crate à la <a href=\"https://github.com/rust-lang/cargo/issues/7437\">https://github.com/rust-lang/cargo/issues/7437</a></p>",
        "id": 273244793,
        "sender_full_name": "lqd",
        "timestamp": 1645803789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330154\">The 8472</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Cargo.E2.80.99s.20scheduling.20may.20have.20room.20for.20improvement.2E/near/273244464\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/rust-lang/cargo/pull/8908\">https://github.com/rust-lang/cargo/pull/8908</a> already laid some groundwork by adding weights to the graph. the default weights are all 1, so what's missing is a way to feed in custom weights based on measurements (probably based on a -j1 build? or by measuring CPU cycles spent instead of wall-time?)</p>\n</blockquote>\n<p>I was looking at first at making something like this static and opt-in, so no dynamism based on measurements, because it's extremely contextual: depending on the crate, the machine and available parallelism, the type of build, its position in the schedule, etc. (and also: it's easier). -j1 disables the parallelism in the backend and that is significantly slower than a regular build</p>",
        "id": 273245733,
        "sender_full_name": "lqd",
        "timestamp": 1645804345
    },
    {
        "content": "<p>So I see two big issues with that (both of which are solvable, but not as simple as they first appear):</p>\n<ul>\n<li>can we get real data on how different heuristics affect build time? The hard way is to implement a bunch of different heuristics, build a lot of important crates on a lot of different size machines, and analyze all the data. An alternative is to make some interactive tool for guessing the build time of a <code>-Ztimings</code> file if other heuristics or size machines had been used.</li>\n<li>the other question is where do we store data from past runs to use as weights? Presumably we don't want it to be project specific, we want the system to learn that <code>syn</code> is slow and use that on the next project. But if it is shared then we will need some kind of locking to protect against multiple Cargos editing it at the same time. And it's easy for the locking to become a bottle neec.</li>\n</ul>",
        "id": 273246766,
        "sender_full_name": "Eh2406",
        "timestamp": 1645804856
    },
    {
        "content": "<p>as I've focused on the \"hacky\" use-case (that is, I'm not planning on looking at optimizing the schedule via past runs any time soon), I do have data for prioritizing syn/quote/proc-macro2 in the schedule, timings on 150 crates or so, if that's of interest</p>",
        "id": 273247242,
        "sender_full_name": "lqd",
        "timestamp": 1645805046
    },
    {
        "content": "<p>If you build a hacky solution and use it, the data would be useful for answering my first question!</p>",
        "id": 273247763,
        "sender_full_name": "Eh2406",
        "timestamp": 1645805292
    },
    {
        "content": "<p>I do have an in-progress prototype of the idea I described above, terrible and hardcoded (and I don't believe it to be correct in the general case yet)</p>",
        "id": 273248139,
        "sender_full_name": "lqd",
        "timestamp": 1645805513
    },
    {
        "content": "<p>but seems to work in my limited testing</p>",
        "id": 273248228,
        "sender_full_name": "lqd",
        "timestamp": 1645805547
    },
    {
        "content": "<p>The data would definitely be helpful for prioritization!</p>",
        "id": 273248536,
        "sender_full_name": "Eh2406",
        "timestamp": 1645805702
    },
    {
        "content": "<p>I'll test it more, and better, and get back to you with a branch and numbers</p>",
        "id": 273248570,
        "sender_full_name": "lqd",
        "timestamp": 1645805720
    },
    {
        "content": "<p>just to be clear, you mean prioritization of that work/reviews/Etc, or prioritization in cargo's schedule ? :)</p>",
        "id": 273248717,
        "sender_full_name": "lqd",
        "timestamp": 1645805778
    },
    {
        "content": "<p>if you want data about cargo timings (without that hack) I do have that rn <a href=\"https://github.com/lqd/rustc-benchmarking-data/tree/main/results\">https://github.com/lqd/rustc-benchmarking-data/tree/main/results</a></p>",
        "id": 273248817,
        "sender_full_name": "lqd",
        "timestamp": 1645805827
    },
    {
        "content": "<p>and if you're looking for something in particular, let me know and I'll gather it</p>",
        "id": 273248911,
        "sender_full_name": "lqd",
        "timestamp": 1645805878
    },
    {
        "content": "<blockquote>\n<p>just to be clear, you mean prioritization of that work/reviews/Etc, or prioritization in cargo's schedule ? :)</p>\n</blockquote>\n<p>I meant in what things are team chooses to work on.</p>",
        "id": 273249061,
        "sender_full_name": "Eh2406",
        "timestamp": 1645805937
    },
    {
        "content": "<p>ok, understood :)</p>\n<p>(I also <a href=\"https://github.com/rust-lang/cargo/pull/10388#issuecomment-1049725601\">have data</a> for the PR I linked above if that would matter for prioritization as well)</p>",
        "id": 273249274,
        "sender_full_name": "lqd",
        "timestamp": 1645806039
    },
    {
        "content": "<p>Our opinion so far has been \"we can't really get started until we have a plan for a non hacky way for learning and storing the data\", but if it is a <em>big</em> improvement then maybe we consider some \"hacky\".</p>",
        "id": 273250985,
        "sender_full_name": "Eh2406",
        "timestamp": 1645806891
    },
    {
        "content": "<p>ah I see</p>",
        "id": 273251073,
        "sender_full_name": "lqd",
        "timestamp": 1645806937
    },
    {
        "content": "<p>I'll gather more data, but it looked promising let's say</p>",
        "id": 273251174,
        "sender_full_name": "lqd",
        "timestamp": 1645806976
    },
    {
        "content": "<blockquote>\n<p>maybe we consider some \"hacky\".</p>\n</blockquote>\n<p>or we write up our plan for how to store things, and get your help polishing it up for stable.</p>",
        "id": 273251431,
        "sender_full_name": "Eh2406",
        "timestamp": 1645807089
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120179\">@Eh2406</span> Thanks for starting this topic! @lqd is definitely the person looking at this the most, so it's good you two are talking <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 273425590,
        "sender_full_name": "nnethercote",
        "timestamp": 1645996578
    }
]