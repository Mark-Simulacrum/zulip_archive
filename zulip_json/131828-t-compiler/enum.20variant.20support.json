[
    {
        "content": "<p>Continuing the discussion from <a href=\"https://github.com/rust-lang/rust/pull/89745\">https://github.com/rust-lang/rust/pull/89745</a></p>\n<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span>  Regarding item 1 from the linked PR would this change just involve removing <code>variant_index</code> from <code>PlaceTy</code> and instead using <code>ty::Variant</code>?</p>",
        "id": 257594274,
        "sender_full_name": "zhamlin",
        "timestamp": 1634240904
    },
    {
        "content": "<p>yes</p>",
        "id": 257657010,
        "sender_full_name": "oli",
        "timestamp": 1634282873
    },
    {
        "content": "<p>I believe that shoudl work, as it should only affect code generated during mir building, and never appear in HIR</p>",
        "id": 257657127,
        "sender_full_name": "oli",
        "timestamp": 1634282937
    },
    {
        "content": "<p>Just want to get a higher level picture. So for <code>let x = Enum::A</code>, what would be the plan for <code>x</code>'s type? IIUC it's currently still <code>Enum</code> but the plan is to switch it to <code>Enum::A</code>?</p>",
        "id": 257727610,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634316008
    },
    {
        "content": "<p>More broadly, is the variant -&gt; enum conversion handled by coercion? If so, then we will run into an issue where <code>&amp;x</code> cannot be used as <code>&amp;Enum</code> if <code>x</code> is a of type <code>Enum::A</code> (as coercion doesn't take place here), while <code>&amp;{x}</code> can.</p>",
        "id": 257727802,
        "sender_full_name": "Gary Guo",
        "timestamp": 1634316101
    },
    {
        "content": "<p>the RFC that was postponed specifies that stuff be inferred to the unrefined versions. so <code>x</code> would be <code>let x: Enum = Enum::A</code></p>",
        "id": 257730883,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634317350
    },
    {
        "content": "<p>though it then goes and has pattern bidnings of <code>x @ Enum::A</code> be the refined version so its not particularly consistent on this matter</p>",
        "id": 257730934,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634317371
    },
    {
        "content": "<p>(the postponed RFC also states that there is no subtyping here so <code>Vec&lt;Enum::A&gt;</code> is nto a subtype of <code>Vec&lt;Enum&gt;</code>)</p>",
        "id": 257731103,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1634317440
    },
    {
        "content": "<p>yea, we should probably flesh out those details a bit more... How about we copy the RFC to some hackmd and work on it collaboratively to create an MVP (and keep anything else in the future work section, or linking to other hackmds that flesh those out)</p>",
        "id": 257738209,
        "sender_full_name": "oli",
        "timestamp": 1634320379
    },
    {
        "content": "<p>I got part 1 working (using ty::Varaint in PlaceTy), the code is <a href=\"https://github.com/zhamlin/rust/tree/placety/enum-variant-types\">here</a>.</p>\n<p>There is probably a better way to do this, but I ran into issues when<br>\nexposing PlaceTy.ty directly and instead had to create a fn on PlaceTy to strip the variant type.</p>",
        "id": 257954373,
        "sender_full_name": "zhamlin",
        "timestamp": 1634510276
    },
    {
        "content": "<p>Do you remember details about the issues? I would have hoped we'd not need stripping at this stage</p>",
        "id": 257994329,
        "sender_full_name": "oli",
        "timestamp": 1634546079
    },
    {
        "content": "<p>I think the issue was that <code>ty::Variant</code> was being used from <code>PlaceTy.ty</code> which caused issues with anywhere that was matching with an <code>_</code> arm. </p>\n<p>The test  <code>src/test/ui/nll/enum-drop-access.rs</code>. was failing because of it. There might have been more failing tests because of that issue as well, I can check if needed.</p>",
        "id": 258030195,
        "sender_full_name": "zhamlin",
        "timestamp": 1634564375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@oli</span> Do you want me to create a PR for part 1? Or is the stripping of the variant type on PlaceTy not desired?</p>",
        "id": 258973539,
        "sender_full_name": "zhamlin",
        "timestamp": 1635174734
    },
    {
        "content": "<p>I think we should go with your first version that was exposing <code>ty</code> directly and fix the sites that don't expect a ty::Variant (so we have to check whether any of the sites match on ty::Adt or ty::Generator). The stripping is too prone to silent bugs</p>",
        "id": 258976091,
        "sender_full_name": "oli",
        "timestamp": 1635175767
    },
    {
        "content": "<p>Created a draft <a href=\"https://github.com/rust-lang/rust/pull/90330\">PR</a>, only stripping the variant type at a few places vs creating a helper method on PlaceTy.</p>",
        "id": 259172931,
        "sender_full_name": "zhamlin",
        "timestamp": 1635288602
    }
]