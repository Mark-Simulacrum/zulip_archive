[
    {
        "content": "<p>Example: f&lt;T:Trait&gt;(a:T) {a.m()}.  If I have a substitution T → A for f, and substitution Self → T (rustc::ty::subst::Substs) for the call to Trait::a from f. How can I combine the two substitutions to end up with a.m substitution (Self → A)?</p>",
        "id": 136416313,
        "sender_full_name": "Nora",
        "timestamp": 1540394185
    },
    {
        "content": "<p>I <em>think</em> you want <code>Substs::rebase_onto()</code> but I'm not sure <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/type.Substs.html#method.rebase_onto\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/type.Substs.html#method.rebase_onto\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/subst/type.Substs.html#method.rebase_onto</a></p>",
        "id": 136417632,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1540395445
    },
    {
        "content": "<p>I thought about that too, but I can't figure out what to put in source_ancestor and target_substs.</p>",
        "id": 136418983,
        "sender_full_name": "Nora",
        "timestamp": 1540396685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120905\">@Nora</span> I'm a bit confused by your question</p>",
        "id": 136419213,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540396930
    },
    {
        "content": "<p><code>rebase_onto</code> is used when you have the substitutions from a trait call and you know the substitutions from the specific impl that is implementing the trait</p>",
        "id": 136419222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540396948
    },
    {
        "content": "<p>is that the situation you have?</p>",
        "id": 136419226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540396951
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I don't think that is my situation, I have the substitutions of f from its caller, and I have the substitutions of callee m inside f. <br>\nI want to get the substitutions of m in the context of the f with the given substitutions from its caller. Does this make sense?</p>",
        "id": 136419542,
        "sender_full_name": "Nora",
        "timestamp": 1540397232
    },
    {
        "content": "<p>that is much easier</p>",
        "id": 136420359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398119
    },
    {
        "content": "<p>you just need to apply one set of substitutions to the other</p>",
        "id": 136420400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398125
    },
    {
        "content": "<p>How?</p>",
        "id": 136420448,
        "sender_full_name": "Nora",
        "timestamp": 1540398192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120905\">@Nora</span> e.g.,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">callee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">caller_subst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">...;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">callee_subst</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"n\">callee</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// now we have the type of `value` expressed in terms of its *own* generic parameters</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">type_of</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// now we have the type of `value` expressed in terms of the *callee&#39;s* generic parameters</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value_ty</span><span class=\"p\">.</span><span class=\"n\">subst</span><span class=\"p\">(</span><span class=\"n\">callee_subst</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"c1\">// now we have it in terms of the *caller&#39;s* generic parameters</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">value_ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value_ty</span><span class=\"p\">.</span><span class=\"n\">subst</span><span class=\"p\">(</span><span class=\"n\">caller_subst</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136420469,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398228
    },
    {
        "content": "<p>or you could compose the substitutions first</p>",
        "id": 136420479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398241
    },
    {
        "content": "<p>e.g.,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// callee_subst was (ValueType -&gt; CalleeType)</span>\n<span class=\"c1\">// caller_subst is (CalleeType -&gt; CallerType)</span>\n<span class=\"c1\">// composed_subst is (ValueType -&gt; CallerType)</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">composed_subst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">callee_subst</span><span class=\"p\">.</span><span class=\"n\">subst</span><span class=\"p\">(</span><span class=\"n\">caller_subst</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 136420553,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398299
    },
    {
        "content": "<p>hopefully I got that order right :)</p>",
        "id": 136420560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398304
    },
    {
        "content": "<p>I find the first easier to see</p>",
        "id": 136420566,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1540398309
    },
    {
        "content": "<p>Thank you! The second one works.</p>",
        "id": 136420999,
        "sender_full_name": "Nora",
        "timestamp": 1540398760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  I need a little more help with the substitution. I have the def_id if a method implementation, and I need to get all substitutions coming from the impl. <br>\nConsider the code:<br>\npub trait RngCore {<br>\n    fn next_u32(&amp;mut self);<br>\n}<br>\npub trait BlockRngCore {<br>\n    type Item;<br>\n    fn generate(&amp;mut self);<br>\n}<br>\npub struct BlockRng&lt;R: BlockRngCore&gt; {<br>\n    pub core: R,<br>\n}</p>\n<p>impl&lt;R: BlockRngCore&gt; BlockRng&lt;R&gt; {<br>\n    pub fn generate_and_set(&amp;mut self) {<br>\n        self.core.generate();<br>\n    }<br>\n}</p>\n<p>impl&lt;R: BlockRngCore&lt;Item=u32&gt;&gt; RngCore for BlockRng&lt;R&gt;<br>\n{<br>\n    fn next_u32(&amp;mut self)  {<br>\n        self.generate_and_set();<br>\n    }<br>\n}</p>\n<p>I have the def_id of next_u32, I need to find somehow the substition R--&gt; BlockRngCore&lt;Item=u32&gt;, so I can propagate it. I looked around for a while and I can't figure it out.</p>",
        "id": 137168533,
        "sender_full_name": "Nora",
        "timestamp": 1541360600
    },
    {
        "content": "<p>you can use markdown to paste code (wrap it in 3 backticks)</p>",
        "id": 137172564,
        "sender_full_name": "DPC",
        "timestamp": 1541368164
    },
    {
        "content": "<p>Here is the code properly displayed:</p>\n<div class=\"codehilite\"><pre><span></span>pub trait RngCore {\n    fn next_u32(&amp;mut self);\n}\npub trait BlockRngCore {\n    type Item;\n    fn generate(&amp;mut self);\n}\npub struct BlockRng&lt;R: BlockRngCore&gt; {\n    pub core: R,\n}\n\nimpl&lt;R: BlockRngCore&gt; BlockRng&lt;R&gt; {\n    pub fn generate_and_set(&amp;mut self) {\n        self.core.generate();\n    }\n}\n\nimpl&lt;R: BlockRngCore&lt;Item=u32&gt;&gt; RngCore for BlockRng&lt;R&gt;\n{\n    fn next_u32(&amp;mut self)  {\n        self.generate_and_set();\n    }\n}\n</pre></div>",
        "id": 146787852,
        "sender_full_name": "Nora",
        "timestamp": 1541414451
    }
]