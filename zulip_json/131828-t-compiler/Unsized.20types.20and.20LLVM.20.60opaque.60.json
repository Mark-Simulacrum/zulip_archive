[
    {
        "content": "<p>Does anyone have some insight in the handling of unsized types in LLVM, and why we want <code>opaque</code> for extern types ( <a href=\"https://github.com/rust-lang/rust/issues/59095\" title=\"https://github.com/rust-lang/rust/issues/59095\">https://github.com/rust-lang/rust/issues/59095</a> ), but not for other unsized types like slices (or at least I haven't seen any discussion on the latter)? See my last comment on that Github issue</p>",
        "id": 194709661,
        "sender_full_name": "NeoRaider",
        "timestamp": 1587404782
    },
    {
        "content": "<p>I just realized that there is a wg-llvm stream. It seems moving messages to a different stream is not possible though (for a normal user?)</p>",
        "id": 194733491,
        "sender_full_name": "NeoRaider",
        "timestamp": 1587416821
    },
    {
        "content": "<p>This seems to be one of the few remaining open questions for the stabilization of external types</p>",
        "id": 195086706,
        "sender_full_name": "NeoRaider",
        "timestamp": 1587659494
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"1176\">@WG-llvm</span></p>",
        "id": 195086744,
        "sender_full_name": "NeoRaider",
        "timestamp": 1587659516
    },
    {
        "content": "<p>It seems <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span>'s concern is specifically about statics. I don't think you can have a static of an DST, but apparently with extern types it's possible.</p>",
        "id": 195087075,
        "sender_full_name": "Hanna Kruppe",
        "timestamp": 1587659677
    },
    {
        "content": "<p>Hmm, I wonder. I just played around a bit, and it seems to me like clang emits externals of unknown size as \"size 0\" as well:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">extern</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"n\">foo</span><span class=\"p\">[];</span>\n</pre></div>\n\n\n<p>turns into</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"vg\">@foo</span> <span class=\"p\">=</span> <span class=\"k\">external</span> <span class=\"k\">global</span> <span class=\"p\">[</span><span class=\"m\">0</span> <span class=\"k\">x</span> <span class=\"k\">i8</span><span class=\"p\">],</span> <span class=\"k\">align</span> <span class=\"m\">1</span>\n</pre></div>",
        "id": 195092593,
        "sender_full_name": "NeoRaider",
        "timestamp": 1587662236
    },
    {
        "content": "<p>hm... that's not what \"opaque types\" model though, is it? that would be</p>\n<div class=\"codehilite\"><pre><span></span>struct Foo;\nextern Foo foo;\n</pre></div>",
        "id": 195185100,
        "sender_full_name": "RalfJ",
        "timestamp": 1587733810
    },
    {
        "content": "<p>but my concerns here are mainly fed by just not knowing what exactly will and will not assume about statics, because unfortunately LLVM only scarcely documents such things.</p>",
        "id": 195185156,
        "sender_full_name": "RalfJ",
        "timestamp": 1587733849
    },
    {
        "content": "<p>oh you also wrote a bunch of things in the issue; I'll read those and respond there then :)</p>",
        "id": 195185181,
        "sender_full_name": "RalfJ",
        "timestamp": 1587733868
    }
]