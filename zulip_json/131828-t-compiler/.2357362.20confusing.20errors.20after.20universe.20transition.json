[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I have some simple in-progress work that basically results in <a href=\"https://gist.github.com/lqd/a9a8f8c173735299e75c4804b764c20c\" target=\"_blank\" title=\"https://gist.github.com/lqd/a9a8f8c173735299e75c4804b764c20c\">this diff</a> for dtolnay's original issue <a href=\"https://github.com/rust-lang/rust/issues/57362\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362\">#57362</a>, part of Matthew's <a href=\"https://github.com/rust-lang/rust/issues/57642\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57642\">#57642</a>, and a blessed ui test. My beginner-itude makes me wonder whether this result is good or bad or stupid ugly, and how to improve it in the latter cases. (bbl, there's no rush :)</p>",
        "id": 155278726,
        "sender_full_name": "lqd",
        "timestamp": 1547665579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I was wondering this morning whether we ought to be taking another path in the case of this error</p>",
        "id": 155283037,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547668865
    },
    {
        "content": "<p>as in, maybe the framing of \"mismatched types\" is ungreat</p>",
        "id": 155283068,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547668887
    },
    {
        "content": "<p>though of course those results look good</p>",
        "id": 155283082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547668903
    },
    {
        "content": "<p>with NLLs these specific errors we've been looking at recently are \"higher-rank subtype\" errors rather than \"mismatched types\" (IIRC; but maybe not all of them ofc), so you mean framing these differently with the current errors (coming from AST borrowck right now IIUC) ? or most likely a general approach for these higher-rank errors (maybe linked to incompatible universes)</p>",
        "id": 155283367,
        "sender_full_name": "lqd",
        "timestamp": 1547669099
    },
    {
        "content": "<p>(if these results look interesting I can open a PR tomorrow so that it's better tested and can be reviewed, as I'm not sure how <span class=\"emoji emoji-1f525\" title=\"fire\">:fire:</span> p-high is and if this issue impacts the release/beta train processes happening for the new release)</p>",
        "id": 155284819,
        "sender_full_name": "lqd",
        "timestamp": 1547670143
    },
    {
        "content": "<p>what I meant very concretely was trying to invoke the <code>try_report_placeholder_conflict</code> code from the nice-region-errors module</p>",
        "id": 155288039,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547672527
    },
    {
        "content": "<p>just thinking about this case, not the NLL case yet</p>",
        "id": 155288045,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547672532
    },
    {
        "content": "<p>it reports errors like this</p>",
        "id": 155288053,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547672544
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    // error[E0308]: implementation of `Foo` does not apply to enough lifetimes\n    //   --&gt; /home/nmatsakis/tmp/foo.rs:12:5\n    //    |\n    // 12 |     all::&lt;&amp;&#39;static u32&gt;();\n    //    |     ^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    //    |\n    //    = note: Due to a where-clause on the function `all`,\n    //    = note: `T` must implement `...` for any two lifetimes `&#39;1` and `&#39;2`.\n    //    = note: However, the type `T` only implements `...` for some specific lifetime `&#39;2`.\n</pre></div>",
        "id": 155288059,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547672547
    },
    {
        "content": "<p>those kind of just seem better</p>",
        "id": 155288064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547672553
    },
    {
        "content": "<p>I'm a bit curious why those errors <em>aren't</em> firing</p>",
        "id": 155288082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547672569
    },
    {
        "content": "<p>oh interesting indeed, I will try to find more information on why they don't</p>",
        "id": 155288256,
        "sender_full_name": "lqd",
        "timestamp": 1547672700
    },
    {
        "content": "<p>maybe we don't enter via <code>report_region_errors</code>? I'm not really sure</p>",
        "id": 155288378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547672789
    },
    {
        "content": "<p>I'd just run the test with <code>RUST_LOG</code> and maybe sprinkle some more <code>debug!</code> to find out</p>",
        "id": 155288389,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547672798
    },
    {
        "content": "<p>ok, gotta run</p>",
        "id": 155288392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547672800
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>! =)</p>",
        "id": 155288397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547672805
    },
    {
        "content": "<p>IIRC we don't enter through report_region_errors indeed</p>",
        "id": 155288401,
        "sender_full_name": "lqd",
        "timestamp": 1547672814
    },
    {
        "content": "<p>I remember it being from report_and_explain_type_error but will check again tomorrow (or maybe the report_region_errors is higher in the stack)</p>",
        "id": 155288514,
        "sender_full_name": "lqd",
        "timestamp": 1547672893
    },
    {
        "content": "<p>at some point it's a subsupconflict and ends up here somehow</p>",
        "id": 155288569,
        "sender_full_name": "lqd",
        "timestamp": 1547672952
    },
    {
        "content": "<p>(I will trace it later today and report here)</p>",
        "id": 155288828,
        "sender_full_name": "lqd",
        "timestamp": 1547673143
    },
    {
        "content": "<p>quick correction until I finish my modifications, we indeed go though <code>report_region_errors</code> which detects a <code>SubSupConflict</code>  and it seems <code>try_report_placeholder_conflict</code> doesn't find it applicable</p>",
        "id": 155323728,
        "sender_full_name": "lqd",
        "timestamp": 1547720004
    },
    {
        "content": "<p>(I think it's in the asymetric testing of subtype + placeholder, maybe that it only accepts subtype errors in the \"sub\" region I think, while this is in the \"sup\" one)</p>",
        "id": 155323838,
        "sender_full_name": "lqd",
        "timestamp": 1547720137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  if I add this missing case of checking that the origin of the sup placeholder is a subtype (if I understand this correctly I <em>think</em> 2 match cases might be missing in total from <a href=\"https://github.com/rust-lang/rust/blob/c0bbc3927e28c22edefe6a1353b5ecc95ea9a104/src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs#L51-L98\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/c0bbc3927e28c22edefe6a1353b5ecc95ea9a104/src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs#L51-L98\">here</a> to make these errors fire via the nice-error-regions) <code>try_report_placeholder_conflict</code> will fire the error, resulting in <a href=\"https://gist.github.com/lqd/05ba014ec235aa02b6564e03cbd478c7\" target=\"_blank\" title=\"https://gist.github.com/lqd/05ba014ec235aa02b6564e03cbd478c7\">this</a> for the specific code in the issue (it seems the existing message code was written with the sub subtype in mind, so might need changing or reversing the expected/found values in some cases)</p>",
        "id": 155325280,
        "sender_full_name": "lqd",
        "timestamp": 1547721802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> interesting</p>",
        "id": 155335217,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732481
    },
    {
        "content": "<p>I definitely prefer the overall structure this way</p>",
        "id": 155335224,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732486
    },
    {
        "content": "<p>but the message is confusing, I think, in two ways</p>",
        "id": 155335225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732491
    },
    {
        "content": "<p>first off, you are correct about the expected/actual being reversed</p>",
        "id": 155335234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732504
    },
    {
        "content": "<p>but secondly, I think the phrasing doesn't work</p>",
        "id": 155335243,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732520
    },
    {
        "content": "<p>e.g. if we just reverse expected/found we get</p>\n<div class=\"codehilite\"><pre><span></span>error: implementation of `Trait` is not general enough\n   --&gt; src/main.rs:13:7\n    |\n 13 |     a.f();\n    |       ^\n    |\n    = note: `for&lt;&#39;r&gt; fn(&amp;&#39;r _)` must implement `Trait`\n    = note: but `fn(&amp;u8)` only implements `Trait`\n</pre></div>",
        "id": 155335298,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732561
    },
    {
        "content": "<p>the position of the \"only\" feels wrong</p>",
        "id": 155335306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732568
    },
    {
        "content": "<p>yeah</p>",
        "id": 155335320,
        "sender_full_name": "lqd",
        "timestamp": 1547732588
    },
    {
        "content": "<p>it probably works better for the expected sub case and non higher-rank cases</p>",
        "id": 155335404,
        "sender_full_name": "lqd",
        "timestamp": 1547732653
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>error: implementation of `Trait` is not general enough\n   --&gt; src/main.rs:13:7\n    |\n 13 |     a.f();\n    |       ^\n    |\n    = note: `Trait` must be implemented for `for&lt;&#39;r&gt; fn(&amp;&#39;r _)`\n    = note: but `Trait` is only implemented for `fn(&amp;u8)`\n</pre></div>",
        "id": 155335583,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732816
    },
    {
        "content": "<p>that's probably what I would want to see</p>",
        "id": 155335588,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732820
    },
    {
        "content": "<p>man it's delicate</p>",
        "id": 155335609,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732836
    },
    {
        "content": "<p>hmm</p>",
        "id": 155335613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732848
    },
    {
        "content": "<p>I wonder if this ordering is correct in those cases where the \"placeholders\" don't appear in the types/traits</p>",
        "id": 155335624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732859
    },
    {
        "content": "<p>i.e., don't we sometimes have something like \"for any lifetime <code>'0</code>\"</p>",
        "id": 155335638,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732868
    },
    {
        "content": "<p>we could also certainly detect the case of a trait with no generics (like this one)</p>",
        "id": 155335717,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732902
    },
    {
        "content": "<p>in which case this ordering is <em>always</em> correct</p>",
        "id": 155335723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732915
    },
    {
        "content": "<p>I shuold think</p>",
        "id": 155335728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732917
    },
    {
        "content": "<p>you up to do some experimentation like that?</p>",
        "id": 155335735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732927
    },
    {
        "content": "<p>I'm kind of excited by the idea of higher-ranked errors being comprehensible</p>",
        "id": 155335738,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732937
    },
    {
        "content": "<p>they've always been terrible</p>",
        "id": 155335751,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547732944
    },
    {
        "content": "<blockquote>\n<p>you up to do some experimentation like that?</p>\n</blockquote>\n<p>sure :)</p>",
        "id": 155335769,
        "sender_full_name": "lqd",
        "timestamp": 1547732966
    },
    {
        "content": "<p>(it will surely require leveling up my understanding of higher-ranked topics and errors and I might have to ask questions if that's ok)</p>",
        "id": 155335935,
        "sender_full_name": "lqd",
        "timestamp": 1547733106
    },
    {
        "content": "<p>but of course</p>",
        "id": 155335945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733120
    },
    {
        "content": "<p>I wonder if we should land some kind of \"stem the bleeding\" PR first</p>",
        "id": 155335992,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733128
    },
    {
        "content": "<p>we definitely can</p>",
        "id": 155336000,
        "sender_full_name": "lqd",
        "timestamp": 1547733143
    },
    {
        "content": "<p>e.g., just the change you made above plus reverse the expected/found maybe?</p>",
        "id": 155336001,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733144
    },
    {
        "content": "<p>(or the changes you showed at first?)</p>",
        "id": 155336010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733161
    },
    {
        "content": "<p>Adjusting Niko's sample error, I'd emit something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span>: <span class=\"nc\">implementation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Trait</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">general</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">13</span>:<span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">f</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"o\">^</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"n\">Trait</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;r</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;r</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">but</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Trait</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">specific</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"na\">&#39;a</span><span class=\"err\">`</span><span class=\"w\"></span>\n</pre></div>",
        "id": 155336035,
        "sender_full_name": "centril",
        "timestamp": 1547733184
    },
    {
        "content": "<p>both could work tbh, I'll try running the test suite on the 2nd one to check if there's any problems elsewhere</p>",
        "id": 155336051,
        "sender_full_name": "lqd",
        "timestamp": 1547733196
    },
    {
        "content": "<p>thanks</p>",
        "id": 155336060,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733210
    },
    {
        "content": "<p>I think I prefer using the \"specialized\" errors</p>",
        "id": 155336075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733223
    },
    {
        "content": "<p>if we get the expected/found right</p>",
        "id": 155336082,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733229
    },
    {
        "content": "<p>since it's closer to what we want eventually, and I think they're still more \"on point\"</p>",
        "id": 155336097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733240
    },
    {
        "content": "<p>this is not really about a \"mismatched type\"</p>",
        "id": 155336146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547733245
    },
    {
        "content": "<p>alright I'll continue on this path so at least we can see the self type in the error soon, and then we can iterate towards having them improved</p>",
        "id": 155336171,
        "sender_full_name": "lqd",
        "timestamp": 1547733265
    },
    {
        "content": "<p>when the subtype origin is on the <code>sup</code> placeholder, the expected/found traitrefs aren't always what I'd expect, or rather, the more general of the two can be either one, while I believe <code>try_report_placeholder_conflict</code> currently expects the more general one to be <code>expected</code>. For example, the code in <a href=\"https://github.com/rust-lang/rust/issues/57362\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362\">#57362</a> results, like we mentioned earlier, in the inverted</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span>: <span class=\"nc\">implementation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Trait</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">general</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">13</span>:<span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">13</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">f</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"o\">^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Trait</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">but</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;r</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;r</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Trait</span><span class=\"err\">`</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>while Matthew's examples from <a href=\"https://github.com/rust-lang/rust/issues/57642\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57642\">#57642</a> seem ok</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">error</span>: <span class=\"nc\">implementation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">X</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">general</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">44</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">44</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"k\">fn</span> <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">())</span><span class=\"o\">&gt;</span>::<span class=\"n\">make_g</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"o\">^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;r</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;r</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">X</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">but</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"err\">&#39;</span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">X</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lifetime</span><span class=\"w\"> </span><span class=\"err\">`&#39;</span><span class=\"mi\">0</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">implementation</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Y</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">general</span><span class=\"w\"> </span><span class=\"n\">enough</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">49</span>:<span class=\"mi\">13</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">49</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"k\">fn</span> <span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">())</span><span class=\"o\">&gt;</span>::<span class=\"n\">make_f</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"o\">^^^^^^^^^^^^^^^^^^</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"err\">`</span><span class=\"k\">for</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;r</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"na\">&#39;r</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">must</span><span class=\"w\"> </span><span class=\"n\">implement</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Y</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">but</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">implements</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Y</span><span class=\"err\">`</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>should I be looking for something to compute which traitref is actually the more general <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ?</p>",
        "id": 155350649,
        "sender_full_name": "lqd",
        "timestamp": 1547744061
    },
    {
        "content": "<p>(or could it also be a bug somewhere downstream from / in the <code>lexical_region_resolve</code> module for these higher ranked conflicts?)</p>",
        "id": 155351303,
        "sender_full_name": "lqd",
        "timestamp": 1547744658
    },
    {
        "content": "<p>(or possibly linked to the other universe-related issues)</p>",
        "id": 155356465,
        "sender_full_name": "lqd",
        "timestamp": 1547749212
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> that sounds right. This is probably because we wind up encoding <code>'a = 'b</code> as the pair of <code>'a: 'b</code> and <code>'b: 'a</code></p>",
        "id": 156324770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547763945
    },
    {
        "content": "<p>hmm</p>",
        "id": 156324834,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547763993
    },
    {
        "content": "<p>I'm not sure why we are getting it backwards really, maybe there is some code higher up that is not using expected/actual the way we expect</p>",
        "id": 156324890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547764049
    },
    {
        "content": "<p>the sub subregion origin is a ExprTypeIsNotInScope(fn(&amp;()) in the correct case, and I wondered if it was related (probably not)</p>",
        "id": 156324912,
        "sender_full_name": "lqd",
        "timestamp": 1547764079
    },
    {
        "content": "<p>example dumping the error + expected/found in this inverted case</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2019-01-17T22:33:12Z: rustc::infer::error_reporting::nice_region_error::placeholder_error: try_report_placeholder_conflict(error=Some(SubSupConflict(&#39;_#1r, MiscVariable(src/main.rs:13:7: 13:8), ParameterInScope(MethodCall, src/main.rs:13:5: 13:10), ReScope(Node(18)), Subtype(TypeTrace(ObligationCause { span: src/main.rs:13:7: 13:8, body_id: NodeId(85), code: MiscObligation })), RePlaceholder(Placeholder { universe: U7, name: BrAnon(0) }))))\nDEBUG 2019-01-17T22:33:12Z: rustc::infer::error_reporting::nice_region_error::placeholder_error: try_report_placeholder_conflict - SubSupConflict 3.5, expected=&lt;fn(&amp;u8) as Trait&gt;, found=&lt;for&lt;&#39;r&gt; fn(&amp;&#39;r _) as Trait&gt;\n</pre></div>",
        "id": 156325011,
        "sender_full_name": "lqd",
        "timestamp": 1547764142
    },
    {
        "content": "<p>I wonder if this results from evaluating the <code>&lt;fn(&amp;u8) as Trait&gt;</code> candidate as OkModuloRegions; when trying to confirm it, we check <code>At.eq(expected=&lt;fn(&amp;u8) as Trait&gt;, actual=&lt;for&lt;'r&gt; fn(&amp;'r _) as Trait&gt;)</code> which makes the candidate \"expected\"</p>",
        "id": 156370151,
        "sender_full_name": "lqd",
        "timestamp": 1547820797
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> where do we do that check?</p>",
        "id": 156372354,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547822469
    },
    {
        "content": "<p>that is, where is the confirmation occurring exactly?</p>",
        "id": 156372365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547822482
    },
    {
        "content": "<p>let me paste you a bit of the log</p>",
        "id": 156372440,
        "sender_full_name": "lqd",
        "timestamp": 1547822527
    },
    {
        "content": "<p>so <a href=\"https://gist.githubusercontent.com/lqd/e80fbee0440257439cf145e87152ade6/raw/7cc42362cb57a260bafc032a82c80dc38ef2786f/gistfile1.txt\" target=\"_blank\" title=\"https://gist.githubusercontent.com/lqd/e80fbee0440257439cf145e87152ade6/raw/7cc42362cb57a260bafc032a82c80dc38ef2786f/gistfile1.txt\">here</a> is the pick_method on fn(&amp;u8)</p>",
        "id": 156372596,
        "sender_full_name": "lqd",
        "timestamp": 1547822669
    },
    {
        "content": "<p>(it's a bit big, but smaller than the 9K lines I'm looking at)</p>",
        "id": 156372613,
        "sender_full_name": "lqd",
        "timestamp": 1547822691
    },
    {
        "content": "<p>:)</p>",
        "id": 156372619,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547822697
    },
    {
        "content": "<p>yeah</p>",
        "id": 156372621,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547822698
    },
    {
        "content": "<p>man, I'd love to find a better way to handle logging</p>",
        "id": 156372634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547822705
    },
    {
        "content": "<p>especially with probes, snapshots, rollbacks</p>",
        "id": 156372662,
        "sender_full_name": "lqd",
        "timestamp": 1547822731
    },
    {
        "content": "<p>I wonder if having this evaluated as EvaluatedToOkModuloRegions will make the code downstream think <code>fn(&amp;u8) as Trait</code> is indeed expected</p>",
        "id": 156372797,
        "sender_full_name": "lqd",
        "timestamp": 1547822834
    },
    {
        "content": "<p>which I think is following this log, while \"confirming\" this candidate</p>",
        "id": 156372902,
        "sender_full_name": "lqd",
        "timestamp": 1547822906
    },
    {
        "content": "<p>eg later <code>DEBUG 2019-01-18T14:14:51Z: rustc::traits::select: match_impl(impl_def_id=DefId(0/0:5 ~ universe_bug[ac27]::{{impl}}[0]), obligation=Obligation(predicate=Binder(TraitPredicate(&lt;fn(&amp;u8) as Trait&gt;)),depth=0), impl_trait_ref=&lt;for&lt;'r&gt; fn(&amp;'r _) as Trait&gt;, skol_obligation_trait_ref=&lt;fn(&amp;u8) as Trait&gt;)</code></p>",
        "id": 156373007,
        "sender_full_name": "lqd",
        "timestamp": 1547822993
    },
    {
        "content": "<blockquote>\n<p>I wonder if having this evaluated as EvaluatedToOkModuloRegions will make the code downstream think <code>fn(&amp;u8) as Trait</code> is indeed expected</p>\n</blockquote>\n<p>I don't think <em>this</em> is quite right</p>",
        "id": 156373010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547822994
    },
    {
        "content": "<p>that is, the result of evaluation wouldn't really affect that</p>",
        "id": 156373015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823001
    },
    {
        "content": "<p>oh</p>",
        "id": 156373067,
        "sender_full_name": "lqd",
        "timestamp": 1547823008
    },
    {
        "content": "<p>it would just be used to select which canidate we conirm</p>",
        "id": 156373070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823009
    },
    {
        "content": "<p>however, we might have expected/actual \"backwards\"</p>",
        "id": 156373079,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823018
    },
    {
        "content": "<p>conceivably</p>",
        "id": 156373084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823024
    },
    {
        "content": "<p>let me briefly skim code, one sec</p>",
        "id": 156373101,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823044
    },
    {
        "content": "<p>ok, so the relevant bit is this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">InferOk</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">obligations</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">cause</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">skol_obligation_trait_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">impl_trait_ref</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;match_impl: failed eq_trait_refs due to `{}`&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">nested_obligations</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">obligations</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156373149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823082
    },
    {
        "content": "<p>from <code>match_impl</code></p>",
        "id": 156373157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823090
    },
    {
        "content": "<p>which iirc implies that the \"thing we are trying to prove\" is going to be called the \"expected\"</p>",
        "id": 156373168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823102
    },
    {
        "content": "<p>and the impl is \"actual\"</p>",
        "id": 156373174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823106
    },
    {
        "content": "<p>now it is <em>also</em> quite possible that we lose track of that later on</p>",
        "id": 156373183,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823115
    },
    {
        "content": "<p>but does that match what the error message code seems to expect?</p>",
        "id": 156373187,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823120
    },
    {
        "content": "<p>I <em>think</em> it does, but not always but it's still unclear :/</p>",
        "id": 156373298,
        "sender_full_name": "lqd",
        "timestamp": 1547823191
    },
    {
        "content": "<p>hmm</p>",
        "id": 156373612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823426
    },
    {
        "content": "<p>as in, in some examples it seems to work, but others not?</p>",
        "id": 156373624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823438
    },
    {
        "content": "<p>then the interesting part of the log following this was <a href=\"https://gist.githubusercontent.com/lqd/1850a9350a4ae1b5a480f83f254d4323/raw/8bde64f9028e1135273aff305af9571c5dd5d55d/gistfile1.txt\" target=\"_blank\" title=\"https://gist.githubusercontent.com/lqd/1850a9350a4ae1b5a480f83f254d4323/raw/8bde64f9028e1135273aff305af9571c5dd5d55d/gistfile1.txt\">a bit later</a></p>",
        "id": 156373641,
        "sender_full_name": "lqd",
        "timestamp": 1547823454
    },
    {
        "content": "<blockquote>\n<p>as in, in some examples it seems to work, but others not?</p>\n</blockquote>\n<p>yeah :/</p>",
        "id": 156373719,
        "sender_full_name": "lqd",
        "timestamp": 1547823498
    },
    {
        "content": "<p>can you send me one example where it seems to fit and one where it doesn't?</p>",
        "id": 156373745,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823530
    },
    {
        "content": "<p>more importantly I guess the one where it doesn't</p>",
        "id": 156373752,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823537
    },
    {
        "content": "<p>(sorry, I know if I scroll up I will probably see them...)</p>",
        "id": 156373762,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823544
    },
    {
        "content": "<p>sure</p>",
        "id": 156373764,
        "sender_full_name": "lqd",
        "timestamp": 1547823544
    },
    {
        "content": "<p>also, do you have a branch I can build?</p>",
        "id": 156373771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547823551
    },
    {
        "content": "<p>no worries :)</p>",
        "id": 156373782,
        "sender_full_name": "lqd",
        "timestamp": 1547823567
    },
    {
        "content": "<p>yeah will push a branch soon with the added debug! + the nice-error-region change just after getting the examples</p>",
        "id": 156373852,
        "sender_full_name": "lqd",
        "timestamp": 1547823604
    },
    {
        "content": "<p>1) <a href=\"https://gist.github.com/lqd/3b9d3142655093a1b0299e13af4098bc\" target=\"_blank\" title=\"https://gist.github.com/lqd/3b9d3142655093a1b0299e13af4098bc\">good example + error</a><br>\n2) <a href=\"https://gist.github.com/lqd/2e249ce072b581bb179d9efb22ccb771\" target=\"_blank\" title=\"https://gist.github.com/lqd/2e249ce072b581bb179d9efb22ccb771\">bad example + error</a><br>\nbranch incoming shortly</p>",
        "id": 156374292,
        "sender_full_name": "lqd",
        "timestamp": 1547823967
    },
    {
        "content": "<p><a href=\"https://github.com/lqd/rust/tree/higher_rank_errors\" target=\"_blank\" title=\"https://github.com/lqd/rust/tree/higher_rank_errors\">the branch</a></p>",
        "id": 156375433,
        "sender_full_name": "lqd",
        "timestamp": 1547824861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> (sorry to bother you) do you by any chance have pointers on where to look to debug this possible expected/actual inversion ?</p>",
        "id": 156705133,
        "sender_full_name": "lqd",
        "timestamp": 1548262803
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> thanks for the reminder</p>",
        "id": 156705975,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548263357
    },
    {
        "content": "<p>I have an errand to run but will try to get back t you after that</p>",
        "id": 156706269,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548263539
    },
    {
        "content": "<p>awesome, thank you</p>",
        "id": 156706324,
        "sender_full_name": "lqd",
        "timestamp": 1548263575
    },
    {
        "content": "<p>ok, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, let's talk :)</p>",
        "id": 156724231,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548276792
    },
    {
        "content": "<p>:)</p>",
        "id": 156724266,
        "sender_full_name": "lqd",
        "timestamp": 1548276820
    },
    {
        "content": "<p>I'm looking at the branch + log traces to remember a bit of everything</p>",
        "id": 156724346,
        "sender_full_name": "lqd",
        "timestamp": 1548276864
    },
    {
        "content": "<p>me too</p>",
        "id": 156724434,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548276948
    },
    {
        "content": "<p>I guess I better grab your branch</p>",
        "id": 156724589,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548277064
    },
    {
        "content": "<p>I can upload the 2 traces as well</p>",
        "id": 156724602,
        "sender_full_name": "lqd",
        "timestamp": 1548277072
    },
    {
        "content": "<p>building your branch now</p>",
        "id": 156724687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548277120
    },
    {
        "content": "<p>at some point we mentioned <a href=\"#narrow/stream/131828-t-compiler/topic/.2357362.20confusing.20errors.20after.20universe.20transition/near/156373149\" title=\"#narrow/stream/131828-t-compiler/topic/.2357362.20confusing.20errors.20after.20universe.20transition/near/156373149\">https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/.2357362.20confusing.20errors.20after.20universe.20transition/near/156373149</a> but there wasn't something immediately obvious to me about it in the traces (but that could be because of the Display format rather than Debug)</p>",
        "id": 156724849,
        "sender_full_name": "lqd",
        "timestamp": 1548277210
    },
    {
        "content": "<p>that is <code>match_impl: failed</code> logs</p>",
        "id": 156724870,
        "sender_full_name": "lqd",
        "timestamp": 1548277228
    },
    {
        "content": "<p>but could very well be important as you mentioned</p>",
        "id": 156724885,
        "sender_full_name": "lqd",
        "timestamp": 1548277248
    },
    {
        "content": "<p>hmm</p>",
        "id": 156724917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548277291
    },
    {
        "content": "<p>I probably just have to look a bit at the logs</p>",
        "id": 156724928,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548277307
    },
    {
        "content": "<blockquote>\n<p>I probably just have to look a bit at the logs</p>\n</blockquote>\n<div class=\"message_inline_image\"><a href=\"https://i2.wp.com/www.geekometry.com/wp-content/uploads/2013/11/guru-meditation_error-featured-image-only.gif\" target=\"_blank\" title=\"https://i2.wp.com/www.geekometry.com/wp-content/uploads/2013/11/guru-meditation_error-featured-image-only.gif\"><img src=\"https://i2.wp.com/www.geekometry.com/wp-content/uploads/2013/11/guru-meditation_error-featured-image-only.gif\"></a></div>",
        "id": 156725441,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1548277683
    },
    {
        "content": "<p>what I was looking at was the <code>confirm_impl_candidate</code> for <code>&lt;fn(&amp;u8) as Trait&gt;</code> which starts a snapshot and a bit later ends up making a subregion whose trace values are <code>expected: &lt;fn(&amp;u8) as Trait&gt;, found: &lt;for&lt;'r&gt; fn(&amp;'r _) as Trait&gt;</code> which commits since the result is Ok</p>",
        "id": 156725491,
        "sender_full_name": "lqd",
        "timestamp": 1548277744
    },
    {
        "content": "<p>yeah I mean this line does look a bit suspicious:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">InferOk</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">obligations</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">infcx</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">at</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">cause</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">obligation</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">eq</span><span class=\"p\">(</span><span class=\"n\">skol_obligation_trait_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">impl_trait_ref</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;match_impl: failed eq_trait_refs due to `{}`&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156725742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548277926
    },
    {
        "content": "<p>in particular, I think that the first argument to <code>eq</code> is the \"expected\" thing</p>",
        "id": 156725753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548277932
    },
    {
        "content": "<p>in this case, that is the thing we are trying to <em>prove</em></p>",
        "id": 156725757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548277938
    },
    {
        "content": "<p>and I believe the \"actual\" is the type from the impl</p>",
        "id": 156725772,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548277962
    },
    {
        "content": "<p>not sure if that's what the error later suggests, let me check</p>",
        "id": 156725780,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548277968
    },
    {
        "content": "<p>well</p>",
        "id": 156725835,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548278020
    },
    {
        "content": "<p>it looks right</p>",
        "id": 156725839,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548278024
    },
    {
        "content": "<p>I wonder if it gets turned around somehow</p>",
        "id": 156725890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548278048
    },
    {
        "content": "<p>and only in some cases but not all</p>",
        "id": 156725913,
        "sender_full_name": "lqd",
        "timestamp": 1548278082
    },
    {
        "content": "<p>or maybe some miscommunication at the boundaries of what we're trying to prove, and the errors we need to emit later</p>",
        "id": 156725952,
        "sender_full_name": "lqd",
        "timestamp": 1548278136
    },
    {
        "content": "<p>:/</p>",
        "id": 156726087,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548278271
    },
    {
        "content": "<p>eg proving the trait refs work out here, since one is a subtype of the other, but when we later check if the subregions are valid in the higher rank case, it turns out this previous result can't be reused as is</p>",
        "id": 156726212,
        "sender_full_name": "lqd",
        "timestamp": 1548278387
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> sorry for not having a lot of data, build is taking a while of course</p>",
        "id": 156726445,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548278596
    },
    {
        "content": "<p>I'm kind of doing a few other things while it goes, i'll ping you back in a bit</p>",
        "id": 156726451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548278608
    },
    {
        "content": "<p>sure, no problem :)</p>",
        "id": 156726467,
        "sender_full_name": "lqd",
        "timestamp": 1548278629
    },
    {
        "content": "<p>ok that finally finished</p>",
        "id": 156727005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279082
    },
    {
        "content": "<p>um so <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span></p>",
        "id": 156727245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279306
    },
    {
        "content": "<blockquote>\n<p>I'm kind of doing a few other things while it goes, i'll ping you back in a bit</p>\n</blockquote>\n<p>does that include building my branch heh? ;-) maybe you can see what's going on from the debug logs though.</p>",
        "id": 156727252,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1548279310
    },
    {
        "content": "<p>(it does not :) but that's a good idea, I should kick that off)</p>",
        "id": 156727267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279329
    },
    {
        "content": "<p>I wonder if it's a problem more at the error generation point, e.g. in some of these SubSupConflict cases we should be looking for the more general of the 2 expected/found</p>",
        "id": 156727279,
        "sender_full_name": "lqd",
        "timestamp": 1548279346
    },
    {
        "content": "<p>So, <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>, the error message -- looking more closely -- I think it's actually <em>correct</em></p>",
        "id": 156727285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279356
    },
    {
        "content": "<p>or am I missing something</p>",
        "id": 156727335,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279366
    },
    {
        "content": "<p>/me mindblown</p>",
        "id": 156727345,
        "sender_full_name": "lqd",
        "timestamp": 1548279372
    },
    {
        "content": "<p>that is, in <code>expected-seems-bad.rs</code>, we have:</p>",
        "id": 156727360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279390
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Trait</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156727363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279392
    },
    {
        "content": "<p>i.e., it is implemented for <code>for&lt;'a&gt; fn(&amp;'a T)</code></p>",
        "id": 156727368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279401
    },
    {
        "content": "<p>and the error message says:</p>\n<div class=\"codehilite\"><pre><span></span>but `for&lt;&#39;r&gt; fn(&amp;&#39;r _)` only implements `Trait`\n</pre></div>",
        "id": 156727381,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279416
    },
    {
        "content": "<p>that is pretty bad phrasing, but it is trying to say \"there is an implementation, but for the wrong type\"</p>",
        "id": 156727397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279427
    },
    {
        "content": "<p>and indeed the type it lists is the one that it is implemented for</p>",
        "id": 156727415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279447
    },
    {
        "content": "<p>so maybe the problem is just that the error message is really ungreat?</p>",
        "id": 156727496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279519
    },
    {
        "content": "<p>we have this logic that tries to detect how often the placeholder occured</p>",
        "id": 156727506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279536
    },
    {
        "content": "<p>what does the <code>_</code>placeholder stand for here ?</p>",
        "id": 156727507,
        "sender_full_name": "lqd",
        "timestamp": 1548279538
    },
    {
        "content": "<p>'some type'</p>",
        "id": 156727514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279547
    },
    {
        "content": "<p>but not u8</p>",
        "id": 156727517,
        "sender_full_name": "lqd",
        "timestamp": 1548279554
    },
    {
        "content": "<p>yeah I don't know why that is unresolved</p>",
        "id": 156727529,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279568
    },
    {
        "content": "<p>the ungreatness + unresolvedness seems to be why we were confused almost from the start about the ordering</p>",
        "id": 156727590,
        "sender_full_name": "lqd",
        "timestamp": 1548279613
    },
    {
        "content": "<p>maybe we just need to invoke the inference method that refereshes those</p>",
        "id": 156727594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279617
    },
    {
        "content": "<p><code>resolve_type_vars_if_possible</code></p>",
        "id": 156727616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279658
    },
    {
        "content": "<p>it kinda improves from the \"expected type <code>Trait</code> found type <code>Trait</code>\" but not by much :)</p>",
        "id": 156727634,
        "sender_full_name": "lqd",
        "timestamp": 1548279690
    },
    {
        "content": "<p>in any case, I think when we see the <code>has_vid</code> flag being <code>None</code></p>",
        "id": 156727642,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279706
    },
    {
        "content": "<p>I can try calling these yeah</p>",
        "id": 156727645,
        "sender_full_name": "lqd",
        "timestamp": 1548279708
    },
    {
        "content": "<p>we want to print something different</p>",
        "id": 156727653,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279721
    },
    {
        "content": "<p>like, \"but <code>{}</code> is implemented for <code>{}</code>\"</p>",
        "id": 156727702,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279728
    },
    {
        "content": "<p>to put the emphasis on the self type</p>",
        "id": 156727709,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279736
    },
    {
        "content": "<p>ideally, we would also call out the \"free\" lifetime from the other type</p>",
        "id": 156727724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279749
    },
    {
        "content": "<p>I'm not 100% sure how to do that</p>",
        "id": 156727732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279753
    },
    {
        "content": "<p>oh, we should be able to do that</p>",
        "id": 156727773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279787
    },
    {
        "content": "<p>so, I see this in the debug logs</p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2019-01-23T21:32:18Z: rustc::infer::error_reporting::nice_region_error::placeholder_error: try_report_placeholder_conflict(error=Some(SubSupConflict(&#39;_#1r, MiscVariable(/home/nmatsakis/tmp/expected-seems-bad.rs:13:7: 13:8), Param\\\neterInScope(MethodCall, /home/nmatsakis/tmp/expected-seems-bad.rs:13:5: 13:10), ReScope(Node(18)), Subtype(TypeTrace(ObligationCause { span: /home/nmatsakis/tmp/expected-seems-bad.rs:13:7: 13:8, body_id: NodeId(85), code: MiscObligatio\\\nn })), RePlaceholder(Placeholder { universe: U7, name: BrAnon(0) }))))\n</pre></div>",
        "id": 156727802,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279805
    },
    {
        "content": "<p>ugh that's hard to read</p>",
        "id": 156727804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279809
    },
    {
        "content": "<p>the key thing is that the conflict involves <code>'_#1r</code></p>",
        "id": 156727819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279835
    },
    {
        "content": "<p>(oh, btw, when you dump logs, are you using <code>-Zverbose</code>?)</p>",
        "id": 156727861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279846
    },
    {
        "content": "<p>I was not :/</p>",
        "id": 156727869,
        "sender_full_name": "lqd",
        "timestamp": 1548279854
    },
    {
        "content": "<p>it's...kind of crucial</p>",
        "id": 156727871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279859
    },
    {
        "content": "<p>the expected trait-ref, in turn, is`&lt;fn(&amp;'_#1r u8) as Trait&gt;</p>",
        "id": 156727886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279876
    },
    {
        "content": "<p>(in particular, it causes the full detail of lifetimes to be printed</p>",
        "id": 156727892,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279883
    },
    {
        "content": "<p>yeah, seems useful when trying to debug higher-ranked lifetimes :)</p>",
        "id": 156727917,
        "sender_full_name": "lqd",
        "timestamp": 1548279905
    },
    {
        "content": "<p>our pretty printing system is quite messed up</p>",
        "id": 156727941,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279944
    },
    {
        "content": "<p>in my opinion <code>{:?}</code> should <em>always</em> print this info</p>",
        "id": 156727945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279952
    },
    {
        "content": "<p>but oh well</p>",
        "id": 156727947,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279953
    },
    {
        "content": "<p>I'm doing another build to dump out a bit more information...</p>",
        "id": 156728010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548279980
    },
    {
        "content": "<p>(I'll make sure we have this in rustc-guide if we haven't already)</p>",
        "id": 156728021,
        "sender_full_name": "lqd",
        "timestamp": 1548279990
    },
    {
        "content": "<p>thanks</p>",
        "id": 156728091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280069
    },
    {
        "content": "<p>anyway, this is kind of good, I think it just means we have to tweak the output a bit</p>",
        "id": 156728099,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280076
    },
    {
        "content": "<blockquote>\n<p>oh, we should be able to do that</p>\n</blockquote>\n<p>did you mean modifying the message formatting in <code>try_report_placeholders_trait</code> w.r.t the vid here ?</p>",
        "id": 156728100,
        "sender_full_name": "lqd",
        "timestamp": 1548280077
    },
    {
        "content": "<p>yes</p>",
        "id": 156728151,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280089
    },
    {
        "content": "<p>what I specifically meant is:</p>",
        "id": 156728158,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280092
    },
    {
        "content": "<p>I would like to print something like</p>",
        "id": 156728165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280107
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>// error: implementation of `Trait` is not general enough\n//   --&gt; src/main.rs:13:7\n//    |\n// 13 |     a.f();\n//    |       ^\n//    |\n//    = note: `Trait` would have to be implemented for the type `fn(&amp;&#39;0 u8)`, for some lifetime `&#39;0`\n//    = note: but `Trait` is actually implemented for `for&lt;&#39;r&gt; fn(&amp;&#39;r u8)`\n</pre></div>",
        "id": 156728203,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280157
    },
    {
        "content": "<p>or..something like that</p>",
        "id": 156728206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280160
    },
    {
        "content": "<p>I forget what the suggestions were before</p>",
        "id": 156728212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280164
    },
    {
        "content": "<p>anyway, the key thing is .. how do we know to highlight that <code>'0</code> region?</p>",
        "id": 156728219,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280172
    },
    {
        "content": "<p>but the connection to <code>'_#1r</code> gives us a key to latch on to</p>",
        "id": 156728222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280180
    },
    {
        "content": "<p>something <a href=\"#narrow/stream/131828-t-compiler/topic/.2357362.20confusing.20errors.20after.20universe.20transition/near/155336035\" title=\"#narrow/stream/131828-t-compiler/topic/.2357362.20confusing.20errors.20after.20universe.20transition/near/155336035\">like that</a></p>",
        "id": 156728234,
        "sender_full_name": "lqd",
        "timestamp": 1548280193
    },
    {
        "content": "<p>yeah, except this is the reverse case</p>",
        "id": 156728291,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280211
    },
    {
        "content": "<p>but I like the \"some specific\" phrasing</p>",
        "id": 156728302,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280230
    },
    {
        "content": "<p>yeah the examples were made while still being confused by the ordering/message</p>",
        "id": 156728314,
        "sender_full_name": "lqd",
        "timestamp": 1548280243
    },
    {
        "content": "<p>do you feel at all unblocked? :)</p>",
        "id": 156728371,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280312
    },
    {
        "content": "<p>thanks a lot, I can now try to change the error messages in <code>try_report_placeholders_trait</code>, and also check what effect <code>resolve_type_vars_if_possible</code> will have for them</p>",
        "id": 156728372,
        "sender_full_name": "lqd",
        "timestamp": 1548280313
    },
    {
        "content": "<p>ok</p>",
        "id": 156728376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280317
    },
    {
        "content": "<p>I'll work on that and report back whenever I'm at at an interesting point (or open a PR directly if it's interesting enough)</p>",
        "id": 156728451,
        "sender_full_name": "lqd",
        "timestamp": 1548280375
    },
    {
        "content": "<p>well I've got a build going with a bit of extra debug info</p>",
        "id": 156728456,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280379
    },
    {
        "content": "<p>so maybe I'll dump some more notes if I have anything</p>",
        "id": 156728463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280385
    },
    {
        "content": "<p>else feel free to ping with questions =)</p>",
        "id": 156728470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280389
    },
    {
        "content": "<p>(if needed)</p>",
        "id": 156728471,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280393
    },
    {
        "content": "<p>awesome, thanks again niko :)</p>",
        "id": 156728476,
        "sender_full_name": "lqd",
        "timestamp": 1548280402
    },
    {
        "content": "<p>/me gets back to trying to draft up all hands meeting agendas :)</p>",
        "id": 156728479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548280405
    },
    {
        "content": "<p>(I wonder who else has experience with this so I wouldn't have to bother you per se, seems likely maybe felix or scalexm have worked in these areas)</p>",
        "id": 156728813,
        "sender_full_name": "lqd",
        "timestamp": 1548280666
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"131694\">@scalexm</span>, though this code I added pretty recently</p>",
        "id": 156729695,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548281324
    },
    {
        "content": "<p>some logs from <code>try_report_placeholders_trait</code></p>\n<div class=\"codehilite\"><pre><span></span>DEBUG 2019-01-23T22:11:40Z: rustc::infer::error_reporting::nice_region_error::placeholder_error: try_report_placeholders_trait(\n    vid=Some(&#39;_#1r),\n    sub_placeholder=None,\n    sup_placeholder=Some(RePlaceholder(Placeholder { universe: U7, name:\nBrAnon(0) })),\n    trait_def_id=DefId(0/0:3 ~ expected_seems_bad[317d]::Trait[0]),\n    expected_substs=[fn(&amp;&#39;_#1r u8)],\n    actual_substs=[for&lt;&#39;r&gt; fn(&amp;ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), &#39;r)) _#6t)])\nDEBUG 2019-01-23T22:11:40Z: rustc::infer::error_reporting::nice_region_error::placeholder_error: try_report_placeholders_trait: has_vid=None\nDEBUG 2019-01-23T22:11:40Z: rustc::infer::error_reporting::nice_region_error::placeholder_error: try_report_placeholders_trait: has_sub=None\nDEBUG 2019-01-23T22:11:40Z: rustc::infer::error_reporting::nice_region_error::placeholder_error: try_report_placeholders_trait: has_sup=None\nDEBUG 2019-01-23T22:11:40Z: rustc::infer::error_reporting::nice_region_error::placeholder_error: try_report_placeholders_trait: self_ty_has_vid=false\n</pre></div>",
        "id": 156730065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548281592
    },
    {
        "content": "<p>given that all those flags are <code>None</code> we probably have to add some add'l test :)</p>",
        "id": 156730081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548281621
    },
    {
        "content": "<p>I guess something like <code>self_ty_has_vid</code> but testing the <em>expected</em> type</p>",
        "id": 156730177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548281716
    },
    {
        "content": "<p>yeah</p>",
        "id": 156730215,
        "sender_full_name": "lqd",
        "timestamp": 1548281761
    },
    {
        "content": "<p>feels like interesting progress can be made here so it's nice</p>",
        "id": 156730283,
        "sender_full_name": "lqd",
        "timestamp": 1548281810
    },
    {
        "content": "<p>(thanks for updating <a href=\"https://github.com/rust-lang/rust/issues/57362\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362\">#57362</a> <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sorry I wasn't able to do it in time for the meeting)</p>",
        "id": 156789123,
        "sender_full_name": "lqd",
        "timestamp": 1548350180
    },
    {
        "content": "<p>no worries</p>",
        "id": 156789285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548350311
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> re: <a href=\"https://github.com/rust-lang/rust/issues/57362#issuecomment-457565929\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362#issuecomment-457565929\">your GH comment</a>, FWIW as of now I'm not even sure how to turn the currently displayed type <code>fn(&amp;u8)</code> into <code>fn(&amp;'0 u8)</code> :) I'll have the updated blessed tests diff soon, if you'd like to check my current progress (it'll be in the direction niko mentioned in the update, but not there yet)</p>",
        "id": 156851967,
        "sender_full_name": "lqd",
        "timestamp": 1548422678
    },
    {
        "content": "<p>Hmm, I am pretty sure that there are other diagnostics that do this sort of substitution, let me see</p>",
        "id": 156851991,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548422730
    },
    {
        "content": "<p>oh yeah I assumed so, just didn't know which, and how general they'd be for this use case</p>",
        "id": 156852098,
        "sender_full_name": "lqd",
        "timestamp": 1548422841
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> (boy am I glad you're back, Paris TZ FTW ;) I had to add the <code>InferCtxt</code> to <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/error_reporting/nice_region_error/mod.rs#L32-L36\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/error_reporting/nice_region_error/mod.rs#L32-L36\">NiceRegionError</a> since the trait refs type variables are not resolved in the error messages we're talking about, my question: since NiceRegionError already uses the <code>TyCtxt</code>, which is usually from the <code>InferCtxt</code>, would you rather I remove the <code>tcx</code> and access it everywhere through the <code>InferCtxt</code> I added instead of just adding it ?</p>",
        "id": 156852740,
        "sender_full_name": "lqd",
        "timestamp": 1548423543
    },
    {
        "content": "<p>yes</p>",
        "id": 156852756,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548423562
    },
    {
        "content": "<p>ok, more like a self.tcx() helper or switch uses to self.infcx.tcx ?</p>",
        "id": 156852830,
        "sender_full_name": "lqd",
        "timestamp": 1548423604
    },
    {
        "content": "<p>that is, don't pass around two parameters when one will do. Especially when it wouldn't make sense to ever use a different value for the derivable parameter</p>",
        "id": 156852846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548423620
    },
    {
        "content": "<p>I don't personally care about which pattern (<code>self.tcx()</code> vs <code>self.infcx.tcx</code> vs <code>impl Deref for Self</code> -- yep, that comes up too as a way to automatically get all the methods)</p>",
        "id": 156852875,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548423667
    },
    {
        "content": "<p>I guess <code>self.tcx()</code> will look nicest in the diff.</p>",
        "id": 156852888,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548423687
    },
    {
        "content": "<p>ok I will do the latter then, merci :)</p>",
        "id": 156852960,
        "sender_full_name": "lqd",
        "timestamp": 1548423745
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> the WIP PR results look <a href=\"https://gist.github.com/lqd/c08e39c76393b93529352df250c4adc5\" target=\"_blank\" title=\"https://gist.github.com/lqd/c08e39c76393b93529352df250c4adc5\">like this</a> for some cases missed by our current tests, a mix of <a href=\"https://github.com/rust-lang/rust/issues/57362\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57362\">#57362</a> and <a href=\"https://github.com/rust-lang/rust/issues/57642\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57642\">#57642</a>. (GH reversed the ordering of the files in the gist) and I'll have the blessed output in a short while, but it will showcase more of the concern in your GH comment</p>",
        "id": 156854775,
        "sender_full_name": "lqd",
        "timestamp": 1548425403
    },
    {
        "content": "<p>Ah \"actually\" is a better word than \"only\" here</p>",
        "id": 156855126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548425724
    },
    {
        "content": "<p>(well... maybe its a better word. I think.)</p>",
        "id": 156855196,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548425788
    },
    {
        "content": "<p>I think it would be interesting to achieve a \"good enough\" message soon-ish (since it's a p-high issue) ? and then build on that to improve these higher-ranked lifetime errors later on (both for this 2015 case, and the related 2018 case)</p>",
        "id": 156855452,
        "sender_full_name": "lqd",
        "timestamp": 1548426065
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> and here's the previously mentioned <a href=\"https://github.com/lqd/rust/commit/09fa97481f388378e37ee5dd6023a341229106c0\" target=\"_blank\" title=\"https://github.com/lqd/rust/commit/09fa97481f388378e37ee5dd6023a341229106c0\">diff</a>: the blessed diff is not a big improvement (or maybe not at all) compared to what we have now, what do you think ?</p>",
        "id": 156857142,
        "sender_full_name": "lqd",
        "timestamp": 1548427631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I feel I've progressed enough that we can start iterating on the message wording on GH, with CI checks, so I've opened <a href=\"https://github.com/rust-lang/rust/issues/57901\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57901\">#57901</a>. Crucially, it doesn't yet handle the case you wanted to clarify: <code>fn(&amp;u8)</code> into <code>fn(&amp;'0 u8) for the specific lifetime '0</code> (as I don't know how to do that yet).</p>",
        "id": 156873943,
        "sender_full_name": "lqd",
        "timestamp": 1548442029
    },
    {
        "content": "<p>ok</p>",
        "id": 156874080,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442116
    },
    {
        "content": "<p>that's awesome!</p>",
        "id": 156874085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442118
    },
    {
        "content": "<p>let me take a look</p>",
        "id": 156874092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442124
    },
    {
        "content": "<p>yeah, take a look <em>before</em> saying that's awesome :D</p>",
        "id": 156874145,
        "sender_full_name": "lqd",
        "timestamp": 1548442165
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I see this in the tests:</p>\n<div class=\"codehilite\"><pre><span></span> but `X` is actually implemented for the type `fn(&amp;&#39;0 ())`, for the specific lifetime `&#39;0`\n</pre></div>\n\n\n<p>I thought you said that wasn't working?</p>",
        "id": 156874147,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442167
    },
    {
        "content": "<p>is that an \"aspirational\" stderr file?</p>",
        "id": 156874154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442173
    },
    {
        "content": "<p>no it's the \"good case\" from Matthew's issue ;)</p>",
        "id": 156874169,
        "sender_full_name": "lqd",
        "timestamp": 1548442186
    },
    {
        "content": "<p>(if so, I think it's best to always make the stderr files match the current output, it helps when reviewing)</p>",
        "id": 156874174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442189
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 156874175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442191
    },
    {
        "content": "<p>must be a different test</p>",
        "id": 156874180,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442195
    },
    {
        "content": "<p>yeah :/</p>",
        "id": 156874243,
        "sender_full_name": "lqd",
        "timestamp": 1548442210
    },
    {
        "content": "<p>which is the test that looks bad :)</p>",
        "id": 156874264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442221
    },
    {
        "content": "<p>oh I see</p>",
        "id": 156874276,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442230
    },
    {
        "content": "<p>the <em>first</em> error in that file?</p>",
        "id": 156874292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442238
    },
    {
        "content": "<p>yeah</p>",
        "id": 156874299,
        "sender_full_name": "lqd",
        "timestamp": 1548442242
    },
    {
        "content": "<p>I can surely make it clearer</p>",
        "id": 156874308,
        "sender_full_name": "lqd",
        "timestamp": 1548442248
    },
    {
        "content": "<p>or work out where it should probably better belong, maybe the ui/hrtb cases for instance</p>",
        "id": 156874519,
        "sender_full_name": "lqd",
        "timestamp": 1548442374
    },
    {
        "content": "<p>ok I mean</p>",
        "id": 156874544,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442389
    },
    {
        "content": "<p>it's definitely far, far better than before</p>",
        "id": 156874549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442395
    },
    {
        "content": "<p>I think it is confusing to a \"newbie\" now</p>",
        "id": 156874565,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442400
    },
    {
        "content": "<p>but e.g. dtolnay could probably decrypt it ;)</p>",
        "id": 156874574,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442406
    },
    {
        "content": "<p>haha</p>",
        "id": 156874584,
        "sender_full_name": "lqd",
        "timestamp": 1548442417
    },
    {
        "content": "<p>that said, let me build your branch and poke at it</p>",
        "id": 156874593,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548442424
    },
    {
        "content": "<p>yay</p>",
        "id": 156874674,
        "sender_full_name": "lqd",
        "timestamp": 1548442460
    },
    {
        "content": "<p>(I have to go back home in a couple minutes but will be back in a short while -- to fix the potentially many mistakes I've made here :)</p>",
        "id": 156874952,
        "sender_full_name": "lqd",
        "timestamp": 1548442632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> thanks for the review! I'll let you and niko decide the wording and then implement it if that's ok. I plan to work on these kinds of errors more after this PR (which is more to fix the current confusingitude — yes that is a word maybe) and also on the similar ones in the NLL cases, so we can have them all improved over time</p>",
        "id": 156879161,
        "sender_full_name": "lqd",
        "timestamp": 1548445571
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>  thanks for the PR <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> -- a clear improvement!</p>",
        "id": 156879189,
        "sender_full_name": "centril",
        "timestamp": 1548445620
    },
    {
        "content": "<p>in any case we'll make them better for sure</p>",
        "id": 156879322,
        "sender_full_name": "lqd",
        "timestamp": 1548445728
    },
    {
        "content": "<p>btw <span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> / <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> the word \"actually\" was a stroke of genius</p>",
        "id": 156879477,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548445833
    },
    {
        "content": "<p>it was your stroke of genius!</p>",
        "id": 156879516,
        "sender_full_name": "lqd",
        "timestamp": 1548445873
    },
    {
        "content": "<p>hahaha</p>",
        "id": 156879558,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548445917
    },
    {
        "content": "<p>ok well</p>",
        "id": 156879580,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548445922
    },
    {
        "content": "<p>what can I say, I love my wording</p>",
        "id": 156879618,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548445935
    },
    {
        "content": "<p><strong>Breaking news:</strong></p>\n<p>Past-Niko is able to write sentences that Future-Niko understands</p>",
        "id": 156879662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548445978
    },
    {
        "content": "<p>Which Future-Niko in the multiverse tho? ;)</p>",
        "id": 156879722,
        "sender_full_name": "centril",
        "timestamp": 1548446042
    },
    {
        "content": "<p>I think it was NUPRL research which basically said \"6 universes should be enough for everyone\" so who knows what the other 4 Nikos are even capable of</p>",
        "id": 156879917,
        "sender_full_name": "lqd",
        "timestamp": 1548446189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> hope you don't mind, I'm poking at your branch</p>",
        "id": 156880806,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548446930
    },
    {
        "content": "<p>I think we can fix that one case fairly easily</p>",
        "id": 156880810,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548446935
    },
    {
        "content": "<p>easier though for me to just <em>try</em> it than to explain it :P</p>",
        "id": 156880815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548446941
    },
    {
        "content": "<p>I don't mind at all — and yeah, understandable :) I'll look at your commits so I can learn a bit more about the errors/diagnostics API (and I hadn't noticed, of course tidy failed)</p>",
        "id": 156880979,
        "sender_full_name": "lqd",
        "timestamp": 1548447087
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> current output with my commit:</p>\n<div class=\"codehilite\"><pre><span></span>error: implementation of `Trait` is not general enough\n  --&gt; issue-57362-1.rs:20:7\n   |\n20 |     a.f(); //~ ERROR not general enough\n   |       ^\n   |\n   = note: `Trait` would have to be implemented for the type `fn(&amp;&#39;0 u8)`, for some specific lifetime `&#39;0`\n   = note: but `Trait` is actually implemented for the type `for&lt;&#39;r&gt; fn(&amp;&#39;r u8)`\n</pre></div>",
        "id": 156881787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548447770
    },
    {
        "content": "<p>yay</p>",
        "id": 156881797,
        "sender_full_name": "lqd",
        "timestamp": 1548447797
    },
    {
        "content": "<p>let me run with <code>--bless</code></p>",
        "id": 156881824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548447834
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> pushed</p>",
        "id": 156882505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448381
    },
    {
        "content": "<p>awesome, thanks a lot <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 156882622,
        "sender_full_name": "lqd",
        "timestamp": 1548448462
    },
    {
        "content": "<p>I guess you can see what I did</p>",
        "id": 156882632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448469
    },
    {
        "content": "<p>btw I removed this <code>actual.or(expected)</code></p>",
        "id": 156882640,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448474
    },
    {
        "content": "<p>I'm not sure why that was there but I think it could lead to bad output / is wrong</p>",
        "id": 156882654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448489
    },
    {
        "content": "<p>well, it probably didn't really do anything bad</p>",
        "id": 156882662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448495
    },
    {
        "content": "<p>but just didn't make sense</p>",
        "id": 156882676,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448506
    },
    {
        "content": "<p>oh</p>",
        "id": 156882695,
        "sender_full_name": "lqd",
        "timestamp": 1548448519
    },
    {
        "content": "<p>the idea of the <code>highlight</code> methods is that they take an <code>Option&lt;usize&gt;</code> to say \"if this is Some, replace the given region with that\"</p>",
        "id": 156882701,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448522
    },
    {
        "content": "<p>the reason it probably didn't do anything</p>",
        "id": 156882710,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448527
    },
    {
        "content": "<p>is because if <code>actual_has_vid</code> is None</p>",
        "id": 156882724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448540
    },
    {
        "content": "<p>I was expecting this to highlight the vid whether it was in the actual self ty or the expected self ty</p>",
        "id": 156882729,
        "sender_full_name": "lqd",
        "timestamp": 1548448543
    },
    {
        "content": "<p>it would do that</p>",
        "id": 156882743,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448552
    },
    {
        "content": "<p>but</p>",
        "id": 156882783,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448563
    },
    {
        "content": "<p>the stuff we print in the closure itself</p>",
        "id": 156882801,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448575
    },
    {
        "content": "<p>is only from the <em>actual</em> self ty</p>",
        "id": 156882805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448578
    },
    {
        "content": "<p>we're not printing anything from the expected self ty</p>",
        "id": 156882813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448584
    },
    {
        "content": "<p>so, if actual is None, then <code>vid</code> just won't appear</p>",
        "id": 156882819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448592
    },
    {
        "content": "<p>so there is no point to highlighting it</p>",
        "id": 156882821,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448595
    },
    {
        "content": "<p>(and, what's worse, if we <em>did</em> somehow find it, then we would print <code>'0</code>, but because the match was matching on just <em>actual</em>, we wouldn't have printed an explanation of what <code>'0</code> represents)</p>",
        "id": 156882838,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448623
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 156882850,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448633
    },
    {
        "content": "<p>true, at some point I did have a similar structure the the<code>self_ty_has_vid</code>in the latter match but it didn't make sense</p>",
        "id": 156882872,
        "sender_full_name": "lqd",
        "timestamp": 1548448667
    },
    {
        "content": "<p>yeah it does, thanks a lot for the explanation</p>",
        "id": 156882919,
        "sender_full_name": "lqd",
        "timestamp": 1548448683
    },
    {
        "content": "<p>anyway the main thing I changed was -- in the case where <code>has_sub</code> and <code>has_sup</code> are both <code>None</code> -- to check <code>expected_has_vid</code></p>",
        "id": 156882930,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448695
    },
    {
        "content": "<p>the code pattern there is a bit obtuse I guess</p>",
        "id": 156882934,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448702
    },
    {
        "content": "<p>I wonder if it would be cleaner to move the <code>maybe_highlight</code> into the match arms</p>",
        "id": 156882945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448723
    },
    {
        "content": "<p>I think this way was a bit less reptition</p>",
        "id": 156882950,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448728
    },
    {
        "content": "<p>but basically it like sets up the highlights, and then the inner matches actually check whether the highlights <em>did</em> anything</p>",
        "id": 156882967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448745
    },
    {
        "content": "<p>I see</p>",
        "id": 156882978,
        "sender_full_name": "lqd",
        "timestamp": 1548448762
    },
    {
        "content": "<p>but if we moved the highlights <em>into</em> the match arms (so that we only invoke them if they might do something), then e.g. we would have to have duplicate for cases like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                    </span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">err</span><span class=\"p\">.</span><span class=\"n\">note</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"s\">&quot;`{}` would have to be implemented for the type `{}`, \\</span>\n<span class=\"s\">                             for any lifetime `&#39;{}`&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">expected_trait_ref</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">expected_trait_ref</span><span class=\"p\">.</span><span class=\"n\">self_ty</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">                            </span><span class=\"n\">n</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 156882986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448777
    },
    {
        "content": "<p>I wondered the same about the maybe_highlight</p>",
        "id": 156882989,
        "sender_full_name": "lqd",
        "timestamp": 1548448779
    },
    {
        "content": "<p>and also between that arm and the other arms</p>",
        "id": 156882994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448786
    },
    {
        "content": "<p>but it seems kind of confusing the way it is</p>",
        "id": 156883004,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448799
    },
    {
        "content": "<p>it certainly took me a minute to remember what the heck I was doing</p>",
        "id": 156883054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448807
    },
    {
        "content": "<p>it's a bit tricky</p>",
        "id": 156883075,
        "sender_full_name": "lqd",
        "timestamp": 1548448848
    },
    {
        "content": "<p>feel free to play with it :)</p>",
        "id": 156883107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448877
    },
    {
        "content": "<p>there can be a lot of different cases</p>",
        "id": 156883110,
        "sender_full_name": "lqd",
        "timestamp": 1548448878
    },
    {
        "content": "<p>yeah</p>",
        "id": 156883115,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448882
    },
    {
        "content": "<p>I wondered about something</p>",
        "id": 156883120,
        "sender_full_name": "lqd",
        "timestamp": 1548448889
    },
    {
        "content": "<p>maybe I should at least add a comment</p>",
        "id": 156883122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548448890
    },
    {
        "content": "<p>the case that was added was when the subtype was in the sup region</p>",
        "id": 156883177,
        "sender_full_name": "lqd",
        "timestamp": 1548448922
    },
    {
        "content": "<p>but I wondered if it was possible to have another missing case here, I'm not sure it does happen</p>",
        "id": 156883228,
        "sender_full_name": "lqd",
        "timestamp": 1548448949
    },
    {
        "content": "<p>I'll explain a bit more</p>",
        "id": 156883243,
        "sender_full_name": "lqd",
        "timestamp": 1548448965
    },
    {
        "content": "<blockquote>\n<p>but I wondered if it was possible to have another missing case here, I'm not sure it does happen</p>\n</blockquote>\n<p>seems probable :)</p>",
        "id": 156883306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449033
    },
    {
        "content": "<p>we can have sub/sup placeholders  + sub/sup region \"subtype\" origin, we handled the subtype origin for the sub region (and thus, the 2 cases of sub and sup placeholders), and now we added the subtype origin for the sup region placeholder case</p>",
        "id": 156883411,
        "sender_full_name": "lqd",
        "timestamp": 1548449102
    },
    {
        "content": "<p>and I wondered if we could have a sup region placeholder but a subtype origin on the sub region — I'm not sure if that makes sense</p>",
        "id": 156883431,
        "sender_full_name": "lqd",
        "timestamp": 1548449128
    },
    {
        "content": "<p>maybe :)</p>",
        "id": 156883634,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449288
    },
    {
        "content": "<p>:)</p>",
        "id": 156883663,
        "sender_full_name": "lqd",
        "timestamp": 1548449329
    },
    {
        "content": "<p>I'll try running tests and panicking if that happens</p>",
        "id": 156883695,
        "sender_full_name": "lqd",
        "timestamp": 1548449358
    },
    {
        "content": "<p>what do you expect remains to be done for the PR btw ? maybe I can tackle some of centril's comments</p>",
        "id": 156883797,
        "sender_full_name": "lqd",
        "timestamp": 1548449421
    },
    {
        "content": "<p>ok I was just skimming your changes</p>",
        "id": 156883837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449467
    },
    {
        "content": "<p>and I see what you are asking</p>",
        "id": 156883841,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449470
    },
    {
        "content": "<p>these structs are a bit confusing :P</p>",
        "id": 156883856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449489
    },
    {
        "content": "<p>not sure if you looked at the code that is producing them</p>",
        "id": 156883861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449494
    },
    {
        "content": "<p>it boils down to us walking a graph of constraints</p>",
        "id": 156883872,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449513
    },
    {
        "content": "<p>the idea is that you have something like</p>\n<div class=\"codehilite\"><pre><span></span>SUB &lt;= vid &lt;= SUP\n</pre></div>\n\n\n<p>where <code>SUB &lt;= SUP</code> is not true</p>",
        "id": 156883926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449532
    },
    {
        "content": "<p>and the \"origins\" are the description of the immediate edges connecting to SUB and SUP</p>",
        "id": 156883939,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449549
    },
    {
        "content": "<p>I've seen some of it when I was trying to locate the unexpected expected/actual inversion</p>",
        "id": 156883947,
        "sender_full_name": "lqd",
        "timestamp": 1548449560
    },
    {
        "content": "<p>I don't really think this is the <em>right</em> way to think about it per se.</p>",
        "id": 156883958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449583
    },
    {
        "content": "<p>If nothing else, the origin that is immediately attached to the SUB edge may not be the most interesting one</p>",
        "id": 156883972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449593
    },
    {
        "content": "<p>but anyway it's what the code does now and it seems to work relatively ok in practice</p>",
        "id": 156883978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449604
    },
    {
        "content": "<p>oh alright</p>",
        "id": 156884081,
        "sender_full_name": "lqd",
        "timestamp": 1548449686
    },
    {
        "content": "<p>I'm not really sure I guess how you would get a sup-placeholder where the trait-refs are not immediately attached to it</p>",
        "id": 156884091,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449696
    },
    {
        "content": "<p>I think the answer probably is \"that can probably happen\"</p>",
        "id": 156884107,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449706
    },
    {
        "content": "<p>it might be interesting to remove this case:</p>\n<div class=\"codehilite\"><pre><span></span>            Some(RegionResolutionError::SubSupConflict(\n                vid,\n                _,\n                SubregionOrigin::Subtype(TypeTrace {\n                    cause,\n                    values: ValuePairs::TraitRefs(ExpectedFound { expected, found }),\n                }),\n                _,\n                _,\n                sup_placeholder @ ty::RePlaceholder(_),\n            )) if expected.def_id == found.def_id =&gt;\n</pre></div>\n\n\n<p>and see what changes</p>",
        "id": 156884124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449724
    },
    {
        "content": "<p>since that's kind of the inverse scenario</p>",
        "id": 156884128,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449731
    },
    {
        "content": "<p>but I'd not want to block this PR on it</p>",
        "id": 156884137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449741
    },
    {
        "content": "<p>tbh the PR is looking prety good to me</p>",
        "id": 156884142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449745
    },
    {
        "content": "<p>I didn't read it all over though</p>",
        "id": 156884143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449747
    },
    {
        "content": "<p>and I didn't read <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>'s comments</p>",
        "id": 156884149,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449751
    },
    {
        "content": "<p>let me read it now</p>",
        "id": 156884157,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548449760
    },
    {
        "content": "<p>I will experiment with these 2 cases and then maybe try add a missing arm if there happens to be one</p>",
        "id": 156884206,
        "sender_full_name": "lqd",
        "timestamp": 1548449777
    },
    {
        "content": "<p>but then again, it will depend on our current tests</p>",
        "id": 156884224,
        "sender_full_name": "lqd",
        "timestamp": 1548449797
    },
    {
        "content": "<p>ok, I reviewed</p>",
        "id": 156885110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450435
    },
    {
        "content": "<p>I'll try the reordering you mention!</p>",
        "id": 156885117,
        "sender_full_name": "lqd",
        "timestamp": 1548450448
    },
    {
        "content": "<p>I also responded to <span class=\"user-mention\" data-user-id=\"126931\">@centril</span>'s comments, I don't know that I agree on some of the changes they suggested</p>",
        "id": 156885122,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450454
    },
    {
        "content": "<p>though I do agree that there are problems</p>",
        "id": 156885129,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450466
    },
    {
        "content": "<p>this is just a hard error</p>",
        "id": 156885134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450469
    },
    {
        "content": "<p>anyway, I'm happy with the progress, I think  we should land the PR, but it would probably be good to keep thinking about how to improve</p>",
        "id": 156885185,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450484
    },
    {
        "content": "<p>not sure how to check if the '0 only appears in the self types yet</p>",
        "id": 156885188,
        "sender_full_name": "lqd",
        "timestamp": 1548450486
    },
    {
        "content": "<p>if you want to try the reordering though I'm <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 156885190,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> this is what the <code>self_ty_has_vid</code> is doing</p>",
        "id": 156885199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450507
    },
    {
        "content": "<p>oh yeah duh</p>",
        "id": 156885211,
        "sender_full_name": "lqd",
        "timestamp": 1548450517
    },
    {
        "content": "<p>i.e., if has-vid is true but self-ty-has-vid is false</p>",
        "id": 156885212,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450518
    },
    {
        "content": "<p>then it only appears in the substs</p>",
        "id": 156885214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450523
    },
    {
        "content": "<p>we probably need two of those though</p>",
        "id": 156885220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450530
    },
    {
        "content": "<p>I even added an \"expected_self_ty_has_vid\" at some point but didn't know how to use it</p>",
        "id": 156885233,
        "sender_full_name": "lqd",
        "timestamp": 1548450544
    },
    {
        "content": "<p>i.e., for actual + expected ty</p>",
        "id": 156885234,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450545
    },
    {
        "content": "<p>so..many...cases...</p>",
        "id": 156885239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450553
    },
    {
        "content": "<p>would be nice to reduce the rightward drift</p>",
        "id": 156885249,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450559
    },
    {
        "content": "<p>indeed</p>",
        "id": 156885256,
        "sender_full_name": "lqd",
        "timestamp": 1548450574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>'s suggestion for a fn could help</p>",
        "id": 156885258,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450577
    },
    {
        "content": "<p>i.e., we could do the <code>maybe_replace</code> calls</p>",
        "id": 156885266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450582
    },
    {
        "content": "<p>and then have the inner logic in a helper fn</p>",
        "id": 156885270,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548450586
    },
    {
        "content": "<p>I'll try this as well, it shouldn't be that long</p>",
        "id": 156885334,
        "sender_full_name": "lqd",
        "timestamp": 1548450626
    },
    {
        "content": "<p>I'm guessing next week should still be ok to land</p>",
        "id": 156885344,
        "sender_full_name": "lqd",
        "timestamp": 1548450653
    },
    {
        "content": "<p>(still unsure how pressing P-high is)</p>",
        "id": 156885383,
        "sender_full_name": "lqd",
        "timestamp": 1548450708
    },
    {
        "content": "<p>it looks like this is a 1.33 regression</p>",
        "id": 156885948,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548451300
    },
    {
        "content": "<p>so we have a bit of time before it hits stable</p>",
        "id": 156885953,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548451305
    },
    {
        "content": "<p>ok great, I'm hopeful I can get it done next week</p>",
        "id": 156886063,
        "sender_full_name": "lqd",
        "timestamp": 1548451425
    },
    {
        "content": "<p>(seems like the more time-consuming parts are already there)</p>",
        "id": 156886128,
        "sender_full_name": "lqd",
        "timestamp": 1548451456
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>  re. refactoring out to functions, I think especially in a big project and repo such as this its good to be proactive on splitting things out; otherwise it will inevitably lead to huge files and huge functions as people add and add more bits</p>",
        "id": 156886198,
        "sender_full_name": "centril",
        "timestamp": 1548451558
    },
    {
        "content": "<p>the last changes made the PR nicer <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>\n<p>I'd still change to <code>impl&lt;T&gt; Trait for for&lt;'a&gt; fn(&amp;'a T) {</code> but that's about it</p>",
        "id": 156886264,
        "sender_full_name": "centril",
        "timestamp": 1548451597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> seems fine. I like it for reducing the rightward drift, regardless. (Note that this file is specific to this particular error message, as well, so it's already fairly narrow.)</p>",
        "id": 156886328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548451682
    },
    {
        "content": "<blockquote>\n<p>the last changes made the PR nicer :)</p>\n</blockquote>\n<p>:)</p>",
        "id": 156886663,
        "sender_full_name": "lqd",
        "timestamp": 1548451961
    },
    {
        "content": "<p>thanks to niko ofc I had nothing to do with those <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 156886803,
        "sender_full_name": "lqd",
        "timestamp": 1548452071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've updated <a href=\"https://github.com/rust-lang/rust/issues/57901\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57901\">#57901</a> to only do the inversion whenever the sub/sup placeholders appear in the self type, so that the ordering is untouched in the common cases, and (AFAICT always) making it the closest to the placeholder regions. It does make the message read better to me as well. I've also extracted the notes-handling part to a helper fn like @centril mentioned. Overall, I'm satisfied with the results for now — especially compared to <code>expected Trait, found Trait</code> :) — and as we talked about, we'll continue improving these errors over time. Have a nice weekend you two <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 156941091,
        "sender_full_name": "lqd",
        "timestamp": 1548536290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span>  Have you seen <a href=\"https://github.com/rust-lang/rust/issues/57875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57875\">#57875</a>? What error does it give with your PR?</p>",
        "id": 156977351,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1548605558
    },
    {
        "content": "<p>let me check</p>",
        "id": 156977364,
        "sender_full_name": "lqd",
        "timestamp": 1548605631
    },
    {
        "content": "<p>it looks not to change anything on this example</p>",
        "id": 156977478,
        "sender_full_name": "lqd",
        "timestamp": 1548605822
    },
    {
        "content": "<p>I'll investigate this issue because it might be the last missing case we expected but didn't see happening</p>",
        "id": 156977487,
        "sender_full_name": "lqd",
        "timestamp": 1548605857
    },
    {
        "content": "<p>so that specific example doesn't go through the expected new placeholder errors, much like dtolnay's example didn't</p>",
        "id": 156977531,
        "sender_full_name": "lqd",
        "timestamp": 1548605922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> thanks for the link</p>",
        "id": 156977539,
        "sender_full_name": "lqd",
        "timestamp": 1548605955
    },
    {
        "content": "<p>OK</p>",
        "id": 156977542,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1548605968
    },
    {
        "content": "<p>seems related indeed</p>",
        "id": 156977543,
        "sender_full_name": "lqd",
        "timestamp": 1548605978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> as you expected <a href=\"https://github.com/rust-lang/rust/issues/57875\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/57875\">#57875</a> is completely related, it is a SubSupConflict, and both regions are placeholders, with Subtype origins. However, <code>try_report_placeholder_conflict</code>in <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs#L27-L37\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs#L27-L37\">nice_region_errors::placeholder_errors</a> (link to the similar case which is already handled) in general only deals with TraitRefs and these expected/found values are PolyTraitRefs here. Would you expect handling PolyTraitRefs in error messages in this module being vastly different from just TraitRefs ?</p>",
        "id": 156981927,
        "sender_full_name": "lqd",
        "timestamp": 1548613319
    },
    {
        "content": "<p>Hmm. I think you'll have to ask <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> about that. I would have thought that placeholder regions shouldn't appear in binders like that.</p>",
        "id": 156982330,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1548613969
    },
    {
        "content": "<p>yeah :/ alright thanks Matthew, maybe it can easily be added to the PR even though it doesn't look like it at first glance; we'll see soon.</p>",
        "id": 156982458,
        "sender_full_name": "lqd",
        "timestamp": 1548614184
    },
    {
        "content": "<p>Actually maybe I'm misunderstanding what's going on, if it's not too much trouble, could you debug print the <code>RegionResolutionError</code> with <code>-Zverbose</code> passed to the compiler?</p>",
        "id": 156982961,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1548615111
    },
    {
        "content": "<p>sure</p>",
        "id": 156983157,
        "sender_full_name": "lqd",
        "timestamp": 1548615393
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116118\">@Matthew Jasper</span> a bit hard to read but <a href=\"https://gist.githubusercontent.com/lqd/6d06d3d4246380b28f0b1c062a272851/raw/7c2aea2b0fa6b079eeabd0c42f09ef606fca758c/error.txt\" target=\"_blank\" title=\"https://gist.githubusercontent.com/lqd/6d06d3d4246380b28f0b1c062a272851/raw/7c2aea2b0fa6b079eeabd0c42f09ef606fca758c/error.txt\">here it is</a> — the error output lacks the origins' TypeTrace.values</p>",
        "id": 156983297,
        "sender_full_name": "lqd",
        "timestamp": 1548615620
    },
    {
        "content": "<p>so they're printed in the later lines</p>",
        "id": 156983299,
        "sender_full_name": "lqd",
        "timestamp": 1548615634
    },
    {
        "content": "<p>That was pretty much what I first thought, so I'm not really sure what's going on.</p>",
        "id": 156983773,
        "sender_full_name": "Matthew Jasper",
        "timestamp": 1548616358
    },
    {
        "content": "<p>we'll see with niko but at least we've done a little initial investigation to see how it's different from the other similar issues</p>",
        "id": 156983941,
        "sender_full_name": "lqd",
        "timestamp": 1548616621
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> hmm I think that handling a poly-trait-ref and a trait-ref doesn't have to be .. particularly different here. But I guess I would try to handle it in a separate PR.</p>",
        "id": 157057066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548709259
    },
    {
        "content": "<p>Regarding your existing changes, they look great!</p>",
        "id": 157057073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548709263
    },
    {
        "content": "<p>The only nit I can see is that I might be inclined to change from \"the specific lifetime <code>'1</code>\" to \"some specific lifetime\"</p>",
        "id": 157057088,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548709278
    },
    {
        "content": "<p>somehow the word \"the\" makes the number thing that much more confusing</p>",
        "id": 157057097,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548709292
    },
    {
        "content": "<p>yeah that was the only thing I was wondering about, the \"some\" vs \"the specific\"</p>",
        "id": 157057114,
        "sender_full_name": "lqd",
        "timestamp": 1548709309
    },
    {
        "content": "<p>(apart from handling PolyTraitRefs ofc)</p>",
        "id": 157057169,
        "sender_full_name": "lqd",
        "timestamp": 1548709326
    },
    {
        "content": "<p>so we'd remove the number ?</p>",
        "id": 157057208,
        "sender_full_name": "lqd",
        "timestamp": 1548709385
    },
    {
        "content": "<p>Felix had similar feedback over the wording I think yeah</p>",
        "id": 157057220,
        "sender_full_name": "lqd",
        "timestamp": 1548709397
    },
    {
        "content": "<blockquote>\n<p>so we'd remove the number ?</p>\n</blockquote>\n<p>I didn't mean to remove the number</p>",
        "id": 157057297,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548709455
    },
    {
        "content": "<p>I just meant that the phrase \"the specific lifetime <code>'1</code>\" doesn't seem great; I guess I prefer \"some specific lifetime <code>'1</code>\"</p>",
        "id": 157057307,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548709477
    },
    {
        "content": "<p>oh :)</p>",
        "id": 157057311,
        "sender_full_name": "lqd",
        "timestamp": 1548709484
    },
    {
        "content": "<p>but I'm not <em>in love</em> with the numbers</p>",
        "id": 157057314,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548709486
    },
    {
        "content": "<p>I just don't have a better idea really</p>",
        "id": 157057317,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548709491
    },
    {
        "content": "<p>and I think if we were going to change it, I'd want to change it for the NLL errors too</p>",
        "id": 157057330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548709503
    },
    {
        "content": "<p>at least always having \"some specific lifetime\" would be consistent, and we can then work on the wording \"holistically\" I expect, for these and the NLL ones</p>",
        "id": 157057451,
        "sender_full_name": "lqd",
        "timestamp": 1548709604
    },
    {
        "content": "<p>I'll go update the message now</p>",
        "id": 157057481,
        "sender_full_name": "lqd",
        "timestamp": 1548709631
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/e077501b54f175b3cd9947dd032a55196fb6d989/src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs#L426\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e077501b54f175b3cd9947dd032a55196fb6d989/src/librustc/infer/error_reporting/nice_region_error/placeholder_error.rs#L426\">this</a> should probably say \"some specific lifetime <code>'1</code>\" as well, instead of just \"some lifetime <code>'1</code>\"</p>",
        "id": 157058158,
        "sender_full_name": "lqd",
        "timestamp": 1548710142
    },
    {
        "content": "<p>(I've pushed the reworded blessed tests)</p>",
        "id": 157062805,
        "sender_full_name": "lqd",
        "timestamp": 1548714155
    }
]