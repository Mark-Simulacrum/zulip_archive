[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/131828-t-compiler/topic/TBAA.20Like.20Type.20Information/near/245289721\">said</a>:</p>\n<blockquote>\n<p>I think it already has the information, although I'm not sure how accessible it is. You basically need the mir type system, which is a bit weak but is still good enough to determine the type of a place (and hence of the loads/stores to that place)</p>\n</blockquote>\n<p>Hi guys! I'm working on a GSoC project to integrate Enzyme, an auto-differentiation plugin based on LLVM, into Rust (if you're interesting in the details of the project, see <a href=\"https://docs.google.com/document/d/1__hNN3oPTyPAbNteYeaI3ghkKWdFYO4eFkt73cym800/edit?usp=sharing\">here</a>). Enzyme needs the types of memory objects to do auto-differentiation. It is implemented by adding TBAA metadata to loads/stores to generated LLVM IR when with C/C++ and Swift. However, rustc won't generate such infomation and adding TBAA to rustc was thought as a too big change (see the <a href=\"#narrow/stream/131828-t-compiler/topic/TBAA.20Like.20Type.20Information/near/245289721\">topic</a> I quote).</p>\n<p>My original plan was to just leverage debug info generated by rustc, but it seems impracticable since retrieving types for loads/stores needs semantic information. So I need to modify rustc to type the loads/stores it generates (and thanks to <span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> who let me know that this information is already contained in MIR). <em>What I want to ensure is that adding type information to loads/stores in generated LLVM IR won't be a too big change to the compiler.</em> It would be very helpful if any compiler developer can give some opinions (\"Is adding type infomation to loads/stores in generated LLVM IR accaptable?\"). Other suggests are also welcome.</p>",
        "id": 245433888,
        "sender_full_name": "Chuyang Chen",
        "timestamp": 1625832274
    },
    {
        "content": "<p>What does adding type information to loads/stores mean?</p>",
        "id": 245434125,
        "sender_full_name": "nagisa",
        "timestamp": 1625832419
    },
    {
        "content": "<p>It is important that this does not collide with opaque pointer work.</p>",
        "id": 245434156,
        "sender_full_name": "nagisa",
        "timestamp": 1625832443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Adding.20Types.20to.20loads.2Fstores.20in.20Generated.20LLVM.20IR/near/245434125\">said</a>:</p>\n<blockquote>\n<p>What does adding type information to loads/stores mean?</p>\n</blockquote>\n<p>For example, the Rust code is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// Some other code</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">a</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">// Some other code</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and the last let statement generates LLVM IR</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code>  <span class=\"nv\">%c</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"kt\">i64</span><span class=\"p\">,</span> <span class=\"kt\">i64</span><span class=\"p\">*</span> <span class=\"nv\">%a</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span>\n</code></pre></div>\n<p>Type information may be added as (just an example, I haven't decided the actual format)</p>\n<div class=\"codehilite\" data-code-language=\"LLVM\"><pre><span></span><code>  <span class=\"nv\">%c</span> <span class=\"p\">=</span> <span class=\"k\">load</span> <span class=\"kt\">i64</span><span class=\"p\">,</span> <span class=\"kt\">i64</span><span class=\"p\">*</span> <span class=\"nv\">%a</span><span class=\"p\">,</span> <span class=\"k\">align</span> <span class=\"m\">8</span><span class=\"p\">,!{</span><span class=\"nv\">!\"u32\"</span><span class=\"p\">,</span> <span class=\"nv\">!\"u32\"</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>It describes the types of the source address and the target variable.</p>\n<p>The type info will be metadata that has nothing to do with other parts of the compilation.</p>",
        "id": 245435478,
        "sender_full_name": "Chuyang Chen",
        "timestamp": 1625833374
    },
    {
        "content": "<p>yeah, I don't see a problem with this as long as its disabled by default and/or has no measurable impact on compile times if enabled by default.</p>",
        "id": 245437578,
        "sender_full_name": "nagisa",
        "timestamp": 1625834669
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"123586\">nagisa</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Adding.20Types.20to.20loads.2Fstores.20in.20Generated.20LLVM.20IR/near/245437578\">said</a>:</p>\n<blockquote>\n<p>yeah, I don't see a problem with this as long as its disabled by default and/or has no measurable impact on compile times if enabled by default.</p>\n</blockquote>\n<p>OK, that's good.</p>",
        "id": 245438330,
        "sender_full_name": "Chuyang Chen",
        "timestamp": 1625835085
    }
]