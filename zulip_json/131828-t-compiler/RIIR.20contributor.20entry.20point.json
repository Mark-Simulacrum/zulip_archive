[
    {
        "content": "<p>The usual Rust entry point is <code>cargo {build,run,check,test}</code>. rustc's entry point is a Python script. Many Rust devs will already be familiar with Rust workflows, this is not one. People have mentioned removing bootstrap.py entirely as implausible, but if at all possible, the degree to which rustc's entry point can be turned into mostly a Rust workflow would still simplify things, especially for newer contributors.</p>\n<p>Splitting out this conversation from the other related threads because it's a specific ergonomics point.</p>",
        "id": 209247624,
        "sender_full_name": "Jubilee",
        "timestamp": 1599437180
    },
    {
        "content": "<p>I am looking into this now.</p>",
        "id": 209247641,
        "sender_full_name": "simulacrum",
        "timestamp": 1599437244
    },
    {
        "content": "<p>If you need any help lmk~ I'm not exactly a LLVM/CMake specialist but Python is something I can read. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 209247707,
        "sender_full_name": "Jubilee",
        "timestamp": 1599437397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span>  is already working on the first step for this <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <a href=\"https://github.com/rust-lang/rust/pull/76423\">https://github.com/rust-lang/rust/pull/76423</a></p>",
        "id": 209247877,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599437716
    },
    {
        "content": "<p><span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> </p>\n<p>You probably are aware of this, but, just in case, we've been using <a href=\"https://github.com/matklad/cargo-xtask\">https://github.com/matklad/cargo-xtask</a> with great success to manage \"custom\" bits of build process in rust-analyzer.</p>",
        "id": 209772723,
        "sender_full_name": "matklad",
        "timestamp": 1599826724
    },
    {
        "content": "<p>yeah I think something like xtask is feasible for rustbuild to use, or at least the pattern</p>",
        "id": 209774184,
        "sender_full_name": "simulacrum",
        "timestamp": 1599827580
    }
]