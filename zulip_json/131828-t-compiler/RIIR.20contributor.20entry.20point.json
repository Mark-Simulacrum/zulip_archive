[
    {
        "content": "<p>The usual Rust entry point is <code>cargo {build,run,check,test}</code>. rustc's entry point is a Python script. Many Rust devs will already be familiar with Rust workflows, this is not one. People have mentioned removing bootstrap.py entirely as implausible, but if at all possible, the degree to which rustc's entry point can be turned into mostly a Rust workflow would still simplify things, especially for newer contributors.</p>\n<p>Splitting out this conversation from the other related threads because it's a specific ergonomics point.</p>",
        "id": 209247624,
        "sender_full_name": "Jubilee",
        "timestamp": 1599437180
    },
    {
        "content": "<p>I am looking into this now.</p>",
        "id": 209247641,
        "sender_full_name": "simulacrum",
        "timestamp": 1599437244
    },
    {
        "content": "<p>If you need any help lmk~ I'm not exactly a LLVM/CMake specialist but Python is something I can read. <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 209247707,
        "sender_full_name": "Jubilee",
        "timestamp": 1599437397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span>  is already working on the first step for this <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span> <a href=\"https://github.com/rust-lang/rust/pull/76423\">https://github.com/rust-lang/rust/pull/76423</a></p>",
        "id": 209247877,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1599437716
    },
    {
        "content": "<p><span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span> </p>\n<p>You probably are aware of this, but, just in case, we've been using <a href=\"https://github.com/matklad/cargo-xtask\">https://github.com/matklad/cargo-xtask</a> with great success to manage \"custom\" bits of build process in rust-analyzer.</p>",
        "id": 209772723,
        "sender_full_name": "matklad",
        "timestamp": 1599826724
    },
    {
        "content": "<p>yeah I think something like xtask is feasible for rustbuild to use, or at least the pattern</p>",
        "id": 209774184,
        "sender_full_name": "simulacrum",
        "timestamp": 1599827580
    },
    {
        "content": "<p>I am working on this: <a href=\"https://github.com/rust-lang/rust/issues/94829\">https://github.com/rust-lang/rust/issues/94829</a></p>",
        "id": 275223500,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647257665
    },
    {
        "content": "<p>one thing <span class=\"user-mention silent\" data-user-id=\"116015\">Alex Crichton</span> mentioned in the original PR is that this leads to duplicate code between <code>bootstrap.py</code> and rustbuild. I wonder if eventually, we can remove the <code>config.toml</code> autodetection from bootstrap.py and require you to pass <code>--config</code> and <code>--build</code> explicitly</p>",
        "id": 275223762,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647257866
    },
    {
        "content": "<p>I don't think there should be much other shared code other than the logic to download a rust toolchain, which is kind of already contorted in bootstrap.py because it handles both the beta / bootstrap compiler and <code>download-rustc</code></p>",
        "id": 275223866,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647257921
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/RIIR.20contributor.20entry.20point/near/275223762\">said</a>:</p>\n<blockquote>\n<p>one thing <span class=\"user-mention silent\" data-user-id=\"116015\">Alex Crichton</span> mentioned in the original PR is that this leads to duplicate code between <code>bootstrap.py</code> and rustbuild. I wonder if eventually, we can remove the <code>config.toml</code> autodetection from bootstrap.py and require you to pass <code>--config</code> and <code>--build</code> explicitly</p>\n</blockquote>\n<p>another <em>very</em> long-term goal I have is to remove x.py altogether and have distros go through <code>bootstrap.py</code> directly</p>",
        "id": 275223906,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647257964
    },
    {
        "content": "<p>I am not too worried about duplicate code fwiw</p>",
        "id": 275236817,
        "sender_full_name": "simulacrum",
        "timestamp": 1647265424
    },
    {
        "content": "<p>I think in the long term my expectation is that we will ship the bootstrap binary prebuilt, which is not itself really in need of configuration, which means that bootstrap.py will just be build triple detection + download of that binary and then immediate execution; perhaps ignoring any configured build triple at that point (just --build perhaps).</p>",
        "id": 275236950,
        "sender_full_name": "simulacrum",
        "timestamp": 1647265487
    },
    {
        "content": "<p>I thought the whole point of using a non-Rust language for bootstrapping was to make it easier to bootstrap Rust to a brand-new platform for the first time?</p>",
        "id": 275237047,
        "sender_full_name": "bstrie",
        "timestamp": 1647265531
    },
    {
        "content": "<p>Rustbuild is useless without a rustc for the same triple. If you manage to get rustc work you probably have also implemented enough of libstd for rustbuild to work. (except maybe the code in rustbuild to set mtime)</p>",
        "id": 275237644,
        "sender_full_name": "bjorn3",
        "timestamp": 1647265793
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"256342\">bstrie</span> <a href=\"#narrow/stream/131828-t-compiler/topic/RIIR.20contributor.20entry.20point/near/275237047\">said</a>:</p>\n<blockquote>\n<p>I thought the whole point of using a non-Rust language for bootstrapping was to make it easier to bootstrap Rust to a brand-new platform for the first time?</p>\n</blockquote>\n<p>The point is to make it possible for distros to build rust without a pre-existing host toolchain. Like <span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> said, rustbuild depends on libstd and you can't build it unless you already have a working cross-compile toolchain.</p>",
        "id": 275241918,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647267548
    },
    {
        "content": "<p>CI also needs the same logic I think</p>",
        "id": 275242505,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647267824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> I saw that PR and I'm really excited for this work! Thank you for working on it.</p>",
        "id": 275254141,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1647272456
    },
    {
        "content": "<p>if anyone wants to help, I mentioned some easily parallelizable issues on <a href=\"#narrow/stream/122652-new-members/topic/Help.20with.20RRIR.20bootstrap.20entrypoint\">https://rust-lang.zulipchat.com/#narrow/stream/122652-new-members/topic/Help.20with.20RRIR.20bootstrap.20entrypoint</a>. Not all are <em>easy</em> but most shouldn't require too much background knowledge of bootstrap.</p>",
        "id": 275972232,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647789961
    },
    {
        "content": "<p>the \"file locking\" bit especially is very much domain knowledge unrelated to rust and I would <em>love</em> if someone were willing to help out</p>",
        "id": 275972364,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1647790093
    }
]