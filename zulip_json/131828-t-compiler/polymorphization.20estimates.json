[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> chat in about 30 minutes?</p>",
        "id": 151785119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544803536
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> sure</p>",
        "id": 151786192,
        "sender_full_name": "davidtwco",
        "timestamp": 1544804668
    },
    {
        "content": "<p>ok gimme a few minutes</p>",
        "id": 151786332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544804775
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> the branch we were working on is here:</p>\n<p><a href=\"https://github.com/nikomatsakis/rust/tree/polymorphize-analysis\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust/tree/polymorphize-analysis\">https://github.com/nikomatsakis/rust/tree/polymorphize-analysis</a></p>\n<p>it includes the (now passing) test. I'd say the next steps are to </p>\n<ul>\n<li>add some dependencies due to size/alignment </li>\n<li>do the inter-procedural propagation</li>\n</ul>\n<p>well that and maybe write some comments. =)</p>",
        "id": 151792130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544810455
    },
    {
        "content": "<p>Sounds good, will try to take a look at it tonight.</p>",
        "id": 151792812,
        "sender_full_name": "davidtwco",
        "timestamp": 1544811052
    },
    {
        "content": "<p>those two steps seem pretty independent</p>",
        "id": 151793753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1544811889
    },
    {
        "content": "<p>Added a commit on <a href=\"https://github.com/davidtwco/rust/tree/polymorphize-analysis\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/tree/polymorphize-analysis\">my copy of the branch</a> (no permissions on yours) for the <code>depend_size_alignment</code> test - I suspect however that it is slightly too specific to that test.</p>",
        "id": 151833730,
        "sender_full_name": "davidtwco",
        "timestamp": 1544872810
    },
    {
        "content": "<p>Added a commit that tidies that up slightly and has a first - probably naive and inefficient - attempt at the inter-procedural propagation.</p>",
        "id": 151841811,
        "sender_full_name": "davidtwco",
        "timestamp": 1544889727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> <a href=\"https://github.com/nikomatsakis/rust/invitations\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust/invitations\">invited you as a collaborator</a></p>",
        "id": 152036110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545060755
    },
    {
        "content": "<p>I can pull your commits tho</p>",
        "id": 152036119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545060764
    },
    {
        "content": "<p>Great, accepted that.</p>",
        "id": 152036127,
        "sender_full_name": "davidtwco",
        "timestamp": 1545060777
    },
    {
        "content": "<p>Double check they're what we're looking for before pulling them :P</p>",
        "id": 152036147,
        "sender_full_name": "davidtwco",
        "timestamp": 1545060792
    },
    {
        "content": "<p>I pulled them, but I'll check them out now :)</p>",
        "id": 152036246,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545060849
    },
    {
        "content": "<p>or, soon</p>",
        "id": 152036248,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545060850
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> so I think what you want to be doing <a href=\"https://github.com/nikomatsakis/rust/blob/3e2bb22db9f5792202a90ac5afa045ed93c71c48/src/librustc_mir/transform/polymorphize.rs#L312-L330\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust/blob/3e2bb22db9f5792202a90ac5afa045ed93c71c48/src/librustc_mir/transform/polymorphize.rs#L312-L330\">in this code</a> is using <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/layout/enum.SizeSkeleton.html#method.compute\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/layout/enum.SizeSkeleton.html#method.compute\">the <code>SizeSkeleton::compute</code> function</a>. We can check the return type: if it is an <code>Ok</code> result with <a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/layout/enum.SizeSkeleton.html#variant.Known\" target=\"_blank\" title=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/layout/enum.SizeSkeleton.html#variant.Known\"><code>Known</code></a>, then there is no dependency.</p>\n<p>It's a bit tricky to decide what to do otherwise. For now, we could use the existing <code>record_dependency</code> logic on the \"unknown parts\", but it's not really as precise as we might like. Good enough for now.</p>",
        "id": 152037552,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545061902
    },
    {
        "content": "<p>Thanks, I'll get to that a little later today.</p>",
        "id": 152037697,
        "sender_full_name": "davidtwco",
        "timestamp": 1545062001
    },
    {
        "content": "<p>In particular, i'd like to identify the cases where \"all we need to know is the size/alignment of the parameter\", but that's actually a bit tricky. </p>\n<p>For example, if we have a value of type <code>&amp;T::Item</code>, and <code>T::Item</code> is not known to be sized, we would get back a [<code>SizeSkeleton::Pointer](https://doc.rust-lang.org/nightly/nightly-rustc/rustc/ty/layout/enum.SizeSkeleton.html#variant.Pointer) variant that says we \"just need to know </code>T::Item<code>\". But knowing the size/alignment of </code>T` alone is not helpful.</p>",
        "id": 152037706,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062015
    },
    {
        "content": "<p>But that's ok</p>",
        "id": 152037708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062017
    },
    {
        "content": "<p>Let's start with just capturing the higher-level stuff and then we'll try to separate out the cases</p>",
        "id": 152037724,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062030
    },
    {
        "content": "<p>basically we'll be interested in some special cases where just knowing the size/align would be enough, and the rest would be some more general case</p>",
        "id": 152037779,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062052
    },
    {
        "content": "<p>(really it also depends on how much work we'd be willing to put into doing layout code at runtime)</p>",
        "id": 152037809,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062082
    },
    {
        "content": "<p>anyway let me look at the next commit now</p>",
        "id": 152037813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062085
    },
    {
        "content": "<p>I suspect the propagation isn't quite right but figured it was worth an attempt - first time trying to implement something like that from scratch.</p>",
        "id": 152037855,
        "sender_full_name": "davidtwco",
        "timestamp": 1545062132
    },
    {
        "content": "<p>yep, it's not</p>",
        "id": 152037871,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062151
    },
    {
        "content": "<p>but it's in the right direction :)</p>",
        "id": 152037878,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062156
    },
    {
        "content": "<p>btw</p>",
        "id": 152037933,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062179
    },
    {
        "content": "<p>in both cases, I guess we're passing the tests we had?</p>",
        "id": 152037942,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062185
    },
    {
        "content": "<p>(suggests we want some new tests)</p>",
        "id": 152037945,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062189
    },
    {
        "content": "<p>Yeah, we pass all the tests that you wrote - including the ones that we had as <code>//FIXME</code>.</p>",
        "id": 152037962,
        "sender_full_name": "davidtwco",
        "timestamp": 1545062208
    },
    {
        "content": "<p>I'm a bit surprised by that</p>",
        "id": 152037980,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062225
    },
    {
        "content": "<p>maybe I missed something</p>",
        "id": 152037994,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062235
    },
    {
        "content": "<p>I'll do a local build and inspect</p>",
        "id": 152038133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062346
    },
    {
        "content": "<p>pushed some tests for the local stuff at least, <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, that are still failing :)</p>",
        "id": 152038622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545062761
    },
    {
        "content": "<p>Great, I'll take a look at them.</p>",
        "id": 152038842,
        "sender_full_name": "davidtwco",
        "timestamp": 1545062896
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have any thoughts on how I should change the propagation so it is more what you were looking for?</p>",
        "id": 152040439,
        "sender_full_name": "davidtwco",
        "timestamp": 1545064198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I want to look at why the existing tests are passing :) the main things I think are missing are:</p>\n<ul>\n<li>we should be doing substitution -- i.e., we should take the results from the callee and substitute the type parameters</li>\n<li>we should be then processing those (substituted) types again, and we're not</li>\n</ul>",
        "id": 152042632,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545066016
    },
    {
        "content": "<p>What do you mean by processing in this case?</p>",
        "id": 152042648,
        "sender_full_name": "davidtwco",
        "timestamp": 1545066045
    },
    {
        "content": "<p>mm I  mean we need to \"examine\" them to see whether the types in question are known</p>",
        "id": 152043842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545067110
    },
    {
        "content": "<p>e.g., if we had to know the size/alignment of <code>T</code>, and the caller knows that <code>T</code> is <code>u32</code>, we should be all set</p>",
        "id": 152043855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545067123
    },
    {
        "content": "<p>So, if we have a call edge to a function with a dependency - then there are two cases, it's either called with another type parameter that we don't know the size/alignment of, or it is called with a type that we know, such as <code>u32</code>? Do we still record a dependency in both cases, or only the former?</p>",
        "id": 152044017,
        "sender_full_name": "davidtwco",
        "timestamp": 1545067237
    },
    {
        "content": "<p>only the former</p>",
        "id": 152044562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545067598
    },
    {
        "content": "<p>but the test I expected to exercise that path</p>",
        "id": 152044571,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545067605
    },
    {
        "content": "<p>is passing</p>",
        "id": 152044575,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545067606
    },
    {
        "content": "<p>and I don't know why</p>",
        "id": 152044577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545067608
    },
    {
        "content": "<p>I remember doing something to make that pass.</p>",
        "id": 152044741,
        "sender_full_name": "davidtwco",
        "timestamp": 1545067718
    },
    {
        "content": "<p>But I forget what.</p>",
        "id": 152044745,
        "sender_full_name": "davidtwco",
        "timestamp": 1545067721
    },
    {
        "content": "<p>ok :) I'l try to dig in later if I can scrape up a litle time</p>",
        "id": 152044798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545067771
    },
    {
        "content": "<p>One thing I’m not clear on is what end state we want to end up with - should we only end up with dependencies on functions that depend on some information about the type of a type parameter but not all the uses of those functions if a use provides a concrete type? I guess I mostly don’t understand how we’ll keep track that there was a use of the function with a concrete type since I feel like that would be necessary when deciding how many copies of the function to make? Or maybe I’m getting this backwards and thinking about the functions with dependencies as those where we want to polymorphize but jn fact it is the opposite - I think that’s it. I guess I’ve answered my own question.</p>",
        "id": 152045069,
        "sender_full_name": "davidtwco",
        "timestamp": 1545067974
    },
    {
        "content": "<blockquote>\n<p>should we only end up with dependencies on functions that depend on some information about the type of a type parameter but not all the uses of those functions if a use provides a concrete type?</p>\n</blockquote>\n<p>this sounds right</p>",
        "id": 152045184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545068070
    },
    {
        "content": "<blockquote>\n<p>I guess I mostly don’t understand how we’ll keep track that there was a use of the function with a concrete type since I feel like that would be necessary when deciding how many copies of the function to make</p>\n</blockquote>\n<p>this code doesn't really have the job of deciding how many copies to make</p>",
        "id": 152045201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545068088
    },
    {
        "content": "<p>it has the job of deciding which aspects of the type parameters are important</p>",
        "id": 152045209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545068100
    },
    {
        "content": "<p>there is another piece of code that figures out the full set of copies that are needed (it's called the collector)</p>",
        "id": 152045229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545068112
    },
    {
        "content": "<p>Yeah, I think I get it now. I was conflating that.</p>",
        "id": 152045245,
        "sender_full_name": "davidtwco",
        "timestamp": 1545068121
    },
    {
        "content": "<p>Doesn’t that mean that the collector already does some of what this code is doing? Perhaps naively, I’d assume that this collector would need to identify which functions have dependencies so it knows which will need multiple copies (assuming they’re instantiated with more than one type that has a different size/alignment or trait method impl and therefore will need multiple copies). Then it would do propagation to work out what distinct size/alignments it needs copies for?</p>",
        "id": 152045697,
        "sender_full_name": "davidtwco",
        "timestamp": 1545068456
    },
    {
        "content": "<p>(Assuming that the collector is some code that already exists and isn’t something we’re going to add later)</p>",
        "id": 152046251,
        "sender_full_name": "davidtwco",
        "timestamp": 1545068888
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Pushed a commit with the <code>SizeSkeleton::compute</code> check.</p>",
        "id": 152096523,
        "sender_full_name": "davidtwco",
        "timestamp": 1545126125
    },
    {
        "content": "<p>Remembered that <a href=\"https://github.com/nikomatsakis/rust/blob/3e2bb22db9f5792202a90ac5afa045ed93c71c48/src/librustc_mir/transform/polymorphize.rs#L204-L206\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust/blob/3e2bb22db9f5792202a90ac5afa045ed93c71c48/src/librustc_mir/transform/polymorphize.rs#L204-L206\">this was the fix</a> that made the <code>no_dependency_indirect</code> case pass - shouldn't be needed with the fixed propagation.</p>",
        "id": 152096550,
        "sender_full_name": "davidtwco",
        "timestamp": 1545126177
    },
    {
        "content": "<p>I looked into trying to do the substitution and processing you mentioned but could quite work out how to do that. I expected that I'd need to take the <code>DefId</code> callee, substitute the <code>Substs</code> into that and then use the <code>ParamTy</code> as a sort of index to get the right type parameter that was the dependency back out as a <code>Ty</code> that I can then do the same size checks to decide whether to record a dependency.</p>",
        "id": 152096637,
        "sender_full_name": "davidtwco",
        "timestamp": 1545126307
    },
    {
        "content": "<p>Not sure if that's right but it sounded right.</p>",
        "id": 152096646,
        "sender_full_name": "davidtwco",
        "timestamp": 1545126321
    },
    {
        "content": "<p>(fairly certain it isn't)</p>",
        "id": 152096993,
        "sender_full_name": "davidtwco",
        "timestamp": 1545126831
    },
    {
        "content": "<p>Also, can you confirm that the <code>dependency_because_embed_ref_sized</code> function should have a dependency? - there isn't a <code>FIXME</code> comment like in other tests and it didn't start to error like I'd have expected - wasn't sure if there was more I had to do or if it was incorrectly named.</p>",
        "id": 152097176,
        "sender_full_name": "davidtwco",
        "timestamp": 1545127076
    },
    {
        "content": "<p>Ignore the above w/r/t propagation, figured it out and pushed a commit.</p>",
        "id": 152099723,
        "sender_full_name": "davidtwco",
        "timestamp": 1545130238
    },
    {
        "content": "<blockquote>\n<p>Remembered that <a href=\"https://github.com/nikomatsakis/rust/blob/3e2bb22db9f5792202a90ac5afa045ed93c71c48/src/librustc_mir/transform/polymorphize.rs#L204-L206\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust/blob/3e2bb22db9f5792202a90ac5afa045ed93c71c48/src/librustc_mir/transform/polymorphize.rs#L204-L206\">this was the fix</a> that made the <code>no_dependency_indirect</code> case pass - shouldn't be needed with the fixed propagation.</p>\n</blockquote>\n<p>ah, I missed that line</p>",
        "id": 152115301,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545146759
    },
    {
        "content": "<p>I'll pull and check out the latest in a bit :)</p>",
        "id": 152115351,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545146769
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> looking now -- seems much closer! I think that the method <code>visit_ty</code> could use to be renamed, and doesn't look <em>quite</em> right. </p>\n<p>For one thing, if the dependency is not related to size/alignment, then it doesn't matter whether we have a known size or not.</p>\n<p>But also, maybe the idea of keying the dependency on just a <code>TyParam</code> is sort of flawed anyway, even for size. Maybe it'd be better to make the <code>Dependency</code> include either a <code>TraitRef</code> (indicating the method that is being invoked) or the full <code>Ty</code> that is being moved about, etc.</p>\n<p>Then we can basically just implement <code>TypeFoldable</code> and apply the <code>subst</code> method to it, and then \"re-add\" it. In the case of a method dispatch, this would check whether the <code>Instance</code> is now statically known; in the case of a copy/move, it would check if the type is statically known.</p>",
        "id": 152124359,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545154413
    },
    {
        "content": "<p>I have a test for at least one problem.</p>",
        "id": 152124362,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545154420
    },
    {
        "content": "<p>I will push, and maybe try to make a few more tests to show what I'm talking about.</p>",
        "id": 152124372,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545154430
    },
    {
        "content": "<p>(If you want, I can do the fix I'm talking about, or you can take a stab, I'm good either way)</p>",
        "id": 152124379,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545154440
    },
    {
        "content": "<p>Feel free to, I'll take a go at whatever is left when I'm next looking at it.</p>",
        "id": 152124485,
        "sender_full_name": "davidtwco",
        "timestamp": 1545154550
    },
    {
        "content": "<blockquote>\n<p>But also, maybe the idea of keying the dependency on just a <code>TyParam</code> is sort of flawed anyway, even for size.</p>\n</blockquote>\n<p>What do you think is flawed about it?</p>",
        "id": 152124796,
        "sender_full_name": "davidtwco",
        "timestamp": 1545154869
    },
    {
        "content": "<p>I pushed a few tests; it's at least <em>imprecise</em>. That said, poking a bit at my proposed alternative raised some questions and I stopped for now, since I want to look at your NLL PR first. =) </p>\n<p>In particular, I realized that the set of call edges can grow dynamically as we get more precise, and I just wanted to think about what is the right question we should be asking precisely anyway.</p>",
        "id": 152125184,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545155331
    },
    {
        "content": "<blockquote>\n<p>Also, can you confirm that the <code>dependency_because_embed_ref_sized</code> function should have a dependency? - there isn't a <code>FIXME</code> comment like in other tests and it didn't start to error like I'd have expected - wasn't sure if there was more I had to do or if it was incorrectly named.</p>\n</blockquote>\n<p>Just going to bump this message because it's still something I'm unsure of.</p>",
        "id": 152125386,
        "sender_full_name": "davidtwco",
        "timestamp": 1545155596
    },
    {
        "content": "<p>i'm confused about that question</p>",
        "id": 152143972,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I see this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">dependency_because_embed_ref_sized</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">EmbedRef</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR no polymorphic dependencies found</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// Here, the size of `EmbedRef` is known up front.</span>\n<span class=\"w\">    </span><span class=\"n\">EmbedRef</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 152143981,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172541
    },
    {
        "content": "<p>i.e., <em>no</em> dependency</p>",
        "id": 152143983,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172545
    },
    {
        "content": "<p>I think this is correct because <code>T: Sized</code> is known</p>",
        "id": 152143986,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172552
    },
    {
        "content": "<p>oh, I see</p>",
        "id": 152144073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172631
    },
    {
        "content": "<p>it is indeed ill-named</p>",
        "id": 152144075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545172636
    },
    {
        "content": "<p>Cool, I suspected it was but wanted to check.</p>",
        "id": 152144192,
        "sender_full_name": "davidtwco",
        "timestamp": 1545172791
    },
    {
        "content": "<p>ps I'm working on the other thing I was talking about</p>",
        "id": 152144501,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545173158
    },
    {
        "content": "<p>Great, I won’t be looking at the branch until tomorrow anyway.</p>",
        "id": 152145443,
        "sender_full_name": "davidtwco",
        "timestamp": 1545174067
    },
    {
        "content": "<p>Do you have work-in-progress local changes for this? Not looking to do anything on it right now, just checking if you've got work locally as I might take a look later.</p>",
        "id": 152201123,
        "sender_full_name": "davidtwco",
        "timestamp": 1545242866
    },
    {
        "content": "<p>good question :)</p>",
        "id": 152204686,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545246159
    },
    {
        "content": "<p>I didn't get things working or bulding before I had to stop last night and I haven't had a chance to get back to it</p>",
        "id": 152205327,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545246724
    },
    {
        "content": "<p>I may be able to put in a bit of time later on though</p>",
        "id": 152205334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545246732
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I have a pretty inefficient thing that seems to be working</p>",
        "id": 152208959,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545249917
    },
    {
        "content": "<p>pushed</p>",
        "id": 152208999,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545249961
    },
    {
        "content": "<p>For making <code>Dependency</code> contain a <code>TraitRef</code>/<code>Ty</code>?</p>",
        "id": 152209050,
        "sender_full_name": "davidtwco",
        "timestamp": 1545249970
    },
    {
        "content": "<p>yes</p>",
        "id": 152209058,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545249974
    },
    {
        "content": "<p>and in general just being more precise</p>",
        "id": 152209065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545249979
    },
    {
        "content": "<p>I didn't have time to write many comments :( but take a look if you get a sec</p>",
        "id": 152209077,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545249994
    },
    {
        "content": "<p>and we can discuss how it works</p>",
        "id": 152209081,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545250000
    },
    {
        "content": "<p>it fixes my newer tests anyway ;)</p>",
        "id": 152209150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545250070
    },
    {
        "content": "<p>I think I see how it works.</p>",
        "id": 152209381,
        "sender_full_name": "davidtwco",
        "timestamp": 1545250287
    },
    {
        "content": "<p>You changed the error on <code>dependency_because_unsized_pointer_indirect</code> from \"some dependencies\" to \"no dependencies\" and removed the fixme - should that test be named <code>no_depend_because_unsized_pointer_indirect</code> or should there still be a <code>FIXME</code>?</p>",
        "id": 152209517,
        "sender_full_name": "davidtwco",
        "timestamp": 1545250400
    },
    {
        "content": "<p>test name is wrong</p>",
        "id": 152210592,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251355
    },
    {
        "content": "<p>pushed fix</p>",
        "id": 152210603,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251378
    },
    {
        "content": "<p>Cool, so what are the next steps for this then?</p>",
        "id": 152210703,
        "sender_full_name": "davidtwco",
        "timestamp": 1545251436
    },
    {
        "content": "<p>Try and make that more efficient or just get more test cases passing?</p>",
        "id": 152210709,
        "sender_full_name": "davidtwco",
        "timestamp": 1545251446
    },
    {
        "content": "<p>efficiency only sort of matters at this stgae, since the primary goal is to get some statistics,</p>",
        "id": 152211047,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251753
    },
    {
        "content": "<p>but we do probably have to handle cross-crate correctly</p>",
        "id": 152211055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251760
    },
    {
        "content": "<p>plus I there are surely other dependencies beyond copy/move</p>",
        "id": 152211165,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251819
    },
    {
        "content": "<p>e.g., accessing fields might require knowing layout of structs that might depend on type parameters</p>",
        "id": 152211186,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545251829
    },
    {
        "content": "<p>I can try try to make some tests for that sort of thing</p>",
        "id": 152217410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545257841
    },
    {
        "content": "<p>I'm guessing <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> you didn't try to do anything here, right?</p>",
        "id": 152266350,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545322112
    },
    {
        "content": "<p>Not yet, no.</p>",
        "id": 152266840,
        "sender_full_name": "davidtwco",
        "timestamp": 1545322460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I just pushed a new test, <a href=\"https://github.com/nikomatsakis/rust/blob/polymorphize-analysis/src/test/ui/polymorphize/polymorphize_place.rs\" target=\"_blank\" title=\"https://github.com/nikomatsakis/rust/blob/polymorphize-analysis/src/test/ui/polymorphize/polymorphize_place.rs\"><code>polymorphize_place</code></a></p>",
        "id": 152562655,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545845530
    },
    {
        "content": "<p>it includes a struct:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">OffsetDependent</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">t</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">count</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 152562658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545845547
    },
    {
        "content": "<p>and a function like this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">dependency_because_offset_depends_on_T</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">parameter</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">OffsetDependent</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR no polymorphic dependencies found</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// FIXME -- the offset of the `count` field depends on size/alignment of `T`</span>\n<span class=\"w\">    </span><span class=\"n\">parameter</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>you can see the FIXME :)</p>",
        "id": 152562664,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545845561
    },
    {
        "content": "<p>this is another sort of dependency we don't yet detect</p>",
        "id": 152562667,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545845573
    },
    {
        "content": "<p>I guess we have to visit each <code>Field</code> projection in each place and check that the offset of that field is statically known</p>",
        "id": 152562680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545845596
    },
    {
        "content": "<p>probably by trying to construct a <code>Layout</code></p>",
        "id": 152562746,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545845668
    },
    {
        "content": "<p>Alright, I’ll give this a shot.</p>",
        "id": 152562765,
        "sender_full_name": "davidtwco",
        "timestamp": 1545845713
    },
    {
        "content": "<p>Do we want a new <code>DependencyKind</code> variant for this or should we just use <code>SizeAlignment</code>?</p>",
        "id": 152565541,
        "sender_full_name": "davidtwco",
        "timestamp": 1545849286
    },
    {
        "content": "<p>Pushed what I have for that case.</p>",
        "id": 152565806,
        "sender_full_name": "davidtwco",
        "timestamp": 1545849698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> well, it feels like a new variant; e.g., I could imagine having <code>OffsetOf(Ty, FieldIndex)</code> or something -- saying that the offset of the given field must be known</p>",
        "id": 152566622,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850797
    },
    {
        "content": "<p>I thought it might, will update that now.</p>",
        "id": 152566679,
        "sender_full_name": "davidtwco",
        "timestamp": 1545850815
    },
    {
        "content": "<p>it feels different than size-alignment anyway</p>",
        "id": 152566687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850829
    },
    {
        "content": "<p>since knowing the size is not enough</p>",
        "id": 152566689,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850834
    },
    {
        "content": "<p>maybe worth adding a test for that</p>",
        "id": 152566691,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850847
    },
    {
        "content": "<p>if we were <em>really</em> smart we would realize that e.g. if you flip the order of the fields in that struct, the type <code>T</code> doesn't even matter</p>",
        "id": 152566711,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850879
    },
    {
        "content": "<p>I'm trying to think of a case where we might know the size of a struct but still not know the answer we need</p>",
        "id": 152566719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850892
    },
    {
        "content": "<p>And the <code>FieldIndex</code> here is that of the field we need the offset of, not the field that causes the problem?</p>",
        "id": 152566721,
        "sender_full_name": "davidtwco",
        "timestamp": 1545850896
    },
    {
        "content": "<p>maybe that's just not possible</p>",
        "id": 152566725,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850901
    },
    {
        "content": "<p>(or actually, the opposite)</p>",
        "id": 152566728,
        "sender_full_name": "davidtwco",
        "timestamp": 1545850905
    },
    {
        "content": "<blockquote>\n<p>And the <code>FieldIndex</code> here is that of the field we need the offset of, not the field that causes the problem?</p>\n</blockquote>\n<p>correct</p>",
        "id": 152566769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850924
    },
    {
        "content": "<p>at least that was how I thought of it</p>",
        "id": 152566773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545850942
    },
    {
        "content": "<p>That's easier for now, so I'll do that.</p>",
        "id": 152566783,
        "sender_full_name": "davidtwco",
        "timestamp": 1545850957
    },
    {
        "content": "<blockquote>\n<p>I'm trying to think of a case where we might know the size of a struct but still not know the answer we need</p>\n</blockquote>\n<p>I guess that to know the size of a struct, we must know the offset of all of its fields</p>",
        "id": 152566798,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851016
    },
    {
        "content": "<p>so I suppose that knowing the size <em>is</em> sufficient, just not <em>necessary</em></p>",
        "id": 152566803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851032
    },
    {
        "content": "<p>also, given that we re-order fields and things, the ordering of fields doesn't really matter</p>",
        "id": 152566847,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851063
    },
    {
        "content": "<p>(unless the struct is <code>#[repr(C)]</code> but that is probably thinking too hard)</p>",
        "id": 152566856,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851078
    },
    {
        "content": "<p>so maybe there isn't really a <em>need</em> for a new kind of dependency, though it also doesn't seem <em>bad</em> to have one</p>",
        "id": 152566857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851092
    },
    {
        "content": "<p>(so perhaps <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> your commit is basically good as is)</p>",
        "id": 152566870,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851141
    },
    {
        "content": "<p>Even if was treated the exact same as the other variant, it's nice for some context I think.</p>",
        "id": 152566937,
        "sender_full_name": "davidtwco",
        "timestamp": 1545851200
    },
    {
        "content": "<p>yes</p>",
        "id": 152566952,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851229
    },
    {
        "content": "<p>I'm trying to think what other cases could cause problems now</p>",
        "id": 152566957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851243
    },
    {
        "content": "<p>I guess another example might be <em>assign</em> -- assigning to a local of unknown type</p>",
        "id": 152566962,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851276
    },
    {
        "content": "<p>I'm just looking down the list of cases in the visitor basically</p>",
        "id": 152567011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851291
    },
    {
        "content": "<p>most cases wind up covered by <code>Operand</code></p>",
        "id": 152567020,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851321
    },
    {
        "content": "<p>or some combination of other things</p>",
        "id": 152567046,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851391
    },
    {
        "content": "<p>though it might be good to add code for them anyway (e.g., all local variables should have types of known size)</p>",
        "id": 152567090,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851407
    },
    {
        "content": "<p>Pushed another commit with a new variant.</p>",
        "id": 152567253,
        "sender_full_name": "davidtwco",
        "timestamp": 1545851683
    },
    {
        "content": "<p>ok well I guess the next big steps is</p>\n<ul>\n<li>to make this work across crates</li>\n<li>to integrate with the collector so we can give some sort of estimate of how much re-use we would get in practice</li>\n</ul>",
        "id": 152567406,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851924
    },
    {
        "content": "<p>I have to run now but I'll be back some tomorrow</p>",
        "id": 152567418,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851956
    },
    {
        "content": "<p>I'm not 100% sure where the collector code lives these days :P</p>",
        "id": 152567421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851972
    },
    {
        "content": "<p>looks like this <code>rustc_mir::monomorphize::collector</code></p>",
        "id": 152567426,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545851993
    },
    {
        "content": "<p>so I think the idea would be to (presuming the option is enabled) take the full list of monomorphized items we need to create</p>",
        "id": 152567468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852007
    },
    {
        "content": "<p>take the dependency kinds we get for each fn</p>",
        "id": 152567470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852013
    },
    {
        "content": "<p>and kind of join the two together -- basically find out how many monomorphiations we could avoid</p>",
        "id": 152567473,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852027
    },
    {
        "content": "<p>i.e., if we have some fn <code>foo&lt;T, U&gt;</code> and we find that it has a bunch of dependencies on <code>T</code> but none on <code>U</code>, and then we see that we make (currently) 4 copies <code>foo&lt;i32, i32&gt;</code>, <code>foo&lt;u32, i32&gt;</code>, <code>foo&lt;i32, u32&gt;</code>, and <code>foo&lt;u32, u32&gt;</code>,</p>",
        "id": 152567483,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852077
    },
    {
        "content": "<p>then we would know that 2 of those copies could be avoided, and we could just make <code>foo&lt;i32, _&gt;</code> and <code>foo&lt;u32, _&gt;</code></p>",
        "id": 152567489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852095
    },
    {
        "content": "<p><span class=\"emoji emoji-1f44d\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 152567534,
        "sender_full_name": "davidtwco",
        "timestamp": 1545852133
    },
    {
        "content": "<p>I am debating the best way to do this :)</p>",
        "id": 152567540,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852167
    },
    {
        "content": "<p>one way would be to take the dependencies for the fn, substitute the values of the type parameters, and then just have a hashset of those substituted results</p>",
        "id": 152567547,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852188
    },
    {
        "content": "<p>I think that would be correct?</p>",
        "id": 152567548,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852192
    },
    {
        "content": "<p>ah, I guess that we don't want to modify the <em>collector</em> really</p>",
        "id": 152567554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852224
    },
    {
        "content": "<p>instead, we can probably just invoke the query that returns its results</p>",
        "id": 152567596,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852255
    },
    {
        "content": "<p>from inside the poloymorphization code</p>",
        "id": 152567598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852259
    },
    {
        "content": "<p>at least I think there is a query</p>",
        "id": 152567601,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852287
    },
    {
        "content": "<p>ok, the query is <code>collect_and_partition_mono_items</code></p>",
        "id": 152567732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852507
    },
    {
        "content": "<p>I really do have to go now :) that's...probably not quite enough crumbs <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> to point you in the right direction, but I can try to leave some more details tips tomorrow :)</p>",
        "id": 152567755,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852570
    },
    {
        "content": "<p>and/or maybe I'll try to do a \"first draft\"</p>",
        "id": 152567757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545852578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> pushed a new test, <a href=\"http://polymorphize_drop.rs\" target=\"_blank\" title=\"http://polymorphize_drop.rs\">polymorphize_drop.rs</a>, showing a kind of dependency we are not accounting for</p>",
        "id": 152598366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545912010
    },
    {
        "content": "<p>specifically, we are not detecting when drop glue would have to be run</p>",
        "id": 152598382,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545912058
    },
    {
        "content": "<p>I think that right now if we have a struct with three fields where the second field is the type parameter (that we don’t know the size of) then the current code will add a dependency for accessing the first field even though we’d know the offset?</p>",
        "id": 152598595,
        "sender_full_name": "davidtwco",
        "timestamp": 1545912372
    },
    {
        "content": "<p>Is that expected?</p>",
        "id": 152598598,
        "sender_full_name": "davidtwco",
        "timestamp": 1545912381
    },
    {
        "content": "<p>Since it tries to compute the layout of the whole struct but won’t be able to because of the later fields.</p>",
        "id": 152598606,
        "sender_full_name": "davidtwco",
        "timestamp": 1545912428
    },
    {
        "content": "<blockquote>\n<p>I think that right now if we have a struct with three fields where the second field is the type parameter (that we don’t know the size of) then the current code will add a dependency for accessing the first field even though we’d know the offset?</p>\n</blockquote>\n<p>yes, that is correct, however I think that's ok</p>",
        "id": 152599130,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913374
    },
    {
        "content": "<p>for one thing, the order of the fields is not actually important</p>",
        "id": 152599134,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913381
    },
    {
        "content": "<p>we sort the fields so as to minimize total padding</p>",
        "id": 152599143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913389
    },
    {
        "content": "<p>when computing the layout</p>",
        "id": 152599144,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913395
    },
    {
        "content": "<p>(unless the struct is <code>#[repr(C)]</code>)</p>",
        "id": 152599146,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913405
    },
    {
        "content": "<p>so that implies we would have to know the size/alignment of all fields in order to figure out the offset of <em>any</em> field</p>",
        "id": 152599154,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913430
    },
    {
        "content": "<p>Ah, I see, makes sense.</p>",
        "id": 152599156,
        "sender_full_name": "davidtwco",
        "timestamp": 1545913434
    },
    {
        "content": "<p>regardless, we have enough info to improve that later</p>",
        "id": 152599197,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913451
    },
    {
        "content": "<p>if we did find cases we can handle :)</p>",
        "id": 152599200,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913468
    },
    {
        "content": "<p>but yeah I think there actually aren't many</p>",
        "id": 152599204,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545913480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> pushed an initial version of the analysis for how much size reduction we can achieve</p>",
        "id": 152603005,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545919501
    },
    {
        "content": "<p>Will take a look.</p>",
        "id": 152603024,
        "sender_full_name": "davidtwco",
        "timestamp": 1545919526
    },
    {
        "content": "<p>it's slightly conservative -- it is estimating how much reduction we could get with basically zero supporting infratructure from trans. (i.e., without threading any dynamic information or otherwise getting smarter)</p>",
        "id": 152603155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1545919686
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I don't see any new commits, just checking: did you get a chance to look into the DROP stuff here?</p>",
        "id": 152655357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546006131
    },
    {
        "content": "<p>Not yet. Was travelling back from home yesterday and ended up not having a chance to.</p>",
        "id": 152655560,
        "sender_full_name": "davidtwco",
        "timestamp": 1546006408
    },
    {
        "content": "<p>I’ll be able to take a look in a little bit though.</p>",
        "id": 152655568,
        "sender_full_name": "davidtwco",
        "timestamp": 1546006419
    },
    {
        "content": "<p>OK.</p>",
        "id": 152655682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546006584
    },
    {
        "content": "<p>No <em>great</em> hurry</p>",
        "id": 152655683,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546006588
    },
    {
        "content": "<p>I am looking a bit into the cross-crate question</p>",
        "id": 152655684,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546006594
    },
    {
        "content": "<p>actually, maybe we can do this w/o disturbing the metadata encoder -- if we are calling a fn from across crates, either it must already be monomorphic, or we must have its MIR so we can monomorphize it</p>",
        "id": 152655767,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546006762
    },
    {
        "content": "<p>so we could just re-analyze it</p>",
        "id": 152655770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546006769
    },
    {
        "content": "<p>Added a commit that makes the drop cases work as expected.</p>",
        "id": 152657903,
        "sender_full_name": "davidtwco",
        "timestamp": 1546010181
    },
    {
        "content": "<p>I think it's perhaps a bit too naive but it worked?</p>",
        "id": 152657904,
        "sender_full_name": "davidtwco",
        "timestamp": 1546010189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I think the better way to set that up would be to move the \"if it contains a type parameter\" logic into the <code>record_dependency</code> function</p>",
        "id": 152659105,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012253
    },
    {
        "content": "<p>also, I think you can use the <code>needs_subst()</code> helper for that</p>",
        "id": 152659117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012275
    },
    {
        "content": "<p>but otherwise, probably ok</p>",
        "id": 152659120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012277
    },
    {
        "content": "<p>hmm</p>",
        "id": 152659126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012292
    },
    {
        "content": "<p>actually, there is a helper for this we can use to get more precise</p>",
        "id": 152659131,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012299
    },
    {
        "content": "<p>e.g., we know that <code>&amp;T</code> never needs drop</p>",
        "id": 152659133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012303
    },
    {
        "content": "<p><code>ty.needs_drop(self.tcx, self.param_env)</code></p>",
        "id": 152659150,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012322
    },
    {
        "content": "<p>let me add a test :)</p>",
        "id": 152659189,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012343
    },
    {
        "content": "<p>I wasn't sure if <code>needs_drop</code> was redundant because we were already in a <code>TerminatorKind::Drop</code>.</p>",
        "id": 152659194,
        "sender_full_name": "davidtwco",
        "timestamp": 1546012357
    },
    {
        "content": "<p>hmm</p>",
        "id": 152659205,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012376
    },
    {
        "content": "<p>you're not wrong, but you are wrong :P</p>",
        "id": 152659206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012381
    },
    {
        "content": "<p>that is, you're correct that MiR construction tries to avoid adding <code>TerminatorKind::Drop</code></p>",
        "id": 152659216,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012395
    },
    {
        "content": "<p>but in indirect cases it is I think still relevant</p>",
        "id": 152659218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012405
    },
    {
        "content": "<p>one sec, I'll add a few more tests to show the problem</p>",
        "id": 152659222,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012411
    },
    {
        "content": "<p>or hmm it's behaving correctly ;)</p>",
        "id": 152659305,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012506
    },
    {
        "content": "<p>but still doesn't feel right</p>",
        "id": 152659313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012541
    },
    {
        "content": "<p>I've got it building locally with <code>.needs_drop()</code> helper instead of the <code>.walk().any(..)</code> approach.</p>",
        "id": 152659367,
        "sender_full_name": "davidtwco",
        "timestamp": 1546012573
    },
    {
        "content": "<p>yeah so that seems nicer but I still feel like that code is in the wrong place</p>",
        "id": 152659375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012607
    },
    {
        "content": "<p>and I'm surprised the tests are passing</p>",
        "id": 152659376,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012614
    },
    {
        "content": "<p>I also moved it to the <code>record_dependency</code> function.</p>",
        "id": 152659384,
        "sender_full_name": "davidtwco",
        "timestamp": 1546012624
    },
    {
        "content": "<p>pushed a few new tests anyway</p>",
        "id": 152659387,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012625
    },
    {
        "content": "<p>ok, but locally I don't see a failure</p>",
        "id": 152659390,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012631
    },
    {
        "content": "<p>which I can't quite explain</p>",
        "id": 152659391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012637
    },
    {
        "content": "<p>It's easy enough to adjust the check, so if your new tests keep passing with that then I'll push it.</p>",
        "id": 152659401,
        "sender_full_name": "davidtwco",
        "timestamp": 1546012661
    },
    {
        "content": "<p>ok. I expect that in the cross-crate case, we will call <code>record_dependency</code>, and (the way it's setup locally) that means we'll unconditionally record the substituted dependency</p>",
        "id": 152659443,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012688
    },
    {
        "content": "<p>(adding a bit of logging)</p>",
        "id": 152659536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546012812
    },
    {
        "content": "<p>Pushed the moved check/<code>needs_drop</code> change.</p>",
        "id": 152659592,
        "sender_full_name": "davidtwco",
        "timestamp": 1546012913
    },
    {
        "content": "<p>ok <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I think another useful thing would be to handle cross-crate edges better -- do you have time to investigate?</p>",
        "id": 154193984,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456038
    },
    {
        "content": "<p>I've got some time, yeah.</p>",
        "id": 154193993,
        "sender_full_name": "davidtwco",
        "timestamp": 1546456054
    },
    {
        "content": "<p>so I realized that this is probably easier than I initially thought</p>",
        "id": 154194313,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456418
    },
    {
        "content": "<p>currently we have this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">call_edge</span><span class=\"p\">.</span><span class=\"n\">callee</span><span class=\"p\">.</span><span class=\"n\">is_local</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">substituted_dependencies</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">visitors</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"n\">call_edge</span><span class=\"p\">.</span><span class=\"n\">callee</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">dependencies</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">dependency</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">dependency</span><span class=\"p\">.</span><span class=\"n\">subst</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">call_edge</span><span class=\"p\">.</span><span class=\"n\">substs</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"c1\">// FIXME: cross-crate dependencies. For now, assume that they depend</span>\n<span class=\"w\">                    </span><span class=\"c1\">// on.. something.</span>\n<span class=\"w\">                    </span><span class=\"n\">substituted_dependencies</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">Dependency</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">span</span>: <span class=\"nc\">call_edge</span><span class=\"p\">.</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">kind</span>: <span class=\"nc\">DependencyKind</span>::<span class=\"n\">OtherMethod</span><span class=\"p\">(</span><span class=\"n\">call_edge</span><span class=\"p\">.</span><span class=\"n\">substs</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}];</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154194416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456535
    },
    {
        "content": "<p>but what I realized is that for any <strong>generic callee</strong>, the MIR is available to us</p>",
        "id": 154194425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456550
    },
    {
        "content": "<p>it will require some juggling though</p>",
        "id": 154194431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456560
    },
    {
        "content": "<p>right now we have this 2-phase setup where we first walk all the (local) def-ids and do the initial visitor</p>",
        "id": 154194487,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456579
    },
    {
        "content": "<p>and then we walk the call edges and propagate effects around</p>",
        "id": 154194489,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456587
    },
    {
        "content": "<p>I think what we would want to do is to make it possible to do the \"initial visit\" <em>lazilly</em></p>",
        "id": 154194500,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456601
    },
    {
        "content": "<p>and/or make that first pass run through a queue of def-ids</p>",
        "id": 154194513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456614
    },
    {
        "content": "<p>that we extend as we encounter callees</p>",
        "id": 154194519,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456619
    },
    {
        "content": "<p>alternatively</p>",
        "id": 154194539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456640
    },
    {
        "content": "<p>hmm</p>",
        "id": 154194543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456643
    },
    {
        "content": "<p>we already invoke <code>tcx.collect_and_partition_mono_items</code></p>",
        "id": 154194551,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456660
    },
    {
        "content": "<p>which is basically doing this for us</p>",
        "id": 154194555,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456663
    },
    {
        "content": "<p>what we could do is to invoke that, which will give us a series of <code>MonoItem</code></p>",
        "id": 154194560,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456672
    },
    {
        "content": "<p>we can then iterate over that list and make sure that each def-id within the list has a visitor</p>",
        "id": 154194612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456693
    },
    {
        "content": "<p>or at least each def-id meeting certain criteria, or something</p>",
        "id": 154194624,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456712
    },
    {
        "content": "<p>well I really mean each <code>InstanceDef::Item</code>, I suspect</p>",
        "id": 154194703,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546456792
    },
    {
        "content": "<p>I could experiment with something like that.</p>",
        "id": 154195115,
        "sender_full_name": "davidtwco",
        "timestamp": 1546457159
    },
    {
        "content": "<p>ok great, let me know how it goes</p>",
        "id": 154195451,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546457475
    },
    {
        "content": "<p>Did you get a chance to look at this <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> ?</p>",
        "id": 154248573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546531751
    },
    {
        "content": "<p>Not yet, been responding to reviews so far today.</p>",
        "id": 154248590,
        "sender_full_name": "davidtwco",
        "timestamp": 1546531781
    },
    {
        "content": "<p>OK</p>",
        "id": 154249155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546532345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I might poke at this a bit more today if you haven't</p>",
        "id": 154429109,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546628582
    },
    {
        "content": "<p>Feel free to, I'm just working on some changes for your review on another PR right now, was planning on tackling this next.</p>",
        "id": 154429134,
        "sender_full_name": "davidtwco",
        "timestamp": 1546628622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> to start i'm doing a rebase and will push -f</p>",
        "id": 154432214,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546631476
    },
    {
        "content": "<p>Sounds good.</p>",
        "id": 154432224,
        "sender_full_name": "davidtwco",
        "timestamp": 1546631484
    },
    {
        "content": "<p>Have you started on this <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>? Not got too long left in my day, but finished with other things and was going to take a look soon - just waiting on my build after pulling the rebase.</p>",
        "id": 154441526,
        "sender_full_name": "davidtwco",
        "timestamp": 1546639936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I did the rebase, but I didn't get any further</p>",
        "id": 154578323,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546876196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I've got something locally that continues to pass all our tests that also considers the <code>DefId</code>s from the <code>collect_and_partition_mono_items</code> (I had to continue to use the <code>body_owners</code> results too - as the mono items didn't include our local functions). I'm not sure if you have a test case that this should make pass or not. I've not done anything to make this lazy yet, not sure how I'd go about doing that.</p>",
        "id": 154634211,
        "sender_full_name": "davidtwco",
        "timestamp": 1546941226
    },
    {
        "content": "<p>I am observing that the test functions (eg. <code>depend_size_alignment</code>) aren't being returned from <code>collect_and_partition_mono_items</code>  at the top of <code>polymorphize_analysis</code> where I'm calling it - or where it was being called in making the statistics.</p>",
        "id": 154636887,
        "sender_full_name": "davidtwco",
        "timestamp": 1546944939
    },
    {
        "content": "<p>I'm guessing that this might be a result of these functions never being used with some concrete type at all - but I think that this would affect the space savings analysis?</p>",
        "id": 154636980,
        "sender_full_name": "davidtwco",
        "timestamp": 1546945076
    },
    {
        "content": "<p>(Maybe this is helpful, I haven't read the code or the whole conversation) The collector, by default, is as lazy as possible. It will only collect functions that are transitively called from something that is publicly visible (e.g. <code>main</code> or functions exported from the current crate).</p>",
        "id": 154637071,
        "sender_full_name": "mw",
        "timestamp": 1546945153
    },
    {
        "content": "<blockquote>\n<p>(Maybe this is helpful, I haven't read the code or the whole conversation) The collector, by default, is as lazy as possible. It will only collect functions that are transitively called from something that is publicly visible (e.g. <code>main</code> or functions exported from the current crate).</p>\n</blockquote>\n<p>I have tried making the functions public, and I'm now about to try calling them. I think what you are describing is exactly what I'm observing though, which I'm not sure we expected. Though, I might just be missing something.</p>",
        "id": 154637162,
        "sender_full_name": "davidtwco",
        "timestamp": 1546945243
    },
    {
        "content": "<p>Though, in some of the test files, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> has calls to our test functions, so perhaps they are aware of this.</p>",
        "id": 154637266,
        "sender_full_name": "davidtwco",
        "timestamp": 1546945337
    },
    {
        "content": "<p>Alright, now I've got it working locally without needing the <code>body_owners</code> call too. Still not lazy but I think this is more in the spirit of what we wanted. I've pushed it to <a href=\"https://github.com/davidtwco/rust/tree/polymorphize-analysis\" target=\"_blank\" title=\"https://github.com/davidtwco/rust/tree/polymorphize-analysis\">my fork</a> (just in case we're not happy with it) for now.</p>",
        "id": 154638375,
        "sender_full_name": "davidtwco",
        "timestamp": 1546946880
    },
    {
        "content": "<blockquote>\n<p>Though, in some of the test files, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> has calls to our test functions, so perhaps they are aware of this.</p>\n</blockquote>\n<p>yes I was aware of this and I think it's fine, we just have to measure from an end-point</p>",
        "id": 154654450,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546963667
    },
    {
        "content": "<p>I'll take a look <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span>, thanks!</p>",
        "id": 154654463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546963676
    },
    {
        "content": "<p>it looks right to me</p>",
        "id": 154655148,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964179
    },
    {
        "content": "<p>the only thing I would say is: there is no need to invoke the fns we want to consider multiple times</p>",
        "id": 154655225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964245
    },
    {
        "content": "<p>I don't think I intended to add <code>-Zpolymorphize-dump</code> to each of the tests though..</p>",
        "id": 154655346,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964344
    },
    {
        "content": "<p>...we could make dump the default, and add a flag to add all local methods for analysis</p>",
        "id": 154655361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964354
    },
    {
        "content": "<p>or we can just invoke them</p>",
        "id": 154655368,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964360
    },
    {
        "content": "<p>the latter seems fine I guess</p>",
        "id": 154655375,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964362
    },
    {
        "content": "<p>I didn’t think it was required to invoke each multiple times, I just wanted it to be consistent with the existing test that had invocations. </p>\n<p>Unless we want to merge the body owners ids and mono item ids, we’ll need to invoke each function with this change.</p>",
        "id": 154655804,
        "sender_full_name": "davidtwco",
        "timestamp": 1546964634
    },
    {
        "content": "<p>right. apart from testing, I can't think of a reason to merge that</p>",
        "id": 154655904,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964691
    },
    {
        "content": "<p>so I guess might as well leave it how you have it</p>",
        "id": 154655918,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964705
    },
    {
        "content": "<p>it seems like we're close to the point where we can get some data now</p>",
        "id": 154655957,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964734
    },
    {
        "content": "<p>it occurs to me it might be nice to have a mode that dumps out more detail about the duplicates</p>",
        "id": 154655968,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964745
    },
    {
        "content": "<p>as a sanity check</p>",
        "id": 154655969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964749
    },
    {
        "content": "<p>maybe repurpose the \"dump\" flag</p>",
        "id": 154656070,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964807
    },
    {
        "content": "<p>er</p>",
        "id": 154656085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964821
    },
    {
        "content": "<p>wait</p>",
        "id": 154656086,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964822
    },
    {
        "content": "<p>the dump flag is the one that shows the errors?</p>",
        "id": 154656096,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964825
    },
    {
        "content": "<p>we should probably keep <em>that</em></p>",
        "id": 154656106,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964836
    },
    {
        "content": "<p>maybe just emit the duplicates as <code>info!</code> level logging, then we can turn it on with <code>RUST_LOG</code></p>",
        "id": 154656114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964848
    },
    {
        "content": "<p>I'm guessing there are still dependencies we are not considering</p>",
        "id": 154656137,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964869
    },
    {
        "content": "<p>not 100% sure what those are</p>",
        "id": 154656143,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964875
    },
    {
        "content": "<p>I'll have to go over the list again</p>",
        "id": 154656155,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964880
    },
    {
        "content": "<p>simple example: we consider fields, I think, but if you have <code>foo.bar[x]</code>, then the type of <code>foo.bar</code> had better have a known size</p>",
        "id": 154656209,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964897
    },
    {
        "content": "<p>don't think we check for that</p>",
        "id": 154656229,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546964913
    },
    {
        "content": "<p>I'll look into adding that in a bit.</p>",
        "id": 154656627,
        "sender_full_name": "davidtwco",
        "timestamp": 1546965207
    },
    {
        "content": "<p>Will push my latest change to your branch too.</p>",
        "id": 154656634,
        "sender_full_name": "davidtwco",
        "timestamp": 1546965214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I'm struggling to come up with an example where a <code>x[i]</code> (for some <code>x: T</code>) ends up as a <code>ProjectionElem::Index(..)</code> and not a call to <code>std::ops::Index::index</code>, any ideas?</p>",
        "id": 154665737,
        "sender_full_name": "davidtwco",
        "timestamp": 1546972528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> indexing into a <code>&amp;[T]</code> slice..maybe something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">dependency_because_index_depends_on_T_sized</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">parameters</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">//~^ ERROR some polymorphic dependencies found</span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154668719,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546974811
    },
    {
        "content": "<p>the name is slightly wrong</p>",
        "id": 154668775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546974845
    },
    {
        "content": "<p>even though we know that <code>T: Sized</code>, we still don't know how big it is -- or maybe you want <code>&amp;parameters[1]</code>, since..strictly speaking..<code>&amp;parameters[0]</code> <em>doesn't</em> depend</p>",
        "id": 154668792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546974870
    },
    {
        "content": "<p>Pushed a commit with that check, still considers <code>x[0]</code> a dependency for the moment.</p>",
        "id": 154678839,
        "sender_full_name": "davidtwco",
        "timestamp": 1546983082
    },
    {
        "content": "<p>seems ok</p>",
        "id": 154729410,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547045816
    },
    {
        "content": "<p>nice!</p>",
        "id": 154729464,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547045860
    },
    {
        "content": "<p>I'll try to do another pass for missing things, but it seems like it'd be interesting to also start gathering some data now</p>",
        "id": 154729479,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547045872
    },
    {
        "content": "<p>Running <code>-Z polymorphize</code> on actual crates?</p>",
        "id": 154729538,
        "sender_full_name": "davidtwco",
        "timestamp": 1547045898
    },
    {
        "content": "<p>yeah, although it'll probably be so horrificially slow</p>",
        "id": 154729570,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547045934
    },
    {
        "content": "<p>maybe we should look at opimizing the propagation a bit</p>",
        "id": 154729576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547045939
    },
    {
        "content": "<p>otoh who cares</p>",
        "id": 154729582,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547045943
    },
    {
        "content": "<p>I guess it depends <em>how slow</em></p>",
        "id": 154729595,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547045948
    },
    {
        "content": "<p>I guess the only downside to speeding it up now is that if we find that it isn't worth doing polymorphization then that would have been wasted effort?</p>",
        "id": 154729748,
        "sender_full_name": "davidtwco",
        "timestamp": 1547046055
    },
    {
        "content": "<p>I guess</p>",
        "id": 154734742,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547049781
    },
    {
        "content": "<p>I mean it seems worth trying it on a few smaller tests to start</p>",
        "id": 154734749,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547049786
    },
    {
        "content": "<p>before we invest too much effort in optimizing</p>",
        "id": 154734753,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547049791
    },
    {
        "content": "<p>not sure what a smaller test would be</p>",
        "id": 154734758,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547049794
    },
    {
        "content": "<p>e.g. I'm curious to measure something like ripgrep</p>",
        "id": 154734776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547049824
    },
    {
        "content": "<p>I guess to do this properly we need to basically apply it to the transitive set of crates<br>\na</p>",
        "id": 154734787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547049833
    },
    {
        "content": "<p>and take the data from each one and collect</p>",
        "id": 154734792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547049837
    },
    {
        "content": "<p>that is, at each crate, we'll have various monomorphizations that we print out (and various things that were not locally used and hence which (may) be instantiated by clients)</p>",
        "id": 154734846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547049854
    },
    {
        "content": "<p>I guess we could look to <a href=\"https://perf.rust-lang.org/\" target=\"_blank\" title=\"https://perf.rust-lang.org/\">https://perf.rust-lang.org/</a> to get some ideas for benchmarks.  Other thoughts:</p>\n<ul>\n<li>Command-line utilities:<ul>\n<li><a href=\"https://crates.io/crates/tokei\" target=\"_blank\" title=\"https://crates.io/crates/tokei\">https://crates.io/crates/tokei</a></li>\n<li><a href=\"https://crates.io/crates/ripgrep\" target=\"_blank\" title=\"https://crates.io/crates/ripgrep\">https://crates.io/crates/ripgrep</a></li>\n<li><a href=\"https://crates.io/crates/cw\" target=\"_blank\" title=\"https://crates.io/crates/cw\">https://crates.io/crates/cw</a></li>\n</ul>\n</li>\n</ul>",
        "id": 154735658,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547050502
    },
    {
        "content": "<p>maybe something crazy like <a href=\"https://github.com/gluon-lang/gluon\" target=\"_blank\" title=\"https://github.com/gluon-lang/gluon\">https://github.com/gluon-lang/gluon</a></p>",
        "id": 154735757,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547050564
    },
    {
        "content": "<p>or <a href=\"https://github.com/dagit/rust-prolog\" target=\"_blank\" title=\"https://github.com/dagit/rust-prolog\">https://github.com/dagit/rust-prolog</a></p>",
        "id": 154735769,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547050577
    },
    {
        "content": "<p>welp my attempt to run on <code>cw</code> immediately panicked :)</p>",
        "id": 154764369,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547074467
    },
    {
        "content": "<p>something about invoking <code>Instance::resolve</code> failed</p>",
        "id": 154764377,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547074487
    },
    {
        "content": "<p><span class=\"emoji emoji-1f641\" title=\"frown\">:frown:</span></p>",
        "id": 154764417,
        "sender_full_name": "davidtwco",
        "timestamp": 1547074516
    },
    {
        "content": "<p>I think I know the problem tho</p>",
        "id": 154764502,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547074580
    },
    {
        "content": "<p>in particular we need to normalize after substituting here:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                    </span><span class=\"n\">substituted_dependencies</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">visitor</span><span class=\"p\">.</span><span class=\"n\">dependencies</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">dependency</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">dependency</span><span class=\"p\">.</span><span class=\"n\">subst</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">call_edge</span><span class=\"p\">.</span><span class=\"n\">substs</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154764608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547074679
    },
    {
        "content": "<p>we could probably do the whole \"trans thing\" and erase regions too</p>",
        "id": 154764657,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547074699
    },
    {
        "content": "<p>I wonder if there's a helper for this</p>",
        "id": 154764666,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547074716
    },
    {
        "content": "<p>yes</p>",
        "id": 154765038,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547075034
    },
    {
        "content": "<p>ye</p>",
        "id": 154766167,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547076203
    },
    {
        "content": "<p>ye</p>",
        "id": 154766168,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547076205
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>athena. RUST_BACKTRACE=1 cargo +rust-7-stage2 rustc -- -Zpolymorphize\n   Compiling cw v0.3.0 (/home/nmatsakis/versioned/regr/cw)\nnote: Monomorphized items: 483\n\nnote: Monomorphized size : 10664\n\nnote: New total items    : 475 ( 98%)\n\nnote: New estimated size : 10579 ( 99%)\n</pre></div>",
        "id": 154766174,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547076216
    },
    {
        "content": "<p>not a complete measurement though</p>",
        "id": 154766177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547076221
    },
    {
        "content": "<p>That's not a particularly large decrease.</p>",
        "id": 154766187,
        "sender_full_name": "davidtwco",
        "timestamp": 1547076242
    },
    {
        "content": "<p>nope</p>",
        "id": 154766235,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547076253
    },
    {
        "content": "<p>not that I necessarily expected it would be for that particular test</p>",
        "id": 154766240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547076261
    },
    {
        "content": "<p>not sure if others will do better</p>",
        "id": 154766245,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547076270
    },
    {
        "content": "<p>how was the performance running the analysis on a real crate?</p>",
        "id": 154766677,
        "sender_full_name": "davidtwco",
        "timestamp": 1547076800
    },
    {
        "content": "<p>seemed fine</p>",
        "id": 154841361,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547129826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I was thinking of two things we should do:</p>\n<ul>\n<li>add some mode to dump out the duplicates we find, so we can sanity check</li>\n<li>modify so that you can pass <code>-Zpolymorphization=level</code>, where the levels might mean different amounts of aggressiveness<br>\n    - level 0 would be what we have now<br>\n    - level 1 would be \"resume we know the size/alignment of each type <code>T</code>\"</li>\n</ul>\n<p>So for example, moving a value of type <code>T</code> is possible in level 1 but not level 0. Similarly indexing a slice of type <code>&amp;[T]</code> is possible in level 1 but not level 0. However, indexing into a struct like <code>(u32, T)</code> is not possible in either level (because we'd have to do complex calculations to figure out the offset.</p>",
        "id": 154841481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547129913
    },
    {
        "content": "<p>we might then add more levels in the future</p>",
        "id": 154841485,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547129918
    },
    {
        "content": "<p>also, we should add some \"sanity check\" tests for cross-crate -- e.g., I'd like to test the following function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>I <em>think</em> <code>x.len()</code> can get collapsed, but worth testing.</p>",
        "id": 154841543,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547129971
    },
    {
        "content": "<p>Alright, I can probably find some time to do those later.</p>",
        "id": 154841623,
        "sender_full_name": "davidtwco",
        "timestamp": 1547130022
    },
    {
        "content": "<p>Cool =)</p>",
        "id": 154841900,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547130279
    },
    {
        "content": "<p>Pushed the above (except the cross-crate sanity check)</p>",
        "id": 154872173,
        "sender_full_name": "davidtwco",
        "timestamp": 1547154824
    },
    {
        "content": "<p>cool</p>",
        "id": 154875110,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547157203
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> I think that this is a bit too permissive:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">SizeSkeleton</span>::<span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">param_env</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">SizeSkeleton</span>::<span class=\"n\">Known</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;record_dependency: known size, skipping&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">level</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"n\">kind</span><span class=\"p\">.</span><span class=\"n\">is_offset_of</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;record_dependency: unknown size, skipping as level above zero&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"kc\">false</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">debug</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">&quot;record_dependency: recording dependency&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">push_dependency_if_new</span><span class=\"p\">(</span><span class=\"n\">span</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>specifically, I think we want to check for cases where the type we need the size of is <em>exactly</em> a parameter</p>",
        "id": 154877532,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159336
    },
    {
        "content": "<p>i.e., the type of <code>A</code></p>",
        "id": 154877535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159340
    },
    {
        "content": "<p>in contrast to something that <em>includes</em> <code>A</code>, like <code>(A, u32)</code></p>",
        "id": 154877545,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159348
    },
    {
        "content": "<p>computing the size of the derived type is more complex</p>",
        "id": 154877549,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159356
    },
    {
        "content": "<p>I can make an example perhaps</p>",
        "id": 154877554,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159367
    },
    {
        "content": "<p>I understand what you mean, I’ll look at doing that.</p>",
        "id": 154877641,
        "sender_full_name": "davidtwco",
        "timestamp": 1547159416
    },
    {
        "content": "<p>actually the test you have is confusing me a bit</p>",
        "id": 154877662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159449
    },
    {
        "content": "<p>but also I maybe realized a complication</p>",
        "id": 154877678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159473
    },
    {
        "content": "<p>That should just be checking that <code>ty</code> is a <code>ty::TyKind::TyParam(..)</code>.</p>",
        "id": 154877679,
        "sender_full_name": "davidtwco",
        "timestamp": 1547159473
    },
    {
        "content": "<p>yes, right, I meant that <code>polymorphize-level1.rs</code> is confusing me a bit</p>",
        "id": 154877690,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159490
    },
    {
        "content": "<p>in that I don't see a test that just moves a value of type <code>T</code></p>",
        "id": 154877697,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159498
    },
    {
        "content": "<p>but I sort of expected to</p>",
        "id": 154877698,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159502
    },
    {
        "content": "<p>but we also have one other wrinkle to be careful of, one sec..</p>",
        "id": 154877756,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159525
    },
    {
        "content": "<p>Not knowing we only wanted a lone <code>T</code>, I just made a test for each kind of dependency.</p>",
        "id": 154877759,
        "sender_full_name": "davidtwco",
        "timestamp": 1547159528
    },
    {
        "content": "<p>Since it was the function that registered them and matched on the kind that changed.</p>",
        "id": 154877773,
        "sender_full_name": "davidtwco",
        "timestamp": 1547159547
    },
    {
        "content": "<p>one complication I was thinking:</p>\n<p>at least in level 1, when you invoke a function <code>foo::&lt;T1, T2&gt;</code> -- then each of the types <code>T1</code> and <code>T2</code> must have a known size</p>",
        "id": 154877911,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159705
    },
    {
        "content": "<p>as an example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">// just needs to know the size of `T`, ok in level 1</span>\n<span class=\"k\">fn</span> <span class=\"nf\">foo</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">t</span>: <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">bar</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// this call winds up requiring us to compute size of (T, u32)`</span>\n<span class=\"w\">    </span><span class=\"n\">foo</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">((</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">22</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 154878016,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547159810
    },
    {
        "content": "<p>What is the purpose of the levels?</p>",
        "id": 154878176,
        "sender_full_name": "davidtwco",
        "timestamp": 1547159947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> the idea is this:</p>\n<ul>\n<li>Level 0 is what we could do today just by \"not generating more than one fn\"</li>\n<li>Level 1 is what we could do if we modified code generator to pass the sign/alignment (two integers) for each type parameter when invoking a \"polymorphized\" function</li>\n<li>Level 2 (if we were to add it) might be what we could do if we modified the code generator in other ways, for example by generating the code to full layout at runtime (which would enable \"offset-of\" dependencies)</li>\n<li>Level infinity would I guess be what we could do if we modified the runtime to have enough power to do trait resolution =)</li>\n</ul>",
        "id": 154908120,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547202809
    },
    {
        "content": "<p>(this way we could try to get an idea if the runtime work is worthwhile)</p>",
        "id": 154908133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547202832
    },
    {
        "content": "<p>I see.</p>",
        "id": 154908183,
        "sender_full_name": "davidtwco",
        "timestamp": 1547202860
    },
    {
        "content": "<p>Pushed a change that should make that check less permissive.</p>",
        "id": 155073710,
        "sender_full_name": "davidtwco",
        "timestamp": 1547460223
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> cool, let me check tha tout</p>",
        "id": 155255967,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1547648020
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> what’s next here?</p>",
        "id": 156967365,
        "sender_full_name": "davidtwco",
        "timestamp": 1548586100
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> sigh, I've been wondering the same thing.</p>",
        "id": 157055912,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548708270
    },
    {
        "content": "<p>I guess we need to try it out on more crates</p>",
        "id": 157055917,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548708274
    },
    {
        "content": "<p>Ugh. =) <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> sorry been paralyzed here =)</p>",
        "id": 157275021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1548944843
    },
    {
        "content": "<p>That's all good. I'm sure the All Hands planning is keeping you busy.</p>",
        "id": 157275056,
        "sender_full_name": "davidtwco",
        "timestamp": 1548944874
    }
]