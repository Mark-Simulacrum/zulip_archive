[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125294\">Aaron Hill</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237894908\">said</a>:</p>\n<blockquote>\n<p>We only need to actually recompute <code>predicate_of</code> if we need its value</p>\n</blockquote>\n<p>aah, okay</p>",
        "id": 237894977,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620424088
    },
    {
        "content": "<p>so, we might only detect the invalid hash after we're relied on the <code>predicates_of</code> result being unchanged</p>",
        "id": 237895037,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424128
    },
    {
        "content": "<p>if we emit an error, that's not a problem</p>",
        "id": 237895047,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424134
    },
    {
        "content": "<p>but it is if we try to recover</p>",
        "id": 237895054,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424139
    },
    {
        "content": "<p>recovery sounds pretty hard here</p>",
        "id": 237895075,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620424150
    },
    {
        "content": "<p>and risky</p>",
        "id": 237895084,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620424158
    },
    {
        "content": "<p>We <em>may</em> be able to recover if it is the first time the query is accessed: if the dep_node does not exist yet when we attempt to compute it.</p>",
        "id": 237895426,
        "sender_full_name": "cjgillot",
        "timestamp": 1620424351
    },
    {
        "content": "<p>I think it would be a better idea to try to get the underlying issues fixed, since It would probably be a bad idea to backport something of this complexity</p>",
        "id": 237895509,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424402
    },
    {
        "content": "<p>I've made progress on narrowing down the <code>syn</code> crash in <a href=\"https://github.com/Aaron1011/syn-crash\">https://github.com/Aaron1011/syn-crash</a></p>",
        "id": 237895536,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424423
    },
    {
        "content": "<p>which AFAIK is the largest remaining issue with no fix</p>",
        "id": 237895547,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424431
    },
    {
        "content": "<p>unfortunately, it appears to require multiple crates, and auto traits</p>",
        "id": 237895626,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424458
    },
    {
        "content": "<p>so it's very sensitive to where things are defined (even if they're not used)</p>",
        "id": 237895646,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424469
    },
    {
        "content": "<p>I'm trying to whittle it down in the point where I can build a standalone reproducer</p>",
        "id": 237895670,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424483
    },
    {
        "content": "<p>and see if there's a better way to solve this other than my conductive cycle change</p>",
        "id": 237895699,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620424496
    },
    {
        "content": "<p>Ok, I've finally made a single-file reproduction: <a href=\"https://github.com/rust-lang/rust/issues/83538#issuecomment-834933534\">https://github.com/rust-lang/rust/issues/83538#issuecomment-834933534</a></p>",
        "id": 237913448,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437407
    },
    {
        "content": "<p>it could probably be reduced even further, but simple things like removing an unused type of method break it</p>",
        "id": 237913466,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437424
    },
    {
        "content": "<p>this should be good enough to get a clean debug log</p>",
        "id": 237913482,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437433
    },
    {
        "content": "<p>hm, let me run it through some of the reducers I have on hand, should be easy for a single file</p>",
        "id": 237913659,
        "sender_full_name": "simulacrum",
        "timestamp": 1620437616
    },
    {
        "content": "<p>it's an incremental test, so that might be quite difficult</p>",
        "id": 237913776,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437712
    },
    {
        "content": "<p>well, they don't care if your reproducer is a script, I just need to alter it to work on a variable input</p>",
        "id": 237913797,
        "sender_full_name": "simulacrum",
        "timestamp": 1620437732
    },
    {
        "content": "<p>ah, I see</p>",
        "id": 237913806,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437747
    },
    {
        "content": "<p>only tricky thing will be the line number</p>",
        "id": 237913811,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437752
    },
    {
        "content": "<p>i.e., the interstingness test needs to run on the modified input</p>",
        "id": 237913815,
        "sender_full_name": "simulacrum",
        "timestamp": 1620437754
    },
    {
        "content": "<p>I think I can just feed a grep into it</p>",
        "id": 237913861,
        "sender_full_name": "simulacrum",
        "timestamp": 1620437769
    },
    {
        "content": "<p>The <code>run.sh</code> inserts a newline into the (copied) file at a specific line</p>",
        "id": 237913863,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437774
    },
    {
        "content": "<p>and it's sensitive to that line (inserting it much earlier doesn't work)</p>",
        "id": 237913881,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437785
    },
    {
        "content": "<p>yeah, I plan to grep for the enum as you say</p>",
        "id": 237913899,
        "sender_full_name": "simulacrum",
        "timestamp": 1620437807
    },
    {
        "content": "<p>hopefully that works OK</p>",
        "id": 237913900,
        "sender_full_name": "simulacrum",
        "timestamp": 1620437812
    },
    {
        "content": "<p>That should be fine</p>",
        "id": 237913904,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437819
    },
    {
        "content": "<p>the important part is that the spans of things at the top of the file don't get invalidated</p>",
        "id": 237913919,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437834
    },
    {
        "content": "<p>AFAICT</p>",
        "id": 237913920,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437835
    },
    {
        "content": "<p>hm ok</p>",
        "id": 237913992,
        "sender_full_name": "simulacrum",
        "timestamp": 1620437918
    },
    {
        "content": "<p>this issue is really irritating to reduce because of the dependence on conductive cycles</p>",
        "id": 237914015,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437956
    },
    {
        "content": "<p>there are a lot of things that looks unused, but I couldn't manage to remove them</p>",
        "id": 237914019,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620437971
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>struct a {\n  b : Vec&lt;a&gt;\n} pub struct c {\n  d : Vec&lt;a&gt;\n} struct e&lt;f&gt;{g : Vec&lt;f&gt;} impl&lt;f&gt; e&lt;f&gt; {\n  fn h(self, i : f) {}\n} fn l()-&gt;Ty {\n  panic !()\n}\nenum Ty { j(k, m, n) } struct k { o : Vec&lt;Ty&gt; } struct m {\n  bounds : a\n} struct n {\n  p : Box&lt;Ty&gt;\n} pub fn q() {\n  let r = e{g : Vec::new ()};\n  r.h(l())\n}\npub fn s(t : &amp;mut c) {}\n</code></pre></div>",
        "id": 237915149,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439131
    },
    {
        "content": "<p>is this even better?</p>",
        "id": 237915151,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439134
    },
    {
        "content": "<p>(still inserting a blank line before enum Ty)</p>",
        "id": 237915161,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439153
    },
    {
        "content": "<p>still making progress though</p>",
        "id": 237915241,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439214
    },
    {
        "content": "<p>editing it in place</p>",
        "id": 237915445,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439403
    },
    {
        "content": "<p>alright creduce done, <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span></p>",
        "id": 237915635,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439617
    },
    {
        "content": "<p>not sure that's helpful but it is a bit smaller</p>",
        "id": 237915639,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439624
    },
    {
        "content": "<p>Were any types/methods removed?</p>",
        "id": 237915649,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439644
    },
    {
        "content": "<p>hmm</p>",
        "id": 237915651,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439649
    },
    {
        "content": "<p>yes</p>",
        "id": 237915677,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439682
    },
    {
        "content": "<p>oh, and a trait was removed</p>",
        "id": 237915707,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439692
    },
    {
        "content": "<p>nice</p>",
        "id": 237915708,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439692
    },
    {
        "content": "<p>I'll see if some manual shuffling can let it make more progress</p>",
        "id": 237915743,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439715
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> I can't reproduce it with that minimization</p>",
        "id": 237915771,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439752
    },
    {
        "content": "<p>where are you inserting the newline?</p>",
        "id": 237915772,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439757
    },
    {
        "content": "<p>right before enum Ty</p>",
        "id": 237915778,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439763
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>rm -rf my_incr\ncp lib.rs temp_lib.rs\nLINE=$(rg --line-number &#39;enum Ty&#39; temp_lib.rs | sed &#39;s@:.*@@&#39;)\nrustc --crate-type lib -C opt-level=3 temp_lib.rs -C incremental=my_incr\nLINE=$((LINE-1))\nmd5sum temp_lib.rs\nsed -i &quot;$LINE i\\\\\\\\&quot; temp_lib.rs\nmd5sum temp_lib.rs\nrustc --crate-type lib -C opt-level=3 temp_lib.rs -C incremental=my_incr\n[ $? -eq 101 ]\n</code></pre></div>",
        "id": 237915787,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439781
    },
    {
        "content": "<p>I can definitely reproduce I think, unless I got something wrong, with that script</p>",
        "id": 237915885,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> ^</p>",
        "id": 237915890,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439840
    },
    {
        "content": "<p>huh - that's reproducing for me on nightly, but not on my local rustc</p>",
        "id": 237915902,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439854
    },
    {
        "content": "<p>oh</p>",
        "id": 237915913,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439859
    },
    {
        "content": "<p>previously, it was reproducing on both</p>",
        "id": 237915914,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439860
    },
    {
        "content": "<p>I am using nightly</p>",
        "id": 237915915,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439861
    },
    {
        "content": "<p>I can try with master</p>",
        "id": 237915921,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439867
    },
    {
        "content": "<p>is master the thing?</p>",
        "id": 237915927,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439874
    },
    {
        "content": "<p>hold on - let me retest</p>",
        "id": 237915931,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439884
    },
    {
        "content": "<p>my rustc might have had a modification that affected it</p>",
        "id": 237915941,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439899
    },
    {
        "content": "<p>master build is pretty cheap (maybe 5 minutes) so I'll kick that off for now</p>",
        "id": 237915954,
        "sender_full_name": "simulacrum",
        "timestamp": 1620439922
    },
    {
        "content": "<p>ok, I can reproduce it on the latest nightly</p>",
        "id": 237916012,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439939
    },
    {
        "content": "<p>I think it was just an issue with my local rustc</p>",
        "id": 237916013,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439944
    },
    {
        "content": "<p>I was unconditionally printing some stuff out</p>",
        "id": 237916017,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439952
    },
    {
        "content": "<p>which I think caused some queries to executed differently</p>",
        "id": 237916023,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439960
    },
    {
        "content": "<p>since the <code>Debug</code> impl for <code>Ty</code> is really complicated</p>",
        "id": 237916027,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620439974
    },
    {
        "content": "<p>making a bit more progress</p>",
        "id": 237916356,
        "sender_full_name": "simulacrum",
        "timestamp": 1620440376
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>struct a {\n  b : Vec&lt; a &gt;\n} pub struct c {\n  d : Vec&lt; a &gt;\n} struct e&lt; f &gt; {\n  g : Vec&lt; f &gt;\n} enum Ty { j(k, m, n) } struct k {\n  o : Vec&lt; Ty &gt;\n} struct m {\n  bounds : a\n} struct n {\n  p : Box&lt; Ty &gt;\n} pub fn q() {\n  e::&lt; Ty &gt;{g : Vec::new ()};\n}\npub fn s(t : &amp;mut c) {}\n</code></pre></div>",
        "id": 237916359,
        "sender_full_name": "simulacrum",
        "timestamp": 1620440388
    },
    {
        "content": "<p>posted on the issue with latest, and I'm off</p>",
        "id": 237916993,
        "sender_full_name": "simulacrum",
        "timestamp": 1620441055
    },
    {
        "content": "<p>Thanks for your help!</p>",
        "id": 237917430,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620441496
    },
    {
        "content": "<p>Also, someone just encountered the <code>optimized_mir</code> issue without bootstrapping rustc: <a href=\"https://github.com/rust-lang/rust/issues/85064\">https://github.com/rust-lang/rust/issues/85064</a></p>",
        "id": 237917582,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620441677
    },
    {
        "content": "<p>could someone add <a href=\"https://github.com/rust-lang/rust/issues/83126\">https://github.com/rust-lang/rust/issues/83126</a> to the list in <a href=\"https://github.com/rust-lang/rust/issues/84970#issuecomment-833180651\">https://github.com/rust-lang/rust/issues/84970#issuecomment-833180651</a> ? It still needs a test.</p>",
        "id": 237918466,
        "sender_full_name": "est31",
        "timestamp": 1620442657
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237884879\">said</a>:</p>\n<blockquote>\n<p>I was rightfully told that that merging this tonight may look like we're hiding it, as it's a friday afternoon</p>\n</blockquote>\n<p>Can I push back on this assertion? I think its more important that we put this info in the hands of our users, rather than worry about optics.</p>",
        "id": 237919197,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620443310
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> has gone to sleep. but I think I’d still rather see the post up during the weekend rather than wait until Monday.</p>",
        "id": 237919239,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620443336
    },
    {
        "content": "<p>(I don’t know. Maybe the pinned issue is sufficient.)</p>",
        "id": 237919255,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620443351
    },
    {
        "content": "<p>Yeah I'm not sure either</p>",
        "id": 237919429,
        "sender_full_name": "simulacrum",
        "timestamp": 1620443542
    },
    {
        "content": "<p>I could go either way</p>",
        "id": 237919434,
        "sender_full_name": "simulacrum",
        "timestamp": 1620443551
    },
    {
        "content": "<p>I think given the point release it'll not look like we're hiding it, so probably makes sense to issue it soon - not sure if Monday or tomorrow morning makes a huge difference</p>",
        "id": 237919468,
        "sender_full_name": "simulacrum",
        "timestamp": 1620443596
    },
    {
        "content": "<p>But I do also sort of want to think some more on the recommendation we're giving</p>",
        "id": 237919535,
        "sender_full_name": "simulacrum",
        "timestamp": 1620443654
    },
    {
        "content": "<p>Okay. I’m willing to wait if it means we end up being more certain about the recommendation we offer</p>",
        "id": 237919556,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620443681
    },
    {
        "content": "<p>okay gotta hit sack now</p>",
        "id": 237919574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620443702
    },
    {
        "content": "<p>I think we should strongly consider <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>'s suggestion to disable incremental compilation by default. The impression I have is that it is really easy to trigger this ICE so I think it's better to mitigate this to prevent the ICE than ask users to cargo clean frequently.</p>",
        "id": 237962398,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620486497
    },
    {
        "content": "<p>But perhaps I'm overestimating how frequently this occurs.</p>",
        "id": 237962412,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620486515
    },
    {
        "content": "<p>We <em>have</em> received quite a few issues filed - and are still receiving, to some extent</p>",
        "id": 237962450,
        "sender_full_name": "simulacrum",
        "timestamp": 1620486573
    },
    {
        "content": "<p>But it is hard to say. It's also true that I would not be surprised if come Monday, lots of folks update, if they don't want to update their toolchain on a friday/thursday (which would make sense to me)</p>",
        "id": 237962521,
        "sender_full_name": "simulacrum",
        "timestamp": 1620486624
    },
    {
        "content": "<p>I guess we can adjust the blog post to ask for feedback on this matter, but people who don't hit bugs probably won't respond.</p>",
        "id": 237962732,
        "sender_full_name": "simulacrum",
        "timestamp": 1620486826
    },
    {
        "content": "<p>It's also true, I think, that we've not even enabled full verification - verifying on-disk results is something that had too large a performance impact (see <a href=\"https://github.com/rust-lang/rust/pull/84227\">https://github.com/rust-lang/rust/pull/84227</a>)</p>",
        "id": 237962824,
        "sender_full_name": "simulacrum",
        "timestamp": 1620486901
    },
    {
        "content": "<p>This somewhat implies to me that we're going to discover 'yet more' bugs after fixing these, once/if we enable that.</p>",
        "id": 237962864,
        "sender_full_name": "simulacrum",
        "timestamp": 1620486930
    },
    {
        "content": "<p>I do think it's going to be a hard sell to users to take that 2x performance hit :/</p>",
        "id": 237962888,
        "sender_full_name": "simulacrum",
        "timestamp": 1620486954
    },
    {
        "content": "<p>Could we put verifying the disk hash behind a -Z flag and enable it for tests or something like that? Or only on some nightlies?</p>",
        "id": 237963263,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1620487282
    },
    {
        "content": "<p>We don't really have many incremental tests; I am not inclined to limit it to some channel - I think eventually we're going to want to enable it, at least for some time, and possibly forever. It's not actually that bad - only 5-10% iirc</p>",
        "id": 237963332,
        "sender_full_name": "simulacrum",
        "timestamp": 1620487327
    },
    {
        "content": "<p>That makes sense to me. Part of my reasoning here is that I think the performance regression from disabling incremental compilation is a less serious issue than hitting ICEs during regular development.</p>",
        "id": 237964821,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620488624
    },
    {
        "content": "<p>Yeah. I think it really depends on the person, but it does seem reasonable to me. Ultimately I guess someone will need to make a decision -- sooner the better, I think, given we're aiming to publish a blog post on Monday (or sooner, but I think Monday is good). I think if we can put our decision there that would be to our benefit.</p>",
        "id": 237964950,
        "sender_full_name": "simulacrum",
        "timestamp": 1620488755
    },
    {
        "content": "<p>Note that I haven't tried to optimize the hash verification at all</p>",
        "id": 237970380,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620493431
    },
    {
        "content": "<p>so it's possible that there's some room for improvement on that slowdown</p>",
        "id": 237970384,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620493440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/237963263\">said</a>:</p>\n<blockquote>\n<p>Could we put verifying the disk hash behind a -Z flag and enable it for tests or something like that? Or only on some nightlies?</p>\n</blockquote>\n<p>That's actually our current behavior</p>",
        "id": 237970443,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620493492
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/ff34b919075f35a1787659e9c448a34b06bab8de/src/tools/compiletest/src/runtest.rs#L1965\">https://github.com/rust-lang/rust/blob/ff34b919075f35a1787659e9c448a34b06bab8de/src/tools/compiletest/src/runtest.rs#L1965</a></p>",
        "id": 237970470,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620493512
    },
    {
        "content": "<p>I had a new idea just now: after the first ICE, we write some value to the incremental cache to disable incremental. That way, developers will hit at most one ICE per project, roughly, and so it's much less annoying, but we still give users the performance they want if incremental isn't broken in their particular case. (cargo clean or a toolchain upgrade will wipe away the incremental cache, if they want to force it on, and perhaps we can add an env variable override)</p>",
        "id": 237972042,
        "sender_full_name": "simulacrum",
        "timestamp": 1620495033
    },
    {
        "content": "<p>hey yinz, thank you for all your work on this &lt;3 and thank you for the blog post, i think it's going to be really important.</p>",
        "id": 237976537,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1620499646
    },
    {
        "content": "<p>please keep in mind that this is likely to have more visibility than your average compiler bug, that rust users with less experience are going to hit this and might need more help than fellow compiler devs (ex: <a href=\"https://github.com/rust-lang/rust/issues/85080\">https://github.com/rust-lang/rust/issues/85080</a>), and that people who don't use rust are going to hear about this when the blog post gets posted to hacker news (maybe publish it like europe's monday morning, then do a social media push around 9am ET and 9am PT?)</p>",
        "id": 237976719,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1620499825
    },
    {
        "content": "<p>being out in front of information on this, looking proactive, etc will help imo</p>",
        "id": 237976769,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1620499888
    },
    {
        "content": "<p>So given the number of users - all users who upgrade? - who we expect to hit this, one option we <em>do</em> have, in principle, is to land a soft-disable (e.g., requiring a new env variable on-switch) into rustc for incremental as a whole, and try to get that out the door by monday morning. In theory, we have enough time. I don't know whether that makes sense, but it is something to consider I think, rather than waiting until - for example - Thursday next week.</p>",
        "id": 237976946,
        "sender_full_name": "simulacrum",
        "timestamp": 1620500091
    },
    {
        "content": "<p>I think I'll try to get us artifacts for that, I think, so that the door is left open (we can of course not use them).</p>",
        "id": 237977045,
        "sender_full_name": "simulacrum",
        "timestamp": 1620500192
    },
    {
        "content": "<p>Posted <a href=\"https://github.com/rust-lang/rust/pull/85097\">https://github.com/rust-lang/rust/pull/85097</a> - I plan to r+ it soon, going to let PR CI run for a bit though. Not sure if it's what we'll go with but it'll give us some artifacts to use if we choose to.</p>\n<p>I also am going to update Felix's blog post to be a release blog post, though with the majority of the text left in, slightly adjusted in the light of the recommended path being to upgrade to 1.52.1.</p>\n<p><span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> can you say if there are any fixes you feel comfortable backporting directly to stable at this time? My hunch is no, in which case we wouldn't backport, but if we have a few that should be harmless to backport (e.g., worst case they don't help, but cannot hurt), then it may be worth alleviating some of the pain users will feel who force-enable incremental.</p>",
        "id": 237996519,
        "sender_full_name": "simulacrum",
        "timestamp": 1620521476
    },
    {
        "content": "<p>From the issues I've seen, the most common issue is <code>predicates_of</code></p>",
        "id": 237997399,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620522455
    },
    {
        "content": "<p>which I <em>think</em> was fixed by <a href=\"https://github.com/rust-lang/rust/pull/84233\">https://github.com/rust-lang/rust/pull/84233</a></p>",
        "id": 237997461,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620522497
    },
    {
        "content": "<p>I didn't write or review that PR, and I'd be pretty hesitant to backport it</p>",
        "id": 237997502,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1620522537
    },
    {
        "content": "<p>Hm, ok</p>",
        "id": 237997610,
        "sender_full_name": "simulacrum",
        "timestamp": 1620522658
    },
    {
        "content": "<p>Here's an example of an issue that you can see due to incremental issues (this is on nightly): <code>cargo build</code> just works, <code>cargo check</code> fails with an error that shouldn't exist, and <code>cargo clean &amp;&amp; cargo check</code> made it go away. Was reported this by another person. What the issue looks like:</p>\n<p><a href=\"/user_uploads/4715/cbkvKNeHFtJU70ZeVHJ6mlmu/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/cbkvKNeHFtJU70ZeVHJ6mlmu/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/cbkvKNeHFtJU70ZeVHJ6mlmu/image.png\"></a></div>",
        "id": 238024324,
        "sender_full_name": "nagisa",
        "timestamp": 1620554399
    },
    {
        "content": "<p>Hm that seems a bit different in the sense that the bugs we're dealing with right now I think should all trigger assertions, that looks more like perhaps cargo's cache was broken?</p>",
        "id": 238030403,
        "sender_full_name": "simulacrum",
        "timestamp": 1620560747
    },
    {
        "content": "<p>This does look incremental related to me. Ultimately my point was that not all such bugs appear to manifest as assertions (yet?)</p>",
        "id": 238031531,
        "sender_full_name": "nagisa",
        "timestamp": 1620561968
    },
    {
        "content": "<p>Cargo build there didn't even invoke the compiler, but cargo check did (unless that's cached output?). So incremental in rustc didn't differ between check and debug builds - or at least, we don't know that it did?</p>",
        "id": 238031897,
        "sender_full_name": "simulacrum",
        "timestamp": 1620562370
    },
    {
        "content": "<p>We do have missing assertions on disk loaded data, though I think we should probably land them onto nightly</p>",
        "id": 238031919,
        "sender_full_name": "simulacrum",
        "timestamp": 1620562406
    },
    {
        "content": "<p>I had a user report a similar issue (build works, but check does not, with <code>--all-targets</code>) here: <a href=\"https://github.com/rust-lang/cargo/issues/9349\">https://github.com/rust-lang/cargo/issues/9349</a>.  I think it is a cargo issue, but it is very subtle and hard to debug via a github issue.  And, ugh, it's been two weeks since I last looked at it. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>  <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>, if there is any way to get a repro of that, it would be very helpful.</p>",
        "id": 238050381,
        "sender_full_name": "Eric Huss",
        "timestamp": 1620582771
    },
    {
        "content": "<p>I can ask, but the comms channel I have is also just text.</p>",
        "id": 238050402,
        "sender_full_name": "nagisa",
        "timestamp": 1620582811
    },
    {
        "content": "<p>Hey all - just an update: I plan to ping tomorrow morning, but unless something comes up, I expect we will merge the blog post and ship a release approximately at <time datetime=\"2021-05-10T14:45:00Z\">2021-05-10T10:45:00-04:00</time>. This means we will disable incr. comp by default for all stable users, though with an option to opt back in.</p>",
        "id": 238068618,
        "sender_full_name": "simulacrum",
        "timestamp": 1620601691
    },
    {
        "content": "<p>Regarding the ideas on recovering from the invalid state once it has been detected: I don't think that is feasible in a safe way, unfortunately. Parts of the compilation process would have to be re-run and it would be almost impossible to know which parts. And that still leaves room for cases where we simply cannot re-run the computation because it is not part of the query system.</p>",
        "id": 238128901,
        "sender_full_name": "mw",
        "timestamp": 1620648394
    },
    {
        "content": "<p>Yeah I think the \"easier\" recovery is to emit a message that tells cargo to rerun rustc silently or something, but it's not ideal either</p>",
        "id": 238130238,
        "sender_full_name": "simulacrum",
        "timestamp": 1620649015
    },
    {
        "content": "<p>Even if recovery was possible (and I believe it is in a limited number of cases), I think such recovery would be an horrible idea because it would only make the query system even more complex just to hide bugs. I agree with <span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> that a warning is our best course of action.</p>",
        "id": 238131157,
        "sender_full_name": "cjgillot",
        "timestamp": 1620649459
    },
    {
        "content": "<p>The incremental system could forcefully delete the cache when an unstable fingerprint is found. That way re-running the build will magically fix the issue.</p>",
        "id": 238135091,
        "sender_full_name": "bjorn3",
        "timestamp": 1620651149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> \"last\" chance to stop the train (well, actually in an hour, but ...) if we don't want to ship the PR I submitted over the weekend to stable.</p>\n<ul>\n<li>PR: <a href=\"https://github.com/rust-lang/rust/pull/85097\">https://github.com/rust-lang/rust/pull/85097</a></li>\n<li>Announcement blog post: <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/836\">https://github.com/rust-lang/blog.rust-lang.org/pull/836</a></li>\n</ul>",
        "id": 238139060,
        "sender_full_name": "simulacrum",
        "timestamp": 1620652288
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> . I was skeptical about adding a whole new environment variable when I saw the discussion going on over the weekend, but I think my problems there are more about how hard it might be for some users to properly adjust their environment settings (and know that they are correctly adjusted). In terms of the trade-offs here, though, it seems like a reasonable course of action, especially since it should not be the status quo for terribly long, I hope.</p>",
        "id": 238139730,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620652571
    },
    {
        "content": "<p>What's the current status, <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> / <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> ?</p>",
        "id": 238140760,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620652970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> what is the plan re incremental on beta (and nightly, I guess)?</p>",
        "id": 238140766,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620652973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> current status is that a blog post and a 1.52.1 point release are expected very soon.</p>",
        "id": 238140813,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620652997
    },
    {
        "content": "<p>I'm wondering in particular if there are traits-related problems that I could be investigating this morning-- e.g., I've spent some time looking into the syn-crash problem that <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> mentioned, and i'm familiar with the super-predicates query.</p>",
        "id": 238140819,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620652998
    },
    {
        "content": "<p>I updated the post with that recently, but my expectation is 'roughly do nothing'</p>",
        "id": 238140829,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653002
    },
    {
        "content": "<p>that's ok, I'm more worried about whether I can help to fix the underlying problems</p>",
        "id": 238140845,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653014
    },
    {
        "content": "<p>\"very soon\" as in: today, perhaps in an hour, it sounds like?</p>",
        "id": 238140847,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620653015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ah you want to know status with respect to the set of bugs?</p>",
        "id": 238140897,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620653041
    },
    {
        "content": "<p>yes, roughly kicking off release in ~20 minutes, and it should deploy alongside blog post in ~1.2 hours</p>",
        "id": 238140950,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653051
    },
    {
        "content": "<p>let me finish reading the blog post and PR before I attempt to answer that Q, <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> (Maybe someone else will do it in the meantime)</p>",
        "id": 238140988,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620653067
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/issues/84970#issuecomment-833180651\">https://github.com/rust-lang/rust/issues/84970#issuecomment-833180651</a> is the list of current tracked bugs</p>",
        "id": 238141000,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653076
    },
    {
        "content": "<p>(well, there may be more. that's a partial list)</p>",
        "id": 238141023,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653088
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"125294\">@Aaron Hill</span> wants to merge in the syn-crash fix that was proposed a while back - let me find the PR for you <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span></p>",
        "id": 238141060,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653111
    },
    {
        "content": "<p>I believe the deduplicated known set of issues is <a href=\"https://github.com/rust-lang/rust/issues/84970#issuecomment-833180651\">https://github.com/rust-lang/rust/issues/84970#issuecomment-833180651</a></p>",
        "id": 238141126,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620653144
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/83538#issuecomment-835505371\">https://github.com/rust-lang/rust/issues/83538#issuecomment-835505371</a></p>",
        "id": 238141304,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653208
    },
    {
        "content": "<p>that's the latest on the syn bug, likely could use your attention</p>",
        "id": 238141319,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653218
    },
    {
        "content": "<p>one interesting aspect of this whole affair: I don't know how much we can infer from the number of bugs reports we got against stable, but it seems pretty fair to infer that we don't have very many people on the beta branch.</p>",
        "id": 238141574,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620653330
    },
    {
        "content": "<p>it definitely I think is true that we don't have many people using it <em>locally</em>, which is really what you need for incremental</p>",
        "id": 238141621,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653359
    },
    {
        "content": "<p>right</p>",
        "id": 238141662,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620653377
    },
    {
        "content": "<p>(as opposed to in CI)</p>",
        "id": 238141665,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653378
    },
    {
        "content": "<p>do CI's tend to never use incremental?</p>",
        "id": 238141700,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620653396
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/238141304\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/83538#issuecomment-835505371\">https://github.com/rust-lang/rust/issues/83538#issuecomment-835505371</a></p>\n</blockquote>\n<p>yes, I don't like that fix :)</p>",
        "id": 238141771,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653406
    },
    {
        "content": "<p>well, not cached, I think</p>",
        "id": 238141775,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653408
    },
    {
        "content": "<p>at least, I don't think I do</p>",
        "id": 238141794,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653414
    },
    {
        "content": "<p>let's kickoff a thread perhaps for that specific fix?</p>",
        "id": 238141840,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653429
    },
    {
        "content": "<p>I'll dig into it more</p>",
        "id": 238141842,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653430
    },
    {
        "content": "<p>\"Best practice\" for many CI systems is to start from a clean state.</p>",
        "id": 238141857,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620653435
    },
    {
        "content": "<p>there's already a thread in <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a></p>",
        "id": 238141861,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1620653437
    },
    {
        "content": "<p>(if you want to discuss it)</p>",
        "id": 238141863,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/238141857\">said</a>:</p>\n<blockquote>\n<p>\"Best practice\" for many CI systems is to start from a clean state.</p>\n</blockquote>\n<p>Yeah, I guess I just was musing about whether one might supply separate CI for both a clean slate and incremental build in some contexts, if only to try to make the CI replicate the \"typical developer experience\"</p>",
        "id": 238142233,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620653585
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Am I correct in my inference that the PR adding <code>RUSTC_FORCE_INCREMENTAL</code> does not have any tests that when it is absent, incremental is disabled?</p>",
        "id": 238143089,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620653896
    },
    {
        "content": "<p>That's correct. I didn't have a chance to do so, however, I know it works because CI repeatedly failed (on incremental tests) before I set it in the right places.</p>",
        "id": 238143174,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653931
    },
    {
        "content": "<p>(if this only lives in the 1.52.1+ release series, that is fine. If we end up having the env var in 1.53, we should add tests.)</p>",
        "id": 238143182,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620653936
    },
    {
        "content": "<p>It's my goal to prepare a similar but more complete patch for 1.53 and nightly, with a 'if false' or something, so we can easily enable it as needed in the future without messing with tests and such.</p>",
        "id": 238143290,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653986
    },
    {
        "content": "<p>(just did not have time over the weekend)</p>",
        "id": 238143308,
        "sender_full_name": "simulacrum",
        "timestamp": 1620653994
    },
    {
        "content": "<p>okay</p>",
        "id": 238143398,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620654014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/238139060\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <span class=\"user-mention silent\" data-user-id=\"125250\">Wesley Wiser</span> \"last\" chance to stop the train (well, actually in an hour, but ...) if we don't want to ship the PR I submitted over the weekend to stable.</p>\n<ul>\n<li>PR: <a href=\"https://github.com/rust-lang/rust/pull/85097\">https://github.com/rust-lang/rust/pull/85097</a></li>\n<li>Announcement blog post: <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/836\">https://github.com/rust-lang/blog.rust-lang.org/pull/836</a></li>\n</ul>\n</blockquote>\n<p>finished, looks great apart from previously-posted-nits on blog post. Thanks for putting in so much time on this over the weekend <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span></p>",
        "id": 238143599,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620654102
    },
    {
        "content": "<p>+1 from me. Thanks so much <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span>!</p>",
        "id": 238144397,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620654403
    },
    {
        "content": "<p>I'm going to work on deduplicating the open issues.</p>",
        "id": 238144467,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620654434
    },
    {
        "content": "<p><a href=\"https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html\">https://blog.rust-lang.org/2021/05/10/Rust-1.52.1.html</a></p>",
        "id": 238155833,
        "sender_full_name": "simulacrum",
        "timestamp": 1620658522
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> might make sense to link to the blog post especially now that it's live in the new-user triage reports especially</p>",
        "id": 238155866,
        "sender_full_name": "simulacrum",
        "timestamp": 1620658539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> Will do <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 238155954,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620658567
    },
    {
        "content": "<blockquote>\n<p>Essentially, for some crates, certain sequences of edit-compile cycles will cause rustc to hit the \"unstable fingerprints\" ICE. I showed one example at the start of this blog post.</p>\n</blockquote>\n<p>The blog post gives examples of the ICE, but as far as I can tell, no examples of the edit-compile cycles that will trigger the ICE. When I read the above text I went back to the start of the blog post to see if I had missed an example.</p>",
        "id": 238166068,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620662160
    },
    {
        "content": "<p>Hm, it may have gotten removed in the editing process; I'm not sure we should feature such an example. They can be pretty opaque - e.g., <a href=\"https://github.com/rust-lang/rust/issues/83538#issuecomment-834980979\">https://github.com/rust-lang/rust/issues/83538#issuecomment-834980979</a> is a pretty minimal program that fires the assert by adding a blank line (no need for actual code changes)</p>",
        "id": 238166446,
        "sender_full_name": "simulacrum",
        "timestamp": 1620662289
    },
    {
        "content": "<p>Happy to accept a PR dropping that sentence from the post.</p>",
        "id": 238166480,
        "sender_full_name": "simulacrum",
        "timestamp": 1620662303
    },
    {
        "content": "<p>I don't think the example needs to be inline in the post, but it would be nice to link to a simple example like that one.</p>",
        "id": 238166552,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620662336
    },
    {
        "content": "<p>(There's a link much later in the blog post to a large example involving rust-analyzer, but a simple example like that would be even better.)</p>",
        "id": 238166687,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620662395
    },
    {
        "content": "<p>If there is an example that simple that involves actual miscompilation rather than just the assertion failure, that would be even better.</p>",
        "id": 238166822,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620662421
    },
    {
        "content": "<p>Sure. The rust-analyzer example is the only well-known miscompilation</p>",
        "id": 238166851,
        "sender_full_name": "simulacrum",
        "timestamp": 1620662436
    },
    {
        "content": "<p>I don't think we have very minimal examples</p>",
        "id": 238166923,
        "sender_full_name": "simulacrum",
        "timestamp": 1620662463
    },
    {
        "content": "<p>Ah, got it. So there are minimal examples of the assertion failure, but not of the miscompilation?</p>",
        "id": 238166978,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1620662486
    },
    {
        "content": "<p>I think that's true</p>",
        "id": 238167048,
        "sender_full_name": "simulacrum",
        "timestamp": 1620662512
    },
    {
        "content": "<p>I've finished closing the duplicates I was sure about. There are some still in the issue list that are probably duplicates but I wasn't sure so I left them open. </p>\n<p>I think it might be useful to have a comment summarizing the list of known issues. Does it make sense to leave that in <a href=\"https://github.com/rust-lang/rust/issues/84970\">#84970</a> or should I put it somewhere else?</p>",
        "id": 238167119,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620662528
    },
    {
        "content": "<p>I think <a href=\"https://github.com/rust-lang/rust/issues/84970\">#84970</a> is a good place.</p>",
        "id": 238167201,
        "sender_full_name": "simulacrum",
        "timestamp": 1620662560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52/near/238166978\">said</a>:</p>\n<blockquote>\n<p>Ah, got it. So there are minimal examples of the assertion failure, but not of the miscompilation?</p>\n</blockquote>\n<p>The miscompilation was reduced to this test: <a href=\"https://github.com/Aaron1011/rust/blob/18f89790dacad42d11f7fbd5d9cb09ce5dd8ff2f/src/test/incremental/issue-82920-predicate-order-miscompile.rs\">https://github.com/Aaron1011/rust/blob/18f89790dacad42d11f7fbd5d9cb09ce5dd8ff2f/src/test/incremental/issue-82920-predicate-order-miscompile.rs</a></p>",
        "id": 238167584,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1620662699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> ^</p>",
        "id": 238167667,
        "sender_full_name": "simulacrum",
        "timestamp": 1620662728
    },
    {
        "content": "<p>I'd be happy to take a PR to the blog post, either integrating that or otherwise adjusting that.</p>",
        "id": 238167702,
        "sender_full_name": "simulacrum",
        "timestamp": 1620662744
    },
    {
        "content": "<p>Left a comment summarizing the current state of the queue: <a href=\"https://github.com/rust-lang/rust/issues/84970#issuecomment-836916981\">https://github.com/rust-lang/rust/issues/84970#issuecomment-836916981</a></p>",
        "id": 238170761,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620663838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>  <code>item_children</code> should already be fixed by <a href=\"https://github.com/rust-lang/rust/issues/83901\">#83901</a></p>",
        "id": 238171476,
        "sender_full_name": "lqd",
        "timestamp": 1620664133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> Thanks!</p>",
        "id": 238172004,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620664328
    },
    {
        "content": "<p>and I believe at least some of the last <code>evaluate_obligation</code> item by <a href=\"https://github.com/rust-lang/rust/issues/83220\">#83220</a> (but may be <a href=\"https://github.com/rust-lang/rust/issues/83538\">#83538</a> in disguise)</p>",
        "id": 238172106,
        "sender_full_name": "lqd",
        "timestamp": 1620664377
    },
    {
        "content": "<p>I was not sure if the <code>evaluate_obligation</code> issues were all the same root cause or if they represented distinct issues so I mostly left them alone.</p>",
        "id": 238172355,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1620664459
    },
    {
        "content": "<p>If one datapoint is worth anything, I have been running 1.53.0-beta.2 with incremental all day and i have not encountered any ICEs <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 238210932,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1620680316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257516\">@Carol (Nichols || Goulding)</span> just to check, 1.52.0 <em>did</em> lead to a large amount of ICEs for you?</p>",
        "id": 238211388,
        "sender_full_name": "simulacrum",
        "timestamp": 1620680516
    },
    {
        "content": "<p>if so, that sounds promising for 1.53.0 having incremental no longer disabled by default</p>",
        "id": 238211447,
        "sender_full_name": "simulacrum",
        "timestamp": 1620680532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> yes it did</p>",
        "id": 238212118,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1620680802
    },
    {
        "content": "<p>I think it may be worth considering asking on users or internals for folks to test beta 1.53 and if their experience is also relatively ICE-free, consider a backport of <a href=\"https://github.com/rust-lang/rust/pull/84233\">https://github.com/rust-lang/rust/pull/84233</a> as a 1.52.2 release which re-enables incremental. Ideally we'd couple that with a \"poisoning\" that would mean it only gets disabled if we see the assert at least once, so users have the option to report a bug but otherwise have a minimal disruption. I think the alternative is to wait until 1.53, but that's a pretty long way off - a more immediate but partial fix might be warranted.</p>",
        "id": 238300971,
        "sender_full_name": "simulacrum",
        "timestamp": 1620737490
    },
    {
        "content": "<p>I feel really wary of flip-flopping on this -- waiting for 1.53 would be more prudent</p>",
        "id": 238348903,
        "sender_full_name": "cuviper",
        "timestamp": 1620753234
    },
    {
        "content": "<p>Yeah, I think I'd need to see very strong confidence, but I think I see it less as flip-flopping and more of \"we wanted to roll out a known good fix quickly, and with more time and energy have been able to identify a few key fixes\"</p>",
        "id": 238349143,
        "sender_full_name": "simulacrum",
        "timestamp": 1620753341
    },
    {
        "content": "<p>but then, how much \"more time and energy\" is sufficient that still beats the next release train?</p>",
        "id": 238349387,
        "sender_full_name": "cuviper",
        "timestamp": 1620753458
    },
    {
        "content": "<p>Not sure.</p>",
        "id": 238349984,
        "sender_full_name": "simulacrum",
        "timestamp": 1620753700
    },
    {
        "content": "<p>My understanding is that we'll beat next release train no matter what. As in, I really don’t want to have 1.53 ship without incremental compilation support back to where it was in 1.51, and according to evidence so far, the 1.53 beta is looking a lot better than 1.52.0 did.</p>",
        "id": 238357443,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620756615
    },
    {
        "content": "<p>the only question is whether we’ll identify a collection of stuff that we believe is worth stable-backports to yield that same quality of developer experience, and whether that will happen soon enough, right?</p>",
        "id": 238357575,
        "sender_full_name": "pnkfelix",
        "timestamp": 1620756660
    },
    {
        "content": "<p>Stable, or beta, backports, yes</p>",
        "id": 238357782,
        "sender_full_name": "simulacrum",
        "timestamp": 1620756733
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> , do you think the blog post with a status update on the fingerprint-related bugs and advocating for beta-usage should be on blog.rlo, or on inside-rust?</p>",
        "id": 239488256,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621454892
    },
    {
        "content": "<p>blog.rlo, as it targets the end-user audience</p>",
        "id": 239488290,
        "sender_full_name": "simulacrum",
        "timestamp": 1621454906
    },
    {
        "content": "<p>draft blog post: <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/846\">https://github.com/rust-lang/blog.rust-lang.org/pull/846</a></p>",
        "id": 239502899,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621462166
    },
    {
        "content": "<p>Completely unrelated: I loved the jokes in the post :)</p>",
        "id": 239508728,
        "sender_full_name": "Yerkebulan Tulibergenov",
        "timestamp": 1621465645
    },
    {
        "content": "<p>hey <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> , <a href=\"https://github.com/rust-lang/rust/issues/83311\">#83311</a> isn’t actually a fingerprint issue, right?</p>",
        "id": 239658573,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621544510
    },
    {
        "content": "<p>oh wait, of course it is</p>",
        "id": 239658637,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621544527
    },
    {
        "content": "<p>but the gist you linked recently ...</p>",
        "id": 239658667,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621544541
    },
    {
        "content": "<p>well...</p>",
        "id": 239658673,
        "sender_full_name": "simulacrum",
        "timestamp": 1621544544
    },
    {
        "content": "<p>it might've evolved since the initial report</p>",
        "id": 239658691,
        "sender_full_name": "simulacrum",
        "timestamp": 1621544553
    },
    {
        "content": "<p>it's certainly an incremental issue</p>",
        "id": 239658699,
        "sender_full_name": "simulacrum",
        "timestamp": 1621544557
    },
    {
        "content": "<p>right. I guess I want to try to be clear about problems that are injected by the newly promoted fingerprint-error</p>",
        "id": 239658752,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621544581
    },
    {
        "content": "<blockquote>\n<p>thread '&lt;unnamed&gt;' panicked at 'Error reading cached dep-graph: \"invalid enum variant tag while decoding <code>DepKind</code>, expected 0..249\"', compiler/rustc_incremental/src/persist/load.rs:186:22</p>\n</blockquote>\n<p>this doesn't look fingerprint-y</p>",
        "id": 239658755,
        "sender_full_name": "simulacrum",
        "timestamp": 1621544583
    },
    {
        "content": "<p>exacrly</p>",
        "id": 239658785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621544589
    },
    {
        "content": "<p>I'm pretty sure this is preexisting</p>",
        "id": 239658807,
        "sender_full_name": "simulacrum",
        "timestamp": 1621544592
    },
    {
        "content": "<p>right. so I want pre-existing ones to be treated separately</p>",
        "id": 239658846,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621544606
    },
    {
        "content": "<p>we likely aren't able to reliably distinguish different versions of fingerprint/depgraphs when the rustc hash isn't changing (due to being not tracked by rustbuild)</p>",
        "id": 239658870,
        "sender_full_name": "simulacrum",
        "timestamp": 1621544619
    },
    {
        "content": "<p>when does the rustc hash change? The phrase “rustc hash” to me implies it would be different for every build (probabilistically)?</p>",
        "id": 239764087,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609054
    },
    {
        "content": "<p>oh, no, I mean the git hash</p>",
        "id": 239764148,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609080
    },
    {
        "content": "<p>Ah. So local changes are made, people rebuild, but we’re using the same git commit as the basis for the git hash</p>",
        "id": 239764252,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609108
    },
    {
        "content": "<p>basically rustc --version is usually not going to change, and I think the incremental state is at least partially dependent on that changing in order to be cleared out properly</p>",
        "id": 239764280,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609118
    },
    {
        "content": "<p>yeah okay that <em>does</em> sound problematic. Hmm.</p>",
        "id": 239764281,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609118
    },
    {
        "content": "<p>since the git hash isn't even passed unless you explicitly configure x.py to do so (ignore-git = true by default, IIRC)</p>",
        "id": 239764334,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609142
    },
    {
        "content": "<p>would it be a non-starter to include some further suffix on the version output that reflects a hash of the build-time diff between the local source code and the git commit state?</p>",
        "id": 239764381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609167
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/239764334\">said</a>:</p>\n<blockquote>\n<p>since the git hash isn't even passed unless you explicitly configure x.py to do so (ignore-git = true by default, IIRC)</p>\n</blockquote>\n<p>do you know the motivation for not passing that by default?</p>",
        "id": 239764566,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609226
    },
    {
        "content": "<p>i guess someone could be building from a source tarball</p>",
        "id": 239764642,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609247
    },
    {
        "content": "<p>(but surely we could detect the presence of a <code>.git/</code> directory, and make an inference…)</p>",
        "id": 239764720,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609276
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> oh, we can do it for sure, but for many folks they don't want just committing to require a rebuild</p>",
        "id": 239764871,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609331
    },
    {
        "content": "<p>the hash is used pretty early on today, iirc in rustc-session crate?</p>",
        "id": 239764895,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609341
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/239764871\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> oh, we can do it for sure, but for many folks they don't want just committing to require a rebuild</p>\n</blockquote>\n<p>I don’t understand, why would the change here cause <code>git commit</code> to require a rebuild?</p>",
        "id": 239765153,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609435
    },
    {
        "content": "<p>I feel like I’m missing something in my mental model</p>",
        "id": 239765213,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609448
    },
    {
        "content": "<p>because git commit changes the git hash</p>",
        "id": 239765271,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609473
    },
    {
        "content": "<p>and we have it stored in the binary, as env!(\"RUSTC_COMMIT_HASH\") or whatever</p>",
        "id": 239765313,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609492
    },
    {
        "content": "<p>but, why is someone forced to rebuild?</p>",
        "id": 239765366,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609512
    },
    {
        "content": "<p>because Cargo will say \"that env variable changed, I need to rebuild\"</p>",
        "id": 239765407,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609525
    },
    {
        "content": "<p>same as for any other state that we track</p>",
        "id": 239765432,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609534
    },
    {
        "content": "<p>in any case, this hash is insufficient, just makes it less likely to be a problem</p>",
        "id": 239765471,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609548
    },
    {
        "content": "<p>oh you’re talking about rebuilding <em>another crate</em> (or crate graph)</p>",
        "id": 239765475,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609550
    },
    {
        "content": "<p>because you can change things without committing</p>",
        "id": 239765494,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609557
    },
    {
        "content": "<p>I thought you were talking about rebuilding rustc itself</p>",
        "id": 239765514,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609563
    },
    {
        "content": "<p>I am, yes</p>",
        "id": 239765556,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609567
    },
    {
        "content": "<p>like, x.py build &amp;&amp; git commit &amp;&amp; x.py build -- today the second one is a no-op</p>",
        "id": 239765592,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609582
    },
    {
        "content": "<p>but if we switched ignore-git to false, it wouldn't be</p>",
        "id": 239765619,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609594
    },
    {
        "content": "<p>okay. So you’re saying when someone <em>requests</em> a rebuild, they expect it to be a no-op in this case</p>",
        "id": 239765678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609617
    },
    {
        "content": "<p>and for some workflows (e.g., mine) -- I use git to push to a remote server where the build actually happens, so I'd rebuild <em>every</em> time.</p>",
        "id": 239765696,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609627
    },
    {
        "content": "<p>when in any case, what I really want is a hash of the source code state</p>",
        "id": 239765739,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609651
    },
    {
        "content": "<p>which the git commit is an approximation of</p>",
        "id": 239765756,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609661
    },
    {
        "content": "<p>right</p>",
        "id": 239765935,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609726
    },
    {
        "content": "<p>I wonder if there’s a different hash we could extract from git that more closely models the source code state on its own, independent of commit log state</p>",
        "id": 239765943,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609731
    },
    {
        "content": "<p>well, you sort of can, but at that point there's a question of whether it's the right thing <em>anyway</em></p>",
        "id": 239765993,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609752
    },
    {
        "content": "<p>it's still too pessimistic for almost all developers</p>",
        "id": 239766013,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609764
    },
    {
        "content": "<p>you sort of want \"incremental version\"</p>",
        "id": 239766036,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609773
    },
    {
        "content": "<p>which is ~impossible, I suspect</p>",
        "id": 239766043,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609778
    },
    {
        "content": "<p>unless we attempted to explicitly make that part of the <code>rustc —version —verbose</code> output</p>",
        "id": 239766190,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609833
    },
    {
        "content": "<p>but then that would be yet another thing to maintain</p>",
        "id": 239766215,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609840
    },
    {
        "content": "<p>and get wrong</p>",
        "id": 239766220,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609843
    },
    {
        "content": "<p>I'm not sure how fine-grained the versioning is-- like, can the order of queries in a function changing cause problems when deserializing? The type of a query?</p>",
        "id": 239766308,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609885
    },
    {
        "content": "<p>but at the same time, how <em>else</em> are we going to deal with the problem of a changing <code>rustc</code> source base?</p>",
        "id": 239766316,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609887
    },
    {
        "content": "<p>Maybe e.g. hashing the query defs in rustc-middle is OK</p>",
        "id": 239766349,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609901
    },
    {
        "content": "<p>you say “source code state” is too pessimistic</p>",
        "id": 239766351,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609902
    },
    {
        "content": "<p>but I’m not sure I agree with that</p>",
        "id": 239766363,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609908
    },
    {
        "content": "<p>Yeah, I mean, maybe it isn't that bad</p>",
        "id": 239766442,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609926
    },
    {
        "content": "<p>like, most developers, if they are aware of this problem at all, are going to use that as their mental model, right?</p>",
        "id": 239766463,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621609937
    },
    {
        "content": "<p>hm... yes? probably?</p>",
        "id": 239766500,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609950
    },
    {
        "content": "<p>one could argue that it's not really necessary for rustc to deal with this in the wild, as we do embed a source code hash (i.e. git hash) there</p>",
        "id": 239766553,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609972
    },
    {
        "content": "<p>and in rust-lang/rust, we should just get compiletest/rustbuild to clear out state appropriately on compiler rebuilds</p>",
        "id": 239766593,
        "sender_full_name": "simulacrum",
        "timestamp": 1621609990
    },
    {
        "content": "<p>we already use the rustc binary timestamp, that's really 'enough'</p>",
        "id": 239766609,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610000
    },
    {
        "content": "<p>“in the wild” as in, well, what?</p>",
        "id": 239766613,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610002
    },
    {
        "content": "<p>someone using <code>rustup</code> to make a custom toolchain?</p>",
        "id": 239766647,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610020
    },
    {
        "content": "<p>that points to their local build?</p>",
        "id": 239766659,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610024
    },
    {
        "content": "<p>that’s the pathological case I can imagine</p>",
        "id": 239766696,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610043
    },
    {
        "content": "<p>i.e. someone using a local <code>rustc</code> checkout, actively changing it, and <em>also</em> using it to build some entirely separate crate</p>",
        "id": 239766791,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610075
    },
    {
        "content": "<p>but you’re saying we use a timestamp on the <code>rustc</code> binary, and that should handle that latter case?</p>",
        "id": 239766821,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610094
    },
    {
        "content": "<p>but then I’m back to wondering how we hit this at all</p>",
        "id": 239766837,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/239766609\">said</a>:</p>\n<blockquote>\n<p>we already use the rustc binary timestamp, that's really 'enough'</p>\n</blockquote>\n<p>maybe I need clarity on who “we” is in that sentence</p>",
        "id": 239766947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610131
    },
    {
        "content": "<p>I'm saying that we hit this because we're not clearing out a bit of state</p>",
        "id": 239766948,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610132
    },
    {
        "content": "<p>it's not any different to the used-to-be-common \"found old version of libcore\" errors</p>",
        "id": 239766991,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610150
    },
    {
        "content": "<p>let me attempt to reestablish context</p>",
        "id": 239767110,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610185
    },
    {
        "content": "<p>we are talking about the ICE’s you noted here, right? : <a href=\"https://gist.github.com/Mark-Simulacrum/00eb855785b8cd9d8a696eb9b8fc1317\">https://gist.github.com/Mark-Simulacrum/00eb855785b8cd9d8a696eb9b8fc1317</a></p>",
        "id": 239767156,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610198
    },
    {
        "content": "<p>yes</p>",
        "id": 239767225,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610238
    },
    {
        "content": "<p>and saying that we can focus solely on the (pretty narrow) scenario of our own internal build + test infrastructure</p>",
        "id": 239767235,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610241
    },
    {
        "content": "<p>in this case, we're not deleting the tmp directory</p>",
        "id": 239767245,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610245
    },
    {
        "content": "<p>we should be</p>",
        "id": 239767258,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610250
    },
    {
        "content": "<p>and that you do not think the problems here generalize to other users</p>",
        "id": 239767260,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610251
    },
    {
        "content": "<p>outside of <code>x.py test</code> callers</p>",
        "id": 239767272,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610260
    },
    {
        "content": "<p>I think so, yes, I guess if someone is doing +stage1 they might encounter this, as you said. but it's pretty unusual to do that -- and I think cargo properly clears things out, as it sees through the rustup shim to the actual rustc binary I believe</p>",
        "id": 239767482,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610339
    },
    {
        "content": "<p>(not sure on that)</p>",
        "id": 239767486,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610344
    },
    {
        "content": "<p>maybe it doesn't actually, but regardless, there are mitigation strategies basically is all I'm saying</p>",
        "id": 239767527,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610370
    },
    {
        "content": "<p>I want to write a summary comment on <a href=\"https://github.com/rust-lang/rust/issues/83311\">#83311</a></p>",
        "id": 239767766,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610466
    },
    {
        "content": "<p>Does this look right:</p>\n<blockquote>\n<p>this may be very specific to local <code>rustc</code> development, where you are actually changing the <code>rustc</code> binary, but our incremental compilation infrastructure isn't necessarily designed to handle that case with complete fidelity.</p>\n</blockquote>",
        "id": 239767826,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610487
    },
    {
        "content": "<p>I’m basically trying to figure out how much of this is “we need to make changes to rustc itself” vs “we won’t change rustc to handle all aspects of this scenario. Instead we will change our test infrastructure.\"</p>",
        "id": 239767959,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610533
    },
    {
        "content": "<p>I’ll just say that explicitly (that there are still questions about what is best to do in response here.)</p>",
        "id": 239768129,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610611
    },
    {
        "content": "<p>Yeah</p>",
        "id": 239768179,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610640
    },
    {
        "content": "<p>er, well, it'd be a change to rustbuild</p>",
        "id": 239768239,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610650
    },
    {
        "content": "<p>probably like ~3 lines</p>",
        "id": 239768249,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610654
    },
    {
        "content": "<p>anyway I think we can remove <a href=\"https://github.com/rust-lang/rust/issues/83311\">#83311</a> from the <a href=\"https://github.com/rust-lang/rust/issues/84970\">#84970</a> metabug, right?</p>",
        "id": 239768654,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610809
    },
    {
        "content": "<p>I think so, yes, it seems largely unrelated</p>",
        "id": 239768779,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610858
    },
    {
        "content": "<p>done</p>",
        "id": 239768790,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610864
    },
    {
        "content": "<p>(in the latest state anyway)</p>",
        "id": 239768793,
        "sender_full_name": "simulacrum",
        "timestamp": 1621610865
    },
    {
        "content": "<p>right</p>",
        "id": 239768810,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610872
    },
    {
        "content": "<p>and I don’t think there’s any recent PR’s for it.</p>",
        "id": 239768924,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610911
    },
    {
        "content": "<p>(I’m trying to get a grip on what we might still backport, either to beta or even to stable.)</p>",
        "id": 239768967,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621610933
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/239765943\">said</a>:</p>\n<blockquote>\n<p>I wonder if there’s a different hash we could extract from git that more closely models the source code state on its own, independent of commit log state</p>\n</blockquote>\n<p>In fact, isn’t the thing I’m asking for here “just” the <code>tree</code>? Which seems to be something we can trivially get, either from <code>git cat-file -p master | grep ^tree</code>, or via <code>git rev-parse master:$ROOT | | grep ^^</code> ?</p>",
        "id": 239792012,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621621005
    },
    {
        "content": "<p>/me muses on whether there’s any value in having <code>rustc —version —verbose</code> report <em>both</em> the git commit ID as well as the tree ID...</p>",
        "id": 239792111,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621621067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> personally I think a much easier and simpler fix is to just disable incremental in rustbuild for builds with the stage 1 compiler</p>",
        "id": 239806092,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621627504
    },
    {
        "content": "<p>Then people can still set incremental = true for stage 0 builds without it being unsound</p>",
        "id": 239806160,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621627534
    },
    {
        "content": "<p>That's already true</p>",
        "id": 239807553,
        "sender_full_name": "simulacrum",
        "timestamp": 1621628241
    },
    {
        "content": "<p>The tests ICE'ing are passing -Cincremental (e.g., incremental tests, ui tests, etc)</p>",
        "id": 239807584,
        "sender_full_name": "simulacrum",
        "timestamp": 1621628266
    },
    {
        "content": "<p>Why would tests reuse the same cache between invocations?</p>",
        "id": 239808416,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621628720
    },
    {
        "content": "<p>They write to a shared directory (tmp) which isn't cleared, it's not necessary</p>",
        "id": 239812161,
        "sender_full_name": "simulacrum",
        "timestamp": 1621630724
    },
    {
        "content": "<p>Ah hmm, maybe it would be easier to use temporary directories for each test instead of making the compiler smarter</p>",
        "id": 239823681,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621638213
    },
    {
        "content": "<p>No changes to the compiler have been proposed, we just need to fix rustbuild or compiletest to appropriately clear out the tmp directory in build</p>",
        "id": 239823898,
        "sender_full_name": "simulacrum",
        "timestamp": 1621638390
    },
    {
        "content": "<p>(well, I <em>did</em> propose adding more info to the compiler’s <code>—version —verbose</code> output. That was more of a general “would this be a reasonable proxy for versioning the incremental metadata?”)</p>",
        "id": 239828148,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621641991
    },
    {
        "content": "<p>hm, yeah, I don't think it's the fix needed here (though may not be a bad idea, orthogonally)</p>",
        "id": 239828779,
        "sender_full_name": "simulacrum",
        "timestamp": 1621642568
    },
    {
        "content": "<p>I want to have a follow-up dialogue about the current status, namely the set of PR’s that got into 1.54 but have not yet been approved (or even necessarily nominated) for a 1.53 backport</p>",
        "id": 240079440,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621875596
    },
    {
        "content": "<p>I’m debating about whether this is the best topic for this, or if I should create a fresh one. For now I think continuing here makes sense.</p>",
        "id": 240079580,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621875632
    },
    {
        "content": "<p>In the Thursday T-compiler meeting, <a href=\"https://zulip-archive.rust-lang.org/238009tcompilermeetings/21853weekly2021052054818.html#239599378\">the discussion of beta-nominated PR 85186</a> was the main place where we started discussing the matter, from a big picture standpoint</p>",
        "id": 240079948,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621875779
    },
    {
        "content": "<p>since that meeting, I added a new column to the summary table on description of <a href=\"https://github.com/rust-lang/rust/issues/84970\">#84970</a>, showing the minimal Rust version each PR has gotten to. As of that time, there are three PR’s that are in 1.54 but are not yet beta-approved (and in some cases, not yet nominated) for 1.53: PR <a href=\"https://github.com/rust-lang/rust/issues/85211\">#85211</a>, PR <a href=\"https://github.com/rust-lang/rust/issues/83901\">#83901</a>, and PR <a href=\"https://github.com/rust-lang/rust/issues/85186\">#85186</a> .</p>",
        "id": 240080615,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621876058
    },
    {
        "content": "<p>At this point, I see us as having three realistic options:</p>\n<ol>\n<li>Do literally nothing. This will mean incr-comp gets turned back on in the 1.53 beta release, but it also means the bugs fixed by the PR’s above will hit users of that release.</li>\n<li>Backport some or all of the three PR’s listed, in order to ensure that that fingerprint problems don’t plague the beta, </li>\n<li>Disable incr-comp on 1.53.0, the same way it was disabled on 1.52.1, (so that users have to opt-in to using it via the environment variable).</li>\n</ol>\n<p>Options 2 and 3 are not exclusive. We could do both 2 and 3. But I don’t think there’s a great argument for that.</p>",
        "id": 240081031,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621876215
    },
    {
        "content": "<p>cc <span class=\"user-group-mention\" data-user-group-id=\"492\">@T-compiler</span></p>",
        "id": 240086045,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621878547
    },
    {
        "content": "<p>Hmm</p>",
        "id": 240089958,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880281
    },
    {
        "content": "<p>Do we have any sense for how often these various bugs hit users in the wild?</p>",
        "id": 240090036,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880302
    },
    {
        "content": "<p>Also, at this point, we are not talking about potential <em>soundness issues</em>, right, \"just\" ICEs?</p>",
        "id": 240090072,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1621880328
    },
    {
        "content": "<p>yes, at this point I believe we are only talking about ICE's</p>",
        "id": 240090992,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621880742
    },
    {
        "content": "<p>(there is a related question, one of whether to actually publish the <a href=\"https://github.com/rust-lang/blog.rust-lang.org/pull/846\">blog post encouraging people</a> to try out the 1.53-beta ahead of its release. I personally am inclined to consider publishing it only if we also do at least <em>some</em> of the backports associated with 2. (That’s not a bidirectional implication; I’m just saying that if we did backports, only then would I advocate for publishing the post.)</p>",
        "id": 240091365,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621880916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/240090036\">said</a>:</p>\n<blockquote>\n<p>Do we have any sense for how often these various bugs hit users in the wild?</p>\n</blockquote>\n<p>We do not. That is our biggest problem right now, I think.</p>",
        "id": 240096449,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621883025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/240096449\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/240090036\">said</a>:</p>\n<blockquote>\n<p>Do we have any sense for how often these various bugs hit users in the wild?</p>\n</blockquote>\n<p>We do not. That is our biggest problem right now, I think.</p>\n</blockquote>\n<p>that seems like something the blog post would help with</p>",
        "id": 240104516,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621886725
    },
    {
        "content": "<p>We certainly could rephrase the blog post to not exuberantly state that we’ve addressed all the known bugs in the beta, which was my expectation at the time I wrote it.</p>",
        "id": 240106055,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621887476
    },
    {
        "content": "<p>but then, what: recommend people try the beta, and if they still hit fingerprint issues, then try the nightly? I’m not really happy with that message either.</p>",
        "id": 240106473,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621887684
    },
    {
        "content": "<p>more like: \"try the beta; if it doesn't work, let us know what bug you hit so we know that fix is important to backport\"</p>",
        "id": 240106591,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1621887741
    },
    {
        "content": "<p>My feeling is that the set of changes we need to backport to 1.53 is quite large and should ride the train to stable instead of being backported. As for 1.53, I think we should disable incremental in the same way as 1.52. The release notes can also mention that 1.54 will ship with incremental re-enabled.</p>",
        "id": 240195078,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621952604
    },
    {
        "content": "<p>have we gotten any bug reports against the beta for fingerprint issues?</p>",
        "id": 240195404,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621952730
    },
    {
        "content": "<p>we haven’t actively advertised for people to try the beta, of course. But the reality might be that these bugs are rare enough that disabling incremental on 1.53 is not warranted</p>",
        "id": 240195627,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621952810
    },
    {
        "content": "<p>So okay: Based on the feedback here, I’m thinking a reasonable approach is 1. let the incr-comp fixes ride the trains, 2. make a blog post asking people to try the beta and give us feedback (but also be honest in it, and say that some fixes are riding the trains). I personally would like to add a step: 3. Based on feedback from the beta usage, let that feedback drive whether to disable incr-comp by default in 1.53.</p>",
        "id": 240196301,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621953101
    },
    {
        "content": "<p>but for that step 3 to work in practice, we might need a channel for <em>positive</em> feedback as well as negative. I.e. easy ways for developers to say “I am using the beta a non-release+non-benchmarking profile, and I have not yet had any fingerprint issues.\"</p>",
        "id": 240196484,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621953181
    },
    {
        "content": "<p>Strongly agree with that last point. If we hear nothing, we have no way of knowing if everything worked correctly or no one is trying beta.</p>",
        "id": 240197123,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1621953452
    },
    {
        "content": "<p>luckily, a blog post can include a link to such a feedback channel</p>",
        "id": 240197183,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621953474
    },
    {
        "content": "<p>What form should the feedback channel take? Github votes? Tweets?</p>",
        "id": 240211226,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621958789
    },
    {
        "content": "<p>GitHub would be my preference</p>",
        "id": 240214048,
        "sender_full_name": "simulacrum",
        "timestamp": 1621960046
    },
    {
        "content": "<p>Or an internals thread</p>",
        "id": 240214063,
        "sender_full_name": "simulacrum",
        "timestamp": 1621960053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/240196301\">said</a>:</p>\n<blockquote>\n<p>So okay: Based on the feedback here, I’m thinking a reasonable approach is 1. let the incr-comp fixes ride the trains, 2. make a blog post asking people to try the beta and give us feedback (but also be honest in it, and say that some fixes are riding the trains). I personally would like to add a step: 3. Based on feedback from the beta usage, let that feedback drive whether to disable incr-comp by default in 1.53.</p>\n</blockquote>\n<p>After some further reflection and discussion with others, I’m now inclined to port the change that we made 1.52.1 up to the beta channel, and then write a blog post advertising that people try out the beta <em>with</em> the <code>RUSTC_FORCE_INCREMENTAL=1</code> flag, and give us feedback accordingly.</p>",
        "id": 240233705,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621968930
    },
    {
        "content": "<p>that way, we engage with our users, but also make it clear that we are asking them to opt in to helping us test out these changes and prioritize whether to backport other fixes.</p>",
        "id": 240233796,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621968967
    },
    {
        "content": "<p>I think I'd trust experience reports a lot more without the opt-in backported</p>",
        "id": 240233844,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969003
    },
    {
        "content": "<p>why is that?</p>",
        "id": 240233869,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969016
    },
    {
        "content": "<p>because I don't trust users to not get the opt-in wrong</p>",
        "id": 240233885,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969024
    },
    {
        "content": "<p>it's \"hard\" to tell if you did that (intentionally so)</p>",
        "id": 240233904,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969033
    },
    {
        "content": "<p>Ah, you are worried about getting too much <em>positive</em> feedback (saying “no bugs found here”), right?</p>",
        "id": 240233943,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969057
    },
    {
        "content": "<p>right, yes</p>",
        "id": 240233950,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969061
    },
    {
        "content": "<p>I'd rather beta be as close to what we'd deploy in the \"may cause bugs\" sense</p>",
        "id": 240233987,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969081
    },
    {
        "content": "<p>since enabling the opt-in is the \"more reliable\" option in some sense, as it basically disables incremental</p>",
        "id": 240234046,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969098
    },
    {
        "content": "<p>it's never <em>bad</em> for correctness, just performance</p>",
        "id": 240234054,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969108
    },
    {
        "content": "<p>So, an unstated change in my thinking above is that I would just abandon shipping 1.53 with incr-comp turned back on by default</p>",
        "id": 240234085,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969126
    },
    {
        "content": "<p>i.e. we don’t need the positive feedback channel  anymore</p>",
        "id": 240234115,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969144
    },
    {
        "content": "<p>hm</p>",
        "id": 240234134,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969156
    },
    {
        "content": "<p>it's not clear to me why we'd do that, at this point, personally, given the data we have so far</p>",
        "id": 240234165,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969174
    },
    {
        "content": "<p>I suppose <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ’s point still implies that we might incorrectly prioritize what to back port.</p>",
        "id": 240234197,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969187
    },
    {
        "content": "<p>it's not like incremental or the compiler never ICEs</p>",
        "id": 240234198,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969187
    },
    {
        "content": "<p>So, an unstated change in my thinking above is that I would just abandon shipping 1.53 with incr-comp turned back on by default</p>",
        "id": 240234205,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969191
    },
    {
        "content": "<p>we should be striving for it to never ICE</p>",
        "id": 240234346,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969246
    },
    {
        "content": "<p>the realities of developer resources have meant we couldn’t enforce it</p>",
        "id": 240234387,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/240234165\">said</a>:</p>\n<blockquote>\n<p>it's not clear to me why we'd do that, at this point, personally, given the data we have so far</p>\n</blockquote>\n<p>by “data” here, you mean the anecdotal reports that the beta today works great, right?</p>",
        "id": 240234555,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969335
    },
    {
        "content": "<p>well, I mean, I guess what I'm saying is: we're not looking at a difference between a compiler with no bugs and some bugs. We're looking at the difference between some bugs and some more bugs. And since \"some bugs\" has always been the case, realistically, I don't see what we gain by disabling incremental for another cycle <em>presuming</em> we don't expect that beta is actually going to cause users to -- in the common case -- hit these ICEs on every build, like we were hearing in 1.52</p>",
        "id": 240234589,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/240234555\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/240234165\">said</a>:</p>\n<blockquote>\n<p>it's not clear to me why we'd do that, at this point, personally, given the data we have so far</p>\n</blockquote>\n<p>by “data” here, you mean the anecdotal reports that the beta today works great, right?</p>\n</blockquote>\n<p>yes</p>",
        "id": 240234605,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/unstable.20fingerprints.20-.20actually.20in.201.2E52.20.2384970/near/240233885\">said</a>:</p>\n<blockquote>\n<p>because I don't trust users to not get the opt-in wrong</p>\n</blockquote>\n<p>I hadn’t considered this point in my conclusion above. I’ll have to reflect further on it.</p>",
        "id": 240234920,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969521
    },
    {
        "content": "<p>the more I think about the things I would like to say in a blog post, the more I worry that certain aspects of it (e.g. bemoaning the lack of support for telemetry in <code>rustc</code>) do not belong on blog.rlo; it would be more suitable for <a href=\"http://blog.pnkfx.org\">blog.pnkfx.org</a></p>",
        "id": 240235141,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969620
    },
    {
        "content": "<p>so I need to get my thoughts properly oriented with a voice that is suitable for blog.rlo</p>",
        "id": 240235206,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969660
    },
    {
        "content": "<p>I guess to put it concretely: if we are precluding publishing 1.53 with incremental on, I don't know that a <em>separate</em> blog post is necessary. We can make a note in the main blog that this is the case and about the switch to re-enable it (RUSTC_FORCE_INCREMENTAL).</p>",
        "id": 240235332,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969709
    },
    {
        "content": "<p>the main reason I was still thinking of making a blog post advocating for people to try the beta <em>with</em> <code>RUSTC_FORCE_INCREMENTAL</code> was to get feedback about whether we need to increase the priority of certain 1.54 -&gt; 1.53 backports.</p>",
        "id": 240235464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1621969792
    },
    {
        "content": "<p>But if we're not, then the blog post seems like it should be:</p>\n<ul>\n<li>quick summary, with link to 1.52.1 blog post for more details</li>\n<li>ask to run rustup update beta &amp;&amp; rustup default beta (or so), and report any bugs encountered in development, with an emphasis on incremental ICEs</li>\n</ul>\n<p>Nothing further.</p>",
        "id": 240235497,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969803
    },
    {
        "content": "<p>I have no opposition to that, but I think it would be pretty odd for us to (continue/add more) backports to 1.53, which all carry some risk, if we're not enabling by default, given that initial data suggests the <em>original</em> beta was already pretty solid</p>",
        "id": 240235617,
        "sender_full_name": "simulacrum",
        "timestamp": 1621969861
    },
    {
        "content": "<p>Rather that go all the way to a blog post, I’m trying a light weight poll to start with: <a href=\"https://twitter.com/pnkfelix/status/1397571643405475840\">https://twitter.com/pnkfelix/status/1397571643405475840</a> ; retweets very much encouraged</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/pnkfelix/status/1397571643405475840\"><img class=\"twitter-avatar\" src=\"https://uploads.zulipusercontent.net/d481cd182b8f1b51780eee2728ea0a624dbecbcd/68747470733a2f2f7062732e7477696d672e636f6d2f70726f66696c655f696d616765732f3337383830303030303334393736343032352f62396537363762326535656263363331383738323633623732613832313631655f6e6f726d616c2e706e67\"></a><p>Quick poll for developers who normally would be using an up-to-date Rust stable: Are you currently:</p><span>- Felix S K II (@pnkfelix)</span></div></div>",
        "id": 240340823,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622042106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ’s point about people getting the <code>RUSTC_FORCE_INCREMENTAL=1</code> env var wrong is making me think that it would likewise be wrong to port that change to the beta channel. Or at least, people might currently be opting to use the beta rather than deal with that env var, and those people might prefer to <em>keep doing so</em> when 1.53 is released: That is, they may well prefer to continue with 1.54-beta rather than figure out how to do <code>RUSTC_FORCE_INCREMENTAL</code> with 1.53 stable.</p>",
        "id": 240344808,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622043499
    },
    {
        "content": "<p>(and, to be clear: My concern is that we would be doing disservice to those developers if we add the <code>RUSTC_FORCE_INCREMENAL</code> env var to the 1.53-beta channel.)</p>",
        "id": 240353279,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622046952
    },
    {
        "content": "<p>soooo if i just hit <a href=\"https://github.com/rust-lang/rust/issues/83538\">#83538</a> (<code>evaluate_obligation</code> <code>EvaluatedToOk</code>) in 1.53.0-beta.3 (the table in <a href=\"https://github.com/rust-lang/rust/issues/84970\">#84970</a> says the fix for that is in 1.54), where would you like that noted?</p>",
        "id": 240381635,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1622058876
    },
    {
        "content": "<p>this <em>is</em> the first incr comp ICE i've hit since switching to the 1.53 betas whenever i said that i'd been using beta in here like a week or two ago, so it's <em>much</em> improved on beta</p>",
        "id": 240381822,
        "sender_full_name": "Carol (Nichols || Goulding)",
        "timestamp": 1622058954
    },
    {
        "content": "<p>I think leaving a comment  on <a href=\"https://github.com/rust-lang/rust/issues/84970\">#84970</a> is good</p>",
        "id": 240382221,
        "sender_full_name": "simulacrum",
        "timestamp": 1622059108
    },
    {
        "content": "<p>There's still at least one open <code>evaluate_obligation</code> issue that I'm aware of</p>",
        "id": 240477902,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622126488
    },
    {
        "content": "<p>One of my recent fixes didn't actually fix the crash a user was getting (though it did slightly improve performance)</p>",
        "id": 240477981,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622126519
    },
    {
        "content": "<p>I'm working on fixing it, but it might take me a little while</p>",
        "id": 240478065,
        "sender_full_name": "Aaron Hill",
        "timestamp": 1622126536
    },
    {
        "content": "<p>for people who were not in today’s compiler team meeting: We’ll be discussing this issue in tomorrow’s steering meeting, and we are gathering thoughts ahead of time in <a href=\"https://hackmd.io/vXRZ4RiNRKWVlDChmsCriA\">hackmd: What to do re: incr-comp and 1.53 release</a>. Feel free to jot down a new Argument/Narrative at end if you think your Point Of View is not represented by any that are currently there.</p>",
        "id": 240535398,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622151472
    },
    {
        "content": "<p>I just posted <a href=\"https://github.com/rust-lang/rust/issues/85783\">https://github.com/rust-lang/rust/issues/85783</a> which argues that the fingerprint stability checks enabled so far don't cover all the potentially dangerous cases. I think this is relevant to the discussion because it means that there might be even more \"unstable fingerprint ICEs\" out there waiting to be discovered (even if they are actually harmless).</p>",
        "id": 240597416,
        "sender_full_name": "mw",
        "timestamp": 1622205302
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> <span class=\"user-group-mention\" data-user-group-id=\"3282\">@wg-incr-comp</span></p>",
        "id": 240597595,
        "sender_full_name": "mw",
        "timestamp": 1622205381
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> <span class=\"user-group-mention\" data-user-group-id=\"897\">@T-compiler/meeting</span></p>",
        "id": 240597665,
        "sender_full_name": "mw",
        "timestamp": 1622205427
    },
    {
        "content": "<p>It's already known that this is a problem, just it's a 5-10% performance hit to enable this validation iirc</p>",
        "id": 240598411,
        "sender_full_name": "simulacrum",
        "timestamp": 1622205867
    },
    {
        "content": "<p>There's a PR floating around</p>",
        "id": 240598421,
        "sender_full_name": "simulacrum",
        "timestamp": 1622205876
    },
    {
        "content": "<p>Well, theoretical problem that is</p>",
        "id": 240598537,
        "sender_full_name": "simulacrum",
        "timestamp": 1622205938
    },
    {
        "content": "<p>Well, I know that we did not check all cases but so far I assumed that the unchecked cases are harmless.</p>",
        "id": 240601929,
        "sender_full_name": "mw",
        "timestamp": 1622207660
    },
    {
        "content": "<p>Is there a <code>-Z</code> flag available for the extra validation yet?</p>",
        "id": 240603066,
        "sender_full_name": "pnkfelix",
        "timestamp": 1622208288
    },
    {
        "content": "<p>Yes, it's the regular <code>-Zverify-ich</code> flag</p>",
        "id": 240603125,
        "sender_full_name": "mw",
        "timestamp": 1622208317
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/83007\">https://github.com/rust-lang/rust/pull/83007</a> has timings for both cases</p>",
        "id": 240603482,
        "sender_full_name": "mw",
        "timestamp": 1622208479
    },
    {
        "content": "<p>I created <a href=\"https://github.com/rust-lang/rust/pull/85784\">https://github.com/rust-lang/rust/pull/85784</a> to get up-to-date numbers</p>",
        "id": 240605424,
        "sender_full_name": "mw",
        "timestamp": 1622209383
    }
]