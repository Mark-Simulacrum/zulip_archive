[
    {
        "content": "<p>Hypothetically, if we're doing incremental compilation, and we're not yet sure if the interface file for a given crate is going to be the same since the last compile, if we have spare CPUs, could we optimistically assume that it <em>is</em> the same, start recompiling a dependent crate, and then throw away any compilation that depends on things that ended up changing in the interface file?</p>",
        "id": 210704944,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600669375
    },
    {
        "content": "<p>I think this is a question for <a class=\"stream\" data-stream-id=\"246057\" href=\"/#narrow/stream/246057-t-cargo\">#t-cargo</a>.</p>",
        "id": 210714355,
        "sender_full_name": "bjorn3",
        "timestamp": 1600677887
    },
    {
        "content": "<p>Such a change would involve both rustc and cargo, since the compiler would need to support speculatively starting to build with a potentially stale interface file, and then later cancelling only the builds that rely on things that changed.</p>",
        "id": 210714474,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600677983
    },
    {
        "content": "<p>I think compilation will need to be aborted on any change to the interface file as rustc uses DefId's which would change when the interface file changes. Incremental compilation uses a DefId &lt;-&gt; DefPath map to remap the DefIds when loading the crate metadata, but once the crate metadata is loaded it only uses DefId's. Aborting rustc is as simple as killing, which cargo can easily do.</p>",
        "id": 210714733,
        "sender_full_name": "bjorn3",
        "timestamp": 1600678212
    },
    {
        "content": "<p>How does cargo sort dependencies?<br>\nDoes it compile the dependencies which affect the largest number of crates first?<br>\nOr the dependencies with the deepest tree?</p>\n<p>The optimal solution varies based on the compile time of each crate, and maybe the number of cores. But both tree size and depth order would be pretty close.</p>",
        "id": 210730292,
        "sender_full_name": "teor",
        "timestamp": 1600689220
    },
    {
        "content": "<p>Back to your original proposal - rust-analyzer would also benefit from speculative compilation. Most IDE-based edits won't change the interfaces.</p>",
        "id": 210730427,
        "sender_full_name": "teor",
        "timestamp": 1600689302
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325209\">@teor</span>  Cargo now just starts from leaf crates and at each step selects the crate that has highest number of transitive dependants. If you look at issues labeled with Performance, there's a number of  ideas for potential  improvements discussed  <a href=\"https://github.com/rust-lang/cargo/labels/Performance\">https://github.com/rust-lang/cargo/labels/Performance</a></p>",
        "id": 210733387,
        "sender_full_name": "panstromek",
        "timestamp": 1600691234
    },
    {
        "content": "<p>Generally, this problem is called DAG scheduling and it's NP-hard</p>",
        "id": 210733482,
        "sender_full_name": "panstromek",
        "timestamp": 1600691304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"325209\">teor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Optimistic.20incremental.20compilation.3F/near/210730427\">said</a>:</p>\n<blockquote>\n<p>Back to your original proposal - rust-analyzer would also benefit from speculative compilation. Most IDE-based edits won't change the interfaces.</p>\n</blockquote>\n<p>The MIR of functions is in many cases part of the interface. While during check builds only <code>const fn</code> would need to have MIR available for them, for full builds generic and <code>#[inline]</code> functions need to be included in the metadata too.</p>",
        "id": 210737761,
        "sender_full_name": "bjorn3",
        "timestamp": 1600693566
    },
    {
        "content": "<p>Is the problem even just NP-hard? In the fully general case, it seems like that problem is \"knowing-the-future\"-hard. ;)</p>",
        "id": 210801945,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600723420
    },
    {
        "content": "<p>Depending on how much effort it takes to figure out how long something is going to take, vs actually doing it.</p>",
        "id": 210802037,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600723457
    },
    {
        "content": "<p>(That does raise one interesting question: perhaps it makes sense to do a quick pass that ingests the code of a crate, and uses that information to decide when to schedule further processing of that crate once we know the size of the problem.)</p>",
        "id": 210802107,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1600723504
    },
    {
        "content": "<p>Sheer number of lines is not a great metric</p>",
        "id": 210813874,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600731724
    },
    {
        "content": "<p>Proof: the recent issue about exponential compile times for async functions</p>",
        "id": 210813918,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600731744
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Optimistic.20incremental.20compilation.3F/near/210801945\">said</a>:</p>\n<blockquote>\n<p>Is the problem even just NP-hard? In the fully general case, it seems like that problem is \"knowing-the-future\"-hard. ;)</p>\n</blockquote>\n<p>could cargo store how long crates took the last time?</p>",
        "id": 210815014,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600732744
    },
    {
        "content": "<p>and then guesstimate from there for incremental</p>",
        "id": 210815036,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600732761
    },
    {
        "content": "<p>Profile-guided optimisation, but for parallel compilation scheduling</p>",
        "id": 210822874,
        "sender_full_name": "teor",
        "timestamp": 1600741831
    },
    {
        "content": "<p>basically, yeah</p>",
        "id": 210822910,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600741923
    },
    {
        "content": "<p>That's what one of the open issues suggests</p>",
        "id": 210833100,
        "sender_full_name": "panstromek",
        "timestamp": 1600757298
    },
    {
        "content": "<p>I think the comment on NP-conpleteness is there. I am actually not sure which specific instance of the problem has this property</p>",
        "id": 210833122,
        "sender_full_name": "panstromek",
        "timestamp": 1600757342
    },
    {
        "content": "<p>I'd think it's the one where you know how long each step is going to take, so speculative one would obviously be even harder</p>",
        "id": 210833296,
        "sender_full_name": "panstromek",
        "timestamp": 1600757517
    },
    {
        "content": "<p>But not really meaningfully on O(x) scale</p>",
        "id": 210833388,
        "sender_full_name": "panstromek",
        "timestamp": 1600757622
    },
    {
        "content": "<p>Is it fair to call it an interface file at this point?</p>",
        "id": 210902459,
        "sender_full_name": "est31",
        "timestamp": 1600795001
    },
    {
        "content": "<p>IIRC it contains the full source code of the crate and all MIR code</p>",
        "id": 210902504,
        "sender_full_name": "est31",
        "timestamp": 1600795020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"239881\">Josh Triplett</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Optimistic.20incremental.20compilation.3F/near/210802107\">said</a>:</p>\n<blockquote>\n<p>(That does raise one interesting question: perhaps it makes sense to do a quick pass that ingests the code of a crate, and uses that information to decide when to schedule further processing of that crate once we know the size of the problem.)</p>\n</blockquote>\n<p>I agree in believing that there is some potential hidden here <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span> . See this github comment for my own views on the matter: <a href=\"https://github.com/rust-lang/cargo/issues/7396#issuecomment-533762594\">https://github.com/rust-lang/cargo/issues/7396#issuecomment-533762594</a></p>\n<p>A good starting point would be to take the logs of one of the crater runs and then run various heuristics on them comparing compile time with line count, size of the source code, number of functions, how complex types are, etc and finding good correlates. Then use one of those correlates as input for cargo.</p>",
        "id": 210903106,
        "sender_full_name": "est31",
        "timestamp": 1600795259
    },
    {
        "content": "<p>Hmm, I wonder if there's a way to train an NN on this.  This kind of \"it doesn't matter if it's somewhat wrong sometimes so long as it's usually better than what we could otherwise guess\" seems like the kind of place that AI can actually be useful, not just a meme.</p>",
        "id": 210961550,
        "sender_full_name": "scottmcm",
        "timestamp": 1600840152
    },
    {
        "content": "<p>A heuristic should get you similar results, but have more predictable behaviour (and be easier to maintain, or tune if particular projects have issues)</p>",
        "id": 211002937,
        "sender_full_name": "teor",
        "timestamp": 1600868031
    },
    {
        "content": "<p>One of the issues with neural networks is that they're effectively an all-or-nothing black box</p>",
        "id": 211003027,
        "sender_full_name": "teor",
        "timestamp": 1600868059
    },
    {
        "content": "<p>I still think PGO is the best way to do this personally</p>",
        "id": 211003636,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600868330
    },
    {
        "content": "<p>If it works well enough cargo could even upload the stats to <a href=\"http://crates.io\">crates.io</a> so that everyone using <code>cargo install</code> benefits too</p>",
        "id": 211003685,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1600868355
    }
]