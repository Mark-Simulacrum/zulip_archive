[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>thread &#39;rustc&#39; panicked at &#39;no entry found for key&#39;, src/libcore/option.rs:1040:5ore\nnote: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n\nnote: rustc 1.33.0-dev running on x86_64-apple-darwin\n\nnote: compiler flags: -Z osx-rpath-install-name -Z force-unstable-if-unmarked -C opt-level=2 -C prefer-dynamic -C debug-assertions=y -C codegen-units=12 -C link-args=-Wl,-rpath,@loader_path/../lib --crate-type lib\n\nnote: some of the compiler flags provided by cargo are hidden\n\nerror: Could not compile `core`.\n\nTo learn more, run the command again with --verbose.\ncommand did not execute successfully: &quot;rust/build/x86_64-apple-darwin/stage0/bin/cargo&quot; &quot;build&quot; &quot;--target&quot; &quot;x86_64-apple-darwin&quot; &quot;-j&quot; &quot;12&quot; &quot;--release&quot; &quot;--features&quot; &quot;panic-unwind backtrace&quot; &quot;--manifest-path&quot; &quot;rust/src/libstd/Cargo.toml&quot; &quot;--message-format&quot; &quot;json&quot;\nexpected success, got: exit code: 101\nfailed to run: rust/build/bootstrap/debug/bootstrap build --stage 1 src/libstd\nBuild completed unsuccessfully in 0:13:26\n</pre></div>",
        "id": 152682883,
        "sender_full_name": "blitzerr",
        "timestamp": 1546045630
    },
    {
        "content": "<p>Do report ICEs to the issue tracker, not here.</p>",
        "id": 152683419,
        "sender_full_name": "nagisa",
        "timestamp": 1546046722
    },
    {
        "content": "<p>Especially if it is reproducible and happens on a clean checkout (to remove the possibility of your own change of some sort causing it)</p>",
        "id": 152683438,
        "sender_full_name": "nagisa",
        "timestamp": 1546046762
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <br>\nIf my code is causing the compiler to panic, how do I get the stack trace or something to get the location ?</p>",
        "id": 152690787,
        "sender_full_name": "blitzerr",
        "timestamp": 1546061043
    },
    {
        "content": "<p>RUST_BACKTRACE=1 gives backtraces as usual.</p>",
        "id": 152702062,
        "sender_full_name": "nagisa",
        "timestamp": 1546084066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span>  Apparently it does not give you backtrace on mac as said <a href=\"https://rust-lang.github.io/rustc-guide/compiler-debugging.html#getting-a-backtrace\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/compiler-debugging.html#getting-a-backtrace\">here</a>. I am wondering if there is a way of getting print statements while building the compiler as the panic in my case happens during building rustc. <a href=\"https://rust-lang.github.io/rustc-guide/compiler-debugging.html#getting-logging-output\" target=\"_blank\" title=\"https://rust-lang.github.io/rustc-guide/compiler-debugging.html#getting-logging-output\">This</a> deals with debug statements while compiling a file with a built compiler and not during the build.</p>",
        "id": 152710047,
        "sender_full_name": "blitzerr",
        "timestamp": 1546102290
    },
    {
        "content": "<p>You can use <code>eprintln!</code> in the compiler</p>",
        "id": 152710097,
        "sender_full_name": "Zoxc",
        "timestamp": 1546102376
    },
    {
        "content": "<p>Thanks a lot <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> . Let me try that</p>",
        "id": 152710240,
        "sender_full_name": "blitzerr",
        "timestamp": 1546102776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> I believe that documentation is incorrect, I get backtraces for both my own code and <code>rustc</code> in mac 10.13</p>",
        "id": 154098546,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1546284755
    },
    {
        "content": "<p>In my case, I just got a line about the point of panic but not the entire call stack.</p>\n<p>thread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 0', /Users/blitz/rustc-dev/rust/src/libcore/slice/mod.rs:2455</p>\n<p>Do you get the full stack ?</p>",
        "id": 154098787,
        "sender_full_name": "blitzerr",
        "timestamp": 1546285195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span></p>",
        "id": 154098832,
        "sender_full_name": "blitzerr",
        "timestamp": 1546285208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span> are you on a less standard platform, perhaps?</p>",
        "id": 154099090,
        "sender_full_name": "nagisa",
        "timestamp": 1546285731
    },
    {
        "content": "<p>I do</p>",
        "id": 154099503,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1546286493
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>$ RUST_BACKTRACE=full ./stage1/bin/rustc ../../src/test/ui/issues/issue-44023.rs -Ztreat-err-as-bug\nerror[E0308]: mismatched types\n --&gt; ../../src/test/ui/issues/issue-44023.rs:5:42\n  |\n5 |   fn საჭმელად_გემრიელი_სადილი ( ) -&gt; isize { //~ ERROR mismatched types\n  |  __________________________________________^\n6 | | }\n  | |_^ expected isize, found ()\n  |\n  = note: expected type `isize`\n             found type `()`\n\nthread &#39;rustc&#39; panicked at &#39;encountered error with `-Z treat_err_as_bug&#39;, src/librustc_errors/lib.rs:490:13\nstack backtrace:\n   0:        0x10fe5521f - std::sys::unix::backtrace::tracing::imp::unwind_backtrace::hc6fe37d6df1f3fe5\n   1:        0x10fe7f3cd - std::sys_common::backtrace::print::hb7f980371c0868d5\n   2:        0x10fe76aa1 - std::panicking::default_hook::{{closure}}::h8241ef64100dd6cc\n   3:        0x10fe76830 - std::panicking::default_hook::h60d1f8576b12717c\n   4:        0x10d715921 - rustc::util::common::panic_hook::h69f8586f8a0f0325\n   5:        0x10fe771d1 - std::panicking::rust_panic_with_hook::h3ddb1c46e6feced8\n   6:        0x10f766cb4 - std::panicking::begin_panic::hc0718cb54d8ba326\n   7:        0x10f7528c6 - rustc_errors::Handler::emit_db::h71b6a584809709bb\n   8:        0x10f75f1cc - rustc_errors::diagnostic_builder::DiagnosticBuilder::emit::h7d0ef8ff5a1046cd\n   9:        0x10ba1ba5c - &lt;rustc_typeck::check::coercion::CoerceMany&lt;&#39;gcx, &#39;tcx, &#39;exprs, E&gt;&gt;::coerce_inner::h4c499b4e1caffb2b\n  10:        0x10bb50812 - rustc_typeck::check::FnCtxt::with_breakable_ctxt::ha4cc4bc83fcb08c3\n  11:        0x10bb8fbe4 - rustc_typeck::check::FnCtxt::check_block_with_expected::hb13f83d0c4498f69\n  12:        0x10bb81a40 - rustc_typeck::check::FnCtxt::check_expr_kind::h75e62a260248dbeb\n  13:        0x10bb814e4 - rustc_typeck::check::FnCtxt::check_expr_with_expectation_and_needs::hbe73d170359aeba1\n  14:        0x10bb806ac - rustc_typeck::check::FnCtxt::check_return_expr::h2629ed759b193b8d\n  15:        0x10bb7155d - rustc_typeck::check::check_fn::h200e74f0e5e3c2cb\n  16:        0x10b9de428 - rustc::ty::context::GlobalCtxt::enter_local::hf6ba87dbedd33942\n  17:        0x10bb70155 - rustc_typeck::check::typeck_tables_of::h162f840803ba1fe4\n  18:        0x10d7d16fe - rustc::ty::query::&lt;impl rustc::ty::query::config::QueryAccessors&lt;&#39;tcx&gt; for rustc::ty::query::queries::typeck_tables_of&lt;&#39;tcx&gt;&gt;::compute::h1aa06c980f0e396c\n  19:        0x10db6f73c - rustc::dep_graph::graph::DepGraph::with_task_impl::h4451d90f125a1e9a\n  20:        0x10d7c7398 - &lt;rustc::ty::query::plumbing::JobOwner&lt;&#39;a, &#39;tcx, Q&gt;&gt;::start::he16f56a818977929\n  21:        0x10d8e8412 - rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&lt;&#39;a, &#39;gcx, &#39;tcx&gt;&gt;::force_query_with_job::h7a6693495921f881\n  22:        0x10d89432b - rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&lt;&#39;a, &#39;gcx, &#39;tcx&gt;&gt;::try_get_with::hc580e739dda9bdd3\n  23:        0x10d906d6f - rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&lt;&#39;a, &#39;gcx, &#39;tcx&gt;&gt;::ensure_query::h099f19c1d38763ed\n  24:        0x10baac45b - rustc::session::Session::track_errors::hf9a6f2a242c90b0b\n  25:        0x10bb6fcbf - rustc_typeck::check::typeck_item_bodies::h4534ee4d734144a1\n  26:        0x10b942ea6 - rustc::ty::query::__query_compute::typeck_item_bodies::hf568d3995a6c4784\n  27:        0x10ba8070b - rustc::ty::query::&lt;impl rustc::ty::query::config::QueryAccessors&lt;&#39;tcx&gt; for rustc::ty::query::queries::typeck_item_bodies&lt;&#39;tcx&gt;&gt;::compute::h7b6aface07086eb1\n  28:        0x10b95a166 - rustc::dep_graph::graph::DepGraph::with_task_impl::hb1b264e398d9686a\n  29:        0x10ba8d101 - &lt;rustc::ty::query::plumbing::JobOwner&lt;&#39;a, &#39;tcx, Q&gt;&gt;::start::hc63f00cac165842f\n  30:        0x10b9b56e9 - rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&lt;&#39;a, &#39;gcx, &#39;tcx&gt;&gt;::force_query_with_job::h454b1e98cb985f5e\n  31:        0x10b982ff7 - rustc::ty::query::plumbing::&lt;impl rustc::ty::context::TyCtxt&lt;&#39;a, &#39;gcx, &#39;tcx&gt;&gt;::try_get_with::h5572ff8db339f814\n  32:        0x10b963997 - rustc::util::common::time::h9f12939f16f76f2b\n  33:        0x10bb0a296 - rustc_typeck::check_crate::h842d9672d6af315a\n  34:        0x10acc632b - &lt;std::thread::local::LocalKey&lt;T&gt;&gt;::with::h63437dce8de12658\n  35:        0x10aca74eb - rustc::ty::context::TyCtxt::create_and_enter::h673adfdda68da1ea\n  36:        0x10addaa98 - rustc_driver::driver::phase_3_run_analysis_passes::h67cf81730cc3ec14\n  37:        0x10ada44a5 - rustc_driver::driver::compile_input::ha5fcb3f0c8f48e47\n  38:        0x10ad06f4e - rustc_driver::run_compiler_with_pool::haa8beec656c50be8\n  39:        0x10acb287e - &lt;scoped_tls::ScopedKey&lt;T&gt;&gt;::set::hd44e699e53d15e75\n  40:        0x10ad05eb8 - rustc_driver::run_compiler::hc40f67821fa523f1\n  41:        0x10acb23cb - &lt;scoped_tls::ScopedKey&lt;T&gt;&gt;::set::hc5ff8cbf82c6994c\n  42:        0x10ac8239d - syntax::with_globals::hf12d7f48e28fa87c\n  43:        0x10fe868fe - __rust_maybe_catch_panic\n  44:        0x10addc49d - &lt;F as alloc::boxed::FnBox&lt;A&gt;&gt;::call_box::h1a1055a3d353ec75\n  45:        0x10fe5f8f7 - std::sys_common::thread::start_thread::h0f67f5321d68e7d5\n  46:        0x10fe6a738 - std::sys::unix::thread::Thread::new::thread_start::h1398251991321fad\n  47:     0x7fff57254660 - _pthread_body\n  48:     0x7fff5725450c - _pthread_start\nquery stack during panic:\n#0 [typeck_tables_of] processing `საჭმელად_გემრიელი_სადილი`\n#1 [typeck_item_bodies] type-checking all item bodies\nend of query stack\n\nerror: internal compiler error: unexpected panic\n\nnote: the compiler unexpectedly panicked. this is a bug.\n\nnote: we would appreciate a bug report: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#bug-reports\n\nnote: rustc 1.33.0-dev running on x86_64-apple-darwin\n\nnote: compiler flags: -Z treat-err-as-bug\n</pre></div>",
        "id": 154099552,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1546286535
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 154099564,
        "sender_full_name": "blitzerr",
        "timestamp": 1546286603
    },
    {
        "content": "<p><code>config.toml</code> has this:</p>\n<div class=\"codehilite\"><pre><span></span># =============================================================================\n# Options for compiling Rust code itself\n# =============================================================================\n[rust]\n\n# Indicates that the build should be optimized for debugging Rust. Note that\n# this is typically not what you want as it takes an incredibly large amount of\n# time to have a debug-mode rustc compile any code (notably libstd). If this\n# value is set to `true` it will affect a number of configuration options below\n# as well, if unconfigured.\ndebug = false\n\n# Whether or not to optimize the compiler and standard library\n# Note: the slowness of the non optimized compiler compiling itself usually\n#       outweighs the time gains in not doing optimizations, therefore a\n#       full bootstrap takes much more time with optimize set to false.\n#optimize = true\n\n# Number of codegen units to use for each compiler invocation. A value of 0\n# means &quot;the number of cores on this machine&quot;, and 1+ is passed through to the\n# compiler.\ncodegen-units = 0\n\n# Whether or not debug assertions are enabled for the compiler and standard\n# library. Also enables compilation of debug! and trace! logging macros.\ndebug-assertions = false\n\n# Whether or not debuginfo is emitted\n#debuginfo = true\n\n# Whether or not line number debug information is emitted\ndebuginfo-lines = true\n</pre></div>",
        "id": 154099565,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1546286604
    },
    {
        "content": "<p>Note last line</p>",
        "id": 154099566,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1546286608
    },
    {
        "content": "<p>that might be it</p>",
        "id": 154099567,
        "sender_full_name": "Esteban Küber",
        "timestamp": 1546286613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <br>\nI use the macOs Mojave as my Rustc development platform.</p>",
        "id": 154099607,
        "sender_full_name": "blitzerr",
        "timestamp": 1546286654
    },
    {
        "content": "<p>Let me double check my config.toml</p>",
        "id": 154099630,
        "sender_full_name": "blitzerr",
        "timestamp": 1546286743
    },
    {
        "content": "<p>Then there should be <em>some</em> backtrace output with that environment variable set, even it it does not contain filenames/etc</p>",
        "id": 154099992,
        "sender_full_name": "nagisa",
        "timestamp": 1546287311
    },
    {
        "content": "<p>As long as you’re on x86{,_64}.</p>",
        "id": 154099999,
        "sender_full_name": "nagisa",
        "timestamp": 1546287329
    },
    {
        "content": "<p>libbacktrace may not support other architectures well/at all.</p>",
        "id": 154100001,
        "sender_full_name": "nagisa",
        "timestamp": 1546287339
    },
    {
        "content": "<p>debuginfo-lines is set to true in my case <span class=\"emoji emoji-1f641\" title=\"frown\">:frown:</span></p>",
        "id": 154101992,
        "sender_full_name": "blitzerr",
        "timestamp": 1546290657
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span># Whether or not `panic!`s generate backtraces (RUST_BACKTRACE)\n #backtrace = true\n</pre></div>\n\n\n<p>How about that line ? Its commented out in my case</p>",
        "id": 154102055,
        "sender_full_name": "blitzerr",
        "timestamp": 1546290729
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <br>\nBefore <code>RUST_BACKTRACE=1</code>, it would give me nothing but after setting it, I got some info <br>\n<code>thread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 0', /Users/blitz/rustc-dev/rust/src/libcore/slice/mod.rs:2455</code></p>\n<p>Though not the entire call stack as <span class=\"user-mention\" data-user-id=\"119031\">@Esteban Küber</span>  gets.</p>",
        "id": 154102124,
        "sender_full_name": "blitzerr",
        "timestamp": 1546290877
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>diff config.toml config.toml.example\n22c22\n&lt; optimize = false\n---\n&gt; #optimize = true\n31c31\n&lt; release-debuginfo = true\n---\n&gt; #release-debuginfo = false\n34c34\n&lt; assertions = true\n---\n&gt; #assertions = false\n278c278\n&lt; codegen-units = 0\n---\n&gt; #codegen-units = 1\n286c286\n&lt; debug-assertions = true\n---\n&gt; #debug-assertions = false\n289c289\n&lt; debuginfo = true\n---\n&gt; #debuginfo = false\n292c292\n&lt; debuginfo-lines = true\n---\n&gt; #debuginfo-lines = false\n401c401,406\n&lt; jemalloc = false\n---\n&gt; #jemalloc = false\n&gt;\n&gt; # Run tests in various test suites with the &quot;nll compare mode&quot; in addition to\n&gt; # running the tests in normal mode. Largely only used on CI and during local\n&gt; # development of NLL\n&gt; #test-compare-mode = false\n</pre></div>",
        "id": 154102178,
        "sender_full_name": "blitzerr",
        "timestamp": 1546290963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nThis is the panic I was referring to</p>",
        "id": 154201408,
        "sender_full_name": "blitzerr",
        "timestamp": 1546463322
    },
    {
        "content": "<p>btw if you are having trouble with <code>RUST_BACKTRACE</code> for some reason, <span class=\"user-mention\" data-user-id=\"128294\">@blitzerr</span>, you might try using <code>lldb</code> to get a backtrace</p>",
        "id": 154202556,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546464499
    },
    {
        "content": "<p>Do you mean, building the compiler from inside lldb so it breaks into lldb when it hits the panic ?</p>",
        "id": 154205932,
        "sender_full_name": "blitzerr",
        "timestamp": 1546468235
    },
    {
        "content": "<p>yes but it's all much more painful when it dies during bootstrapping</p>",
        "id": 154206279,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546468678
    },
    {
        "content": "<p>we used to have a nice tool for that but it stopped working for me at least</p>",
        "id": 154206320,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1546468690
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <br>\nHow do you invoke x.py from within the lldb ?</p>",
        "id": 154220143,
        "sender_full_name": "blitzerr",
        "timestamp": 1546491342
    },
    {
        "content": "<p>I wouldn't invoke <code>x.py</code> from within <code>lldb</code>. I would use <code>x.py build</code> with ... I think <code>--verbose</code> ... to observe the actual command line invocation of <code>rustc</code>, and then use that command line with <code>lldb</code>. ... <strong>Except</strong> my memory is that this workflow is often foiled by <code>x.py</code> setting environment variables that you'll need to replicate yourself.</p>",
        "id": 157098834,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548762210
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 157275470,
        "sender_full_name": "blitzerr",
        "timestamp": 1548945224
    },
    {
        "content": "<p>There's a couple ways to work around the above problem</p>",
        "id": 157275540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548945272
    },
    {
        "content": "<p>one of the most direct hacks is to just find out what the environment settings are, by making the <code>rustc</code> invocation run <code>env</code> first to print that out</p>",
        "id": 157275567,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548945299
    },
    {
        "content": "<p>I can't remember if the best way to do this is to override the <code>RUSTC</code> environment variable before invoking <code>x.py</code>, or if there's a better approach.</p>",
        "id": 157275595,
        "sender_full_name": "pnkfelix",
        "timestamp": 1548945322
    }
]