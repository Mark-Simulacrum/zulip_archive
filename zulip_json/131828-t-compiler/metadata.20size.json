[
    {
        "content": "<p>I was bisecting recently and I noticed that the downloaded <code>std</code> was 20 MB, which is five times the size of the cargo binary, which is also downloaded. I'm curious if anyone knows what parts of metadata are taking up the most space?</p>",
        "id": 242523343,
        "sender_full_name": "Noah Lev",
        "timestamp": 1623607967
    },
    {
        "content": "<p>The metadata for libstd.rlib is 6.5MB out of 16MB for me. Note that when linking executables not just the crate metadata is discarded, but also all trivially unused functions and statics thanks to <code>--gc-sections</code>.</p>",
        "id": 242523487,
        "sender_full_name": "bjorn3",
        "timestamp": 1623608164
    },
    {
        "content": "<p>To get a breakdown of metadata usage you can use <code>-Zmeta-stats</code> while compiling the sysroot.</p>",
        "id": 242523512,
        "sender_full_name": "bjorn3",
        "timestamp": 1623608227
    },
    {
        "content": "<p>This is what I get:</p>\n<div class=\"codehilite\"><pre><span></span><code>metadata stats:\n             dep bytes: 725\n     lib feature bytes: 7172\n       lang item bytes: 30\n diagnostic item bytes: 152\n          native bytes: 0\n      source_map bytes: 93341\n            impl bytes: 11570\n    exp. symbols bytes: 5566\n  def-path table bytes: 365030\n proc-macro-data-bytes: 0\n             mir bytes: 2510317\n            item bytes: 2695978\n           table bytes: 1830444\n         hygiene bytes: 3675259\n            zero bytes: 4088925\n           total bytes: 11196286\n</code></pre></div>",
        "id": 242523653,
        "sender_full_name": "bjorn3",
        "timestamp": 1623608435
    },
    {
        "content": "<p>Wow, that is a <em>lot</em> of zero bytes</p>",
        "id": 242523673,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623608493
    },
    {
        "content": "<p>What are they for?</p>",
        "id": 242523676,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623608500
    },
    {
        "content": "<blockquote>\n<p>The metadata for libstd.rlib is 6.5MB out of 16MB for me.</p>\n</blockquote>\n<p>Ah, yeah, I forgot that object code is embedded as well.</p>",
        "id": 242523679,
        "sender_full_name": "Noah Lev",
        "timestamp": 1623608517
    },
    {
        "content": "<p>By the way, why is MIR embedded in addition to object code?</p>",
        "id": 242523718,
        "sender_full_name": "Noah Lev",
        "timestamp": 1623608533
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Noah Lev</span> for generic functions, they are monomorphized in downstream crates</p>",
        "id": 242523737,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1623608554
    },
    {
        "content": "<p>Are there docs somewhere on what each of these keys mean, or should I just grep through teh source?</p>",
        "id": 242523738,
        "sender_full_name": "Noah Lev",
        "timestamp": 1623608556
    },
    {
        "content": "<p>MIR is embeded for <code>#[inline]</code> and generic functions.</p>",
        "id": 242523740,
        "sender_full_name": "bjorn3",
        "timestamp": 1623608559
    },
    {
        "content": "<p>This is all printed in <code>compiler/rustc_metadata/src/rmeta/encoder.rs</code></p>",
        "id": 242523747,
        "sender_full_name": "bjorn3",
        "timestamp": 1623608585
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/metadata.20size/near/242523737\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> for generic functions, they are monomorphized in downstream crates</p>\n</blockquote>\n<p>Oh, of course! So do monomorphic functions just have object code and polymorphic functions just have MIR, or do monomorphic functions have MIR too?</p>",
        "id": 242523750,
        "sender_full_name": "Noah Lev",
        "timestamp": 1623608593
    },
    {
        "content": "<p>I don't think there are any docs for it.</p>",
        "id": 242523751,
        "sender_full_name": "bjorn3",
        "timestamp": 1623608594
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/metadata.20size/near/242523740\">said</a>:</p>\n<blockquote>\n<p>MIR is embeded for <code>#[inline]</code> and generic functions.</p>\n</blockquote>\n<p>I guess that answers my question :)</p>",
        "id": 242523754,
        "sender_full_name": "Noah Lev",
        "timestamp": 1623608612
    },
    {
        "content": "<p>Thanks for the useful information! I think I'm going to look into it and see if I can reduce the size a bit :)</p>",
        "id": 242523806,
        "sender_full_name": "Noah Lev",
        "timestamp": 1623608653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/metadata.20size/near/242523750\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/metadata.20size/near/242523737\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> for generic functions, they are monomorphized in downstream crates</p>\n</blockquote>\n<p>Oh, of course! So do monomorphic functions just have object code and polymorphic functions just have MIR, or do monomorphic functions have MIR too?</p>\n</blockquote>\n<p>All functions have MIR but unless <code>-Zalways-encode-mir</code> is used, it is omitted from the crate metadata when not necessary. <code>-Zalways-encode-mir</code> is for example used by miri as it needs MIR for all functions to interpret.</p>",
        "id": 242523811,
        "sender_full_name": "bjorn3",
        "timestamp": 1623608663
    },
    {
        "content": "<blockquote>\n<p>hygiene bytes: 3675259</p>\n</blockquote>\n<p>That is a lot of bytes. I think it mostly shouldn't be necessary except for decl macro definitions and maybe nicer diagnostics.</p>",
        "id": 242523905,
        "sender_full_name": "bjorn3",
        "timestamp": 1623608772
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"133247\">bjorn3</span> <a href=\"#narrow/stream/131828-t-compiler/topic/metadata.20size/near/242523811\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> <a href=\"#narrow/stream/131828-t-compiler/topic/metadata.20size/near/242523750\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/metadata.20size/near/242523737\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"307537\">Noah Lev</span> for generic functions, they are monomorphized in downstream crates</p>\n</blockquote>\n<p>Oh, of course! So do monomorphic functions just have object code and polymorphic functions just have MIR, or do monomorphic functions have MIR too?</p>\n</blockquote>\n<p>All functions have MIR but unless <code>-Zalways-encode-mir</code> is used, it is omitted from the crate metadata when not necessary. <code>-Zalways-encode-mir</code> is for example used by miri as it needs MIR for all functions to interpret.</p>\n</blockquote>\n<p>Thanks! Yeah, that's what I meant by \"have\"; I should have been clearer by saying \"have <em>in metadata</em>\" :)</p>",
        "id": 242523952,
        "sender_full_name": "Noah Lev",
        "timestamp": 1623608829
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/metadata.20size/near/242523676\">said</a>:</p>\n<blockquote>\n<p>What are they for?</p>\n</blockquote>\n<p>This is the code responsible for collecting the stats:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">zero_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">opaque</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">zero_bytes</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It seems like any byte in the metadata that is zero is counted? So it's not necessarily something like padding.</p>",
        "id": 242524384,
        "sender_full_name": "Noah Lev",
        "timestamp": 1623609380
    },
    {
        "content": "<p>I wonder why it's reported, though.</p>",
        "id": 242524387,
        "sender_full_name": "Noah Lev",
        "timestamp": 1623609392
    },
    {
        "content": "<p>that's still like 40% of libstd tho' lol.</p>",
        "id": 242525852,
        "sender_full_name": "Jubilee",
        "timestamp": 1623611403
    },
    {
        "content": "<p>Integers are already encoded as LEB128 to save space, so I am not sure what those zeros are used for.</p>",
        "id": 242526914,
        "sender_full_name": "bjorn3",
        "timestamp": 1623612963
    },
    {
        "content": "<p>Maybe it is like the <code>LOCAL_CRATE</code> <code>CrateNum</code> or <code>DUMMY_SPAN</code>?</p>",
        "id": 242526941,
        "sender_full_name": "bjorn3",
        "timestamp": 1623613005
    },
    {
        "content": "<p><code>Span</code> seems to use LEB128 for <code>lo</code> and <code>hi</code> FWIW.</p>",
        "id": 242539340,
        "sender_full_name": "Noah Lev",
        "timestamp": 1623630795
    },
    {
        "content": "<p>For <code>DUMMY_SP</code> both are zero and the <code>SyntaxContext</code> is also zero.</p>",
        "id": 242561401,
        "sender_full_name": "bjorn3",
        "timestamp": 1623655939
    },
    {
        "content": "<p>Reviving this old thread: I've been wondering about metadata, partly because there's an item mentioning it on the 2022 compiler performance <a href=\"https://hackmd.io/YJQSj_nLSZWl2sbI84R1qA\">roadmap</a>.</p>",
        "id": 278241182,
        "sender_full_name": "nnethercote",
        "timestamp": 1649375503
    },
    {
        "content": "<p>I have some questions...</p>",
        "id": 278241194,
        "sender_full_name": "nnethercote",
        "timestamp": 1649375521
    },
    {
        "content": "<ul>\n<li>Are we recording data that we don't need to?  It looks like <span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> has been looking into this a bit.</li>\n</ul>",
        "id": 278241271,
        "sender_full_name": "nnethercote",
        "timestamp": 1649375566
    },
    {
        "content": "<ul>\n<li>Are we compressing optimally? It uses LEB128 heavily, and our implementation of LEB128 has been heavily optimized. There's also this \"shorthand\" stuff that I don't understand but looks to be an ad hoc mechanism for avoiding repetition. Would we be better served by dropping all of that and just piping metadata through gzip or deflate?</li>\n</ul>",
        "id": 278241357,
        "sender_full_name": "nnethercote",
        "timestamp": 1649375642
    },
    {
        "content": "<ul>\n<li>Does anyone have a good high-level picture of metadata? (@bjorn3 might.) Or is it something that's evolved over time and nobody fully understands it? Would it benefit from somebody doing a deep dive and looking into it holistically?</li>\n</ul>",
        "id": 278241516,
        "sender_full_name": "nnethercote",
        "timestamp": 1649375720
    },
    {
        "content": "<p>I'd be curious to know if futzing with different compression algorithms give any wins</p>",
        "id": 278252237,
        "sender_full_name": "bstrie",
        "timestamp": 1649387157
    },
    {
        "content": "<p>Compressing the metadata prevents zero-copy deserialization.</p>",
        "id": 278260706,
        "sender_full_name": "bjorn3",
        "timestamp": 1649398174
    },
    {
        "content": "<p>I think at least me and probably <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> have a decent picture of the crate metadata.</p>",
        "id": 278260780,
        "sender_full_name": "bjorn3",
        "timestamp": 1649398245
    },
    {
        "content": "<p>I also know a decent amount about the low level encoding due to having written a partial decoder in a different language (gnu poke, a binary parsing and manipulation language) for fun.</p>",
        "id": 278260856,
        "sender_full_name": "bjorn3",
        "timestamp": 1649398325
    },
    {
        "content": "<p>There are some things I think could be bundles together like the various properties of an implementation, but I don't really think there is much that is unnecessarily encoded in the crate metadata.</p>",
        "id": 278260900,
        "sender_full_name": "bjorn3",
        "timestamp": 1649398413
    },
    {
        "content": "<p>The shorthand stuff is necessary to allow recursive structures to reference themselves without the need for explicit id tables</p>",
        "id": 278260964,
        "sender_full_name": "oli",
        "timestamp": 1649398457
    }
]