[
    {
        "content": "<p>compiler/rustc_middle/src/mir/mod.rs has this:</p>\n<div class=\"codehilite\"><pre><span></span><code>// At least on 64 bit systems, `PlaceElem` should not be larger than two pointers.\n#[cfg(all(target_arch = &quot;x86_64&quot;, target_pointer_width = &quot;64&quot;))]\nstatic_assert_size!(PlaceElem&lt;&#39;_&gt;, 24);\n</code></pre></div>\n<p>The comment and the code aren't in sync, there...</p>",
        "id": 261879694,
        "sender_full_name": "nnethercote",
        "timestamp": 1637203570
    },
    {
        "content": "<p>The responsible commit:</p>\n<div class=\"codehilite\"><pre><span></span><code>commit 4cc2cabee25a2ea74d13720c980bfd0379b9945a\nAuthor: DPC &lt;dylan.dpc@gmail.com&gt;\nDate:   Sun Aug 23 14:54:58 2020 +0200\n\n            change offset from u32 to u64\n</code></pre></div>",
        "id": 261879733,
        "sender_full_name": "nnethercote",
        "timestamp": 1637203659
    },
    {
        "content": "<p>Looking at the MIR for a small but non-trivial program, the very first basic block in the program is this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    bb0: {\n        _28 = const false;               // scope 0 at src/main.rs:89:11: 89:20\n        _28 = const true;                // scope 0 at src/main.rs:89:11: 89:20\n        _1 = do_main() -&gt; bb1;           // scope 0 at src/main.rs:89:11: 89:20\n                                         // mir::Constant\n                                         // + span: src/main.rs:89:11: 89:18\n                                         // + literal: Const { ty: fn() -&gt; std::result::Result&lt;(), std::io::Error&gt; {do_main}, val: Value(Scalar(&lt;ZST&gt;)) }\n    }\n</code></pre></div>",
        "id": 261882149,
        "sender_full_name": "nnethercote",
        "timestamp": 1637206310
    },
    {
        "content": "<p>Double-assigning to <code>_28</code> seems inauspicious</p>",
        "id": 261882198,
        "sender_full_name": "nnethercote",
        "timestamp": 1637206335
    },
    {
        "content": "<p>The next block is this:</p>\n<div class=\"codehilite\"><pre><span></span><code>    bb1: {\n        _2 = discriminant(_1);           // scope 0 at src/main.rs:89:11: 89:20\n        switchInt(move _2) -&gt; [0_isize: bb3, 1_isize: bb4, otherwise: bb2]; // scope 0 at src/main.rs:89:5: 89:20\n    }\n</code></pre></div>",
        "id": 261882220,
        "sender_full_name": "nnethercote",
        "timestamp": 1637206364
    },
    {
        "content": "<p>I don't see why <code>bb0</code> and <code>bb1</code> are separate, they seem like they could be combined into a single BB</p>",
        "id": 261882249,
        "sender_full_name": "nnethercote",
        "timestamp": 1637206401
    },
    {
        "content": "<p>function calls always go at the end of BB's</p>",
        "id": 261882390,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1637206589
    },
    {
        "content": "<p>Why is that?</p>",
        "id": 261882611,
        "sender_full_name": "nnethercote",
        "timestamp": 1637206855
    },
    {
        "content": "<p>ive no idea <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> would be interesting to hear why</p>",
        "id": 261882641,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1637206917
    },
    {
        "content": "<p>it looked like we just put everything that's control flow as a terminator</p>",
        "id": 261882681,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1637206937
    },
    {
        "content": "<p>(and given fn calls can unwind I assume its a similar thing)</p>",
        "id": 261882685,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1637206947
    },
    {
        "content": "<p>but Im not really sure</p>",
        "id": 261882686,
        "sender_full_name": "Boxy [she/her]",
        "timestamp": 1637206951
    },
    {
        "content": "<p>LLVM <code>invoke</code> has two successors, normal and exception (unwind)</p>",
        "id": 261883160,
        "sender_full_name": "cuviper",
        "timestamp": 1637207624
    },
    {
        "content": "<p>I guess MIR doesn't know yet whether it might need that exception landing pad?</p>",
        "id": 261883247,
        "sender_full_name": "cuviper",
        "timestamp": 1637207715
    },
    {
        "content": "<p>Is <code>_28</code> a drop flag? I've seen that pattern before in drop elaboration, although I would think we'd eliminate it with DSE somewhere. Assuming you're looking at optimized MIR.</p>",
        "id": 261884043,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637208418
    },
    {
        "content": "<p>I remember conversations about extended basic blocks when I first got involved with Rust, but that would be a pretty huge refactor.</p>",
        "id": 261884083,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637208478
    },
    {
        "content": "<p>I don't know if <code>_28</code> is a drop flag:</p>\n<div class=\"codehilite\"><pre><span></span><code>    let mut _28: bool;                   // in scope 0 at src/main.rs:97:1: 97:2\n</code></pre></div>",
        "id": 261884412,
        "sender_full_name": "nnethercote",
        "timestamp": 1637208911
    },
    {
        "content": "<p>That source location is the closing <code>}</code> of <code>main</code>, so maybe</p>",
        "id": 261884424,
        "sender_full_name": "nnethercote",
        "timestamp": 1637208939
    },
    {
        "content": "<p>I'm looking at the output of <code>--emit=mir</code>, which I assume is the final MIR?</p>",
        "id": 261884432,
        "sender_full_name": "nnethercote",
        "timestamp": 1637208956
    },
    {
        "content": "<p>The BB split does pass through to the LLVM IR:</p>\n<div class=\"codehilite\"><pre><span></span><code>start:\n  ...\n  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 16, i1 false), !dbg !14418\n  br label %bb1, !dbg !14418\n\nbb1:                                              ; preds = %start\n  %6 = bitcast %&quot;std::result::Result&lt;(), std::io::Error&gt;&quot;* %_1 to i8*, !dbg !14418\n  %7 = load i8, i8* %6, align 8, !dbg !14418, !range !3053\n  ...\n</code></pre></div>",
        "id": 261884555,
        "sender_full_name": "nnethercote",
        "timestamp": 1637209104
    },
    {
        "content": "<p>(I don't actually know. I only use -Zdump-mir)</p>",
        "id": 261884562,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637209123
    },
    {
        "content": "<p>As does the double assignment to <code>_28</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>  store i8 0, i8* %_28, align 1, !dbg !14418\n  store i8 1, i8* %_28, align 1, !dbg !14418\n</code></pre></div>",
        "id": 261884566,
        "sender_full_name": "nnethercote",
        "timestamp": 1637209132
    },
    {
        "content": "<p>I don't see a dead store elimination pass in the list of MIR transformations. It's one of the rare optimizations that's profitable pre-monomorphization too, so worth doing ourselves in the MIR.</p>",
        "id": 261884660,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637209219
    },
    {
        "content": "<p>I am open to the possibility of working on such a thing</p>",
        "id": 261885087,
        "sender_full_name": "nnethercote",
        "timestamp": 1637209730
    },
    {
        "content": "<p>The whole reason I'm looking at MIR and LLVM IR is to see how they can be shrunk, in order to reduce LLVM's execution time</p>",
        "id": 261885105,
        "sender_full_name": "nnethercote",
        "timestamp": 1637209765
    },
    {
        "content": "<p>/me reads <a href=\"https://rustc-dev-guide.rust-lang.org/mir/optimizations.html\">https://rustc-dev-guide.rust-lang.org/mir/optimizations.html</a></p>",
        "id": 261885298,
        "sender_full_name": "nnethercote",
        "timestamp": 1637209971
    },
    {
        "content": "<p>I can review PRs and give advice. Unfortunately wg-mir-opt has sort of ground to a halt, but this one seems pretty simple (famous last words).</p>",
        "id": 261885392,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637210048
    },
    {
        "content": "<p>Any high-level suggestions to start with? E.g. existing optimization passes it might be similar to?</p>",
        "id": 261885536,
        "sender_full_name": "nnethercote",
        "timestamp": 1637210271
    },
    {
        "content": "<p>Feels like a simple backwards pass within BBs might suffice</p>",
        "id": 261885585,
        "sender_full_name": "nnethercote",
        "timestamp": 1637210309
    },
    {
        "content": "<p>Track defs, invalidate them on uses, etc.</p>",
        "id": 261885597,
        "sender_full_name": "nnethercote",
        "timestamp": 1637210333
    },
    {
        "content": "<p>Yeah, you could make it intrablock to start.</p>",
        "id": 261885601,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637210339
    },
    {
        "content": "<p>I saw this in another example, note the repeated <code>_219</code> assignment</p>\n<div class=\"codehilite\"><pre><span></span><code>        _218 = const false;              // scope 0 at src/main.rs:20:9: 20:21\n        _221 = const false;              // scope 0 at src/main.rs:20:9: 20:21\n        _219 = const false;              // scope 0 at src/main.rs:20:9: 20:21\n        _217 = const false;              // scope 0 at src/main.rs:20:9: 20:21\n        _222 = const false;              // scope 0 at src/main.rs:20:9: 20:21\n        _224 = const false;              // scope 0 at src/main.rs:20:9: 20:21\n        _220 = const false;              // scope 0 at src/main.rs:20:9: 20:21\n        _1 = const false;                // scope 0 at src/main.rs:20:24: 20:29\n        _219 = const true;               // scope 1 at /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/alloc/src/macros.rs:43:36: 43:59\n</code></pre></div>",
        "id": 261885686,
        "sender_full_name": "nnethercote",
        "timestamp": 1637210435
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler/rustc_mir_transform/src/nrvo.rs\">Dumb NRVO</a> is the simplest MIR opt I know. <a href=\"https://github.com/rust-lang/rust/blob/55111d656f7ecd511ebfad09d3b4b41e44cbcc23/compiler/rustc_mir_transform/src/dest_prop.rs\">Dest prop</a> has some nice module documentation about the dangers of aliasing/indirection.</p>",
        "id": 261885812,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637210612
    },
    {
        "content": "<p>I feel like there might even be an outstanding PR for this. Lemme check.</p>",
        "id": 261885819,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637210635
    },
    {
        "content": "<p>I did a quick google search for \"rust dead code elimination\" before, didn't find anything of note</p>",
        "id": 261885986,
        "sender_full_name": "nnethercote",
        "timestamp": 1637210818
    },
    {
        "content": "<p>Ah, that's right. Someone tried but you can't use the <a href=\"#narrow/stream/189540-t-compiler.2Fwg-mir-opt/topic/MaybeLiveLocals.20and.20Discriminants\">existing live variables dataflow analysis</a> for this.</p>",
        "id": 261886065,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637210896
    },
    {
        "content": "<p>You won't run into this if you just do an intrablock one, obviously.</p>",
        "id": 261886113,
        "sender_full_name": "Dylan MacKenzie (ecstatic-morse)",
        "timestamp": 1637210983
    },
    {
        "content": "<p>Making it possible for calls to be a statement instead of a terminator sometimes was a change we considered in the past. I don't remember exactly all of the arguments from that discussion, but the fact that a <code>call</code> can typically be unwound from even without any landing pads present I think was one of the motivating examples for keeping it a pure terminator. Also I think because it is plain easier to not have multiple ways to say the same thing.</p>",
        "id": 261905968,
        "sender_full_name": "nagisa",
        "timestamp": 1637229206
    },
    {
        "content": "<p>Double assignments: various propagation passes have been attempted a many times ever since MIR became a thing, latest movement there being <a href=\"https://github.com/rust-lang/rust/pull/82684\">https://github.com/rust-lang/rust/pull/82684</a></p>",
        "id": 261906143,
        "sender_full_name": "nagisa",
        "timestamp": 1637229312
    },
    {
        "content": "<p>Hmm, <code>RUSTC=$RUSTC0 cargo rustc -- -Zdump-mir=all</code> works for me, creating a <code>mir_dump/</code> dir with lots of files.<br>\nBut <code>RUSTC=$RUSTC0 cargo rustc -- -Zdump-mir=main</code> doesn't create a <code>mir_dump</code> dir.</p>",
        "id": 261993888,
        "sender_full_name": "nnethercote",
        "timestamp": 1637271105
    },
    {
        "content": "<p>Wait, the <code>-Zdump-mir=all</code> output doesn't include anything for <code>main</code></p>",
        "id": 261994126,
        "sender_full_name": "nnethercote",
        "timestamp": 1637271229
    },
    {
        "content": "<p>But <code>RUSTC=$RUSTC0 cargo rustc -- --emit=mir</code> does have stuff for <code>main</code></p>",
        "id": 261994261,
        "sender_full_name": "nnethercote",
        "timestamp": 1637271289
    },
    {
        "content": "<p>No, I'm totally confused; the <code>-Zdump=mir</code> does have stuff for <code>main</code>, sorry for the noise</p>",
        "id": 261994500,
        "sender_full_name": "nnethercote",
        "timestamp": 1637271399
    },
    {
        "content": "<p>I guess my real question is: when is <code>--emit=mir</code> produced?</p>",
        "id": 261994680,
        "sender_full_name": "nnethercote",
        "timestamp": 1637271495
    },
    {
        "content": "<p>OK, looks like <code>--emit=mir</code> is the same as <code>PreCodegen.after.mir</code>, which is the last thing producedc by <code>-Zdump=mir</code></p>",
        "id": 261996179,
        "sender_full_name": "nnethercote",
        "timestamp": 1637272279
    }
]