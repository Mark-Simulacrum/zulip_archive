[
    {
        "content": "<p>This topic is discussion regarding \"april 2018 trait resolution regression <a href=\"https://github.com/rust-lang/rust/issues/60010\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60010\">#60010</a>\"</p>",
        "id": 164539556,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556631688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> the detail I was trying to outline, about composing constraints, is in this comment here: <a href=\"https://github.com/rust-lang/rust/issues/60010#issuecomment-484028251\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60010#issuecomment-484028251\">https://github.com/rust-lang/rust/issues/60010#issuecomment-484028251</a></p>",
        "id": 164539583,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556631713
    },
    {
        "content": "<p>where I found it odd that the code would compile if you have either <code>T: RefUnwindSafe</code> or <code>T: HasQueryGroup</code> on their own.</p>",
        "id": 164539655,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556631742
    },
    {
        "content": "<p>but putting them both on as a constraint would not allow the code to compile</p>",
        "id": 164539661,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556631755
    },
    {
        "content": "<p>I think my basic reading of <a href=\"https://github.com/rust-lang/rust/issues/60010#issuecomment-484254588\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60010#issuecomment-484254588\">your response</a>, is that I should <em>not</em> generally expect these things to compose in every case</p>",
        "id": 164539697,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556631797
    },
    {
        "content": "<p>i.e. in some situations, even if the code compiles with <code>where T: A</code>, and separately with <code>where T: B</code>, that does not mean it will compile with the composition <code>where T: A, T: B</code></p>",
        "id": 164539782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556631845
    },
    {
        "content": "<p>but I just wanted to double-check that this is indeed the correct general conclusion (i.e. that one should not expect that particular compositional property to hold when one is dealing with the mix of inductive and co-inductive reasoning that rustc uses)</p>",
        "id": 164539828,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556631899
    },
    {
        "content": "<p>I certainly did expect this property to hold; TIL! (but I also didn't take coinductive stuff into account)</p>",
        "id": 164540214,
        "sender_full_name": "centril",
        "timestamp": 1556632238
    },
    {
        "content": "<p>is there a minimal example?</p>",
        "id": 164543653,
        "sender_full_name": "varkor",
        "timestamp": 1556634683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> the best I was able to do is written in the issue</p>",
        "id": 164545974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556636282
    },
    {
        "content": "<p>(in the second comment)</p>",
        "id": 164546034,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556636305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> Hmm, well, I'm not sure if that is a valid takeaway from my comment.</p>",
        "id": 164555723,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556643841
    },
    {
        "content": "<p>I'll have to dig into this particular example more deeply</p>",
        "id": 164555770,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556643847
    },
    {
        "content": "<p>It is true that having a setup where:</p>\n<ul>\n<li>coinductive predicate C1 requires</li>\n<li>inductive predicate I1 requires </li>\n<li>coinductive predicate C1 </li>\n</ul>\n<p>is not provable, at least in the present setup. All participants in the cycle must be coinductive. But it's not clear to me how this leads to <code>where T: A, t: B</code> behaving differently from <code>T:A</code> and <code>T:B</code> (i.e., I'd expect the cycle to go through one of those two clauses, and for the cycle to be present regardless).</p>",
        "id": 164555857,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556643953
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> -- what is the issue that was plaguing you re: incremental results messing up trait resolution or method dispatch?</p>",
        "id": 164630607,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556723576
    },
    {
        "content": "<p>I feel like it may be connected to this problem i'm investigating</p>",
        "id": 164630610,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556723582
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/58291\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/58291\">https://github.com/rust-lang/rust/issues/58291</a></p>",
        "id": 164630713,
        "sender_full_name": "matklad",
        "timestamp": 1556723661
    },
    {
        "content": "<p>well, if you read the first line of issue description....</p>",
        "id": 164630724,
        "sender_full_name": "matklad",
        "timestamp": 1556723672
    },
    {
        "content": "<p>you'll see that it was spawned from that problem :D</p>",
        "id": 164630750,
        "sender_full_name": "matklad",
        "timestamp": 1556723683
    },
    {
        "content": "<p>Heh, oh, well, that makes sense, doesn't it</p>",
        "id": 164630775,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556723694
    },
    {
        "content": "<p>it seems like there is a problem with the caching in the case of cycles</p>",
        "id": 164630785,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556723704
    },
    {
        "content": "<p>among other things, I think it could lead to incorrect dep-node information</p>",
        "id": 164630796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556723714
    },
    {
        "content": "<p>ok, taking some notes here</p>",
        "id": 164633400,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556725760
    },
    {
        "content": "<p>I think I see the problem</p>",
        "id": 164633401,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556725762
    },
    {
        "content": "<p>the evaluation cache is caching \"over-eagerly\"</p>",
        "id": 164633427,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556725801
    },
    {
        "content": "<p>this is causing other sorts of problems</p>",
        "id": 164633512,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556725835
    },
    {
        "content": "<p>I think <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> that the error we see invoking <code>foo.probe()</code> is actually the <strong>correct</strong> result</p>",
        "id": 164633527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556725847
    },
    {
        "content": "<p>roughly for the reasons you already diagnosed</p>",
        "id": 164633535,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556725856
    },
    {
        "content": "<p>what we do now is this:</p>\n<ul>\n<li>evaluate <code>A: AutoTrait</code>, which requires <code>B: AutoTrait</code></li>\n<li>evaluate <code>B: AutoTrait</code>, which requires <code>C: AutoTrait</code> and <code>D: NormalTrait</code></li>\n<li>evaluate <code>C: AutoTrait</code>, which requires <code>A: AutoTrait</code> --<ul>\n<li>this is a \"co-inductive cycle\" <code>(A, B, C, A): AutoTrait</code></li>\n<li>thus we yield the result to be \"ok\" <strong>and we cache this</strong> (<code>C: AutoTrait =&gt; OK</code>)</li>\n</ul>\n</li>\n<li>evaluate <code>D: NormalTrait</code>, which requires <code>A: AutoTrait</code> --<ul>\n<li>this is a \"non-co-inductive cycle\", because of <code>D: NormalTrait</code></li>\n<li>thus we yield the result to be \"error\"</li>\n</ul>\n</li>\n<li>thus, <code>B: AutoTrait</code> is an error</li>\n<li>and <code>A: AutoTrait</code> is an error</li>\n</ul>\n<p>but now we're in a weird state. We cached that <code>C: AutoTrait</code> holds, but that wouldn't be true if we had <em>started</em> from <code>C: AutoTrait</code>. </p>\n<p>Seems obvious that this is wrong. It's the same problem of cyclic caching we encounter in lots of places. (Actually, it makes me want to review how I integrated coinduction into Chalk's SLG solver... man, I'd like to remove co-induction from auto traits, but let's leave that for another day.)</p>",
        "id": 164634040,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556726300
    },
    {
        "content": "<p>I'm going to move this over into <a class=\"stream\" data-stream-id=\"144729\" href=\"/#narrow/stream/144729-wg-traits\">#wg-traits</a> =)</p>",
        "id": 164634049,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556726311
    },
    {
        "content": "<p>Iâ€™m going to have to go look up literature on mixing inductive and co-inductive reasoning</p>",
        "id": 164634215,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556726458
    },
    {
        "content": "<p>this outcome remains non-obvious to me</p>",
        "id": 164634244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556726477
    },
    {
        "content": "<p>Well, that, or learn about how we would do auto traits without co-inductive reasoning</p>",
        "id": 164634284,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556726520
    },
    {
        "content": "<blockquote>\n<p>Well, that, or learn about how we would do auto traits without co-inductive reasoning</p>\n</blockquote>\n<p>that is tricky; I had some ideas that I wanted to explore, but it's a complex topic</p>",
        "id": 164637448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556729288
    },
    {
        "content": "<p>for now i'm aiming at a targeted fix for this caching problem</p>",
        "id": 164637458,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556729295
    },
    {
        "content": "<p>I think the proper fix is to either move to chalk or rewrite the solver in a more global way</p>",
        "id": 164637468,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556729308
    },
    {
        "content": "<blockquote>\n<p>Iâ€™m going to have to go look up literature on mixing inductive and co-inductive reasoning</p>\n</blockquote>\n<p>there's not a lot on it, there's a paper or two</p>",
        "id": 164637671,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556729507
    },
    {
        "content": "<p>so I have a simple fix; the bad news is that this may mess up salsa :) but I guess we can fix it</p>",
        "id": 164639493,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556731169
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span>)</p>",
        "id": 164639496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556731173
    },
    {
        "content": "<p>someone had a trick for some form of \"negative reasoning\" with non-auto-traits (by relying on an auto trait), I  wonder if it would be broken by this (sadly, I don't remember where it was)</p>",
        "id": 164662662,
        "sender_full_name": "eddyb",
        "timestamp": 1556748915
    },
    {
        "content": "<blockquote>\n<p>But it's not clear to me how this leads to where T: A, t: B behaving differently from T:A and T:B (i.e., I'd expect the cycle to go through one of those two clauses, and for the cycle to be present regardless)</p>\n</blockquote>\n<p>Hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , how does your PR <a href=\"https://github.com/rust-lang/rust/issues/60444\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60444\">#60444</a> affect the question above? In particular, I <em>think</em> what it does is it changes the behavior for one of <code>T: A</code> or <code>T: B</code> when they are given on their own, but the test code you added did not exercise either of those cases, so I'm not certain.</p>",
        "id": 164693316,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556789513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> indeed, my PR restores the property that you expected: that <code>T: A, T: B =&gt; T: A + B</code></p>",
        "id": 164705055,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556801723
    },
    {
        "content": "<p>the problem was that executing <code>T: A</code> was polluting the cache, such that <code>T: B</code> incorrectly succeeded (or something like that)</p>",
        "id": 164705074,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556801745
    },
    {
        "content": "<p><strong>that</strong> makes sense</p>",
        "id": 164705539,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556802022
    },
    {
        "content": "<p>though</p>",
        "id": 164705549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556802036
    },
    {
        "content": "<p>I could have sworn I tried reordering the constraints in the source</p>",
        "id": 164705559,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556802049
    },
    {
        "content": "<p>does such reordering not affect the order in which the clauses are traversed? I guess it would be silly for me to assume that would generally hold</p>",
        "id": 164705602,
        "sender_full_name": "pnkfelix",
        "timestamp": 1556802078
    },
    {
        "content": "<p>we may do some reordering</p>",
        "id": 164709324,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556804982
    },
    {
        "content": "<p>and it may be that whichever one you did first</p>",
        "id": 164709334,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556804995
    },
    {
        "content": "<p>the pollution would affect the other</p>",
        "id": 164709341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556804999
    },
    {
        "content": "<p>I was thinking aobut it this morning, I think i can make some simpler test cases</p>",
        "id": 164709391,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556805009
    },
    {
        "content": "<p>that also show the problem</p>",
        "id": 164709397,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556805013
    },
    {
        "content": "<p>which I might try to do, just to have more coverage of the subtle cases</p>",
        "id": 164709402,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1556805020
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> , do you think 6 regressions according to crater is low-risk enough to land PR <a href=\"https://github.com/rust-lang/rust/issues/60444\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60444\">#60444</a> ?</p>",
        "id": 165519287,
        "sender_full_name": "pnkfelix",
        "timestamp": 1557747102
    },
    {
        "content": "<p>I think it falls into \"acceptable fallout\", especially given how bad the kinds of bugs are that happen without this fix.</p>",
        "id": 165519379,
        "sender_full_name": "pnkfelix",
        "timestamp": 1557747186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> also they seemed to be mostly fixable (I assume) by increasing the recursion limit ?</p>",
        "id": 165522797,
        "sender_full_name": "lqd",
        "timestamp": 1557750290
    },
    {
        "content": "<p>(or maybe should we make sure those 6 are not uncovering an issue with the fix itself ?)</p>",
        "id": 165523770,
        "sender_full_name": "lqd",
        "timestamp": 1557750973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> yes I have been assuming (but have not verified) that the regressions would be addressed by increasing the recursion limit</p>",
        "id": 165524695,
        "sender_full_name": "pnkfelix",
        "timestamp": 1557751687
    },
    {
        "content": "<p>which makes me wonder whether we could/should make crater smart enough to attempt such responses</p>",
        "id": 165524701,
        "sender_full_name": "pnkfelix",
        "timestamp": 1557751702
    },
    {
        "content": "<p>interesting thought, trying to rustfix the errors :)</p>",
        "id": 165524772,
        "sender_full_name": "lqd",
        "timestamp": 1557751784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> is it possible to change the recursion limit through a rustc compiler flag?</p>",
        "id": 165524780,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1557751795
    },
    {
        "content": "<p>(also when I looked at them I thought one of these 6 was a dupe of one of the other 5)</p>",
        "id": 165524782,
        "sender_full_name": "lqd",
        "timestamp": 1557751795
    },
    {
        "content": "<p>if that's the case you could start another crater run with the compiler flag to increase the limit and see if it's fixed</p>",
        "id": 165524907,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1557751879
    },
    {
        "content": "<p>(btw, crater is broken for all the new try builds until we figure out how to deal with a cargo regression)</p>",
        "id": 165524928,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1557751905
    },
    {
        "content": "<p>(i don't know whether the recursion-limit is accessible via a command line flag. It don't know of a reason why it shouldn't be, but that doesn't mean it is...)</p>",
        "id": 165525021,
        "sender_full_name": "pnkfelix",
        "timestamp": 1557751950
    },
    {
        "content": "<p>it's possible that recursion limit would help, not necessarily true</p>",
        "id": 165550425,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557769085
    },
    {
        "content": "<p>in particular, if there is a legit cycle</p>",
        "id": 165550437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557769093
    },
    {
        "content": "<p>I think we may still report it that way</p>",
        "id": 165550442,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1557769097
    },
    {
        "content": "<p>Compiling rust-analyzer with the latest nightly takes a looong time, and fails with \"overflowing evaluating requirenment\".  Could this be a side-effect of <a href=\"https://github.com/rust-lang/rust/pull/60444\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pull/60444\">https://github.com/rust-lang/rust/pull/60444</a>?</p>",
        "id": 165967331,
        "sender_full_name": "matklad",
        "timestamp": 1558172116
    },
    {
        "content": "<p>ra issue: <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1283\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1283\">https://github.com/rust-analyzer/rust-analyzer/issues/1283</a></p>",
        "id": 165967620,
        "sender_full_name": "matklad",
        "timestamp": 1558172664
    },
    {
        "content": "<p>I am sending <a href=\"https://github.com/rust-analyzer/rust-analyzer/pull/1284\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/pull/1284\">https://github.com/rust-analyzer/rust-analyzer/pull/1284</a> to work around the issue, but I am curios to hear what is the proper fix?</p>",
        "id": 165968332,
        "sender_full_name": "matklad",
        "timestamp": 1558174011
    },
    {
        "content": "<p>its certainly possible that the performance regression is due to PR <a href=\"https://github.com/rust-lang/rust/issues/60444\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60444\">#60444</a>; see in particular issue <a href=\"https://github.com/rust-lang/rust/issues/60846\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60846\">#60846</a></p>",
        "id": 166064153,
        "sender_full_name": "pnkfelix",
        "timestamp": 1558338462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> we should take a look -- the cycle caching fix is basically closing off a soundness hole, so error described in <a href=\"https://github.com/rust-analyzer/rust-analyzer/issues/1283\" target=\"_blank\" title=\"https://github.com/rust-analyzer/rust-analyzer/issues/1283\">rust-analyzer#1283</a> is probably <em>correct</em>, but we may be able to side-step it by adjusting other things</p>",
        "id": 166912267,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559226468
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/1283\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/1283\">#1283</a> does not look like a proper error though: it just aborts a very long computation. </p>\n<p>I was secretly hoping that fixing <a href=\"https://github.com/rust-lang/rust/issues/60846\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/60846\">#60846</a> will give us a real error message here, which should help to fix the issue :-)</p>",
        "id": 166913129,
        "sender_full_name": "matklad",
        "timestamp": 1559227055
    },
    {
        "content": "<p>well, getting a better error may be something we could do more narrowly</p>",
        "id": 166913646,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559227399
    },
    {
        "content": "<p>I wonder if with move to panic-based cancellation we should just require that keys &amp; values are unwind safe?</p>",
        "id": 166914009,
        "sender_full_name": "matklad",
        "timestamp": 1559227670
    },
    {
        "content": "<p>Do we have any kind of \"minimized\" example of the perf problem here? Seems like <span class=\"user-mention\" data-user-id=\"116466\">@Zoxc</span> ran into something similar and a few others. I'm contemplating what I can do about it.</p>",
        "id": 167307707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559663448
    },
    {
        "content": "<p>I think I know the fix I want to do but it will take too long :)</p>",
        "id": 167307736,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1559663460
    }
]