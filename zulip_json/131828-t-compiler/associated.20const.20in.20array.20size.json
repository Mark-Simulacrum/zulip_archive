[
    {
        "content": "<p>Associated consts cannot be used in array sizes today: <a href=\"https://github.com/rust-lang/rust/issues/61730\" title=\"https://github.com/rust-lang/rust/issues/61730\">https://github.com/rust-lang/rust/issues/61730</a><br>\nI have some recollection that fixing this is almost as complex as implementing const generics. Is that the case?</p>",
        "id": 193197154,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1586270309
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> completely orthogonal</p>",
        "id": 193197184,
        "sender_full_name": "eddyb",
        "timestamp": 1586270324
    },
    {
        "content": "<p>also why does that issue exist?</p>",
        "id": 193197206,
        "sender_full_name": "eddyb",
        "timestamp": 1586270332
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> the only place where they really intersect is <code>#[feature(const_generics)]</code> turns on the fix for <a href=\"https://github.com/rust-lang/rust/issues/43408\" title=\"https://github.com/rust-lang/rust/issues/43408\">#43408</a> (which is like a one-line thing in one place in the compiler) which can break code</p>",
        "id": 193197357,
        "sender_full_name": "eddyb",
        "timestamp": 1586270397
    },
    {
        "content": "<p>the trick is letting people use parameters in array lengths <em>without</em> breaking stable code and we've been paranoid (or at least I have been) about this aspect</p>",
        "id": 193197453,
        "sender_full_name": "eddyb",
        "timestamp": 1586270429
    },
    {
        "content": "<p>\"lazy normalization\" is the feature that solves this uniformly without breaking stable code, and there are PRs open related to it (finally), but it seems to be moving slow</p>",
        "id": 193197563,
        "sender_full_name": "eddyb",
        "timestamp": 1586270480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> What kind of breakage does this cause?</p>",
        "id": 193197690,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1586270530
    },
    {
        "content": "<p>query cycle errors</p>",
        "id": 193197702,
        "sender_full_name": "eddyb",
        "timestamp": 1586270536
    },
    {
        "content": "<p>due to circular dependencies between something using a constant expression and the constant expression itself</p>",
        "id": 193197729,
        "sender_full_name": "eddyb",
        "timestamp": 1586270555
    },
    {
        "content": "<p>most notably visible when arrays are used in <code>impl</code> headers and anything's <code>where</code> clauses</p>",
        "id": 193197785,
        "sender_full_name": "eddyb",
        "timestamp": 1586270579
    },
    {
        "content": "<p>but it might be more than that, we're not sure of the extent to which things break</p>",
        "id": 193197874,
        "sender_full_name": "eddyb",
        "timestamp": 1586270617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> in the meanwhile, I've opened <a href=\"https://github.com/rust-lang/rust/issues/70452\" title=\"https://github.com/rust-lang/rust/issues/70452\">#70452</a> to try and carve out subsets, because <span class=\"user-mention\" data-user-id=\"119031\">@Esteban KÃ¼ber</span> was getting impatient and wanted to add diagnostics to deal with the confusion caused by <a href=\"https://github.com/rust-lang/rust/issues/43408\" title=\"https://github.com/rust-lang/rust/issues/43408\">#43408</a></p>",
        "id": 193197980,
        "sender_full_name": "eddyb",
        "timestamp": 1586270645
    },
    {
        "content": "<p>it's in crater now and if this is a success we can move to array types</p>",
        "id": 193198018,
        "sender_full_name": "eddyb",
        "timestamp": 1586270659
    },
    {
        "content": "<p>I'm sorry I didn't do this years ago, this was the correct thing to do</p>",
        "id": 193198045,
        "sender_full_name": "eddyb",
        "timestamp": 1586270670
    },
    {
        "content": "<p>I just didn't think of blacklist vs whitelist</p>",
        "id": 193198087,
        "sender_full_name": "eddyb",
        "timestamp": 1586270687
    },
    {
        "content": "<p>Yeah the \"add a bound\" (which is already there) diagnostic is confusing</p>",
        "id": 193198137,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1586270708
    },
    {
        "content": "<p>No worries, thanks for taking care of it</p>",
        "id": 193198188,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1586270724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"219747\">@Simon Sapin</span> bonus: you can figure out if a crate would break w/o lazy normalization by adding <code>#![feature(const_generics)]</code> to it :P</p>",
        "id": 193198324,
        "sender_full_name": "eddyb",
        "timestamp": 1586270769
    },
    {
        "content": "<p>it's what I've been doing to test things out before I make the actual change</p>",
        "id": 193198351,
        "sender_full_name": "eddyb",
        "timestamp": 1586270780
    },
    {
        "content": "<p>we wanted to let people write <code>[T; N+1]</code> even though WF restrictions means it's kind of useless :P</p>",
        "id": 193198524,
        "sender_full_name": "eddyb",
        "timestamp": 1586270844
    },
    {
        "content": "<p>(until <a href=\"https://github.com/rust-lang/rust/issues/68436\" title=\"https://github.com/rust-lang/rust/issues/68436\">#68436</a> is solved)</p>",
        "id": 193198586,
        "sender_full_name": "eddyb",
        "timestamp": 1586270869
    },
    {
        "content": "<p>maybe I should've made it another opt-in but eh</p>",
        "id": 193198680,
        "sender_full_name": "eddyb",
        "timestamp": 1586270890
    },
    {
        "content": "<p>I think people's const-generics-using crates did break (with query cycle errors) when we made it opt into fixing <a href=\"https://github.com/rust-lang/rust/issues/43408\" title=\"https://github.com/rust-lang/rust/issues/43408\">#43408</a>, so it's not a theoretical problem</p>",
        "id": 193198766,
        "sender_full_name": "eddyb",
        "timestamp": 1586270938
    }
]