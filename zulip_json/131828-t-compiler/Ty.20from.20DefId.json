[
    {
        "content": "<p>Hi. If in compiler code I have a <code>DefId</code> for a lang item that I’m adding for a struct, can get a <code>Ty</code> for that struct?</p>",
        "id": 213761196,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1603099916
    },
    {
        "content": "<p>For context: I’m having a go at implementing by pointer metadata RFC which adds a <code>Pointee</code> trait that is automatically implemented for all type and has an associated type, much like <code>DiscriminantKind</code>. It looks like a <code>Ty</code> is needed when projecting that associated type: <a href=\"https://github.com/rust-lang/rust/blob/cb2462c53f2cc3f140c0f1ea0976261cab968a34/compiler/rustc_trait_selection/src/traits/project.rs#L1248\">https://github.com/rust-lang/rust/blob/cb2462c53f2cc3f140c0f1ea0976261cab968a34/compiler/rustc_trait_selection/src/traits/project.rs#L1248</a></p>",
        "id": 213761518,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1603100095
    },
    {
        "content": "<p>(And <code>&lt;dyn SomeTrait as Pointee&gt;::Metadata</code> is a new <code>DynMetadata</code> struct that I’m also adding, that makes the vtable pointer opaque)</p>",
        "id": 213761572,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1603100139
    },
    {
        "content": "<p>what's the result of <code>tcx.type_of(def_id)</code>?</p>",
        "id": 213762581,
        "sender_full_name": "lcnr",
        "timestamp": 1603100817
    },
    {
        "content": "<p>Looks like this is it! The actual signature is much more generic so it wasn’t obvious that this returns a <code>Ty</code>…<br>\n<a href=\"https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.type_of\">https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyCtxt.html#method.type_of</a></p>",
        "id": 213763000,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1603101032
    },
    {
        "content": "<p>thanks</p>",
        "id": 213763009,
        "sender_full_name": "Simon Sapin",
        "timestamp": 1603101035
    },
    {
        "content": "<p>yeah, the query output types are currently a bit of a mess sadly</p>",
        "id": 213763296,
        "sender_full_name": "lcnr",
        "timestamp": 1603101192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232545\">@Joshua Nelson</span> is looking into normalizing projections in rustdoc but that's quite hard</p>",
        "id": 213763419,
        "sender_full_name": "lcnr",
        "timestamp": 1603101251
    },
    {
        "content": "<p>Yeah the current issue is I need to know the generic context to get a <code>ParamEnv</code>, and rustdoc does things in (<em>literally</em>) 20 different places so I'd rather not update all of them with the new behavior, since it will be silently ignored if missing</p>",
        "id": 213775453,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603109386
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/78082\">https://github.com/rust-lang/rust/pull/78082</a>, <a href=\"https://github.com/rust-lang/rust/pull/77467\">https://github.com/rust-lang/rust/pull/77467</a></p>",
        "id": 213775549,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603109425
    },
    {
        "content": "<p>personally I think 77467 could be landed as-is since it just doesn't handle all cases, but <span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> is worried about ICEs</p>",
        "id": 213779076,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603111488
    }
]