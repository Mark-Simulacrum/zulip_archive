[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>: how reasonable is it going to be to add value mangling for <code>i8</code>through to <code>i128</code>, <code>char</code>, <code>bool</code>, <code>isize</code> (cc <a href=\"https://github.com/rust-lang/rust/issues/61486\">#61486</a>), which are the types we're supporting for <code>min_const_generics</code> that I believe aren't currently supported manglable types? I'm hoping that, because there's still no need to represent arbitrary trees, this should be straightforward?</p>",
        "id": 211996005,
        "sender_full_name": "varkor",
        "timestamp": 1601602744
    },
    {
        "content": "<p>I haven't looked too much into <a href=\"https://github.com/rust-lang/rust/issues/61486\">#61486</a>, but can't we just use <code>usize</code> mangling for all of the <code>min_const_generics</code> types</p>",
        "id": 212044581,
        "sender_full_name": "lcnr",
        "timestamp": 1601626244
    },
    {
        "content": "<p>so for <code>fn test&lt;const N: i8&gt;()</code> we encode <code>test::&lt;{ - 1 }&gt;()</code> as <code>test&lt;255&gt;</code> instead</p>",
        "id": 212044634,
        "sender_full_name": "lcnr",
        "timestamp": 1601626293
    },
    {
        "content": "<p>I should think that would work, but I imagine <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> has thoughts on whether or not that's the preferred approach.</p>",
        "id": 212074897,
        "sender_full_name": "varkor",
        "timestamp": 1601645769
    },
    {
        "content": "<p>I suppose my real question is about the design aspect.</p>",
        "id": 212075915,
        "sender_full_name": "varkor",
        "timestamp": 1601646249
    },
    {
        "content": "<p>fwiw I just posted <a href=\"https://github.com/rust-lang/rust/pull/77452\">https://github.com/rust-lang/rust/pull/77452</a> which adds bool to v0 mangling</p>",
        "id": 212076512,
        "sender_full_name": "simulacrum",
        "timestamp": 1601646489
    },
    {
        "content": "<p>you could use something like <code>test&lt;n1&gt;</code></p>",
        "id": 212093766,
        "sender_full_name": "cuviper",
        "timestamp": 1601654215
    },
    {
        "content": "<p>oof</p>",
        "id": 212129378,
        "sender_full_name": "eddyb",
        "timestamp": 1601672986
    },
    {
        "content": "<p>please PM me about stuff like this btw</p>",
        "id": 212129386,
        "sender_full_name": "eddyb",
        "timestamp": 1601672991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> no, we don't want the demangler to have to interpret the data</p>",
        "id": 212129553,
        "sender_full_name": "eddyb",
        "timestamp": 1601673105
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span>'s suggestion is pretty reasonable</p>",
        "id": 212129608,
        "sender_full_name": "eddyb",
        "timestamp": 1601673126
    },
    {
        "content": "<p>we right now use a hex encoding of the data, so we could use <code>n</code> or <code>m</code> to indicate negative/minus</p>",
        "id": 212129649,
        "sender_full_name": "eddyb",
        "timestamp": 1601673169
    },
    {
        "content": "<p>why did I ask on the PR about <code>rustc-demangle</code>. ofc I won't see anything on the PR :(</p>",
        "id": 212129707,
        "sender_full_name": "eddyb",
        "timestamp": 1601673239
    },
    {
        "content": "<p>for <code>char</code> I <em>think</em> the hex is fine</p>",
        "id": 212129763,
        "sender_full_name": "eddyb",
        "timestamp": 1601673258
    },
    {
        "content": "<p>because it's basically <code>'\\U{...}'</code></p>",
        "id": 212129777,
        "sender_full_name": "eddyb",
        "timestamp": 1601673268
    },
    {
        "content": "<p>the hex would be just the unsigned magnitude, right?</p>",
        "id": 212129810,
        "sender_full_name": "cuviper",
        "timestamp": 1601673296
    },
    {
        "content": "<p>(not 2's complement)</p>",
        "id": 212129813,
        "sender_full_name": "cuviper",
        "timestamp": 1601673300
    },
    {
        "content": "<p>correct</p>",
        "id": 212129824,
        "sender_full_name": "eddyb",
        "timestamp": 1601673304
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Value.20mangling.20for.20integral.20primitive.20data.20types/near/212129553\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"216206\">lcnr</span> no, we don't want the demangler to have to interpret the data</p>\n</blockquote>\n<p>well, it would be just <code>value as ty</code>, so we don't really have to interpret anything here, do we?</p>",
        "id": 212129828,
        "sender_full_name": "lcnr",
        "timestamp": 1601673307
    },
    {
        "content": "<p>it's only <code>isize</code> that has the problem, but it's better to be consistent</p>",
        "id": 212129840,
        "sender_full_name": "eddyb",
        "timestamp": 1601673318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"216206\">@lcnr</span> the demangler doesn't know what target the symbol was for</p>",
        "id": 212129868,
        "sender_full_name": "eddyb",
        "timestamp": 1601673338
    },
    {
        "content": "<p>hence focusing on a human-friendly data model rather than dumping the data</p>",
        "id": 212129897,
        "sender_full_name": "eddyb",
        "timestamp": 1601673357
    },
    {
        "content": "<p>what does C++ do for value mangling?</p>",
        "id": 212129948,
        "sender_full_name": "cuviper",
        "timestamp": 1601673373
    },
    {
        "content": "<p>C++ is weird because it supports a full expression AST</p>",
        "id": 212130012,
        "sender_full_name": "eddyb",
        "timestamp": 1601673422
    },
    {
        "content": "<p>ah, now I see. I personally am fine with whatever solution you come up here <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 212130036,
        "sender_full_name": "lcnr",
        "timestamp": 1601673454
    },
    {
        "content": "<p>ah, I guess Itanium C++ would use <code>ng</code> for unary minus<br>\n<a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling-operator\">https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling-operator</a></p>",
        "id": 212130202,
        "sender_full_name": "cuviper",
        "timestamp": 1601673565
    },
    {
        "content": "<p>haha it's an AST right lol</p>",
        "id": 212130228,
        "sender_full_name": "eddyb",
        "timestamp": 1601673594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"138448\">@cuviper</span> ah no</p>\n<blockquote>\n<p>&lt;number&gt; is a pseudo-terminal representing a decimal integer, with a leading 'n' for negative integers.</p>\n</blockquote>",
        "id": 212130301,
        "sender_full_name": "eddyb",
        "timestamp": 1601673622
    },
    {
        "content": "<p><a href=\"https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangle.number\">https://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangle.number</a></p>",
        "id": 212130308,
        "sender_full_name": "eddyb",
        "timestamp": 1601673627
    },
    {
        "content": "<p>so yeah we can use <code>n</code></p>",
        "id": 212130316,
        "sender_full_name": "eddyb",
        "timestamp": 1601673634
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>    &lt;number&gt; ::= [n] &lt;non-negative decimal integer&gt;\n</code></pre></div>",
        "id": 212130365,
        "sender_full_name": "cuviper",
        "timestamp": 1601673687
    },
    {
        "content": "<p>oh, I saw <code>non-negative</code> and missed the <code>[n]</code></p>",
        "id": 212130393,
        "sender_full_name": "cuviper",
        "timestamp": 1601673708
    },
    {
        "content": "<p>(and skimmed right over the description)</p>",
        "id": 212130428,
        "sender_full_name": "cuviper",
        "timestamp": 1601673723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>: I opened <a href=\"https://github.com/rust-lang/rust/pull/77554\">https://github.com/rust-lang/rust/pull/77554</a> at a starting point.</p>",
        "id": 212246750,
        "sender_full_name": "varkor",
        "timestamp": 1601854295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> do you want to open a <a href=\"https://github.com/alexcrichton/rustc-demangle\">https://github.com/alexcrichton/rustc-demangle</a> PR?</p>",
        "id": 212247482,
        "sender_full_name": "eddyb",
        "timestamp": 1601855546
    },
    {
        "content": "<p>I'm not sure we have the testing setup to demangle a mangled symbol but we should!</p>",
        "id": 212247486,
        "sender_full_name": "eddyb",
        "timestamp": 1601855566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Value.20mangling.20for.20integral.20primitive.20data.20types/near/212247486\">said</a>:</p>\n<blockquote>\n<p>I'm not sure we have the testing setup to demangle a mangled symbol but we should!</p>\n</blockquote>\n<p>Ah, okay.</p>",
        "id": 212247494,
        "sender_full_name": "varkor",
        "timestamp": 1601855595
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Value.20mangling.20for.20integral.20primitive.20data.20types/near/212247482\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> do you want to open a <a href=\"https://github.com/alexcrichton/rustc-demangle\">https://github.com/alexcrichton/rustc-demangle</a> PR?</p>\n</blockquote>\n<p>Yep, will do (though it may wait till tomorrow, as it's getting late now).</p>",
        "id": 212247497,
        "sender_full_name": "varkor",
        "timestamp": 1601855610
    },
    {
        "content": "<p>nevermind it exists <a href=\"https://github.com/rust-lang/rust/blob/85fbf49ce0e2274d0acf798f6e703747674feec3/compiler/rustc_symbol_mangling/src/test.rs#L42-L45\">https://github.com/rust-lang/rust/blob/85fbf49ce0e2274d0acf798f6e703747674feec3/compiler/rustc_symbol_mangling/src/test.rs#L42-L45</a></p>",
        "id": 212247498,
        "sender_full_name": "eddyb",
        "timestamp": 1601855611
    },
    {
        "content": "<p>(this is <code>#[rustc_symbol_name]</code>)</p>",
        "id": 212247501,
        "sender_full_name": "eddyb",
        "timestamp": 1601855624
    },
    {
        "content": "<p>so you should follow <code>#[rustc_symbol_name]</code> tests and make sure it demangles correctly</p>",
        "id": 212247549,
        "sender_full_name": "eddyb",
        "timestamp": 1601855672
    },
    {
        "content": "<p>When I tried using <code>#[rustc_symbol_name]</code>, I got something like <code>symbol-name(_RNvMCs4fqI2P2rA04_5namesINtB2_2I8KapE3foo)</code>, which doesn't look very demangled.</p>",
        "id": 212247564,
        "sender_full_name": "varkor",
        "timestamp": 1601855712
    },
    {
        "content": "<p>yupp because <code>rustc-demangle</code> doesn't know about the new stuff yet <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212247573,
        "sender_full_name": "eddyb",
        "timestamp": 1601855729
    },
    {
        "content": "<p>wait no</p>",
        "id": 212247576,
        "sender_full_name": "eddyb",
        "timestamp": 1601855747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> that's just the mangled form</p>",
        "id": 212247579,
        "sender_full_name": "eddyb",
        "timestamp": 1601855752
    },
    {
        "content": "<p>you should see <code>demangling(</code> as well when demangling succeeds</p>",
        "id": 212247618,
        "sender_full_name": "eddyb",
        "timestamp": 1601855768
    },
    {
        "content": "<p>Oh, so if <code>demangling(</code> doesn't appear, it means it failed?</p>",
        "id": 212247625,
        "sender_full_name": "varkor",
        "timestamp": 1601855802
    },
    {
        "content": "<p>yupp, see my last link</p>",
        "id": 212247627,
        "sender_full_name": "eddyb",
        "timestamp": 1601855810
    },
    {
        "content": "<p>Oh, right.</p>",
        "id": 212247632,
        "sender_full_name": "varkor",
        "timestamp": 1601855823
    },
    {
        "content": "<p>Is it expected not to be demangled properly until I make the changes to <code>rustc-demangle</code>?</p>",
        "id": 212247646,
        "sender_full_name": "varkor",
        "timestamp": 1601855851
    },
    {
        "content": "<p>also we should fix this thing so that it uses notes on a <code>struct_span_err</code></p>",
        "id": 212247647,
        "sender_full_name": "eddyb",
        "timestamp": 1601855852
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> well, yeah, how could it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span>?</p>",
        "id": 212247650,
        "sender_full_name": "eddyb",
        "timestamp": 1601855862
    },
    {
        "content": "<p>you're adding syntax it doesn't understand</p>",
        "id": 212247652,
        "sender_full_name": "eddyb",
        "timestamp": 1601855876
    },
    {
        "content": "<p>Just a sanity check :P</p>",
        "id": 212247653,
        "sender_full_name": "varkor",
        "timestamp": 1601855877
    },
    {
        "content": "<p>Okay, so I should make the <code>rustc-demangle</code> change first.</p>",
        "id": 212247698,
        "sender_full_name": "varkor",
        "timestamp": 1601855899
    },
    {
        "content": "<p>yeah</p>",
        "id": 212247702,
        "sender_full_name": "eddyb",
        "timestamp": 1601855921
    },
    {
        "content": "<p>Why is <code>rustc-demangle</code> not part of the rust-lang organisation?</p>",
        "id": 212247704,
        "sender_full_name": "varkor",
        "timestamp": 1601855926
    },
    {
        "content": "<p>Or even rustc?</p>",
        "id": 212247705,
        "sender_full_name": "varkor",
        "timestamp": 1601855931
    },
    {
        "content": "<p><em>shrug</em> we should ask <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span> to transfer it I guess</p>",
        "id": 212247712,
        "sender_full_name": "eddyb",
        "timestamp": 1601855951
    },
    {
        "content": "<p>Seems to make sense to have mangling and demangling in the same place.</p>",
        "id": 212247713,
        "sender_full_name": "varkor",
        "timestamp": 1601855963
    },
    {
        "content": "<p>rustc using it is independent of the project existing at all</p>",
        "id": 212247714,
        "sender_full_name": "eddyb",
        "timestamp": 1601855963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> well, no, <code>rustc-demangle</code> is published on <a href=\"http://crates.io\">crates.io</a></p>",
        "id": 212247716,
        "sender_full_name": "eddyb",
        "timestamp": 1601855981
    },
    {
        "content": "<p>so they can't be in the same crate</p>",
        "id": 212247718,
        "sender_full_name": "eddyb",
        "timestamp": 1601855991
    },
    {
        "content": "<p>Ah, I see</p>",
        "id": 212247720,
        "sender_full_name": "varkor",
        "timestamp": 1601855993
    },
    {
        "content": "<p>Okay, cool, I'll do all that tomorrow.</p>",
        "id": 212247766,
        "sender_full_name": "varkor",
        "timestamp": 1601856011
    },
    {
        "content": "<p>anyway you can make sure your changes work by adding an unit test to <code>rustc-demangle</code> itself with several of the new symbols</p>",
        "id": 212247772,
        "sender_full_name": "eddyb",
        "timestamp": 1601856021
    },
    {
        "content": "<p>at the bottom of <code>v0.rs</code></p>",
        "id": 212247779,
        "sender_full_name": "eddyb",
        "timestamp": 1601856034
    },
    {
        "content": "<p>Great, thanks for explaining!</p>",
        "id": 212247804,
        "sender_full_name": "varkor",
        "timestamp": 1601856111
    },
    {
        "content": "<p><code>min_const_generics</code> seems to be getting pretty close now…</p>",
        "id": 212247853,
        "sender_full_name": "varkor",
        "timestamp": 1601856138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> btw we should also do something where we change how we encode placeholders</p>",
        "id": 212247854,
        "sender_full_name": "eddyb",
        "timestamp": 1601856144
    },
    {
        "content": "<p>fully <code>p</code> instead of the type followed by <code>p</code></p>",
        "id": 212247855,
        "sender_full_name": "eddyb",
        "timestamp": 1601856158
    },
    {
        "content": "<p>alternatively, <code>p</code> followed by the type</p>",
        "id": 212247858,
        "sender_full_name": "eddyb",
        "timestamp": 1601856166
    },
    {
        "content": "<p>Oh, I saw a <code>NOTE</code> about this, but I didn't pay it close attention.</p>",
        "id": 212247866,
        "sender_full_name": "varkor",
        "timestamp": 1601856186
    },
    {
        "content": "<p>this is because the type \"codes\" for consts make more sense to use as \"const constructors\" rather than literally the type</p>",
        "id": 212247867,
        "sender_full_name": "eddyb",
        "timestamp": 1601856187
    },
    {
        "content": "<p>I can explain this more when you want to get back to this</p>",
        "id": 212247871,
        "sender_full_name": "eddyb",
        "timestamp": 1601856209
    },
    {
        "content": "<p>Is this something relevant to <code>min_const_generics</code>, or just the wider <code>const_generics</code>?</p>",
        "id": 212247878,
        "sender_full_name": "varkor",
        "timestamp": 1601856239
    },
    {
        "content": "<p>it's relevant to const generics existing :P</p>",
        "id": 212247919,
        "sender_full_name": "eddyb",
        "timestamp": 1601856254
    },
    {
        "content": "<p>In that case, it sounds rather important :P</p>",
        "id": 212247924,
        "sender_full_name": "varkor",
        "timestamp": 1601856271
    },
    {
        "content": "<p>think, uhh,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">([();</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}]);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212247925,
        "sender_full_name": "eddyb",
        "timestamp": 1601856292
    },
    {
        "content": "<p>By the way, what <em>is</em> \"value mangling\"?</p>",
        "id": 212247940,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601856329
    },
    {
        "content": "<p>symbol mangling for const values</p>",
        "id": 212247941,
        "sender_full_name": "eddyb",
        "timestamp": 1601856338
    },
    {
        "content": "<p>Okay, I'll have to look that up. Thanks :)</p>",
        "id": 212247944,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601856348
    },
    {
        "content": "<p>like for a function instance like <code>foo::&lt;123&gt;</code></p>",
        "id": 212247945,
        "sender_full_name": "eddyb",
        "timestamp": 1601856350
    },
    {
        "content": "<p>Oh!</p>",
        "id": 212247946,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601856357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307537\">@Camelid</span> well, it's symbol name mangling for const generics</p>",
        "id": 212247949,
        "sender_full_name": "eddyb",
        "timestamp": 1601856359
    },
    {
        "content": "<p>I see; that makes so much more sense than what I thought.</p>",
        "id": 212247989,
        "sender_full_name": "Noah Lev",
        "timestamp": 1601856374
    },
    {
        "content": "<p>you may be aware of both of those things independently :P</p>",
        "id": 212247990,
        "sender_full_name": "eddyb",
        "timestamp": 1601856377
    },
    {
        "content": "<p>people are just using shorthands I guess</p>",
        "id": 212247994,
        "sender_full_name": "eddyb",
        "timestamp": 1601856388
    },
    {
        "content": "<p>what... <a href=\"https://godbolt.org/z/onYsWY\">https://godbolt.org/z/onYsWY</a></p>",
        "id": 212248049,
        "sender_full_name": "eddyb",
        "timestamp": 1601856502
    },
    {
        "content": "<p>why is it demangling <em>like that</em></p>",
        "id": 212248055,
        "sender_full_name": "eddyb",
        "timestamp": 1601856509
    },
    {
        "content": "<p>anyway it's <code>_RNvNkNvNtCsbDqzXfLQacH_7example3Foo1_003FOO</code></p>",
        "id": 212248057,
        "sender_full_name": "eddyb",
        "timestamp": 1601856532
    },
    {
        "content": "<p>oh wow it does demangle as <code>example::Foo::0::FOO</code></p>",
        "id": 212248069,
        "sender_full_name": "eddyb",
        "timestamp": 1601856553
    },
    {
        "content": "<p>that... doesn't seem correct lol</p>",
        "id": 212248071,
        "sender_full_name": "eddyb",
        "timestamp": 1601856558
    },
    {
        "content": "<p><code>1_00</code> is indeed the mangling of the identifier <code>0</code></p>",
        "id": 212248082,
        "sender_full_name": "eddyb",
        "timestamp": 1601856602
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Value.20mangling.20for.20integral.20primitive.20data.20types/near/212247925\">said</a>:</p>\n<blockquote>\n<p>think, uhh,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"o\">&lt;</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">N</span>: <span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"p\">([();</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"n\">N</span><span class=\"w\"> </span><span class=\"p\">}]);</span><span class=\"w\"></span>\n</code></pre></div>\n\n</blockquote>\n<p>What's the issue with this example?</p>",
        "id": 212248127,
        "sender_full_name": "varkor",
        "timestamp": 1601856628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> I tunnel-vision'd and didn't end up with the correct example <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212248137,
        "sender_full_name": "eddyb",
        "timestamp": 1601856667
    },
    {
        "content": "<p>but now I found a bug</p>",
        "id": 212248138,
        "sender_full_name": "eddyb",
        "timestamp": 1601856670
    },
    {
        "content": "<p>I wonder if <span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span>'s <a href=\"https://github.com/rust-lang/rust/issues/76176\">#76176</a> introduced it, or if it was something else</p>",
        "id": 212248142,
        "sender_full_name": "eddyb",
        "timestamp": 1601856688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> this is the correct example <a href=\"https://godbolt.org/z/neMrxf\">https://godbolt.org/z/neMrxf</a></p>",
        "id": 212248200,
        "sender_full_name": "eddyb",
        "timestamp": 1601856779
    },
    {
        "content": "<p><code>&lt;example::Foo&lt;_&gt;&gt;::foo::FOO</code></p>",
        "id": 212248204,
        "sender_full_name": "eddyb",
        "timestamp": 1601856787
    },
    {
        "content": "<p>that <code>_</code> is what I'm talking about</p>",
        "id": 212248209,
        "sender_full_name": "eddyb",
        "timestamp": 1601856802
    },
    {
        "content": "<p>it's the <code>jp</code> in <code>_RNvNvMCsbDqzXfLQacH_7exampleINtB4_3FooKjpE3foo3FOO</code></p>",
        "id": 212248211,
        "sender_full_name": "eddyb",
        "timestamp": 1601856810
    },
    {
        "content": "<p>so <code>j</code> is <code>usize</code> and <code>p</code> is <code>_</code></p>",
        "id": 212248258,
        "sender_full_name": "eddyb",
        "timestamp": 1601856850
    },
    {
        "content": "<p>but maybe we want to remove the type from that case</p>",
        "id": 212248259,
        "sender_full_name": "eddyb",
        "timestamp": 1601856864
    },
    {
        "content": "<p>because for more complicated types it doesn't make sense</p>",
        "id": 212248264,
        "sender_full_name": "eddyb",
        "timestamp": 1601856880
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Value.20mangling.20for.20integral.20primitive.20data.20types/near/212248264\">said</a>:</p>\n<blockquote>\n<p>because for more complicated types it doesn't make sense</p>\n</blockquote>\n<p>What's an example where it doesn't make sense?</p>",
        "id": 212248278,
        "sender_full_name": "varkor",
        "timestamp": 1601856915
    },
    {
        "content": "<p>replace <code>usize</code> with, idk, <code>Range&lt;usize&gt;</code></p>",
        "id": 212248281,
        "sender_full_name": "eddyb",
        "timestamp": 1601856947
    },
    {
        "content": "<p>or <code>(usize, usize)</code> as a better example</p>",
        "id": 212248283,
        "sender_full_name": "eddyb",
        "timestamp": 1601856960
    },
    {
        "content": "<p>we don't want to actually encode the type, <code>TjjE</code></p>",
        "id": 212248329,
        "sender_full_name": "eddyb",
        "timestamp": 1601856986
    },
    {
        "content": "<p>Because it's a waste of space, or because there's actually a problem with it?</p>",
        "id": 212248334,
        "sender_full_name": "varkor",
        "timestamp": 1601857003
    },
    {
        "content": "<p>Sorry if I'm being slow; it's quite late.</p>",
        "id": 212248337,
        "sender_full_name": "varkor",
        "timestamp": 1601857011
    },
    {
        "content": "<p>Or why would switching it to <code>p</code> followed by the type be better?</p>",
        "id": 212248338,
        "sender_full_name": "varkor",
        "timestamp": 1601857016
    },
    {
        "content": "<p>because for fully known values it would be, say, <code>Tj1_j2_E</code> for <code>(1, 2)</code></p>",
        "id": 212248349,
        "sender_full_name": "eddyb",
        "timestamp": 1601857032
    },
    {
        "content": "<p>the \"type followed by value\" only applies to primitives</p>",
        "id": 212248359,
        "sender_full_name": "eddyb",
        "timestamp": 1601857048
    },
    {
        "content": "<p>so we would be forced to use <code>TjpjpE</code> i.e. <code>(_, _)</code></p>",
        "id": 212248366,
        "sender_full_name": "eddyb",
        "timestamp": 1601857066
    },
    {
        "content": "<p>instead of being able to have a <code>_</code> of an arbitrary type</p>",
        "id": 212248410,
        "sender_full_name": "eddyb",
        "timestamp": 1601857088
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Value.20mangling.20for.20integral.20primitive.20data.20types/near/212248359\">said</a>:</p>\n<blockquote>\n<p>the \"type followed by value\" only applies to primitives</p>\n</blockquote>\n<p>Oh, I see.</p>",
        "id": 212248417,
        "sender_full_name": "varkor",
        "timestamp": 1601857122
    },
    {
        "content": "<p>Well, just using <code>p</code> seems reasonable to me.</p>",
        "id": 212248423,
        "sender_full_name": "varkor",
        "timestamp": 1601857144
    },
    {
        "content": "<p>so the current <code>p</code> for constants breaks down the moment you start thinking about aggregates, is I guess what I should say <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212248427,
        "sender_full_name": "eddyb",
        "timestamp": 1601857155
    },
    {
        "content": "<p>The type information should always be available somewhere anyway.</p>",
        "id": 212248428,
        "sender_full_name": "varkor",
        "timestamp": 1601857159
    },
    {
        "content": "<p>because const generics are unstable, I think we can switch to it now, before we start going on a stabilization path</p>",
        "id": 212248439,
        "sender_full_name": "eddyb",
        "timestamp": 1601857190
    },
    {
        "content": "<p>and not have to support the old <code>jp</code></p>",
        "id": 212248486,
        "sender_full_name": "eddyb",
        "timestamp": 1601857214
    },
    {
        "content": "<p>Yep, that seems sensible.</p>",
        "id": 212248488,
        "sender_full_name": "varkor",
        "timestamp": 1601857217
    },
    {
        "content": "<p>I can do that in the <code>Int</code>/<code>char</code> PR as well?</p>",
        "id": 212248493,
        "sender_full_name": "varkor",
        "timestamp": 1601857247
    },
    {
        "content": "<p>feel free to, since you have to touch <code>rustc-demangle</code> already</p>",
        "id": 212248498,
        "sender_full_name": "eddyb",
        "timestamp": 1601857263
    },
    {
        "content": "<p>why do I always <del>mangle</del> mistype the name of that crate <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212248501,
        "sender_full_name": "eddyb",
        "timestamp": 1601857292
    },
    {
        "content": "<p>hmm so coming back to the bug, this mangles correctly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">FOO</span>: <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212248555,
        "sender_full_name": "eddyb",
        "timestamp": 1601857395
    },
    {
        "content": "<p>so only anonymous consts are broken?</p>",
        "id": 212248558,
        "sender_full_name": "eddyb",
        "timestamp": 1601857406
    },
    {
        "content": "<p>okay so we shouldn't be showing them, I forgot about that <a href=\"https://github.com/rust-lang/rust/blob/beb5ae474d2835962ebdf7416bd1c9ad864fe101/compiler/rustc_symbol_mangling/src/v0.rs#L583-L585\">https://github.com/rust-lang/rust/blob/beb5ae474d2835962ebdf7416bd1c9ad864fe101/compiler/rustc_symbol_mangling/src/v0.rs#L583-L585</a></p>",
        "id": 212248616,
        "sender_full_name": "eddyb",
        "timestamp": 1601857552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> lmao it's the field</p>",
        "id": 212248713,
        "sender_full_name": "eddyb",
        "timestamp": 1601857724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"281572\">@marmeladema</span> sorry for the false alarm</p>",
        "id": 212248714,
        "sender_full_name": "eddyb",
        "timestamp": 1601857728
    },
    {
        "content": "<p><a href=\"https://godbolt.org/z/bah7nd\">https://godbolt.org/z/bah7nd</a></p>",
        "id": 212248718,
        "sender_full_name": "eddyb",
        "timestamp": 1601857755
    },
    {
        "content": "<p>mystery solved</p>",
        "id": 212248726,
        "sender_full_name": "eddyb",
        "timestamp": 1601857766
    },
    {
        "content": "<p>i.e. <code>Foo.0</code>?</p>",
        "id": 212248727,
        "sender_full_name": "varkor",
        "timestamp": 1601857767
    },
    {
        "content": "<p>yupp!</p>",
        "id": 212248729,
        "sender_full_name": "eddyb",
        "timestamp": 1601857771
    },
    {
        "content": "<p><span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 212248733,
        "sender_full_name": "varkor",
        "timestamp": 1601857784
    },
    {
        "content": "<p>the <code>AnonConst</code> is there but isn't shown (this is intentional)</p>",
        "id": 212248739,
        "sender_full_name": "eddyb",
        "timestamp": 1601857790
    },
    {
        "content": "<p>and I forgot fields existed</p>",
        "id": 212248740,
        "sender_full_name": "eddyb",
        "timestamp": 1601857801
    },
    {
        "content": "<p>It's easily done; they're a fairly obscure language feature.</p>",
        "id": 212248800,
        "sender_full_name": "varkor",
        "timestamp": 1601857914
    },
    {
        "content": "<p>I just am not yet familiar enough with the mangling scheme to guess what's going on.</p>",
        "id": 212248838,
        "sender_full_name": "varkor",
        "timestamp": 1601857928
    },
    {
        "content": "<p>Hopefully that will change after I make some changes to <code>rustc-demangle</code> myself.</p>",
        "id": 212248841,
        "sender_full_name": "varkor",
        "timestamp": 1601857945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> I mean, this is at the <code>DefPath</code> level</p>",
        "id": 212248842,
        "sender_full_name": "eddyb",
        "timestamp": 1601857962
    },
    {
        "content": "<p>if you debug-printed the <code>DefId</code> you'd see the same thing</p>",
        "id": 212248845,
        "sender_full_name": "eddyb",
        "timestamp": 1601857974
    },
    {
        "content": "<p>well, <code>example::Foo::0::{constant#0}::FOO</code>, since we don't hide that <code>AnonConst</code> there</p>",
        "id": 212248859,
        "sender_full_name": "eddyb",
        "timestamp": 1601858022
    },
    {
        "content": "<p>actually, I think there's a way to trick it to do this</p>",
        "id": 212248867,
        "sender_full_name": "eddyb",
        "timestamp": 1601858037
    },
    {
        "content": "<p>this is weird though, I was hoping that attribute to be more useful <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6a02ad24330c657205d38adc256c77a7\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=6a02ad24330c657205d38adc256c77a7</a></p>",
        "id": 212248908,
        "sender_full_name": "eddyb",
        "timestamp": 1601858050
    },
    {
        "content": "<p>That's true, but it's definitely less confusing to see some indication of the constant, as you say.</p>",
        "id": 212248917,
        "sender_full_name": "varkor",
        "timestamp": 1601858077
    },
    {
        "content": "<p>oh. oh no</p>",
        "id": 212248919,
        "sender_full_name": "eddyb",
        "timestamp": 1601858088
    },
    {
        "content": "<p>this is that feature to shorten names</p>",
        "id": 212248921,
        "sender_full_name": "eddyb",
        "timestamp": 1601858093
    },
    {
        "content": "<p>can't believe it broke <code>#[rustc_def_path]</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212248928,
        "sender_full_name": "eddyb",
        "timestamp": 1601858115
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"244331\">@Dan Aloni (da-x)</span></p>",
        "id": 212248935,
        "sender_full_name": "eddyb",
        "timestamp": 1601858137
    },
    {
        "content": "<p>What do you expect <code>rustc_def_path</code> to print in this instance?</p>",
        "id": 212248937,
        "sender_full_name": "varkor",
        "timestamp": 1601858141
    },
    {
        "content": "<p>the def path</p>",
        "id": 212248941,
        "sender_full_name": "eddyb",
        "timestamp": 1601858147
    },
    {
        "content": "<p>gimme a sec</p>",
        "id": 212248943,
        "sender_full_name": "eddyb",
        "timestamp": 1601858153
    },
    {
        "content": "<p>Hmm, so <code>#[rustc_symbol_name]</code> produces <code>demangling-alt(playground::Foo::field::{{constant}}::FOO)</code>, which is more helpful.</p>",
        "id": 212248984,
        "sender_full_name": "varkor",
        "timestamp": 1601858182
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244331\">@Dan Aloni (da-x)</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=45fe328fa760e25fbd89bd4d9aec05cc\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=45fe328fa760e25fbd89bd4d9aec05cc</a></p>",
        "id": 212248986,
        "sender_full_name": "eddyb",
        "timestamp": 1601858195
    },
    {
        "content": "<p>the <code>const FOO</code> line shouldn't be necessary</p>",
        "id": 212248995,
        "sender_full_name": "eddyb",
        "timestamp": 1601858201
    },
    {
        "content": "<p><code>def-path(Foo::field::{constant#0}::FOO)</code> is the only correct output</p>",
        "id": 212248997,
        "sender_full_name": "eddyb",
        "timestamp": 1601858215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=13bad05c20cc28edcf01919d62c9450b\">https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=13bad05c20cc28edcf01919d62c9450b</a></p>",
        "id": 212249019,
        "sender_full_name": "eddyb",
        "timestamp": 1601858257
    },
    {
        "content": "<p>this is how I realized what was going on, <del>it was printing <code>def-path(X)</code> :D</del></p>",
        "id": 212249024,
        "sender_full_name": "eddyb",
        "timestamp": 1601858270
    },
    {
        "content": "<p>err, it was printing <code>X</code> in the type error</p>",
        "id": 212249037,
        "sender_full_name": "eddyb",
        "timestamp": 1601858283
    },
    {
        "content": "<p>Ahh</p>",
        "id": 212249067,
        "sender_full_name": "varkor",
        "timestamp": 1601858299
    },
    {
        "content": "<p>which is fine because there's only one <code>X</code> in the entire crate</p>",
        "id": 212249068,
        "sender_full_name": "eddyb",
        "timestamp": 1601858302
    },
    {
        "content": "<p>but <code>#[rustc_def_path]</code> should print the def path with that feature disabled</p>",
        "id": 212249075,
        "sender_full_name": "eddyb",
        "timestamp": 1601858339
    },
    {
        "content": "<p>(this is only a minor bug, not very important)</p>",
        "id": 212249084,
        "sender_full_name": "eddyb",
        "timestamp": 1601858348
    },
    {
        "content": "<p>like it only makes testing more annoying</p>",
        "id": 212249087,
        "sender_full_name": "eddyb",
        "timestamp": 1601858365
    },
    {
        "content": "<p>This is simply due to the new heuristic for paths in diagnostics?</p>",
        "id": 212249096,
        "sender_full_name": "varkor",
        "timestamp": 1601858392
    },
    {
        "content": "<p>yeah hence me pinging <span class=\"user-mention\" data-user-id=\"244331\">@Dan Aloni (da-x)</span></p>",
        "id": 212249098,
        "sender_full_name": "eddyb",
        "timestamp": 1601858401
    },
    {
        "content": "<p>anyway yeah <code>Foo::0::{constant#0}::X</code>. the <code>0</code> there is the field <code>.0</code></p>",
        "id": 212249148,
        "sender_full_name": "eddyb",
        "timestamp": 1601858415
    },
    {
        "content": "<p>maybe it should be printed some other way. but also, it's fine. and also this is a rare case</p>",
        "id": 212249158,
        "sender_full_name": "eddyb",
        "timestamp": 1601858444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Value.20mangling.20for.20integral.20primitive.20data.20types/near/212249098\">said</a>:</p>\n<blockquote>\n<p>yeah hence me pinging <span class=\"user-mention silent\" data-user-id=\"244331\">Dan Aloni (da-x)</span></p>\n</blockquote>\n<p>I've not been so good at keeping up with what's happening and who's doing what recently <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span></p>",
        "id": 212249168,
        "sender_full_name": "varkor",
        "timestamp": 1601858459
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/73996\">#73996</a></p>",
        "id": 212249177,
        "sender_full_name": "eddyb",
        "timestamp": 1601858485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Value.20mangling.20for.20integral.20primitive.20data.20types/near/212249158\">said</a>:</p>\n<blockquote>\n<p>maybe it should be printed some other way. but also, it's fine. and also this is a rare case</p>\n</blockquote>\n<p>I think with the <code>{constant#0}</code>, this is completely readable.</p>",
        "id": 212249181,
        "sender_full_name": "varkor",
        "timestamp": 1601858499
    },
    {
        "content": "<p>heh</p>",
        "id": 212249185,
        "sender_full_name": "eddyb",
        "timestamp": 1601858514
    },
    {
        "content": "<p>anyway the symbol doesn't have  that because it would require us to \"stabilize\" the existence of \"anonymous constants\" as something that's important to symbols</p>",
        "id": 212249229,
        "sender_full_name": "eddyb",
        "timestamp": 1601858545
    },
    {
        "content": "<p>the only ones we did that to are <code>C</code> (<code>closure</code>) and <code>S</code> (<code>shim</code>)</p>",
        "id": 212249239,
        "sender_full_name": "eddyb",
        "timestamp": 1601858582
    },
    {
        "content": "<p>What's the disadvantage to acknowledging constants' existence?</p>",
        "id": 212249251,
        "sender_full_name": "varkor",
        "timestamp": 1601858634
    },
    {
        "content": "<p>probably none</p>",
        "id": 212249297,
        "sender_full_name": "eddyb",
        "timestamp": 1601858676
    },
    {
        "content": "<p>the other one is <code>impl Trait</code> (printed as e.g. <code>{opaque#0}</code> by <code>rustc</code> itself)</p>",
        "id": 212249309,
        "sender_full_name": "eddyb",
        "timestamp": 1601858703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> anyway the format is robust to encoding things we don't need to show to the users</p>",
        "id": 212249322,
        "sender_full_name": "eddyb",
        "timestamp": 1601858738
    },
    {
        "content": "<p>Did the rust-demangle GCC patches get accepted in the end, or is that still in limbo?</p>",
        "id": 212249377,
        "sender_full_name": "varkor",
        "timestamp": 1601858784
    },
    {
        "content": "<p>limbo</p>",
        "id": 212249379,
        "sender_full_name": "eddyb",
        "timestamp": 1601858789
    },
    {
        "content": "<p>one fun thing we could do is we could add macro expansion \"nodes\" to def paths, and therefore to mangling</p>",
        "id": 212249385,
        "sender_full_name": "eddyb",
        "timestamp": 1601858812
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> if you want to implement aggregate value mangling and demangling we can include that in the patch and try again :P</p>",
        "id": 212249395,
        "sender_full_name": "eddyb",
        "timestamp": 1601858843
    },
    {
        "content": "<p>just so we have to upstream less later</p>",
        "id": 212249397,
        "sender_full_name": "eddyb",
        "timestamp": 1601858863
    },
    {
        "content": "<p>I forget what <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> did so far</p>",
        "id": 212249401,
        "sender_full_name": "eddyb",
        "timestamp": 1601858878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> will min const generics not include <code>&amp;str</code>?</p>",
        "id": 212249444,
        "sender_full_name": "eddyb",
        "timestamp": 1601858901
    },
    {
        "content": "<p>because I know people want that one</p>",
        "id": 212249447,
        "sender_full_name": "eddyb",
        "timestamp": 1601858911
    },
    {
        "content": "<p>That would be nice. I definitely think supporting aggregates as a second intermediate step before full const generics would be good (and hopefully straightforward).</p>",
        "id": 212249450,
        "sender_full_name": "varkor",
        "timestamp": 1601858929
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"119009\">eddyb</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Value.20mangling.20for.20integral.20primitive.20data.20types/near/212249444\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> will min const generics not include <code>&amp;str</code>?</p>\n</blockquote>\n<p>Nope</p>",
        "id": 212249453,
        "sender_full_name": "varkor",
        "timestamp": 1601858936
    },
    {
        "content": "<p>awww</p>",
        "id": 212249454,
        "sender_full_name": "eddyb",
        "timestamp": 1601858942
    },
    {
        "content": "<p>There are still some issues with lifetimes in const generics that need to be ironed out first.</p>",
        "id": 212249462,
        "sender_full_name": "varkor",
        "timestamp": 1601858957
    },
    {
        "content": "<p>thing is, <code>&amp;str</code> is the hardest to support</p>",
        "id": 212249463,
        "sender_full_name": "eddyb",
        "timestamp": 1601858961
    },
    {
        "content": "<p>I'm surprised. can't we require it's <code>&amp;'static str</code>?</p>",
        "id": 212249466,
        "sender_full_name": "eddyb",
        "timestamp": 1601858971
    },
    {
        "content": "<p>I mean, we don't allow parameters anyway</p>",
        "id": 212249476,
        "sender_full_name": "eddyb",
        "timestamp": 1601858991
    },
    {
        "content": "<p>I think there was some problem even then, but I can't quite remember… let me check.</p>",
        "id": 212249524,
        "sender_full_name": "varkor",
        "timestamp": 1601859012
    },
    {
        "content": "<p>like tuples are easy. you just take the type syntax but put constants inside rather than types</p>",
        "id": 212249527,
        "sender_full_name": "eddyb",
        "timestamp": 1601859015
    },
    {
        "content": "<p>for everything else, you repeat the tuple thing but with other \"codes\" <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212249541,
        "sender_full_name": "eddyb",
        "timestamp": 1601859044
    },
    {
        "content": "<p>like if tuples are <code>T...E</code>, arrays could be <code>A...E</code></p>",
        "id": 212249546,
        "sender_full_name": "eddyb",
        "timestamp": 1601859056
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Value.20mangling.20for.20integral.20primitive.20data.20types/near/212249524\">said</a>:</p>\n<blockquote>\n<p>I think there was some problem even then, but I can't quite remember… let me check.</p>\n</blockquote>\n<p>Okay, maybe I was misremembering, or maybe it got fixed since.</p>",
        "id": 212249558,
        "sender_full_name": "varkor",
        "timestamp": 1601859094
    },
    {
        "content": "<p>references could just be a <code>R</code> prefix</p>",
        "id": 212249561,
        "sender_full_name": "eddyb",
        "timestamp": 1601859098
    },
    {
        "content": "<p>Hmm, maybe there isn't an obstruction to <code>&amp;'static str</code> then…</p>",
        "id": 212249610,
        "sender_full_name": "varkor",
        "timestamp": 1601859135
    },
    {
        "content": "<p>I think we should try it after <code>min_const_generics</code> is stabilised.</p>",
        "id": 212249621,
        "sender_full_name": "varkor",
        "timestamp": 1601859157
    },
    {
        "content": "<p>non-primitives are only slightly harder, like tuple structs could just be a combination of the const tuple syntax and the path syntax</p>",
        "id": 212249622,
        "sender_full_name": "eddyb",
        "timestamp": 1601859161
    },
    {
        "content": "<p>(and tuple variants are just tuple structs but the \"struct path\" is <code>Enum::Variant</code>)</p>",
        "id": 212249636,
        "sender_full_name": "eddyb",
        "timestamp": 1601859188
    },
    {
        "content": "<p>named fields is going to the be most annoying one, and even that shouldn't be too bad</p>",
        "id": 212249642,
        "sender_full_name": "eddyb",
        "timestamp": 1601859207
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> but <code>&amp;str</code> is annoying because the type of the data is <code>str</code> not <code>&amp;str</code></p>",
        "id": 212249694,
        "sender_full_name": "eddyb",
        "timestamp": 1601859255
    },
    {
        "content": "<p>You mean for the (de)mangling?</p>",
        "id": 212249700,
        "sender_full_name": "varkor",
        "timestamp": 1601859282
    },
    {
        "content": "<p>so I <em>think</em> we should encode it in such a way that it would be naively demangled as e.g. <code>foo::&lt;&amp;*\"test\"&gt;</code></p>",
        "id": 212249704,
        "sender_full_name": "eddyb",
        "timestamp": 1601859293
    },
    {
        "content": "<p>as in, we always mangle the <code>R</code> for reference, and then the <code>str</code> value which is what would be demangled as <code>*\"test\"</code></p>",
        "id": 212249758,
        "sender_full_name": "eddyb",
        "timestamp": 1601859366
    },
    {
        "content": "<p>and to make it nice we can skip both the <code>&amp;</code> and the <code>*</code> when they would follow eachother like that</p>",
        "id": 212249761,
        "sender_full_name": "eddyb",
        "timestamp": 1601859387
    },
    {
        "content": "<p>we can do something similar for <code>[u8]</code> (i.e. use <code>*b\"...\"</code> syntax and skip the <code>&amp;*</code> for <code>&amp;[u8]</code>)</p>",
        "id": 212249765,
        "sender_full_name": "eddyb",
        "timestamp": 1601859412
    },
    {
        "content": "<p>I think I'm reinventing stuff I talked to <span class=\"user-mention\" data-user-id=\"124288\">@oli</span> about <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 212249769,
        "sender_full_name": "eddyb",
        "timestamp": 1601859423
    },
    {
        "content": "<p>:P</p>",
        "id": 212249779,
        "sender_full_name": "varkor",
        "timestamp": 1601859464
    },
    {
        "content": "<p>It's nice to be at the point where this is one of the pressing issues.</p>",
        "id": 212249783,
        "sender_full_name": "varkor",
        "timestamp": 1601859478
    },
    {
        "content": "<p>There are fewer const generics issues remaining than I thought.</p>",
        "id": 212249829,
        "sender_full_name": "varkor",
        "timestamp": 1601859506
    },
    {
        "content": "<p>it should be really easy now that we have <code>const_destructure</code> and <code>const_deref</code> queries <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 212249830,
        "sender_full_name": "eddyb",
        "timestamp": 1601859507
    },
    {
        "content": "<p>I am really trying to elimintate those!</p>",
        "id": 212269946,
        "sender_full_name": "oli",
        "timestamp": 1601885680
    },
    {
        "content": "<p>For <code>#[rustc_def_path]</code>, something like this should work: </p>\n<div class=\"codehilite\"><pre><span></span><code>diff --git a/compiler/rustc_symbol_mangling/src/test.rs b/compiler/rustc_symbol_mangling/src/test.rs\nindex 24850a8a0d25..0ea6e4d720ff 100644\n--- a/compiler/rustc_symbol_mangling/src/test.rs\n+++ b/compiler/rustc_symbol_mangling/src/test.rs\n@@ -7,6 +7,7 @@\n use rustc_hir as hir;\n use rustc_middle::ty::{Instance, TyCtxt};\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_middle::ty::print::with_no_trimmed_paths;\n\n const SYMBOL_NAME: Symbol = sym::rustc_symbol_name;\n const DEF_PATH: Symbol = sym::rustc_def_path;\n@@ -44,7 +45,7 @@ impl SymbolNamesTest&lt;&#39;tcx&gt; {\n                     tcx.sess.span_err(attr.span, &amp;format!(&quot;demangling-alt({:#})&quot;, demangling));\n                 }\n             } else if tcx.sess.check_name(attr, DEF_PATH) {\n-                let path = tcx.def_path_str(def_id.to_def_id());\n+                let path = with_no_trimmed_paths(|| tcx.def_path_str(def_id.to_def_id()));\n                 tcx.sess.span_err(attr.span, &amp;format!(&quot;def-path({})&quot;, path));\n             }\n</code></pre></div>",
        "id": 212337983,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1601922377
    },
    {
        "content": "<p>Should open a PR?</p>",
        "id": 212337994,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1601922383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"244331\">@Dan Aloni (da-x)</span> An ICE also happens when trying to format a type using <code>{}</code>. Should it just default to <code>with_no_trimmed_paths</code> when it would otherwise ICE.</p>",
        "id": 212346383,
        "sender_full_name": "bjorn3",
        "timestamp": 1601926489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133247\">@bjorn3</span>  You mean <a href=\"https://github.com/rust-lang/rust/issues/77458\">#77458</a>? That ICE is by design, and should happen only if no diagnostics were emitted. If there were diagnostics, then that's the bug. Or, if this formatting was not oriented to the user, then should use <code>{:?}</code> instead.</p>",
        "id": 212346916,
        "sender_full_name": "Dan Aloni (da-x)",
        "timestamp": 1601926833
    },
    {
        "content": "<p>It is user facing, just at runtime instead of compile time.</p>",
        "id": 212356665,
        "sender_full_name": "bjorn3",
        "timestamp": 1601931927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>: opened a PR to add value demangling for the MCG types: <a href=\"https://github.com/alexcrichton/rustc-demangle/pull/39\">https://github.com/alexcrichton/rustc-demangle/pull/39</a></p>",
        "id": 212502383,
        "sender_full_name": "varkor",
        "timestamp": 1602030104
    },
    {
        "content": "<p>I have a PR ready to go to add mangling support to rustc as soon as this is merged.</p>",
        "id": 212502445,
        "sender_full_name": "varkor",
        "timestamp": 1602030128
    },
    {
        "content": "<p>Oh, I forgot to make the placeholder changes. I'll do that tomorrow.</p>",
        "id": 212506175,
        "sender_full_name": "varkor",
        "timestamp": 1602034338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>: here's the PR for changing the placeholder behaviour: <a href=\"https://github.com/alexcrichton/rustc-demangle/pull/40\">https://github.com/alexcrichton/rustc-demangle/pull/40</a></p>",
        "id": 212595617,
        "sender_full_name": "varkor",
        "timestamp": 1602093399
    },
    {
        "content": "<p>The rustc PR is now ready for review: <a href=\"https://github.com/rust-lang/rust/pull/77554\">https://github.com/rust-lang/rust/pull/77554</a></p>",
        "id": 212614891,
        "sender_full_name": "varkor",
        "timestamp": 1602102445
    }
]