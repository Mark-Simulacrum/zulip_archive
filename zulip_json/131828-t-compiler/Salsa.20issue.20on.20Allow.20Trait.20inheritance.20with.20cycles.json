[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 225203760,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612464263
    },
    {
        "content": "<p>about the Salsa issue we have an MCVE here <a href=\"https://github.com/rust-lang/rust/pull/80732#issuecomment-772467523\">https://github.com/rust-lang/rust/pull/80732#issuecomment-772467523</a></p>",
        "id": 225204028,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612464411
    },
    {
        "content": "<p>it seems to me that the Salsa code is correct and what's wrong is the PR</p>",
        "id": 225204094,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612464440
    },
    {
        "content": "<p>unsure what could be going on</p>",
        "id": 225204110,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612464448
    },
    {
        "content": "<p>wave</p>",
        "id": 225204232,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612464506
    },
    {
        "content": "<p>ok</p>",
        "id": 225204239,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612464511
    },
    {
        "content": "<p>first thing, I guess, what's the name of your branch again, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> ?</p>",
        "id": 225204253,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612464519
    },
    {
        "content": "<p>spastorino:trait-inheritance-self2</p>",
        "id": 225204287,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612464537
    },
    {
        "content": "<p>ok</p>",
        "id": 225204353,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612464569
    },
    {
        "content": "<p>I wanted to check it out</p>",
        "id": 225204357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612464571
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 225204409,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612464597
    },
    {
        "content": "<p>anyway let me see...</p>",
        "id": 225204463,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612464605
    },
    {
        "content": "<p>i agree the code is correct</p>",
        "id": 225204598,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612464670
    },
    {
        "content": "<p>it looks like there's some kind of \"deduplication\" error here</p>",
        "id": 225204608,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612464678
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0221]: ambiguous associated type `Group` in bounds of `Q`\n  --&gt; src/main.rs:9:53\n   |\n9  |         &lt;&lt;Q as QueryDb&lt;&#39;_&gt;&gt;::DynDb as HasQueryGroup&lt;Q::Group&gt;&gt;::group_storage(db);\n   |                                                     ^^^^^^^^ ambiguous associated type `Group`\n...\n30 |     type Group;\n   |     -----------\n   |     |\n   |     ambiguous `Group` from `for&lt;&#39;d&gt; QueryDb&lt;&#39;d&gt;`\n   |     ambiguous `Group` from `for&lt;&#39;d&gt; QueryDb&lt;&#39;d&gt;`\n   |\nhelp: use fully qualified syntax to disambiguate\n   |\n9  |         &lt;&lt;Q as QueryDb&lt;&#39;_&gt;&gt;::DynDb as HasQueryGroup&lt;&lt;Q as for&lt;&#39;d&gt; QueryDb&lt;&#39;d&gt;&gt;::Group&gt;&gt;::group_storage(db);\n   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nhelp: use fully qualified syntax to disambiguate\n   |\n9  |         &lt;&lt;Q as QueryDb&lt;&#39;_&gt;&gt;::DynDb as HasQueryGroup&lt;&lt;Q as for&lt;&#39;d&gt; QueryDb&lt;&#39;d&gt;&gt;::Group&gt;&gt;::group_storage(db);\n   |\n</code></pre></div>",
        "id": 225204616,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612464687
    },
    {
        "content": "<p>yeah</p>",
        "id": 225205045,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612464887
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> got distracted getting coffee but I'm actually around now</p>",
        "id": 225205927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612465265
    },
    {
        "content": "<p>I was eating chocolate :)</p>",
        "id": 225206147,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465354
    },
    {
        "content": "<p>and you're making me want <span aria-label=\"coffee\" class=\"emoji emoji-2615\" role=\"img\" title=\"coffee\">:coffee:</span> now</p>",
        "id": 225206163,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465362
    },
    {
        "content": "<p>seems like I'm procrastinating :)</p>",
        "id": 225206209,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465379
    },
    {
        "content": "<p>Eh, you both are making me hungry :D</p>",
        "id": 225206230,
        "sender_full_name": "Léo Lanteri Thauvin",
        "timestamp": 1612465387
    },
    {
        "content": "<p>but I guess don't worry, I can start from here</p>",
        "id": 225206245,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465389
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"255061\">@Léo Lanteri Thauvin</span> LOL</p>",
        "id": 225206292,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465404
    },
    {
        "content": "<p>Am I the only one who doesn't understand that MCVE? <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 225206328,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612465422
    },
    {
        "content": "<p>MCVE</p>",
        "id": 225206348,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465431
    },
    {
        "content": "<p>I mean, the code, not the acronym. It seems very subtle in more than one way.</p>",
        "id": 225206425,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612465450
    },
    {
        "content": "<p>sigh, the <code>QueryDb</code> trait is terrible</p>",
        "id": 225206454,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612465462
    },
    {
        "content": "<p>it wants to be a GAT</p>",
        "id": 225206466,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612465467
    },
    {
        "content": "<p>but anyawy</p>",
        "id": 225206470,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612465470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225206425\">said</a>:</p>\n<blockquote>\n<p>I mean, the code, not the acronym</p>\n</blockquote>\n<p>LOL</p>",
        "id": 225206474,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465470
    },
    {
        "content": "<p>sorry about that, thought you were asking for the acronym <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 225206532,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225206425\">said</a>:</p>\n<blockquote>\n<p>I mean, the code, not the acronym. It seems very subtle in more than one way.</p>\n</blockquote>\n<p>for a lot of time I used to have some issues understanding this kind of signatures</p>",
        "id": 225206619,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465541
    },
    {
        "content": "<p>where generics, traits, a ton of bounds and relations show up</p>",
        "id": 225206650,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465556
    },
    {
        "content": "<p>I understand what happens but I can feel you :)</p>",
        "id": 225206708,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"203546\">@Laurențiu Nicola</span> I've just found this <a href=\"https://www.possiblerust.com/guide/how-to-read-rust-functions-part-1\">https://www.possiblerust.com/guide/how-to-read-rust-functions-part-1</a> in particular what they are going to explain in part 2 seem to me to be exactly what you need</p>",
        "id": 225206847,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465640
    },
    {
        "content": "<p>and I feel like what's in that part 2 (which they didn't publish yet) is kind of not covered in books or material</p>",
        "id": 225206925,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465678
    },
    {
        "content": "<p>I'm probably wrong but my guess right now is that that's only covered in RFCs</p>",
        "id": 225206985,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465693
    },
    {
        "content": "<p>Thanks, I'll keep an eye for it. I think this is the first time I see this <code>trait Query: for&lt;'d&gt; QueryDb&lt;'d&gt;</code> idiom</p>",
        "id": 225207007,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612465708
    },
    {
        "content": "<p>I'm still setting the build</p>",
        "id": 225207014,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612465714
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225207007\">said</a>:</p>\n<blockquote>\n<p>Thanks, I'll keep an eye for it. I think this is the first time I see this <code>trait Query: for&lt;'d&gt; QueryDb&lt;'d&gt;</code> idiom</p>\n</blockquote>\n<p>do you know what that <code>for</code> means?</p>",
        "id": 225207044,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465732
    },
    {
        "content": "<p>but <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> do you remember how the list of things is supposed to be de-duplicated?</p>",
        "id": 225207065,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612465743
    },
    {
        "content": "<p>nope</p>",
        "id": 225207097,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465754
    },
    {
        "content": "<p>I was going to start debugging it</p>",
        "id": 225207132,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465775
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225207044\">said</a>:</p>\n<blockquote>\n<p>do you know what that <code>for</code> means?</p>\n</blockquote>\n<p>Yeah.. I mean, I can read it, but it seems quite subtle</p>",
        "id": 225207134,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612465776
    },
    {
        "content": "<p>but as you can see, I'm procrastinating a bit more :)</p>",
        "id": 225207146,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465783
    },
    {
        "content": "<p>That's my fault, sorry</p>",
        "id": 225207169,
        "sender_full_name": "Laurențiu",
        "timestamp": 1612465796
    },
    {
        "content": "<p>no no not at all ;), and it's a pleasure to hear what you're saying</p>",
        "id": 225207314,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465840
    },
    {
        "content": "<p>you're my excuse to not do what I should ;)</p>",
        "id": 225207326,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465846
    },
    {
        "content": "<p>the usual excuse of a procrastinator :P</p>",
        "id": 225207397,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612465877
    },
    {
        "content": "<p>I'm actually in a meeting so technically i don't have a lot of bandwidth ;)</p>",
        "id": 225208662,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612466474
    },
    {
        "content": "<p>but I was hoping I can multitask a little :p</p>",
        "id": 225208682,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612466483
    },
    {
        "content": "<p>ok, I can reproduce the problem at least</p>",
        "id": 225209230,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612466721
    },
    {
        "content": "<p>I'm still compiling ...</p>",
        "id": 225209263,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612466740
    },
    {
        "content": "<p>but I've reproduced the problem yesterday</p>",
        "id": 225209278,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612466748
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"203546\">Laurențiu Nicola</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225207007\">said</a>:</p>\n<blockquote>\n<p>Thanks, I'll keep an eye for it. I think this is the first time I see this <code>trait Query: for&lt;'d&gt; QueryDb&lt;'d&gt;</code> idiom</p>\n</blockquote>\n<p>I'd say the most known example is <code>trait DeserializeOwned : for&lt;'de&gt; Deserialize&lt;'de&gt;</code>, and there is a nice blog post about it here: <a href=\"https://journal.infinitenegativeutility.com/lifetime-quantification-and-higher-ranked-trait-bounds\">https://journal.infinitenegativeutility.com/lifetime-quantification-and-higher-ranked-trait-bounds</a> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 225209626,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1612466881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I guess this may be problematic <a href=\"https://github.com/rust-lang/rust/pull/80732/files#diff-2c47d694652e4851afc17740220c986ca445f9a9bc0e188893f2089e12024621R917\">https://github.com/rust-lang/rust/pull/80732/files#diff-2c47d694652e4851afc17740220c986ca445f9a9bc0e188893f2089e12024621R917</a></p>",
        "id": 225210354,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612467130
    },
    {
        "content": "<p>given that my computer takes a ton of time to compile I'm just reading the code and trying to see where the problem could be</p>",
        "id": 225210400,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612467154
    },
    {
        "content": "<p>that could be a set</p>",
        "id": 225210459,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612467181
    },
    {
        "content": "<p>so</p>",
        "id": 225210855,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467348
    },
    {
        "content": "<p>that's .. yeah could well be that</p>",
        "id": 225210922,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467368
    },
    {
        "content": "<p>something like that</p>",
        "id": 225210926,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467370
    },
    {
        "content": "<p>I'm not getting line numbers in my backtace for some reason ?</p>",
        "id": 225211000,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467415
    },
    {
        "content": "<p>did we change x.py here maybe...?</p>",
        "id": 225211011,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467419
    },
    {
        "content": "<p>er, I mean config.toml</p>",
        "id": 225211126,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467480
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>                self.one_bound_for_assoc_type(\n                    || traits::supertraits(tcx, ty::Binder::bind(trait_ref)),\n                    || &quot;Self&quot;.to_string(),\n                    assoc_ident,\n                    span,\n                    || None,\n                )?\n</code></pre></div>",
        "id": 225211220,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467511
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>                self.one_bound_for_assoc_type(\n                    || traits::supertraits(tcx, trait_ref),\n                    || trait_ref.print_only_trait_path().to_string(),\n                    binding.item_name,\n                    path_span,\n                    || match binding.kind {\n                        ConvertedBindingKind::Equality(ty) =&gt; Some(ty.to_string()),\n                        _ =&gt; None,\n                    },\n                )?\n</code></pre></div>",
        "id": 225211240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467521
    },
    {
        "content": "<p>I think it'd be one of those calls?</p>",
        "id": 225211260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467534
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225211000\">said</a>:</p>\n<blockquote>\n<p>I'm not getting line numbers in my backtace for some reason ?</p>\n</blockquote>\n<p>unsure</p>",
        "id": 225211349,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612467577
    },
    {
        "content": "<p>I think i'm missing <code>debuginfo-level = 1</code> or something</p>",
        "id": 225211527,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467654
    },
    {
        "content": "<p>I'll just <code>debug = true</code>, it looks like that's a decent default these days</p>",
        "id": 225211687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467730
    },
    {
        "content": "<p>yep</p>",
        "id": 225211698,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612467738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225211240\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>                self.one_bound_for_assoc_type(\n                    || traits::supertraits(tcx, trait_ref),\n                    || trait_ref.print_only_trait_path().to_string(),\n                    binding.item_name,\n                    path_span,\n                    || match binding.kind {\n                        ConvertedBindingKind::Equality(ty) =&gt; Some(ty.to_string()),\n                        _ =&gt; None,\n                    },\n                )?\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>you're suggesting that maybe is that and not what I've mentioned?</p>",
        "id": 225211723,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612467752
    },
    {
        "content": "<p>i was but i might be totally off</p>",
        "id": 225211740,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467760
    },
    {
        "content": "<p>from the stacktrace i saw, the failure was in <code>one_bound_for_assoc_type</code></p>",
        "id": 225211764,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467775
    },
    {
        "content": "<p>maybe the line numbers will help</p>",
        "id": 225211796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612467798
    },
    {
        "content": "<p>gonna try that out</p>",
        "id": 225211834,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612467817
    },
    {
        "content": "<p>it just compiled</p>",
        "id": 225211840,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612467820
    },
    {
        "content": "<p>but then I've tried to guess ;) and ...</p>",
        "id": 225211864,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612467830
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0277]: the trait bound `rustc_hir::GenericBound&lt;&#39;_&gt;: std::cmp::Eq` is not satisfied\n   --&gt; compiler/rustc_typeck/src/astconv/mod.rs:917:36\n    |\n917 |                         set.insert(ast_bound);\n    |                                    ^^^^^^^^^ the trait `std::cmp::Eq` is not implemented for `rustc_hir::GenericBound&lt;&#39;_&gt;`\n    |\n    = note: required because of the requirements on the impl of `std::cmp::Eq` for `&amp;rustc_hir::GenericBound&lt;&#39;_&gt;`\n</code></pre></div>",
        "id": 225211889,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612467840
    },
    {
        "content": "<p>so yeah, going to compile what we have and try to get a backtrace</p>",
        "id": 225211947,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612467851
    },
    {
        "content": "<p>well why I'm not even getting a backtrace</p>",
        "id": 225212475,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612468102
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>        self.one_bound_for_assoc_type(\n            || {\n                traits::transitive_bounds_that_define_assoc_type(\n                    tcx,\n                    predicates.iter().filter_map(|(p, _)| {\n                        p.to_opt_poly_trait_ref().map(|trait_ref| trait_ref.value)\n                    }),\n                    assoc_name,\n                )\n                .into_iter()\n            },\n            || param_name.to_string(),\n            assoc_name,\n            span,\n            || None,\n        )\n</code></pre></div>",
        "id": 225212859,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612468271
    },
    {
        "content": "<p>that's the call that fails</p>",
        "id": 225212869,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612468273
    },
    {
        "content": "<p>right</p>",
        "id": 225213072,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612468366
    },
    {
        "content": "<p>got that too</p>",
        "id": 225213079,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612468369
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>   6: &lt;dyn rustc_typeck::astconv::AstConv&gt;::one_bound_for_assoc_type\n             at ./compiler/rustc_typeck/src/astconv/mod.rs:1555:13\n   7: &lt;dyn rustc_typeck::astconv::AstConv&gt;::find_bound_for_assoc_item\n             at ./compiler/rustc_typeck/src/astconv/mod.rs:1425:9\n</code></pre></div>",
        "id": 225213222,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612468440
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_typeck::astconv find_bound_for_assoc_item: predicates=[\n    (\n        Binder(TraitPredicate(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)),\n        test.rs:3:6: 3:7 (#0),\n    ),\n    (\n        Binder(TraitPredicate(&lt;Q as Query&gt;)),\n        test.rs:3:6: 3:7 (#0),\n    ),\n    (\n        Binder(TraitPredicate(&lt;Q as std::marker::Sized&gt;)),\n        test.rs:3:6: 3:7 (#0),\n    ),\n]\n</code></pre></div>",
        "id": 225213487,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612468552
    },
    {
        "content": "<p>ohh, yeah, so <code>Group</code> could be defined in <code>Query</code> and in <code>QueryDb</code></p>",
        "id": 225213848,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612468689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225211240\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>                self.one_bound_for_assoc_type(\n                    || traits::supertraits(tcx, trait_ref),\n                    || trait_ref.print_only_trait_path().to_string(),\n                    binding.item_name,\n                    path_span,\n                    || match binding.kind {\n                        ConvertedBindingKind::Equality(ty) =&gt; Some(ty.to_string()),\n                        _ =&gt; None,\n                    },\n                )?\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I see this code and I just get flashbacks to the (not-even-completed-yet) binder refactor <span aria-label=\"exhausted\" class=\"emoji emoji-1f625\" role=\"img\" title=\"exhausted\">:exhausted:</span></p>",
        "id": 225214065,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612468785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> would be happy to discuss that if you want to hand that off</p>",
        "id": 225214322,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612468878
    },
    {
        "content": "<p>Let's move that discussion to that thread</p>",
        "id": 225214408,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612468919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> you still around?</p>",
        "id": 225218354,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470756
    },
    {
        "content": "<p>did you see what's the problem?</p>",
        "id": 225218356,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470760
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225213487\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_typeck::astconv find_bound_for_assoc_item: predicates=[\n    (\n        Binder(TraitPredicate(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)),\n        test.rs:3:6: 3:7 (#0),\n    ),\n    (\n        Binder(TraitPredicate(&lt;Q as Query&gt;)),\n        test.rs:3:6: 3:7 (#0),\n    ),\n    (\n        Binder(TraitPredicate(&lt;Q as std::marker::Sized&gt;)),\n        test.rs:3:6: 3:7 (#0),\n    ),\n]\n</code></pre></div><br>\n</p>\n</blockquote>\n<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 225218369,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470770
    },
    {
        "content": "<p>ish</p>",
        "id": 225218383,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612470778
    },
    {
        "content": "<p>no, i missed that</p>",
        "id": 225218386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612470782
    },
    {
        "content": "<p>both <code>Query</code> and <code>QueryDb</code> define <code>Group</code></p>",
        "id": 225218406,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470788
    },
    {
        "content": "<p>the thing is ... what to do to avoid having that</p>",
        "id": 225218454,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470811
    },
    {
        "content": "<p>ok so</p>",
        "id": 225218542,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612470846
    },
    {
        "content": "<p>do we want all supertraits then? or we want just to find one supertrait in the chain that defines the assoc_name thing?</p>",
        "id": 225218560,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470853
    },
    {
        "content": "<p>really it's just <code>QueryDb</code></p>",
        "id": 225218562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612470854
    },
    {
        "content": "<p>it's two routes to the same thing</p>",
        "id": 225218578,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612470867
    },
    {
        "content": "<p>right</p>",
        "id": 225218590,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470872
    },
    {
        "content": "<p>something is confusing to me</p>",
        "id": 225218594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612470874
    },
    {
        "content": "<p>or we want the thing that \"immediately\" defines the thing</p>",
        "id": 225218654,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470901
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/53cda05e023b0aea5449938e1a5b872257e4e106/compiler/rustc_typeck/src/astconv/mod.rs#L784-L789\">https://github.com/rust-lang/rust/blob/53cda05e023b0aea5449938e1a5b872257e4e106/compiler/rustc_typeck/src/astconv/mod.rs#L784-L789</a></p>",
        "id": 225218707,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470938
    },
    {
        "content": "<p>this is probably giving me things from the supertraits too</p>",
        "id": 225218718,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470946
    },
    {
        "content": "<p>or we either want just things defined in that specific type and not super types</p>",
        "id": 225218791,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470964
    },
    {
        "content": "<p>or we want to not list all the supertraits</p>",
        "id": 225218805,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470973
    },
    {
        "content": "<p>hmm now I'm confused too</p>",
        "id": 225218843,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612470994
    },
    {
        "content": "<p>if so, why do we call supertraits?</p>",
        "id": 225218861,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612471004
    },
    {
        "content": "<p>so</p>",
        "id": 225218927,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471041
    },
    {
        "content": "<p>ok, I have 20 minutes where I can actually concentrate on this now</p>",
        "id": 225219100,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471114
    },
    {
        "content": "<p>ok, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span>, I'm reading the code</p>",
        "id": 225219773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471483
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 225219781,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612471490
    },
    {
        "content": "<p>I guess that the <code>transitive_bounds_that_define_assoc_type</code> function is supposednot supposed to generate duplicates</p>",
        "id": 225219795,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471499
    },
    {
        "content": "<p>and indeed it has a <code>FxIndexSet</code></p>",
        "id": 225219804,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471505
    },
    {
        "content": "<p>but</p>",
        "id": 225219985,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471599
    },
    {
        "content": "<p>it seems like somehow that is not sufficient</p>",
        "id": 225219997,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471605
    },
    {
        "content": "<p>I added some debug output</p>",
        "id": 225220259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471737
    },
    {
        "content": "<p>well, you don't even need that debug output</p>",
        "id": 225220284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471747
    },
    {
        "content": "<p>if you run with <code>-Zverbose</code></p>",
        "id": 225220292,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471749
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>Binder(&lt;Q as QueryDb&lt;ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed(DefId(0:20 ~ issue_80732[317d]::Query::&#39;d), &#39;d) })&gt;&gt;)\nBinder(&lt;Q as QueryDb&lt;ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed(DefId(0:7 ~ issue_80732[317d]::{impl#0}::&#39;d), &#39;d) })&gt;&gt;)\n</code></pre></div>",
        "id": 225220312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471761
    },
    {
        "content": "<p>hmm</p>",
        "id": 225220434,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612471804
    },
    {
        "content": "<p>the problem here is that we have two equivalent bounds</p>",
        "id": 225220437,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471805
    },
    {
        "content": "<p>but</p>",
        "id": 225220448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471811
    },
    {
        "content": "<p>basically we have the equivalent of</p>",
        "id": 225220459,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471816
    },
    {
        "content": "<p>are not ==</p>",
        "id": 225220463,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612471820
    },
    {
        "content": "<p><code>for&lt;'a&gt; Q: QueryDb&lt;'a&gt;</code></p>",
        "id": 225220486,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471832
    },
    {
        "content": "<p><code>for&lt;'b&gt; Q: QueryDb&lt;'b&gt;</code></p>",
        "id": 225220496,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471839
    },
    {
        "content": "<p>let me see what the other elaborator does</p>",
        "id": 225220504,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471844
    },
    {
        "content": "<p>we have a way to \"canonicalize\" those names</p>",
        "id": 225220518,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471852
    },
    {
        "content": "<p>and maybe it does that</p>",
        "id": 225220522,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471854
    },
    {
        "content": "<p>I see</p>",
        "id": 225220533,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612471862
    },
    {
        "content": "<p>it's weird</p>",
        "id": 225220577,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471884
    },
    {
        "content": "<p>it doesn't obviously do that</p>",
        "id": 225220585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471887
    },
    {
        "content": "<p>point me to the code you're looking</p>",
        "id": 225220611,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612471904
    },
    {
        "content": "<p>when you referred to the other elaborator</p>",
        "id": 225220623,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612471910
    },
    {
        "content": "<p>I'm referring to <code>rustc_infer::traits:util::Elaborator</code></p>",
        "id": 225220692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471930
    },
    {
        "content": "<p>let's do a test</p>",
        "id": 225220792,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612471995
    },
    {
        "content": "<p>if we replace <code>transitive_bounds_that_define_assoc_type</code> with <code>transitive_bounds</code>..</p>",
        "id": 225220813,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612472011
    },
    {
        "content": "<p>does the error go away?</p>",
        "id": 225220863,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612472038
    },
    {
        "content": "<p>(I'm trying it)</p>",
        "id": 225221117,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612472161
    },
    {
        "content": "<p>let me know what happens</p>",
        "id": 225222088,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612472615
    },
    {
        "content": "<p>I need to leave right now</p>",
        "id": 225222095,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612472619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225220813\">said</a>:</p>\n<blockquote>\n<p>if we replace <code>transitive_bounds_that_define_assoc_type</code> with <code>transitive_bounds</code>..</p>\n</blockquote>\n<p>to continue, yeah, this case works if we do that</p>",
        "id": 225323545,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612543488
    },
    {
        "content": "<p>ok so</p>",
        "id": 225323812,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612543619
    },
    {
        "content": "<p>that is not the right thing to do -- it basically 'undoes' the whole point of the PR</p>",
        "id": 225323824,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612543629
    },
    {
        "content": "<p>but the question is, why does it work and the new version doesn't?</p>",
        "id": 225323846,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612543639
    },
    {
        "content": "<p>yeah</p>",
        "id": 225324624,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612543940
    },
    {
        "content": "<p>no idea</p>",
        "id": 225324631,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612543942
    },
    {
        "content": "<p>I was going to debug it</p>",
        "id": 225324635,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612543946
    },
    {
        "content": "<p>me too</p>",
        "id": 225324674,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612543967
    },
    {
        "content": "<p>I'm thinking to add <code>debug!</code> statements in the <code>Elaborator</code></p>",
        "id": 225324704,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612543979
    },
    {
        "content": "<p>to see each trait ref that gets added</p>",
        "id": 225324716,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612543984
    },
    {
        "content": "<p>will be back in a bit</p>",
        "id": 225324718,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612543984
    },
    {
        "content": "<p><em>something</em> must be different</p>",
        "id": 225324727,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612543987
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_infer::traits::util super_predicates: data=TraitPredicate(&lt;Q as std::marker::Sized&gt;)\nDEBUG rustc_infer::traits::util super_predicates: data=TraitPredicate(&lt;Q as Query&gt;)\nDEBUG rustc_infer::traits::util super_predicates: data=TraitPredicate(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)\nDEBUG rustc_typeck::astconv matching_candidates=[Binder(&lt;Q as std::marker::Sized&gt;), Binder(&lt;Q as Query&gt;), Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)]\nDEBUG rustc_infer::traits::util super_predicates: data=TraitPredicate(&lt;Q as std::marker::Sized&gt;)\nDEBUG rustc_infer::traits::util super_predicates: data=TraitPredicate(&lt;Q as Query&gt;)\nDEBUG rustc_infer::traits::util super_predicates: data=TraitPredicate(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)\nDEBUG rustc_typeck::astconv matching_candidates=[Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)]\nDEBUG rustc_infer::traits::util super_predicates: data=TraitPredicate(&lt;Q as std::marker::Sized&gt;)\nDEBUG rustc_infer::traits::util super_predicates: data=TraitPredicate(&lt;Q as Query&gt;)\nDEBUG rustc_infer::traits::util super_predicates: data=TraitPredicate(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)\n</code></pre></div>",
        "id": 225324779,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612544008
    },
    {
        "content": "<p>that's the working version</p>",
        "id": 225324811,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612544017
    },
    {
        "content": "<p>try it with <code>-Zverbose</code></p>",
        "id": 225324827,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612544024
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>DEBUG rustc_typeck::collect super_predicates_that_define_assoc_type(trait_def_id=DefId(2:2086 ~ core[f78c]::marker::Sized), assoc_name=Some(Group#0))\nDEBUG rustc_typeck::collect super_predicates_that_define_assoc_type(trait_def_id=DefId(0:19 ~ test[317d]::Query), assoc_name=Some(Group#0))\nDEBUG rustc_typeck::collect super_predicates_that_define_assoc_type: local trait_def_id=DefId(0:19 ~ test[317d]::Query)\nDEBUG rustc_typeck::astconv instantiate_poly_trait_ref(TraitRef { path: Path { span: test.rs:29:26: 29:37 (#0), res: Def(Trait, DefId(0:15 ~ test[317d]::QueryDb)), segments: [PathSegment { ident: QueryDb#0, hir_id: Some(HirId { owner: DefId(0:19 ~ test[317d]::Query), local_id: 3 }), res: Some(Def(Trait, DefId(0:15 ~ test[317d]::QueryDb))), args: Some(GenericArgs { args: [Lifetime(lifetime(HirId { owner: DefId(0:19 ~ test[317d]::Query), local_id: 2 }: &#39;d))], bindings: [], parenthesized: false }), infer_args: false }] }, hir_ref_id: HirId { owner: DefId(0:19 ~ test[317d]::Query), local_id: 4 } }, def_id=DefId(0:15 ~ test[317d]::QueryDb))\nDEBUG rustc_typeck::astconv create_substs_for_ast_trait_ref(trait_segment=PathSegment { ident: QueryDb#0, hir_id: Some(HirId { owner: DefId(0:19 ~ test[317d]::Query), local_id: 3 }), res: Some(Def(Trait, DefId(0:15 ~ test[317d]::QueryDb))), args: Some(GenericArgs { args: [Lifetime(lifetime(HirId { owner: DefId(0:19 ~ test[317d]::Query), local_id: 2 }: &#39;d))], bindings: [], parenthesized: false }), infer_args: false })\nDEBUG rustc_typeck::astconv create_substs_for_ast_path(def_id=DefId(0:15 ~ test[317d]::QueryDb), self_ty=Some(Self), generic_args=GenericArgs { args: [Lifetime(lifetime(HirId { owner: DefId(0:19 ~ test[317d]::Query), local_id: 2 }: &#39;d))], bindings: [], parenthesized: false })\nDEBUG rustc_typeck::astconv ast_region_to_region(lifetime=lifetime(HirId { owner: DefId(0:19 ~ test[317d]::Query), local_id: 2 }: &#39;d)) yields ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed(DefId(0:20 ~ test[317d]::Query::&#39;d), &#39;d) })\nDEBUG rustc_typeck::astconv create_substs_for_ast_path(generic_params=Generics { parent: None, parent_count: 0, params: [GenericParamDef { name: &quot;Self&quot;, def_id: DefId(0:15 ~ test[317d]::QueryDb), index: 0, pure_wrt_drop: false, kind: Type { has_default: false, object_lifetime_default: Empty, synthetic: None } }, GenericParamDef { name: &quot;\\&#39;d&quot;, def_id: DefId(0:16 ~ test[317d]::QueryDb::&#39;d), index: 1, pure_wrt_drop: false, kind: Lifetime }], param_def_id_to_index: {DefId(0:16 ~ test[317d]::QueryDb::&#39;d): 1, DefId(0:15 ~ test[317d]::QueryDb): 0}, has_self: true, has_late_bound_regions: None }, self_ty=Some(Self)) -&gt; [Self, ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed(DefId(0:20 ~ test[317d]::Query::&#39;d), &#39;d) })]\nDEBUG rustc_typeck::astconv instantiate_poly_trait_ref(TraitRef { path: Path { span: test.rs:29:26: 29:37 (#0), res: Def(Trait, DefId(0:15 ~ test[317d]::QueryDb)), segments: [PathSegment { ident: QueryDb#0, hir_id: Some(HirId { owner: DefId(0:19 ~ test[317d]::Query), local_id: 3 }), res: Some(Def(Trait, DefId(0:15 ~ test[317d]::QueryDb))), args: Some(GenericArgs { args: [Lifetime(lifetime(HirId { owner: DefId(0:19 ~ test[317d]::Query), local_id: 2 }: &#39;d))], bindings: [], parenthesized: false }), infer_args: false }] }, hir_ref_id: HirId { owner: DefId(0:19 ~ test[317d]::Query), local_id: 4 } }, bounds=Bounds { region_bounds: [], trait_bounds: [(Binder(&lt;Self as QueryDb&lt;&#39;d&gt;&gt;), test.rs:29:18: 29:37 (#0), NotConst)], projection_bounds: [], implicitly_sized: None }) -&gt; Binder(&lt;Self as QueryDb&lt;&#39;d&gt;&gt;)\nDEBUG rustc_infer::traits::util transitive_bounds_that_define_assoc_type: trait_refs={Binder(&lt;Q as std::marker::Sized&gt;), Binder(&lt;Q as Query&gt;), Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;), Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)}\nDEBUG rustc_typeck::astconv matching_candidates=[Binder(&lt;Q as std::marker::Sized&gt;), Binder(&lt;Q as Query&gt;), Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;), Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)]\nDEBUG rustc_infer::traits::util transitive_bounds_that_define_assoc_type: trait_refs={Binder(&lt;Q as std::marker::Sized&gt;), Binder(&lt;Q as Query&gt;), Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;), Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)}\nDEBUG rustc_typeck::astconv matching_candidates=[Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;), Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)]\nDEBUG rustc_infer::traits::util transitive_bounds_that_define_assoc_type: trait_refs={Binder(&lt;Q as std::marker::Sized&gt;), Binder(&lt;Q as Query&gt;), Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;), Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)}\nDEBUG rustc_typeck::astconv one_bound_for_assoc_type: bound = Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)\nDEBUG rustc_typeck::astconv one_bound_for_assoc_type: bound2 = Binder(&lt;Q as QueryDb&lt;&#39;d&gt;&gt;)\n</code></pre></div>",
        "id": 225324837,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612544029
    },
    {
        "content": "<p>that's the non working version</p>",
        "id": 225324860,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612544037
    },
    {
        "content": "<p>need to make a bit sense of that but will be back in 15 mins</p>",
        "id": 225324915,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612544046
    },
    {
        "content": "<p>in the non working version, matching candidates have two of <code>Binder(&lt;Q as QueryDb&lt;'d&gt;&gt;)</code></p>",
        "id": 225329020,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612545822
    },
    {
        "content": "<p>You do need to use <code>-Zverbose</code> because just seeing <code>'d</code> is not enough</p>",
        "id": 225329121,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612545864
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 225329241,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612545921
    },
    {
        "content": "<p>running with <code>-Zverbose</code></p>",
        "id": 225329281,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612545941
    },
    {
        "content": "<p>and gonna try to figure out why there's two things there</p>",
        "id": 225329313,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612545956
    },
    {
        "content": "<p>are you saying that one is because of an HRTB and the other one is because of a simple lifetime?</p>",
        "id": 225329459,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612546008
    },
    {
        "content": "<p>or what?</p>",
        "id": 225329464,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612546009
    },
    {
        "content": "<p>no, they are both HRTB from what I can tell</p>",
        "id": 225329680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612546104
    },
    {
        "content": "<p>but the <em>name</em> is different</p>",
        "id": 225329685,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612546107
    },
    {
        "content": "<p>it's \"as if\" you had <code>for&lt;'a&gt;</code> and <code>for&lt;'b&gt;</code></p>",
        "id": 225329713,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612546119
    },
    {
        "content": "<p>i think that the name is different only in some unprinted part, a <code>DefId</code> or something</p>",
        "id": 225329732,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612546133
    },
    {
        "content": "<p>ok so</p>",
        "id": 225330172,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612546342
    },
    {
        "content": "<p>i am digging a bit through the logs</p>",
        "id": 225330179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612546346
    },
    {
        "content": "<p>ahh I see</p>",
        "id": 225330485,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612546478
    },
    {
        "content": "<p>I guess ...</p>",
        "id": 225331013,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612546753
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bound_predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">super_predicate</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">subst_predicate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">super_predicate</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">subst_supertrait</span><span class=\"p\">(</span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bound_predicate</span><span class=\"p\">.</span><span class=\"n\">rebind</span><span class=\"p\">(</span><span class=\"n\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">skip_binder</span><span class=\"p\">()));</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225331017,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612546756
    },
    {
        "content": "<p>may be wrong</p>",
        "id": 225331021,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612546759
    },
    {
        "content": "<p>I think I more or less see what's going on</p>",
        "id": 225332592,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547531
    },
    {
        "content": "<p>I start with a situation like</p>",
        "id": 225332668,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547545
    },
    {
        "content": "<blockquote>\n<p>DEBUG rustc_infer::traits::util transitive_bounds_that_define_assoc_type=(bounds=[Binder(&lt;Q as QueryDb&lt;ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed(DefId(0:7 ~ test[317d]::{impl#0}::'d), 'd) })&gt;&gt;), Binder(&lt;Q as Query&gt;), Binder(&lt;Q as std::marker::Sized&gt;)], assoc_name=Group#0)</p>\n</blockquote>",
        "id": 225332674,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547548
    },
    {
        "content": "<p>and end with</p>",
        "id": 225332722,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547571
    },
    {
        "content": "<blockquote>\n<p>DEBUG rustc_infer::traits::util transitive_bounds_that_define_assoc_type -&gt; {Binder(&lt;Q as std::marker::Sized&gt;), Binder(&lt;Q as Query&gt;), Binder(&lt;Q as QueryDb&lt;ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed(DefId(0:20 ~ test[317d]::Query::'d), 'd) })&gt;&gt;), Binder(&lt;Q as QueryDb&lt;ReLateBound(DebruijnIndex(0), BoundRegion { kind: BrNamed(DefId(0:7 ~ test[317d]::{impl#0}::'d), 'd) })&gt;&gt;)}</p>\n</blockquote>",
        "id": 225332730,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547573
    },
    {
        "content": "<p>there's this first <code>QueryDb</code> and the other one that we get when we ask for the super traits of <code>Query</code></p>",
        "id": 225332804,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547610
    },
    {
        "content": "<p>we end with 2 and insert on the FxHashSet doesn't consider them equal</p>",
        "id": 225332844,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547627
    },
    {
        "content": "<p>not 100% yet what's different and how is equality implemented for <code>Binder</code></p>",
        "id": 225332987,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547686
    },
    {
        "content": "<p>ugh</p>",
        "id": 225333003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547696
    },
    {
        "content": "<p>I have another set of calls now :)</p>",
        "id": 225333012,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547701
    },
    {
        "content": "<p>i was having lunch</p>",
        "id": 225333021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547704
    },
    {
        "content": "<p>so</p>",
        "id": 225333033,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547707
    },
    {
        "content": "<p>hmm let me see i have 5 minutes :)</p>",
        "id": 225333054,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225332844\">said</a>:</p>\n<blockquote>\n<p>we end with 2 and insert on the FxHashSet doesn't consider them equal</p>\n</blockquote>\n<p>right</p>",
        "id": 225333085,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547731
    },
    {
        "content": "<p>but what I don't know is --</p>",
        "id": 225333092,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547734
    },
    {
        "content": "<p>why doesn't that happen in the other code?</p>",
        "id": 225333103,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547737
    },
    {
        "content": "<p>in <code>transitive_bounds</code>?</p>",
        "id": 225333192,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547770
    },
    {
        "content": "<p>yes</p>",
        "id": 225333218,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547779
    },
    {
        "content": "<p>I guess that doesn't use an <code>FxHashSet</code>?</p>",
        "id": 225333220,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547780
    },
    {
        "content": "<p>it does</p>",
        "id": 225333226,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547784
    },
    {
        "content": "<p>hmm</p>",
        "id": 225333235,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547788
    },
    {
        "content": "<p>checking ...</p>",
        "id": 225333240,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547791
    },
    {
        "content": "<p>oh wait!</p>",
        "id": 225333254,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547800
    },
    {
        "content": "<p>it <em>doesn't</em></p>",
        "id": 225333259,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547801
    },
    {
        "content": "<p>ok, mystery solved</p>",
        "id": 225333281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547816
    },
    {
        "content": "<p>ahh :)</p>",
        "id": 225333284,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547817
    },
    {
        "content": "<p>it uses a <code>PredicateSet</code>, and you should too</p>",
        "id": 225333290,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547820
    },
    {
        "content": "<p>and that <code>PredicateSet</code> is precisely where the calls to <code>anonymize_predicate</code> occur</p>",
        "id": 225333306,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547829
    },
    {
        "content": "<p>now yes :)</p>",
        "id": 225333314,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547832
    },
    {
        "content": "<p>great</p>",
        "id": 225333330,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612547838
    },
    {
        "content": "<p><code>anonymize_predicate</code> is what does the renaming</p>",
        "id": 225333332,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547839
    },
    {
        "content": "<p>I figured that was the fix, but I couldn't quite tell why it was necessary :)</p>",
        "id": 225333341,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547847
    },
    {
        "content": "<p>cool :)</p>",
        "id": 225333373,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612547863
    },
    {
        "content": "<p>yeah, that's great :)</p>",
        "id": 225334416,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612548279
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_infer/src/traits/util.rs b/compiler/rustc_infer/src/traits/util.rs</span>\n<span class=\"gh\">index 8a1035707fe..f084c2570a0 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_infer/src/traits/util.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_infer/src/traits/util.rs</span>\n<span class=\"gu\">@@ -295,17 +295,20 @@ pub fn transitive_bounds_that_define_assoc_type&lt;'tcx&gt;(</span>\n ) -&gt; FxIndexSet&lt;ty::PolyTraitRef&lt;'tcx&gt;&gt; {\n     let mut stack: Vec&lt;_&gt; = bounds.collect();\n     let mut trait_refs = FxIndexSet::default();\n<span class=\"gi\">+    let mut visited = PredicateSet::new(tcx);</span>\n\n     while let Some(trait_ref) = stack.pop() {\n         if trait_refs.insert(trait_ref) {\n             let super_predicates =\n                 tcx.super_predicates_that_define_assoc_type((trait_ref.def_id(), Some(assoc_name)));\n             for (super_predicate, _) in super_predicates.predicates {\n<span class=\"gd\">-                let bound_predicate = super_predicate.kind();</span>\n<span class=\"gd\">-                let subst_predicate = super_predicate</span>\n<span class=\"gd\">-                    .subst_supertrait(tcx, &amp;bound_predicate.rebind(trait_ref.skip_binder()));</span>\n<span class=\"gd\">-                if let Some(binder) = subst_predicate.to_opt_poly_trait_ref() {</span>\n<span class=\"gd\">-                    stack.push(binder.value);</span>\n<span class=\"gi\">+                if visited.insert(*super_predicate) {</span>\n<span class=\"gi\">+                    let bound_predicate = super_predicate.kind();</span>\n<span class=\"gi\">+                    let subst_predicate = super_predicate</span>\n<span class=\"gi\">+                        .subst_supertrait(tcx, &amp;bound_predicate.rebind(trait_ref.skip_binder()));</span>\n<span class=\"gi\">+                    if let Some(binder) = subst_predicate.to_opt_poly_trait_ref() {</span>\n<span class=\"gi\">+                        stack.push(binder.value);</span>\n<span class=\"gi\">+                    }</span>\n                 }\n             }\n         }\n</code></pre></div>",
        "id": 225338185,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550016
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> was hoping that that worked, but does not</p>",
        "id": 225338208,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550025
    },
    {
        "content": "<p>ohh it's wrong :)</p>",
        "id": 225338660,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550234
    },
    {
        "content": "<p>what I've done is silly</p>",
        "id": 225338703,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550261
    },
    {
        "content": "<p>the problem is that the <code>PredicateSet</code> is about predicates but up before the loop I have trait_refs</p>",
        "id": 225338780,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550286
    },
    {
        "content": "<p>clearly I don't know that much what all these data structures represent and the work that <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span> proposed about refactoring <code>Binder</code> may be a good opportunity to learn better</p>",
        "id": 225338917,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550389
    },
    {
        "content": "<p>The key thing about <code>PredicateSet</code> is the <code>anonymize_predicate</code> call, I think</p>",
        "id": 225339059,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612550469
    },
    {
        "content": "<p>anyway</p>",
        "id": 225339074,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550485
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"n\">traits</span>::<span class=\"n\">transitive_bounds_that_define_assoc_type</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">tcx</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">predicates</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">filter_map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                        </span><span class=\"n\">p</span><span class=\"p\">.</span><span class=\"n\">to_opt_poly_trait_ref</span><span class=\"p\">().</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">trait_ref</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">trait_ref</span><span class=\"p\">.</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"p\">}),</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">assoc_name</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">into_iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 225339079,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550488
    },
    {
        "content": "<p>I already had predicates before calling that method</p>",
        "id": 225339104,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550505
    },
    {
        "content": "<p>so I can fix it from there</p>",
        "id": 225339200,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550545
    },
    {
        "content": "<p>I mean, you could just do <code>tcx.anonymize_late_bound_regions(trait_ref)</code></p>",
        "id": 225339239,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612550580
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225338185\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/compiler/rustc_infer/src/traits/util.rs b/compiler/rustc_infer/src/traits/util.rs</span>\n<span class=\"gh\">index 8a1035707fe..f084c2570a0 100644</span>\n<span class=\"gd\">--- a/compiler/rustc_infer/src/traits/util.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_infer/src/traits/util.rs</span>\n<span class=\"gu\">@@ -295,17 +295,20 @@ pub fn transitive_bounds_that_define_assoc_type&lt;'tcx&gt;(</span>\n ) -&gt; FxIndexSet&lt;ty::PolyTraitRef&lt;'tcx&gt;&gt; {\n     let mut stack: Vec&lt;_&gt; = bounds.collect();\n     let mut trait_refs = FxIndexSet::default();\n<span class=\"gi\">+    let mut visited = PredicateSet::new(tcx);</span>\n\n     while let Some(trait_ref) = stack.pop() {\n         if trait_refs.insert(trait_ref) {\n             let super_predicates =\n                 tcx.super_predicates_that_define_assoc_type((trait_ref.def_id(), Some(assoc_name)));\n             for (super_predicate, _) in super_predicates.predicates {\n<span class=\"gd\">-                let bound_predicate = super_predicate.kind();</span>\n<span class=\"gd\">-                let subst_predicate = super_predicate</span>\n<span class=\"gd\">-                    .subst_supertrait(tcx, &amp;bound_predicate.rebind(trait_ref.skip_binder()));</span>\n<span class=\"gd\">-                if let Some(binder) = subst_predicate.to_opt_poly_trait_ref() {</span>\n<span class=\"gd\">-                    stack.push(binder.value);</span>\n<span class=\"gi\">+                if visited.insert(*super_predicate) {</span>\n<span class=\"gi\">+                    let bound_predicate = super_predicate.kind();</span>\n<span class=\"gi\">+                    let subst_predicate = super_predicate</span>\n<span class=\"gi\">+                        .subst_supertrait(tcx, &amp;bound_predicate.rebind(trait_ref.skip_binder()));</span>\n<span class=\"gi\">+                    if let Some(binder) = subst_predicate.to_opt_poly_trait_ref() {</span>\n<span class=\"gi\">+                        stack.push(binder.value);</span>\n<span class=\"gi\">+                    }</span>\n                 }\n             }\n         }\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>oops you are using <code>PredicateSet</code> here</p>",
        "id": 225339316,
        "sender_full_name": "Jack Huey",
        "timestamp": 1612550640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232957\">Jack Huey</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225339239\">said</a>:</p>\n<blockquote>\n<p>I mean, you could just do <code>tcx.anonymize_late_bound_regions(trait_ref)</code></p>\n</blockquote>\n<p>ahh yeah, this should work then</p>",
        "id": 225339406,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550674
    },
    {
        "content": "<p>there's no need to use <code>PredicateSet</code></p>",
        "id": 225339444,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612550695
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> did you fix it now?</p>",
        "id": 225340285,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612551147
    },
    {
        "content": "<p>yes</p>",
        "id": 225340304,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612551154
    },
    {
        "content": "<p>about to push</p>",
        "id": 225340307,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612551156
    },
    {
        "content": "<p>wait</p>",
        "id": 225340348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612551176
    },
    {
        "content": "<p>ok</p>",
        "id": 225340352,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612551179
    },
    {
        "content": "<p>go ahead and push :)</p>",
        "id": 225340363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612551185
    },
    {
        "content": "<p>pushed to the PR</p>",
        "id": 225340380,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612551192
    },
    {
        "content": "<p>running all the tests locally meanwhile</p>",
        "id": 225340392,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612551199
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/80732\">#80732</a></p>",
        "id": 225340451,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612551228
    },
    {
        "content": "<p>and this is the commit in question <a href=\"https://github.com/rust-lang/rust/pull/80732/commits/eb6681e42451636656e42a7f94a1f8d63de6d95f\">https://github.com/rust-lang/rust/pull/80732/commits/eb6681e42451636656e42a7f94a1f8d63de6d95f</a></p>",
        "id": 225340534,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612551252
    },
    {
        "content": "<p>force pushing again because there are conflicts</p>",
        "id": 225340884,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612551426
    },
    {
        "content": "<p>done</p>",
        "id": 225340904,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612551436
    },
    {
        "content": "<p>after the change there's a change in an stderr file</p>",
        "id": 225351089,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556310
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>diff --git a/src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr b/src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr\nindex cadc3e9eab1..cf69b92f98e 100644\n--- a/src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr\n+++ b/src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr\n@@ -18,8 +18,8 @@ LL |     TupleVariant(I::A),\n    |\n help: use a fully qualified path with explicit lifetimes\n    |\n-LL | enum SomeEnum&lt;&#39;c, &#39;b, I: for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a isize&gt;&gt; {\n-LL |     TupleVariant(&lt;I as Foo&lt;&amp;&#39;c isize&gt;&gt;::A),\n+LL | enum SomeEnum&lt;&#39;a, &#39;b, I: for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a isize&gt;&gt; {\n+LL |     TupleVariant(&lt;I as Foo&lt;&amp;&#39;a isize&gt;&gt;::A),\n    |\n\n error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n@@ -30,10 +30,10 @@ LL |     StructVariant { field: I::A },\n    |\n help: use a fully qualified path with explicit lifetimes\n    |\n-LL | enum SomeEnum&lt;&#39;c, &#39;b, I: for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a isize&gt;&gt; {\n+LL | enum SomeEnum&lt;&#39;a, &#39;b, I: for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a isize&gt;&gt; {\n LL |     TupleVariant(I::A),\n LL |\n-LL |     StructVariant { field: &lt;I as Foo&lt;&amp;&#39;c isize&gt;&gt;::A },\n+LL |     StructVariant { field: &lt;I as Foo&lt;&amp;&#39;a isize&gt;&gt;::A },\n    |\n\n error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n@@ -44,9 +44,9 @@ LL |     field: I::A,\n    |\n help: use a fully qualified path with explicit lifetimes\n    |\n-LL | struct Why&lt;&#39;bb, &#39;a, &#39;b, &#39;c, &#39;d, &#39;e, &#39;f, &#39;g, &#39;h, &#39;i, &#39;j, &#39;k, &#39;n, &#39;o, &#39;p, &#39;q, &#39;r, &#39;s, &#39;t, &#39;u, &#39;v, &#39;w, &#39;x,\n+LL | struct Why&lt;&#39;l, &#39;a, &#39;b, &#39;c, &#39;d, &#39;e, &#39;f, &#39;g, &#39;h, &#39;i, &#39;j, &#39;k, &#39;n, &#39;o, &#39;p, &#39;q, &#39;r, &#39;s, &#39;t, &#39;u, &#39;v, &#39;w, &#39;x,\n LL |     &#39;y, &#39;z, &#39;aa, I: for&lt;&#39;l, &#39;m&gt; Foo&lt;&amp;&#39;l &amp;&#39;m isize&gt;&gt; {\n-LL |     field: &lt;I as Foo&lt;&amp;&#39;bb &amp;&#39;bb isize&gt;&gt;::A,\n+LL |     field: &lt;I as Foo&lt;&amp;&#39;l &amp;&#39;l isize&gt;&gt;::A,\n    |\n\n error: aborting due to 4 previous errors\n</code></pre></div>",
        "id": 225351102,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556320
    },
    {
        "content": "<p>not sure why that happens</p>",
        "id": 225351297,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556454
    },
    {
        "content": "<p>and not really sure if it's relevant</p>",
        "id": 225351322,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556473
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"232957\">@Jack Huey</span></p>",
        "id": 225351332,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556483
    },
    {
        "content": "<p>seems plausible</p>",
        "id": 225351363,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556505
    },
    {
        "content": "<p>I wouldn't wory about it</p>",
        "id": 225351366,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556508
    },
    {
        "content": "<p>we might be visiting the list in a somewhat different order or something</p>",
        "id": 225351386,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556519
    },
    {
        "content": "<p>the thing is</p>",
        "id": 225351435,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556532
    },
    {
        "content": "<p>wait let me check</p>",
        "id": 225351436,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556532
    },
    {
        "content": "<p>it looks a bit different, doesn't it</p>",
        "id": 225351447,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556539
    },
    {
        "content": "<p>in particular check</p>",
        "id": 225351453,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556545
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>-LL | enum SomeEnum&lt;&#39;c, &#39;b, I: for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a isize&gt;&gt; {\n-LL |     TupleVariant(&lt;I as Foo&lt;&amp;&#39;c isize&gt;&gt;::A),\n+LL | enum SomeEnum&lt;&#39;a, &#39;b, I: for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a isize&gt;&gt; {\n+LL |     TupleVariant(&lt;I as Foo&lt;&amp;&#39;a isize&gt;&gt;::A),\n</code></pre></div>",
        "id": 225351455,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556548
    },
    {
        "content": "<p>oh I see</p>",
        "id": 225351472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556558
    },
    {
        "content": "<p>the <em>names</em> are different, but the meaning is the same</p>",
        "id": 225351488,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556567
    },
    {
        "content": "<p>right</p>",
        "id": 225351498,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556573
    },
    {
        "content": "<p>though that might give a compilation error because shadowing</p>",
        "id": 225351505,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556576
    },
    {
        "content": "<p>huh, curious</p>",
        "id": 225351514,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556578
    },
    {
        "content": "<p>are those old tests?</p>",
        "id": 225351528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556582
    },
    {
        "content": "<p>yes</p>",
        "id": 225351539,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556586
    },
    {
        "content": "<p>I'm not sure what code generates those suggestions</p>",
        "id": 225351562,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556603
    },
    {
        "content": "<p>and why this</p>",
        "id": 225351670,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556648
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- a/compiler/rustc_infer/src/traits/util.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_infer/src/traits/util.rs</span>\n<span class=\"gu\">@@ -297,6 +297,7 @@ pub fn transitive_bounds_that_define_assoc_type&lt;'tcx&gt;(</span>\n     let mut trait_refs = FxIndexSet::default();\n\n     while let Some(trait_ref) = stack.pop() {\n<span class=\"gi\">+        let trait_ref = tcx.anonymize_late_bound_regions(trait_ref);</span>\n         if trait_refs.insert(trait_ref) {\n             let super_predicates =\n                 tcx.super_predicates_that_define_assoc_type((trait_ref.def_id(), Some(assoc_name)));\n</code></pre></div>",
        "id": 225351675,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556651
    },
    {
        "content": "<p>changes that</p>",
        "id": 225351683,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556655
    },
    {
        "content": "<p>well, unless is not that</p>",
        "id": 225351715,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556670
    },
    {
        "content": "<p>can try that test without that change</p>",
        "id": 225351746,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556685
    },
    {
        "content": "<p>anyway my question is</p>",
        "id": 225351761,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225351455\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\"><pre><span></span><code>-LL | enum SomeEnum&lt;&#39;c, &#39;b, I: for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a isize&gt;&gt; {\n-LL |     TupleVariant(&lt;I as Foo&lt;&amp;&#39;c isize&gt;&gt;::A),\n+LL | enum SomeEnum&lt;&#39;a, &#39;b, I: for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a isize&gt;&gt; {\n+LL |     TupleVariant(&lt;I as Foo&lt;&amp;&#39;a isize&gt;&gt;::A),\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>are those the same?</p>",
        "id": 225351776,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556699
    },
    {
        "content": "<p>I wasn't sure if using <code>'a</code> twice, one as a lifetime parameter of <code>SomeEnum</code> and another time as a HRTB of another bound <code>I</code> of a generic type is ok or not</p>",
        "id": 225351940,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556777
    },
    {
        "content": "<p>waot</p>",
        "id": 225352010,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556827
    },
    {
        "content": "<p>wait</p>",
        "id": 225352015,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556829
    },
    {
        "content": "<p>I dont' like that diff :)</p>",
        "id": 225352021,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556832
    },
    {
        "content": "<p>let me pull your branch</p>",
        "id": 225352028,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612556836
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 225352148,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612556903
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116266\">Santiago Pastorino</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Salsa.20issue.20on.20Allow.20Trait.20inheritance.20with.20cycles/near/225351675\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">--- a/compiler/rustc_infer/src/traits/util.rs</span>\n<span class=\"gi\">+++ b/compiler/rustc_infer/src/traits/util.rs</span>\n<span class=\"gu\">@@ -297,6 +297,7 @@ pub fn transitive_bounds_that_define_assoc_type&lt;'tcx&gt;(</span>\n     let mut trait_refs = FxIndexSet::default();\n\n     while let Some(trait_ref) = stack.pop() {\n<span class=\"gi\">+        let trait_ref = tcx.anonymize_late_bound_regions(trait_ref);</span>\n         if trait_refs.insert(trait_ref) {\n             let super_predicates =\n                 tcx.super_predicates_that_define_assoc_type((trait_ref.def_id(), Some(assoc_name)));\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I can confirm that the test changes with this change</p>",
        "id": 225352448,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612557071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> so I was looking a bit into this</p>",
        "id": 225523227,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612778950
    },
    {
        "content": "<p>the relevant message is <a href=\"https://github.com/rust-lang/rust/blob/4940dd483a8448c0f1ef28d304fad88a9d983c4e/compiler/rustc_typeck/src/collect.rs#L372\">generated around here</a></p>",
        "id": 225523613,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612779179
    },
    {
        "content": "<p>so it must be something causing this <code>get_new_lifetime_name</code> to behave differently</p>",
        "id": 225523629,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612779193
    },
    {
        "content": "<p>My guess would be that <em>somehow</em> we are getting the anonymized trait ref in there, and hence the <code>get_new_lifetime_name</code> is now collecting no named lifetimes</p>",
        "id": 225525823,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612780625
    },
    {
        "content": "<p>I don't quite understand why this is different than before though</p>",
        "id": 225525832,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612780634
    },
    {
        "content": "<p>Unless...</p>",
        "id": 225525837,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612780640
    },
    {
        "content": "<p>OK, <span class=\"user-mention\" data-user-id=\"116266\">@Santiago Pastorino</span> -- this is what I think is different</p>",
        "id": 225525876,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612780673
    },
    {
        "content": "<p>In the original <code>Elaborator</code>, I think it has two distinct sets. One of them is for tracking which trait refs are <em>new</em> (and that contains anonymized results) and the other is for returning the result (and that does not)</p>",
        "id": 225525966,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612780716
    },
    {
        "content": "<p>ohhh :facepalm:</p>",
        "id": 225544597,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612791400
    },
    {
        "content": "<p>was just going to take a look at this and saw your messages</p>",
        "id": 225545096,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612791655
    },
    {
        "content": "<p>fixing it</p>",
        "id": 225545099,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612791657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ready for review</p>",
        "id": 225546008,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612792109
    },
    {
        "content": "<p>just in case <a href=\"https://github.com/rust-lang/rust/issues/80732\">#80732</a>, just force pushed</p>",
        "id": 225546089,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612792154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> maybe this needs a little bit better design, like we could return a new type on <code>transitive_bounds_that_define_assoc_type</code></p>",
        "id": 225548215,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793119
    },
    {
        "content": "<p>something similar to <code>Supertraits</code></p>",
        "id": 225548236,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793129
    },
    {
        "content": "<p>I don't know if that's necessary</p>",
        "id": 225548260,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793145
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 225548287,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793158
    },
    {
        "content": "<p>in any case, I was going to say, if makes sense maybe it's good for a follow-up PR</p>",
        "id": 225548344,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793171
    },
    {
        "content": "<p>but anyway, whatever you prefer</p>",
        "id": 225548355,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793178
    },
    {
        "content": "<p>Well</p>",
        "id": 225548531,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793262
    },
    {
        "content": "<p>The only real reason to do so would be to return an iterator, I guess</p>",
        "id": 225548564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793278
    },
    {
        "content": "<p>I'm not sure how much that matters</p>",
        "id": 225548585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793283
    },
    {
        "content": "<p>If you were going to do so, we could do it with <code>-&gt; impl Iterator</code></p>",
        "id": 225548631,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793292
    },
    {
        "content": "<p>well not possible</p>",
        "id": 225548650,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793307
    },
    {
        "content": "<p>unsure why</p>",
        "id": 225548653,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793308
    },
    {
        "content": "<p>let me show you</p>",
        "id": 225548656,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793311
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>error[E0277]: `Vec&lt;Binder&lt;rustc_middle::ty::TraitRef&lt;&#39;_&gt;&gt;&gt;` is not an iterator\n   --&gt; compiler/rustc_infer/src/traits/util.rs:295:6\n    |\n295 | ) -&gt; impl Iterator&lt;Item = ty::PolyTraitRef&lt;&#39;tcx&gt;&gt; {\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `Vec&lt;Binder&lt;rustc_middle::ty::TraitRef&lt;&#39;_&gt;&gt;&gt;` is not an iterator\n    |\n    = help: the trait `ParallelIterator` is not implemented for `Vec&lt;Binder&lt;rustc_middle::ty::TraitRef&lt;&#39;_&gt;&gt;&gt;`\n</code></pre></div>",
        "id": 225548680,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793327
    },
    {
        "content": "<p>no I mean</p>",
        "id": 225548688,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793333
    },
    {
        "content": "<p>you'd hvae to retool it a bit</p>",
        "id": 225548707,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793339
    },
    {
        "content": "<p>probably use <code>std::iter::from_fn</code></p>",
        "id": 225548720,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793344
    },
    {
        "content": "<p>right</p>",
        "id": 225548729,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793348
    },
    {
        "content": "<p>honestly I doubt it matters</p>",
        "id": 225548730,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793348
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 225548755,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793369
    },
    {
        "content": "<p>why am I getting that error btw?</p>",
        "id": 225548775,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793381
    },
    {
        "content": "<p>well, a Vec is not an iterator</p>",
        "id": 225548796,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793393
    },
    {
        "content": "<p>you could return <code>-&gt; impl IntoIterator</code></p>",
        "id": 225548805,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793400
    },
    {
        "content": "<p>or return <code>vec.into_iter()</code></p>",
        "id": 225548851,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793404
    },
    {
        "content": "<p>why is ParallelIterator needed here?</p>",
        "id": 225548856,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793406
    },
    {
        "content": "<p>oh <em>that</em></p>",
        "id": 225548865,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793410
    },
    {
        "content": "<p>yeah</p>",
        "id": 225548866,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793410
    },
    {
        "content": "<p>uh....... I have no idea what's up with that :)</p>",
        "id": 225548873,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793415
    },
    {
        "content": "<p>that must be some bit of error message machinery trying to be helpful</p>",
        "id": 225548890,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612793425
    },
    {
        "content": "<p>anyway, yeah, let me make this an iterator and I think it's ready</p>",
        "id": 225549010,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793498
    },
    {
        "content": "<p>done!</p>",
        "id": 225549109,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793533
    },
    {
        "content": "<p>force pushed</p>",
        "id": 225549119,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612793537
    },
    {
        "content": "<p>looking</p>",
        "id": 225550581,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612794188
    },
    {
        "content": "<p>I think if you're going to make it return <code>-&gt; impl IntoIterator</code>, you might as well make it a <em>real</em> iterator</p>",
        "id": 225550728,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612794245
    },
    {
        "content": "<p>not sure it's worth the trouble though</p>",
        "id": 225550737,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612794251
    },
    {
        "content": "<p>by 'real iterator' I mean not computing the whole vector in advance</p>",
        "id": 225550754,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612794262
    },
    {
        "content": "<p>makes sense</p>",
        "id": 225558713,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612797538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> force pushed again</p>",
        "id": 225564585,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612799938
    },
    {
        "content": "<p>did you?</p>",
        "id": 225564708,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612800000
    },
    {
        "content": "<p>it doesn't look different to me</p>",
        "id": 225564787,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1612800015
    },
    {
        "content": "<p>seems like github is having some issues?</p>",
        "id": 225564903,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612800062
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> I think you should be able to see it now</p>",
        "id": 225565176,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612800167
    },
    {
        "content": "<p>but I was getting some 500 from github</p>",
        "id": 225565187,
        "sender_full_name": "Santiago Pastorino",
        "timestamp": 1612800173
    }
]