[
    {
        "content": "<p>starting the pre-triage process many hours before the meeting again this week</p>",
        "id": 185779917,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579141997
    },
    {
        "content": "<p>we have 9 <a href=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AT-compiler+-label%3AP-high++-label%3AP-medium+-label%3AP-low+label%3AI-nominated\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues?utf8=%E2%9C%93&amp;q=is%3Aopen+is%3Aissue+label%3AT-compiler+-label%3AP-high++-label%3AP-medium+-label%3AP-low+label%3AI-nominated\">nominated unprioritized issues</a></p>",
        "id": 185780402,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579142723
    },
    {
        "content": "<p>nom unpri 1/9: \"Mutex and RwLock are unsound in presence of discriminant elision\" <a href=\"https://github.com/rust-lang/rust/issues/68206\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68206\">#68206</a></p>",
        "id": 185780492,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579142860
    },
    {
        "content": "<p>this is probably going to end up being a T-lang + T-libs issue. I cannot imagine it being something that we try to resolve in the compiler itself.</p>",
        "id": 185780540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579142887
    },
    {
        "content": "<p>Though the compiler team <em>can</em> fix the immediate soundness issue by \"just\" disallowing <code>UnsafeCell&lt;T&gt;</code> to expose the same niche as <code>T</code>.</p>",
        "id": 185780572,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579142986
    },
    {
        "content": "<p>(The only other option I can imagine is to say that it is the duty of library authors to figure out what combination of <code>UnsafeCell :: * -&gt; *</code> and <code>MaybeUninitialized :: * -&gt; *</code>  they need for their particular abstract data type...)</p>",
        "id": 185780628,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579143054
    },
    {
        "content": "<p>anyway lets call this P-high, there is at least one clear way to address the soundness issue here; the only question is whether it is the way we want (i.e. whether we can swallow losing the niche optimization for <code>Cell&lt;T&gt;</code>)</p>",
        "id": 185780864,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579143390
    },
    {
        "content": "<p>(gotta pause for family stuff)</p>",
        "id": 185780891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579143441
    },
    {
        "content": "<p>so yeah, <a href=\"https://github.com/rust-lang/rust/issues/68206\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68206\">#68206</a> is P-high but I'm leaving the I-nominated tag.</p>",
        "id": 185782678,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579145716
    },
    {
        "content": "<p>nom unpri 2/9: \"SystemV ABI Mismatch on x86 with a <code>repr(C) enum</code> for <code>extern \"C\"</code>/FFI functions.\" <a href=\"https://github.com/rust-lang/rust/issues/68190\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68190\">#68190</a></p>",
        "id": 185782683,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579145738
    },
    {
        "content": "<p>This is probably T-lang too as well. Adding tag.</p>",
        "id": 185782737,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579145811
    },
    {
        "content": "<p>(though its possible its \"just\" a compiler bug. Cannot tell yet.)</p>",
        "id": 185782829,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579145959
    },
    {
        "content": "<p>anyway, I'm leaving the nominated tag on this, and explicitly not attempting to triage it</p>",
        "id": 185782831,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579145976
    },
    {
        "content": "<p>(and I put it on the explicit list of nominated issues on the <a href=\"https://hackmd.io/ruw4k37lSJ6RDVOFfhdQ7Q?edit\" target=\"_blank\" title=\"https://hackmd.io/ruw4k37lSJ6RDVOFfhdQ7Q?edit\">hackmd</a> I just allocated.)</p>",
        "id": 185782962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579146180
    },
    {
        "content": "<p>nom unpri 3/9: \"[spurious] thread 'rustc' panicked at 'slice index starts at 24722962 but ends at 13279232', src/libcore/slice/mod.rs:2680:5\" <a href=\"https://github.com/rust-lang/rust/issues/68132\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68132\">#68132</a></p>",
        "id": 185782974,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579146207
    },
    {
        "content": "<p>not sure we're going to be able to do much with this bug as written...</p>",
        "id": 185783044,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579146304
    },
    {
        "content": "<p>there is at least a backtrace, but the problem itself is arising with a \"custom codegen backend\". The failure happens while compiling hashbrown but who knows what overall context is for actual reproduction.</p>",
        "id": 185783101,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579146373
    },
    {
        "content": "<p>wrote a comment. Not really willing to put a priority label down yet.</p>",
        "id": 185783198,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579146582
    },
    {
        "content": "<p>nom unpri 4/9: \"rustc panics when compiling code that uses tokio's LocalSet\" <a href=\"https://github.com/rust-lang/rust/issues/68109\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68109\">#68109</a></p>",
        "id": 185783204,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579146600
    },
    {
        "content": "<p>this is believed to be fixed</p>",
        "id": 185783255,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579146642
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/68109\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68109\">#68109</a>: P-high, removing nomination label.</p>",
        "id": 185783258,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579146654
    },
    {
        "content": "<p>nom unpri 5/9: \"broken MIR (NoSolution) in closure with a parameter whose type is an alias for a reference to an associated type\" <a href=\"https://github.com/rust-lang/rust/issues/68090\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68090\">#68090</a></p>",
        "id": 185783271,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579146717
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/68090\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68090\">#68090</a>: P-high, removing nomination label</p>",
        "id": 185783388,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579146848
    },
    {
        "content": "<p>nom unpri 6/9: \"<code>miri</code> no longer builds after <a href=\"https://github.com/rust-lang/rust/issues/68078\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68078\">rust-lang/rust#68078</a>\" <a href=\"https://github.com/rust-lang/rust/issues/68081\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68081\">#68081</a></p>",
        "id": 185784138,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579147985
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/68081\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68081\">#68081</a>: P-medium, removing nomination label.</p>",
        "id": 185784143,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579147995
    },
    {
        "content": "<p>nom unpri 7/9: \"<code>rls</code> no longer builds after <a href=\"https://github.com/rust-lang/rust/issues/68047\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68047\">rust-lang/rust#68047</a>\" <a href=\"https://github.com/rust-lang/rust/issues/68068\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68068\">#68068</a></p>",
        "id": 185784153,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148040
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/68068\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/68068\">#68068</a>: P-medium, removing nomination label.</p>",
        "id": 185784195,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148052
    },
    {
        "content": "<p>nom unpri 8/9: \"Project fails to link when using dylibs and the -Zshare-generics flag\" <a href=\"https://github.com/rust-lang/rust/issues/67276\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67276\">#67276</a></p>",
        "id": 185784293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148261
    },
    {
        "content": "<p>based on the comment thread, I don't think this is (currently) a T-compiler issue.</p>",
        "id": 185784446,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148461
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> why did you remove the T-libs tag from the above? I missed the relevant T-lang meeting last week so maybe there is  relevant context I'm missing.</p>",
        "id": 185784540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148598
    },
    {
        "content": "<p>which one?</p>",
        "id": 185784554,
        "sender_full_name": "centril",
        "timestamp": 1579148640
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span></p>",
        "id": 185784655,
        "sender_full_name": "centril",
        "timestamp": 1579148746
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/67276\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67276\">#67276</a></p>",
        "id": 185784664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148762
    },
    {
        "content": "<p>or wait</p>",
        "id": 185784704,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148771
    },
    {
        "content": "<p>did I jump ahead ...</p>",
        "id": 185784707,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148775
    },
    {
        "content": "<p>ugh sorry</p>",
        "id": 185784710,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148785
    },
    {
        "content": "<p>my fault, its too late at night</p>",
        "id": 185784713,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148794
    },
    {
        "content": "<p>everything from the \"based on the comment thread, I don't think this is (currently) a T-compiler issue.\" and after that was regarding the last nom unpri issue, namely</p>",
        "id": 185784736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148837
    },
    {
        "content": "<p>nom unpri 9/8: \"PartialEq implementation for RangeInclusive is unsound\" <a href=\"https://github.com/rust-lang/rust/issues/67194\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67194\">#67194</a></p>",
        "id": 185784782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148884
    },
    {
        "content": "<p>so <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> my Q was regarding <a href=\"https://github.com/rust-lang/rust/issues/67194\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67194\">#67194</a></p>",
        "id": 185784786,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> t-lang decided what to do (see Niko's comment) and now it needs execution</p>",
        "id": 185784799,
        "sender_full_name": "centril",
        "timestamp": 1579148937
    },
    {
        "content": "<p>but the thing to do was to remove a specialization impl</p>",
        "id": 185784811,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148958
    },
    {
        "content": "<p>right</p>",
        "id": 185784812,
        "sender_full_name": "centril",
        "timestamp": 1579148963
    },
    {
        "content": "<p>that's a T-libs <del>take</del> task, not a T-compiler one, right?</p>",
        "id": 185784815,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148966
    },
    {
        "content": "<p>in terms of determining fallout etc?</p>",
        "id": 185784818,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579148971
    },
    {
        "content": "<p>I'm happy to go and try to do it, in terms of making a quick PR and requesting a perf run</p>",
        "id": 185784868,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579149003
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> my take is that \"implementation details\" are t-compiler and \"specification / public API\" matters are T-lang &amp; t-libs respectively</p>",
        "id": 185784872,
        "sender_full_name": "centril",
        "timestamp": 1579149010
    },
    {
        "content": "<p>hmm I don't know, implementation details of the stdlib I always figured was the domain of T-libs, at least if it doesn't involve adding/using compiler intrinstics...</p>",
        "id": 185784884,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579149055
    },
    {
        "content": "<p>I suppose it can be both? Anyways; t-compiler feels more active so I thought it would get things done quicker</p>",
        "id": 185784963,
        "sender_full_name": "centril",
        "timestamp": 1579149129
    },
    {
        "content": "<p>I'm going to put T-libs back on just so they remain in the loop. The nomination can maybe be removed, I guess.</p>",
        "id": 185784984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579149167
    },
    {
        "content": "<p>and I'll call this P-high</p>",
        "id": 185784992,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579149174
    },
    {
        "content": "<p>sgtm</p>",
        "id": 185784996,
        "sender_full_name": "centril",
        "timestamp": 1579149178
    },
    {
        "content": "<p>as in</p>",
        "id": 185784997,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579149179
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/67194\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67194\">#67194</a>: P-high, removing nomination label, adding T-libs label.</p>",
        "id": 185785016,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579149197
    },
    {
        "content": "<p>thanks for filling me in</p>",
        "id": 185785022,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579149209
    },
    {
        "content": "<p><span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 185785031,
        "sender_full_name": "centril",
        "timestamp": 1579149218
    },
    {
        "content": "<p>/me tunes out to watch the last democratic debate</p>",
        "id": 185785035,
        "sender_full_name": "centril",
        "timestamp": 1579149229
    },
    {
        "content": "<p>(I wonder if we could make a lint to catch the pattern that niko described in <a href=\"https://github.com/rust-lang/rust/issues/67194#issuecomment-572798406\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67194#issuecomment-572798406\">their comment</a>)</p>",
        "id": 185785263,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579149512
    },
    {
        "content": "<p>(iirc that was suggested in the meeting -- sounds like a good idea potentially)</p>",
        "id": 185785287,
        "sender_full_name": "centril",
        "timestamp": 1579149559
    },
    {
        "content": "<blockquote>\n<p>pnkfelix: there is at least a backtrace, but the problem itself is arising with a \"custom codegen backend\". The failure happens while compiling hashbrown but who knows what overall context is for actual reproduction.<br>\npnkfelix: wrote a comment. Not really willing to put a priority label down yet.</p>\n</blockquote>\n<p>I would say P-medium and let bjorn3 figure it out as part of integrating cranelift</p>",
        "id": 185786065,
        "sender_full_name": "centril",
        "timestamp": 1579150729
    },
    {
        "content": "<blockquote>\n<p>Though the compiler team can fix the immediate soundness issue by \"just\" disallowing UnsafeCell&lt;T&gt; to expose the same niche as T.</p>\n</blockquote>\n<p>If it isn't a big hassle, I think it would be worthwhile to do this before the language team meeting experimentally for perf to have that data available in the meeting</p>",
        "id": 185786088,
        "sender_full_name": "centril",
        "timestamp": 1579150797
    },
    {
        "content": "<blockquote>\n<p>If it isn't a big hassle, I think it would be worthwhile to do this before the language team meeting experimentally for perf to have that data available in the meeting</p>\n</blockquote>\n<p>yeah I'm trying to put together that PR now</p>",
        "id": 185786153,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579150838
    },
    {
        "content": "<p>Now I'm curious if this breaks the guarantees of <code>#[repr(transparent)]</code> on <code>struct UnsafeCell</code>. I'll have to go and review that RFC.</p>",
        "id": 185787281,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579152763
    },
    {
        "content": "<p>ah i'm getting all kinds of <a href=\"https://github.com/rust-lang/rfcs/pull/2645#issuecomment-470699497\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2645#issuecomment-470699497\">deja vu</a></p>",
        "id": 185787451,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579153003
    },
    {
        "content": "<p>specifically this <a href=\"https://github.com/rust-lang/rfcs/pull/2645#issuecomment-471063159\" target=\"_blank\" title=\"https://github.com/rust-lang/rfcs/pull/2645#issuecomment-471063159\">note</a> from <span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> : \"<code>repr(transparent)</code> in struct and enum guarantees that all three of them are the same, but on unions it can only guarantee that the first two are the same\"</p>",
        "id": 185788004,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579153993
    },
    {
        "content": "<p>Including the desirata that <code>#[repr(transparent)]</code> passes the niche through to the surrounding context may have been premature.  Or at least, I don't see the motivation yet.</p>",
        "id": 185788057,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579154088
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/67743\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/67743\">https://github.com/rust-lang/rust/issues/67743</a> has been blocking Rust Playground nightly version's build for a few (14+) days. Very personally i wish it be nominated a little...</p>",
        "id": 185818682,
        "sender_full_name": "Charles Lew",
        "timestamp": 1579184696
    },
    {
        "content": "<p>well lets add that to the nominated issues</p>",
        "id": 185818727,
        "sender_full_name": "pnkfelix",
        "timestamp": 1579184739
    },
    {
        "content": "<p>When <code>T-compiler</code> nominated PRs are usually discussed?<br>\n<a href=\"https://github.com/rust-lang/rust/pulls?q=is%3Aopen+is%3Apr+label%3AT-compiler+label%3AI-nominated\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/pulls?q=is%3Aopen+is%3Apr+label%3AT-compiler+label%3AI-nominated\">https://github.com/rust-lang/rust/pulls?q=is%3Aopen+is%3Apr+label%3AT-compiler+label%3AI-nominated</a></p>",
        "id": 185820012,
        "sender_full_name": "mati865",
        "timestamp": 1579185640
    },
    {
        "content": "<p>when/if we get to them, they are the last thing before check ins</p>",
        "id": 185820755,
        "sender_full_name": "oli",
        "timestamp": 1579186088
    },
    {
        "content": "<p>see <a href=\"https://hackmd.io/ruw4k37lSJ6RDVOFfhdQ7Q?edit\" target=\"_blank\" title=\"https://hackmd.io/ruw4k37lSJ6RDVOFfhdQ7Q?edit\">https://hackmd.io/ruw4k37lSJ6RDVOFfhdQ7Q?edit</a></p>",
        "id": 185820768,
        "sender_full_name": "oli",
        "timestamp": 1579186096
    },
    {
        "content": "<p>oh wait, that is issues</p>",
        "id": 185820810,
        "sender_full_name": "oli",
        "timestamp": 1579186134
    },
    {
        "content": "<p>that's why I asked <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 185820988,
        "sender_full_name": "mati865",
        "timestamp": 1579186251
    },
    {
        "content": "<p>I added them</p>",
        "id": 185821131,
        "sender_full_name": "oli",
        "timestamp": 1579186359
    }
]