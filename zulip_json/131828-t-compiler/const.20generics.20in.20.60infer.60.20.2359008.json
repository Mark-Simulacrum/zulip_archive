[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> (not sure what yodaldevoid's Zulip name is),</p>\n<p>I'm reviewing <a href=\"https://github.com/rust-lang/rust/issues/59008\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59008\">#59008</a> and I have a few questions. To start, what is the story with <code>LazyConst</code>?</p>",
        "id": 163579304,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555519838
    },
    {
        "content": "<p>i.e., initially it's there, but when I check out the branch locally, it's not -- so I gather you removed it along the way</p>",
        "id": 163579336,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555519854
    },
    {
        "content": "<p>I'm not sure yodal is on Zulip</p>",
        "id": 163579353,
        "sender_full_name": "varkor",
        "timestamp": 1555519862
    },
    {
        "content": "<p>Is that just a renaming thing, or is it a deeper change in strategy?</p>",
        "id": 163579378,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555519876
    },
    {
        "content": "<p>yeah, <code>LazyConst</code> has since been removed</p>",
        "id": 163579393,
        "sender_full_name": "varkor",
        "timestamp": 1555519887
    },
    {
        "content": "<p>Also, just a side observation:</p>\n<p>If we had had the design meetings already, this would have been an awesome PR to go through such meetings. Reviewing this sort of thing would be <em>so much easier</em> if I had a clearer idea of what to expect when going into it.</p>\n<p>It's probably a good 'case study' to think about what improvements we could make.</p>",
        "id": 163579480,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555519930
    },
    {
        "content": "<p>previously, <code>Const</code> was split into <code>LazyConst::Unevaluated</code> and <code>LazyConst::Evaluated</code> (with all the various <code>Const</code> variants inside <code>Evaluated</code>)</p>",
        "id": 163579483,
        "sender_full_name": "varkor",
        "timestamp": 1555519935
    },
    {
        "content": "<p>ok</p>",
        "id": 163579513,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555519975
    },
    {
        "content": "<blockquote>\n<p>this would have been an awesome PR to go through such meetings</p>\n</blockquote>\n<p>ah, that's true</p>",
        "id": 163579556,
        "sender_full_name": "varkor",
        "timestamp": 1555520019
    },
    {
        "content": "<blockquote>\n<p>previously, <code>Const</code> was split into <code>LazyConst::Unevaluated</code> and <code>LazyConst::Evaluated</code> (with all the various <code>Const</code> variants inside <code>Evaluated</code>)</p>\n</blockquote>\n<p>and now? :)</p>",
        "id": 163579673,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520088
    },
    {
        "content": "<p>(so, to clarify, the <code>LazyConst</code> discussion/changes are essentially just irrelevant aesthetic changes — it was just making the PR harder to read before it got refactored)</p>",
        "id": 163579675,
        "sender_full_name": "varkor",
        "timestamp": 1555520092
    },
    {
        "content": "<p>ok</p>",
        "id": 163579692,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520107
    },
    {
        "content": "<p>now all the variants are in a single <code>ConstValue</code> enum</p>",
        "id": 163579695,
        "sender_full_name": "varkor",
        "timestamp": 1555520109
    },
    {
        "content": "<p>which is how it was before <code>LazyConst</code></p>",
        "id": 163579698,
        "sender_full_name": "varkor",
        "timestamp": 1555520115
    },
    {
        "content": "<p><code>LazyConst</code> wasn't actually around for very long</p>",
        "id": 163579712,
        "sender_full_name": "varkor",
        "timestamp": 1555520139
    },
    {
        "content": "<p>ok, ok</p>",
        "id": 163579815,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520206
    },
    {
        "content": "<p>One thing I am wondering about is what the \"normalization strategy\" is</p>",
        "id": 163579848,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520241
    },
    {
        "content": "<p>i.e., is this meant to be \"eager normalized\" in the same way as associated types?</p>",
        "id": 163579875,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520264
    },
    {
        "content": "<p>I didn't make any deliberate decisions when it came to normalisation <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span><br>\nif I didn't know what should be done, I generally tried to follow a similar strategy to the analogous methods for type variables</p>",
        "id": 163579997,
        "sender_full_name": "varkor",
        "timestamp": 1555520354
    },
    {
        "content": "<p>so it's possible that there are some confusing \"design\" choices with regards to normalisation</p>",
        "id": 163580019,
        "sender_full_name": "varkor",
        "timestamp": 1555520379
    },
    {
        "content": "<p>(that is to say, I don't feel I have such a good overview of the situation when it comes to normalisation in general)</p>",
        "id": 163580144,
        "sender_full_name": "varkor",
        "timestamp": 1555520471
    },
    {
        "content": "<p>ok</p>",
        "id": 163580252,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520555
    },
    {
        "content": "<p>but the <code>Unevaluated</code> constant is meant to be a kind of \"unnormalized\" constant reference, right?</p>",
        "id": 163580264,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520573
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span> <span class=\"nc\">ConstValue</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other</span>\n<span class=\"w\">    </span><span class=\"sd\">/// variants when the code is monomorphic enough for that.</span>\n<span class=\"w\">    </span><span class=\"n\">Unevaluated</span><span class=\"p\">(</span><span class=\"n\">DefId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">SubstsRef</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 163580281,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520587
    },
    {
        "content": "<p>i.e., that <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 163580284,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520591
    },
    {
        "content": "<p>ah, I think the general principle is to leave it <code>Unevaluated</code> as long as possible</p>",
        "id": 163580301,
        "sender_full_name": "varkor",
        "timestamp": 1555520623
    },
    {
        "content": "<blockquote>\n<p>(so, to clarify, the <code>LazyConst</code> discussion/changes are essentially just irrelevant aesthetic changes — it was just making the PR harder to read before it got refactored)</p>\n</blockquote>\n<p>just to double check something -- the changes around <code>LazyConst</code> occurred on master, and this PR was rebased over them?</p>",
        "id": 163580604,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520856
    },
    {
        "content": "<p>yep</p>",
        "id": 163580629,
        "sender_full_name": "varkor",
        "timestamp": 1555520881
    },
    {
        "content": "<p>Also, to double check that I am understanding things -- what exactly is this PR <em>doing</em>. I <em>think</em> it is extending inference to include inference variables representing unknown constant values, and permitting unification with those?</p>",
        "id": 163580680,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520894
    },
    {
        "content": "<p>yes, that's the intention</p>",
        "id": 163580708,
        "sender_full_name": "varkor",
        "timestamp": 1555520933
    },
    {
        "content": "<p>i.e., it is <em>not</em> really trying to define what const values <em>are</em> exactly? In other words, the <code>ConstVal</code> enum already exists, and we have operations on it etc that already happen.</p>\n<p>(Except that it seems to be doing a fair amount of work on the folders etc...)</p>",
        "id": 163580729,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555520945
    },
    {
        "content": "<p>it extends <code>ConstValue</code> a bit</p>",
        "id": 163580757,
        "sender_full_name": "varkor",
        "timestamp": 1555520965
    },
    {
        "content": "<p>I think the <code>ConstValue::Infer</code> variant is already added on master, but it doesn't do very much</p>",
        "id": 163580795,
        "sender_full_name": "varkor",
        "timestamp": 1555521000
    },
    {
        "content": "<p>so this PR also includes the handling of that variant</p>",
        "id": 163580886,
        "sender_full_name": "varkor",
        "timestamp": 1555521029
    },
    {
        "content": "<p>(essentially the equivalent of <code>TyKind::Infer</code>)</p>",
        "id": 163580909,
        "sender_full_name": "varkor",
        "timestamp": 1555521060
    },
    {
        "content": "<p>OK, I see</p>",
        "id": 163580969,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521115
    },
    {
        "content": "<p>I probably won't finish with this review today</p>",
        "id": 163581003,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521122
    },
    {
        "content": "<p>but I will schedule another 1.5-2hour block</p>",
        "id": 163581026,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521127
    },
    {
        "content": "<p>and I think I'll be able to move much faster now that i've kind of figured out what this PR is even about :P</p>",
        "id": 163581041,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521139
    },
    {
        "content": "<p>(so far it all seems to make sense, though)</p>",
        "id": 163581064,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521152
    },
    {
        "content": "<p>the folder changes are due to constants previously not turning up as inference variables, so that case now needs to be considered</p>",
        "id": 163581076,
        "sender_full_name": "varkor",
        "timestamp": 1555521158
    },
    {
        "content": "<p>I haven't really gotten to trying to answer <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>'s questions yet</p>",
        "id": 163581084,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521160
    },
    {
        "content": "<p>okay, great :)</p>",
        "id": 163581129,
        "sender_full_name": "varkor",
        "timestamp": 1555521194
    },
    {
        "content": "<p>yeah, I appreciate that it's a large one to get through</p>",
        "id": 163581147,
        "sender_full_name": "varkor",
        "timestamp": 1555521216
    },
    {
        "content": "<p>on a semi-related note, I want to do a call where I talk through how the Lark inference code and type-checker was setup</p>",
        "id": 163581392,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521385
    },
    {
        "content": "<p>in part to help <em>me</em> remember :P</p>",
        "id": 163581394,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521389
    },
    {
        "content": "<p>but in part because I rejiggered some of the bits here to try and address some of the boilerplate and other things I saw arising in rustc</p>",
        "id": 163581415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521406
    },
    {
        "content": "<p>not sure if where I ended up was better or not really :) but it's worth thinking about</p>",
        "id": 163581431,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521419
    },
    {
        "content": "<p>there are definitely some places I saw that could use some refactoring as I was going through, but doing it in a more principled fashion would probably be wiser <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 163581577,
        "sender_full_name": "varkor",
        "timestamp": 1555521496
    },
    {
        "content": "<p>yes, confirm</p>",
        "id": 163581594,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> -- one other question. I don't <em>think</em> I saw any tests yet in this PR</p>",
        "id": 163581600,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521521
    },
    {
        "content": "<p>maybe I missed them</p>",
        "id": 163581617,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521540
    },
    {
        "content": "<p>is there a reason that we can't write tests for this code?</p>",
        "id": 163581633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521547
    },
    {
        "content": "<p>ah, that's true — most of the tests are still in the main const generics PR</p>",
        "id": 163581645,
        "sender_full_name": "varkor",
        "timestamp": 1555521558
    },
    {
        "content": "<p>but I think with these changes, most of them should work now</p>",
        "id": 163581652,
        "sender_full_name": "varkor",
        "timestamp": 1555521565
    },
    {
        "content": "<p>I would prefer to land the code together with tests</p>",
        "id": 163581661,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521576
    },
    {
        "content": "<p>I'll try moving them over</p>",
        "id": 163581665,
        "sender_full_name": "varkor",
        "timestamp": 1555521579
    },
    {
        "content": "<p>I would also like to kind of walk through some of the representative tests</p>",
        "id": 163581675,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521587
    },
    {
        "content": "<p>i.e., I've sort of seen the \"trees\" now</p>",
        "id": 163581678,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> heh, so, <code>LazyConst</code> was an accidental thing in part caused by me not being around: <code>ty::Const</code> is supposed to be a third kind, alongside <code>Ty</code> and <code>ty::Region</code>, but not everyone was aware of that</p>",
        "id": 163581684,
        "sender_full_name": "eddyb",
        "timestamp": 1555521595
    },
    {
        "content": "<p>I was hoping (in the next review session) to try and see the forest</p>",
        "id": 163581687,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521597
    },
    {
        "content": "<p>now it's back to what it should be, and <code>ConstValue</code> is just the enum with the variants of <code>ty::Const</code> (which has to be a struct because of the <code>ty: Ty</code> field)</p>",
        "id": 163581772,
        "sender_full_name": "eddyb",
        "timestamp": 1555521629
    },
    {
        "content": "<p>so if you have a sample test or two that would be good to walk through</p>",
        "id": 163581773,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521630
    },
    {
        "content": "<p>I'd appreciate it</p>",
        "id": 163581788,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1555521642
    },
    {
        "content": "<p>I am close to wanting to just unify all the kinds :P</p>",
        "id": 163581848,
        "sender_full_name": "eddyb",
        "timestamp": 1555521679
    },
    {
        "content": "<p>I'll check the tests tonight and also try to add a few more</p>",
        "id": 163581850,
        "sender_full_name": "varkor",
        "timestamp": 1555521681
    },
    {
        "content": "<p>and rename <code>Kind</code> to <code>Term</code></p>",
        "id": 163581869,
        "sender_full_name": "eddyb",
        "timestamp": 1555521694
    },
    {
        "content": "<p>they've been added on quite an ad hoc basis at the moment</p>",
        "id": 163581876,
        "sender_full_name": "varkor",
        "timestamp": 1555521699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>: that doesn't sound like an enviable task</p>",
        "id": 163581890,
        "sender_full_name": "varkor",
        "timestamp": 1555521714
    },
    {
        "content": "<p>it's tempting, but not necessarily enticing</p>",
        "id": 163581960,
        "sender_full_name": "eddyb",
        "timestamp": 1555521743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>  what is your next step after that? cumulative universes? :P</p>",
        "id": 163581963,
        "sender_full_name": "centril",
        "timestamp": 1555521744
    },
    {
        "content": "<p>or is it the other way around? :P</p>",
        "id": 163581968,
        "sender_full_name": "eddyb",
        "timestamp": 1555521749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span> how would you have those with no dependent typing :P</p>",
        "id": 163581986,
        "sender_full_name": "eddyb",
        "timestamp": 1555521766
    },
    {
        "content": "<p>Type0, Type1, ... here we go</p>",
        "id": 163581990,
        "sender_full_name": "centril",
        "timestamp": 1555521768
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> Yay for tests! They will definitely be more important as the feature nears completion, especially for a feature this big</p>",
        "id": 163582049,
        "sender_full_name": "centril",
        "timestamp": 1555521811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"126931\">@centril</span>: if you like writing tests... :)</p>",
        "id": 163582055,
        "sender_full_name": "varkor",
        "timestamp": 1555521821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> apparently <span class=\"user-mention\" data-user-id=\"124069\">@Alexander Regueiro</span> assigned me as Mr. Test :P</p>",
        "id": 163582138,
        "sender_full_name": "centril",
        "timestamp": 1555521857
    },
    {
        "content": "<p>:-D</p>",
        "id": 163582146,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555521869
    },
    {
        "content": "<p>Either one of you is fine!</p>",
        "id": 163582155,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555521874
    },
    {
        "content": "<p>oh, this is consnt generics. I thought you were talking about upcasting again</p>",
        "id": 163582181,
        "sender_full_name": "Alexander Regueiro",
        "timestamp": 1555521898
    },
    {
        "content": "<p>hello, folks. I'm a tad late to  the party</p>",
        "id": 163582345,
        "sender_full_name": "yodal",
        "timestamp": 1555522001
    },
    {
        "content": "<p>re: tests, we have not included tests up until this point because most uses of const generics would crash the compiler. With theses changes, we might have enough for some to pass, though I don't know how much we have outside of this PR left to merge in from our massive PR</p>",
        "id": 163582492,
        "sender_full_name": "yodal",
        "timestamp": 1555522093
    },
    {
        "content": "<p>also, we definitely need more tests, specifically more tests that target a specific aspect of the feature</p>",
        "id": 163582563,
        "sender_full_name": "yodal",
        "timestamp": 1555522154
    },
    {
        "content": "<p>yeah, I was planning to compare master with the main PR once the infer changes had landed; I'm not sure how many changes remain after that either</p>",
        "id": 163582576,
        "sender_full_name": "varkor",
        "timestamp": 1555522168
    }
]