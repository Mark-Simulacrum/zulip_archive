[
    {
        "content": "<p>When renaming a crate in a <code>foo = { package = \"actual_crate_name\", version = \"0.2\" }</code>-fashion, it is still possible for the <code>actual_crate_name</code> to be leaked through \"unexpected type\" errors. So for instance instead of  \"expected struct <code>X</code>, found struct <code>foo::util::X</code>\" it would say \"expected struct <code>X</code>, found struct <code>actual_crate_name::util::X</code>\". I'm having a hard time reproducing this issue outside my project when simplifying it so I was wondering if this issue is already open somewhere on the bug tracker?<br>\nOr is this perhaps expected behavior?</p>",
        "id": 243238604,
        "sender_full_name": "ruster",
        "timestamp": 1624093174
    },
    {
        "content": "<p>I have not seen that reported before, feel free to open an issue.</p>\n<p>Here is a reproduction if you want:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[dependencies]</span>\n<span class=\"n\">json</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"s\">\"*\"</span><span class=\"p\">,</span> <span class=\"n\">package</span><span class=\"o\">=</span><span class=\"s\">\"serde_json\"</span><span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">enum</span> <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{}</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">json</span>::<span class=\"n\">Value</span>::<span class=\"n\">Null</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>error[E0308]: mismatched types\n --&gt; src/main.rs:3:20\n  |\n3 |     let x: Value = json::Value::Null;\n  |            -----   ^^^^^^^^^^^^^^^^^ expected enum `Value`, found enum `serde_json::Value`\n  |            |\n  |            expected due to this\n</code></pre></div>\n<p>I think in this particular case, E0308  tries to shorten the path if it is unambiguous, and I suspect it is that path shortening which uses the \"real\" crate name instead of the resolve-based name.  I see other errors use the resolve path.  Since this is done in typechecking, I'm not sure if the resolver information is readily available, though.</p>",
        "id": 243253984,
        "sender_full_name": "Eric Huss",
        "timestamp": 1624115077
    },
    {
        "content": "<p>Thanks! Couldn't quite manage to reproduce it when isolated but this example works</p>",
        "id": 243296773,
        "sender_full_name": "ruster",
        "timestamp": 1624184573
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/86485\">https://github.com/rust-lang/rust/issues/86485</a></p>",
        "id": 243297308,
        "sender_full_name": "ruster",
        "timestamp": 1624185517
    },
    {
        "content": "<p>Because we use the full path to the <em>original</em> definition in all errors, path names for reexports and renames can always leak. A \"recent\" change checks wether the name of a type is globally unique and if so only shows the name, but to properly fix this we would need the diagnostics machinery to be aware of the locally accessible name for every DefId, and we don't do that now (and have delayed doing it due to mem consumption concerns)</p>",
        "id": 244090617,
        "sender_full_name": "Esteban KÃ¼ber",
        "timestamp": 1624836941
    }
]