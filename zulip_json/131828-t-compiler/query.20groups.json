[
    {
        "content": "<p>Does anyone kow why the <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_middle/src/query/mod.rs\">query definitions in rustc_middle</a> are devided into groups?<br>\nI guess it's for readability, but comments like <code>/****** Codegen *****/</code> can do that too. As far as I understand the proc macro, the group has no effect.</p>\n<p>My problem is that the <a href=\"https://github.com/rust-lang/rust/blob/cb2462c53f2cc3f140c0f1ea0976261cab968a34/compiler/rustc_macros/src/query.rs#L414\">query proc macro</a> is hard to understand and I'd like to simplify it.<br>\nSo can I make a PR to remove these groups?</p>",
        "id": 213778977,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603111443
    },
    {
        "content": "<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code>    Other {\n        query used_trait_imports(key: LocalDefId) -&gt; &amp;&#39;tcx FxHashSet&lt;LocalDefId&gt; {\n            desc { |tcx| &quot;used_trait_imports `{}`&quot;, tcx.def_path_str(key.to_def_id()) }\n            cache_on_disk_if { true }\n        }\n    }\n\n    TypeChecking {\n        query has_typeck_results(def_id: DefId) -&gt; bool {\n            desc { |tcx| &quot;checking whether `{}` has a body&quot;, tcx.def_path_str(def_id) }\n        }\n\n        query coherent_trait(def_id: DefId) -&gt; () {\n            desc { |tcx| &quot;coherence checking all impls of trait `{}`&quot;, tcx.def_path_str(def_id) }\n        }\n    }\n</code></pre></div>\n\n\n<p>I mean removing <code>Other</code> and <code>TypeChecking</code></p>",
        "id": 213779110,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603111517
    },
    {
        "content": "<p>The next step could be to move the query definitions into rustc_query_system. <br>\nI don't know yet if thats even possible, but it would simplify some things in rustc_query_system and improve bootstrap times because that proc macro wouldn't be in the \"critical path\" (in rustc_middle) anymore.</p>",
        "id": 213779693,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603111830
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/cb2462c53f2cc3f140c0f1ea0976261cab968a34/compiler/rustc_macros/src/query.rs#L519\">https://github.com/rust-lang/rust/blob/cb2462c53f2cc3f140c0f1ea0976261cab968a34/compiler/rustc_macros/src/query.rs#L519</a></p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/b6e2dc6cdece6b498b876bc7e9377ff7d63d93e7/compiler/rustc_middle/src/ty/query/plumbing.rs#L364\">https://github.com/rust-lang/rust/blob/b6e2dc6cdece6b498b876bc7e9377ff7d63d93e7/compiler/rustc_middle/src/ty/query/plumbing.rs#L364</a></p>\n<p>It is used to fill <code>QueryConfig::CATEGORY</code> which has a type of <code>ProfileCategory</code>. It doesn't seem to be used anymore: <a href=\"https://github.com/rust-lang/rust/search?q=ProfileCategory\">https://github.com/rust-lang/rust/search?q=ProfileCategory</a> This is the case since <a href=\"https://github.com/rust-lang/rust/issues/59515\">#59515</a> I think.</p>",
        "id": 213781926,
        "sender_full_name": "bjorn3",
        "timestamp": 1603112913
    },
    {
        "content": "<p>/me just spent 10min digging into this</p>",
        "id": 213781983,
        "sender_full_name": "bjorn3",
        "timestamp": 1603112941
    },
    {
        "content": "<p>Searching on GitHub is a nice trick. I'll remember that one <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 213782228,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603113077
    },
    {
        "content": "<p>I combined searching on github for the remaining references with <code>git log</code> on one of the files that still had references.</p>",
        "id": 213782394,
        "sender_full_name": "bjorn3",
        "timestamp": 1603113155
    },
    {
        "content": "<p>These were used to group the query profiling output. I remove them in <a href=\"https://github.com/rust-lang/rust/issues/77830\">#77830</a>.<br>\nNevertheless, I find the syntax capability useful for splitting the queries per crate. (My design is not fully cooked yet.)</p>",
        "id": 213812681,
        "sender_full_name": "cjgillot",
        "timestamp": 1603125593
    },
    {
        "content": "<p>Oh, I wasn't aware of that PR, sorry! Seems like we have noticed some similar bits <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 213821021,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603129603
    },
    {
        "content": "<p>Would you like to discuss the aproach? I'm curious what you are working on, <span class=\"user-mention\" data-user-id=\"248906\">@cjgillot</span></p>",
        "id": 213821222,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603129690
    },
    {
        "content": "<p>My motivation was moving some of the macros into rustc_query_system,<br>\nso that it's possible to convert traits like <code>DepKind</code> into structs,<br>\nto remove generic bounds, so it becomes possible to make things <code>dyn</code> to reduce compile times.</p>",
        "id": 213821583,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603129861
    },
    {
        "content": "<p>My idea was to create sub-query systems: one per client crate, defining the only part of the queries. For this, I thought using the category mechanism: queries defined in a <code>rustc_typeck</code> group (in <code>rustc_middle::query</code>) to be instanciated in <code>rustc_typeck</code> crate. The hard part is to migrate from a closed-world to an open-world model for the on-disk cache.</p>",
        "id": 213824329,
        "sender_full_name": "cjgillot",
        "timestamp": 1603131156
    },
    {
        "content": "<p>I have an old branch somewhere. I will ping you if I manage to dig it up.</p>",
        "id": 213824382,
        "sender_full_name": "cjgillot",
        "timestamp": 1603131182
    },
    {
        "content": "<p>Your idea of migrating <code>DepKind</code> enum to <code>&amp;'static dyn DepKind</code> trait object seems worth trying. Where are you on this front?</p>",
        "id": 213824904,
        "sender_full_name": "cjgillot",
        "timestamp": 1603131427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/131828-t-compiler/topic/query.20groups/near/213824904\">said</a>:</p>\n<blockquote>\n<p>Your idea of migrating <code>DepKind</code> enum to <code>&amp;'static dyn DepKind</code> trait object seems worth trying. Where are you on this front?</p>\n</blockquote>\n<p>The hard part here is that the DepKind trait is not dyn safe, because it implements Clone, Hash and Eq. Removing these requirements feels impossible, because they are all used in _some place_ where I don't see a possibility to refactor.</p>",
        "id": 213825497,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603131736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"200368\">@Julian-Wollersberger</span> I don't follow - can't you say <code>trait DepKind: Clone + Hash + Eq</code>?</p>",
        "id": 213825555,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603131776
    },
    {
        "content": "<p>It would be so much easier if the DepKind enum would be available in rustc_query_system, it needn't be dyn.</p>",
        "id": 213825606,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603131821
    },
    {
        "content": "<p>You don't need <code>Clone</code>, because <code>&amp;dyn Trait</code> is <code>Clone</code> itself. For <code>Eq</code> and <code>Hash</code>, you can add a <code>into_usize(&amp;self) -&gt; usize</code> to the trait, and implement using it.</p>",
        "id": 213825725,
        "sender_full_name": "cjgillot",
        "timestamp": 1603131868
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/query.20groups/near/213825555\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"200368\">Julian-Wollersberger</span> I don't follow - can't you say <code>trait DepKind: Clone + Hash + Eq</code>?</p>\n</blockquote>\n<p>Yes, but you can't have <code>fn whatever(dep_kind: Box&lt;dyn DepKind&gt;)</code></p>",
        "id": 213825769,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603131895
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/131828-t-compiler/topic/query.20groups/near/213825725\">said</a>:</p>\n<blockquote>\n<p>You don't need <code>Clone</code>, because <code>&amp;dyn Trait</code> is <code>Clone</code> itself. For <code>Eq</code> and <code>Hash</code>, you can add a <code>into_usize(&amp;self) -&gt; usize</code> to the trait, and implement using it.</p>\n</blockquote>\n<p>Hmmm, tanks, I'll look into that. I failed making DepKind a wrapper around <code>u32</code>, but I don't remember why that was.</p>",
        "id": 213826198,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603132085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"200368\">Julian-Wollersberger</span> <a href=\"#narrow/stream/131828-t-compiler/topic/query.20groups/near/213825769\">said</a>:<br>\n<code>\nYes, but you can't have `fn whatever(dep_kind: Box&lt;dyn DepKind&gt;)`\n</code></p>\n<div class=\"codehilite\"><pre><span></span><code>error[E0038]: the trait `DepKind` cannot be made into an object\n   --&gt; compiler/rustc_query_system/src/query/plumbing.rs:703:16\n    |\n703 |     let _: Box&lt;dyn DepKind&gt; = panic!();\n    |                ^^^^^^^^^^^ the trait `DepKind` cannot be made into an object\n    |\n   ::: /home/julian/Rust/rustc/library/core/src/cmp.rs:264:15\n    |\n264 | pub trait Eq: PartialEq&lt;Self&gt; {\n    |               --------------- ...because it uses `Self` as a type parameter in this\n...\n563 | pub trait Ord: Eq + PartialOrd&lt;Self&gt; {\n    |                     ---------------- ...because it uses `Self` as a type parameter in this\n</code></pre></div>",
        "id": 213826287,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603132145
    },
    {
        "content": "<p>it's not object safe, got it</p>",
        "id": 213826864,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1603132446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248906\">cjgillot</span> <a href=\"#narrow/stream/131828-t-compiler/topic/query.20groups/near/213824904\">said</a>:</p>\n<blockquote>\n<p>Your idea of migrating <code>DepKind</code> enum to <code>&amp;'static dyn DepKind</code> trait object seems worth trying. Where are you on this front?</p>\n</blockquote>\n<p>Actually the goal was to make <code>get_query_impl&lt;CTX, C: QueryCache&gt;(...)</code> _not_ generic over QueryCache, because that monomorphizes 500 times.<br>\nBut the relevant traits are very intertwined, and <code>DepKind</code> was the \"leave node\" in this dependency tree, so I started with it.</p>",
        "id": 213827871,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603132986
    },
    {
        "content": "<p>maybe we can schedule some tiem to discuss this sync</p>",
        "id": 214251119,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603402482
    },
    {
        "content": "<p>I can't seem to make time to think about it but we've toyed around a lot with this sort of thing in salsa</p>",
        "id": 214251133,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1603402491
    },
    {
        "content": "<p>I've made a PR exploring a related idea: <a href=\"https://github.com/rust-lang/rust/pull/78275\">https://github.com/rust-lang/rust/pull/78275</a></p>",
        "id": 214301748,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1603452984
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/78314/\">https://github.com/rust-lang/rust/pull/78314/</a> replaces <code>DepKind</code> by trait objects in rustc_middle.</p>",
        "id": 214441972,
        "sender_full_name": "cjgillot",
        "timestamp": 1603563984
    },
    {
        "content": "<p>It may need a perf run.</p>",
        "id": 214442042,
        "sender_full_name": "cjgillot",
        "timestamp": 1603564085
    },
    {
        "content": "<p>queued one</p>",
        "id": 214442141,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1603564233
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 214442171,
        "sender_full_name": "cjgillot",
        "timestamp": 1603564310
    }
]