[
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Self profiling results for fuzzy_pickles:\n\n| Phase            | Time (ms)      | Queries        | Hits (%) |\n| ---------------- | -------------- | -------------- | -------- |\n| Parsing          | 46             |                |          |\n| Expansion        | 587            |                |          |\n| TypeChecking     | 344            | 1012824        | 97.66    |\n| BorrowChecking   | 0              | 62138          | 100.00   |\n| Codegen          | 931            | 396181         | 100.00   |\n| Linking          | 51             | 55549          | 100.00   |\n| Other            | 1094           | 3487992        | 99.62    |\n\nOptimization level: No\nIncremental: on\n</pre></div>\n\n\n<p>\"Other\" isn't super informative, and I don't have much of an idea what I can do to make things <em>better</em> from this info.</p>",
        "id": 148722850,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543421416
    },
    {
        "content": "<p>Also, 0 ms for borrow checking is not too shabby</p>",
        "id": 148722881,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543421447
    },
    {
        "content": "<p>that's a lot of macro expansion :)</p>",
        "id": 148722924,
        "sender_full_name": "mw",
        "timestamp": 1543421491
    },
    {
        "content": "<p>well one of our next steps is to make it more detailed <span class=\"user-mention\" data-user-id=\"116155\">@Jake Goulding</span> =)</p>",
        "id": 148722940,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421515
    },
    {
        "content": "<p>seems like your case would benefit</p>",
        "id": 148722943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543421520
    },
    {
        "content": "<p>You have no idea. It's the Rust AST with multiple <code>derive</code>s for every AST node.</p>",
        "id": 148722993,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543421534
    },
    {
        "content": "<p>so this is from an incrmental build after touch <code>src/lib.rs</code>?</p>",
        "id": 148722998,
        "sender_full_name": "mw",
        "timestamp": 1543421537
    },
    {
        "content": "<p>You know, I think we count pre-query time in <code>Other</code>.</p>",
        "id": 148723025,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543421568
    },
    {
        "content": "<p>Ooops, yeah, didn't copy that part. It's incremental and just a <code>touch src/lib.rs</code></p>",
        "id": 148723045,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543421590
    },
    {
        "content": "<p>(Not that all of that is pre-query but it would probably be worth breaking it out separately)</p>",
        "id": 148723055,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543421601
    },
    {
        "content": "<p>On the upshot, this 3 seconds is notably faster than it was at the start of the year.</p>",
        "id": 148723069,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543421621
    },
    {
        "content": "<p>it has 100% cache hit rate and still is so slow :(</p>",
        "id": 148723124,
        "sender_full_name": "mw",
        "timestamp": 1543421643
    },
    {
        "content": "<p>I don't think hashing/deserialization is counted in the results either.</p>",
        "id": 148723150,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1543421678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124287\">@mw</span> actually, why aren't they all 100% hit rate? nothing changed...</p>",
        "id": 148723376,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543421894
    },
    {
        "content": "<p>I don't know</p>",
        "id": 148723449,
        "sender_full_name": "mw",
        "timestamp": 1543421999
    },
    {
        "content": "<p>can you run with <code>-Zincremental-info</code>?</p>",
        "id": 148723504,
        "sender_full_name": "mw",
        "timestamp": 1543422020
    },
    {
        "content": "<p>that might give some useful information</p>",
        "id": 148723508,
        "sender_full_name": "mw",
        "timestamp": 1543422029
    },
    {
        "content": "<p><a href=\"https://gist.github.com/shepmaster/78430d96af2f5554ce595bf886a946b7\" target=\"_blank\" title=\"https://gist.github.com/shepmaster/78430d96af2f5554ce595bf886a946b7\">lot of output</a></p>",
        "id": 148723902,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543422363
    },
    {
        "content": "<blockquote>\n<p>it has 100% cache hit rate and still is so slow :(</p>\n</blockquote>\n<p>one thing <span class=\"user-mention\" data-user-id=\"124287\">@mw</span> we didn't have time to cover but I was wondering if there are ways we can dig into what is taking time for the \"incremental scenarios\" (e.g., this one)</p>",
        "id": 148723978,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543422435
    },
    {
        "content": "<p>interesting to see </p>\n<div class=\"codehilite\"><pre><span></span>| Codegen          | 931            | 396181         | 100.00   |\n</pre></div>\n\n\n<p>still one full second despite 100% hit rate :) presumably <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> we're counting <em>something</em> here beyond query execution</p>",
        "id": 148724073,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543422507
    },
    {
        "content": "<p>Well with ~400 thousand queries and each one being an indirect function call, hashing, and hashmap lookup I could believe that takes a second...</p>",
        "id": 148725569,
        "sender_full_name": "simulacrum",
        "timestamp": 1543423722
    },
    {
        "content": "<p>~2.3 Âµs per query</p>",
        "id": 148725748,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543423847
    },
    {
        "content": "<p>That seems <em>reasonable</em> to me but I don't have a great sense of computer speeds. Maybe it's quite large.</p>",
        "id": 148726216,
        "sender_full_name": "simulacrum",
        "timestamp": 1543424223
    },
    {
        "content": "<p>1 GHz = 1 op / ns; so this is ~7K operations (take with grain of salt)</p>",
        "id": 148726648,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1543424594
    },
    {
        "content": "<p>This specific task is memory latency heavy I think since we're querying HashMaps so much, but I could be wrong</p>",
        "id": 148744785,
        "sender_full_name": "simulacrum",
        "timestamp": 1543440228
    },
    {
        "content": "<p>well, it may be that this argues for structuring somerthing in codegen into bigger groups</p>",
        "id": 148791536,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543503326
    },
    {
        "content": "<p>so that we don't have as many fine-grained queries to perform</p>",
        "id": 148791537,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543503332
    },
    {
        "content": "<p>I could believe that</p>",
        "id": 148791539,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1543503338
    }
]