[
    {
        "content": "<p>Honestly one thought I've had is to ditch x.py at the root</p>",
        "id": 221364556,
        "sender_full_name": "simulacrum",
        "timestamp": 1609528419
    },
    {
        "content": "<p>And just say \"no there are multiple build systems\" - one for std, one for rustc, one for tools</p>",
        "id": 221364598,
        "sender_full_name": "simulacrum",
        "timestamp": 1609528445
    },
    {
        "content": "<p>They can obviously call into shared code</p>",
        "id": 221364603,
        "sender_full_name": "simulacrum",
        "timestamp": 1609528451
    },
    {
        "content": "<p>But the entry points being explicitly different may help with context switching etc</p>",
        "id": 221364609,
        "sender_full_name": "simulacrum",
        "timestamp": 1609528469
    },
    {
        "content": "<p>Oh interesting, I kind of like that</p>",
        "id": 221364614,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609528487
    },
    {
        "content": "<p>And the entry point for distros will be <em>only</em> <code>make</code> or bootstrap.py?</p>",
        "id": 221364623,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609528514
    },
    {
        "content": "<p>e.g. I imagine <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span> would be much less confused if the compiler's check couldn't check just std</p>",
        "id": 221364624,
        "sender_full_name": "simulacrum",
        "timestamp": 1609528515
    },
    {
        "content": "<p>Well, I think a separate \"dist build system\" actually makes a lot of sense, requirements for distribution are pretty different and even the on-demand compilation model used in rustbuild is less well suited.</p>",
        "id": 221364684,
        "sender_full_name": "simulacrum",
        "timestamp": 1609528591
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/x.2Epy.20check.20stage.200/near/221364624\">said</a>:</p>\n<blockquote>\n<p>e.g. I imagine <span class=\"user-mention silent\" data-user-id=\"121053\">varkor</span> would be much less confused if the compiler's check couldn't check just std</p>\n</blockquote>\n<p>Yes, I think that would also have removed the confusion.</p>",
        "id": 221364766,
        "sender_full_name": "varkor",
        "timestamp": 1609528746
    },
    {
        "content": "<p>so I'm imagining something like this:</p>\n<div class=\"codehilite\"><pre><span></span><code>.\n├── compiler\n│   ├── rustc\n│   └── x.py\n├── library\n│   ├── std\n│   └── x.py\n├── Makefile\n└── src\n    ├── librustdoc\n    │   └── x.py\n    └── tools\n        └── rustdoc\n            └── x.py\n</code></pre></div>",
        "id": 221364769,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609528749
    },
    {
        "content": "<p>and maybe have a top-level x.py that basically <em>only</em> has <code>x.py setup</code> and tells you to use one of the others</p>",
        "id": 221364780,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609528793
    },
    {
        "content": "<p>I'm just imaging all the people angry that I'm taking away <code>x.py build</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 221364826,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609528840
    },
    {
        "content": "<p>I guess we could keep all of the current x.py but have a big scary warning?</p>",
        "id": 221364891,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609528983
    },
    {
        "content": "<p>I feel like that would still hit a ton of resistance</p>",
        "id": 221364894,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609528991
    },
    {
        "content": "<p>Would this also make using <code>cargo</code> instead of <code>x.py</code> in some cases more plausible (not that I'm invested in it either way)?</p>",
        "id": 221364897,
        "sender_full_name": "varkor",
        "timestamp": 1609529000
    },
    {
        "content": "<p>the only places I see using cargo as plausible is for stage 0 std (with <code>cfg(bootstrap)</code>)</p>",
        "id": 221364903,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609529024
    },
    {
        "content": "<p>this is mostly about the interface</p>",
        "id": 221364905,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609529035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> so basically my position is I think this is a good idea and I'm happy to write code for it, but I'm not willing to go through all the arguments to get people to use it :P</p>",
        "id": 221365012,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609529189
    },
    {
        "content": "<p>Yeah I mean I think it's a shift for sure</p>",
        "id": 221365013,
        "sender_full_name": "simulacrum",
        "timestamp": 1609529206
    },
    {
        "content": "<p>That said since the first draft would not change rustbuild at all I imagine (just add different defaults, essentially, and conditions / panics in some cases), it may well be that we can retain x.py at the root for now</p>",
        "id": 221365034,
        "sender_full_name": "simulacrum",
        "timestamp": 1609529267
    },
    {
        "content": "<p>Land code for the new stuff, pointing docs at it</p>",
        "id": 221365037,
        "sender_full_name": "simulacrum",
        "timestamp": 1609529276
    },
    {
        "content": "<p>And then - presuming it works well and newcomers generally feel the new thing is easier to understand and works better - deprecate root x.pu</p>",
        "id": 221365084,
        "sender_full_name": "simulacrum",
        "timestamp": 1609529308
    },
    {
        "content": "<p>I'll put you in charge of that part :P</p>",
        "id": 221365098,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609529343
    },
    {
        "content": "<p>But yeah this sounds like a great idea :)</p>",
        "id": 221365101,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609529351
    },
    {
        "content": "<p>I think starting it with a high friction area like just std for example would be good.</p>",
        "id": 221365105,
        "sender_full_name": "simulacrum",
        "timestamp": 1609529369
    },
    {
        "content": "<p>let me open an issue so I don't forget, I might have time this weekend :)</p>",
        "id": 221365162,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609529438
    },
    {
        "content": "<p>(<a href=\"https://github.com/rust-lang/rust/pull/79540\">https://github.com/rust-lang/rust/pull/79540</a> is still waiting on review btw - I can make progress without anything super in depth, I could mostly use a response to <a href=\"https://github.com/rust-lang/rust/pull/79540#issuecomment-751953277\">https://github.com/rust-lang/rust/pull/79540#issuecomment-751953277</a>)</p>",
        "id": 221365177,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609529478
    },
    {
        "content": "<p>I haven't thought about this a ton but I would suggest that if there is value in having multiple systems, then I think there is value in those systems being named differently. I think that would help reinforce they are different as well as make troubleshooting and answering questions easier. I could see people asking things like \"I ran <code>x.py build</code> and it didn't work right\" and the very first question is always going to be \"what directory were you cd'd into?\". Having the names be different would answer that question right off the bat.</p>",
        "id": 221366313,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1609531251
    },
    {
        "content": "<p>They could be called <code>stage0.py</code>, <code>stage1.py</code>, etc. <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 221366418,
        "sender_full_name": "varkor",
        "timestamp": 1609531433
    },
    {
        "content": "<p>std.py and compiler.py seem much more likely - I completely agree the names should be different</p>",
        "id": 221366534,
        "sender_full_name": "simulacrum",
        "timestamp": 1609531598
    },
    {
        "content": "<p>oh I should probably make this an MCP instead of an issue</p>",
        "id": 221366629,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609531739
    },
    {
        "content": "<p>(it was <a href=\"https://github.com/rust-lang/rust/issues/80596\">https://github.com/rust-lang/rust/issues/80596</a> but I'm about to close it)</p>",
        "id": 221366637,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609531747
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> can you combine this stream with <a href=\"#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20different.20entry.20points.20for.20x.2Epy.20compiler-team.23396\">https://rust-lang.zulipchat.com/#narrow/stream/233931-t-compiler.2Fmajor-changes/topic/Add.20different.20entry.20points.20for.20x.2Epy.20compiler-team.23396</a> ?</p>",
        "id": 221366729,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609531866
    },
    {
        "content": "<p>not sure if zulip lets you do that</p>",
        "id": 221366732,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609531875
    },
    {
        "content": "<p>Not sure, on mobile for right now so I can't</p>",
        "id": 221366736,
        "sender_full_name": "simulacrum",
        "timestamp": 1609531887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"232545\">Joshua Nelson</span> <a href=\"#narrow/stream/131828-t-compiler/topic/different.20entry.20points.20for.20x.2Epy/near/221364826\">said</a>:</p>\n<blockquote>\n<p>I'm just imaging all the people angry that I'm taking away <code>x.py build</code> <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n</blockquote>\n<p>I think it would still be good for there to be a unified thing that can do the right then when you're, say, messing with lang items so are updating both the compiler and the library.</p>",
        "id": 221372615,
        "sender_full_name": "scottmcm",
        "timestamp": 1609540915
    },
    {
        "content": "<p>you can do that from compiler/ though</p>",
        "id": 221372663,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609540950
    },
    {
        "content": "<p><code>compiler.py build library/std</code> would default to --stage 1</p>",
        "id": 221372665,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609540959
    },
    {
        "content": "<p>I'm confused what this is doing, then.  Is it just changing the defaults if you're <code>cd</code>ed into a folder when you run it?</p>",
        "id": 221372740,
        "sender_full_name": "scottmcm",
        "timestamp": 1609541069
    },
    {
        "content": "<p>Because a build script building something in a sibling directory is also surprising to me.</p>",
        "id": 221372754,
        "sender_full_name": "scottmcm",
        "timestamp": 1609541105
    },
    {
        "content": "<p>Yes, this is just changing the defaults.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"125270\">scottmcm</span> <a href=\"#narrow/stream/131828-t-compiler/topic/different.20entry.20points.20for.20x.2Epy/near/221372754\">said</a>:</p>\n<blockquote>\n<p>Because a build script building something in a sibling directory is also surprising to me.</p>\n</blockquote>\n<p>This is fundamental to bootstrapping though - if you don't build library/std, you can't run any of the tests</p>",
        "id": 221372830,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609541171
    },
    {
        "content": "<p>in fact I was going to have <code>compiler.py</code> default to building both stage 0 compiler/rustc and stage1 library/std</p>",
        "id": 221372849,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609541204
    },
    {
        "content": "<p>the same way <code>x.py build</code> does today (but without building tools)</p>",
        "id": 221372863,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609541239
    },
    {
        "content": "<p>It's fundamental to bootstrapping that the compiler and library both need to be built, but that's different from <code>foo.py</code> building things in <code>../bar</code>.</p>",
        "id": 221372996,
        "sender_full_name": "scottmcm",
        "timestamp": 1609541441
    },
    {
        "content": "<p>I'm confused. How do you propose for <code>compiler.py test src/test/ui</code> to work if it doesn't build ../library/std?</p>",
        "id": 221373008,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609541482
    },
    {
        "content": "<p>or are you suggesting I get rid of filters altogether and there is <em>only</em> <code>compiler.py build</code>, which always builds the standard library? I think that would work.</p>",
        "id": 221373301,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609541967
    },
    {
        "content": "<p>There would still be a need for <code>--stage</code>/<code>--keep-stage</code>/<code>--keep-stage-std</code> but I think filters can go away if there's a build script for each of the profiles</p>",
        "id": 221373540,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609542358
    },
    {
        "content": "<p>except tools maybe, I have to think about how that would work - you might want to build only some of the tools.</p>",
        "id": 221373583,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1609542377
    },
    {
        "content": "<p>I would expect all of the python scripts to maybe be at root, I'm not a fan of cding into each directory for development</p>",
        "id": 221376806,
        "sender_full_name": "simulacrum",
        "timestamp": 1609548100
    },
    {
        "content": "<p>I like the general direction of this. :) recently there was a lot of changing x.py defaults, which surely made it better for some cases but also worse for others -- and generally it made things more complicated. different use-cases need different defaults, so acknowledging that through dedicated scripts for \"if you are working on the standard library, ...\" vs \"if you are working on the compiler, ...\" makes a lot of sense. this also works better than <code>x.py setup</code> I think because the same person might first to library work and then compiler work (I certainly switch between the two all the time).</p>",
        "id": 221399919,
        "sender_full_name": "RalfJ",
        "timestamp": 1609593797
    },
    {
        "content": "<p>Would subtree tools like Clippy have to provide their own <code>x.py</code> then?</p>",
        "id": 221417975,
        "sender_full_name": "Phil H",
        "timestamp": 1609622403
    },
    {
        "content": "<p>Ah nevermind, you're aware of the tools stuff already :)</p>",
        "id": 221418029,
        "sender_full_name": "Phil H",
        "timestamp": 1609622509
    }
]