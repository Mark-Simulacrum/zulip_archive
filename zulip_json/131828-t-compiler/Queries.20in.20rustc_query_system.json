[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"200368\">@Julian-Wollersberger</span>, to avoid polluting <a href=\"https://github.com/rust-lang/rust/issues/81609\">#81609</a>.</p>\n<blockquote>\n<p>I believe it wouldn't have any impact, just that the macro_rules! produced by the query proc macro must be imported from a different path. My plan is to move just the query definitions and the DepKind enum. The rest depends to much on rustc_middle.<br>\nThat might enable it that a bunch of generic bounds on the DepKind trait could be removed, but I've tried around quite a bit and it seems to not work out thanks to DepKind::debug_node(). So I'll probably have to give up on that.</p>\n</blockquote>\n<p><code>DepKind::debug_node</code> is a debugging operation. You can get away with using a callback: see <code>rustc_interface::callbacks</code>. It's ugly, but it does the job.</p>\n<blockquote>\n<p>The original goal was to prevent the query system from being monomorphized for every single query kind. Maybe I can find a different way. Any ideas?</p>\n</blockquote>\n<p>I don't have a lot. The monomorphizations due to the different queries come from the triplet (Key, Value, Cache). Some parts of the query plumbing only really depend on Key, and are generic on Value just to return the result. I haven't really found a way around.</p>",
        "id": 224670765,
        "sender_full_name": "cjgillot",
        "timestamp": 1612133763
    },
    {
        "content": "<p>Didn't know about those callbacks, thanks.</p>\n<p>Ok, that confirms my suspicions about what is monomorphized.</p>",
        "id": 224710747,
        "sender_full_name": "Julian-Wollersberger",
        "timestamp": 1612177348
    }
]