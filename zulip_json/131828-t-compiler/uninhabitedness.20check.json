[
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> <span class=\"user-mention\" data-user-id=\"126931\">@centril</span> </p>\n<p>So I'm creating this to followup on <a href=\"https://github.com/rust-lang/rust/pull/71074#issuecomment-613423782\" title=\"https://github.com/rust-lang/rust/pull/71074#issuecomment-613423782\">https://github.com/rust-lang/rust/pull/71074#issuecomment-613423782</a></p>",
        "id": 193933692,
        "sender_full_name": "mark-i-m",
        "timestamp": 1586886567
    },
    {
        "content": "<blockquote>\n<p>That's what I have so far: <a href=\"https://github.com/rust-lang/rust/compare/master...Nadrieril:exhaustiveness-remove-tyerr\" title=\"https://github.com/rust-lang/rust/compare/master...Nadrieril:exhaustiveness-remove-tyerr\">master...Nadrieril:exhaustiveness-remove-tyerr</a>. I've reduced the problem to a simpler case: now we only use tyerr in the case where a struct has private empty fields, because we don't want users outside the crate to know that the struct is uninhabited. (There's also something about non_exhaustive, but same thing here). The fix looks super easy: simply skip over those fields as if they never existed. But in practice there are so many places in the code where that would matter and I see no clean way of making sure that I get it right and that people in the future will get it right too &gt;&lt;. It's all the places where one of ty::Adt, Constructor::Variant/Simple or PatKind::Variant/Leaf appear, essentially. If anyone has an idea of how to get that right, I'm feeling stuck right now.</p>\n</blockquote>",
        "id": 193933828,
        "sender_full_name": "mark-i-m",
        "timestamp": 1586886617
    },
    {
        "content": "<p>does it make sense to wrap those structs with some other struct that forces you to decide whether to see fields or not?</p>",
        "id": 193933891,
        "sender_full_name": "mark-i-m",
        "timestamp": 1586886655
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"121053\">@varkor</span></p>",
        "id": 193934422,
        "sender_full_name": "centril",
        "timestamp": 1586886884
    },
    {
        "content": "<p>To illustrate, on this line: <a href=\"https://github.com/rust-lang/rust/blob/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src/librustc_mir_build/hair/pattern/_match.rs#L2372\" title=\"https://github.com/rust-lang/rust/blob/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src/librustc_mir_build/hair/pattern/_match.rs#L2372\">https://github.com/rust-lang/rust/blob/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src/librustc_mir_build/hair/pattern/_match.rs#L2372</a> we have as input a pattern like <code>SomeStruct { field2: Some(42), .. }</code> and we need to essentially expand that into <code>{ field1: _, field2: Some(42) }</code> while making sure to not include uninhabited private fields</p>",
        "id": 193935150,
        "sender_full_name": "Nadrieril",
        "timestamp": 1586887230
    },
    {
        "content": "<p>Or here <a href=\"https://github.com/rust-lang/rust/blob/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src/librustc_mir_build/hair/pattern/_match.rs#L1002\" title=\"https://github.com/rust-lang/rust/blob/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src/librustc_mir_build/hair/pattern/_match.rs#L1002\">https://github.com/rust-lang/rust/blob/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb/src/librustc_mir_build/hair/pattern/_match.rs#L1002</a> we have to do the reverse: given a filtered list of patterns, we need to reconstruct a full <code>PatKind</code> by filling in the holes with wildcards of the correct type</p>",
        "id": 193935383,
        "sender_full_name": "Nadrieril",
        "timestamp": 1586887340
    },
    {
        "content": "<p>So I'm not sure what we'd have to wrap. Probably Pat ? But that would touch every single bit of the code. Maybe changing PatKind a bit could be enough, I don't know what else it's used for</p>",
        "id": 193951968,
        "sender_full_name": "Nadrieril",
        "timestamp": 1586895610
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> So one question is: is this something all of those pieces of code should care about? if so, then maybe it actually makes sense to go change all of those lines of code.</p>",
        "id": 193966825,
        "sender_full_name": "mark-i-m",
        "timestamp": 1586904819
    },
    {
        "content": "<p>I don't really know how to answer that honestly. Changing all those lines, sure, but how to be sure we didn't miss any ?</p>",
        "id": 193967564,
        "sender_full_name": "Nadrieril",
        "timestamp": 1586905467
    },
    {
        "content": "<p>Actually, maybe PatKind::Variant could take some custom <code>Fields</code> struct instead of a Vec&lt;Pat&gt;...</p>",
        "id": 193967731,
        "sender_full_name": "Nadrieril",
        "timestamp": 1586905650
    },
    {
        "content": "<p>What else is Pat used for ? The scope of mir::hair::pattern looks rather limited so I might be able to change it</p>",
        "id": 193967814,
        "sender_full_name": "Nadrieril",
        "timestamp": 1586905694
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245339\">Nadrieril</span> <a href=\"#narrow/stream/131828-t-compiler/topic/uninhabitedness.20check/near/193967564\" title=\"#narrow/stream/131828-t-compiler/topic/uninhabitedness.20check/near/193967564\">said</a>:</p>\n<blockquote>\n<p>I don't really know how to answer that honestly. Changing all those lines, sure, but how to be sure we didn't miss any ?</p>\n</blockquote>\n<p>Right, that's why I suggested changing the struct itself... it wouldn't compile until we had fixed all the places it's used... that said, I'm mostly speaking abstractly without much concrete knowledge beyond the examples you gave</p>",
        "id": 194318313,
        "sender_full_name": "mark-i-m",
        "timestamp": 1587049586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> Originally on the PR thread, <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> had suggested adding a field to <code>Pat</code> with the extra information. Does this end up having the same problem that we need to remember to check it?</p>",
        "id": 194610915,
        "sender_full_name": "mark-i-m",
        "timestamp": 1587320154
    },
    {
        "content": "<p><em>not</em> <code>struct Pat</code></p>",
        "id": 194610969,
        "sender_full_name": "eddyb",
        "timestamp": 1587320185
    },
    {
        "content": "<p>but the <code>Wild</code> variant of <code>enum PatKind</code></p>",
        "id": 194610970,
        "sender_full_name": "eddyb",
        "timestamp": 1587320193
    },
    {
        "content": "<p>(or maybe even another variant, depending)</p>",
        "id": 194610975,
        "sender_full_name": "eddyb",
        "timestamp": 1587320206
    },
    {
        "content": "<p>I think the relevant info needs to live rather on the side where _match acts, not in Pat, so I was thinking of making ctor_wild_subpatterns be a special struct Fields rather than just a slice</p>",
        "id": 194611265,
        "sender_full_name": "Nadrieril",
        "timestamp": 1587320586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> Do you mean something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">struct</span> <span class=\"nc\">Fields</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">fields</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;p</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Pat</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"p\">],</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Fields</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;p</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"sd\">/// Returns an iterator over all fields.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">iter_all</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">Pat</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fields</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"sd\">/// Returns an iterator that hides uninhabitedness.</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">iter_habited</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Iterator</span><span class=\"o\">&lt;</span><span class=\"n\">Item</span><span class=\"o\">=</span><span class=\"n\">Pat</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;tcx</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">fields</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">pat</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">todo</span><span class=\"o\">!</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 194621686,
        "sender_full_name": "mark-i-m",
        "timestamp": 1587336778
    },
    {
        "content": "<p>And then force all users to pick one?</p>",
        "id": 194621695,
        "sender_full_name": "mark-i-m",
        "timestamp": 1587336794
    },
    {
        "content": "<p>Yeah something like that, but more principled so that users know when to use which</p>",
        "id": 194622253,
        "sender_full_name": "Nadrieril",
        "timestamp": 1587337612
    },
    {
        "content": "<p>I mean we'd find names for those methods that make it clearer what's happening</p>",
        "id": 194622304,
        "sender_full_name": "Nadrieril",
        "timestamp": 1587337697
    },
    {
        "content": "<p>Actually it's the reverse we want: store only the filtered list but have methods to reconstruct the full one. We need that because on Constructor::apply we only get back the filtered list</p>",
        "id": 194622319,
        "sender_full_name": "Nadrieril",
        "timestamp": 1587337756
    },
    {
        "content": "<p>Essentially there's a neat underlying idea to the whole file: you can split a value into a Constructor applied to some Fields. Right now we've provided Constructor and it's neat, but the other half is handled way more ad-hoc. Having Fields would fill that gap, and we'd be able to hide stuff like field filtering under that abstraction layer I hope</p>",
        "id": 194622379,
        "sender_full_name": "Nadrieril",
        "timestamp": 1587337868
    },
    {
        "content": "<p>I need to stare at the code some more though, all this is just off the top of my head</p>",
        "id": 194622385,
        "sender_full_name": "Nadrieril",
        "timestamp": 1587337911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> Hmm, I think I vaguely understand, though you might have to explain some of that to me a bit more. Is there anything I can help with?</p>",
        "id": 195118849,
        "sender_full_name": "mark-i-m",
        "timestamp": 1587675567
    },
    {
        "content": "<p>Thanks, I appreciate the offer :) I'm not really clear myself on what needs to be done though. I haven't had time to invest in this sadly, but when I do I'll be sure to let you know!</p>",
        "id": 195125929,
        "sender_full_name": "Nadrieril",
        "timestamp": 1587680010
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> Do you mind if I take a stab at this? I would like to try to make progress on <a href=\"https://github.com/rust-lang/rust/pull/70551\" title=\"https://github.com/rust-lang/rust/pull/70551\">https://github.com/rust-lang/rust/pull/70551</a> which is blocked on de-abusing <code>TyKind::Error</code>... Do you mind if I ask you some questions?</p>",
        "id": 196004256,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588363883
    },
    {
        "content": "<p>Sure, ask away :) I'll try to not take too long to answer</p>",
        "id": 196004627,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588364067
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span>! Any suggestions for a starting point? So far I've define a <code>Fields</code> struct as above (but I will change it as you described). IIUC, I should change <code>Constructor::apply</code> to use <code>Fields</code> instead of <code>Iterator&lt;Pat&gt;</code>, and it should use the filtered list correct? Also can you point me to an example of constructing the full list so I can see how to do that?</p>",
        "id": 196005500,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588364601
    },
    {
        "content": "<p>Oh, one other thing: as I've been looking at the code, I've found that sometimes we have owned <code>Pat</code>s and sometimes we have references/slices of <code>Pat</code>s on an arena... would it be possible to _always_ intern <code>Pat</code> in the arena and only deal with a thin handle (kind of like we do with <code>ty::Ty</code>?</p>",
        "id": 196013712,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588369478
    },
    {
        "content": "<p>Looking a bit more, it looks like only the match-checking code uses an arena... would it be possible to convert the other uses of <code>Pat</code> to also use (a different) arena? We could also make <code>PatKind</code> be arena-allocated. Currently, we are using boxes...</p>",
        "id": 196015806,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588370942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span>  About arenas, I honestly don't know. I'm guessing there aren't many places where we have a choice because any Pat we want to store in the matrix need to be  arena-allocated. So anything in Fields will have to be in the arena for example. Would it simplify things if everything was in the arena ?</p>",
        "id": 196024960,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588380674
    },
    {
        "content": "<p>Indeed Constructor::apply would take Fields as input. And wildcard_subpatterns would return Fields. Constructor::arity would need to be updated to take into account that we filtered some fields out</p>",
        "id": 196025098,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588380853
    },
    {
        "content": "<p>I mean, start of course by just using Field in the right places and not filter out anything. We can add filtering later once we're sure everything still works</p>",
        "id": 196025121,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588380889
    },
    {
        "content": "<p>Honestly I hope that's the right approach, I'm far from certain</p>",
        "id": 196025131,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588380908
    },
    {
        "content": "<p>One of the trickiest bits I expected to be <code>patterns_for_variant</code>. That may force Fields to be a Vec&lt;&amp;'p Pat&gt; instead of a slice. Or a Cow maybe</p>",
        "id": 196025211,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588381075
    },
    {
        "content": "<p>Ah and I expect specialize_one_pattern to return Fields of course</p>",
        "id": 196025324,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588381256
    },
    {
        "content": "<p>That's kind of the inverse of apply</p>",
        "id": 196025330,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588381275
    },
    {
        "content": "<p>Ugh the comment there is a bit confused. I'm starting to think you might need to understand the actual algorithm to make this work &gt;&lt;</p>",
        "id": 196025455,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588381475
    },
    {
        "content": "<p>I _think_ I've mentioned most of the functions that would need a change ? So maybe it's not that complicated</p>",
        "id": 196027134,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588384375
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span>  I should finally be free of stress on Tuesday. I had planned to work on this then, so if you prefer I'm happy to do it then, and then your PR can move forward</p>",
        "id": 196063189,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588442555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> Thanks for the comments! I probably won't get to work a lot on this before Tuesday, so it might make more sense for you to go ahead. It would probably take me a while because I would need to go through and understand the code first. Still, I'm glad to help in any way I can.</p>",
        "id": 196063801,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588443546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"198054\">@mark-i-m</span> <a href=\"https://github.com/rust-lang/rust/pull/71930\" title=\"https://github.com/rust-lang/rust/pull/71930\">https://github.com/rust-lang/rust/pull/71930</a></p>",
        "id": 196369791,
        "sender_full_name": "Nadrieril",
        "timestamp": 1588713656
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span>!</p>",
        "id": 196491265,
        "sender_full_name": "mark-i-m",
        "timestamp": 1588739308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245339\">@Nadrieril</span> Btw, if you have time, would you be interested in writing up some documentation about pattern checking the rustc-dev-guide? <a href=\"https://rustc-dev-guide.rust-lang.org/pat-exhaustive-checking.html\">https://rustc-dev-guide.rust-lang.org/pat-exhaustive-checking.html</a></p>",
        "id": 197573017,
        "sender_full_name": "mark-i-m",
        "timestamp": 1589470427
    },
    {
        "content": "<p>It's been on my todo list for a while yeah x)</p>",
        "id": 197608146,
        "sender_full_name": "Nadrieril",
        "timestamp": 1589485610
    },
    {
        "content": "<p>I'll try when I find some time</p>",
        "id": 197608235,
        "sender_full_name": "Nadrieril",
        "timestamp": 1589485651
    },
    {
        "content": "<p>I'll try when I find some time</p>",
        "id": 197623044,
        "sender_full_name": "Nadrieril",
        "timestamp": 1589493100
    }
]