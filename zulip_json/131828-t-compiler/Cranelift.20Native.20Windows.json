[
    {
        "content": "<p>Just for fun, I'm trying to compile cranelift natively on windows. I can build cranelift, trying to build sysroot results in an assertion failure when I get to compiling libc (with or without cherry-picking wip_windows_support3):</p>\n<div class=\"codehilite\"><pre><span></span><code>   Compiling core v0.0.0 (D:\\Dev\\Git\\rustc_codegen_cranelift\\build_sysroot\\sysroot_src\\library\\core)\n   Compiling rustc-std-workspace-core v1.99.0 (D:\\Dev\\Git\\rustc_codegen_cranelift\\build_sysroot\\sysroot_src\\library\\rustc-std-workspace-core)\n   Compiling compiler_builtins v0.1.39 (D:\\Dev\\Git\\rustc_codegen_cranelift\\build_sysroot\\compiler-builtins)\n[rustc_std_workspace_core      : codegen mono items] start\n[rustc_std_workspace_core      : codegen mono items] end time: 1.2314ms\n   Compiling libc v0.2.84\n[libc                          : codegen mono items] start\nthread &#39;rustc&#39; panicked at &#39;int args only supported for SysV calling convention&#39;, C:\\Users\\runet\\.cargo\\git\\checkouts\\wasmtime-41807828cb3a7a7e\\986b576\\cranelift\\codegen\\src\\isa\\x64\\abi.rs:749:14\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nerror: Unrecognized option: &#39;clif&#39;\n\nInstance { def: Item(WithOptConstParam { did: DefId(0:65 ~ libc[2b91]::windows::{impl#1}::clone), const_param_did: None }), substs: [] } _ZN62_$LT$libc..windows..timezone$u20$as$u20$core..clone..Clone$GT$5clone17h06c26bc747eab085E\nerror: could not compile `libc`\n\nTo learn more, run the command again with --verbose.\nwarning: build failed, waiting for other jobs to finish...\n[core                          : codegen mono items] start\nthread &#39;rustc&#39; panicked at &#39;int args only supported for SysV calling convention&#39;, C:\\Users\\runet\\.cargo\\git\\checkouts\\wasmtime-41807828cb3a7a7e\\986b576\\cranelift\\codegen\\src\\isa\\x64\\abi.rs:749:14\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nerror: Unrecognized option: &#39;clif&#39;\n\nInstance { def: DropGlue(DefId(0:1663 ~ core[55a8]::ptr::drop_in_place), None), substs: [&amp;i8] } _ZN4core3ptr27drop_in_place$LT$$RF$i8$GT$17hd0c662a06d30e437E\n[compiler_builtins             : codegen mono items] start\nthread &#39;rustc&#39; panicked at &#39;not yet implemented&#39;, C:\\Users\\runet\\.cargo\\git\\checkouts\\wasmtime-41807828cb3a7a7e\\986b576\\cranelift\\codegen\\src\\isa\\x64\\abi.rs:824:90\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nerror: internal compiler error: unexpected panic\n\nerror: Unrecognized option: &#39;clif&#39;\n\nInstance { def: Item(WithOptConstParam { did: DefId(0:336 ~ compiler_builtins[c8c4]::float::conv::__floatsisf), const_param_did: None }), substs: [] } _ZN17compiler_builtins5float4conv11__floatsisf17h9eebe69e2fe6a727E\nerror: build failed\n</code></pre></div>",
        "id": 224822202,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612233832
    },
    {
        "content": "<p>So I guess it's time to look at wasmtime itself, as that's where the actual failure is coming from</p>",
        "id": 224822257,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612233894
    },
    {
        "content": "<p>Actually, first, check cranelift to see if <code>ise::x64</code> is actually what's wanted here</p>",
        "id": 224822306,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612233962
    },
    {
        "content": "<p>Debugging:<br>\nOkay, the errors happening in libc and core:<br>\nIn <code>core</code>, while trying to generate drop glue for <code>core::ptr::drop_in_place</code><br>\nIn <code>core</code> again, a 'not yet implemented' while trying to generate code for <code>compiler_builtins::float::conv::__floatsisf</code><br>\nIn <code>libc</code>, while trying to codegen <code>impl ::Clone for timezone</code> in <code>libc::windows</code></p>",
        "id": 224822619,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612234376
    },
    {
        "content": "<p>Trying to get a local build of wasmtime for testing changes, but I'm having issues where uncommenting all the patches but gimli results in mismatched types, <code>cranelift_object::object::*</code> not being the same as <code>object::*</code></p>",
        "id": 224823588,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612235599
    },
    {
        "content": "<p>Yeah, the new x64 backend doesn't yet have support for the <code>WindowsFastcall</code> calling convention. There is also no PE style TLS support for both the old and new backend.</p>",
        "id": 224834126,
        "sender_full_name": "bjorn3",
        "timestamp": 1612248095
    },
    {
        "content": "<p>Is there any solution for the type mismatch, trying to use a local cranelift checkout? I probably won't have too much time to sink into this, but I can't even get a patched cranelift to build.</p>",
        "id": 224896821,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612283619
    },
    {
        "content": "<p>Thank you for all your work on this, I don't mean to take up too much of your time. I like the idea of it on Windows, but this is just a little 'Huh, can I get it working' project for me.</p>",
        "id": 224897214,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612283768
    },
    {
        "content": "<p>For me the <code>wip_windows_support3</code> branch \"works\" when cross-compiling to mingw from linux using <code>TARGET_TRIPLE=x86_64-pc-windows-gnu ./test.sh --oldbe</code>. 128bit shift operations don't work (used for some float operations) and thread local storage isn't thread local.</p>",
        "id": 224897561,
        "sender_full_name": "bjorn3",
        "timestamp": 1612283926
    },
    {
        "content": "<p>The type mismatch when using a local wasmtime checkout may be because I haven't yet updated to the latest cranelift and object version.</p>",
        "id": 224897842,
        "sender_full_name": "bjorn3",
        "timestamp": 1612284027
    },
    {
        "content": "<p>I think commit <a href=\"https://github.com/rust-lang/rust/commit/57c686d49d58cbc5af7dda14e8dce4470f138f20\">57c686d49d58cbc5af7dda14e8dce4470f138f20</a> of wasmtime will work. This is the commit just it updated the object dependency.</p>",
        "id": 224897977,
        "sender_full_name": "bjorn3",
        "timestamp": 1612284085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"319144\">@CraftSpider</span> ^</p>",
        "id": 224898012,
        "sender_full_name": "bjorn3",
        "timestamp": 1612284100
    },
    {
        "content": "<p>That commit works to build, thanks. cherry-picking wip_windows_support3 doesn't fix the calling issues, but is probably necessary in general.<br>\nFor calling convention: Wooh, WindowsFastcall apparently requires you to know the <em>size</em> of the arguments as well as their index, meaning the existing functions in <code>abi.rs</code> need alteration to be given more context</p>",
        "id": 224905921,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612286900
    },
    {
        "content": "<p>wip_windows_support3 among some other things fixes the abi used for most 128bit int ops.</p>",
        "id": 224906554,
        "sender_full_name": "bjorn3",
        "timestamp": 1612287149
    },
    {
        "content": "<p>(Note, I said something silly in 'needs size', it's asking for an int. But it's still possibly an issue with context, I need to understand the actual call-sites. Time for some fun)</p>",
        "id": 224933502,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612298561
    },
    {
        "content": "<p>Wish I could <code>#[cfg(not(cranelift))]</code> or such, is there an equivalent? Or would I just have to make a patch file</p>",
        "id": 224940158,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612301691
    },
    {
        "content": "<p>I also realised I didn't read well, WindowsFastcall on x64 is just the x64 convention, and that isn't hard to implement (Assuming I did it right. I probably didn't, but it <em>should</em> be easy to fix as long as I can figure out what part I mixed up)</p>",
        "id": 224940410,
        "sender_full_name": "CraftSpider",
        "timestamp": 1612301848
    },
    {
        "content": "<p>There is no <code>#[cfg]</code> for cg_clif. At the time custom codegen backends are initialized the <code>Session</code> that contains a full list of them is already immutable.</p>",
        "id": 224949974,
        "sender_full_name": "bjorn3",
        "timestamp": 1612306893
    }
]