[
    {
        "content": "<p>Does anybody know how the implementation of <code>PartialOrd</code> works for <code>*const T</code> pointers? It looks recursive to me. For example, less than is defined <a href=\"https://github.com/rust-lang/rust/blob/65e485d8f1d28102b426c9d6d82f835cd6470d3e/src/libcore/ptr.rs#L2620\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/65e485d8f1d28102b426c9d6d82f835cd6470d3e/src/libcore/ptr.rs#L2620\">here</a> as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"o\">?</span><span class=\"nb\">Sized</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">PartialOrd</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">lt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">other</span>: <span class=\"kp\">&amp;</span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>So doesn't the body of <code>lt()</code> call itself since <code>*&amp;*const T</code> is just a <code>*const T</code>? Or is there deref coercion magic going on?</p>",
        "id": 146838687,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1541468925
    },
    {
        "content": "<p>This is true for all primitives. These operations are not actually lowered to a call to the trait method. You can see this \"exposed\" if you add a println to the method and do the operation. The println won't show up for the primitive</p>",
        "id": 146850317,
        "sender_full_name": "oli",
        "timestamp": 1541489869
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"124288\">@Oli</span>! I don't see any special attributes or anything on these methods. How does the compiler know not to lower these to method calls?</p>",
        "id": 146866307,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1541512976
    },
    {
        "content": "<p>The transformation in <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/hair/cx/expr.rs#L367\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_mir/hair/cx/expr.rs#L367\">HAIR</a> checks whether some earlier passes decided this. Not sure where exactly that decision is happening, but I'm fairly certain it's simply hardcoded</p>",
        "id": 146867120,
        "sender_full_name": "oli",
        "timestamp": 1541513987
    },
    {
        "content": "<p>The code is here:</p>\n<p><a href=\"https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src/librustc_typeck/check/writeback.rs#L122-L172\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src/librustc_typeck/check/writeback.rs#L122-L172\">https://github.com/rust-lang/rust/blob/653da4fd006c97625247acd7e076d0782cdc149b/src/librustc_typeck/check/writeback.rs#L122-L172</a></p>",
        "id": 147307814,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541691902
    }
]