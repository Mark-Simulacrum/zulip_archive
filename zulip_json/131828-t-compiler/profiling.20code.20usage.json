[
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> and I have been exploring the code usage in rust-analyzer due to salsa. We've found some curious results that we don't understand. I was thinking that what would be really useful is if we had something akin to <code>-Zself-profile</code> which would do the following:</p>\n<ul>\n<li>print out every monomorphized instance (along with its type parameters) and the size of its associated LLVM code</li>\n<li>instrument the \"collector\" so that we also print out graph edges showing <strong>why</strong> each monomorphized instance was created (ideally, all the graph edges)</li>\n</ul>\n<p>cc <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>, <span class=\"user-mention\" data-user-id=\"116015\">@Alex Crichton</span>, <span class=\"user-mention\" data-user-id=\"120989\">@njn</span> and <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> as folks I thought might either have ideas of tooling to use for this or be interested in this. (I feel like I've seen some people talk about similar tooling at some point or another...)</p>",
        "id": 203084482,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594115476
    },
    {
        "content": "<p>Would such a thing be helpful for determining “this bit of source code is the one that makes compiling my async code so slow” and/or “what’s taking up all the space on my tiny development board”?</p>",
        "id": 203089390,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1594120026
    },
    {
        "content": "<p>Link to curious results: <a href=\"https://salsa.zulipchat.com/#narrow/stream/145099-general/topic/benchmarking/near/202989701\">https://salsa.zulipchat.com/#narrow/stream/145099-general/topic/benchmarking/near/202989701</a> (note that this needs quite a bit of context about salsa to really dig into unfortunatelly)</p>",
        "id": 203093070,
        "sender_full_name": "matklad",
        "timestamp": 1594123111
    },
    {
        "content": "<p>is the mono item <code>size_estimate</code> interesting ? it could be added to the partitioning's existing <code>-Z print-mono-items</code> output (I realize this only applies to sizes and not printing the mono item graph w/ edges) edit: ah there's already another partitioning debug dump which prints this estimated size (but requires debug assertions)</p>",
        "id": 203097445,
        "sender_full_name": "lqd",
        "timestamp": 1594126230
    },
    {
        "content": "<p>I’d also be interested in helping with something like this.</p>",
        "id": 203100375,
        "sender_full_name": "davidtwco",
        "timestamp": 1594127916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> it'd show very clearly where polymorphization helps :)</p>",
        "id": 203102228,
        "sender_full_name": "lqd",
        "timestamp": 1594128758
    },
    {
        "content": "<p>Hence my interest <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 203102324,
        "sender_full_name": "davidtwco",
        "timestamp": 1594128803
    },
    {
        "content": "<p>(especially with a .diff like the mir-opt tests)</p>",
        "id": 203102513,
        "sender_full_name": "lqd",
        "timestamp": 1594128870
    },
    {
        "content": "<p>I've got a tool from awhile back which will say \"this function generated this much LLVM IR\", summed up across all monomorphizations across all codegen units, but it doesn't tell you much as to why</p>",
        "id": 203104991,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594129978
    },
    {
        "content": "<p>it sounds like y'all are more interested in the graph respects of monomorphization?</p>",
        "id": 203105026,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594129996
    },
    {
        "content": "<p>although one thing I also did was process my results with twiggy which has support for showing \"dominators\", which is akin to \"this function is solely responsible for pulling in all these other functions\"</p>",
        "id": 203105084,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594130031
    },
    {
        "content": "<p>I can try to share the tool if it'd help</p>",
        "id": 203105141,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594130044
    },
    {
        "content": "<p>similar to <a href=\"https://github.com/dtolnay/cargo-llvm-lines/\">https://github.com/dtolnay/cargo-llvm-lines/</a> ?</p>",
        "id": 203105576,
        "sender_full_name": "lqd",
        "timestamp": 1594130217
    },
    {
        "content": "<p>similar in spirit yeah, but different in implementation</p>",
        "id": 203106083,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594130477
    },
    {
        "content": "<p>(just dumping the mono item graph as a dot file <em>may</em> be hard to read) <a href=\"/user_uploads/4715/ougdb5R-ZuKzJs6-WXpBwSBc/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/4715/ougdb5R-ZuKzJs6-WXpBwSBc/image.png\" title=\"image.png\"><img src=\"/user_uploads/4715/ougdb5R-ZuKzJs6-WXpBwSBc/image.png\"></a></div>",
        "id": 203116735,
        "sender_full_name": "lqd",
        "timestamp": 1594135248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> what is that from?</p>",
        "id": 203118153,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594135801
    },
    {
        "content": "<p>just messing around trying to see what the collector's InliningMap looks like on a simple example</p>",
        "id": 203118379,
        "sender_full_name": "lqd",
        "timestamp": 1594135877
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116113\">lqd</span> <a href=\"#narrow/stream/131828-t-compiler/topic/profiling.20code.20usage/near/203097445\">said</a>:</p>\n<blockquote>\n<p>edit: ah there's already another partitioning debug dump which prints this estimated size (but requires debug assertions)</p>\n</blockquote>\n<p>Just so everyone knows, if you do <code>RUSTC_LOG=rustc_mir::monomorphize::partitioning</code>, you can see the cgu partitioning initially, after merging small cgus and after inlining items: </p>\n<div class=\"codehilite\"><pre><span></span><code>wesley@endurance:~/code/rust/rust2&gt; RUSTC_LOG=rustc_mir::monomorphize::partitioning rustc +stage1-3 test.rs --crate-type=lib\nwarning: unused import: `std::mem`\n --&gt; test.rs:2:5\n  |\n2 | use std::mem;\n  |     ^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n[DEBUG rustc_mir::monomorphize::partitioning] INITIAL PARTITIONING:\n[DEBUG rustc_mir::monomorphize::partitioning] CodegenUnit 3vrhl32f903ey4ju estimated size 5 :\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::drop_in_place[0]&lt;alloc::vec[0]::Vec[0]&lt;u8&gt;&gt; [(External, Default)] [h04e46ad5d014fca5E] estimated size 1\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::drop_in_place[0]&lt;test::Foo[0]&gt; [(External, Default)] [h45211b5884ae8842E] estimated size 1\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::drop_in_place[0]&lt;alloc::vec[0]::Vec[0]&lt;i32&gt;&gt; [(External, Default)] [h1994aa6a797dfedeE] estimated size 1\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::drop_in_place[0]&lt;alloc::string[0]::String[0]&gt; [(External, Default)] [h7b8cb49732066e57E] estimated size 0\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::drop_in_place[0]&lt;alloc::raw_vec[0]::RawVec[0]&lt;i32, alloc::alloc[0]::Global[0]&gt;&gt; [(External, Default)] [h8f8d2d9651824446E] estimated size 1\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::drop_in_place[0]&lt;alloc::raw_vec[0]::RawVec[0]&lt;u8, alloc::alloc[0]::Global[0]&gt;&gt; [(External, Default)] [h07bee7e7ce249bc1E] estimated size 1\n[DEBUG rustc_mir::monomorphize::partitioning]\n[DEBUG rustc_mir::monomorphize::partitioning] CodegenUnit 5f2o87rkvt82sxc5 estimated size 40 :\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn test::{{impl}}[0]::match_to_static[0] [(External, Default)] [h86e2e606b018f385E] estimated size 40\n[DEBUG rustc_mir::monomorphize::partitioning]\n[DEBUG rustc_mir::monomorphize::partitioning] CodegenUnit 3kgi2eircqwriiff estimated size 34 :\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::slice_from_raw_parts_mut[0]&lt;u8&gt; [(External, Default)] [hb3fb6e51c4d38181E] estimated size 17\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::slice_from_raw_parts_mut[0]&lt;i32&gt; [(External, Default)] [hfc1b3eb34b0b8f76E] estimated size 17\n[DEBUG rustc_mir::monomorphize::partitioning]\n[DEBUG rustc_mir::monomorphize::partitioning] CodegenUnit mf27uel3gr4l5my estimated size 150 :\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn alloc::raw_vec[0]::{{impl}}[3]::drop[0]&lt;u8, alloc::alloc[0]::Global[0]&gt; [(External, Default)] [hc9dd369ebb51c4ceE] estimated size 22\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn alloc::raw_vec[0]::{{impl}}[3]::drop[0]&lt;i32, alloc::alloc[0]::Global[0]&gt; [(External, Default)] [h51a9f0bb0c6fe880E] estimated size 22\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn alloc::raw_vec[0]::{{impl}}[1]::ptr[0]&lt;u8, alloc::alloc[0]::Global[0]&gt; [(External, Default)] [h0e3656790a928383E] estimated size 3\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn alloc::raw_vec[0]::{{impl}}[1]::current_memory[0]&lt;u8, alloc::alloc[0]::Global[0]&gt; [(External, Default)] [hf09d821d6f8d39cbE] estimated size 50\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn alloc::raw_vec[0]::{{impl}}[1]::ptr[0]&lt;i32, alloc::alloc[0]::Global[0]&gt; [(External, Default)] [hc163c5274950be47E] estimated size 3\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn alloc::raw_vec[0]::{{impl}}[1]::current_memory[0]&lt;i32, alloc::alloc[0]::Global[0]&gt; [(External, Default)] [hd93a9acdc8155e74E] estimated size 50\n[DEBUG rustc_mir::monomorphize::partitioning]\n[DEBUG rustc_mir::monomorphize::partitioning] CodegenUnit 3x5xiqw127bb07ye estimated size 30 :\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn alloc::alloc[0]::{{impl}}[0]::dealloc[0] [(External, Hidden)] [h2a2d5166e492dd34E] estimated size 17\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn alloc::alloc[0]::dealloc[0] [(External, Hidden)] [h9d208879dcf5db14E] estimated size 13\n[DEBUG rustc_mir::monomorphize::partitioning]\n[DEBUG rustc_mir::monomorphize::partitioning] CodegenUnit eputs5eg4igd22g estimated size 40 :\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::unique[0]::{{impl}}[3]::as_ptr[0]&lt;i32&gt; [(External, Default)] [h99e00e7efc0a1854E] estimated size 4\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::unique[0]::{{impl}}[3]::new_unchecked[0]&lt;u8&gt; [(External, Default)] [hddba8130d82c2489E] estimated size 13\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::unique[0]::{{impl}}[3]::cast[0]&lt;u8, u8&gt; [(External, Default)] [h2de7333e774c2877E] estimated size 8\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::unique[0]::{{impl}}[3]::as_ptr[0]&lt;u8&gt; [(External, Default)] [h1ee3983e6af09b15E] estimated size 4\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::unique[0]::{{impl}}[3]::cast[0]&lt;i32, u8&gt; [(External, Default)] [hfaa80e91b6f75308E] estimated size 8\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::convert[0]::{{impl}}[3]::into[0]&lt;core::ptr[0]::unique[0]::Unique[0]&lt;u8&gt;, core::ptr[0]::non_null[0]::NonNull[0]&lt;u8&gt;&gt; [(External, Default)] [h6ef1f8b2dd6d2cfdE] estimated size 3\n[DEBUG rustc_mir::monomorphize::partitioning]\n[DEBUG rustc_mir::monomorphize::partitioning] POST MERGING:\n[DEBUG rustc_mir::monomorphize::partitioning] CodegenUnit test.3a1fbbbh-cgu.0 estimated size 18 :\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::mut_ptr[0]::{{impl}}[0]::is_null[0]&lt;i32&gt; [(External, Default)] [h34bb84bb2069daa6E] estimated size 9\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::mut_ptr[0]::{{impl}}[0]::is_null[0]&lt;u8&gt; [(External, Default)] [h4ffff520fa537771E] estimated size 9\n[DEBUG rustc_mir::monomorphize::partitioning]\n[DEBUG rustc_mir::monomorphize::partitioning] CodegenUnit test.3a1fbbbh-cgu.1 estimated size 19 :\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::non_null[0]::{{impl}}[3]::as_ptr[0]&lt;u8&gt; [(External, Default)] [had92c948a937b33bE] estimated size 4\n[DEBUG rustc_mir::monomorphize::partitioning]  - fn core::ptr[0]::non_null[0]::{{impl}}[16]::from[0]&lt;u8&gt; [(External, Default)] [h4802c4dd8caf26d8E] estimated size 5\n\n(More content...)\n</code></pre></div>",
        "id": 203119944,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594136607
    },
    {
        "content": "<p>A tool like that would be really helpful for <a class=\"stream\" data-stream-id=\"241847\" href=\"/#narrow/stream/241847-t-compiler.2Fwg-incr-comp\">#t-compiler/wg-incr-comp</a></p>",
        "id": 203120158,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594136700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> would it be interesting to improve <code>-Z print-mono-items</code> to be closer to the log output ? (or is that still too abstracted away from llvm codegen statistics)</p>",
        "id": 203123023,
        "sender_full_name": "lqd",
        "timestamp": 1594137975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I think the <code>.diff</code> idea you mentioned would actually be really useful. I was trying to figure out which step was bringing in items and I was basically just manually pasting the output of each stage into my diff tool which was really tedious.</p>",
        "id": 203123508,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1594138128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116113\">@lqd</span> I suspect that a graph like that, hard to read or not, would be useful for the kind of detective work that <span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> was doing</p>",
        "id": 203127031,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594139631
    },
    {
        "content": "<p>though really the <em>graph</em> rendering is not that imporant</p>",
        "id": 203127048,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594139637
    },
    {
        "content": "<p>as just having the list of \"reasons this bit of code was instantiated\"</p>",
        "id": 203127102,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594139645
    },
    {
        "content": "<p>i.e., a text format may be easier to consume</p>",
        "id": 203127125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594139652
    },
    {
        "content": "<p>yes that's what I was suggesting with this excerpt of an already big graph :) i.e. that even just having the edges as text format would probably be useful already (and this was what I was trying, before attempting to visualize the graph) I'll keep at it. Visibility/stats in this area of the compiler seems to be at the crossing of many use cases, and I'm sure <span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> and I can make some progress on that front</p>",
        "id": 203127977,
        "sender_full_name": "lqd",
        "timestamp": 1594140056
    },
    {
        "content": "<p>In the interest of cross-references, this is an issue I've opened on cargo llvm-lines: <a href=\"https://github.com/dtolnay/cargo-llvm-lines/issues/25\">https://github.com/dtolnay/cargo-llvm-lines/issues/25</a></p>",
        "id": 203128682,
        "sender_full_name": "matklad",
        "timestamp": 1594140401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> In the issue you wrote \"if you have a generic fn&lt;T&gt; foo() function in crate A, and use it in crates B and C, you compile it twice.\" Once you know that, what do you do? Just restructure the code to avoid it?</p>",
        "id": 203215005,
        "sender_full_name": "njn",
        "timestamp": 1594163864
    },
    {
        "content": "<p>Also, just before that you said \"the biggest win comes from noticing things that are monomorphised in the wrong crate\". What exactly does \"wrong\" mean here? Like, you didn't realize the code was structured this way? Or rustc is doing something wrong?</p>",
        "id": 203215185,
        "sender_full_name": "njn",
        "timestamp": 1594164017
    },
    {
        "content": "<p><a href=\"https://gist.github.com/lqd/23cb5ffd286eb4bff2a8758bf7479b65\">https://gist.github.com/lqd/23cb5ffd286eb4bff2a8758bf7479b65</a> is an example of what I had as a slight modification of <code>-Z print-mono-items</code> with the added estimated size and mono item graph edges (the list of accessor items, per accessed item), whereas it currently looks like <a href=\"https://gist.github.com/lqd/2966f52162149d744a100871df1a1dcf\">https://gist.github.com/lqd/2966f52162149d744a100871df1a1dcf</a> (for 2 crates with a single generic function each, doing a println, monomorphized over 5 types or so)</p>",
        "id": 203217688,
        "sender_full_name": "lqd",
        "timestamp": 1594166256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120989\">@njn</span> yup, basically \"Just restructure the code to avoid it?\", where \"Just\" might be pretty  involved.</p>\n<blockquote>\n<p>What exactly does \"wrong\" mean here? Like, you didn't realize the code was structured this way? </p>\n</blockquote>\n<p>Both. </p>\n<p>Sometimes you expected the bulk of codegen happen in the upstream crate, but it happens in the downstream crates, because there's some genricness that you've missed.</p>\n<p>However in the case of salsa, it might also be that rustc is doing something wrong. At least <span class=\"user-mention silent\" data-user-id=\"116009\">nikomatsakis</span> convinced me that a change that brought 5x llvm-lines shouldn't be necessary: <a href=\"https://salsa.zulipchat.com/#narrow/stream/145099-general/topic/benchmarking/near/203015044\">https://salsa.zulipchat.com/#narrow/stream/145099-general/topic/benchmarking/near/203015044</a></p>",
        "id": 203246106,
        "sender_full_name": "matklad",
        "timestamp": 1594199507
    },
    {
        "content": "<p>@matklad: I can't access that salsa Zulip. Does it require a different account?</p>",
        "id": 203248207,
        "sender_full_name": "njn",
        "timestamp": 1594201310
    },
    {
        "content": "<p>Every Zulip on <a href=\"http://zulipchat.com\">zulipchat.com</a> (the Zulip instances hosted by the Zulip developers) is a different account - it's just like Slack instances.</p>",
        "id": 203248688,
        "sender_full_name": "davidtwco",
        "timestamp": 1594201687
    },
    {
        "content": "<p>I'm a bit confused by the \"wrong crates\" and monorphizations when the example involves no generics, but a 5x change in llvm-lines provides a clear before and after to analyze</p>",
        "id": 203252535,
        "sender_full_name": "lqd",
        "timestamp": 1594204657
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133169\">@matklad</span> 5x is impressive, and definitely worth investigating.</p>",
        "id": 203310282,
        "sender_full_name": "njn",
        "timestamp": 1594235946
    },
    {
        "content": "<p>I would love it if we found out that rustc was doing something really dumb that could be easily fixed :)</p>",
        "id": 203310308,
        "sender_full_name": "njn",
        "timestamp": 1594235963
    },
    {
        "content": "<p>agreed :)</p>",
        "id": 203328585,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1594245255
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"304321\">@Yifei Teng</span></p>",
        "id": 203403177,
        "sender_full_name": "anp",
        "timestamp": 1594309695
    }
]