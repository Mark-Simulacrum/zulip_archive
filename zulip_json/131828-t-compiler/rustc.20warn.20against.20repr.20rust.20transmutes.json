[
    {
        "content": "<p>I was wondering, if transmuting between repr rust types is always ub (with some exceptions like option box), why does rustc not warn/error when there is a transmute call that does it?</p>",
        "id": 250581627,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629869522
    },
    {
        "content": "<p>That's actually a very good questionâ€¦I'd be interested in knowing the answer given that what you've said is generally true, with exceptions as noted.</p>",
        "id": 250585229,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1629874306
    },
    {
        "content": "<p>Here are some questions that make me always question if it's really UB or not. I don't think the answers are super clear-cut:</p>\n<ol>\n<li>Is it actually UB, or is it just unspecified? (I've gotten different responses at different points in rust's history)</li>\n<li>If it is UB, is it lang UB, library UB, or something else?</li>\n<li>If library UB, what about cases like <code>Vec&lt;T&gt;</code> =&gt; <code>[usize; 3]</code>. This is actually documented as the representation. (While padding is allowed, in a transmute, it would cause a compile error if any existed, which is different than UB)</li>\n<li>If language UB, how does that work? It almost feels like this runs up against claims that Rust has no typed memory (aside from pointers, perhaps, which is a completely different concern).</li>\n</ol>\n<p>That said, a lint is probably not a bad idea.</p>",
        "id": 250586680,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1629875689
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120791\">@RalfJ</span> has argued in the past that transmutes aren't actually UB <em>if you use the right layout</em>. That is, the layout details are unstable and subject to change based on compiler settings etc., so programmers can't generally rely on them, but that doesn't mean they are UB in the abstract machine - there is actually some fixed offset at which fields can be found and so on, and if your program uses the right offsets then it isn't UB.</p>",
        "id": 250586961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629875962
    },
    {
        "content": "<p>I don't think that the lint should be taken as some godsend, just that it <em>might</em> be UB. So I suppose clippy would probably be the best place to start that?</p>",
        "id": 250596975,
        "sender_full_name": "Jacob Pratt",
        "timestamp": 1629883524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rustc.20warn.20against.20repr.20rust.20transmutes/near/250586961\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"120791\">RalfJ</span> has argued in the past that transmutes aren't actually UB <em>if you use the right layout</em>. That is, the layout details are unstable and subject to change based on compiler settings etc., so programmers can't generally rely on them, but that doesn't mean they are UB in the abstract machine - there is actually some fixed offset at which fields can be found and so on, and if your program uses the right offsets then it isn't UB.</p>\n</blockquote>\n<p>Yeah, this makes a lot of sense.</p>",
        "id": 250638662,
        "sender_full_name": "Thom Chiovoloni",
        "timestamp": 1629906557
    },
    {
        "content": "<p>isn't transmuting between repr rust types always unsound (unless it is a special case) because rustc is technically allowed to change the layout however it wants to and you cannot rely on those assumptions?</p>",
        "id": 250648420,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629911006
    },
    {
        "content": "<p>two structs with the same fields are going to be the same in practice, but technically rustc is allowed to do whatever it wants so it could cause ub at any rustc release</p>",
        "id": 250648492,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629911040
    },
    {
        "content": "<p>e.g. relying on <code>Option&lt;T&gt;</code> -&gt; <code>Option&lt;U&gt;</code> and rustc adding a niche for the former/latter in a new release</p>",
        "id": 250648587,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629911066
    },
    {
        "content": "<p>Transmute to <code>Option&lt;u16&gt;</code> to <code>Option&lt;Wrapping&lt;u16&gt;&gt;</code> should always be sound, despite <code>Option</code> being a repr rust.</p>",
        "id": 250654465,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629913492
    },
    {
        "content": "<p>That's not true. It is sound for the types that have defined representation when used in conjunction with option (which is <code>Option&lt;NonNull&lt;_&gt;&gt;</code>, <code>Option&lt;&amp;_&gt;</code>, <code>Option&lt;Box&lt;_&gt;&gt;</code> and perhaps some others I forget.</p>",
        "id": 250654705,
        "sender_full_name": "nagisa",
        "timestamp": 1629913590
    },
    {
        "content": "<p>but <code>Wrapping</code> is not one of those explicitly defined ones.</p>",
        "id": 250654739,
        "sender_full_name": "nagisa",
        "timestamp": 1629913611
    },
    {
        "content": "<p>I attempted to write down a lint for invalid transmutes in the past. It broke half of the ecosystem.</p>",
        "id": 250654815,
        "sender_full_name": "nagisa",
        "timestamp": 1629913651
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/pull/51294\">https://github.com/rust-lang/rust/pull/51294</a></p>",
        "id": 250654944,
        "sender_full_name": "nagisa",
        "timestamp": 1629913692
    },
    {
        "content": "<p>But <code>Wrapping</code> is <code>#[repr(transparent)]</code></p>",
        "id": 250655412,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629913918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> so were the failures mostly about actual unsound transmutes or about false positives?</p>",
        "id": 250656750,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629914468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"303710\">Gary Guo</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rustc.20warn.20against.20repr.20rust.20transmutes/near/250655412\">said</a>:</p>\n<blockquote>\n<p>But <code>Wrapping</code> is <code>#[repr(transparent)]</code></p>\n</blockquote>\n<p>yes but that does not \"upstream\" to the type containing the transparent type. Rustc is allowed to make <code>Option&lt;Wrapping&lt;T&gt;&gt;</code> different from <code>Option&lt;T&gt;</code> just fine.</p>",
        "id": 250657018,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629914580
    },
    {
        "content": "<p>also, it might be that some very commonly used crates are using unsound transmutes which thereby causes other crates to fail. In reality the crates that need to be fixed might be lower than expected</p>",
        "id": 250657236,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629914666
    },
    {
        "content": "<p>here is an issue talking about this for anyone who didnt click on that pr <a href=\"https://github.com/rust-lang/rust/issues/50842\">https://github.com/rust-lang/rust/issues/50842</a></p>",
        "id": 250657534,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629914818
    },
    {
        "content": "<p>The issue of dead code transmutes not being ub is a bit tricky, because this means rustc would need to get info back from the dead code lint, but what if the dead code lint has not run because its disabled?</p>",
        "id": 250657628,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629914866
    },
    {
        "content": "<p>if repr(transparent) doesn't always embed into larger structs identically to the wrapped value there's probably a lot of broken unsafe code out there.</p>",
        "id": 250661535,
        "sender_full_name": "Lokathor",
        "timestamp": 1629916578
    },
    {
        "content": "<p>i mean in practice it should work just fine, im just saying that technically its unsound because rustc <em>is</em> allowed to change the representation because the \"higher\" type is repr rust</p>",
        "id": 250662181,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629916857
    },
    {
        "content": "<p>like transmuting between vecs</p>",
        "id": 250662203,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629916863
    },
    {
        "content": "<p><code>#[repr(transparent)</code> says that the effect is that the layout and ABI of the whole struct is guaranteed to be the same as that one field.</p>",
        "id": 250664249,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629917668
    },
    {
        "content": "<p>I read it as compositable</p>",
        "id": 250664465,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629917751
    },
    {
        "content": "<p>Oh but we don't guarantee that two identical repr rust structs have the same layout</p>",
        "id": 250664725,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629917834
    },
    {
        "content": "<p>So indeed it's not sound</p>",
        "id": 250664741,
        "sender_full_name": "Gary Guo",
        "timestamp": 1629917840
    },
    {
        "content": "<p>for vec, sure<br>\nfor option, no way that's morally correct even if it's technically correct</p>",
        "id": 250665004,
        "sender_full_name": "Lokathor",
        "timestamp": 1629917961
    },
    {
        "content": "<p>Yeah but its still unsound even if you should be able to do it</p>",
        "id": 250673095,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629921143
    },
    {
        "content": "<p>The UCG aim to allow that case, but they're not official yet.</p>",
        "id": 250674072,
        "sender_full_name": "The 8472",
        "timestamp": 1629921571
    },
    {
        "content": "<p>Seems like the easiest thing would be to just wait for safe-transmute to land and then just make this a lint on all uses of <code>mem::transmute</code></p>",
        "id": 250715355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629949225
    },
    {
        "content": "<p>ehhhh i dont think flat out rejecting transmute is good, there are actual uses of transmute and id rather not have transmute be warn by default</p>",
        "id": 250715394,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629949274
    },
    {
        "content": "<p>because the false positive rate is going to be so high (in the sense that people are using <code>transmute</code> in the first place because they have to) that it may as well be a lint on <code>transmute</code> full stop</p>",
        "id": 250715399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629949277
    },
    {
        "content": "<p>... if you know there are lots of false positives, why would you lint on <em>more</em> cases?</p>",
        "id": 250715437,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629949320
    },
    {
        "content": "<p>Like, if you weren't a regular I would think you're trolling</p>",
        "id": 250715486,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629949343
    },
    {
        "content": "<p>Frankly I don't think this lint will be useful, but it might be usable as a clippy restriction lint</p>",
        "id": 250715487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629949346
    },
    {
        "content": "<p>It's possible some more messaging around use of <code>transmute</code> could help but it's already surrounded by giant flashing warning signs so I think that a lint will just annoy people</p>",
        "id": 250715657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629949420
    },
    {
        "content": "<p>There are plenty of use cases for transmute that can't possibly be safe, e.g. I transmute a function pointer to a different function signature for one of my crates. I don't see why that should be linted on.</p>\n<p>(To be clear, it's absolutely cursed code, but there's no better way to write it, so I don't think a lint makes sense.)</p>",
        "id": 250715826,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629949553
    },
    {
        "content": "<p>It seems possible that safe-transmute will solve the majority of current uses of <code>transmute</code>, and if it is actually effective enough it might be possible to marginalize it some more, but I'm dubious. I have a few uses of <code>transmute</code> in my code that does stuff I know safe-transmute won't help with, like hacking around the borrow checker because of polonius style borrow patterns, or breaking privacy restrictions on a crate I don't control. If there was a warning I would just override it</p>",
        "id": 250715953,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629949641
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"271719\">@Mario Carneiro</span> I don't know why you've assumed the lint has to warn on <em>all</em> uses of transmute. The original suggestion was only to lint on uses that are definitely UB.</p>",
        "id": 250716082,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629949720
    },
    {
        "content": "<p>My theory is that most people use <code>transmute</code> responsibly, i.e. for \"cursed code\", and the lint will be useless in those cases</p>",
        "id": 250716107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629949739
    },
    {
        "content": "<p>I don't understand what you mean by \"responsibly\".</p>",
        "id": 250716137,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629949766
    },
    {
        "content": "<p>I mean when nothing safer is available</p>",
        "id": 250716153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629949784
    },
    {
        "content": "<p>Right, ok. I was assuming that my code doesn't have UB. If it does have UB I want to know so I can bang my head against it some more and see if there's an alternative.</p>",
        "id": 250716225,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629949828
    },
    {
        "content": "<p>The examples with <code>Option&lt;u16&gt;</code> vs <code>Option&lt;Wrapper&lt;u16&gt;&gt;</code> are certainly not \"definitely UB\"</p>",
        "id": 250716238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629949845
    },
    {
        "content": "<p>... how did you come to that conclusion?</p>",
        "id": 250716275,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629949878
    },
    {
        "content": "<p>There is a ton of uncertainty about layout rules and promises we may or not be committing to in UCG</p>",
        "id": 250716294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629949889
    },
    {
        "content": "<p>in the meantime I would not at all fault a rust user for throwing up their hands and using <code>transmute</code> until rust figures out what it actually wants to do</p>",
        "id": 250716412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629949957
    },
    {
        "content": "<p>Ok, then don't lint on those. I'm sure there are plenty of other cases where the lint is still useful.</p>",
        "id": 250716419,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629949960
    },
    {
        "content": "<p>I feel like <em>you</em> are throwing up your hands :P</p>",
        "id": 250716446,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1629949984
    },
    {
        "content": "<p>honestly I'm not sure what you can say about transmutes that are definitely wrong except in the case where the source and target sizes don't line up</p>",
        "id": 250716489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629950008
    },
    {
        "content": "<p>there are plenty of transmutes that are dubious but not many that can't possibly be compiled <del>correctly</del> the way the user is hoping for</p>",
        "id": 250716581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629950055
    },
    {
        "content": "<p>I think transmutes with mismatched sizes are compiled to a <code>panic</code> - in this case I think a lint is warranted (but I'm fairly sure this already lints)</p>",
        "id": 250716755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629950119
    },
    {
        "content": "<p>it is impossible to replace transmute, many things will always be \"trust me mr compiler\"</p>",
        "id": 250718540,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629951443
    },
    {
        "content": "<p>but theres many cases where its blatant ub and people dont know, i see this way too much, so id like to lint away the obviously unsound cases</p>",
        "id": 250718578,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629951479
    },
    {
        "content": "<p>If it's definitely UB in the sense that the compiler is <em>currently</em> relying on the user not doing that and will miscompile the code, then that sounds like a good lint, but I can't think of any example of that which isn't already caught</p>",
        "id": 250718815,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629951668
    },
    {
        "content": "<p>its not caught at all...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Foo</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">a</span>: <span class=\"kt\">u8</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">b</span>: <span class=\"kt\">u8</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Bar</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>this is unsound</p>",
        "id": 250719020,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629951748
    },
    {
        "content": "<p>and rustc doesnt warn against doing this</p>",
        "id": 250719040,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629951769
    },
    {
        "content": "<p>That will do what the user expects across a lot of compiler versions and optimization settings. So that's just an unstable implementation detail that happens to be true</p>",
        "id": 250719140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629951848
    },
    {
        "content": "<p>rustc (afaik) only warns against size mismatches and<code>&amp;</code> to <code>&amp;mut</code></p>",
        "id": 250719157,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629951868
    },
    {
        "content": "<p>yes, but its still unsound and the user should not be doing that</p>",
        "id": 250719170,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629951883
    },
    {
        "content": "<p>that sounds a lot like a \"trust me mr compiler\" situation to me</p>",
        "id": 250719198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629951910
    },
    {
        "content": "<p>hmmm?</p>",
        "id": 250719220,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629951926
    },
    {
        "content": "<p>it's at best a future compatibility risk</p>",
        "id": 250719241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629951947
    },
    {
        "content": "<p>rustc is relying on the user not relying on layout of repr(Rust) types, the user isnt holding up that contract, thats unsound</p>",
        "id": 250719249,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629951952
    },
    {
        "content": "<p>but it's not UB on current rust, so calling it unsound is a stretch</p>",
        "id": 250719303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629951967
    },
    {
        "content": "<p>you dont need to have UB for something to be unsound...</p>",
        "id": 250719315,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629951979
    },
    {
        "content": "<p>this can very well cause UB on a new compiler version, therefore it is unsound, doesnt matter if it doesnt in the current version</p>",
        "id": 250719357,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952002
    },
    {
        "content": "<p>soundness is just lack of UB quantified over all possible inputs</p>",
        "id": 250719371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952009
    },
    {
        "content": "<p>It's unstable, not unsound</p>",
        "id": 250719408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952027
    },
    {
        "content": "<p>do you characterize rustc as an input?</p>",
        "id": 250719423,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952036
    },
    {
        "content": "<p>this is unsound not unstable</p>",
        "id": 250719434,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952041
    },
    {
        "content": "<p>Otherwise you would have to call all of std unsound</p>",
        "id": 250719459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952055
    },
    {
        "content": "<p>thats a false argument, std is allowed to rely on special things because its the stdlib and it can be updated WITH rustc</p>",
        "id": 250719496,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952077
    },
    {
        "content": "<p>Yes, it's unstable but lives with it</p>",
        "id": 250719556,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952091
    },
    {
        "content": "<p>by staying up to date</p>",
        "id": 250719566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952098
    },
    {
        "content": "<p>but its the stdlib, your program isnt</p>",
        "id": 250719580,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952112
    },
    {
        "content": "<p>in principle an external crate can do the same and it would be no less sound</p>",
        "id": 250719583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952114
    },
    {
        "content": "<p>One way to handle unstable details is to abstract over them, another way is to adapt to the changes</p>",
        "id": 250719613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952149
    },
    {
        "content": "<p>thats not true, besides, youd need to keep up with every single rustc commit, or else you could miss a commit that causes ub on a special use of the crate</p>",
        "id": 250719615,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952151
    },
    {
        "content": "<p>Yes, if you missed a spot then you would be unsound on that version</p>",
        "id": 250719640,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952186
    },
    {
        "content": "<p>for example, you relying on a niche not existing, then rustc adding a niche and breaking everything</p>",
        "id": 250719649,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952197
    },
    {
        "content": "<p>no it would be always unsound, unsoundness means it could cause UB and this very much could</p>",
        "id": 250719709,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rustc.20warn.20against.20repr.20rust.20transmutes/near/250719423\">said</a>:</p>\n<blockquote>\n<p>do you characterize rustc as an input?</p>\n</blockquote>\n<p>rustc is a parameter, i.e. you have that a crate is sound/unsound on a certain set of versions and compiler settings of rustc</p>",
        "id": 250719774,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952285
    },
    {
        "content": "<p>something which is sound today but might be unsound tomorrow is a future compatibility hazard, but not (yet) unsound today</p>",
        "id": 250719805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952319
    },
    {
        "content": "<p>rustc is not allowed to just make something unsound if it is sound in a current version because that would break a lot of things. Therefore if rustc is allowed to make your thing cause UB in a new version, it is already unsound</p>",
        "id": 250719889,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952380
    },
    {
        "content": "<p>But there are future compatibility lints for exactly this case anyway, so a lint might still be useful</p>",
        "id": 250719926,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952389
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rustc.20warn.20against.20repr.20rust.20transmutes/near/250719889\">said</a>:</p>\n<blockquote>\n<p>rustc is not allowed to just make something unsound if it is sound in a current version because that would break a lot of things. Therefore if rustc is allowed to make your thing cause UB in a new version, it is already unsound</p>\n</blockquote>\n<p>It can if it is unstable in the current version</p>",
        "id": 250720015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952422
    },
    {
        "content": "<p>repr Rust is not documented/specified, relying on unspecified things that may cause ub if changed sounds very unsound to me</p>",
        "id": 250720023,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952428
    },
    {
        "content": "<p>but transmute and repr rust are not unstable</p>",
        "id": 250720038,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952440
    },
    {
        "content": "<p>repr rust is an opaque layout, you dont know what rustc is going to do and are not allowed to rely on it</p>",
        "id": 250720114,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952479
    },
    {
        "content": "<p>thats stable to me, its stable as \"pls dont rely on me\"</p>",
        "id": 250720121,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952488
    },
    {
        "content": "<p>Layout details of repr(Rust) are unstable, i.e. not specified. They might be specified tomorrow, they are not \"definitely and forever unspecified\" in the majority of cases</p>",
        "id": 250720225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952573
    },
    {
        "content": "<p>but until then, you cannot rely on it. I mean heck, rustc in a current version could even detect this kind of transmute and make it instant UB. It doesnt but its 100% allowed to because it established the invariant that layout details of repr rust may not be relied on</p>",
        "id": 250720348,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952675
    },
    {
        "content": "<p>the compiler establishing an invariant and you violating the invariant is the definition of unsoundness</p>",
        "id": 250720421,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952702
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"276242\">Riccardo D'Ambrosio</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rustc.20warn.20against.20repr.20rust.20transmutes/near/250720348\">said</a>:</p>\n<blockquote>\n<p>but until then, you cannot rely on it. I mean heck, rustc in a current version could even detect this kind of transmute and make it instant UB. It doesnt but its 100% allowed to because it established the invariant that layout details of repr rust may not be relied on</p>\n</blockquote>\n<p>It won't, and can't really as a practical matter because this would break tons of unsafe code in the wild</p>",
        "id": 250720460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952718
    },
    {
        "content": "<p>yes, but its fully allowed to</p>",
        "id": 250720574,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952791
    },
    {
        "content": "<p>just because you know the rustc team wont do it doesnt mean its sound</p>",
        "id": 250720595,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952799
    },
    {
        "content": "<blockquote>\n<p>established the invariant that layout details of repr rust may not be relied on</p>\n</blockquote>\n<p>That's not an invariant. I don't even know how you would express that formally</p>",
        "id": 250720711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952841
    },
    {
        "content": "<p>its kind of stated in the nomicon <a href=\"https://doc.rust-lang.org/nomicon/transmutes.html\">https://doc.rust-lang.org/nomicon/transmutes.html</a><br>\nbut obviously what is fine and what isnt isnt specified formally yet, which is even more of a reason to not do this and to instead rely on layouts that are 100% specified and fine for transmuting</p>",
        "id": 250720869,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952937
    },
    {
        "content": "<p>It seems like this boils down to \"use of <code>transmute</code> is inadvisable\", but someone who is reaching for <code>transmute</code> probably already knows that</p>",
        "id": 250720900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952966
    },
    {
        "content": "<p>there are no formally stated invariants because rust has no spec, so by that point i dont see why all other unsound things arent fine</p>",
        "id": 250720924,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629952988
    },
    {
        "content": "<p>All of the transmutes that are specified already fall under the purview of safe-transmute</p>",
        "id": 250720927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629952992
    },
    {
        "content": "<p>which is why I said that this may as well be a ban on <code>transmute</code> altogether, because once you have eliminated all the non-sketchy uses of transmute all the uses are sketchy</p>",
        "id": 250721013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953049
    },
    {
        "content": "<p>i dont really understand that thought process</p>",
        "id": 250721058,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953114
    },
    {
        "content": "<p>function-wide bans dont work, people will just think its fine and disable the lint</p>",
        "id": 250721076,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953134
    },
    {
        "content": "<p>when would a use of <code>transmute</code> <em>not</em> be linted against?</p>",
        "id": 250721080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953137
    },
    {
        "content": "<p>what does work is <code>hey, this is unsound, dont do it thanks</code></p>",
        "id": 250721087,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953145
    },
    {
        "content": "<p>when its a legitimate use, which is well, a lot of the time</p>",
        "id": 250721098,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953157
    },
    {
        "content": "<p>when it's a legitimate use, there will be another function to do it</p>",
        "id": 250721145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953173
    },
    {
        "content": "<p>that is not true</p>",
        "id": 250721148,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953177
    },
    {
        "content": "<p>take JIT compilers as an example</p>",
        "id": 250721156,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953187
    },
    {
        "content": "<p>there is no way to prove this random memory im pointing to is a function</p>",
        "id": 250721163,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953196
    },
    {
        "content": "<p>and how is that transmute relying only on stable layout details?</p>",
        "id": 250721191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953260
    },
    {
        "content": "<p>im not talking about that, im talking about linting against transmute, transmute has legitimate, sound uses that cant be statically checked</p>",
        "id": 250721245,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953288
    },
    {
        "content": "<p>I don't see how the compiler doesn't have just the same freedom in that case to change how function pointers work in such a way to break that code</p>",
        "id": 250721298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953368
    },
    {
        "content": "<p>again, it's not going to happen because of the breakage, but that is in no way a guaranteed / specified corner of the language</p>",
        "id": 250721346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953402
    },
    {
        "content": "<p>pointers are primitives, they are not repr rust, they have defined layouts that literally every single rust program relies on</p>",
        "id": 250721413,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953429
    },
    {
        "content": "<p>not function pointers - they are pointer sized but I don't think we specify anything about the target of the pointer</p>",
        "id": 250721456,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953476
    },
    {
        "content": "<p>that's basically the rust calling convention, which is unspecified</p>",
        "id": 250721469,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953513
    },
    {
        "content": "<p>calling convention has nothing to do with the function pointer, calling conv mismatch is ub that happens when you call the function, not when u take a pointer to it</p>",
        "id": 250721527,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953546
    },
    {
        "content": "<p>jit compilers use the C call conv for functions for obvious reasons anyways</p>",
        "id": 250721555,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953575
    },
    {
        "content": "<p>I don't think the validity constraints of function pointers are stable. I think they have to be nonzero, not sure if they are aligned, not sure if they have to point to a valid function</p>",
        "id": 250721685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953682
    },
    {
        "content": "<p>My point is that transmutes fall into two camps: those that will be solved by safe-transmute, and those that will be linted against by the proposed lint</p>",
        "id": 250721769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953763
    },
    {
        "content": "<p>and there are plenty of good reasons to use transmutes in the second camp</p>",
        "id": 250721856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953780
    },
    {
        "content": "<p>well jit compilers are making the same kind of function as one you would get from just linking to an extern function, so it cannot be unsound because its just mimicking linking against extern functions</p>",
        "id": 250721879,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953786
    },
    {
        "content": "<p>unsafe is enough of a \"bad stuff may happen here\", we dont need a \"welp gotta disable this because rustc devs think they know better\". It feels too opinionated to me</p>",
        "id": 250721935,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953825
    },
    {
        "content": "<p>I agree with you, but it's not specified. I hope we will specify this so that jit compilers can do this with a stability guarantee</p>",
        "id": 250721955,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629953847
    },
    {
        "content": "<p>warnings/errors against things that are blatantly ub? sure, the user is actively violating what rust is all for so that case should be handled</p>",
        "id": 250721968,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953865
    },
    {
        "content": "<p>i mean if you are going to treat everything as unspecified then rust as a whole is unsound, rust really makes zero formal guarantees for layout, what is ub, etc</p>",
        "id": 250722028,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629953906
    },
    {
        "content": "<p>Well for me soundness is a function of the compiler. As long as the crate is careful to turn things on and off appropriate to the compiler versions it's totally possible to adapt to changes in layout details. Historically rustc hasn't changed it's layout details much for the things people care to transmute though</p>",
        "id": 250722176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954015
    },
    {
        "content": "<p>but you cannot truly know if a version makes your program unsound</p>",
        "id": 250722283,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954085
    },
    {
        "content": "<p>It's not completely hopeless to determine whether rust code has UB - there is miri for example</p>",
        "id": 250722290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954090
    },
    {
        "content": "<p>layout changes wont be documented because they shouldnt be relied upon</p>",
        "id": 250722300,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954098
    },
    {
        "content": "<p>so unless you keep up with every single commit, you can miss things</p>",
        "id": 250722319,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954114
    },
    {
        "content": "<p><code>Box</code> and <code>Vec</code> have documented layout, so that's not quite true</p>",
        "id": 250722365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954126
    },
    {
        "content": "<p>miri does not catch all of ub</p>",
        "id": 250722369,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954132
    },
    {
        "content": "<p>miri can and does miss a lot of things so it shouldnt be relied upon for \"yep this is sound\"</p>",
        "id": 250722383,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954147
    },
    {
        "content": "<p>Obviously I would prefer a proper spec, but there is a proto-spec in the form of documentation in the reference / nomicon / UCG</p>",
        "id": 250722422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954186
    },
    {
        "content": "<p>so it's not as hopeless as you suggest</p>",
        "id": 250722429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954196
    },
    {
        "content": "<p>because documentation never becomes out of date ;)</p>",
        "id": 250722453,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954228
    },
    {
        "content": "<p>to my knowledge those three sources are kept up to date with rust</p>",
        "id": 250722497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954251
    },
    {
        "content": "<p>but for the most part rustc isn't changing this stuff every commit anyway, it's mostly just documenting what already exists</p>",
        "id": 250722535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954294
    },
    {
        "content": "<p>and the desire to not break huge swaths of the ecosystem keeps it mostly pinned down</p>",
        "id": 250722575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954355
    },
    {
        "content": "<p>i dont like this, i dont like relying on \"ehhh ye but they surely wont change it\". This is a cyclic thing, you dont want to tie the compiler devs' hands behind their back, because being able to abuse layout not being specified can lead to better optimization</p>",
        "id": 250722638,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954406
    },
    {
        "content": "<p>and i know if i was a rustc dev id be frustrated of missing an optimization because some users didnt decide to follow the big red warning of \"DONT RELY ON THIS LAYOUT\"</p>",
        "id": 250722754,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954475
    },
    {
        "content": "<p>That's up for the user to decide. Again, it's inadvisable to use <code>transmute</code> if you can help it, but the users that are using it probably got that message already, and a lint is only going to aggravate at that point</p>",
        "id": 250722758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954477
    },
    {
        "content": "<p>It might be fine as an opt-in lint, but it won't help most users</p>",
        "id": 250722867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954524
    },
    {
        "content": "<p>many users that use it are not aware that they shouldnt be transmuting repr rust types</p>",
        "id": 250722868,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954526
    },
    {
        "content": "<p>thats why a lint is needed</p>",
        "id": 250722877,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954541
    },
    {
        "content": "<p>If we can determine that adding <code>repr(C)</code> to the involved types is a thing the user can actually do, then that could work</p>",
        "id": 250722981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954624
    },
    {
        "content": "<p>yes that could be a nice suggestion to add to the lint</p>",
        "id": 250722994,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954647
    },
    {
        "content": "<p>but what if they can't? There will still be a huge number of positives (whether they are false is up for debate) in the wild</p>",
        "id": 250723029,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954699
    },
    {
        "content": "<p>if they cant then they just ignore the suggestion then remove the transmute or do something else</p>",
        "id": 250723076,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954724
    },
    {
        "content": "<p>the cases where its fine would need to be explicitly cased in the lint</p>",
        "id": 250723095,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954739
    },
    {
        "content": "<p>that still sounds like it would come within striking distance of safe-transmute</p>",
        "id": 250723138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954810
    },
    {
        "content": "<p>we should just recommend that instead</p>",
        "id": 250723144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954821
    },
    {
        "content": "<p>sure and if it does then the lint can just reccomend that</p>",
        "id": 250723147,
        "sender_full_name": "Riccardo D'Ambrosio",
        "timestamp": 1629954827
    },
    {
        "content": "<p>for the case of <code>*const () -&gt; fn()</code> I think it is possible for safe-transmute to handle that with <code>Neglect::SAFETY</code></p>",
        "id": 250723320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629954976
    },
    {
        "content": "<p>(the name safe-transmute here is a bit of a misnomer since we're using it for an unsafe transmute, but it's more like \"deeply checked transmute-compatibility\")</p>",
        "id": 250723391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629955054
    },
    {
        "content": "<p>note: function pointers are not always aligned, though some platforms may have them be aligned</p>",
        "id": 250735515,
        "sender_full_name": "Lokathor",
        "timestamp": 1629963732
    },
    {
        "content": "<p>Anyway: the standard library docs say \"check the nomicon\"<br>\nthen the nomicon says \"here is some advice and ultimately we don't know, maybe check UCG\"<br>\nthen UCG says \"ultimately we don't know it's probably like this but there's no RFC yet\"<br>\nthen Ralf says \"probably it should be allowed if the layout matches\".</p>",
        "id": 250735818,
        "sender_full_name": "Lokathor",
        "timestamp": 1629964005
    },
    {
        "content": "<p>ironclad spec right there</p>",
        "id": 250735884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1629964067
    },
    {
        "content": "<p>yeah it's not great and i wish T-lang would focus on this more heavily but we got an edition this year so that's how it goes</p>",
        "id": 250735957,
        "sender_full_name": "Lokathor",
        "timestamp": 1629964111
    },
    {
        "content": "<p>maybe next year this can get attention</p>",
        "id": 250735960,
        "sender_full_name": "Lokathor",
        "timestamp": 1629964123
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"271719\">Mario Carneiro</span> <a href=\"#narrow/stream/131828-t-compiler/topic/rustc.20warn.20against.20repr.20rust.20transmutes/near/250722365\">said</a>:</p>\n<blockquote>\n<p><code>Box</code> and <code>Vec</code> have documented layout, so that's not quite true</p>\n</blockquote>\n<p>Partially documented. The field order isn't specified for Vec for example, that's why you're not allowed transmute vecs and must use from/into_raw_parts</p>",
        "id": 250749074,
        "sender_full_name": "The 8472",
        "timestamp": 1629972223
    },
    {
        "content": "<p>Bone breaking will continue until morale improves: <a href=\"https://github.com/rust-lang/rust/issues/87868\">#87868</a></p>",
        "id": 250749193,
        "sender_full_name": "The 8472",
        "timestamp": 1629972287
    }
]