[
    {
        "content": "<p>I just found the following code: <a href=\"https://github.com/rust-lang/rust/blob/4253153db205251f72ea4493687a31e04a2a8ca0/compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs#L69-L72\">https://github.com/rust-lang/rust/blob/4253153db205251f72ea4493687a31e04a2a8ca0/compiler/rustc_trait_selection/src/traits/query/evaluate_obligation.rs#L69-L72</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"c1\">// Run canonical query. If overflow occurs, rerun from scratch but this time</span>\n<span class=\"w\">        </span><span class=\"c1\">// in standard trait query mode so that overflow is handled appropriately</span>\n<span class=\"w\">        </span><span class=\"c1\">// within `SelectionContext`.</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">tcx</span><span class=\"p\">.</span><span class=\"n\">evaluate_obligation</span><span class=\"p\">(</span><span class=\"n\">c_pred</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The query for <code>tcx.evaluate_obligation</code> says</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"sd\">/// Do not call this query directly: invoke `infcx.predicate_may_hold()` or</span>\n<span class=\"w\">        </span><span class=\"sd\">/// `infcx.predicate_must_hold()` instead.</span>\n<span class=\"w\">        </span><span class=\"n\">query</span><span class=\"w\"> </span><span class=\"n\">evaluate_obligation</span><span class=\"p\">(</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and the implementation is over in <code>rustc_traits</code>: <a href=\"https://github.com/rust-lang/rust/blob/4253153db205251f72ea4493687a31e04a2a8ca0/compiler/rustc_traits/src/evaluate_obligation.rs#L14\">https://github.com/rust-lang/rust/blob/4253153db205251f72ea4493687a31e04a2a8ca0/compiler/rustc_traits/src/evaluate_obligation.rs#L14</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">evaluate_obligation</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tcx</span>: <span class=\"nc\">TyCtxt</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">canonical_goal</span>: <span class=\"nc\">CanonicalPredicateGoal</span><span class=\"o\">&lt;'</span><span class=\"na\">tcx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">EvaluationResult</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OverflowError</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>What's going on here? Why not just have this inline in the same file instead of going through the query system?</p>",
        "id": 223074163,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610934110
    },
    {
        "content": "<p>query system caches things?</p>",
        "id": 223074226,
        "sender_full_name": "simulacrum",
        "timestamp": 1610934242
    },
    {
        "content": "<p>why not have it provided in the same crate, then?</p>",
        "id": 223074277,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610934309
    },
    {
        "content": "<p>and anyway it seems silly to use the query system <em>just</em> for caching, you could use an in-memory cache for that</p>",
        "id": 223074283,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610934339
    },
    {
        "content": "<p>well, caching both on disk and in memory?</p>",
        "id": 223074528,
        "sender_full_name": "simulacrum",
        "timestamp": 1610934742
    },
    {
        "content": "<p>I guess I'm confused why you call this out specifically</p>",
        "id": 223074532,
        "sender_full_name": "simulacrum",
        "timestamp": 1610934754
    },
    {
        "content": "<p>because it's only used once, within one crate</p>",
        "id": 223074535,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610934767
    },
    {
        "content": "<p>the crate split is probably just a matter of being refactored over time</p>",
        "id": 223074537,
        "sender_full_name": "simulacrum",
        "timestamp": 1610934770
    },
    {
        "content": "<p>and it <em>explicitly</em> says not to use it anywhere else</p>",
        "id": 223074540,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610934776
    },
    {
        "content": "<p>also it's making <a href=\"https://github.com/rust-lang/rust/issues/81091\">https://github.com/rust-lang/rust/issues/81091</a> harder because it means OverflowError has to be in rustc_middle instead of rustc_trait_selection</p>",
        "id": 223074550,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610934822
    },
    {
        "content": "<p>I guess - if there's no performance impact to removing it, seems fine to do so, but I'd expect a drop from the lack of caching (presumably that is why it is a query)</p>",
        "id": 223074605,
        "sender_full_name": "simulacrum",
        "timestamp": 1610934871
    },
    {
        "content": "<p>sounds good, I'll remove it and run perf</p>",
        "id": 223074609,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610934889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20does.20.60InferCtxt.3A.3Aevaluate_obligation.60.20go.20through.20tcx.3F/near/223074528\">said</a>:</p>\n<blockquote>\n<p>well, caching both on disk and in memory?</p>\n</blockquote>\n<p>evaluate_obligation is not cached on disk: <a href=\"https://github.com/rust-lang/rust/blob/4253153db205251f72ea4493687a31e04a2a8ca0/compiler/rustc_middle/src/query/mod.rs#L1536\">https://github.com/rust-lang/rust/blob/4253153db205251f72ea4493687a31e04a2a8ca0/compiler/rustc_middle/src/query/mod.rs#L1536</a></p>",
        "id": 223074616,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610934901
    },
    {
        "content": "<p>uh, why do you say so?</p>",
        "id": 223074733,
        "sender_full_name": "simulacrum",
        "timestamp": 1610935095
    },
    {
        "content": "<p>is it not the default?</p>",
        "id": 223074735,
        "sender_full_name": "simulacrum",
        "timestamp": 1610935100
    },
    {
        "content": "<p>I don't think so, no</p>",
        "id": 223074739,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610935104
    },
    {
        "content": "<p>hmm let me double check that</p>",
        "id": 223074741,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610935120
    },
    {
        "content": "<p>I am pretty confident it is the default</p>",
        "id": 223074742,
        "sender_full_name": "simulacrum",
        "timestamp": 1610935125
    },
    {
        "content": "<p>maybe <code>cache_on_disk_if</code> is saying when <em>not</em> to cache on disk</p>",
        "id": 223074748,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610935144
    },
    {
        "content": "<p>well, rather, limiting the cases, but yeah that'd be my guess</p>",
        "id": 223074755,
        "sender_full_name": "simulacrum",
        "timestamp": 1610935161
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/Why.20does.20.60InferCtxt.3A.3Aevaluate_obligation.60.20go.20through.20tcx.3F/near/223074532\">said</a>:</p>\n<blockquote>\n<p>I guess I'm confused why you call this out specifically</p>\n</blockquote>\n<p>maybe the diff will help, it's deleting 50 lines with almost no added code: <a href=\"https://github.com/rust-lang/rust/pull/81150/files\">https://github.com/rust-lang/rust/pull/81150/files</a></p>",
        "id": 223075264,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1610935990
    },
    {
        "content": "<p>Even if it isn't directly cached on disk, it is still a barier for the red-green system, allowing rustc to realize earlier that a change doesn't affect any of the users of this query and thus doesn't need to recompute them.</p>",
        "id": 223097516,
        "sender_full_name": "bjorn3",
        "timestamp": 1610962525
    }
]