[
    {
        "content": "<p>Chatting with <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span>, they wrote:</p>\n<blockquote>\n<p>whereas I prefer the <code>hir::Ty</code> node being the parent of the existential type item</p>\n</blockquote>",
        "id": 133890233,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536850292
    },
    {
        "content": "<p>I want to get rid of \"only module children and statements can be items\", tbh</p>",
        "id": 133890299,
        "sender_full_name": "eddyb",
        "timestamp": 1536850331
    },
    {
        "content": "<p>yes, I don't love that distinction :)</p>",
        "id": 133890328,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536850371
    },
    {
        "content": "<p>the HIR doesn't need AST's strong distinctions, e.g. <code>extern { fn foo(); }</code> can just use the same \"item\" type for <code>foo</code>, just a <code>ForeignFn</code> variant instead of <code>Fn</code>, let's say</p>",
        "id": 133890350,
        "sender_full_name": "eddyb",
        "timestamp": 1536850388
    },
    {
        "content": "<p>right</p>",
        "id": 133890360,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536850409
    },
    {
        "content": "<p>I guess I have to look a bit at the code... it seems like nesting the \"impl Trait\" inside the fn / type / some fresh anonymous container are all pretty similar. I see the appeal to the \"anonymous module\", in that it makes the \"scope\" of the impl trait most analogous to an explicit <code>existential type</code>, but I'm not convinced that's important.</p>",
        "id": 133890654,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1536850603
    }
]