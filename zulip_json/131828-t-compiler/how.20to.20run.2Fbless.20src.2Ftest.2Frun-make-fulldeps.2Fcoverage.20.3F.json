[
    {
        "content": "<p>While working on PR <a href=\"https://github.com/rust-lang/rust/issues/81257\">#81257</a>, I have discovered that we have a bunch of generated html files from coverage tools in the repo. What is the right invocation to <code>x.py test --bless</code> to actually regenerate them?</p>",
        "id": 224109381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1611698033
    },
    {
        "content": "<p>^ <span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> ?</p>",
        "id": 224109897,
        "sender_full_name": "pnkfelix",
        "timestamp": 1611698269
    },
    {
        "content": "<p>./x.py test src/test/run-make-fulldeps/coverage --bless</p>",
        "id": 224114434,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1611700312
    },
    {
        "content": "<p>That would imply that <code>./x.py test src/test/run-make-fulldeps/coverage</code> does something. Are the generated html files ... not checked as part of the testing...?</p>",
        "id": 224130947,
        "sender_full_name": "pnkfelix",
        "timestamp": 1611712487
    },
    {
        "content": "<p>In other words: I did the above, without <code>--bless</code>, and did not observe a test failure, despite having made an obviously broken change to the .html file for one of the coverage tests.</p>",
        "id": 224130984,
        "sender_full_name": "pnkfelix",
        "timestamp": 1611712540
    },
    {
        "content": "<p><del>It seems to me like my problem is somehow arising because of how the bootstrap system is trying to communicate to <code>compiletest</code> that profiler support is enabled. At least, for me, I am seeing that bootstrap is <em>trying</em> to set env var RUSTC_PROFILER_SUPPORT to 1, but <code>compiletest</code>, when reading that env var, is saying that its <code>None</code>. <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></del> No, maybe its not this. argh I do hate how hard it is to treat <code>compiletest</code> as its own entity.</p>",
        "id": 224826522,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612238614
    },
    {
        "content": "<p>whelp, its gotten to the point where I am now running invoking <code>compiletest</code> under <code>rr</code> so that I can go back through its execution and figure out how its actually invoking these tests and why its accepting my bogus coverage files.</p>",
        "id": 224828832,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612241476
    },
    {
        "content": "<p>(I'll tell you one thing: the fact that I was able to accidentally delete the <code>tools.mk</code> file, run <code>x.py test</code> for the run-make-fulldeps, and have everything <em>but</em> the coverage tests fail, leads me to wonder if the coverage tests makefile has something wrong with it where its a little too eager to pass...)</p>",
        "id": 224829267,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612242005
    },
    {
        "content": "<p>If you pass -v it should show you what command line it passes</p>",
        "id": 224847357,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612258675
    },
    {
        "content": "<p>In my experience so far, the verbosity levels available via <code>config.toml</code> do not trigger sufficient exposure of info from the <code>compiletest</code> runs</p>",
        "id": 224881075,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612277474
    },
    {
        "content": "<p>(and trying to run <code>compiletest</code> directly works in some contexts, but not in others, because we do not make it sufficiently clear what environment variables are being set/cleared by <code>x.py</code>)</p>",
        "id": 224881151,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612277518
    },
    {
        "content": "<p>This has been a long standing point of frustration for me with our infrastructure. In some ways I’m shocked its taken me this long to consider running <code>compiletest</code> under <code>rr</code> to sidestep these issues.</p>",
        "id": 224881246,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612277550
    },
    {
        "content": "<p>hm, I thought we threaded through arbitrary levels of verbosity, so this is a surprise to me</p>",
        "id": 224881494,
        "sender_full_name": "simulacrum",
        "timestamp": 1612277665
    },
    {
        "content": "<p>I’d love to be proven wrong here</p>",
        "id": 224881569,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612277698
    },
    {
        "content": "<p>Of course its obvous that <em>something</em> is different about my setup, so maybe all these issues are linkied.</p>",
        "id": 224881659,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612277737
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L1168\">https://github.com/rust-lang/rust/blob/master/src/bootstrap/test.rs#L1168</a> - I guess not, but, you <em>could</em> presumably do <code>--test-args --verbose</code>?</p>",
        "id": 224881765,
        "sender_full_name": "simulacrum",
        "timestamp": 1612277780
    },
    {
        "content": "<p>I’ll try that</p>",
        "id": 224881802,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612277802
    },
    {
        "content": "<p>not sure if that actually works. I would be happy to support arbitrary levels of -v getting threaded</p>",
        "id": 224881809,
        "sender_full_name": "simulacrum",
        "timestamp": 1612277805
    },
    {
        "content": "<p>FYI: there is also logging in compiletest <code>env RUST_LOG=compiletest=debug</code></p>",
        "id": 224894158,
        "sender_full_name": "tm",
        "timestamp": 1612282642
    },
    {
        "content": "<p><em>finally</em> got an answer to my issue. I added <code>debug!</code> lines to <code>fn run_rmake_test</code>  to emit the <code>stdout</code> and <code>stderr</code> outputs even on test \"success\", and it is absolutely clear that I am skipping the coverage generation because it \"requires LLVM 11 or higher.\"</p>",
        "id": 224962140,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315352
    },
    {
        "content": "<p>I suspect there are other problems going on in addition to that. The LLVM version message is sent to stdout, but I see ominous output on stderr as well: </p>\n<div class=\"codehilite\"><pre><span></span><code>compiletest::runtest: stdout\nRust option `-Z instrument-coverage` requires LLVM 11 or higher. Test skipped.\nmake: Nothing to be done for &#39;all&#39;.\n\nstderr\n/bin/sh: 1: Bad substitution\n</code></pre></div>",
        "id": 224962385,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315562
    },
    {
        "content": "<p>I suspect we should consider, at least in verbose mode, that we should include the outputs for ignored tests. That, and/or we should increase the feedback so that ignored tests include a <em>reason</em> that they were ignored in the line-per-test output.</p>",
        "id": 224962530,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315669
    },
    {
        "content": "<p>Now my next question: Why am I not detecting LLVM &gt;= 11? I would have assumed that I must have it, given that I'm using the LLVM that we get by default...</p>",
        "id": 224962594,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315724
    },
    {
        "content": "<p>Are you using the download from CI support?</p>",
        "id": 224962607,
        "sender_full_name": "simulacrum",
        "timestamp": 1612315739
    },
    {
        "content": "<p>i wasn't at the start, but I might have switched to using that in my desparation</p>",
        "id": 224962635,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315765
    },
    {
        "content": "<p>no, this config.toml uses the default (download-ci-llvm=false)</p>",
        "id": 224962672,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315800
    },
    {
        "content": "<p>Hm, then I presume you are building it locally if you don't have llvm-config set...</p>",
        "id": 224962731,
        "sender_full_name": "simulacrum",
        "timestamp": 1612315825
    },
    {
        "content": "<p>yes I believe so</p>",
        "id": 224962736,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315831
    },
    {
        "content": "<p>I wonder if the LLVM version detection is broken?</p>",
        "id": 224962750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315848
    },
    {
        "content": "<p>this is in the makefile itself, if I understand correclty</p>",
        "id": 224962754,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315857
    },
    {
        "content": "<p>or... oh ...</p>",
        "id": 224962757,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315860
    },
    {
        "content": "<p>I think I know what might be wrong</p>",
        "id": 224962770,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315874
    },
    {
        "content": "<p>I have, as a historical artifact, a ton of symlinks in my personal $HOME/bin directory that are symlinks from llvm-utility (e.g. <code>llvm-prof</code>) to a single <code>llvm-opt-redirect.sh</code> script</p>",
        "id": 224962856,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315931
    },
    {
        "content": "<p>I wonder if that's confusing the Makefile in some way</p>",
        "id": 224962866,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315940
    },
    {
        "content": "<p>Huh</p>",
        "id": 224962869,
        "sender_full_name": "simulacrum",
        "timestamp": 1612315943
    },
    {
        "content": "<p>We shouldn't be relying on PATH...</p>",
        "id": 224962879,
        "sender_full_name": "simulacrum",
        "timestamp": 1612315955
    },
    {
        "content": "<p>as in, we should be using our own checkouts?</p>",
        "id": 224962891,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315974
    },
    {
        "content": "<p>I wouldn't be surprised if the Makefile relies on PATH</p>",
        "id": 224962901,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315983
    },
    {
        "content": "<p>I can check this quickly, I'll just move those symlinks elsewhere</p>",
        "id": 224962939,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612315999
    },
    {
        "content": "<p>Yeah, I would expect everything to go through our built LLVM, and I'd be surprised if path would find anything on CI since we don't install an LLVM there...</p>",
        "id": 224962973,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316038
    },
    {
        "content": "<p>okay moving my whole <code>~/bin</code> out of the way didn't resolve the rpoblem</p>",
        "id": 224963026,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316060
    },
    {
        "content": "<p>Maybe we're just not testing on CI? At least on some builders?</p>",
        "id": 224963027,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316063
    },
    {
        "content": "<p>We might only be testing on the Windows builder</p>",
        "id": 224963042,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316082
    },
    {
        "content": "<p>I think I have noticed that I only get these errors on Windows CI builds</p>",
        "id": 224963050,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316092
    },
    {
        "content": "<p>Have you had someone else try to reproduce? (e.g. maybe I should try a check out)</p>",
        "id": 224963056,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316103
    },
    {
        "content": "<p>(but other Linux developers are seeing these tests run properly on their setups)</p>",
        "id": 224963061,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316108
    },
    {
        "content": "<p>(that is, <code>--bless</code> works for them, in terms of modifying the files)</p>",
        "id": 224963075,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316121
    },
    {
        "content": "<p>Hm interesting</p>",
        "id": 224963078,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316126
    },
    {
        "content": "<p>So I'm still pretty sure there's <em>something</em> goofy with my setup</p>",
        "id": 224963081,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316128
    },
    {
        "content": "<p>I wouldn't be surprised if our makefiles are broken</p>",
        "id": 224963086,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316140
    },
    {
        "content": "<p>still investigating. Just feeling good now that I'm seeing <em>something</em> in terms of output</p>",
        "id": 224963087,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316141
    },
    {
        "content": "<p>Yeah, I'm able to repro the failure and <code>--bless</code> on my Linux machine.</p>",
        "id": 224963093,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612316145
    },
    {
        "content": "<p>I'm certain our makefiles are broken in someway</p>",
        "id": 224963098,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316149
    },
    {
        "content": "<p>like much tech, I have a love/hate relationship with Make</p>",
        "id": 224963143,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316167
    },
    {
        "content": "<p>I'm worried the llvm version detection sounds like it's broken</p>",
        "id": 224963148,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316176
    },
    {
        "content": "<p>That seems like the root cause to me, or at least something to look at first. We did recently land some refactoring there too - well, 2 months now probably</p>",
        "id": 224963163,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/how.20to.20run.2Fbless.20src.2Ftest.2Frun-make-fulldeps.2Fcoverage.20.3F/near/224963143\">said</a>:</p>\n<blockquote>\n<p>like much tech, I have a love/hate relationship with Make</p>\n</blockquote>\n<p>(I <em>can</em> highly recommend this tool for debugging makefiles: <a href=\"https://github.com/rocky/remake\">https://github.com/rocky/remake</a> )</p>",
        "id": 224963175,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316225
    },
    {
        "content": "<p>I have been out of the loop making PRs for about 2 months</p>",
        "id": 224963184,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316247
    },
    {
        "content": "<p>so I can believe that I'm getting burned by that refactoring, and just haven't noticed until now</p>",
        "id": 224963189,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316259
    },
    {
        "content": "<p><code>./build/x86_64-unknown-linux-gnu/llvm/bin/llvm-config --version</code> -- can you try that for me?</p>",
        "id": 224963292,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316361
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% ./build/x86_64-unknown-linux-gnu/llvm/bin/llvm-config --version\n11.0.1-rust-dev\n</code></pre></div>",
        "id": 224963361,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316410
    },
    {
        "content": "<p>hm, that's what I would expect</p>",
        "id": 224963372,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316425
    },
    {
        "content": "<p>and we do seem to pretty directly pipe that into compiletest</p>",
        "id": 224963386,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316434
    },
    {
        "content": "<p>let me make the Makefile tell me what its saying/seeing</p>",
        "id": 224963389,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316437
    },
    {
        "content": "<p>(you should see --llvm-version 11.0.1-rust-dev in compiletest args, fwiw)</p>",
        "id": 224963399,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316453
    },
    {
        "content": "<p>yes I see that</p>",
        "id": 224963430,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316480
    },
    {
        "content": "<p>but the Makefile does its own call</p>",
        "id": 224963437,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316485
    },
    {
        "content": "<p>oh that seems really wrong</p>",
        "id": 224963445,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316495
    },
    {
        "content": "<p>in src/test/run-make-fulldeps/coverage/coverage_tools.mk</p>",
        "id": 224963454,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316507
    },
    {
        "content": "<p>it should be using <code># min-llvm-version</code> I'd expect?</p>",
        "id": 224963457,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316512
    },
    {
        "content": "<p>looks pretty home grown to me</p>",
        "id": 224963503,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316531
    },
    {
        "content": "<p>interesting</p>",
        "id": 224963535,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316564
    },
    {
        "content": "<p>maybe we don't handle those for run-make tests for some reason</p>",
        "id": 224963567,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316600
    },
    {
        "content": "<p>I'll admit, I'm not sure what this does: </p>\n<div class=\"codehilite\"><pre><span></span><code>LLVM_VERSION_11_PLUS := $(shell \\\n        LLVM_VERSION=$$(&quot;$(LLVM_BIN_DIR)&quot;/llvm-config --version) &amp;&amp; \\\n        LLVM_VERSION_MAJOR=$${LLVM_VERSION/.*/} &amp;&amp; \\\n        [ $$LLVM_VERSION_MAJOR -ge 11 ] &amp;&amp; echo true || echo false)\n</code></pre></div>",
        "id": 224963568,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316605
    },
    {
        "content": "<p>namely the definition of <code>LLVM_VERSION_MAJOR=$${LLVM_VERSION/.*/}</code></p>",
        "id": 224963578,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316624
    },
    {
        "content": "<p>that's shell regex replacement</p>",
        "id": 224963587,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316633
    },
    {
        "content": "<p>oh, its looking for the .</p>",
        "id": 224963649,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316674
    },
    {
        "content": "<p>I was thinking the . was a wildcard, i.e. Kleene-star on wildcard</p>",
        "id": 224963659,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316686
    },
    {
        "content": "<p><code>LLVM_VERSION=\"11.0.1-rust-dev\" LLVM_VERSION_MAJOR=${LLVM_VERSION/.*/}; echo $LLVM_VERSION_MAJOR</code> gives me 11 as expected in bash at least</p>",
        "id": 224963665,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316690
    },
    {
        "content": "<p>but this is just trying to extract everything before the period,r ight?</p>",
        "id": 224963668,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316694
    },
    {
        "content": "<p>I think so</p>",
        "id": 224963679,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316704
    },
    {
        "content": "<p>Let me go ahead and do what I said I would do: Get it to print out the values of these variables.</p>",
        "id": 224963690,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316714
    },
    {
        "content": "<p>Is there a chance your <code>shell</code> isn't bash and it's behaving differently?</p>",
        "id": 224963766,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612316782
    },
    {
        "content": "<p>shell is bash</p>",
        "id": 224963776,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316795
    },
    {
        "content": "<p>good guess though</p>",
        "id": 224963781,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316801
    },
    {
        "content": "<p>/me wishes we had used run-pass tests for these instead, which should in theory not be that hard even...</p>",
        "id": 224963894,
        "sender_full_name": "simulacrum",
        "timestamp": 1612316917
    },
    {
        "content": "<p>/me realized: Why are they setting these variables in the SHELL? Why not make them Make variables? Argh.</p>",
        "id": 224963901,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612316921
    },
    {
        "content": "<p>the complaint about \"bad substitution\" probably <em>is</em> complaining about that shell substitution though</p>",
        "id": 224964029,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317033
    },
    {
        "content": "<p>which means I can/should just replace this with one done via Make text replacement</p>",
        "id": 224964043,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317059
    },
    {
        "content": "<p>I still am of the opinion that a <code># min-llvm-version 11.0.0</code> probably will just work on the individual Makefiles, but that seems reasonable as a first step</p>",
        "id": 224964080,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317105
    },
    {
        "content": "<p>Do <em>any</em> of the makefiles use a rule encoded like that?</p>",
        "id": 224964175,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317195
    },
    {
        "content": "<p>I guess there's stuff like <code># only-wasm-bare</code></p>",
        "id": 224964206,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317229
    },
    {
        "content": "<p>they don't</p>",
        "id": 224964285,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317280
    },
    {
        "content": "<p>but they do use other similar compiletest-based declarations</p>",
        "id": 224964290,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317290
    },
    {
        "content": "<p>so I.. don't know why this wouldn't work</p>",
        "id": 224964297,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317298
    },
    {
        "content": "<p>right, so I think it will probably work. Or should.</p>",
        "id": 224964304,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317301
    },
    {
        "content": "<p>If there is any doubt, you can add a test case to <code>src/tools/compiletest/src/header/tests.rs</code> and see.</p>",
        "id": 224964351,
        "sender_full_name": "tm",
        "timestamp": 1612317324
    },
    {
        "content": "<p>I'm debating if I should <em>also</em> try to include improvements to the printouts for these failure cases</p>",
        "id": 224964366,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317336
    },
    {
        "content": "<p>it was truly frustrating that I kept just getting no output</p>",
        "id": 224964381,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317347
    },
    {
        "content": "<p>But I would expect that <code>min-llvm-version</code> will just work.</p>",
        "id": 224964430,
        "sender_full_name": "tm",
        "timestamp": 1612317382
    },
    {
        "content": "<p>(and in this case, using <code>rr</code> didn't really illuminate all that much, and probably would never have illuminated)</p>",
        "id": 224964433,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317384
    },
    {
        "content": "<p>Since the header parse code is the same.</p>",
        "id": 224964451,
        "sender_full_name": "tm",
        "timestamp": 1612317425
    },
    {
        "content": "<p>I was going to suggest strace -e %process or something</p>",
        "id": 224964471,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317465
    },
    {
        "content": "<p>yeah I was about to try to figure out how to get strace involved</p>",
        "id": 224964524,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317486
    },
    {
        "content": "<p>but: Will strace apply itself recursively?</p>",
        "id": 224964535,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317499
    },
    {
        "content": "<p>with -f, yes</p>",
        "id": 224964540,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317509
    },
    {
        "content": "<p>I see, that presumably follows forks</p>",
        "id": 224964549,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317517
    },
    {
        "content": "<p>probably should have done that</p>",
        "id": 224964551,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317522
    },
    {
        "content": "<p>now, you'll likely get a wall of output</p>",
        "id": 224964552,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317524
    },
    {
        "content": "<p>and I've historically had.. trouble getting useful results, particularly in cases of shell expansion and such where there's potentially not a distinct process running</p>",
        "id": 224964578,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317551
    },
    {
        "content": "<p>now, currently, the test does emit <code>$(info Rust option </code>-Z instrument-coverage<code> requires LLVM 11 or higher. Test skipped.)</code></p>",
        "id": 224964595,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317567
    },
    {
        "content": "<p>we never see it from <code>compiletest</code></p>",
        "id": 224964606,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317576
    },
    {
        "content": "<p>and I don't think we ever <em>would</em> see it from <code>compiletest</code>, unless I've overlooked something</p>",
        "id": 224964615,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317588
    },
    {
        "content": "<p>but if I switch to <code># min-llvm-version: 11.0</code>, what feedback will user get about the test in that case?</p>",
        "id": 224964664,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317608
    },
    {
        "content": "<p>None, currently, but I've long wanted at least a local opt-in to explicitly listing allowed reasons for tests to get ignored</p>",
        "id": 224964700,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317660
    },
    {
        "content": "<p>hmm</p>",
        "id": 224964714,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317668
    },
    {
        "content": "<p>And at least I trust our compiletest rust-based detection more, personally, than the shell or makefile expansion; at least we have unit tests there</p>",
        "id": 224964748,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317706
    },
    {
        "content": "<p>I still want to figure out what's wrong</p>",
        "id": 224964822,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317776
    },
    {
        "content": "<p>as in, why my shell expansion is breaking but others are not</p>",
        "id": 224964845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317787
    },
    {
        "content": "<p>Yeah, for sure.</p>",
        "id": 224964967,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317860
    },
    {
        "content": "<p>One thing to check might be your make version</p>",
        "id": 224964982,
        "sender_full_name": "simulacrum",
        "timestamp": 1612317872
    },
    {
        "content": "<p>4.3</p>",
        "id": 224965005,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317889
    },
    {
        "content": "<p>Copyright 1988-2020</p>",
        "id": 224965019,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317897
    },
    {
        "content": "<p>That's the version I have as well</p>",
        "id": 224965040,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612317913
    },
    {
        "content": "<p>bash is 5.0.17(1)</p>",
        "id": 224965066,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317928
    },
    {
        "content": "<p>Copyright 2019</p>",
        "id": 224965070,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612317933
    },
    {
        "content": "<p>I have bash 5.0.18(1)</p>",
        "id": 224965091,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612317961
    },
    {
        "content": "<p>Have we determined that llvm-config is getting run correctly and outputting what's expected? You could also replace it in the bin directory with a shell script which does echo $@ &gt;&gt; /tmp/t or something</p>",
        "id": 224965193,
        "sender_full_name": "simulacrum",
        "timestamp": 1612318064
    },
    {
        "content": "<p>omg</p>",
        "id": 224966585,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612319542
    },
    {
        "content": "<p>Makefile is using <code>/bin/sh</code></p>",
        "id": 224966589,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612319547
    },
    {
        "content": "<p>for <code>$(shell ...)</code> invocation</p>",
        "id": 224966597,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612319558
    },
    {
        "content": "<p>and thus, is reporting <code>/bin/sh: Bad substitution</code> when <code>/bin/sh</code> sees syntax that is not compatible with old school <code>/bin/sh</code></p>",
        "id": 224966646,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612319602
    },
    {
        "content": "<p>Huh, I guess I am confused... why that's special for you</p>",
        "id": 224966747,
        "sender_full_name": "simulacrum",
        "timestamp": 1612319685
    },
    {
        "content": "<p>you can use <code>make SHELL=bash</code> to override its choice, but it won't just look at the value of <code>$SHELL</code> in the process environment</p>",
        "id": 224966750,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612319689
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/how.20to.20run.2Fbless.20src.2Ftest.2Frun-make-fulldeps.2Fcoverage.20.3F/near/224966747\">said</a>:</p>\n<blockquote>\n<p>Huh, I guess I am confused... why that's special for you</p>\n</blockquote>\n<p>I am definitely confused about that detail</p>",
        "id": 224966755,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612319701
    },
    {
        "content": "<p>Maybe your system shell is sh for some reason? I'm not sure how to check, though</p>",
        "id": 224966774,
        "sender_full_name": "simulacrum",
        "timestamp": 1612319735
    },
    {
        "content": "<p>GNU make claims it will use <code>/bin/sh</code> if you don't have SHELL set in makefile</p>",
        "id": 224966785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612319760
    },
    {
        "content": "<p><a href=\"https://www.gnu.org/software/make/manual/html_node/Choosing-the-Shell.html\">https://www.gnu.org/software/make/manual/html_node/Choosing-the-Shell.html</a></p>",
        "id": 224966829,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612319769
    },
    {
        "content": "<blockquote>\n<p>However, on MS-DOS and MS-Windows the value of SHELL in the environment is used, since on those systems most users do not set this variable, and therefore it is most likely set specifically to be used by make.</p>\n</blockquote>",
        "id": 224966845,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612319790
    },
    {
        "content": "<p>I am now back to wondering if this has been silently been ignored on CI for Linux, but <em>has</em> been exercised on WIndows, due to the above detail</p>",
        "id": 224966873,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612319830
    },
    {
        "content": "<p>But this doesn't explain <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span> 's observations</p>",
        "id": 224966879,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612319839
    },
    {
        "content": "<p>interesting, so running make directly on the src/test/run-make-fulldeps/coverage/coverage_tools.mk file with a</p>\n<p>foo:<br>\n    echo $(LLVM_VERSION_11_PLUS)</p>\n<p>appended does give me false</p>",
        "id": 224967025,
        "sender_full_name": "simulacrum",
        "timestamp": 1612319975
    },
    {
        "content": "<p>ah, but that's because /bin/sh: 1: /llvm-config: not found</p>",
        "id": 224967042,
        "sender_full_name": "simulacrum",
        "timestamp": 1612319992
    },
    {
        "content": "<p>I wonder if on my distro, /bin/sh is symlinked to bash or something</p>",
        "id": 224967046,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612319998
    },
    {
        "content": "<p>yeah you'll need to set that variable</p>",
        "id": 224967067,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320002
    },
    {
        "content": "<p>Oh!</p>",
        "id": 224967105,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320015
    },
    {
        "content": "<p>I had figured a symlinked <code>/bin/sh</code> wouldn't matter, because I assumed that <code>/bin/bash</code> adopts different behavior based on arg0</p>",
        "id": 224967126,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320040
    },
    {
        "content": "<p>but check this out!</p>",
        "id": 224967129,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320044
    },
    {
        "content": "<p>(on my phone about to go to bed)</p>",
        "id": 224967134,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612320048
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>% ls -l /bin/sh\nlrwxrwxrwx 1 root root 4 Mar 30  2020 /bin/sh -&gt; dash\n</code></pre></div>",
        "id": 224967139,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320056
    },
    {
        "content": "<p>so, there you have it</p>",
        "id": 224967145,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320061
    },
    {
        "content": "<p>that's what's different about <em>my</em> setup</p>",
        "id": 224967150,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320068
    },
    {
        "content": "<p>I have the same</p>",
        "id": 224967152,
        "sender_full_name": "simulacrum",
        "timestamp": 1612320070
    },
    {
        "content": "<p>though I've not tested blessing</p>",
        "id": 224967158,
        "sender_full_name": "simulacrum",
        "timestamp": 1612320079
    },
    {
        "content": "<p>so much for GNU thinking that defaulting to <code>/bin/sh</code> helping keep things portable</p>",
        "id": 224967162,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320087
    },
    {
        "content": "<p>Now I'm curious. Let me get my laptop</p>",
        "id": 224967163,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612320087
    },
    {
        "content": "<p>aha I can reproduce with</p>\n<p>LLVM_BIN_DIR=./build/x86_64-unknown-linux-gnu/ci-llvm/bin make  -f src/test/run-make-fulldeps/coverage/coverage_tools.mk foo</p>\n<p>which gets me /bin/sh: 1: Bad substitution</p>",
        "id": 224967239,
        "sender_full_name": "simulacrum",
        "timestamp": 1612320165
    },
    {
        "content": "<p>bam</p>",
        "id": 224967262,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320183
    },
    {
        "content": "<p>now mind you I have no idea if I can reproduce with compiletest</p>",
        "id": 224967269,
        "sender_full_name": "simulacrum",
        "timestamp": 1612320196
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wesley@endurance:~/code/rust/rust&gt; ls -l /bin/sh\nlrwxrwxrwx <span class=\"m\">1</span> root root <span class=\"m\">13</span> Aug  <span class=\"m\">2</span>  <span class=\"m\">2020</span> /bin/sh -&gt; ../usr/bin/sh\nwesley@endurance:~/code/rust/rust&gt; ls -l /usr/bin/sh\nlrwxrwxrwx <span class=\"m\">1</span> root root <span class=\"m\">20</span> Aug  <span class=\"m\">6</span> <span class=\"m\">09</span>:05 /usr/bin/sh -&gt; /etc/alternatives/sh\nwesley@endurance:~/code/rust/rust&gt; ls -l /etc/alternatives/sh\nlrwxrwxrwx <span class=\"m\">1</span> root root <span class=\"m\">13</span> Aug  <span class=\"m\">6</span> <span class=\"m\">09</span>:05 /etc/alternatives/sh -&gt; /usr/bin/bash\n</code></pre></div>",
        "id": 224967277,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612320202
    },
    {
        "content": "<p>I guess we've just gotten lucky that everyone who's done anything that altered MIR output has been symlinking /bin/sh to /bin/bash ?</p>",
        "id": 224967293,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320221
    },
    {
        "content": "<p>this bash-dependent code has only been in there for a few months, as <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> noted.</p>",
        "id": 224967349,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320262
    },
    {
        "content": "<p>that looks like a system link though, I'm confused why <span class=\"user-mention\" data-user-id=\"125250\">@Wesley Wiser</span>'s setup is so different from ours, I have pretty stock ubuntu 20.10</p>",
        "id": 224967356,
        "sender_full_name": "simulacrum",
        "timestamp": 1612320270
    },
    {
        "content": "<p>wesley's looks like Redhat to me</p>",
        "id": 224967365,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320283
    },
    {
        "content": "<p>Well, I'm on openSUSE Tumbleweed</p>",
        "id": 224967368,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612320285
    },
    {
        "content": "<p>or Arch</p>",
        "id": 224967370,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320286
    },
    {
        "content": "<p>can't remember</p>",
        "id": 224967371,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320289
    },
    {
        "content": "<p>oh well</p>",
        "id": 224967373,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320291
    },
    {
        "content": "<p>heh</p>",
        "id": 224967374,
        "sender_full_name": "simulacrum",
        "timestamp": 1612320291
    },
    {
        "content": "<p>:)</p>",
        "id": 224967375,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320292
    },
    {
        "content": "<p>I guess presumably CI on linux is indeed skipping these</p>",
        "id": 224967393,
        "sender_full_name": "simulacrum",
        "timestamp": 1612320315
    },
    {
        "content": "<p>since we universally have ubuntu afaik</p>",
        "id": 224967401,
        "sender_full_name": "simulacrum",
        "timestamp": 1612320324
    },
    {
        "content": "<p>and on windows I could believe bash is the only shell</p>",
        "id": 224967415,
        "sender_full_name": "simulacrum",
        "timestamp": 1612320339
    },
    {
        "content": "<p>maybe</p>",
        "id": 224967419,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320340
    },
    {
        "content": "<p>(maybe re the CI)</p>",
        "id": 224967428,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320345
    },
    {
        "content": "<p>yeah testing given current state seems annoying</p>",
        "id": 224967510,
        "sender_full_name": "simulacrum",
        "timestamp": 1612320410
    },
    {
        "content": "<p>anyway, I should also head to bed</p>",
        "id": 224967529,
        "sender_full_name": "simulacrum",
        "timestamp": 1612320442
    },
    {
        "content": "<p>same</p>",
        "id": 224967552,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612320464
    },
    {
        "content": "<p>Night! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 224967558,
        "sender_full_name": "Wesley Wiser",
        "timestamp": 1612320469
    },
    {
        "content": "<p>You actually asleep yet <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> ?</p>",
        "id": 224967879,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320860
    },
    {
        "content": "<p>I guess I should go to bed too. Or at least do the dishes. <span aria-label=\"sleepy\" class=\"emoji emoji-1f62a\" role=\"img\" title=\"sleepy\">:sleepy:</span></p>",
        "id": 224967970,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612320965
    },
    {
        "content": "<p>(Put up PR; not locally tested yet): Use <code># min-llvm-version: 11.0</code> to force a minimum LLVM version <a href=\"https://github.com/rust-lang/rust/issues/81688\">#81688</a></p>",
        "id": 224967999,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612321002
    },
    {
        "content": "<p>Not quite :) PR seems good to me.</p>",
        "id": 224968243,
        "sender_full_name": "simulacrum",
        "timestamp": 1612321303
    },
    {
        "content": "<p>Hmm I now wonder/worry if fixing this is going to expose other brokenness in these tests</p>",
        "id": 224969202,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612322217
    },
    {
        "content": "<p>(at least, the <code>--bless</code> option for them sounds like it might <em>depend</em> on one having set <code>llvm.assertions = true</code> in the config.toml ?)</p>",
        "id": 224969223,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612322252
    },
    {
        "content": "<p>(I'm just ranting now because my <code>--bless</code> run caused a bunch of .txt files in run-make-fulldeps to be cleared out of all their content, and so I'm very suspicious of all of this infrastructure for the coverage tests now.)</p>",
        "id": 224969941,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612323068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/how.20to.20run.2Fbless.20src.2Ftest.2Frun-make-fulldeps.2Fcoverage.20.3F/near/224969202\">said</a>:</p>\n<blockquote>\n<p>Hmm I now wonder/worry if fixing this is going to expose other brokenness in these tests</p>\n</blockquote>\n<p>Yeah, <a href=\"https://github.com/rust-lang/rust/blob/d6a28a97e697bd4af5870a9b9f72c53e979c1fe2/src/test/run-make-fulldeps/coverage-reports/Makefile#L134\">run-make-full-deps/coverage-reports</a> also makes use of <code>[[</code> syntax.</p>",
        "id": 225011376,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612357504
    },
    {
        "content": "<p>Hey guys. So sorry to be late to the party... I haven't been on Zulip, and got only the notification when pnkfelix @mentioned me in the beginning. I had no idea the dialog continued until checking after being cc'ed on the PR today.</p>",
        "id": 225091449,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612390633
    },
    {
        "content": "<p>These tests were confirmed to work on the primary Linux, Mac, and Windows CI builds at least through December. (I haven't been doing much on the compiler since then.)</p>",
        "id": 225091690,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612390682
    },
    {
        "content": "<p>My primary development is on Linux but I've also tested locally on Mac and Windows (mainly MSVC, but others did some testing with Windows gnu)</p>",
        "id": 225091808,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612390737
    },
    {
        "content": "<p>So if the Makefiles aren't working now, then something changed outside of these coverage scripts/makefiles.</p>",
        "id": 225091865,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612390771
    },
    {
        "content": "<p>What does \"confirmed to work\" mean?</p>",
        "id": 225091962,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612390815
    },
    {
        "content": "<p>If \"work\" means \"the CI does not signal an error when the code is correct\", then yes, they worked.</p>",
        "id": 225092016,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612390857
    },
    {
        "content": "<p>I confirmed both locally and viewing CI scripts (and many times fixing CI errors) on all three main platform types that the tests ran.</p>",
        "id": 225092024,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612390859
    },
    {
        "content": "<p>So CI did fail when there were errors and did not fail when errors were fixed</p>",
        "id": 225092098,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612390907
    },
    {
        "content": "<p>--bless also worked for all three</p>",
        "id": 225092175,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612390931
    },
    {
        "content": "<p>Okay. The main observation I have made is that the nature of these errors is that its dependent on two things</p>",
        "id": 225092202,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612390943
    },
    {
        "content": "<ol>\n<li>the use of bash specific syntax in the <code>$(shell ...)</code> invocations, and 2. a platform that has <code>/bin/sh</code> linked to <code>/bin/dash</code> instead of <code>/bin/bash</code></li>\n</ol>",
        "id": 225092244,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612390971
    },
    {
        "content": "<p>and when those two things combined, what we observe is the tests being silently ignored</p>",
        "id": 225092298,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391004
    },
    {
        "content": "<p>It does seem unlikely they would work with dash</p>",
        "id": 225092306,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612391009
    },
    {
        "content": "<p>so its possible that the CI switched to /bin/dash sometime recently</p>",
        "id": 225092322,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391020
    },
    {
        "content": "<p>but I suspect its more likely that the use of bash-specific syntax was injected only very recently</p>",
        "id": 225092349,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391035
    },
    {
        "content": "<p>yikes... Is it dash now, for sure?</p>",
        "id": 225092366,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612391041
    },
    {
        "content": "<p>Well, <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> said that they observed the same thing on their stock ubuntu system</p>",
        "id": 225092425,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391061
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116122\">simulacrum</span> <a href=\"#narrow/stream/131828-t-compiler/topic/how.20to.20run.2Fbless.20src.2Ftest.2Frun-make-fulldeps.2Fcoverage.20.3F/near/224967239\">said</a>:</p>\n<blockquote>\n<p>aha I can reproduce with</p>\n<p>LLVM_BIN_DIR=./build/x86_64-unknown-linux-gnu/ci-llvm/bin make  -f src/test/run-make-fulldeps/coverage/coverage_tools.mk foo</p>\n<p>which gets me /bin/sh: 1: Bad substitution</p>\n</blockquote>\n<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 225092464,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391090
    },
    {
        "content": "<p>and asserted that the CI uses something similar</p>",
        "id": 225092501,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391114
    },
    {
        "content": "<p>I can look at the <code>blame</code> for those files, but would be surprised if someone else changed them to use different syntax \"very recently\"</p>",
        "id": 225092689,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612391203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"116083\">pnkfelix</span> <a href=\"#narrow/stream/131828-t-compiler/topic/how.20to.20run.2Fbless.20src.2Ftest.2Frun-make-fulldeps.2Fcoverage.20.3F/near/225092349\">said</a>:</p>\n<blockquote>\n<p>but I suspect its more likely that the use of bash-specific syntax was injected only very recently</p>\n</blockquote>\n<p><a href=\"https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src/test/run-make-fulldeps/coverage-reports/Makefile#L134\">this bit</a>  using <code>[[</code> came in on December 19, 2020, in PR <a href=\"https://github.com/rust-lang/rust/issues/79762\">#79762</a></p>",
        "id": 225092782,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391248
    },
    {
        "content": "<p>but I think the core problem (the one that caused the silent ignore) was <a href=\"https://github.com/rust-lang/rust/blob/120b2a704a60d4341286bd82f6e638c65ca169b6/src/test/run-make-fulldeps/coverage/coverage_tools.mk#L22\">this bit</a> which came in on PR <a href=\"https://github.com/rust-lang/rust/issues/79441\">#79441</a>, on November 24th 2020</p>",
        "id": 225093000,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391359
    },
    {
        "content": "<p>so I suspect <span class=\"user-mention\" data-user-id=\"296355\">@Rich Kadel</span> that you did indeed test it, and got it working, and then unknowingly \"broke\" it (in the form of the silent ignores) at the end of November.</p>",
        "id": 225093060,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391396
    },
    {
        "content": "<p>Or, maybe the CI's switched to <code>/bin/dash</code> after November 24th. It doesn't really matter at this point.</p>",
        "id": 225093194,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391458
    },
    {
        "content": "<p>agreed ... It doesn't matter</p>",
        "id": 225093235,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612391482
    },
    {
        "content": "<p>So can you summarize what's needed to fix it? Your PR appears to remove the need for the LLVM check (and removes the check). What is still not working?</p>",
        "id": 225093503,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612391629
    },
    {
        "content": "<p>The thing that's not working now is the <code>[[</code> thing from PR <a href=\"https://github.com/rust-lang/rust/issues/79762\">#79762</a></p>",
        "id": 225093569,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391652
    },
    {
        "content": "<p>The CI didn't catch that because of the silent ignore problem.</p>",
        "id": 225093608,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391670
    },
    {
        "content": "<p>but its fine; I'm ignoring the test for now</p>",
        "id": 225093621,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391681
    },
    {
        "content": "<p>and we can fix the <code>[[</code> afterward</p>",
        "id": 225093630,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391690
    },
    {
        "content": "<p>yeah, that's no problem to make it a separate PR, just wondering if I can help</p>",
        "id": 225093657,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612391711
    },
    {
        "content": "<p>Well, if you can figure out the correct (<code>/bin/sh</code>-compatible) way to</p>",
        "id": 225093764,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391769
    },
    {
        "content": "<p>We should be able to replace <code>[[ -x $$file ]]</code> with <code>[ -x \"$$file\" ]</code></p>",
        "id": 225093777,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612391781
    },
    {
        "content": "<p>to do the <code>[[</code> thing <a href=\"https://github.com/Swatinem/rust/blob/087101e285895b8bce94a16a90f7e7a3d938c3da/src/test/run-make-fulldeps/coverage-reports/Makefile#L134\">here</a></p>",
        "id": 225093783,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391787
    },
    {
        "content": "<p>then that would be great</p>",
        "id": 225093785,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391790
    },
    {
        "content": "<p>okay perfect</p>",
        "id": 225093797,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391804
    },
    {
        "content": "<p>To test your change, I'm guessing it would suffice to do <code>SHELL=/bin/dash</code> in the Makefile itself.</p>",
        "id": 225093858,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391857
    },
    {
        "content": "<p>(that, or change the link for your system's <code>/bin/sh</code>, but that sounds more invasive than I really want to suggest.)</p>",
        "id": 225093921,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612391883
    },
    {
        "content": "<p>Not 100% sure but sounds right... I can double-check the gnumake docs</p>",
        "id": 225093965,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612391915
    },
    {
        "content": "<p>This special case handling of SHELL is so amazingly representative of the kind of weirdness one encounters when writing Makefiles</p>",
        "id": 225094232,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612392106
    },
    {
        "content": "<p>the justification makes perfect sense, but the outcome... I guess the outcome would be fine if bash went into a \"strict mode\" when invoked as <code>/bin/sh</code></p>",
        "id": 225094327,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612392148
    },
    {
        "content": "<p>I and others would like to move this to a rust-based test, but it's effort, and I my work priorities have shifted now that coverage is working</p>",
        "id": 225094339,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612392156
    },
    {
        "content": "<p>yeah I understand that. I think <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> had some thoughts about how to convert this into a <code>run-pass</code> test. We can talk about that separately.</p>",
        "id": 225094377,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612392191
    },
    {
        "content": "<p>I'm fetching and making a clean build now to test without the change and then make it and we'll see if that both repros and fixes it, respectively</p>",
        "id": 225094506,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612392272
    },
    {
        "content": "<p>I'm thinking we should explicitly set <code>SHELL=/bin/dash</code> (or something like that) in <code>tools.mk</code> so when people test in other environments (e.g., locally) they are not picking up <code>bash</code> if <code>/bin/sh</code> is configured differently.</p>",
        "id": 225096150,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612393222
    },
    {
        "content": "<p>I confirmed <code>/bin/dash</code> is valid on my Mac and Linux machines... My Windows VM is shut down right now, but I assume Ming also has <code>/bin/dash</code> ... Can anyone confirm?</p>",
        "id": 225096392,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612393391
    },
    {
        "content": "<p>If there is no disagreement, I'm planning to include this addition to <code>tools.mk</code>, in the PR that also fixes the <code>[[</code> (assuming the repo and fix work as expected):</p>\n<div class=\"codehilite\" data-code-language=\"Makefile\"><pre><span></span><code><span class=\"c\"># CI platforms use `/bin/dash`. When compiling in other environments, the</span>\n<span class=\"c\"># default may be different (for example, may default to `/bin/bash`), and syntax</span>\n<span class=\"c\"># and results could be different. Ensure Makefile `$(shell ...)` invocations</span>\n<span class=\"c\"># always run in `dash`.</span>\n<span class=\"nv\">SHELL</span> <span class=\"o\">:=</span> /bin/dash\n</code></pre></div>",
        "id": 225097441,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612394059
    },
    {
        "content": "<p>I don't think we can rely on <code>/bin/dash</code> being present</p>",
        "id": 225103843,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612398438
    },
    {
        "content": "<p>We can consider setting it conditionally, based on whether the file exists, but I suspect there's a broader policy issue we probably should be discussing with the team.</p>",
        "id": 225103968,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612398537
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ ls /bin\nsh\n</code></pre></div>",
        "id": 225105178,
        "sender_full_name": "nagisa",
        "timestamp": 1612399419
    },
    {
        "content": "<p><code>/usr/bin/env bash</code> (or whatever other shell we want to use) could be significantly more reliable.</p>",
        "id": 225105453,
        "sender_full_name": "nagisa",
        "timestamp": 1612399628
    },
    {
        "content": "<p>OK, well, I'm not sure what the best solution is, but I uploaded a PR with the change as originally suggested, and I can change it before we submit it to bors:  <a href=\"https://github.com/rust-lang/rust/issues/81734\">#81734</a></p>",
        "id": 225106696,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612400621
    },
    {
        "content": "<p>Is there anyone else that you think we should ping, who might have an opinion?</p>",
        "id": 225106772,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612400665
    },
    {
        "content": "<p>FYI,  I have a pretty vanilla setup of Windows, set up specifically to test rustc and llvm, using the recommended steps on the rust-lang/rust README.md, and my msys2 setup has <code>/bin/dash</code>. I didn't install it specifically.</p>",
        "id": 225113237,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612407178
    },
    {
        "content": "<p>@nagisa Can you clarify what you are showing in your example? I didn't understand your comment.</p>",
        "id": 225113326,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612407341
    },
    {
        "content": "<p>They're showing that they only have sh and not dash I think</p>",
        "id": 225116090,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612410797
    },
    {
        "content": "<p>(probably NixOS)</p>",
        "id": 225116131,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612410842
    },
    {
        "content": "<p>It was a confirmation of @pnkfelix's message in that you cannot rely on /bin containing dash (or anything much at all), yeah.</p>",
        "id": 225146280,
        "sender_full_name": "nagisa",
        "timestamp": 1612437502
    },
    {
        "content": "<p>Got it, ty</p>",
        "id": 225166705,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612449298
    },
    {
        "content": "<p>So what if there was a new rustc build requirement for <code>/bin/dash</code> to exist? Prefer the actual <code>dash</code>, but it could be satisfied by symbolic link (or worst case, by copy) from another dash-compatible shell (link <code>/bin/sh</code> in your case)? Installing <code>dash</code> as one of the minimum build requirements (in the same category as <code>python</code>, <code>git</code>, etc.) is preferred so developers are not able to break the build by adding scripts that don't work in <code>dash</code>, but we could document that providing a <code>/bin/dash</code> by symbolic link to <code>bash</code> or whatever <code>make</code> is currently using is a possible workaround, if taken with caution to test any <code>shell</code> script changes with <code>dash</code> on some platform.</p>",
        "id": 225168009,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612449920
    },
    {
        "content": "<p>Since we know <code>dash</code> (the real one) is available in most developer Linux distros, MacOs, and msys2, this requirement isn't going to impact very many developers (I assume).</p>",
        "id": 225168162,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612449981
    },
    {
        "content": "<p>dash is a weird shell to require. If we're going to require a specific shell I think we should require bash: it's more flexible and I expect it to be easier to install on platforms like BSD and Solaris</p>",
        "id": 225170323,
        "sender_full_name": "Joshua Nelson",
        "timestamp": 1612450948
    },
    {
        "content": "<p>I'd prefer <code>bash</code> myself, but it surprised me that the CI systems are defaulting to <code>dash</code>, so (today) dash-compatibility is a requirement for the Makefile shell scripts in our build, and it's just not enforced. Because of that, developers can have working builds on their machine that are not working in CI, and that can cause a lot of frustration and time (as <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span>'s experience showed).</p>",
        "id": 225187600,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612457318
    },
    {
        "content": "<p>But the other option is to update CI or rustc to force using bash always.</p>",
        "id": 225187667,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612457346
    },
    {
        "content": "<p>(Then the other issue is going to be, which version. GPL becomes an issue.)</p>",
        "id": 225187746,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612457384
    },
    {
        "content": "<p>I think we should leave the SHELL unset. Let it keep going to <code>/bin/sh</code></p>",
        "id": 225207401,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612465878
    },
    {
        "content": "<p>Yes, it does mean that we risk future issues where shell-implementation-specific code leaks in</p>",
        "id": 225207459,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612465905
    },
    {
        "content": "<p>But my understanding is that the Linux CI <em>is</em> using /bin/dash</p>",
        "id": 225207491,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612465922
    },
    {
        "content": "<p>while the Windows CI is using <code>/bin/bash</code></p>",
        "id": 225207540,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612465929
    },
    {
        "content": "<p>and so, in the <em>common case</em>, one of the CI's should catch problems here</p>",
        "id": 225207582,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612465949
    },
    {
        "content": "<p>The one thing I will point out</p>",
        "id": 225207607,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612465962
    },
    {
        "content": "<p>is that our test infrastructure's silently discarding the stdout/stderr output for ignored tests</p>",
        "id": 225207630,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612465975
    },
    {
        "content": "<p>was a huge part of why I couldn't figure this out</p>",
        "id": 225207640,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612465981
    },
    {
        "content": "<p>for so long</p>",
        "id": 225207652,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612465984
    },
    {
        "content": "<p>So personally, my plan is to try to tackle <em>that</em> problem</p>",
        "id": 225207708,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612466016
    },
    {
        "content": "<p>I hear you. But <code>dash</code> is still the lowest common denominator and all scripts MUST conform to <code>dash</code>. Developers building locally will not be fully testing their changes until they push to CI, and best case, a lot of time is lost waiting for a potential failure during a CI run. Worst case, CI isn't going to catch some things. For instance, when I made my changes to check for LLVM 11, I went through some specific steps to validate that the LLVM 11 check worked, sometimes by making temporary changes to the script to simulate having a lower version installed. Plus I might turn on test output or force an error status, to see some <code>echo</code> results to verify things. But it was always using <code>bash</code>, and I had no idea it would not work on <code>dash</code> hosts. If I was forced to use <code>dash</code>, I would have caught the problem in November, and you would never have had to deal with it.</p>",
        "id": 225215659,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612469495
    },
    {
        "content": "<p>So if forcing <code>SHELL = /bin/dash</code> is not acceptable, I would at least strongly encourage what you suggested earlier, that is, making it conditional on whether <code>/bin/dash</code> is available or not.<br>\nAnd adding some documentation and/or comments somewhere to hopefully get the attention of developers that might not have <code>/bin/dash</code> locally, to know that <code>/bin/dash</code> (or similar non-bash but bourne-sh-like shell) is a constraint they may need to consider.</p>",
        "id": 225215999,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612469636
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> <br>\nThanks for your patience.<br>\nI updated the PR with a conditional check. This should have no visible side effects since <code>dash</code> is already used on some platforms, but if anyone introduces a <code>bash-compliant</code> but not <code>dash-compliant</code> change, and if that developer has <code>/bin/dash</code> installed (which should be most developers), they will get predictable failures at development time now.</p>",
        "id": 225380145,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612576817
    },
    {
        "content": "<p>sounds reasonable to me</p>",
        "id": 225380171,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612576876
    },
    {
        "content": "<p>only question is at what level in the makefile hierarchy to put the rule. I assume you put it at the highest <a href=\"http://tools.mk\">tools.mk</a> level?</p>",
        "id": 225380200,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612576918
    },
    {
        "content": "<p>(not rule. Defiinition of SHELL, I guess.)</p>",
        "id": 225380246,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612576934
    },
    {
        "content": "<p>I guess I can go look at the PR to find out</p>",
        "id": 225380254,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612576950
    },
    {
        "content": "<p>Yes, <code>tools.mk</code> seemed like the right place.<br>\nAs a side note, even if stdout/stderr was working better, it's not uncommon for a script to capture both of them, and also catch the error status, and treat that error as a failure of some invoked binary, not realizing the actual reason for the error was a script syntax error. So things can still fail silently if the wrong shell is used to test.</p>",
        "id": 225380302,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612577010
    },
    {
        "content": "<p>another way to look at this though is that we should look into how to express these tests without using run-make infrastructure</p>",
        "id": 225380562,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612577290
    },
    {
        "content": "<p>at least, I think <span class=\"user-mention\" data-user-id=\"116122\">@simulacrum</span> was indicating that they though there may be opportunity to port them to run-pass infrastructure. I haven't looked into it deeply..</p>",
        "id": 225380594,
        "sender_full_name": "pnkfelix",
        "timestamp": 1612577340
    },
    {
        "content": "<p>Sure, at least fundamentally, there's no reason they can't be - run-pass has roughly the same set of available tools as run-make (and likewise for fulldeps)</p>",
        "id": 225380705,
        "sender_full_name": "simulacrum",
        "timestamp": 1612577487
    },
    {
        "content": "<p>Yeah, I agree, as we discussed earlier in this thread. It's not something I have time for right now though. But I'm all for it <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 225381397,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612578411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> - Let me know if you have any other questions/concerns about <a href=\"https://github.com/rust-lang/rust/issues/81734\">#81734</a>, if you are not ready to push to bors. Thanks.</p>",
        "id": 225613763,
        "sender_full_name": "Rich Kadel",
        "timestamp": 1612820990
    }
]