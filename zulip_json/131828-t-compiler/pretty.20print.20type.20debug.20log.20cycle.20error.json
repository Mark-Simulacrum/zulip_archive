[
    {
        "content": "<p>So, here's a fun thing I stumbled upon..</p>\n<p>(I wasn't able to find any existing discussion, issues or PRs about this, I'd not be surprised if someone had found it already, so my bad if this isn't a new problem)</p>\n<p>I was about to take a look into <a href=\"https://github.com/rust-lang/rust/issues/59494\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59494\">#59494</a> (the test case for that will trigger this if you want to follow along at home). I did the first thing I always do, get a backtrace, look at log output and try get a rough idea what is happening where the error/ICE is triggered. But, when I set <code>RUST_LOG=rustc::traits</code>, the error changes - I can see the ICE with just <code>RUST_LOG=rustc::traits::select</code> (IIRC), but not with more than that - I get a cycle error instead.</p>\n<p>I guess I'll look into that, I find out it comes from the pretty printer, in particular <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/print/pretty.rs#L547\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/ty/print/pretty.rs#L547\">this line</a>. Alright, I guess somewhere in that function's call stack, something is doing something it shouldn't and calling <code>predicates_of</code> with the same key.</p>\n<p><a href=\"https://gist.github.com/davidtwco/2ad19e572b568bc3464563c4a13bb208\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/2ad19e572b568bc3464563c4a13bb208\">Here's the diff that fixed it</a> (when I was using <code>RUST_LOG=rustc::ty::subst,rustc::ty::context,rustc_typeck</code> which is what I had when I figured this out, I'm sure there are more problematic <code>debug!</code> statements in other modules, like <code>rustc::traits::*</code>). The issue was that the pretty printer calling <code>predicates_of</code> ended up calling code with debug logs that were printing the same type, causing a cycle. I have no idea what to do about this. </p>\n<p>Any thoughts? As far as I can tell, there's no easy way for someone modifying <code>rustc_typeck</code> (for example) to know not to print a type in a debug statement because that code is in the path of the pretty printer.</p>",
        "id": 163340604,
        "sender_full_name": "davidtwco",
        "timestamp": 1555284952
    },
    {
        "content": "<p>I filed an issue for this, <a href=\"https://github.com/rust-lang/rust/issues/59985\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/59985\">#59985</a>, so it isn't forgotten about.</p>",
        "id": 163373049,
        "sender_full_name": "davidtwco",
        "timestamp": 1555329359
    },
    {
        "content": "<p>We have a test which prints debug stuff, but I only think it's a hello word example</p>",
        "id": 163373128,
        "sender_full_name": "Zoxc",
        "timestamp": 1555329432
    },
    {
        "content": "<p>I think this would only happen for existential types, as that was the only type that called <code>predicates_of</code> during printing (IIRC from when I looked last night).</p>",
        "id": 163373206,
        "sender_full_name": "davidtwco",
        "timestamp": 1555329534
    },
    {
        "content": "<p>I’m just not sure how to go about fixing it otherwise I’d have had a PR in.</p>",
        "id": 163374257,
        "sender_full_name": "davidtwco",
        "timestamp": 1555330719
    },
    {
        "content": "<p>Hmm. One way is to generalize the printer to be able to handle cyclic graph structures</p>",
        "id": 163449716,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555402563
    },
    {
        "content": "<p>But that’s a fair amount of effort</p>",
        "id": 163449730,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555402578
    },
    {
        "content": "<p>In the short(er) term we could try tracking whether we are currently already executing the pretty printing code and change what we print for existential types in that context</p>",
        "id": 163449764,
        "sender_full_name": "pnkfelix",
        "timestamp": 1555402663
    }
]