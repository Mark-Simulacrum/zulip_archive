[
    {
        "content": "<p>Looking into <a href=\"https://github.com/rust-lang/rust/issues/54618\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54618\">#54618</a>. The issue is that if a crate isn't loaded but has a <code>--extern</code> then it won't make a suggestion. So I figure when making suggestions I'd need to load any crates from <code>--extern</code>flags first so that it can make suggestions from all crates. That means that this is a fairly rare case, since you'd only ever run into it if you add a dependency and don't use it, but expect the suggestion from it in errors. Anyway, I'm not sure how I'd go about loading crates from <code>rustc_typeck</code>. If there was a way to access a <code>CrateLoader</code> I could probably call <code>maybe_process_path_extern</code> on the <code>session.extern_prelude</code> names.</p>",
        "id": 135192005,
        "sender_full_name": "davidtwco",
        "timestamp": 1538663019
    },
    {
        "content": "<blockquote>\n<p>That means that this is a fairly rare case, since you'd only ever run into it if you add a dependency and don't use it, but expect the suggestion from it in errors</p>\n</blockquote>\n<p>I don't think is that rare. e.g., it happens a lot with things like <code>rayon</code> and <code>itertools</code></p>",
        "id": 135192114,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538663079
    },
    {
        "content": "<p>which mainly extend types with new methods via traits</p>",
        "id": 135192124,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538663088
    },
    {
        "content": "<p>We do similar with the \"did you mean to import X\" suggestions - we iterate over all <code>--extern</code> crates and then load then and check if we can find a path in it; but that happens at a point where I can call functions on <code>CrateLoader</code>.</p>",
        "id": 135192133,
        "sender_full_name": "davidtwco",
        "timestamp": 1538663101
    },
    {
        "content": "<p>yeah I'm not sure about that aspect of it</p>",
        "id": 135192162,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538663137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Well, what I mean is,  you'd need to add the crate to <code>Cargo.toml</code> and never import anything or use anything from that crate. That way you'd have an <code>--extern</code> flag to <code>rustc</code> but it'd never actually load the crate.</p>",
        "id": 135192167,
        "sender_full_name": "davidtwco",
        "timestamp": 1538663139
    },
    {
        "content": "<p>right, I'm saying this is common :)</p>",
        "id": 135192175,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538663148
    },
    {
        "content": "<p>in those specific scenarios</p>",
        "id": 135192179,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538663152
    },
    {
        "content": "<p>Ah, I see what you mean.</p>",
        "id": 135192222,
        "sender_full_name": "davidtwco",
        "timestamp": 1538663163
    },
    {
        "content": "<p>that is, you might reasonably add <code>rayon = \"1.0\"</code> and then use <code>par_iter()</code></p>",
        "id": 135192225,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538663165
    },
    {
        "content": "<p>Yeah, I see what you mean. I just think it'd be a little bit of a strange workflow to add the crate, then re-run the not-compiling code where you presumably are calling <code>par_iter</code> to see what to import  from the suggestion - presumably you'd have found that in documentation by that point.</p>",
        "id": 135192281,
        "sender_full_name": "davidtwco",
        "timestamp": 1538663218
    },
    {
        "content": "<p>It's inconsequential either way.</p>",
        "id": 135192286,
        "sender_full_name": "davidtwco",
        "timestamp": 1538663226
    },
    {
        "content": "<p>One way I think I could do it would be to make <code>rustc_typeck</code> depend on <code>rustc_metadata</code>, then I might be able to construct a <code>CrateLoader</code> with the <code>&amp;'a CrateStoreDyn</code> and <code>&amp;'a Session</code> stored in <code>TyCtxt</code>. Though <code>&amp;'a CrateStoreDyn</code> is not <code>&amp;'a CStore</code>. I don't know that I like that solution that much though.</p>",
        "id": 135192643,
        "sender_full_name": "davidtwco",
        "timestamp": 1538663513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> Do you have any suggestions on how best I'd go about doing this? Effectively I need a function that'll load all crates so I can use them for suggestions while in <code>rustc_typeck</code>.</p>",
        "id": 135197005,
        "sender_full_name": "davidtwco",
        "timestamp": 1538667215
    },
    {
        "content": "<blockquote>\n<p>Yeah, I see what you mean. I just think it'd be a little bit of a strange workflow to add the crate, then re-run the not-compiling code where you presumably are calling <code>par_iter</code> to see what to import  from the suggestion - presumably you'd have found that in documentation by that point.</p>\n</blockquote>\n<p>I did it :)</p>",
        "id": 135197193,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667388
    },
    {
        "content": "<p>hence how I came to file this bug...</p>",
        "id": 135197201,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667393
    },
    {
        "content": "<p>I think though I was sort of expecting the compiler to tell me the trait to import</p>",
        "id": 135197206,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667403
    },
    {
        "content": "<p>I thought it was from the test I added to the other PR.</p>",
        "id": 135197211,
        "sender_full_name": "davidtwco",
        "timestamp": 1538667413
    },
    {
        "content": "<p>I guess in which case, I've also done it.</p>",
        "id": 135197222,
        "sender_full_name": "davidtwco",
        "timestamp": 1538667424
    },
    {
        "content": "<p>oh, yes, true :) regardless I have done it</p>",
        "id": 135197237,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667436
    },
    {
        "content": "<p>maybe subsequently though</p>",
        "id": 135197240,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667441
    },
    {
        "content": "<p>in particular I often lean on the compiler to tell me the right traits...</p>",
        "id": 135197247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667455
    },
    {
        "content": "<p><em>anyway</em></p>",
        "id": 135197251,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667457
    },
    {
        "content": "<p>I'm not sure let me look into the crate loading business</p>",
        "id": 135197257,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667470
    },
    {
        "content": "<p>I'm not sure how much of a big deal it is to load all crates eagerly</p>",
        "id": 135197303,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667486
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> who probably has thoughts â€” see <a href=\"https://github.com/rust-lang/rust/issues/54618\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/54618\">#54618</a> for context</p>",
        "id": 135197321,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667502
    },
    {
        "content": "<p>I've just assumed there's a reason we only load them when we encounter a path with them in it.</p>",
        "id": 135197327,
        "sender_full_name": "davidtwco",
        "timestamp": 1538667510
    },
    {
        "content": "<p>presumably yes</p>",
        "id": 135197415,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667609
    },
    {
        "content": "<p>but...you never know...</p>",
        "id": 135197423,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667618
    },
    {
        "content": "<p>At the very least it's better not to do it if we don't need them.</p>",
        "id": 135197442,
        "sender_full_name": "davidtwco",
        "timestamp": 1538667640
    },
    {
        "content": "<p>well, I was wondering in particular if \"loading a crate\" were quite lazy</p>",
        "id": 135197462,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667672
    },
    {
        "content": "<p>then it would seem fine</p>",
        "id": 135197465,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667675
    },
    {
        "content": "<p>anyway, you are correct that this <code>CrateLoader</code> gets destroyed</p>",
        "id": 135197481,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667699
    },
    {
        "content": "<p>though it doesn't appear to be a very \"heavyweight\" data structure</p>",
        "id": 135197602,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667799
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CrateLoader</span><span class=\"o\">&lt;</span><span class=\"na\">&#39;a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">sess</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">Session</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">cstore</span>: <span class=\"kp\">&amp;</span><span class=\"na\">&#39;a</span><span class=\"w\"> </span><span class=\"n\">CStore</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local_crate_name</span>: <span class=\"nc\">Symbol</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>",
        "id": 135197612,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538667809
    },
    {
        "content": "<p>Yeah, we have everything available at the place where I need it (roughly) to be able to construct a new one - since it seems to just hold operations for adding to the <code>CStore</code>. But, <code>rustc_metadata</code> isn't a dependency of that crate so I can't access it.</p>",
        "id": 135197696,
        "sender_full_name": "davidtwco",
        "timestamp": 1538667868
    },
    {
        "content": "<p>(it's \"roughly\" because <code>GlobalCtxt</code>, IIRC, has a <code>CrateStoreDyn</code> which implements the same trait as <code>Cstore</code> - so not quite enough to make a <code>CreateLoader</code> but almost)</p>",
        "id": 135197835,
        "sender_full_name": "davidtwco",
        "timestamp": 1538667970
    },
    {
        "content": "<p>right and it may be that this separation is intended to be refactored into something stronger</p>",
        "id": 135198268,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538668385
    },
    {
        "content": "<p>I'll take a look into some other issues until there's a clearer idea of what approach we want to take here.</p>",
        "id": 135198398,
        "sender_full_name": "davidtwco",
        "timestamp": 1538668514
    },
    {
        "content": "<blockquote>\n<p>since you'd only ever run into it if you add a dependency and don't use it, but expect the suggestion from it in errors</p>\n</blockquote>\n<p>It's not the most compelling case, but this is exactly how the playground works ;-) This error would improve that experience.</p>",
        "id": 135256275,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1538747880
    },
    {
        "content": "<p>That's a good point, hadn't considered that.</p>",
        "id": 135256491,
        "sender_full_name": "davidtwco",
        "timestamp": 1538748099
    },
    {
        "content": "<p>that's kind of neat =)</p>",
        "id": 135257075,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1538748754
    },
    {
        "content": "<p>Has there been any discussion or thought about the approach to be taken for this issue?</p>",
        "id": 135609705,
        "sender_full_name": "davidtwco",
        "timestamp": 1539266163
    },
    {
        "content": "<p>not really :(</p>",
        "id": 135610066,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1539266559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> where'd you get stuck?</p>",
        "id": 136927164,
        "sender_full_name": "eddyb",
        "timestamp": 1541084679
    },
    {
        "content": "<p>all you need is to plumb this through the query engine <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_resolve/lib.rs#L4474-L4475\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_resolve/lib.rs#L4474-L4475\">https://github.com/rust-lang/rust/blob/master/src/librustc_resolve/lib.rs#L4474-L4475</a></p>",
        "id": 136927197,
        "sender_full_name": "eddyb",
        "timestamp": 1541084722
    },
    {
        "content": "<p><em>whoops</em></p>",
        "id": 136927200,
        "sender_full_name": "nagisa",
        "timestamp": 1541084724
    },
    {
        "content": "<p>Let's move to the dedicated topic for this.</p>",
        "id": 136927218,
        "sender_full_name": "davidtwco",
        "timestamp": 1541084744
    },
    {
        "content": "<p>if the crate loader is separate from the crate store, maybe you can put the former in the latter?</p>",
        "id": 136927222,
        "sender_full_name": "eddyb",
        "timestamp": 1541084749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 136927272,
        "sender_full_name": "davidtwco",
        "timestamp": 1541084767
    },
    {
        "content": "<p>So, I don't think I made any attempts at actually implementing anything, I just looked around for a while and couldn't see a way I'd do it.</p>",
        "id": 136927296,
        "sender_full_name": "davidtwco",
        "timestamp": 1541084803
    },
    {
        "content": "<p>well, you put the crate loader in the crate store, if it's not already there</p>",
        "id": 136927312,
        "sender_full_name": "eddyb",
        "timestamp": 1541084825
    },
    {
        "content": "<p>and the crate store can just provide queries, so... that's it</p>",
        "id": 136927323,
        "sender_full_name": "eddyb",
        "timestamp": 1541084835
    },
    {
        "content": "<p>you add a query for <code>maybe_load_extern_crate</code> or something</p>",
        "id": 136927344,
        "sender_full_name": "eddyb",
        "timestamp": 1541084856
    },
    {
        "content": "<p>One option I considered was making a function that would make a <code>CrateLoader</code> (the contents of which are mostly available) and then just call the correct function on that for each crate, but we only have a type erased crate store, not the actual type that is required.</p>",
        "id": 136927348,
        "sender_full_name": "davidtwco",
        "timestamp": 1541084863
    },
    {
        "content": "<p>I've not looked at the query system much, I'll need to familarize myself with that.</p>",
        "id": 136927399,
        "sender_full_name": "davidtwco",
        "timestamp": 1541084884
    },
    {
        "content": "<p>that's why you implement things on teh actual crate store</p>",
        "id": 136927405,
        "sender_full_name": "eddyb",
        "timestamp": 1541084884
    },
    {
        "content": "<p>which gets special treatment from the query engine</p>",
        "id": 136927431,
        "sender_full_name": "eddyb",
        "timestamp": 1541084912
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/cstore_impl.rs#L101\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/cstore_impl.rs#L101\">https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/cstore_impl.rs#L101</a></p>",
        "id": 136927485,
        "sender_full_name": "eddyb",
        "timestamp": 1541084973
    },
    {
        "content": "<p>oh god this is such a hack <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/cstore_impl.rs#L83-L84\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/cstore_impl.rs#L83-L84\">https://github.com/rust-lang/rust/blob/master/src/librustc_metadata/cstore_impl.rs#L83-L84</a></p>",
        "id": 136927593,
        "sender_full_name": "eddyb",
        "timestamp": 1541085057
    },
    {
        "content": "<p>okay nvm this wouldn't work like that</p>",
        "id": 136927634,
        "sender_full_name": "eddyb",
        "timestamp": 1541085106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> okay, uhhh, just add a method to <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc/middle/cstore.rs#L208\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc/middle/cstore.rs#L208\">https://github.com/rust-lang/rust/blob/master/src/librustc/middle/cstore.rs#L208</a></p>",
        "id": 136927703,
        "sender_full_name": "eddyb",
        "timestamp": 1541085147
    },
    {
        "content": "<p>that does the loading</p>",
        "id": 136927713,
        "sender_full_name": "eddyb",
        "timestamp": 1541085155
    },
    {
        "content": "<p>that should work</p>",
        "id": 136927715,
        "sender_full_name": "eddyb",
        "timestamp": 1541085157
    },
    {
        "content": "<p>you can probably figure out how to do an <code>_untracked</code> method with a query elsewhere</p>",
        "id": 136927731,
        "sender_full_name": "eddyb",
        "timestamp": 1541085181
    },
    {
        "content": "<p>Alright, I'll give that a go and see what I can figure out.</p>",
        "id": 136927742,
        "sender_full_name": "davidtwco",
        "timestamp": 1541085196
    },
    {
        "content": "<p>just by grepping for those method names in the trait</p>",
        "id": 136927743,
        "sender_full_name": "eddyb",
        "timestamp": 1541085198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> I've got it so that I can call the function to load something and I can see it doing that in the logs. However, I've not figured out how to get that to invalidate the <code>all_crate_nums</code> (and following on from that, the <code>all_traits</code>) queries.</p>",
        "id": 136990813,
        "sender_full_name": "davidtwco",
        "timestamp": 1541155398
    },
    {
        "content": "<p>(with the above said, I'm not 100% sure that I've implemented the query correctly, but I can call it, so <span class=\"emoji emoji-1f937\" title=\"shrug\">:shrug:</span>)</p>",
        "id": 136990845,
        "sender_full_name": "davidtwco",
        "timestamp": 1541155429
    },
    {
        "content": "<p>ehm, it can't do that :(</p>",
        "id": 136991244,
        "sender_full_name": "eddyb",
        "timestamp": 1541155659
    },
    {
        "content": "<p>you have to make <code>all_traits </code>not use <code>all_crate_nums</code></p>",
        "id": 136991273,
        "sender_full_name": "eddyb",
        "timestamp": 1541155675
    },
    {
        "content": "<p>or, rather, it should use <code>all_crate_nums</code> in combination with loading everything in the extern prelude, speculatively</p>",
        "id": 136991343,
        "sender_full_name": "eddyb",
        "timestamp": 1541155700
    },
    {
        "content": "<p>Ah.</p>",
        "id": 136991350,
        "sender_full_name": "davidtwco",
        "timestamp": 1541155706
    },
    {
        "content": "<p>and use a set because you might get the same <code>CrateNum</code> more than once</p>",
        "id": 136991356,
        "sender_full_name": "eddyb",
        "timestamp": 1541155712
    },
    {
        "content": "<p>Thanks, I'll look into doing that.</p>",
        "id": 136991540,
        "sender_full_name": "davidtwco",
        "timestamp": 1541155808
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> ^^ do you think that's a good approach?</p>",
        "id": 136991562,
        "sender_full_name": "eddyb",
        "timestamp": 1541155824
    },
    {
        "content": "<p>basically I'm saying <code>all_traits</code> should always look in <code>--extern</code> crates even if nothing else loads them</p>",
        "id": 136991580,
        "sender_full_name": "eddyb",
        "timestamp": 1541155841
    },
    {
        "content": "<p>but this might be bad/wrong if <code>all_traits</code> is used for non-diagnostic purposes</p>",
        "id": 136991605,
        "sender_full_name": "eddyb",
        "timestamp": 1541155857
    },
    {
        "content": "<p>I'm not sure it is just <code>all_traits</code> - there's two computations as far as I can gather - one for out of scope traits (don't think it uses <code>all_traits</code>) and one for traits that it suggests you implement (does use <code>all_traits</code>).</p>",
        "id": 136991665,
        "sender_full_name": "davidtwco",
        "timestamp": 1541155902
    },
    {
        "content": "<p>To handle that, I've been trying to speculatively load all crates as soon as we're about to compute the earliest of those two - in the hopes that with the crates now loaded, they'd both get the benefit.</p>",
        "id": 136991763,
        "sender_full_name": "davidtwco",
        "timestamp": 1541155950
    },
    {
        "content": "<p>But, since it doesn't invalidate the other queries, that doesn't seem to happen.</p>",
        "id": 136991782,
        "sender_full_name": "davidtwco",
        "timestamp": 1541155963
    },
    {
        "content": "<p>no, you probably don't want other things to see those crates as loaded</p>",
        "id": 136991953,
        "sender_full_name": "eddyb",
        "timestamp": 1541156077
    },
    {
        "content": "<p>Alright, so I have this working - mostly.</p>",
        "id": 137000469,
        "sender_full_name": "davidtwco",
        "timestamp": 1541159657
    },
    {
        "content": "<p>It correctly suggests both \"you might want to implement this\" and \"there's an implementation of this, import it\".</p>",
        "id": 137000517,
        "sender_full_name": "davidtwco",
        "timestamp": 1541159682
    },
    {
        "content": "<p>In fact, I think I know what the issue I've not explained yet might be.</p>",
        "id": 137000586,
        "sender_full_name": "davidtwco",
        "timestamp": 1541159715
    },
    {
        "content": "<p>Alright, fairly certain I don't.</p>",
        "id": 137000854,
        "sender_full_name": "davidtwco",
        "timestamp": 1541159805
    },
    {
        "content": "<p>So, the issue I'm seeing is that I have this code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"w\">    </span><span class=\"c1\">// Expect a &quot;try using baz::BazTrait&quot; (which involves</span>\n<span class=\"w\">    </span><span class=\"c1\">// loading that crate speculatively as it isn&#39;t otherwise used).</span>\n<span class=\"w\">    </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">extern_baz</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Local</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// Expect a &quot;consider implementing baz::BazTrait&quot;.</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">extern_baz</span><span class=\"p\">();</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>where <code>x</code> is a <code>u32</code> and has an implementation of <code>BazTrait</code> (which is from the external crate and defines the method <code>extern_baz</code>) and <code>Local</code> is a local type that doesn't implement it.</p>\n<p>With the test as above, I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span>   |\nLL | struct Local;\n   | ------------- method `extern_baz` not found for this\n...\nLL |     local.extern_baz();\n   |           ^^^^^^^^^^\n   |\n   = help: items from traits can only be used if the trait is implemented and in scope\n   = note: the following trait defines an item `extern_baz`, perhaps you need to implement it:\n           candidate #1: `baz::BazTrait`\n</pre></div>\n\n\n<p>Which is ideal, that's what I want. However, I don't get an error for the <code>x.extern_baz()</code> line. I've hooked up this change to both of those diagnostics so I should be getting it. I've discovered if I comment out <code>let local = Local;</code> (which causes a \"what is <code>local</code>\" error, but that's fine), then I get a suggestion like this (as expected) for the <code>x.extern_baz()</code> line:</p>\n<div class=\"codehilite\"><pre><span></span>help: the following trait is implemented but not in scope, perhaps add a `use` for it:\n   |\nLL | use baz::BazTrait;\n   |\n</pre></div>\n\n\n<p>Not sure why I can't get both at once to happen.</p>",
        "id": 137001541,
        "sender_full_name": "davidtwco",
        "timestamp": 1541160044
    },
    {
        "content": "<p>I'm lucky that I made the mistake of not adding <code>let local = Local;</code> initially and noticing the difference once I added it or I'd have taken way longer to realise that statement was having an effect.</p>",
        "id": 137001666,
        "sender_full_name": "davidtwco",
        "timestamp": 1541160090
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/method/suggest.rs#L587\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/method/suggest.rs#L587\">This function</a> is called once for each error location - <code>x.extern_baz()</code> and <code>local.extern_baz()</code>. When <code>local</code> is commented, then <code>out_of_scope_traits</code> for <code>x.extern_baz</code> has one item in it during it's call (as it should). When <code>local</code> isn't commented, then <code>out_of_scope_traits</code> is empty for both of their calls (which is expected for the <code>local</code> case, it goes on to report a \"you could implement it though\" error correctly).</p>",
        "id": 137002385,
        "sender_full_name": "davidtwco",
        "timestamp": 1541160314
    },
    {
        "content": "<p>It seems that for some reason <a href=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/method/probe.rs#L1182-L1185\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/master/src/librustc_typeck/check/method/probe.rs#L1182-L1185\">this branch is used</a> for the <code>x.extern_baz()</code> case when <code>local</code> is uncommented.</p>",
        "id": 137002727,
        "sender_full_name": "davidtwco",
        "timestamp": 1541160419
    },
    {
        "content": "<p>The <code>suggest_traits_to_import</code> call for the <code>x.extern_baz()</code> case happens first irrespective of <code>local</code> being commented.</p>",
        "id": 137002902,
        "sender_full_name": "davidtwco",
        "timestamp": 1541160481
    },
    {
        "content": "<p>I'm struggling to work out what the issue is here, any ideas?</p>",
        "id": 137005719,
        "sender_full_name": "davidtwco",
        "timestamp": 1541161256
    },
    {
        "content": "<p>It seems like it isn't an pre-existing issue with these two suggestions - <a href=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f7001d854df4616012e0aa9d12a7794d\" target=\"_blank\" title=\"https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=f7001d854df4616012e0aa9d12a7794d\">playground</a>.</p>",
        "id": 137007054,
        "sender_full_name": "davidtwco",
        "timestamp": 1541161640
    },
    {
        "content": "<p>It does seem to work as expected if I have two of the \"it's implemented, try using it\" suggestion - which makes me think that the issue stems from the overlap of both types of suggestion - \"implemented try use\" and \"not implemented, try implement\".</p>",
        "id": 137007431,
        "sender_full_name": "davidtwco",
        "timestamp": 1541161750
    },
    {
        "content": "<p>Similarly, if I have two occurances of the \"not implemented, try implement\" case then both get a suggestion. That would suggest that the new  speculative crate load isn't only working once.</p>",
        "id": 137007889,
        "sender_full_name": "davidtwco",
        "timestamp": 1541161883
    },
    {
        "content": "<p>Huh, now I'm getting it to fail without having the other suggestion at all. I don't know what is different.</p>",
        "id": 137029887,
        "sender_full_name": "davidtwco",
        "timestamp": 1541167384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> do you have any idea why I might be seeing what I've described above?</p>",
        "id": 137032129,
        "sender_full_name": "davidtwco",
        "timestamp": 1541167913
    },
    {
        "content": "<p>Hmm</p>",
        "id": 137032944,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541168097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> is there an open PR or something so I can \"catch up\" on what approach you used?</p>",
        "id": 137032987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541168110
    },
    {
        "content": "<p><a href=\"https://gist.github.com/davidtwco/fb921467534b6f7351f68f49e827a493\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/fb921467534b6f7351f68f49e827a493\">I've got the log output in a gist here</a>. Will open a PR in a moment.</p>",
        "id": 137033425,
        "sender_full_name": "davidtwco",
        "timestamp": 1541168204
    },
    {
        "content": "<p>Searching for <code>consider_probe</code> has the logs that are as deep as I've tracked it down - <a href=\"https://gist.github.com/davidtwco/fb921467534b6f7351f68f49e827a493#file-gistfile1-txt-L1548-L1551\" target=\"_blank\" title=\"https://gist.github.com/davidtwco/fb921467534b6f7351f68f49e827a493#file-gistfile1-txt-L1548-L1551\">these lines</a>.</p>",
        "id": 137033793,
        "sender_full_name": "davidtwco",
        "timestamp": 1541168284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> <a href=\"https://github.com/rust-lang/rust/issues/55613\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/55613\">#55613</a></p>",
        "id": 137034405,
        "sender_full_name": "davidtwco",
        "timestamp": 1541168424
    },
    {
        "content": "<p>(the stderr file has the desired output in that PR, so it will fail the tests)</p>",
        "id": 137034684,
        "sender_full_name": "davidtwco",
        "timestamp": 1541168489
    },
    {
        "content": "<p>(lines 28-30 for <code>src/test/ui/rust-2018/trait-import-suggestions.stderr</code> don't  show up in practice)</p>",
        "id": 137034929,
        "sender_full_name": "davidtwco",
        "timestamp": 1541168543
    },
    {
        "content": "<p>sorry will try to look soon :) got distracted</p>",
        "id": 137073330,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1541183294
    },
    {
        "content": "<p>No worries.</p>",
        "id": 137085798,
        "sender_full_name": "davidtwco",
        "timestamp": 1541196465
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 137085800,
        "sender_full_name": "davidtwco",
        "timestamp": 1541196468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> hope SPLASH went well, I enjoyed your blog post. I've not done any more digging on the issue from this PR - just wanted to bump it - there's no rush, I'm sure you're super busy catching up <span class=\"emoji emoji-1f642\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 147531010,
        "sender_full_name": "davidtwco",
        "timestamp": 1542035598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116107\">@davidtwco</span> indeed :) thanks</p>",
        "id": 147543776,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1542048329
    },
    {
        "content": "<p>As a data point, there's at least one person who <a href=\"https://github.com/integer32llc/rust-playground/issues/445\" target=\"_blank\" title=\"https://github.com/integer32llc/rust-playground/issues/445\">isn't a fan of extern crate suggestions for types in the playground</a>, which <em>is</em> a non-usual case.</p>",
        "id": 151275422,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1544451660
    },
    {
        "content": "<p>FYI <span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span>, there is this PR that I also ran into a wall with - not had time to revisit it and take a look with fresh eyes yet though.</p>",
        "id": 151563435,
        "sender_full_name": "davidtwco",
        "timestamp": 1544648575
    },
    {
        "content": "<p>Spent some more time digging into what was going on here today. Managed to get a decent 20+ functions deep and end up <a href=\"https://github.com/rust-lang/rust/blob/041254b81495a5aa67af839e00b890e78ed0cbeb/src/librustc/ty/trait_def.rs#L185\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/041254b81495a5aa67af839e00b890e78ed0cbeb/src/librustc/ty/trait_def.rs#L185\">at this line</a> where despite loading all extern crates using the new query that this PR adds earlier in the execution and having <code>trait_id</code> in that function be from the external crate, the call to <code>tcx.crates()</code> doesn't include the crate - and therefore rustc concludes the trait isn't implemented for <code>u32</code> when it is.</p>",
        "id": 152109297,
        "sender_full_name": "davidtwco",
        "timestamp": 1545141425
    },
    {
        "content": "<p>Not sure really how to work around that. It is consistent since when we do our <a href=\"https://github.com/rust-lang/rust/blob/e03d25f30bf38ba1b74bc4dd071a9b44bc3a6060/src/librustc_typeck/check/method/suggest.rs#L772-L789\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e03d25f30bf38ba1b74bc4dd071a9b44bc3a6060/src/librustc_typeck/check/method/suggest.rs#L772-L789\">speculative crate load here</a>, we still need to append it to the <code>tcx.crates()</code> results afterwards.</p>",
        "id": 152109389,
        "sender_full_name": "davidtwco",
        "timestamp": 1545141518
    },
    {
        "content": "<p>I'll need to look into whether the new query should affect the result of <code>tcx.crates()</code> and if it should, why it isn't, and if it isn't, what alternatives there are.</p>",
        "id": 152109427,
        "sender_full_name": "davidtwco",
        "timestamp": 1545141576
    },
    {
        "content": "<p>Seems like the <code>crates</code> query shouldn't be being run because it's already been cached - as far as I gather from this <a href=\"#narrow/stream/131828-t-compiler/subject/.2354618.20extern.20crates.20trait.20suggestions/near/136991244\" title=\"#narrow/stream/131828-t-compiler/subject/.2354618.20extern.20crates.20trait.20suggestions/near/136991244\">old message from eddyb</a> - that can't be changed. </p>\n<p>Doing what I did in to solve the issue that spurred on that previous message and just combining the output of <code>tcx.crates()</code> and the new query that this adds ends up hitting an ICE <a href=\"https://github.com/rust-lang/rust/blob/041254b81495a5aa67af839e00b890e78ed0cbeb/src/librustc/traits/specialize/specialization_graph.rs#L408-L409\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/041254b81495a5aa67af839e00b890e78ed0cbeb/src/librustc/traits/specialize/specialization_graph.rs#L408-L409\">here</a> and <a href=\"https://github.com/rust-lang/rust/blob/041254b81495a5aa67af839e00b890e78ed0cbeb/src/librustc/dep_graph/graph.rs#L404\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/041254b81495a5aa67af839e00b890e78ed0cbeb/src/librustc/dep_graph/graph.rs#L404\">then here</a> (if you just comment out the first one). </p>\n<p>Using the <code>CrateNum</code> that already exists from the <code>DefId</code> of the trait (which isn't ideal, then we'd only find impls from the same crate as the trait, and not impls from any other extern crates that are not imported) then we get the same errors.</p>\n<p>Not really sure how to progress again.</p>",
        "id": 152116210,
        "sender_full_name": "davidtwco",
        "timestamp": 1545147579
    },
    {
        "content": "<p>I suspect even if the <code>tcx.crates()</code> query returned the crate num that it would run into the same ICEs anyway.</p>",
        "id": 152116274,
        "sender_full_name": "davidtwco",
        "timestamp": 1545147624
    },
    {
        "content": "<p>Could we make the <code>crates</code> query return a structure that offers an accessor method for the list of crates as it does now, but also has a second accessor for all crates that will <code>delay_span_bug</code> to ensure we only use it in an error reporting path?</p>",
        "id": 152117264,
        "sender_full_name": "oli",
        "timestamp": 1545148483
    },
    {
        "content": "<p>I'm assuming that there's another query that actually loads the crates, so just calling <code>crates</code> will not load all crates, but just reserve <code>CrateNum</code>s for them</p>",
        "id": 152117315,
        "sender_full_name": "oli",
        "timestamp": 1545148522
    },
    {
        "content": "<blockquote>\n<p>I'm assuming that there's another query that actually loads the crates, so just calling <code>crates</code> will not load all crates, but just reserve <code>CrateNum</code>s for them</p>\n</blockquote>\n<p>There's a new query added in the PR for this issue that loads a crate given a name (and we use <code>tcx.extern_prelude.keys()</code> to get those) - so the loading <em>should</em> be handled - we'd just need <code>crates</code> to return that new <code>CrateNum</code> too - which I suspect it would do, because the <code>cstore</code> has changed with the previous load and the provider behind <code>crates</code> would pick that up fine - it's just the caching that gets in the way for that.</p>\n<p>However, I suspect that even doing that (while probably necessary) wouldn't solve the ICEs that it then runs into - that might be a result of the way that the <code>maybe_load_extern_crate</code> query that this PR added works.</p>",
        "id": 152117647,
        "sender_full_name": "davidtwco",
        "timestamp": 1545148796
    },
    {
        "content": "<p>is <code>crates</code> doing a lot of work? if not, we could maybe stop caching it?</p>",
        "id": 152118827,
        "sender_full_name": "oli",
        "timestamp": 1545149734
    },
    {
        "content": "<p>My original suggestion/question above was whether <code>crates</code> could emit the extern prelude crates from the beginning instead of trying to make it emit more crates later</p>",
        "id": 152118912,
        "sender_full_name": "oli",
        "timestamp": 1545149785
    },
    {
        "content": "<p><code>crates</code> just iterates over <code>self.metas</code> in the <code>cstore</code>. </p>\n<p>Sorry, I misunderstood your suggestion. I donâ€™t think it could (though thatâ€™s just my understanding of it).</p>",
        "id": 152120860,
        "sender_full_name": "davidtwco",
        "timestamp": 1545151446
    },
    {
        "content": "<p>Iâ€™m not sure though if there are other queries related to crates with cached outputs that would explain the follow-on ICEs though.</p>",
        "id": 152120915,
        "sender_full_name": "davidtwco",
        "timestamp": 1545151509
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> do you recall how to stop caching a query? I've tried changing <a href=\"https://github.com/rust-lang/rust/blob/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2/src/librustc/dep_graph/dep_node.rs#L647\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/blob/e7b4bc35e99ee3c5b2b42a1b8b3f9cd6eca1f0b2/src/librustc/dep_graph/dep_node.rs#L647\">this line</a> to <code>eval_always</code> but that doesn't seem to be doing it and I can't see anything else.</p>",
        "id": 152174487,
        "sender_full_name": "davidtwco",
        "timestamp": 1545217295
    },
    {
        "content": "<p>I think you \"just\" need to not make it be a query by removing the entry and adding a function to <code>TyCtxt</code></p>",
        "id": 152175041,
        "sender_full_name": "oli",
        "timestamp": 1545217941
    },
    {
        "content": "<p>Alright, I'll try that, thanks.</p>",
        "id": 152175056,
        "sender_full_name": "davidtwco",
        "timestamp": 1545217960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"124288\">@Oli</span> I think that might just have done it! Thanks. I suspect the other ICEs I saw before were just because adding that new <code>CrateNum</code> at just that function wasn't a good idea.</p>",
        "id": 152175650,
        "sender_full_name": "davidtwco",
        "timestamp": 1545218759
    },
    {
        "content": "<p>cool! be sure to do a perf run, but it seems like it's a pretty cheap wrapper around accessing <code>self.metas</code></p>",
        "id": 152175713,
        "sender_full_name": "oli",
        "timestamp": 1545218820
    }
]