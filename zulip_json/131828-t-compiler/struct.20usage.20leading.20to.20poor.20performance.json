[
    {
        "content": "<p>I ran into an issue when packing two arrays into a struct.<br>\nThe change was for convenience, but I ended up with code taking 4x longer to execute.<br>\nSince the size of a struct and the starting locations of all elements (to the best of my knowledge) are known at compile time, <br>\nI expected member access to be replaced by a memory access (calculated at compile time) to that element.<br>\nIf we don't expose them (e.g. with repr(c)) array elements might not be stored strictly in the way in which they are named in the struct.<br>\nBeside of that, I don't expect much \"magic\" to happen there.<br>\nTherefore my questions now are:<br>\nIs this expectation (roughly) true,<br>\nat which level (HIR, MIR, LLVM-IR) does this translation happen,<br>\nwhich code modifications are applied before the struct is removed from the code ( since I guess such a transition is causing the performance difference)?</p>\n<p>Just to get a vague feeling for places to look into.<br>\nI'm not too experienced with rust and especially the compiler, so if there is a better way to hunt down this performance issue, please let me know.</p>",
        "id": 241928958,
        "sender_full_name": "Manuel Drehwald",
        "timestamp": 1623162841
    },
    {
        "content": "<p>Typically structs are broken down by SROA in LLVM (assuming the struct is used for a local variable).</p>",
        "id": 241964518,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1623176823
    },
    {
        "content": "<p>For structs containing arrays in particular, a common issue is aliasing. LLVM will generally not know that accesses to one array can't overflow into the other array.</p>",
        "id": 241964690,
        "sender_full_name": "Nikita Popov",
        "timestamp": 1623176906
    }
]