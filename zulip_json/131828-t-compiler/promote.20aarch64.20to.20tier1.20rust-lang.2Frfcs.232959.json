[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"119009\">@eddyb</span> <span class=\"user-mention\" data-user-id=\"119031\">@Esteban KÃ¼ber</span> <span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> <span class=\"user-mention\" data-user-id=\"123856\">@Vadim Petrochenkov</span> <span class=\"user-mention\" data-user-id=\"116083\">@pnkfelix</span> -- Gentle reminder about the pending RFC (<a href=\"https://github.com/rust-lang/rfcs/issues/2959\">rust-lang/rfcs#2959</a>)  to promote aarch64 to tier1. Our job is to certify that the Tier1 target requirements are met. The RFC itself <a href=\"https://github.com/raw-bin/rfcs/blob/promote-aarch64-unknown-linux-gnu-to-tier-1/text/0000-promote-aarch64-unknown-linux-gnu-to-tier1.md#guide-level-explanation\">lays out criteria here</a>, for reference.</p>",
        "id": 211166573,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1600969764
    },
    {
        "content": "<p>I think it is critical that we figure out whether we want stack probes to happen before we formally change the tier level of the target or if its fine that happens afterwards.</p>",
        "id": 211194050,
        "sender_full_name": "nagisa",
        "timestamp": 1600984221
    },
    {
        "content": "<p>I personally think, given that it should be possible to just add a function for probing <a href=\"https://github.com/rust-lang/compiler-builtins/blob/master/src/probestack.rs\">here</a>, we should require probes before promotion.</p>",
        "id": 211194092,
        "sender_full_name": "nagisa",
        "timestamp": 1600984259
    },
    {
        "content": "<p>I intend to spend some time this weekend to try and triple check its actually possible fwiw</p>",
        "id": 211194175,
        "sender_full_name": "nagisa",
        "timestamp": 1600984322
    },
    {
        "content": "<p>Doesn't it still need target-specific LLVM support?</p>",
        "id": 211194191,
        "sender_full_name": "Jonas Schievink  [he/him]",
        "timestamp": 1600984324
    },
    {
        "content": "<p>langref does not suggest anything of the sort, implementation however does.</p>",
        "id": 211194349,
        "sender_full_name": "nagisa",
        "timestamp": 1600984456
    },
    {
        "content": "<p>if we do end up promoting the target to T1 without stack probes, I think a I-unsound P-high+ issue should be filled against the target.</p>",
        "id": 211194408,
        "sender_full_name": "nagisa",
        "timestamp": 1600984506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> do all tier 1 targets have it? I'd be ok with filing an issue, regardless</p>",
        "id": 211280528,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601051138
    },
    {
        "content": "<p>yes.</p>",
        "id": 211281038,
        "sender_full_name": "nagisa",
        "timestamp": 1601051383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123586\">@nagisa</span> I think filing a ticket is the right thing</p>",
        "id": 211295564,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601058449
    },
    {
        "content": "<p>fair. what should our policy be for future T1 targets? Do we want to call out stack probes in particular or previously known soundness holes in general in our list of requirements in any way?</p>",
        "id": 211300044,
        "sender_full_name": "nagisa",
        "timestamp": 1601060468
    },
    {
        "content": "<p>The <a href=\"https://doc.rust-lang.org/nightly/rustc/platform-support.html#tier-1\">Tier 1 description</a> on the Platform Support page says that tests pass, and that new changes are predicated on tests passing, but it doesn't actually say \"absolutely for sure free of UB\". And clearly it <em>shouldn't</em> try to say that because we can't assure that. Heck, you can actually kill off stackprobes from being inserted to your program on existing tier1 targets just by using <code>no_std</code>.</p>\n<p>It's certainly \"something to fix\" and deserves an immediate P-high issue like you say, but shouldn't be a blocker.</p>",
        "id": 211338086,
        "sender_full_name": "Lokathor",
        "timestamp": 1601088473
    },
    {
        "content": "<p>I think movement through tier1 and tier2  should probably <em>eventually</em> become predicated on work on typical soundness issues, though often it may be sufficient for a given _velocity_ to be observed. Like... are there no tests that validate stack probes exist and are working in appropriate builds? If there were, the tests would fail instantly and the tier1 policy would block further progress on Rust until that bug is fixed.</p>",
        "id": 211345327,
        "sender_full_name": "Jubilee",
        "timestamp": 1601101618
    },
    {
        "content": "<p>I don't... think you can test that inside of rust.. right? You'd have to build a program and then examine the asm and then just know that a given sequence is doing what you expect it to be doing, and such a test would be arch-specific at best anyway because of differing assembly languages.</p>",
        "id": 211345562,
        "sender_full_name": "Lokathor",
        "timestamp": 1601102085
    },
    {
        "content": "<p>...the test harness lets you run arbitary Makefiles. :^)</p>",
        "id": 211345572,
        "sender_full_name": "Jubilee",
        "timestamp": 1601102114
    },
    {
        "content": "<p>sure but, this is a chicken and egg problem. we can't write a test that searches for correct stack probe assembly within the binary without already knowing what to look for, and if we had that we'd just put it into rustc in whatever location.</p>",
        "id": 211345650,
        "sender_full_name": "Lokathor",
        "timestamp": 1601102270
    },
    {
        "content": "<p>That Is A Completely Reasonable Point, yes.</p>",
        "id": 211345929,
        "sender_full_name": "Jubilee",
        "timestamp": 1601102708
    },
    {
        "content": "<p>codegen tests are sufficient to make sure we insert probes, correct operation of said probes is out of scope for such a test.</p>",
        "id": 211371425,
        "sender_full_name": "nagisa",
        "timestamp": 1601142655
    },
    {
        "content": "<p>and I personally on the side of _requiring_ certain features that are necessary to ensure soundness (note: very distinct from \"free of UB\") for T1.</p>",
        "id": 211371458,
        "sender_full_name": "nagisa",
        "timestamp": 1601142706
    },
    {
        "content": "<p>stack probes in particular are high-impact, comparatively, because they prevent seemingly non-malicious code from becoming a full blown vulnerability that could be used against users of the software, without anything invoking any UB.</p>",
        "id": 211371529,
        "sender_full_name": "nagisa",
        "timestamp": 1601142800
    },
    {
        "content": "<p>So IME the policy should include the list of functionalities that we know are almost universally necessary (unless similar result is achieved in some other manner)</p>",
        "id": 211371640,
        "sender_full_name": "nagisa",
        "timestamp": 1601142958
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"239881\">@Josh Triplett</span>  and <span class=\"user-mention\" data-user-id=\"121055\">@Pietro Albini</span> <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 211687735,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601415362
    },
    {
        "content": "<p>I think my opinion is to prefer that the policy is that we have a filed issue</p>",
        "id": 211687803,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601415391
    },
    {
        "content": "<p>but I do like the idea of calling out specific soundness features</p>",
        "id": 211687817,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601415400
    },
    {
        "content": "<p>I'm trying to decide now if I'm being too cavalier :)</p>",
        "id": 211687831,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601415411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116009\">@nikomatsakis</span> My current draft of the target tier policy RFC (not yet pushed) includes this:<br>\n+- The code generation backend for the target should not have deficiencies that</p>\n<ul>\n<li>invalidate Rust safety properties, as evaluated by the Rust compiler team.</li>\n<li>For example, if Rust relies on a specific code generation feature to support</li>\n<li>a memory safety property, the code generation for the target should support</li>\n<li>that feature. If this requirement does not hold, the target must clearly and</li>\n<li>prominently document any such limitations, such as via a footnote in the</li>\n<li>target tier list, and the Rust compiler team must be satisfied with the</li>\n<li>balance between these limitations and the difficulty of implementing the</li>\n<li>necessary features.</li>\n</ul>",
        "id": 211688312,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601415673
    },
    {
        "content": "<p>I would be happy with that footnote caveat</p>",
        "id": 211688523,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1601415784
    },
    {
        "content": "<p>I'm wondering how to encode that</p>",
        "id": 211688545,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1601415794
    },
    {
        "content": "<p>like, how wrong would a test like this be?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(not(target_arch = </span><span class=\"s\">\"x86_64\"</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"n\">compiler_error</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"this platform does not support stack probes\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 211688702,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1601415877
    },
    {
        "content": "<p>Appearing where?</p>",
        "id": 211688738,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601415900
    },
    {
        "content": "<p>in the compiler's test suite, with the blessed output of no errors</p>",
        "id": 211688757,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1601415911
    },
    {
        "content": "<p>As in,  the platform fails tests until fixed?</p>",
        "id": 211688774,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601415926
    },
    {
        "content": "<p>yes</p>",
        "id": 211688779,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1601415931
    },
    {
        "content": "<p>detecting that is manual instead of automatic tho</p>",
        "id": 211688798,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1601415947
    },
    {
        "content": "<p>I'd be perfectly fine with that. I can change \"such as via a footnote\" to \"such as via a failing test in the testsuite, and/or via a footnote ...\"</p>",
        "id": 211688811,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601415955
    },
    {
        "content": "<p>Just pushed a new version of the target tier RFC containing my current additions.</p>",
        "id": 211689060,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1601416093
    },
    {
        "content": "<p>I'll check it out tomorrow</p>",
        "id": 211689179,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1601416159
    },
    {
        "content": "<p>thanks <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>",
        "id": 211689191,
        "sender_full_name": "Pietro Albini",
        "timestamp": 1601416166
    },
    {
        "content": "<p>Wait isn't the point of tier1 that it passes all the tests?</p>",
        "id": 211693236,
        "sender_full_name": "Lokathor",
        "timestamp": 1601418611
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224471\">Lokathor</span> <a href=\"#narrow/stream/131828-t-compiler/topic/promote.20aarch64.20to.20tier1.20rust-lang.2Frfcs.232959/near/211693236\">said</a>:</p>\n<blockquote>\n<p>Wait isn't the point of tier1 that it passes all the tests?</p>\n</blockquote>\n<p>There has to be more nuance than that. A test for <code>x86_86</code> assembly will always fails for <code>aarch64</code>. You can add some condition to prevent the test from running, but then does it \"pass\"?</p>",
        "id": 211747029,
        "sender_full_name": "Jake Goulding",
        "timestamp": 1601465918
    }
]