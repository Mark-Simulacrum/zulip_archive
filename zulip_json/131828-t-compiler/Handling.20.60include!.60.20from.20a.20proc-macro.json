[
    {
        "content": "<p>In a proc-macro I'm trying to write, it seems i need to process the expansion result of <code>include!</code>.  However its argument is processed relative to the module file directory instead of the crate directory. Is it possible to mimic its behavior within a proc-macro?</p>",
        "id": 212518124,
        "sender_full_name": "Charles Lew",
        "timestamp": 1602050597
    },
    {
        "content": "<p>On nightly you have <a href=\"https://doc.rust-lang.org/proc_macro/struct.Span.html#method.source_file\">https://doc.rust-lang.org/proc_macro/struct.Span.html#method.source_file</a>, but on stable you'd need a <code>build.rs</code> script to parse the whole source code and pre-process the transformation.</p>\n<p>I'll take the chance that we are in a <code>t-compiler</code> stream to mention something that has been on my mind for a while: \"enhance\" most built-in macros to support a \"preprocessor\" / callback pattern to simplify chaining with other macros.<br>\nAn idea of a possible syntax to do that is showcased in (my) <code>::unstrigify</code> crate: <a href=\"https://docs.rs/unstringify/0.1.1/unstringify/macro.unstringify.html#remarks\">https://docs.rs/unstringify/0.1.1/unstringify/macro.unstringify.html#remarks</a></p>\n<p>So, here, for instance, it would be nice if <code>include!</code> accepted the following syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// or `with_include!` to avoid ambiguity:</span>\n<span class=\"n\">include</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"cp\">$code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">include</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"c1\">// code whereby all occurences of `$code` are replaced by the return value of `include!`</span>\n<span class=\"w\">     </span><span class=\"c1\">// For instance:</span>\n<span class=\"w\">    </span><span class=\"n\">my_outer_macro</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"cp\">$code</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 212535733,
        "sender_full_name": "Daniel Henry-Mantilla",
        "timestamp": 1602064175
    },
    {
        "content": "<p>thanks!</p>",
        "id": 212574195,
        "sender_full_name": "Charles Lew",
        "timestamp": 1602083944
    }
]